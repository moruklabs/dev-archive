name: Capture and Commit

on:
  schedule:
    - cron: '0 0 * * *'  # Runs once a day
  workflow_dispatch:

permissions:
  contents: write

jobs:
  capture-and-parse:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Install from requirements.txt

      - name: Run capture and parse script
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: python capture_and_parse.py

      - name: Upload captures as artifact
        uses: actions/upload-artifact@v4
        with:
          name: captures-artifact # Ensure consistent artifact name
          path: captures

  commit-captures:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: capture-and-parse # Run after capture job
    if: success() # Only run if capture-and-parse succeeded
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main # Or your default branch name
          token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for checkout too

      - name: Download captures artifact
        uses: actions/download-artifact@v4
        with:
          name: captures-artifact # Must match the upload-artifact name
          path: captures # Download to the 'captures' directory in the workspace

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Pull latest changes
        run: git pull --rebase origin main # Or your default branch name

      - name: Commit and push new captures
        run: |
          # The captures directory from the artifact is already in the right place
          git add captures/
          if git diff --staged --quiet; then
            echo "No new captures to commit."
            exit 0 # Success, no changes
          fi
          git commit -m "feat: Update captures $(date +'%Y-%m-%d %H:%M:%S UTC')"
          git push origin main # Or your default branch name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN for push
