<rss version="2.0">
  <channel>
    <title>GitHub Go Daily Trending</title>
    <description>Daily Trending of Go in GitHub</description>
    <pubDate>Wed, 15 Oct 2025 01:33:54 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>gorilla/websocket</title>
      <link>https://github.com/gorilla/websocket</link>
      <description>&lt;p&gt;Package gorilla/websocket is a fast, well-tested and widely used WebSocket implementation for Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gorilla WebSocket&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://godoc.org/github.com/gorilla/websocket"&gt;&lt;img src="https://godoc.org/github.com/gorilla/websocket?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://circleci.com/gh/gorilla/websocket"&gt;&lt;img src="https://circleci.com/gh/gorilla/websocket.svg?style=svg" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Gorilla WebSocket is a &lt;a href="http://golang.org/"&gt;Go&lt;/a&gt; implementation of the &lt;a href="http://www.rfc-editor.org/rfc/rfc6455.txt"&gt;WebSocket&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pkg.go.dev/github.com/gorilla/websocket?tab=doc"&gt;API Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla/websocket/tree/main/examples/chat"&gt;Chat example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla/websocket/tree/main/examples/command"&gt;Command example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla/websocket/tree/main/examples/echo"&gt;Client and server example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla/websocket/tree/main/examples/filewatch"&gt;File watch example&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;p&gt;The Gorilla WebSocket package provides a complete and tested implementation of the &lt;a href="http://www.rfc-editor.org/rfc/rfc6455.txt"&gt;WebSocket&lt;/a&gt; protocol. The package API is stable.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;go get github.com/gorilla/websocket
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Protocol Compliance&lt;/h3&gt; 
&lt;p&gt;The Gorilla WebSocket package passes the server tests in the &lt;a href="https://github.com/crossbario/autobahn-testsuite"&gt;Autobahn Test Suite&lt;/a&gt; using the application in the &lt;a href="https://github.com/gorilla/websocket/tree/main/examples/autobahn"&gt;examples/autobahn subdirectory&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prometheus/node_exporter</title>
      <link>https://github.com/prometheus/node_exporter</link>
      <description>&lt;p&gt;Exporter for machine metrics&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node exporter&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://circleci.com/gh/prometheus/node_exporter"&gt;&lt;img src="https://circleci.com/gh/prometheus/node_exporter/tree/master.svg?style=shield" alt="CircleCI" /&gt;&lt;/a&gt; &lt;img src="https://github.com/prometheus/node_exporter/actions/workflows/bsd.yml/badge.svg?sanitize=true" alt="bsd workflow" /&gt; &lt;img src="https://github.com/prometheus/node_exporter/actions/workflows/golangci-lint.yml/badge.svg?sanitize=true" alt="golangci-lint workflow" /&gt; &lt;a href="https://quay.io/repository/prometheus/node-exporter"&gt;&lt;img src="https://quay.io/repository/prometheus/node-exporter/status" alt="Docker Repository on Quay" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/prom/node-exporter/"&gt;&lt;img src="https://img.shields.io/docker/pulls/prom/node-exporter.svg?maxAge=604800" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/prometheus/node_exporter"&gt;&lt;img src="https://goreportcard.com/badge/github.com/prometheus/node_exporter" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Prometheus exporter for hardware and OS metrics exposed by *NIX kernels, written in Go with pluggable metric collectors.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/prometheus-community/windows_exporter"&gt;Windows exporter&lt;/a&gt; is recommended for Windows users. To expose NVIDIA GPU metrics, &lt;a href="https://github.com/NVIDIA/dcgm-exporter"&gt;prometheus-dcgm &lt;/a&gt; can be used.&lt;/p&gt; 
&lt;h2&gt;Installation and Usage&lt;/h2&gt; 
&lt;p&gt;If you are new to Prometheus and &lt;code&gt;node_exporter&lt;/code&gt; there is a &lt;a href="https://prometheus.io/docs/guides/node-exporter/"&gt;simple step-by-step guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;node_exporter&lt;/code&gt; listens on HTTP port 9100 by default. See the &lt;code&gt;--help&lt;/code&gt; output for more options.&lt;/p&gt; 
&lt;h3&gt;Ansible&lt;/h3&gt; 
&lt;p&gt;For automated installs with &lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt;, there is the &lt;a href="https://github.com/prometheus-community/ansible"&gt;Prometheus Community role&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;node_exporter&lt;/code&gt; is designed to monitor the host system. Deploying in containers requires extra care in order to avoid monitoring the container itself.&lt;/p&gt; 
&lt;p&gt;For situations where containerized deployment is needed, some extra flags must be used to allow the &lt;code&gt;node_exporter&lt;/code&gt; access to the host namespaces.&lt;/p&gt; 
&lt;p&gt;Be aware that any non-root mount points you want to monitor will need to be bind-mounted into the container.&lt;/p&gt; 
&lt;p&gt;If you start container for host monitoring, specify &lt;code&gt;path.rootfs&lt;/code&gt; argument. This argument must match path in bind-mount of host root. The node_exporter will use &lt;code&gt;path.rootfs&lt;/code&gt; as prefix to access host filesystem.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d \
  --net="host" \
  --pid="host" \
  -v "/:/host:ro,rslave" \
  quay.io/prometheus/node-exporter:latest \
  --path.rootfs=/host
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Docker compose, similar flag changes are needed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;---
version: '3.8'

services:
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On some systems, the &lt;code&gt;timex&lt;/code&gt; collector requires an additional Docker flag, &lt;code&gt;--cap-add=SYS_TIME&lt;/code&gt;, in order to access the required syscalls.&lt;/p&gt; 
&lt;h2&gt;Collectors&lt;/h2&gt; 
&lt;p&gt;There is varying support for collectors on each operating system. The tables below list all existing collectors and the supported systems.&lt;/p&gt; 
&lt;p&gt;Collectors are enabled by providing a &lt;code&gt;--collector.&amp;lt;name&amp;gt;&lt;/code&gt; flag. Collectors that are enabled by default can be disabled by providing a &lt;code&gt;--no-collector.&amp;lt;name&amp;gt;&lt;/code&gt; flag. To enable only some specific collector(s), use &lt;code&gt;--collector.disable-defaults --collector.&amp;lt;name&amp;gt; ...&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Include &amp;amp; Exclude flags&lt;/h3&gt; 
&lt;p&gt;A few collectors can be configured to include or exclude certain patterns using dedicated flags. The exclude flags are used to indicate "all except", while the include flags are used to say "none except". Note that these flags are mutually exclusive on collectors that support both.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-txt"&gt;--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;List:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Collector&lt;/th&gt; 
   &lt;th&gt;Scope&lt;/th&gt; 
   &lt;th&gt;Include Flag&lt;/th&gt; 
   &lt;th&gt;Exclude Flag&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;arp&lt;/td&gt; 
   &lt;td&gt;device&lt;/td&gt; 
   &lt;td&gt;--collector.arp.device-include&lt;/td&gt; 
   &lt;td&gt;--collector.arp.device-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu&lt;/td&gt; 
   &lt;td&gt;bugs&lt;/td&gt; 
   &lt;td&gt;--collector.cpu.info.bugs-include&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu&lt;/td&gt; 
   &lt;td&gt;flags&lt;/td&gt; 
   &lt;td&gt;--collector.cpu.info.flags-include&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;diskstats&lt;/td&gt; 
   &lt;td&gt;device&lt;/td&gt; 
   &lt;td&gt;--collector.diskstats.device-include&lt;/td&gt; 
   &lt;td&gt;--collector.diskstats.device-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ethtool&lt;/td&gt; 
   &lt;td&gt;device&lt;/td&gt; 
   &lt;td&gt;--collector.ethtool.device-include&lt;/td&gt; 
   &lt;td&gt;--collector.ethtool.device-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ethtool&lt;/td&gt; 
   &lt;td&gt;metrics&lt;/td&gt; 
   &lt;td&gt;--collector.ethtool.metrics-include&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;filesystem&lt;/td&gt; 
   &lt;td&gt;fs-types&lt;/td&gt; 
   &lt;td&gt;--collector.filesystem.fs-types-include&lt;/td&gt; 
   &lt;td&gt;--collector.filesystem.fs-types-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;filesystem&lt;/td&gt; 
   &lt;td&gt;mount-points&lt;/td&gt; 
   &lt;td&gt;--collector.filesystem.mount-points-include&lt;/td&gt; 
   &lt;td&gt;--collector.filesystem.mount-points-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;hwmon&lt;/td&gt; 
   &lt;td&gt;chip&lt;/td&gt; 
   &lt;td&gt;--collector.hwmon.chip-include&lt;/td&gt; 
   &lt;td&gt;--collector.hwmon.chip-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;hwmon&lt;/td&gt; 
   &lt;td&gt;sensor&lt;/td&gt; 
   &lt;td&gt;--collector.hwmon.sensor-include&lt;/td&gt; 
   &lt;td&gt;--collector.hwmon.sensor-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;interrupts&lt;/td&gt; 
   &lt;td&gt;name&lt;/td&gt; 
   &lt;td&gt;--collector.interrupts.name-include&lt;/td&gt; 
   &lt;td&gt;--collector.interrupts.name-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;netdev&lt;/td&gt; 
   &lt;td&gt;device&lt;/td&gt; 
   &lt;td&gt;--collector.netdev.device-include&lt;/td&gt; 
   &lt;td&gt;--collector.netdev.device-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;qdisk&lt;/td&gt; 
   &lt;td&gt;device&lt;/td&gt; 
   &lt;td&gt;--collector.qdisk.device-include&lt;/td&gt; 
   &lt;td&gt;--collector.qdisk.device-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;slabinfo&lt;/td&gt; 
   &lt;td&gt;slab-names&lt;/td&gt; 
   &lt;td&gt;--collector.slabinfo.slabs-include&lt;/td&gt; 
   &lt;td&gt;--collector.slabinfo.slabs-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sysctl&lt;/td&gt; 
   &lt;td&gt;all&lt;/td&gt; 
   &lt;td&gt;--collector.sysctl.include&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;systemd&lt;/td&gt; 
   &lt;td&gt;unit&lt;/td&gt; 
   &lt;td&gt;--collector.systemd.unit-include&lt;/td&gt; 
   &lt;td&gt;--collector.systemd.unit-exclude&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Enabled by default&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;OS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;arp&lt;/td&gt; 
   &lt;td&gt;Exposes ARP statistics from &lt;code&gt;/proc/net/arp&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bcache&lt;/td&gt; 
   &lt;td&gt;Exposes bcache statistics from &lt;code&gt;/sys/fs/bcache/&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bonding&lt;/td&gt; 
   &lt;td&gt;Exposes the number of configured and active slaves of Linux bonding interfaces.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;btrfs&lt;/td&gt; 
   &lt;td&gt;Exposes btrfs statistics&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;boottime&lt;/td&gt; 
   &lt;td&gt;Exposes system boot time derived from the &lt;code&gt;kern.boottime&lt;/code&gt; sysctl.&lt;/td&gt; 
   &lt;td&gt;Darwin, Dragonfly, FreeBSD, NetBSD, OpenBSD, Solaris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;conntrack&lt;/td&gt; 
   &lt;td&gt;Shows conntrack statistics (does nothing if no &lt;code&gt;/proc/sys/net/netfilter/&lt;/code&gt; present).&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu&lt;/td&gt; 
   &lt;td&gt;Exposes CPU statistics&lt;/td&gt; 
   &lt;td&gt;Darwin, Dragonfly, FreeBSD, Linux, Solaris, OpenBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpufreq&lt;/td&gt; 
   &lt;td&gt;Exposes CPU frequency statistics&lt;/td&gt; 
   &lt;td&gt;Linux, Solaris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;diskstats&lt;/td&gt; 
   &lt;td&gt;Exposes disk I/O statistics.&lt;/td&gt; 
   &lt;td&gt;Darwin, Linux, OpenBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;dmi&lt;/td&gt; 
   &lt;td&gt;Expose Desktop Management Interface (DMI) info from &lt;code&gt;/sys/class/dmi/id/&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;edac&lt;/td&gt; 
   &lt;td&gt;Exposes error detection and correction statistics.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;entropy&lt;/td&gt; 
   &lt;td&gt;Exposes available entropy.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;exec&lt;/td&gt; 
   &lt;td&gt;Exposes execution statistics.&lt;/td&gt; 
   &lt;td&gt;Dragonfly, FreeBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;fibrechannel&lt;/td&gt; 
   &lt;td&gt;Exposes fibre channel information and statistics from &lt;code&gt;/sys/class/fc_host/&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;filefd&lt;/td&gt; 
   &lt;td&gt;Exposes file descriptor statistics from &lt;code&gt;/proc/sys/fs/file-nr&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;filesystem&lt;/td&gt; 
   &lt;td&gt;Exposes filesystem statistics, such as disk space used.&lt;/td&gt; 
   &lt;td&gt;Darwin, Dragonfly, FreeBSD, Linux, OpenBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;hwmon&lt;/td&gt; 
   &lt;td&gt;Expose hardware monitoring and sensor data from &lt;code&gt;/sys/class/hwmon/&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;infiniband&lt;/td&gt; 
   &lt;td&gt;Exposes network statistics specific to InfiniBand and Intel OmniPath configurations.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ipvs&lt;/td&gt; 
   &lt;td&gt;Exposes IPVS status from &lt;code&gt;/proc/net/ip_vs&lt;/code&gt; and stats from &lt;code&gt;/proc/net/ip_vs_stats&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;loadavg&lt;/td&gt; 
   &lt;td&gt;Exposes load average.&lt;/td&gt; 
   &lt;td&gt;Darwin, Dragonfly, FreeBSD, Linux, NetBSD, OpenBSD, Solaris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mdadm&lt;/td&gt; 
   &lt;td&gt;Exposes statistics about devices in &lt;code&gt;/proc/mdstat&lt;/code&gt; (does nothing if no &lt;code&gt;/proc/mdstat&lt;/code&gt; present).&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;meminfo&lt;/td&gt; 
   &lt;td&gt;Exposes memory statistics.&lt;/td&gt; 
   &lt;td&gt;Darwin, Dragonfly, FreeBSD, Linux, OpenBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;netclass&lt;/td&gt; 
   &lt;td&gt;Exposes network interface info from &lt;code&gt;/sys/class/net/&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;netdev&lt;/td&gt; 
   &lt;td&gt;Exposes network interface statistics such as bytes transferred.&lt;/td&gt; 
   &lt;td&gt;Darwin, Dragonfly, FreeBSD, Linux, OpenBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;netisr&lt;/td&gt; 
   &lt;td&gt;Exposes netisr statistics&lt;/td&gt; 
   &lt;td&gt;FreeBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;netstat&lt;/td&gt; 
   &lt;td&gt;Exposes network statistics from &lt;code&gt;/proc/net/netstat&lt;/code&gt;. This is the same information as &lt;code&gt;netstat -s&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;nfs&lt;/td&gt; 
   &lt;td&gt;Exposes NFS client statistics from &lt;code&gt;/proc/net/rpc/nfs&lt;/code&gt;. This is the same information as &lt;code&gt;nfsstat -c&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;nfsd&lt;/td&gt; 
   &lt;td&gt;Exposes NFS kernel server statistics from &lt;code&gt;/proc/net/rpc/nfsd&lt;/code&gt;. This is the same information as &lt;code&gt;nfsstat -s&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;nvme&lt;/td&gt; 
   &lt;td&gt;Exposes NVMe info from &lt;code&gt;/sys/class/nvme/&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;os&lt;/td&gt; 
   &lt;td&gt;Expose OS release info from &lt;code&gt;/etc/os-release&lt;/code&gt; or &lt;code&gt;/usr/lib/os-release&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;any&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;powersupplyclass&lt;/td&gt; 
   &lt;td&gt;Exposes Power Supply statistics from &lt;code&gt;/sys/class/power_supply&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pressure&lt;/td&gt; 
   &lt;td&gt;Exposes pressure stall statistics from &lt;code&gt;/proc/pressure/&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux (kernel 4.20+ and/or &lt;a href="https://www.kernel.org/doc/html/latest/accounting/psi.html"&gt;CONFIG_PSI&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;rapl&lt;/td&gt; 
   &lt;td&gt;Exposes various statistics from &lt;code&gt;/sys/class/powercap&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;schedstat&lt;/td&gt; 
   &lt;td&gt;Exposes task scheduler statistics from &lt;code&gt;/proc/schedstat&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;selinux&lt;/td&gt; 
   &lt;td&gt;Exposes SELinux statistics.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sockstat&lt;/td&gt; 
   &lt;td&gt;Exposes various statistics from &lt;code&gt;/proc/net/sockstat&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;softnet&lt;/td&gt; 
   &lt;td&gt;Exposes statistics from &lt;code&gt;/proc/net/softnet_stat&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;stat&lt;/td&gt; 
   &lt;td&gt;Exposes various statistics from &lt;code&gt;/proc/stat&lt;/code&gt;. This includes boot time, forks and interrupts.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tapestats&lt;/td&gt; 
   &lt;td&gt;Exposes statistics from &lt;code&gt;/sys/class/scsi_tape&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;textfile&lt;/td&gt; 
   &lt;td&gt;Exposes statistics read from local disk. The &lt;code&gt;--collector.textfile.directory&lt;/code&gt; flag must be set.&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;any&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;thermal&lt;/td&gt; 
   &lt;td&gt;Exposes thermal statistics like &lt;code&gt;pmset -g therm&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Darwin&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;thermal_zone&lt;/td&gt; 
   &lt;td&gt;Exposes thermal zone &amp;amp; cooling device statistics from &lt;code&gt;/sys/class/thermal&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;time&lt;/td&gt; 
   &lt;td&gt;Exposes the current system time.&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;any&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;timex&lt;/td&gt; 
   &lt;td&gt;Exposes selected adjtimex(2) system call stats.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;udp_queues&lt;/td&gt; 
   &lt;td&gt;Exposes UDP total lengths of the rx_queue and tx_queue from &lt;code&gt;/proc/net/udp&lt;/code&gt; and &lt;code&gt;/proc/net/udp6&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;uname&lt;/td&gt; 
   &lt;td&gt;Exposes system information as provided by the uname system call.&lt;/td&gt; 
   &lt;td&gt;Darwin, FreeBSD, Linux, OpenBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;vmstat&lt;/td&gt; 
   &lt;td&gt;Exposes statistics from &lt;code&gt;/proc/vmstat&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;watchdog&lt;/td&gt; 
   &lt;td&gt;Exposes statistics from &lt;code&gt;/sys/class/watchdog&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;xfs&lt;/td&gt; 
   &lt;td&gt;Exposes XFS runtime statistics.&lt;/td&gt; 
   &lt;td&gt;Linux (kernel 4.4+)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;zfs&lt;/td&gt; 
   &lt;td&gt;Exposes &lt;a href="http://open-zfs.org/"&gt;ZFS&lt;/a&gt; performance statistics.&lt;/td&gt; 
   &lt;td&gt;FreeBSD, &lt;a href="http://zfsonlinux.org/"&gt;Linux&lt;/a&gt;, Solaris&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Disabled by default&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;node_exporter&lt;/code&gt; also implements a number of collectors that are disabled by default. Reasons for this vary by collector, and may include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;High cardinality&lt;/li&gt; 
 &lt;li&gt;Prolonged runtime that exceeds the Prometheus &lt;code&gt;scrape_interval&lt;/code&gt; or &lt;code&gt;scrape_timeout&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Significant resource demands on the host&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can enable additional collectors as desired by adding them to your init system's or service supervisor's startup configuration for &lt;code&gt;node_exporter&lt;/code&gt; but caution is advised. Enable at most one at a time, testing first on a non-production system, then by hand on a single production node. When enabling additional collectors, you should carefully monitor the change by observing the &lt;code&gt; scrape_duration_seconds&lt;/code&gt; metric to ensure that collection completes and does not time out. In addition, monitor the &lt;code&gt;scrape_samples_post_metric_relabeling&lt;/code&gt; metric to see the changes in cardinality.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;OS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;buddyinfo&lt;/td&gt; 
   &lt;td&gt;Exposes statistics of memory fragments as reported by /proc/buddyinfo.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cgroups&lt;/td&gt; 
   &lt;td&gt;A summary of the number of active and enabled cgroups&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu_vulnerabilities&lt;/td&gt; 
   &lt;td&gt;Exposes CPU vulnerability information from sysfs.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;devstat&lt;/td&gt; 
   &lt;td&gt;Exposes device statistics&lt;/td&gt; 
   &lt;td&gt;Dragonfly, FreeBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;drm&lt;/td&gt; 
   &lt;td&gt;Expose GPU metrics using sysfs / DRM, &lt;code&gt;amdgpu&lt;/code&gt; is the only driver which exposes this information through DRM&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;drbd&lt;/td&gt; 
   &lt;td&gt;Exposes Distributed Replicated Block Device statistics (to version 8.4)&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ethtool&lt;/td&gt; 
   &lt;td&gt;Exposes network interface information and network driver statistics equivalent to &lt;code&gt;ethtool&lt;/code&gt;, &lt;code&gt;ethtool -S&lt;/code&gt;, and &lt;code&gt;ethtool -i&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;interrupts&lt;/td&gt; 
   &lt;td&gt;Exposes detailed interrupts statistics.&lt;/td&gt; 
   &lt;td&gt;Linux, OpenBSD&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ksmd&lt;/td&gt; 
   &lt;td&gt;Exposes kernel and system statistics from &lt;code&gt;/sys/kernel/mm/ksm&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;lnstat&lt;/td&gt; 
   &lt;td&gt;Exposes stats from &lt;code&gt;/proc/net/stat/&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;logind&lt;/td&gt; 
   &lt;td&gt;Exposes session counts from &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/logind/"&gt;logind&lt;/a&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;meminfo_numa&lt;/td&gt; 
   &lt;td&gt;Exposes memory statistics from &lt;code&gt;/sys/devices/system/node/node[0-9]*/meminfo&lt;/code&gt;, &lt;code&gt;/sys/devices/system/node/node[0-9]*/numastat&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mountstats&lt;/td&gt; 
   &lt;td&gt;Exposes filesystem statistics from &lt;code&gt;/proc/self/mountstats&lt;/code&gt;. Exposes detailed NFS client statistics.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;network_route&lt;/td&gt; 
   &lt;td&gt;Exposes the routing table as metrics&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pcidevice&lt;/td&gt; 
   &lt;td&gt;Exposes pci devices' information including their link status and parent devices.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;perf&lt;/td&gt; 
   &lt;td&gt;Exposes perf based metrics (Warning: Metrics are dependent on kernel configuration and settings).&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;processes&lt;/td&gt; 
   &lt;td&gt;Exposes aggregate process statistics from &lt;code&gt;/proc&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;qdisc&lt;/td&gt; 
   &lt;td&gt;Exposes &lt;a href="https://en.wikipedia.org/wiki/Network_scheduler#Linux_kernel"&gt;queuing discipline&lt;/a&gt; statistics&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;slabinfo&lt;/td&gt; 
   &lt;td&gt;Exposes slab statistics from &lt;code&gt;/proc/slabinfo&lt;/code&gt;. Note that permission of &lt;code&gt;/proc/slabinfo&lt;/code&gt; is usually 0400, so set it appropriately.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;softirqs&lt;/td&gt; 
   &lt;td&gt;Exposes detailed softirq statistics from &lt;code&gt;/proc/softirqs&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sysctl&lt;/td&gt; 
   &lt;td&gt;Expose sysctl values from &lt;code&gt;/proc/sys&lt;/code&gt;. Use &lt;code&gt;--collector.sysctl.include(-info)&lt;/code&gt; to configure.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swap&lt;/td&gt; 
   &lt;td&gt;Expose swap information from &lt;code&gt;/proc/swaps&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;systemd&lt;/td&gt; 
   &lt;td&gt;Exposes service and system status from &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tcpstat&lt;/td&gt; 
   &lt;td&gt;Exposes TCP connection status information from &lt;code&gt;/proc/net/tcp&lt;/code&gt; and &lt;code&gt;/proc/net/tcp6&lt;/code&gt;. (Warning: the current version has potential performance issues in high load situations.)&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;wifi&lt;/td&gt; 
   &lt;td&gt;Exposes WiFi device and station statistics.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;xfrm&lt;/td&gt; 
   &lt;td&gt;Exposes statistics from &lt;code&gt;/proc/net/xfrm_stat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;zoneinfo&lt;/td&gt; 
   &lt;td&gt;Exposes NUMA memory zone metrics.&lt;/td&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Deprecated&lt;/h3&gt; 
&lt;p&gt;These collectors are deprecated and will be removed in the next major release.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;OS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ntp&lt;/td&gt; 
   &lt;td&gt;Exposes local NTP daemon health to check &lt;a href="https://raw.githubusercontent.com/prometheus/node_exporter/master/docs/TIME.md"&gt;time&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;any&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;runit&lt;/td&gt; 
   &lt;td&gt;Exposes service status from &lt;a href="http://smarden.org/runit/"&gt;runit&lt;/a&gt;.&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;any&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;supervisord&lt;/td&gt; 
   &lt;td&gt;Exposes service status from &lt;a href="http://supervisord.org/"&gt;supervisord&lt;/a&gt;.&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;any&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Perf Collector&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;perf&lt;/code&gt; collector may not work out of the box on some Linux systems due to kernel configuration and security settings. To allow access, set the following &lt;code&gt;sysctl&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sysctl -w kernel.perf_event_paranoid=X
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;2 allow only user-space measurements (default since Linux 4.6).&lt;/li&gt; 
 &lt;li&gt;1 allow both kernel and user measurements (default before Linux 4.6).&lt;/li&gt; 
 &lt;li&gt;0 allow access to CPU-specific data but not raw tracepoint samples.&lt;/li&gt; 
 &lt;li&gt;-1 no restrictions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Depending on the configured value different metrics will be available, for most cases &lt;code&gt;0&lt;/code&gt; will provide the most complete set. For more information see &lt;a href="http://man7.org/linux/man-pages/man2/perf_event_open.2.html"&gt;&lt;code&gt;man 2 perf_event_open&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;By default, the &lt;code&gt;perf&lt;/code&gt; collector will only collect metrics of the CPUs that &lt;code&gt;node_exporter&lt;/code&gt; is running on (ie &lt;a href="https://golang.org/pkg/runtime/#NumCPU"&gt;&lt;code&gt;runtime.NumCPU&lt;/code&gt;&lt;/a&gt;. If this is insufficient (e.g. if you run &lt;code&gt;node_exporter&lt;/code&gt; with its CPU affinity set to specific CPUs), you can specify a list of alternate CPUs by using the &lt;code&gt;--collector.perf.cpus&lt;/code&gt; flag. For example, to collect metrics on CPUs 2-6, you would specify: &lt;code&gt;--collector.perf --collector.perf.cpus=2-6&lt;/code&gt;. The CPU configuration is zero indexed and can also take a stride value; e.g. &lt;code&gt;--collector.perf --collector.perf.cpus=1-10:5&lt;/code&gt; would collect on CPUs 1, 5, and 10.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;perf&lt;/code&gt; collector is also able to collect &lt;a href="https://www.kernel.org/doc/html/latest/core-api/tracepoint.html"&gt;tracepoint&lt;/a&gt; counts when using the &lt;code&gt;--collector.perf.tracepoint&lt;/code&gt; flag. Tracepoints can be found using &lt;a href="http://man7.org/linux/man-pages/man1/perf.1.html"&gt;&lt;code&gt;perf list&lt;/code&gt;&lt;/a&gt; or from debugfs. And example usage of this would be &lt;code&gt;--collector.perf.tracepoint="sched:sched_process_exec"&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Sysctl Collector&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;sysctl&lt;/code&gt; collector can be enabled with &lt;code&gt;--collector.sysctl&lt;/code&gt;. It supports exposing numeric sysctl values as metrics using the &lt;code&gt;--collector.sysctl.include&lt;/code&gt; flag and string values as info metrics by using the &lt;code&gt;--collector.sysctl.include-info&lt;/code&gt; flag. The flags can be repeated. For sysctl with multiple numeric values, an optional mapping can be given to expose each value as its own metric. Otherwise an &lt;code&gt;index&lt;/code&gt; label is used to identify the different fields.&lt;/p&gt; 
&lt;h4&gt;Examples&lt;/h4&gt; 
&lt;h5&gt;Numeric values&lt;/h5&gt; 
&lt;h6&gt;Single values&lt;/h6&gt; 
&lt;p&gt;Using &lt;code&gt;--collector.sysctl.include=vm.user_reserve_kbytes&lt;/code&gt;: &lt;code&gt;vm.user_reserve_kbytes = 131072&lt;/code&gt; -&amp;gt; &lt;code&gt;node_sysctl_vm_user_reserve_kbytes 131072&lt;/code&gt;&lt;/p&gt; 
&lt;h6&gt;Multiple values&lt;/h6&gt; 
&lt;p&gt;A sysctl can contain multiple values, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;net.ipv4.tcp_rmem = 4096	131072	6291456
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;code&gt;--collector.sysctl.include=net.ipv4.tcp_rmem&lt;/code&gt; the collector will expose:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;node_sysctl_net_ipv4_tcp_rmem{index="0"} 4096
node_sysctl_net_ipv4_tcp_rmem{index="1"} 131072
node_sysctl_net_ipv4_tcp_rmem{index="2"} 6291456
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the indexes have defined meaning like in this case, the values can be mapped to multiple metrics by appending the mapping to the --collector.sysctl.include flag: Using &lt;code&gt;--collector.sysctl.include=net.ipv4.tcp_rmem:min,default,max&lt;/code&gt; the collector will expose:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;node_sysctl_net_ipv4_tcp_rmem_min 4096
node_sysctl_net_ipv4_tcp_rmem_default 131072
node_sysctl_net_ipv4_tcp_rmem_max 6291456
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;String values&lt;/h5&gt; 
&lt;p&gt;String values need to be exposed as info metric. The user selects them by using the &lt;code&gt;--collector.sysctl.include-info&lt;/code&gt; flag.&lt;/p&gt; 
&lt;h6&gt;Single values&lt;/h6&gt; 
&lt;p&gt;&lt;code&gt;kernel.core_pattern = core&lt;/code&gt; -&amp;gt; &lt;code&gt;node_sysctl_info{key="kernel.core_pattern_info", value="core"} 1&lt;/code&gt;&lt;/p&gt; 
&lt;h6&gt;Multiple values&lt;/h6&gt; 
&lt;p&gt;Given the following sysctl:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;kernel.seccomp.actions_avail = kill_process kill_thread trap errno trace log allow
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Setting &lt;code&gt;--collector.sysctl.include-info=kernel.seccomp.actions_avail&lt;/code&gt; will yield:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;node_sysctl_info{key="kernel.seccomp.actions_avail", index="0", value="kill_process"} 1
node_sysctl_info{key="kernel.seccomp.actions_avail", index="1", value="kill_thread"} 1
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Textfile Collector&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;textfile&lt;/code&gt; collector is similar to the &lt;a href="https://github.com/prometheus/pushgateway"&gt;Pushgateway&lt;/a&gt;, in that it allows exporting of statistics from batch jobs. It can also be used to export static metrics, such as what role a machine has. The Pushgateway should be used for service-level metrics. The &lt;code&gt;textfile&lt;/code&gt; module is for metrics that are tied to a machine.&lt;/p&gt; 
&lt;p&gt;To use it, set the &lt;code&gt;--collector.textfile.directory&lt;/code&gt; flag on the &lt;code&gt;node_exporter&lt;/code&gt; commandline. The collector will parse all files in that directory matching the glob &lt;code&gt;*.prom&lt;/code&gt; using the &lt;a href="http://prometheus.io/docs/instrumenting/exposition_formats/"&gt;text format&lt;/a&gt;. &lt;strong&gt;Note:&lt;/strong&gt; Timestamps are not supported.&lt;/p&gt; 
&lt;p&gt;To atomically push completion time for a cron job:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo my_batch_job_completion_time $(date +%s) &amp;gt; /path/to/directory/my_batch_job.prom.$$
mv /path/to/directory/my_batch_job.prom.$$ /path/to/directory/my_batch_job.prom
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To statically set roles for a machine using labels:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo 'role{role="application_server"} 1' &amp;gt; /path/to/directory/role.prom.$$
mv /path/to/directory/role.prom.$$ /path/to/directory/role.prom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Filtering enabled collectors&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;node_exporter&lt;/code&gt; will expose all metrics from enabled collectors by default. This is the recommended way to collect metrics to avoid errors when comparing metrics of different families.&lt;/p&gt; 
&lt;p&gt;For advanced use the &lt;code&gt;node_exporter&lt;/code&gt; can be passed an optional list of collectors to filter metrics. The parameters &lt;code&gt;collect[]&lt;/code&gt; and &lt;code&gt;exclude[]&lt;/code&gt; can be used multiple times (but cannot be combined). In Prometheus configuration you can use this syntax under the &lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#%3Cscrape_config%3E"&gt;scrape config&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Collect only &lt;code&gt;cpu&lt;/code&gt; and &lt;code&gt;meminfo&lt;/code&gt; collector metrics:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  params:
    collect[]:
      - cpu
      - meminfo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Collect all enabled collector metrics but exclude &lt;code&gt;netdev&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  params:
    exclude[]:
      - netdev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can be useful for having different Prometheus servers collect specific metrics from nodes.&lt;/p&gt; 
&lt;h2&gt;Development building and running&lt;/h2&gt; 
&lt;p&gt;Prerequisites:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://golang.org/dl/"&gt;Go compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RHEL/CentOS: &lt;code&gt;glibc-static&lt;/code&gt; package.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Building:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/prometheus/node_exporter.git
cd node_exporter
make build
./node_exporter &amp;lt;flags&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see all available configuration flags:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./node_exporter -h
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Running tests&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;TLS endpoint&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The exporter supports TLS via a new web configuration file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;./node_exporter --web.config.file=web-config.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/prometheus/exporter-toolkit/raw/master/docs/web-configuration.md"&gt;exporter-toolkit web-configuration&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jesseduffield/lazygit</title>
      <link>https://github.com/jesseduffield/lazygit</link>
      <description>&lt;p&gt;simple terminal UI for git commands&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=lazygit_20231023"&gt; 
  &lt;div&gt; 
   &lt;img src="https://github.com/warpdotdev/brand-assets/raw/main/Github/Sponsor/Warp-Github-LG-02.png?raw=true" width="400" alt="Warp" /&gt; 
  &lt;/div&gt; &lt;b&gt;Warp, the intelligent terminal&lt;/b&gt; &lt;br /&gt; &lt;b&gt;Available for MacOS and Linux&lt;/b&gt; &lt;br /&gt; 
  &lt;div&gt; 
   &lt;sup&gt;Visit&amp;nbsp;warp.dev&amp;nbsp;to learn more.&lt;/sup&gt; 
  &lt;/div&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;a href="https://tuple.app/lazygit"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/tuple.png" width="400" alt="Tuple" /&gt; 
  &lt;/div&gt; &lt;b&gt;Tuple, the premier screen sharing app for developers on macOS and Windows.&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.subble.com"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/subble.webp" width="400" alt="Subble" /&gt; 
  &lt;/div&gt; &lt;b&gt;I (Jesse) co-founded Subble to save your company time and money by finding unused and over-provisioned SaaS licences. Check it out!&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;img width="536" src="https://user-images.githubusercontent.com/8456633/174470852-339b5011-5800-4bb9-a628-ff230aa8cd4e.png" /&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;A simple terminal UI for git commands &lt;br /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/jesseduffield/lazygit/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/jesseduffield/lazygit/total" alt="GitHub Releases" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/jesseduffield/lazygit"&gt;&lt;img src="https://goreportcard.com/badge/github.com/jesseduffield/lazygit" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_grade"&gt;&lt;img src="https://app.codacy.com/project/badge/Grade/f46416b715d74622895657935fcada21" alt="Codacy Badge" /&gt;&lt;/a&gt; &lt;a href="https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_coverage"&gt;&lt;img src="https://app.codacy.com/project/badge/Coverage/f46416b715d74622895657935fcada21" alt="Codacy Badge" /&gt;&lt;/a&gt; &lt;a href="https://golangci-lint.run/"&gt;&lt;img src="https://img.shields.io/badge/linted%20by-golangci--lint-brightgreen" alt="golangci-lint" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jesseduffield/lazygit/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/tag/jesseduffield/lazygit?color=blue" alt="GitHub tag" /&gt;&lt;/a&gt; &lt;a href="https://formulae.brew.sh/formula/lazygit"&gt;&lt;img src="https://img.shields.io/homebrew/v/lazygit?color=blue" alt="homebrew" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/commit_and_push-compressed.gif" alt="commit_and_push" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p align="center"&gt; Maintenance of this project is made possible by all the &lt;a href="https://github.com/jesseduffield/lazygit/graphs/contributors"&gt;contributors&lt;/a&gt; and &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsors&lt;/a&gt;. If you'd like to sponsor this project and have your avatar or company logo appear below &lt;a href="https://github.com/sponsors/jesseduffield"&gt;click here&lt;/a&gt;. 💙 &lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;!-- sponsors --&gt;&lt;a href="https://github.com/intabulas"&gt;&lt;img src="https://github.com/intabulas.png" width="60px" alt="Mark Lussier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/peppy"&gt;&lt;img src="https://github.com/peppy.png" width="60px" alt="Dean Herbert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/piot"&gt;&lt;img src="https://github.com/piot.png" width="60px" alt="Peter Bjorklund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/rgwood"&gt;&lt;img src="https://github.com/rgwood.png" width="60px" alt="Reilly Wood" /&gt;&lt;/a&gt;&lt;a href="https://github.com/oliverguenther"&gt;&lt;img src="https://github.com/oliverguenther.png" width="60px" alt="Oliver Günther" /&gt;&lt;/a&gt;&lt;a href="https://github.com/pawanjay176"&gt;&lt;img src="https://github.com/pawanjay176.png" width="60px" alt="Pawan Dhananjay" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bdach"&gt;&lt;img src="https://github.com/bdach.png" width="60px" alt="Bartłomiej Dach" /&gt;&lt;/a&gt;&lt;a href="https://github.com/naoey"&gt;&lt;img src="https://github.com/naoey.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/carstengehling"&gt;&lt;img src="https://github.com/carstengehling.png" width="60px" alt="Carsten Gehling" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ceuk"&gt;&lt;img src="https://github.com/ceuk.png" width="60px" alt="CEUK" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Xetera"&gt;&lt;img src="https://github.com/Xetera.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/HoldenLucas"&gt;&lt;img src="https://github.com/HoldenLucas.png" width="60px" alt="Holden Lucas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nartc"&gt;&lt;img src="https://github.com/nartc.png" width="60px" alt="Chau Tran" /&gt;&lt;/a&gt;&lt;a href="https://github.com/matejcik"&gt;&lt;img src="https://github.com/matejcik.png" width="60px" alt="matejcik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lucatume"&gt;&lt;img src="https://github.com/lucatume.png" width="60px" alt="theAverageDev (Luca Tumedei)" /&gt;&lt;/a&gt;&lt;a href="https://github.com/IvanZuy"&gt;&lt;img src="https://github.com/IvanZuy.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nicholascloud"&gt;&lt;img src="https://github.com/nicholascloud.png" width="60px" alt="Nicholas Cloud" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ava1ar"&gt;&lt;img src="https://github.com/ava1ar.png" width="60px" alt="Aliaksandr Stelmachonak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/minidfx"&gt;&lt;img src="https://github.com/minidfx.png" width="60px" alt="Burgy Benjamin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/JoeKlemmer"&gt;&lt;img src="https://github.com/JoeKlemmer.png" width="60px" alt="Joe Klemmer" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tobi"&gt;&lt;img src="https://github.com/tobi.png" width="60px" alt="Tobias Lütke" /&gt;&lt;/a&gt;&lt;a href="https://github.com/benbfortis"&gt;&lt;img src="https://github.com/benbfortis.png" width="60px" alt="Ben Beaumont" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jakewarren"&gt;&lt;img src="https://github.com/jakewarren.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tgpholly"&gt;&lt;img src="https://github.com/tgpholly.png" width="60px" alt="Holly" /&gt;&lt;/a&gt;&lt;a href="https://github.com/socketbox"&gt;&lt;img src="https://github.com/socketbox.png" width="60px" alt="Casey Boettcher" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bitprophet"&gt;&lt;img src="https://github.com/bitprophet.png" width="60px" alt="Jeff Forcier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tayleighr"&gt;&lt;img src="https://github.com/tayleighr.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Novakov"&gt;&lt;img src="https://github.com/Novakov.png" width="60px" alt="Maciej T. Nowak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nekhaevskiy"&gt;&lt;img src="https://github.com/nekhaevskiy.png" width="60px" alt="Yury" /&gt;&lt;/a&gt;&lt;a href="https://github.com/reivilibre"&gt;&lt;img src="https://github.com/reivilibre.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/andreaskurth"&gt;&lt;img src="https://github.com/andreaskurth.png" width="60px" alt="Andreas Kurth" /&gt;&lt;/a&gt;&lt;a href="https://github.com/BSteffaniak"&gt;&lt;img src="https://github.com/BSteffaniak.png" width="60px" alt="Braden Steffaniak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ameddin73"&gt;&lt;img src="https://github.com/ameddin73.png" width="60px" alt="Alex Meddin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jordan-gillard"&gt;&lt;img src="https://github.com/jordan-gillard.png" width="60px" alt="Jordan Gillard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/smangels"&gt;&lt;img src="https://github.com/smangels.png" width="60px" alt="Sebastian" /&gt;&lt;/a&gt;&lt;a href="https://github.com/amslezak"&gt;&lt;img src="https://github.com/amslezak.png" width="60px" alt="Andy Slezak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mkock"&gt;&lt;img src="https://github.com/mkock.png" width="60px" alt="Martin Kock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jessealama"&gt;&lt;img src="https://github.com/jessealama.png" width="60px" alt="Jesse Alama" /&gt;&lt;/a&gt;&lt;a href="https://github.com/danielkokott"&gt;&lt;img src="https://github.com/danielkokott.png" width="60px" alt="Daniel Kokott" /&gt;&lt;/a&gt;&lt;a href="https://github.com/heijmans"&gt;&lt;img src="https://github.com/heijmans.png" width="60px" alt="Jan Heijmans" /&gt;&lt;/a&gt;&lt;a href="https://github.com/knowald"&gt;&lt;img src="https://github.com/knowald.png" width="60px" alt="Kevin Nowald" /&gt;&lt;/a&gt;&lt;a href="https://github.com/omarluq"&gt;&lt;img src="https://github.com/omarluq.png" width="60px" alt="Omar Luq" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ethanjli"&gt;&lt;img src="https://github.com/ethanjli.png" width="60px" alt="Ethan Li" /&gt;&lt;/a&gt;&lt;a href="https://github.com/phubaba"&gt;&lt;img src="https://github.com/phubaba.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/logichaos"&gt;&lt;img src="https://github.com/logichaos.png" width="60px" alt="Maxi" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neunkasulle"&gt;&lt;img src="https://github.com/neunkasulle.png" width="60px" alt="Jan Zenkner" /&gt;&lt;/a&gt;&lt;a href="https://github.com/RVxLab"&gt;&lt;img src="https://github.com/RVxLab.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/FrederickGeek8"&gt;&lt;img src="https://github.com/FrederickGeek8.png" width="60px" alt="Frederick Morlock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ezdac"&gt;&lt;img src="https://github.com/ezdac.png" width="60px" alt="Maximilian Langenfeld" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dbuls"&gt;&lt;img src="https://github.com/dbuls.png" width="60px" alt="Davis Buls" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lppassos"&gt;&lt;img src="https://github.com/lppassos.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neilcode"&gt;&lt;img src="https://github.com/neilcode.png" width="60px" alt="Neil Lambert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dhh"&gt;&lt;img src="https://github.com/dhh.png" width="60px" alt="David Heinemeier Hansson" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ethanfischer"&gt;&lt;img src="https://github.com/ethanfischer.png" width="60px" alt="Ethan Fischer" /&gt;&lt;/a&gt;&lt;a href="https://github.com/poshboytl"&gt;&lt;img src="https://github.com/poshboytl.png" width="60px" alt="Terry Tai" /&gt;&lt;/a&gt;&lt;a href="https://github.com/roesnera"&gt;&lt;img src="https://github.com/roesnera.png" width="60px" alt="Adam Roesner" /&gt;&lt;/a&gt;&lt;a href="https://github.com/seven1m"&gt;&lt;img src="https://github.com/seven1m.png" width="60px" alt="Tim Morgan" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sgoridotla1"&gt;&lt;img src="https://github.com/sgoridotla1.png" width="60px" alt="Max Shypulniak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ADIX7"&gt;&lt;img src="https://github.com/ADIX7.png" width="60px" alt="Kovács Ádám" /&gt;&lt;/a&gt;&lt;a href="https://github.com/slowdub"&gt;&lt;img src="https://github.com/slowdub.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/serranomorante"&gt;&lt;img src="https://github.com/serranomorante.png" width="60px" alt="Patricio Serrano" /&gt;&lt;/a&gt;&lt;a href="https://github.com/kiriDevs"&gt;&lt;img src="https://github.com/kiriDevs.png" width="60px" alt="Kiri" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bjornevik"&gt;&lt;img src="https://github.com/bjornevik.png" width="60px" alt="John Even Bjørnevik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/moberst"&gt;&lt;img src="https://github.com/moberst.png" width="60px" alt="Michael Oberst" /&gt;&lt;/a&gt;&lt;a href="https://github.com/stianh"&gt;&lt;img src="https://github.com/stianh.png" width="60px" alt="Stian Hegglund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/adam-e-trepanier"&gt;&lt;img src="https://github.com/adam-e-trepanier.png" width="60px" alt="Adam Trepanier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/arkalon76"&gt;&lt;img src="https://github.com/arkalon76.png" width="60px" alt="Kenth Fagerlund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Djuuu"&gt;&lt;img src="https://github.com/Djuuu.png" width="60px" alt="Julien Tardot" /&gt;&lt;/a&gt;&lt;a href="https://github.com/antikytheraton"&gt;&lt;img src="https://github.com/antikytheraton.png" width="60px" alt="Aaron Arredondo" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ellord"&gt;&lt;img src="https://github.com/ellord.png" width="60px" alt="Ellord Tayag" /&gt;&lt;/a&gt;&lt;a href="https://github.com/EdgarPost"&gt;&lt;img src="https://github.com/EdgarPost.png" width="60px" alt="Edgar Post-Buijs" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sbc64"&gt;&lt;img src="https://github.com/sbc64.png" width="60px" alt="sbc64" /&gt;&lt;/a&gt;&lt;a href="https://github.com/caillou"&gt;&lt;img src="https://github.com/caillou.png" width="60px" alt="Pierre Spring" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mebezac"&gt;&lt;img src="https://github.com/mebezac.png" width="60px" alt="Zac Clay" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Tom94"&gt;&lt;img src="https://github.com/Tom94.png" width="60px" alt="Thomas Müller" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ccssmnn"&gt;&lt;img src="https://github.com/ccssmnn.png" width="60px" alt="Carl Assmann" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ognevsd"&gt;&lt;img src="https://github.com/ognevsd.png" width="60px" alt="Sergey Ognev" /&gt;&lt;/a&gt;&lt;a href="https://github.com/moodyhunter"&gt;&lt;img src="https://github.com/moodyhunter.png" width="60px" alt="Moody Liu" /&gt;&lt;/a&gt;&lt;a href="https://github.com/code-hunger"&gt;&lt;img src="https://github.com/code-hunger.png" width="60px" alt="Alex G" /&gt;&lt;/a&gt;&lt;a href="https://github.com/elithper"&gt;&lt;img src="https://github.com/elithper.png" width="60px" alt="Michael Howard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/LasseBloch"&gt;&lt;img src="https://github.com/LasseBloch.png" width="60px" alt="Lasse Bloch Lauritsen" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lmarburger"&gt;&lt;img src="https://github.com/lmarburger.png" width="60px" alt="Larry Marburger" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dbrockman"&gt;&lt;img src="https://github.com/dbrockman.png" width="60px" alt="David Brockman" /&gt;&lt;/a&gt;&lt;a href="https://github.com/slavshik"&gt;&lt;img src="https://github.com/slavshik.png" width="60px" alt="Alexander Slavschik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/aidalgol"&gt;&lt;img src="https://github.com/aidalgol.png" width="60px" alt="Aidan Gauland" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mbienkowsk"&gt;&lt;img src="https://github.com/mbienkowsk.png" width="60px" alt="Maksym Bieńkowski" /&gt;&lt;/a&gt;&lt;a href="https://github.com/joshuawootonn"&gt;&lt;img src="https://github.com/joshuawootonn.png" width="60px" alt="Joshua Wootonn" /&gt;&lt;/a&gt;&lt;a href="https://github.com/I4nJ"&gt;&lt;img src="https://github.com/I4nJ.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/gurbindersingh"&gt;&lt;img src="https://github.com/gurbindersingh.png" width="60px" alt="Gurbinder Singh" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sandviklee"&gt;&lt;img src="https://github.com/sandviklee.png" width="60px" alt="Simon Sandvik Lee" /&gt;&lt;/a&gt;&lt;a href="https://github.com/glagnar"&gt;&lt;img src="https://github.com/glagnar.png" width="60px" alt="Thomas Gilbert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/skrzepto"&gt;&lt;img src="https://github.com/skrzepto.png" width="60px" alt="Szymon Mucha" /&gt;&lt;/a&gt;&lt;a href="https://github.com/TimShilov"&gt;&lt;img src="https://github.com/TimShilov.png" width="60px" alt="Tim Shilov" /&gt;&lt;/a&gt;&lt;a href="https://github.com/unnawut"&gt;&lt;img src="https://github.com/unnawut.png" width="60px" alt="Unnawut Leepaisalsuwanna" /&gt;&lt;/a&gt;&lt;a href="https://github.com/wortmanb"&gt;&lt;img src="https://github.com/wortmanb.png" width="60px" alt="Bret Wortman" /&gt;&lt;/a&gt;&lt;a href="https://github.com/andre-lameirinhas"&gt;&lt;img src="https://github.com/andre-lameirinhas.png" width="60px" alt="André Lameirinhas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/SVappsLAB"&gt;&lt;img src="https://github.com/SVappsLAB.png" width="60px" alt="Scott Velez" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ooojustin"&gt;&lt;img src="https://github.com/ooojustin.png" width="60px" alt="justin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mayfieldiv"&gt;&lt;img src="https://github.com/mayfieldiv.png" width="60px" alt="Mayfield" /&gt;&lt;/a&gt;&lt;a href="https://github.com/somaholiday"&gt;&lt;img src="https://github.com/somaholiday.png" width="60px" alt="Soma Holiday" /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;h2&gt;Elevator Pitch&lt;/h2&gt; 
&lt;p&gt;Rant time: You've heard it before, git is &lt;em&gt;powerful&lt;/em&gt;, but what good is that power when everything is so damn hard to do? Interactive rebasing requires you to edit a goddamn TODO file in your editor? &lt;em&gt;Are you kidding me?&lt;/em&gt; To stage part of a file you need to use a command line program to step through each hunk and if a hunk can't be split down any further but contains code you don't want to stage, you have to edit an arcane patch file &lt;em&gt;by hand&lt;/em&gt;? &lt;em&gt;Are you KIDDING me?!&lt;/em&gt; Sometimes you get asked to stash your changes when switching branches only to realise that after you switch and unstash that there weren't even any conflicts and it would have been fine to just checkout the branch directly? &lt;em&gt;YOU HAVE GOT TO BE KIDDING ME!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;If you're a mere mortal like me and you're tired of hearing how powerful git is when in your daily life it's a powerful pain in your ass, lazygit might be for you.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#sponsors"&gt;Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#elevator-pitch"&gt;Elevator Pitch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#table-of-contents"&gt;Table of contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#features"&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#stage-individual-lines"&gt;Stage individual lines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#interactive-rebase"&gt;Interactive Rebase&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#cherry-pick"&gt;Cherry-pick&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#bisect"&gt;Bisect&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#nuke-the-working-tree"&gt;Nuke the working tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#amend-an-old-commit"&gt;Amend an old commit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#filter"&gt;Filter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#invoke-a-custom-command"&gt;Invoke a custom command&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#worktrees"&gt;Worktrees&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#rebase-magic-custom-patches"&gt;Rebase magic (custom patches)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#rebase-from-marked-base-commit"&gt;Rebase from marked base commit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#undo"&gt;Undo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#commit-graph"&gt;Commit graph&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#compare-two-commits"&gt;Compare two commits&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#binary-releases"&gt;Binary Releases&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#dev-container-feature"&gt;Dev container&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#homebrew"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#macports"&gt;MacPorts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#void-linux"&gt;Void Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#scoop-windows"&gt;Scoop (Windows)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#arch-linux"&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#fedora-and-rhel"&gt;Fedora and RHEL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#solus-linux"&gt;Solus Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#debian-and-ubuntu"&gt;Debian and Ubuntu&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#funtoo-linux"&gt;Funtoo Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#gentoo-linux"&gt;Gentoo Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#freebsd"&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#termux"&gt;Termux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#conda"&gt;Conda&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#go"&gt;Go&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#chocolatey-windows"&gt;Chocolatey (Windows)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#winget-windows-10-1709-or-later"&gt;Winget (Windows 10 1709 or later)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#manual"&gt;Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#usage"&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#keybindings"&gt;Keybindings&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#changing-directory-on-exit"&gt;Changing Directory On Exit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#undoredo"&gt;Undo/Redo&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#configuration"&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#custom-pagers"&gt;Custom Pagers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#custom-commands"&gt;Custom Commands&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#git-flow-support"&gt;Git flow support&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#contributing"&gt;Contributing&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#debugging-locally"&gt;Debugging Locally&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#donate"&gt;Donate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#faq"&gt;FAQ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#what-do-the-commit-colors-represent"&gt;What do the commit colors represent?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#shameless-plug"&gt;Shameless Plug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#alternatives"&gt;Alternatives&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Lazygit is not my fulltime job but it is a hefty part time job so if you want to support the project please consider &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsoring me&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Stage individual lines&lt;/h3&gt; 
&lt;p&gt;Press space on the selected line to stage it, or press &lt;code&gt;v&lt;/code&gt; to start selecting a range of lines. You can also press &lt;code&gt;a&lt;/code&gt; to select the entirety of the current hunk.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/stage_lines-compressed.gif" alt="stage_lines" /&gt;&lt;/p&gt; 
&lt;h3&gt;Interactive Rebase&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;i&lt;/code&gt; to start an interactive rebase. Then squash (&lt;code&gt;s&lt;/code&gt;), fixup (&lt;code&gt;f&lt;/code&gt;), drop (&lt;code&gt;d&lt;/code&gt;), edit (&lt;code&gt;e&lt;/code&gt;), move up (&lt;code&gt;ctrl+k&lt;/code&gt;) or move down (&lt;code&gt;ctrl+j&lt;/code&gt;) any of TODO commits, before continuing the rebase by bringing up the rebase options menu with &lt;code&gt;m&lt;/code&gt; and then selecting &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also perform any these actions as a once-off (e.g. pressing &lt;code&gt;s&lt;/code&gt; on a commit to squash it) without explicitly starting a rebase.&lt;/p&gt; 
&lt;p&gt;This demo also uses shift+down to select a range of commits to move and fixup.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/interactive_rebase-compressed.gif" alt="interactive_rebase" /&gt;&lt;/p&gt; 
&lt;h3&gt;Cherry-pick&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;shift+c&lt;/code&gt; on a commit to copy it and press &lt;code&gt;shift+v&lt;/code&gt; to paste (cherry-pick) it.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/cherry_pick-compressed.gif" alt="cherry_pick" /&gt;&lt;/p&gt; 
&lt;h3&gt;Bisect&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;b&lt;/code&gt; in the commits view to mark a commit as good/bad in order to begin a git bisect.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/bisect-compressed.gif" alt="bisect" /&gt;&lt;/p&gt; 
&lt;h3&gt;Nuke the working tree&lt;/h3&gt; 
&lt;p&gt;For when you really want to just get rid of anything that shows up when you run &lt;code&gt;git status&lt;/code&gt; (and yes that includes dirty submodules) &lt;a href="https://www.youtube.com/watch?v=N4E2B_k2Bss"&gt;kidpix style&lt;/a&gt;, press &lt;code&gt;shift+d&lt;/code&gt; to bring up the reset options menu and then select the 'nuke' option.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/nuke_working_tree-compressed.gif" alt="Nuke working tree" /&gt;&lt;/p&gt; 
&lt;h3&gt;Amend an old commit&lt;/h3&gt; 
&lt;p&gt;Pressing &lt;code&gt;shift+a&lt;/code&gt; on any commit will amend that commit with the currently staged changes (running an interactive rebase in the background).&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/amend_old_commit-compressed.gif" alt="amend_old_commit" /&gt;&lt;/p&gt; 
&lt;h3&gt;Filter&lt;/h3&gt; 
&lt;p&gt;You can filter a view with &lt;code&gt;/&lt;/code&gt;. Here we filter down our branches view and then hit &lt;code&gt;enter&lt;/code&gt; to view its commits.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/filter-compressed.gif" alt="filter" /&gt;&lt;/p&gt; 
&lt;h3&gt;Invoke a custom command&lt;/h3&gt; 
&lt;p&gt;Lazygit has a very flexible &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Command_Keybindings.md"&gt;custom command system&lt;/a&gt;. In this example a custom command is defined which emulates the built-in branch checkout action.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/custom_command-compressed.gif" alt="custom_command" /&gt;&lt;/p&gt; 
&lt;h3&gt;Worktrees&lt;/h3&gt; 
&lt;p&gt;You can create worktrees to have multiple branches going at once without the need for stashing or creating WIP commits when switching between them. Press &lt;code&gt;w&lt;/code&gt; in the branches view to create a worktree from the selected branch and switch to it.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/worktree_create_from_branches-compressed.gif" alt="worktree_create_from_branches" /&gt;&lt;/p&gt; 
&lt;h3&gt;Rebase magic (custom patches)&lt;/h3&gt; 
&lt;p&gt;You can build a custom patch from an old commit and then remove the patch from the commit, split out a new commit, apply the patch in reverse to the index, and more.&lt;/p&gt; 
&lt;p&gt;In this example we have a redundant comment that we want to remove from an old commit. We hit &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; on the commit to view its files, then &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; on a file to focus the patch, then &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; to add the comment line to our custom patch, and then &lt;code&gt;ctrl+p&lt;/code&gt; to view the custom patch options; selecting to remove the patch from the current commit.&lt;/p&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://youtu.be/4XaToVut_hs"&gt;Rebase magic Youtube tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/custom_patch-compressed.gif" alt="custom_patch" /&gt;&lt;/p&gt; 
&lt;h3&gt;Rebase from marked base commit&lt;/h3&gt; 
&lt;p&gt;Say you're on a feature branch that was itself branched off of the develop branch, and you've decided you'd rather be branching off the master branch. You need a way to rebase only the commits from your feature branch. In this demo we check to see which was the last commit on the develop branch, then press &lt;code&gt;shift+b&lt;/code&gt; to mark that commit as our base commit, then press &lt;code&gt;r&lt;/code&gt; on the master branch to rebase onto it, only bringing across the commits from our feature branch. Then we push our changes with &lt;code&gt;shift+p&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/rebase_onto-compressed.gif" alt="rebase_onto" /&gt;&lt;/p&gt; 
&lt;h3&gt;Undo&lt;/h3&gt; 
&lt;p&gt;You can undo the last action by pressing &lt;code&gt;z&lt;/code&gt; and redo with &lt;code&gt;ctrl+z&lt;/code&gt;. Here we drop a couple of commits and then undo the actions. Undo uses the reflog which is specific to commits and branches so we can't undo changes to the working tree or stash.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Undoing.md"&gt;More info&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/undo-compressed.gif" alt="undo" /&gt;&lt;/p&gt; 
&lt;h3&gt;Commit graph&lt;/h3&gt; 
&lt;p&gt;When viewing the commit graph in an enlarged window (use &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; to cycle screen modes), the commit graph is shown. Colours correspond to the commit authors, and as you navigate down the graph, the parent commits of the selected commit are highlighted.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/commit_graph-compressed.gif" alt="commit_graph" /&gt;&lt;/p&gt; 
&lt;h3&gt;Compare two commits&lt;/h3&gt; 
&lt;p&gt;If you press &lt;code&gt;shift+w&lt;/code&gt; on a commit (or branch/ref) a menu will open that allows you to mark that commit so that any other commit you select will be diffed against it. Once you've selected the second commit, you'll see the diff in the main view and if you press &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; you'll see the files of the diff. You can press &lt;code&gt;shift+w&lt;/code&gt; to view the diff menu again to see options like reversing the diff direction or exiting diff mode. You can also exit diff mode by pressing &lt;code&gt;&amp;lt;escape&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/diff_commits-compressed.gif" alt="diff_commits" /&gt;&lt;/p&gt; 
&lt;h2&gt;Tutorials&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/CPLdltN7wgE"&gt;&lt;img src="https://i.imgur.com/sVEktDn.png" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/CPLdltN7wgE"&gt;15 Lazygit Features in 15 Minutes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/VDXvbHZYeKY"&gt;Basics Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/4XaToVut_hs"&gt;Rebase Magic Tutorial&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/lazygit/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/lazygit.svg?columns=3" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Most of the above packages are maintained by third parties so be sure to vet them yourself and confirm that the maintainer is a trustworthy looking person who attends local sports games and gives back to their communities with barbeque fundraisers etc&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Binary Releases&lt;/h3&gt; 
&lt;p&gt;For Windows, Mac OS(10.12+) or Linux, you can download a binary release &lt;a href="https://raw.githubusercontent.com/jesseduffield/releases"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Dev container feature&lt;/h3&gt; 
&lt;p&gt;If you want to use lazygit in e.g. one of your GitHub Codespaces, there is a third-party &lt;a href="https://github.com/GeorgOfenbeck/features/tree/main/src/lazygit-linuxbinary"&gt;dev container feature&lt;/a&gt; based on the binary releases mentioned above.&lt;/p&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;It works with Linux, too.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MacPorts&lt;/h3&gt; 
&lt;p&gt;Latest version built from github releases. Tap:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo port install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Void Linux&lt;/h3&gt; 
&lt;p&gt;Packages for Void Linux are available in the distro repo&lt;/p&gt; 
&lt;p&gt;They follow upstream latest releases&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo xbps-install -S lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href="https://scoop.sh/"&gt;scoop&lt;/a&gt;. It's in the &lt;code&gt;extras&lt;/code&gt; bucket:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Add the extras bucket
scoop bucket add extras

# Install lazygit
scoop install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;gah (Linux and Mac OS)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href="https://github.com/marverix/gah/"&gt;gah&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gah install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;Packages for Arch Linux are available via pacman and AUR (Arch User Repository).&lt;/p&gt; 
&lt;p&gt;There are two packages. The stable one which is built with the latest release and the git version which builds from the most recent commit.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stable: &lt;code&gt;sudo pacman -S lazygit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Development: &lt;a href="https://aur.archlinux.org/packages/lazygit-git/"&gt;https://aur.archlinux.org/packages/lazygit-git/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instruction of how to install AUR content can be found here: &lt;a href="https://wiki.archlinux.org/index.php/Arch_User_Repository"&gt;https://wiki.archlinux.org/index.php/Arch_User_Repository&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Fedora / Amazon Linux 2023 / CentOS Stream&lt;/h3&gt; 
&lt;p&gt;Packages for Fedora, Amazon Linux 2023 and CentOS Stream are available via &lt;a href="https://copr.fedorainfracloud.org/coprs/dejan/lazygit/"&gt;Copr&lt;/a&gt; (Cool Other Package Repo).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo dnf copr enable dejan/lazygit
sudo dnf install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These packages are built using the RPM spec file located here: &lt;a href="https://codeberg.org/dejan/rpm-lazygit"&gt;https://codeberg.org/dejan/rpm-lazygit&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You should be able to build RPMs for Fedora 41 or older, and other Fedora derivatives using the SRPM (Source RPM) file that you can grab from the latest COPR build.&lt;/p&gt; 
&lt;h3&gt;Solus Linux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo eopkg install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; 
&lt;p&gt;For &lt;strong&gt;Debian 13 "Trixie", Sid&lt;/strong&gt;, and later, or &lt;strong&gt;Ubuntu 25.10 "Questing Quokka"&lt;/strong&gt; and later:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;strong&gt;Debian 12 "Bookworm", Ubuntu 25.04 "Plucky Puffin"&lt;/strong&gt; and earlier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": *"v\K[^"]*')
curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
tar xf lazygit.tar.gz lazygit
sudo install lazygit -D -t /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Verify the correct installation of lazygit:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;lazygit --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Funtoo Linux&lt;/h3&gt; 
&lt;p&gt;Funtoo Linux has an autogenerated lazygit package in &lt;a href="https://github.com/funtoo/dev-kit/tree/1.4-release/dev-vcs/lazygit"&gt;dev-kit&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo emerge dev-vcs/lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Gentoo Linux&lt;/h3&gt; 
&lt;p&gt;Lazygit is not (yet) in main Gentoo portage, however an ebuild is available in &lt;a href="https://github.com/gentoo-mirror/guru/tree/master/dev-vcs/lazygit"&gt;GURU overlay&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can either add the overlay to your system and install lazygit as usual:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo eselect repository enable guru
sudo emaint sync -r guru
sudo emerge dev-vcs/lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE&lt;/h3&gt; 
&lt;p&gt;The lazygit package is currently built in &lt;a href="https://build.opensuse.org/package/show/devel:languages:go/lazygit"&gt;devel:languages:go/lazygit&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To install lazygit on openSUSE Tumbleweed run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/openSUSE_Factory/devel:languages:go.repo
sudo zypper ref &amp;amp;&amp;amp; sudo zypper in lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install lazygit on openSUSE Leap run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;source /etc/os-release
sudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/$VERSION_ID/devel:languages:go.repo
sudo zypper ref &amp;amp;&amp;amp; sudo zypper in lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NixOS&lt;/h3&gt; 
&lt;h4&gt;Using lazygit from nixpkgs&lt;/h4&gt; 
&lt;p&gt;On NixOS, lazygit is packaged with nix and distributed via nixpkgs. You can try lazygit without installing it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix-shell -p lazygit
# or with flakes enabled
nix run nixpkgs#lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can add lazygit to your &lt;code&gt;configuration.nix&lt;/code&gt; using the &lt;code&gt;environment.systemPackages&lt;/code&gt; option. More details can be found via NixOS search &lt;a href="https://search.nixos.org/"&gt;page&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Using the official lazygit flake&lt;/h4&gt; 
&lt;p&gt;This repository includes a nix flake that provides the latest development version and additional development tools:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Run lazygit directly from the repository:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix run github:jesseduffield/lazygit
# or from a local clone
nix run .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Build lazygit from source:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix build github:jesseduffield/lazygit
# or from a local clone
nix build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Development environment:&lt;/strong&gt; For contributors, the flake provides a development shell with Go toolchain, development tools, and dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix develop github:jesseduffield/lazygit
# or from a local clone
nix develop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The development shell includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go toolchain&lt;/li&gt; 
 &lt;li&gt;git and make&lt;/li&gt; 
 &lt;li&gt;Proper environment variables for development&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Using in other flakes:&lt;/strong&gt; The flake also provides an overlay for easy integration into other flake-based projects:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-nix"&gt;{
  inputs.lazygit.url = "github:jesseduffield/lazygit";

  outputs = { self, nixpkgs, lazygit }: {
    # Use the overlay
    nixpkgs.overlays = [ lazygit.overlays.default ];
  };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Flox&lt;/h3&gt; 
&lt;p&gt;Lazygit can be installed into a Flox environment as follows.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;flox install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More details about Flox can be found on &lt;a href="https://flox.dev/"&gt;their website&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pkg install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Termux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;apt install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Conda&lt;/h3&gt; 
&lt;p&gt;Released versions are available for different platforms, see &lt;a href="https://anaconda.org/conda-forge/lazygit"&gt;https://anaconda.org/conda-forge/lazygit&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;conda install -c conda-forge lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Go&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install github.com/jesseduffield/lazygit@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note: If you get an error claiming that lazygit cannot be found or is not defined, you may need to add &lt;code&gt;~/go/bin&lt;/code&gt; to your $PATH (MacOS/Linux), or &lt;code&gt;%HOME%\go\bin&lt;/code&gt; (Windows). Not to be mistaken for &lt;code&gt;C:\Go\bin&lt;/code&gt; (which is for Go's own binaries, not apps like lazygit).&lt;/p&gt; 
&lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Winget (Windows 10 1709 or later)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using the &lt;code&gt;winget&lt;/code&gt; command in the Windows Terminal with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;winget install -e --id=JesseDuffield.lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You'll need to &lt;a href="https://golang.org/doc/install"&gt;install Go&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/jesseduffield/lazygit.git
cd lazygit
go install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;go run main.go&lt;/code&gt; to compile and run in one go (pun definitely intended)&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Call &lt;code&gt;lazygit&lt;/code&gt; in your terminal inside a git repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want, you can also add an alias for this with &lt;code&gt;echo "alias lg='lazygit'" &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt; (or whichever rc file you're using).&lt;/p&gt; 
&lt;h3&gt;Keybindings&lt;/h3&gt; 
&lt;p&gt;You can check out the list of keybindings &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/keybindings"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Changing Directory On Exit&lt;/h3&gt; 
&lt;p&gt;If you change repos in lazygit and want your shell to change directory into that repo on exiting lazygit, add this to your &lt;code&gt;~/.zshrc&lt;/code&gt; (or other rc file):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;lg()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
            rm -f $LAZYGIT_NEW_DIR_FILE &amp;gt; /dev/null
    fi
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;code&gt;source ~/.zshrc&lt;/code&gt; and from now on when you call &lt;code&gt;lg&lt;/code&gt; and exit you'll switch directories to whatever you were in inside lazygit. To override this behaviour you can exit using &lt;code&gt;shift+Q&lt;/code&gt; rather than just &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Undo/Redo&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Undoing.md"&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Check out the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Config.md"&gt;configuration docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Custom Pagers&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Pagers.md"&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Custom Commands&lt;/h3&gt; 
&lt;p&gt;If lazygit is missing a feature, there's a good chance you can implement it yourself with a custom command!&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Command_Keybindings.md"&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Git flow support&lt;/h3&gt; 
&lt;p&gt;Lazygit supports &lt;a href="https://github.com/nvie/gitflow"&gt;Gitflow&lt;/a&gt; if you have it installed. To understand how the Gitflow model works check out Vincent Driessen's original &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;post&lt;/a&gt; explaining it. To view Gitflow options from within Lazygit, press &lt;code&gt;i&lt;/code&gt; from within the branches view.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We love your input! Please check out the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;. For contributor discussion about things not better discussed here in the repo, join the &lt;a href="https://discord.gg/ehwFt2t4wt"&gt;discord channel&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/ehwFt2t4wt"&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/discord.png" width="75" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Check out this &lt;a href="https://www.youtube.com/watch?v=kNavnhzZHtk"&gt;video&lt;/a&gt; walking through the creation of a small feature in lazygit if you want an idea of where to get started.&lt;/p&gt; 
&lt;h3&gt;Debugging Locally&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;lazygit --debug&lt;/code&gt; in one terminal tab and &lt;code&gt;lazygit --logs&lt;/code&gt; in another to view the program and its log output side by side&lt;/p&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you would like to support the development of lazygit, consider &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsoring me&lt;/a&gt; (github is matching all donations dollar-for-dollar for 12 months)&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;What do the commit colors represent?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Green: the commit is included in the master branch&lt;/li&gt; 
 &lt;li&gt;Yellow: the commit is not included in the master branch&lt;/li&gt; 
 &lt;li&gt;Red: the commit has not been pushed to the upstream branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Shameless Plug&lt;/h2&gt; 
&lt;p&gt;If you want to see what I (Jesse) am up to in terms of development, follow me on &lt;a href="https://twitter.com/DuffieldJesse"&gt;twitter&lt;/a&gt; or check out my &lt;a href="https://jesseduffield.com/"&gt;blog&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;p&gt;If you find that lazygit doesn't quite satisfy your requirements, these may be a better fit:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Extrawurst/gitui"&gt;GitUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jonas/tig"&gt;tig&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jesseduffield/lazydocker</title>
      <link>https://github.com/jesseduffield/lazydocker</link>
      <description>&lt;p&gt;The lazier way to manage everything docker&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=lazydocker_20231023"&gt; 
  &lt;div&gt; 
   &lt;img src="https://github.com/warpdotdev/brand-assets/raw/main/Github/Sponsor/Warp-Github-LG-02.png?raw=true" width="400" alt="Warp" /&gt; 
  &lt;/div&gt; &lt;b&gt;Warp, the intelligent terminal&lt;/b&gt; &lt;br /&gt; &lt;b&gt;Available for MacOS and Linux&lt;/b&gt; &lt;br /&gt; 
  &lt;div&gt; 
   &lt;sup&gt;Visit&amp;nbsp;warp.dev&amp;nbsp;to learn more.&lt;/sup&gt; 
  &lt;/div&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;a href="https://tuple.app/lazydocker"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/assets/tuple.png" width="400" alt="Tuple" /&gt; 
  &lt;/div&gt; &lt;b&gt;Tuple, the premier screen sharing app for developers on macOS and Windows.&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.subble.com"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/assets/subble.webp" width="400" alt="Subble" /&gt; 
  &lt;/div&gt; &lt;b&gt;I (Jesse) co-founded Subble to save your company time and money by finding unused and over-provisioned SaaS licences. Check it out!&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;img src="https://user-images.githubusercontent.com/8456633/59972109-8e9c8480-95cc-11e9-8350-38f7f86ba76d.png" /&gt; &lt;/p&gt; 
&lt;p&gt;A simple terminal UI for both docker and docker-compose, written in Go with the &lt;a href="https://github.com/jroimartin/gocui" title="gocui"&gt;gocui&lt;/a&gt; library.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/jesseduffield/lazygit/workflows/Continuous%20Integration/badge.svg?sanitize=true" alt="CI" /&gt; &lt;a href="https://goreportcard.com/report/github.com/jesseduffield/lazydocker"&gt;&lt;img src="https://goreportcard.com/badge/github.com/jesseduffield/lazydocker" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://golangci.com"&gt;&lt;img src="https://golangci.com/badges/github.com/jesseduffield/lazydocker.svg?sanitize=true" alt="GolangCI" /&gt;&lt;/a&gt; &lt;a href="http://godoc.org/github.com/jesseduffield/lazydocker"&gt;&lt;img src="https://godoc.org/github.com/jesseduffield/lazydocker?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/repo-size/jesseduffield/lazydocker" alt="GitHub repo size" /&gt; &lt;a href="https://github.com/jesseduffield/lazydocker/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/jesseduffield/lazydocker/total" alt="GitHub Releases" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jesseduffield/lazydocker/releases/latest"&gt;&lt;img src="https://img.shields.io/github/tag/jesseduffield/lazydocker.svg?sanitize=true" alt="GitHub tag" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Homebrew/homebrew-core/raw/master/Formula/lazydocker.rb"&gt;&lt;img src="https://img.shields.io/homebrew/v/lazydocker" alt="homebrew" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/demo3.gif" alt="Gif" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/NICqQPxwJWw"&gt;Demo&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p align="center"&gt; Maintenance of this project is made possible by all the &lt;a href="https://github.com/jesseduffield/lazydocker/graphs/contributors"&gt;contributors&lt;/a&gt; and &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsors&lt;/a&gt;. If you'd like to sponsor this project and have your avatar or company logo appear below &lt;a href="https://github.com/sponsors/jesseduffield"&gt;click here&lt;/a&gt;. 💙 &lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;!-- sponsors --&gt;&lt;a href="https://github.com/intabulas"&gt;&lt;img src="https://github.com/intabulas.png" width="60px" alt="Mark Lussier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/peppy"&gt;&lt;img src="https://github.com/peppy.png" width="60px" alt="Dean Herbert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/piot"&gt;&lt;img src="https://github.com/piot.png" width="60px" alt="Peter Bjorklund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/rgwood"&gt;&lt;img src="https://github.com/rgwood.png" width="60px" alt="Reilly Wood" /&gt;&lt;/a&gt;&lt;a href="https://github.com/oliverguenther"&gt;&lt;img src="https://github.com/oliverguenther.png" width="60px" alt="Oliver Günther" /&gt;&lt;/a&gt;&lt;a href="https://github.com/pawanjay176"&gt;&lt;img src="https://github.com/pawanjay176.png" width="60px" alt="Pawan Dhananjay" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bdach"&gt;&lt;img src="https://github.com/bdach.png" width="60px" alt="Bartłomiej Dach" /&gt;&lt;/a&gt;&lt;a href="https://github.com/davidklsn"&gt;&lt;img src="https://github.com/davidklsn.png" width="60px" alt="David Karlsson" /&gt;&lt;/a&gt;&lt;a href="https://github.com/carstengehling"&gt;&lt;img src="https://github.com/carstengehling.png" width="60px" alt="Carsten Gehling" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ceuk"&gt;&lt;img src="https://github.com/ceuk.png" width="60px" alt="CEUK" /&gt;&lt;/a&gt;&lt;a href="https://github.com/akospwc"&gt;&lt;img src="https://github.com/akospwc.png" width="60px" alt="Akos Putz" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Xetera"&gt;&lt;img src="https://github.com/Xetera.png" width="60px" alt="Xetera" /&gt;&lt;/a&gt;&lt;a href="https://github.com/HoldenLucas"&gt;&lt;img src="https://github.com/HoldenLucas.png" width="60px" alt="Holden Lucas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nartc"&gt;&lt;img src="https://github.com/nartc.png" width="60px" alt="Chau Tran" /&gt;&lt;/a&gt;&lt;a href="https://github.com/matejcik"&gt;&lt;img src="https://github.com/matejcik.png" width="60px" alt="matejcik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lucatume"&gt;&lt;img src="https://github.com/lucatume.png" width="60px" alt="theAverageDev (Luca Tumedei)" /&gt;&lt;/a&gt;&lt;a href="https://github.com/IvanZuy"&gt;&lt;img src="https://github.com/IvanZuy.png" width="60px" alt="Ivan Zaitsev" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nicholascloud"&gt;&lt;img src="https://github.com/nicholascloud.png" width="60px" alt="Nicholas Cloud" /&gt;&lt;/a&gt;&lt;a href="https://github.com/PhotonQuantum"&gt;&lt;img src="https://github.com/PhotonQuantum.png" width="60px" alt="LightQuantum" /&gt;&lt;/a&gt;&lt;a href="https://github.com/GitSquared"&gt;&lt;img src="https://github.com/GitSquared.png" width="60px" alt="Gabriel Saillard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ava1ar"&gt;&lt;img src="https://github.com/ava1ar.png" width="60px" alt="Aliaksandr Stelmachonak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/minidfx"&gt;&lt;img src="https://github.com/minidfx.png" width="60px" alt="Burgy Benjamin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/JoeKlemmer"&gt;&lt;img src="https://github.com/JoeKlemmer.png" width="60px" alt="Joe Klemmer" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tobi"&gt;&lt;img src="https://github.com/tobi.png" width="60px" alt="Tobias Lütke" /&gt;&lt;/a&gt;&lt;a href="https://github.com/benbfortis"&gt;&lt;img src="https://github.com/benbfortis.png" width="60px" alt="Ben Beaumont" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jakewarren"&gt;&lt;img src="https://github.com/jakewarren.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tgpholly"&gt;&lt;img src="https://github.com/tgpholly.png" width="60px" alt="Holly" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jisantuc"&gt;&lt;img src="https://github.com/jisantuc.png" width="60px" alt="James Santucci" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bitprophet"&gt;&lt;img src="https://github.com/bitprophet.png" width="60px" alt="Jeff Forcier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tayleighr"&gt;&lt;img src="https://github.com/tayleighr.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Novakov"&gt;&lt;img src="https://github.com/Novakov.png" width="60px" alt="Maciej T. Nowak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/farzadmf"&gt;&lt;img src="https://github.com/farzadmf.png" width="60px" alt="Farzad Majidfayyaz" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nekhaevskiy"&gt;&lt;img src="https://github.com/nekhaevskiy.png" width="60px" alt="Yury" /&gt;&lt;/a&gt;&lt;a href="https://github.com/reivilibre"&gt;&lt;img src="https://github.com/reivilibre.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/andreaskurth"&gt;&lt;img src="https://github.com/andreaskurth.png" width="60px" alt="Andreas Kurth" /&gt;&lt;/a&gt;&lt;a href="https://github.com/BSteffaniak"&gt;&lt;img src="https://github.com/BSteffaniak.png" width="60px" alt="Braden Steffaniak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jordan-gillard"&gt;&lt;img src="https://github.com/jordan-gillard.png" width="60px" alt="Jordan Gillard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/smangels"&gt;&lt;img src="https://github.com/smangels.png" width="60px" alt="Sebastian" /&gt;&lt;/a&gt;&lt;a href="https://github.com/George-Spanos"&gt;&lt;img src="https://github.com/George-Spanos.png" width="60px" alt="George Spanos" /&gt;&lt;/a&gt;&lt;a href="https://github.com/frantisekstanko"&gt;&lt;img src="https://github.com/frantisekstanko.png" width="60px" alt="Frantisek Stanko" /&gt;&lt;/a&gt;&lt;a href="https://github.com/amslezak"&gt;&lt;img src="https://github.com/amslezak.png" width="60px" alt="Andy Slezak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mkock"&gt;&lt;img src="https://github.com/mkock.png" width="60px" alt="Martin Kock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/illarionvk"&gt;&lt;img src="https://github.com/illarionvk.png" width="60px" alt="Illarion Koperski" /&gt;&lt;/a&gt;&lt;a href="https://github.com/WhiteBlackGoose"&gt;&lt;img src="https://github.com/WhiteBlackGoose.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jessealama"&gt;&lt;img src="https://github.com/jessealama.png" width="60px" alt="Jesse Alama" /&gt;&lt;/a&gt;&lt;a href="https://github.com/codacy"&gt;&lt;img src="https://github.com/codacy.png" width="60px" alt="Codacy" /&gt;&lt;/a&gt;&lt;a href="https://github.com/colbr"&gt;&lt;img src="https://github.com/colbr.png" width="60px" alt="Brett" /&gt;&lt;/a&gt;&lt;a href="https://github.com/heijmans"&gt;&lt;img src="https://github.com/heijmans.png" width="60px" alt="Jan Heijmans" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Vesther"&gt;&lt;img src="https://github.com/Vesther.png" width="60px" alt="Kevin Nowald" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sempruijs"&gt;&lt;img src="https://github.com/sempruijs.png" width="60px" alt="sem pruijs" /&gt;&lt;/a&gt;&lt;a href="https://github.com/omarluq"&gt;&lt;img src="https://github.com/omarluq.png" width="60px" alt="Omar Luq " /&gt;&lt;/a&gt;&lt;a href="https://github.com/ethanjli"&gt;&lt;img src="https://github.com/ethanjli.png" width="60px" alt="Ethan Li" /&gt;&lt;/a&gt;&lt;a href="https://github.com/phubaba"&gt;&lt;img src="https://github.com/phubaba.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/fomrat"&gt;&lt;img src="https://github.com/fomrat.png" width="60px" alt="Brian MacAskill" /&gt;&lt;/a&gt;&lt;a href="https://github.com/canhazcodez"&gt;&lt;img src="https://github.com/canhazcodez.png" width="60px" alt="Maxi" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nikbrunner"&gt;&lt;img src="https://github.com/nikbrunner.png" width="60px" alt="nbr" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neunkasulle"&gt;&lt;img src="https://github.com/neunkasulle.png" width="60px" alt="Jan Zenkner" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ahkohd"&gt;&lt;img src="https://github.com/ahkohd.png" width="60px" alt="Victor Aremu" /&gt;&lt;/a&gt;&lt;a href="https://github.com/RVxLab"&gt;&lt;img src="https://github.com/RVxLab.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/igor-ramazanov"&gt;&lt;img src="https://github.com/igor-ramazanov.png" width="60px" alt="Igor Ramazanov" /&gt;&lt;/a&gt;&lt;a href="https://github.com/glotchimo"&gt;&lt;img src="https://github.com/glotchimo.png" width="60px" alt="Elliott Maguire" /&gt;&lt;/a&gt;&lt;a href="https://github.com/n8nio"&gt;&lt;img src="https://github.com/n8nio.png" width="60px" alt="n8n - Workflow Automation" /&gt;&lt;/a&gt;&lt;a href="https://github.com/kaleballmon"&gt;&lt;img src="https://github.com/kaleballmon.png" width="60px" alt="kaleb allmon" /&gt;&lt;/a&gt;&lt;a href="https://github.com/joshuadavidthomas"&gt;&lt;img src="https://github.com/joshuadavidthomas.png" width="60px" alt="Josh Thomas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/josephjacks"&gt;&lt;img src="https://github.com/josephjacks.png" width="60px" alt="JJ" /&gt;&lt;/a&gt;&lt;a href="https://github.com/FrederickGeek8"&gt;&lt;img src="https://github.com/FrederickGeek8.png" width="60px" alt="Frederick Morlock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/agrippanux"&gt;&lt;img src="https://github.com/agrippanux.png" width="60px" alt="Darren Craine" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ezdac"&gt;&lt;img src="https://github.com/ezdac.png" width="60px" alt="Maximilian Langenfeld" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sarzhann"&gt;&lt;img src="https://github.com/sarzhann.png" width="60px" alt="Nurzhan" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dbuls"&gt;&lt;img src="https://github.com/dbuls.png" width="60px" alt="Davis Buls" /&gt;&lt;/a&gt;&lt;a href="https://github.com/MGreek"&gt;&lt;img src="https://github.com/MGreek.png" width="60px" alt="Grec Marc" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sainu"&gt;&lt;img src="https://github.com/sainu.png" width="60px" alt="sainu" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mguellsegarra"&gt;&lt;img src="https://github.com/mguellsegarra.png" width="60px" alt="Marc Güell Segarra" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lppassos"&gt;&lt;img src="https://github.com/lppassos.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/chrisolsen"&gt;&lt;img src="https://github.com/chrisolsen.png" width="60px" alt="Chris Olsen" /&gt;&lt;/a&gt;&lt;a href="https://github.com/vladimir-popov"&gt;&lt;img src="https://github.com/vladimir-popov.png" width="60px" alt="Vladimir Popov" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neilcode"&gt;&lt;img src="https://github.com/neilcode.png" width="60px" alt="Neil Lambert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/shaungarwood"&gt;&lt;img src="https://github.com/shaungarwood.png" width="60px" alt="Shaun Garwood" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dhh"&gt;&lt;img src="https://github.com/dhh.png" width="60px" alt="David Heinemeier Hansson" /&gt;&lt;/a&gt;&lt;a href="https://github.com/wayanjimmy"&gt;&lt;img src="https://github.com/wayanjimmy.png" width="60px" alt="Wayan jimmy" /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;h2&gt;Elevator Pitch&lt;/h2&gt; 
&lt;p&gt;Minor rant incoming: Something's not working? Maybe a service is down. &lt;code&gt;docker-compose ps&lt;/code&gt;. Yep, it's that microservice that's still buggy. No issue, I'll just restart it: &lt;code&gt;docker-compose restart&lt;/code&gt;. Okay now let's try again. Oh wait the issue is still there. Hmm. &lt;code&gt;docker-compose ps&lt;/code&gt;. Right so the service must have just stopped immediately after starting. I probably would have known that if I was reading the log stream, but there is a lot of clutter in there from other services. I could get the logs for just that one service with &lt;code&gt;docker compose logs --follow myservice&lt;/code&gt; but that dies everytime the service dies so I'd need to run that command every time I restart the service. I could alternatively run &lt;code&gt;docker-compose up myservice&lt;/code&gt; and in that terminal window if the service is down I could just &lt;code&gt;up&lt;/code&gt; it again, but now I've got one service hogging a terminal window even after I no longer care about its logs. I guess when I want to reclaim the terminal realestate I can do &lt;code&gt;ctrl+P,Q&lt;/code&gt;, but... wait, that's not working for some reason. Should I use ctrl+C instead? I can't remember if that closes the foreground process or kills the actual service.&lt;/p&gt; 
&lt;p&gt;What a headache!&lt;/p&gt; 
&lt;p&gt;Memorising docker commands is hard. Memorising aliases is slightly less hard. Keeping track of your containers across multiple terminal windows is near impossible. What if you had all the information you needed in one terminal window with every common command living one keypress away (and the ability to add custom commands as well). Lazydocker's goal is to make that dream a reality.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings"&gt;Keybindings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#cool-features"&gt;Cool Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/NICqQPxwJWw"&gt;Video Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md"&gt;Config Docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.twitch.tv/jesseduffield"&gt;Twitch Stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker &amp;gt;= &lt;strong&gt;1.13&lt;/strong&gt; (API &amp;gt;= &lt;strong&gt;1.25&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Docker-Compose &amp;gt;= &lt;strong&gt;1.23.2&lt;/strong&gt; (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;Normally &lt;code&gt;lazydocker&lt;/code&gt; formula can be found in the Homebrew core but we suggest you to tap our formula to get frequently updated one. It works with Linux, too.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tap&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install jesseduffield/lazydocker/lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Core&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href="https://scoop.sh/"&gt;scoop&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;scoop install lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;asdf-vm&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://github.com/comdotlinux/asdf-lazydocker"&gt;asdf-lazydocker plugin&lt;/a&gt; using &lt;a href="https://asdf-vm.com/"&gt;asdf-vm&lt;/a&gt;:&lt;/p&gt; 
&lt;h4&gt;Setup (Once)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;asdf plugin add lazydocker https://github.com/comdotlinux/asdf-lazydocker.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;For Install / Upgrade&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;asdf list all lazydocker
asdf install lazydocker latest
asdf global lazydocker latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Binary Release (Linux/OSX/Windows)&lt;/h3&gt; 
&lt;p&gt;You can manually download a binary release from &lt;a href="https://github.com/jesseduffield/lazydocker/releases"&gt;the release page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Automated install/update, don't forget to always verify what you're piping into bash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The script installs downloaded binary to &lt;code&gt;$HOME/.local/bin&lt;/code&gt; directory by default, but it can be changed by setting &lt;code&gt;DIR&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;h3&gt;Go&lt;/h3&gt; 
&lt;p&gt;Required Go Version &amp;gt;= &lt;strong&gt;1.19&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install github.com/jesseduffield/lazydocker@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Required Go version &amp;gt;= &lt;strong&gt;1.8&lt;/strong&gt;, &amp;lt;= &lt;strong&gt;1.17&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get github.com/jesseduffield/lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch Linux AUR&lt;/h3&gt; 
&lt;p&gt;You can install lazydocker using the &lt;a href="https://aur.archlinux.org/packages/lazydocker"&gt;AUR&lt;/a&gt; by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;yay -S lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://hub.docker.com/r/lazyteam/lazydocker"&gt;&lt;img src="https://img.shields.io/docker/pulls/lazyteam/lazydocker.svg?sanitize=true" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/lazyteam/lazydocker"&gt;&lt;img src="https://img.shields.io/docker/stars/lazyteam/lazydocker.svg?sanitize=true" alt="Docker Stars" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/lazyteam/lazydocker"&gt;&lt;img src="https://img.shields.io/docker/cloud/automated/lazyteam/lazydocker.svg?sanitize=true" alt="Docker Automated" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;details&gt;
   &lt;summary&gt;Click if you have an ARM device&lt;/summary&gt;
   &lt;p&gt; &lt;/p&gt;
   &lt;ul&gt; 
    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v6 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t lazyteam/lazydocker \
--build-arg BASE_IMAGE_BUILDER=arm32v6/golang \
--build-arg GOARCH=arm \
--build-arg GOARM=6 \
https://github.com/jesseduffield/lazydocker.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v7 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t lazyteam/lazydocker \
--build-arg BASE_IMAGE_BUILDER=arm32v7/golang \
--build-arg GOARCH=arm \
--build-arg GOARM=7 \
https://github.com/jesseduffield/lazydocker.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;li&gt; &lt;p&gt;If you have a ARM 64 bit v8 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t lazyteam/lazydocker \
--build-arg BASE_IMAGE_BUILDER=arm64v8/golang \
--build-arg GOARCH=arm64 \
https://github.com/jesseduffield/lazydocker.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p&gt;&lt;/p&gt;
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the container&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v \
/var/run/docker.sock:/var/run/docker.sock \
-v /yourpath:/.config/jesseduffield/lazydocker \
lazyteam/lazydocker
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Don't forget to change &lt;code&gt;/yourpath&lt;/code&gt; to an actual path you created to store lazydocker's config&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use this &lt;a href="https://github.com/jesseduffield/lazydocker/raw/master/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You might want to create an alias, for example:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;echo "alias lzd='docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v /yourpath/config:/.config/jesseduffield/lazydocker lazyteam/lazydocker'" &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For development, you can build the image using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/jesseduffield/lazydocker.git
cd lazydocker
docker build -t lazyteam/lazydocker \
    --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
    --build-arg VCS_REF=`git rev-parse --short HEAD` \
    --build-arg VERSION=`git describe --abbrev=0 --tag` \
    .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you encounter a compatibility issue with Docker bundled binary, try rebuilding the image with the build argument &lt;code&gt;--build-arg DOCKER_VERSION="v$(docker -v | cut -d" " -f3 | rev | cut -c 2- | rev)"&lt;/code&gt; so that the bundled docker binary matches your host docker binary version.&lt;/p&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You'll need to &lt;a href="https://golang.org/doc/install"&gt;install Go&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/jesseduffield/lazydocker.git
cd lazydocker
go install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;go run main.go&lt;/code&gt; to compile and run in one go (pun definitely intended)&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Call &lt;code&gt;lazydocker&lt;/code&gt; in your terminal. I personally use this a lot so I've made an alias for it like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo "alias lzd='lazydocker'" &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(you can substitute .zshrc for whatever rc file you're using)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic video tutorial &lt;a href="https://youtu.be/NICqQPxwJWw"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;List of keybindings &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings"&gt;here&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Cool features&lt;/h2&gt; 
&lt;p&gt;everything is one keypress away (or one click away! Mouse support FTW):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;viewing the state of your docker or docker-compose container environment at a glance&lt;/li&gt; 
 &lt;li&gt;viewing logs for a container/service&lt;/li&gt; 
 &lt;li&gt;viewing ascii graphs of your containers' metrics so that you can not only feel but also look like a developer&lt;/li&gt; 
 &lt;li&gt;customising those graphs to measure nearly any metric you want&lt;/li&gt; 
 &lt;li&gt;attaching to a container/service&lt;/li&gt; 
 &lt;li&gt;restarting/removing/rebuilding containers/services&lt;/li&gt; 
 &lt;li&gt;viewing the ancestor layers of a given image&lt;/li&gt; 
 &lt;li&gt;pruning containers, images, or volumes that are hogging up disk space&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;There is still a lot of work to go! Please check out the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;. For contributor discussion about things not better discussed here in the repo, join the discord channel&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/ehwFt2t4wt"&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/discord.png" width="75" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you would like to support the development of lazydocker, consider &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsoring me&lt;/a&gt; (github is matching all donations dollar-for-dollar for 12 months)&lt;/p&gt; 
&lt;h2&gt;Social&lt;/h2&gt; 
&lt;p&gt;If you want to see what I (Jesse) am up to in terms of development, follow me on &lt;a href="https://twitter.com/DuffieldJesse"&gt;twitter&lt;/a&gt; or watch me program on &lt;a href="https://www.twitch.tv/jesseduffield"&gt;twitch&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;How do I edit my config?&lt;/h3&gt; 
&lt;p&gt;By opening lazydocker, clicking on the 'project' panel in the top left, and pressing 'o' (or 'e' if your editor is vim). See &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md"&gt;Config Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do I get text to wrap in my main panel?&lt;/h3&gt; 
&lt;p&gt;In the future I want to make this the default, but for now there are some CPU issues that arise with wrapping. If you want to enable wrapping, use &lt;code&gt;gui.wrapMainPanel: true&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;How do you select text?&lt;/h3&gt; 
&lt;p&gt;Because we support mouse events, you will need to hold option while dragging the mouse to indicate you're trying to select text rather than click on something. Alternatively you can disable mouse events via the &lt;code&gt;gui.ignoreMouseEvents&lt;/code&gt; config value.&lt;/p&gt; 
&lt;p&gt;Mac Users: See &lt;a href="https://github.com/jesseduffield/lazydocker/issues/190"&gt;Issue #190&lt;/a&gt; for other options.&lt;/p&gt; 
&lt;h3&gt;Why can't I see my container's logs?&lt;/h3&gt; 
&lt;p&gt;By default we only show logs from the last hour, so that we're not putting too much strain on the machine. This may be why you can't see logs when you first start lazydocker. This can be overwritten in the config's &lt;code&gt;commandTemplates&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;If you are running lazydocker in Docker container, it is a know bug, that you can't see logs or CPU usage.&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/skanehira/docui"&gt;docui&lt;/a&gt; - Skanehira beat me to the punch on making a docker terminal UI, so definitely check out that repo as well! I think the two repos can live in harmony though: lazydocker is more about managing existing containers/services, and docui is more about creating and configuring them.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/portainer/portainer"&gt;Portainer&lt;/a&gt; - Portainer tries to solve the same problem but it's accessed via your browser rather than your terminal. It also supports docker swarm.&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://github.com/veggiemonk/awesome-docker/raw/master/README.md#terminal"&gt;Awesome Docker list&lt;/a&gt; for similar tools to work with Docker.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>v2fly/domain-list-community</title>
      <link>https://github.com/v2fly/domain-list-community</link>
      <description>&lt;p&gt;Community managed domain list. Generate geosite.dat for V2Ray.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Domain list community&lt;/h1&gt; 
&lt;p&gt;This project manages a list of domains, to be used as geosites for routing purpose in Project V.&lt;/p&gt; 
&lt;h2&gt;Purpose of this project&lt;/h2&gt; 
&lt;p&gt;This project is not opinionated. In other words, it does NOT endorse, claim or imply that a domain should be blocked or proxied. It can be used to generate routing rules on demand.&lt;/p&gt; 
&lt;h2&gt;Download links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;dlc.dat&lt;/strong&gt;：&lt;a href="https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat"&gt;https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;dlc.dat.sha256sum&lt;/strong&gt;：&lt;a href="https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat.sha256sum"&gt;https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat.sha256sum&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage example&lt;/h2&gt; 
&lt;p&gt;Each file in the &lt;code&gt;data&lt;/code&gt; directory can be used as a rule in this format: &lt;code&gt;geosite:filename&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;"routing": {
  "domainStrategy": "IPIfNonMatch",
  "rules": [
    {
      "type": "field",
      "outboundTag": "Reject",
      "domain": [
        "geosite:category-ads-all",
        "geosite:category-porn"
      ]
    },
    {
      "type": "field",
      "outboundTag": "Direct",
      "domain": [
        "domain:icloud.com",
        "domain:icloud-content.com",
        "domain:cdn-apple.com",
        "geosite:cn",
        "geosite:private"
      ]
    },
    {
      "type": "field",
      "outboundTag": "Proxy-1",
      "domain": [
        "geosite:category-anticensorship",
        "geosite:category-media",
        "geosite:category-vpnservices"
      ]
    },
    {
      "type": "field",
      "outboundTag": "Proxy-2",
      "domain": [
        "geosite:category-dev"
      ]
    },
    {
      "type": "field",
      "outboundTag": "Proxy-3",
      "domain": [
        "geosite:geolocation-!cn"
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Generate &lt;code&gt;dlc.dat&lt;/code&gt; manually&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;golang&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Clone project code: &lt;code&gt;git clone https://github.com/v2fly/domain-list-community.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Navigate to project root directory: &lt;code&gt;cd domain-list-community&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install project dependencies: &lt;code&gt;go mod download&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Generate &lt;code&gt;dlc.dat&lt;/code&gt; (without &lt;code&gt;datapath&lt;/code&gt; option means to use domain lists in &lt;code&gt;data&lt;/code&gt; directory of current working directory): 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;go run ./&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;go run ./ --datapath=/path/to/your/custom/data/directory&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Run &lt;code&gt;go run ./ --help&lt;/code&gt; for more usage information.&lt;/p&gt; 
&lt;h2&gt;Structure of data&lt;/h2&gt; 
&lt;p&gt;All data are under &lt;code&gt;data&lt;/code&gt; directory. Each file in the directory represents a sub-list of domains, named by the file name. File content is in the following format.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# comments
include:another-file
domain:google.com @attr1 @attr2
keyword:google
regexp:www\.google\.com$
full:www.google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The following types of rules are &lt;strong&gt;NOT&lt;/strong&gt; fully compatible with the ones that defined by user in V2Ray config file. Do &lt;strong&gt;Not&lt;/strong&gt; copy and paste directly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Comment begins with &lt;code&gt;#&lt;/code&gt;. It may begin anywhere in the file. The content in the line after &lt;code&gt;#&lt;/code&gt; is treated as comment and ignored in production.&lt;/li&gt; 
 &lt;li&gt;Inclusion begins with &lt;code&gt;include:&lt;/code&gt;, followed by the file name of an existing file in the same directory.&lt;/li&gt; 
 &lt;li&gt;Subdomain begins with &lt;code&gt;domain:&lt;/code&gt;, followed by a valid domain name. The prefix &lt;code&gt;domain:&lt;/code&gt; may be omitted.&lt;/li&gt; 
 &lt;li&gt;Keyword begins with &lt;code&gt;keyword:&lt;/code&gt;, followed by a string.&lt;/li&gt; 
 &lt;li&gt;Regular expression begins with &lt;code&gt;regexp:&lt;/code&gt;, followed by a valid regular expression (per Golang's standard).&lt;/li&gt; 
 &lt;li&gt;Full domain begins with &lt;code&gt;full:&lt;/code&gt;, followed by a complete and valid domain name.&lt;/li&gt; 
 &lt;li&gt;Domains (including &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;keyword&lt;/code&gt;, &lt;code&gt;regexp&lt;/code&gt; and &lt;code&gt;full&lt;/code&gt;) may have one or more attributes. Each attribute begins with &lt;code&gt;@&lt;/code&gt; and followed by the name of the attribute.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Adding new &lt;code&gt;regexp&lt;/code&gt; and &lt;code&gt;keyword&lt;/code&gt; rules is discouraged because it is easy to use them incorrectly, and proxy software cannot efficiently match these types of rules.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;How it works&lt;/h2&gt; 
&lt;p&gt;The entire &lt;code&gt;data&lt;/code&gt; directory will be built into an external &lt;code&gt;geosite&lt;/code&gt; file for Project V. Each file in the directory represents a section in the generated file.&lt;/p&gt; 
&lt;p&gt;To generate a section:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Remove all the comments in the file.&lt;/li&gt; 
 &lt;li&gt;Replace &lt;code&gt;include:&lt;/code&gt; lines with the actual content of the file.&lt;/li&gt; 
 &lt;li&gt;Omit all empty lines.&lt;/li&gt; 
 &lt;li&gt;Generate each &lt;code&gt;domain:&lt;/code&gt; line into a &lt;a href="https://github.com/v2fly/v2ray-core/raw/master/app/router/config.proto#L21"&gt;sub-domain routing rule&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Generate each &lt;code&gt;keyword:&lt;/code&gt; line into a &lt;a href="https://github.com/v2fly/v2ray-core/raw/master/app/router/config.proto#L17"&gt;plain domain routing rule&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Generate each &lt;code&gt;regexp:&lt;/code&gt; line into a &lt;a href="https://github.com/v2fly/v2ray-core/raw/master/app/router/config.proto#L19"&gt;regex domain routing rule&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Generate each &lt;code&gt;full:&lt;/code&gt; line into a &lt;a href="https://github.com/v2fly/v2ray-core/raw/master/app/router/config.proto#L23"&gt;full domain routing rule&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to organize domains&lt;/h2&gt; 
&lt;h3&gt;File name&lt;/h3&gt; 
&lt;p&gt;Theoretically any string can be used as the name, as long as it is a valid file name. In practice, we prefer names for determinic group of domains, such as the owner (usually a company name) of the domains, e.g., "google", "netflix". Names with unclear scope are generally unrecommended, such as "evil", or "local".&lt;/p&gt; 
&lt;h3&gt;Attributes&lt;/h3&gt; 
&lt;p&gt;Attribute is useful for sub-group of domains, especially for filtering purpose. For example, the list of &lt;code&gt;google&lt;/code&gt; domains may contains its main domains, as well as domains that serve ads. The ads domains may be marked by attribute &lt;code&gt;@ads&lt;/code&gt;, and can be used as &lt;code&gt;geosite:google@ads&lt;/code&gt; in V2Ray routing.&lt;/p&gt; 
&lt;h2&gt;Contribution guideline&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fork this repo, make modifications to your own repo, file a PR.&lt;/li&gt; 
 &lt;li&gt;Please begin with small size PRs, say modification in a single file.&lt;/li&gt; 
 &lt;li&gt;A PR must be reviewed and approved by another member.&lt;/li&gt; 
 &lt;li&gt;A script will verify your pull request to test whether your PR is correct or not every time you update the PR. Only the PR which passes the test will be merged. Please go to the Action label to get detailed information if you didn't pass it. We also provide the file which has been generated to make you test.&lt;/li&gt; 
 &lt;li&gt;After a few successful PRs, you may apply for manager access to this repository.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>sjzar/chatlog</title>
      <link>https://github.com/sjzar/chatlog</link>
      <description>&lt;p&gt;chat log tool, easily use your own chat data. 聊天记录工具，轻松使用自己的聊天数据&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/e085d3a2-e009-4463-b2fd-8bd7df2b50c3" alt="chatlog" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;聊天记录工具，帮助大家轻松使用自己的聊天数据&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://imgmcp.com"&gt;&lt;img src="https://cdn.imgmcp.com/imgmcp-logo-small.png" alt="ImgMCP" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/sjzar/chatlog"&gt;&lt;img src="https://goreportcard.com/badge/github.com/sjzar/chatlog" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/sjzar/chatlog"&gt;&lt;img src="https://godoc.org/github.com/sjzar/chatlog?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sjzar/chatlog/releases"&gt;&lt;img src="https://img.shields.io/github/release/sjzar/chatlog.svg?sanitize=true" alt="GitHub release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sjzar/chatlog/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/sjzar/chatlog.svg?sanitize=true" alt="GitHub license" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Feature&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;从本地数据库文件中获取聊天数据&lt;/li&gt; 
 &lt;li&gt;支持 Windows / macOS 系统，兼容微信 3.x / 4.x 版本&lt;/li&gt; 
 &lt;li&gt;支持获取数据与图片密钥 (Windows &amp;lt; 4.0.3.36 / macOS &amp;lt; 4.0.3.80)&lt;/li&gt; 
 &lt;li&gt;支持图片、语音等多媒体数据解密，支持 wxgf 格式解析&lt;/li&gt; 
 &lt;li&gt;支持自动解密数据库，并提供新消息 Webhook 回调&lt;/li&gt; 
 &lt;li&gt;提供 Terminal UI 界面，同时支持命令行工具和 Docker 镜像部署&lt;/li&gt; 
 &lt;li&gt;提供 HTTP API 服务，可轻松查询聊天记录、联系人、群聊、最近会话等信息&lt;/li&gt; 
 &lt;li&gt;支持 MCP Streamable HTTP 协议，可与 AI 助手无缝集成&lt;/li&gt; 
 &lt;li&gt;支持多账号管理，可在不同账号间切换&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;基本步骤&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;安装 Chatlog&lt;/strong&gt;：&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#%E4%B8%8B%E8%BD%BD%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC"&gt;下载预编译版本&lt;/a&gt; 或 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#%E4%BB%8E%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85"&gt;使用 Go 安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;运行程序&lt;/strong&gt;：执行 &lt;code&gt;chatlog&lt;/code&gt; 启动 Terminal UI 界面&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;解密数据&lt;/strong&gt;：选择 &lt;code&gt;解密数据&lt;/code&gt; 菜单项&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;开启 HTTP 服务&lt;/strong&gt;：选择 &lt;code&gt;开启 HTTP 服务&lt;/code&gt; 菜单项&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;访问数据&lt;/strong&gt;：通过 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#http-api"&gt;HTTP API&lt;/a&gt; 或 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#mcp-%E9%9B%86%E6%88%90"&gt;MCP 集成&lt;/a&gt; 访问聊天记录&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;: 如果电脑端微信聊天记录不全，可以&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#%E4%BB%8E%E6%89%8B%E6%9C%BA%E8%BF%81%E7%A7%BB%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95"&gt;从手机端迁移数据&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;常见问题快速解决&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS 用户&lt;/strong&gt;：获取密钥前需&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#macos-%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E"&gt;临时关闭 SIP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows 用户&lt;/strong&gt;：遇到界面显示问题请&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#windows-%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E"&gt;使用 Windows Terminal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;集成 AI 助手&lt;/strong&gt;：查看 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#mcp-%E9%9B%86%E6%88%90"&gt;MCP 集成指南&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;无法获取密钥&lt;/strong&gt;：查看 &lt;a href="https://github.com/sjzar/chatlog/issues/197"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;安装指南&lt;/h2&gt; 
&lt;h3&gt;从源码安装&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go install github.com/sjzar/chatlog@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;: 部分功能有 cgo 依赖，编译前需确认本地有 C 编译环境。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;下载预编译版本&lt;/h3&gt; 
&lt;p&gt;访问 &lt;a href="https://github.com/sjzar/chatlog/releases"&gt;Releases&lt;/a&gt; 页面下载适合您系统的预编译版本。&lt;/p&gt; 
&lt;h2&gt;使用指南&lt;/h2&gt; 
&lt;h3&gt;Terminal UI 模式&lt;/h3&gt; 
&lt;p&gt;最简单的使用方式是通过 Terminal UI 界面操作：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;chatlog
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;操作方法：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用 &lt;code&gt;↑&lt;/code&gt; &lt;code&gt;↓&lt;/code&gt; 键选择菜单项&lt;/li&gt; 
 &lt;li&gt;按 &lt;code&gt;Enter&lt;/code&gt; 确认选择&lt;/li&gt; 
 &lt;li&gt;按 &lt;code&gt;Esc&lt;/code&gt; 返回上级菜单&lt;/li&gt; 
 &lt;li&gt;按 &lt;code&gt;Ctrl+C&lt;/code&gt; 退出程序&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;命令行模式&lt;/h3&gt; 
&lt;p&gt;对于熟悉命令行的用户，可以直接使用以下命令：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 获取微信数据密钥
chatlog key

# 解密数据库文件
chatlog decrypt

# 启动 HTTP 服务
chatlog server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker 部署&lt;/h3&gt; 
&lt;p&gt;由于 Docker 部署时，程序运行环境与宿主机隔离，所以不支持获取密钥等操作，需要提前获取密钥数据。&lt;/p&gt; 
&lt;p&gt;一般用于 NAS 等设备部署，详细指南可参考 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/docs/docker.md"&gt;Docker 部署指南&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0. 获取密钥信息&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# 从本机运行 chatlog 获取密钥信息
$ chatlog key
Data Key: [c0163e***ac3dc6]
Image Key: [38636***653361]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;1. 拉取镜像&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;chatlog 提供了两个镜像源：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker pull sjzar/chatlog:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;GitHub Container Registry (ghcr)&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker pull ghcr.io/sjzar/chatlog:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;镜像地址&lt;/strong&gt;:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Docker Hub: &lt;a href="https://hub.docker.com/r/sjzar/chatlog"&gt;https://hub.docker.com/r/sjzar/chatlog&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;GitHub Container Registry: &lt;a href="https://ghcr.io/sjzar/chatlog"&gt;https://ghcr.io/sjzar/chatlog&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;2. 运行容器&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ docker run -d \
  --name chatlog \
  -p 5030:5030 \
  -v /path/to/your/wechat/data:/app/data \
  sjzar/chatlog:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;从手机迁移聊天记录&lt;/h3&gt; 
&lt;p&gt;如果电脑端微信聊天记录不全，可以从手机端迁移数据：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;打开手机微信，进入 &lt;code&gt;我 - 设置 - 通用 - 聊天记录迁移与备份&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;选择 &lt;code&gt;迁移 - 迁移到电脑&lt;/code&gt;，按照提示操作&lt;/li&gt; 
 &lt;li&gt;完成迁移后，重新运行 &lt;code&gt;chatlog&lt;/code&gt; 获取密钥并解密数据&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;此操作不会影响手机上的聊天记录，只是将数据复制到电脑端&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;平台特定说明&lt;/h2&gt; 
&lt;h3&gt;Windows 版本说明&lt;/h3&gt; 
&lt;p&gt;如遇到界面显示异常（如花屏、乱码等），请使用 &lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt; 运行程序&lt;/p&gt; 
&lt;h3&gt;macOS 版本说明&lt;/h3&gt; 
&lt;p&gt;macOS 用户在获取密钥前需要临时关闭 SIP（系统完整性保护）：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;关闭 SIP&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;# 进入恢复模式
# Intel Mac: 重启时按住 Command + R
# Apple Silicon: 重启时长按电源键

# 在恢复模式中打开终端并执行
csrutil disable

# 重启系统
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;安装必要工具&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;# 安装 Xcode Command Line Tools
xcode-select --install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;获取密钥后&lt;/strong&gt;：可以重新启用 SIP（&lt;code&gt;csrutil enable&lt;/code&gt;），不影响后续使用&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Apple Silicon 用户注意：确保微信、chatlog 和终端都不在 Rosetta 模式下运行&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;HTTP API&lt;/h2&gt; 
&lt;p&gt;启动 HTTP 服务后（默认地址 &lt;code&gt;http://127.0.0.1:5030&lt;/code&gt;），可通过以下 API 访问数据：&lt;/p&gt; 
&lt;h3&gt;聊天记录查询&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;GET /api/v1/chatlog?time=2023-01-01&amp;amp;talker=wxid_xxx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;参数说明：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;time&lt;/code&gt;: 时间范围，格式为 &lt;code&gt;YYYY-MM-DD&lt;/code&gt; 或 &lt;code&gt;YYYY-MM-DD~YYYY-MM-DD&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;talker&lt;/code&gt;: 聊天对象标识（支持 wxid、群聊 ID、备注名、昵称等）&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;limit&lt;/code&gt;: 返回记录数量&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;offset&lt;/code&gt;: 分页偏移量&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;format&lt;/code&gt;: 输出格式，支持 &lt;code&gt;json&lt;/code&gt;、&lt;code&gt;csv&lt;/code&gt; 或纯文本&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;其他 API 接口&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;联系人列表&lt;/strong&gt;：&lt;code&gt;GET /api/v1/contact&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;群聊列表&lt;/strong&gt;：&lt;code&gt;GET /api/v1/chatroom&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;会话列表&lt;/strong&gt;：&lt;code&gt;GET /api/v1/session&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;多媒体内容&lt;/h3&gt; 
&lt;p&gt;聊天记录中的多媒体内容会通过 HTTP 服务进行提供，可通过以下路径访问：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;图片内容&lt;/strong&gt;：&lt;code&gt;GET /image/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;视频内容&lt;/strong&gt;：&lt;code&gt;GET /video/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;文件内容&lt;/strong&gt;：&lt;code&gt;GET /file/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;语音内容&lt;/strong&gt;：&lt;code&gt;GET /voice/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;多媒体内容&lt;/strong&gt;：&lt;code&gt;GET /data/&amp;lt;data dir relative path&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;当请求图片、视频、文件内容时，将返回 302 跳转到多媒体内容 URL。&lt;br /&gt; 当请求语音内容时，将直接返回语音内容，并对原始 SILK 语音做了实时转码 MP3 处理。&lt;br /&gt; 多媒体内容 URL 地址为基于&lt;code&gt;数据目录&lt;/code&gt;的相对地址，请求多媒体内容将直接返回对应文件，并针对加密图片做了实时解密处理。&lt;/p&gt; 
&lt;h2&gt;Webhook&lt;/h2&gt; 
&lt;p&gt;需开启自动解密功能，当收到特定新消息时，可以通过 HTTP POST 请求将消息推送到指定的 URL。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;延迟测试: 本地服务消息回调延迟约 13 秒; 远程同步消息回调延迟约 45 秒。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;0. 回调配置&lt;/h4&gt; 
&lt;p&gt;使用 TUI 模式的话，在 &lt;code&gt;$HOME/.chatlog/chatlog.json&lt;/code&gt; 配置文件中，新增 &lt;code&gt;webhook&lt;/code&gt; 配置。&lt;br /&gt; （Windows 用户的配置文件在 &lt;code&gt;%USERPROFILE%/.chatlog/chatlog.json&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "history": [],
  "last_account": "wxuser_x",
  "webhook": {
    "host": "localhost:5030",                   # 消息中的图片、文件等 URL host
    "items": [
      {
        "url": "http://localhost:8080/webhook", # 必填，webhook 请求的URL，可配置为 n8n 等 webhook 入口 
        "talker": "wxid_123",                   # 必填，需要监控的私聊、群聊名称
        "sender": "",                           # 选填，消息发送者
        "keyword": ""                           # 选填，关键词
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;使用 server 模式的话，可以通过 &lt;code&gt;CHATLOG_WEBHOOK&lt;/code&gt; 环境变量进行设置。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# 方案 1
CHATLOG_WEBHOOK='{"host":"localhost:5030","items":[{"url":"http://localhost:8080/proxy","talker":"wxid_123","sender":"","keyword":""}]}'

# 方案 2（任选一种）
CHATLOG_WEBHOOK_HOST="localhost:5030"
CHATLOG_WEBHOOK_ITEMS='[{"url":"http://localhost:8080/proxy","talker":"wxid_123","sender":"","keyword":""}]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1. 测试效果&lt;/h4&gt; 
&lt;p&gt;启动 chatlog 并开启自动解密功能，测试回调效果&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;POST /webhook HTTP/1.1
Host: localhost:8080
Accept-Encoding: gzip
Content-Length: 386
Content-Type: application/json
User-Agent: Go-http-client/1.1

Body:
{
  "keyword": "",
  "lastTime": "2025-08-27 00:00:00",
  "length": 1,
  "messages": [
    {
      "seq": 1756225000000,
      "time": "2025-08-27T00:00:00+08:00",
      "talker": "wxid_123",
      "talkerName": "",
      "isChatRoom": false,
      "sender": "wxid_123",
      "senderName": "Name",
      "isSelf": false,
      "type": 1,
      "subType": 0,
      "content": "测试消息",
      "contents": {
        "host": "localhost:5030"
      }
    }
  ],
  "sender": "",
  "talker": "wxid_123"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;MCP 集成&lt;/h2&gt; 
&lt;p&gt;Chatlog 支持 MCP (Model Context Protocol) 协议，可与支持 MCP 的 AI 助手无缝集成。&lt;br /&gt; 启动 HTTP 服务后，通过 Streamable HTTP Endpoint 访问服务：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;GET /mcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;快速集成&lt;/h3&gt; 
&lt;p&gt;Chatlog 可以与多种支持 MCP 的 AI 助手集成，包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ChatWise&lt;/strong&gt;: 直接支持 Streamable HTTP，在工具设置中添加 &lt;code&gt;http://127.0.0.1:5030/mcp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cherry Studio&lt;/strong&gt;: 直接支持 Streamable HTTP，在 MCP 服务器设置中添加 &lt;code&gt;http://127.0.0.1:5030/mcp&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;对于不直接支持 Streamable HTTP 的客户端，可以使用 &lt;a href="https://github.com/sparfenyuk/mcp-proxy"&gt;mcp-proxy&lt;/a&gt; 工具转发请求：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Claude Desktop&lt;/strong&gt;: 通过 mcp-proxy 支持，需要配置 &lt;code&gt;claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Monica Code&lt;/strong&gt;: 通过 mcp-proxy 支持，需要配置 VSCode 插件设置&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;详细集成指南&lt;/h3&gt; 
&lt;p&gt;查看 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/docs/mcp.md"&gt;MCP 集成指南&lt;/a&gt; 获取各平台的详细配置步骤和注意事项。&lt;/p&gt; 
&lt;h2&gt;Prompt 示例&lt;/h2&gt; 
&lt;p&gt;为了帮助大家更好地利用 Chatlog 与 AI 助手，我们整理了一些 prompt 示例。希望这些 prompt 可以启发大家更有效地查询和分析聊天记录，获取更精准的信息。&lt;/p&gt; 
&lt;p&gt;查看 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/docs/prompt.md"&gt;Prompt 指南&lt;/a&gt; 获取详细示例。&lt;/p&gt; 
&lt;p&gt;同时欢迎大家分享使用经验和 prompt！如果您有好的 prompt 示例或使用技巧，请通过 &lt;a href="https://github.com/sjzar/chatlog/discussions"&gt;Discussions&lt;/a&gt; 进行分享，共同进步。&lt;/p&gt; 
&lt;h2&gt;免责声明&lt;/h2&gt; 
&lt;p&gt;⚠️ &lt;strong&gt;重要提示：使用本项目前，请务必阅读并理解完整的 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/DISCLAIMER.md"&gt;免责声明&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本项目仅供学习、研究和个人合法使用，禁止用于任何非法目的或未授权访问他人数据。下载、安装或使用本工具即表示您同意遵守免责声明中的所有条款，并自行承担使用过程中的全部风险和法律责任。&lt;/p&gt; 
&lt;h3&gt;摘要（请阅读完整免责声明）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;仅限处理您自己合法拥有的聊天数据或已获授权的数据&lt;/li&gt; 
 &lt;li&gt;严禁用于未经授权获取、查看或分析他人聊天记录&lt;/li&gt; 
 &lt;li&gt;开发者不对使用本工具可能导致的任何损失承担责任&lt;/li&gt; 
 &lt;li&gt;使用第三方 LLM 服务时，您应遵守这些服务的使用条款和隐私政策&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;本项目完全免费开源，任何以本项目名义收费的行为均与本项目无关。&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;本项目基于 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/LICENSE"&gt;Apache-2.0 许可证&lt;/a&gt; 开源。&lt;/p&gt; 
&lt;h2&gt;隐私政策&lt;/h2&gt; 
&lt;p&gt;本项目不收集任何用户数据。所有数据处理均在用户本地设备上进行。使用第三方服务时，请参阅相应服务的隐私政策。&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xlane"&gt;@0xlane&lt;/a&gt; 的 &lt;a href="https://github.com/0xlane/wechat-dump-rs"&gt;wechat-dump-rs&lt;/a&gt; 项目&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xaoyaoo"&gt;@xaoyaoo&lt;/a&gt; 的 &lt;a href="https://github.com/xaoyaoo/PyWxDump"&gt;PyWxDump&lt;/a&gt; 项目&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/git-jiadong"&gt;@git-jiadong&lt;/a&gt; 的 &lt;a href="https://github.com/git-jiadong/go-lame"&gt;go-lame&lt;/a&gt; 和 &lt;a href="https://github.com/git-jiadong/go-silk"&gt;go-silk&lt;/a&gt; 项目&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.anthropic.com/"&gt;Anthropic&lt;/a&gt; 的 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/(https://github.com/modelcontextprotocol)"&gt;MCP&lt;/a&gt; 协议&lt;/li&gt; 
 &lt;li&gt;各个 Go 开源库的贡献者们&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>gravitational/teleport</title>
      <link>https://github.com/gravitational/teleport</link>
      <description>&lt;p&gt;The easiest, and most secure way to access and protect all of your infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Teleport provides connectivity, authentication, access controls and audit for infrastructure.&lt;/p&gt; 
&lt;p&gt;Here is why you might use Teleport:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set up SSO for all of your cloud infrastructure [1].&lt;/li&gt; 
 &lt;li&gt;Protect access to cloud and on-prem services using mTLS endpoints and short-lived certificates.&lt;/li&gt; 
 &lt;li&gt;Establish tunnels to access services behind NATs and firewalls.&lt;/li&gt; 
 &lt;li&gt;Provide an audit log with session recording and replay for various protocols.&lt;/li&gt; 
 &lt;li&gt;Unify Role-Based Access Control (RBAC) and enforce the principle of least privilege with &lt;a href="https://goteleport.com/features/access-requests/"&gt;access requests&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[1] The open source version supports only GitHub SSO.&lt;/p&gt; 
&lt;p&gt;Teleport works with SSH, Kubernetes, databases, RDP, and web services.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Architecture: &lt;a href="https://goteleport.com/docs/reference/architecture/"&gt;https://goteleport.com/docs/reference/architecture/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Getting Started: &lt;a href="https://goteleport.com/docs/get-started/"&gt;https://goteleport.com/docs/get-started/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://goteleport.com/download"&gt; &lt;img src="https://raw.githubusercontent.com/gravitational/teleport/master/assets/img/hero-teleport-platform.png" width="750/" /&gt; &lt;/a&gt; 
 &lt;div align="center" style="padding: 25px"&gt; 
  &lt;a href="https://goteleport.com/download"&gt; &lt;img src="https://img.shields.io/github/v/release/gravitational/teleport?sort=semver&amp;amp;label=Release&amp;amp;color=651FFF" /&gt; &lt;/a&gt; 
  &lt;a href="https://golang.org/"&gt; &lt;img src="https://img.shields.io/github/go-mod/go-version/gravitational/teleport?color=7fd5ea" /&gt; &lt;/a&gt; 
  &lt;a href="https://github.com/gravitational/teleport/raw/master/CODE_OF_CONDUCT.md"&gt; &lt;img src="https://img.shields.io/badge/Contribute-🙌-green.svg" /&gt; &lt;/a&gt; 
  &lt;a href="https://www.gnu.org/licenses/agpl-3.0.en.html"&gt; &lt;img src="https://img.shields.io/badge/AGPL-3.0-red.svg?sanitize=true" /&gt; &lt;/a&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#installing-and-running"&gt;Installing and Running&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#building-teleport"&gt;Building Teleport&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#why-did-we-build-teleport"&gt;Why Did We Build Teleport?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#more-information"&gt;More Information&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#support-and-contributing"&gt;Support and Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#is-teleport-secure-and-production-ready"&gt;Is Teleport Secure and Production Ready?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#who-built-teleport"&gt;Who Built Teleport?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Teleport includes an identity-aware access proxy, a CA that issues short-lived certificates, a unified access control system and a tunneling system to access resources behind the firewall.&lt;/p&gt; 
&lt;p&gt;We have implemented Teleport as a single Go binary that integrates with multiple protocols and cloud services:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/server-access/introduction/"&gt;SSH nodes&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/kubernetes-access/introduction/"&gt;Kubernetes clusters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/database-access/"&gt;PostgreSQL, MongoDB, CockroachDB and MySQL databases&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/application-access/introduction/"&gt;Internal Web apps&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/desktop-access/introduction/"&gt;Windows Hosts&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/server-access/introduction/"&gt;Networked servers&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can set up Teleport as a &lt;a href="https://goteleport.com/docs/admin-guides/deploy-a-cluster/linux-demo"&gt;Linux daemon&lt;/a&gt; or a &lt;a href="https://goteleport.com/docs/admin-guides/deploy-a-cluster/helm-deployments/"&gt;Kubernetes deployment&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Teleport focuses on best practices for infrastructure security:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;No need to manage shared secrets such as SSH keys or Kubernetes tokens: it uses certificate-based auth with certificate expiration for all protocols.&lt;/li&gt; 
 &lt;li&gt;Two-factor authentication (2FA) for everything.&lt;/li&gt; 
 &lt;li&gt;Collaboratively troubleshoot issues through session sharing.&lt;/li&gt; 
 &lt;li&gt;Single sign-on (SSO) for everything via GitHub Auth, OpenID Connect, or SAML with endpoints like Okta or Microsoft Entra ID.&lt;/li&gt; 
 &lt;li&gt;Infrastructure introspection: Use Teleport via the CLI or Web UI to view the status of every SSH node, database instance, Kubernetes cluster, or internal web app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Teleport uses &lt;a href="https://godoc.org/golang.org/x/crypto"&gt;Go crypto&lt;/a&gt;. It is &lt;em&gt;fully compatible with OpenSSH&lt;/em&gt;, &lt;code&gt;sshd&lt;/code&gt; servers, and &lt;code&gt;ssh&lt;/code&gt; clients, Kubernetes clusters and more.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Project Links&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/"&gt;Teleport Website&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The official website of the project.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/docs/"&gt;Documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Admin guide, user manual and more.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/blog/"&gt;Blog&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Our blog where we publish Teleport news.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gravitational/teleport/discussions"&gt;Forum&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Ask us a setup question, post your tutorial, feedback, or idea on our forum.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/slack"&gt;Slack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Need help with your setup? Ping us in our Slack channel.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/pricing"&gt;Cloud-hosted&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;We offer Enterprise with a Cloud-hosted option. For teams that require easy and secure access to their computing environments.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Installing and Running&lt;/h2&gt; 
&lt;p&gt;To set up a single-instance Teleport cluster, follow our &lt;a href="https://goteleport.com/docs/admin-guides/deploy-a-cluster/linux-demo/"&gt;getting started guide&lt;/a&gt;. You can then register your servers, Kubernetes clusters, and other infrastructure with your Teleport cluster.&lt;/p&gt; 
&lt;p&gt;You can also get started with Teleport Enterprise Cloud, a managed Teleport deployment that makes it easier to enable secure access to your infrastructure.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://goteleport.com/signup"&gt;Sign up for a free trial&lt;/a&gt; of Teleport Enterprise Cloud.&lt;/p&gt; 
&lt;p&gt;Follow our guide to &lt;a href="https://goteleport.com/docs/get-started/"&gt;registering your first server&lt;/a&gt; with Teleport Enterprise Cloud.&lt;/p&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;h3&gt;Deploy Teleport&lt;/h3&gt; 
&lt;p&gt;If you wish to deploy Teleport inside a Docker container see the &lt;a href="https://goteleport.com/docs/installation/#running-teleport-on-docker"&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;For Local Testing and Development&lt;/h3&gt; 
&lt;p&gt;To run a full test suite locally, see &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/BUILD_macos.md#local-tests-dependencies"&gt;the test dependencies list&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Building Teleport&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;teleport&lt;/code&gt; repository contains the Teleport daemon binary (written in Go) and a web UI written in TypeScript.&lt;/p&gt; 
&lt;p&gt;If your intention is to build and deploy for use in a production infrastructure a released tag should be used. The default branch, &lt;code&gt;master&lt;/code&gt;, is the current development branch for an upcoming major version. Get the latest release tags listed at &lt;a href="https://goteleport.com/download/"&gt;https://goteleport.com/download/&lt;/a&gt; and then use that tag in the &lt;code&gt;git clone&lt;/code&gt;. For example &lt;code&gt;git clone https://github.com/gravitational/teleport.git -b v16.0.0&lt;/code&gt; gets release v16.0.0.&lt;/p&gt; 
&lt;h3&gt;Dockerized Build&lt;/h3&gt; 
&lt;p&gt;It is often easiest to build with Docker, which ensures that all required tooling is available for the build. To execute a dockerized build, ensure that docker is installed and running, and execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make -C build.assets build-binaries
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Local Build&lt;/h3&gt; 
&lt;h4&gt;Dependencies&lt;/h4&gt; 
&lt;p&gt;The following dependencies are required to build Teleport from source. For maximum compatibility, install the versions of these dependencies using the versions listed in &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/build.assets/versions.mk"&gt;&lt;code&gt;build.assets/versions.mk&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://golang.org/dl/"&gt;&lt;code&gt;Go&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;&lt;code&gt;Rust&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nodejs.org/en/download/"&gt;&lt;code&gt;Node.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yubico/libfido2"&gt;&lt;code&gt;libfido2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.freedesktop.org/wiki/Software/pkg-config/"&gt;&lt;code&gt;pkg-config&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For an example of Dev Environment setup on a Mac, see &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/BUILD_macos.md"&gt;these instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Perform a build&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The Go compiler is somewhat sensitive to the amount of memory: you will need &lt;strong&gt;at least&lt;/strong&gt; 1GB of virtual memory to compile Teleport. A 512MB instance without swap will &lt;strong&gt;not&lt;/strong&gt; work.&lt;/li&gt; 
  &lt;li&gt;This will build the latest version of Teleport, &lt;strong&gt;regardless&lt;/strong&gt; of whether it is stable. If you want to build the latest stable release, run &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git submodule update --recursive&lt;/code&gt; to the corresponding tag (for example,&lt;/li&gt; 
  &lt;li&gt;run &lt;code&gt;git checkout v8.0.0&lt;/code&gt;) &lt;strong&gt;before&lt;/strong&gt; performing a build.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Get the source&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/gravitational/teleport.git
cd teleport
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To perform a build&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;tsh&lt;/code&gt; dynamically links against libfido2 by default, to support development environments, as long as the library itself can be found:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ brew install libfido2 pkg-config  # Replace with your package manager of choice

$ make build/tsh
&amp;gt; libfido2 found, setting FIDO2=dynamic
&amp;gt; (...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Release binaries are linked statically against libfido2. You may switch the linking mode using the FIDO2 variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make build/tsh FIDO2=dynamic # dynamic linking
make build/tsh FIDO2=static  # static linking, for an easy setup use `make enter`
                             # or `build.assets/macos/build-fido2-macos.sh`.
make build/tsh FIDO2=off     # doesn't link libfido2 in any way
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;tsh&lt;/code&gt; builds with Touch ID support require access to an Apple Developer account. If you are a Teleport maintainer, ask the team for access.&lt;/p&gt; 
&lt;h4&gt;Build output and run locally&lt;/h4&gt; 
&lt;p&gt;If the build succeeds, the installer will place the binaries in the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;Before starting, create default data directories:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo mkdir -p -m0700 /var/lib/teleport
sudo chown $USER /var/lib/teleport
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running Teleport in a hot reload mode&lt;/h4&gt; 
&lt;p&gt;To speed up your development process, you can run Teleport using &lt;a href="https://github.com/githubnemo/CompileDaemon"&gt;&lt;code&gt;CompileDaemon&lt;/code&gt;&lt;/a&gt;. This will build and run the Teleport binary, and then rebuild and restart it whenever any Go source files change.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install CompileDaemon:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;go install github.com/githubnemo/CompileDaemon@latest
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that we use &lt;code&gt;go install&lt;/code&gt; instead of the suggested &lt;code&gt;go get&lt;/code&gt;, because we don't want CompileDaemon to become a dependency of the project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build and run the Teleport binary:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;make teleport-hot-reload
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, this runs a &lt;code&gt;teleport start&lt;/code&gt; command. If you want to customize the command, for example by providing a custom config file location, you can use the &lt;code&gt;TELEPORT_ARGS&lt;/code&gt; parameter:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;make teleport-hot-reload TELEPORT_ARGS='start --config=/path/to/config.yaml'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note that you still need to run &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/api/proto/README.md"&gt;&lt;code&gt;make grpc&lt;/code&gt;&lt;/a&gt; if you modify any Protocol Buffers files to regenerate the generated Go sources; regenerating these sources should in turn cause the CompileDaemon to rebuild and restart Teleport.&lt;/p&gt; 
&lt;h3&gt;Web UI&lt;/h3&gt; 
&lt;p&gt;The Teleport Web UI resides in the &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/web"&gt;web&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h4&gt;Rebuilding Web UI for development&lt;/h4&gt; 
&lt;p&gt;To rebuild the Teleport UI package, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make docker-ui
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can replace Teleport Web UI files with the files from the newly-generated &lt;code&gt;/dist&lt;/code&gt; folder.&lt;/p&gt; 
&lt;p&gt;To enable speedy iterations on the Web UI, you can run a &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/web#web-ui"&gt;local web-dev server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also tell Teleport to load the Web UI assets from the source directory. To enable this behavior, set the environment variable &lt;code&gt;DEBUG=1&lt;/code&gt; and rebuild with the default target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run Teleport as a single-node cluster in development mode:
DEBUG=1 ./build/teleport start -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Keep the server running in this mode, and make your UI changes in &lt;code&gt;/dist&lt;/code&gt; directory. For instructions about how to update the Web UI, read &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/web#readme"&gt;the &lt;code&gt;web&lt;/code&gt; README&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Managing dependencies&lt;/h3&gt; 
&lt;p&gt;All dependencies are managed using &lt;a href="https://blog.golang.org/using-go-modules"&gt;Go modules&lt;/a&gt;. Here are the instructions for some common tasks:&lt;/p&gt; 
&lt;h4&gt;Add a new dependency&lt;/h4&gt; 
&lt;p&gt;Latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get github.com/new/dependency
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and update the source to use this dependency.&lt;/p&gt; 
&lt;p&gt;To get a specific version, use &lt;code&gt;go get github.com/new/dependency@version&lt;/code&gt; instead.&lt;/p&gt; 
&lt;h4&gt;Set dependency to a specific version&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get github.com/new/dependency@version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Update dependency to the latest version&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get -u github.com/new/dependency
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Update all dependencies&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get -u all
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Debugging dependencies&lt;/h4&gt; 
&lt;p&gt;Why is a specific package imported?&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;go mod why $pkgname&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Why is a specific module imported?&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;go mod why -m $modname&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Why is a specific version of a module imported?&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;go mod graph | grep $modname&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Why did We Build Teleport?&lt;/h2&gt; 
&lt;p&gt;The Teleport creators used to work together at Rackspace. We noticed that most cloud computing users struggle with setting up and configuring infrastructure security because popular tools, while flexible, are complex to understand and expensive to maintain. Additionally, most organizations use multiple infrastructure form factors such as several cloud providers, multiple cloud accounts, servers in colocation, and even smart devices. Some of those devices run on untrusted networks, behind third-party firewalls. This only magnifies complexity and increases operational overhead.&lt;/p&gt; 
&lt;p&gt;We had a choice, either start a security consulting business or build a solution that's dead-easy to use and understand. A real-time representation of all of your servers in the same room as you, as if they were magically &lt;em&gt;teleported&lt;/em&gt;. Thus, Teleport was born!&lt;/p&gt; 
&lt;h2&gt;More Information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/get-started/"&gt;Teleport Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/reference/architecture/"&gt;Teleport Architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/reference/"&gt;Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support and Contributing&lt;/h2&gt; 
&lt;p&gt;We offer a few different options for support. First of all, we try to provide clear and comprehensive documentation. The docs are also in GitHub, so feel free to create a PR or file an issue if you have ideas for improvements. If you still have questions after reviewing our docs, you can also:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join &lt;a href="https://github.com/gravitational/teleport/discussions"&gt;Teleport Discussions&lt;/a&gt; to ask questions. Our engineers are available there to help you.&lt;/li&gt; 
 &lt;li&gt;If you want to contribute to Teleport or file a bug report/issue, you can create an issue here in GitHub.&lt;/li&gt; 
 &lt;li&gt;If you are interested in Teleport Enterprise or more responsive support during a POC, we can also create a dedicated Slack channel for you during your POC. You can &lt;a href="https://goteleport.com/pricing/"&gt;reach out to us through our website&lt;/a&gt; to arrange for a POC.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Is Teleport Secure and Production-Ready?&lt;/h2&gt; 
&lt;p&gt;Yes -- Teleport is production-ready and designed to protect and facilitate access to the most precious and mission-critical applications.&lt;/p&gt; 
&lt;p&gt;Teleport has completed several security audits from nationally and internationally recognized technology security companies.&lt;/p&gt; 
&lt;p&gt;We publicize some of our audit results, security philosophy and related information on our &lt;a href="https://trust.goteleport.com/"&gt;trust page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can see the list of companies that use Teleport in production on the Teleport &lt;a href="https://goteleport.com/case-study/"&gt;product page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Who Built Teleport?&lt;/h2&gt; 
&lt;p&gt;Teleport was created by &lt;a href="https://goteleport.com"&gt;Gravitational, Inc.&lt;/a&gt;. We have built Teleport by borrowing from our previous experiences at Rackspace. &lt;a href="https://goteleport.com/about/"&gt;Learn more about Teleport and our history&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Teleport is distributed in multiple forms with different licensing implications.&lt;/p&gt; 
&lt;p&gt;The Teleport API module (all code in this repository under &lt;code&gt;/api&lt;/code&gt;) is available under the &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/api/LICENSE"&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The remainder of the source code in this repository is available under the &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/LICENSE"&gt;GNU Affero General Public License&lt;/a&gt;. Users compiling Teleport from source must comply with the terms of this license.&lt;/p&gt; 
&lt;p&gt;Teleport Community Edition builds distributed on &lt;a href="http://goteleport.com/download"&gt;http://goteleport.com/download&lt;/a&gt; are available under a &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/build.assets/LICENSE-community"&gt;modified Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prometheus/blackbox_exporter</title>
      <link>https://github.com/prometheus/blackbox_exporter</link>
      <description>&lt;p&gt;Blackbox prober exporter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Blackbox exporter&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://circleci.com/gh/prometheus/blackbox_exporter"&gt;&lt;img src="https://circleci.com/gh/prometheus/blackbox_exporter/tree/master.svg?style=shield" alt="CircleCI" /&gt;&lt;/a&gt; &lt;a href="https://quay.io/repository/prometheus/blackbox-exporter"&gt;&lt;img src="https://quay.io/repository/prometheus/blackbox-exporter/status" alt="Docker Repository on Quay" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/prom/blackbox-exporter/"&gt;&lt;img src="https://img.shields.io/docker/pulls/prom/blackbox-exporter.svg?maxAge=604800" alt="Docker Pulls" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The blackbox exporter allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC.&lt;/p&gt; 
&lt;h2&gt;Running this software&lt;/h2&gt; 
&lt;h3&gt;From binaries&lt;/h3&gt; 
&lt;p&gt;Download the most suitable binary from &lt;a href="https://github.com/prometheus/blackbox_exporter/releases"&gt;the releases tab&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Then:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./blackbox_exporter &amp;lt;flags&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using the docker image&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Note: You may want to &lt;a href="https://docs.docker.com/v17.09/engine/userguide/networking/default_network/ipv6/"&gt;enable ipv6 in your docker configuration&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm \
  -p 9115/tcp \
  --name blackbox_exporter \
  -v $(pwd):/config \
  quay.io/prometheus/blackbox-exporter:latest --config.file=/config/blackbox.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Checking the results&lt;/h3&gt; 
&lt;p&gt;Visiting &lt;a href="http://localhost:9115/probe?target=google.com&amp;amp;module=http_2xx"&gt;http://localhost:9115/probe?target=google.com&amp;amp;module=http_2xx&lt;/a&gt; will return metrics for a HTTP probe against google.com. The &lt;code&gt;probe_success&lt;/code&gt; metric indicates if the probe succeeded. Adding a &lt;code&gt;debug=true&lt;/code&gt; parameter will return debug information for that probe.&lt;/p&gt; 
&lt;p&gt;Metrics concerning the operation of the exporter itself are available at the endpoint &lt;a href="http://localhost:9115/metrics"&gt;http://localhost:9115/metrics&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;TLS and basic authentication&lt;/h3&gt; 
&lt;p&gt;The Blackbox Exporter supports TLS and basic authentication. This enables better control of the various HTTP endpoints.&lt;/p&gt; 
&lt;p&gt;To use TLS and/or basic authentication, you need to pass a configuration file using the &lt;code&gt;--web.config.file&lt;/code&gt; parameter. The format of the file is described &lt;a href="https://github.com/prometheus/exporter-toolkit/raw/master/docs/web-configuration.md"&gt;in the exporter-toolkit repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Note that the TLS and basic authentication settings affect all HTTP endpoints: /metrics for scraping, /probe for probing, and the web UI.&lt;/p&gt; 
&lt;h3&gt;Controlling log level for probe logs&lt;/h3&gt; 
&lt;p&gt;The blackbox_exporter has a primary structured logger that is used for logs related to the application itself. The blackbox_exporter also maintains a second, fully independent structured logger that is used specifically for logging related to the probers (&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;icmp&lt;/code&gt;, &lt;code&gt;dns&lt;/code&gt;, &lt;code&gt;grpc&lt;/code&gt;) and their output. The scrape probe logger defaults to &lt;code&gt;info&lt;/code&gt; level filtering, similar to the primary logger.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;All log samples below used the following basic &lt;code&gt;blackbox.yml&lt;/code&gt; configuration file and contain the probe logs of a single scrape generated by &lt;code&gt;curl&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# blackbox.yml
modules:
  http_2xx:
    prober: http

# generate probe
curl -sL "http://localhost:9115/probe?target=prometheus.io&amp;amp;module=http_2xx&amp;amp;debug=true"
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example stderr and debug module output with `--log.prober=info` (default)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;~ $ ./blackbox_exporter --config.file ./blackbox.yml
time=2025-09-09T00:58:02.557-04:00 level=INFO source=main.go:95 msg="Starting blackbox_exporter" version="(version=0.27.0, branch=feat/make-scrape-logger-independent, revision=47e27d09847edf2ade2732b50663c37ed8177485)"
time=2025-09-09T00:58:02.557-04:00 level=INFO source=main.go:96 msg="(go=go1.24.4, platform=linux/amd64, user=tjhop@contraband, date=20250909-04:57:55, tags=unknown)"
time=2025-09-09T00:58:02.557-04:00 level=INFO source=main.go:108 msg="Loaded config file"
time=2025-09-09T00:58:02.558-04:00 level=INFO source=tls_config.go:347 msg="Listening on" address=[::]:9115
time=2025-09-09T00:58:02.558-04:00 level=INFO source=tls_config.go:350 msg="TLS is disabled." http2=false address=[::]:9115
time=2025-09-09T00:58:06.756-04:00 level=WARN source=http.go:490 msg="Received redirect" module=http_2xx target=prometheus.io location=https://prometheus.io/
^Ctime=2025-09-09T00:58:12.257-04:00 level=INFO source=main.go:290 msg="Received SIGTERM, exiting gracefully..."
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;~ $ curl -sL "http://localhost:9115/probe?target=prometheus.io&amp;amp;module=http_2xx&amp;amp;debug=true" | sed '/Metrics that would have been returned/q'
Logs for the probe:
time=2025-09-09T00:58:06.756-04:00 level=WARN source=http.go:490 msg="Received redirect" module=http_2xx target=prometheus.io location=https://prometheus.io/



Metrics that would have been returned:
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example stderr and debug module output with `--log.prober=debug`&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;~ $ ./blackbox_exporter --config.file ./blackbox.yml --log.prober=debug
time=2025-09-09T00:58:21.483-04:00 level=INFO source=main.go:95 msg="Starting blackbox_exporter" version="(version=0.27.0, branch=feat/make-scrape-logger-independent, revision=47e27d09847edf2ade2732b50663c37ed8177485)"
time=2025-09-09T00:58:21.483-04:00 level=INFO source=main.go:96 msg="(go=go1.24.4, platform=linux/amd64, user=tjhop@contraband, date=20250909-04:57:55, tags=unknown)"
time=2025-09-09T00:58:21.483-04:00 level=INFO source=main.go:108 msg="Loaded config file"
time=2025-09-09T00:58:21.484-04:00 level=INFO source=tls_config.go:347 msg="Listening on" address=[::]:9115
time=2025-09-09T00:58:21.484-04:00 level=INFO source=tls_config.go:350 msg="TLS is disabled." http2=false address=[::]:9115
time=2025-09-09T00:58:26.604-04:00 level=DEBUG source=handler.go:116 msg="Beginning probe" module=http_2xx target=prometheus.io probe=http timeout_seconds=119.5
time=2025-09-09T00:58:26.604-04:00 level=DEBUG source=utils.go:61 msg="Resolving target address" module=http_2xx target=prometheus.io target=prometheus.io ip_protocol=ip4
time=2025-09-09T00:58:26.605-04:00 level=DEBUG source=utils.go:96 msg="Resolved target address" module=http_2xx target=prometheus.io target=prometheus.io ip=104.21.60.220
time=2025-09-09T00:58:26.605-04:00 level=DEBUG source=http.go:209 msg="Making HTTP request" module=http_2xx target=prometheus.io url=http://104.21.60.220 host=prometheus.io
time=2025-09-09T00:58:26.645-04:00 level=WARN source=http.go:490 msg="Received redirect" module=http_2xx target=prometheus.io location=https://prometheus.io/
time=2025-09-09T00:58:26.645-04:00 level=DEBUG source=http.go:209 msg="Making HTTP request" module=http_2xx target=prometheus.io url=https://prometheus.io/ host=""
time=2025-09-09T00:58:26.645-04:00 level=DEBUG source=http.go:224 msg="Address does not match first address, not sending TLS ServerName" module=http_2xx target=prometheus.io first=104.21.60.220 address=prometheus.io
time=2025-09-09T00:58:26.765-04:00 level=DEBUG source=http.go:590 msg="Received HTTP response" module=http_2xx target=prometheus.io status_code=200
time=2025-09-09T00:58:26.800-04:00 level=DEBUG source=http.go:721 msg="Response timings for roundtrip" module=http_2xx target=prometheus.io roundtrip=0 start=2025-09-09T00:58:26.605-04:00 dnsDone=2025-09-09T00:58:26.605-04:00 connectDone=2025-09-09T00:58:26.619-04:00 gotConn=2025-09-09T00:58:26.619-04:00 responseStart=2025-09-09T00:58:26.645-04:00 tlsStart=0001-01-01T00:00:00.000Z tlsDone=0001-01-01T00:00:00.000Z end=0001-01-01T00:00:00.000Z
time=2025-09-09T00:58:26.800-04:00 level=DEBUG source=http.go:721 msg="Response timings for roundtrip" module=http_2xx target=prometheus.io roundtrip=1 start=2025-09-09T00:58:26.645-04:00 dnsDone=2025-09-09T00:58:26.646-04:00 connectDone=2025-09-09T00:58:26.656-04:00 gotConn=2025-09-09T00:58:26.717-04:00 responseStart=2025-09-09T00:58:26.765-04:00 tlsStart=2025-09-09T00:58:26.657-04:00 tlsDone=2025-09-09T00:58:26.717-04:00 end=2025-09-09T00:58:26.800-04:00
time=2025-09-09T00:58:26.801-04:00 level=DEBUG source=handler.go:127 msg="Probe succeeded" module=http_2xx target=prometheus.io duration_seconds=0.196876958
^Ctime=2025-09-09T00:58:32.471-04:00 level=INFO source=main.go:290 msg="Received SIGTERM, exiting gracefully..."
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;~ $ curl -sL "http://localhost:9115/probe?target=prometheus.io&amp;amp;module=http_2xx&amp;amp;debug=true" | sed '/Metrics that would have been returned/q'
Logs for the probe:
time=2025-09-09T00:58:26.604-04:00 level=DEBUG source=handler.go:116 msg="Beginning probe" module=http_2xx target=prometheus.io probe=http timeout_seconds=119.5
time=2025-09-09T00:58:26.604-04:00 level=DEBUG source=utils.go:61 msg="Resolving target address" module=http_2xx target=prometheus.io target=prometheus.io ip_protocol=ip4
time=2025-09-09T00:58:26.605-04:00 level=DEBUG source=utils.go:96 msg="Resolved target address" module=http_2xx target=prometheus.io target=prometheus.io ip=104.21.60.220
time=2025-09-09T00:58:26.605-04:00 level=DEBUG source=http.go:209 msg="Making HTTP request" module=http_2xx target=prometheus.io url=http://104.21.60.220 host=prometheus.io
time=2025-09-09T00:58:26.645-04:00 level=WARN source=http.go:490 msg="Received redirect" module=http_2xx target=prometheus.io location=https://prometheus.io/
time=2025-09-09T00:58:26.645-04:00 level=DEBUG source=http.go:209 msg="Making HTTP request" module=http_2xx target=prometheus.io url=https://prometheus.io/ host=""
time=2025-09-09T00:58:26.645-04:00 level=DEBUG source=http.go:224 msg="Address does not match first address, not sending TLS ServerName" module=http_2xx target=prometheus.io first=104.21.60.220 address=prometheus.io
time=2025-09-09T00:58:26.765-04:00 level=DEBUG source=http.go:590 msg="Received HTTP response" module=http_2xx target=prometheus.io status_code=200
time=2025-09-09T00:58:26.800-04:00 level=DEBUG source=http.go:721 msg="Response timings for roundtrip" module=http_2xx target=prometheus.io roundtrip=0 start=2025-09-09T00:58:26.605-04:00 dnsDone=2025-09-09T00:58:26.605-04:00 connectDone=2025-09-09T00:58:26.619-04:00 gotConn=2025-09-09T00:58:26.619-04:00 responseStart=2025-09-09T00:58:26.645-04:00 tlsStart=0001-01-01T00:00:00.000Z tlsDone=0001-01-01T00:00:00.000Z end=0001-01-01T00:00:00.000Z
time=2025-09-09T00:58:26.800-04:00 level=DEBUG source=http.go:721 msg="Response timings for roundtrip" module=http_2xx target=prometheus.io roundtrip=1 start=2025-09-09T00:58:26.645-04:00 dnsDone=2025-09-09T00:58:26.646-04:00 connectDone=2025-09-09T00:58:26.656-04:00 gotConn=2025-09-09T00:58:26.717-04:00 responseStart=2025-09-09T00:58:26.765-04:00 tlsStart=2025-09-09T00:58:26.657-04:00 tlsDone=2025-09-09T00:58:26.717-04:00 end=2025-09-09T00:58:26.800-04:00
time=2025-09-09T00:58:26.801-04:00 level=DEBUG source=handler.go:127 msg="Probe succeeded" module=http_2xx target=prometheus.io duration_seconds=0.196876958



Metrics that would have been returned:
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Building the software&lt;/h2&gt; 
&lt;h3&gt;Local Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building with Docker&lt;/h3&gt; 
&lt;p&gt;After a successful local build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker build -t blackbox_exporter .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/CONFIGURATION.md"&gt;Configuration&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Blackbox exporter is configured via a &lt;a href="https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/CONFIGURATION.md"&gt;configuration file&lt;/a&gt; and command-line flags (such as what configuration file to load, what port to listen on, and the logging format and level).&lt;/p&gt; 
&lt;p&gt;Blackbox exporter can reload its configuration file at runtime. If the new configuration is not well-formed, the changes will not be applied. A configuration reload is triggered by sending a &lt;code&gt;SIGHUP&lt;/code&gt; to the Blackbox exporter process or by sending a HTTP POST request to the &lt;code&gt;/-/reload&lt;/code&gt; endpoint.&lt;/p&gt; 
&lt;p&gt;Blackbox exporter also supports automatic configuration reloading. You can enable this feature using the &lt;code&gt;--config.enable-auto-reload&lt;/code&gt; flag. When enabled, the exporter will automatically check for changes to its configuration file at a specified interval in seconds. The interval can be customized with the &lt;code&gt;--config.auto-reload-interval&lt;/code&gt; flag, which is set to 30 (which is 30 seconds) by default.&lt;/p&gt; 
&lt;p&gt;To view all available command-line flags, run &lt;code&gt;./blackbox_exporter -h&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To specify which &lt;a href="https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/CONFIGURATION.md"&gt;configuration file&lt;/a&gt; to load, use the &lt;code&gt;--config.file&lt;/code&gt; flag.&lt;/p&gt; 
&lt;p&gt;Additionally, an &lt;a href="https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/example.yml"&gt;example configuration&lt;/a&gt; is also available.&lt;/p&gt; 
&lt;p&gt;HTTP, HTTPS (via the &lt;code&gt;http&lt;/code&gt; prober), DNS, TCP socket, ICMP and gRPC (see permissions section) are currently supported. Additional modules can be defined to meet your needs.&lt;/p&gt; 
&lt;p&gt;The timeout of each probe is automatically determined from the &lt;code&gt;scrape_timeout&lt;/code&gt; in the &lt;a href="https://prometheus.io/docs/operating/configuration/#configuration-file"&gt;Prometheus config&lt;/a&gt;, slightly reduced to allow for network delays. This can be further limited by the &lt;code&gt;timeout&lt;/code&gt; in the Blackbox exporter config file. If neither is specified, it defaults to 120 seconds.&lt;/p&gt; 
&lt;h2&gt;Prometheus Configuration&lt;/h2&gt; 
&lt;p&gt;Blackbox exporter implements the multi-target exporter pattern, so we advice to read the guide &lt;a href="https://prometheus.io/docs/guides/multi-target-exporter/"&gt;Understanding and using the multi-target exporter pattern &lt;/a&gt; to get the general idea about the configuration.&lt;/p&gt; 
&lt;p&gt;The blackbox exporter needs to be passed the target as a parameter, this can be done with relabelling.&lt;/p&gt; 
&lt;p&gt;Example config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;scrape_configs:
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]  # Look for a HTTP 200 response.
    static_configs:
      - targets:
        - http://prometheus.io    # Target to probe with http.
        - https://prometheus.io   # Target to probe with https.
        - http://example.com:8080 # Target to probe with http on port 8080.
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: 127.0.0.1:9115  # The blackbox exporter's real hostname:port.
  - job_name: 'blackbox_exporter'  # collect blackbox exporter's operational metrics.
    static_configs:
      - targets: ['127.0.0.1:9115']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;HTTP probes can accept an additional &lt;code&gt;hostname&lt;/code&gt; parameter that will set &lt;code&gt;Host&lt;/code&gt; header and TLS SNI. This can be especially useful with &lt;code&gt;dns_sd_config&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;scrape_configs:
  - job_name: blackbox_all
    metrics_path: /probe
    params:
      module: [ http_2xx ]  # Look for a HTTP 200 response.
    dns_sd_configs:
      - names:
          - example.com
          - prometheus.io
        type: A
        port: 443
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
        replacement: https://$1/  # Make probe URL be like https://1.2.3.4:443/
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: 127.0.0.1:9115  # The blackbox exporter's real hostname:port.
      - source_labels: [__meta_dns_name]
        target_label: __param_hostname  # Make domain name become 'Host' header for probe requests
      - source_labels: [__meta_dns_name]
        target_label: vhost  # and store it in 'vhost' label
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Permissions&lt;/h2&gt; 
&lt;p&gt;The ICMP probe requires elevated privileges to function:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Windows&lt;/em&gt;: Administrator privileges are required.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Linux&lt;/em&gt;: either a user with a group within &lt;code&gt;net.ipv4.ping_group_range&lt;/code&gt;, the &lt;code&gt;CAP_NET_RAW&lt;/code&gt; capability or the root user is required. 
  &lt;ul&gt; 
   &lt;li&gt;Your distribution may configure &lt;code&gt;net.ipv4.ping_group_range&lt;/code&gt; by default in &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; or similar. If not you can set &lt;code&gt;net.ipv4.ping_group_range = 0 2147483647&lt;/code&gt; to allow any user the ability to use ping.&lt;/li&gt; 
   &lt;li&gt;Alternatively the capability can be set by executing &lt;code&gt;setcap cap_net_raw+ep blackbox_exporter&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;BSD&lt;/em&gt;: root user is required.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;OS X&lt;/em&gt;: No additional privileges are needed.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>vmware-tanzu/velero</title>
      <link>https://github.com/vmware-tanzu/velero</link>
      <description>&lt;p&gt;Backup and migrate Kubernetes applications and their persistent volumes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://velero.io/docs/main/img/velero.png" alt="100" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/vmware-tanzu/velero/actions?query=workflow%3A%22Main+CI%22"&gt;&lt;img src="https://github.com/vmware-tanzu/velero/workflows/Main%20CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/3811"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/3811/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/v/release/vmware-tanzu/velero" alt="GitHub release (latest SemVer)" /&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Velero (formerly Heptio Ark) gives you tools to back up and restore your Kubernetes cluster resources and persistent volumes. You can run Velero with a public cloud platform or on-premises.&lt;/p&gt; 
&lt;p&gt;Velero lets you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Take backups of your cluster and restore in case of loss.&lt;/li&gt; 
 &lt;li&gt;Migrate cluster resources to other clusters.&lt;/li&gt; 
 &lt;li&gt;Replicate your production cluster to development and testing clusters.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Velero consists of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A server that runs on your cluster&lt;/li&gt; 
 &lt;li&gt;A command-line client that runs locally&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://velero.io/docs/"&gt;The documentation&lt;/a&gt; provides a getting started guide and information about building from source, architecture, extending Velero and more.&lt;/p&gt; 
&lt;p&gt;Please use the version selector at the top of the site to ensure you are using the appropriate documentation for your version of Velero.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;If you encounter issues, review the &lt;a href="https://velero.io/docs/troubleshooting"&gt;troubleshooting docs&lt;/a&gt;, &lt;a href="https://github.com/vmware-tanzu/velero/issues"&gt;file an issue&lt;/a&gt;, or talk to us on the &lt;a href="https://kubernetes.slack.com/messages/velero"&gt;#velero channel&lt;/a&gt; on the Kubernetes Slack server.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you are ready to jump in and test, add code, or help with documentation, follow the instructions on our &lt;a href="https://velero.io/docs/start-contributing"&gt;Start contributing&lt;/a&gt; documentation for guidance on how to setup Velero for development.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/vmware-tanzu/velero/releases"&gt;the list of releases&lt;/a&gt; to find out about feature changes.&lt;/p&gt; 
&lt;h3&gt;Velero compatibility matrix&lt;/h3&gt; 
&lt;p&gt;The following is a list of the supported Kubernetes versions for each Velero version.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Velero version&lt;/th&gt; 
   &lt;th&gt;Expected Kubernetes version compatibility&lt;/th&gt; 
   &lt;th&gt;Tested on Kubernetes version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.17&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.31.7, 1.32.3, 1.33.1, and 1.34.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.16&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.31.4, 1.32.3, and 1.33.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.15&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.28.8, 1.29.8, 1.30.4 and 1.31.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.14&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.27.9, 1.28.9, and 1.29.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.13&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.26.5, 1.27.3, 1.27.8, and 1.28.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.12&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.25.7, 1.26.5, 1.26.7, and 1.27.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.11&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.23.10, 1.24.9, 1.25.5, and 1.26.1&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Velero supports IPv4, IPv6, and dual stack environments. Support for this was tested against Velero v1.8.&lt;/p&gt; 
&lt;p&gt;The Velero maintainers are continuously working to expand testing coverage, but are not able to test every combination of Velero and supported Kubernetes versions for each Velero release. The table above is meant to track the current testing coverage and the expected supported Kubernetes versions for each Velero version.&lt;/p&gt; 
&lt;p&gt;If you are interested in using a different version of Kubernetes with a given Velero version, we'd recommend that you perform testing before installing or upgrading your environment. For full information around capabilities within a release, also see the Velero &lt;a href="https://github.com/vmware-tanzu/velero/releases"&gt;release notes&lt;/a&gt; or Kubernetes &lt;a href="https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG"&gt;release notes&lt;/a&gt;. See the Velero &lt;a href="https://velero.io/docs/latest/support-process/"&gt;support page&lt;/a&gt; for information about supported versions of Velero.&lt;/p&gt; 
&lt;p&gt;For each release, Velero maintainers run the test to ensure the upgrade path from n-2 minor release. For example, before the release of v1.10.x, the test will verify that the backup created by v1.9.x and v1.8.x can be restored using the build to be tagged as v1.10.x.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudnative-pg/cloudnative-pg</title>
      <link>https://github.com/cloudnative-pg/cloudnative-pg</link>
      <description>&lt;p&gt;CloudNativePG is a comprehensive platform designed to seamlessly manage PostgreSQL databases within Kubernetes environments, covering the entire operational lifecycle from initial deployment to ongoing maintenance&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://landscape.cncf.io/?item=app-definition-and-development--database--cloudnativepg"&gt;&lt;img src="https://img.shields.io/badge/CNCF%20Landscape-5699C6" alt="CNCF Landscape" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudnative-pg/cloudnative-pg/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/cloudnative-pg/cloudnative-pg.svg?sanitize=true" alt="Latest Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudnative-pg/cloudnative-pg?tab=Apache-2.0-1-ov-file#readme"&gt;&lt;img src="https://img.shields.io/github/license/cloudnative-pg/cloudnative-pg" alt="GitHub License" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/9933"&gt;&lt;img src="https://www.bestpractices.dev/projects/9933/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/cloudnative-pg/cloudnative-pg"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/cloudnative-pg/cloudnative-pg/badge" alt="OpenSSF Scorecard Badge" /&gt;&lt;/a&gt; &lt;a href="https://cloudnative-pg.io/documentation/current/"&gt;&lt;img src="https://img.shields.io/badge/Documentation-white?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAGN0lEQVR4nJRXXWwcVxU%2B8%2F%2BzP%2BPZtR2v7dqy07jUJUALNaiK6lZyUVVKWgGKaIv8QCMekBAVQlQICcEzVZFQVYFKQhASEBHlISJPCRJEshTFChgrIYHEiYMh69jetffHM7Mzc%2B9Bs7vjnTs7yZpZWbt37s%2F5zne%2Bc861CD0eXRkbHc3NfjeffvxNAGEAgULD2756v35%2B3qe1Nc4fnQVEXlA2LnOcXlCF8S%2B6vvVgq%2FL3M65X3e51PvfQCU4WJgZe%2B8GQ8fS7AKgjBB8KEHwjDXZSjkf0CREAaXM2eI9c65siqWxWl360Xl74ANHz%2Fy8AitxnTBfmz%2BhyYS4wGhwObQCIHSA0AigOMBzvOsXzd4pnjyL6NMmWEH8hi2b28Og3%2FqRJA0ewfQy0v1vGO2NovwPo%2FEU%2FwVgSU1PI%2BSu79v3lJAB8HM%2BTI%2FO%2FUUXzM4xHIe0xI4DdRqOAwnF%2F38ePPyzaDIDh%2FMxcWh462m08aojuGY97C0nrAEHg9BlF0fmeAPr0J15vbaKsp0BZQzEDEAlP9B209UIIVXUta%2FQEQHwxgxFjTc%2BRskAwrgVWmHtg22vMPJwLDqGUNJIAMHVAkGu3WdpZz6NAkgSXpINSycluV28er1a3rJ4M3F2%2F9AtCvXKycRrTQttrjINjxxxIL9jevxdaDHU%2FTBr6pL5ruzuLZubgUQBOY2hPij3GBUe7tBCMBRE2KrXVSz0BBI%2FtPVgtV%2F%2FxkZ5WSjI%2F%2BFIXC3sHJwgT4yFqrZFFTSlVrp3sGYLwcfxSmXCbS00j2Ms4K7qkOsFx6qdTuiHtG4AimfmM8NyvOvR2G48qXtZ2fsfrN7%2BqpcRyUp0glKiimDm4TwAcHBp%2B9WeA4ki0GMWNR9OVF8BZvn7xtI%2FF09H8jzLEgz6yLwCDuelnFXHkTZZOytCOEdqDOtGwsm%2BNj00fXt%2B6%2Bj4vcA7bwNrZwENmXwAKuZnvsNRThs5ozMPfPiHyoDF7xiduHcXb70A8dRFheHjiySQATBZk0nl9MHPkBEWUoEtYjyrPFNwGzfdlD37Zdu98KCv%2BMmD2BYpUCvcST39e0%2BS1Wr249FAAg7mPzWrS5NstEbE0xrsiA6QN1PfRFLnhr%2BspxVJTlY8Mw1DqNXeyCQFREEXz9cHB0QOev73QaNhOF4B%2B45PHFHFgDhJTqjuubJFqX1KQco7NTTuW8kq95k2G4eLEGzM7lfItnjNeTKcOfV%2FT8hOuV77A9IK0XjgMpCO0ZiuV3L%2F6njCFAOmucGB3OII5XgCXEJTDdZLElVbu3Vz0fWexvL30k0B6ggBACOmIUBAEUKX0dDTvW7RCYcdZPq6n%2FSsQnUO2RuyBRgQ9Rc5mMvJ6CNIj1nXfd9qWAsCkaZzJAk1L8UjVqY737dSjfCGrPHWqXL32Q0mB%2F2BXnke00WaEYv2aTzAbnuV5pcWkDGAAGJmhSafh6hjr%2BW2SVYHrP7bb%2BOdPW%2FUgflGlTM2gaK%2Ft7tp6%2BN6yixdN89DcIwGktIFPABfNbwoQqQWEUnDJzg1g0jDeK5p7Kp7nensXFI7uyAr%2FLyM7fYLnpa6LYScE8vDnot5hrKlslm%2BfE3nVxJgO4o3KcYu%2FF8XM8yFQ27n%2F65Te%2FzKl3Jhpjj6TCIDneRD5%2FItxr1vdkALw7p1qfeWPpjHxMtsXaPxu6FLc%2BrnbSB1r7fcrlr36nqwMzQfnplJDryQCGOh%2FbLjhcM%2FEvQ4Pdund9xRV5m1LfTXaF%2BK9gsLGB9nsgddcz8thM%2FarPzYM8%2FFazf9sMFaU%2Fi%2FwvNANwEhPvUGR8ozn7d%2BiDKXixtKpbHp81nV9E7puRy31ixKUbOe%2Fv3Ud891ghhDrL5Z975eaOvV%2BCNRp0Gfz%2BcJjDABdTwlpdfKbId0t5XYAcHz5D5ZVtWUp9%2Flog2L7PgVJqZx0HOE5Cqghemv1%2Bt%2FeGBmZ%2BdB2yNN72UEpnzXG32YADA186i3bIpPxMhuKrFK%2Fd77JUnbkKbYvRJlC8DzKSZK76Lq1he2dKy%2BZuSfesSz5a2xHDbLJ%2BJaqdv5H4EUY%2BzbG2m9HgN7mg81bfw4W1uu7AjvHaqDhqF%2FZ3Fq5XFy%2FcESSDsx5fvZ7wLEsNfXk%2BjlVHfpSCOB%2FAQAA%2F%2F8zd8orZc2N9AAAAABJRU5ErkJggg%3D%3D" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/tagged/cloudnative-pg"&gt;&lt;img src="https://img.shields.io/badge/stackoverflow-cloudnative--pg-blue?logo=stackoverflow&amp;amp;logoColor=%23F48024&amp;amp;link=https%3A%2F%2Fstackoverflow.com%2Fquestions%2Ftagged%2Fcloudnative-pg" alt="Stack Overflow" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fcloudnative-pg%2Fcloudnative-pg?ref=badge_small"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fcloudnative-pg%2Fcloudnative-pg.svg?type=small" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Welcome to the CloudNativePG Project!&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;CloudNativePG (CNPG)&lt;/strong&gt; is an open-source platform designed to seamlessly manage &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; databases in Kubernetes environments. It covers the entire operational lifecycle—from deployment to ongoing maintenance—through its core component, the CloudNativePG operator.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudnative-pg/governance/raw/main/GOVERNANCE.md"&gt;Governance Policies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/ADOPTERS.md"&gt;Adopters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnative-pg.io/support/"&gt;Commercial Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/LICENSE"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;The best way to get started is the &lt;a href="https://cloudnative-pg.io/documentation/current/quickstart/"&gt;Quickstart Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Scope&lt;/h2&gt; 
&lt;h3&gt;Mission&lt;/h3&gt; 
&lt;p&gt;CloudNativePG aims to increase PostgreSQL adoption within Kubernetes by making it an integral part of the development process and GitOps-driven CI/CD automation.&lt;/p&gt; 
&lt;h3&gt;Core Principles &amp;amp; Features&lt;/h3&gt; 
&lt;p&gt;Designed by PostgreSQL experts for Kubernetes administrators, CloudNativePG follows a Kubernetes-native approach to PostgreSQL primary/standby cluster management. Instead of relying on external high-availability tools (like Patroni, repmgr, or Stolon), it integrates directly with the Kubernetes API to automate database operations that a skilled DBA would perform manually.&lt;/p&gt; 
&lt;p&gt;Key design decisions include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Direct integration with Kubernetes API: The PostgreSQL cluster’s status is available directly in the &lt;code&gt;Cluster&lt;/code&gt; resource, allowing users to inspect it via the Kubernetes API.&lt;/li&gt; 
 &lt;li&gt;Operator pattern: The operator ensures that the desired PostgreSQL state is reconciled automatically, following Kubernetes best practices.&lt;/li&gt; 
 &lt;li&gt;Immutable application containers: Updates follow an immutable infrastructure model, as explained in &lt;a href="https://www.enterprisedb.com/blog/why-edb-chose-immutable-application-containers"&gt;"Why EDB Chose Immutable Application Containers"&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How CloudNativePG Works&lt;/h3&gt; 
&lt;p&gt;The operator continuously monitors and updates the PostgreSQL cluster state. Examples of automated actions include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Failover management: If the primary instance fails, the operator elects a new primary, updates the cluster status, and orchestrates the transition.&lt;/li&gt; 
 &lt;li&gt;Scaling read replicas: When the number of desired replicas changes, the operator provisions or removes resources such as persistent volumes, secrets, and config maps while managing streaming replication.&lt;/li&gt; 
 &lt;li&gt;Service updates: Kubernetes remains the single source of truth, ensuring that PostgreSQL service endpoints are always up to date.&lt;/li&gt; 
 &lt;li&gt;Rolling updates: When an image is updated, the operator follows a rolling strategy—first updating replica pods before performing a controlled switchover for the primary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;CloudNativePG manages additional Kubernetes resources to enhance PostgreSQL management, including: &lt;code&gt;Backup&lt;/code&gt;, &lt;code&gt;ClusterImageCatalog&lt;/code&gt;, &lt;code&gt;Database&lt;/code&gt;, &lt;code&gt;ImageCatalog&lt;/code&gt;, &lt;code&gt;Pooler&lt;/code&gt;, &lt;code&gt;Publication&lt;/code&gt;, &lt;code&gt;ScheduledBackup&lt;/code&gt;, and &lt;code&gt;Subscription&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Out of Scope&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Kubernetes only:&lt;/strong&gt; CloudNativePG is dedicated to vanilla Kubernetes maintained by the &lt;a href="https://kubernetes.io/"&gt;Cloud Native Computing Foundation (CNCF)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PostgreSQL only:&lt;/strong&gt; CloudNativePG is dedicated to vanilla PostgreSQL maintained by the &lt;a href="https://www.postgresql.org/about/"&gt;PostgreSQL Global Development Group (PGDG)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No support for forks:&lt;/strong&gt; Features from PostgreSQL forks will only be considered if they can be integrated as extensions or pluggable frameworks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Not a general-purpose database operator:&lt;/strong&gt; CloudNativePG does not support other databases (e.g., MariaDB).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;CloudNativePG can be extended via the &lt;a href="https://github.com/cloudnative-pg/cnpg-i"&gt;CNPG-I plugin interface&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Communications&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudnative-pg/cloudnative-pg/discussions"&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud-native.slack.com/archives/C08MAUJ7NPM"&gt;Slack&lt;/a&gt; (join the &lt;a href="https://communityinviter.com/apps/cloud-native/cncf"&gt;CNCF Slack Workspace&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/CloudNativePg"&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mastodon.social/@CloudNativePG"&gt;Mastodon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bsky.app/profile/cloudnativepg.bsky.social"&gt;Bluesky&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orgs/cloudnative-pg/projects/1"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnative-pg.io"&gt;Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/faq.md"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnative-pg.io/blog/"&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudnative-pg/cnpg-i"&gt;CloudNativePG plugin Interface (CNPG-I)&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;A list of publicly known users of the CloudNativePG operator is in &lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/ADOPTERS.md"&gt;ADOPTERS.md&lt;/a&gt;. Help us grow our community and CloudNativePG by adding yourself and your organization to this list!&lt;/p&gt; 
&lt;h3&gt;CloudNativePG at KubeCon&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;April 4 2025, KubeCon Europe in London: &lt;a href="https://sched.co/1tx8g"&gt;"Consistent Volume Group Snapshots, Unraveling the Magic"&lt;/a&gt; - Leonardo Cecchi (EDB) and Xing Yang (VMware)&lt;/li&gt; 
 &lt;li&gt;November 11 2024, Cloud Native Rejekts NA 2024: &lt;a href="https://www.youtube.com/watch?v=uBzl_stoxoc&amp;amp;ab_channel=CloudNativeRejekts"&gt;"Maximising Microservice Databases with Kubernetes, Postgres, and CloudNativePG"&lt;/a&gt; - Gabriele Bartolini (EDB) and Leonardo Cecchi (EDB)&lt;/li&gt; 
 &lt;li&gt;March 21 2024, KubeCon Europe 2024 in Paris: &lt;a href="https://kccnceu2024.sched.com/event/1YeM4/scaling-heights-mastering-postgres-database-vertical-scalability-with-kubernetes-storage-magic-gabriele-bartolini-edb-gari-singh-google"&gt;"Scaling Heights: Mastering Postgres Database Vertical Scalability with Kubernetes Storage Magic"&lt;/a&gt; - Gari Singh, Google &amp;amp; Gabriele Bartolini, EDB&lt;/li&gt; 
 &lt;li&gt;March 19 2024, Data on Kubernetes Day at KubeCon Europe 2024 in Paris: &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFha/from-zero-to-hero-scaling-postgres-in-kubernetes-using-the-power-of-cloudnativepg-gabriele-bartolini-edb"&gt;"From Zero to Hero: Scaling Postgres in Kubernetes Using the Power of CloudNativePG"&lt;/a&gt; - Gabriele Bartolini, EDB&lt;/li&gt; 
 &lt;li&gt;7 November 2023, KubeCon North America 2023 in Chicago: &lt;a href="https://kccncna2023.sched.com/event/1R2ml/disaster-recovery-with-very-large-postgres-databases-gabriele-bartolini-edb-michelle-au-google"&gt;"Disaster Recovery with Very Large Postgres Databases (in Kubernetes)"&lt;/a&gt; - Michelle Au, Google &amp;amp; Gabriele Bartolini, EDB&lt;/li&gt; 
 &lt;li&gt;27 October 2022, KubeCon North America 2022 in Detroit: &lt;a href="https://kccncna2022.sched.com/event/182GB/data-on-kubernetes-deploying-and-running-postgresql-and-patterns-for-databases-in-a-kubernetes-cluster-chris-milsted-ondat-gabriele-bartolini-edb"&gt;"Data On Kubernetes, Deploying And Running PostgreSQL And Patterns For Databases In a Kubernetes Cluster"&lt;/a&gt; - Chris Milsted, Ondat &amp;amp; Gabriele Bartolini, EDB&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Useful links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dok.community/"&gt;Data on Kubernetes (DoK) Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cncf.io/blog/2024/11/20/cloud-neutral-postgres-databases-with-kubernetes-and-cloudnativepg/"&gt;"Cloud Neutral Postgres Databases with Kubernetes and CloudNativePG" by Gabriele Bartolini&lt;/a&gt; (November 2024)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gabrielebartolini.it/articles/2024/03/cloudnativepg-recipe-5-how-to-migrate-your-postgresql-database-in-kubernetes-with-~0-downtime-from-anywhere/"&gt;"How to migrate your PostgreSQL database in Kubernetes with ~0 downtime from anywhere" by Gabriele Bartolini&lt;/a&gt; (March 2024)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gabrielebartolini.it/articles/2024/02/maximizing-microservice-databases-with-kubernetes-postgres-and-cloudnativepg/"&gt;"Maximizing Microservice Databases with Kubernetes, Postgres, and CloudNativePG" by Gabriele Bartolini&lt;/a&gt; (February 2024)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cncf.io/blog/2023/09/29/recommended-architectures-for-postgresql-in-kubernetes/"&gt;"Recommended Architectures for PostgreSQL in Kubernetes" by Gabriele Bartolini&lt;/a&gt; (September 2023)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.enterprisedb.com/blog/current-state-major-postgresql-upgrades-cloudnativepg-kubernetes"&gt;"The Current State of Major PostgreSQL Upgrades with CloudNativePG" by Gabriele Bartolini&lt;/a&gt; (August 2023)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://thenewstack.io/the-rise-of-the-kubernetes-native-database/"&gt;"The Rise of the Kubernetes Native Database" by Jeff Carpenter&lt;/a&gt; (December 2022)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnativenow.com/kubecon-cnc-eu-2022/why-run-postgres-in-kubernetes/"&gt;"Why Run Postgres in Kubernetes?" by Gabriele Bartolini&lt;/a&gt; (May 2022)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tfir.io/shift-left-security-the-path-to-postgresql-on-kubernetes/"&gt;"Shift-Left Security: The Path To PostgreSQL On Kubernetes" by Gabriele Bartolini&lt;/a&gt; (April 2021)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.2ndquadrant.com/en/blog/local-persistent-volumes-and-postgresql-usage-in-kubernetes/"&gt;"Local Persistent Volumes and PostgreSQL usage in Kubernetes" by Gabriele Bartolini&lt;/a&gt; (June 2020)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; We are a &lt;a href="https://www.cncf.io/sandbox-projects/"&gt;Cloud Native Computing Foundation Sandbox project&lt;/a&gt;. &lt;/p&gt; 
&lt;p style="text-align:center;" align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/cncf/artwork/blob/main/other/cncf/horizontal/white/cncf-white.svg?raw=true" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/cncf/artwork/blob/main/other/cncf/horizontal/color/cncf-color.svg?raw=true" /&gt; 
  &lt;img align="center" src="https://github.com/cncf/artwork/raw/main/other/cncf/horizontal/color/cncf-color.svg?raw=true" alt="CNCF logo" width="50%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; CloudNativePG was originally built and sponsored by &lt;a href="https://www.enterprisedb.com"&gt;EDB&lt;/a&gt;. &lt;/p&gt; 
&lt;p style="text-align:center;" align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/cloudnative-pg/.github/main/logo/edb_landscape_color_white.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/cloudnative-pg/.github/main/logo/edb_landscape_color_grey.svg" /&gt; 
  &lt;img align="center" src="https://raw.githubusercontent.com/cloudnative-pg/.github/main/logo/edb_landscape_color_grey.svg?sanitize=true" alt="EDB logo" width="25%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.postgresql.org/about/policies/trademarks/"&gt;Postgres, PostgreSQL, and the Slonik Logo&lt;/a&gt; are trademarks or registered trademarks of the PostgreSQL Community Association of Canada, and used with their permission. &lt;/p&gt; 
&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>wailsapp/wails</title>
      <link>https://github.com/wailsapp/wails</link>
      <description>&lt;p&gt;Create beautiful applications using Go&lt;/p&gt;&lt;hr&gt;&lt;p align="center" style="text-align: center"&gt; &lt;img src="https://raw.githubusercontent.com/wailsapp/wails/master/assets/images/logo-universal.png" width="55%" /&gt;&lt;br /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; Build desktop applications using Go &amp;amp; Web Technologies. &lt;br /&gt; &lt;br /&gt; &lt;a href="https://github.com/wailsapp/wails/raw/master/LICENSE"&gt; &lt;img alt="GitHub" src="https://img.shields.io/github/license/wailsapp/wails" /&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/wailsapp/wails"&gt; &lt;img src="https://goreportcard.com/badge/github.com/wailsapp/wails" /&gt; &lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/wailsapp/wails"&gt; &lt;img src="https://pkg.go.dev/badge/github.com/wailsapp/wails.svg?sanitize=true" alt="Go Reference" /&gt; &lt;/a&gt; &lt;a href="https://github.com/wailsapp/wails/issues"&gt; &lt;img src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" alt="CodeFactor" /&gt; &lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fwailsapp%2Fwails?ref=badge_shield" alt="FOSSA Status"&gt; &lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fwailsapp%2Fwails.svg?type=shield" /&gt; &lt;/a&gt; &lt;a href="https://github.com/avelino/awesome-go" rel="nofollow"&gt; &lt;img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true" alt="Awesome" /&gt; &lt;/a&gt; &lt;a href="https://discord.gg/BrRSWTaxVK"&gt; &lt;img alt="Discord" src="https://dcbadge.vercel.app/api/server/BrRSWTaxVK?style=flat" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/wailsapp/wails/actions/workflows/build-and-test.yml" rel="nofollow"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/wailsapp/wails/build-and-test.yml?branch=master&amp;amp;logo=Github" alt="Build" /&gt; &lt;/a&gt; &lt;a href="https://github.com/wailsapp/wails/tags" rel="nofollow"&gt; &lt;img alt="GitHub tag (latest SemVer pre-release)" src="https://img.shields.io/github/v/tag/wailsapp/wails?include_prereleases&amp;amp;label=version" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;strong&gt; &lt;samp&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.md"&gt;English&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.zh-Hans.md"&gt;简体中文&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.ja.md"&gt;日本語&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.ko.md"&gt;한국어&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.es.md"&gt;Español&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.pt-br.md"&gt;Português&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.ru.md"&gt;Русский&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.fr.md"&gt;Francais&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.uz.md"&gt;Uzbek&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.de.md"&gt;Deutsch&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.tr.md"&gt;Türkçe&lt;/a&gt;&lt;/p&gt; &lt;/samp&gt; &lt;/strong&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#features"&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#sponsors"&gt;Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#stargazers-over-time"&gt;Stargazers over time&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#inspiration"&gt;Inspiration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;The traditional method of providing web interfaces to Go programs is via a built-in web server. Wails offers a different approach: it provides the ability to wrap both Go code and a web frontend into a single binary. Tools are provided to make this easy for you by handling project creation, compilation and bundling. All you have to do is get creative!&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use standard Go for the backend&lt;/li&gt; 
 &lt;li&gt;Use any frontend technology you are already familiar with to build your UI&lt;/li&gt; 
 &lt;li&gt;Quickly create rich frontends for your Go programs using pre-built templates&lt;/li&gt; 
 &lt;li&gt;Easily call Go methods from Javascript&lt;/li&gt; 
 &lt;li&gt;Auto-generated Typescript definitions for your Go structs and methods&lt;/li&gt; 
 &lt;li&gt;Native Dialogs &amp;amp; Menus&lt;/li&gt; 
 &lt;li&gt;Native Dark / Light mode support&lt;/li&gt; 
 &lt;li&gt;Supports modern translucency and "frosted window" effects&lt;/li&gt; 
 &lt;li&gt;Unified eventing system between Go and Javascript&lt;/li&gt; 
 &lt;li&gt;Powerful cli tool to quickly generate and build your projects&lt;/li&gt; 
 &lt;li&gt;Multiplatform&lt;/li&gt; 
 &lt;li&gt;Uses native rendering engines - &lt;em&gt;no embedded browser&lt;/em&gt;!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Roadmap&lt;/h3&gt; 
&lt;p&gt;The project roadmap may be found &lt;a href="https://github.com/wailsapp/wails/discussions/1484"&gt;here&lt;/a&gt;. Please consult it before creating an enhancement request.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;The installation instructions are on the &lt;a href="https://wails.io/docs/gettingstarted/installation"&gt;official website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;This project is supported by these kind people / companies: &lt;img src="https://raw.githubusercontent.com/wailsapp/wails/master/website/static/img/sponsors.svg?sanitize=true" style="width:100%;max-width:800px;" /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://wails.io/img/sponsor/jetbrains-grayscale.webp" style="width: 100px" /&gt; &lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Is this an alternative to Electron?&lt;/p&gt; &lt;p&gt;Depends on your requirements. It's designed to make it easy for Go programmers to make lightweight desktop applications or add a frontend to their existing applications. Wails does offer native elements such as menus and dialogs, so it could be considered a lightweight electron alternative.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Who is this project aimed at?&lt;/p&gt; &lt;p&gt;Go programmers who want to bundle an HTML/JS/CSS frontend with their applications, without resorting to creating a server and opening a browser to view it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;What's with the name?&lt;/p&gt; &lt;p&gt;When I saw WebView, I thought "What I really want is tooling around building a WebView app, a bit like Rails is to Ruby". So initially it was a play on words (Webview on Rails). It just so happened to also be a homophone of the English name for the &lt;a href="https://en.wikipedia.org/wiki/Wales"&gt;Country&lt;/a&gt; I am from. So it stuck.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;a href="https://star-history.com/#wailsapp/wails&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=wailsapp/wails&amp;amp;type=Date&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=wailsapp/wails&amp;amp;type=Date" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=wailsapp/wails&amp;amp;type=Date" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;The contributors list is getting too big for the readme! All the amazing people who have contributed to this project have their own page &lt;a href="https://wails.io/credits#contributors"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fwailsapp%2Fwails?ref=badge_large"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fwailsapp%2Fwails.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;This project was mainly coded to the following albums:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/1R2rsEUqXjIvAbzM0yHrxA"&gt;Manic Street Preachers - Resistance Is Futile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/4VzCL9kjhgGQeKCiojK1YN"&gt;Manic Street Preachers - This Is My Truth, Tell Me Yours&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/4Krg8zvprquh7TVn9OxZn8"&gt;The Midnight - Endless Summer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/3kMfsD07Q32HRWKRrpcexr"&gt;Gary Newman - Savage (Songs from a Broken World)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/0oL0OhrE2rYVns4IGj8h2m"&gt;Steve Vai - Passion &amp;amp; Warfare&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/1nJsbWm3Yy2DW1KIc1OKle"&gt;Ben Howard - Every Kingdom&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/6astw05cTiXEc2OvyByaPs"&gt;Ben Howard - Noonday Dream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/2vBE40Rp60tl7rNqIZjaXM"&gt;Adwaith - Melyn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/3v2hrfNGINPLuDP0YDTOjm"&gt;Gwidaith Hen Fran - Cedors Hen Wrach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/2Kh43m04B1UkVcpcRa1Zug"&gt;Metallica - Metallica&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/6SsIdN05HQg2GwYLfXuzLB"&gt;Bloc Party - Silent Alarm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/3tklE2Fgw1hCIUstIwPBJF"&gt;Maxthor - Another World&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/0c32OywcLpdJCWWMC6vB8v"&gt;Alun Tan Lan - Y Distawrwydd&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>grafana/mimir</title>
      <link>https://github.com/grafana/mimir</link>
      <description>&lt;p&gt;Grafana Mimir provides horizontally scalable, highly available, multi-tenant, long-term storage for Prometheus.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grafana Mimir&lt;/h1&gt; 
&lt;p align="center"&gt;&lt;img src="https://raw.githubusercontent.com/grafana/mimir/main/images/logo.png" alt="Grafana Mimir logo" width="400" /&gt;&lt;/p&gt; 
&lt;p&gt;Grafana Mimir is an open source software project that provides a scalable long-term storage for &lt;a href="https://prometheus.io"&gt;Prometheus&lt;/a&gt;. Some of the core strengths of Grafana Mimir include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Easy to install and maintain:&lt;/strong&gt; Grafana Mimir’s extensive documentation, tutorials, and deployment tooling make it quick to get started. Using its monolithic mode, you can get Grafana Mimir up and running with just one binary and no additional dependencies. Once deployed, the best-practice dashboards, alerts, and runbooks packaged with Grafana Mimir make it easy to monitor the health of the system.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Massive scalability:&lt;/strong&gt; You can run Grafana Mimir's horizontally-scalable architecture across multiple machines, resulting in the ability to process orders of magnitude more time series than a single Prometheus instance. Internal testing shows that Grafana Mimir handles up to 1 billion active time series.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Global view of metrics:&lt;/strong&gt; Grafana Mimir enables you to run queries that aggregate series from multiple Prometheus instances, giving you a global view of your systems. Its query engine extensively parallelizes query execution, so that even the highest-cardinality queries complete with blazing speed.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cheap, durable metric storage:&lt;/strong&gt; Grafana Mimir uses object storage for long-term data storage, allowing it to take advantage of this ubiquitous, cost-effective, high-durability technology. It is compatible with multiple object store implementations, including AWS S3, Google Cloud Storage, Azure Blob Storage, OpenStack Swift, as well as any S3-compatible object storage.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High availability:&lt;/strong&gt; Grafana Mimir replicates incoming metrics, ensuring that no data is lost in the event of machine failure. Its horizontally scalable architecture also means that it can be restarted, upgraded, or downgraded with zero downtime, which means no interruptions to metrics ingestion or querying.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Natively multi-tenant:&lt;/strong&gt; Grafana Mimir’s multi-tenant architecture enables you to isolate data and queries from independent teams or business units, making it possible for these groups to share the same cluster. Advanced limits and quality-of-service controls ensure that capacity is shared fairly among tenants.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Migrating to Grafana Mimir&lt;/h2&gt; 
&lt;p&gt;If you're migrating to Grafana Mimir, refer to the following documents:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/set-up/migrate/migrate-from-thanos-or-prometheus/"&gt;Migrating from Thanos or Prometheus to Grafana Mimir&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/set-up/migrate/migrate-from-cortex/"&gt;Migrating from Cortex to Grafana Mimir&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Deploying Grafana Mimir&lt;/h2&gt; 
&lt;p&gt;For information about how to deploy Grafana Mimir, refer to &lt;a href="https://grafana.com/docs/mimir/latest/operators-guide/deploy-grafana-mimir/"&gt;Deploy Grafana Mimir&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;If you’re new to Grafana Mimir, read the &lt;a href="https://grafana.com/docs/mimir/latest/get-started/"&gt;Get started guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before deploying Grafana Mimir in a production environment, read:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/operators-guide/architecture/"&gt;An overview of Grafana Mimir’s architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/operators-guide/configure/"&gt;Configure Grafana Mimir&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/operators-guide/run-production-environment/"&gt;Run Grafana Mimir in production&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Refer to the following links to access Grafana Mimir documentation:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/"&gt;Latest release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/next/"&gt;Upcoming release&lt;/a&gt;, at the tip of the &lt;code&gt;main&lt;/code&gt; branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To contribute to Grafana Mimir, refer to &lt;a href="https://github.com/grafana/mimir/tree/main/docs/internal/contributing"&gt;Contributing to Grafana Mimir&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Join the Grafana Mimir discussion&lt;/h2&gt; 
&lt;p&gt;If you have any questions or feedback regarding Grafana Mimir, join the &lt;a href="https://github.com/grafana/mimir/discussions"&gt;Grafana Mimir Discussion&lt;/a&gt;. Alternatively, consider joining the monthly &lt;a href="https://docs.google.com/document/d/1E4jJcGicvLTyMEY6cUFFZUg_I8ytrBuW8r5yt1LyMv4"&gt;Grafana Mimir Community Call&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Your feedback is always welcome, and you can also share it via the &lt;a href="https://slack.grafana.com/"&gt;&lt;code&gt;#mimir&lt;/code&gt; Slack channel&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Grafana Mimir is distributed under &lt;a href="https://raw.githubusercontent.com/grafana/mimir/main/LICENSE"&gt;AGPL-3.0-only&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>slackhq/nebula</title>
      <link>https://github.com/slackhq/nebula</link>
      <description>&lt;p&gt;A scalable overlay networking tool with a focus on performance, simplicity and security&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Nebula?&lt;/h2&gt; 
&lt;p&gt;Nebula is a scalable overlay networking tool with a focus on performance, simplicity and security. It lets you seamlessly connect computers anywhere in the world. Nebula is portable, and runs on Linux, OSX, Windows, iOS, and Android. It can be used to connect a small number of computers, but is also able to connect tens of thousands of computers.&lt;/p&gt; 
&lt;p&gt;Nebula incorporates a number of existing concepts like encryption, security groups, certificates, and tunneling. What makes Nebula different to existing offerings is that it brings all of these ideas together, resulting in a sum that is greater than its individual parts.&lt;/p&gt; 
&lt;p&gt;Further documentation can be found &lt;a href="https://nebula.defined.net/docs/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can read more about Nebula &lt;a href="https://medium.com/p/884110a5579"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also join the NebulaOSS Slack group &lt;a href="https://join.slack.com/t/nebulaoss/shared_invite/zt-39pk4xopc-CUKlGcb5Z39dQ0cK1v7ehA"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Platforms&lt;/h2&gt; 
&lt;h4&gt;Desktop and Server&lt;/h4&gt; 
&lt;p&gt;Check the &lt;a href="https://github.com/slackhq/nebula/releases/latest"&gt;releases&lt;/a&gt; page for downloads or see the &lt;a href="https://github.com/slackhq/nebula#distribution-packages"&gt;Distribution Packages&lt;/a&gt; section.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux - 64 and 32 bit, arm, and others&lt;/li&gt; 
 &lt;li&gt;Windows&lt;/li&gt; 
 &lt;li&gt;MacOS&lt;/li&gt; 
 &lt;li&gt;Freebsd&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Distribution Packages&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/nebula/"&gt;Arch Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -S nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://src.fedoraproject.org/rpms/nebula"&gt;Fedora Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;sudo dnf install nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://packages.debian.org/source/stable/nebula"&gt;Debian Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://pkgs.alpinelinux.org/packages?name=nebula"&gt;Alpine Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;sudo apk add nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/Homebrew/homebrew-core/raw/HEAD/Formula/n/nebula.rb"&gt;macOS Homebrew&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;brew install nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://hub.docker.com/r/nebulaoss/nebula"&gt;Docker&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker pull nebulaoss/nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Mobile&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://apps.apple.com/us/app/mobile-nebula/id1509587936?itsct=apps_box&amp;amp;itscg=30200"&gt;iOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=net.defined.mobile_nebula&amp;amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1"&gt;Android&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Technical Overview&lt;/h2&gt; 
&lt;p&gt;Nebula is a mutually authenticated peer-to-peer software-defined network based on the &lt;a href="https://noiseprotocol.org/"&gt;Noise Protocol Framework&lt;/a&gt;. Nebula uses certificates to assert a node's IP address, name, and membership within user-defined groups. Nebula's user-defined groups allow for provider agnostic traffic filtering between nodes. Discovery nodes (aka lighthouses) allow individual peers to find each other and optionally use UDP hole punching to establish connections from behind most firewalls or NATs. Users can move data between nodes in any number of cloud service providers, datacenters, and endpoints, without needing to maintain a particular addressing scheme.&lt;/p&gt; 
&lt;p&gt;Nebula uses Elliptic-curve Diffie-Hellman (&lt;code&gt;ECDH&lt;/code&gt;) key exchange and &lt;code&gt;AES-256-GCM&lt;/code&gt; in its default configuration.&lt;/p&gt; 
&lt;p&gt;Nebula was created to provide a mechanism for groups of hosts to communicate securely, even across the internet, while enabling expressive firewall definitions similar in style to cloud security groups.&lt;/p&gt; 
&lt;h2&gt;Getting started (quickly)&lt;/h2&gt; 
&lt;p&gt;To set up a Nebula network, you'll need:&lt;/p&gt; 
&lt;h4&gt;1. The &lt;a href="https://github.com/slackhq/nebula/releases"&gt;Nebula binaries&lt;/a&gt; or &lt;a href="https://github.com/slackhq/nebula#distribution-packages"&gt;Distribution Packages&lt;/a&gt; for your specific platform. Specifically you'll need &lt;code&gt;nebula-cert&lt;/code&gt; and the specific nebula binary for each platform you use.&lt;/h4&gt; 
&lt;h4&gt;2. (Optional, but you really should..) At least one discovery node with a routable IP address, which we call a lighthouse.&lt;/h4&gt; 
&lt;p&gt;Nebula lighthouses allow nodes to find each other, anywhere in the world. A lighthouse is the only node in a Nebula network whose IP should not change. Running a lighthouse requires very few compute resources, and you can easily use the least expensive option from a cloud hosting provider. If you're not sure which provider to use, a number of us have used $6/mo &lt;a href="https://digitalocean.com"&gt;DigitalOcean&lt;/a&gt; droplets as lighthouses.&lt;/p&gt; 
&lt;p&gt;Once you have launched an instance, ensure that Nebula udp traffic (default port udp/4242) can reach it over the internet.&lt;/p&gt; 
&lt;h4&gt;3. A Nebula certificate authority, which will be the root of trust for a particular Nebula network.&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./nebula-cert ca -name "Myorganization, Inc"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create files named &lt;code&gt;ca.key&lt;/code&gt; and &lt;code&gt;ca.cert&lt;/code&gt; in the current directory. The &lt;code&gt;ca.key&lt;/code&gt; file is the most sensitive file you'll create, because it is the key used to sign the certificates for individual nebula nodes/hosts. Please store this file somewhere safe, preferably with strong encryption.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Be aware!&lt;/strong&gt; By default, certificate authorities have a 1-year lifetime before expiration. See &lt;a href="https://nebula.defined.net/docs/guides/rotating-certificate-authority/"&gt;this guide&lt;/a&gt; for details on rotating a CA.&lt;/p&gt; 
&lt;h4&gt;4. Nebula host keys and certificates generated from that certificate authority&lt;/h4&gt; 
&lt;p&gt;This assumes you have four nodes, named lighthouse1, laptop, server1, host3. You can name the nodes any way you'd like, including FQDN. You'll also need to choose IP addresses and the associated subnet. In this example, we are creating a nebula network that will use 192.168.100.x/24 as its network range. This example also demonstrates nebula groups, which can later be used to define traffic rules in a nebula network.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./nebula-cert sign -name "lighthouse1" -ip "192.168.100.1/24"
./nebula-cert sign -name "laptop" -ip "192.168.100.2/24" -groups "laptop,home,ssh"
./nebula-cert sign -name "server1" -ip "192.168.100.9/24" -groups "servers"
./nebula-cert sign -name "host3" -ip "192.168.100.10/24"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, host certificates will expire 1 second before the CA expires. Use the &lt;code&gt;-duration&lt;/code&gt; flag to specify a shorter lifetime.&lt;/p&gt; 
&lt;h4&gt;5. Configuration files for each host&lt;/h4&gt; 
&lt;p&gt;Download a copy of the nebula &lt;a href="https://github.com/slackhq/nebula/raw/master/examples/config.yml"&gt;example configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;On the lighthouse node, you'll need to ensure &lt;code&gt;am_lighthouse: true&lt;/code&gt; is set.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On the individual hosts, ensure the lighthouse is defined properly in the &lt;code&gt;static_host_map&lt;/code&gt; section, and is added to the lighthouse &lt;code&gt;hosts&lt;/code&gt; section.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;6. Copy nebula credentials, configuration, and binaries to each host&lt;/h4&gt; 
&lt;p&gt;For each host, copy the nebula binary to the host, along with &lt;code&gt;config.yml&lt;/code&gt; from step 5, and the files &lt;code&gt;ca.crt&lt;/code&gt;, &lt;code&gt;{host}.crt&lt;/code&gt;, and &lt;code&gt;{host}.key&lt;/code&gt; from step 4.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;DO NOT COPY &lt;code&gt;ca.key&lt;/code&gt; TO INDIVIDUAL NODES.&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;7. Run nebula on each host&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./nebula -config /path/to/config.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more detailed instructions, &lt;a href="https://nebula.defined.net/docs/"&gt;find the full documentation here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Building Nebula from source&lt;/h2&gt; 
&lt;p&gt;Make sure you have &lt;a href="https://go.dev/doc/install"&gt;go&lt;/a&gt; installed and clone this repo. Change to the nebula directory.&lt;/p&gt; 
&lt;p&gt;To build nebula for all platforms: &lt;code&gt;make all&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To build nebula for a specific platform (ex, Windows): &lt;code&gt;make bin-windows&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/slackhq/nebula/master/Makefile"&gt;Makefile&lt;/a&gt; for more details on build targets&lt;/p&gt; 
&lt;h2&gt;Curve P256 and BoringCrypto&lt;/h2&gt; 
&lt;p&gt;The default curve used for cryptographic handshakes and signatures is Curve25519. This is the recommended setting for most users. If your deployment has certain compliance requirements, you have the option of creating your CA using &lt;code&gt;nebula-cert ca -curve P256&lt;/code&gt; to use NIST Curve P256. The CA will then sign certificates using ECDSA P256, and any hosts using these certificates will use P256 for ECDH handshakes.&lt;/p&gt; 
&lt;p&gt;In addition, Nebula can be built using the &lt;a href="https://github.com/golang/go/raw/go1.20/src/crypto/internal/boring/README.md"&gt;BoringCrypto GOEXPERIMENT&lt;/a&gt; by running either of the following make targets:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;make bin-boringcrypto
make release-boringcrypto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is not the recommended default deployment, but may be useful based on your compliance requirements.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Nebula was created at Slack Technologies, Inc by Nate Brown and Ryan Huber, with contributions from Oliver Fross, Alan Lam, Wade Simmons, and Lining Wang.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>moby/moby</title>
      <link>https://github.com/moby/moby</link>
      <description>&lt;p&gt;The Moby Project - a collaborative project for the container ecosystem to assemble container-based systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Moby Project&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/moby/moby/v2"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/moby/moby/v2" alt="PkgGoDev" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/license/moby/moby" alt="GitHub License" /&gt; &lt;a href="https://goreportcard.com/report/github.com/moby/moby/v2"&gt;&lt;img src="https://goreportcard.com/badge/github.com/moby/moby/v2" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/moby/moby"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/moby/moby/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/10989"&gt;&lt;img src="https://www.bestpractices.dev/projects/10989/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/moby/moby/master/docs/static_files/moby-project-logo.png" alt="Moby Project logo" title="The Moby Project" /&gt;&lt;/p&gt; 
&lt;p&gt;Moby is an open-source project created by Docker to enable and accelerate software containerization.&lt;/p&gt; 
&lt;p&gt;It provides a "Lego set" of toolkit components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts and professionals to experiment and exchange ideas. Components include container build tools, a container registry, orchestration tools, a runtime and more, and these can be used as building blocks in conjunction with other tools and projects.&lt;/p&gt; 
&lt;h2&gt;Principles&lt;/h2&gt; 
&lt;p&gt;Moby is an open project guided by strong principles, aiming to be modular, flexible and without too strong an opinion on user experience. It is open to the community to help set its direction.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modular: the project includes lots of components that have well-defined functions and APIs that work together.&lt;/li&gt; 
 &lt;li&gt;Batteries included but swappable: Moby includes enough components to build fully featured container systems, but its modular architecture ensures that most of the components can be swapped by different implementations.&lt;/li&gt; 
 &lt;li&gt;Usable security: Moby provides secure defaults without compromising usability.&lt;/li&gt; 
 &lt;li&gt;Developer focused: The APIs are intended to be functional and useful to build powerful tools. They are not necessarily intended as end user tools but as components aimed at developers. Documentation and UX is aimed at developers not end users.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Audience&lt;/h2&gt; 
&lt;p&gt;The Moby Project is intended for engineers, integrators and enthusiasts looking to modify, hack, fix, experiment, invent and build systems based on containers. It is not for people looking for a commercially supported system, but for people who want to work and learn with open source code.&lt;/p&gt; 
&lt;h2&gt;Relationship with Docker&lt;/h2&gt; 
&lt;p&gt;The components and tools in the Moby Project are initially the open source components that Docker and the community have built for the Docker Project. New projects can be added if they fit with the community goals. Docker is committed to using Moby as the upstream for the Docker Product. However, other projects are also encouraged to use Moby as an upstream, and to reuse the components in diverse ways, and all these uses will be treated in the same way. External maintainers and contributors are welcomed.&lt;/p&gt; 
&lt;p&gt;The Moby project is not intended as a location for support or feature requests for Docker products, but as a place for contributors to work on open source code, fix bugs, and make the code more useful. The releases are supported by the maintainers, community and users, on a best efforts basis only. For customers who want enterprise or commercial support, &lt;a href="https://www.docker.com/products/docker-desktop/"&gt;Docker Desktop&lt;/a&gt; and &lt;a href="https://www.mirantis.com/software/mirantis-container-runtime/"&gt;Mirantis Container Runtime&lt;/a&gt; are the appropriate products for these use cases.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Legal&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Brought to you courtesy of our legal counsel. For more context, please see the &lt;a href="https://github.com/moby/moby/raw/master/NOTICE"&gt;NOTICE&lt;/a&gt; document in this repo.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Use and transfer of Moby may be subject to certain restrictions by the United States and other governments.&lt;/p&gt; 
&lt;p&gt;It is your responsibility to ensure that your use and/or transfer does not violate applicable laws.&lt;/p&gt; 
&lt;p&gt;For more information, please see &lt;a href="https://www.bis.doc.gov"&gt;https://www.bis.doc.gov&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Licensing&lt;/h1&gt; 
&lt;p&gt;Moby is licensed under the Apache License, Version 2.0. See &lt;a href="https://github.com/moby/moby/raw/master/LICENSE"&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pulumi/pulumi</title>
      <link>https://github.com/pulumi/pulumi</link>
      <description>&lt;p&gt;Pulumi - Infrastructure as Code in any programming language 🚀&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://www.pulumi.com/?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_campaign=pulumi-pulumi-github-repo&amp;amp;utm_content=top+logo" title="Pulumi - Modern Infrastructure as Code - AWS Azure Kubernetes Containers Serverless"&gt; &lt;img src="https://www.pulumi.com/images/logo/logo-on-white-box.svg?" width="350" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://slack.pulumi.com/"&gt;&lt;img src="http://www.pulumi.com/images/docs/badges/slack.svg?sanitize=true" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://github.com/pulumi/pulumi/discussions"&gt;&lt;img src="https://img.shields.io/github/discussions/pulumi/pulumi" alt="GitHub Discussions" /&gt;&lt;/a&gt; &lt;a href="https://npmjs.com/package/@pulumi/pulumi"&gt;&lt;img src="https://badge.fury.io/js/%40pulumi%2Fpulumi.svg?sanitize=true" alt="NPM version" /&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/pulumi"&gt;&lt;img src="https://badge.fury.io/py/pulumi.svg?sanitize=true" alt="Python version" /&gt;&lt;/a&gt; &lt;a href="https://badge.fury.io/nu/pulumi"&gt;&lt;img src="https://badge.fury.io/nu/pulumi.svg?sanitize=true" alt="NuGet version" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/pulumi/pulumi"&gt;&lt;img src="https://godoc.org/github.com/pulumi/pulumi?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/pulumi/pulumi/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/pulumi/pulumi" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Infrastructure as Code in any Programming Language&lt;/h1&gt; 
&lt;a href="https://www.pulumi.com/docs/iac/get-started/"&gt; &lt;img src="https://www.pulumi.com/images/get-started.svg?" align="right" width="120" /&gt; &lt;/a&gt; 
&lt;p&gt;&lt;strong&gt;Pulumi Infrastructure as Code&lt;/strong&gt; is the easiest way to build and deploy infrastructure, of any architecture and on any cloud, using programming languages that you already know and love. Code and ship infrastructure faster with your favorite languages and tools, and embed IaC anywhere with &lt;a href="https://www.pulumi.com/docs/iac/using-pulumi/automation-api/"&gt;Automation API&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Simply write code in your favorite language and Pulumi automatically provisions and manages your resources on &lt;a href="https://www.pulumi.com/docs/iac/clouds/aws/"&gt;AWS&lt;/a&gt;, &lt;a href="https://www.pulumi.com/docs/iac/clouds/azure/"&gt;Azure&lt;/a&gt;, &lt;a href="https://www.pulumi.com/docs/iac/clouds/gcp/"&gt;Google Cloud Platform&lt;/a&gt;, &lt;a href="https://www.pulumi.com/docs/iac/clouds/kubernetes/"&gt;Kubernetes&lt;/a&gt;, and &lt;a href="https://www.pulumi.com/registry/"&gt;120+ providers&lt;/a&gt; using an &lt;a href="https://www.pulumi.com/what-is/what-is-infrastructure-as-code/"&gt;infrastructure-as-code&lt;/a&gt; approach. Skip the YAML, and use standard language features like loops, functions, classes, and package management that you already know and love.&lt;/p&gt; 
&lt;p&gt;For example, create three web servers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;const aws = require("@pulumi/aws");
const sg = new aws.ec2.SecurityGroup("web-sg", {
    ingress: [{ protocol: "tcp", fromPort: 80, toPort: 80, cidrBlocks: ["0.0.0.0/0"] }],
});
for (let i = 0; i &amp;lt; 3; i++) {
    new aws.ec2.Instance(`web-${i}`, {
        ami: "ami-7172b611",
        instanceType: "t2.micro",
        vpcSecurityGroupIds: [sg.id],
        userData: `#!/bin/bash
            echo "Hello, World!" &amp;gt; index.html
            nohup python -m SimpleHTTPServer 80 &amp;amp;`,
    });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or a simple serverless timer that archives Hacker News every day at 8:30AM:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;const aws = require("@pulumi/aws");

const snapshots = new aws.dynamodb.Table("snapshots", {
    attributes: [{ name: "id", type: "S", }],
    hashKey: "id", billingMode: "PAY_PER_REQUEST",
});

aws.cloudwatch.onSchedule("daily-yc-snapshot", "cron(30 8 * * ? *)", () =&amp;gt; {
    require("https").get("https://news.ycombinator.com", res =&amp;gt; {
        let content = "";
        res.setEncoding("utf8");
        res.on("data", chunk =&amp;gt; content += chunk);
        res.on("end", () =&amp;gt; new aws.sdk.DynamoDB.DocumentClient().put({
            TableName: snapshots.name.get(),
            Item: { date: Date.now(), content },
        }).promise());
    }).end();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Many examples are available spanning containers, serverless, and infrastructure in &lt;a href="https://github.com/pulumi/examples"&gt;pulumi/examples&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Pulumi is open source under the &lt;a href="https://github.com/pulumi/pulumi/raw/master/LICENSE"&gt;Apache 2.0 license&lt;/a&gt;, supports many languages and clouds, and is easy to extend. This repo contains the &lt;code&gt;pulumi&lt;/code&gt; CLI, language SDKs, and core Pulumi engine, and individual libraries are in their own repos.&lt;/p&gt; 
&lt;h2&gt;Welcome&lt;/h2&gt; 
&lt;img align="right" width="400" src="https://www.pulumi.com/images/docs/quickstart/console.png" /&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://www.pulumi.com/docs/iac/get-started/"&gt;Get Started with Pulumi&lt;/a&gt;&lt;/strong&gt;: Deploy a simple application in AWS, Azure, Google Cloud, or Kubernetes using Pulumi.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://www.pulumi.com/tutorials/"&gt;Learn&lt;/a&gt;&lt;/strong&gt;: Follow Pulumi learning pathways to learn best practices and architectural patterns through authentic examples.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/pulumi/examples"&gt;Examples&lt;/a&gt;&lt;/strong&gt;: Browse several examples across many languages, clouds, and scenarios including containers, serverless, and infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://www.pulumi.com/docs/"&gt;Docs&lt;/a&gt;&lt;/strong&gt;: Learn about Pulumi concepts, follow user-guides, and consult the reference documentation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://www.pulumi.com/registry/"&gt;Registry&lt;/a&gt;&lt;/strong&gt;: Find the Pulumi Package with the resources you need. Install the package directly into your project, browse the API documentation, and start building.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://www.pulumi.com/product/secrets-management/"&gt;Secrets Management&lt;/a&gt;&lt;/strong&gt;: Tame secrets sprawl and configuration complexity securely across all your cloud infrastructure and applications with Pulumi ESC.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/orgs/pulumi/projects/44"&gt;Pulumi Roadmap&lt;/a&gt;&lt;/strong&gt;: Review the planned work for the upcoming quarter and a selected backlog of issues that are on our mind but not yet scheduled.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://slack.pulumi.com/"&gt;Community Slack&lt;/a&gt;&lt;/strong&gt;: Join us in Pulumi Community Slack. All conversations and questions are welcome.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/pulumi/pulumi/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/strong&gt;: Ask questions or share what you're building with Pulumi.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a name="getting-started"&gt;&lt;/a&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=6f8KF6UGN7g"&gt;&lt;img src="https://raw.githubusercontent.com/pulumi/pulumi/master/youtube_preview_image.png" alt="Watch the video" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://www.pulumi.com/docs/iac/get-started/"&gt;Get Started&lt;/a&gt; guide to quickly get started with Pulumi on your platform and cloud of choice.&lt;/p&gt; 
&lt;p&gt;Otherwise, the following steps demonstrate how to deploy your first Pulumi program, using AWS Serverless Lambdas, in minutes:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;To install the latest Pulumi release, run the following (see full &lt;a href="https://www.pulumi.com/docs/iac/download-install/"&gt;installation instructions&lt;/a&gt; for additional installation options):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;$ curl -fsSL https://get.pulumi.com/ | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Project&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;After installing, you can get started with the &lt;code&gt;pulumi new&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;$ mkdir pulumi-demo &amp;amp;&amp;amp; cd pulumi-demo
$ pulumi new hello-aws-javascript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;new&lt;/code&gt; command offers templates for all languages and clouds. Run it without an argument and it'll prompt you with available projects. This command created an AWS Serverless Lambda project written in JavaScript.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deploy to the Cloud&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;pulumi up&lt;/code&gt; to get your code to the cloud:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;$ pulumi up
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This makes all cloud resources needed to run your code. Simply make edits to your project, and subsequent &lt;code&gt;pulumi up&lt;/code&gt;s will compute the minimal diff to deploy your changes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use Your Program&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Now that your code is deployed, you can interact with it. In the above example, we can curl the endpoint:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;$ curl $(pulumi stack output url)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Access the Logs&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;If you're using containers or functions, Pulumi's unified logging command will show all of your logs:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;$ pulumi logs -f
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Destroy your Resources&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;After you're done, you can remove all resources created by your program:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;$ pulumi destroy -y
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To learn more, head over to &lt;a href="https://pulumi.com/"&gt;pulumi.com&lt;/a&gt; for much more information, including &lt;a href="https://www.pulumi.com/tutorials/"&gt;tutorials&lt;/a&gt;, &lt;a href="https://github.com/pulumi/examples"&gt;examples&lt;/a&gt;, and details of the core Pulumi CLI and &lt;a href="https://www.pulumi.com/docs/iac/concepts/"&gt;programming model concepts&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;a name="platform"&gt;&lt;/a&gt;Platform&lt;/h2&gt; 
&lt;h3&gt;Languages&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
   &lt;th&gt;Runtime&lt;/th&gt; 
   &lt;th&gt;Versions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://www.pulumi.com/logos/tech/logo-js.png" height="38" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.pulumi.com/docs/iac/languages-sdks/javascript/"&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;Node.js&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://nodejs.org/en/about/previous-releases"&gt;Current, Active and Maintenance LTS versions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://www.pulumi.com/logos/tech/logo-ts.png" height="38" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.pulumi.com/docs/iac/languages-sdks/javascript/"&gt;TypeScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;Node.js&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://nodejs.org/en/about/previous-releases"&gt;Current, Active and Maintenance LTS versions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://www.pulumi.com/logos/tech/logo-python.svg?sanitize=true" height="38" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.pulumi.com/docs/iac/languages-sdks/python/"&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;Python&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://devguide.python.org/versions/#versions"&gt;Supported versions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://www.pulumi.com/logos/tech/logo-golang.png" height="38" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.pulumi.com/docs/iac/languages-sdks/go/"&gt;Go&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;Go&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://go.dev/doc/devel/release#policy"&gt;Supported versions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://www.pulumi.com/logos/tech/dotnet.svg?sanitize=true" height="38" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.pulumi.com/docs/iac/languages-sdks/dotnet/"&gt;.NET (C#/F#/VB.NET)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;.NET&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core#lifecycle"&gt;Supported versions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://www.pulumi.com/logos/tech/java.svg?sanitize=true" height="38" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.pulumi.com/docs/iac/languages-sdks/java/"&gt;Java&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;JDK&lt;/td&gt; 
   &lt;td&gt;11+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://www.pulumi.com/logos/tech/yaml.svg?sanitize=true" height="38" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.pulumi.com/docs/iac/languages-sdks/yaml/"&gt;YAML&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;EOL Releases&lt;/h3&gt; 
&lt;p&gt;The Pulumi CLI v1 and v2 are no longer supported. If you are not yet running v3, please consider migrating to v3 to continue getting the latest and greatest Pulumi has to offer! &lt;span&gt;💪&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To migrate from v2 to v3, please see our &lt;a href="https://www.pulumi.com/docs/iac/download-install/migrating-3.0/"&gt;v3 Migration Guide&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Clouds&lt;/h3&gt; 
&lt;p&gt;Visit the &lt;a href="https://www.pulumi.com/registry/"&gt;Registry&lt;/a&gt; for the full list of supported cloud and infrastructure providers.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href="https://github.com/pulumi/pulumi/raw/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for information on building Pulumi from source or contributing improvements.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>majd/ipatool</title>
      <link>https://github.com/majd/ipatool</link>
      <description>&lt;p&gt;Command-line tool that allows searching and downloading app packages (known as ipa files) from the iOS App Store&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IPATool&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://GitHub.com/majd/ipatool/releases/"&gt;&lt;img src="https://img.shields.io/github/release/majd/ipatool.svg?label=Release" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/majd/ipatool/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ipatool&lt;/code&gt; is a command line tool that allows you to search for iOS apps on the &lt;a href="https://apps.apple.com"&gt;App Store&lt;/a&gt; and download a copy of the app package, known as an &lt;em&gt;ipa&lt;/em&gt; file.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/majd/ipatool/main/resources/demo.gif" alt="Demo" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#manual"&gt;Manual&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#package-manager-macos"&gt;Package Manager (macOS)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#compiling"&gt;Compiling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/majd/ipatool/releases"&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/majd/ipatool/wiki/FAQ"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported operating system (Windows, Linux or macOS).&lt;/li&gt; 
 &lt;li&gt;Apple ID set up to use the App Store.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You can grab the latest version of &lt;code&gt;ipatool&lt;/code&gt; from &lt;a href="https://github.com/majd/ipatool/releases"&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Package Manager (macOS)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;ipatool&lt;/code&gt; using &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ brew install ipatool
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To authenticate with the App Store, use the &lt;code&gt;auth&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Authenticate with the App Store

Usage:
  ipatool auth [command]

Available Commands:
  info        Show current account info
  login       Login to the App Store
  revoke      Revoke your App Store credentials

Flags:
  -h, --help   help for auth

Global Flags:
      --format format     sets output format for command; can be 'text', 'json' (default text)
      --non-interactive   run in non-interactive session
      --verbose           enables verbose logs

Use "ipatool auth [command] --help" for more information about a command.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To search for apps on the App Store, use the &lt;code&gt;search&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Search for iOS apps available on the App Store

Usage:
  ipatool search &amp;lt;term&amp;gt; [flags]

Flags:
  -h, --help        help for search
  -l, --limit int   maximum amount of search results to retrieve (default 5)

Global Flags:
      --format format     sets output format for command; can be 'text', 'json' (default text)
      --non-interactive   run in non-interactive session
      --verbose           enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To obtain a license for an app, use the &lt;code&gt;purchase&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Obtain a license for the app from the App Store

Usage:
  ipatool purchase [flags]

Flags:
  -b, --bundle-identifier string   Bundle identifier of the target iOS app (required)
  -h, --help                       help for purchase

Global Flags:
      --format format     sets output format for command; can be 'text', 'json' (default text)
      --non-interactive   run in non-interactive session
      --verbose           enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To obtain a list of availble app versions to download, use the &lt;code&gt;list-versions&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;List the available versions of an iOS app

Usage:
  ipatool list-versions [flags]

Flags:
  -i, --app-id int                 ID of the target iOS app (required)
  -b, --bundle-identifier string   The bundle identifier of the target iOS app (overrides the app ID)
  -h, --help                       help for list-versions

Global Flags:
      --format format                sets output format for command; can be 'text', 'json' (default text)
      --keychain-passphrase string   passphrase for unlocking keychain
      --non-interactive              run in non-interactive session
      --verbose                      enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To download a copy of the ipa file, use the &lt;code&gt;download&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Download (encrypted) iOS app packages from the App Store

Usage:
  ipatool download [flags]

Flags:
  -i, --app-id int                   ID of the target iOS app (required)
  -b, --bundle-identifier string     The bundle identifier of the target iOS app (overrides the app ID)
      --external-version-id string   External version identifier of the target iOS app (defaults to latest version when not specified)
  -h, --help                         help for download
  -o, --output string                The destination path of the downloaded app package
      --purchase                     Obtain a license for the app if needed

Global Flags:
      --format format                sets output format for command; can be 'text', 'json' (default text)
      --keychain-passphrase string   passphrase for unlocking keychain
      --non-interactive              run in non-interactive session
      --verbose                      enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To resolve an external version identifier, returned by the &lt;code&gt;list-versions&lt;/code&gt; command, use the &lt;code&gt;get-version-metadata&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Retrieves the metadata for a specific version of an app

Usage:
  ipatool get-version-metadata [flags]

Flags:
  -i, --app-id int                   ID of the target iOS app (required)
  -b, --bundle-identifier string     The bundle identifier of the target iOS app (overrides the app ID)
      --external-version-id string   External version identifier of the target iOS app (required)
  -h, --help                         help for get-version-metadata

Global Flags:
      --format format                sets output format for command; can be 'text', 'json' (default text)
      --keychain-passphrase string   passphrase for unlocking keychain
      --non-interactive              run in non-interactive session
      --verbose                      enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the tool runs in interactive mode by default. Use the &lt;code&gt;--non-interactive&lt;/code&gt; flag if running in an automated environment.&lt;/p&gt; 
&lt;h2&gt;Compiling&lt;/h2&gt; 
&lt;p&gt;The tool can be compiled using the Go toolchain.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go build -o ipatool
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unit tests can be executed with the following commands.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go generate github.com/majd/ipatool/...
$ go test -v github.com/majd/ipatool/...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;IPATool is released under the &lt;a href="https://github.com/majd/ipatool/raw/main/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>quic-go/quic-go</title>
      <link>https://github.com/quic-go/quic-go</link>
      <description>&lt;p&gt;A production-ready QUIC implementation in pure Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A QUIC implementation in pure Go&lt;/h1&gt; 
&lt;img src="https://raw.githubusercontent.com/quic-go/quic-go/master/docs/quic.png" width="303" height="124" /&gt; 
&lt;p&gt;&lt;a href="https://quic-go.net/docs/"&gt;&lt;img src="https://img.shields.io/badge/docs-quic--go.net-red?style=flat" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/quic-go/quic-go"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/quic-go/quic-go" alt="PkgGoDev" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/quic-go/quic-go/"&gt;&lt;img src="https://img.shields.io/codecov/c/github/quic-go/quic-go/master.svg?style=flat-square" alt="Code Coverage" /&gt;&lt;/a&gt; &lt;a href="https://issues.oss-fuzz.com/issues?q=quic-go"&gt;&lt;img src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/quic-go.svg?sanitize=true" alt="Fuzzing Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;quic-go is an implementation of the QUIC protocol (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9000"&gt;RFC 9000&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc9001"&gt;RFC 9001&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc9002"&gt;RFC 9002&lt;/a&gt;) in Go. It has support for HTTP/3 (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9114"&gt;RFC 9114&lt;/a&gt;), including QPACK (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9204"&gt;RFC 9204&lt;/a&gt;) and HTTP Datagrams (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9297"&gt;RFC 9297&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;In addition to these base RFCs, it also implements the following RFCs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unreliable Datagram Extension (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9221"&gt;RFC 9221&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Datagram Packetization Layer Path MTU Discovery (DPLPMTUD, &lt;a href="https://datatracker.ietf.org/doc/html/rfc8899"&gt;RFC 8899&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;QUIC Version 2 (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9369"&gt;RFC 9369&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;QUIC Event Logging using qlog (&lt;a href="https://datatracker.ietf.org/doc/draft-ietf-quic-qlog-main-schema/"&gt;draft-ietf-quic-qlog-main-schema&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/draft-ietf-quic-qlog-quic-events/"&gt;draft-ietf-quic-qlog-quic-events&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;QUIC Stream Resets with Partial Delivery (&lt;a href="https://datatracker.ietf.org/doc/html/draft-ietf-quic-reliable-stream-reset-07"&gt;draft-ietf-quic-reliable-stream-reset&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Support for WebTransport over HTTP/3 (&lt;a href="https://datatracker.ietf.org/doc/draft-ietf-webtrans-http3/"&gt;draft-ietf-webtrans-http3&lt;/a&gt;) is implemented in &lt;a href="https://github.com/quic-go/webtransport-go"&gt;webtransport-go&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Detailed documentation can be found on &lt;a href="https://quic-go.net/docs/"&gt;quic-go.net&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Projects using quic-go&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Project&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Stars&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/AdguardTeam/AdGuardHome"&gt;AdGuardHome&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Free and open source, powerful network-wide ads &amp;amp; trackers blocking DNS server.&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/AdguardTeam/AdGuardHome?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/xyproto/algernon"&gt;algernon&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Small self-contained pure-Go web server with Lua, Markdown, HTTP/2, QUIC, Redis and PostgreSQL support&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/xyproto/algernon?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/caddyserver/caddy/"&gt;caddy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Fast, multi-platform web server with automatic HTTPS&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/caddyserver/caddy?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/cloudflare/cloudflared"&gt;cloudflared&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A tunneling daemon that proxies traffic from the Cloudflare network to your origins&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/cloudflare/cloudflared?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/fatedier/frp"&gt;frp&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/fatedier/frp?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/libp2p/go-libp2p"&gt;go-libp2p&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;libp2p implementation in Go, powering &lt;a href="https://github.com/ipfs/kubo"&gt;Kubo&lt;/a&gt; (IPFS) and &lt;a href="https://github.com/filecoin-project/lotus"&gt;Lotus&lt;/a&gt; (Filecoin), among others&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/libp2p/go-libp2p?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/go-gost/gost"&gt;gost&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A simple security tunnel written in Go&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/go-gost/gost?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/apernet/hysteria"&gt;Hysteria&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A powerful, lightning fast and censorship resistant proxy&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/apernet/hysteria?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/dunglas/mercure"&gt;Mercure&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;An open, easy, fast, reliable and battery-efficient solution for real-time communications&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/dunglas/mercure?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ooni/probe-cli"&gt;OONI Probe&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Next generation OONI Probe. Library and CLI tool.&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/ooni/probe-cli?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/flipt-io/reverst"&gt;reverst&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Reverse Tunnels in Go over HTTP/3 and QUIC&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/flipt-io/reverst?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/roadrunner-server/roadrunner"&gt;RoadRunner&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;High-performance PHP application server, process manager written in Go and powered with plugins&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/roadrunner-server/roadrunner?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/syncthing/syncthing/"&gt;syncthing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open Source Continuous File Synchronization&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/syncthing/syncthing?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/traefik/traefik"&gt;traefik&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The Cloud Native Application Proxy&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/traefik/traefik?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/v2fly/v2ray-core"&gt;v2ray-core&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A platform for building proxies to bypass network restrictions&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/v2fly/v2ray-core?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/yomorun/yomo"&gt;YoMo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Streaming Serverless Framework for Geo-distributed System&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/yomorun/yomo?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;If you'd like to see your project added to this list, please send us a PR.&lt;/p&gt; 
&lt;h2&gt;Release Policy&lt;/h2&gt; 
&lt;p&gt;quic-go always aims to support the latest two Go releases.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are always happy to welcome new contributors! We have a number of self-contained issues that are suitable for first-time contributors, they are tagged with &lt;a href="https://github.com/quic-go/quic-go/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;. If you have any questions, please feel free to reach out by opening an issue or leaving a comment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grpc/grpc-go</title>
      <link>https://github.com/grpc/grpc-go</link>
      <description>&lt;p&gt;The Go language implementation of gRPC. HTTP/2 based RPC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPC-Go&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/google.golang.org/grpc"&gt;&lt;img src="https://pkg.go.dev/badge/google.golang.org/grpc" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/grpc/grpc-go"&gt;&lt;img src="https://goreportcard.com/badge/grpc/grpc-go" alt="GoReportCard" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/grpc/grpc-go"&gt;&lt;img src="https://codecov.io/gh/grpc/grpc-go/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://golang.org"&gt;Go&lt;/a&gt; implementation of &lt;a href="https://grpc.io"&gt;gRPC&lt;/a&gt;: A high performance, open source, general RPC framework that puts mobile and HTTP/2 first. For more information see the &lt;a href="https://grpc.io/docs/languages/go"&gt;Go gRPC docs&lt;/a&gt;, or jump directly into the &lt;a href="https://grpc.io/docs/languages/go/quickstart"&gt;quick start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://golang.org"&gt;Go&lt;/a&gt;&lt;/strong&gt;: any one of the &lt;strong&gt;two latest major&lt;/strong&gt; &lt;a href="https://golang.org/doc/devel/release.html"&gt;releases&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Simply add the following import to your code, and then &lt;code&gt;go [build|run|test]&lt;/code&gt; will automatically fetch the necessary dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "google.golang.org/grpc"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are trying to access &lt;code&gt;grpc-go&lt;/code&gt; from &lt;strong&gt;China&lt;/strong&gt;, see the &lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/#FAQ"&gt;FAQ&lt;/a&gt; below.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Learn more&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grpc.io/docs/languages/go"&gt;Go gRPC docs&lt;/a&gt;, which include a &lt;a href="https://grpc.io/docs/languages/go/quickstart"&gt;quick start&lt;/a&gt; and &lt;a href="https://pkg.go.dev/google.golang.org/grpc"&gt;API reference&lt;/a&gt; among other resources&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/Documentation"&gt;Low-level technical docs&lt;/a&gt; from this repository&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5180705743044608"&gt;Performance benchmark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/CONTRIBUTING.md"&gt;Contribution guidelines&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;I/O Timeout Errors&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;golang.org&lt;/code&gt; domain may be blocked from some countries. &lt;code&gt;go get&lt;/code&gt; usually produces an error like the following when this happens:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ go get -u google.golang.org/grpc
package google.golang.org/grpc: unrecognized import path "google.golang.org/grpc" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build Go code, there are several options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Set up a VPN and access google.golang.org through that.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;With Go module support: it is possible to use the &lt;code&gt;replace&lt;/code&gt; feature of &lt;code&gt;go mod&lt;/code&gt; to create aliases for golang.org packages. In your project's directory:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;go mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest
go mod tidy
go mod vendor
go build -mod=vendor
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, this will need to be done for all transitive dependencies hosted on golang.org as well. For details, refer to &lt;a href="https://github.com/golang/go/issues/28652"&gt;golang/go issue #28652&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compiling error, undefined: grpc.SupportPackageIsVersion&lt;/h3&gt; 
&lt;p&gt;Please update to the latest version of gRPC-Go using &lt;code&gt;go get google.golang.org/grpc&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;How to turn on logging&lt;/h3&gt; 
&lt;p&gt;The default logger is controlled by environment variables. Turn everything on like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99
$ export GRPC_GO_LOG_SEVERITY_LEVEL=info
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The RPC failed with error &lt;code&gt;"code = Unavailable desc = transport is closing"&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This error means the connection the RPC is using was closed, and there are many possible reasons, including:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;mis-configured transport credentials, connection failed on handshaking&lt;/li&gt; 
 &lt;li&gt;bytes disrupted, possibly by a proxy in between&lt;/li&gt; 
 &lt;li&gt;server shutdown&lt;/li&gt; 
 &lt;li&gt;Keepalive parameters caused connection shutdown, for example if you have configured your server to terminate connections regularly to &lt;a href="https://github.com/grpc/grpc-go/issues/3170#issuecomment-552517779"&gt;trigger DNS lookups&lt;/a&gt;. If this is the case, you may want to increase your &lt;a href="https://pkg.go.dev/google.golang.org/grpc/keepalive?tab=doc#ServerParameters"&gt;MaxConnectionAgeGrace&lt;/a&gt;, to allow longer RPC calls to finish.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;It can be tricky to debug this because the error happens on the client side but the root cause of the connection being closed is on the server side. Turn on logging on &lt;strong&gt;both client and server&lt;/strong&gt;, and see if there are any transport errors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kgretzky/evilginx2</title>
      <link>https://github.com/kgretzky/evilginx2</link>
      <description>&lt;p&gt;Standalone man-in-the-middle attack framework used for phishing login credentials along with session cookies, allowing for the bypass of 2-factor authentication&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="Evilginx2 Logo" src="https://raw.githubusercontent.com/kgretzky/evilginx2/master/media/img/evilginx2-logo-512.png" height="160" /&gt; &lt;/p&gt;
&lt;p align="center"&gt; &lt;img alt="Evilginx2 Title" src="https://raw.githubusercontent.com/kgretzky/evilginx2/master/media/img/evilginx2-title-black-512.png" height="60" /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h1&gt;Evilginx 3.0&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Evilginx&lt;/strong&gt; is a man-in-the-middle attack framework used for phishing login credentials along with session cookies, which in turn allows to bypass 2-factor authentication protection.&lt;/p&gt; 
&lt;p&gt;This tool is a successor to &lt;a href="https://github.com/kgretzky/evilginx"&gt;Evilginx&lt;/a&gt;, released in 2017, which used a custom version of nginx HTTP server to provide man-in-the-middle functionality to act as a proxy between a browser and phished website. Present version is fully written in GO as a standalone application, which implements its own HTTP and DNS server, making it extremely easy to set up and use.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img alt="Screenshot" src="https://raw.githubusercontent.com/kgretzky/evilginx2/master/media/img/screen.png" height="320" /&gt; &lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;I am very much aware that Evilginx can be used for nefarious purposes. This work is merely a demonstration of what adept attackers can do. It is the defender's responsibility to take such attacks into consideration and find ways to protect their users against this type of phishing attacks. Evilginx should be used only in legitimate penetration testing assignments with written permission from to-be-phished parties.&lt;/p&gt; 
&lt;h2&gt;Evilginx Pro is now available!&lt;/h2&gt; 
&lt;p&gt;This is it! After over two years of development, countless delays, and hundreds of manual company verifications, concluded with multiple hurdles related to export regulations, &lt;a href="https://evilginx.com"&gt;Evilginx Pro is finally live!&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://evilginx.com"&gt;&lt;img alt="Evilginx Mastery" src="https://breakdev.org/content/images/size/w2000/2025/03/evilginx_pro_release_cover.png" height="320" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Evilginx Pro is the fruit of a passion I've had for a long time in developing offensive security tools for cybersecurity enthusiasts. The journey has just begun, and now that the product is officially released, I can focus on making it even better by implementing all the ideas I've planned for it.&lt;/p&gt; 
&lt;h3&gt;Key features:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Out-of-the-box &lt;strong&gt;phishing detection evasion&lt;/strong&gt; (including Chrome's Enchanced Browser Protection)&lt;/li&gt; 
 &lt;li&gt;Tested and maintained &lt;strong&gt;official phishlets database&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Botguard&lt;/strong&gt; to &lt;strong&gt;prevent bot traffic&lt;/strong&gt; by default (same concept as Cloudflare Turnstile)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Evilpuppet&lt;/strong&gt; for advanced phishing capability (Google)&lt;/li&gt; 
 &lt;li&gt;External &lt;strong&gt;DNS providers&lt;/strong&gt; with multi-domain support&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Website spoofing&lt;/strong&gt; for unauthorized requests&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; &amp;amp; &lt;strong&gt;HTML obfuscation&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Wildcard TLS certificates&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automated&lt;/strong&gt; server deployment&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SQLite&lt;/strong&gt; database support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Find out more on the &lt;a href="https://breakdev.org/evilginx-pro-release/"&gt;official release blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Evilginx Mastery Training Course&lt;/h2&gt; 
&lt;p&gt;If you want everything about reverse proxy phishing with &lt;strong&gt;Evilginx&lt;/strong&gt; - check out my &lt;a href="https://academy.breakdev.org/evilginx-mastery"&gt;Evilginx Mastery&lt;/a&gt; course!&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://academy.breakdev.org/evilginx-mastery"&gt;&lt;img alt="Evilginx Mastery" src="https://raw.githubusercontent.com/kgretzky/evilginx2/master/media/img/evilginx_mastery.jpg" height="320" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Learn everything about the latest methods of phishing, using reverse proxying to bypass Multi-Factor Authentication. Learn to think like an attacker, during your red team engagements, and become the master of phishing with Evilginx.&lt;/p&gt; 
&lt;p&gt;Grab it here: &lt;a href="https://academy.breakdev.org/evilginx-mastery"&gt;https://academy.breakdev.org/evilginx-mastery&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Official Gophish integration&lt;/h2&gt; 
&lt;p&gt;If you'd like to use Gophish to send out phishing links compatible with Evilginx, please use the official Gophish integration with Evilginx 3.3. You can find the custom version here in the forked repository: &lt;a href="https://github.com/kgretzky/gophish/"&gt;Gophish with Evilginx integration&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you want to learn more about how to set it up, please follow the instructions in &lt;a href="https://breakdev.org/evilginx-3-3-go-phish/"&gt;this blog post&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Write-ups&lt;/h2&gt; 
&lt;p&gt;If you want to learn more about reverse proxy phishing, I've published extensive blog posts about &lt;strong&gt;Evilginx&lt;/strong&gt; here:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://breakdev.org/evilginx-2-next-generation-of-phishing-2fa-tokens"&gt;Evilginx 2.0 - Release&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://breakdev.org/evilginx-2-1-the-first-post-release-update/"&gt;Evilginx 2.1 - First Update&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://breakdev.org/evilginx-2-2-jolly-winter-update/"&gt;Evilginx 2.2 - Jolly Winter Update&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://breakdev.org/evilginx-2-3-phishermans-dream/"&gt;Evilginx 2.3 - Phisherman's Dream&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://breakdev.org/evilginx-2-4-gone-phishing/"&gt;Evilginx 2.4 - Gone Phishing&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://breakdev.org/evilginx-3-0-evilginx-mastery/"&gt;Evilginx 3.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://breakdev.org/evilginx-3-2/"&gt;Evilginx 3.2&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://breakdev.org/evilginx-3-3-go-phish/"&gt;Evilginx 3.3&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Help&lt;/h2&gt; 
&lt;p&gt;In case you want to learn how to install and use &lt;strong&gt;Evilginx&lt;/strong&gt;, please refer to online documentation available at:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://help.evilginx.com"&gt;https://help.evilginx.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;I DO NOT offer support for providing or creating phishlets. I will also NOT help you with creation of your own phishlets. Please look for ready-to-use phishlets, provided by other people.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;evilginx2&lt;/strong&gt; is made by Kuba Gretzky (&lt;a href="https://twitter.com/mrgretzky"&gt;@mrgretzky&lt;/a&gt;) and it's released under BSD-3 license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grafana/k6</title>
      <link>https://github.com/grafana/k6</link>
      <description>&lt;p&gt;A modern load testing tool, using Go and JavaScript&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://grafana.com/oss/k6/"&gt; 
  &lt;picture&gt; 
   &lt;img src="https://raw.githubusercontent.com/grafana/k6/master/assets/logo.svg?sanitize=true" alt="Grafana k6" width="210" height="210" /&gt;
   &lt;br /&gt; 
  &lt;/picture&gt; &lt;br /&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="assets/grafana-labs-dark-theme.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="assets/grafana-labs.svg" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/grafana/k6/master/assets/grafana-labs.svg?sanitize=true" alt="Grafana Labs" width="210" /&gt; 
  &lt;/picture&gt; &lt;br /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt;Like unit testing, for performance&lt;/h3&gt; 
&lt;p align="center"&gt;Modern load testing for developers and testers in the DevOps era.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/grafana/k6/releases"&gt;&lt;img src="https://img.shields.io/github/release/grafana/k6.svg?sanitize=true" alt="Github release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/grafana/k6/actions/workflows/all.yml"&gt;&lt;img src="https://github.com/grafana/k6/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/grafana/k6"&gt;&lt;img src="https://goreportcard.com/badge/github.com/grafana/k6" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/grafana/k6"&gt;&lt;img src="https://img.shields.io/codecov/c/github/grafana/k6/master.svg?sanitize=true" alt="Codecov branch" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://twitter.com/k6_io"&gt;&lt;img src="https://img.shields.io/badge/twitter-@k6_io-55acee.svg?sanitize=true" alt="@k6_io on Twitter" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/grafana/k6/releases"&gt;Download&lt;/a&gt; · &lt;a href="https://grafana.com/docs/k6/latest/"&gt;Documentation&lt;/a&gt; · &lt;a href="https://community.grafana.com/c/grafana-k6/70"&gt;Community Forum&lt;/a&gt; · &lt;a href="https://github.com/orgs/grafana/projects/443/views/1"&gt;Public Roadmap&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;img src="https://raw.githubusercontent.com/grafana/k6/master/assets/github-hr.png" alt="---" /&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;strong&gt;k6&lt;/strong&gt; is a modern load-testing tool, built on &lt;a href="https://k6.io/about"&gt;our years of experience&lt;/a&gt; in the performance and testing industries. It's built to be powerful, extensible, and full-featured. The key design goal is to provide &lt;strong&gt;the best developer experience&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Its core features are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Configurable load generation.&lt;/strong&gt; Even lower-end machines can simulate lots of traffic.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tests as code.&lt;/strong&gt; Reuse scripts, modularize logic, version control, and integrate tests with your CI.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;A full-featured API.&lt;/strong&gt; The scripting API is packed with features that help you simulate real application traffic.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;An embedded JavaScript engine.&lt;/strong&gt; The performance of Go, the scripting familiarity of JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multiple Protocol support&lt;/strong&gt;. HTTP, WebSockets, gRPC, Browser, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Large extension ecosystem.&lt;/strong&gt; You can extend k6 to support your needs. And many people have already shared their extensions with the community!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible metrics storage and visualization&lt;/strong&gt;. Summary statistics or granular metrics, exported to the service of your choice.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Native integration with Grafana cloud&lt;/strong&gt;. &lt;a href="https://grafana.com/products/cloud/k6/"&gt;SaaS solution&lt;/a&gt; for test execution, metrics correlation, data analysis, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This is what load testing looks like in the 21st century.&lt;/p&gt; 
&lt;h2&gt;Example script&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import http from "k6/http";
import { check, sleep } from "k6";

// Test configuration
export const options = {
  thresholds: {
    // Assert that 99% of requests finish within 3000ms.
    http_req_duration: ["p(99) &amp;lt; 3000"],
  },
  // Ramp the number of virtual users up and down
  stages: [
    { duration: "30s", target: 15 },
    { duration: "1m", target: 15 },
    { duration: "20s", target: 0 },
  ],
};

// Simulated user behavior
export default function () {
  let res = http.get("https://quickpizza.grafana.com");
  // Validate response status
  check(res, { "status was 200": (r) =&amp;gt; r.status == 200 });
  sleep(1);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run scripts like this on the CLI, or in your CI, or across a Kubernetes cluster.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Don't want to write code ?&lt;/p&gt; 
 &lt;p&gt;We got you! Meet &lt;a href="https://github.com/grafana/k6-studio"&gt;k6 Studio&lt;/a&gt;, a desktop application made to help you generate k6 scripts without having to touch code!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The docs cover all aspects of using k6. Some highlights include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/"&gt;Get Started&lt;/a&gt;. Install, run a test, inspect results.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/http-requests/"&gt;HTTP requests&lt;/a&gt;. Have your virtual users use HTTP methods. Or, check the other &lt;a href="https://grafana.com/docs/k6/latest/using-k6/protocols/"&gt;Protocols&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/thresholds/"&gt;Thresholds&lt;/a&gt;. Set goals for your test, and codify your SLOs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/k6-options/"&gt;Options&lt;/a&gt;. Configure your load, duration, TLS certificates, and much, much more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/scenarios/"&gt;Scenarios&lt;/a&gt;. Choose how to model your workload: open models, closed models, constant RPS, fixed iterations, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/results-output/"&gt;Results output&lt;/a&gt;. Study, filter, and export your test results.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/javascript-api/"&gt;JavaScript API&lt;/a&gt;. Reference and examples of all k6 modules.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/extensions/"&gt;Extensions&lt;/a&gt;. Extend k6 for new protocols and use cases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These links barely scratch the surface! If you're looking for conceptual information, you can read about &lt;a href="https://grafana.com/docs/k6/latest/testing-guides/test-types/"&gt;Test types&lt;/a&gt;, &lt;a href="https://grafana.com/docs/k6/latest/testing-guides/"&gt;Test strategies&lt;/a&gt;, or one of the many informative &lt;a href="https://k6.io/blog"&gt;Blog posts&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Our team is dedicated to continuously improving and providing the best user experience possible. The &lt;a href="https://github.com/orgs/grafana/projects/443/views/1"&gt;public roadmap&lt;/a&gt; covers user-oriented features, UX improvements and JavaScript support that our team will focus on. Remember that timeframes and priorities may shift, but we believe it's important to share our vision.&lt;/p&gt; 
&lt;p&gt;We hope it provides a clear overview of our plans for future development. We welcome feedback, corrections, and suggestions via GitHub to make it more comprehensive, accessible, and valuable for the community.&lt;/p&gt; 
&lt;p&gt;It's worth mentioning that we consider &lt;a href="https://github.com/grafana/k6/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc"&gt;upvotes (thumbs-up)&lt;/a&gt; to be one of the essential metrics for determining community needs. If you want to show us the importance of a feature, please give it a thumbs-up.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;If you want to contribute or help with the development of k6, start by reading &lt;a href="https://raw.githubusercontent.com/grafana/k6/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;. Before you start coding, it might be a good idea to first discuss your plans and implementation details with the k6 maintainers—especially when it comes to big changes and features. You can do this in the &lt;a href="https://github.com/grafana/k6/issues"&gt;GitHub issue&lt;/a&gt; for the problem you're solving (create one if it doesn't exist).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To disclose security issues, refer to &lt;a href="https://raw.githubusercontent.com/grafana/k6/master/SECURITY.md"&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;To get help, report bugs, suggest features, and discuss k6 with others, refer to &lt;a href="https://raw.githubusercontent.com/grafana/k6/master/SUPPORT.md"&gt;SUPPORT.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;k6 is distributed under the &lt;a href="https://github.com/grafana/k6/raw/master/LICENSE.md"&gt;AGPL-3.0 license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>trufflesecurity/trufflehog</title>
      <link>https://github.com/trufflesecurity/trufflehog</link>
      <description>&lt;p&gt;Find, verify, and analyze leaked credentials&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="GoReleaser Logo" src="https://storage.googleapis.com/trufflehog-static-sources/pixel_pig.png" height="140" /&gt; &lt;/p&gt;
&lt;h2 align="center"&gt;TruffleHog&lt;/h2&gt; 
&lt;p align="center"&gt;Find leaked credentials.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/trufflesecurity/trufflehog/v3"&gt;&lt;img src="https://goreportcard.com/badge/github.com/trufflesecurity/trufflehog/v3" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-AGPL--3.0-brightgreen" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors"&gt;&lt;img src="https://img.shields.io/github/directory-file-count/trufflesecurity/truffleHog/pkg/detectors?label=Total%20Detectors&amp;amp;type=dir" alt="Total Detectors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h1&gt;&lt;span&gt;🔎&lt;/span&gt; &lt;em&gt;Now Scanning&lt;/em&gt;&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/assets/scanning_logos.svg?sanitize=true" /&gt; 
 &lt;p&gt;&lt;strong&gt;...and more&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;To learn more about TruffleHog and its features and capabilities, visit our &lt;a href="https://trufflesecurity.com/trufflehog?gclid=CjwKCAjwouexBhAuEiwAtW_Zx5IW87JNj97Ci7heFnA5ar6-DuNzT2Y5nIl9DuZ-FOUqx0Qg3vb9nxoClcEQAvD_BwE"&gt;product page&lt;/a&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;&lt;span&gt;🌐&lt;/span&gt; TruffleHog Enterprise&lt;/h1&gt; 
&lt;p&gt;Are you interested in continuously monitoring &lt;strong&gt;Git, Jira, Slack, Confluence, Microsoft Teams, Sharepoint, and more..&lt;/strong&gt; for credentials? We have an enterprise product that can help! Learn more at &lt;a href="https://trufflesecurity.com/trufflehog-enterprise"&gt;https://trufflesecurity.com/trufflehog-enterprise&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We take the revenue from the enterprise product to fund more awesome open source projects that the whole community can benefit from.&lt;/p&gt;  
&lt;h1&gt;What is TruffleHog 🐽&lt;/h1&gt; 
&lt;p&gt;TruffleHog is the most powerful secrets &lt;strong&gt;Discovery, Classification, Validation,&lt;/strong&gt; and &lt;strong&gt;Analysis&lt;/strong&gt; tool. In this context, secret refers to a credential a machine uses to authenticate itself to another machine. This includes API keys, database passwords, private encryption keys, and more...&lt;/p&gt; 
&lt;h2&gt;Discovery 🔍&lt;/h2&gt; 
&lt;p&gt;TruffleHog can look for secrets in many places including Git, chats, wikis, logs, API testing platforms, object stores, filesystems and more&lt;/p&gt; 
&lt;h2&gt;Classification 📁&lt;/h2&gt; 
&lt;p&gt;TruffleHog classifies over 800 secret types, mapping them back to the specific identity they belong to. Is it an AWS secret? Stripe secret? Cloudflare secret? Postgres password? SSL Private key? Sometimes it's hard to tell looking at it, so TruffleHog classifies everything it finds.&lt;/p&gt; 
&lt;h2&gt;Validation ✅&lt;/h2&gt; 
&lt;p&gt;For every secret TruffleHog can classify, it can also log in to confirm if that secret is live or not. This step is critical to know if there’s an active present danger or not.&lt;/p&gt; 
&lt;h2&gt;Analysis 🔬&lt;/h2&gt; 
&lt;p&gt;For the 20 some of the most commonly leaked out credential types, instead of sending one request to check if the secret can log in, TruffleHog can send many requests to learn everything there is to know about the secret. Who created it? What resources can it access? What permissions does it have on those resources?&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;📢&lt;/span&gt; Join Our Community&lt;/h1&gt; 
&lt;p&gt;Have questions? Feedback? Jump into Slack or Discord and hang out with us.&lt;/p&gt; 
&lt;p&gt;Join our &lt;a href="https://join.slack.com/t/trufflehog-community/shared_invite/zt-pw2qbi43-Aa86hkiimstfdKH9UCpPzQ"&gt;Slack Community&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Join the &lt;a href="https://discord.gg/8Hzbrnkr7E"&gt;Secret Scanning Discord&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;📺&lt;/span&gt; Demo&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://storage.googleapis.com/truffle-demos/non-interactive.svg?sanitize=true" alt="GitHub scanning demo" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --org=trufflesecurity
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;&lt;span&gt;💾&lt;/span&gt; Installation&lt;/h1&gt; 
&lt;p&gt;Several options are available for you:&lt;/p&gt; 
&lt;h3&gt;MacOS users&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew install trufflehog
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker:&lt;/h3&gt; 
&lt;p&gt;&lt;sub&gt;&lt;i&gt;&lt;em&gt;Ensure Docker engine is running before executing the following commands:&lt;/em&gt;&lt;/i&gt;&lt;/sub&gt;&lt;/p&gt; 
&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Unix&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Windows Command Prompt&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it -v "%cd:/=\%:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Windows PowerShell&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it -v "${PWD}:/pwd" trufflesecurity/trufflehog github --repo https://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 and M2 Mac&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --platform linux/arm64 --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Binary releases&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;Download and unpack from https://github.com/trufflesecurity/trufflehog/releases
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Compile from source&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/trufflesecurity/trufflehog.git
cd trufflehog; go install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using installation script&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using installation script, verify checksum signature (requires cosign to be installed)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -v -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using installation script to install a specific version&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin &amp;lt;ReleaseTag like v3.56.0&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;&lt;span&gt;🔐&lt;/span&gt; Verifying the artifacts&lt;/h1&gt; 
&lt;p&gt;Checksums are applied to all artifacts, and the resulting checksum file is signed using cosign.&lt;/p&gt; 
&lt;p&gt;You need the following tool to verify signature:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.sigstore.dev/cosign/system_config/installation/"&gt;Cosign&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Verification steps are as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download the artifact files you want, and the following files from the &lt;a href="https://github.com/trufflesecurity/trufflehog/releases"&gt;releases&lt;/a&gt; page.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;trufflehog_{version}_checksums.txt&lt;/li&gt; 
   &lt;li&gt;trufflehog_{version}_checksums.txt.pem&lt;/li&gt; 
   &lt;li&gt;trufflehog_{version}_checksums.txt.sig&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Verify the signature:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;cosign verify-blob &amp;lt;path to trufflehog_{version}_checksums.txt&amp;gt; \
--certificate &amp;lt;path to trufflehog_{version}_checksums.txt.pem&amp;gt; \
--signature &amp;lt;path to trufflehog_{version}_checksums.txt.sig&amp;gt; \
--certificate-identity-regexp 'https://github\.com/trufflesecurity/trufflehog/\.github/workflows/.+' \
--certificate-oidc-issuer "https://token.actions.githubusercontent.com"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once the signature is confirmed as valid, you can proceed to validate that the SHA256 sums align with the downloaded artifact:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;sha256sum --ignore-missing -c trufflehog_{version}_checksums.txt
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Replace &lt;code&gt;{version}&lt;/code&gt; with the downloaded files version&lt;/p&gt; 
&lt;p&gt;Alternatively, if you are using the installation script, pass &lt;code&gt;-v&lt;/code&gt; option to perform signature verification. This requires Cosign binary to be installed prior to running the installation script.&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;🚀&lt;/span&gt; Quick Start&lt;/h1&gt; 
&lt;h2&gt;1: Scan a repo for only verified secrets&lt;/h2&gt; 
&lt;p&gt;Command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog git https://github.com/trufflesecurity/test_keys --results=verified
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Expected output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;🐷🔑🐷  TruffleHog. Unearth your secrets. 🐷🔑🐷

Found verified result 🐷🔑
Detector Type: AWS
Decoder Type: PLAIN
Raw result: AKIAYVP4CIPPERUVIFXG
Line: 4
Commit: fbc14303ffbf8fb1c2c1914e8dda7d0121633aca
File: keys
Email: counter &amp;lt;counter@counters-MacBook-Air.local&amp;gt;
Repository: https://github.com/trufflesecurity/test_keys
Timestamp: 2022-06-16 10:17:40 -0700 PDT
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;2: Scan a GitHub Org for only verified secrets&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog github --org=trufflesecurity --results=verified
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3: Scan a GitHub Repo for only verified secrets and get JSON output&lt;/h2&gt; 
&lt;p&gt;Command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog git https://github.com/trufflesecurity/test_keys --results=verified --json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Expected output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{"SourceMetadata":{"Data":{"Git":{"commit":"fbc14303ffbf8fb1c2c1914e8dda7d0121633aca","file":"keys","email":"counter \u003ccounter@counters-MacBook-Air.local\u003e","repository":"https://github.com/trufflesecurity/test_keys","timestamp":"2022-06-16 10:17:40 -0700 PDT","line":4}}},"SourceID":0,"SourceType":16,"SourceName":"trufflehog - git","DetectorType":2,"DetectorName":"AWS","DecoderName":"PLAIN","Verified":true,"Raw":"AKIAYVP4CIPPERUVIFXG","Redacted":"AKIAYVP4CIPPERUVIFXG","ExtraData":{"account":"595918472158","arn":"arn:aws:iam::595918472158:user/canarytokens.com@@mirux23ppyky6hx3l6vclmhnj","user_id":"AIDAYVP4CIPPJ5M54LRCY"},"StructuredData":null}
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;4: Scan a GitHub Repo + its Issues and Pull Requests&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog github --repo=https://github.com/trufflesecurity/test_keys --issue-comments --pr-comments
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;5: Scan an S3 bucket for high-confidence results (verified + unknown)&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --bucket=&amp;lt;bucket name&amp;gt; --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;6: Scan S3 buckets using IAM Roles&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --role-arn=&amp;lt;iam role arn&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;7: Scan a Github Repo using SSH authentication in Docker&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -v "$HOME/.ssh:/root/.ssh:ro" trufflesecurity/trufflehog:latest git ssh://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;8: Scan individual files or directories&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog filesystem path/to/file1.txt path/to/file2.txt path/to/dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;9: Scan a local git repo&lt;/h2&gt; 
&lt;p&gt;Clone the git repo. For example &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/git@github.com:trufflesecurity/test_keys.git"&gt;test keys&lt;/a&gt; repo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ git clone git@github.com:trufflesecurity/test_keys.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run trufflehog from the parent directory (outside the git repo).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ trufflehog git file://test_keys --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;10: Scan GCS buckets for only verified secrets&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog gcs --project-id=&amp;lt;project-ID&amp;gt; --cloud-environment --results=verified
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;11: Scan a Docker image for only verified secrets&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;--image&lt;/code&gt; flag multiple times to scan multiple images.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# to scan from a remote registry
trufflehog docker --image trufflesecurity/secrets --results=verified

# to scan from the local docker daemon
trufflehog docker --image docker://new_image:tag --results=verified

# to scan from an image saved as a tarball
trufflehog docker --image file://path_to_image.tar --results=verified
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;12: Scan in CI&lt;/h2&gt; 
&lt;p&gt;Set the &lt;code&gt;--since-commit&lt;/code&gt; flag to your default branch that people merge into (ex: "main"). Set the &lt;code&gt;--branch&lt;/code&gt; flag to your PR's branch name (ex: "feature-1"). Depending on the CI/CD platform you use, this value can be pulled in dynamically (ex: &lt;a href="https://circleci.com/docs/variables/"&gt;CIRCLE_BRANCH in Circle CI&lt;/a&gt; and &lt;a href="https://docs.travis-ci.com/user/environment-variables/"&gt;TRAVIS_PULL_REQUEST_BRANCH in Travis CI&lt;/a&gt;). If the repo is cloned and the target branch is already checked out during the CI/CD workflow, then &lt;code&gt;--branch HEAD&lt;/code&gt; should be sufficient. The &lt;code&gt;--fail&lt;/code&gt; flag will return an 183 error code if valid credentials are found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog git file://. --since-commit main --branch feature-1 --results=verified,unknown --fail
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;13: Scan a Postman workspace&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;--workspace-id&lt;/code&gt;, &lt;code&gt;--collection-id&lt;/code&gt;, &lt;code&gt;--environment&lt;/code&gt; flags multiple times to scan multiple targets.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog postman --token=&amp;lt;postman api token&amp;gt; --workspace-id=&amp;lt;workspace id&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;14: Scan a Jenkins server&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog jenkins --url https://jenkins.example.com --username admin --password admin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;15: Scan an Elasticsearch server&lt;/h2&gt; 
&lt;h3&gt;Scan a Local Cluster&lt;/h3&gt; 
&lt;p&gt;There are two ways to authenticate to a local cluster with TruffleHog: (1) username and password, (2) service token.&lt;/p&gt; 
&lt;h4&gt;Connect to a local cluster with username and password&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog elasticsearch --nodes 192.168.14.3 192.168.14.4 --username truffle --password hog
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Connect to a local cluster with a service token&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog elasticsearch --nodes 192.168.14.3 192.168.14.4 --service-token ‘AAEWVaWM...Rva2VuaSDZ’
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scan an Elastic Cloud Cluster&lt;/h3&gt; 
&lt;p&gt;To scan a cluster on Elastic Cloud, you’ll need a Cloud ID and API key.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog elasticsearch \
  --cloud-id 'search-prod:dXMtY2Vx...YjM1ODNlOWFiZGRlNjI0NA==' \
  --api-key 'MlVtVjBZ...ZSYlduYnF1djh3NG5FQQ=='
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;16. Scan a GitHub Repository for Cross Fork Object References and Deleted Commits&lt;/h2&gt; 
&lt;p&gt;The following command will enumerate deleted and hidden commits on a GitHub repository and then scan them for secrets. This is an alpha release feature.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog github-experimental --repo https://github.com/&amp;lt;USER&amp;gt;/&amp;lt;REPO&amp;gt;.git --object-discovery
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition to the normal TruffleHog output, the &lt;code&gt;--object-discovery&lt;/code&gt; flag creates two files in a new &lt;code&gt;$HOME/.trufflehog&lt;/code&gt; directory: &lt;code&gt;valid_hidden.txt&lt;/code&gt; and &lt;code&gt;invalid.txt&lt;/code&gt;. These are used to track state during commit enumeration, as well as to provide users with a complete list of all hidden and deleted commits (&lt;code&gt;valid_hidden.txt&lt;/code&gt;). If you'd like to automatically remove these files after scanning, please add the flag &lt;code&gt;--delete-cached-data&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Enumerating all valid commits on a repository using this method takes between 20 minutes and a few hours, depending on the size of your repository. We added a progress bar to keep you updated on how long the enumeration will take. The actual secret scanning runs extremely fast.&lt;/p&gt; 
&lt;p&gt;For more information on Cross Fork Object References, please &lt;a href="https://trufflesecurity.com/blog/anyone-can-access-deleted-and-private-repo-data-github"&gt;read our blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;17. Scan Hugging Face&lt;/h2&gt; 
&lt;h3&gt;Scan a Hugging Face Model, Dataset or Space&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog huggingface --model &amp;lt;model_id&amp;gt; --space &amp;lt;space_id&amp;gt; --dataset &amp;lt;dataset_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scan all Models, Datasets and Spaces belonging to a Hugging Face Organization or User&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog huggingface --org &amp;lt;orgname&amp;gt; --user &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(Optionally) When scanning an organization or user, you can skip an entire class of resources with &lt;code&gt;--skip-models&lt;/code&gt;, &lt;code&gt;--skip-datasets&lt;/code&gt;, &lt;code&gt;--skip-spaces&lt;/code&gt; OR a particular resource with &lt;code&gt;--ignore-models &amp;lt;model_id&amp;gt;&lt;/code&gt;, &lt;code&gt;--ignore-datasets &amp;lt;dataset_id&amp;gt;&lt;/code&gt;, &lt;code&gt;--ignore-spaces &amp;lt;space_id&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Scan Discussion and PR Comments&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog huggingface --model &amp;lt;model_id&amp;gt; --include-discussions --include-prs
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;18. Scan stdin Input&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;aws s3 cp s3://example/gzipped/data.gz - | gunzip -c | trufflehog stdin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;&lt;span&gt;❓&lt;/span&gt; FAQ&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;All I see is &lt;code&gt;🐷🔑🐷 TruffleHog. Unearth your secrets. 🐷🔑🐷&lt;/code&gt; and the program exits, what gives? 
  &lt;ul&gt; 
   &lt;li&gt;That means no secrets were detected&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the scan taking a long time when I scan a GitHub org 
  &lt;ul&gt; 
   &lt;li&gt;Unauthenticated GitHub scans have rate limits. To improve your rate limits, include the &lt;code&gt;--token&lt;/code&gt; flag with a personal access token&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;It says a private key was verified, what does that mean? 
  &lt;ul&gt; 
   &lt;li&gt;A verified result means TruffleHog confirmed the credential is valid by testing it against the service's API. For private keys, we've confirmed the key can be used live for SSH or SSL authentication. Check out our Driftwood blog post to learn more &lt;a href="https://trufflesecurity.com/blog/driftwood-know-if-private-keys-are-sensitive/"&gt;Blog post&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Is there an easy way to ignore specific secrets? 
  &lt;ul&gt; 
   &lt;li&gt;If the scanned source &lt;a href="https://github.com/trufflesecurity/trufflehog/raw/d6375ba92172fd830abb4247cca15e3176448c5d/pkg/engine/engine.go#L358-L365"&gt;supports line numbers&lt;/a&gt;, then you can add a &lt;code&gt;trufflehog:ignore&lt;/code&gt; comment on the line containing the secret to ignore that secrets.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;&lt;span&gt;📰&lt;/span&gt; What's new in v3?&lt;/h1&gt; 
&lt;p&gt;TruffleHog v3 is a complete rewrite in Go with many new powerful features.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We've &lt;strong&gt;added over 700 credential detectors that support active verification against their respective APIs&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;We've also added native &lt;strong&gt;support for scanning GitHub, GitLab, Docker, filesystems, S3, GCS, Circle CI and Travis CI&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Instantly verify private keys&lt;/strong&gt; against millions of github users and &lt;strong&gt;billions&lt;/strong&gt; of TLS certificates using our &lt;a href="https://trufflesecurity.com/blog/driftwood"&gt;Driftwood&lt;/a&gt; technology.&lt;/li&gt; 
 &lt;li&gt;Scan binaries, documents, and other file formats&lt;/li&gt; 
 &lt;li&gt;Available as a GitHub Action and a pre-commit hook&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is credential verification?&lt;/h2&gt; 
&lt;p&gt;For every potential credential that is detected, we've painstakingly implemented programmatic verification against the API that we think it belongs to. Verification eliminates false positives and provides three result statuses:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;verified&lt;/strong&gt;: Credential confirmed as valid and active by API testing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;unverified&lt;/strong&gt;: Credential detected but not confirmed valid (may be invalid, expired, or verification disabled)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;unknown&lt;/strong&gt;: Verification attempted but failed due to errors, such as a network or API failure&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, the &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors/aws/aws.go"&gt;AWS credential detector&lt;/a&gt; performs a &lt;code&gt;GetCallerIdentity&lt;/code&gt; API call against the AWS API to verify if an AWS credential is active.&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;📝&lt;/span&gt; Usage&lt;/h1&gt; 
&lt;p&gt;TruffleHog has a sub-command for each source of data that you may want to scan:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;git&lt;/li&gt; 
 &lt;li&gt;github&lt;/li&gt; 
 &lt;li&gt;gitlab&lt;/li&gt; 
 &lt;li&gt;docker&lt;/li&gt; 
 &lt;li&gt;s3&lt;/li&gt; 
 &lt;li&gt;filesystem (files and directories)&lt;/li&gt; 
 &lt;li&gt;syslog&lt;/li&gt; 
 &lt;li&gt;circleci&lt;/li&gt; 
 &lt;li&gt;travisci&lt;/li&gt; 
 &lt;li&gt;gcs (Google Cloud Storage)&lt;/li&gt; 
 &lt;li&gt;postman&lt;/li&gt; 
 &lt;li&gt;jenkins&lt;/li&gt; 
 &lt;li&gt;elasticsearch&lt;/li&gt; 
 &lt;li&gt;stdin&lt;/li&gt; 
 &lt;li&gt;multi-scan&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each subcommand can have options that you can see with the &lt;code&gt;--help&lt;/code&gt; flag provided to the sub command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ trufflehog git --help
usage: TruffleHog git [&amp;lt;flags&amp;gt;] &amp;lt;uri&amp;gt;

Find credentials in git repositories.

Flags:
  -h, --help                Show context-sensitive help (also try --help-long and --help-man).
      --log-level=0         Logging verbosity on a scale of 0 (info) to 5 (trace). Can be disabled with "-1".
      --profile             Enables profiling and sets a pprof and fgprof server on :18066.
  -j, --json                Output in JSON format.
      --json-legacy         Use the pre-v3.0 JSON format. Only works with git, gitlab, and github sources.
      --github-actions      Output in GitHub Actions format.
      --concurrency=20           Number of concurrent workers.
      --no-verification     Don't verify the results.
      --results=RESULTS          Specifies which type(s) of results to output: verified (confirmed valid by API), unknown (verification failed due to error), unverified (detected but not verified), filtered_unverified (unverified but would have been filtered out). Defaults to all types.
      --allow-verification-overlap
                                 Allow verification of similar credentials across detectors
      --filter-unverified   Only output first unverified result per chunk per detector if there are more than one results.
      --filter-entropy=FILTER-ENTROPY
                                 Filter unverified results with Shannon entropy. Start with 3.0.
      --config=CONFIG            Path to configuration file.
      --print-avg-detector-time
                                 Print the average time spent on each detector.
      --no-update           Don't check for updates.
      --fail                Exit with code 183 if results are found.
      --verifier=VERIFIER ...    Set custom verification endpoints.
      --custom-verifiers-only   Only use custom verification endpoints.
      --archive-max-size=ARCHIVE-MAX-SIZE
                                 Maximum size of archive to scan. (Byte units eg. 512B, 2KB, 4MB)
      --archive-max-depth=ARCHIVE-MAX-DEPTH
                                 Maximum depth of archive to scan.
      --archive-timeout=ARCHIVE-TIMEOUT
                                 Maximum time to spend extracting an archive.
      --include-detectors="all"  Comma separated list of detector types to include. Protobuf name or IDs may be used, as well as ranges.
      --exclude-detectors=EXCLUDE-DETECTORS
                                 Comma separated list of detector types to exclude. Protobuf name or IDs may be used, as well as ranges. IDs defined here take precedence over the include list.
      --version             Show application version.
  -i, --include-paths=INCLUDE-PATHS
                                 Path to file with newline separated regexes for files to include in scan.
  -x, --exclude-paths=EXCLUDE-PATHS
                                 Path to file with newline separated regexes for files to exclude in scan.
      --exclude-globs=EXCLUDE-GLOBS
                                 Comma separated list of globs to exclude in scan. This option filters at the `git log` level, resulting in faster scans.
      --since-commit=SINCE-COMMIT
                                 Commit to start scan from.
      --branch=BRANCH            Branch to scan.
      --max-depth=MAX-DEPTH      Maximum depth of commits to scan.
      --bare                Scan bare repository (e.g. useful while using in pre-receive hooks)

Args:
  &amp;lt;uri&amp;gt;  Git repository URL. https://, file://, or ssh:// schema expected.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, to scan a &lt;code&gt;git&lt;/code&gt; repository, start with&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;trufflehog git https://github.com/trufflesecurity/trufflehog.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;TruffleHog supports defining &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/#regex-detector-alpha"&gt;custom regex detectors&lt;/a&gt; and multiple sources in a configuration file provided via the &lt;code&gt;--config&lt;/code&gt; flag. The regex detectors can be used with any subcommand, while the sources defined in configuration are only for the &lt;code&gt;multi-scan&lt;/code&gt; subcommand.&lt;/p&gt; 
&lt;p&gt;The configuration format for sources can be found on Truffle Security's &lt;a href="https://docs.trufflesecurity.com/scan-data-for-secrets"&gt;source configuration documentation page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Example GitHub source configuration and &lt;a href="https://docs.trufflesecurity.com/github#Fvm1I"&gt;options reference&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;sources:
- connection:
    '@type': type.googleapis.com/sources.GitHub
    repositories:
    - https://github.com/trufflesecurity/test_keys.git
    unauthenticated: {}
  name: example config scan
  type: SOURCE_TYPE_GITHUB
  verify: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may define multiple connections under the &lt;code&gt;sources&lt;/code&gt; key (see above), and TruffleHog will scan all of the sources concurrently.&lt;/p&gt; 
&lt;h2&gt;S3&lt;/h2&gt; 
&lt;p&gt;The S3 source supports assuming IAM roles for scanning in addition to IAM users. This makes it easier for users to scan multiple AWS accounts without needing to rely on hardcoded credentials for each account.&lt;/p&gt; 
&lt;p&gt;The IAM identity that TruffleHog uses initially will need to have &lt;code&gt;AssumeRole&lt;/code&gt; privileges as a principal in the &lt;a href="https://aws.amazon.com/blogs/security/how-to-use-trust-policies-with-iam-roles/"&gt;trust policy&lt;/a&gt; of each IAM role to assume.&lt;/p&gt; 
&lt;p&gt;To scan a specific bucket using locally set credentials or instance metadata if on an EC2 instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --bucket=&amp;lt;bucket-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To scan a specific bucket using an assumed role:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --bucket=&amp;lt;bucket-name&amp;gt; --role-arn=&amp;lt;iam-role-arn&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Multiple roles can be passed as separate arguments. The following command will attempt to scan every bucket each role has permissions to list in the S3 API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --role-arn=&amp;lt;iam-role-arn-1&amp;gt; --role-arn=&amp;lt;iam-role-arn-2&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Exit Codes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;0: No errors and no results were found.&lt;/li&gt; 
 &lt;li&gt;1: An error was encountered. Sources may not have completed scans.&lt;/li&gt; 
 &lt;li&gt;183: No errors were encountered, but results were found. Will only be returned if &lt;code&gt;--fail&lt;/code&gt; flag is used.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img alt="octocat" src="https://github.githubassets.com/images/icons/emoji/octocat.png?v8" /&gt;) TruffleHog Github Action&lt;/h2&gt; 
&lt;h3&gt;General Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        extra_args: --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the example config above, we're scanning for live secrets in all PRs and Pushes to &lt;code&gt;main&lt;/code&gt;. Only code changes in the referenced commits are scanned. If you'd like to scan an entire branch, please see the "Advanced Usage" section below.&lt;/p&gt; 
&lt;h3&gt;Shallow Cloning&lt;/h3&gt; 
&lt;p&gt;If you're incorporating TruffleHog into a standalone workflow and aren't running any other CI/CD tooling alongside TruffleHog, then we recommend using &lt;a href="https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---depthltdepthgt"&gt;Shallow Cloning&lt;/a&gt; to speed up your workflow. Here's an example of how to do it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;...
      - shell: bash
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "depth=$(($(jq length &amp;lt;&amp;lt;&amp;lt; '${{ toJson(github.event.commits) }}') + 2))" &amp;gt;&amp;gt; $GITHUB_ENV
            echo "branch=${{ github.ref_name }}" &amp;gt;&amp;gt; $GITHUB_ENV
          fi
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "depth=$((${{ github.event.pull_request.commits }}+2))" &amp;gt;&amp;gt; $GITHUB_ENV
            echo "branch=${{ github.event.pull_request.head.ref }}" &amp;gt;&amp;gt; $GITHUB_ENV
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{env.branch}}
          fetch-depth: ${{env.depth}}
      - uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --results=verified,unknown
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Depending on the event type (push or PR), we calculate the number of commits present. Then we add 2, so that we can reference a base commit before our code changes. We pass that integer value to the &lt;code&gt;fetch-depth&lt;/code&gt; flag in the checkout action in addition to the relevant branch. Now our checkout process should be much shorter.&lt;/p&gt; 
&lt;h3&gt;Canary detection&lt;/h3&gt; 
&lt;p&gt;TruffleHog statically detects &lt;a href="https://canarytokens.org/"&gt;https://canarytokens.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/trufflesecurity/trufflehog/assets/52866392/74ace530-08c5-4eaf-a169-84a73e328f6f" alt="image" /&gt;&lt;/p&gt; 
&lt;h3&gt;Advanced Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- name: TruffleHog
  uses: trufflesecurity/trufflehog@main
  with:
    # Repository path
    path:
    # Start scanning from here (usually main branch).
    base:
    # Scan commits until here (usually dev branch).
    head: # optional
    # Extra args to be passed to the trufflehog cli.
    extra_args: --log-level=2 --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you'd like to specify specific &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt; refs, you can use the &lt;code&gt;base&lt;/code&gt; argument (&lt;code&gt;--since-commit&lt;/code&gt; flag in TruffleHog CLI) and the &lt;code&gt;head&lt;/code&gt; argument (&lt;code&gt;--branch&lt;/code&gt; flag in the TruffleHog CLI). We only recommend using these arguments for very specific use cases, where the default behavior does not work.&lt;/p&gt; 
&lt;h4&gt;Advanced Usage: Scan entire branch&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;- name: scan-push
        uses: trufflesecurity/trufflehog@main
        with:
          base: ""
          head: ${{ github.ref_name }}
          extra_args: --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;TruffleHog GitLab CI&lt;/h2&gt; 
&lt;h3&gt;Example Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;stages:
  - security

security-secrets:
  stage: security
  allow_failure: false
  image: alpine:latest
  variables:
    SCAN_PATH: "." # Set the relative path in the repo to scan
  before_script:
    - apk add --no-cache git curl jq
    - curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
  script:
    - trufflehog filesystem "$SCAN_PATH" --results=verified,unknown --fail --json | jq
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the example pipeline above, we're scanning for live secrets in all repository directories and files. This job runs only when the pipeline source is a merge request event, meaning it's triggered when a new merge request is created.&lt;/p&gt; 
&lt;h2&gt;Pre-commit Hook&lt;/h2&gt; 
&lt;p&gt;TruffleHog can be used in a pre-commit hook to prevent credentials from leaking before they ever leave your computer.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/PreCommit.md"&gt;pre-commit hook documentation&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Regex Detector (alpha)&lt;/h2&gt; 
&lt;p&gt;TruffleHog supports detection and verification of custom regular expressions. For detection, at least one &lt;strong&gt;regular expression&lt;/strong&gt; and &lt;strong&gt;keyword&lt;/strong&gt; is required. A &lt;strong&gt;keyword&lt;/strong&gt; is a fixed literal string identifier that appears in or around the regex to be detected. To allow maximum flexibility for verification, a webhook is used containing the regular expression matches.&lt;/p&gt; 
&lt;p&gt;TruffleHog will send a JSON POST request containing the regex matches to a configured webhook endpoint. If the endpoint responds with a &lt;code&gt;200 OK&lt;/code&gt; response status code, the secret is considered verified. If verification fails due to network/API errors, the result is marked as unknown.&lt;/p&gt; 
&lt;p&gt;Custom Detectors support a few different filtering mechanisms: entropy, regex targeting the entire match, regex targeting the captured secret, and excluded word lists checked against the secret (captured group if present, entire match if capture group is not present). Note that if your custom detector has multiple &lt;code&gt;regex&lt;/code&gt; set (in this example &lt;code&gt;hogID&lt;/code&gt;, and &lt;code&gt;hogToken&lt;/code&gt;), then the filters get applied to each regex. &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/examples/generic_with_filters.yml"&gt;Here&lt;/a&gt; is an example of a custom detector using these filters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; This feature is alpha and subject to change.&lt;/p&gt; 
&lt;h3&gt;Regex Detector Example&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/custom_detectors/CUSTOM_DETECTORS.md"&gt;Here&lt;/a&gt; is how to setup a custom regex detector with verification server.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🔍&lt;/span&gt; Analyze&lt;/h2&gt; 
&lt;p&gt;TruffleHog supports running a deeper analysis of a credential to view its permissions and the resources it has access to.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog analyze
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;&lt;span&gt;❤️&lt;/span&gt; Contributors&lt;/h1&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md"&gt;Contribute&lt;/a&gt;].&lt;/p&gt; 
&lt;a href="https://github.com/trufflesecurity/trufflehog/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=trufflesecurity/trufflehog" /&gt; &lt;/a&gt; 
&lt;h1&gt;&lt;span&gt;💻&lt;/span&gt; Contributing&lt;/h1&gt; 
&lt;p&gt;Contributions are very welcome! Please see our &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md"&gt;contribution guidelines first&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We no longer accept contributions to TruffleHog v2, but that code is available in the &lt;code&gt;v2&lt;/code&gt; branch.&lt;/p&gt; 
&lt;h2&gt;Adding new secret detectors&lt;/h2&gt; 
&lt;p&gt;We have published some &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/hack/docs/Adding_Detectors_external.md"&gt;documentation and tooling to get started on adding new secret detectors&lt;/a&gt;. Let's improve detection together!&lt;/p&gt; 
&lt;h1&gt;Use as a library&lt;/h1&gt; 
&lt;p&gt;Currently, trufflehog is in heavy development and no guarantees can be made on the stability of the public APIs at this time.&lt;/p&gt; 
&lt;h1&gt;License Change&lt;/h1&gt; 
&lt;p&gt;Since v3.0, TruffleHog is released under a AGPL 3 license, included in &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;. TruffleHog v3.0 uses none of the previous codebase, but care was taken to preserve backwards compatibility on the command line interface. The work previous to this release is still available licensed under GPL 2.0 in the history of this repository and the previous package releases and tags. A completed CLA is required for us to accept contributions going forward.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AlexxIT/go2rtc</title>
      <link>https://github.com/AlexxIT/go2rtc</link>
      <description>&lt;p&gt;Ultimate camera streaming application with support RTSP, RTMP, HTTP-FLV, WebRTC, MSE, HLS, MP4, MJPEG, HomeKit, FFmpeg, etc.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/logo.gif" alt="go2rtc" /&gt; &lt;br /&gt; &lt;a href="https://github.com/AlexxIT/go2rtc/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/AlexxIT/go2rtc?style=flat-square&amp;amp;logo=github" alt="stars" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/alexxit/go2rtc"&gt;&lt;img src="https://img.shields.io/docker/pulls/alexxit/go2rtc?style=flat-square&amp;amp;logo=docker&amp;amp;logoColor=white&amp;amp;label=pulls" alt="docker pulls" /&gt;&lt;/a&gt; &lt;a href="https://github.com/AlexxIT/go2rtc/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/AlexxIT/go2rtc/total?color=blue&amp;amp;style=flat-square&amp;amp;logo=github" alt="releases" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/AlexxIT/go2rtc"&gt;&lt;img src="https://goreportcard.com/badge/github.com/AlexxIT/go2rtc" alt="goreport" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; 
&lt;p&gt;Ultimate camera streaming application with support for RTSP, WebRTC, HomeKit, FFmpeg, RTMP, etc.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/go2rtc.png" alt="" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;zero-dependency and zero-config &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary"&gt;small app&lt;/a&gt; for all OS (Windows, macOS, Linux, ARM)&lt;/li&gt; 
 &lt;li&gt;zero-delay for many supported protocols (lowest possible streaming latency)&lt;/li&gt; 
 &lt;li&gt;streaming from &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;RTSP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp"&gt;RTMP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip"&gt;DVRIP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;HTTP&lt;/a&gt; (FLV/MJPEG/JPEG/TS), &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device"&gt;USB Cameras&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;other sources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;streaming from any sources, supported by &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;streaming to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;RTSP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;MSE/MP4&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-homekit"&gt;HomeKit&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls"&gt;HLS&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg"&gt;MJPEG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#publish-stream"&gt;publish&lt;/a&gt; any source to popular streaming services (YouTube, Telegram, etc.)&lt;/li&gt; 
 &lt;li&gt;first project in the World with support streaming from &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit"&gt;HomeKit Cameras&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;support H265 for WebRTC in browser (Safari only, &lt;a href="https://github.com/AlexxIT/Blog/issues/5"&gt;read more&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;on-the-fly transcoding for unsupported codecs via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;play audio files and live streams on some cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera"&gt;speaker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;multi-source 2-way &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation"&gt;codecs negotiation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;mixing tracks from different sources to single stream&lt;/li&gt; 
   &lt;li&gt;auto-match client-supported codecs&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;2-way audio&lt;/a&gt; for some cameras&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;streaming from private networks via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;ngrok&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;can be &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;integrated to&lt;/a&gt; any smart home platform or be used as &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary"&gt;standalone app&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Inspired by:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;series of streaming projects from &lt;a href="https://github.com/deepch"&gt;@deepch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pion/webrtc"&gt;webrtc&lt;/a&gt; go library and whole &lt;a href="https://github.com/pion"&gt;@pion&lt;/a&gt; team&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aler9/rtsp-simple-server"&gt;rtsp-simple-server&lt;/a&gt; idea from &lt;a href="https://github.com/aler9"&gt;@aler9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gstreamer.freedesktop.org/"&gt;GStreamer&lt;/a&gt; framework pipeline idea&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediasoup.org/"&gt;MediaSoup&lt;/a&gt; framework routing idea&lt;/li&gt; 
 &lt;li&gt;HomeKit Accessory Protocol from &lt;a href="https://github.com/brutella/hap"&gt;@brutella&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;creator of the project's logo &lt;a href="https://www.instagram.com/v_novoseltsev"&gt;@v_novoseltsev&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] There is NO existing website for go2rtc project other than this GitHub repository. The website go2rtc[.]com is in no way associated with the authors of this project.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start"&gt;Fast start&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary"&gt;go2rtc: Binary&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-docker"&gt;go2rtc: Docker&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on"&gt;go2rtc: Home Assistant Add-on&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration"&gt;go2rtc: Home Assistant Integration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-dev-version"&gt;go2rtc: Dev version&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;Module: Streams&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;Two way audio&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;Source: RTSP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp"&gt;Source: RTMP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;Source: HTTP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-onvif"&gt;Source: ONVIF&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;Source: FFmpeg&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device"&gt;Source: FFmpeg Device&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec"&gt;Source: Exec&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo"&gt;Source: Echo&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-expr"&gt;Source: Expr&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit"&gt;Source: HomeKit&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-bubble"&gt;Source: Bubble&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip"&gt;Source: DVRIP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;Source: Tapo&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-kasa"&gt;Source: Kasa&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-gopro"&gt;Source: GoPro&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ivideon"&gt;Source: Ivideon&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass"&gt;Source: Hass&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi"&gt;Source: ISAPI&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-nest"&gt;Source: Nest&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ring"&gt;Source: Ring&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock"&gt;Source: Roborock&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webrtc"&gt;Source: WebRTC&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent"&gt;Source: WebTorrent&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources"&gt;Incoming sources&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera"&gt;Stream to camera&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#publish-stream"&gt;Publish stream&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#preload-stream"&gt;Preload stream&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;Module: API&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;Module: RTSP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp"&gt;Module: RTMP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;Module: WebRTC&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-homekit"&gt;Module: HomeKit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent"&gt;Module: WebTorrent&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;Module: ngrok&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass"&gt;Module: Hass&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;Module: MP4&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls"&gt;Module: HLS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg"&gt;Module: MJPEG&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-log"&gt;Module: Log&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#security"&gt;Security&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters"&gt;Codecs filters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-madness"&gt;Codecs madness&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation"&gt;Codecs negotiation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#projects-using-go2rtc"&gt;Projects using go2rtc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#cameras-experience"&gt;Camera experience&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#tips"&gt;TIPS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Fast start&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary"&gt;binary&lt;/a&gt; or use &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-docker"&gt;Docker&lt;/a&gt; or Home Assistant &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on"&gt;Add-on&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration"&gt;Integration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open web interface: &lt;code&gt;http://localhost:1984/&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Optionally:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;add your &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;streams&lt;/a&gt; to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;config&lt;/a&gt; file&lt;/li&gt; 
 &lt;li&gt;setup &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;external access&lt;/a&gt; to webrtc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Developers:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;write your own &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;web interface&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;integrate &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;web api&lt;/a&gt; into your smart home platform&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;go2rtc: Binary&lt;/h3&gt; 
&lt;p&gt;Download binary for your OS from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/"&gt;latest release&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_win64.zip&lt;/code&gt; - Windows 10+ 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_win32.zip&lt;/code&gt; - Windows 10+ 32-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_win_arm64.zip&lt;/code&gt; - Windows ARM 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_amd64&lt;/code&gt; - Linux 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_i386&lt;/code&gt; - Linux 32-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_arm64&lt;/code&gt; - Linux ARM 64-bit (ex. Raspberry 64-bit OS)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_arm&lt;/code&gt; - Linux ARM 32-bit (ex. Raspberry 32-bit OS)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_armv6&lt;/code&gt; - Linux ARMv6 (for old Raspberry 1 and Zero)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_mipsel&lt;/code&gt; - Linux MIPS (ex. &lt;a href="https://github.com/AlexxIT/XiaomiGateway3"&gt;Xiaomi Gateway 3&lt;/a&gt;, &lt;a href="https://github.com/gtxaspec/wz_mini_hacks"&gt;Wyze cameras&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_mac_amd64.zip&lt;/code&gt; - macOS 11+ Intel 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_mac_arm64.zip&lt;/code&gt; - macOS ARM 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_freebsd_amd64.zip&lt;/code&gt; - FreeBSD 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_freebsd_arm64.zip&lt;/code&gt; - FreeBSD ARM 64-bit&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Don't forget to fix the rights &lt;code&gt;chmod +x go2rtc_xxx_xxx&lt;/code&gt; on Linux and Mac.&lt;/p&gt; 
&lt;h3&gt;go2rtc: Docker&lt;/h3&gt; 
&lt;p&gt;The Docker container &lt;a href="https://hub.docker.com/r/alexxit/go2rtc"&gt;&lt;code&gt;alexxit/go2rtc&lt;/code&gt;&lt;/a&gt; supports multiple architectures including &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;386&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;, and &lt;code&gt;arm&lt;/code&gt;. This container offers the same functionality as the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on"&gt;Home Assistant Add-on&lt;/a&gt; but is designed to operate independently of Home Assistant. It comes preinstalled with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;ngrok&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo"&gt;Python&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;go2rtc: Home Assistant Add-on&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&amp;amp;repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons"&gt;&lt;img src="https://my.home-assistant.io/badges/supervisor_addon.svg?sanitize=true" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Add-On: 
  &lt;ul&gt; 
   &lt;li&gt;Settings &amp;gt; Add-ons &amp;gt; Plus &amp;gt; Repositories &amp;gt; Add &lt;code&gt;https://github.com/AlexxIT/hassio-addons&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;go2rtc &amp;gt; Install &amp;gt; Start&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Setup &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass"&gt;Integration&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;go2rtc: Home Assistant Integration&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/AlexxIT/WebRTC"&gt;WebRTC Camera&lt;/a&gt; custom component can be used on any &lt;a href="https://www.home-assistant.io/installation/"&gt;Home Assistant installation&lt;/a&gt;, including &lt;a href="https://github.com/AlexxIT/HassWP"&gt;HassWP&lt;/a&gt; on Windows. It can automatically download and use the latest version of go2rtc. Or it can connect to an existing version of go2rtc. Addon installation in this case is optional.&lt;/p&gt; 
&lt;h3&gt;go2rtc: Dev version&lt;/h3&gt; 
&lt;p&gt;Latest, but maybe unstable version:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Binary: &lt;a href="https://nightly.link/AlexxIT/go2rtc/workflows/build/master"&gt;latest nightly release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Docker: &lt;code&gt;alexxit/go2rtc:master&lt;/code&gt; or &lt;code&gt;alexxit/go2rtc:master-hardware&lt;/code&gt; versions&lt;/li&gt; 
 &lt;li&gt;Hass Add-on: &lt;code&gt;go2rtc master&lt;/code&gt; or &lt;code&gt;go2rtc master hardware&lt;/code&gt; versions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;by default go2rtc will search &lt;code&gt;go2rtc.yaml&lt;/code&gt; in the current work directory&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;api&lt;/code&gt; server will start on default &lt;strong&gt;1984 port&lt;/strong&gt; (TCP)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp&lt;/code&gt; server will start on default &lt;strong&gt;8554 port&lt;/strong&gt; (TCP)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;webrtc&lt;/code&gt; will use port &lt;strong&gt;8555&lt;/strong&gt; (TCP/UDP) for connections&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ffmpeg&lt;/code&gt; will use default transcoding options&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Configuration options and a complete list of settings can be found in &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Configuration"&gt;the wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Available modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;streams&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;api&lt;/a&gt; - HTTP API (important for WebRTC support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;rtsp&lt;/a&gt; - RTSP Server (important for FFmpeg support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;webrtc&lt;/a&gt; - WebRTC Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;mp4&lt;/a&gt; - MSE, MP4 stream and MP4 snapshot Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls"&gt;hls&lt;/a&gt; - HLS TS or fMP4 stream Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg"&gt;mjpeg&lt;/a&gt; - MJPEG Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg&lt;/a&gt; - FFmpeg integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;ngrok&lt;/a&gt; - ngrok integration (external access for private network)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass"&gt;hass&lt;/a&gt; - Home Assistant integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-log"&gt;log&lt;/a&gt; - logs config&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Module: Streams&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; supports different stream source types. You can config one or multiple links of any type as a stream source.&lt;/p&gt; 
&lt;p&gt;Available source types:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;rtsp&lt;/a&gt; - &lt;code&gt;RTSP&lt;/code&gt; and &lt;code&gt;RTSPS&lt;/code&gt; cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;two-way audio&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp"&gt;rtmp&lt;/a&gt; - &lt;code&gt;RTMP&lt;/code&gt; streams&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;http&lt;/a&gt; - &lt;code&gt;HTTP-FLV&lt;/code&gt;, &lt;code&gt;MPEG-TS&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt; (snapshots), &lt;code&gt;MJPEG&lt;/code&gt; streams&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-onvif"&gt;onvif&lt;/a&gt; - get camera &lt;code&gt;RTSP&lt;/code&gt; link and snapshot link using &lt;code&gt;ONVIF&lt;/code&gt; protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg&lt;/a&gt; - FFmpeg integration (&lt;code&gt;HLS&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt; and many others)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device"&gt;ffmpeg:device&lt;/a&gt; - local USB Camera or Webcam&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec"&gt;exec&lt;/a&gt; - get media from external app output&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo"&gt;echo&lt;/a&gt; - get stream link from bash or python&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-expr"&gt;expr&lt;/a&gt; - get stream link via built-in expression language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit"&gt;homekit&lt;/a&gt; - streaming from HomeKit Camera&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-bubble"&gt;bubble&lt;/a&gt; - streaming from ESeeCloud/dvr163 NVR&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip"&gt;dvrip&lt;/a&gt; - streaming from DVR-IP NVR&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;tapo&lt;/a&gt; - TP-Link Tapo cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;two way audio&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ring"&gt;ring&lt;/a&gt; - Ring cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;two way audio&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;kasa&lt;/a&gt; - TP-Link Kasa cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-gopro"&gt;gopro&lt;/a&gt; - GoPro cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ivideon"&gt;ivideon&lt;/a&gt; - public cameras from &lt;a href="https://tv.ivideon.com/"&gt;Ivideon&lt;/a&gt; service&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass"&gt;hass&lt;/a&gt; - Home Assistant integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi"&gt;isapi&lt;/a&gt; - two-way audio for Hikvision (ISAPI) cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock"&gt;roborock&lt;/a&gt; - Roborock vacuums with cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webrtc"&gt;webrtc&lt;/a&gt; - WebRTC/WHEP sources&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent"&gt;webtorrent&lt;/a&gt; - WebTorrent source from another go2rtc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources"&gt;incoming sources&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Two-way audio&lt;/h4&gt; 
&lt;p&gt;Supported sources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;RTSP cameras&lt;/a&gt; with &lt;a href="https://www.onvif.org/specs/stream/ONVIF-Streaming-Spec.pdf"&gt;ONVIF Profile T&lt;/a&gt; (back channel connection)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip"&gt;DVRIP&lt;/a&gt; cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;TP-Link Tapo&lt;/a&gt; cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi"&gt;Hikvision ISAPI&lt;/a&gt; cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock"&gt;Roborock vacuums&lt;/a&gt; models with cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec"&gt;Exec&lt;/a&gt; audio on server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ring"&gt;Ring&lt;/a&gt; cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-browser"&gt;Any Browser&lt;/a&gt; as IP-camera&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Two-way audio can be used in browser with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC&lt;/a&gt; technology. The browser will give access to the microphone only for HTTPS sites (&lt;a href="https://stackoverflow.com/questions/52759992/how-to-access-camera-and-microphone-in-chrome-without-https"&gt;read more&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;go2rtc also supports &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera"&gt;play audio&lt;/a&gt; files and live streams on this cameras.&lt;/p&gt; 
&lt;h4&gt;Source: RTSP&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  sonoff_camera: rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0
  dahua_camera:
    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&amp;amp;unicast=true&amp;amp;proto=Onvif
    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=1#backchannel=0
  amcrest_doorbell:
    - rtsp://username:password@192.168.1.123:554/cam/realmonitor?channel=1&amp;amp;subtype=0#backchannel=0
  unifi_camera: rtspx://192.168.1.123:7441/fD6ouM72bWoFijxK
  glichy_camera: ffmpeg:rtsp://username:password@192.168.1.123/live/ch00_1 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Recommendations&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Amcrest Doorbell&lt;/strong&gt; users may want to disable two-way audio, because with an active stream, you won't have a working call button. You need to add &lt;code&gt;#backchannel=0&lt;/code&gt; to the end of your RTSP link in YAML config file&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dahua Doorbell&lt;/strong&gt; users may want to change &lt;a href="https://github.com/AlexxIT/go2rtc/issues/49#issuecomment-2127107379"&gt;audio codec&lt;/a&gt; for proper 2-way audio. Make sure not to request backchannel multiple times by adding &lt;code&gt;#backchannel=0&lt;/code&gt; to other stream sources of the same doorbell. The &lt;code&gt;unicast=true&amp;amp;proto=Onvif&lt;/code&gt; is preferred for 2-way audio as this makes the doorbell accept multiple codecs for the incoming audio&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reolink&lt;/strong&gt; users may want NOT to use RTSP protocol at all, some camera models have a very awful, unusable stream implementation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ubiquiti UniFi&lt;/strong&gt; users may want to disable HTTPS verification. Use &lt;code&gt;rtspx://&lt;/code&gt; prefix instead of &lt;code&gt;rtsps://&lt;/code&gt;. And don't use &lt;code&gt;?enableSrtp&lt;/code&gt; &lt;a href="https://github.com/AlexxIT/go2rtc/issues/81"&gt;suffix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TP-Link Tapo&lt;/strong&gt; users may skip login and password, because go2rtc support login &lt;a href="https://drmnsamoliu.github.io/video.html"&gt;without them&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;If your camera has two RTSP links, you can add both as sources. This is useful when streams have different codecs, for example AAC audio with main stream and PCMU/PCMA audio with second stream&lt;/li&gt; 
 &lt;li&gt;If the stream from your camera is glitchy, try using &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg source&lt;/a&gt;. It will not add CPU load if you don't use transcoding&lt;/li&gt; 
 &lt;li&gt;If the stream from your camera is very glitchy, try to use transcoding with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Other options&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Format: &lt;code&gt;rtsp...#{param1}#{param2}#{param3}&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add custom timeout &lt;code&gt;#timeout=30&lt;/code&gt; (in seconds)&lt;/li&gt; 
 &lt;li&gt;Ignore audio - &lt;code&gt;#media=video&lt;/code&gt; or ignore video - &lt;code&gt;#media=audio&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Ignore two-way audio API &lt;code&gt;#backchannel=0&lt;/code&gt; - important for some glitchy cameras&lt;/li&gt; 
 &lt;li&gt;Use WebSocket transport &lt;code&gt;#transport=ws...&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;RTSP over WebSocket&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # WebSocket with authorization, RTSP - without
  axis-rtsp-ws:  rtsp://192.168.1.123:4567/axis-media/media.amp?overview=0&amp;amp;camera=1&amp;amp;resolution=1280x720&amp;amp;videoframeskipmode=empty&amp;amp;Axis-Orig-Sw=true#transport=ws://user:pass@192.168.1.123:4567/rtsp-over-websocket
  # WebSocket without authorization, RTSP - with
  dahua-rtsp-ws: rtsp://user:pass@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=1&amp;amp;proto=Private3#transport=ws://192.168.1.123/rtspoverwebsocket
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: RTMP&lt;/h4&gt; 
&lt;p&gt;You can get a stream from an RTMP server, for example &lt;a href="https://github.com/arut/nginx-rtmp-module"&gt;Nginx with nginx-rtmp-module&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  rtmp_stream: rtmp://192.168.1.123/live/camera1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: HTTP&lt;/h4&gt; 
&lt;p&gt;Support Content-Type:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP-FLV&lt;/strong&gt; (&lt;code&gt;video/x-flv&lt;/code&gt;) - same as RTMP, but over HTTP&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP-JPEG&lt;/strong&gt; (&lt;code&gt;image/jpeg&lt;/code&gt;) - camera snapshot link, can be converted by go2rtc to MJPEG stream&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP-MJPEG&lt;/strong&gt; (&lt;code&gt;multipart/x&lt;/code&gt;) - simple MJPEG stream over HTTP&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MPEG-TS&lt;/strong&gt; (&lt;code&gt;video/mpeg&lt;/code&gt;) - legacy &lt;a href="https://en.wikipedia.org/wiki/MPEG_transport_stream"&gt;streaming format&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Source also supports HTTP and TCP streams with autodetection for different formats: &lt;strong&gt;MJPEG&lt;/strong&gt;, &lt;strong&gt;H.264/H.265 bitstream&lt;/strong&gt;, &lt;strong&gt;MPEG-TS&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # [HTTP-FLV] stream in video/x-flv format
  http_flv: http://192.168.1.123:20880/api/camera/stream/780900131155/657617
  
  # [JPEG] snapshots from Dahua camera, will be converted to MJPEG stream
  dahua_snap: http://admin:password@192.168.1.123/cgi-bin/snapshot.cgi?channel=1

  # [MJPEG] stream will be proxied without modification
  http_mjpeg: https://mjpeg.sanford.io/count.mjpeg

  # [MJPEG or H.264/H.265 bitstream or MPEG-TS]
  tcp_magic: tcp://192.168.1.123:12345

  # Add custom header
  custom_header: "https://mjpeg.sanford.io/count.mjpeg#header=Authorization: Bearer XXX"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Dahua camera has a bug: if you select MJPEG codec for RTSP second stream, snapshot won't work.&lt;/p&gt; 
&lt;h4&gt;Source: ONVIF&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0"&gt;New in v1.5.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;The source is not very useful if you already know RTSP and snapshot links for your camera. But it can be useful if you don't.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WebUI &amp;gt; Add&lt;/strong&gt; webpage support ONVIF autodiscovery. Your server must be on the same subnet as the camera. If you use Docker, you must use "network host".&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  dahua1: onvif://admin:password@192.168.1.123
  reolink1: onvif://admin:password@192.168.1.123:8000
  tapo1: onvif://admin:password@192.168.1.123:2020
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: FFmpeg&lt;/h4&gt; 
&lt;p&gt;You can get any stream, file or device via FFmpeg and push it to go2rtc. The app will automatically start FFmpeg with the proper arguments when someone starts watching the stream.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;FFmpeg preistalled for &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hass Add-on&lt;/strong&gt; users can target files from &lt;a href="https://www.home-assistant.io/more-info/local-media/setup-media/"&gt;/media&lt;/a&gt; folder&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Format: &lt;code&gt;ffmpeg:{input}#{param1}#{param2}#{param3}&lt;/code&gt;. Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # [FILE] all tracks will be copied without transcoding codecs
  file1: ffmpeg:/media/BigBuckBunny.mp4

  # [FILE] video will be transcoded to H264, audio will be skipped
  file2: ffmpeg:/media/BigBuckBunny.mp4#video=h264

  # [FILE] video will be copied, audio will be transcoded to PCMU
  file3: ffmpeg:/media/BigBuckBunny.mp4#video=copy#audio=pcmu

  # [HLS] video will be copied, audio will be skipped
  hls: ffmpeg:https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear5/prog_index.m3u8#video=copy

  # [MJPEG] video will be transcoded to H264
  mjpeg: ffmpeg:http://185.97.122.128/cgi-bin/faststream.jpg#video=h264

  # [RTSP] video with rotation, should be transcoded, so select H264
  rotate: ffmpeg:rtsp://12345678@192.168.1.123/av_stream/ch0#video=h264#rotate=90
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All transcoding formats have &lt;a href="https://github.com/AlexxIT/go2rtc/raw/master/internal/ffmpeg/ffmpeg.go"&gt;built-in templates&lt;/a&gt;: &lt;code&gt;h264&lt;/code&gt;, &lt;code&gt;h265&lt;/code&gt;, &lt;code&gt;opus&lt;/code&gt;, &lt;code&gt;pcmu&lt;/code&gt;, &lt;code&gt;pcmu/16000&lt;/code&gt;, &lt;code&gt;pcmu/48000&lt;/code&gt;, &lt;code&gt;pcma&lt;/code&gt;, &lt;code&gt;pcma/16000&lt;/code&gt;, &lt;code&gt;pcma/48000&lt;/code&gt;, &lt;code&gt;aac&lt;/code&gt;, &lt;code&gt;aac/16000&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;But you can override them via YAML config. You can also add your own formats to the config and use them with source params.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg:
  bin: ffmpeg  # path to ffmpeg binary
  h264: "-codec:v libx264 -g:v 30 -preset:v superfast -tune:v zerolatency -profile:v main -level:v 4.1"
  mycodec: "-any args that supported by ffmpeg..."
  myinput: "-fflags nobuffer -flags low_delay -timeout 5000000 -i {input}"
  myraw: "-ss 00:00:20"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can use go2rtc stream name as ffmpeg input (ex. &lt;code&gt;ffmpeg:camera1#video=h264&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;video&lt;/code&gt; and &lt;code&gt;audio&lt;/code&gt; params multiple times (ex. &lt;code&gt;#video=copy#audio=copy#audio=pcmu&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt;, &lt;code&gt;270&lt;/code&gt; or &lt;code&gt;-90&lt;/code&gt; values, important with transcoding (ex. &lt;code&gt;#video=h264#rotate=90&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;width&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt; params, important with transcoding (ex. &lt;code&gt;#video=h264#width=1280&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;drawtext&lt;/code&gt; to add a timestamp (ex. &lt;code&gt;drawtext=x=2:y=2:fontsize=12:fontcolor=white:box=1:boxcolor=black&lt;/code&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;This will greatly increase the CPU of the server, even with hardware acceleration&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;raw&lt;/code&gt; param for any additional FFmpeg arguments (ex. &lt;code&gt;#raw=-vf transpose=1&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;input&lt;/code&gt; param to override default input template (ex. &lt;code&gt;#input=rtsp/udp&lt;/code&gt; will change RTSP transport from TCP to UDP+TCP) 
  &lt;ul&gt; 
   &lt;li&gt;You can use raw input value (ex. &lt;code&gt;#input=-timeout 5000000 -i {input}&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;You can add your own input templates&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration"&gt;hardware acceleration&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; It is recommended to check the available hardware in the WebUI add page.&lt;/p&gt; 
&lt;h4&gt;Source: FFmpeg Device&lt;/h4&gt; 
&lt;p&gt;You can get video from any USB camera or Webcam as RTSP or WebRTC stream. This is part of FFmpeg integration.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;check available devices in web interface&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;video_size&lt;/code&gt; and &lt;code&gt;framerate&lt;/code&gt; must be supported by your camera!&lt;/li&gt; 
 &lt;li&gt;for Linux supported only video for now&lt;/li&gt; 
 &lt;li&gt;for macOS you can stream FaceTime camera or whole desktop!&lt;/li&gt; 
 &lt;li&gt;for macOS important to set right framerate&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Format: &lt;code&gt;ffmpeg:device?{input-params}#{param1}#{param2}#{param3}&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  linux_usbcam:   ffmpeg:device?video=0&amp;amp;video_size=1280x720#video=h264
  windows_webcam: ffmpeg:device?video=0#video=h264
  macos_facetime: ffmpeg:device?video=0&amp;amp;audio=1&amp;amp;video_size=1280x720&amp;amp;framerate=30#video=h264#audio=pcma
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; It is recommended to check the available devices in the WebUI add page.&lt;/p&gt; 
&lt;h4&gt;Source: Exec&lt;/h4&gt; 
&lt;p&gt;Exec source can run any external application and expect data from it. Two transports are supported - &lt;strong&gt;pipe&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0"&gt;v1.5.0&lt;/a&gt;&lt;/em&gt;) and &lt;strong&gt;RTSP&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to use &lt;strong&gt;RTSP&lt;/strong&gt; transport, the command must contain the &lt;code&gt;{output}&lt;/code&gt; argument in any place. On launch, it will be replaced by the local address of the RTSP server.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;pipe&lt;/strong&gt; reads data from app stdout in different formats: &lt;strong&gt;MJPEG&lt;/strong&gt;, &lt;strong&gt;H.264/H.265 bitstream&lt;/strong&gt;, &lt;strong&gt;MPEG-TS&lt;/strong&gt;. Also pipe can write data to app stdin in two formats: &lt;strong&gt;PCMA&lt;/strong&gt; and &lt;strong&gt;PCM/48000&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The source can be used with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://ffmpeg.org/"&gt;FFmpeg&lt;/a&gt; - go2rtc ffmpeg source just a shortcut to exec source&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ffmpeg.org/ffplay.html"&gt;FFplay&lt;/a&gt; - play audio on your server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gstreamer.freedesktop.org/"&gt;GStreamer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.raspberrypi.com/documentation/computers/camera_software.html"&gt;Raspberry Pi Cameras&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;any of your own software&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Pipe commands support parameters (format: &lt;code&gt;exec:{command}#{param1}#{param2}&lt;/code&gt;):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;killsignal&lt;/code&gt; - signal which will be sent to stop the process (numeric form)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;killtimeout&lt;/code&gt; - time in seconds for forced termination with sigkill&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;backchannel&lt;/code&gt; - enable backchannel for two-way audio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  stream: exec:ffmpeg -re -i /media/BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp {output}
  picam_h264: exec:libcamera-vid -t 0 --inline -o -
  picam_mjpeg: exec:libcamera-vid -t 0 --codec mjpeg -o -
  pi5cam_h264: exec:libcamera-vid -t 0 --libav-format h264 -o -
  canon: exec:gphoto2 --capture-movie --stdout#killsignal=2#killtimeout=5
  play_pcma: exec:ffplay -fflags nobuffer -f alaw -ar 8000 -i -#backchannel=1
  play_pcm48k: exec:ffplay -fflags nobuffer -f s16be -ar 48000 -i -#backchannel=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Echo&lt;/h4&gt; 
&lt;p&gt;Some sources may have a dynamic link. And you will need to get it using a Bash or Python script. Your script should echo a link to the source. RTSP, FFmpeg or any of the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;supported sources&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users has preinstalled &lt;code&gt;python3&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Check examples in &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Source-Echo-examples"&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  apple_hls: echo:python3 hls.py https://developer.apple.com/streaming/examples/basic-stream-osx-ios5.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Expr&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.2"&gt;New in v1.8.2&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Like &lt;code&gt;echo&lt;/code&gt; source, but uses the built-in &lt;a href="https://github.com/antonmedv/expr"&gt;expr&lt;/a&gt; expression language (&lt;a href="https://github.com/AlexxIT/go2rtc/raw/master/internal/expr/README.md"&gt;read more&lt;/a&gt;).&lt;/p&gt; 
&lt;h4&gt;Source: HomeKit&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can use HomeKit Cameras &lt;strong&gt;without Apple devices&lt;/strong&gt; (iPhone, iPad, etc.), it's just a yet another protocol&lt;/li&gt; 
 &lt;li&gt;HomeKit device can be paired with only one ecosystem. So, if you have paired it to an iPhone (Apple Home), you can't pair it with Home Assistant or go2rtc. Or if you have paired it to go2rtc, you can't pair it with an iPhone&lt;/li&gt; 
 &lt;li&gt;HomeKit device should be on the same network with working &lt;a href="https://en.wikipedia.org/wiki/Multicast_DNS"&gt;mDNS&lt;/a&gt; between the device and go2rtc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;go2rtc supports importing paired HomeKit devices from &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass"&gt;Home Assistant&lt;/a&gt;. So you can use HomeKit camera with Hass and go2rtc simultaneously. If you are using Hass, I recommend pairing devices with it; it will give you more options.&lt;/p&gt; 
&lt;p&gt;You can pair device with go2rtc on the HomeKit page. If you can't see your devices, reload the page. Also, try rebooting your HomeKit device (power off). If you still can't see it, you have a problem with mDNS.&lt;/p&gt; 
&lt;p&gt;If you see a device but it does not have a pairing button, it is paired to some ecosystem (Apple Home, Home Assistant, HomeBridge etc). You need to delete the device from that ecosystem, and it will be available for pairing. If you cannot unpair the device, you will have to reset it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HomeKit audio uses very non-standard &lt;strong&gt;AAC-ELD&lt;/strong&gt; codec with very non-standard params and specification violations&lt;/li&gt; 
 &lt;li&gt;Audio can't be played in &lt;code&gt;VLC&lt;/code&gt; and probably any other player&lt;/li&gt; 
 &lt;li&gt;Audio should be transcoded for use with MSE, WebRTC, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Recommended settings for using HomeKit Camera with WebRTC, MSE, MP4, RTSP:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;streams:
  aqara_g3:
    - hass:Camera-Hub-G3-AB12
    - ffmpeg:aqara_g3#audio=aac#audio=opus
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;RTSP link with "normal" audio for any player: &lt;code&gt;rtsp://192.168.1.123:8554/aqara_g3?video&amp;amp;audio=aac&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This source is in active development!&lt;/strong&gt; Tested only with &lt;a href="https://www.aqara.com/eu/product/camera-hub-g3"&gt;Aqara Camera Hub G3&lt;/a&gt; (both EU and CN versions).&lt;/p&gt; 
&lt;h4&gt;Source: Bubble&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1"&gt;New in v1.6.1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Other names: &lt;a href="http://www.eseecloud.com/"&gt;ESeeCloud&lt;/a&gt;, &lt;a href="http://help.dvr163.com/"&gt;dvr163&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can skip &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;ch&lt;/code&gt; and &lt;code&gt;stream&lt;/code&gt; if they are default&lt;/li&gt; 
 &lt;li&gt;set up separate streams for different channels and streams&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  camera1: bubble://username:password@192.168.1.123:34567/bubble/live?ch=0&amp;amp;stream=0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: DVRIP&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0"&gt;New in v1.2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Other names: DVR-IP, NetSurveillance, Sofia protocol (NETsurveillance ActiveX plugin XMeye SDK).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can skip &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;channel&lt;/code&gt; and &lt;code&gt;subtype&lt;/code&gt; if they are default&lt;/li&gt; 
 &lt;li&gt;set up separate streams for different channels&lt;/li&gt; 
 &lt;li&gt;use &lt;code&gt;subtype=0&lt;/code&gt; for Main stream, and &lt;code&gt;subtype=1&lt;/code&gt; for Extra1 stream&lt;/li&gt; 
 &lt;li&gt;only the TCP protocol is supported&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  only_stream: dvrip://username:password@192.168.1.123:34567?channel=0&amp;amp;subtype=0
  only_tts: dvrip://username:password@192.168.1.123:34567?backchannel=1
  two_way_audio:
    - dvrip://username:password@192.168.1.123:34567?channel=0&amp;amp;subtype=0
    - dvrip://username:password@192.168.1.123:34567?backchannel=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Tapo&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0"&gt;New in v1.2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.tapo.com/"&gt;TP-Link Tapo&lt;/a&gt; proprietary camera protocol with &lt;strong&gt;two way audio&lt;/strong&gt; support.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;stream quality is the same as &lt;a href="https://www.tapo.com/en/faq/34/"&gt;RTSP protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;use the &lt;strong&gt;cloud password&lt;/strong&gt;, this is not the RTSP password! you do not need to add a login!&lt;/li&gt; 
 &lt;li&gt;you can also use &lt;strong&gt;UPPERCASE&lt;/strong&gt; MD5 hash from your cloud password with &lt;code&gt;admin&lt;/code&gt; username&lt;/li&gt; 
 &lt;li&gt;some new camera firmwares require SHA256 instead of MD5&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # cloud password without username
  camera1: tapo://cloud-password@192.168.1.123
  # admin username and UPPERCASE MD5 cloud-password hash
  camera2: tapo://admin:UPPERCASE-MD5@192.168.1.123
  # admin username and UPPERCASE SHA256 cloud-password hash
  camera3: tapo://admin:UPPERCASE-SHA256@192.168.1.123
  # VGA stream (the so called substream, the lower resolution one)
  camera4: tapo://cloud-password@192.168.1.123?subtype=1 
  # HD stream (default)
  camera5: tapo://cloud-password@192.168.1.123?subtype=0 
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;echo -n "cloud password" | md5 | awk '{print toupper($0)}'
echo -n "cloud password" | shasum -a 256 | awk '{print toupper($0)}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Kasa&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0"&gt;New in v1.7.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.kasasmart.com/"&gt;TP-Link Kasa&lt;/a&gt; non-standard protocol &lt;a href="https://medium.com/@hu3vjeen/reverse-engineering-tp-link-kc100-bac4641bf1cd"&gt;more info&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;username&lt;/code&gt; - urlsafe email, &lt;code&gt;alex@gmail.com&lt;/code&gt; -&amp;gt; &lt;code&gt;alex%40gmail.com&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;password&lt;/code&gt; - base64password, &lt;code&gt;secret1&lt;/code&gt; -&amp;gt; &lt;code&gt;c2VjcmV0MQ==&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  kc401: kasa://username:password@192.168.1.123:19443/https/stream/mixed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Tested: KD110, KC200, KC401, KC420WS, EC71.&lt;/p&gt; 
&lt;h4&gt;Source: GoPro&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.3"&gt;New in v1.8.3&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Support streaming from &lt;a href="https://gopro.com/"&gt;GoPro&lt;/a&gt; cameras, connected via USB or Wi-Fi to Linux, Mac, Windows. &lt;a href="https://github.com/AlexxIT/go2rtc/tree/master/internal/gopro"&gt;Read more&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Source: Ivideon&lt;/h4&gt; 
&lt;p&gt;Support public cameras from the service &lt;a href="https://tv.ivideon.com/"&gt;Ivideon&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  quailcam: ivideon:100-tu5dkUPct39cTp9oNEN2B6/0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Hass&lt;/h4&gt; 
&lt;p&gt;Support import camera links from &lt;a href="https://www.home-assistant.io/"&gt;Home Assistant&lt;/a&gt; config files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.home-assistant.io/integrations/generic/"&gt;Generic Camera&lt;/a&gt;, setup via GUI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.home-assistant.io/integrations/homekit_controller/"&gt;HomeKit Camera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.home-assistant.io/integrations/onvif/"&gt;ONVIF&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/humbertogontijo/homeassistant-roborock"&gt;Roborock&lt;/a&gt; vacuums with camera&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;hass:
  config: "/config"  # skip this setting if you Hass add-on user

streams:
  generic_camera: hass:Camera1  # Settings &amp;gt; Integrations &amp;gt; Integration Name
  aqara_g3: hass:Camera-Hub-G3-AB12
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;WebRTC Cameras&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0"&gt;v1.6.0&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;Any cameras in WebRTC format are supported. But at the moment Home Assistant only supports some &lt;a href="https://www.home-assistant.io/integrations/nest/"&gt;Nest&lt;/a&gt; cameras in this format.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important.&lt;/strong&gt; The Nest API only allows you to get a link to a stream for 5 minutes. Do not use this with Frigate! If the stream expires, Frigate will consume all available RAM on your machine within seconds. It's recommended to use &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-nest"&gt;Nest source&lt;/a&gt; - it supports extending the stream.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # link to Home Assistant Supervised
  hass-webrtc1: hass://supervisor?entity_id=camera.nest_doorbell
  # link to external Hass with Long-Lived Access Tokens
  hass-webrtc2: hass://192.168.1.123:8123?entity_id=camera.nest_doorbell&amp;amp;token=eyXYZ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;RTSP Cameras&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;By default, the Home Assistant API does not allow you to get a dynamic RTSP link to a camera stream. So more cameras, like &lt;a href="https://www.home-assistant.io/integrations/tuya/"&gt;Tuya&lt;/a&gt;, and possibly others, can also be imported using &lt;a href="https://github.com/felipecrs/hass-expose-camera-stream-source#importing-home-assistant-cameras-to-go2rtc-andor-frigate"&gt;this method&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Source: ISAPI&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This source type supports only backchannel audio for the Hikvision ISAPI protocol. So it should be used as a second source in addition to the RTSP protocol.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  hikvision1:
    - rtsp://admin:password@192.168.1.123:554/Streaming/Channels/101
    - isapi://admin:password@192.168.1.123:80/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Nest&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0"&gt;New in v1.6.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Currently, only WebRTC cameras are supported.&lt;/p&gt; 
&lt;p&gt;For simplicity, it is recommended to connect the Nest/WebRTC camera to the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass"&gt;Home Assistant&lt;/a&gt;. But if you can somehow get the below parameters, Nest/WebRTC source will work without Hass.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  nest-doorbell: nest:?client_id=***&amp;amp;client_secret=***&amp;amp;refresh_token=***&amp;amp;project_id=***&amp;amp;device_id=***
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Ring&lt;/h4&gt; 
&lt;p&gt;This source type support Ring cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;two way audio&lt;/a&gt; support. If you have a &lt;code&gt;refresh_token&lt;/code&gt; and &lt;code&gt;device_id&lt;/code&gt; - you can use it in &lt;code&gt;go2rtc.yaml&lt;/code&gt; config file. Otherwise, you can use the go2rtc interface and add your ring account (WebUI &amp;gt; Add &amp;gt; Ring). Once added, it will list all your Ring cameras.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  ring: ring:?device_id=XXX&amp;amp;refresh_token=XXX
  ring_snapshot: ring:?device_id=XXX&amp;amp;refresh_token=XXX&amp;amp;snapshot
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Roborock&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This source type supports Roborock vacuums with cameras. Known working models:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Roborock S6 MaxV - only video (the vacuum has no microphone)&lt;/li&gt; 
 &lt;li&gt;Roborock S7 MaxV - video and two-way audio&lt;/li&gt; 
 &lt;li&gt;Roborock Qrevo MaxV - video and two-way audio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Source supports loading Roborock credentials from Home Assistant &lt;a href="https://github.com/humbertogontijo/homeassistant-roborock"&gt;custom integration&lt;/a&gt; or the &lt;a href="https://www.home-assistant.io/integrations/roborock"&gt;core integration&lt;/a&gt;. Otherwise, you need to log in to your Roborock account (MiHome account is not supported). Go to: go2rtc WebUI &amp;gt; Add webpage. Copy &lt;code&gt;roborock://...&lt;/code&gt; source for your vacuum and paste it to &lt;code&gt;go2rtc.yaml&lt;/code&gt; config.&lt;/p&gt; 
&lt;p&gt;If you have a graphic PIN for your vacuum, add it as a numeric PIN (lines: 123, 456, 789) to the end of the &lt;code&gt;roborock&lt;/code&gt; link.&lt;/p&gt; 
&lt;h4&gt;Source: WebRTC&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This source type supports four connection formats.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;whep&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://datatracker.ietf.org/doc/draft-murillo-whep/"&gt;WebRTC/WHEP&lt;/a&gt; is replaced by &lt;a href="https://datatracker.ietf.org/doc/charter-ietf-wish/02/"&gt;WebRTC/WISH&lt;/a&gt; standard for WebRTC video/audio viewers. But it may already be supported in some third-party software. It is supported in go2rtc.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This format is only supported in go2rtc. Unlike WHEP, it supports asynchronous WebRTC connections and two-way audio.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;openipc&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0"&gt;v1.7.0&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;Support connection to &lt;a href="https://openipc.org/"&gt;OpenIPC&lt;/a&gt; cameras.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;wyze&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1"&gt;v1.6.1&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;Supports connection to &lt;a href="https://www.wyze.com/"&gt;Wyze&lt;/a&gt; cameras, using WebRTC protocol. You can use the &lt;a href="https://github.com/mrlt8/docker-wyze-bridge"&gt;docker-wyze-bridge&lt;/a&gt; project to get connection credentials.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;kinesis&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1"&gt;v1.6.1&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;Supports &lt;a href="https://aws.amazon.com/kinesis/video-streams/"&gt;Amazon Kinesis Video Streams&lt;/a&gt;, using WebRTC protocol. You need to specify the signalling WebSocket URL with all credentials in query params, &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;ice_servers&lt;/code&gt; list in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer"&gt;JSON format&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;switchbot&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Support connection to &lt;a href="https://us.switch-bot.com/"&gt;SwitchBot&lt;/a&gt; cameras that are based on Kinesis Video Streams. Specifically, this includes &lt;a href="https://us.switch-bot.com/pages/switchbot-pan-tilt-cam-plus-2k"&gt;Pan/Tilt Cam Plus 2K&lt;/a&gt; and &lt;a href="https://us.switch-bot.com/pages/switchbot-pan-tilt-cam-plus-3k"&gt;Pan/Tilt Cam Plus 3K&lt;/a&gt; and &lt;a href="https://www.switchbot.jp/products/switchbot-smart-video-doorbell"&gt;Smart Video Doorbell&lt;/a&gt;. &lt;code&gt;Outdoor Spotlight Cam 1080P&lt;/code&gt;, &lt;code&gt;Outdoor Spotlight Cam 2K&lt;/code&gt;, &lt;code&gt;Pan/Tilt Cam&lt;/code&gt;, &lt;code&gt;Pan/Tilt Cam 2K&lt;/code&gt;, &lt;code&gt;Indoor Cam&lt;/code&gt; are based on Tuya, so this feature is not available.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  webrtc-whep:      webrtc:http://192.168.1.123:1984/api/webrtc?src=camera1
  webrtc-go2rtc:    webrtc:ws://192.168.1.123:1984/api/ws?src=camera1
  webrtc-openipc:   webrtc:ws://192.168.1.123/webrtc_ws#format=openipc#ice_servers=[{"urls":"stun:stun.kinesisvideo.eu-north-1.amazonaws.com:443"}]
  webrtc-wyze:      webrtc:http://192.168.1.123:5000/signaling/camera1?kvs#format=wyze
  webrtc-kinesis:   webrtc:wss://...amazonaws.com/?...#format=kinesis#client_id=...#ice_servers=[{...},{...}]
  webrtc-switchbot: webrtc:wss://...amazonaws.com/?...#format=switchbot#resolution=hd#play_type=0#client_id=...#ice_servers=[{...},{...}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; For &lt;code&gt;kinesis&lt;/code&gt; sources, you can use &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo"&gt;echo&lt;/a&gt; to get connection params using &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt; or any other script language.&lt;/p&gt; 
&lt;h4&gt;Source: WebTorrent&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This source can get a stream from another go2rtc via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent"&gt;WebTorrent&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  webtorrent1: webtorrent:?share=huofssuxaty00izc&amp;amp;pwd=k3l2j9djeg8v8r7e
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Incoming sources&lt;/h4&gt; 
&lt;p&gt;By default, go2rtc establishes a connection to the source when any client requests it. Go2rtc drops the connection to the source when it has no clients left.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go2rtc also can accepts incoming sources in &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;RTSP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp"&gt;RTMP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;HTTP&lt;/a&gt; and &lt;strong&gt;WebRTC/WHIP&lt;/strong&gt; formats&lt;/li&gt; 
 &lt;li&gt;Go2rtc won't stop such a source if it has no clients&lt;/li&gt; 
 &lt;li&gt;You can push data only to an existing stream (create a stream with empty source in config)&lt;/li&gt; 
 &lt;li&gt;You can push multiple incoming sources to the same stream&lt;/li&gt; 
 &lt;li&gt;You can push data to a non-empty stream, so it will have additional codecs inside&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RTSP with any codec &lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp rtsp://localhost:8554/camera1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP-MJPEG with MJPEG codec &lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg -re -i BigBuckBunny.mp4 -c mjpeg -f mpjpeg http://localhost:1984/api/stream.mjpeg?dst=camera1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP-FLV with H264, AAC codecs &lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -f flv http://localhost:1984/api/stream.flv?dst=camera1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;MPEG-TS with H264 codec &lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -f mpegts http://localhost:1984/api/stream.ts?dst=camera1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Incoming: Browser&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can turn the browser of any PC or mobile into an IP camera with support for video and two-way audio. Or even broadcast your PC screen:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create empty stream in the &lt;code&gt;go2rtc.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Go to go2rtc WebUI&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;links&lt;/code&gt; page for your stream&lt;/li&gt; 
 &lt;li&gt;Select &lt;code&gt;camera+microphone&lt;/code&gt; or &lt;code&gt;display+speaker&lt;/code&gt; option&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;webrtc&lt;/code&gt; local page (your go2rtc &lt;strong&gt;should work over HTTPS!&lt;/strong&gt;) or &lt;code&gt;share link&lt;/code&gt; via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent"&gt;WebTorrent&lt;/a&gt; technology (work over HTTPS by default)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Incoming: WebRTC/WHIP&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can use &lt;strong&gt;OBS Studio&lt;/strong&gt; or any other broadcast software with &lt;a href="https://www.ietf.org/archive/id/draft-ietf-wish-whip-01.html"&gt;WHIP&lt;/a&gt; protocol support. This standard has not yet been approved. But you can download OBS Studio &lt;a href="https://github.com/obsproject/obs-studio/actions/runs/3969201209"&gt;dev version&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Settings &amp;gt; Stream &amp;gt; Service: WHIP &amp;gt; &lt;a href="http://192.168.1.123:1984/api/webrtc?dst=camera1"&gt;http://192.168.1.123:1984/api/webrtc?dst=camera1&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Stream to camera&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;go2rtc supports playing audio files (ex. music or &lt;a href="https://www.home-assistant.io/integrations/#text-to-speech"&gt;TTS&lt;/a&gt;) and live streams (ex. radio) on cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;two-way audio&lt;/a&gt; support (RTSP/ONVIF cameras, TP-Link Tapo, Hikvision ISAPI, Roborock vacuums, any Browser).&lt;/p&gt; 
&lt;p&gt;API example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;POST http://localhost:1984/api/streams?dst=camera1&amp;amp;src=ffmpeg:http://example.com/song.mp3#audio=pcma#input=file
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can stream: local files, web files, live streams or any format, supported by FFmpeg&lt;/li&gt; 
 &lt;li&gt;you should use &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg source&lt;/a&gt; for transcoding audio to codec, that your camera supports&lt;/li&gt; 
 &lt;li&gt;you can check camera codecs on the go2rtc WebUI info page when the stream is active&lt;/li&gt; 
 &lt;li&gt;some cameras support only low quality &lt;code&gt;PCMA/8000&lt;/code&gt; codec (ex. &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;Tapo&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;it is recommended to choose higher quality formats if your camera supports them (ex. &lt;code&gt;PCMA/48000&lt;/code&gt; for some Dahua cameras)&lt;/li&gt; 
 &lt;li&gt;if you play files over &lt;code&gt;http&lt;/code&gt; link, you need to add &lt;code&gt;#input=file&lt;/code&gt; params for transcoding, so the file will be transcoded and played in real time&lt;/li&gt; 
 &lt;li&gt;if you play live streams, you should skip &lt;code&gt;#input&lt;/code&gt; param, because it is already in real time&lt;/li&gt; 
 &lt;li&gt;you can stop active playback by calling the API with the empty &lt;code&gt;src&lt;/code&gt; parameter&lt;/li&gt; 
 &lt;li&gt;you will see one active producer and one active consumer in go2rtc WebUI info page during streaming&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Publish stream&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0"&gt;New in v1.8.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can publish any stream to streaming services (YouTube, Telegram, etc.) via RTMP/RTMPS. Important:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported codecs: H264 for video and AAC for audio&lt;/li&gt; 
 &lt;li&gt;AAC audio is required for YouTube; videos without audio will not work&lt;/li&gt; 
 &lt;li&gt;You don't need to enable &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp"&gt;RTMP module&lt;/a&gt; listening for this task&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use the API:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;POST http://localhost:1984/api/streams?src=camera1&amp;amp;dst=rtmps://...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or config file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;publish:
  # publish stream "video_audio_transcode" to Telegram
  video_audio_transcode:
    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx
  # publish stream "audio_transcode" to Telegram and YouTube
  audio_transcode:
    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx
    - rtmp://xxx.rtmp.youtube.com/live2/xxxx-xxxx-xxxx-xxxx-xxxx

streams:
  video_audio_transcode:
    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=h264#hardware#audio=aac
  audio_transcode:
    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=copy#audio=aac
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Telegram Desktop App&lt;/strong&gt; &amp;gt; Any public or private channel or group (where you admin) &amp;gt; Live stream &amp;gt; Start with... &amp;gt; Start streaming.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt; &amp;gt; Create &amp;gt; Go live &amp;gt; Stream latency: Ultra low-latency &amp;gt; Copy: Stream URL + Stream key.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Preload stream&lt;/h3&gt; 
&lt;p&gt;You can preload any stream on go2rtc start. This is useful for cameras that take a long time to start up.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;preload:
  camera1:                                     # default: video&amp;amp;audio = ANY
  camera2: "video"                             # preload only video track
  camera3: "video=h264&amp;amp;audio=opus"             # preload H264 video and OPUS audio

streams:
  camera1: 
    - rtsp://192.168.1.100/stream
  camera2: 
    - rtsp://192.168.1.101/stream  
  camera3: 
    - rtsp://192.168.1.102/h265stream
    - ffmpeg:camera3#video=h264#audio=opus#hardware
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Module: API&lt;/h3&gt; 
&lt;p&gt;The HTTP API is the main part for interacting with the application. Default address: &lt;code&gt;http://localhost:1984/&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; go2rtc passes requests from localhost and from Unix sockets without HTTP authorisation, even if you have it configured! It is your responsibility to set up secure external access to the API. If not properly configured, an attacker can gain access to your cameras and even your server.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/tree/master/api"&gt;API description&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Module config&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can disable HTTP API with &lt;code&gt;listen: ""&lt;/code&gt; and use, for example, only RTSP client/server protocol&lt;/li&gt; 
 &lt;li&gt;you can enable HTTP API only on localhost with &lt;code&gt;listen: "127.0.0.1:1984"&lt;/code&gt; setting&lt;/li&gt; 
 &lt;li&gt;you can change the API &lt;code&gt;base_path&lt;/code&gt; and host go2rtc on your main app webserver suburl&lt;/li&gt; 
 &lt;li&gt;all files from &lt;code&gt;static_dir&lt;/code&gt; hosted on root path: &lt;code&gt;/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;you can use raw TLS cert/key content or path to files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;api:
  listen: ":1984"    # default ":1984", HTTP API port ("" - disabled)
  username: "admin"  # default "", Basic auth for WebUI
  password: "pass"   # default "", Basic auth for WebUI
  base_path: "/rtc"  # default "", API prefix for serving on suburl (/api =&amp;gt; /rtc/api)
  static_dir: "www"  # default "", folder for static files (custom web interface)
  origin: "*"        # default "", allow CORS requests (only * supported)
  tls_listen: ":443" # default "", enable HTTPS server
  tls_cert: |        # default "", PEM-encoded fullchain certificate for HTTPS
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
  tls_key: |         # default "", PEM-encoded private key for HTTPS
    -----BEGIN PRIVATE KEY-----
    ...
    -----END PRIVATE KEY-----
  unix_listen: "/tmp/go2rtc.sock"  # default "", unix socket listener for API
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MJPEG over WebSocket plays better than native MJPEG because Chrome &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=527446"&gt;bug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;MP4 over WebSocket was created only for Apple iOS because it doesn't support MSE and native MP4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Module: RTSP&lt;/h3&gt; 
&lt;p&gt;You can get any stream as RTSP-stream: &lt;code&gt;rtsp://192.168.1.123:8554/{stream_name}&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can enable external password protection for your RTSP streams. Password protection is always disabled for localhost calls (ex. FFmpeg or Hass on the same server).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;rtsp:
  listen: ":8554"    # RTSP Server TCP port, default - 8554
  username: "admin"  # optional, default - disabled
  password: "pass"   # optional, default - disabled
  default_query: "video&amp;amp;audio"  # optional, default codecs filters 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default go2rtc provide RTSP-stream with only one first video and only one first audio. You can change it with the &lt;code&gt;default_query&lt;/code&gt; setting:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;default_query: "mp4"&lt;/code&gt; - MP4 compatible codecs (H264, H265, AAC)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;default_query: "video=all&amp;amp;audio=all"&lt;/code&gt; - all tracks from all source (not all players can handle this)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;default_query: "video=h264,h265"&lt;/code&gt; - only one video track (H264 or H265)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;default_query: "video&amp;amp;audio=all"&lt;/code&gt; - only one first any video and all audio as separate tracks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters"&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Module: RTMP&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0"&gt;New in v1.8.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can get any stream as RTMP-stream: &lt;code&gt;rtmp://192.168.1.123/{stream_name}&lt;/code&gt;. Only H264/AAC codecs supported right now.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources"&gt;Incoming stream&lt;/a&gt; in RTMP format tested only with &lt;a href="https://obsproject.com/"&gt;OBS Studio&lt;/a&gt; and a Dahua camera. Different FFmpeg versions have different problems with this format.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;rtmp:
  listen: ":1935"  # by default - disabled!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Module: WebRTC&lt;/h3&gt; 
&lt;p&gt;In most cases, &lt;a href="https://en.wikipedia.org/wiki/WebRTC"&gt;WebRTC&lt;/a&gt; uses a direct peer-to-peer connection from your browser to go2rtc and sends media data via UDP. It &lt;strong&gt;can't pass&lt;/strong&gt; media data through your Nginx or Cloudflare or &lt;a href="https://www.nabucasa.com/"&gt;Nabu Casa&lt;/a&gt; HTTP TCP connection! It can automatically detect your external IP via a public &lt;a href="https://en.wikipedia.org/wiki/STUN"&gt;STUN&lt;/a&gt; server. It can establish an external direct connection via &lt;a href="https://en.wikipedia.org/wiki/UDP_hole_punching"&gt;UDP hole punching&lt;/a&gt; technology even if you do not open your server to the World.&lt;/p&gt; 
&lt;p&gt;But about 10-20% of users may need to configure additional settings for external access if &lt;strong&gt;mobile phone&lt;/strong&gt; or &lt;strong&gt;go2rtc server&lt;/strong&gt; is behind &lt;a href="https://tomchen.github.io/symmetric-nat-test/"&gt;Symmetric NAT&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;by default, WebRTC uses both TCP and UDP on port 8555 for connections&lt;/li&gt; 
 &lt;li&gt;you can use this port for external access&lt;/li&gt; 
 &lt;li&gt;you can change the port in YAML config:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webrtc:
  listen: ":8555"  # address of your local server and port (TCP/UDP)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Static public IP&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;forward the port 8555 on your router (you can use the same 8555 port or any other as external port)&lt;/li&gt; 
 &lt;li&gt;add your external IP address and external port to the YAML config&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webrtc:
  candidates:
    - 216.58.210.174:8555  # if you have a static public IP address
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Dynamic public IP&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;forward the port 8555 on your router (you can use the same 8555 port or any other as the external port)&lt;/li&gt; 
 &lt;li&gt;add &lt;code&gt;stun&lt;/code&gt; word and external port to YAML config 
  &lt;ul&gt; 
   &lt;li&gt;go2rtc automatically detects your external address with STUN server&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webrtc:
  candidates:
    - stun:8555  # if you have a dynamic public IP address
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Private IP&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;setup integration with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;ngrok service&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ngrok:
  command: ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Hard tech way 1. Own TCP-tunnel&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you have a personal &lt;a href="https://en.wikipedia.org/wiki/Virtual_private_server"&gt;VPS&lt;/a&gt;, you can create a TCP tunnel and setup in the same way as "Static public IP". But use your VPS IP address in the YAML config.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Hard tech way 2. Using TURN-server&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you have personal &lt;a href="https://en.wikipedia.org/wiki/Virtual_private_server"&gt;VPS&lt;/a&gt;, you can install TURN server (e.g. &lt;a href="https://github.com/coturn/coturn"&gt;coturn&lt;/a&gt;, config &lt;a href="https://github.com/AlexxIT/WebRTC/wiki/Coturn-Example"&gt;example&lt;/a&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webrtc:
  ice_servers:
    - urls: [stun:stun.l.google.com:19302]
    - urls: [turn:123.123.123.123:3478]
      username: your_user
      credential: your_pass
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Module: HomeKit&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0"&gt;New in v1.7.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;HomeKit module can work in two modes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;export any H264 camera to Apple HomeKit&lt;/li&gt; 
 &lt;li&gt;transparent proxy any Apple HomeKit camera (Aqara, Eve, Eufy, etc.) back to Apple HomeKit, so you will have all camera features in Apple Home and also will have RTSP/WebRTC/MP4/etc. from your HomeKit camera&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HomeKit cameras support only H264 video and OPUS audio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Minimal config&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  dahua1: rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0
homekit:
  dahua1:  # same stream ID from streams list, default PIN - 19550224
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Full config&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  dahua1:
    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0
    - ffmpeg:dahua1#video=h264#hardware  # if your camera doesn't support H264, important for HomeKit
    - ffmpeg:dahua1#audio=opus           # only OPUS audio supported by HomeKit

homekit:
  dahua1:                   # same stream ID from streams list
    pin: 12345678           # custom PIN, default: 19550224
    name: Dahua camera      # custom camera name, default: generated from stream ID
    device_id: dahua1       # custom ID, default: generated from stream ID
    device_private: dahua1  # custom key, default: generated from stream ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Proxy HomeKit camera&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Video stream from HomeKit camera to Apple device (iPhone, AppleTV) will be transmitted directly&lt;/li&gt; 
 &lt;li&gt;Video stream from HomeKit camera to RTSP/WebRTC/MP4/etc. will be transmitted via go2rtc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  aqara1:
    - homekit://...
    - ffmpeg:aqara1#audio=aac#audio=opus  # optional audio transcoding

homekit:
  aqara1:  # same stream ID from streams list
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Module: WebTorrent&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This module supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Share any local stream via &lt;a href="https://webtorrent.io/"&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; 
 &lt;li&gt;Get any &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-browser"&gt;incoming stream&lt;/a&gt; from PC or mobile via &lt;a href="https://webtorrent.io/"&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; 
 &lt;li&gt;Get any remote &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent"&gt;go2rtc source&lt;/a&gt; via &lt;a href="https://webtorrent.io/"&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Securely and freely. You do not need to open a public access to the go2rtc server. But in some cases (Symmetric NAT), you may need to set up external access to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC module&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To generate a sharing link or incoming link, go to the go2rtc WebUI (stream links page). This link is &lt;strong&gt;temporary&lt;/strong&gt; and will stop working after go2rtc is restarted!&lt;/p&gt; 
&lt;p&gt;You can create permanent external links in the go2rtc config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webtorrent:
  shares:
    super-secret-share:  # share name, should be unique among all go2rtc users!
      pwd: super-secret-password
      src: rtsp-dahua1   # stream name from streams section
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Link example: &lt;a href="https://alexxit.github.io/go2rtc/#share=02SNtgjKXY&amp;amp;pwd=wznEQqznxW&amp;amp;media=video+audio"&gt;https://alexxit.github.io/go2rtc/#share=02SNtgjKXY&amp;amp;pwd=wznEQqznxW&amp;amp;media=video+audio&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;TODO: article on how it works...&lt;/p&gt; 
&lt;h3&gt;Module: ngrok&lt;/h3&gt; 
&lt;p&gt;With ngrok integration, you can get external access to your streams in situations when you have Internet with a private IP address.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ngrok is pre-installed for &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass add-on&lt;/strong&gt; users&lt;/li&gt; 
 &lt;li&gt;you may need external access for two different things: 
  &lt;ul&gt; 
   &lt;li&gt;WebRTC stream, so you need a tunnel WebRTC TCP port (ex. 8555)&lt;/li&gt; 
   &lt;li&gt;go2rtc web interface, so you need a tunnel API HTTP port (ex. 1984)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ngrok supports authorization for your web interface&lt;/li&gt; 
 &lt;li&gt;ngrok automatically adds HTTPS to your web interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The ngrok free subscription has the following limitations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can reserve a free domain for serving the web interface, but the TCP address you get will always be random and change with each restart of the ngrok agent (not a problem for WebRTC stream)&lt;/li&gt; 
 &lt;li&gt;You can forward multiple ports from a single agent, but you can only run one ngrok agent on the free plan&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;go2rtc will automatically get your external TCP address (if you enable it in ngrok config) and use it with WebRTC connection (if you enable it in webrtc config).&lt;/p&gt; 
&lt;p&gt;You need to manually download the &lt;a href="https://ngrok.com/download"&gt;ngrok agent app&lt;/a&gt; for your OS and register with the &lt;a href="https://ngrok.com/signup"&gt;ngrok service&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tunnel for only WebRTC Stream&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You need to add your &lt;a href="https://dashboard.ngrok.com/get-started/your-authtoken"&gt;ngrok authtoken&lt;/a&gt; and WebRTC TCP port to YAML:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ngrok:
  command: ngrok tcp 8555 --authtoken eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Tunnel for WebRTC and Web interface&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You need to create &lt;code&gt;ngrok.yaml&lt;/code&gt; config file and add it to the go2rtc config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ngrok:
  command: ngrok start --all --config ngrok.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ngrok config example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: "2"
authtoken: eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw
tunnels:
  api:
    addr: 1984  # use the same port as in the go2rtc config
    proto: http
    basic_auth:
      - admin:password  # you can set login/pass for your web interface
  webrtc:
    addr: 8555  # use the same port as in the go2rtc config
    proto: tcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://ngrok.com/docs/agent/config/"&gt;ngrok agent documentation&lt;/a&gt; for more details on the ngrok configuration file.&lt;/p&gt; 
&lt;h3&gt;Module: Hass&lt;/h3&gt; 
&lt;p&gt;The best and easiest way to use go2rtc inside Home Assistant is to install the custom integration &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration"&gt;WebRTC Camera&lt;/a&gt; and custom Lovelace card.&lt;/p&gt; 
&lt;p&gt;But go2rtc is also compatible and can be used with the &lt;a href="https://www.home-assistant.io/integrations/rtsp_to_webrtc/"&gt;RTSPtoWebRTC&lt;/a&gt; built-in integration.&lt;/p&gt; 
&lt;p&gt;You have several options on how to add a camera to Home Assistant:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Camera RTSP source =&amp;gt; &lt;a href="https://www.home-assistant.io/integrations/generic/"&gt;Generic Camera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Camera &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;any source&lt;/a&gt; =&amp;gt; &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;go2rtc config&lt;/a&gt; =&amp;gt; &lt;a href="https://www.home-assistant.io/integrations/generic/"&gt;Generic Camera&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Install any &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start"&gt;go2rtc&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Add your stream to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;go2rtc config&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href="https://my.home-assistant.io/redirect/config_flow_start/?domain=onvif"&gt;ONVIF&lt;/a&gt; &amp;gt; Host: &lt;code&gt;127.0.0.1&lt;/code&gt;, Port: &lt;code&gt;1984&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href="https://my.home-assistant.io/redirect/config_flow_start/?domain=generic"&gt;Generic Camera&lt;/a&gt; &amp;gt; Stream Source URL: &lt;code&gt;rtsp://127.0.0.1:8554/camera1&lt;/code&gt; (change to your stream name, leave everything else as is)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You have several options on how to watch the stream from the cameras in Home Assistant:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; =&amp;gt; &lt;code&gt;Picture Entity Card&lt;/code&gt; =&amp;gt; Technology &lt;code&gt;HLS&lt;/code&gt;, codecs: &lt;code&gt;H264/H265/AAC&lt;/code&gt;, poor latency.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; =&amp;gt; &lt;a href="https://www.home-assistant.io/integrations/rtsp_to_webrtc/"&gt;RTSPtoWebRTC&lt;/a&gt; =&amp;gt; &lt;code&gt;Picture Entity Card&lt;/code&gt; =&amp;gt; Technology &lt;code&gt;WebRTC&lt;/code&gt;, codecs: &lt;code&gt;H264/PCMU/PCMA/OPUS&lt;/code&gt;, best latency. 
  &lt;ul&gt; 
   &lt;li&gt;Install any &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start"&gt;go2rtc&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href="https://my.home-assistant.io/redirect/config_flow_start/?domain=rtsp_to_webrtc"&gt;RTSPtoWebRTC&lt;/a&gt; &amp;gt; &lt;code&gt;http://127.0.0.1:1984/&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;RTSPtoWebRTC &amp;gt; Configure &amp;gt; STUN server: &lt;code&gt;stun.l.google.com:19302&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Use Picture Entity or Picture Glance Lovelace card&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; or &lt;code&gt;Camera URL&lt;/code&gt; =&amp;gt; &lt;a href="https://github.com/AlexxIT/WebRTC"&gt;WebRTC Camera&lt;/a&gt; =&amp;gt; Technology: &lt;code&gt;WebRTC/MSE/MP4/MJPEG&lt;/code&gt;, codecs: &lt;code&gt;H264/H265/AAC/PCMU/PCMA/OPUS&lt;/code&gt;, best latency, best compatibility. 
  &lt;ul&gt; 
   &lt;li&gt;Install and add &lt;a href="https://github.com/AlexxIT/WebRTC"&gt;WebRTC Camera&lt;/a&gt; custom integration&lt;/li&gt; 
   &lt;li&gt;Use WebRTC Camera custom Lovelace card&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can add camera &lt;code&gt;entity_id&lt;/code&gt; to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;go2rtc config&lt;/a&gt; if you need transcoding:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  "camera.hall": ffmpeg:{input}#video=copy#audio=opus
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Default Home Assistant lovelace cards don't support two-way audio. You can use 2-way audio from &lt;a href="https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&amp;amp;repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons"&gt;Add-on Web UI&lt;/a&gt;, but you need to use HTTPS to access the microphone. This is a browser restriction and cannot be avoided.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; There is also another nice card with go2rtc support - &lt;a href="https://github.com/dermotduffy/frigate-hass-card"&gt;Frigate Lovelace Card&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Module: MP4&lt;/h3&gt; 
&lt;p&gt;Provides several features:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;MSE stream (fMP4 over WebSocket)&lt;/li&gt; 
 &lt;li&gt;Camera snapshots in MP4 format (single frame), can be sent to &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram"&gt;Telegram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HTTP progressive streaming (MP4 file stream) - bad format for streaming because of high start delay. This format doesn't work in all Safari browsers, but go2rtc will automatically redirect it to HLS/fMP4 in this case.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;API examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MP4 snapshot: &lt;code&gt;http://192.168.1.123:1984/api/frame.mp4?src=camera1&lt;/code&gt; (H264, H265)&lt;/li&gt; 
 &lt;li&gt;MP4 stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&lt;/code&gt; (H264, H265, AAC)&lt;/li&gt; 
 &lt;li&gt;MP4 file: &lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&lt;/code&gt; (H264, H265*, AAC, OPUS, MP3, PCMA, PCMU, PCM) 
  &lt;ul&gt; 
   &lt;li&gt;You can use &lt;code&gt;mp4&lt;/code&gt;, &lt;code&gt;mp4=flac&lt;/code&gt; and &lt;code&gt;mp4=all&lt;/code&gt; param for codec filters&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;duration&lt;/code&gt; param in seconds (ex. &lt;code&gt;duration=15&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;filename&lt;/code&gt; param (ex. &lt;code&gt;filename=record.mp4&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt; or &lt;code&gt;270&lt;/code&gt; values&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;scale&lt;/code&gt; param with positive integer values (ex. &lt;code&gt;scale=4:3&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters"&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Rotate and scale params don't use transcoding and change video using metadata.&lt;/p&gt; 
&lt;h3&gt;Module: HLS&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.1.0"&gt;New in v1.1.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming"&gt;HLS&lt;/a&gt; is the worst technology for real-time streaming. It can only be useful on devices that do not support more modern technology, like &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;MSE/MP4&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The go2rtc implementation differs from the standards and may not work with all players.&lt;/p&gt; 
&lt;p&gt;API examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HLS/TS stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&lt;/code&gt; (H264)&lt;/li&gt; 
 &lt;li&gt;HLS/fMP4 stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4&lt;/code&gt; (H264, H265, AAC)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters"&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Module: MJPEG&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Important.&lt;/strong&gt; For stream in MJPEG format, your source MUST contain the MJPEG codec. If your stream has an MJPEG codec, you can receive &lt;strong&gt;MJPEG stream&lt;/strong&gt; or &lt;strong&gt;JPEG snapshots&lt;/strong&gt; via API.&lt;/p&gt; 
&lt;p&gt;You can receive an MJPEG stream in several ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;some cameras support MJPEG codec inside &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;RTSP stream&lt;/a&gt; (ex. second stream for Dahua cameras)&lt;/li&gt; 
 &lt;li&gt;some cameras have an HTTP link with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;MJPEG stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;some cameras have an HTTP link with snapshots - go2rtc can convert them to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;MJPEG stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;you can convert H264/H265 stream from your camera via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg integraion&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With this example, your stream will have both H264 and MJPEG codecs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  camera1:
    - rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0
    - ffmpeg:camera1#video=mjpeg
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;API examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MJPEG stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.mjpeg?src=camera1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;JPEG snapshots: &lt;code&gt;http://192.168.1.123:1984/api/frame.jpeg?src=camera1&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;You can use &lt;code&gt;width&lt;/code&gt;/&lt;code&gt;w&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt;/&lt;code&gt;h&lt;/code&gt; params&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt;, &lt;code&gt;270&lt;/code&gt; or &lt;code&gt;-90&lt;/code&gt; values&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;hardware&lt;/code&gt;/&lt;code&gt;hw&lt;/code&gt; param &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration"&gt;read more&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; This module also supports streaming to the server console (terminal) in the &lt;strong&gt;animated ASCII art&lt;/strong&gt; format (&lt;a href="https://github.com/AlexxIT/go2rtc/raw/master/internal/mjpeg/README.md"&gt;read more&lt;/a&gt;):&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=sHj_3h_sX7M"&gt;&lt;img src="https://img.youtube.com/vi/sHj_3h_sX7M/mqdefault.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Module: Log&lt;/h3&gt; 
&lt;p&gt;You can set different log levels for different modules.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;log:
  level: info  # default level
  api: trace
  exec: debug
  ngrok: info
  rtsp: warn
  streams: error
  webrtc: fatal
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;go2rtc&lt;/code&gt; starts the Web interface on port &lt;code&gt;1984&lt;/code&gt; and RTSP on port &lt;code&gt;8554&lt;/code&gt;, as well as uses port &lt;code&gt;8555&lt;/code&gt; for WebRTC connections. The three ports are accessible from your local network. So anyone on your local network can watch video from your cameras without authorization. The same rule applies to the Home Assistant Add-on.&lt;/p&gt; 
&lt;p&gt;This is not a problem if you trust your local network as much as I do. But you can change this behaviour with a &lt;code&gt;go2rtc.yaml&lt;/code&gt; config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;api:
  listen: "127.0.0.1:1984" # localhost

rtsp:
  listen: "127.0.0.1:8554" # localhost

webrtc:
  listen: ":8555" # external TCP/UDP port
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;local access to RTSP is not a problem for &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg&lt;/a&gt; integration, because it runs locally on your server&lt;/li&gt; 
 &lt;li&gt;local access to API is not a problem for the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on"&gt;Home Assistant add-on&lt;/a&gt;, because Hass runs locally on the same server, and the add-on web UI is protected with Hass authorization (&lt;a href="https://www.home-assistant.io/blog/2019/04/15/hassio-ingress/"&gt;Ingress feature&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;external access to WebRTC TCP port is not a problem, because it is used only for transmitting encrypted media data 
  &lt;ul&gt; 
   &lt;li&gt;anyway you need to open this port to your local network and to the Internet for WebRTC to work&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you need web interface protection without the Home Assistant add-on, you need to use a reverse proxy, like &lt;a href="https://nginx.org/"&gt;Nginx&lt;/a&gt;, &lt;a href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt;, &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;p&gt;PS. Additionally, WebRTC will try to use the 8555 UDP port to transmit encrypted media. It works without problems on the local network, and sometimes also works for external access, even if you haven't opened this port on your router (&lt;a href="https://en.wikipedia.org/wiki/UDP_hole_punching"&gt;read more&lt;/a&gt;). But for stable external WebRTC access, you need to open the 8555 port on your router for both TCP and UDP.&lt;/p&gt; 
&lt;h2&gt;Codecs filters&lt;/h2&gt; 
&lt;p&gt;go2rtc can automatically detect which codecs your device supports for &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;MSE&lt;/a&gt; technologies.&lt;/p&gt; 
&lt;p&gt;But it cannot be done for &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;RTSP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;HTTP progressive streaming&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls"&gt;HLS&lt;/a&gt; technologies. You can manually add a codec filter when you create a link to a stream. The filters work the same for all three technologies. Filters do not create a new codec. They only select the suitable codec from existing sources. You can add new codecs to the stream using the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg transcoding&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Without filters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RTSP will provide only the first video and only the first audio (any codec)&lt;/li&gt; 
 &lt;li&gt;MP4 will include only compatible codecs (H264, H265, AAC)&lt;/li&gt; 
 &lt;li&gt;HLS will output in the legacy TS format (H264 without audio)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?mp4&lt;/code&gt; - useful for recording as MP4 files (e.g. Hass or Frigate)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video=h264,h265&amp;amp;audio=aac&lt;/code&gt; - full version of the filter above&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video=h264&amp;amp;audio=aac&amp;amp;audio=opus&lt;/code&gt; - H264 video codec and two separate audio tracks&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video&amp;amp;audio=all&lt;/code&gt; - any video codec and all audio codecs as separate tracks&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4&lt;/code&gt; - HLS stream with MP4 compatible codecs (HLS/fMP4)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4=flac&lt;/code&gt; - HLS stream with PCMA/PCMU/PCM audio support (HLS/fMP4), won't work on old devices&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&amp;amp;mp4=flac&lt;/code&gt; - MP4 file with PCMA/PCMU/PCM audio support, won't work on old devices (ex. iOS 12)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&amp;amp;mp4=all&lt;/code&gt; - MP4 file with non-standard audio codecs, won't work on some players&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Codecs madness&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;AVC/H.264&lt;/code&gt; video can be played almost anywhere. But &lt;code&gt;HEVC/H.265&lt;/code&gt; has many limitations in supporting different devices and browsers. It's all about patents and money; you can't do anything about it.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Device&lt;/th&gt; 
   &lt;th&gt;WebRTC&lt;/th&gt; 
   &lt;th&gt;MSE&lt;/th&gt; 
   &lt;th&gt;HTTP*&lt;/th&gt; 
   &lt;th&gt;HLS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;latency&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;best&lt;/td&gt; 
   &lt;td&gt;medium&lt;/td&gt; 
   &lt;td&gt;bad&lt;/td&gt; 
   &lt;td&gt;bad&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;- Desktop Chrome 107+ &lt;br /&gt; - Desktop Edge &lt;br /&gt; - Android Chrome 107+&lt;/td&gt; 
   &lt;td&gt;H264 &lt;br /&gt; PCMU, PCMA &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264, H265* &lt;br /&gt; AAC, FLAC* &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264, H265* &lt;br /&gt; AAC, FLAC* &lt;br /&gt; OPUS, MP3&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Desktop Firefox&lt;/td&gt; 
   &lt;td&gt;H264 &lt;br /&gt; PCMU, PCMA &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264 &lt;br /&gt; AAC, FLAC* &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264 &lt;br /&gt; AAC, FLAC* &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;- Desktop Safari 14+ &lt;br /&gt; - iPad Safari 14+ &lt;br /&gt; - iPhone Safari 17.1+&lt;/td&gt; 
   &lt;td&gt;H264, H265* &lt;br /&gt; PCMU, PCMA &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264, H265 &lt;br /&gt; AAC, FLAC*&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;H264, H265 &lt;br /&gt; AAC, FLAC*&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iPhone Safari 14+&lt;/td&gt; 
   &lt;td&gt;H264, H265* &lt;br /&gt; PCMU, PCMA &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;H264, H265 &lt;br /&gt; AAC, FLAC*&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS &lt;a href="https://apps.apple.com/app/home-assistant/id1099568401"&gt;Hass App&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;H264, H265 &lt;br /&gt; AAC, FLAC*&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;code&gt;HTTP*&lt;/code&gt; - HTTP Progressive Streaming, not related to &lt;a href="https://en.wikipedia.org/wiki/Progressive_download"&gt;progressive download&lt;/a&gt;, because the file has no size and no end&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Chrome H265: &lt;a href="https://chromestatus.com/feature/5186511939567616"&gt;read this&lt;/a&gt; and &lt;a href="https://github.com/StaZhu/enable-chromium-hevc-hardware-decoding"&gt;read this&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Edge H265: &lt;a href="https://www.reddit.com/r/MicrosoftEdge/comments/v9iw8k/enable_hevc_support_in_edge/"&gt;read this&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Desktop Safari H265: Menu &amp;gt; Develop &amp;gt; Experimental &amp;gt; WebRTC H265&lt;/li&gt; 
 &lt;li&gt;iOS Safari H265: Settings &amp;gt; Safari &amp;gt; Advanced &amp;gt; Experimental &amp;gt; WebRTC H265&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Audio&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go2rtc support &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#built-in-transcoding"&gt;automatic repack&lt;/a&gt; &lt;code&gt;PCMA/PCMU/PCM&lt;/code&gt; codecs to &lt;code&gt;FLAC&lt;/code&gt; for MSE/MP4/HLS so they will work almost anywhere&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;WebRTC&lt;/strong&gt; audio codecs: &lt;code&gt;PCMU/8000&lt;/code&gt;, &lt;code&gt;PCMA/8000&lt;/code&gt;, &lt;code&gt;OPUS/48000/2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OPUS&lt;/code&gt; and &lt;code&gt;MP3&lt;/code&gt; inside &lt;strong&gt;MP4&lt;/strong&gt; are part of the standard, but some players do not support them anyway (especially Apple)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Apple devices&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;all Apple devices don't support HTTP progressive streaming&lt;/li&gt; 
 &lt;li&gt;iPhones don't support MSE technology because it competes with the HTTP Live Streaming (HLS) technology, invented by Apple&lt;/li&gt; 
 &lt;li&gt;HLS is the worst technology for &lt;strong&gt;live&lt;/strong&gt; streaming, it still exists only because of iPhones&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Codec names&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;H264 = H.264 = AVC (Advanced Video Coding)&lt;/li&gt; 
 &lt;li&gt;H265 = H.265 = HEVC (High Efficiency Video Coding)&lt;/li&gt; 
 &lt;li&gt;PCMA = G.711 PCM (A-law) = PCM A-law (&lt;code&gt;alaw&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;PCMU = G.711 PCM (µ-law) = PCM mu-law (&lt;code&gt;mulaw&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;PCM = L16 = PCM signed 16-bit big-endian (&lt;code&gt;s16be&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;AAC = MPEG4-GENERIC&lt;/li&gt; 
 &lt;li&gt;MP3 = MPEG-1 Audio Layer III or MPEG-2 Audio Layer III&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Built-in transcoding&lt;/h2&gt; 
&lt;p&gt;There are no plans to embed complex transcoding algorithms inside go2rtc. &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg source&lt;/a&gt; does a great job with this. Including &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration"&gt;hardware acceleration&lt;/a&gt; support.&lt;/p&gt; 
&lt;p&gt;But go2rtc has some simple algorithms. They are turned on automatically; you do not need to set them up additionally.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PCM for MSE/MP4/HLS&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Go2rtc can pack &lt;code&gt;PCMA&lt;/code&gt;, &lt;code&gt;PCMU&lt;/code&gt; and &lt;code&gt;PCM&lt;/code&gt; codecs into an MP4 container so that they work in all browsers and all built-in players on modern devices. Including Apple QuickTime:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;PCMA/PCMU =&amp;gt; PCM =&amp;gt; FLAC =&amp;gt; MSE/MP4/HLS
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Resample PCMA/PCMU for WebRTC&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;By default WebRTC supports only &lt;code&gt;PCMA/8000&lt;/code&gt; and &lt;code&gt;PCMU/8000&lt;/code&gt;. But go2rtc can automatically resample PCMA and PCMU codecs with a different sample rate. Also, go2rtc can transcode &lt;code&gt;PCM&lt;/code&gt; codec to &lt;code&gt;PCMA/8000&lt;/code&gt;, so WebRTC can play it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;PCM/xxx =&amp;gt; PCMA/8000 =&amp;gt; WebRTC
PCMA/xxx =&amp;gt; PCMA/8000 =&amp;gt; WebRTC
PCMU/xxx =&amp;gt; PCMU/8000 =&amp;gt; WebRTC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;FLAC codec not supported in an RTSP stream. If you are using Frigate or Hass for recording MP4 files with PCMA/PCMU/PCM audio, you should set up transcoding to the AAC codec.&lt;/li&gt; 
 &lt;li&gt;PCMA and PCMU are VERY low-quality codecs. They support only 256! different sounds. Use them only when you have no other options.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Codecs negotiation&lt;/h2&gt; 
&lt;p&gt;For example, you want to watch RTSP-stream from &lt;a href="https://www.dahuasecurity.com/fr/products/All-Products/Network-Cameras/Wireless-Series/Wi-Fi-Series/4MP/IPC-K42"&gt;Dahua IPC-K42&lt;/a&gt; camera in your Chrome browser.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;this camera supports two-way audio standard &lt;strong&gt;ONVIF Profile T&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;this camera supports codecs &lt;strong&gt;H264, H265&lt;/strong&gt; for send video, and you select &lt;code&gt;H264&lt;/code&gt; in camera settings&lt;/li&gt; 
 &lt;li&gt;this camera supports codecs &lt;strong&gt;AAC, PCMU, PCMA&lt;/strong&gt; for sending audio (from mic), and you select &lt;code&gt;AAC/16000&lt;/code&gt; in camera settings&lt;/li&gt; 
 &lt;li&gt;this camera supports codecs &lt;strong&gt;AAC, PCMU, PCMA&lt;/strong&gt; for receiving audio (to speaker), you don't need to select them&lt;/li&gt; 
 &lt;li&gt;your browser supports codecs &lt;strong&gt;H264, VP8, VP9, AV1&lt;/strong&gt; for receiving video, you don't need to select them&lt;/li&gt; 
 &lt;li&gt;your browser supports codecs &lt;strong&gt;OPUS, PCMU, PCMA&lt;/strong&gt; for sending and receiving audio, you don't need to select them&lt;/li&gt; 
 &lt;li&gt;you can't get camera audio directly, because its audio codecs don't match with your browser codecs 
  &lt;ul&gt; 
   &lt;li&gt;so you decide to use transcoding via FFmpeg and add this setting to the config YAML file&lt;/li&gt; 
   &lt;li&gt;you have chosen &lt;code&gt;OPUS/48000/2&lt;/code&gt; codec, because it is higher quality than the &lt;code&gt;PCMU/8000&lt;/code&gt; or &lt;code&gt;PCMA/8000&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Now you have a stream with two sources - &lt;strong&gt;RTSP and FFmpeg&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  dahua:
    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&amp;amp;unicast=true&amp;amp;proto=Onvif
    - ffmpeg:rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0#audio=opus
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; automatically matches codecs for your browser and all your stream sources. This is called &lt;strong&gt;multi-source two-way codec negotiation&lt;/strong&gt;. And this is one of the main features of this app.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/codecs.svg?sanitize=true" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; You can select &lt;code&gt;PCMU&lt;/code&gt; or &lt;code&gt;PCMA&lt;/code&gt; codec in camera settings and not use transcoding at all. Or you can select &lt;code&gt;AAC&lt;/code&gt; codec for main stream and &lt;code&gt;PCMU&lt;/code&gt; codec for second stream and add both RTSP to YAML config, this also will work fine.&lt;/p&gt; 
&lt;h2&gt;Projects using go2rtc&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://frigate.video/"&gt;Frigate&lt;/a&gt; 0.12+ - open-source NVR built around real-time AI object detection&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dermotduffy/frigate-hass-card"&gt;Frigate Lovelace Card&lt;/a&gt; - custom card for Home Assistant&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenIPC/firmware/tree/master/general/package/go2rtc"&gt;OpenIPC&lt;/a&gt; - alternative IP camera firmware from an open community&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gtxaspec/wz_mini_hacks"&gt;wz_mini_hacks&lt;/a&gt; - custom firmware for Wyze cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oischinger/eufyp2pstream"&gt;EufyP2PStream&lt;/a&gt; - a small project that provides a video/audio stream from Eufy cameras that don't directly support RTSP&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bropat/ioBroker.eusec"&gt;ioBroker.euSec&lt;/a&gt; - &lt;a href="https://www.iobroker.net/"&gt;ioBroker&lt;/a&gt; adapter for controlling Eufy security devices&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Anonym-tsk/MMM-go2rtc"&gt;MMM-go2rtc&lt;/a&gt; - MagicMirror² module&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tsightler/ring-mqtt"&gt;ring-mqtt&lt;/a&gt; - Ring-to-MQTT bridge&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/opensensor/lightNVR"&gt;lightNVR&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Distributions&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pkgs.alpinelinux.org/packages?name=go2rtc"&gt;Alpine Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://linux-packages.com/aur/package/go2rtc"&gt;Arch User Repository&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inode64/inode64-overlay/tree/main/media-video/go2rtc"&gt;Gentoo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://search.nixos.org/packages?query=go2rtc"&gt;NixOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/community-scripts/ProxmoxVE/"&gt;Proxmox Helper Scripts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.myqnap.org/product/go2rtc/"&gt;QNAP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://synocommunity.com/package/go2rtc"&gt;Synology NAS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://unraid.net/community/apps?q=go2rtc"&gt;Unraid&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Camera experience&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.dahuasecurity.com/"&gt;Dahua&lt;/a&gt; - reference implementation streaming protocols, a lot of settings, high stream quality, multiple streaming clients&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.ezviz.com/"&gt;EZVIZ&lt;/a&gt; - awful RTSP protocol implementation, many bugs in SDP&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.hikvision.com/"&gt;Hikvision&lt;/a&gt; - a lot of proprietary streaming technologies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://reolink.com/"&gt;Reolink&lt;/a&gt; - some models have an awful, unusable RTSP implementation and not the best RTMP alternative (I recommend that you contact Reolink support for new firmware), few settings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://sonoff.tech/"&gt;Sonoff&lt;/a&gt; - very low stream quality, no settings, not the best protocol implementation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tp-link.com/"&gt;TP-Link&lt;/a&gt; - few streaming clients, packet loss?&lt;/li&gt; 
 &lt;li&gt;Chinese cheap noname cameras, Wyze Cams, Xiaomi cameras with hacks (usually have &lt;code&gt;/live/ch00_1&lt;/code&gt; in RTSP URL) - awful but usable RTSP protocol implementation, low stream quality, few settings, packet loss?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;TIPS&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Using apps for low RTSP delay&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ffplay -fflags nobuffer -flags low_delay "rtsp://192.168.1.123:8554/camera1"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;VLC &amp;gt; Preferences &amp;gt; Input / Codecs &amp;gt; Default Caching Level: Lowest Latency&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Snapshots to Telegram&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram"&gt;read more&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Q. What's the difference between go2rtc, WebRTC Camera and RTSPtoWebRTC?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; is a new version of the server-side &lt;a href="https://github.com/AlexxIT/WebRTC"&gt;WebRTC Camera&lt;/a&gt; integration, completely rewritten from scratch, with a number of fixes and a huge number of new features. It is compatible with native Home Assistant &lt;a href="https://www.home-assistant.io/integrations/rtsp_to_webrtc/"&gt;RTSPtoWebRTC&lt;/a&gt; integration. So you &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass"&gt;can use&lt;/a&gt; default Lovelace Picture Entity or Picture Glance.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q. Should I use the go2rtc add-on or WebRTC Camera integration?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; is more than just viewing your stream online with WebRTC/MSE/HLS/etc. You can use it all the time for your various tasks. But every time Hass is rebooted, all integrations are also rebooted. So your streams may be interrupted if you use them in additional tasks.&lt;/p&gt; 
&lt;p&gt;Basic users can use the &lt;strong&gt;WebRTC Camera&lt;/strong&gt; integration. Advanced users can use the go2rtc add-on or the Frigate 0.12+ add-on.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q. Which RTSP link should I use inside Hass?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can use a direct link to your cameras there (as you always do). &lt;strong&gt;go2rtc&lt;/strong&gt; supports zero-config feature. You may leave &lt;code&gt;streams&lt;/code&gt; config section empty. And your streams will be created on the fly on first start from Hass. And your cameras will have multiple connections. Some from Hass directly and one from &lt;strong&gt;go2rtc&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Also, you can specify your streams in &lt;strong&gt;go2rtc&lt;/strong&gt; &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;config file&lt;/a&gt; and use RTSP links to this add-on with additional features: multi-source &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation"&gt;codecs negotiation&lt;/a&gt; or FFmpeg &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;transcoding&lt;/a&gt; for unsupported codecs. Or use them as a source for Frigate. And your cameras will have one connection from &lt;strong&gt;go2rtc&lt;/strong&gt;. And &lt;strong&gt;go2rtc&lt;/strong&gt; will have multiple connections - some from Hass via RTSP protocol, some from your browser via WebRTC/MSE/HLS protocols.&lt;/p&gt; 
&lt;p&gt;Use any config that you like.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q. What about Lovelace card with support for two-way audio?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;At this moment, I am focused on improving stability and adding new features to &lt;strong&gt;go2rtc&lt;/strong&gt;. Maybe someone could write such a card themselves. It's not difficult, I have &lt;a href="https://github.com/AlexxIT/go2rtc/raw/master/www/webrtc.html"&gt;some sketches&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>