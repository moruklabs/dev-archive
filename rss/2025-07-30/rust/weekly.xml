<rss version="2.0">
  <channel>
    <title>GitHub Rust Weekly Trending</title>
    <description>Weekly Trending of Rust in GitHub</description>
    <pubDate>Tue, 29 Jul 2025 01:57:24 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>lapce/lapce</title>
      <link>https://github.com/lapce/lapce</link>
      <description>&lt;p&gt;Lightning-fast and Powerful Code Editor written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://lapce.dev" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/lapce/lapce/master/extra/images/logo.png" width="200" height="200/"&gt;&lt;br&gt; Lapce &lt;/a&gt; &lt;/h1&gt; 
&lt;h4 align="center"&gt;Lightning-fast And Powerful Code Editor&lt;/h4&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://github.com/lapce/lapce/actions/workflows/ci.yml" target="_blank"&gt; &lt;img src="https://github.com/lapce/lapce/actions/workflows/ci.yml/badge.svg?sanitize=true"&gt; &lt;/a&gt; 
 &lt;a href="https://discord.gg/n8tGJ6Rn6D" target="_blank"&gt; &lt;img src="https://img.shields.io/discord/946858761413328946?logo=discord"&gt; &lt;/a&gt; 
 &lt;a href="https://docs.lapce.dev" target="_blank"&gt; &lt;img src="https://img.shields.io/static/v1?label=Docs&amp;amp;message=docs.lapce.dev&amp;amp;color=blue" alt="Lapce Docs"&gt; &lt;/a&gt; 
 &lt;a href="https://wiki.mutable.ai/lapce/lapce" target="_blank"&gt; &lt;img src="https://img.shields.io/static/v1?label=Code%20Wiki&amp;amp;message=Mutable.ai&amp;amp;color=blue" alt="Mutable.ai Auto Wiki"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p&gt;Lapce (IPA: /l√¶ps/) is written in pure Rust, with a UI in &lt;a href="https://github.com/lapce/floem"&gt;Floem&lt;/a&gt;. It is designed with &lt;a href="https://xi-editor.io/docs/rope_science_00.html"&gt;Rope Science&lt;/a&gt; from the &lt;a href="https://github.com/xi-editor/xi-editor"&gt;Xi-Editor&lt;/a&gt;, enabling lightning-fast computation, and leverages &lt;a href="https://github.com/gfx-rs/wgpu"&gt;wgpu&lt;/a&gt; for rendering. More information about the features of Lapce can be found on the &lt;a href="https://lapce.dev"&gt;main website&lt;/a&gt; and user documentation can be found on &lt;a href="https://docs.lapce.dev/"&gt;GitBook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/lapce/lapce/raw/master/extra/images/screenshot.png?raw=true" alt=""&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in LSP (&lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt;) support to give you intelligent code features such as: completion, diagnostics and code actions&lt;/li&gt; 
 &lt;li&gt;Modal editing support as first class citizen (Vim-like, and toggleable)&lt;/li&gt; 
 &lt;li&gt;Built-in remote development support inspired by &lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;VSCode Remote Development&lt;/a&gt;. Enjoy the benefits of a "local" experience, and seamlessly gain the full power of a remote system. We also have &lt;a href="https://lap.dev/"&gt;Lapdev&lt;/a&gt; which can help manage your remote dev environments.&lt;/li&gt; 
 &lt;li&gt;Plugins can be written in programming languages that can compile to the &lt;a href="https://wasi.dev/"&gt;WASI&lt;/a&gt; format (C, Rust, &lt;a href="https://www.assemblyscript.org/"&gt;AssemblyScript&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Built-in terminal, so you can execute commands in your workspace, without leaving Lapce.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can find pre-built releases for Windows, Linux and macOS &lt;a href="https://github.com/lapce/lapce/releases"&gt;here&lt;/a&gt;, or &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/docs/installing-with-package-manager.md"&gt;installing with a package manager&lt;/a&gt;. If you'd like to compile from source, you can find the &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/docs/building-from-source.md"&gt;guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;a href="https://ws.lap.dev/#https://github.com/lapce/lapce" target="_blank"&gt; &lt;img src="https://lap.dev/images/open-in-lapdev.svg?version=8" alt="Open in Lapdev"&gt; &lt;/a&gt; 
&lt;p&gt;&lt;a href="https://lap.dev/"&gt;Lapdev&lt;/a&gt;, developed by the Lapce team, is a cloud dev env service similar to GitHub Codespaces. By clicking the button above, you'll be taken to a fully set up Lapce dev env where you can browse the code and start developing. All dependencies are pre-installed, so you can get straight to code.&lt;/p&gt; 
&lt;p&gt;Guidelines for contributing to Lapce can be found in &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feedback &amp;amp; Contact&lt;/h2&gt; 
&lt;p&gt;The most popular place for Lapce developers and users is on the &lt;a href="https://discord.gg/n8tGJ6Rn6D"&gt;Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Or, join the discussion on &lt;a href="https://www.reddit.com/r/lapce/"&gt;Reddit&lt;/a&gt; where we are just getting started.&lt;/p&gt; 
&lt;p&gt;There is also a &lt;a href="https://matrix.to/#/%23lapce-editor:matrix.org"&gt;Matrix Space&lt;/a&gt;, which is linked to the content from the Discord server.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Lapce is released under the Apache License Version 2, which is an open source license. You may contribute to this project, or use the code as you please as long as you adhere to its conditions. You can find a copy of the license text here: &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tracel-ai/burn</title>
      <link>https://github.com/tracel-ai/burn</link>
      <description>&lt;p&gt;Burn is a next generation Deep Learning Framework that doesn't compromise on flexibility, efficiency and portability.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/logo-burn-neutral.webp" width="350px"&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/uPEBbYYDB6"&gt;&lt;img src="https://img.shields.io/discord/1038839012602941528.svg?color=7289da&amp;amp;&amp;amp;logo=discord" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/burn"&gt;&lt;img src="https://img.shields.io/crates/v/burn.svg?sanitize=true" alt="Current Crates.io Version"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/burn"&gt;&lt;img src="https://img.shields.io/crates/msrv/burn" alt="Minimum Supported Rust Version"&gt;&lt;/a&gt; &lt;a href="https://burn.dev/docs/burn"&gt;&lt;img src="https://img.shields.io/badge/docs-latest-blue" alt="Documentation"&gt;&lt;/a&gt; &lt;a href="https://github.com/tracel-ai/burn/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/tracel-ai/burn/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Test Status"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/#license"&gt;&lt;img src="https://shields.io/badge/license-MIT%2FApache--2.0-blue" alt="license"&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/tracel-ai/burn"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://www.runblaze.dev"&gt;&lt;img src="https://www.runblaze.dev/ci-blaze-powered.png" width="125px"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;p&gt;&lt;strong&gt;Burn is a next generation Deep Learning Framework that doesn't compromise on &lt;br&gt; flexibility, efficiency and portability.&lt;/strong&gt;&lt;/p&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div align="left"&gt; 
 &lt;h2&gt;Performance&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-blazingly-fast.png" height="96px"&gt; 
  &lt;p&gt;Because we believe the goal of a deep learning framework is to convert computation into useful intelligence, we have made performance a core pillar of Burn. We strive to achieve top efficiency by leveraging multiple optimization techniques described below.&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;Click on each section for more details&lt;/strong&gt; üëá&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Automatic kernel fusion üí• &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Using Burn means having your models optimized on any backend. When possible, we provide a way to automatically and dynamically create custom kernels that minimize data relocation between different memory spaces, extremely useful when moving memory is the bottleneck.&lt;/p&gt; 
  &lt;p&gt;As an example, you could write your own GELU activation function with the high level tensor api (see Rust code snippet below).&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;fn gelu_custom&amp;lt;B: Backend, const D: usize&amp;gt;(x: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {
    let x = x.clone() * ((x / SQRT_2).erf() + 1);
    x / 2
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Then, at runtime, a custom low-level kernel will be automatically created for your specific implementation and will rival a handcrafted GPU implementation. The kernel consists of about 60 lines of WGSL &lt;a href="%22https://www.w3.org/TR/WGSL/https://www.w3.org/TR/WGSL/%22"&gt;WebGPU Shading Language&lt;/a&gt;, an extremely verbose lower level shader language you probably don't want to program your deep learning models in!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Asynchronous execution ‚ù§Ô∏è‚Äçüî• &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;For &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/#backends"&gt;first-party backends&lt;/a&gt;, an asynchronous execution style is used, which allows to perform various optimizations, such as the previously mentioned automatic kernel fusion.&lt;/p&gt; 
  &lt;p&gt;Asynchronous execution also ensures that the normal execution of the framework does not block the model computations, which implies that the framework overhead won't impact the speed of execution significantly. Conversely, the intense computations in the model do not interfere with the responsiveness of the framework. For more information about our asynchronous backends, see &lt;a href="https://burn.dev/blog/creating-high-performance-asynchronous-backends-with-burn-compute"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Thread-safe building blocks ü¶û &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Burn emphasizes thread safety by leveraging the &lt;a href="https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html"&gt;ownership system of Rust&lt;/a&gt;. With Burn, each module is the owner of its weights. It is therefore possible to send a module to another thread for computing the gradients, then send the gradients to the main thread that can aggregate them, and &lt;em&gt;voil√†&lt;/em&gt;, you get multi-device training.&lt;/p&gt; 
  &lt;p&gt;This is a very different approach from what PyTorch does, where backpropagation actually mutates the &lt;em&gt;grad&lt;/em&gt; attribute of each tensor parameter. This is not a thread-safe operation and therefore requires lower level synchronization primitives, see &lt;a href="https://pytorch.org/docs/stable/distributed.html"&gt;distributed training&lt;/a&gt; for reference. Note that this is still very fast, but not compatible across different backends and quite hard to implement.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Intelligent memory management ü¶Ä &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;One of the main roles of a deep learning framework is to reduce the amount of memory necessary to run models. The naive way of handling memory is that each tensor has its own memory space, which is allocated when the tensor is created then deallocated as the tensor gets out of scope. However, allocating and deallocating data is very costly, so a memory pool is often required to achieve good throughput. Burn offers an infrastructure that allows for easily creating and selecting memory management strategies for backends. For more details on memory management in Burn, see &lt;a href="https://burn.dev/blog/creating-high-performance-asynchronous-backends-with-burn-compute"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
  &lt;p&gt;Another very important memory optimization of Burn is that we keep track of when a tensor can be mutated in-place just by using the ownership system well. Even though it is a rather small memory optimization on its own, it adds up considerably when training or running inference with larger models and contributes to reduce the memory usage even more. For more information, see &lt;a href="https://burn.dev/blog/burn-rusty-approach-to-tensor-handling"&gt;this blog post about tensor handling&lt;/a&gt;.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Automatic kernel selection üéØ &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;A good deep learning framework should ensure that models run smoothly on all hardware. However, not all hardware share the same behavior in terms of execution speed. For instance, a matrix multiplication kernel can be launched with many different parameters, which are highly sensitive to the size of the matrices and the hardware. Using the wrong configuration could reduce the speed of execution by a large factor (10 times or even more in extreme cases), so choosing the right kernels becomes a priority.&lt;/p&gt; 
  &lt;p&gt;With our home-made backends, we run benchmarks automatically and choose the best configuration for the current hardware and matrix sizes with a reasonable caching strategy.&lt;/p&gt; 
  &lt;p&gt;This adds a small overhead by increasing the warmup execution time, but stabilizes quickly after a few forward and backward passes, saving lots of time in the long run. Note that this feature isn't mandatory, and can be disabled when cold starts are a priority over optimized throughput.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Hardware specific features üî• &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;It is no secret that deep learning is mostly relying on matrix multiplication as its core operation, since this is how fully-connected neural networks are modeled.&lt;/p&gt; 
  &lt;p&gt;More and more, hardware manufacturers optimize their chips specifically for matrix multiplication workloads. For instance, Nvidia has its &lt;em&gt;Tensor Cores&lt;/em&gt; and today most cellphones have AI specialized chips. As of this moment, we support Tensor Cores with our LibTorch, Candle, CUDA, Metal and WGPU/SPIR-V backends, but not other accelerators yet. We hope &lt;a href="https://github.com/gpuweb/gpuweb/issues/4195"&gt;this issue&lt;/a&gt; gets resolved at some point to bring support to our WGPU backend.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Custom Backend Extension üéí &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Burn aims to be the most flexible deep learning framework. While it's crucial to maintain compatibility with a wide variety of backends, Burn also provides the ability to extend the functionalities of a backend implementation to suit your personal modeling requirements.&lt;/p&gt; 
  &lt;p&gt;This versatility is advantageous in numerous ways, such as supporting custom operations like flash attention or manually writing your own kernel for a specific backend to enhance performance. See &lt;a href="https://burn.dev/books/burn/advanced/backend-extension/index.html"&gt;this section&lt;/a&gt; in the Burn Book üî• for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;h2&gt;Backend&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/backend-chip.png" height="96px"&gt; 
  &lt;p&gt;Burn strives to be as fast as possible on as many hardwares as possible, with robust implementations. We believe this flexibility is crucial for modern needs where you may train your models in the cloud, then deploy on customer hardwares, which vary from user to user.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;strong&gt;Supported Backends&lt;/strong&gt;&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Backend&lt;/th&gt; 
    &lt;th&gt;Devices&lt;/th&gt; 
    &lt;th&gt;Class&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;CUDA&lt;/td&gt; 
    &lt;td&gt;NVIDIA GPUs&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;ROCm&lt;/td&gt; 
    &lt;td&gt;AMD GPUs&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Metal&lt;/td&gt; 
    &lt;td&gt;Apple GPUs&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Vulkan&lt;/td&gt; 
    &lt;td&gt;Most GPUs on Linux &amp;amp; Windows&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Wgpu&lt;/td&gt; 
    &lt;td&gt;Most GPUs&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;NdArray&lt;/td&gt; 
    &lt;td&gt;Most CPUs&lt;/td&gt; 
    &lt;td&gt;Third-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;LibTorch&lt;/td&gt; 
    &lt;td&gt;Most GPUs &amp;amp; CPUs&lt;/td&gt; 
    &lt;td&gt;Third-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Candle&lt;/td&gt; 
    &lt;td&gt;Nvidia, Apple GPUs &amp;amp; CPUs&lt;/td&gt; 
    &lt;td&gt;Third-Party&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;br&gt; 
 &lt;p&gt;Compared to other frameworks, Burn has a very different approach to supporting many backends. By design, most code is generic over the Backend trait, which allows us to build Burn with swappable backends. This makes composing backend possible, augmenting them with additional functionalities such as autodifferentiation and automatic kernel fusion.&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Autodiff: Backend decorator that brings backpropagation to any backend üîÑ &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Contrary to the aforementioned backends, Autodiff is actually a backend &lt;em&gt;decorator&lt;/em&gt;. This means that it cannot exist by itself; it must encapsulate another backend.&lt;/p&gt; 
  &lt;p&gt;The simple act of wrapping a base backend with Autodiff transparently equips it with autodifferentiation support, making it possible to call backward on your model.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::backend::{Autodiff, Wgpu};
use burn::tensor::{Distribution, Tensor};

fn main() {
    type Backend = Autodiff&amp;lt;Wgpu&amp;gt;;

    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default);
    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default).require_grad();

    let tmp = x.clone() + y.clone();
    let tmp = tmp.matmul(x);
    let tmp = tmp.exp();

    let grads = tmp.backward();
    let y_grad = y.grad(&amp;amp;grads).unwrap();
    println!("{y_grad}");
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, it is impossible to make the mistake of calling backward on a model that runs on a backend that does not support autodiff (for inference), as this method is only offered by an Autodiff backend.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-autodiff/README.md"&gt;Autodiff Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Fusion: Backend decorator that brings kernel fusion to all first-party backends &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;This backend decorator enhances a backend with kernel fusion, provided that the inner backend supports it. Note that you can compose this backend with other backend decorators such as Autodiff. For now, only the WGPU and CUDA backends have support for fused kernels.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::backend::{Autodiff, Fusion, Wgpu};
use burn::tensor::{Distribution, Tensor};

fn main() {
    type Backend = Autodiff&amp;lt;Fusion&amp;lt;Wgpu&amp;gt;&amp;gt;;

    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default);
    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default).require_grad();

    let tmp = x.clone() + y.clone();
    let tmp = tmp.matmul(x);
    let tmp = tmp.exp();

    let grads = tmp.backward();
    let y_grad = y.grad(&amp;amp;grads).unwrap();
    println!("{y_grad}");
}

&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, we plan to implement automatic gradient checkpointing based on compute bound and memory bound operations, which will work gracefully with the fusion backend to make your code run even faster during training, see &lt;a href="https://github.com/tracel-ai/burn/issues/936"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-fusion/README.md"&gt;Fusion Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Router (Beta): Backend decorator that composes multiple backends into a single one &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;That backend simplifies hardware operability, if for instance you want to execute some operations on the CPU and other operations on the GPU.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::tensor::{Distribution, Tensor};
use burn::backend::{
    NdArray, Router, Wgpu, ndarray::NdArrayDevice, router::duo::MultiDevice, wgpu::WgpuDevice,
};

fn main() {
    type Backend = Router&amp;lt;(Wgpu, NdArray)&amp;gt;;

    let device_0 = MultiDevice::B1(WgpuDevice::DiscreteGpu(0));
    let device_1 = MultiDevice::B2(NdArrayDevice::Cpu);

    let tensor_gpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], burn::tensor::Distribution::Default, &amp;amp;device_0);
    let tensor_cpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], burn::tensor::Distribution::Default, &amp;amp;device_1);
}

&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Remote (Beta): Backend decorator for remote backend execution, useful for distributed computations &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;That backend has two parts, one client and one server. The client sends tensor operations over the network to a remote compute backend. You can use any first-party backend as server in a single line of code:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;fn main_server() {
    // Start a server on port 3000.
    burn::server::start::&amp;lt;burn::backend::Cuda&amp;gt;(Default::default(), 3000);
}

fn main_client() {
    // Create a client that communicate with the server on port 3000.
    use burn::backend::{Autodiff, RemoteBackend};

    type Backend = Autodiff&amp;lt;RemoteDevice&amp;gt;;

    let device = RemoteDevice::new("ws://localhost:3000");
    let tensor_gpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], Distribution::Default, &amp;amp;device);
}

&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;h2&gt;Training &amp;amp; Inference&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-wall.png" height="96px"&gt; 
  &lt;p&gt;The whole deep learning workflow is made easy with Burn, as you can monitor your training progress with an ergonomic dashboard, and run inference everywhere from embedded devices to large GPU clusters.&lt;/p&gt; 
  &lt;p&gt;Burn was built from the ground up with training and inference in mind. It's also worth noting how Burn, in comparison to frameworks like PyTorch, simplifies the transition from training to deployment, eliminating the need for code changes.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div align="center"&gt; 
  &lt;br&gt; 
  &lt;a href="https://www.youtube.com/watch?v=N9RM5CQbNQc" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/burn-train-tui.png" alt="Burn Train TUI" width="75%"&gt; &lt;/a&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;strong&gt;Click on the following sections to expand üëá&lt;/strong&gt;&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Training Dashboard üìà &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;As you can see in the previous video (click on the picture!), a new terminal UI dashboard based on the &lt;a href="https://github.com/ratatui-org/ratatui"&gt;Ratatui&lt;/a&gt; crate allows users to follow their training with ease without having to connect to any external application.&lt;/p&gt; 
  &lt;p&gt;You can visualize your training and validation metrics updating in real-time and analyze the lifelong progression or recent history of any registered metrics using only the arrow keys. Break from the training loop without crashing, allowing potential checkpoints to be fully written or important pieces of code to complete without interruption üõ°&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; ONNX Support üê´ &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;ONNX (Open Neural Network Exchange) is an open-standard format that exports both the architecture and the weights of a deep learning model.&lt;/p&gt; 
  &lt;p&gt;Burn supports the importation of models that follow the ONNX standard so you can easily port a model you have written in another framework like TensorFlow or PyTorch to Burn to benefit from all the advantages our framework offers.&lt;/p&gt; 
  &lt;p&gt;Our ONNX support is further described in &lt;a href="https://burn.dev/books/burn/import/onnx-model.html"&gt;this section of the Burn Book üî•&lt;/a&gt;.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This crate is in active development and currently supports a &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-import/SUPPORTED-ONNX-OPS.md"&gt;limited set of ONNX operators&lt;/a&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Importing PyTorch or Safetensors Models üöö &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;You can load weights from PyTorch or Safetensors formats directly into your Burn-defined models. This makes it easy to reuse existing models while benefiting from Burn's performance and deployment features.&lt;/p&gt; 
  &lt;p&gt;Learn more:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://burn.dev/books/burn/import/pytorch-model.html"&gt;Import pre-trained PyTorch models into Burn&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://burn.dev/books/burn/import/safetensors-model.html"&gt;Load models from Safetensors format&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Inference in the Browser üåê &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Several of our backends can compile to Web Assembly: Candle and NdArray for CPU, and WGPU for GPU. This means that you can run inference directly within a browser. We provide several examples of this:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web"&gt;MNIST&lt;/a&gt; where you can draw digits and a small convnet tries to find which one it is! 2Ô∏è‚É£ 7Ô∏è‚É£ üò∞&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web"&gt;Image Classification&lt;/a&gt; where you can upload images and classify them! üåÑ&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Embedded: &lt;i&gt;no_std&lt;/i&gt; support ‚öôÔ∏è &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Burn's core components support &lt;a href="https://docs.rust-embedded.org/book/intro/no-std.html"&gt;no_std&lt;/a&gt;. This means it can run in bare metal environment such as embedded devices without an operating system.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;As of now, only the NdArray backend can be used in a &lt;em&gt;no_std&lt;/em&gt; environment.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;h3&gt;Benchmarks&lt;/h3&gt; 
 &lt;p&gt;To evaluate performance across different backends and track improvements over time, we provide a dedicated benchmarking suite.&lt;/p&gt; 
 &lt;p&gt;Run and compare benchmarks using &lt;a href="https://github.com/tracel-ai/burn-bench"&gt;burn-bench&lt;/a&gt;.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Warning&lt;/strong&gt; When using one of the &lt;code&gt;wgpu&lt;/code&gt; backends, you may encounter compilation errors related to recursive type evaluation. This is due to complex type nesting within the &lt;code&gt;wgpu&lt;/code&gt; dependency chain. To resolve this issue, add the following line at the top of your &lt;code&gt;main.rs&lt;/code&gt; or &lt;code&gt;lib.rs&lt;/code&gt; file:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;#![recursion_limit = "256"]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;The default recursion limit (128) is often just below the required depth (typically 130-150) due to deeply nested associated types and trait bounds.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h2&gt;Getting Started&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-walking.png" height="96px"&gt; 
  &lt;p&gt;Just heard of Burn? You are at the right place! Just continue reading this section and we hope you can get on board really quickly.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;details&gt; 
  &lt;summary&gt; The Burn Book üî• &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;To begin working effectively with Burn, it is crucial to understand its key components and philosophy. This is why we highly recommend new users to read the first sections of &lt;a href="https://burn.dev/books/burn/"&gt;The Burn Book üî•&lt;/a&gt;. It provides detailed examples and explanations covering every facet of the framework, including building blocks like tensors, modules, and optimizers, all the way to advanced usage, like coding your own GPU kernels.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;The project is constantly evolving, and we try as much as possible to keep the book up to date with new additions. However, we might miss some details sometimes, so if you see something weird, let us know! We also gladly accept Pull Requests üòÑ&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Examples üôè &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Let's start with a code snippet that shows how intuitive the framework is to use! In the following, we declare a neural network module with some parameters along with its forward pass.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::nn;
use burn::module::Module;
use burn::tensor::backend::Backend;

#[derive(Module, Debug)]
pub struct PositionWiseFeedForward&amp;lt;B: Backend&amp;gt; {
    linear_inner: nn::Linear&amp;lt;B&amp;gt;,
    linear_outer: nn::Linear&amp;lt;B&amp;gt;,
    dropout: nn::Dropout,
    gelu: nn::Gelu,
}

impl&amp;lt;B: Backend&amp;gt; PositionWiseFeedForward&amp;lt;B&amp;gt; {
    pub fn forward&amp;lt;const D: usize&amp;gt;(&amp;amp;self, input: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {
        let x = self.linear_inner.forward(input);
        let x = self.gelu.forward(x);
        let x = self.dropout.forward(x);

        self.linear_outer.forward(x)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;We have a somewhat large amount of &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples"&gt;examples&lt;/a&gt; in the repository that shows how to use the framework in different scenarios.&lt;/p&gt; 
  &lt;p&gt;Following &lt;a href="https://burn.dev/books/burn/"&gt;the book&lt;/a&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/guide"&gt;Basic Workflow&lt;/a&gt; : Creates a custom CNN &lt;code&gt;Module&lt;/code&gt; to train on the MNIST dataset and use for inference.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-training-loop"&gt;Custom Training Loop&lt;/a&gt; : Implements a basic training loop instead of using the &lt;code&gt;Learner&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-wgpu-kernel"&gt;Custom WGPU Kernel&lt;/a&gt; : Learn how to create your own custom operation with the WGPU backend.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;Additional examples:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-csv-dataset"&gt;Custom CSV Dataset&lt;/a&gt; : Implements a dataset to parse CSV data for a regression task.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/simple-regression"&gt;Regression&lt;/a&gt; : Trains a simple MLP on the California Housing dataset to predict the median house value for a district.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-image-dataset"&gt;Custom Image Dataset&lt;/a&gt; : Trains a simple CNN on custom image dataset following a simple folder structure.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-renderer"&gt;Custom Renderer&lt;/a&gt; : Implements a custom renderer to display the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/building-blocks/learner.md"&gt;&lt;code&gt;Learner&lt;/code&gt;&lt;/a&gt; progress.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web"&gt;Image Classification Web&lt;/a&gt; : Image classification web browser demo using Burn, WGPU and WebAssembly.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web"&gt;MNIST Inference on Web&lt;/a&gt; : An interactive MNIST inference demo in the browser. The demo is available &lt;a href="https://burn.dev/demo/"&gt;online&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist"&gt;MNIST Training&lt;/a&gt; : Demonstrates how to train a custom &lt;code&gt;Module&lt;/code&gt; (MLP) with the &lt;code&gt;Learner&lt;/code&gt; configured to log metrics and keep training checkpoints.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/named-tensor"&gt;Named Tensor&lt;/a&gt; : Performs operations with the experimental &lt;code&gt;NamedTensor&lt;/code&gt; feature.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/onnx-inference"&gt;ONNX Import Inference&lt;/a&gt; : Imports an ONNX model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/pytorch-import"&gt;PyTorch Import Inference&lt;/a&gt; : Imports a PyTorch model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-classification"&gt;Text Classification&lt;/a&gt; : Trains a text classification transformer model on the AG News or DbPedia dataset. The trained model can then be used to classify a text sample.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-generation"&gt;Text Generation&lt;/a&gt; : Trains a text generation transformer model on the DbPedia dataset.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/wgan"&gt;Wasserstein GAN MNIST&lt;/a&gt; : Trains a WGAN model to generate new handwritten digits based on MNIST.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;For more practical insights, you can clone the repository and run any of them directly on your computer!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Pre-trained Models ü§ñ &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;We keep an updated and curated list of models and examples built with Burn, see the &lt;a href="https://github.com/tracel-ai/models"&gt;tracel-ai/models repository&lt;/a&gt; for more details.&lt;/p&gt; 
  &lt;p&gt;Don't see the model you want? Don't hesitate to open an issue, and we may prioritize it. Built a model using Burn and want to share it? You can also open a Pull Request and add your model under the community section!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Why use Rust for Deep Learning? ü¶Ä &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Deep Learning is a special form of software where you need very high level abstractions as well as extremely fast execution time. Rust is the perfect candidate for that use case since it provides zero-cost abstractions to easily create neural network modules, and fine-grained control over memory to optimize every detail.&lt;/p&gt; 
  &lt;p&gt;It's important that a framework be easy to use at a high level so that its users can focus on innovating in the AI field. However, since running models relies so heavily on computations, performance can't be neglected.&lt;/p&gt; 
  &lt;p&gt;To this day, the mainstream solution to this problem has been to offer APIs in Python, but rely on bindings to low-level languages such as C/C++. This reduces portability, increases complexity and creates frictions between researchers and engineers. We feel like Rust's approach to abstractions makes it versatile enough to tackle this two languages dichotomy.&lt;/p&gt; 
  &lt;p&gt;Rust also comes with the Cargo package manager, which makes it incredibly easy to build, test, and deploy from any environment, which is usually a pain in Python.&lt;/p&gt; 
  &lt;p&gt;Although Rust has the reputation of being a difficult language at first, we strongly believe it leads to more reliable, bug-free solutions built faster (after some practice üòÖ)!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Deprecation Note&lt;/strong&gt;&lt;br&gt;Since &lt;code&gt;0.14.0&lt;/code&gt;, the internal structure for tensor data has changed. The previous &lt;code&gt;Data&lt;/code&gt; struct was deprecated and officially removed since &lt;code&gt;0.17.0&lt;/code&gt; in favor of the new &lt;code&gt;TensorData&lt;/code&gt; struct, which allows for more flexibility by storing the underlying data as bytes and keeping the data type as a field. If you are using &lt;code&gt;Data&lt;/code&gt; in your code, make sure to switch to &lt;code&gt;TensorData&lt;/code&gt;.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;!-- &gt;
&gt; In the event that you are trying to load a model record saved in a previous version, make sure to
&gt; enable the `record-backward-compat` feature using a previous version of burn (&lt;=0.16.0). Otherwise,
&gt; the record won't be deserialized correctly and you will get an error message (which will also point
&gt; you to the backward compatible feature flag). The backward compatibility was maintained for
&gt; deserialization (loading), so as soon as you have saved the record again it will be saved according
&gt; to the new structure and you will be able to upgrade to this version. Please note that binary formats
&gt; are not backward compatible. Thus, you will need to load your record in a previous version and save it
&gt; to another of the self-describing record formats before using a compatible version (as described) with the
&gt; `record-backward-compat` feature flag. --&gt; 
 &lt;details id="deprecation"&gt; 
  &lt;summary&gt; Loading Model Records From Previous Versions ‚ö†Ô∏è &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;In the event that you are trying to load a model record saved in a version older than &lt;code&gt;0.14.0&lt;/code&gt;, make sure to use a compatible version (&lt;code&gt;0.14&lt;/code&gt;, &lt;code&gt;0.15&lt;/code&gt; or &lt;code&gt;0.16&lt;/code&gt;) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
  &lt;pre&gt;&lt;code&gt;features = [..., "record-backward-compat"]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Otherwise, the record won't be deserialized correctly and you will get an error message. This error will also point you to the backward compatible feature flag.&lt;/p&gt; 
  &lt;p&gt;The backward compatibility was maintained for deserialization when loading records. Therefore, as soon as you have saved the record again it will be saved according to the new structure and you can upgrade back to the current version&lt;/p&gt; 
  &lt;p&gt;Please note that binary formats are not backward compatible. Thus, you will need to load your record in a previous version and save it in any of the other self-describing record format (e.g., using the &lt;code&gt;NamedMpkFileRecorder&lt;/code&gt;) before using a compatible version (as described) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;h2&gt;Community&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-community.png" height="96px"&gt; 
  &lt;p&gt;If you are excited about the project, don't hesitate to join our &lt;a href="https://discord.gg/uPEBbYYDB6"&gt;Discord&lt;/a&gt;! We try to be as welcoming as possible to everybody from any background. You can ask your questions and share what you built with the community!&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Before contributing, please take a moment to review our &lt;a href="https://github.com/tracel-ai/burn/tree/main/CODE-OF-CONDUCT.md"&gt;code of conduct&lt;/a&gt;. It's also highly recommended to read the &lt;a href="https://github.com/tracel-ai/burn/tree/main/contributor-book/src/project-architecture"&gt;architecture overview&lt;/a&gt;, which explains some of our architectural decisions. Refer to our &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;h2&gt;Status&lt;/h2&gt; 
 &lt;p&gt;Burn is currently in active development, and there will be breaking changes. While any resulting issues are likely to be easy to fix, there are no guarantees at this stage.&lt;/p&gt; 
 &lt;h2&gt;License&lt;/h2&gt; 
 &lt;p&gt;Burn is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; for details. Opening a pull request is assumed to signal agreement with these licensing terms.&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>idootop/open-xiaoai</title>
      <link>https://github.com/idootop/open-xiaoai</link>
      <description>&lt;p&gt;ËÆ©Â∞èÁà±Èü≥ÁÆ±„ÄåÂê¨ËßÅ‰Ω†ÁöÑÂ£∞Èü≥„ÄçÔºåËß£ÈîÅÊó†ÈôêÂèØËÉΩ„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open-XiaoAI&lt;/h1&gt; 
&lt;p&gt;ËÆ©Â∞èÁà±Èü≥ÁÆ±„ÄåÂê¨ËßÅ‰Ω†ÁöÑÂ£∞Èü≥„ÄçÔºåËß£ÈîÅÊó†ÈôêÂèØËÉΩ„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/cover.jpg" alt=""&gt;&lt;/p&gt; 
&lt;h2&gt;ÁÆÄ‰ªã&lt;/h2&gt; 
&lt;p&gt;2017 Âπ¥ÔºåÂΩìÂÖ®ÁêÉÈ¶ñÊ¨æÂçÉ‰∏áÁ∫ßÈîÄÈáèÁöÑÊô∫ËÉΩÈü≥ÁÆ±ËØûÁîüÊó∂ÔºåÊàë‰ª¨‰ª•‰∏∫Ëß¶Êë∏Âà∞‰∫ÜÊú™Êù•„ÄÇ‰ΩÜÂæàÂø´ÂèëÁé∞ÔºåËøô‰∫õËÆæÂ§áË¢´Âõ∞Âú®„ÄåÊåá‰ª§-ÂìçÂ∫î„ÄçÁöÑÁâ¢Á¨ºÈáåÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÂÆÉÂê¨ÂæóËßÅÂàÜË¥ùÔºåÂç¥Âê¨‰∏çÊáÇÊÉÖÊÑü&lt;/li&gt; 
 &lt;li&gt;ÂÆÉËÉΩÊâßË°åÂëΩ‰ª§ÔºåÂç¥‰∏ç‰ºö‰∏ªÂä®ÊÄùËÄÉ&lt;/li&gt; 
 &lt;li&gt;ÂÆÉÊúâÂçÉ‰∏áÁî®Êà∑ÔºåÂç¥Âè™Êúâ‰∏ÄÂ•óÊÄùÁª¥&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Êàë‰ª¨ÊõæÂπªÊÉ≥‰∏≠ÁöÑ"Ë¥æÁª¥ÊñØ"Á∫ß‰∫∫Â∑•Êô∫ËÉΩÔºåÂú®Áé∞ÂÆûÂú∫ÊôØ‰∏≠Ê≤¶‰∏∫"Â§©Ê∞îÈ¢ÑÊä•+Èü≥‰πêÊí≠ÊîæÂô®"„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÁúüÊ≠£ÁöÑÊô∫ËÉΩ‰∏çÂ∫îË¢´È¢ÑËÆæÁöÑ‰ª£Á†ÅÈÄªËæëÊâÄÊùüÁºöÔºåËÄåÂ∫îÂÉèÁîüÂëΩ‰ΩìËà¨Âú®‰∫§‰∫í‰∏≠ËøõÂåñ„ÄÇ&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Âú®‰∏ä‰∏Ä‰∏™ &lt;a href="https://github.com/idootop/mi-gpt"&gt;MiGPT&lt;/a&gt; È°πÁõÆ‰∏≠ÔºåÊàë‰ª¨Â∑≤ÁªèÂÆûÁé∞Â∞Ü ChatGPT Êé•ÂÖ•Âà∞Â∞èÁà±Èü≥ÁÆ±„ÄÇ&lt;/p&gt; 
&lt;p&gt;Ëøô‰∏ÄÊ¨° &lt;a href="https://github.com/idootop/open-xiaoai"&gt;Open-XiaoAI&lt;/a&gt; ÂÜçÊ¨°ËøõÂåñÔºåÁõ¥Êé•Êé•ÁÆ°Â∞èÁà±Èü≥ÁÆ±ÁöÑ‚ÄúËÄ≥Êúµ‚ÄùÂíå‚ÄúÂò¥Â∑¥‚ÄùÔºå&lt;/p&gt; 
&lt;p&gt;ÈÄöËøáÂ§öÊ®°ÊÄÅÂ§ßÊ®°ÂûãÂíå AI AgentÔºåÂ∞ÜÂ∞èÁà±Èü≥ÁÆ±ÁöÑÊΩúÂäõÂÆåÂÖ®ÈáäÊîæÔºåËß£ÈîÅÊó†ÈôêÂèØËÉΩ„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Êú™Êù•Áî±‰Ω†ÂÆö‰πâ!&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;‰Ω†ÁöÑÂ£∞Èü≥ + Â∞èÁà±Èü≥ÁÆ± = Êó†ÈôêÂèØËÉΩ&lt;/h2&gt; 
&lt;p&gt;üëâ &lt;a href="https://www.bilibili.com/video/BV1TxJhzvEhz"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ•Â∞èÊô∫ AI ÊºîÁ§∫ËßÜÈ¢ë&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/BV1TxJhzvEhz"&gt;&lt;img src="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/xiaozhi.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üëâ &lt;a href="https://www.bilibili.com/video/BV1YfVUz5EMj"&gt;Â∞èÁà±Èü≥ÁÆ±Ëá™ÂÆö‰πâÂî§ÈÜíËØçÊºîÁ§∫ËßÜÈ¢ë&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/BV1YfVUz5EMj"&gt;&lt;img src="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/kws.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üëâ &lt;a href="https://www.bilibili.com/video/BV1N1421y7qn"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ• MiGPT ÊºîÁ§∫ËßÜÈ¢ë&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/BV1N1421y7qn"&gt;&lt;img src="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/migpt.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Âø´ÈÄüÂºÄÂßã&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Êú¨ÊïôÁ®ã‰ªÖÈÄÇÁî®‰∫é &lt;strong&gt;Â∞èÁà±Èü≥ÁÆ± ProÔºàLX06Ôºâ&lt;/strong&gt; Âíå &lt;strong&gt;Xiaomi Êô∫ËÉΩÈü≥ÁÆ± ProÔºàOH2PÔºâ&lt;/strong&gt; Ëøô‰∏§Ê¨æÊú∫ÂûãÔºå&lt;strong&gt;ÂÖ∂‰ªñÂûãÂè∑&lt;/strong&gt;ÁöÑÂ∞èÁà±Èü≥ÁÆ±ËØ∑ÂãøÁõ¥Êé•‰ΩøÁî®ÔºÅüö®&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Êú¨È°πÁõÆÁî± Client Á´Ø + Server Á´Ø‰∏§ÈÉ®ÂàÜÁªÑÊàêÔºå‰Ω†ÂèØ‰ª•ÊåâÁÖß‰ª•‰∏ãÈ°∫Â∫èËøêË°åËØ•È°πÁõÆÔºö&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Âà∑Êú∫Êõ¥Êñ∞Â∞èÁà±Èü≥ÁÆ±Ë°•‰∏ÅÂõ∫‰ª∂ÔºåÂºÄÂêØÂπ∂ SSH ËøûÊé•Âà∞Â∞èÁà±Èü≥ÁÆ± üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/flash.md"&gt;ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Âú®Â∞èÁà±Èü≥ÁÆ±‰∏äÂÆâË£ÖËøêË°å Client Á´ØË°•‰∏ÅÁ®ãÂ∫è üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/packages/client-rust/README.md"&gt;ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ËøêË°å‰ª•‰∏ãÊºîÁ§∫Á®ãÂ∫èÔºå‰ΩìÈ™åÂ∞èÁà±Èü≥ÁÆ±ÁöÑÂÖ®Êñ∞ËÉΩÂäõ ‚ú® 
  &lt;ul&gt; 
   &lt;li&gt;üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/xiaozhi/README.md"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ•Â∞èÊô∫ AI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/kws/README.md"&gt;Â∞èÁà±Èü≥ÁÆ±Ëá™ÂÆö‰πâÂî§ÈÜíËØç&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/migpt/README.md"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ• MiGPTÔºàÂÆåÁæéÁâàÔºâ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/gemini/README.md"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ• Gemini Live API&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;‰ª•‰∏äÁöÜ‰∏∫ÊäõÁ†ñÂºïÁéâÔºå‰Ω†‰πüÂèØ‰ª•‰∫≤ÊâãÁºñÂÜôËá™Â∑±ÊÉ≥Ë¶ÅÁöÑÂäüËÉΩÔºå‰∏ÄÂàáÁî±‰Ω†ÂÆö‰πâÔºÅ&lt;/p&gt; 
&lt;h2&gt;Áõ∏ÂÖ≥È°πÁõÆ&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] ÊäÄÊúØÁöÑÊÑè‰πâÂú®‰∫éÂàÜ‰∫´‰∏éÂÖ±Âàõ„ÄÇÂ¶ÇÊûú‰Ω†ÊâìÁÆóÊàñÊ≠£Âú®‰ΩøÁî®Êú¨È°πÁõÆÂÅö‰∫õÊúâË∂£ÁöÑ‰∫ãÊÉÖÔºå Ê¨¢ËøéÊèê‰∫§ PR Êàñ issue ÂàÜ‰∫´‰Ω†ÁöÑÈ°πÁõÆÂíåÂàõÊÑè„ÄÇ‚ú®&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Â¶ÇÊûú‰Ω†‰∏çÊÉ≥Âà∑Êú∫ÔºåÊàñËÄÖ‰∏çÊòØÂ∞èÁà±Èü≥ÁÆ± ProÔºå‰∏ãÈù¢ÁöÑÈ°πÁõÆÊàñËÆ∏ÂØπ‰Ω†ÊúâÁî®Ôºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/idootop/mi-gpt"&gt;https://github.com/idootop/mi-gpt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/idootop/migpt-next"&gt;https://github.com/idootop/migpt-next&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yihong0618/xiaogpt"&gt;https://github.com/yihong0618/xiaogpt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hanxi/xiaomusic"&gt;https://github.com/hanxi/xiaomusic&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ÂèÇËÄÉÈìæÊé•&lt;/h2&gt; 
&lt;p&gt;Â¶ÇÊûú‰Ω†ÊÉ≥Ë¶Å‰∫ÜËß£Êõ¥Â§öÊäÄÊúØÁªÜËäÇÔºå‰∏ãÈù¢ÁöÑÈìæÊé•ÂèØËÉΩÂØπ‰Ω†ÊúâÁî®Ôºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yihong0618/gitblog/issues/258"&gt;https://github.com/yihong0618/gitblog/issues/258&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jialeicui/open-lx01"&gt;https://github.com/jialeicui/open-lx01&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/duhow/xiaoai-patch"&gt;https://github.com/duhow/xiaoai-patch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javabin.cn/2021/xiaoai_fm.html"&gt;https://javabin.cn/2021/xiaoai_fm.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://xuanxuanblingbling.github.io/iot/2022/09/16/mi/"&gt;https://xuanxuanblingbling.github.io/iot/2022/09/16/mi/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ÂÖçË¥£Â£∞Êòé&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;ÈÄÇÁî®ËåÉÂõ¥&lt;/strong&gt; Êú¨È°πÁõÆ‰∏∫ÂºÄÊ∫êÈùûËê•Âà©È°πÁõÆÔºå‰ªÖ‰æõÂ≠¶ÊúØÁ†îÁ©∂Êàñ‰∏™‰∫∫ÊµãËØïÁî®ÈÄî„ÄÇ‰∏•Á¶ÅÁî®‰∫éÂïÜ‰∏öÊúçÂä°„ÄÅÁΩëÁªúÊîªÂáª„ÄÅÊï∞ÊçÆÁ™ÉÂèñ„ÄÅÁ≥ªÁªüÁ†¥ÂùèÁ≠âËøùÂèç„ÄäÁΩëÁªúÂÆâÂÖ®Ê≥ï„ÄãÂèä‰ΩøÁî®ËÄÖÊâÄÂú®Âú∞Âè∏Ê≥ïÁÆ°ËæñÂå∫ÁöÑÊ≥ïÂæãËßÑÂÆöÁöÑÂú∫ÊôØ„ÄÇ&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ÈùûÂÆòÊñπÂ£∞Êòé&lt;/strong&gt; Êú¨È°πÁõÆÁî±Á¨¨‰∏âÊñπÂºÄÂèëËÄÖÁã¨Á´ãÂºÄÂèëÔºå‰∏éÂ∞èÁ±≥ÈõÜÂõ¢ÂèäÂÖ∂ÂÖ≥ËÅîÊñπÔºà‰∏ãÁß∞"ÊùÉÂà©Êñπ"ÔºâÊó†‰ªª‰ΩïÈö∂Â±û/Âêà‰ΩúÂÖ≥Á≥ªÔºå‰∫¶Êú™Ëé∑ÂÖ∂ÂÆòÊñπÊéàÊùÉ/ËÆ§ÂèØÊàñÊäÄÊúØÊîØÊåÅ„ÄÇÈ°πÁõÆ‰∏≠Ê∂âÂèäÁöÑÂïÜÊ†á„ÄÅÂõ∫‰ª∂„ÄÅ‰∫ëÊúçÂä°ÁöÑÊâÄÊúâÊùÉÂà©ÂΩíÂ±ûÂ∞èÁ±≥ÈõÜÂõ¢„ÄÇËã•ÊùÉÂà©Êñπ‰∏ªÂº†ÊùÉÁõäÔºå‰ΩøÁî®ËÄÖÂ∫îÁ´ãÂç≥‰∏ªÂä®ÂÅúÊ≠¢‰ΩøÁî®Âπ∂Âà†Èô§Êú¨È°πÁõÆ„ÄÇ&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;ÁªßÁª≠‰∏ãËΩΩÊàñËøêË°åÊú¨È°πÁõÆÔºåÂç≥Ë°®Á§∫ÊÇ®Â∑≤ÂÆåÊï¥ÈòÖËØªÂπ∂ÂêåÊÑè&lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/agreement.md"&gt;Áî®Êà∑ÂçèËÆÆ&lt;/a&gt;ÔºåÂê¶ÂàôËØ∑Á´ãÂç≥ÁªàÊ≠¢‰ΩøÁî®Âπ∂ÂΩªÂ∫ïÂà†Èô§Êú¨È°πÁõÆ„ÄÇ&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/LICENSE"&gt;MIT&lt;/a&gt; License ¬© 2024-PRESENT Del Wang&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>astral-sh/ruff</title>
      <link>https://github.com/astral-sh/ruff</link>
      <description>&lt;p&gt;An extremely fast Python linter and code formatter, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruff&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/astral-sh/ruff"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json" alt="Ruff"&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/ruff"&gt;&lt;img src="https://img.shields.io/pypi/v/ruff.svg?sanitize=true" alt="image"&gt;&lt;/a&gt; &lt;a href="https://github.com/astral-sh/ruff/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/pypi/l/ruff.svg?sanitize=true" alt="image"&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/ruff"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/ruff.svg?sanitize=true" alt="image"&gt;&lt;/a&gt; &lt;a href="https://github.com/astral-sh/ruff/actions"&gt;&lt;img src="https://github.com/astral-sh/ruff/workflows/CI/badge.svg?sanitize=true" alt="Actions status"&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/astral-sh"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.astral.sh/ruff/"&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://play.ruff.rs/"&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An extremely fast Python linter and code formatter, written in Rust.&lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://user-images.githubusercontent.com/1309177/232603514-c95e9b0f-6b31-43de-9a80-9e844173fd6a.svg"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg"&gt; 
  &lt;img alt="Shows a bar chart with benchmark results." src="https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg?sanitize=true"&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt;Linting the CPython codebase from scratch.&lt;/i&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚ö°Ô∏è 10-100x faster than existing linters (like Flake8) and formatters (like Black)&lt;/li&gt; 
 &lt;li&gt;üêç Installable via &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;üõ†Ô∏è &lt;code&gt;pyproject.toml&lt;/code&gt; support&lt;/li&gt; 
 &lt;li&gt;ü§ù Python 3.13 compatibility&lt;/li&gt; 
 &lt;li&gt;‚öñÔ∏è Drop-in parity with &lt;a href="https://docs.astral.sh/ruff/faq/#how-does-ruffs-linter-compare-to-flake8"&gt;Flake8&lt;/a&gt;, isort, and &lt;a href="https://docs.astral.sh/ruff/faq/#how-does-ruffs-formatter-compare-to-black"&gt;Black&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üì¶ Built-in caching, to avoid re-analyzing unchanged files&lt;/li&gt; 
 &lt;li&gt;üîß Fix support, for automatic error correction (e.g., automatically remove unused imports)&lt;/li&gt; 
 &lt;li&gt;üìè Over &lt;a href="https://docs.astral.sh/ruff/rules/"&gt;800 built-in rules&lt;/a&gt;, with native re-implementations of popular Flake8 plugins, like flake8-bugbear&lt;/li&gt; 
 &lt;li&gt;‚å®Ô∏è First-party &lt;a href="https://docs.astral.sh/ruff/editors"&gt;editor integrations&lt;/a&gt; for &lt;a href="https://github.com/astral-sh/ruff-vscode"&gt;VS Code&lt;/a&gt; and &lt;a href="https://docs.astral.sh/ruff/editors/setup"&gt;more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üåé Monorepo-friendly, with &lt;a href="https://docs.astral.sh/ruff/configuration/#config-file-discovery"&gt;hierarchical and cascading configuration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Ruff aims to be orders of magnitude faster than alternative tools while integrating more functionality behind a single, common interface.&lt;/p&gt; 
&lt;p&gt;Ruff can be used to replace &lt;a href="https://pypi.org/project/flake8/"&gt;Flake8&lt;/a&gt; (plus dozens of plugins), &lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt;, &lt;a href="https://pypi.org/project/isort/"&gt;isort&lt;/a&gt;, &lt;a href="https://pypi.org/project/pydocstyle/"&gt;pydocstyle&lt;/a&gt;, &lt;a href="https://pypi.org/project/pyupgrade/"&gt;pyupgrade&lt;/a&gt;, &lt;a href="https://pypi.org/project/autoflake/"&gt;autoflake&lt;/a&gt;, and more, all while executing tens or hundreds of times faster than any individual tool.&lt;/p&gt; 
&lt;p&gt;Ruff is extremely actively developed and used in major open-source projects like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/airflow"&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/superset"&gt;Apache Superset&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tiangolo/fastapi"&gt;FastAPI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/transformers"&gt;Hugging Face&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pandas-dev/pandas"&gt;Pandas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/scipy/scipy"&gt;SciPy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;...and &lt;a href="https://raw.githubusercontent.com/astral-sh/ruff/main/#whos-using-ruff"&gt;many more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff is backed by &lt;a href="https://astral.sh"&gt;Astral&lt;/a&gt;. Read the &lt;a href="https://astral.sh/blog/announcing-astral-the-company-behind-ruff"&gt;launch post&lt;/a&gt;, or the original &lt;a href="https://notes.crmarsh.com/python-tooling-could-be-much-much-faster"&gt;project announcement&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Testimonials&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://twitter.com/tiangolo/status/1591912354882764802"&gt;&lt;strong&gt;Sebasti√°n Ram√≠rez&lt;/strong&gt;&lt;/a&gt;, creator of &lt;a href="https://github.com/tiangolo/fastapi"&gt;FastAPI&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Ruff is so fast that sometimes I add an intentional bug in the code just to confirm it's actually running and checking the code.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://twitter.com/schrockn/status/1612615862904827904"&gt;&lt;strong&gt;Nick Schrock&lt;/strong&gt;&lt;/a&gt;, founder of &lt;a href="https://www.elementl.com/"&gt;Elementl&lt;/a&gt;, co-creator of &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Why is Ruff a gamechanger? Primarily because it is nearly 1000x faster. Literally. Not a typo. On our largest module (dagster itself, 250k LOC) pylint takes about 2.5 minutes, parallelized across 4 cores on my M1. Running ruff against our &lt;em&gt;entire&lt;/em&gt; codebase takes .4 seconds.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/bokeh/bokeh/pull/12605"&gt;&lt;strong&gt;Bryan Van de Ven&lt;/strong&gt;&lt;/a&gt;, co-creator of &lt;a href="https://github.com/bokeh/bokeh/"&gt;Bokeh&lt;/a&gt;, original author of &lt;a href="https://docs.conda.io/en/latest/"&gt;Conda&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Ruff is ~150-200x faster than flake8 on my machine, scanning the whole repo takes ~0.2s instead of ~20s. This is an enormous quality of life improvement for local dev. It's fast enough that I added it as an actual commit hook, which is terrific.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://twitter.com/timothycrosley/status/1606420868514877440"&gt;&lt;strong&gt;Timothy Crosley&lt;/strong&gt;&lt;/a&gt;, creator of &lt;a href="https://github.com/PyCQA/isort"&gt;isort&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Just switched my first project to Ruff. Only one downside so far: it's so fast I couldn't believe it was working till I intentionally introduced some errors.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/astral-sh/ruff/issues/465#issuecomment-1317400028"&gt;&lt;strong&gt;Tim Abbott&lt;/strong&gt;&lt;/a&gt;, lead developer of &lt;a href="https://github.com/zulip/zulip"&gt;Zulip&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This is just ridiculously fast... &lt;code&gt;ruff&lt;/code&gt; is amazing.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- End section: Overview --&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;p&gt;For more, see the &lt;a href="https://docs.astral.sh/ruff/"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/astral-sh/ruff/main/#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/astral-sh/ruff/main/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/astral-sh/ruff/main/#rules"&gt;Rules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/astral-sh/ruff/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/astral-sh/ruff/main/#support"&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/astral-sh/ruff/main/#acknowledgements"&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/astral-sh/ruff/main/#whos-using-ruff"&gt;Who's Using Ruff?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/astral-sh/ruff/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Getting Started&lt;a id="getting-started"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;For more, see the &lt;a href="https://docs.astral.sh/ruff/"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;Ruff is available as &lt;a href="https://pypi.org/project/ruff/"&gt;&lt;code&gt;ruff&lt;/code&gt;&lt;/a&gt; on PyPI.&lt;/p&gt; 
&lt;p&gt;Invoke Ruff directly with &lt;a href="https://docs.astral.sh/uv/"&gt;&lt;code&gt;uvx&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;uvx ruff check   # Lint all files in the current directory.
uvx ruff format  # Format all files in the current directory.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or install Ruff with &lt;code&gt;uv&lt;/code&gt; (recommended), &lt;code&gt;pip&lt;/code&gt;, or &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# With uv.
uv tool install ruff@latest  # Install Ruff globally.
uv add --dev ruff            # Or add Ruff to your project.

# With pip.
pip install ruff

# With pipx.
pipx install ruff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Starting with version &lt;code&gt;0.5.0&lt;/code&gt;, Ruff can be installed with our standalone installers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# On macOS and Linux.
curl -LsSf https://astral.sh/ruff/install.sh | sh

# On Windows.
powershell -c "irm https://astral.sh/ruff/install.ps1 | iex"

# For a specific version.
curl -LsSf https://astral.sh/ruff/0.12.5/install.sh | sh
powershell -c "irm https://astral.sh/ruff/0.12.5/install.ps1 | iex"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also install Ruff via &lt;a href="https://formulae.brew.sh/formula/ruff"&gt;Homebrew&lt;/a&gt;, &lt;a href="https://anaconda.org/conda-forge/ruff"&gt;Conda&lt;/a&gt;, and with &lt;a href="https://docs.astral.sh/ruff/installation/"&gt;a variety of other package managers&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;To run Ruff as a linter, try any of the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ruff check                          # Lint all files in the current directory (and any subdirectories).
ruff check path/to/code/            # Lint all files in `/path/to/code` (and any subdirectories).
ruff check path/to/code/*.py        # Lint all `.py` files in `/path/to/code`.
ruff check path/to/code/to/file.py  # Lint `file.py`.
ruff check @arguments.txt           # Lint using an input file, treating its contents as newline-delimited command-line arguments.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, to run Ruff as a formatter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ruff format                          # Format all files in the current directory (and any subdirectories).
ruff format path/to/code/            # Format all files in `/path/to/code` (and any subdirectories).
ruff format path/to/code/*.py        # Format all `.py` files in `/path/to/code`.
ruff format path/to/code/to/file.py  # Format `file.py`.
ruff format @arguments.txt           # Format using an input file, treating its contents as newline-delimited command-line arguments.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ruff can also be used as a &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; hook via &lt;a href="https://github.com/astral-sh/ruff-pre-commit"&gt;&lt;code&gt;ruff-pre-commit&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- repo: https://github.com/astral-sh/ruff-pre-commit
  # Ruff version.
  rev: v0.12.5
  hooks:
    # Run the linter.
    - id: ruff-check
      args: [ --fix ]
    # Run the formatter.
    - id: ruff-format
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ruff can also be used as a &lt;a href="https://github.com/astral-sh/ruff-vscode"&gt;VS Code extension&lt;/a&gt; or with &lt;a href="https://docs.astral.sh/ruff/editors/setup"&gt;various other editors&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff can also be used as a &lt;a href="https://github.com/features/actions"&gt;GitHub Action&lt;/a&gt; via &lt;a href="https://github.com/astral-sh/ruff-action"&gt;&lt;code&gt;ruff-action&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;name: Ruff
on: [ push, pull_request ]
jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration&lt;a id="configuration"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Ruff can be configured through a &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;ruff.toml&lt;/code&gt;, or &lt;code&gt;.ruff.toml&lt;/code&gt; file (see: &lt;a href="https://docs.astral.sh/ruff/configuration/"&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/a&gt;, or &lt;a href="https://docs.astral.sh/ruff/settings/"&gt;&lt;em&gt;Settings&lt;/em&gt;&lt;/a&gt; for a complete list of all configuration options).&lt;/p&gt; 
&lt;p&gt;If left unspecified, Ruff's default configuration is equivalent to the following &lt;code&gt;ruff.toml&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that, in a &lt;code&gt;pyproject.toml&lt;/code&gt;, each section header should be prefixed with &lt;code&gt;tool.ruff&lt;/code&gt;. For example, &lt;code&gt;[lint]&lt;/code&gt; should be replaced with &lt;code&gt;[tool.ruff.lint]&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Some configuration options can be provided via dedicated command-line arguments, such as those related to rule enablement and disablement, file discovery, and logging level:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ruff check --select F401 --select F403 --quiet
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The remaining configuration options can be provided through a catch-all &lt;code&gt;--config&lt;/code&gt; argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ruff check --config "lint.per-file-ignores = {'some_file.py' = ['F841']}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To opt in to the latest lint rules, formatter style changes, interface updates, and more, enable &lt;a href="https://docs.astral.sh/ruff/rules/"&gt;preview mode&lt;/a&gt; by setting &lt;code&gt;preview = true&lt;/code&gt; in your configuration file or passing &lt;code&gt;--preview&lt;/code&gt; on the command line. Preview mode enables a collection of unstable features that may change prior to stabilization.&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;ruff help&lt;/code&gt; for more on Ruff's top-level commands, or &lt;code&gt;ruff help check&lt;/code&gt; and &lt;code&gt;ruff help format&lt;/code&gt; for more on the linting and formatting commands, respectively.&lt;/p&gt; 
&lt;h2&gt;Rules&lt;a id="rules"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;!-- Begin section: Rules --&gt; 
&lt;p&gt;&lt;strong&gt;Ruff supports over 800 lint rules&lt;/strong&gt;, many of which are inspired by popular tools like Flake8, isort, pyupgrade, and others. Regardless of the rule's origin, Ruff re-implements every rule in Rust as a first-party feature.&lt;/p&gt; 
&lt;p&gt;By default, Ruff enables Flake8's &lt;code&gt;F&lt;/code&gt; rules, along with a subset of the &lt;code&gt;E&lt;/code&gt; rules, omitting any stylistic rules that overlap with the use of a formatter, like &lt;code&gt;ruff format&lt;/code&gt; or &lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you're just getting started with Ruff, &lt;strong&gt;the default rule set is a great place to start&lt;/strong&gt;: it catches a wide variety of common errors (like unused imports) with zero configuration.&lt;/p&gt; 
&lt;!-- End section: Rules --&gt; 
&lt;p&gt;Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code quality tools, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/autoflake/"&gt;autoflake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/eradicate/"&gt;eradicate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-2020/"&gt;flake8-2020&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-annotations/"&gt;flake8-annotations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-async"&gt;flake8-async&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-bandit/"&gt;flake8-bandit&lt;/a&gt; (&lt;a href="https://github.com/astral-sh/ruff/issues/1646"&gt;#1646&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-blind-except/"&gt;flake8-blind-except&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-boolean-trap/"&gt;flake8-boolean-trap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-bugbear/"&gt;flake8-bugbear&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-builtins/"&gt;flake8-builtins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-commas/"&gt;flake8-commas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-comprehensions/"&gt;flake8-comprehensions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-copyright/"&gt;flake8-copyright&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-datetimez/"&gt;flake8-datetimez&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-debugger/"&gt;flake8-debugger&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-django/"&gt;flake8-django&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-docstrings/"&gt;flake8-docstrings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-eradicate/"&gt;flake8-eradicate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-errmsg/"&gt;flake8-errmsg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-executable/"&gt;flake8-executable&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-future-annotations/"&gt;flake8-future-annotations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-gettext/"&gt;flake8-gettext&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-implicit-str-concat/"&gt;flake8-implicit-str-concat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/joaopalmeiro/flake8-import-conventions"&gt;flake8-import-conventions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-logging/"&gt;flake8-logging&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-logging-format/"&gt;flake8-logging-format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-no-pep420"&gt;flake8-no-pep420&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-pie/"&gt;flake8-pie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-print/"&gt;flake8-print&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-pyi/"&gt;flake8-pyi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-pytest-style/"&gt;flake8-pytest-style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-quotes/"&gt;flake8-quotes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-raise/"&gt;flake8-raise&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-return/"&gt;flake8-return&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-self/"&gt;flake8-self&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-simplify/"&gt;flake8-simplify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-slots/"&gt;flake8-slots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-super/"&gt;flake8-super&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-tidy-imports/"&gt;flake8-tidy-imports&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-todos/"&gt;flake8-todos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-type-checking/"&gt;flake8-type-checking&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flake8-use-pathlib/"&gt;flake8-use-pathlib&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/flynt/"&gt;flynt&lt;/a&gt; (&lt;a href="https://github.com/astral-sh/ruff/issues/2102"&gt;#2102&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/isort/"&gt;isort&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/mccabe/"&gt;mccabe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/pandas-vet/"&gt;pandas-vet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/pep8-naming/"&gt;pep8-naming&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/pydocstyle/"&gt;pydocstyle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pre-commit/pygrep-hooks"&gt;pygrep-hooks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/pylint-airflow/"&gt;pylint-airflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/pyupgrade/"&gt;pyupgrade&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/tryceratops/"&gt;tryceratops&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/yesqa/"&gt;yesqa&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a complete enumeration of the supported rules, see &lt;a href="https://docs.astral.sh/ruff/rules/"&gt;&lt;em&gt;Rules&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;a id="contributing"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome and highly appreciated. To get started, check out the &lt;a href="https://docs.astral.sh/ruff/contributing/"&gt;&lt;strong&gt;contributing guidelines&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also join us on &lt;a href="https://discord.com/invite/astral-sh"&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;a id="support"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Having trouble? Check out the existing issues on &lt;a href="https://github.com/astral-sh/ruff/issues"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;, or feel free to &lt;a href="https://github.com/astral-sh/ruff/issues/new"&gt;&lt;strong&gt;open a new one&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also ask for help on &lt;a href="https://discord.com/invite/astral-sh"&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;a id="acknowledgements"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Ruff's linter draws on both the APIs and implementation details of many other tools in the Python ecosystem, especially &lt;a href="https://github.com/PyCQA/flake8"&gt;Flake8&lt;/a&gt;, &lt;a href="https://github.com/PyCQA/pyflakes"&gt;Pyflakes&lt;/a&gt;, &lt;a href="https://github.com/PyCQA/pycodestyle"&gt;pycodestyle&lt;/a&gt;, &lt;a href="https://github.com/PyCQA/pydocstyle"&gt;pydocstyle&lt;/a&gt;, &lt;a href="https://github.com/asottile/pyupgrade"&gt;pyupgrade&lt;/a&gt;, and &lt;a href="https://github.com/PyCQA/isort"&gt;isort&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In some cases, Ruff includes a "direct" Rust port of the corresponding tool. We're grateful to the maintainers of these tools for their work, and for all the value they've provided to the Python community.&lt;/p&gt; 
&lt;p&gt;Ruff's formatter is built on a fork of Rome's &lt;a href="https://github.com/rome/tools/tree/main/crates/rome_formatter"&gt;&lt;code&gt;rome_formatter&lt;/code&gt;&lt;/a&gt;, and again draws on both API and implementation details from &lt;a href="https://github.com/rome/tools"&gt;Rome&lt;/a&gt;, &lt;a href="https://github.com/prettier/prettier"&gt;Prettier&lt;/a&gt;, and &lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff's import resolver is based on the import resolution algorithm from &lt;a href="https://github.com/microsoft/pyright"&gt;Pyright&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff is also influenced by a number of tools outside the Python ecosystem, like &lt;a href="https://github.com/rust-lang/rust-clippy"&gt;Clippy&lt;/a&gt; and &lt;a href="https://github.com/eslint/eslint"&gt;ESLint&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff is the beneficiary of a large number of &lt;a href="https://github.com/astral-sh/ruff/graphs/contributors"&gt;contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff is released under the MIT license.&lt;/p&gt; 
&lt;h2&gt;Who's Using Ruff?&lt;a id="whos-using-ruff"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Ruff is used by a number of major open-source projects and companies, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/albumentations-team/albumentations"&gt;Albumentations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Amazon (&lt;a href="https://github.com/aws/serverless-application-model"&gt;AWS SAM&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://apps.ankiweb.net/"&gt;Anki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Anthropic (&lt;a href="https://github.com/anthropics/anthropic-sdk-python"&gt;Python SDK&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/airflow"&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;AstraZeneca (&lt;a href="https://github.com/AstraZeneca/magnus-core"&gt;Magnus&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python-babel/babel"&gt;Babel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Benchling (&lt;a href="https://github.com/benchling/refac"&gt;Refac&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;Bokeh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Capital One (&lt;a href="https://github.com/capitalone/datacompy"&gt;datacompy&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;CrowdCent (&lt;a href="https://github.com/crowdcent/numerblox"&gt;NumerBlox&lt;/a&gt;) 
  &lt;!-- typos: ignore --&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pyca/cryptography"&gt;Cryptography (PyCA)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CERN (&lt;a href="https://getindico.io/"&gt;Indico&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iterative/dvc"&gt;DVC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dagger/dagger"&gt;Dagger&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dagster-io/dagster"&gt;Dagster&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Databricks (&lt;a href="https://github.com/mlflow/mlflow"&gt;MLflow&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/langgenius/dify"&gt;Dify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tiangolo/fastapi"&gt;FastAPI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/godotengine/godot"&gt;Godot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gradio-app/gradio"&gt;Gradio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/great-expectations/great_expectations"&gt;Great Expectations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/encode/httpx"&gt;HTTPX&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pypa/hatch"&gt;Hatch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/home-assistant/core"&gt;Home Assistant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hugging Face (&lt;a href="https://github.com/huggingface/transformers"&gt;Transformers&lt;/a&gt;, &lt;a href="https://github.com/huggingface/datasets"&gt;Datasets&lt;/a&gt;, &lt;a href="https://github.com/huggingface/diffusers"&gt;Diffusers&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;IBM (&lt;a href="https://github.com/Qiskit/qiskit"&gt;Qiskit&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;ING Bank (&lt;a href="https://github.com/ing-bank/popmon"&gt;popmon&lt;/a&gt;, &lt;a href="https://github.com/ing-bank/probatus"&gt;probatus&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ibis-project/ibis"&gt;Ibis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/unifyai/ivy"&gt;ivy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jax-ml/jax"&gt;JAX&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jupyter-server/jupyter_server"&gt;Jupyter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kraken.tech/"&gt;Kraken Tech&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hwchase17/langchain"&gt;LangChain&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://litestar.dev/"&gt;Litestar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jerryjliu/llama_index"&gt;LlamaIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Matrix (&lt;a href="https://github.com/matrix-org/synapse"&gt;Synapse&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oxsecurity/megalinter"&gt;MegaLinter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Meltano (&lt;a href="https://github.com/meltano/meltano"&gt;Meltano CLI&lt;/a&gt;, &lt;a href="https://github.com/meltano/sdk"&gt;Singer SDK&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Microsoft (&lt;a href="https://github.com/microsoft/semantic-kernel"&gt;Semantic Kernel&lt;/a&gt;, &lt;a href="https://github.com/microsoft/onnxruntime"&gt;ONNX Runtime&lt;/a&gt;, &lt;a href="https://github.com/microsoft/LightGBM"&gt;LightGBM&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Modern Treasury (&lt;a href="https://github.com/Modern-Treasury/modern-treasury-python"&gt;Python SDK&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Mozilla (&lt;a href="https://github.com/mozilla/gecko-dev"&gt;Firefox&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python/mypy"&gt;Mypy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nautobot/nautobot"&gt;Nautobot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Netflix (&lt;a href="https://github.com/Netflix/dispatch"&gt;Dispatch&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neondatabase/neon"&gt;Neon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nokia.com/"&gt;Nokia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nonebot/nonebot2"&gt;NoneBot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pyro-ppl/numpyro"&gt;NumPyro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/onnx/onnx"&gt;ONNX&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenBB-finance/OpenBBTerminal"&gt;OpenBB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Open-Wine-Components/umu-launcher"&gt;Open Wine Components&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pdm-project/pdm"&gt;PDM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PaddlePaddle/Paddle"&gt;PaddlePaddle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pandas-dev/pandas"&gt;Pandas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python-pillow/Pillow"&gt;Pillow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python-poetry/poetry"&gt;Poetry&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pola-rs/polars"&gt;Polars&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PostHog/posthog"&gt;PostHog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Prefect (&lt;a href="https://github.com/PrefectHQ/prefect"&gt;Python SDK&lt;/a&gt;, &lt;a href="https://github.com/PrefectHQ/marvin"&gt;Marvin&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pyinstaller/pyinstaller"&gt;PyInstaller&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pymc-devs/pymc/"&gt;PyMC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pymc-labs/pymc-marketing"&gt;PyMC-Marketing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest"&gt;pytest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pytorch/pytorch"&gt;PyTorch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pydantic/pydantic"&gt;Pydantic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyCQA/pylint"&gt;Pylint&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pyvista/pyvista"&gt;PyVista&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reflex-dev/reflex"&gt;Reflex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/online-ml/river"&gt;River&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rippling.com"&gt;Rippling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sansyrox/robyn"&gt;Robyn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saleor/saleor"&gt;Saleor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Scale AI (&lt;a href="https://github.com/scaleapi/launch-python-client"&gt;Launch SDK&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/scipy/scipy"&gt;SciPy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Snowflake (&lt;a href="https://github.com/Snowflake-Labs/snowcli"&gt;SnowCLI&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sphinx-doc/sphinx"&gt;Sphinx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DLR-RM/stable-baselines3"&gt;Stable Baselines3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/encode/starlette"&gt;Starlette&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/streamlit/streamlit"&gt;Streamlit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TheAlgorithms/Python"&gt;The Algorithms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/altair-viz/altair"&gt;Vega-Altair&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://weblate.org/"&gt;Weblate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WordPress (&lt;a href="https://github.com/WordPress/openverse"&gt;Openverse&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zenml-io/zenml"&gt;ZenML&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zulip/zulip"&gt;Zulip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pypa/build"&gt;build (PyPA)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pypa/cibuildwheel"&gt;cibuildwheel (PyPA)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/delta-io/delta-rs"&gt;delta-rs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alteryx/featuretools"&gt;featuretools&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mesonbuild/meson-python"&gt;meson-python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wntrblm/nox"&gt;nox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pypa/pip"&gt;pip&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Show Your Support&lt;/h3&gt; 
&lt;p&gt;If you're using Ruff, consider adding the Ruff badge to your project's &lt;code&gt;README.md&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-md"&gt;[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;...or &lt;code&gt;README.rst&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rst"&gt;.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json
    :target: https://github.com/astral-sh/ruff
    :alt: Ruff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;...or, as HTML:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;a href="https://github.com/astral-sh/ruff"&amp;gt;&amp;lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json" alt="Ruff" style="max-width:100%;"&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;a id="license"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the &lt;a href="https://github.com/astral-sh/ruff/raw/main/LICENSE"&gt;MIT License&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a target="_blank" href="https://astral.sh" style="background:none"&gt; &lt;img src="https://raw.githubusercontent.com/astral-sh/ruff/main/assets/svg/Astral.svg?sanitize=true" alt="Made by Astral"&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>apache/datafusion</title>
      <link>https://github.com/apache/datafusion</link>
      <description>&lt;p&gt;Apache DataFusion SQL Query Engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache DataFusion&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/datafusion"&gt;&lt;img src="https://img.shields.io/crates/v/datafusion.svg?sanitize=true" alt="Crates.io"&gt;&lt;/a&gt; &lt;a href="https://github.com/apache/datafusion/raw/main/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%20v2-blue.svg?sanitize=true" alt="Apache licensed"&gt;&lt;/a&gt; &lt;a href="https://github.com/apache/datafusion/actions?query=branch%3Amain"&gt;&lt;img src="https://github.com/apache/datafusion/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Build Status"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/commit-activity/m/apache/datafusion" alt="Commit Activity"&gt; &lt;a href="https://github.com/apache/datafusion/issues"&gt;&lt;img src="https://img.shields.io/github/issues-raw/apache/datafusion" alt="Open Issues"&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/Qw5gKqHxUM"&gt;&lt;img src="https://img.shields.io/badge/Chat-Discord-purple" alt="Discord chat"&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/apache-datafusion/"&gt;&lt;img src="https://img.shields.io/badge/Follow-Linkedin-blue" alt="Linkedin"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/msrv/datafusion?label=Min%20Rust%20Version" alt="Crates.io MSRV"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://datafusion.apache.org/"&gt;Website&lt;/a&gt; | &lt;a href="https://docs.rs/datafusion/latest/datafusion/"&gt;API Docs&lt;/a&gt; | &lt;a href="https://discord.com/channels/885562378132000778/885562378132000781"&gt;Chat&lt;/a&gt;&lt;/p&gt; 
&lt;a href="https://datafusion.apache.org/"&gt; &lt;img src="https://github.com/apache/datafusion/raw/HEAD/docs/source/_static/images/2x_bgwhite_original.png" width="512" alt="logo"&gt; &lt;/a&gt; 
&lt;p&gt;DataFusion is an extensible query engine written in &lt;a href="http://rustlang.org"&gt;Rust&lt;/a&gt; that uses &lt;a href="https://arrow.apache.org"&gt;Apache Arrow&lt;/a&gt; as its in-memory format.&lt;/p&gt; 
&lt;p&gt;This crate provides libraries and binaries for developers building fast and feature rich database and analytic systems, customized to particular workloads. See &lt;a href="https://datafusion.apache.org/user-guide/introduction.html#use-cases"&gt;use cases&lt;/a&gt; for examples. The following related subprojects target end users:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion-python/"&gt;DataFusion Python&lt;/a&gt; offers a Python interface for SQL and DataFrame queries.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion-ray/"&gt;DataFusion Ray&lt;/a&gt; provides a distributed version of DataFusion that scales out on Ray clusters.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion-comet/"&gt;DataFusion Comet&lt;/a&gt; is an accelerator for Apache Spark based on DataFusion.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;"Out of the box," DataFusion offers [SQL] and [&lt;code&gt;Dataframe&lt;/code&gt;] APIs, excellent &lt;a href="https://benchmark.clickhouse.com/"&gt;performance&lt;/a&gt;, built-in support for CSV, Parquet, JSON, and Avro, extensive customization, and a great community.&lt;/p&gt; 
&lt;p&gt;DataFusion features a full query planner, a columnar, streaming, multi-threaded, vectorized execution engine, and partitioned data sources. You can customize DataFusion at almost all points including additional data sources, query languages, functions, custom operators and more. See the &lt;a href="https://datafusion.apache.org/contributor-guide/architecture.html"&gt;Architecture&lt;/a&gt; section for more details.&lt;/p&gt; 
&lt;p&gt;Here are links to some important information&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/"&gt;Project Site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/cli/installation.html"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/example-usage.html"&gt;Rust Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/dataframe.html"&gt;Rust DataFrame API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/datafusion/latest/datafusion"&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion/tree/main/datafusion-examples"&gt;Rust Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://arrow.apache.org/datafusion-python/"&gt;Python DataFrame API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/datafusion/latest/datafusion/index.html#architecture"&gt;Architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What can you do with this crate?&lt;/h2&gt; 
&lt;p&gt;DataFusion is great for building projects such as domain specific query engines, new database platforms and data pipelines, query languages and more. It lets you start quickly from a fully working engine, and then customize those features specific to your use. &lt;a href="https://datafusion.apache.org/user-guide/introduction.html#known-users"&gt;Click Here&lt;/a&gt; to see a list known users.&lt;/p&gt; 
&lt;h2&gt;Contributing to DataFusion&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://datafusion.apache.org/contributor-guide"&gt;contributor guide&lt;/a&gt; and &lt;a href="https://datafusion.apache.org/contributor-guide/communication.html"&gt;communication&lt;/a&gt; pages for more information.&lt;/p&gt; 
&lt;h2&gt;Crate features&lt;/h2&gt; 
&lt;p&gt;This crate has several &lt;a href="https://doc.rust-lang.org/cargo/reference/features.html"&gt;features&lt;/a&gt; which can be specified in your &lt;code&gt;Cargo.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Default features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nested_expressions&lt;/code&gt;: functions for working with nested type function such as &lt;code&gt;array_to_string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;compression&lt;/code&gt;: reading files compressed with &lt;code&gt;xz2&lt;/code&gt;, &lt;code&gt;bzip2&lt;/code&gt;, &lt;code&gt;flate2&lt;/code&gt;, and &lt;code&gt;zstd&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;crypto_expressions&lt;/code&gt;: cryptographic functions such as &lt;code&gt;md5&lt;/code&gt; and &lt;code&gt;sha256&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datetime_expressions&lt;/code&gt;: date and time functions such as &lt;code&gt;to_timestamp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encoding_expressions&lt;/code&gt;: &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt; functions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parquet&lt;/code&gt;: support for reading the &lt;a href="https://parquet.apache.org/"&gt;Apache Parquet&lt;/a&gt; format&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parquet_encryption&lt;/code&gt;: support for using &lt;a href="https://parquet.apache.org/docs/file-format/data-pages/encryption/"&gt;Parquet Modular Encryption&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;regex_expressions&lt;/code&gt;: regular expression functions, such as &lt;code&gt;regexp_match&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unicode_expressions&lt;/code&gt;: Include unicode aware functions such as &lt;code&gt;character_length&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unparser&lt;/code&gt;: enables support to reverse LogicalPlans back into SQL&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;recursive_protection&lt;/code&gt;: uses &lt;a href="https://docs.rs/recursive/latest/recursive/"&gt;recursive&lt;/a&gt; for stack overflow protection.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;avro&lt;/code&gt;: support for reading the &lt;a href="https://avro.apache.org/"&gt;Apache Avro&lt;/a&gt; format&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;backtrace&lt;/code&gt;: include backtrace information in error messages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pyarrow&lt;/code&gt;: conversions between PyArrow and DataFusion types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;serde&lt;/code&gt;: enable arrow-schema's &lt;code&gt;serde&lt;/code&gt; feature&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;DataFusion API Evolution and Deprecation Guidelines&lt;/h2&gt; 
&lt;p&gt;Public methods in Apache DataFusion evolve over time: while we try to maintain a stable API, we also improve the API over time. As a result, we typically deprecate methods before removing them, according to the &lt;a href="https://datafusion.apache.org/library-user-guide/api-health.html"&gt;deprecation guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Dependencies and &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Following the &lt;a href="https://blog.rust-lang.org/2023/08/29/committing-lockfiles.html"&gt;guidance&lt;/a&gt; on committing &lt;code&gt;Cargo.lock&lt;/code&gt; files, this project commits its &lt;code&gt;Cargo.lock&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;CI uses the committed &lt;code&gt;Cargo.lock&lt;/code&gt; file, and dependencies are updated regularly using &lt;a href="https://docs.github.com/en/code-security/dependabot/working-with-dependabot"&gt;Dependabot&lt;/a&gt; PRs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rustdesk/rustdesk</title>
      <link>https://github.com/rustdesk/rustdesk</link>
      <description>&lt;p&gt;An open-source remote desktop application designed for self-hosting, as an alternative to TeamViewer.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rustdesk/rustdesk/master/res/logo-header.svg?sanitize=true" alt="RustDesk - Your remote desktop"&gt;&lt;br&gt; &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build"&gt;Build&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker"&gt;Docker&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure"&gt;Structure&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot"&gt;Snapshot&lt;/a&gt;&lt;br&gt; [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-UA.md"&gt;–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-CS.md"&gt;ƒçesky&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ZH.md"&gt;‰∏≠Êñá&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-HU.md"&gt;Magyar&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ES.md"&gt;Espa√±ol&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FA.md"&gt;ŸÅÿßÿ±ÿ≥€å&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FR.md"&gt;Fran√ßais&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DE.md"&gt;Deutsch&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PL.md"&gt;Polski&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ID.md"&gt;Indonesian&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FI.md"&gt;Suomi&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ML.md"&gt;‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-JP.md"&gt;Êó•Êú¨Ë™û&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NL.md"&gt;Nederlands&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-IT.md"&gt;Italiano&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RU.md"&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PTBR.md"&gt;Portugu√™s (Brasil)&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-EO.md"&gt;Esperanto&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-KR.md"&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-AR.md"&gt;ÿßŸÑÿπÿ±ÿ®Ÿä&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-VN.md"&gt;Ti·∫øng Vi·ªát&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DA.md"&gt;Dansk&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-GR.md"&gt;ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-TR.md"&gt;T√ºrk√ße&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NO.md"&gt;Norsk&lt;/a&gt;]&lt;br&gt; &lt;b&gt;We need your help to translate this README, &lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/lang"&gt;RustDesk UI&lt;/a&gt; and &lt;a href="https://github.com/rustdesk/doc.rustdesk.com"&gt;RustDesk Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Caution] &lt;strong&gt;Misuse Disclaimer:&lt;/strong&gt; &lt;br&gt; The developers of RustDesk do not condone or support any unethical or illegal use of this software. Misuse, such as unauthorized access, control or invasion of privacy, is strictly against our guidelines. The authors are not responsible for any misuse of the application.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Chat with us: &lt;a href="https://discord.gg/nDceKgxnkV"&gt;Discord&lt;/a&gt; | &lt;a href="https://twitter.com/rustdesk"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/rustdesk"&gt;Reddit&lt;/a&gt; | &lt;a href="https://www.youtube.com/@rustdesk"&gt;YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://ko-fi.com/I2I04VU09"&gt;&lt;img src="https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Yet another remote desktop solution, written in Rust. Works out of the box with no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href="https://rustdesk.com/server"&gt;set up your own&lt;/a&gt;, or &lt;a href="https://github.com/rustdesk/rustdesk-server-demo"&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png" alt="image"&gt;&lt;/p&gt; 
&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for help getting started.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/wiki/FAQ"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases"&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases/tag/nightly"&gt;&lt;strong&gt;NIGHTLY BUILD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://f-droid.org/en/packages/com.carriez.flutter_hbb"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" height="80"&gt;&lt;/a&gt; &lt;a href="https://flathub.org/apps/com.rustdesk.RustDesk"&gt;&lt;img src="https://flathub.org/api/badge?svg&amp;amp;locale=en" alt="Get it on Flathub" height="80"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;Desktop versions use Flutter or Sciter (deprecated) for GUI, this tutorial is for Sciter only, since it is easier and more friendly to start. Check out our &lt;a href="https://github.com/rustdesk/rustdesk/raw/master/.github/workflows/flutter-build.yml"&gt;CI&lt;/a&gt; for building Flutter version.&lt;/p&gt; 
&lt;p&gt;Please download Sciter dynamic library yourself.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"&gt;Windows&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so"&gt;Linux&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib"&gt;macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Raw Steps to build&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://github.com/microsoft/vcpkg"&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static&lt;/li&gt; 
   &lt;li&gt;Linux/macOS: vcpkg install libvpx libyuv opus aom&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://rustdesk.com/docs/en/dev/build/"&gt;Build&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;How to Build on Linux&lt;/h2&gt; 
&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y zip g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev \
        libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake make \
        libclang-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpam0g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libXfixes-devel cmake alsa-lib-devel gstreamer-devel gstreamer-plugins-base-devel xdotool-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel gstreamer1-devel gstreamer1-plugins-base-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pipewire
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install vcpkg&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/microsoft/vcpkg
cd vcpkg
git checkout 2023.04.15
cd ..
vcpkg/bootstrap-vcpkg.sh
export VCPKG_ROOT=$HOME/vcpkg
vcpkg/vcpkg install libvpx libyuv opus aom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd vcpkg/buildtrees/libvpx/src
cd *
./configure
sed -i 's/CFLAGS+=-I/CFLAGS+=-fPIC -I/g' Makefile
sed -i 's/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g' Makefile
make
cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/
cd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
git clone --recurse-submodules https://github.com/rustdesk/rustdesk
cd rustdesk
mkdir -p target/debug
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so
mv libsciter-gtk.so target/debug
VCPKG_ROOT=$HOME/vcpkg cargo run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build with Docker&lt;/h2&gt; 
&lt;p&gt;Begin by cloning the repository and building the Docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/rustdesk/rustdesk
cd rustdesk
git submodule update --init --recursive
docker build -t "rustdesk-builder" .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID="$(id -u)" -e PGID="$(id -g)" rustdesk-builder
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/debug/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you're running a release executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/release/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please ensure that you run these commands from the root of the RustDesk repository, or the application may not find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; 
&lt;h2&gt;File Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common"&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/scrap"&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/enigo"&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/clipboard"&gt;libs/clipboard&lt;/a&gt;&lt;/strong&gt;: file copy and paste implementation for Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/ui"&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: obsolete Sciter UI (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/server"&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/client.rs"&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs"&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href="https://github.com/rustdesk/rustdesk-server"&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/platform"&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter"&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for desktop and mobile&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter/web/v1/js"&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: JavaScript for Flutter web client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/db82d4e7-c4bc-4823-8e6f-6af7eadf7651" alt="Connection Manager"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/9baa91e9-3362-4d06-aa1a-7518edcbd7ea" alt="Connected to a Windows PC"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/39511ad3-aa9a-4f8c-8947-1cce286a46ad" alt="File Transfer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/78e8708f-e87e-4570-8373-1360033ea6c5" alt="TCP Tunneling"&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cachix/devenv</title>
      <link>https://github.com/cachix/devenv</link>
      <description>&lt;p&gt;Fast, Declarative, Reproducible, and Composable Developer Environments using Nix&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://devenv.sh"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="logos/devenv-horizontal-light-bg.svg"&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="logos/devenv-horizontal-dark-bg.svg"&gt; 
   &lt;img src="https://raw.githubusercontent.com/cachix/devenv/main/logos/devenv-horizontal-light-bg.svg?sanitize=true" width="500px" alt="devenv logo"&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;&lt;a href="https://devenv.sh"&gt;devenv.sh&lt;/a&gt; - Fast, Declarative, Reproducible, and Composable Developer Environments&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://builtwithnix.org"&gt;&lt;img src="https://img.shields.io/static/v1?logo=nixos&amp;amp;logoColor=white&amp;amp;label=&amp;amp;message=Built%20with%20Nix&amp;amp;color=41439a" alt="Built with Nix"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/naMgvexb6q"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscord.com%2Fapi%2Finvites%2FnaMgvexb6q%3Fwith_counts%3Dtrue&amp;amp;query=%24.approximate_member_count&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;label=Discord%20users&amp;amp;color=green&amp;amp;style=flat" alt="Discord channel"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/license/cachix/devenv" alt="License: Apache 2.0"&gt; &lt;a href="https://github.com/cachix/devenv/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/cachix/devenv?color=green&amp;amp;label=version&amp;amp;sort=semver" alt="Version"&gt;&lt;/a&gt; &lt;a href="https://github.com/cachix/devenv/actions/workflows/buildtest.yml?branch=main"&gt;&lt;img src="https://github.com/cachix/devenv/actions/workflows/buildtest.yml/badge.svg?sanitize=true" alt="CI"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Running &lt;code&gt;devenv init&lt;/code&gt; generates &lt;code&gt;devenv.nix&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-nix"&gt;{ pkgs, ... }:

{
  # https://devenv.sh/basics/
  env.GREET = "devenv";

  # https://devenv.sh/packages/
  packages = [ pkgs.git ];

  enterShell = ''
    hello
  '';

  # https://devenv.sh/tests/
  enterTest = ''
    echo "Running tests"
    git --version | grep --color=auto "${pkgs.git.version}"
  '';

  # https://devenv.sh/languages/
  languages.nix.enable = true;

  # https://devenv.sh/scripts/
  scripts.hello.exec = "echo hello from $GREET";

  # https://devenv.sh/services/
  services.postgres.enable = true;

  # https://devenv.sh/git-hooks/
  git-hooks.hooks.shellcheck.enable = true;

  # https://devenv.sh/processes/
  processes.ping.exec = "ping localhost";
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And &lt;code&gt;devenv shell&lt;/code&gt; activates the environment.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;$ devenv
https://devenv.sh 1.6.0: Fast, Declarative, Reproducible, and Composable Developer Environments

Usage: devenv [OPTIONS] [COMMAND]

Commands:
  init       Scaffold devenv.yaml, devenv.nix, .gitignore and .envrc.
  generate   Generate devenv.yaml and devenv.nix using AI
  shell      Activate the developer environment. https://devenv.sh/basics/
  update     Update devenv.lock from devenv.yaml inputs. http://devenv.sh/inputs/
  search     Search for packages and options in nixpkgs. https://devenv.sh/packages/#searching-for-a-file
  info       Print information about this developer environment.
  up         Start processes in the foreground. https://devenv.sh/processes/
  processes  Start or stop processes. https://devenv.sh/processes/
  tasks      Run tasks. https://devenv.sh/tasks/
  test       Run tests. http://devenv.sh/tests/
  container  Build, copy, or run a container. https://devenv.sh/containers/
  inputs     Add an input to devenv.yaml. https://devenv.sh/inputs/
  repl       Launch an interactive environment for inspecting the devenv configuration.
  gc         Delete previous shell generations. See https://devenv.sh/garbage-collection
  build      Build any attribute in devenv.nix.
  direnvrc   Print a direnvrc that adds devenv support to direnv. See https://devenv.sh/automatic-shell-activation.
  version    Print the version of devenv.
  help       Print this message or the help of the given subcommand(s)

Options:
  -V, --version
          Print version information and exit

  -v, --verbose
          Enable additional debug logs.

  -q, --quiet
          Silence all logs

      --log-format &amp;lt;LOG_FORMAT&amp;gt;
          Configure the output format of the logs.

          [default: cli]

          Possible values:
          - cli:            The default human-readable log format used in the CLI
          - tracing-full:   A verbose structured log format used for debugging
          - tracing-pretty: A pretty human-readable log format used for debugging

  -j, --max-jobs &amp;lt;MAX_JOBS&amp;gt;
          Maximum number of Nix builds at any time.

          [default: 8]

  -u, --cores &amp;lt;CORES&amp;gt;
          Maximum number CPU cores being used by a single build.

          [default: 2]

  -s, --system &amp;lt;SYSTEM&amp;gt;
          [default: x86_64-linux]

  -i, --impure
          Relax the hermeticity of the environment.

      --no-eval-cache
          Disable caching of Nix evaluation results.

      --refresh-eval-cache
          Force a refresh of the Nix evaluation cache.

      --offline
          Disable substituters and consider all previously downloaded files up-to-date.

  -c, --clean [&amp;lt;CLEAN&amp;gt;...]
          Ignore existing environment variables when entering the shell. Pass a list of comma-separated environment variables to let through.

      --nix-debugger
          Enter the Nix debugger on failure.

  -n, --nix-option &amp;lt;NAME&amp;gt; &amp;lt;VALUE&amp;gt;
          Pass additional options to nix commands.

          These options are passed directly to Nix using the --option flag.
          See `man nix.conf` for the full list of available options.

          Examples:
            --nix-option sandbox false
            --nix-option keep-outputs true
            --nix-option system x86_64-darwin

  -o, --override-input &amp;lt;NAME&amp;gt; &amp;lt;URI&amp;gt;
          Override inputs in devenv.yaml.

          Examples:
            --override-input nixpkgs github:NixOS/nixpkgs/nixos-unstable
            --override-input nixpkgs path:/path/to/local/nixpkgs

  -O, --option &amp;lt;OPTION&amp;gt; &amp;lt;VALUE&amp;gt;
          Override configuration options with typed values.

          OPTION must include a type: &amp;lt;attribute&amp;gt;:&amp;lt;type&amp;gt;
          Supported types: string, int, float, bool, path

          Examples:
            --option languages.rust.channel:string beta
            --option services.postgres.enable:bool true
            --option languages.python.version:string 3.10

  -h, --help
          Print help (see a summary with '-h')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://devenv.sh/getting-started/"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devenv.sh/basics/"&gt;Basics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devenv.sh/roadmap/"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devenv.sh/blog/"&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devenv.sh/reference/yaml-options/"&gt;&lt;code&gt;devenv.yaml&lt;/code&gt; reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devenv.sh/reference/options/"&gt;&lt;code&gt;devenv.nix&lt;/code&gt; reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devenv.sh/community/contributing/"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jj-vcs/jj</title>
      <link>https://github.com/jj-vcs/jj</link>
      <description>&lt;p&gt;A Git-compatible VCS that is both simple and powerful&lt;/p&gt;&lt;hr&gt;&lt;div class="title-block" style="text-align: center;" align="center"&gt; 
 &lt;h1&gt;Jujutsu‚Äîa version control system&lt;/h1&gt; 
 &lt;p&gt;&lt;img title="jj logo" src="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/jj-logo.svg?sanitize=true" width="320" height="320"&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/martinvonz/jj" alt="Release"&gt;&lt;/a&gt; &lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/release-date/martinvonz/jj" alt="Release date"&gt;&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/jj-vcs/jj/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/martinvonz/jj" alt="License"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;img src="https://img.shields.io/badge/irc-%23jujutsu-blue.svg?sanitize=true" alt="IRC"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj"&gt;Homepage&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;Installation&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/roadmap"&gt;Development Roadmap&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Jujutsu is a powerful &lt;a href="https://en.wikipedia.org/wiki/Version_control"&gt;version control system&lt;/a&gt; for software projects. You use it to get a copy of your code, track changes to the code, and finally publish those changes for others to see and use. It is designed from the ground up to be easy to use‚Äîwhether you're new or experienced, working on brand new projects alone, or large scale software projects with large histories and teams.&lt;/p&gt; 
&lt;p&gt;Jujutsu is unlike most other systems, because internally it abstracts the user interface and version control algorithms from the &lt;em&gt;storage systems&lt;/em&gt; used to serve your content. This allows it to serve as a VCS with many possible physical backends, that may have their own data or networking models‚Äîlike &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt; or &lt;a href="https://www.breezy-vcs.org/"&gt;Breezy&lt;/a&gt;, or hybrid systems like Google's cloud-based design, &lt;a href="https://youtu.be/W71BTkUbdqE?t=645"&gt;Piper/CitC&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Today, we use Git repositories as a storage layer to serve and track content, making it &lt;strong&gt;compatible with many of your favorite Git-based tools, right now!&lt;/strong&gt; All core developers use Jujutsu to develop Jujutsu, right here on GitHub. But it should hopefully work with your favorite Git forges, too.&lt;/p&gt; 
&lt;p&gt;We combine many distinct design choices and concepts from other version control systems into a single tool. Some of those sources of inspiration include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;: We make an effort to &lt;a href="https://github.com/jj-vcs/jj/discussions/49"&gt;be fast&lt;/a&gt;‚Äîwith a snappy UX, efficient algorithms, correct data structures, and good-old-fashioned attention to detail. The default storage backend uses Git repositories for "physical storage", for wide interoperability and ease of onboarding.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mercurial &amp;amp; Sapling&lt;/strong&gt;: There are many Mercurial-inspired features, such as the &lt;a href="https://jj-vcs.github.io/jj/latest/revsets/"&gt;revset&lt;/a&gt; language to select commits. There is &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison/#the-index"&gt;no explicit index&lt;/a&gt; or staging area. Branches are "anonymous" like Mercurial, so you don't need to make up a name for each small change. Primitives for rewriting history are powerful and simple. Formatting output is done with a robust template language that can be configured by the user.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Darcs&lt;/strong&gt;: Jujutsu keeps track of conflicts as &lt;a href="https://jj-vcs.github.io/jj/latest/conflicts/"&gt;first-class objects&lt;/a&gt; in its model; they are first-class in the same way commits are, while alternatives like Git simply think of conflicts as textual diffs. While not as rigorous as systems like Darcs (which is based on a formalized theory of patches, as opposed to snapshots), the effect is that many forms of conflict resolution can be performed and propagated automatically.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And it adds several innovative, useful features of its own:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Working-copy-as-a-commit&lt;/strong&gt;: Changes to files are &lt;a href="https://jj-vcs.github.io/jj/latest/working-copy/"&gt;recorded automatically&lt;/a&gt; as normal commits, and amended on every subsequent change. This "snapshot" design simplifies the user-facing data model (commits are the only visible object), simplifies internal algorithms, and completely subsumes features like Git's stashes or the index/staging-area.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Operation log &amp;amp; undo&lt;/strong&gt;: Jujutsu records every operation that is performed on the repository, from commits, to pulls, to pushes. This makes debugging problems like "what just happened?" or "how did I end up here?" easier, &lt;em&gt;especially&lt;/em&gt; when you're helping your coworker answer those questions about their repository! And because everything is recorded, you can undo that mistake you just made with ease. Version control has finally entered &lt;a href="https://en.wikipedia.org/wiki/Undo#History"&gt;the 1960s&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic rebase and conflict resolution&lt;/strong&gt;: When you modify a commit, every descendent is automatically rebased on top of the freshly-modified one. This makes "patch-based" workflows a breeze. If you resolve a conflict in a commit, the &lt;em&gt;resolution&lt;/em&gt; of that conflict is also propagated through descendants as well. In effect, this is a completely transparent version of &lt;code&gt;git rebase --update-refs&lt;/code&gt; combined with &lt;code&gt;git rerere&lt;/code&gt;, supported by design.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The following features are available for use, but experimental; they may have bugs, backwards incompatible storage changes, and user-interface changes!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Safe, concurrent replication&lt;/strong&gt;: Have you ever wanted to store your version controlled repositories inside a Dropbox folder? Or continuously backup repositories to S3? No? Well, now you can!&lt;/p&gt; &lt;p&gt;The fundamental problem with using filesystems like Dropbox and backup tools like &lt;code&gt;rsync&lt;/code&gt; on your typical Git/Mercurial repositories is that they rely on &lt;em&gt;local filesystem operations&lt;/em&gt; being atomic, serialized, and non-concurrent with respect to other reads and writes‚Äîwhich is &lt;em&gt;not&lt;/em&gt; true when operating on distributed file systems, or when operations like concurrent file copies (for backup) happen while lock files are being held.&lt;/p&gt; &lt;p&gt;Jujutsu is instead designed to be &lt;a href="https://jj-vcs.github.io/jj/latest/technical/concurrency/"&gt;safe under concurrent scenarios&lt;/a&gt;; simply using rsync or Dropbox and then using that resulting repository should never result in a repository in a &lt;em&gt;corrupt state&lt;/em&gt;. The worst that &lt;em&gt;should&lt;/em&gt; happen is that it will expose conflicts between the local and remote state, leaving you to resolve them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The command-line tool is called &lt;code&gt;jj&lt;/code&gt; for now because it's easy to type and easy to replace (rare in English). The project is called "Jujutsu" because it matches "jj".&lt;/p&gt; 
&lt;p&gt;Jujutsu is relatively young, with lots of work to still be done. If you have any questions, or want to talk about future plans, please join us on Discord &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord"&gt;&lt;/a&gt;, start a &lt;a href="https://github.com/jj-vcs/jj/discussions"&gt;GitHub Discussion&lt;/a&gt;, or send an IRC message to &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;code&gt;#jujutsu&lt;/code&gt; on Libera Chat&lt;/a&gt;. The developers monitor all of these channels[^bridge].&lt;/p&gt; 
&lt;p&gt;[^bridge]: To be more precise, the &lt;code&gt;#jujutsu&lt;/code&gt; Libera IRC channel is bridged to one of the channels on jj's Discord. Some of the developers stay on Discord and use the bridge to follow IRC.&lt;/p&gt; 
&lt;h3&gt;News and Updates üì£&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;December 2024&lt;/strong&gt;: The &lt;code&gt;jj&lt;/code&gt; Repository has moved to the &lt;code&gt;jj-vcs&lt;/code&gt; GitHub organisation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;November 2024&lt;/strong&gt;: Version 0.24 is released which adds &lt;code&gt;jj file annotate&lt;/code&gt;, which is equivalent to &lt;code&gt;git blame&lt;/code&gt; or &lt;code&gt;hg annotate&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;September 2024&lt;/strong&gt;: Martin gave a &lt;a href="https://www.youtube.com/watch?v=LV0JzI8IcCY"&gt;presentation about Jujutsu&lt;/a&gt; at Git Merge 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Version 0.14 is released, which deprecates &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/CHANGELOG.md#0140---2024-02-07"&gt;"jj checkout" and "jj merge"&lt;/a&gt;, as well as &lt;code&gt;jj init --git&lt;/code&gt;, which is now just called &lt;code&gt;jj git init&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Oct 2023&lt;/strong&gt;: Version 0.10.0 is released! Now includes a bundled merge and diff editor for all platforms, "immutable revsets" to avoid accidentally &lt;code&gt;edit&lt;/code&gt;-ing the wrong revisions, and lots of polish.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin gave a presentation about Google's plans for Jujutsu at Git Merge 2022! See the &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt; or the &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;recording&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Related Media&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mar 2024&lt;/strong&gt;: Chris Krycho started &lt;a href="https://www.youtube.com/playlist?list=PLelyiwKWHHAq01Pvmpf6x7J0y-yQpmtxp"&gt;a YouTube series about Jujutsu&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Chris Krycho published an article about Jujutsu called &lt;a href="https://v5.chriskrycho.com/essays/jj-init/"&gt;jj init&lt;/a&gt; and Steve Klabnik followed up with the &lt;a href="https://steveklabnik.github.io/jujutsu-tutorial/"&gt;Jujutsu Tutorial&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2024&lt;/strong&gt;: Jujutsu was featured in an LWN.net article called &lt;a href="https://lwn.net/Articles/958468/"&gt;Jujutsu: a new, Git-compatible version control system&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin's Talk about Jujutsu at Git Merge 2022, &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;video&lt;/a&gt; and the associated &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The wiki also contains a more extensive list of &lt;a href="https://github.com/jj-vcs/jj/wiki/Media"&gt;media references&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Jujutsu is an &lt;strong&gt;experimental version control system&lt;/strong&gt;. While Git compatibility is stable, and most developers use it daily for all their needs, there may still be work-in-progress features, suboptimal UX, and workflow gaps that make it unusable for your particular use.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Follow the &lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;installation instructions&lt;/a&gt; to obtain and configure &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The best way to get started is probably to go through &lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;the tutorial&lt;/a&gt;. Also see the &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison"&gt;Git comparison&lt;/a&gt;, which includes a table of &lt;code&gt;jj&lt;/code&gt; vs. &lt;code&gt;git&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;As you become more familiar with Jujutsu, the following resources may be helpful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/FAQ"&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/glossary"&gt;Glossary&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help&lt;/code&gt; command (e.g. &lt;code&gt;jj help rebase&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help -k &amp;lt;keyword&amp;gt;&lt;/code&gt; command (e.g. &lt;code&gt;jj help -k config&lt;/code&gt;). Use &lt;code&gt;jj help --help&lt;/code&gt; to see what keywords are available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are using a &lt;strong&gt;prerelease&lt;/strong&gt; version of &lt;code&gt;jj&lt;/code&gt;, you would want to consult &lt;a href="https://jj-vcs.github.io/jj/prerelease/"&gt;the docs for the prerelease (main branch) version&lt;/a&gt;. You can also get there from the docs for the latest release by using the website's version switcher. The version switcher is visible in the header of the website when you scroll to the top of any page.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Compatible with Git&lt;/h3&gt; 
&lt;p&gt;Jujutsu is designed so that the underlying data and storage model is abstract. Today, only the Git backend is production-ready. The Git backend uses the &lt;a href="https://github.com/Byron/gitoxide"&gt;gitoxide&lt;/a&gt; Rust library.&lt;/p&gt; 
&lt;p&gt;The Git backend is fully featured and maintained, and allows you to use Jujutsu with any Git remote. The commits you create will look like regular Git commits. You can fetch branches from a regular Git remote and push branches to the remote. You can always switch back to Git.&lt;/p&gt; 
&lt;p&gt;Here is how you can explore a GitHub repository with &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/git_compat.png"&gt; 
&lt;p&gt;You can even have a &lt;a href="https://jj-vcs.github.io/jj/latest/git-compatibility#co-located-jujutsugit-repos"&gt;"co-located" local repository&lt;/a&gt; where you can use both &lt;code&gt;jj&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; commands interchangeably.&lt;/p&gt; 
&lt;h3&gt;The working copy is automatically committed&lt;/h3&gt; 
&lt;p&gt;Jujutsu uses a real commit to represent the working copy. Checking out a commit results a new working-copy commit on top of the target commit. Almost all commands automatically amend the working-copy commit.&lt;/p&gt; 
&lt;p&gt;The working-copy being a commit means that commands never fail because the working copy is dirty (no "error: Your local changes to the following files..."), and there is no need for &lt;code&gt;git stash&lt;/code&gt;. Also, because the working copy is a commit, commands work the same way on the working-copy commit as on any other commit, so you can set the commit message before you're done with the changes.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/working_copy.png"&gt; 
&lt;h3&gt;The repo is the source of truth&lt;/h3&gt; 
&lt;p&gt;With Jujutsu, the working copy plays a smaller role than with Git. Commands snapshot the working copy before they start, then they update the repo, and then the working copy is updated (if the working-copy commit was modified). Almost all commands (even checkout!) operate on the commits in the repo, leaving the common functionality of snapshotting and updating of the working copy to centralized code. For example, &lt;code&gt;jj restore&lt;/code&gt; (similar to &lt;code&gt;git restore&lt;/code&gt;) can restore from any commit and into any commit, and &lt;code&gt;jj describe&lt;/code&gt; can set the commit message of any commit (defaults to the working-copy commit).&lt;/p&gt; 
&lt;h3&gt;Entire repo is under version control&lt;/h3&gt; 
&lt;p&gt;All operations you perform in the repo are recorded, along with a snapshot of the repo state after the operation. This means that you can easily revert to an earlier repo state, or to simply undo a particular operation (which does not necessarily have to be the most recent operation).&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/operation_log.png"&gt; 
&lt;h3&gt;Conflicts can be recorded in commits&lt;/h3&gt; 
&lt;p&gt;If an operation results in &lt;a href="https://jj-vcs.github.io/jj/latest/glossary#conflict"&gt;conflicts&lt;/a&gt;, information about those conflicts will be recorded in the commit(s). The operation will succeed. You can then resolve the conflicts later. One consequence of this design is that there's no need to continue interrupted operations. Instead, you get a single workflow for resolving conflicts, regardless of which command caused them. This design also lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).&lt;/p&gt; 
&lt;p&gt;Basic conflict resolution:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/resolve_conflicts.png"&gt; 
&lt;p&gt;Juggling conflicts:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/juggle_conflicts.png"&gt; 
&lt;h3&gt;Automatic rebase&lt;/h3&gt; 
&lt;p&gt;Whenever you modify a commit, any descendants of the old commit will be rebased onto the new commit. Thanks to the conflict design described above, that can be done even if there are conflicts. Bookmarks pointing to rebased commits will be updated. So will the working copy if it points to a rebased commit.&lt;/p&gt; 
&lt;h3&gt;Comprehensive support for rewriting history&lt;/h3&gt; 
&lt;p&gt;Besides the usual rebase command, there's &lt;code&gt;jj describe&lt;/code&gt; for editing the description (commit message) of an arbitrary commit. There's also &lt;code&gt;jj diffedit&lt;/code&gt;, which lets you edit the changes in a commit without checking it out. To split a commit into two, use &lt;code&gt;jj split&lt;/code&gt;. You can even move part of the changes in a commit to any other commit using &lt;code&gt;jj squash -i --from X --into Y&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;The tool is fairly feature-complete, but some important features like support for Git submodules are not yet completed. There are also several performance bugs. It's likely that workflows and setups different from what the core developers use are not well supported, e.g. there is no native support for email-based workflows.&lt;/p&gt; 
&lt;p&gt;Today, all core developers use &lt;code&gt;jj&lt;/code&gt; to work on &lt;code&gt;jj&lt;/code&gt;. I (Martin von Zweigbergk) have almost exclusively used &lt;code&gt;jj&lt;/code&gt; to develop the project itself since early January 2021. I haven't had to re-clone from source (I don't think I've even had to restore from backup).&lt;/p&gt; 
&lt;p&gt;There &lt;em&gt;will&lt;/em&gt; be changes to workflows and backward-incompatible changes to the on-disk formats before version 1.0.0. For any format changes, we'll try to implement transparent upgrades (as we've done with recent changes), or provide upgrade commands or scripts if requested.&lt;/p&gt; 
&lt;h2&gt;Related work&lt;/h2&gt; 
&lt;p&gt;There are several tools trying to solve similar problems as Jujutsu. See &lt;a href="https://jj-vcs.github.io/jj/latest/related-work"&gt;related work&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome outside contributions, and there's plenty of things to do, so don't be shy. Please ask if you want a pointer on something you can help with, and hopefully we can all figure something out.&lt;/p&gt; 
&lt;p&gt;We do have &lt;a href="https://jj-vcs.github.io/jj/prerelease/contributing/"&gt;a few policies and suggestions&lt;/a&gt; for contributors. The broad TL;DR:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug reports are very welcome!&lt;/li&gt; 
 &lt;li&gt;Every commit that lands in the &lt;code&gt;main&lt;/code&gt; branch is code reviewed.&lt;/li&gt; 
 &lt;li&gt;Please behave yourself, and obey the Community Guidelines.&lt;/li&gt; 
 &lt;li&gt;There &lt;strong&gt;is&lt;/strong&gt; a mandatory CLA you must agree to. Importantly, it &lt;strong&gt;does not&lt;/strong&gt; transfer copyright ownership to Google or anyone else; it simply gives us the right to safely redistribute and use your changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mandatory Google Disclaimer&lt;/h3&gt; 
&lt;p&gt;I (Martin von Zweigbergk, &lt;a href="mailto:martinvonz@google.com"&gt;martinvonz@google.com&lt;/a&gt;) started Jujutsu as a hobby project in late 2019, and it has evolved into my full-time project at Google, with several other Googlers (now) assisting development in various capacities. That said, &lt;strong&gt;this is not a Google product&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Jujutsu is available as Open Source Software, under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details about copyright and redistribution.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;jj&lt;/code&gt; logo was contributed by J. Jennings and is licensed under a Creative Commons License, see &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/LICENSE"&gt;&lt;code&gt;docs/images/LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EFForg/rayhunter</title>
      <link>https://github.com/EFForg/rayhunter</link>
      <description>&lt;p&gt;Rust tool to detect cell site simulators on an orbic mobile hotspot&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://www.eff.org/files/styles/media_browser_preview/public/banner_library/rayhunter-banner.png" alt="Rayhunter Logo - An Orca taking a bite out of a cellular signal bar"&gt;&lt;/p&gt; 
&lt;h1&gt;Rayhunter&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/EFForg/rayhunter/actions/workflows/main.yml/badge.svg?sanitize=true" alt="Tests"&gt;&lt;/p&gt; 
&lt;p&gt;Rayhunter is an IMSI Catcher Catcher for the Orbic mobile hotspot. To learn more, check out the &lt;a href="https://efforg.github.io/rayhunter/"&gt;Rayhunter Book&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tensorzero/tensorzero</title>
      <link>https://github.com/tensorzero/tensorzero</link>
      <description>&lt;p&gt;TensorZero is an open-source stack for industrial-grade LLM applications. It unifies an LLM gateway, observability, optimization, evaluation, and experimentation.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;
 &lt;picture&gt;
  &lt;img src="https://github.com/user-attachments/assets/47d67430-386d-4675-82ad-d4734d3262d9" alt="TensorZero Logo" width="128" height="128"&gt;
 &lt;/picture&gt;&lt;/p&gt; 
&lt;h1&gt;TensorZero&lt;/h1&gt; 
&lt;p&gt;
 &lt;picture&gt;
  &lt;img src="https://www.tensorzero.com/github-trending-badge.svg?sanitize=true" alt="#1 Repository Of The Day"&gt;
 &lt;/picture&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TensorZero is an open-source stack for &lt;em&gt;industrial-grade LLM applications&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Gateway:&lt;/strong&gt; access every LLM provider through a unified API, built for performance (&amp;lt;1ms p99 latency)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Observability:&lt;/strong&gt; store inferences and feedback in your database, available programmatically or in the UI&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Optimization:&lt;/strong&gt; collect metrics and human feedback to optimize prompts, models, and inference strategies&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Evaluation:&lt;/strong&gt; benchmark individual inferences or end-to-end workflows using heuristics, LLM judges, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Experimentation:&lt;/strong&gt; ship with confidence with built-in A/B testing, routing, fallbacks, retries, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Take what you need, adopt incrementally, and complement with other tools.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align="center"&gt; &lt;b&gt;&lt;a href="https://www.tensorzero.com/" target="_blank"&gt;Website&lt;/a&gt;&lt;/b&gt; ¬∑ &lt;b&gt;&lt;a href="https://www.tensorzero.com/docs" target="_blank"&gt;Docs&lt;/a&gt;&lt;/b&gt; ¬∑ &lt;b&gt;&lt;a href="https://www.x.com/tensorzero" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/b&gt; ¬∑ &lt;b&gt;&lt;a href="https://www.tensorzero.com/slack" target="_blank"&gt;Slack&lt;/a&gt;&lt;/b&gt; ¬∑ &lt;b&gt;&lt;a href="https://www.tensorzero.com/discord" target="_blank"&gt;Discord&lt;/a&gt;&lt;/b&gt; &lt;br&gt; &lt;br&gt; &lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/quickstart" target="_blank"&gt;Quick Start (5min)&lt;/a&gt;&lt;/b&gt; ¬∑ &lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/deployment" target="_blank"&gt;Deployment Guide&lt;/a&gt;&lt;/b&gt; ¬∑ &lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/api-reference" target="_blank"&gt;API Reference&lt;/a&gt;&lt;/b&gt; ¬∑ &lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/deployment" target="_blank"&gt;Configuration Reference&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td width="30%" valign="top"&gt;&lt;b&gt;What is TensorZero?&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="70%" valign="top"&gt;TensorZero is an open-source stack for industrial-grade LLM applications. It unifies an LLM gateway, observability, optimization, evaluation, and experimentation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="30%" valign="top"&gt;&lt;b&gt;How is TensorZero different from other LLM frameworks?&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="70%" valign="top"&gt; 1. TensorZero enables you to optimize complex LLM applications based on production metrics and human feedback.&lt;br&gt; 2. TensorZero supports the needs of industrial-grade LLM applications: low latency, high throughput, type safety, self-hosted, GitOps, customizability, etc.&lt;br&gt; 3. TensorZero unifies the entire LLMOps stack, creating compounding benefits. For example, LLM evaluations can be used for fine-tuning models alongside AI judges. &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="30%" valign="top"&gt;&lt;b&gt;Can I use TensorZero with ___?&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="70%" valign="top"&gt;Yes. Every major programming language is supported. You can use TensorZero with our Python client, any OpenAI SDK or OpenAI-compatible client, or our HTTP API.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="30%" valign="top"&gt;&lt;b&gt;Is TensorZero production-ready?&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="70%" valign="top"&gt;Yes. Here's a case study: &lt;b&gt;&lt;a href="https://www.tensorzero.com/blog/case-study-automating-code-changelogs-at-a-large-bank-with-llms"&gt;Automating Code Changelogs at a Large Bank with LLMs&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="30%" valign="top"&gt;&lt;b&gt;How much does TensorZero cost?&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="70%" valign="top"&gt;Nothing. TensorZero is 100% self-hosted and open-source. There are no paid features.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="30%" valign="top"&gt;&lt;b&gt;Who is building TensorZero?&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="70%" valign="top"&gt;Our technical team includes a former Rust compiler maintainer, machine learning researchers (Stanford, CMU, Oxford, Columbia) with thousands of citations, and the chief product officer of a decacorn startup. We're backed by the same investors as leading open-source projects (e.g. ClickHouse, CockroachDB) and AI labs (e.g. OpenAI, Anthropic).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="30%" valign="top"&gt;&lt;b&gt;How do I get started?&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="70%" valign="top"&gt;You can adopt TensorZero incrementally. Our &lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/quickstart"&gt;Quick Start&lt;/a&gt;&lt;/b&gt; goes from a vanilla OpenAI wrapper to a production-ready LLM application with observability and fine-tuning in just 5 minutes.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;hr&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;üåê LLM Gateway&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Integrate with TensorZero once and access every major LLM provider.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Access every major LLM provider (API or self-hosted) through a single unified API&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Infer with streaming, tool use, structured generation (JSON mode), batch, multimodal (VLMs), file inputs, caching, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Define prompt templates and schemas to enforce a consistent, typed interface between your application and the LLMs&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Satisfy extreme throughput and latency needs, thanks to ü¶Ä Rust: &amp;lt;1ms p99 latency overhead at 10k+ QPS&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Integrate using our Python client, any OpenAI SDK or OpenAI-compatible client, or our HTTP API (use any programming language)&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Ensure high availability with routing, retries, fallbacks, load balancing, granular timeouts, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Soon: embeddings; real-time voice&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;Model Providers&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="left" valign="top"&gt; &lt;p&gt; The TensorZero Gateway natively supports: &lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/anthropic"&gt;Anthropic&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/aws-bedrock"&gt;AWS Bedrock&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/aws-sagemaker"&gt;AWS SageMaker&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/azure"&gt;Azure OpenAI Service&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/deepseek"&gt;DeepSeek&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/fireworks"&gt;Fireworks&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/gcp-vertex-ai-anthropic"&gt;GCP Vertex AI Anthropic&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/gcp-vertex-ai-gemini"&gt;GCP Vertex AI Gemini&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/google-ai-studio-gemini"&gt;Google AI Studio (Gemini API)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/groq"&gt;Groq&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/hyperbolic"&gt;Hyperbolic&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/mistral"&gt;Mistral&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/openai"&gt;OpenAI&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/openrouter"&gt;OpenRouter&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/sglang"&gt;SGLang&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/tgi"&gt;TGI&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/together"&gt;Together AI&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/vllm"&gt;vLLM&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/xai"&gt;xAI (Grok)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;p&gt; &lt;em&gt; Need something else? Your provider is most likely supported because TensorZero integrates with &lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/providers/openai-compatible"&gt;any OpenAI-compatible API (e.g. Ollama)&lt;/a&gt;&lt;/b&gt;. &lt;/em&gt; &lt;/p&gt; &lt;/td&gt; 
   &lt;td width="50%" align="left" valign="top"&gt; &lt;p&gt; The TensorZero Gateway supports advanced features like: &lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/retries-fallbacks"&gt;Retries &amp;amp; Fallbacks&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations"&gt;Inference-Time Optimizations&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/prompt-templates-schemas"&gt;Prompt Templates &amp;amp; Schemas&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/experimentation/"&gt;Experimentation (A/B Testing)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/configuration-reference"&gt;Configuration-as-Code (GitOps)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/batch-inference"&gt;Batch Inference&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/multimodal-inference"&gt;Multimodal Inference (VLMs)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/inference-caching"&gt;Inference Caching&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/metrics-feedback"&gt;Metrics &amp;amp; Feedback&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/episodes"&gt;Multi-Step LLM Workflows (Episodes)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;em&gt;&amp;amp; a lot more...&lt;/em&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;p&gt; The TensorZero Gateway is written in Rust ü¶Ä with &lt;b&gt;performance&lt;/b&gt; in mind (&amp;lt;1ms p99 latency overhead @ 10k QPS). See &lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/benchmarks"&gt;Benchmarks&lt;/a&gt;&lt;/b&gt;.&lt;br&gt; &lt;/p&gt; &lt;p&gt; You can run inference using the &lt;b&gt;TensorZero client&lt;/b&gt; (recommended), the &lt;b&gt;OpenAI client&lt;/b&gt;, or the &lt;b&gt;HTTP API&lt;/b&gt;. &lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;br&gt; 
&lt;details open&gt; 
 &lt;summary&gt;&lt;b&gt;Usage: Python ‚Äî TensorZero Client (Recommended)&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;You can access any provider using the TensorZero Python client.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;code&gt;pip install tensorzero&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Optional: Set up the TensorZero configuration.&lt;/li&gt; 
  &lt;li&gt;Run inference:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;from tensorzero import TensorZeroGateway  # or AsyncTensorZeroGateway


with TensorZeroGateway.build_embedded(clickhouse_url="...", config_file="...") as client:
    response = client.inference(
        model_name="openai::gpt-4o-mini",
        # Try other providers easily: "anthropic::claude-3-7-sonnet-20250219"
        input={
            "messages": [
                {
                    "role": "user",
                    "content": "Write a haiku about artificial intelligence.",
                }
            ]
        },
    )
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;strong&gt;&lt;a href="https://www.tensorzero.com/docs/quickstart"&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; for more information.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Usage: Python ‚Äî OpenAI Client&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;You can access any provider using the OpenAI Python client with TensorZero.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;code&gt;pip install tensorzero&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Optional: Set up the TensorZero configuration.&lt;/li&gt; 
  &lt;li&gt;Run inference:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;from openai import OpenAI  # or AsyncOpenAI
from tensorzero import patch_openai_client

client = OpenAI()

patch_openai_client(
    client,
    clickhouse_url="http://chuser:chpassword@localhost:8123/tensorzero",
    config_file="config/tensorzero.toml",
    async_setup=False,
)

response = client.chat.completions.create(
    model="tensorzero::model_name::openai::gpt-4o-mini",
    # Try other providers easily: "tensorzero::model_name::anthropic::claude-3-7-sonnet-20250219"
    messages=[
        {
            "role": "user",
            "content": "Write a haiku about artificial intelligence.",
        }
    ],
)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;strong&gt;&lt;a href="https://www.tensorzero.com/docs/quickstart"&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; for more information.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Usage: JavaScript / TypeScript (Node) ‚Äî OpenAI Client&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;You can access any provider using the OpenAI Node client with TensorZero.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Deploy &lt;code&gt;tensorzero/gateway&lt;/code&gt; using Docker. &lt;strong&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/deployment"&gt;Detailed instructions ‚Üí&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;Set up the TensorZero configuration.&lt;/li&gt; 
  &lt;li&gt;Run inference:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-ts"&gt;import OpenAI from "openai";

const client = new OpenAI({
  baseURL: "http://localhost:3000/openai/v1",
});

const response = await client.chat.completions.create({
  model: "tensorzero::model_name::openai::gpt-4o-mini",
  // Try other providers easily: "tensorzero::model_name::anthropic::claude-3-7-sonnet-20250219"
  messages: [
    {
      role: "user",
      content: "Write a haiku about artificial intelligence.",
    },
  ],
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;strong&gt;&lt;a href="https://www.tensorzero.com/docs/quickstart"&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; for more information.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Usage: Other Languages &amp;amp; Platforms ‚Äî HTTP API&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;TensorZero supports virtually any programming language or platform via its HTTP API.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Deploy &lt;code&gt;tensorzero/gateway&lt;/code&gt; using Docker. &lt;strong&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/deployment"&gt;Detailed instructions ‚Üí&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;Optional: Set up the TensorZero configuration.&lt;/li&gt; 
  &lt;li&gt;Run inference:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl -X POST "http://localhost:3000/inference" \
  -H "Content-Type: application/json" \
  -d '{
    "model_name": "openai::gpt-4o-mini",
    "input": {
      "messages": [
        {
          "role": "user",
          "content": "Write a haiku about artificial intelligence."
        }
      ]
    }
  }'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;strong&gt;&lt;a href="https://www.tensorzero.com/docs/quickstart"&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; for more information.&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;üîç LLM Observability&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Zoom in to debug individual API calls, or zoom out to monitor metrics across models and prompts over time ‚Äî all using the open-source TensorZero UI.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Store inferences and feedback (metrics, human edits, etc.) in your own database&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Dive into individual inferences or high-level aggregate patterns using the TensorZero UI or programmatically&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Build datasets for optimization, evaluation, and other workflows&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Replay historical inferences with new prompts, models, inference strategies, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Export OpenTelemetry (OTLP) traces to your favorite general-purpose observability tool&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Soon: AI-assisted debugging and root cause analysis; AI-assisted data labeling&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;Observability ¬ª Inference&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;Observability ¬ª Function&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/2cc3cc9a-f33f-4e94-b8de-07522326f80a"&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/00ae6605-8fa0-4efd-8238-ae8ea589860f"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;br&gt; 
&lt;h3&gt;üìà LLM Optimization&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Send production metrics and human feedback to easily optimize your prompts, models, and inference strategies ‚Äî using the UI or programmatically.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Optimize your models with supervised fine-tuning, RLHF, and other techniques&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Optimize your prompts with automated prompt engineering algorithms like MIPROv2&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Optimize your inference strategy with dynamic in-context learning, chain of thought, best/mixture-of-N sampling, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Enable a feedback loop for your LLMs: a data &amp;amp; learning flywheel turning production data into smarter, faster, and cheaper models&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Soon: programmatic optimization; synthetic data generation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Model Optimization&lt;/h4&gt; 
&lt;p&gt;Optimize closed-source and open-source models using supervised fine-tuning (SFT) and preference fine-tuning (DPO).&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;Supervised Fine-tuning ‚Äî UI&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;Preference Fine-tuning (DPO) ‚Äî Jupyter Notebook&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/cf7acf66-732b-43b3-af2a-5eba1ce40f6f"&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/a67a0634-04a7-42b0-b934-9130cb7cdf51"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h4&gt;Inference-Time Optimization&lt;/h4&gt; 
&lt;p&gt;Boost performance by dynamically updating your prompts with relevant examples, combining responses from multiple inferences, and more.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#best-of-n-sampling"&gt;Best-of-N Sampling&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#mixture-of-n-sampling"&gt;Mixture-of-N Sampling&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/c0edfa4c-713c-4996-9964-50c0d26e6970"&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/75b5bf05-4c1f-43c4-b158-d69d1b8d05be"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#dynamic-in-context-learning-dicl"&gt;Dynamic In-Context Learning (DICL)&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#chain-of-thought-cot"&gt;Chain-of-Thought (CoT)&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/d8489e92-ce93-46ac-9aab-289ce19bb67d"&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/ea13d73c-76a4-4e0c-a35b-0c648f898311" height="320"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;&lt;em&gt;More coming soon...&lt;/em&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h4&gt;Prompt Optimization&lt;/h4&gt; 
&lt;p&gt;Optimize your prompts programmatically using research-driven optimization techniques.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#best-of-n-sampling"&gt;MIPROv2&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;&lt;a href="https://github.com/tensorzero/tensorzero/tree/main/examples/gsm8k-custom-recipe-dspy"&gt;DSPy Integration&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/d81a7c37-382f-4c46-840f-e6c2593301db" alt="MIPROv2 diagram"&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt; TensorZero comes with several optimization recipes, but you can also easily create your own. This example shows how to optimize a TensorZero function using an arbitrary tool ‚Äî here, DSPy, a popular library for automated prompt engineering. &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;&lt;em&gt;More coming soon...&lt;/em&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h3&gt;üìä LLM Evaluation&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Compare prompts, models, and inference strategies using evaluations powered by heuristics and LLM judges.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Evaluate individual inferences with &lt;em&gt;static evaluations&lt;/em&gt; powered by heuristics or LLM judges (‚âà unit tests for LLMs)&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Evaluate end-to-end workflows with &lt;em&gt;dynamic evaluations&lt;/em&gt; with complete flexibility (‚âà integration tests for LLMs)&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Optimize LLM judges just like any other TensorZero function to align them to human preferences&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Soon: more built-in evaluators; headless evaluations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;Evaluation ¬ª UI&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;b&gt;Evaluation ¬ª CLI&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center" valign="middle"&gt;&lt;img src="https://github.com/user-attachments/assets/f4bf54e3-1b63-46c8-be12-2eaabf615699"&gt;&lt;/td&gt; 
   &lt;td width="50%" align="left" valign="middle"&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;docker compose run --rm evaluations \
  --evaluation-name extract_data \
  --dataset-name hard_test_cases \
  --variant-name gpt_4o \
  --concurrency 5&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;Run ID: 01961de9-c8a4-7c60-ab8d-15491a9708e4
Number of datapoints: 100
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100/100
exact_match: 0.83 ¬± 0.03
semantic_match: 0.98 ¬± 0.01
item_count: 7.15 ¬± 0.39&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;üß™ LLM Experimentation&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Ship with confidence with built-in A/B testing, routing, fallbacks, retries, etc.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Ship with confidence with built-in A/B testing for models, prompts, providers, hyperparameters, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Enforce principled experiments (RCTs) in complex workflows, including multi-turn and compound LLM systems&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Soon: multi-armed bandits; AI-managed experiments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&amp;amp; more!&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Build with an open-source stack well-suited for prototypes but designed from the ground up to support the most complex LLM applications and deployments.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Build simple applications or massive deployments with GitOps-friendly orchestration&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Extend TensorZero with built-in escape hatches, programmatic-first usage, direct database access, and more&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Integrate with third-party tools: specialized observability and evaluations, model providers, agent orchestration frameworks, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Soon: UI playground&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Watch LLMs get better at data extraction in real-time with TensorZero!&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#dynamic-in-context-learning-dicl"&gt;Dynamic in-context learning (DICL)&lt;/a&gt;&lt;/strong&gt; is a powerful inference-time optimization available out of the box with TensorZero. It enhances LLM performance by automatically incorporating relevant historical examples into the prompt, without the need for model fine-tuning.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/4df1022e-886e-48c2-8f79-6af3cdad79cb"&gt;https://github.com/user-attachments/assets/4df1022e-886e-48c2-8f79-6af3cdad79cb&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Start building today.&lt;/strong&gt; The &lt;strong&gt;&lt;a href="https://www.tensorzero.com/docs/quickstart"&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; shows it's easy to set up an LLM application with TensorZero.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Questions?&lt;/strong&gt; Ask us on &lt;strong&gt;&lt;a href="https://www.tensorzero.com/slack"&gt;Slack&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href="https://www.tensorzero.com/discord"&gt;Discord&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using TensorZero at work?&lt;/strong&gt; Email us at &lt;strong&gt;&lt;a href="mailto:hello@tensorzero.com"&gt;hello@tensorzero.com&lt;/a&gt;&lt;/strong&gt; to set up a Slack or Teams channel with your team (free).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Work with us.&lt;/strong&gt; We're &lt;strong&gt;&lt;a href="https://www.tensorzero.com/jobs"&gt;hiring in NYC&lt;/a&gt;&lt;/strong&gt;. We'd also welcome &lt;strong&gt;&lt;a href="https://github.com/tensorzero/tensorzero/raw/main/CONTRIBUTING.md"&gt;open-source contributions&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;We are working on a series of &lt;strong&gt;complete runnable examples&lt;/strong&gt; illustrating TensorZero's data &amp;amp; learning flywheel.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/tensorzero/tensorzero/tree/main/examples/data-extraction-ner"&gt;Optimizing Data Extraction (NER) with TensorZero&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;This example shows how to use TensorZero to optimize a data extraction pipeline. We demonstrate techniques like fine-tuning and dynamic in-context learning (DICL). In the end, an optimized GPT-4o Mini model outperforms GPT-4o on this task ‚Äî at a fraction of the cost and latency ‚Äî using a small amount of training data.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/tensorzero/tensorzero/tree/main/examples/rag-retrieval-augmented-generation/simple-agentic-rag/"&gt;Agentic RAG ‚Äî Multi-Hop Question Answering with LLMs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;This example shows how to build a multi-hop retrieval agent using TensorZero. The agent iteratively searches Wikipedia to gather information, and decides when it has enough context to answer a complex question.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/tensorzero/tensorzero/tree/main/examples/haiku-hidden-preferences"&gt;Writing Haikus to Satisfy a Judge with Hidden Preferences&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;This example fine-tunes GPT-4o Mini to generate haikus tailored to a specific taste. You'll see TensorZero's "data flywheel in a box" in action: better variants leads to better data, and better data leads to better variants. You'll see progress by fine-tuning the LLM multiple times.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/tensorzero/tensorzero/tree/main/examples/chess-puzzles/"&gt;Improving LLM Chess Ability with Best-of-N Sampling&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;This example showcases how best-of-N sampling can significantly enhance an LLM's chess-playing abilities by selecting the most promising moves from multiple generated options.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/tensorzero/tensorzero/tree/main/examples/gsm8k-custom-recipe-dspy"&gt;Improving Math Reasoning with a Custom Recipe for Automated Prompt Engineering (DSPy)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;TensorZero provides a number of pre-built optimization recipes covering common LLM engineering workflows. But you can also easily create your own recipes and workflows! This example shows how to optimize a TensorZero function using an arbitrary tool ‚Äî here, DSPy.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;&amp;amp; many more on the way!&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ankitects/anki</title>
      <link>https://github.com/ankitects/anki</link>
      <description>&lt;p&gt;Anki is a smart spaced repetition flashcard program&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anki¬Æ&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://buildkite.com/ankitects/anki-ci"&gt;&lt;img src="https://badge.buildkite.com/c9edf020a4aec976f9835e54751cc5409d843adbb66d043bd3.svg?branch=main" alt="Build status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo contains the source code for the computer version of &lt;a href="https://apps.ankiweb.net"&gt;Anki&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;About&lt;/h1&gt; 
&lt;p&gt;Anki is a spaced repetition program. Please see the &lt;a href="https://apps.ankiweb.net"&gt;website&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;h3&gt;Anki Betas&lt;/h3&gt; 
&lt;p&gt;If you'd like to try development builds of Anki but don't feel comfortable building the code, please see &lt;a href="https://betas.ankiweb.net/"&gt;Anki betas&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Developing&lt;/h3&gt; 
&lt;p&gt;For more information on building and developing, please see &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/development.md"&gt;Development&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Want to contribute to Anki? Check out the &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/contributing.md"&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Anki Contributors&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/CONTRIBUTORS"&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Anki's license: &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bee-san/RustScan</title>
      <link>https://github.com/bee-san/RustScan</link>
      <description>&lt;p&gt;ü§ñ The Modern Port Scanner ü§ñ&lt;/p&gt;&lt;hr&gt;&lt;div align="center" markdown="1"&gt; 
 &lt;p&gt;‚û°Ô∏è &lt;a href="http://discord.skerritt.blog" title="Discord blog"&gt;Discord&lt;/a&gt; | &lt;a href="https://github.com/RustScan/RustScan/wiki/Installation-Guide" title="Installation Guide Wiki"&gt;Installation Guide&lt;/a&gt; | &lt;a href="https://github.com/RustScan/RustScan#-usage"&gt;Usage Guide&lt;/a&gt; ‚¨ÖÔ∏è&lt;/p&gt; 
 &lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/rustscan.png" height="400px" width="400px"&gt; 
 &lt;!--&lt;u&gt;**The Modern Port Scanner.**&lt;/u&gt;--&gt; 
 &lt;p&gt;&lt;strong&gt;Fast, smart, effective.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://img.shields.io/archlinux/v/extra/x86_64/rustscan?style=plastic&amp;amp;logo=archlinux&amp;amp;link=https%3A%2F%2Farchlinux.org%2Fpackages%2Fextra%2Fx86_64%2Frustscan%2F" alt="Arch Linux package"&gt; &lt;img src="https://img.shields.io/badge/Built%20with-Rust-Purple" alt="Built with Rust"&gt; &lt;img src="https://img.shields.io/github/downloads/rustscan/rustscan/total?label=GitHub%20Downloads" alt="GitHub All Releases"&gt; &lt;img src="https://img.shields.io/crates/d/rustscan?label=Cargo%20Downloads" alt="Crates.io"&gt; &lt;img src="https://img.shields.io/discord/754001738184392704" alt="Discord"&gt; &lt;img src="https://github.com/RustScan/RustScan/actions/workflows/build.yml/badge.svg?branch=master" alt="Actions"&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;ü§î What is this?&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/fast.gif" alt="fast" title="Speed"&gt;&lt;/p&gt; 
&lt;p&gt;The Modern Port Scanner. &lt;strong&gt;Find ports quickly (3 seconds at its fastest)&lt;/strong&gt;. Run scripts through our scripting engine (Python, Lua, Shell supported).&lt;/p&gt; 
&lt;h1&gt;üõ†Ô∏è Installation&lt;/h1&gt; 
&lt;p&gt;You can install RustScan's binary from our &lt;a href="https://github.com/RustScan/RustScan/releases"&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We would prefer you to install with a package manager so it is tested and works for your system.&lt;/p&gt; 
&lt;p&gt;RustScan is in many repositories already. Install it with whatever tools you wish:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/rustscan/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/rustscan.svg?sanitize=true" alt="Packaging status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;RustScan only officially supports Cargo installations, if you want to use that please install Rust and then &lt;code&gt;cargo install rustscan&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Example installations include:&lt;/p&gt; 
&lt;p&gt;MacOS:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  brew install rustscan
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Arch:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  yay rustscan
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;‚ú® Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Scans all 65k ports in &lt;strong&gt;3 seconds&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Full scripting engine support. Automatically pipe results into Nmap, or use our scripts (or write your own) to do whatever you want.&lt;/li&gt; 
 &lt;li&gt;Adaptive learning. RustScan improves the more you use it. No bloated machine learning here, just basic maths.&lt;/li&gt; 
 &lt;li&gt;The usuals you would expect. IPv6, CIDR, file input and more.&lt;/li&gt; 
 &lt;li&gt;Automatically pipes ports into Nmap.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ÄºÔ∏è Important Links&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;
    &lt;!--Installation Guide--&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;
    &lt;!--Documentation--&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;
    &lt;!--Discord--&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;span&gt;üìñ&lt;/span&gt; &lt;a href="https://github.com/RustScan/RustScan#-full-installation-guide" title="Full installation guide"&gt;Installation Guide&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;üìö&lt;/span&gt; &lt;a href="https://github.com/bee-san/RustScan/wiki" title="Rustscan"&gt;Documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;ü¶ú&lt;/span&gt; &lt;a href="http://discord.skerritt.blog" title="Discord blog"&gt;Discord&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;üôã Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üìñ &lt;a href="https://github.com/RustScan/RustScan/wiki/Installation-Guide" title="Installation Guide Wiki"&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üêã &lt;a href="https://github.com/RustScan/RustScan/wiki/Installation-Guide#docker-" title="Docker Installation Guide Wiki"&gt;Docker Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ü¶ú &lt;a href="http://discord.skerritt.blog" title="Discord blog"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ü§∏ &lt;a href="https://github.com/RustScan/RustScan/wiki/Usage" title="Basic Usage of Rustscan"&gt;Usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;üî≠ Why RustScan?&lt;/h1&gt; 
&lt;p&gt;RustScan is a modern take on the port scanner. Sleek &amp;amp; fast. All while providing extensive extendability to you.&lt;/p&gt; 
&lt;p&gt;Not to mention RustScan uses Adaptive Learning to improve itself over time, making it the best port scanner for &lt;strong&gt;you&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;üßã Speed&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/fast.gif" alt="fast" title="Speed"&gt;&lt;/p&gt; 
&lt;p&gt;Speed is guaranteed via RustScan. However, if you want to run a slow scan due to stealth, that is possible too.&lt;/p&gt; 
&lt;p&gt;Firstly, let's talk code.&lt;/p&gt; 
&lt;p&gt;We have tests that check to see if RustScan is significantly slower than the previous version. If it is, the continuous integration fails, and we can't commit code to master unless we make it faster.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/sharkdp/hyperfine" title="Hyperfine"&gt;HyperFine&lt;/a&gt; is used to monitor RustScan's performance over time to answer the question, "Are we getting faster? Are we getting slower?".&lt;/p&gt; 
&lt;p&gt;Every pull request is reviewed by &lt;strong&gt;one&lt;/strong&gt; person, but more often than not, &lt;strong&gt;two&lt;/strong&gt; people review it. We test it manually and ensure the code doesn't negatively affect performance.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/RustScan/RustScan/wiki/Increasing-Speed-&amp;amp;-Accuracy" title="Increasing Speed &amp;amp; Accuracy"&gt;Read more here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;‚öôÔ∏è Extensible&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/scripts.gif" alt="scripts" title="Scripts"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;em&gt;RustScan piping results into the custom Python script&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;RustScan has a new scripting engine that allows anyone to write scripts in most languages. Python, Lua, and Shell are all supported.&lt;/p&gt; 
&lt;p&gt;Want to take your found ports and pipe them into Nmap for further analysis? That's possible. Want to run &lt;code&gt;smb-enum&lt;/code&gt; if SMB is found open? Possible.&lt;/p&gt; 
&lt;p&gt;The possibilities are endless -- and you can write scripts in whatever language you feel comfortable with.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/RustScan/RustScan/wiki/RustScan-Scripting-Engine" title="Scripting Engine"&gt;Read more here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üåä Adaptive&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/adaptive.gif" alt="adaptive" title="Adaptive"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;em&gt;RustScan automatically fine-tunes itself to match the host OS&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;RustScan has a cool set of features called "Adaptive Learning". These features "learn" about the environment you are scanning and how &lt;em&gt;you&lt;/em&gt; use RustScan to &lt;strong&gt;improve itself over time&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;We use this umbrella term for any feature that fits this criterion. The list constantly changes, so &lt;a href="https://github.com/RustScan/RustScan/wiki/Adaptive-Learning" title="Adaptive Learning"&gt;check out our wiki for more information&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üë©‚Äçü¶Ø Accessible&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/accessible.gif" alt="fast" title="Fast"&gt;&lt;/p&gt; 
&lt;p&gt;RustScan is one of the first penetration testing tools that aims to be entirely accessible.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://bees.substack.com/p/making-hacking-accessible" title="Making Hacking Accessible"&gt;Most penetration testing tools are not accessible&lt;/a&gt;, which negatively affects the whole industry.&lt;/p&gt; 
&lt;p&gt;RustScan has continuous integration testing that aims to ensure it is accessible, and we are constantly working on ways to improve our accessibility and ensure &lt;em&gt;everyone&lt;/em&gt; can use RustScan.&lt;/p&gt; 
&lt;h1&gt;ü§∏ Usage&lt;/h1&gt; 
&lt;p&gt;We have 2 usage guides. &lt;a href="https://github.com/RustScan/RustScan/wiki/Usage" title="Basic Usage of Rustscan"&gt;Basic Usage&lt;/a&gt; and &lt;a href="https://github.com/RustScan/RustScan/wiki/Things-you-may-want-to-do-with-RustScan-but-don't-understand-how" title="Things you may want to do with rustscan but don't know how"&gt;Things you may want to do&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We also have documentation about our config file &lt;a href="https://github.com/RustScan/RustScan/wiki/Config-File" title="RustScan Configuration File"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;üé™ Community&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/RustScan/RustScan/wiki/Contributing" title="Learn how to contribute"&gt;Contributing&lt;/a&gt; Read this to learn how.&lt;/p&gt; 
&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#contributors-"&gt;&lt;img src="https://img.shields.io/badge/all_contributors-26-orange.svg?style=flat-square" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href="https://allcontributors.org/docs/en/emoji-key"&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://skerritt.blog"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/10378052?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Bee&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#infra-beeskerritt" title="Infrastructure (Hosting, Build-Tools, etc)"&gt;üöá&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=beeskerritt" title="Tests"&gt;‚ö†Ô∏è&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=beesan" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-beeskerritt" title="Design"&gt;üé®&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://sakiir.ovh"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/9950578?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;SakiiR&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=SakiiR" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3ASakiiR" title="Bug reports"&gt;üêõ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/smackhack"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/48143394?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;smackhack&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#ideas-smackhack" title="Ideas, Planning, &amp;amp; Feedback"&gt;ü§î&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#example-smackhack" title="Examples"&gt;üí°&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://bernardoamc.github.io/"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/428984?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Bernardo Araujo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=bernardoamc" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Abernardoamc" title="Bug reports"&gt;üêõ&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-bernardoamc" title="Design"&gt;üé®&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Isona"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/11759523?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Izzy Whistlecroft&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3AIsona" title="Bug reports"&gt;üêõ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://imlonghao.com"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/4951333?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;imlonghao&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Aimlonghao" title="Bug reports"&gt;üêõ&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#maintenance-imlonghao" title="Maintenance"&gt;üöß&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/royharoush"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/8113056?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;royharoush&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#ideas-royharoush" title="Ideas, Planning, &amp;amp; Feedback"&gt;ü§î&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-royharoush" title="Design"&gt;üé®&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Atul9"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/3390330?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Atul Bhosale&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=Atul9" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://tgotwig.dev"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/30773779?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Thomas Gotwig&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#platform-TGotwig" title="Packaging/porting to new platform"&gt;üì¶&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/remigourdon"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/2874133?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;R√©mi Gourdon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=remigourdon" title="Documentation"&gt;üìñ&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=remigourdon" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://cmnatic.co.uk"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/4163116?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ben (CMNatic)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=cmnatic" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=cmnatic" title="Documentation"&gt;üìñ&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-cmnatic" title="Design"&gt;üé®&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Ferryistaken"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/47927670?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alessandro Ferrari&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#content-Ferryistaken" title="Content"&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Phenomite"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/8285537?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Phenomite&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#content-Phenomite" title="Content"&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://supersandro.de/"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/7258858?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sandro&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#content-SuperSandro2000" title="Content"&gt;üñã&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3ASuperSandro2000" title="Bug reports"&gt;üêõ&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=SuperSandro2000" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://swag.lgbt"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/25358963?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Cass&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#platform-caass" title="Packaging/porting to new platform"&gt;üì¶&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=caass" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Acaass" title="Bug reports"&gt;üêõ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/niklasmohrin"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/47574893?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Niklas Mohrin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=niklasmohrin" title="Documentation"&gt;üìñ&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=niklasmohrin" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Aniklasmohrin" title="Bug reports"&gt;üêõ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://liberapay.com/Artem4/"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/5614476?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Artem Polishchuk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#platform-tim77" title="Packaging/porting to new platform"&gt;üì¶&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/buermarc"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/44375277?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;buermarc&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=buermarc" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/bergabman"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/44554109?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;bergabman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=bergabman" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Abergabman" title="Bug reports"&gt;üêõ&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-bergabman" title="Design"&gt;üé®&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/dmitris"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/31205?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dmitry Savintsev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=dmitris" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/bofh69"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/1444315?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sebastian Andersson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=bofh69" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/mattcorbin"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/6537765?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Matt Corbin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=mattcorbin" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://rootsploit.com"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/67270834?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;RootSploit&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#blog-rootsploit" title="Blogposts"&gt;üìù&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/eiffel-fl"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/12171754?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;eiffel-fl&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=eiffel-fl" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/u5surf"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/14180225?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Y.Horie&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=u5surf" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/okrplay"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/32576280?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Oskar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=okrplay" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=okrplay" title="Tests"&gt;‚ö†Ô∏è&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!-- markdownlint-enable --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href="https://github.com/all-contributors/all-contributors"&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;!--Links--&gt; 
&lt;!--Pictures--&gt;</description>
    </item>
    
    <item>
      <title>antinomyhq/forge</title>
      <link>https://github.com/antinomyhq/forge</link>
      <description>&lt;p&gt;AI enabled pair programmer for Claude, GPT, O Series, Grok, Deepseek, Gemini and 300+ models&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;‚öíÔ∏è Forge: AI-Enhanced Terminal Development Environment&lt;/h1&gt; 
&lt;p align="center"&gt;A comprehensive coding agent that integrates AI capabilities with your development environment&lt;/p&gt; 
&lt;p align="center"&gt;&lt;code&gt;npx forgecode@latest&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/antinomyhq/forge/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/antinomyhq/forge/ci.yml?style=for-the-badge" alt="CI Status"&gt;&lt;/a&gt; &lt;a href="https://github.com/antinomyhq/forge/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/antinomyhq/forge?style=for-the-badge" alt="GitHub Release"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/kRZBPpkgwq"&gt;&lt;img src="https://img.shields.io/discord/1044859667798568962?style=for-the-badge&amp;amp;cacheSeconds=120&amp;amp;logo=discord" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://cla-assistant.io/antinomyhq/forge"&gt;&lt;img src="https://cla-assistant.io/readme/badge/antinomyhq/forge?style=for-the-badge" alt="CLA assistant"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://assets.antinomy.ai/images/forge_demo_2x.gif" alt="Code-Forge Demo"&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Table&amp;nbsp;of&amp;nbsp;Contents&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#usage-examples"&gt;Usage Examples&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#why-forge"&gt;Why Forge?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#command-line-options"&gt;Command-Line Options&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#advanced-configuration"&gt;Advanced Configuration&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#provider-configuration"&gt;Provider Configuration&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#forgeyaml-configuration-options"&gt;forge.yaml Configuration Options&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#mcp-configuration"&gt;MCP Configuration&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#example-use-cases"&gt;Example Use Cases&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#usage-in-multi-agent-workflows"&gt;Usage in Multi-Agent Workflows&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#community"&gt;Community&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#support-us"&gt;Support Us&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Run Forge in interactive mode via npx&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx forgecode@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Connect through the Forge app and complete the OAuth process. This will open your browser to app.forgecode.dev where you can sign up or sign in with Google/GitHub.&lt;/p&gt; 
&lt;p&gt;That's it! Forge is now ready to assist you with your development tasks.&lt;/p&gt; 
&lt;h2&gt;Usage Examples&lt;/h2&gt; 
&lt;p&gt;Forge can be used in different ways depending on your needs. Here are some common usage patterns:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Code Understanding&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; Can you explain how the authentication system works in this codebase?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will analyze your project's structure, identify authentication-related files, and provide a detailed explanation of the authentication flow, including the relationships between different components.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Implementing New Features&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I need to add a dark mode toggle to our React application. How should I approach this?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will suggest the best approach based on your current codebase, explain the steps needed, and even scaffold the necessary components and styles for you.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Debugging Assistance&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I'm getting this error: "TypeError: Cannot read property 'map' of undefined". What might be causing it?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will analyze the error, suggest potential causes based on your code, and propose different solutions to fix the issue.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; Please review the code in src/components/UserProfile.js and suggest improvements
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will analyze the code, identify potential issues, and suggest improvements for readability, performance, security, and maintainability.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Learning New Technologies&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I want to integrate GraphQL into this Express application. Can you explain how to get started?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will provide a tailored tutorial on integrating GraphQL with Express, using your specific project structure as context.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Database Schema Design&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I need to design a database schema for a blog with users, posts, comments, and categories
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will suggest an appropriate schema design, including tables/collections, relationships, indexes, and constraints based on your project's existing database technology.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Refactoring Legacy Code&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; Help me refactor this class-based component to use React Hooks
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge can help modernize your codebase by walking you through refactoring steps and implementing them with your approval.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Git Operations&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I need to merge branch 'feature/user-profile' into main but there are conflicts
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge can guide you through resolving git conflicts, explaining the differences and suggesting the best way to reconcile them.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Why Forge?&lt;/h2&gt; 
&lt;p&gt;Forge is designed for developers who want to enhance their workflow with AI assistance while maintaining full control over their development environment.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Zero configuration&lt;/strong&gt; - Just add your API key and you're ready to go&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless integration&lt;/strong&gt; - Works right in your terminal, where you already work&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-provider support&lt;/strong&gt; - Use OpenAI, Anthropic, or other LLM providers&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure by design&lt;/strong&gt; - Your code stays on your machine&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open-source&lt;/strong&gt; - Transparent, extensible, and community-driven&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Forge helps you code faster, solve complex problems, and learn new technologies without leaving your terminal.&lt;/p&gt; 
&lt;h2&gt;Command-Line Options&lt;/h2&gt; 
&lt;p&gt;Here's a quick reference of Forge's command-line options:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-p, --prompt &amp;lt;PROMPT&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Direct prompt to process without entering interactive mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-c, --command &amp;lt;COMMAND&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to a file containing initial commands to execute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-w, --workflow &amp;lt;WORKFLOW&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to a file containing the workflow to execute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-e, --event &amp;lt;EVENT&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Dispatch an event to the workflow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--conversation &amp;lt;CONVERSATION&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to a file containing the conversation to execute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-r, --restricted&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable restricted shell mode for enhanced security&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable verbose output mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Print help information&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-V, --version&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Print version&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Advanced Configuration&lt;/h2&gt; 
&lt;h3&gt;Provider Configuration&lt;/h3&gt; 
&lt;p&gt;Forge supports multiple AI providers. Below are setup instructions for each supported provider:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;forgecode.dev (Recommended)&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
FORGE_KEY=ForgeKey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To use Forgecode's provider with Forge:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Visit &lt;a href="https://app.forgecode.dev/"&gt;https://app.forgecode.dev/&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Login with your existing credentials or create a new account&lt;/li&gt; 
  &lt;li&gt;Once logged in, your account will automatically enable the Forge Provider&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;OpenRouter&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENROUTER_API_KEY=&amp;lt;your_openrouter_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Requesty&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
REQUESTY_API_KEY=&amp;lt;your_requesty_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;x-ai&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
XAI_API_KEY=&amp;lt;your_xai_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;switch the model using &lt;code&gt;/model&lt;/code&gt; command in the Forge CLI.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENAI_API_KEY=&amp;lt;your_openai_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: o3-mini-high
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Anthropic&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
ANTHROPIC_API_KEY=&amp;lt;your_anthropic_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: claude-3.7-sonnet
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Google Vertex AI&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
PROJECT_ID=&amp;lt;your_project_id&amp;gt;
LOCATION=&amp;lt;your_location&amp;gt;
OPENAI_API_KEY=&amp;lt;vertex_ai_key&amp;gt;
OPENAI_URL=https://${LOCATION}-aiplatform.googleapis.com/v1beta1/projects/${PROJECT_ID}/locations/${LOCATION}/endpoints/openapi
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: publishers/anthropic/models/claude-3-7-sonnet
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;OpenAI-Compatible Providers&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENAI_API_KEY=&amp;lt;your_provider_api_key&amp;gt;
OPENAI_URL=&amp;lt;your_provider_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: &amp;lt;provider-specific-model&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Groq&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENAI_API_KEY=&amp;lt;your_groq_api_key&amp;gt;
OPENAI_URL=https://api.groq.com/openai/v1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: deepseek-r1-distill-llama-70b
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Amazon Bedrock&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;To use Amazon Bedrock models with Forge, you'll need to first set up the &lt;a href="https://github.com/aws-samples/bedrock-access-gateway"&gt;Bedrock Access Gateway&lt;/a&gt;:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set up Bedrock Access Gateway&lt;/strong&gt;:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Follow the deployment steps in the &lt;a href="https://github.com/aws-samples/bedrock-access-gateway"&gt;Bedrock Access Gateway repo&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;Create your own API key in Secrets Manager&lt;/li&gt; 
    &lt;li&gt;Deploy the CloudFormation stack&lt;/li&gt; 
    &lt;li&gt;Note your API Base URL from the CloudFormation outputs&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create these files in your project directory&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENAI_API_KEY=&amp;lt;your_bedrock_gateway_api_key&amp;gt;
OPENAI_URL=&amp;lt;your_bedrock_gateway_base_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: anthropic.claude-3-opus
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt;
 &lt;/ol&gt;
&lt;/details&gt;   
&lt;h3&gt;forge.yaml Configuration Options&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;forge.yaml&lt;/code&gt; file supports several advanced configuration options that let you customize Forge's behavior.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Custom Rules&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Add your own guidelines that all agents should follow when generating responses.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
custom_rules: |
  1. Always add comprehensive error handling to any code you write.
  2. Include unit tests for all new functions.
  3. Follow our team's naming convention: camelCase for variables, PascalCase for classes.
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Commands&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Define custom commands as shortcuts for repetitive prompts:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
commands:
  - name: 'refactor'
    description: 'Refactor selected code'
    prompt: 'Please refactor this code to improve readability and performance'
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Specify the default AI model to use for all agents in the workflow.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: 'claude-3.7-sonnet'
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Max Walker Depth&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Control how deeply Forge traverses your project directory structure when gathering context.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
max_walker_depth: 3 # Limit directory traversal to 3 levels deep
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Temperature&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Adjust the creativity and randomness in AI responses. Lower values (0.0-0.3) produce more focused, deterministic outputs, while higher values (0.7-2.0) generate more diverse and creative results.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
temperature: 0.7 # Balanced creativity and focus
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Tool Max Failure Limit&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Control how many times a tool can fail before Forge forces completion to prevent infinite retry loops. This helps avoid situations where an agent gets stuck repeatedly trying the same failing operation.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
max_tool_failure_per_turn: 3 # Allow up to 3 failures per tool before forcing completion
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Set to a higher value if you want more retry attempts, or lower if you want faster failure detection.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Max Requests Per Turn&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Limit the maximum number of requests an agent can make in a single conversation turn. This prevents runaway conversations and helps control API usage and costs.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
max_requests_per_turn: 50 # Allow up to 50 requests per turn
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;When this limit is reached, Forge will:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ask you if you wish to continue&lt;/li&gt; 
  &lt;li&gt;If you respond with 'Yes', it will continue the conversation&lt;/li&gt; 
  &lt;li&gt;If you respond with 'No', it will end the conversation&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Model Context Protocol (MCP)&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;The MCP feature allows AI agents to communicate with external tools and services. This implementation follows Anthropic's &lt;a href="https://docs.anthropic.com/en/docs/claude-code/tutorials#set-up-model-context-protocol-mcp"&gt;Model Context Protocol&lt;/a&gt; design.&lt;/p&gt; 
 &lt;h3&gt;MCP Configuration&lt;/h3&gt; 
 &lt;p&gt;Configure MCP servers using the CLI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# List all MCP servers
forge mcp list

# Add a new server
forge mcp add

# Add a server using JSON format
forge mcp add-json

# Get server details
forge mcp get

# Remove a server
forge mcp remove
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Or manually create a &lt;code&gt;.mcp.json&lt;/code&gt; file with the following structure:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
	"mcpServers": {
		"server_name": {
			"command": "command_to_execute",
			"args": ["arg1", "arg2"],
			"env": { "ENV_VAR": "value" }
		},
		"another_server": {
			"url": "http://localhost:3000/events"
		}
	}
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;MCP configurations are read from two locations (in order of precedence):&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Local configuration (project-specific)&lt;/li&gt; 
  &lt;li&gt;User configuration (user-specific)&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h3&gt;Example Use Cases&lt;/h3&gt; 
 &lt;p&gt;MCP can be used for various integrations:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Web browser automation&lt;/li&gt; 
  &lt;li&gt;External API interactions&lt;/li&gt; 
  &lt;li&gt;Tool integration&lt;/li&gt; 
  &lt;li&gt;Custom service connections&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Usage in Multi-Agent Workflows&lt;/h3&gt; 
 &lt;p&gt;MCP tools can be used as part of multi-agent workflows, allowing specialized agents to interact with external systems as part of a collaborative problem-solving approach.&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For comprehensive documentation on all features and capabilities, please visit the &lt;a href="https://github.com/antinomyhq/forge/tree/main/docs"&gt;documentation site&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our vibrant Discord community to connect with other Forge users and contributors, get help with your projects, share ideas, and provide feedback!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/kRZBPpkgwq"&gt;&lt;img src="https://img.shields.io/discord/1044859667798568962?style=for-the-badge&amp;amp;cacheSeconds=120&amp;amp;logo=discord" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Support Us&lt;/h2&gt; 
&lt;p&gt;Your support drives Forge's continued evolution! By starring our GitHub repository, you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Help others discover this powerful tool üîç&lt;/li&gt; 
 &lt;li&gt;Motivate our development team üí™&lt;/li&gt; 
 &lt;li&gt;Enable us to prioritize new features üõ†Ô∏è&lt;/li&gt; 
 &lt;li&gt;Strengthen our open-source community üå±&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>fujiapple852/trippy</title>
      <link>https://github.com/fujiapple852/trippy</link>
      <description>&lt;p&gt;A network diagnostic tool&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/fujiapple852/trippy/master/docs/src/assets/Trippy-Vertical-DarkMode.svg#gh-dark-mode-only" width="300"&gt; &lt;img src="https://raw.githubusercontent.com/fujiapple852/trippy/master/docs/src/assets/Trippy-Vertical.svg#gh-light-mode-only" width="300"&gt;&lt;br&gt; &lt;br&gt; &lt;a href="https://github.com/fujiapple852/trippy/actions/workflows/ci.yml"&gt; &lt;img src="https://github.com/fujiapple852/trippy/actions/workflows/ci.yml/badge.svg?branch=master"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/trippy/0.13.0"&gt; &lt;img src="https://img.shields.io/crates/v/trippy.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://repology.org/project/trippy/versions"&gt; &lt;img src="https://repology.org/badge/tiny-repos/trippy.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://trippy.zulipchat.com"&gt; &lt;img src="https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/%23trippy-dev:matrix.org"&gt; &lt;img src="https://img.shields.io/badge/matrix/trippy-dev:matrix.org-blue"&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; Trippy combines the functionality of traceroute and ping and is designed to assist with the analysis of networking issues. &lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/fujiapple852/trippy/master/assets/0.12.0/demo.gif" alt="trippy"&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://trippy.rs/start/getting-started"&gt;getting started&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;p&gt;Trippy runs on Linux, BSD, macOS, and Windows. It can be installed from most package managers, precompiled binaries, or source.&lt;/p&gt; 
&lt;p&gt;For example, to install Trippy from &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install trippy --locked
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;All package managers&lt;/summary&gt; 
 &lt;h3&gt;Cargo&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://crates.io/crates/trippy/0.13.0"&gt;&lt;img src="https://img.shields.io/crates/v/trippy" alt="Crates.io"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install trippy --locked
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;APT (Debian)&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://tracker.debian.org/pkg/trippy"&gt;&lt;img src="https://repology.org/badge/version-for-repo/debian_13/trippy.svg?sanitize=true" alt="Debian 13 package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;apt install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;‚ìò Note:&lt;/p&gt; 
  &lt;p&gt;Only available for Debian 13 (&lt;code&gt;trixie&lt;/code&gt;) and later.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h3&gt;PPA (Ubuntu)&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://launchpad.net/~fujiapple/+archive/ubuntu/trippy/+packages"&gt;&lt;img src="https://img.shields.io/badge/Ubuntu%20PPA-0.13.0-brightgreen" alt="Ubuntu PPA"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;add-apt-repository ppa:fujiapple/trippy
apt update &amp;amp;&amp;amp; apt install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;‚ìò Note:&lt;/p&gt; 
  &lt;p&gt;Only available for Ubuntu 24.04 (&lt;code&gt;Noble&lt;/code&gt;) and 22.04 (&lt;code&gt;Jammy&lt;/code&gt;).&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h3&gt;Snap (Linux)&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://snapcraft.io/trippy"&gt;&lt;img src="https://snapcraft.io/trippy/badge.svg?sanitize=true" alt="trippy"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;snap install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Homebrew (macOS)&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://formulae.brew.sh/formula/trippy"&gt;&lt;img src="https://repology.org/badge/version-for-repo/homebrew/trippy.svg?sanitize=true" alt="Homebrew package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;brew install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;WinGet (Windows)&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/f/FujiApple/Trippy/0.13.0"&gt;&lt;img src="https://img.shields.io/badge/WinGet-0.13.0-brightgreen" alt="winget package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;winget install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Scoop (Windows)&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/trippy.json"&gt;&lt;img src="https://img.shields.io/scoop/v/trippy?style=flat&amp;amp;labelColor=5c5c5c&amp;amp;color=%234dc71f" alt="Scoop package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;scoop install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://community.chocolatey.org/packages/trippy"&gt;&lt;img src="https://repology.org/badge/version-for-repo/chocolatey/trippy.svg?sanitize=true" alt="Chocolatey package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;choco install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;NetBSD&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://pkgsrc.se/net/trippy"&gt;&lt;img src="https://repology.org/badge/version-for-repo/pkgsrc_current/trippy.svg?sanitize=true" alt="pkgsrc current package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;pkgin install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;FreeBSD&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://www.freshports.org/net/trippy/"&gt;&lt;img src="https://repology.org/badge/version-for-repo/freebsd/trippy.svg?sanitize=true" alt="FreeBSD port"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;pkg install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;OpenBSD&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://openports.pl/path/net/trippy"&gt;&lt;img src="https://repology.org/badge/version-for-repo/openbsd/trippy.svg?sanitize=true" alt="OpenBSD port"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;pkg_add trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Arch Linux&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/trippy"&gt;&lt;img src="https://repology.org/badge/version-for-repo/arch/trippy.svg?sanitize=true" alt="Arch package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;pacman -S trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Gentoo Linux&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://packages.gentoo.org/packages/net-analyzer/trippy"&gt;&lt;img src="https://repology.org/badge/version-for-repo/gentoo/trippy.svg?sanitize=true" alt="Gentoo package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;emerge -av net-analyzer/trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Void Linux&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://github.com/void-linux/void-packages/tree/master/srcpkgs/trippy"&gt;&lt;img src="https://repology.org/badge/version-for-repo/void_x86_64/trippy.svg?sanitize=true" alt="Void Linux x86_64 package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;xbps-install -S trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;ALT Sisyphus&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://packages.altlinux.org/en/sisyphus/srpms/trippy/"&gt;&lt;img src="https://repology.org/badge/version-for-repo/altsisyphus/trippy.svg?sanitize=true" alt="ALT Sisyphus package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;apt-get install trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Chimera Linux&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://github.com/chimera-linux/cports/tree/master/user/trippy"&gt;&lt;img src="https://repology.org/badge/version-for-repo/chimera/trippy.svg?sanitize=true" alt="Chimera Linux package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;apk add trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Nix&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/tr/trippy/package.nix"&gt;&lt;img src="https://repology.org/badge/version-for-repo/nix_unstable/trippy.svg?sanitize=true" alt="nixpkgs unstable package"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;nix-env -iA trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Docker&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://hub.docker.com/r/fujiapple/trippy/"&gt;&lt;img src="https://img.shields.io/docker/v/fujiapple/trippy" alt="Docker Image Version (latest by date)"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;docker run -it fujiapple/trippy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;All Repositories&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://repology.org/project/trippy/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/trippy.svg?sanitize=true" alt="Packaging status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;See the &lt;a href="https://trippy.rs/start/installation"&gt;installation&lt;/a&gt; guide for details of how to install Trippy on your system.&lt;/p&gt; 
&lt;h3&gt;Run&lt;/h3&gt; 
&lt;p&gt;To run a basic trace to &lt;code&gt;example.com&lt;/code&gt; with default settings, use the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo trip example.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://trippy.rs/guides/usage"&gt;usage examples&lt;/a&gt; and &lt;a href="https://trippy.rs/reference/cli"&gt;CLI reference&lt;/a&gt; for details of how to use Trippy. To use Trippy without elevated privileges, see the &lt;a href="https://trippy.rs/guides/privileges"&gt;privileges&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Full documentation is available at &lt;a href="https://trippy.rs"&gt;trippy.rs&lt;/a&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;documentation links&lt;/summary&gt; 
 &lt;h2&gt;Getting Started&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/start/getting-started/"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt; 
 &lt;h2&gt;Features&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/start/features/"&gt;Features&lt;/a&gt; list.&lt;/p&gt; 
 &lt;h2&gt;Distributions&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/start/installation/"&gt;Distributions&lt;/a&gt; list.&lt;/p&gt; 
 &lt;h2&gt;Privileges&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/guides/privileges/"&gt;Privileges&lt;/a&gt; guide.&lt;/p&gt; 
 &lt;h2&gt;Usage Examples&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/guides/usage/"&gt;Usage Examples&lt;/a&gt;.&lt;/p&gt; 
 &lt;h2&gt;Command Reference&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/reference/cli/"&gt;Command Reference&lt;/a&gt;.&lt;/p&gt; 
 &lt;h2&gt;Theme Reference&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/reference/theme/"&gt;Theme Reference&lt;/a&gt;.&lt;/p&gt; 
 &lt;h2&gt;Column Reference&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/reference/column/"&gt;Column Reference&lt;/a&gt;.&lt;/p&gt; 
 &lt;h2&gt;Configuration Reference&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/reference/configuration/"&gt;Configuration Reference&lt;/a&gt;.&lt;/p&gt; 
 &lt;h2&gt;Locale Reference&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/reference/locale/"&gt;Locale Reference&lt;/a&gt;.&lt;/p&gt; 
 &lt;h2&gt;Versions&lt;/h2&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/reference/version/"&gt;Version Reference&lt;/a&gt;.&lt;/p&gt; 
 &lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
 &lt;h3&gt;Why does Trippy show "Awaiting data..."?&lt;/h3&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/guides/faq/"&gt;Awaiting Data&lt;/a&gt; guide.&lt;/p&gt; 
 &lt;p&gt;&lt;a name="windows-defender"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h3&gt;How do I allow incoming ICMP traffic in the Windows Defender firewall?&lt;/h3&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/guides/windows_firewall/"&gt;Windows Defender Firewall&lt;/a&gt; guide.&lt;/p&gt; 
 &lt;h3&gt;What are the recommended settings for Trippy?&lt;/h3&gt; 
 &lt;p&gt;See the &lt;a href="https://trippy.rs/guides/recommendation/"&gt;Recommended Tracing Settings&lt;/a&gt; guide.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Trippy is made possible by &lt;a href="https://github.com/ratatui-org/ratatui"&gt;ratatui&lt;/a&gt; ( formerly &lt;a href="https://github.com/fdehau/tui-rs"&gt;tui-rs&lt;/a&gt;), &lt;a href="https://github.com/crossterm-rs/crossterm"&gt;crossterm&lt;/a&gt; as well as &lt;a href="https://github.com/fujiapple852/trippy/raw/master/Cargo.toml"&gt;several&lt;/a&gt; foundational Rust libraries.&lt;/p&gt; 
&lt;p&gt;Trippy draws heavily from &lt;a href="https://github.com/traviscross/mtr"&gt;mtr&lt;/a&gt; and also incorporates ideas from both &lt;a href="https://github.com/libparistraceroute/libparistraceroute"&gt;libparistraceroute&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/insomniacslk/dublin-traceroute"&gt;Dublin Traceroute&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Trippy networking code is inspired by &lt;a href="https://github.com/libpnet/libpnet"&gt;pnet&lt;/a&gt; and some elements of that codebase are incorporated in Trippy.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Autonomous_system_(Internet)"&gt;AS&lt;/a&gt; data is retrieved from the &lt;a href="https://team-cymru.com/community-services/ip-asn-mapping/#dns"&gt;IP to ASN Mapping Service&lt;/a&gt; provided by &lt;a href="https://team-cymru.com"&gt;Team Cymru&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://trippy.cli.rs"&gt;trippy.cli.rs&lt;/a&gt; CNAME hosting is provided by &lt;a href="https://cli.rs"&gt;cli.rs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Trippy chat room is sponsored by &lt;a href="https://zulip.com"&gt;Zulip&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Trippy logo designed by &lt;a href="https://www.instagram.com/harunocaksiz"&gt;Harun Ocaksiz Design&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is distributed under the terms of the Apache License (Version 2.0).&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in time by you, as defined in the Apache-2.0 license, shall be licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/fujiapple852/trippy/master/LICENSE"&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;Copyright 2022 &lt;a href="https://github.com/fujiapple852/trippy/graphs/contributors"&gt;Trippy Contributors&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kata-containers/kata-containers</title>
      <link>https://github.com/kata-containers/kata-containers</link>
      <description>&lt;p&gt;Kata Containers is an open source project and community working to build a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs. https://katacontainers.io/&lt;/p&gt;&lt;hr&gt;&lt;img src="https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-images-prod/openstack-logo/kata/SVG/kata-1.svg?sanitize=true" width="900"&gt; 
&lt;p&gt;&lt;a href="https://github.com/kata-containers/kata-containers/actions/workflows/payload-after-push.yaml"&gt;&lt;img src="https://github.com/kata-containers/kata-containers/actions/workflows/payload-after-push.yaml/badge.svg?sanitize=true" alt="CI | Publish Kata Containers payload"&gt;&lt;/a&gt; &lt;a href="https://github.com/kata-containers/kata-containers/actions/workflows/ci-nightly.yaml"&gt;&lt;img src="https://github.com/kata-containers/kata-containers/actions/workflows/ci-nightly.yaml/badge.svg?sanitize=true" alt="Kata Containers Nightly CI"&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/kata-containers/kata-containers"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/kata-containers/kata-containers/badge" alt="OpenSSF Scorecard"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Kata Containers&lt;/h1&gt; 
&lt;p&gt;Welcome to Kata Containers!&lt;/p&gt; 
&lt;p&gt;This repository is the home of the Kata Containers code for the 2.0 and newer releases.&lt;/p&gt; 
&lt;p&gt;If you want to learn about Kata Containers, visit the main &lt;a href="https://katacontainers.io"&gt;Kata Containers website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Kata Containers is an open source project and community working to build a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The code is licensed under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/LICENSE"&gt;the license file&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;Kata Containers currently runs on 64-bit systems supporting the following technologies:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Architecture&lt;/th&gt; 
   &lt;th&gt;Virtualization technology&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.intel.com"&gt;Intel&lt;/a&gt; VT-x, AMD SVM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;aarch64&lt;/code&gt; ("&lt;code&gt;arm64&lt;/code&gt;")&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.arm.com"&gt;ARM&lt;/a&gt; Hyp&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ppc64le&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ibm.com"&gt;IBM&lt;/a&gt; Power&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;s390x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ibm.com"&gt;IBM&lt;/a&gt; Z &amp;amp; LinuxONE SIE&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Hardware requirements&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime"&gt;Kata Containers runtime&lt;/a&gt; provides a command to determine if your host system is capable of running and creating a Kata Container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ kata-runtime check
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;This command runs a number of checks including connecting to the network to determine if a newer release of Kata Containers is available on GitHub. If you do not wish this to check to run, add the &lt;code&gt;--no-network-checks&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;By default, only a brief success / failure message is printed. If more details are needed, the &lt;code&gt;--verbose&lt;/code&gt; flag can be used to display the list of all the checks performed.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If the command is run as the &lt;code&gt;root&lt;/code&gt; user additional checks are run (including checking if another incompatible hypervisor is running). When running as &lt;code&gt;root&lt;/code&gt;, network checks are automatically disabled.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install"&gt;installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs"&gt;official documentation&lt;/a&gt; including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install"&gt;Installation guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/Developer-Guide.md"&gt;Developer guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design"&gt;Design documents&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design/architecture"&gt;Architecture overview&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design/architecture_3.0/"&gt;Architecture 3.0 overview&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Kata Containers uses a single &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime/README.md#configuration"&gt;configuration file&lt;/a&gt; which contains a number of sections for various parts of the Kata Containers system including the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime"&gt;runtime&lt;/a&gt;, the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/agent"&gt;agent&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/#hypervisors"&gt;hypervisor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Hypervisors&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/hypervisors.md"&gt;hypervisors document&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime/README.md#hypervisor-specific-configuration"&gt;Hypervisor specific configuration details&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;To learn more about the project, its community and governance, see the &lt;a href="https://github.com/kata-containers/community"&gt;community repository&lt;/a&gt;. This is the first place to go if you wish to contribute to the project.&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/#community"&gt;community&lt;/a&gt; section for ways to contact us.&lt;/p&gt; 
&lt;h3&gt;Raising issues&lt;/h3&gt; 
&lt;p&gt;Please raise an issue &lt;a href="https://github.com/kata-containers/kata-containers/issues"&gt;in this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are reporting a security issue, please follow the &lt;a href="https://github.com/kata-containers/community#vulnerability-handling"&gt;vulnerability reporting process&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Developers&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/Developer-Guide.md"&gt;developer guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Components&lt;/h3&gt; 
&lt;h3&gt;Main components&lt;/h3&gt; 
&lt;p&gt;The table below lists the core parts of the project:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime"&gt;runtime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;Main component run by a container manager and providing a containerd shimv2 runtime implementation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime-rs"&gt;runtime-rs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;The Rust version runtime.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/agent"&gt;agent&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;Management process running inside the virtual machine / POD that sets up the container environment.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/dragonball"&gt;&lt;code&gt;dragonball&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;An optional built-in VMM brings out-of-the-box Kata Containers experience with optimizations on container workloads&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs"&gt;documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;documentation&lt;/td&gt; 
   &lt;td&gt;Documentation common to all components (such as design and install documentation).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests"&gt;tests&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;tests&lt;/td&gt; 
   &lt;td&gt;Excludes unit tests which live with the main code.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Additional components&lt;/h3&gt; 
&lt;p&gt;The table below lists the remaining parts of the project:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging"&gt;packaging&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Scripts and metadata for producing packaged binaries&lt;br&gt;(components, hypervisors, kernel and rootfs).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org"&gt;kernel&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;kernel&lt;/td&gt; 
   &lt;td&gt;Linux kernel used by the hypervisor to boot the guest image. Patches are stored &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging/kernel"&gt;here&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/osbuilder"&gt;osbuilder&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Tool to create "mini O/S" rootfs and initrd images and kernel for the hypervisor.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging/kata-debug/README.md"&gt;kata-debug&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Utility tool to gather Kata Containers debug information from Kubernetes clusters.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/agent-ctl"&gt;&lt;code&gt;agent-ctl&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Tool that provides low-level access for testing the agent.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/kata-ctl"&gt;&lt;code&gt;kata-ctl&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Tool that provides advanced commands and debug facilities.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/trace-forwarder"&gt;&lt;code&gt;trace-forwarder&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Agent tracing helper.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/runk"&gt;&lt;code&gt;runk&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Standard OCI container runtime based on the agent.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/.github/workflows"&gt;&lt;code&gt;ci&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CI&lt;/td&gt; 
   &lt;td&gt;Continuous Integration configuration files and scripts.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/ci/openshift-ci/README.md"&gt;&lt;code&gt;ocp-ci&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CI&lt;/td&gt; 
   &lt;td&gt;Continuous Integration configuration for the OpenShift pipelines.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/kata-containers/www.katacontainers.io"&gt;&lt;code&gt;katacontainers.io&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Source for the &lt;a href="https://www.katacontainers.io"&gt;&lt;code&gt;katacontainers.io&lt;/code&gt;&lt;/a&gt; site.&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/testing/kata-webhook/README.md"&gt;&lt;code&gt;Webhook&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Example of a simple admission controller webhook to annotate pods with the Kata runtime class&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Packaging and releases&lt;/h3&gt; 
&lt;p&gt;Kata Containers is now &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install/README.md#packaged-installation-methods"&gt;available natively for most distributions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;General tests&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests/README.md"&gt;tests documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Metrics tests&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests/metrics/README.md"&gt;metrics documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Glossary of Terms&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/kata-containers/kata-containers/wiki/Glossary"&gt;glossary of terms&lt;/a&gt; related to Kata Containers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nushell/nushell</title>
      <link>https://github.com/nushell/nushell</link>
      <description>&lt;p&gt;A new type of shell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nushell 
 &lt;!-- omit in toc --&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/nu"&gt;&lt;img src="https://img.shields.io/crates/v/nu.svg?sanitize=true" alt="Crates.io"&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/nushell/nushell/ci.yml?branch=main" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/actions/workflows/nightly-build.yml"&gt;&lt;img src="https://github.com/nushell/nushell/actions/workflows/nightly-build.yml/badge.svg?sanitize=true" alt="Nightly Build"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NtAbbGn"&gt;&lt;img src="https://img.shields.io/discord/601130461678272522.svg?logo=discord" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://changelog.com/podcast/363"&gt;&lt;img src="https://img.shields.io/badge/The%20Changelog-%23363-61c192.svg?sanitize=true" alt="The Changelog #363"&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/graphs/commit-activity"&gt;&lt;img src="https://img.shields.io/github/commit-activity/m/nushell/nushell" alt="GitHub commit activity"&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/nushell/nushell" alt="GitHub contributors"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A new type of shell.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/nushell/nushell/main/assets/nushell-autocomplete6.gif" alt="Example of nushell" title="Example of nushell"&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents 
 &lt;!-- omit in toc --&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#status"&gt;Status&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#learning-about-nu"&gt;Learning About Nu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#philosophy"&gt;Philosophy&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#pipelines"&gt;Pipelines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#opening-files"&gt;Opening files&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#goals"&gt;Goals&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#officially-supported-by"&gt;Officially Supported By&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;This project has reached a minimum-viable-product level of quality. Many people use it as their daily driver, but it may be unstable for some commands. Nu's design is subject to change as it matures.&lt;/p&gt; 
&lt;h2&gt;Learning About Nu&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://www.nushell.sh/book/"&gt;Nushell book&lt;/a&gt; is the primary source of Nushell documentation. You can find &lt;a href="https://www.nushell.sh/commands/"&gt;a full list of Nu commands in the book&lt;/a&gt;, and we have many examples of using Nu in our &lt;a href="https://www.nushell.sh/cookbook/"&gt;cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We're also active on &lt;a href="https://discord.gg/NtAbbGn"&gt;Discord&lt;/a&gt;; come and chat with us!&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To quickly install Nu:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Linux and macOS
brew install nushell
# Windows
winget install nushell
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use &lt;code&gt;Nu&lt;/code&gt; in GitHub Action, check &lt;a href="https://github.com/marketplace/actions/setup-nu"&gt;setup-nu&lt;/a&gt; for more detail.&lt;/p&gt; 
&lt;p&gt;Detailed installation instructions can be found in the &lt;a href="https://www.nushell.sh/book/installation.html"&gt;installation chapter of the book&lt;/a&gt;. Nu is available via many package managers:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/nushell/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/nushell.svg?columns=3" alt="Packaging status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For details about which platforms the Nushell team actively supports, see &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/devdocs/PLATFORM_SUPPORT.md"&gt;our platform support policy&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The default configurations can be found at &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/crates/nu-utils/src/default_files"&gt;sample_config&lt;/a&gt; which are the configuration files one gets when they startup Nushell for the first time.&lt;/p&gt; 
&lt;p&gt;It sets all of the default configuration to run Nushell. From here one can then customize this file for their specific needs.&lt;/p&gt; 
&lt;p&gt;To see where &lt;em&gt;config.nu&lt;/em&gt; is located on your system simply type this command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;$nu.config-path
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please see our &lt;a href="https://www.nushell.sh"&gt;book&lt;/a&gt; for all of the Nushell documentation.&lt;/p&gt; 
&lt;h2&gt;Philosophy&lt;/h2&gt; 
&lt;p&gt;Nu draws inspiration from projects like PowerShell, functional programming languages, and modern CLI tools. Rather than thinking of files and data as raw streams of text, Nu looks at each input as something with structure. For example, when you list the contents of a directory what you get back is a table of rows, where each row represents an item in that directory. These values can be piped through a series of steps, in a series of commands called a 'pipeline'.&lt;/p&gt; 
&lt;h3&gt;Pipelines&lt;/h3&gt; 
&lt;p&gt;In Unix, it's common to pipe between commands to split up a sophisticated command over multiple steps. Nu takes this a step further and builds heavily on the idea of &lt;em&gt;pipelines&lt;/em&gt;. As in the Unix philosophy, Nu allows commands to output to stdout and read from stdin. Additionally, commands can output structured data (you can think of this as a third kind of stream). Commands that work in the pipeline fit into one of three categories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Commands that produce a stream (e.g., &lt;code&gt;ls&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Commands that filter a stream (e.g., &lt;code&gt;where type == "dir"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Commands that consume the output of the pipeline (e.g., &lt;code&gt;table&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Commands are separated by the pipe symbol (&lt;code&gt;|&lt;/code&gt;) to denote a pipeline flowing left to right.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ls | where type == "dir" | table
# =&amp;gt; ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# =&amp;gt; ‚îÇ #  ‚îÇ   name   ‚îÇ type ‚îÇ  size   ‚îÇ   modified    ‚îÇ
# =&amp;gt; ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
# =&amp;gt; ‚îÇ  0 ‚îÇ .cargo   ‚îÇ dir  ‚îÇ     0 B ‚îÇ 9 minutes ago ‚îÇ
# =&amp;gt; ‚îÇ  1 ‚îÇ assets   ‚îÇ dir  ‚îÇ     0 B ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚îÇ  2 ‚îÇ crates   ‚îÇ dir  ‚îÇ 4.0 KiB ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚îÇ  3 ‚îÇ docker   ‚îÇ dir  ‚îÇ     0 B ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚îÇ  4 ‚îÇ docs     ‚îÇ dir  ‚îÇ     0 B ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚îÇ  5 ‚îÇ images   ‚îÇ dir  ‚îÇ     0 B ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚îÇ  6 ‚îÇ pkg_mgrs ‚îÇ dir  ‚îÇ     0 B ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚îÇ  7 ‚îÇ samples  ‚îÇ dir  ‚îÇ     0 B ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚îÇ  8 ‚îÇ src      ‚îÇ dir  ‚îÇ 4.0 KiB ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚îÇ  9 ‚îÇ target   ‚îÇ dir  ‚îÇ     0 B ‚îÇ a day ago     ‚îÇ
# =&amp;gt; ‚îÇ 10 ‚îÇ tests    ‚îÇ dir  ‚îÇ 4.0 KiB ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚îÇ 11 ‚îÇ wix      ‚îÇ dir  ‚îÇ     0 B ‚îÇ 2 weeks ago   ‚îÇ
# =&amp;gt; ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because most of the time you'll want to see the output of a pipeline, &lt;code&gt;table&lt;/code&gt; is assumed. We could have also written the above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ls | where type == "dir"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Being able to use the same commands and compose them differently is an important philosophy in Nu. For example, we could use the built-in &lt;code&gt;ps&lt;/code&gt; command to get a list of the running processes, using the same &lt;code&gt;where&lt;/code&gt; as above.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ps | where cpu &amp;gt; 0
# =&amp;gt; ‚ï≠‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# =&amp;gt; ‚îÇ # ‚îÇ  pid  ‚îÇ   name    ‚îÇ  cpu  ‚îÇ    mem    ‚îÇ  virtual  ‚îÇ
# =&amp;gt; ‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
# =&amp;gt; ‚îÇ 0 ‚îÇ  2240 ‚îÇ Slack.exe ‚îÇ 16.40 ‚îÇ 178.3 MiB ‚îÇ 232.6 MiB ‚îÇ
# =&amp;gt; ‚îÇ 1 ‚îÇ 16948 ‚îÇ Slack.exe ‚îÇ 16.32 ‚îÇ 205.0 MiB ‚îÇ 197.9 MiB ‚îÇ
# =&amp;gt; ‚îÇ 2 ‚îÇ 17700 ‚îÇ nu.exe    ‚îÇ  3.77 ‚îÇ  26.1 MiB ‚îÇ   8.8 MiB ‚îÇ
# =&amp;gt; ‚ï∞‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Opening files&lt;/h3&gt; 
&lt;p&gt;Nu can load file and URL contents as raw text or structured data (if it recognizes the format). For example, you can load a .toml file as structured data and explore it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml
# =&amp;gt; ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# =&amp;gt; ‚îÇ bin              ‚îÇ [table 1 row]      ‚îÇ
# =&amp;gt; ‚îÇ dependencies     ‚îÇ {record 25 fields} ‚îÇ
# =&amp;gt; ‚îÇ dev-dependencies ‚îÇ {record 8 fields}  ‚îÇ
# =&amp;gt; ‚îÇ features         ‚îÇ {record 10 fields} ‚îÇ
# =&amp;gt; ‚îÇ package          ‚îÇ {record 13 fields} ‚îÇ
# =&amp;gt; ‚îÇ patch            ‚îÇ {record 1 field}   ‚îÇ
# =&amp;gt; ‚îÇ profile          ‚îÇ {record 3 fields}  ‚îÇ
# =&amp;gt; ‚îÇ target           ‚îÇ {record 3 fields}  ‚îÇ
# =&amp;gt; ‚îÇ workspace        ‚îÇ {record 1 field}   ‚îÇ
# =&amp;gt; ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can pipe this into a command that gets the contents of one of the columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml | get package
# =&amp;gt; ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# =&amp;gt; ‚îÇ authors       ‚îÇ [list 1 item]                      ‚îÇ
# =&amp;gt; ‚îÇ default-run   ‚îÇ nu                                 ‚îÇ
# =&amp;gt; ‚îÇ description   ‚îÇ A new type of shell                ‚îÇ
# =&amp;gt; ‚îÇ documentation ‚îÇ https://www.nushell.sh/book/       ‚îÇ
# =&amp;gt; ‚îÇ edition       ‚îÇ 2018                               ‚îÇ
# =&amp;gt; ‚îÇ exclude       ‚îÇ [list 1 item]                      ‚îÇ
# =&amp;gt; ‚îÇ homepage      ‚îÇ https://www.nushell.sh             ‚îÇ
# =&amp;gt; ‚îÇ license       ‚îÇ MIT                                ‚îÇ
# =&amp;gt; ‚îÇ metadata      ‚îÇ {record 1 field}                   ‚îÇ
# =&amp;gt; ‚îÇ name          ‚îÇ nu                                 ‚îÇ
# =&amp;gt; ‚îÇ repository    ‚îÇ https://github.com/nushell/nushell ‚îÇ
# =&amp;gt; ‚îÇ rust-version  ‚îÇ 1.60                               ‚îÇ
# =&amp;gt; ‚îÇ version       ‚îÇ 0.72.0                             ‚îÇ
# =&amp;gt; ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And if needed we can drill down further:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml | get package.version
# =&amp;gt; 0.72.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Plugins&lt;/h3&gt; 
&lt;p&gt;Nu supports plugins that offer additional functionality to the shell and follow the same structured data model that built-in commands use. There are a few examples in the &lt;code&gt;crates/nu_plugins_*&lt;/code&gt; directories.&lt;/p&gt; 
&lt;p&gt;Plugins are binaries that are available in your path and follow a &lt;code&gt;nu_plugin_*&lt;/code&gt; naming convention. These binaries interact with nu via a simple JSON-RPC protocol where the command identifies itself and passes along its configuration, making it available for use. If the plugin is a filter, data streams to it one element at a time, and it can stream data back in return via stdin/stdout. If the plugin is a sink, it is given the full vector of final data and is given free reign over stdin/stdout to use as it pleases.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/nushell/awesome-nu#plugins"&gt;awesome-nu repo&lt;/a&gt; lists a variety of nu-plugins while the &lt;a href="https://github.com/nushell/showcase"&gt;showcase repo&lt;/a&gt; &lt;em&gt;shows&lt;/em&gt; off informative blog posts that have been written about Nushell along with videos that highlight technical topics that have been presented.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;Nu adheres closely to a set of goals that make up its design philosophy. As features are added, they are checked against these goals.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;First and foremost, Nu is cross-platform. Commands and techniques should work across platforms and Nu has &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/devdocs/PLATFORM_SUPPORT.md"&gt;first-class support for Windows, macOS, and Linux&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu ensures compatibility with existing platform-specific executables.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu's workflow and tools should have the usability expected of modern software in 2022 (and beyond).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu views data as either structured or unstructured. It is a structured shell like PowerShell.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Finally, Nu views data functionally. Rather than using mutation, pipelines act as a means to load, change, and save data without mutable state.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Officially Supported By&lt;/h2&gt; 
&lt;p&gt;Please submit an issue or PR to be added to this list.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/starship/starship"&gt;starship&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ohmyposh.dev"&gt;oh-my-posh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://couchbase.sh"&gt;Couchbase Shell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pypa/virtualenv"&gt;virtualenv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ellie/atuin"&gt;atuin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clap-rs/clap/tree/master/clap_complete_nushell"&gt;clap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://github.com/bevry/dorothy"&gt;Dorothy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/direnv/direnv/raw/master/docs/hook.md#nushell"&gt;Direnv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x-cmd.com/mod/nu"&gt;x-cmd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/version-fox/vfox"&gt;vfox&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt; for details. Thanks to all the people who already contributed!&lt;/p&gt; 
&lt;a href="https://github.com/nushell/nushell/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=nushell/nushell&amp;amp;max=750&amp;amp;columns=20"&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The project is made available under the MIT license. See the &lt;code&gt;LICENSE&lt;/code&gt; file for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MystenLabs/sui</title>
      <link>https://github.com/MystenLabs/sui</link>
      <description>&lt;p&gt;Sui, a next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the Move programming language&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/MystenLabs/sui/refs/heads/main/docs/site/static/img/logo.svg?sanitize=true" alt="Logo" width="100" height="100"&gt; &lt;/p&gt; 
&lt;h1&gt;Welcome to Sui&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/MystenLabs/sui/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/tag/MystenLabs/sui.svg?sort=semver" alt="Github release"&gt;&lt;/a&gt; &lt;a href="https://github.com/MystenLabs/sui/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/MystenLabs/sui" alt="License"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://sui.io"&gt;Sui&lt;/a&gt; is a next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the &lt;a href="https://github.com/MystenLabs/awesome-move"&gt;Move programming language&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sui Highlights&lt;/h2&gt; 
&lt;p&gt;Sui offers the following benefits and capabilities:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unmatched scalability, instant settlement&lt;/li&gt; 
 &lt;li&gt;A safe smart contract language accessible to mainstream developers&lt;/li&gt; 
 &lt;li&gt;Ability to define rich and composable on-chain assets&lt;/li&gt; 
 &lt;li&gt;Better user experience for web3 apps&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sui is the only blockchain today that can scale with the growth of web3 while achieving industry-leading performance, cost, programmability, and usability. As Sui approaches Mainnet launch, it will demonstrate capacity beyond the transaction processing capabilities of established systems ‚Äì traditional and blockchain alike. Sui is the first internet-scale programmable blockchain platform, a foundational layer for web3.&lt;/p&gt; 
&lt;h2&gt;Sui Architecture&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart LR
    CC(CLI Client) --&amp;gt; ClientService
    RC(Rest Client) --&amp;gt; ClientService
    RPCC(RPC Client) --&amp;gt; ClientService
    ClientService --&amp;gt; AuthorityAggregator
    AuthorityAggregator --&amp;gt; AC1[AuthorityClient] &amp;amp; AC2[AuthorityClient]
    subgraph Authority1
      AS[AuthorityState]
    end
    subgraph Authority2
      AS2[AuthorityState]
    end
    AC1 &amp;lt;==&amp;gt;|Network TCP| Authority1
    AC2 &amp;lt;==&amp;gt;|Network TCP| Authority2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sui Overview&lt;/h2&gt; 
&lt;p&gt;Sui is a smart contract platform maintained by a permissionless set of authorities that play a role similar to validators or miners in other blockchain systems.&lt;/p&gt; 
&lt;p&gt;Sui offers scalability and unprecedented low-latency for common use cases. Sui makes the vast majority of transactions processable in parallel, which makes better use of processing resources, and offers the option to increase throughput with more resources. Sui forgoes consensus to instead use simpler and lower-latency primitives for common use cases, such as payment transactions and asset transfers. This is unprecedented in the blockchain world and enables a number of new latency-sensitive distributed applications, ranging from gaming to retail payment at physical points of sale.&lt;/p&gt; 
&lt;p&gt;Sui is written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt; and supports smart contracts written in the &lt;a href="https://github.com/move-language/move"&gt;Move programming language&lt;/a&gt; to define assets that may have an owner. Move programs define operations on these assets including custom rules for their creation, the transfer of these assets to new owners, and operations that mutate assets.&lt;/p&gt; 
&lt;p&gt;Sui has a native token called SUI, with a fixed supply. The SUI token is used to pay for gas, and is also used as &lt;a href="https://learn.bybit.com/blockchain/delegated-proof-of-stake-dpos/"&gt;delegated stake on authorities&lt;/a&gt; within an epoch. The voting power of authorities within this epoch is a function of this delegated stake. Authorities are periodically reconfigured according to the stake delegated to them. In any epoch, the set of authorities is &lt;a href="https://pmg.csail.mit.edu/papers/osdi99.pdf"&gt;Byzantine fault tolerant&lt;/a&gt;. At the end of the epoch, fees collected through all transactions processed are distributed to authorities according to their contribution to the operation of the system. Authorities can in turn share some of the fees as rewards to users that delegated stakes to them.&lt;/p&gt; 
&lt;p&gt;Sui is supported by several cutting-edge &lt;a href="https://github.com/MystenLabs/sui/raw/main/docs/content/concepts/research-papers.mdx"&gt;peer-reviewed studies&lt;/a&gt; and extensive years of open-source development.&lt;/p&gt; 
&lt;h2&gt;More About Sui&lt;/h2&gt; 
&lt;p&gt;Use the following links to learn more about Sui and the Sui ecosystem:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Learn more about working with Sui in the &lt;a href="https://docs.sui.io/"&gt;Sui Documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join the Sui community on &lt;a href="https://discord.gg/sui"&gt;Sui Discord&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Find out more about the Sui ecosystem on the &lt;a href="https://sui.io/resources/"&gt;Sui Resources&lt;/a&gt; page.&lt;/li&gt; 
 &lt;li&gt;Review information about Sui governance, &lt;a href="https://suifoundation.org/decentralization"&gt;decentralization&lt;/a&gt;, and &lt;a href="https://sui.io/grants-hub"&gt;Developer Grants Program&lt;/a&gt; on the &lt;a href="https://sui.io/about"&gt;Sui Foundation&lt;/a&gt; site.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; for details on how to contribute to Sui.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/CODE_OF_CONDUCT.MD"&gt;Code of Conduct&lt;/a&gt; for details on our code of conduct.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tauri-apps/tauri</title>
      <link>https://github.com/tauri-apps/tauri</link>
      <description>&lt;p&gt;Build smaller, faster, and more secure desktop and mobile applications with a web frontend.&lt;/p&gt;&lt;hr&gt;&lt;img src="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/splash.png" alt="Tauri"&gt; 
&lt;p&gt;&lt;a href="https://github.com/tauri-apps/tauri/tree/dev"&gt;&lt;img src="https://img.shields.io/badge/status-stable-blue.svg?sanitize=true" alt="status"&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tauri"&gt;&lt;img src="https://img.shields.io/badge/License-MIT%20or%20Apache%202-green.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://github.com/tauri-apps/tauri/actions/workflows/test-core.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/tauri-apps/tauri/test-core.yml?label=test%20core&amp;amp;logo=github" alt="test core"&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=shield" alt="FOSSA Status"&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/tauri"&gt;&lt;img src="https://img.shields.io/badge/chat-discord-7289da.svg?sanitize=true" alt="Chat Server"&gt;&lt;/a&gt; &lt;a href="https://tauri.app"&gt;&lt;img src="https://img.shields.io/badge/website-tauri.app-purple.svg?sanitize=true" alt="website"&gt;&lt;/a&gt; &lt;a href="https://good-labs.github.io/greater-good-affirmation"&gt;&lt;img src="https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg?sanitize=true" alt="https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg"&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tauri"&gt;&lt;img src="https://img.shields.io/badge/sponsor-Open%20Collective-blue.svg?sanitize=true" alt="support"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Tauri is a framework for building tiny, blazingly fast binaries for all major desktop platforms. Developers can integrate any front-end framework that compiles to HTML, JS and CSS for building their user interface. The backend of the application is a rust-sourced binary with an API that the front-end can interact with.&lt;/p&gt; 
&lt;p&gt;The user interface in Tauri apps currently leverages &lt;a href="https://docs.rs/tao"&gt;&lt;code&gt;tao&lt;/code&gt;&lt;/a&gt; as a window handling library on macOS, Windows, Linux, Android and iOS. To render your application, Tauri uses &lt;a href="https://github.com/tauri-apps/wry"&gt;WRY&lt;/a&gt;, a library which provides a unified interface to the system webview, leveraging WKWebView on macOS &amp;amp; iOS, WebView2 on Windows, WebKitGTK on Linux and Android System WebView on Android.&lt;/p&gt; 
&lt;p&gt;To learn more about the details of how all of these pieces fit together, please consult this &lt;a href="https://github.com/tauri-apps/tauri/raw/dev/ARCHITECTURE.md"&gt;ARCHITECTURE.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;If you are interested in making a tauri app, please visit the &lt;a href="https://tauri.app"&gt;documentation website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The quickest way to get started is to install the &lt;a href="https://v2.tauri.app/start/prerequisites/"&gt;prerequisites&lt;/a&gt; for your system and create a new project with &lt;a href="https://github.com/tauri-apps/create-tauri-app/#usage"&gt;&lt;code&gt;create-tauri-app&lt;/code&gt;&lt;/a&gt;. For example with &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm create tauri-app@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The list of Tauri's features includes, but is not limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in app bundler to create app bundles in formats like &lt;code&gt;.app&lt;/code&gt;, &lt;code&gt;.dmg&lt;/code&gt;, &lt;code&gt;.deb&lt;/code&gt;, &lt;code&gt;.rpm&lt;/code&gt;, &lt;code&gt;.AppImage&lt;/code&gt; and Windows installers like &lt;code&gt;.exe&lt;/code&gt; (via NSIS) and &lt;code&gt;.msi&lt;/code&gt; (via WiX).&lt;/li&gt; 
 &lt;li&gt;Built-in self updater (desktop only)&lt;/li&gt; 
 &lt;li&gt;System tray icons&lt;/li&gt; 
 &lt;li&gt;Native notifications&lt;/li&gt; 
 &lt;li&gt;Native WebView Protocol (tauri doesn't create a localhost http(s) server to serve the WebView contents)&lt;/li&gt; 
 &lt;li&gt;GitHub action for streamlined CI&lt;/li&gt; 
 &lt;li&gt;VS Code extension&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Platforms&lt;/h3&gt; 
&lt;p&gt;Tauri currently supports development and distribution on the following platforms:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Versions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Windows&lt;/td&gt; 
   &lt;td align="left"&gt;7 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;macOS&lt;/td&gt; 
   &lt;td align="left"&gt;10.15 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Linux&lt;/td&gt; 
   &lt;td align="left"&gt;webkit2gtk 4.0 for Tauri v1 (for example Ubuntu 18.04). webkit2gtk 4.1 for Tauri v2 (for example Ubuntu 22.04).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;iOS/iPadOS&lt;/td&gt; 
   &lt;td align="left"&gt;9 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Android&lt;/td&gt; 
   &lt;td align="left"&gt;7 and above (currently 8 and above)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before you start working on something, it's best to check if there is an existing issue first. It's also a good idea to stop by the Discord server and confirm with the team if it makes sense or if someone else is already working on it.&lt;/p&gt; 
&lt;p&gt;Please make sure to read the &lt;a href="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; 
&lt;p&gt;Thank you to everyone contributing to Tauri!&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;Documentation in a polyglot system is a tricky proposition. To this end, we prefer to use inline documentation in the Rust &amp;amp; JS source code as much as possible. Check out the hosting repository for the documentation site for further information: &lt;a href="https://github.com/tauri-apps/tauri-docs"&gt;https://github.com/tauri-apps/tauri-docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="middle"&gt; &lt;a href="https://crabnebula.dev" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/sponsors/crabnebula.svg?sanitize=true" alt="CrabNebula" width="283"&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For the complete list of sponsors please visit our &lt;a href="https://tauri.app#sponsors"&gt;website&lt;/a&gt; and &lt;a href="https://opencollective.com/tauri"&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Organization&lt;/h2&gt; 
&lt;p&gt;Tauri aims to be a sustainable collective based on principles that guide &lt;a href="https://sfosc.org"&gt;sustainable free and open software communities&lt;/a&gt;. To this end it has become a Programme within the &lt;a href="https://commonsconservancy.org/"&gt;Commons Conservancy&lt;/a&gt;, and you can contribute financially via &lt;a href="https://opencollective.com/tauri"&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;Code: (c) 2015 - Present - The Tauri Programme within The Commons Conservancy.&lt;/p&gt; 
&lt;p&gt;MIT or MIT/Apache 2.0 where applicable.&lt;/p&gt; 
&lt;p&gt;Logo: CC-BY-NC-ND&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Original Tauri Logo Designs by &lt;a href="https://alve.io/"&gt;Alve Larsson&lt;/a&gt;, &lt;a href="https://github.com/nothingismagick"&gt;Daniel Thompson-Yvetot&lt;/a&gt; and &lt;a href="https://github.com/akryum"&gt;Guillaume Chau&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_large"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=large" alt="FOSSA Status"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>embassy-rs/embassy</title>
      <link>https://github.com/embassy-rs/embassy</link>
      <description>&lt;p&gt;Modern embedded framework, using Rust and async.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Embassy&lt;/h1&gt; 
&lt;p&gt;Embassy is the next-generation framework for embedded applications. Write safe, correct, and energy-efficient embedded code faster, using the Rust programming language, its async facilities, and the Embassy libraries.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://embassy.dev/book/index.html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.embassy.dev/"&gt;API reference&lt;/a&gt; - &lt;a href="https://embassy.dev/"&gt;Website&lt;/a&gt; - &lt;a href="https://matrix.to/#/%23embassy-rs:matrix.org"&gt;Chat&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;Rust + async ‚ù§Ô∏è embedded&lt;/h2&gt; 
&lt;p&gt;The Rust programming language is blazingly fast and memory-efficient, with no runtime, garbage collector, or OS. It catches a wide variety of bugs at compile time, thanks to its full memory- and thread-safety, and expressive type system.&lt;/p&gt; 
&lt;p&gt;Rust's &lt;a href="https://rust-lang.github.io/async-book/"&gt;async/await&lt;/a&gt; allows for unprecedentedly easy and efficient multitasking in embedded systems. Tasks get transformed at compile time into state machines that get run cooperatively. It requires no dynamic memory allocation and runs on a single stack, so no per-task stack size tuning is required. It obsoletes the need for a traditional RTOS with kernel context switching, and is &lt;a href="https://tweedegolf.nl/en/blog/65/async-rust-vs-rtos-showdown"&gt;faster and smaller than one!&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Batteries included&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hardware Abstraction Layers&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;HALs implement safe, idiomatic Rust APIs to use the hardware capabilities, so raw register manipulation is not needed. The Embassy project maintains HALs for select hardware, but you can still use HALs from other projects with Embassy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-stm32/"&gt;embassy-stm32&lt;/a&gt;, for all STM32 microcontroller families.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-nrf/"&gt;embassy-nrf&lt;/a&gt;, for the Nordic Semiconductor nRF52, nRF53, nRF54 and nRF91 series.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-rp/"&gt;embassy-rp&lt;/a&gt;, for the Raspberry Pi RP2040 and RP23xx microcontrollers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-mspm0/"&gt;embassy-mspm0&lt;/a&gt;, for the Texas Instruments MSPM0 microcontrollers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/esp-rs"&gt;esp-rs&lt;/a&gt;, for the Espressif Systems ESP32 series of chips. 
    &lt;ul&gt; 
     &lt;li&gt;Embassy HAL support for Espressif chips, as well as Async Wi-Fi, Bluetooth, and ESP-NOW, is being developed in the &lt;a href="https://github.com/esp-rs/esp-hal"&gt;esp-rs/esp-hal&lt;/a&gt; repository.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ch32-rs/ch32-hal"&gt;ch32-hal&lt;/a&gt;, for the WCH 32-bit RISC-V(CH32V) series of chips.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AlexCharlton/mpfs-hal"&gt;mpfs-hal&lt;/a&gt;, for the Microchip PolarFire SoC.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/py32-rs/py32-hal"&gt;py32-hal&lt;/a&gt;, for the Puya Semiconductor PY32 series of microcontrollers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Time that Just Works&lt;/strong&gt; - No more messing with hardware timers. &lt;a href="https://docs.embassy.dev/embassy-time"&gt;embassy_time&lt;/a&gt; provides Instant, Duration, and Timer types that are globally available and never overflow.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Real-time ready&lt;/strong&gt; - Tasks on the same async executor run cooperatively, but you can create multiple executors with different priorities so that higher priority tasks preempt lower priority ones. See the &lt;a href="https://github.com/embassy-rs/embassy/raw/master/examples/nrf52840/src/bin/multiprio.rs"&gt;example&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Low-power ready&lt;/strong&gt; - Easily build devices with years of battery life. The async executor automatically puts the core to sleep when there's no work to do. Tasks are woken by interrupts, there is no busy-loop polling while waiting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Networking&lt;/strong&gt; - The &lt;a href="https://docs.embassy.dev/embassy-net/"&gt;embassy-net&lt;/a&gt; network stack implements extensive networking functionality, including Ethernet, IP, TCP, UDP, ICMP, and DHCP. Async drastically simplifies managing timeouts and serving multiple connections concurrently.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bluetooth&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;a href="https://github.com/embassy-rs/trouble"&gt;trouble&lt;/a&gt; crate provides a Bluetooth Low Energy 4.x and 5.x Host that runs on any microcontroller implementing the &lt;a href="https://github.com/embassy-rs/bt-hci"&gt;bt-hci&lt;/a&gt; traits (currently &lt;code&gt;nRF52&lt;/code&gt;, &lt;code&gt;rp2040&lt;/code&gt;, &lt;code&gt;rp23xx&lt;/code&gt; and &lt;code&gt;esp32&lt;/code&gt; and &lt;code&gt;serial&lt;/code&gt; controllers are supported).&lt;/li&gt; 
   &lt;li&gt;The &lt;a href="https://github.com/embassy-rs/nrf-softdevice"&gt;nrf-softdevice&lt;/a&gt; crate provides Bluetooth Low Energy 4.x and 5.x support for nRF52 microcontrollers.&lt;/li&gt; 
   &lt;li&gt;The &lt;a href="https://github.com/embassy-rs/embassy/tree/main/embassy-stm32-wpan"&gt;embassy-stm32-wpan&lt;/a&gt; crate provides Bluetooth Low Energy 5.x support for stm32wb microcontrollers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;LoRa&lt;/strong&gt; - The &lt;a href="https://github.com/lora-rs/lora-rs"&gt;lora-rs&lt;/a&gt; project provides an async LoRa and LoRaWAN stack that works well on Embassy.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;USB&lt;/strong&gt; - &lt;a href="https://docs.embassy.dev/embassy-usb/"&gt;embassy-usb&lt;/a&gt; implements a device-side USB stack. Implementations for common classes such as USB serial (CDC ACM) and USB HID are available, and a rich builder API allows building your own.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bootloader and DFU&lt;/strong&gt; - &lt;a href="https://github.com/embassy-rs/embassy/tree/master/embassy-boot"&gt;embassy-boot&lt;/a&gt; is a lightweight bootloader supporting firmware application upgrades in a power-fail-safe way, with trial boots and rollbacks.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sneak peek&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-rust,ignore"&gt;use defmt::info;
use embassy_executor::Spawner;
use embassy_time::{Duration, Timer};
use embassy_nrf::gpio::{AnyPin, Input, Level, Output, OutputDrive, Pin, Pull};
use embassy_nrf::{Peri, Peripherals};

// Declare async tasks
#[embassy_executor::task]
async fn blink(pin: Peri&amp;lt;'static, AnyPin&amp;gt;) {
    let mut led = Output::new(pin, Level::Low, OutputDrive::Standard);

    loop {
        // Timekeeping is globally available, no need to mess with hardware timers.
        led.set_high();
        Timer::after_millis(150).await;
        led.set_low();
        Timer::after_millis(150).await;
    }
}

// Main is itself an async task as well.
#[embassy_executor::main]
async fn main(spawner: Spawner) {
    let p = embassy_nrf::init(Default::default());

    // Spawned tasks run in the background, concurrently.
    spawner.spawn(blink(p.P0_13.into())).unwrap();

    let mut button = Input::new(p.P0_11, Pull::Up);
    loop {
        // Asynchronously wait for GPIO events, allowing other tasks
        // to run, or the core to sleep.
        button.wait_for_low().await;
        info!("Button pressed!");
        button.wait_for_high().await;
        info!("Button released!");
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Examples are found in the &lt;code&gt;examples/&lt;/code&gt; folder separated by the chip manufacturer they are designed to run on. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;examples/nrf52840&lt;/code&gt; run on the &lt;code&gt;nrf52840-dk&lt;/code&gt; board (PCA10056) but should be easily adaptable to other nRF52 chips and boards.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/nrf5340&lt;/code&gt; run on the &lt;code&gt;nrf5340-dk&lt;/code&gt; board (PCA10095).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/stm32xx&lt;/code&gt; for the various STM32 families.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/rp&lt;/code&gt; are for the RP2040 chip.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/std&lt;/code&gt; are designed to run locally on your PC.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Running examples&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;probe-rs&lt;/code&gt; following the instructions at &lt;a href="https://probe.rs"&gt;https://probe.rs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Change directory to the sample's base directory. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd examples/nrf52840
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Ensure &lt;code&gt;Cargo.toml&lt;/code&gt; sets the right feature for the name of the chip you are programming. If this name is incorrect, the example may fail to run or immediately crash after being programmed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure &lt;code&gt;.cargo/config.toml&lt;/code&gt; contains the name of the chip you are programming.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the example&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo run --release --bin blinky
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more help getting started, see &lt;a href="https://github.com/embassy-rs/embassy/wiki/Getting-Started"&gt;Getting Started&lt;/a&gt; and &lt;a href="https://github.com/embassy-rs/embassy/wiki/Running-the-Examples"&gt;Running the Examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Developing Embassy with Rust Analyzer-based editors&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://rust-analyzer.github.io/"&gt;Rust Analyzer&lt;/a&gt; is used by &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; and others. Given the multiple targets that Embassy serves, there is no Cargo workspace file. Instead, the Rust Analyzer must be told of the target project to work with. In the case of Visual Studio Code, please refer to the &lt;code&gt;.vscode/settings.json&lt;/code&gt; file's &lt;code&gt;rust-analyzer.linkedProjects&lt;/code&gt;setting.&lt;/p&gt; 
&lt;h2&gt;Minimum supported Rust version (MSRV)&lt;/h2&gt; 
&lt;p&gt;Embassy is guaranteed to compile on stable Rust 1.75 and up. It &lt;em&gt;might&lt;/em&gt; compile with older versions, but that may change in any new patch release.&lt;/p&gt; 
&lt;h2&gt;Why the name?&lt;/h2&gt; 
&lt;p&gt;EMBedded ASYnc! :)&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Embassy is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/embassy-rs/embassy/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/embassy-rs/embassy/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>casey/just</title>
      <link>https://github.com/casey/just</link>
      <description>&lt;p&gt;ü§ñ Just a command runner&lt;/p&gt;&lt;hr&gt;&lt;div align="right"&gt;
 Table of Contents‚ÜóÔ∏è
&lt;/div&gt; 
&lt;h1 align="center"&gt;&lt;code&gt;just&lt;/code&gt;&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://crates.io/crates/just"&gt; &lt;img src="https://img.shields.io/crates/v/just.svg?sanitize=true" alt="crates.io version"&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/casey/just/actions/workflows/ci.yaml"&gt; &lt;img src="https://github.com/casey/just/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="build status"&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/casey/just/releases"&gt; &lt;img src="https://img.shields.io/github/downloads/casey/just/total.svg?sanitize=true" alt="downloads"&gt; &lt;/a&gt; 
 &lt;a href="https://discord.gg/ezYScXR"&gt; &lt;img src="https://img.shields.io/discord/695580069837406228?logo=discord" alt="chat on discord"&gt; &lt;/a&gt; 
 &lt;a href="mailto:casey@rodarmor.com?subject=Thanks%20for%20Just!"&gt; &lt;img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg?sanitize=true" alt="say thanks"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a handy way to save and run project-specific commands.&lt;/p&gt; 
&lt;p&gt;This readme is also available as a &lt;a href="https://just.systems/man/en/"&gt;book&lt;/a&gt;. The book reflects the latest release, whereas the &lt;a href="https://github.com/casey/just/raw/master/README.md"&gt;readme on GitHub&lt;/a&gt; reflects latest master.&lt;/p&gt; 
&lt;p&gt;(‰∏≠ÊñáÊñáÊ°£Âú® &lt;a href="https://github.com/casey/just/raw/master/README.%E4%B8%AD%E6%96%87.md"&gt;ËøôÈáå&lt;/a&gt;, Âø´ÁúãËøáÊù•!)&lt;/p&gt; 
&lt;p&gt;Commands, called recipes, are stored in a file called &lt;code&gt;justfile&lt;/code&gt; with syntax inspired by &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/casey/just/master/screenshot.png" alt="screenshot"&gt;&lt;/p&gt; 
&lt;p&gt;You can then run them with &lt;code&gt;just RECIPE&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test-all
cc *.c -o main
./test --all
Yay, all your tests passed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; has a ton of useful features, and many improvements over &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a command runner, not a build system, so it avoids much of &lt;a href="https://raw.githubusercontent.com/casey/just/master/#what-are-the-idiosyncrasies-of-make-that-just-avoids"&gt;&lt;code&gt;make&lt;/code&gt;'s complexity and idiosyncrasies&lt;/a&gt;. No need for &lt;code&gt;.PHONY&lt;/code&gt; recipes!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Linux, MacOS, Windows, and other reasonable unices are supported with no additional dependencies. (Although if your system doesn't have an &lt;code&gt;sh&lt;/code&gt;, you'll need to &lt;a href="https://raw.githubusercontent.com/casey/just/master/#shell"&gt;choose a different shell&lt;/a&gt;.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Errors are specific and informative, and syntax errors are reported along with their source context.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recipes can accept &lt;a href="https://raw.githubusercontent.com/casey/just/master/#recipe-parameters"&gt;command line arguments&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wherever possible, errors are resolved statically. Unknown recipes and circular dependencies are reported before anything runs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/casey/just/master/#dotenv-settings"&gt;loads &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;, making it easy to populate environment variables.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recipes can be &lt;a href="https://raw.githubusercontent.com/casey/just/master/#listing-available-recipes"&gt;listed from the command line&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Command line completion scripts are &lt;a href="https://raw.githubusercontent.com/casey/just/master/#shell-completion-scripts"&gt;available for most popular shells&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recipes can be written in &lt;a href="https://raw.githubusercontent.com/casey/just/master/#shebang-recipes"&gt;arbitrary languages&lt;/a&gt;, like Python or NodeJS.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; can be invoked from any subdirectory, not just the directory that contains the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;And &lt;a href="https://just.systems/man/en/"&gt;much more&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you need help with &lt;code&gt;just&lt;/code&gt; please feel free to open an issue or ping me on &lt;a href="https://discord.gg/ezYScXR"&gt;Discord&lt;/a&gt;. Feature requests and bug reports are always welcome!&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; should run on any system with a reasonable &lt;code&gt;sh&lt;/code&gt;, including Linux, MacOS, and the BSDs.&lt;/p&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;On Windows, &lt;code&gt;just&lt;/code&gt; works with the &lt;code&gt;sh&lt;/code&gt; provided by &lt;a href="https://git-scm.com"&gt;Git for Windows&lt;/a&gt;, &lt;a href="https://desktop.github.com"&gt;GitHub Desktop&lt;/a&gt;, or &lt;a href="http://www.cygwin.com"&gt;Cygwin&lt;/a&gt;. After installation, &lt;code&gt;sh&lt;/code&gt; must be available in the &lt;code&gt;PATH&lt;/code&gt; of the shell you want to to invoke &lt;code&gt;just&lt;/code&gt; from.&lt;/p&gt; 
&lt;p&gt;If you'd rather not install &lt;code&gt;sh&lt;/code&gt;, you can use the &lt;code&gt;shell&lt;/code&gt; setting to use the shell of your choice.&lt;/p&gt; 
&lt;p&gt;Like PowerShell:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# use PowerShell instead of sh:
set shell := ["powershell.exe", "-c"]

hello:
  Write-Host "Hello, world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Ä¶or &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# use cmd.exe instead of sh:
set shell := ["cmd.exe", "/c"]

list:
  dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also set the shell using command-line arguments. For example, to use PowerShell, launch &lt;code&gt;just&lt;/code&gt; with &lt;code&gt;--shell powershell.exe --shell-arg -c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;(PowerShell is installed by default on Windows 7 SP1 and Windows Server 2008 R2 S1 and later, and &lt;code&gt;cmd.exe&lt;/code&gt; is quite fiddly, so PowerShell is recommended for most Windows users.)&lt;/p&gt; 
&lt;h3&gt;Packages&lt;/h3&gt; 
&lt;h4&gt;Cross-platform&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/alexellis/arkade"&gt;arkade&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;just&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;arkade get just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://asdf-vm.com"&gt;asdf&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/olofvndrhr/asdf-just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;asdf plugin add just&lt;/code&gt;&lt;br&gt; &lt;code&gt;asdf install just &amp;lt;version&amp;gt;&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.rust-lang.org"&gt;Cargo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cargo install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.conda.io/projects/conda/en/latest/index.html"&gt;Conda&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://anaconda.org/conda-forge/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;conda install -c conda-forge just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://formulae.brew.sh/formula/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;brew install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://nixos.org/nix/"&gt;Nix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/ju/just/package.nix"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/rust-just"&gt;rust-just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;npm install -g rust-just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://pipx.pypa.io/stable/"&gt;pipx&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://pypi.org/project/rust-just/"&gt;rust-just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pipx install rust-just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://snapcraft.io"&gt;Snap&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://snapcraft.io/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;snap install --edge --classic just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;BSD&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operating System&lt;/th&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.freebsd.org"&gt;FreeBSD&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.freebsd.org/doc/handbook/pkgng-intro.html"&gt;pkg&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.freshports.org/deskutils/just/"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pkg install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operating System&lt;/th&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://alpinelinux.org"&gt;Alpine&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management"&gt;apk-tools&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://pkgs.alpinelinux.org/package/edge/community/x86_64/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;apk add just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.archlinux.org"&gt;Arch&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.archlinux.org/title/Pacman"&gt;pacman&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/just/"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pacman -S just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href="https://debian.org"&gt;Debian 13 (unreleased)&lt;/a&gt; and &lt;a href="https://ubuntu.com"&gt;Ubuntu 24.04&lt;/a&gt; derivatives&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/APT_(software)"&gt;apt&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://packages.debian.org/trixie/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;apt install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://debian.org"&gt;Debian&lt;/a&gt; and &lt;a href="https://ubuntu.com"&gt;Ubuntu&lt;/a&gt; derivatives&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://mpr.makedeb.org"&gt;MPR&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://mpr.makedeb.org/packages/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;git clone https://mpr.makedeb.org/just&lt;/code&gt;&lt;br&gt; &lt;code&gt;cd just&lt;/code&gt;&lt;br&gt; &lt;code&gt;makedeb -si&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://debian.org"&gt;Debian&lt;/a&gt; and &lt;a href="https://ubuntu.com"&gt;Ubuntu&lt;/a&gt; derivatives&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.makedeb.org/prebuilt-mpr"&gt;Prebuilt-MPR&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://mpr.makedeb.org/packages/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;sup&gt;&lt;b&gt;You must have the &lt;a href="https://docs.makedeb.org/prebuilt-mpr/getting-started/#setting-up-the-repository"&gt;Prebuilt-MPR set up&lt;/a&gt; on your system in order to run this command.&lt;/b&gt;&lt;/sup&gt;&lt;br&gt; &lt;code&gt;apt install just&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://getfedora.org"&gt;Fedora&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://dnf.readthedocs.io/en/latest/"&gt;DNF&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://src.fedoraproject.org/rpms/rust-just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;dnf install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gentoo.org"&gt;Gentoo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.gentoo.org/wiki/Portage"&gt;Portage&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gentoo-mirror/guru/tree/master/dev-build/just"&gt;guru/dev-build/just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;eselect repository enable guru&lt;/code&gt;&lt;br&gt; &lt;code&gt;emerge --sync guru&lt;/code&gt;&lt;br&gt; &lt;code&gt;emerge dev-build/just&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://nixos.org/nixos/"&gt;NixOS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://nixos.org/nix/"&gt;Nix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/ju/just/package.nix"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nix-env -iA nixos.just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://opensuse.org"&gt;openSUSE&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://en.opensuse.org/Portal:Zypper"&gt;Zypper&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://build.opensuse.org/package/show/Base:System/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;zypper in just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://getsol.us"&gt;Solus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://getsol.us/articles/package-management/basics/en"&gt;eopkg&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://dev.getsol.us/source/just/"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;eopkg install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://voidlinux.org"&gt;Void&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.voidlinux.org/XBPS"&gt;XBPS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/void-linux/void-packages/raw/master/srcpkgs/just/template"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;xbps-install -S just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/michidk/just-choco"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;choco install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://scoop.sh"&gt;Scoop&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/just.json"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;scoop install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/"&gt;Windows Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/c/Casey/Just"&gt;Casey/Just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;winget install --id Casey.Just --exact&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.macports.org"&gt;MacPorts&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://ports.macports.org/port/just/summary"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;port install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/just.svg?sanitize=true" alt="just package version table"&gt;&lt;/p&gt; 
&lt;h3&gt;Pre-Built Binaries&lt;/h3&gt; 
&lt;p&gt;Pre-built binaries for Linux, MacOS, and Windows can be found on &lt;a href="https://github.com/casey/just/releases"&gt;the releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can use the following command on Linux, MacOS, or Windows to download the latest release, just replace &lt;code&gt;DEST&lt;/code&gt; with the directory where you'd like to put &lt;code&gt;just&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to DEST
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, to install &lt;code&gt;just&lt;/code&gt; to &lt;code&gt;~/bin&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;# create ~/bin
mkdir -p ~/bin

# download and extract just to ~/bin/just
curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin

# add `~/bin` to the paths that your shell searches for executables
# this line should be added to your shells initialization file,
# e.g. `~/.bashrc` or `~/.zshrc`
export PATH="$PATH:$HOME/bin"

# just should now be executable
just --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;install.sh&lt;/code&gt; may fail on GitHub Actions, or in other environments where many machines share IP addresses. &lt;code&gt;install.sh&lt;/code&gt; calls GitHub APIs in order to determine the latest version of &lt;code&gt;just&lt;/code&gt; to install, and those API calls are rate-limited on a per-IP basis. To make &lt;code&gt;install.sh&lt;/code&gt; more reliable in such circumstances, pass a specific tag to install with &lt;code&gt;--tag&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Another way to avoid rate-limiting is to pass a GitHub authentication token to &lt;code&gt;install.sh&lt;/code&gt; as an environment variable named &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;, allowing it to authenticate its requests.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/casey/just/releases"&gt;Releases&lt;/a&gt; include a &lt;code&gt;SHA256SUM&lt;/code&gt; file which can be used to verify the integrity of pre-built binary archives.&lt;/p&gt; 
&lt;p&gt;To verify a release, download the pre-built binary archive along with the &lt;code&gt;SHA256SUM&lt;/code&gt; file and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;shasum --algorithm 256 --ignore-missing --check SHA256SUMS
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GitHub Actions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can be installed on GitHub Actions in a few ways.&lt;/p&gt; 
&lt;p&gt;Using package managers pre-installed on GitHub Actions runners on MacOS with &lt;code&gt;brew install just&lt;/code&gt;, and on Windows with &lt;code&gt;choco install just&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;With &lt;a href="https://github.com/extractions/setup-just"&gt;extractions/setup-just&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- uses: extractions/setup-just@v3
  with:
    just-version: 1.5.0  # optional semver specification, otherwise latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with &lt;a href="https://github.com/taiki-e/install-action"&gt;taiki-e/install-action&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- uses: taiki-e/install-action@just
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Release RSS Feed&lt;/h3&gt; 
&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS feed&lt;/a&gt; of &lt;code&gt;just&lt;/code&gt; releases is available &lt;a href="https://github.com/casey/just/releases.atom"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Node.js Installation&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://npmjs.com/package/just-install"&gt;just-install&lt;/a&gt; can be used to automate installation of &lt;code&gt;just&lt;/code&gt; in Node.js applications.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a great, more robust alternative to npm scripts. If you want to include &lt;code&gt;just&lt;/code&gt; in the dependencies of a Node.js application, &lt;code&gt;just-install&lt;/code&gt; will install a local, platform-specific binary as part of the &lt;code&gt;npm install&lt;/code&gt; command. This removes the need for every developer to install &lt;code&gt;just&lt;/code&gt; independently using one of the processes mentioned above. After installation, the &lt;code&gt;just&lt;/code&gt; command will work in npm scripts or with npx. It's great for teams who want to make the set up process for their project as easy as possible.&lt;/p&gt; 
&lt;p&gt;For more information, see the &lt;a href="https://github.com/brombal/just-install#readme"&gt;just-install README file&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Backwards Compatibility&lt;/h2&gt; 
&lt;p&gt;With the release of version 1.0, &lt;code&gt;just&lt;/code&gt; features a strong commitment to backwards compatibility and stability.&lt;/p&gt; 
&lt;p&gt;Future releases will not introduce backwards incompatible changes that make existing &lt;code&gt;justfile&lt;/code&gt;s stop working, or break working invocations of the command-line interface.&lt;/p&gt; 
&lt;p&gt;This does not, however, preclude fixing outright bugs, even if doing so might break &lt;code&gt;justfiles&lt;/code&gt; that rely on their behavior.&lt;/p&gt; 
&lt;p&gt;There will never be a &lt;code&gt;just&lt;/code&gt; 2.0. Any desirable backwards-incompatible changes will be opt-in on a per-&lt;code&gt;justfile&lt;/code&gt; basis, so users may migrate at their leisure.&lt;/p&gt; 
&lt;p&gt;Features that aren't yet ready for stabilization are marked as unstable and may be changed or removed at any time. Using unstable features produces an error by default, which can be suppressed with by passing the &lt;code&gt;--unstable&lt;/code&gt; flag, &lt;code&gt;set unstable&lt;/code&gt;, or setting the environment variable &lt;code&gt;JUST_UNSTABLE&lt;/code&gt;, to any value other than &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or the empty string.&lt;/p&gt; 
&lt;h2&gt;Editor Support&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;justfile&lt;/code&gt; syntax is close enough to &lt;code&gt;make&lt;/code&gt; that you may want to tell your editor to use &lt;code&gt;make&lt;/code&gt; syntax highlighting for &lt;code&gt;just&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Vim and Neovim&lt;/h3&gt; 
&lt;p&gt;Vim version 9.1.1042 or better and Neovim version 0.11 or better support Justfile syntax highlighting out of the box, thanks to &lt;a href="https://github.com/pbnj"&gt;pbnj&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;vim-just&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The &lt;a href="https://github.com/NoahTheDuke/vim-just"&gt;vim-just&lt;/a&gt; plugin provides syntax highlighting for &lt;code&gt;justfile&lt;/code&gt;s.&lt;/p&gt; 
&lt;p&gt;Install it with your favorite package manager, like &lt;a href="https://github.com/junegunn/vim-plug"&gt;Plug&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-vim"&gt;call plug#begin()

Plug 'NoahTheDuke/vim-just'

call plug#end()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with Vim's built-in package support:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;mkdir -p ~/.vim/pack/vendor/start
cd ~/.vim/pack/vendor/start
git clone https://github.com/NoahTheDuke/vim-just.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;tree-sitter-just&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://github.com/IndianBoy42/tree-sitter-just"&gt;tree-sitter-just&lt;/a&gt; is an &lt;a href="https://github.com/nvim-treesitter/nvim-treesitter"&gt;Nvim Treesitter&lt;/a&gt; plugin for Neovim.&lt;/p&gt; 
&lt;h4&gt;Makefile Syntax Highlighting&lt;/h4&gt; 
&lt;p&gt;Vim's built-in makefile syntax highlighting isn't perfect for &lt;code&gt;justfile&lt;/code&gt;s, but it's better than nothing. You can put the following in &lt;code&gt;~/.vim/filetype.vim&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-vimscript"&gt;if exists("did_load_filetypes")
  finish
endif

augroup filetypedetect
  au BufNewFile,BufRead justfile setf make
augroup END
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or add the following to an individual &lt;code&gt;justfile&lt;/code&gt; to enable &lt;code&gt;make&lt;/code&gt; mode on a per-file basis:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;# vim: set ft=make :
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Emacs&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/leon-barrett/just-mode.el"&gt;just-mode&lt;/a&gt; provides syntax highlighting and automatic indentation of &lt;code&gt;justfile&lt;/code&gt;s. It is available on &lt;a href="https://melpa.org/"&gt;MELPA&lt;/a&gt; as &lt;a href="https://melpa.org/#/just-mode"&gt;just-mode&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/psibi/justl.el"&gt;justl&lt;/a&gt; provides commands for executing and listing recipes.&lt;/p&gt; 
&lt;p&gt;You can add the following to an individual &lt;code&gt;justfile&lt;/code&gt; to enable &lt;code&gt;make&lt;/code&gt; mode on a per-file basis:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;# Local Variables:
# mode: makefile
# End:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Visual Studio Code&lt;/h3&gt; 
&lt;p&gt;An extension for VS Code is &lt;a href="https://github.com/nefrob/vscode-just"&gt;available here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unmaintained VS Code extensions include &lt;a href="https://github.com/skellock/vscode-just"&gt;skellock/vscode-just&lt;/a&gt; and &lt;a href="https://github.com/sclu1034/vscode-just"&gt;sclu1034/vscode-just&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;JetBrains IDEs&lt;/h3&gt; 
&lt;p&gt;A plugin for JetBrains IDEs by &lt;a href="https://github.com/linux-china"&gt;linux_china&lt;/a&gt; is &lt;a href="https://plugins.jetbrains.com/plugin/18658-just"&gt;available here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Kakoune&lt;/h3&gt; 
&lt;p&gt;Kakoune supports &lt;code&gt;justfile&lt;/code&gt; syntax highlighting out of the box, thanks to TeddyDD.&lt;/p&gt; 
&lt;h3&gt;Helix&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://helix-editor.com/"&gt;Helix&lt;/a&gt; supports &lt;code&gt;justfile&lt;/code&gt; syntax highlighting out-of-the-box since version 23.05.&lt;/p&gt; 
&lt;h3&gt;Sublime Text&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://github.com/nk9/just_sublime"&gt;Just package&lt;/a&gt; by &lt;a href="https://github.com/nk9"&gt;nk9&lt;/a&gt; with &lt;code&gt;just&lt;/code&gt; syntax and some other tools is available on &lt;a href="https://packagecontrol.io/packages/Just"&gt;PackageControl&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Micro&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://micro-editor.github.io/"&gt;Micro&lt;/a&gt; supports Justfile syntax highlighting out of the box, thanks to &lt;a href="https://github.com/tomodachi94"&gt;tomodachi94&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Zed&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://github.com/jackTabsCode/zed-just/"&gt;zed-just&lt;/a&gt; extension by &lt;a href="https://github.com/jackTabsCode"&gt;jackTabsCode&lt;/a&gt; is avilable on the &lt;a href="https://zed.dev/extensions?query=just"&gt;Zed extensions page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Other Editors&lt;/h3&gt; 
&lt;p&gt;Feel free to send me the commands necessary to get syntax highlighting working in your editor of choice so that I may include them here.&lt;/p&gt; 
&lt;h3&gt;Model Context Protocol&lt;/h3&gt; 
&lt;p&gt;&lt;a href="http://github.com/promptexecution/just-mcp"&gt;just-mcp&lt;/a&gt; provides a &lt;a href="https://en.wikipedia.org/wiki/Model_Context_Protocol"&gt;model context protocol&lt;/a&gt; adapter to allow LLMs to query the contents of &lt;code&gt;justfiles&lt;/code&gt; and run recipes.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;See the installation section for how to install &lt;code&gt;just&lt;/code&gt; on your computer. Try running &lt;code&gt;just --version&lt;/code&gt; to make sure that it's installed correctly.&lt;/p&gt; 
&lt;p&gt;For an overview of the syntax, check out &lt;a href="https://cheatography.com/linux-china/cheat-sheets/justfile/"&gt;this cheatsheet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once &lt;code&gt;just&lt;/code&gt; is installed and working, create a file named &lt;code&gt;justfile&lt;/code&gt; in the root of your project with the following contents:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;recipe-name:
  echo 'This is a recipe!'

# this is a comment
another-recipe:
  @echo 'This is another recipe.'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you invoke &lt;code&gt;just&lt;/code&gt; it looks for file &lt;code&gt;justfile&lt;/code&gt; in the current directory and upwards, so you can invoke it from any subdirectory of your project.&lt;/p&gt; 
&lt;p&gt;The search for a &lt;code&gt;justfile&lt;/code&gt; is case insensitive, so any case, like &lt;code&gt;Justfile&lt;/code&gt;, &lt;code&gt;JUSTFILE&lt;/code&gt;, or &lt;code&gt;JuStFiLe&lt;/code&gt;, will work. &lt;code&gt;just&lt;/code&gt; will also look for files with the name &lt;code&gt;.justfile&lt;/code&gt;, in case you'd like to hide a &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Running &lt;code&gt;just&lt;/code&gt; with no arguments runs the first recipe in the &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
echo 'This is a recipe!'
This is a recipe!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One or more arguments specify the recipe(s) to run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just another-recipe
This is another recipe.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; prints each command to standard error before running it, which is why &lt;code&gt;echo 'This is a recipe!'&lt;/code&gt; was printed. This is suppressed for lines starting with &lt;code&gt;@&lt;/code&gt;, which is why &lt;code&gt;echo 'This is another recipe.'&lt;/code&gt; was not printed.&lt;/p&gt; 
&lt;p&gt;Recipes stop running if a command fails. Here &lt;code&gt;cargo publish&lt;/code&gt; will only run if &lt;code&gt;cargo test&lt;/code&gt; succeeds:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;publish:
  cargo test
  # tests passed, time to publish!
  cargo publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes can depend on other recipes. Here the &lt;code&gt;test&lt;/code&gt; recipe depends on the &lt;code&gt;build&lt;/code&gt; recipe, so &lt;code&gt;build&lt;/code&gt; will run before &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cc main.c foo.c bar.c -o main

test: build
  ./test

sloc:
  @echo "`wc -l *.c` lines of code"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test
cc main.c foo.c bar.c -o main
./test
testing‚Ä¶ all tests passed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes without dependencies will run in the order they're given on the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build sloc
cc main.c foo.c bar.c -o main
1337 lines of code
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Dependencies will always run first, even if they are passed after a recipe that depends on them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test build
cc main.c foo.c bar.c -o main
./test
testing‚Ä¶ all tests passed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes may depend on recipes in submodules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod foo

baz: foo::bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;A variety of &lt;code&gt;justfile&lt;/code&gt;s can be found in the &lt;a href="https://github.com/casey/just/tree/master/examples"&gt;examples directory&lt;/a&gt; and on &lt;a href="https://github.com/search?q=path%3A**%2Fjustfile&amp;amp;type=code"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;The Default Recipe&lt;/h3&gt; 
&lt;p&gt;When &lt;code&gt;just&lt;/code&gt; is invoked without a recipe, it runs the first recipe in the &lt;code&gt;justfile&lt;/code&gt;. This recipe might be the most frequently run command in the project, like running the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test:
  cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use dependencies to run multiple recipes by default:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default: lint build test

build:
  echo Building‚Ä¶

test:
  echo Testing‚Ä¶

lint:
  echo Linting‚Ä¶
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If no recipe makes sense as the default recipe, you can add a recipe to the beginning of your &lt;code&gt;justfile&lt;/code&gt; that lists the available recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default:
  just --list
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Listing Available Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes can be listed in alphabetical order with &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    build
    test
    deploy
    lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes in &lt;a href="https://raw.githubusercontent.com/casey/just/master/#modules1190"&gt;submodules&lt;/a&gt; can be listed with &lt;code&gt;just --list PATH&lt;/code&gt;, where &lt;code&gt;PATH&lt;/code&gt; is a space- or &lt;code&gt;::&lt;/code&gt;-separated module path:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cat justfile
mod foo
$ cat foo.just
mod bar
$ cat bar.just
baz:
$ just foo bar
Available recipes:
    baz
$ just foo::bar
Available recipes:
    baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just --summary&lt;/code&gt; is more concise:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --summary
build test deploy lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Pass &lt;code&gt;--unsorted&lt;/code&gt; to print recipes in the order they appear in the &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test:
  echo 'Testing!'

build:
  echo 'Building!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --unsorted
Available recipes:
    test
    build
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --summary --unsorted
test build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you'd like &lt;code&gt;just&lt;/code&gt; to default to listing the recipes in the &lt;code&gt;justfile&lt;/code&gt;, you can use this as your default recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default:
  @just --list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you may need to add &lt;code&gt;--justfile {{justfile()}}&lt;/code&gt; to the line above. Without it, if you executed &lt;code&gt;just -f /some/distant/justfile -d .&lt;/code&gt; or &lt;code&gt;just -f ./non-standard-justfile&lt;/code&gt;, the plain &lt;code&gt;just --list&lt;/code&gt; inside the recipe would not necessarily use the file you provided. It would try to find a justfile in your current path, maybe even resulting in a &lt;code&gt;No justfile found&lt;/code&gt; error.&lt;/p&gt; 
&lt;p&gt;The heading text can be customized with &lt;code&gt;--list-heading&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --list-heading $'Cool stuff‚Ä¶\n'
Cool stuff‚Ä¶
    test
    build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the indentation can be customized with &lt;code&gt;--list-prefix&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --list-prefix ¬∑¬∑¬∑¬∑
Available recipes:
¬∑¬∑¬∑¬∑test
¬∑¬∑¬∑¬∑build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The argument to &lt;code&gt;--list-heading&lt;/code&gt; replaces both the heading and the newline following it, so it should contain a newline if non-empty. It works this way so you can suppress the heading line entirely by passing the empty string:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --list-heading ''
    test
    build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Invoking Multiple Recipes&lt;/h3&gt; 
&lt;p&gt;Multiple recipes may be invoked on the command line at once:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  make web

serve:
  python3 -m http.server -d out 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build serve
make web
python3 -m http.server -d out 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Keep in mind that recipes with parameters will swallow arguments, even if they match the names of other recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build project:
  make {{project}}

serve:
  python3 -m http.server -d out 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build serve
make: *** No rule to make target `serve'.  Stop.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--one&lt;/code&gt; flag can be used to restrict command-line invocations to a single recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --one build serve
error: Expected 1 command-line recipe invocation but found 2.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Working Directory&lt;/h3&gt; 
&lt;p&gt;By default, recipes run with the working directory set to the directory that contains the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;[no-cd]&lt;/code&gt; attribute can be used to make recipes run with the working directory set to directory in which &lt;code&gt;just&lt;/code&gt; was invoked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@foo:
  pwd

[no-cd]
@bar:
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cd subdir
$ just foo
/
$ just bar
/subdir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can override the working directory for all recipes with &lt;code&gt;set working-directory := '‚Ä¶'&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set working-directory := 'bar'

@foo:
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ pwd
/home/bob
$ just foo
/home/bob/bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can override the working directory for a specific recipe with the &lt;code&gt;working-directory&lt;/code&gt; attribute&lt;sup&gt;1.38.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[working-directory: 'bar']
@foo:
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ pwd
/home/bob
$ just foo
/home/bob/bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The argument to the &lt;code&gt;working-directory&lt;/code&gt; setting or &lt;code&gt;working-directory&lt;/code&gt; attribute may be absolute or relative. If it is relative it is interpreted relative to the default working directory.&lt;/p&gt; 
&lt;h3&gt;Aliases&lt;/h3&gt; 
&lt;p&gt;Aliases allow recipes to be invoked on the command line with alternative names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;alias b := build

build:
  echo 'Building!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
echo 'Building!'
Building!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The target of an alias may be a recipe in a submodule:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod foo

alias baz := foo::bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Settings&lt;/h3&gt; 
&lt;p&gt;Settings control interpretation and execution. Each setting may be specified at most once, anywhere in the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["zsh", "-cu"]

foo:
  # this line will be run as `zsh -cu 'ls **/*.txt'`
  ls **/*.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Table of Settings&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;allow-duplicate-recipes&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Allow recipes appearing later in a &lt;code&gt;justfile&lt;/code&gt; to override earlier recipes with the same name.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;allow-duplicate-variables&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Allow variables appearing later in a &lt;code&gt;justfile&lt;/code&gt; to override earlier variables with the same name.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-filename&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file with a custom name, if present.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-load&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file, if present.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-override&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Override existing environment variables with values from the &lt;code&gt;.env&lt;/code&gt; file.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-path&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file from a custom path and error if not present. Overrides &lt;code&gt;dotenv-filename&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-required&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Error if a &lt;code&gt;.env&lt;/code&gt; file isn't found.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;export&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Export all variables as environment variables.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;fallback&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Search &lt;code&gt;justfile&lt;/code&gt; in parent directory if the first recipe on the command line is not found.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ignore-comments&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Ignore recipe lines beginning with &lt;code&gt;#&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;positional-arguments&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pass positional arguments.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;quiet&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Disable echoing recipe lines before executing.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;script-interpreter&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS‚Ä¶]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;['sh', '-eu']&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set command used to invoke recipes with empty &lt;code&gt;[script]&lt;/code&gt; attribute.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS‚Ä¶]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Set command used to invoke recipes and evaluate backticks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;tempdir&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Create temporary directories in &lt;code&gt;tempdir&lt;/code&gt; instead of the system default temporary directory.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;unstable&lt;/code&gt;&lt;sup&gt;1.31.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable unstable features.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;windows-powershell&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use PowerShell on Windows as default shell. (Deprecated. Use &lt;code&gt;windows-shell&lt;/code&gt; instead.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;windows-shell&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS‚Ä¶]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Set the command used to invoke recipes and evaluate backticks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;working-directory&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Set the working directory for recipes and backticks, relative to the default working directory.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Boolean settings can be written as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;set NAME
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which is equivalent to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;set NAME := true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Allow Duplicate Recipes&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;allow-duplicate-recipes&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, defining multiple recipes with the same name is not an error and the last definition is used. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set allow-duplicate-recipes

@foo:
  echo foo

@foo:
  echo bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Allow Duplicate Variables&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;allow-duplicate-variables&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, defining multiple variables with the same name is not an error and the last definition is used. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set allow-duplicate-variables

a := "foo"
a := "bar"

@foo:
  echo {{a}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Dotenv Settings&lt;/h4&gt; 
&lt;p&gt;If any of &lt;code&gt;dotenv-load&lt;/code&gt;, &lt;code&gt;dotenv-filename&lt;/code&gt;, &lt;code&gt;dotenv-override&lt;/code&gt;, &lt;code&gt;dotenv-path&lt;/code&gt;, or &lt;code&gt;dotenv-required&lt;/code&gt; are set, &lt;code&gt;just&lt;/code&gt; will try to load environment variables from a file.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-path&lt;/code&gt; is set, &lt;code&gt;just&lt;/code&gt; will look for a file at the given path, which may be absolute, or relative to the working directory.&lt;/p&gt; 
&lt;p&gt;The command-line option &lt;code&gt;--dotenv-path&lt;/code&gt;, short form &lt;code&gt;-E&lt;/code&gt;, can be used to set or override &lt;code&gt;dotenv-path&lt;/code&gt; at runtime.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-filename&lt;/code&gt; is set &lt;code&gt;just&lt;/code&gt; will look for a file at the given path, relative to the working directory and each of its ancestors.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-filename&lt;/code&gt; is not set, but &lt;code&gt;dotenv-load&lt;/code&gt; or &lt;code&gt;dotenv-required&lt;/code&gt; are set, just will look for a file named &lt;code&gt;.env&lt;/code&gt;, relative to the working directory and each of its ancestors.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;dotenv-filename&lt;/code&gt; and &lt;code&gt;dotenv-path&lt;/code&gt; are similar, but &lt;code&gt;dotenv-path&lt;/code&gt; is only checked relative to the working directory, whereas &lt;code&gt;dotenv-filename&lt;/code&gt; is checked relative to the working directory and each of its ancestors.&lt;/p&gt; 
&lt;p&gt;It is not an error if an environment file is not found, unless &lt;code&gt;dotenv-required&lt;/code&gt; is set.&lt;/p&gt; 
&lt;p&gt;The loaded variables are environment variables, not &lt;code&gt;just&lt;/code&gt; variables, and so must be accessed using &lt;code&gt;$VARIABLE_NAME&lt;/code&gt; in recipes and backticks.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-override&lt;/code&gt; is set, variables from the environment file will override existing environment variables.&lt;/p&gt; 
&lt;p&gt;For example, if your &lt;code&gt;.env&lt;/code&gt; file contains:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;# a comment, will be ignored
DATABASE_ADDRESS=localhost:6379
SERVER_PORT=1337
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And your &lt;code&gt;justfile&lt;/code&gt; contains:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set dotenv-load

serve:
  @echo "Starting server with database $DATABASE_ADDRESS on port $SERVER_PORT‚Ä¶"
  ./server --database $DATABASE_ADDRESS --port $SERVER_PORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just serve&lt;/code&gt; will output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just serve
Starting server with database localhost:6379 on port 1337‚Ä¶
./server --database $DATABASE_ADDRESS --port $SERVER_PORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Export&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;export&lt;/code&gt; setting causes all &lt;code&gt;just&lt;/code&gt; variables to be exported as environment variables. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set export

a := "hello"

@foo b:
  echo $a
  echo $b
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo goodbye
hello
goodbye
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Positional Arguments&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;positional-arguments&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, recipe arguments will be passed as positional arguments to commands. For linewise recipes, argument &lt;code&gt;$0&lt;/code&gt; will be the name of the recipe.&lt;/p&gt; 
&lt;p&gt;For example, running this recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set positional-arguments

@foo bar:
  echo $0
  echo $1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will produce the following output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo hello
foo
hello
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using an &lt;code&gt;sh&lt;/code&gt;-compatible shell, such as &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;$@&lt;/code&gt; expands to the positional arguments given to the recipe, starting from one. When used within double quotes as &lt;code&gt;"$@"&lt;/code&gt;, arguments including whitespace will be passed on as if they were double-quoted. That is, &lt;code&gt;"$@"&lt;/code&gt; is equivalent to &lt;code&gt;"$1" "$2"&lt;/code&gt;‚Ä¶ When there are no positional parameters, &lt;code&gt;"$@"&lt;/code&gt; and &lt;code&gt;$@&lt;/code&gt; expand to nothing (i.e., they are removed).&lt;/p&gt; 
&lt;p&gt;This example recipe will print arguments one by one on separate lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set positional-arguments

@test *args='':
  bash -c 'while (( "$#" )); do echo - $1; shift; done' -- "$@"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Running it with &lt;em&gt;two&lt;/em&gt; arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test foo "bar baz"
- foo
- bar baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Positional arguments may also be turned on on a per-recipe basis with the &lt;code&gt;[positional-arguments]&lt;/code&gt; attribute&lt;sup&gt;1.29.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[positional-arguments]
@foo bar:
  echo $0
  echo $1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that PowerShell does not handle positional arguments in the same way as other shells, so turning on positional arguments will likely break recipes that use PowerShell.&lt;/p&gt; 
&lt;p&gt;If using PowerShell 7.4 or better, the &lt;code&gt;-CommandWithArgs&lt;/code&gt; flag will make positional arguments work as expected:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ['pwsh.exe', '-CommandWithArgs']
set positional-arguments

print-args a b c:
  Write-Output @($args[1..($args.Count - 1)])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Shell&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;shell&lt;/code&gt; setting controls the command used to invoke recipe lines and backticks. Shebang recipes are unaffected. The default shell is &lt;code&gt;sh -cu&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# use python3 to execute recipe lines and backticks
set shell := ["python3", "-c"]

# use print to capture result of evaluation
foos := `print("foo" * 4)`

foo:
  print("Snake snake snake snake.")
  print("{{foos}}")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; passes the command to be executed as an argument. Many shells will need an additional flag, often &lt;code&gt;-c&lt;/code&gt;, to make them evaluate the first argument.&lt;/p&gt; 
&lt;h5&gt;Windows Shell&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;sh&lt;/code&gt; on Windows by default. To use a different shell on Windows, use &lt;code&gt;windows-shell&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]

hello:
  Write-Host "Hello, world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://github.com/casey/just/raw/master/examples/powershell.just"&gt;powershell.just&lt;/a&gt; for a justfile that uses PowerShell on all platforms.&lt;/p&gt; 
&lt;h5&gt;Windows PowerShell&lt;/h5&gt; 
&lt;p&gt;&lt;em&gt;&lt;code&gt;set windows-powershell&lt;/code&gt; uses the legacy &lt;code&gt;powershell.exe&lt;/code&gt; binary, and is no longer recommended. See the &lt;code&gt;windows-shell&lt;/code&gt; setting above for a more flexible way to control which shell is used on Windows.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;sh&lt;/code&gt; on Windows by default. To use &lt;code&gt;powershell.exe&lt;/code&gt; instead, set &lt;code&gt;windows-powershell&lt;/code&gt; to true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set windows-powershell := true

hello:
  Write-Host "Hello, world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Python 3&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["python3", "-c"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Bash&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["bash", "-uc"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Z Shell&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["zsh", "-uc"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Fish&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["fish", "-c"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Nushell&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["nu", "-c"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change the default table mode to &lt;code&gt;light&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ['nu', '-m', 'light', '-c']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/nushell/nushell"&gt;Nushell&lt;/a&gt; was written in Rust, and &lt;strong&gt;has cross-platform support for Windows / macOS and Linux&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Documentation Comments&lt;/h3&gt; 
&lt;p&gt;Comments immediately preceding a recipe will appear in &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# build stuff
build:
  ./bin/build

# test stuff
test:
  ./bin/test
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    build # build stuff
    test # test stuff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;[doc]&lt;/code&gt; attribute can be used to set or suppress a recipe's doc comment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# This comment won't appear
[doc('Build stuff')]
build:
  ./bin/build

# This one won't either
[doc]
test:
  ./bin/test
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    build # Build stuff
    test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Expressions and Substitutions&lt;/h3&gt; 
&lt;p&gt;Various operators and function calls are supported in expressions, which may be used in assignments, default recipe arguments, and inside recipe body &lt;code&gt;{{‚Ä¶}}&lt;/code&gt; substitutions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;tmpdir  := `mktemp -d`
version := "0.2.7"
tardir  := tmpdir / "awesomesauce-" + version
tarball := tardir + ".tar.gz"
config  := quote(config_dir() / ".project-config")

publish:
  rm -f {{tarball}}
  mkdir {{tardir}}
  cp README.md *.c {{ config }} {{tardir}}
  tar zcvf {{tarball}} {{tardir}}
  scp {{tarball}} me@server.com:release/
  rm -rf {{tarball}} {{tardir}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Concatenation&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator returns the left-hand argument concatenated with the right-hand argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foobar := 'foo' + 'bar'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Logical Operators&lt;/h4&gt; 
&lt;p&gt;The logical operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; can be used to coalesce string values&lt;sup&gt;1.37.0&lt;/sup&gt;, similar to Python's &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;. These operators consider the empty string &lt;code&gt;''&lt;/code&gt; to be false, and all other strings to be true.&lt;/p&gt; 
&lt;p&gt;These operators are currently unstable.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator returns the empty string if the left-hand argument is the empty string, otherwise it returns the right-hand argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foo := '' &amp;amp;&amp;amp; 'goodbye'      # ''
bar := 'hello' &amp;amp;&amp;amp; 'goodbye' # 'goodbye'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;||&lt;/code&gt; operator returns the left-hand argument if it is non-empty, otherwise it returns the right-hand argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foo := '' || 'goodbye'      # 'goodbye'
bar := 'hello' || 'goodbye' # 'hello'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Joining Paths&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; operator can be used to join two strings with a slash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := "a" / "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --evaluate foo
a/b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that a &lt;code&gt;/&lt;/code&gt; is added even if one is already present:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := "a/"
bar := foo / "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --evaluate bar
a//b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Absolute paths can also be constructed&lt;sup&gt;1.5.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := / "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --evaluate foo
/b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; operator uses the &lt;code&gt;/&lt;/code&gt; character, even on Windows. Thus, using the &lt;code&gt;/&lt;/code&gt; operator should be avoided with paths that use universal naming convention (UNC), i.e., those that start with &lt;code&gt;\?&lt;/code&gt;, since forward slashes are not supported with UNC paths.&lt;/p&gt; 
&lt;h4&gt;Escaping &lt;code&gt;{{&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;To write a recipe containing &lt;code&gt;{{&lt;/code&gt;, use &lt;code&gt;{{{{&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;braces:
  echo 'I {{{{LOVE}} curly braces!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(An unmatched &lt;code&gt;}}&lt;/code&gt; is ignored, so it doesn't need to be escaped.)&lt;/p&gt; 
&lt;p&gt;Another option is to put all the text you'd like to escape inside of an interpolation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;braces:
  echo '{{'I {{LOVE}} curly braces!'}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yet another option is to use &lt;code&gt;{{ "{{" }}&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;braces:
  echo 'I {{ "{{" }}LOVE}} curly braces!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Strings&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;'single'&lt;/code&gt;, &lt;code&gt;"double"&lt;/code&gt;, and &lt;code&gt;'''triple'''&lt;/code&gt; quoted string literals are supported. Unlike in recipe bodies, &lt;code&gt;{{‚Ä¶}}&lt;/code&gt; interpolations are not supported inside strings.&lt;/p&gt; 
&lt;p&gt;Double-quoted strings support escape sequences:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;carriage-return   := "\r"
double-quote      := "\""
newline           := "\n"
no-newline        := "\
"
slash             := "\\"
tab               := "\t"
unicode-codepoint := "\u{1F916}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --evaluate
"arriage-return   := "
double-quote      := """
newline           := "
"
no-newline        := ""
slash             := "\"
tab               := "     "
unicode-codepoint := "ü§ñ"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The unicode character escape sequence &lt;code&gt;\u{‚Ä¶}&lt;/code&gt;&lt;sup&gt;1.36.0&lt;/sup&gt; accepts up to six hex digits.&lt;/p&gt; 
&lt;p&gt;Strings may contain line breaks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;single := '
hello
'

double := "
goodbye
"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Single-quoted strings do not recognize escape sequences:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;escapes := '\t\n\r\"\\'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --evaluate
escapes := "\t\n\r\"\\"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Indented versions of both single- and double-quoted strings, delimited by triple single- or double-quotes, are supported. Indented string lines are stripped of a leading line break, and leading whitespace common to all non-blank lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# this string will evaluate to `foo\nbar\n`
x := '''
  foo
  bar
'''

# this string will evaluate to `abc\n  wuv\nxyz\n`
y := """
  abc
    wuv
  xyz
"""
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Similar to unindented strings, indented double-quoted strings process escape sequences, and indented single-quoted strings ignore escape sequences. Escape sequence processing takes place after unindentation. The unindentation algorithm does not take escape-sequence produced whitespace or newlines into account.&lt;/p&gt; 
&lt;p&gt;Strings prefixed with &lt;code&gt;x&lt;/code&gt; are shell expanded&lt;sup&gt;1.27.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foobar := x'~/$FOO/${BAR}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Replacement&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$VAR&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;${VAR}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;${VAR:-DEFAULT}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;, or &lt;code&gt;DEFAULT&lt;/code&gt; if &lt;code&gt;VAR&lt;/code&gt; is not set&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Leading &lt;code&gt;~&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;path to current user's home directory&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Leading &lt;code&gt;~USER&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;path to &lt;code&gt;USER&lt;/code&gt;'s home directory&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;This expansion is performed at compile time, so variables from &lt;code&gt;.env&lt;/code&gt; files and exported &lt;code&gt;just&lt;/code&gt; variables cannot be used. However, this allows shell expanded strings to be used in places like settings and import paths, which cannot depend on &lt;code&gt;just&lt;/code&gt; variables and &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt; 
&lt;h3&gt;Ignoring Errors&lt;/h3&gt; 
&lt;p&gt;Normally, if a command returns a non-zero exit status, execution will stop. To continue execution after a command, even if it fails, prefix the command with &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  -cat foo
  echo 'Done!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
cat foo
cat: foo: No such file or directory
echo 'Done!'
Done!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Functions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; provides many built-in functions for use in expressions, including recipe body &lt;code&gt;{{‚Ä¶}}&lt;/code&gt; substitutions, assignments, and default parameter values.&lt;/p&gt; 
&lt;p&gt;All functions ending in &lt;code&gt;_directory&lt;/code&gt; can be abbreviated to &lt;code&gt;_dir&lt;/code&gt;. So &lt;code&gt;home_directory()&lt;/code&gt; can also be written as &lt;code&gt;home_dir()&lt;/code&gt;. In addition, &lt;code&gt;invocation_directory_native()&lt;/code&gt; can be abbreviated to &lt;code&gt;invocation_dir_native()&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;System Information&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;arch()&lt;/code&gt; ‚Äî Instruction set architecture. Possible values are: &lt;code&gt;"aarch64"&lt;/code&gt;, &lt;code&gt;"arm"&lt;/code&gt;, &lt;code&gt;"asmjs"&lt;/code&gt;, &lt;code&gt;"hexagon"&lt;/code&gt;, &lt;code&gt;"mips"&lt;/code&gt;, &lt;code&gt;"msp430"&lt;/code&gt;, &lt;code&gt;"powerpc"&lt;/code&gt;, &lt;code&gt;"powerpc64"&lt;/code&gt;, &lt;code&gt;"s390x"&lt;/code&gt;, &lt;code&gt;"sparc"&lt;/code&gt;, &lt;code&gt;"wasm32"&lt;/code&gt;, &lt;code&gt;"x86"&lt;/code&gt;, &lt;code&gt;"x86_64"&lt;/code&gt;, and &lt;code&gt;"xcore"&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;num_cpus()&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; - Number of logical CPUs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;os()&lt;/code&gt; ‚Äî Operating system. Possible values are: &lt;code&gt;"android"&lt;/code&gt;, &lt;code&gt;"bitrig"&lt;/code&gt;, &lt;code&gt;"dragonfly"&lt;/code&gt;, &lt;code&gt;"emscripten"&lt;/code&gt;, &lt;code&gt;"freebsd"&lt;/code&gt;, &lt;code&gt;"haiku"&lt;/code&gt;, &lt;code&gt;"ios"&lt;/code&gt;, &lt;code&gt;"linux"&lt;/code&gt;, &lt;code&gt;"macos"&lt;/code&gt;, &lt;code&gt;"netbsd"&lt;/code&gt;, &lt;code&gt;"openbsd"&lt;/code&gt;, &lt;code&gt;"solaris"&lt;/code&gt;, and &lt;code&gt;"windows"&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;os_family()&lt;/code&gt; ‚Äî Operating system family; possible values are: &lt;code&gt;"unix"&lt;/code&gt; and &lt;code&gt;"windows"&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;system-info:
  @echo "This is an {{arch()}} machine".
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just system-info
This is an x86_64 machine
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;os_family()&lt;/code&gt; function can be used to create cross-platform &lt;code&gt;justfile&lt;/code&gt;s that work on various operating systems. For an example, see &lt;a href="https://github.com/casey/just/raw/master/examples/cross-platform.just"&gt;cross-platform.just&lt;/a&gt; file.&lt;/p&gt; 
&lt;h4&gt;External Commands&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;shell(command, args...)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; returns the standard output of shell script &lt;code&gt;command&lt;/code&gt; with zero or more positional arguments &lt;code&gt;args&lt;/code&gt;. The shell used to interpret &lt;code&gt;command&lt;/code&gt; is the same shell that is used to evaluate recipe lines, and can be changed with &lt;code&gt;set shell := [‚Ä¶]&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;command&lt;/code&gt; is passed as the first argument, so if the command is &lt;code&gt;'echo $@'&lt;/code&gt;, the full command line, with the default shell command &lt;code&gt;sh -cu&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; &lt;code&gt;'foo'&lt;/code&gt; and &lt;code&gt;'bar'&lt;/code&gt; will be:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;'sh' '-cu' 'echo $@' 'echo $@' 'foo' 'bar'
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is so that &lt;code&gt;$@&lt;/code&gt; works as expected, and &lt;code&gt;$1&lt;/code&gt; refers to the first argument. &lt;code&gt;$@&lt;/code&gt; does not include the first positional argument, which is expected to be the name of the program being run.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# arguments can be variables or expressions
file := '/sys/class/power_supply/BAT0/status'
bat0stat := shell('cat $1', file)

# commands can be variables or expressions
command := 'wc -l'
output := shell(command + ' "$1"', 'main.c')

# arguments referenced by the shell command must be used
empty := shell('echo', 'foo')
full := shell('echo $1', 'foo')
error := shell('echo $1')
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# Using python as the shell. Since `python -c` sets `sys.argv[0]` to `'-c'`,
# the first "real" positional argument will be `sys.argv[2]`.
set shell := ["python3", "-c"]
olleh := shell('import sys; print(sys.argv[2][::-1])', 'hello')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Environment Variables&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;env(key)&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; ‚Äî Retrieves the environment variable with name &lt;code&gt;key&lt;/code&gt;, aborting if it is not present.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;home_dir := env('HOME')

test:
  echo "{{home_dir}}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
/home/user1
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;env(key, default)&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; ‚Äî Retrieves the environment variable with name &lt;code&gt;key&lt;/code&gt;, returning &lt;code&gt;default&lt;/code&gt; if it is not present.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;env_var(key)&lt;/code&gt; ‚Äî Deprecated alias for &lt;code&gt;env(key)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;env_var_or_default(key, default)&lt;/code&gt; ‚Äî Deprecated alias for &lt;code&gt;env(key, default)&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A default can be substituted for an empty environment variable value with the &lt;code&gt;||&lt;/code&gt; operator, currently unstable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set unstable

foo := env('FOO') || 'DEFAULT_VALUE'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Executables&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;require(name)&lt;/code&gt;&lt;sup&gt;1.39.0&lt;/sup&gt; ‚Äî Search directories in the &lt;code&gt;PATH&lt;/code&gt; environment variable for the executable &lt;code&gt;name&lt;/code&gt; and return its full path, or halt with an error if no executable with &lt;code&gt;name&lt;/code&gt; exists.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-just"&gt;bash := require("bash")

@test:
    echo "bash: '{{bash}}'"
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ just
bash: '/bin/bash'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;which(name)&lt;/code&gt;&lt;sup&gt;1.39.0&lt;/sup&gt; ‚Äî Search directories in the &lt;code&gt;PATH&lt;/code&gt; environment variable for the executable &lt;code&gt;name&lt;/code&gt; and return its full path, or the empty string if no executable with &lt;code&gt;name&lt;/code&gt; exists. Currently unstable.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-just"&gt;set unstable

bosh := which("bosh")

@test:
    echo "bosh: '{{bosh}}'"
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ just
bosh: ''
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Invocation Information&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;is_dependency()&lt;/code&gt; - Returns the string &lt;code&gt;true&lt;/code&gt; if the current recipe is being run as a dependency of another recipe, rather than being run directly, otherwise returns the string &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Invocation Directory&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;invocation_directory()&lt;/code&gt; - Retrieves the absolute path to the current directory when &lt;code&gt;just&lt;/code&gt; was invoked, before &lt;code&gt;just&lt;/code&gt; changed it (chdir'd) prior to executing commands. On Windows, &lt;code&gt;invocation_directory()&lt;/code&gt; uses &lt;code&gt;cygpath&lt;/code&gt; to convert the invocation directory to a Cygwin-compatible &lt;code&gt;/&lt;/code&gt;-separated path. Use &lt;code&gt;invocation_directory_native()&lt;/code&gt; to return the verbatim invocation directory on all platforms.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, to call &lt;code&gt;rustfmt&lt;/code&gt; on files just under the "current directory" (from the user/invoker's perspective), use the following rule:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;rustfmt:
  find {{invocation_directory()}} -name \*.rs -exec rustfmt {} \;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if your command needs to be run from the current directory, you could use (e.g.):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cd {{invocation_directory()}}; ./some_script_that_needs_to_be_run_from_here
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;invocation_directory_native()&lt;/code&gt; - Retrieves the absolute path to the current directory when &lt;code&gt;just&lt;/code&gt; was invoked, before &lt;code&gt;just&lt;/code&gt; changed it (chdir'd) prior to executing commands.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Justfile and Justfile Directory&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;justfile()&lt;/code&gt; - Retrieves the path of the current &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;justfile_directory()&lt;/code&gt; - Retrieves the path of the parent directory of the current &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, to run a command relative to the location of the current &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;script:
  {{justfile_directory()}}/scripts/some_script
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source and Source Directory&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;source_file()&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Retrieves the path of the current source file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;source_directory()&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Retrieves the path of the parent directory of the current source file.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;source_file()&lt;/code&gt; and &lt;code&gt;source_directory()&lt;/code&gt; behave the same as &lt;code&gt;justfile()&lt;/code&gt; and &lt;code&gt;justfile_directory()&lt;/code&gt; in the root &lt;code&gt;justfile&lt;/code&gt;, but will return the path and directory, respectively, of the current &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;mod&lt;/code&gt; source file when called from within an import or submodule.&lt;/p&gt; 
&lt;h4&gt;Just Executable&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;just_executable()&lt;/code&gt; - Absolute path to the &lt;code&gt;just&lt;/code&gt; executable.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;executable:
  @echo The executable is at: {{just_executable()}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
The executable is at: /bin/just
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Just Process ID&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;just_pid()&lt;/code&gt; - Process ID of the &lt;code&gt;just&lt;/code&gt; executable.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;pid:
  @echo The process ID is: {{ just_pid() }}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
The process ID is: 420
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;String Manipulation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;append(suffix, s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; Append &lt;code&gt;suffix&lt;/code&gt; to whitespace-separated strings in &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;append('/src', 'foo bar baz')&lt;/code&gt; ‚Üí &lt;code&gt;'foo/src bar/src baz/src'&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prepend(prefix, s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; Prepend &lt;code&gt;prefix&lt;/code&gt; to whitespace-separated strings in &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;prepend('src/', 'foo bar baz')&lt;/code&gt; ‚Üí &lt;code&gt;'src/foo src/bar src/baz'&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encode_uri_component(s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Percent-encode characters in &lt;code&gt;s&lt;/code&gt; except &lt;code&gt;[A-Za-z0-9_.!~*'()-]&lt;/code&gt;, matching the behavior of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"&gt;JavaScript &lt;code&gt;encodeURIComponent&lt;/code&gt; function&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;quote(s)&lt;/code&gt; - Replace all single quotes with &lt;code&gt;'\''&lt;/code&gt; and prepend and append single quotes to &lt;code&gt;s&lt;/code&gt;. This is sufficient to escape special characters for many shells, including most Bourne shell descendants.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replace(s, from, to)&lt;/code&gt; - Replace all occurrences of &lt;code&gt;from&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replace_regex(s, regex, replacement)&lt;/code&gt; - Replace all occurrences of &lt;code&gt;regex&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;replacement&lt;/code&gt;. Regular expressions are provided by the &lt;a href="https://docs.rs/regex/latest/regex/"&gt;Rust &lt;code&gt;regex&lt;/code&gt; crate&lt;/a&gt;. See the &lt;a href="https://docs.rs/regex/latest/regex/#syntax"&gt;syntax documentation&lt;/a&gt; for usage examples. Capture groups are supported. The &lt;code&gt;replacement&lt;/code&gt; string uses &lt;a href="https://docs.rs/regex/latest/regex/struct.Regex.html#replacement-string-syntax"&gt;Replacement string syntax&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim(s)&lt;/code&gt; - Remove leading and trailing whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_end(s)&lt;/code&gt; - Remove trailing whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_end_match(s, substring)&lt;/code&gt; - Remove suffix of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_end_matches(s, substring)&lt;/code&gt; - Repeatedly remove suffixes of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_start(s)&lt;/code&gt; - Remove leading whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_start_match(s, substring)&lt;/code&gt; - Remove prefix of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_start_matches(s, substring)&lt;/code&gt; - Repeatedly remove prefixes of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Case Conversion&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;capitalize(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert first character of &lt;code&gt;s&lt;/code&gt; to uppercase and the rest to lowercase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;kebabcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;kebab-case&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lowercamelcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;lowerCamelCase&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lowercase(s)&lt;/code&gt; - Convert &lt;code&gt;s&lt;/code&gt; to lowercase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;shoutykebabcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;SHOUTY-KEBAB-CASE&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;shoutysnakecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;SHOUTY_SNAKE_CASE&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;snakecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;snake_case&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;titlecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;Title Case&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;uppercamelcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;UpperCamelCase&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;uppercase(s)&lt;/code&gt; - Convert &lt;code&gt;s&lt;/code&gt; to uppercase.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Path Manipulation&lt;/h4&gt; 
&lt;h5&gt;Fallible&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;absolute_path(path)&lt;/code&gt; - Absolute path to relative &lt;code&gt;path&lt;/code&gt; in the working directory. &lt;code&gt;absolute_path("./bar.txt")&lt;/code&gt; in directory &lt;code&gt;/foo&lt;/code&gt; is &lt;code&gt;/foo/bar.txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;canonicalize(path)&lt;/code&gt;&lt;sup&gt;1.24.0&lt;/sup&gt; - Canonicalize &lt;code&gt;path&lt;/code&gt; by resolving symlinks and removing &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt;, and extra &lt;code&gt;/&lt;/code&gt;s where possible.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;extension(path)&lt;/code&gt; - Extension of &lt;code&gt;path&lt;/code&gt;. &lt;code&gt;extension("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;file_name(path)&lt;/code&gt; - File name of &lt;code&gt;path&lt;/code&gt; with any leading directory components removed. &lt;code&gt;file_name("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;bar.txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;file_stem(path)&lt;/code&gt; - File name of &lt;code&gt;path&lt;/code&gt; without extension. &lt;code&gt;file_stem("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;bar&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parent_directory(path)&lt;/code&gt; - Parent directory of &lt;code&gt;path&lt;/code&gt;. &lt;code&gt;parent_directory("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;/foo&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;without_extension(path)&lt;/code&gt; - &lt;code&gt;path&lt;/code&gt; without extension. &lt;code&gt;without_extension("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;/foo/bar&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These functions can fail, for example if a path does not have an extension, which will halt execution.&lt;/p&gt; 
&lt;h5&gt;Infallible&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;clean(path)&lt;/code&gt; - Simplify &lt;code&gt;path&lt;/code&gt; by removing extra path separators, intermediate &lt;code&gt;.&lt;/code&gt; components, and &lt;code&gt;..&lt;/code&gt; where possible. &lt;code&gt;clean("foo//bar")&lt;/code&gt; is &lt;code&gt;foo/bar&lt;/code&gt;, &lt;code&gt;clean("foo/..")&lt;/code&gt; is &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;clean("foo/./bar")&lt;/code&gt; is &lt;code&gt;foo/bar&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;join(a, b‚Ä¶)&lt;/code&gt; - &lt;em&gt;This function uses &lt;code&gt;/&lt;/code&gt; on Unix and &lt;code&gt;\&lt;/code&gt; on Windows, which can be lead to unwanted behavior. The &lt;code&gt;/&lt;/code&gt; operator, e.g., &lt;code&gt;a / b&lt;/code&gt;, which always uses &lt;code&gt;/&lt;/code&gt;, should be considered as a replacement unless &lt;code&gt;\&lt;/code&gt;s are specifically desired on Windows.&lt;/em&gt; Join path &lt;code&gt;a&lt;/code&gt; with path &lt;code&gt;b&lt;/code&gt;. &lt;code&gt;join("foo/bar", "baz")&lt;/code&gt; is &lt;code&gt;foo/bar/baz&lt;/code&gt;. Accepts two or more arguments.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Filesystem Access&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;path_exists(path)&lt;/code&gt; - Returns &lt;code&gt;true&lt;/code&gt; if the path points at an existing entity and &lt;code&gt;false&lt;/code&gt; otherwise. Traverses symbolic links, and returns &lt;code&gt;false&lt;/code&gt; if the path is inaccessible or points to a broken symlink.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;read(path)&lt;/code&gt;&lt;sup&gt;1.39.0&lt;/sup&gt; - Returns the content of file at &lt;code&gt;path&lt;/code&gt; as string.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Error Reporting&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;error(message)&lt;/code&gt; - Abort execution and report error &lt;code&gt;message&lt;/code&gt; to user.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;UUID and Hash Generation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;blake3(string)&lt;/code&gt;&lt;sup&gt;1.25.0&lt;/sup&gt; - Return &lt;a href="https://github.com/BLAKE3-team/BLAKE3/"&gt;BLAKE3&lt;/a&gt; hash of &lt;code&gt;string&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;blake3_file(path)&lt;/code&gt;&lt;sup&gt;1.25.0&lt;/sup&gt; - Return &lt;a href="https://github.com/BLAKE3-team/BLAKE3/"&gt;BLAKE3&lt;/a&gt; hash of file at &lt;code&gt;path&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sha256(string)&lt;/code&gt; - Return the SHA-256 hash of &lt;code&gt;string&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sha256_file(path)&lt;/code&gt; - Return SHA-256 hash of file at &lt;code&gt;path&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;uuid()&lt;/code&gt; - Generate a random version 4 UUID.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Random&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;choose(n, alphabet)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Generate a string of &lt;code&gt;n&lt;/code&gt; randomly selected characters from &lt;code&gt;alphabet&lt;/code&gt;, which may not contain repeated characters. For example, &lt;code&gt;choose('64', HEX)&lt;/code&gt; will generate a random 64-character lowercase hex string.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Datetime&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;datetime(format)&lt;/code&gt;&lt;sup&gt;1.30.0&lt;/sup&gt; - Return local time with &lt;code&gt;format&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datetime_utc(format)&lt;/code&gt;&lt;sup&gt;1.30.0&lt;/sup&gt; - Return UTC time with &lt;code&gt;format&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The arguments to &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;datetime_utc&lt;/code&gt; are &lt;code&gt;strftime&lt;/code&gt;-style format strings, see the &lt;a href="https://docs.rs/chrono/latest/chrono/format/strftime/index.html"&gt;&lt;code&gt;chrono&lt;/code&gt; library docs&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h4&gt;Semantic Versions&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;semver_matches(version, requirement)&lt;/code&gt;&lt;sup&gt;1.16.0&lt;/sup&gt; - Check whether a &lt;a href="https://semver.org"&gt;semantic &lt;code&gt;version&lt;/code&gt;&lt;/a&gt;, e.g., &lt;code&gt;"0.1.0"&lt;/code&gt; matches a &lt;code&gt;requirement&lt;/code&gt;, e.g., &lt;code&gt;"&amp;gt;=0.1.0"&lt;/code&gt;, returning &lt;code&gt;"true"&lt;/code&gt; if so and &lt;code&gt;"false"&lt;/code&gt; otherwise.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Style&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;style(name)&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt; - Return a named terminal display attribute escape sequence used by &lt;code&gt;just&lt;/code&gt;. Unlike terminal display attribute escape sequence constants, which contain standard colors and styles, &lt;code&gt;style(name)&lt;/code&gt; returns an escape sequence used by &lt;code&gt;just&lt;/code&gt; itself, and can be used to make recipe output match &lt;code&gt;just&lt;/code&gt;'s own output.&lt;/p&gt; &lt;p&gt;Recognized values for &lt;code&gt;name&lt;/code&gt; are &lt;code&gt;'command'&lt;/code&gt;, for echoed recipe lines, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;warning&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, to style an error message:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-just"&gt;scary:
  @echo '{{ style("error") }}OH NO{{ NORMAL }}'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;User Directories&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/h5&gt; 
&lt;p&gt;These functions return paths to user-specific directories for things like configuration, data, caches, executables, and the user's home directory.&lt;/p&gt; 
&lt;p&gt;On Unix, these functions follow the &lt;a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;XDG Base Directory Specification&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;On MacOS and Windows, these functions return the system-specified user-specific directories. For example, &lt;code&gt;cache_directory()&lt;/code&gt; returns &lt;code&gt;~/Library/Caches&lt;/code&gt; on MacOS and &lt;code&gt;{FOLDERID_LocalAppData}&lt;/code&gt; on Windows.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://docs.rs/dirs/latest/dirs/index.html"&gt;&lt;code&gt;dirs&lt;/code&gt;&lt;/a&gt; crate for more details.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cache_directory()&lt;/code&gt; - The user-specific cache directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;config_directory()&lt;/code&gt; - The user-specific configuration directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;config_local_directory()&lt;/code&gt; - The local user-specific configuration directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;data_directory()&lt;/code&gt; - The user-specific data directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;data_local_directory()&lt;/code&gt; - The local user-specific data directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;executable_directory()&lt;/code&gt; - The user-specific executable directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;home_directory()&lt;/code&gt; - The user's home directory.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you would like to use XDG base directories on all platforms you can use the &lt;code&gt;env(‚Ä¶)&lt;/code&gt; function with the appropriate environment variable and fallback, although note that the XDG specification requires ignoring non-absolute paths, so for full compatibility with spec-compliant applications, you would need to do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;xdg_config_dir := if env('XDG_CONFIG_HOME', '') =~ '^/' {
  env('XDG_CONFIG_HOME')
} else {
  home_directory() / '.config'
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Constants&lt;/h3&gt; 
&lt;p&gt;A number of constants are predefined:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Value on Windows&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HEX&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"0123456789abcdef"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HEXLOWER&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"0123456789abcdef"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HEXUPPER&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"0123456789ABCDEF"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PATH_SEP&lt;/code&gt;&lt;sup&gt;1.41.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"/"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;""&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PATH_VAR_SEP&lt;/code&gt;&lt;sup&gt;1.41.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;":"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;";"&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CLEAR&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\ec"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NORMAL&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[0m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BOLD&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[1m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ITALIC&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[3m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;UNDERLINE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[4m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;INVERT&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[7m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HIDE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[8m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;STRIKETHROUGH&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[9m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BLACK&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[30m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;RED&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[31m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;GREEN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[32m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;YELLOW&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[33m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BLUE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[34m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MAGENTA&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[35m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CYAN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[36m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;WHITE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[37m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_BLACK&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[40m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_RED&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[41m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_GREEN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[42m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_YELLOW&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[43m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_BLUE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[44m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_MAGENTA&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[45m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_CYAN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[46m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_WHITE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[47m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@foo:
  echo {{HEX}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
0123456789abcdef
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Constants starting with &lt;code&gt;\e&lt;/code&gt; are &lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code"&gt;ANSI escape sequences&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;CLEAR&lt;/code&gt; clears the screen, similar to the &lt;code&gt;clear&lt;/code&gt; command. The rest are of the form &lt;code&gt;\e[Nm&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer, and set terminal display attributes.&lt;/p&gt; 
&lt;p&gt;Terminal display attribute escape sequences can be combined, for example text weight &lt;code&gt;BOLD&lt;/code&gt;, text style &lt;code&gt;STRIKETHROUGH&lt;/code&gt;, foreground color &lt;code&gt;CYAN&lt;/code&gt;, and background color &lt;code&gt;BG_BLUE&lt;/code&gt;. They should be followed by &lt;code&gt;NORMAL&lt;/code&gt;, to reset the terminal back to normal.&lt;/p&gt; 
&lt;p&gt;Escape sequences should be quoted, since &lt;code&gt;[&lt;/code&gt; is treated as a special character by some shells.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@foo:
  echo '{{BOLD + STRIKETHROUGH + CYAN + BG_BLUE}}Hi!{{NORMAL}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Attributes&lt;/h3&gt; 
&lt;p&gt;Recipes, &lt;code&gt;mod&lt;/code&gt; statements, and aliases may be annotated with attributes that change their behavior.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[confirm]&lt;/code&gt;&lt;sup&gt;1.17.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Require confirmation prior to executing recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[confirm(PROMPT)]&lt;/code&gt;&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Require confirmation prior to executing recipe with a custom prompt.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[doc(DOC)]&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;module, recipe&lt;/td&gt; 
   &lt;td&gt;Set recipe or module's &lt;a href="https://raw.githubusercontent.com/casey/just/master/#documentation-comments"&gt;documentation comment&lt;/a&gt; to &lt;code&gt;DOC&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[extension(EXT)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Set shebang recipe script's file extension to &lt;code&gt;EXT&lt;/code&gt;. &lt;code&gt;EXT&lt;/code&gt; should include a period if one is desired.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[group(NAME)]&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;module, recipe&lt;/td&gt; 
   &lt;td&gt;Put recipe or module in in &lt;a href="https://raw.githubusercontent.com/casey/just/master/#groups"&gt;group&lt;/a&gt; &lt;code&gt;NAME&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[linux]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on Linux.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[macos]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on MacOS.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[metadata(METADATA)]&lt;/code&gt;&lt;sup&gt;1.42.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Attach &lt;code&gt;METADATA&lt;/code&gt; to recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[no-cd]&lt;/code&gt;&lt;sup&gt;1.9.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Don't change directory before executing recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[no-exit-message]&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Don't print an error message if recipe fails.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[no-quiet]&lt;/code&gt;&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Override globally quiet recipes and always echo out the recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[openbsd]&lt;/code&gt;&lt;sup&gt;1.38.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on OpenBSD.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[parallel]&lt;/code&gt;&lt;sup&gt;1.42.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Run this recipe's dependencies in parallel.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[positional-arguments]&lt;/code&gt;&lt;sup&gt;1.29.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Turn on &lt;a href="https://raw.githubusercontent.com/casey/just/master/#positional-arguments"&gt;positional arguments&lt;/a&gt; for this recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[private]&lt;/code&gt;&lt;sup&gt;1.10.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;alias, recipe&lt;/td&gt; 
   &lt;td&gt;Make recipe, alias, or variable private. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#private-recipes"&gt;Private Recipes&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[script]&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Execute recipe as script. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#script-recipes"&gt;script recipes&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[script(COMMAND)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Execute recipe as a script interpreted by &lt;code&gt;COMMAND&lt;/code&gt;. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#script-recipes"&gt;script recipes&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[unix]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on Unixes. (Includes MacOS).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[windows]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on Windows.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[working-directory(PATH)]&lt;/code&gt;&lt;sup&gt;1.38.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Set recipe working directory. &lt;code&gt;PATH&lt;/code&gt; may be relative or absolute. If relative, it is interpreted relative to the default working directory.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;A recipe can have multiple attributes, either on multiple lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-cd]
[private]
foo:
    echo "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or separated by commas on a single line&lt;sup&gt;1.14.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-cd, private]
foo:
    echo "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attributes with a single argument may be written with a colon:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[group: 'bar']
foo:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Enabling and Disabling Recipes&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;[linux]&lt;/code&gt;, &lt;code&gt;[macos]&lt;/code&gt;, &lt;code&gt;[unix]&lt;/code&gt;, and &lt;code&gt;[windows]&lt;/code&gt; attributes are configuration attributes. By default, recipes are always enabled. A recipe with one or more configuration attributes will only be enabled when one or more of those configurations is active.&lt;/p&gt; 
&lt;p&gt;This can be used to write &lt;code&gt;justfile&lt;/code&gt;s that behave differently depending on which operating system they run on. The &lt;code&gt;run&lt;/code&gt; recipe in this &lt;code&gt;justfile&lt;/code&gt; will compile and run &lt;code&gt;main.c&lt;/code&gt;, using a different C compiler and using the correct output binary name for that compiler depending on the operating system:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[unix]
run:
  cc main.c
  ./a.out

[windows]
run:
  cl main.c
  main.exe
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Disabling Changing Directory&lt;sup&gt;1.9.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally executes recipes with the current directory set to the directory that contains the &lt;code&gt;justfile&lt;/code&gt;. This can be disabled using the &lt;code&gt;[no-cd]&lt;/code&gt; attribute. This can be used to create recipes which use paths relative to the invocation directory, or which operate on the current directory.&lt;/p&gt; 
&lt;p&gt;For example, this &lt;code&gt;commit&lt;/code&gt; recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-cd]
commit file:
  git add {{file}}
  git commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Can be used with paths that are relative to the current directory, because &lt;code&gt;[no-cd]&lt;/code&gt; prevents &lt;code&gt;just&lt;/code&gt; from changing the current directory when executing &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Requiring Confirmation for Recipes&lt;sup&gt;1.17.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally executes all recipes unless there is an error. The &lt;code&gt;[confirm]&lt;/code&gt; attribute allows recipes require confirmation in the terminal prior to running. This can be overridden by passing &lt;code&gt;--yes&lt;/code&gt; to &lt;code&gt;just&lt;/code&gt;, which will automatically confirm any recipes marked by this attribute.&lt;/p&gt; 
&lt;p&gt;Recipes dependent on a recipe that requires confirmation will not be run if the relied upon recipe is not confirmed, as well as recipes passed after any recipe that requires confirmation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[confirm]
delete-all:
  rm -rf *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Custom Confirmation Prompt&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;The default confirmation prompt can be overridden with &lt;code&gt;[confirm(PROMPT)]&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[confirm("Are you sure you want to delete everything?")]
delete-everything:
  rm -rf *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Groups&lt;/h3&gt; 
&lt;p&gt;Recipes and modules may be annotated with one or more group names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[group('lint')]
js-lint:
    echo 'Running JS linter‚Ä¶'

[group('rust recipes')]
[group('lint')]
rust-lint:
    echo 'Running Rust linter‚Ä¶'

[group('lint')]
cpp-lint:
  echo 'Running C++ linter‚Ä¶'

# not in any group
email-everyone:
    echo 'Sending mass email‚Ä¶'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes are listed by group:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --list
Available recipes:
    email-everyone # not in any group

    [lint]
    cpp-lint
    js-lint
    rust-lint

    [rust recipes]
    rust-lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just --list --unsorted&lt;/code&gt; prints recipes in their justfile order within each group:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --list --unsorted
Available recipes:
    (no group)
    email-everyone # not in any group

    [lint]
    js-lint
    rust-lint
    cpp-lint

    [rust recipes]
    rust-lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Groups can be listed with &lt;code&gt;--groups&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --groups
Recipe groups:
  lint
  rust recipes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use &lt;code&gt;just --groups --unsorted&lt;/code&gt; to print groups in their justfile order.&lt;/p&gt; 
&lt;h3&gt;Command Evaluation Using Backticks&lt;/h3&gt; 
&lt;p&gt;Backticks can be used to store the result of commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;localhost := `dumpinterfaces | cut -d: -f2 | sed 's/\/.*//' | sed 's/ //g'`

serve:
  ./serve {{localhost}} 8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Indented backticks, delimited by three backticks, are de-indented in the same manner as indented strings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# This backtick evaluates the command `echo foo\necho bar\n`, which produces the value `foo\nbar\n`.
stuff := ```
    echo foo
    echo bar
  ```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/casey/just/master/#strings"&gt;Strings&lt;/a&gt; section for details on unindenting.&lt;/p&gt; 
&lt;p&gt;Backticks may not start with &lt;code&gt;#!&lt;/code&gt;. This syntax is reserved for a future upgrade.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/casey/just/master/#external-commands"&gt;&lt;code&gt;shell(‚Ä¶)&lt;/code&gt; function&lt;/a&gt; provides a more general mechanism to invoke external commands, including the ability to execute the contents of a variable as a command, and to pass arguments to a command.&lt;/p&gt; 
&lt;h3&gt;Conditional Expressions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; expressions evaluate different branches depending on if two expressions evaluate to the same value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "2" == "2" { "Good!" } else { "1984" }

bar:
  @echo "{{foo}}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
Good!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also possible to test for inequality:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" != "goodbye" { "xyz" } else { "abc" }

bar:
  @echo {{foo}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
xyz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And match against regular expressions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" =~ 'hel+o' { "match" } else { "mismatch" }

bar:
  @echo {{foo}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
match
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regular expressions are provided by the &lt;a href="https://github.com/rust-lang/regex"&gt;regex crate&lt;/a&gt;, whose syntax is documented on &lt;a href="https://docs.rs/regex/1.5.4/regex/#syntax"&gt;docs.rs&lt;/a&gt;. Since regular expressions commonly use backslash escape sequences, consider using single-quoted string literals, which will pass slashes to the regex parser unmolested.&lt;/p&gt; 
&lt;p&gt;Conditional expressions short-circuit, which means they only evaluate one of their branches. This can be used to make sure that backtick expressions don't run when they shouldn't.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if env_var("RELEASE") == "true" { `get-something-from-release-database` } else { "dummy-value" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Conditionals can be used inside of recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;bar foo:
  echo {{ if foo == "bar" { "hello" } else { "goodbye" } }}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note the space after the final &lt;code&gt;}&lt;/code&gt;! Without the space, the interpolation will be prematurely closed.&lt;/p&gt; 
&lt;p&gt;Multiple conditionals can be chained:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" == "goodbye" {
  "xyz"
} else if "a" == "a" {
  "abc"
} else {
  "123"
}

bar:
  @echo {{foo}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
abc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Stopping execution with error&lt;/h3&gt; 
&lt;p&gt;Execution can be halted with the &lt;code&gt;error&lt;/code&gt; function. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" == "goodbye" {
  "xyz"
} else if "a" == "b" {
  "abc"
} else {
  error("123")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which produce the following error when run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;error: Call to function `error` failed: 123
   |
16 |   error("123")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Setting Variables from the Command Line&lt;/h3&gt; 
&lt;p&gt;Variables can be overridden from the command line.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;os := "linux"

test: build
  ./test --test {{os}}

build:
  ./build {{os}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
./build linux
./test --test linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Any number of arguments of the form &lt;code&gt;NAME=VALUE&lt;/code&gt; can be passed before recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just os=plan9
./build plan9
./test --test plan9
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use the &lt;code&gt;--set&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --set os bsd
./build bsd
./test --test bsd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Getting and Setting Environment Variables&lt;/h3&gt; 
&lt;h4&gt;Exporting &lt;code&gt;just&lt;/code&gt; Variables&lt;/h4&gt; 
&lt;p&gt;Assignments prefixed with the &lt;code&gt;export&lt;/code&gt; keyword will be exported to recipes as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export RUST_BACKTRACE := "1"

test:
  # will print a stack trace if it crashes
  cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters prefixed with a &lt;code&gt;$&lt;/code&gt; will be exported as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test $RUST_BACKTRACE="1":
  # will print a stack trace if it crashes
  cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Exported variables and parameters are not exported to backticks in the same scope.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export WORLD := "world"
# This backtick will fail with "WORLD: unbound variable"
BAR := `echo hello $WORLD`
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# Running `just a foo` will fail with "A: unbound variable"
a $A $B=`echo $A`:
  echo $A $B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;a href="https://raw.githubusercontent.com/casey/just/master/#export"&gt;export&lt;/a&gt; is set, all &lt;code&gt;just&lt;/code&gt; variables are exported as environment variables.&lt;/p&gt; 
&lt;h4&gt;Unexporting Environment Variables&lt;sup&gt;1.29.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;Environment variables can be unexported with the &lt;code&gt;unexport keyword&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;unexport FOO

@foo:
  echo $FOO
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ export FOO=bar
$ just foo
sh: FOO: unbound variable
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Getting Environment Variables from the environment&lt;/h4&gt; 
&lt;p&gt;Environment variables from the environment are passed automatically to the recipes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;print_home_folder:
  echo "HOME is: '${HOME}'"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
HOME is '/home/myuser'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Setting &lt;code&gt;just&lt;/code&gt; Variables from Environment Variables&lt;/h4&gt; 
&lt;p&gt;Environment variables can be propagated to &lt;code&gt;just&lt;/code&gt; variables using the &lt;code&gt;env()&lt;/code&gt; function. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#environment-variables"&gt;environment-variables&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Recipe Parameters&lt;/h3&gt; 
&lt;p&gt;Recipes may have parameters. Here recipe &lt;code&gt;build&lt;/code&gt; has a parameter called &lt;code&gt;target&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build target:
  @echo 'Building {{target}}‚Ä¶'
  cd {{target}} &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To pass arguments on the command line, put them after the recipe name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build my-awesome-project
Building my-awesome-project‚Ä¶
cd my-awesome-project &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To pass arguments to a dependency, put the dependency in parentheses along with the arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default: (build "main")

build target:
  @echo 'Building {{target}}‚Ä¶'
  cd {{target}} &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variables can also be passed as arguments to dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;target := "main"

_build version:
  @echo 'Building {{version}}‚Ä¶'
  cd {{version}} &amp;amp;&amp;amp; make

build: (_build target)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A command's arguments can be passed to dependency by putting the dependency in parentheses along with the arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build target:
  @echo "Building {{target}}‚Ä¶"

push target: (build target)
  @echo 'Pushing {{target}}‚Ä¶'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters may have default values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default := 'all'

test target tests=default:
  @echo 'Testing {{target}}:{{tests}}‚Ä¶'
  ./test --tests {{tests}} {{target}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters with default values may be omitted:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test server
Testing server:all‚Ä¶
./test --tests all server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or supplied:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test server unit
Testing server:unit‚Ä¶
./test --tests unit server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Default values may be arbitrary expressions, but expressions containing the &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, or &lt;code&gt;/&lt;/code&gt; operators must be parenthesized:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;arch := "wasm"

test triple=(arch + "-unknown-unknown") input=(arch / "input.dat"):
  ./test {{triple}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The last parameter of a recipe may be variadic, indicated with either a &lt;code&gt;+&lt;/code&gt; or a &lt;code&gt;*&lt;/code&gt; before the argument name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;backup +FILES:
  scp {{FILES}} me@server.com:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variadic parameters prefixed with &lt;code&gt;+&lt;/code&gt; accept &lt;em&gt;one or more&lt;/em&gt; arguments and expand to a string containing those arguments separated by spaces:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just backup FAQ.md GRAMMAR.md
scp FAQ.md GRAMMAR.md me@server.com:
FAQ.md                  100% 1831     1.8KB/s   00:00
GRAMMAR.md              100% 1666     1.6KB/s   00:00
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variadic parameters prefixed with &lt;code&gt;*&lt;/code&gt; accept &lt;em&gt;zero or more&lt;/em&gt; arguments and expand to a string containing those arguments separated by spaces, or an empty string if no arguments are present:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;commit MESSAGE *FLAGS:
  git commit {{FLAGS}} -m "{{MESSAGE}}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variadic parameters can be assigned default values. These are overridden by arguments passed on the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test +FLAGS='-q':
  cargo test {{FLAGS}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;{{‚Ä¶}}&lt;/code&gt; substitutions may need to be quoted if they contain spaces. For example, if you have the following recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;search QUERY:
  lynx https://www.google.com/?q={{QUERY}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And you type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just search "cat toupee"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; will run the command &lt;code&gt;lynx https://www.google.com/?q=cat toupee&lt;/code&gt;, which will get parsed by &lt;code&gt;sh&lt;/code&gt; as &lt;code&gt;lynx&lt;/code&gt;, &lt;code&gt;https://www.google.com/?q=cat&lt;/code&gt;, and &lt;code&gt;toupee&lt;/code&gt;, and not the intended &lt;code&gt;lynx&lt;/code&gt; and &lt;code&gt;https://www.google.com/?q=cat toupee&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can fix this by adding quotes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;search QUERY:
  lynx 'https://www.google.com/?q={{QUERY}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters prefixed with a &lt;code&gt;$&lt;/code&gt; will be exported as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo $bar:
  echo $bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;p&gt;Dependencies run before recipes that depend on them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a: b
  @echo A

b:
  @echo B
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just a
B
A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In a given invocation of &lt;code&gt;just&lt;/code&gt;, a recipe with the same arguments will only run once, regardless of how many times it appears in the command-line invocation, or how many times it appears as a dependency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a:
  @echo A

b: a
  @echo B

c: a
  @echo C
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just a a a a a
A
$ just b c
A
B
C
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Multiple recipes may depend on a recipe that performs some kind of setup, and when those recipes run, that setup will only be performed once:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cc main.c

test-foo: build
  ./a.out --test foo

test-bar: build
  ./a.out --test bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just test-foo test-bar
cc main.c
./a.out --test foo
./a.out --test bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes in a given run are only skipped when they receive the same arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cc main.c

test TEST: build
  ./a.out --test {{TEST}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just test foo test bar
cc main.c
./a.out --test foo
./a.out --test bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running Recipes at the End of a Recipe&lt;/h4&gt; 
&lt;p&gt;Normal dependencies of a recipes always run before a recipe starts. That is to say, the dependee always runs before the depender. These dependencies are called "prior dependencies".&lt;/p&gt; 
&lt;p&gt;A recipe can also have subsequent dependencies, which run immediately after the recipe and are introduced with an &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a:
  echo 'A!'

b: a &amp;amp;&amp;amp; c d
  echo 'B!'

c:
  echo 'C!'

d:
  echo 'D!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Ä¶running &lt;em&gt;b&lt;/em&gt; prints:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
echo 'A!'
A!
echo 'B!'
B!
echo 'C!'
C!
echo 'D!'
D!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running Recipes in the Middle of a Recipe&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; doesn't support running recipes in the middle of another recipe, but you can call &lt;code&gt;just&lt;/code&gt; recursively in the middle of a recipe. Given the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a:
  echo 'A!'

b: a
  echo 'B start!'
  just c
  echo 'B end!'

c:
  echo 'C!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Ä¶running &lt;em&gt;b&lt;/em&gt; prints:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
echo 'A!'
A!
echo 'B start!'
B start!
echo 'C!'
C!
echo 'B end!'
B end!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This has limitations, since recipe &lt;code&gt;c&lt;/code&gt; is run with an entirely new invocation of &lt;code&gt;just&lt;/code&gt;: Assignments will be recalculated, dependencies might run twice, and command line arguments will not be propagated to the child &lt;code&gt;just&lt;/code&gt; process.&lt;/p&gt; 
&lt;h3&gt;Shebang Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes that start with &lt;code&gt;#!&lt;/code&gt; are called shebang recipes, and are executed by saving the recipe body to a file and running it. This lets you write recipes in different languages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;polyglot: python js perl sh ruby nu

python:
  #!/usr/bin/env python3
  print('Hello from python!')

js:
  #!/usr/bin/env node
  console.log('Greetings from JavaScript!')

perl:
  #!/usr/bin/env perl
  print "Larry Wall says Hi!\n";

sh:
  #!/usr/bin/env sh
  hello='Yo'
  echo "$hello from a shell script!"

nu:
  #!/usr/bin/env nu
  let hello = 'Hola'
  echo $"($hello) from a nushell script!"

ruby:
  #!/usr/bin/env ruby
  puts "Hello from ruby!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just polyglot
Hello from python!
Greetings from JavaScript!
Larry Wall says Hi!
Yo from a shell script!
Hola from a nushell script!
Hello from ruby!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Unix-like operating systems, including Linux and MacOS, shebang recipes are executed by saving the recipe body to a file in a temporary directory, marking the file as executable, and executing it. The OS then parses the shebang line into a command line and invokes it, including the path to the file. For example, if a recipe starts with &lt;code&gt;#!/usr/bin/env bash&lt;/code&gt;, the final command that the OS runs will be something like &lt;code&gt;/usr/bin/env bash /tmp/PATH_TO_SAVED_RECIPE_BODY&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Shebang line splitting is operating system dependent. When passing a command with arguments, you may need to tell &lt;code&gt;env&lt;/code&gt; to split them explicitly by using the &lt;code&gt;-S&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;run:
  #!/usr/bin/env -S bash -x
  ls
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Windows does not support shebang lines. On Windows, &lt;code&gt;just&lt;/code&gt; splits the shebang line into a command and arguments, saves the recipe body to a file, and invokes the split command and arguments, adding the path to the saved recipe body as the final argument. For example, on Windows, if a recipe starts with &lt;code&gt;#! py&lt;/code&gt;, the final command the OS runs will be something like &lt;code&gt;py C:\Temp\PATH_TO_SAVED_RECIPE_BODY&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Script Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes with a &lt;code&gt;[script(COMMAND)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt; attribute are run as scripts interpreted by &lt;code&gt;COMMAND&lt;/code&gt;. This avoids some of the issues with shebang recipes, such as the use of &lt;code&gt;cygpath&lt;/code&gt; on Windows, the need to use &lt;code&gt;/usr/bin/env&lt;/code&gt;, inconsistencies in shebang line splitting across Unix OSs, and requiring a temporary directory from which files can be executed.&lt;/p&gt; 
&lt;p&gt;Recipes with an empty &lt;code&gt;[script]&lt;/code&gt; attribute are executed with the value of &lt;code&gt;set script-interpreter := [‚Ä¶]&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;, defaulting to &lt;code&gt;sh -eu&lt;/code&gt;, and &lt;em&gt;not&lt;/em&gt; the value of &lt;code&gt;set shell&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The body of the recipe is evaluated, written to disk in the temporary directory, and run by passing its path as an argument to &lt;code&gt;COMMAND&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;[script(‚Ä¶)]&lt;/code&gt; attribute is unstable, so you'll need to use &lt;code&gt;set unstable&lt;/code&gt;, set the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable, or pass &lt;code&gt;--unstable&lt;/code&gt; on the command line.&lt;/p&gt; 
&lt;h3&gt;Script and Shebang Recipe Temporary Files&lt;/h3&gt; 
&lt;p&gt;Both script and shebang recipes write the recipe body to a temporary file for execution. Script recipes execute that file by passing it to a command, while shebang recipes execute the file directly. Shebang recipe execution will fail if the filesystem containing the temporary file is mounted with &lt;code&gt;noexec&lt;/code&gt; or is otherwise non-executable.&lt;/p&gt; 
&lt;p&gt;The directory that &lt;code&gt;just&lt;/code&gt; writes temporary files to may be configured in a number of ways, from highest to lowest precedence:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Globally with the &lt;code&gt;--tempdir&lt;/code&gt; command-line option or the &lt;code&gt;JUST_TEMPDIR&lt;/code&gt; environment variable&lt;sup&gt;1.41.0&lt;/sup&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On a per-module basis with the &lt;code&gt;tempdir&lt;/code&gt; setting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Globally on Linux with the &lt;code&gt;XDG_RUNTIME_DIR&lt;/code&gt; environment variable.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Falling back to the directory returned by &lt;a href="https://doc.rust-lang.org/std/env/fn.temp_dir.html"&gt;std::env::temp_dir&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Python Recipes with &lt;code&gt;uv&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; is an excellent cross-platform python project manager, written in Rust.&lt;/p&gt; 
&lt;p&gt;Using the &lt;code&gt;[script]&lt;/code&gt; attribute and &lt;code&gt;script-interpreter&lt;/code&gt; setting, &lt;code&gt;just&lt;/code&gt; can easily be configured to run Python recipes with &lt;code&gt;uv&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set unstable

set script-interpreter := ['uv', 'run', '--script']

[script]
hello:
  print("Hello from Python!")

[script]
goodbye:
  # /// script
  # requires-python = "&amp;gt;=3.11"
  # dependencies=["sh"]
  # ///
  import sh
  print(sh.echo("Goodbye from Python!"), end='')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, a shebang also works:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;hello:
  #!/usr/bin/env -S uv run --script
  print("Hello from Python!")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Safer Bash Shebang Recipes&lt;/h3&gt; 
&lt;p&gt;If you're writing a &lt;code&gt;bash&lt;/code&gt; shebang recipe, consider adding &lt;code&gt;set -euxo pipefail&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  set -euxo pipefail
  hello='Yo'
  echo "$hello from Bash!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It isn't strictly necessary, but &lt;code&gt;set -euxo pipefail&lt;/code&gt; turns on a few useful features that make &lt;code&gt;bash&lt;/code&gt; shebang recipes behave more like normal, linewise &lt;code&gt;just&lt;/code&gt; recipe:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -e&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a command fails.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -u&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a variable is undefined.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -x&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; print each script line before it's run.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -o pipefail&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a command in a pipeline fails. This is &lt;code&gt;bash&lt;/code&gt;-specific, so isn't turned on in normal linewise &lt;code&gt;just&lt;/code&gt; recipes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Together, these avoid a lot of shell scripting gotchas.&lt;/p&gt; 
&lt;h4&gt;Shebang Recipe Execution on Windows&lt;/h4&gt; 
&lt;p&gt;On Windows, shebang interpreter paths containing a &lt;code&gt;/&lt;/code&gt; are translated from Unix-style paths to Windows-style paths using &lt;code&gt;cygpath&lt;/code&gt;, a utility that ships with &lt;a href="http://www.cygwin.com"&gt;Cygwin&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, to execute this recipe on Windows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;echo:
  #!/bin/sh
  echo "Hello!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The interpreter path &lt;code&gt;/bin/sh&lt;/code&gt; will be translated to a Windows-style path using &lt;code&gt;cygpath&lt;/code&gt; before being executed.&lt;/p&gt; 
&lt;p&gt;If the interpreter path does not contain a &lt;code&gt;/&lt;/code&gt; it will be executed without being translated. This is useful if &lt;code&gt;cygpath&lt;/code&gt; is not available, or you wish to pass a Windows-style path to the interpreter.&lt;/p&gt; 
&lt;h3&gt;Setting Variables in a Recipe&lt;/h3&gt; 
&lt;p&gt;Recipe lines are interpreted by the shell, not &lt;code&gt;just&lt;/code&gt;, so it's not possible to set &lt;code&gt;just&lt;/code&gt; variables in the middle of a recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foo:
  x := "hello" # This doesn't work!
  echo {{x}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to use shell variables, but there's another problem. Every recipe line is run by a new shell instance, so variables set in one line won't be set in the next:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  x=hello &amp;amp;&amp;amp; echo $x # This works!
  y=bye
  echo $y            # This doesn't, `y` is undefined here!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The best way to work around this is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  set -euxo pipefail
  x=hello
  echo $x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sharing Environment Variables Between Recipes&lt;/h3&gt; 
&lt;p&gt;Each line of each recipe is executed by a fresh shell, so it is not possible to share environment variables between recipes.&lt;/p&gt; 
&lt;h4&gt;Using Python Virtual Environments&lt;/h4&gt; 
&lt;p&gt;Some tools, like &lt;a href="https://docs.python.org/3/library/venv.html"&gt;Python's venv&lt;/a&gt;, require loading environment variables in order to work, making them challenging to use with &lt;code&gt;just&lt;/code&gt;. As a workaround, you can execute the virtual environment binaries directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;venv:
  [ -d foo ] || python3 -m venv foo

run: venv
  ./foo/bin/python3 main.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Changing the Working Directory in a Recipe&lt;/h3&gt; 
&lt;p&gt;Each recipe line is executed by a new shell, so if you change the working directory on one line, it won't have an effect on later lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  pwd    # This `pwd` will print the same directory‚Ä¶
  cd bar
  pwd    # ‚Ä¶as this `pwd`!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are a couple ways around this. One is to call &lt;code&gt;cd&lt;/code&gt; on the same line as the command you want to run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  cd bar &amp;amp;&amp;amp; pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The other is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing, and thus a &lt;code&gt;cd&lt;/code&gt; on one line will affect later lines, just like a shell script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  set -euxo pipefail
  cd bar
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Indentation&lt;/h3&gt; 
&lt;p&gt;Recipe lines can be indented with spaces or tabs, but not a mix of both. All of a recipe's lines must have the same type of indentation, but different recipes in the same &lt;code&gt;justfile&lt;/code&gt; may use different indentation.&lt;/p&gt; 
&lt;p&gt;Each recipe must be indented at least one level from the &lt;code&gt;recipe-name&lt;/code&gt; but after that may be further indented.&lt;/p&gt; 
&lt;p&gt;Here's a justfile with a recipe indented with spaces, represented as &lt;code&gt;¬∑&lt;/code&gt;, and tabs, represented as &lt;code&gt;‚Üí&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;set windows-shell := ["pwsh", "-NoLogo", "-NoProfileLoadTime", "-Command"]

set ignore-comments

list-space directory:
¬∑¬∑#!pwsh
¬∑¬∑foreach ($item in $(Get-ChildItem {{directory}} )) {
¬∑¬∑¬∑¬∑echo $item.Name
¬∑¬∑}
¬∑¬∑echo ""

# indentation nesting works even when newlines are escaped
list-tab directory:
‚Üí @foreach ($item in $(Get-ChildItem {{directory}} )) { \
‚Üí ‚Üí echo $item.Name \
‚Üí }
‚Üí @echo ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-pwsh"&gt;PS &amp;gt; just list-space ~
Desktop
Documents
Downloads

PS &amp;gt; just list-tab ~
Desktop
Documents
Downloads
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Multi-Line Constructs&lt;/h3&gt; 
&lt;p&gt;Recipes without an initial shebang are evaluated and run line-by-line, which means that multi-line constructs probably won't do what you want.&lt;/p&gt; 
&lt;p&gt;For example, with the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;conditional:
  if true; then
    echo 'True!'
  fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The extra leading whitespace before the second line of the &lt;code&gt;conditional&lt;/code&gt; recipe will produce a parse error:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just conditional
error: Recipe line has extra leading whitespace
  |
3 |         echo 'True!'
  |     ^^^^^^^^^^^^^^^^
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To work around this, you can write conditionals on one line, escape newlines with slashes, or add a shebang to your recipe. Some examples of multi-line constructs are provided for reference.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;if&lt;/code&gt; statements&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;conditional:
  if true; then echo 'True!'; fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;conditional:
  if true; then \
    echo 'True!'; \
  fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;conditional:
  #!/usr/bin/env sh
  if true; then
    echo 'True!'
  fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;for&lt;/code&gt; loops&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;for:
  for file in `ls .`; do echo $file; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;for:
  for file in `ls .`; do \
    echo $file; \
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;for:
  #!/usr/bin/env sh
  for file in `ls .`; do
    echo $file
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;while&lt;/code&gt; loops&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;while:
  while `server-is-dead`; do ping -c 1 server; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;while:
  while `server-is-dead`; do \
    ping -c 1 server; \
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;while:
  #!/usr/bin/env sh
  while `server-is-dead`; do
    ping -c 1 server
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Outside Recipe Bodies&lt;/h4&gt; 
&lt;p&gt;Parenthesized expressions can span multiple lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;abc := ('a' +
        'b'
         + 'c')

abc2 := (
  'a' +
  'b' +
  'c'
)

foo param=('foo'
      + 'bar'
    ):
  echo {{param}}

bar: (foo
        'Foo'
     )
  echo 'Bar!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lines ending with a backslash continue on to the next line as if the lines were joined by whitespace&lt;sup&gt;1.15.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a := 'foo' + \
     'bar'

foo param1 \
  param2='foo' \
  *varparam='': dep1 \
                (dep2 'foo')
  echo {{param1}} {{param2}} {{varparam}}

dep1: \
    # this comment is not part of the recipe body
  echo 'dep1'

dep2 \
  param:
    echo 'Dependency with parameter {{param}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Backslash line continuations can also be used in interpolations. The line following the backslash must be indented.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;recipe:
  echo '{{ \
  "This interpolation " + \
    "has a lot of text." \
  }}'
  echo 'back to recipe body'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Command-line Options&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; supports a number of useful command-line options for listing, dumping, and debugging recipes and variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
  js
  perl
  polyglot
  python
  ruby
$ just --show perl
perl:
  #!/usr/bin/env perl
  print "Larry Wall says Hi!\n";
$ just --show polyglot
polyglot: python js perl sh ruby
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Setting Command-line Options with Environment Variables&lt;/h4&gt; 
&lt;p&gt;Some command-line options can be set with environment variables&lt;/p&gt; 
&lt;p&gt;For example, unstable features can be enabled either with the &lt;code&gt;--unstable&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --unstable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or by setting the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ export JUST_UNSTABLE=1
$ just
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since environment variables are inherited by child processes, command-line options set with environment variables are inherited by recursive invocations of &lt;code&gt;just&lt;/code&gt;, where as command line options set with arguments are not.&lt;/p&gt; 
&lt;p&gt;Consult &lt;code&gt;just --help&lt;/code&gt; for which options can be set with environment variables.&lt;/p&gt; 
&lt;h3&gt;Private Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes and aliases whose name starts with a &lt;code&gt;_&lt;/code&gt; are omitted from &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test: _test-helper
  ./bin/test

_test-helper:
  ./bin/super-secret-test-helper-stuff
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And from &lt;code&gt;just --summary&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --summary
test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;[private]&lt;/code&gt; attribute&lt;sup&gt;1.10.0&lt;/sup&gt; may also be used to hide recipes or aliases without needing to change the name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[private]
foo:

[private]
alias b := bar

bar:
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is useful for helper recipes which are only meant to be used as dependencies of other recipes.&lt;/p&gt; 
&lt;h3&gt;Quiet Recipes&lt;/h3&gt; 
&lt;p&gt;A recipe name may be prefixed with &lt;code&gt;@&lt;/code&gt; to invert the meaning of &lt;code&gt;@&lt;/code&gt; before each line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@quiet:
  echo hello
  echo goodbye
  @# all done!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now only the lines starting with &lt;code&gt;@&lt;/code&gt; will be echoed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just quiet
hello
goodbye
# all done!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All recipes in a Justfile can be made quiet with &lt;code&gt;set quiet&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set quiet

foo:
  echo "This is quiet"

@foo2:
  echo "This is also quiet"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;[no-quiet]&lt;/code&gt; attribute overrides this setting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set quiet

foo:
  echo "This is quiet"

[no-quiet]
foo2:
  echo "This is not quiet"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Shebang recipes are quiet by default:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  echo 'Foo!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
Foo!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Adding &lt;code&gt;@&lt;/code&gt; to a shebang recipe name makes &lt;code&gt;just&lt;/code&gt; print the recipe before executing it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@bar:
  #!/usr/bin/env bash
  echo 'Bar!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
#!/usr/bin/env bash
echo 'Bar!'
Bar!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally prints error messages when a recipe line fails. These error messages can be suppressed using the &lt;code&gt;[no-exit-message]&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; attribute. You may find this especially useful with a recipe that wraps a tool:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;git *args:
    @git {{args}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just git status
fatal: not a git repository (or any of the parent directories): .git
error: Recipe `git` failed on line 2 with exit code 128
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add the attribute to suppress the exit error message when the tool exits with a non-zero code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-exit-message]
git *args:
    @git {{args}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just git status
fatal: not a git repository (or any of the parent directories): .git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Selecting Recipes to Run With an Interactive Chooser&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;--choose&lt;/code&gt; subcommand makes &lt;code&gt;just&lt;/code&gt; invoke a chooser to select which recipes to run. Choosers should read lines containing recipe names from standard input and print one or more of those names separated by spaces to standard output.&lt;/p&gt; 
&lt;p&gt;Because there is currently no way to run a recipe that requires arguments with &lt;code&gt;--choose&lt;/code&gt;, such recipes will not be given to the chooser. Private recipes and aliases are also skipped.&lt;/p&gt; 
&lt;p&gt;The chooser can be overridden with the &lt;code&gt;--chooser&lt;/code&gt; flag. If &lt;code&gt;--chooser&lt;/code&gt; is not given, then &lt;code&gt;just&lt;/code&gt; first checks if &lt;code&gt;$JUST_CHOOSER&lt;/code&gt; is set. If it isn't, then the chooser defaults to &lt;code&gt;fzf&lt;/code&gt;, a popular fuzzy finder.&lt;/p&gt; 
&lt;p&gt;Arguments can be included in the chooser, i.e. &lt;code&gt;fzf --exact&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The chooser is invoked in the same way as recipe lines. For example, if the chooser is &lt;code&gt;fzf&lt;/code&gt;, it will be invoked with &lt;code&gt;sh -cu 'fzf'&lt;/code&gt;, and if the shell, or the shell arguments are overridden, the chooser invocation will respect those overrides.&lt;/p&gt; 
&lt;p&gt;If you'd like &lt;code&gt;just&lt;/code&gt; to default to selecting recipes with a chooser, you can use this as your default recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default:
  @just --choose
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Invoking &lt;code&gt;justfile&lt;/code&gt;s in Other Directories&lt;/h3&gt; 
&lt;p&gt;If the first argument passed to &lt;code&gt;just&lt;/code&gt; contains a &lt;code&gt;/&lt;/code&gt;, then the following occurs:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The argument is split at the last &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The part before the last &lt;code&gt;/&lt;/code&gt; is treated as a directory. &lt;code&gt;just&lt;/code&gt; will start its search for the &lt;code&gt;justfile&lt;/code&gt; there, instead of in the current directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The part after the last slash is treated as a normal argument, or ignored if it is empty.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This may seem a little strange, but it's useful if you wish to run a command in a &lt;code&gt;justfile&lt;/code&gt; that is in a subdirectory.&lt;/p&gt; 
&lt;p&gt;For example, if you are in a directory which contains a subdirectory named &lt;code&gt;foo&lt;/code&gt;, which contains a &lt;code&gt;justfile&lt;/code&gt; with the recipe &lt;code&gt;build&lt;/code&gt;, which is also the default recipe, the following are all equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ (cd foo &amp;amp;&amp;amp; just build)
$ just foo/build
$ just foo/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Additional recipes after the first are sought in the same &lt;code&gt;justfile&lt;/code&gt;. For example, the following are both equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo/a b
$ (cd foo &amp;amp;&amp;amp; just a b)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And will both invoke recipes &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; in &lt;code&gt;foo/justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Imports&lt;/h3&gt; 
&lt;p&gt;One &lt;code&gt;justfile&lt;/code&gt; can include the contents of another using &lt;code&gt;import&lt;/code&gt; statements.&lt;/p&gt; 
&lt;p&gt;If you have the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;import 'foo/bar.just'

a: b
  @echo A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the following text in &lt;code&gt;foo/bar.just&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;b:
  @echo B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;foo/bar.just&lt;/code&gt; will be included in &lt;code&gt;justfile&lt;/code&gt; and recipe &lt;code&gt;b&lt;/code&gt; will be defined:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
B
$ just a
B
A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;import&lt;/code&gt; path can be absolute or relative to the location of the justfile containing it. A leading &lt;code&gt;~/&lt;/code&gt; in the import path is replaced with the current users home directory.&lt;/p&gt; 
&lt;p&gt;Justfiles are insensitive to order, so included files can reference variables and recipes defined after the &lt;code&gt;import&lt;/code&gt; statement.&lt;/p&gt; 
&lt;p&gt;Imported files can themselves contain &lt;code&gt;import&lt;/code&gt;s, which are processed recursively.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;allow-duplicate-recipes&lt;/code&gt; and &lt;code&gt;allow-duplicate-variables&lt;/code&gt; allow duplicate recipes and variables, respectively, to override each other, instead of producing an error.&lt;/p&gt; 
&lt;p&gt;Within a module, later definitions override earlier definitions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set allow-duplicate-recipes

foo:

foo:
  echo 'yes'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;code&gt;import&lt;/code&gt;s are involved, things unfortunately get much more complicated and hard to explain.&lt;/p&gt; 
&lt;p&gt;Shallower definitions always override deeper definitions, so recipes at the top level will override recipes in imports, and recipes in an import will override recipes in an import which itself imports those recipes.&lt;/p&gt; 
&lt;p&gt;When two duplicate definitions are imported and are at the same depth, the one from the earlier import will override the one from the later import.&lt;/p&gt; 
&lt;p&gt;This is because &lt;code&gt;just&lt;/code&gt; uses a stack when processing imports, pushing imports onto the stack in source-order, and always processing the top of the stack next, so earlier imports are actually handled later by the compiler.&lt;/p&gt; 
&lt;p&gt;This is definitely a bug, but since &lt;code&gt;just&lt;/code&gt; has very strong backwards compatibility guarantees and we take enormous pains not to break anyone's &lt;code&gt;justfile&lt;/code&gt;, we have created issue #2540 to discuss whether or not we can actually fix it.&lt;/p&gt; 
&lt;p&gt;Imports may be made optional by putting a &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;import&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;import? 'foo/bar.just'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Importing the same source file multiple times is not an error&lt;sup&gt;1.37.0&lt;/sup&gt;. This allows importing multiple justfiles, for example &lt;code&gt;foo.just&lt;/code&gt; and &lt;code&gt;bar.just&lt;/code&gt;, which both import a third justfile containing shared recipes, for example &lt;code&gt;baz.just&lt;/code&gt;, without the duplicate import of &lt;code&gt;baz.just&lt;/code&gt; being an error:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# justfile
import 'foo.just'
import 'bar.just'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# foo.just
import 'baz.just'
foo: baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# bar.just
import 'baz.just'
bar: baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# baz
baz:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Modules&lt;sup&gt;1.19.0&lt;/sup&gt;&lt;/h3&gt; 
&lt;p&gt;A &lt;code&gt;justfile&lt;/code&gt; can declare modules using &lt;code&gt;mod&lt;/code&gt; statements.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;mod&lt;/code&gt; statements were stabilized in &lt;code&gt;just&lt;/code&gt;&lt;sup&gt;1.31.0&lt;/sup&gt;. In earlier versions, you'll need to use the &lt;code&gt;--unstable&lt;/code&gt; flag, &lt;code&gt;set unstable&lt;/code&gt;, or set the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable to use them.&lt;/p&gt; 
&lt;p&gt;If you have the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod bar

a:
  @echo A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the following text in &lt;code&gt;bar.just&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;b:
  @echo B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;bar.just&lt;/code&gt; will be included in &lt;code&gt;justfile&lt;/code&gt; as a submodule. Recipes, aliases, and variables defined in one submodule cannot be used in another, and each module uses its own settings.&lt;/p&gt; 
&lt;p&gt;Recipes in submodules can be invoked as subcommands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar b
B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with path syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar::b
B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If a module is named &lt;code&gt;foo&lt;/code&gt;, just will search for the module file in &lt;code&gt;foo.just&lt;/code&gt;, &lt;code&gt;foo/mod.just&lt;/code&gt;, &lt;code&gt;foo/justfile&lt;/code&gt;, and &lt;code&gt;foo/.justfile&lt;/code&gt;. In the latter two cases, the module file may have any capitalization.&lt;/p&gt; 
&lt;p&gt;Module statements may be of the form:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod foo 'PATH'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which loads the module's source file from &lt;code&gt;PATH&lt;/code&gt;, instead of from the usual locations. A leading &lt;code&gt;~/&lt;/code&gt; in &lt;code&gt;PATH&lt;/code&gt; is replaced with the current user's home directory. &lt;code&gt;PATH&lt;/code&gt; may point to the module source file itself, or to a directory containing the module source file with the name &lt;code&gt;mod.just&lt;/code&gt;, &lt;code&gt;justfile&lt;/code&gt;, or &lt;code&gt;.justfile&lt;/code&gt;. In the latter two cases, the module file may have any capitalization.&lt;/p&gt; 
&lt;p&gt;Environment files are only loaded for the root justfile, and loaded environment variables are available in submodules. Settings in submodules that affect environment file loading are ignored.&lt;/p&gt; 
&lt;p&gt;Recipes in submodules without the &lt;code&gt;[no-cd]&lt;/code&gt; attribute run with the working directory set to the directory containing the submodule source file.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;justfile()&lt;/code&gt; and &lt;code&gt;justfile_directory()&lt;/code&gt; always return the path to the root justfile and the directory that contains it, even when called from submodule recipes.&lt;/p&gt; 
&lt;p&gt;Modules may be made optional by putting a &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;mod&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;mod? foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Missing source files for optional modules do not produce an error.&lt;/p&gt; 
&lt;p&gt;Optional modules with no source file do not conflict, so you can have multiple mod statements with the same name, but with different source file paths, as long as at most one source file exists:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;mod? foo 'bar.just'
mod? foo 'baz.just'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Modules may be given doc comments which appear in &lt;code&gt;--list&lt;/code&gt; output&lt;sup&gt;1.30.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# foo is a great module!
mod foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    foo ... # foo is a great module!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Modules are still missing a lot of features, for example, the ability to refer to variables in other modules. See the &lt;a href="https://github.com/casey/just/issues/2252"&gt;module improvement tracking issue&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Hiding &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; looks for &lt;code&gt;justfile&lt;/code&gt;s named &lt;code&gt;justfile&lt;/code&gt; and &lt;code&gt;.justfile&lt;/code&gt;, which can be used to keep a &lt;code&gt;justfile&lt;/code&gt; hidden.&lt;/p&gt; 
&lt;h3&gt;Just Scripts&lt;/h3&gt; 
&lt;p&gt;By adding a shebang line to the top of a &lt;code&gt;justfile&lt;/code&gt; and making it executable, &lt;code&gt;just&lt;/code&gt; can be used as an interpreter for scripts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cat &amp;gt; script &amp;lt;&amp;lt;EOF
#!/usr/bin/env just --justfile

foo:
  echo foo
EOF
$ chmod +x script
$ ./script foo
echo foo
foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When a script with a shebang is executed, the system supplies the path to the script as an argument to the command in the shebang. So, with a shebang of &lt;code&gt;#!/usr/bin/env just --justfile&lt;/code&gt;, the command will be &lt;code&gt;/usr/bin/env just --justfile PATH_TO_SCRIPT&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;With the above shebang, &lt;code&gt;just&lt;/code&gt; will change its working directory to the location of the script. If you'd rather leave the working directory unchanged, use &lt;code&gt;#!/usr/bin/env just --working-directory . --justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note: Shebang line splitting is not consistent across operating systems. The previous examples have only been tested on macOS. On Linux, you may need to pass the &lt;code&gt;-S&lt;/code&gt; flag to &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;#!/usr/bin/env -S just --justfile

default:
  echo foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Formatting and dumping &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;Each &lt;code&gt;justfile&lt;/code&gt; has a canonical formatting with respect to whitespace and newlines.&lt;/p&gt; 
&lt;p&gt;You can overwrite the current justfile with a canonically-formatted version using the currently-unstable &lt;code&gt;--fmt&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cat justfile
# A lot of blank lines





some-recipe:
  echo "foo"
$ just --fmt --unstable
$ cat justfile
# A lot of blank lines

some-recipe:
    echo "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Invoking &lt;code&gt;just --fmt --check --unstable&lt;/code&gt; runs &lt;code&gt;--fmt&lt;/code&gt; in check mode. Instead of overwriting the &lt;code&gt;justfile&lt;/code&gt;, &lt;code&gt;just&lt;/code&gt; will exit with an exit code of 0 if it is formatted correctly, and will exit with 1 and print a diff if it is not.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;code&gt;--dump&lt;/code&gt; command to output a formatted version of the &lt;code&gt;justfile&lt;/code&gt; to stdout:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --dump &amp;gt; formatted-justfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--dump&lt;/code&gt; command can be used with &lt;code&gt;--dump-format json&lt;/code&gt; to print a JSON representation of a &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Fallback to parent &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;If a recipe is not found in a &lt;code&gt;justfile&lt;/code&gt; and the &lt;code&gt;fallback&lt;/code&gt; setting is set, &lt;code&gt;just&lt;/code&gt; will look for &lt;code&gt;justfile&lt;/code&gt;s in the parent directory and up, until it reaches the root directory. &lt;code&gt;just&lt;/code&gt; will stop after it reaches a &lt;code&gt;justfile&lt;/code&gt; in which the &lt;code&gt;fallback&lt;/code&gt; setting is &lt;code&gt;false&lt;/code&gt; or unset.&lt;/p&gt; 
&lt;p&gt;As an example, suppose the current directory contains this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set fallback
foo:
  echo foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the parent directory contains this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;bar:
  echo bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
Trying ../justfile
echo bar
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Avoiding Argument Splitting&lt;/h3&gt; 
&lt;p&gt;Given this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo argument:
  touch {{argument}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following command will create two files, &lt;code&gt;some&lt;/code&gt; and &lt;code&gt;argument.txt&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo "some argument.txt"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The user's shell will parse &lt;code&gt;"some argument.txt"&lt;/code&gt; as a single argument, but when &lt;code&gt;just&lt;/code&gt; replaces &lt;code&gt;touch {{argument}}&lt;/code&gt; with &lt;code&gt;touch some argument.txt&lt;/code&gt;, the quotes are not preserved, and &lt;code&gt;touch&lt;/code&gt; will receive two arguments.&lt;/p&gt; 
&lt;p&gt;There are a few ways to avoid this: quoting, positional arguments, and exported arguments.&lt;/p&gt; 
&lt;h4&gt;Quoting&lt;/h4&gt; 
&lt;p&gt;Quotes can be added around the &lt;code&gt;{{argument}}&lt;/code&gt; interpolation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo argument:
  touch '{{argument}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This preserves &lt;code&gt;just&lt;/code&gt;'s ability to catch variable name typos before running, for example if you were to write &lt;code&gt;{{argument}}&lt;/code&gt;, but will not do what you want if the value of &lt;code&gt;argument&lt;/code&gt; contains single quotes.&lt;/p&gt; 
&lt;h4&gt;Positional Arguments&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;positional-arguments&lt;/code&gt; setting causes all arguments to be passed as positional arguments, allowing them to be accessed with &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, ‚Ä¶, and &lt;code&gt;$@&lt;/code&gt;, which can be then double-quoted to avoid further splitting by the shell:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set positional-arguments

foo argument:
  touch "$1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This defeats &lt;code&gt;just&lt;/code&gt;'s ability to catch typos, for example if you type &lt;code&gt;$2&lt;/code&gt; instead of &lt;code&gt;$1&lt;/code&gt;, but works for all possible values of &lt;code&gt;argument&lt;/code&gt;, including those with double quotes.&lt;/p&gt; 
&lt;h4&gt;Exported Arguments&lt;/h4&gt; 
&lt;p&gt;All arguments are exported when the &lt;code&gt;export&lt;/code&gt; setting is set:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set export

foo argument:
  touch "$argument"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or individual arguments may be exported by prefixing them with &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo $argument:
  touch "$argument"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This defeats &lt;code&gt;just&lt;/code&gt;'s ability to catch typos, for example if you type &lt;code&gt;$argument&lt;/code&gt;, but works for all possible values of &lt;code&gt;argument&lt;/code&gt;, including those with double quotes.&lt;/p&gt; 
&lt;h3&gt;Configuring the Shell&lt;/h3&gt; 
&lt;p&gt;There are a number of ways to configure the shell for linewise recipes, which are the default when a recipe does not start with a &lt;code&gt;#!&lt;/code&gt; shebang. Their precedence, from highest to lowest, is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The &lt;code&gt;--shell&lt;/code&gt; and &lt;code&gt;--shell-arg&lt;/code&gt; command line options. Passing either of these will cause &lt;code&gt;just&lt;/code&gt; to ignore any settings in the current justfile.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set windows-shell := [...]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set windows-powershell&lt;/code&gt; (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set shell := [...]&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Since &lt;code&gt;set windows-shell&lt;/code&gt; has higher precedence than &lt;code&gt;set shell&lt;/code&gt;, you can use &lt;code&gt;set windows-shell&lt;/code&gt; to pick a shell on Windows, and &lt;code&gt;set shell&lt;/code&gt; to pick a shell for all other platforms.&lt;/p&gt; 
&lt;h3&gt;Timestamps&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can print timestamps before each recipe commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;recipe:
  echo one
  sleep 2
  echo two
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --timestamp recipe
[07:28:46] echo one
one
[07:28:46] sleep 2
[07:28:48] echo two
two
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, timestamps are formatted as &lt;code&gt;HH:MM:SS&lt;/code&gt;. The format can be changed with &lt;code&gt;--timestamp-format&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --timestamp recipe --timestamp-format '%H:%M:%S%.3f %Z'
[07:32:11:.349 UTC] echo one
one
[07:32:11:.350 UTC] sleep 2
[07:32:13:.352 UTC] echo two
two
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The argument to &lt;code&gt;--timestamp-format&lt;/code&gt; is a &lt;code&gt;strftime&lt;/code&gt;-style format string, see the &lt;a href="https://docs.rs/chrono/latest/chrono/format/strftime/index.html"&gt;&lt;code&gt;chrono&lt;/code&gt; library docs&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Signal Handling&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Signal_(IPC)"&gt;Signals&lt;/a&gt; are messsages sent to running programs to trigger specific behavior. For example, &lt;code&gt;SIGINT&lt;/code&gt; is sent to all processes in the terminal forground process group when &lt;code&gt;CTRL-C&lt;/code&gt; is pressed.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; tries to exit when requested by a signal, but it also tries to avoid leaving behind running child proccesses, two goals which are somewhat in conflict.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;just&lt;/code&gt; exits leaving behind child processes, the user will have no recourse but to &lt;code&gt;ps aux | grep&lt;/code&gt; for the children and manually &lt;code&gt;kill&lt;/code&gt; them, a tedious endevour.&lt;/p&gt; 
&lt;h4&gt;Fatal Signals&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;SIGHUP&lt;/code&gt;, &lt;code&gt;SIGINT&lt;/code&gt;, and &lt;code&gt;SIGQUIT&lt;/code&gt; are generated when the user closes the terminal, types &lt;code&gt;ctrl-c&lt;/code&gt;, or types &lt;code&gt;ctrl-\&lt;/code&gt;, respectively, and are sent to all processes in the foreground process group.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;SIGTERM&lt;/code&gt; is the default signal sent by the &lt;code&gt;kill&lt;/code&gt; command, and is delivered only to its intended victim.&lt;/p&gt; 
&lt;p&gt;When a child process is not running, &lt;code&gt;just&lt;/code&gt; will exit immediately on receipt of any of the above signals.&lt;/p&gt; 
&lt;p&gt;When a child process &lt;em&gt;is&lt;/em&gt; running, &lt;code&gt;just&lt;/code&gt; will wait until it terminates, to avoid leaving it behind.&lt;/p&gt; 
&lt;p&gt;Additionally, on receipt of &lt;code&gt;SIGTERM&lt;/code&gt;, &lt;code&gt;just&lt;/code&gt; will forward &lt;code&gt;SIGTERM&lt;/code&gt; to any running children&lt;sup&gt;1.41.0&lt;/sup&gt;, since unlike other fatal signals, &lt;code&gt;SIGTERM&lt;/code&gt;, was likely sent to &lt;code&gt;just&lt;/code&gt; alone.&lt;/p&gt; 
&lt;p&gt;Regardless of whether a child process terminates successfully after &lt;code&gt;just&lt;/code&gt; receives a fatal signal, &lt;code&gt;just&lt;/code&gt; halts execution.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;SIGINFO&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;SIGINFO&lt;/code&gt; is sent to all processes in the foreground process group when the user types &lt;code&gt;ctrl-t&lt;/code&gt; on &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;BSD&lt;/a&gt;-derived operating systems, including MacOS, but not Linux.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; responds by printing a list of all child process IDs and commands&lt;sup&gt;1.41.0&lt;/sup&gt;.&lt;/p&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;On Windows, &lt;code&gt;just&lt;/code&gt; behaves as if it had received &lt;code&gt;SIGINT&lt;/code&gt; when the user types &lt;code&gt;ctrl-c&lt;/code&gt;. Other signals are unsupported.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;A changelog for the latest release is available in &lt;a href="https://raw.githubusercontent.com/casey/just/master/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt;. Changelogs for previous releases are available on &lt;a href="https://github.com/casey/just/releases"&gt;the releases page&lt;/a&gt;. &lt;code&gt;just --changelog&lt;/code&gt; can also be used to make a &lt;code&gt;just&lt;/code&gt; binary print its changelog.&lt;/p&gt; 
&lt;h2&gt;Miscellanea&lt;/h2&gt; 
&lt;h3&gt;Re-running recipes when files change&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/mattgreen/watchexec"&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; can re-run any command when files change.&lt;/p&gt; 
&lt;p&gt;To re-run the recipe &lt;code&gt;foo&lt;/code&gt; when any file changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;watchexec just foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;code&gt;watchexec --help&lt;/code&gt; for more info, including how to specify which files should be watched for changes.&lt;/p&gt; 
&lt;h3&gt;Parallelism&lt;/h3&gt; 
&lt;p&gt;Dependencies may be run in parallel with the &lt;code&gt;[parallel]&lt;/code&gt; attribute.&lt;/p&gt; 
&lt;p&gt;In this &lt;code&gt;justfile&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;baz&lt;/code&gt; will execute in parallel when &lt;code&gt;main&lt;/code&gt; is run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[parallel]
main: foo bar baz

foo:
  sleep 1

bar:
  sleep 1

baz:
  sleep 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GNU &lt;code&gt;parallel&lt;/code&gt; may be used to run recipe lines concurrently:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;parallel:
  #!/usr/bin/env -S parallel --shebang --ungroup --jobs {{ num_cpus() }}
  echo task 1 start; sleep 3; echo task 1 done
  echo task 2 start; sleep 3; echo task 2 done
  echo task 3 start; sleep 3; echo task 3 done
  echo task 4 start; sleep 3; echo task 4 done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Shell Alias&lt;/h3&gt; 
&lt;p&gt;For lightning-fast command running, put &lt;code&gt;alias j=just&lt;/code&gt; in your shell's configuration file.&lt;/p&gt; 
&lt;p&gt;In &lt;code&gt;bash&lt;/code&gt;, the aliased command may not keep the shell completion functionality described in the next section. Add the following line to your &lt;code&gt;.bashrc&lt;/code&gt; to use the same completion function as &lt;code&gt;just&lt;/code&gt; for your aliased command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;complete -F _just -o bashdefault -o default j
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Shell Completion Scripts&lt;/h3&gt; 
&lt;p&gt;Shell completion scripts for Bash, Elvish, Fish, Nushell, PowerShell, and Zsh are available &lt;a href="https://github.com/casey/just/releases"&gt;release archives&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;just&lt;/code&gt; binary can also generate the same completion scripts at runtime using &lt;code&gt;just --completions SHELL&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --completions zsh &amp;gt; just.zsh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please refer to your shell's documentation for how to install them.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;macOS Note:&lt;/em&gt; Recent versions of macOS use zsh as the default shell. If you use Homebrew to install &lt;code&gt;just&lt;/code&gt;, it will automatically install the most recent copy of the zsh completion script in the Homebrew zsh directory, which the built-in version of zsh doesn't know about by default. It's best to use this copy of the script if possible, since it will be updated whenever you update &lt;code&gt;just&lt;/code&gt; via Homebrew. Also, many other Homebrew packages use the same location for completion scripts, and the built-in zsh doesn't know about those either. To take advantage of &lt;code&gt;just&lt;/code&gt; completion in zsh in this scenario, you can set &lt;code&gt;fpath&lt;/code&gt; to the Homebrew location before calling &lt;code&gt;compinit&lt;/code&gt;. Note also that Oh My Zsh runs &lt;code&gt;compinit&lt;/code&gt; by default. So your &lt;code&gt;.zshrc&lt;/code&gt; file could look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;# Init Homebrew, which adds environment variables
eval "$(brew shellenv)"

fpath=($HOMEBREW_PREFIX/share/zsh/site-functions $fpath)

# Then choose one of these options:
# 1. If you're using Oh My Zsh, you can initialize it here
# source $ZSH/oh-my-zsh.sh

# 2. Otherwise, run compinit yourself
# autoload -U compinit
# compinit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Man Page&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can print its own man page with &lt;code&gt;just --man&lt;/code&gt;. Man pages are written in &lt;a href="https://en.wikipedia.org/wiki/Roff_%28software%29"&gt;&lt;code&gt;roff&lt;/code&gt;&lt;/a&gt;, a venerable markup language and one of the first practical applications of Unix. If you have &lt;a href="https://www.gnu.org/software/groff/"&gt;&lt;code&gt;groff&lt;/code&gt;&lt;/a&gt; installed you can view the man page with &lt;code&gt;just --man | groff -mandoc -Tascii | less&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Grammar&lt;/h3&gt; 
&lt;p&gt;A non-normative grammar of &lt;code&gt;justfile&lt;/code&gt;s can be found in &lt;a href="https://github.com/casey/just/raw/master/GRAMMAR.md"&gt;GRAMMAR.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;just.sh&lt;/h3&gt; 
&lt;p&gt;Before &lt;code&gt;just&lt;/code&gt; was a fancy Rust program it was a tiny shell script that called &lt;code&gt;make&lt;/code&gt;. You can find the old version in &lt;a href="https://github.com/casey/just/raw/master/contrib/just.sh"&gt;contrib/just.sh&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Global and User &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;If you want some recipes to be available everywhere, you have a few options.&lt;/p&gt; 
&lt;h4&gt;Global Justfile&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just --global-justfile&lt;/code&gt;, or &lt;code&gt;just -g&lt;/code&gt; for short, searches the following paths, in-order, for a justfile:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/just/justfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.config/just/justfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/justfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.justfile&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can put recipes that are used across many projects in a global justfile to easily invoke them from any directory.&lt;/p&gt; 
&lt;h4&gt;User justfile tips&lt;/h4&gt; 
&lt;p&gt;You can also adopt some of the following workflows. These tips assume you've created a &lt;code&gt;justfile&lt;/code&gt; at &lt;code&gt;~/.user.justfile&lt;/code&gt;, but you can put this &lt;code&gt;justfile&lt;/code&gt; at any convenient path on your system.&lt;/p&gt; 
&lt;h5&gt;Recipe Aliases&lt;/h5&gt; 
&lt;p&gt;If you want to call the recipes in &lt;code&gt;~/.user.justfile&lt;/code&gt; by name, and don't mind creating an alias for every recipe, add the following to your shell's initialization script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;for recipe in `just --justfile ~/.user.justfile --summary`; do
  alias $recipe="just --justfile ~/.user.justfile --working-directory . $recipe"
done
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, if you have a recipe called &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;~/.user.justfile&lt;/code&gt;, you can just type &lt;code&gt;foo&lt;/code&gt; at the command line to run it.&lt;/p&gt; 
&lt;p&gt;It took me way too long to realize that you could create recipe aliases like this. Notwithstanding my tardiness, I am very pleased to bring you this major advance in &lt;code&gt;justfile&lt;/code&gt; technology.&lt;/p&gt; 
&lt;h5&gt;Forwarding Alias&lt;/h5&gt; 
&lt;p&gt;If you'd rather not create aliases for every recipe, you can create a single alias:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;alias .j='just --justfile ~/.user.justfile --working-directory .'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, if you have a recipe called &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;~/.user.justfile&lt;/code&gt;, you can just type &lt;code&gt;.j foo&lt;/code&gt; at the command line to run it.&lt;/p&gt; 
&lt;p&gt;I'm pretty sure that nobody actually uses this feature, but it's there.&lt;/p&gt; 
&lt;p&gt;¬Ø\_(„ÉÑ)_/¬Ø&lt;/p&gt; 
&lt;h5&gt;Customization&lt;/h5&gt; 
&lt;p&gt;You can customize the above aliases with additional options. For example, if you'd prefer to have the recipes in your &lt;code&gt;justfile&lt;/code&gt; run in your home directory, instead of the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;alias .j='just --justfile ~/.user.justfile --working-directory ~'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Node.js &lt;code&gt;package.json&lt;/code&gt; Script Compatibility&lt;/h3&gt; 
&lt;p&gt;The following export statement gives &lt;code&gt;just&lt;/code&gt; recipes access to local Node module binaries, and makes &lt;code&gt;just&lt;/code&gt; recipe commands behave more like &lt;code&gt;script&lt;/code&gt; entries in Node.js &lt;code&gt;package.json&lt;/code&gt; files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export PATH := "./node_modules/.bin:" + env_var('PATH')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Paths on Windows&lt;/h3&gt; 
&lt;p&gt;On Windows, all functions that return paths, except &lt;code&gt;invocation_directory()&lt;/code&gt; will return &lt;code&gt;\&lt;/code&gt;-separated paths. When not using PowerShell or &lt;code&gt;cmd.exe&lt;/code&gt; these paths should be quoted to prevent the &lt;code&gt;\&lt;/code&gt;s from being interpreted as character escapes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;ls:
    echo '{{absolute_path(".")}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;cygpath.exe&lt;/code&gt; is an executable included in some distributions of Unix userlands for Windows, including &lt;a href="https://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; and &lt;a href="https://git-scm.com/downloads"&gt;Git&lt;/a&gt; for Windows.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;cygpath.exe&lt;/code&gt; in two places:&lt;/p&gt; 
&lt;p&gt;For backwards compatibility, &lt;code&gt;invocation_directory()&lt;/code&gt;, uses &lt;code&gt;cygpath.exe&lt;/code&gt; to convert the invocation directory into a unix-style &lt;code&gt;/&lt;/code&gt;-separated path. Use &lt;code&gt;invocation_directory_native()&lt;/code&gt; to get the native, Windows-style path. On unix, &lt;code&gt;invocation_directory()&lt;/code&gt; and &lt;code&gt;invocation_directory_native()&lt;/code&gt; both return the same unix-style path.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;cygpath.exe&lt;/code&gt; is used also used to convert Unix-style shebang lines into Windows paths. As an alternative, the &lt;code&gt;[script]&lt;/code&gt; attribute, currently unstable, can be used, which does not depend on &lt;code&gt;cygpath.exe&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;cygpath.exe&lt;/code&gt; is available, you can use it to convert between path styles:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo_unix := '/hello/world'
foo_windows := shell('cygpath --windows $1', foo_unix)

bar_windows := 'C:\hello\world'
bar_unix := shell('cygpath --unix $1', bar_windows)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remote Justfiles&lt;/h3&gt; 
&lt;p&gt;If you wish to include a &lt;code&gt;mod&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; source file in many &lt;code&gt;justfiles&lt;/code&gt; without needing to duplicate it, you can use an optional &lt;code&gt;mod&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;, along with a recipe to fetch the module source:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;import? 'foo.just'

fetch:
  curl https://raw.githubusercontent.com/casey/just/master/justfile &amp;gt; foo.just
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Given the above &lt;code&gt;justfile&lt;/code&gt;, after running &lt;code&gt;just fetch&lt;/code&gt;, the recipes in &lt;code&gt;foo.just&lt;/code&gt; will be available.&lt;/p&gt; 
&lt;h3&gt;Printing Complex Strings&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; can be used to print strings, but because it processes escape sequences, like &lt;code&gt;\n&lt;/code&gt;, and different implementations of &lt;code&gt;echo&lt;/code&gt; recognize different escape sequences, using &lt;code&gt;printf&lt;/code&gt; is often a better choice.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;printf&lt;/code&gt; takes a C-style format string and any number of arguments, which are interpolated into the format string.&lt;/p&gt; 
&lt;p&gt;This can be combined with indented, triple quoted strings to emulate shell heredocs.&lt;/p&gt; 
&lt;p&gt;Substitution complex strings into recipe bodies with &lt;code&gt;{‚Ä¶}&lt;/code&gt; can also lead to trouble as it may be split by the shell into multiple arguments depending on the presence of whitespace and quotes. Exporting complex strings as environment variables and referring to them with &lt;code&gt;"$NAME"&lt;/code&gt;, note the double quotes, can also help.&lt;/p&gt; 
&lt;p&gt;Putting all this together, to print a string verbatim to standard output, with all its various escape sequences and quotes undisturbed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export FOO := '''
  a complicated string with
  some dis\tur\bi\ng escape sequences
  and "quotes" of 'different' kinds
'''

bar:
  printf %s "$FOO"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Alternatives and Prior Art&lt;/h3&gt; 
&lt;p&gt;There is no shortage of command runners! Some more or less similar alternatives to &lt;code&gt;just&lt;/code&gt; include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;make&lt;/a&gt;: The Unix build tool that inspired &lt;code&gt;just&lt;/code&gt;. There are a few different modern day descendents of the original &lt;code&gt;make&lt;/code&gt;, including &lt;a href="https://www.freebsd.org/cgi/man.cgi?make(1)"&gt;FreeBSD Make&lt;/a&gt; and &lt;a href="https://www.gnu.org/software/make/"&gt;GNU Make&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/go-task/task"&gt;task&lt;/a&gt;: A YAML-based command runner written in Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/egoist/maid"&gt;maid&lt;/a&gt;: A Markdown-based command runner written in JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/just"&gt;microsoft/just&lt;/a&gt;: A JavaScript-based command runner written in JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sagiegurari/cargo-make"&gt;cargo-make&lt;/a&gt;: A command runner for Rust projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tj/mmake"&gt;mmake&lt;/a&gt;: A wrapper around &lt;code&gt;make&lt;/code&gt; with a number of improvements, including remote includes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tj/robo"&gt;robo&lt;/a&gt;: A YAML-based command runner written in Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jakedeichert/mask"&gt;mask&lt;/a&gt;: A Markdown-based command runner written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xonixx/makesure"&gt;makesure&lt;/a&gt;: A simple and portable command runner written in AWK and shell.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VladimirMarkelov/haku"&gt;haku&lt;/a&gt;: A make-like command runner written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mise.jdx.dev/"&gt;mise&lt;/a&gt;: A development environment tool manager written in Rust supporing tasks in TOML files and standalone scripts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; welcomes your contributions! &lt;code&gt;just&lt;/code&gt; is released under the maximally permissive &lt;a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt"&gt;CC0&lt;/a&gt; public domain dedication and fallback license, so your changes must also be released under this license.&lt;/p&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is written in Rust. Use &lt;a href="https://www.rust-lang.org/tools/install"&gt;rustup&lt;/a&gt; to install a Rust toolchain.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is extensively tested. All new features must be covered by unit or integration tests. Unit tests are under &lt;a href="https://github.com/casey/just/raw/master/src"&gt;src&lt;/a&gt;, live alongside the code being tested, and test code in isolation. Integration tests are in the &lt;a href="https://github.com/casey/just/raw/master/tests"&gt;tests directory&lt;/a&gt; and test the &lt;code&gt;just&lt;/code&gt; binary from the outside by invoking &lt;code&gt;just&lt;/code&gt; on a given &lt;code&gt;justfile&lt;/code&gt; and set of command-line arguments, and checking the output.&lt;/p&gt; 
&lt;p&gt;You should write whichever type of tests are easiest to write for your feature while still providing good test coverage.&lt;/p&gt; 
&lt;p&gt;Unit tests are useful for testing new Rust functions that are used internally and as an aid for development. A good example are the unit tests which cover the &lt;a href="https://github.com/casey/just/raw/master/src/unindent.rs"&gt;&lt;code&gt;unindent()&lt;/code&gt; function&lt;/a&gt;, used to unindent triple-quoted strings and backticks. &lt;code&gt;unindent()&lt;/code&gt; has a bunch of tricky edge cases which are easy to exercise with unit tests that call &lt;code&gt;unindent()&lt;/code&gt; directly.&lt;/p&gt; 
&lt;p&gt;Integration tests are useful for making sure that the final behavior of the &lt;code&gt;just&lt;/code&gt; binary is correct. &lt;code&gt;unindent()&lt;/code&gt; is also covered by integration tests which make sure that evaluating a triple-quoted string produces the correct unindented value. However, there are not integration tests for all possible cases. These are covered by faster, more concise unit tests that call &lt;code&gt;unindent()&lt;/code&gt; directly.&lt;/p&gt; 
&lt;p&gt;Integration tests use the &lt;code&gt;Test&lt;/code&gt; struct, a builder which allows for easily invoking &lt;code&gt;just&lt;/code&gt; with a given &lt;code&gt;justfile&lt;/code&gt;, arguments, and environment variables, and checking the program's stdout, stderr, and exit code .&lt;/p&gt; 
&lt;h3&gt;Contribution Workflow&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Make sure the feature is wanted. There should be an open issue about the feature with a comment from &lt;a href="https://github.com/casey"&gt;@casey&lt;/a&gt; saying that it's a good idea or seems reasonable. If there isn't, open a new issue and ask for feedback.&lt;/p&gt; &lt;p&gt;There are lots of good features which can't be merged, either because they aren't backwards compatible, have an implementation which would overcomplicate the codebase, or go against &lt;code&gt;just&lt;/code&gt;'s design philosophy.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Settle on the design of the feature. If the feature has multiple possible implementations or syntaxes, make sure to nail down the details in the issue.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone &lt;code&gt;just&lt;/code&gt; and start hacking. The best workflow is to have the code you're working on in an editor alongside a job that re-runs tests whenever a file changes. You can run such a job by installing &lt;a href="https://github.com/watchexec/cargo-watch"&gt;cargo-watch&lt;/a&gt; with &lt;code&gt;cargo install cargo-watch&lt;/code&gt; and running &lt;code&gt;just watch test&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a failing test for your feature. Most of the time this will be an integration test which exercises the feature end-to-end. Look for an appropriate file to put the test in in &lt;a href="https://github.com/casey/just/raw/master/tests"&gt;tests&lt;/a&gt;, or add a new file in &lt;a href="https://github.com/casey/just/raw/master/tests"&gt;tests&lt;/a&gt; and add a &lt;code&gt;mod&lt;/code&gt; statement importing that file in &lt;a href="https://github.com/casey/just/raw/master/tests/lib.rs"&gt;tests/lib.rs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Implement the feature.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;just ci&lt;/code&gt; to make sure that all tests, lints, and checks pass. Requires &lt;a href="https://github.com/rust-lang/mdBook"&gt;mdBook&lt;/a&gt; and &lt;a href="https://github.com/Michael-F-Bryan/mdbook-linkcheck"&gt;mdbook-linkcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open a PR with the new code that is editable by maintainers. PRs often require rebasing and minor tweaks. If the PR is not editable by maintainers, each rebase and tweak will require a round trip of code review. Your PR may be summarily closed if it is not editable by maintainers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Incorporate feedback.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enjoy the sweet feeling of your PR getting merged!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Feel free to open a draft PR at any time for discussion and feedback.&lt;/p&gt; 
&lt;h3&gt;Hints&lt;/h3&gt; 
&lt;p&gt;Here are some hints to get you started with specific kinds of new features, which you can use in addition to the contribution workflow above.&lt;/p&gt; 
&lt;h4&gt;Adding a New Attribute&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Write a new integration test in &lt;a href="https://github.com/casey/just/raw/master/tests/attributes.rs"&gt;tests/attributes.rs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a new variant to the &lt;a href="https://github.com/casey/just/raw/master/src/attribute.rs"&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; enum.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Implement the functionality of the new attribute.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;just ci&lt;/code&gt; to make sure that all tests pass.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Janus&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/casey/janus"&gt;Janus&lt;/a&gt; is a tool for checking whether a change to &lt;code&gt;just&lt;/code&gt; breaks or changes the interpretation of existing &lt;code&gt;justfile&lt;/code&gt;s. It collects and analyzes public &lt;code&gt;justfile&lt;/code&gt;s on GitHub.&lt;/p&gt; 
&lt;p&gt;Before merging a particularly large or gruesome change, Janus should be run to make sure that nothing breaks. Don't worry about running Janus yourself, Casey will happily run it for you on changes that need it.&lt;/p&gt; 
&lt;h3&gt;Minimum Supported Rust Version&lt;/h3&gt; 
&lt;p&gt;The minimum supported Rust version, or MSRV, is current stable Rust. It may build on older versions of Rust, but this is not guaranteed.&lt;/p&gt; 
&lt;h3&gt;New Releases&lt;/h3&gt; 
&lt;p&gt;New releases of &lt;code&gt;just&lt;/code&gt; are made frequently so that users quickly get access to new features.&lt;/p&gt; 
&lt;p&gt;Release commit messages use the following template:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Release x.y.z

- Bump version: x.y.z ‚Üí x.y.z
- Update changelog
- Update changelog contributor credits
- Update dependencies
- Update version references in readme
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;h3&gt;What are the idiosyncrasies of Make that Just avoids?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; has some behaviors which are confusing, complicated, or make it unsuitable for use as a general command runner.&lt;/p&gt; 
&lt;p&gt;One example is that under some circumstances, &lt;code&gt;make&lt;/code&gt; won't actually run the commands in a recipe. For example, if you have a file called &lt;code&gt;test&lt;/code&gt; and the following makefile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test:
  ./test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; will refuse to run your tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ make test
make: `test' is up to date.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; assumes that the &lt;code&gt;test&lt;/code&gt; recipe produces a file called &lt;code&gt;test&lt;/code&gt;. Since this file exists and the recipe has no other dependencies, &lt;code&gt;make&lt;/code&gt; thinks that it doesn't have anything to do and exits.&lt;/p&gt; 
&lt;p&gt;To be fair, this behavior is desirable when using &lt;code&gt;make&lt;/code&gt; as a build system, but not when using it as a command runner. You can disable this behavior for specific targets using &lt;code&gt;make&lt;/code&gt;'s built-in &lt;a href="https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html"&gt;&lt;code&gt;.PHONY&lt;/code&gt; target name&lt;/a&gt;, but the syntax is verbose and can be hard to remember. The explicit list of phony targets, written separately from the recipe definitions, also introduces the risk of accidentally defining a new non-phony target. In &lt;code&gt;just&lt;/code&gt;, all recipes are treated as if they were phony.&lt;/p&gt; 
&lt;p&gt;Other examples of &lt;code&gt;make&lt;/code&gt;'s idiosyncrasies include the difference between &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;:=&lt;/code&gt; in assignments, the confusing error messages that are produced if you mess up your makefile, needing &lt;code&gt;$$&lt;/code&gt; to use environment variables in recipes, and incompatibilities between different flavors of &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;What's the relationship between Just and Cargo build scripts?&lt;/h3&gt; 
&lt;p&gt;&lt;a href="http://doc.crates.io/build-script.html"&gt;&lt;code&gt;cargo&lt;/code&gt; build scripts&lt;/a&gt; have a pretty specific use, which is to control how &lt;code&gt;cargo&lt;/code&gt; builds your Rust project. This might include adding flags to &lt;code&gt;rustc&lt;/code&gt; invocations, building an external dependency, or running some kind of codegen step.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt;, on the other hand, is for all the other miscellaneous commands you might run as part of development. Things like running tests in different configurations, linting your code, pushing build artifacts to a server, removing temporary files, and the like.&lt;/p&gt; 
&lt;p&gt;Also, although &lt;code&gt;just&lt;/code&gt; is written in Rust, it can be used regardless of the language or build system your project uses.&lt;/p&gt; 
&lt;h2&gt;Further Ramblings&lt;/h2&gt; 
&lt;p&gt;I personally find it very useful to write a &lt;code&gt;justfile&lt;/code&gt; for almost every project, big or small.&lt;/p&gt; 
&lt;p&gt;On a big project with multiple contributors, it's very useful to have a file with all the commands needed to work on the project close at hand.&lt;/p&gt; 
&lt;p&gt;There are probably different commands to test, build, lint, deploy, and the like, and having them all in one place is useful and cuts down on the time you have to spend telling people which commands to run and how to type them.&lt;/p&gt; 
&lt;p&gt;And, with an easy place to put commands, it's likely that you'll come up with other useful things which are part of the project's collective wisdom, but which aren't written down anywhere, like the arcane commands needed for some part of your revision control workflow, to install all your project's dependencies, or all the random flags you might need to pass to the build system.&lt;/p&gt; 
&lt;p&gt;Some ideas for recipes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Deploying/publishing the project&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Building in release mode vs debug mode&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Running in debug mode or with logging enabled&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Complex git workflows&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Updating dependencies&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Running different sets of tests, for example fast tests vs slow tests, or running them with verbose output&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Any complex set of commands that you really should write down somewhere, if only to be able to remember them&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Even for small, personal projects it's nice to be able to remember commands by name instead of ^Reverse searching your shell history, and it's a huge boon to be able to go into an old project written in a random language with a mysterious build system and know that all the commands you need to do whatever you need to do are in the &lt;code&gt;justfile&lt;/code&gt;, and that if you type &lt;code&gt;just&lt;/code&gt; something useful (or at least interesting!) will probably happen.&lt;/p&gt; 
&lt;p&gt;For ideas for recipes, check out &lt;a href="https://github.com/casey/just/raw/master/justfile"&gt;this project's &lt;code&gt;justfile&lt;/code&gt;&lt;/a&gt;, or some of the &lt;code&gt;justfile&lt;/code&gt;s &lt;a href="https://github.com/search?q=path%3A**%2Fjustfile&amp;amp;type=code"&gt;out in the wild&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Anyways, I think that's about it for this incredibly long-winded README.&lt;/p&gt; 
&lt;p&gt;I hope you enjoy using &lt;code&gt;just&lt;/code&gt; and find great success and satisfaction in all your computational endeavors!&lt;/p&gt; 
&lt;p&gt;üò∏&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/casey/just/master/#just"&gt;üîº Back to the top!&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>launchbadge/sqlx</title>
      <link>https://github.com/launchbadge/sqlx</link>
      <description>&lt;p&gt;üß∞ The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL, MySQL, and SQLite.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;SQLx&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;strong&gt; üß∞ The Rust SQL Toolkit &lt;/strong&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;div align="center"&gt; 
 &lt;!-- Github Actions --&gt; 
 &lt;a href="https://github.com/launchbadge/sqlx/actions/workflows/sqlx.yml?query=branch%3Amain"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/launchbadge/sqlx/sqlx.yml?branch=main&amp;amp;style=flat-square" alt="actions status"&gt;&lt;/a&gt; 
 &lt;!-- Version --&gt; 
 &lt;a href="https://crates.io/crates/sqlx"&gt; &lt;img src="https://img.shields.io/crates/v/sqlx.svg?style=flat-square" alt="Crates.io version"&gt;&lt;/a&gt; 
 &lt;!-- Discord --&gt; 
 &lt;a href="https://discord.gg/uuruzJ7"&gt; &lt;img src="https://img.shields.io/discord/665528275556106240?style=flat-square" alt="chat"&gt;&lt;/a&gt; 
 &lt;!-- Docs --&gt; 
 &lt;a href="https://docs.rs/sqlx"&gt; &lt;img src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square" alt="docs.rs docs"&gt;&lt;/a&gt; 
 &lt;!-- Downloads --&gt; 
 &lt;a href="https://crates.io/crates/sqlx"&gt; &lt;img src="https://img.shields.io/crates/d/sqlx.svg?style=flat-square" alt="Download"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h4&gt; &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/#install"&gt; Install &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/#usage"&gt; Usage &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://docs.rs/sqlx"&gt; Docs &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/launchbadge/sqlx/wiki/Ecosystem"&gt; Ecosystem &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://discord.gg/uuruzJ7"&gt; Discord &lt;/a&gt; &lt;/h4&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;div align="center"&gt; 
 &lt;small&gt;Built with ‚ù§Ô∏è by &lt;a href="https://launchbadge.com"&gt;The LaunchBadge team&lt;/a&gt;&lt;/small&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;div align="center"&gt; 
 &lt;h5&gt;Have a question? Be sure to &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/FAQ.md"&gt;check the FAQ first!&lt;/a&gt;&lt;/h5&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p&gt;SQLx is an async, pure Rust&lt;sub&gt;‚Ä†&lt;/sub&gt; SQL crate featuring compile-time checked queries without a DSL.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Truly Asynchronous&lt;/strong&gt;. Built from the ground-up using async/await for maximum concurrency.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile-time checked queries&lt;/strong&gt; (if you want). See &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/#sqlx-is-not-an-orm"&gt;SQLx is not an ORM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Database Agnostic&lt;/strong&gt;. Support for &lt;a href="http://postgresql.org/"&gt;PostgreSQL&lt;/a&gt;, &lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt;, &lt;a href="https://www.mariadb.org/"&gt;MariaDB&lt;/a&gt;, &lt;a href="https://sqlite.org/"&gt;SQLite&lt;/a&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/sql-server"&gt;MSSQL&lt;/a&gt; was supported prior to version 0.7, but has been removed pending a full rewrite of the driver as part of our &lt;a href="https://github.com/launchbadge/sqlx/discussions/1616"&gt;SQLx Pro initiative&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pure Rust&lt;/strong&gt;. The Postgres and MySQL/MariaDB drivers are written in pure Rust using &lt;strong&gt;zero&lt;/strong&gt; unsafe&lt;sub&gt;‚Ä†‚Ä†&lt;/sub&gt; code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Runtime Agnostic&lt;/strong&gt;. Works on different runtimes (&lt;a href="https://github.com/async-rs/async-std"&gt;&lt;code&gt;async-std&lt;/code&gt;&lt;/a&gt; / &lt;a href="https://github.com/tokio-rs/tokio"&gt;&lt;code&gt;tokio&lt;/code&gt;&lt;/a&gt; / &lt;a href="https://github.com/actix/actix-net"&gt;&lt;code&gt;actix&lt;/code&gt;&lt;/a&gt;) and TLS backends (&lt;a href="https://crates.io/crates/native-tls"&gt;&lt;code&gt;native-tls&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://crates.io/crates/rustls"&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;small&gt;&lt;small&gt;&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;
&lt;small&gt;&lt;small&gt; &lt;p&gt;‚Ä† The SQLite driver uses the libsqlite3 C library as SQLite is an embedded database (the only way we could be pure Rust for SQLite is by porting &lt;em&gt;all&lt;/em&gt; of SQLite to Rust).&lt;/p&gt; &lt;p&gt;‚Ä†‚Ä† SQLx uses &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; unless the &lt;code&gt;sqlite&lt;/code&gt; feature is enabled. The SQLite driver directly invokes the SQLite3 API via &lt;code&gt;libsqlite3-sys&lt;/code&gt;, which requires &lt;code&gt;unsafe&lt;/code&gt;.&lt;/p&gt; &lt;/small&gt;&lt;/small&gt;
&lt;p&gt;&lt;small&gt;&lt;small&gt;&lt;/small&gt;&lt;/small&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Cross-platform. Being native Rust, SQLx will compile anywhere Rust is supported.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Built-in connection pooling with &lt;code&gt;sqlx::Pool&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Row streaming. Data is read asynchronously from the database and decoded on demand.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Automatic statement preparation and caching. When using the high-level query API (&lt;code&gt;sqlx::query&lt;/code&gt;), statements are prepared and cached per connection.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Simple (unprepared) query execution including fetching results into the same &lt;code&gt;Row&lt;/code&gt; types used by the high-level API. Supports batch execution and returns results from all statements.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Transport Layer Security (TLS) where supported (&lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt;, &lt;a href="https://www.mariadb.org/"&gt;MariaDB&lt;/a&gt; and &lt;a href="http://postgresql.org/"&gt;PostgreSQL&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Asynchronous notifications using &lt;code&gt;LISTEN&lt;/code&gt; and &lt;code&gt;NOTIFY&lt;/code&gt; for &lt;a href="http://postgresql.org/"&gt;PostgreSQL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nested transactions with support for save points.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Any&lt;/code&gt; database driver for changing the database driver at runtime. An &lt;code&gt;AnyPool&lt;/code&gt; connects to the driver indicated by the URL scheme.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;SQLx is compatible with the &lt;a href="https://github.com/async-rs/async-std"&gt;&lt;code&gt;async-std&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/tokio-rs/tokio"&gt;&lt;code&gt;tokio&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/actix/actix-net"&gt;&lt;code&gt;actix&lt;/code&gt;&lt;/a&gt; runtimes; and, the &lt;a href="https://crates.io/crates/native-tls"&gt;&lt;code&gt;native-tls&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/rustls"&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt; TLS backends. When adding the dependency, you must choose a runtime feature that is &lt;code&gt;runtime&lt;/code&gt; + &lt;code&gt;tls&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# Cargo.toml
[dependencies]
# PICK ONE OF THE FOLLOWING:

# tokio (no TLS)
sqlx = { version = "0.8", features = [ "runtime-tokio" ] }
# tokio + native-tls
sqlx = { version = "0.8", features = [ "runtime-tokio", "tls-native-tls" ] }
# tokio + rustls with ring and WebPKI CA certificates
sqlx = { version = "0.8", features = [ "runtime-tokio", "tls-rustls-ring-webpki" ] }
# tokio + rustls with ring and platform's native CA certificates
sqlx = { version = "0.8", features = [ "runtime-tokio", "tls-rustls-ring-native-roots" ] }
# tokio + rustls with aws-lc-rs
sqlx = { version = "0.8", features = [ "runtime-tokio", "tls-rustls-aws-lc-rs" ] }

# async-std (no TLS)
sqlx = { version = "0.8", features = [ "runtime-async-std" ] }
# async-std + native-tls
sqlx = { version = "0.8", features = [ "runtime-async-std", "tls-native-tls" ] }
# async-std + rustls with ring and WebPKI CA certificates
sqlx = { version = "0.8", features = [ "runtime-async-std", "tls-rustls-ring-webpki" ] }
# async-std + rustls with ring and platform's native CA certificates
sqlx = { version = "0.8", features = [ "runtime-async-std", "tls-rustls-ring-native-roots" ] }
# async-std + rustls with aws-lc-rs
sqlx = { version = "0.8", features = [ "runtime-async-std", "tls-rustls-aws-lc-rs" ] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Cargo Feature Flags&lt;/h4&gt; 
&lt;p&gt;For backward-compatibility reasons, the runtime and TLS features can either be chosen together as a single feature, or separately.&lt;/p&gt; 
&lt;p&gt;For forward compatibility, you should use the separate runtime and TLS features as the combination features may be removed in the future.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;runtime-async-std&lt;/code&gt;: Use the &lt;code&gt;async-std&lt;/code&gt; runtime without enabling a TLS backend.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;runtime-tokio&lt;/code&gt;: Use the &lt;code&gt;tokio&lt;/code&gt; runtime without enabling a TLS backend.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Actix-web is fully compatible with Tokio and so a separate runtime feature is no longer needed.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;tls-native-tls&lt;/code&gt;: Use the &lt;code&gt;native-tls&lt;/code&gt; TLS backend (OpenSSL on *nix, SChannel on Windows, Secure Transport on macOS).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;tls-rustls&lt;/code&gt;: Use the &lt;code&gt;rustls&lt;/code&gt; TLS backend (cross-platform backend, only supports TLS 1.2 and 1.3).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;postgres&lt;/code&gt;: Add support for the Postgres database server.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;mysql&lt;/code&gt;: Add support for the MySQL/MariaDB database server.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;mssql&lt;/code&gt;: Add support for the MSSQL database server.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sqlite&lt;/code&gt;: Add support for the self-contained &lt;a href="https://sqlite.org/"&gt;SQLite&lt;/a&gt; database engine with SQLite bundled and statically-linked.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sqlite-unbundled&lt;/code&gt;: The same as above (&lt;code&gt;sqlite&lt;/code&gt;), but link SQLite from the system instead of the bundled version.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Allows updating SQLite independently of SQLx or using forked versions.&lt;/li&gt; 
   &lt;li&gt;You must have SQLite installed on the system or provide a path to the library at build time. See &lt;a href="https://github.com/rusqlite/rusqlite?tab=readme-ov-file#notes-on-building-rusqlite-and-libsqlite3-sys"&gt;the &lt;code&gt;rusqlite&lt;/code&gt; README&lt;/a&gt; for details.&lt;/li&gt; 
   &lt;li&gt;May result in link errors if the SQLite version is too old. Version &lt;code&gt;3.20.0&lt;/code&gt; or newer is recommended.&lt;/li&gt; 
   &lt;li&gt;Can increase build time due to the use of bindgen.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sqlite-preupdate-hook&lt;/code&gt;: enables SQLite's &lt;a href="https://sqlite.org/c3ref/preupdate_count.html"&gt;preupdate hook&lt;/a&gt; API.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Exposed as a separate feature because it's generally not enabled by default.&lt;/li&gt; 
   &lt;li&gt;Using this feature with &lt;code&gt;sqlite-unbundled&lt;/code&gt; may cause linker failures if the system SQLite version does not support it.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;any&lt;/code&gt;: Add support for the &lt;code&gt;Any&lt;/code&gt; database driver, which can proxy to a database driver at runtime.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;derive&lt;/code&gt;: Add support for the derive family macros, those are &lt;code&gt;FromRow&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, &lt;code&gt;Encode&lt;/code&gt;, &lt;code&gt;Decode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;macros&lt;/code&gt;: Add support for the &lt;code&gt;query*!&lt;/code&gt; macros, which allows compile-time checked queries.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;migrate&lt;/code&gt;: Add support for the migration management and &lt;code&gt;migrate!&lt;/code&gt; macro, which allow compile-time embedded migrations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;uuid&lt;/code&gt;: Add support for UUID.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;chrono&lt;/code&gt;: Add support for date and time types from &lt;code&gt;chrono&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;time&lt;/code&gt;: Add support for date and time types from &lt;code&gt;time&lt;/code&gt; crate (alternative to &lt;code&gt;chrono&lt;/code&gt;, which is preferred by &lt;code&gt;query!&lt;/code&gt; macro, if both enabled)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;bstr&lt;/code&gt;: Add support for &lt;code&gt;bstr::BString&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;bigdecimal&lt;/code&gt;: Add support for &lt;code&gt;NUMERIC&lt;/code&gt; using the &lt;code&gt;bigdecimal&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;rust_decimal&lt;/code&gt;: Add support for &lt;code&gt;NUMERIC&lt;/code&gt; using the &lt;code&gt;rust_decimal&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipnet&lt;/code&gt;: Add support for &lt;code&gt;INET&lt;/code&gt; and &lt;code&gt;CIDR&lt;/code&gt; (in postgres) using the &lt;code&gt;ipnet&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipnetwork&lt;/code&gt;: Add support for &lt;code&gt;INET&lt;/code&gt; and &lt;code&gt;CIDR&lt;/code&gt; (in postgres) using the &lt;code&gt;ipnetwork&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt;: Add support for &lt;code&gt;JSON&lt;/code&gt; and &lt;code&gt;JSONB&lt;/code&gt; (in postgres) using the &lt;code&gt;serde_json&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Offline mode is now always enabled. See &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/sqlx-cli/README.md#enable-building-in-offline-mode-with-query"&gt;sqlx-cli/README.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;SQLx is not an ORM!&lt;/h2&gt; 
&lt;p&gt;SQLx supports &lt;strong&gt;compile-time checked queries&lt;/strong&gt;. It does not, however, do this by providing a Rust API or DSL (domain-specific language) for building queries. Instead, it provides macros that take regular SQL as input and ensure that it is valid for your database. The way this works is that SQLx connects to your development DB at compile time to have the database itself verify (and return some info on) your SQL queries. This has some potentially surprising implications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Since SQLx never has to parse the SQL string itself, any syntax that the development DB accepts can be used (including things added by database extensions)&lt;/li&gt; 
 &lt;li&gt;Due to the different amount of information databases let you retrieve about queries, the extent of SQL verification you get from the query macros depends on the database&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;If you are looking for an (asynchronous) ORM,&lt;/strong&gt; you can check out our new &lt;a href="https://github.com/launchbadge/sqlx/wiki/Ecosystem#orms"&gt;Ecosystem wiki page&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;See the &lt;code&gt;examples/&lt;/code&gt; folder for more in-depth usage.&lt;/p&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use sqlx::postgres::PgPoolOptions;
// use sqlx::mysql::MySqlPoolOptions;
// etc.

#[async_std::main] // Requires the `attributes` feature of `async-std`
// or #[tokio::main]
// or #[actix_web::main]
async fn main() -&amp;gt; Result&amp;lt;(), sqlx::Error&amp;gt; {
    // Create a connection pool
    //  for MySQL/MariaDB, use MySqlPoolOptions::new()
    //  for SQLite, use SqlitePoolOptions::new()
    //  etc.
    let pool = PgPoolOptions::new()
        .max_connections(5)
        .connect("postgres://postgres:password@localhost/test").await?;

    // Make a simple query to return the given parameter (use a question mark `?` instead of `$1` for MySQL/MariaDB)
    let row: (i64,) = sqlx::query_as("SELECT $1")
        .bind(150_i64)
        .fetch_one(&amp;amp;pool).await?;

    assert_eq!(row.0, 150);

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Connecting&lt;/h3&gt; 
&lt;p&gt;A single connection can be established using any of the database connection types and calling &lt;code&gt;connect()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use sqlx::Connection;

let conn = SqliteConnection::connect("sqlite::memory:").await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Generally, you will want to instead create a connection pool (&lt;code&gt;sqlx::Pool&lt;/code&gt;) for the application to regulate how many server-side connections it's using.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let pool = MySqlPool::connect("mysql://user:pass@host/database").await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Querying&lt;/h3&gt; 
&lt;p&gt;In SQL, queries can be separated into prepared (parameterized) or unprepared (simple). Prepared queries have their query plan &lt;em&gt;cached&lt;/em&gt;, use a binary mode of communication (lower bandwidth and faster decoding), and utilize parameters to avoid SQL injection. Unprepared queries are simple and intended only for use where a prepared statement will not work, such as various database commands (e.g., &lt;code&gt;PRAGMA&lt;/code&gt; or &lt;code&gt;SET&lt;/code&gt; or &lt;code&gt;BEGIN&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;SQLx supports all operations with both types of queries. In SQLx, a &lt;code&gt;&amp;amp;str&lt;/code&gt; is treated as an unprepared query, and a &lt;code&gt;Query&lt;/code&gt; or &lt;code&gt;QueryAs&lt;/code&gt; struct is treated as a prepared query.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// low-level, Executor trait
conn.execute("BEGIN").await?; // unprepared, simple query
conn.execute(sqlx::query("DELETE FROM table")).await?; // prepared, cached query
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We should prefer to use the high-level &lt;code&gt;query&lt;/code&gt; interface whenever possible. To make this easier, there are finalizers on the type to avoid the need to wrap with an executor.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;sqlx::query("DELETE FROM table").execute(&amp;amp;mut conn).await?;
sqlx::query("DELETE FROM table").execute(&amp;amp;pool).await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;execute&lt;/code&gt; query finalizer returns the number of affected rows, if any, and drops all received results. In addition, there are &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;fetch_one&lt;/code&gt;, &lt;code&gt;fetch_optional&lt;/code&gt;, and &lt;code&gt;fetch_all&lt;/code&gt; to receive results.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;Query&lt;/code&gt; type returned from &lt;code&gt;sqlx::query&lt;/code&gt; will return &lt;code&gt;Row&amp;lt;'conn&amp;gt;&lt;/code&gt; from the database. Column values can be accessed by ordinal or by name with &lt;code&gt;row.get()&lt;/code&gt;. As the &lt;code&gt;Row&lt;/code&gt; retains an immutable borrow on the connection, only one &lt;code&gt;Row&lt;/code&gt; may exist at a time.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;fetch&lt;/code&gt; query finalizer returns a stream-like type that iterates through the rows in the result sets.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// provides `try_next`
use futures_util::TryStreamExt;
// provides `try_get`
use sqlx::Row;

let mut rows = sqlx::query("SELECT * FROM users WHERE email = ?")
    .bind(email)
    .fetch(&amp;amp;mut conn);

while let Some(row) = rows.try_next().await? {
    // map the row into a user-defined domain type
    let email: &amp;amp;str = row.try_get("email")?;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To assist with mapping the row into a domain type, one of two idioms may be used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let mut stream = sqlx::query("SELECT * FROM users")
    .map(|row: PgRow| {
        // map the row into a user-defined domain type
    })
    .fetch(&amp;amp;mut conn);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(sqlx::FromRow)]
struct User { name: String, id: i64 }

let mut stream = sqlx::query_as::&amp;lt;_, User&amp;gt;("SELECT * FROM users WHERE email = ? OR name = ?")
    .bind(user_email)
    .bind(user_name)
    .fetch(&amp;amp;mut conn);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Instead of a stream of results, we can use &lt;code&gt;fetch_one&lt;/code&gt; or &lt;code&gt;fetch_optional&lt;/code&gt; to request one required or optional result from the database.&lt;/p&gt; 
&lt;h3&gt;Compile-time verification&lt;/h3&gt; 
&lt;p&gt;We can use the macro, &lt;code&gt;sqlx::query!&lt;/code&gt; to achieve compile-time syntactic and semantic verification of the SQL, with an output to an anonymous record type where each SQL column is a Rust field (using raw identifiers where needed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let countries = sqlx::query!(
        "
SELECT country, COUNT(*) as count
FROM users
GROUP BY country
WHERE organization = ?
        ",
        organization
    )
    .fetch_all(&amp;amp;pool) // -&amp;gt; Vec&amp;lt;{ country: String, count: i64 }&amp;gt;
    .await?;

// countries[0].country
// countries[0].count
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Differences from &lt;code&gt;query()&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The input (or bind) parameters must be given all at once (and they are compile-time validated to be the right number and the right type).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The output type is an anonymous record. In the above example the type would be similar to:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-rust"&gt;{ country: String, count: i64 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable must be set at build time to a database which it can prepare queries against; the database does not have to contain any data but must be the same kind (MySQL, Postgres, etc.) and have the same schema as the database you will be connecting to at runtime.&lt;/p&gt; &lt;p&gt;For convenience, you can use &lt;a href="https://github.com/dotenv-rs/dotenv#examples"&gt;a &lt;code&gt;.env&lt;/code&gt; file&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; to set DATABASE_URL so that you don't have to pass it every time:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;DATABASE_URL=mysql://localhost/my_database
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The biggest downside to &lt;code&gt;query!()&lt;/code&gt; is that the output type cannot be named (due to Rust not officially supporting anonymous records). To address that, there is a &lt;code&gt;query_as!()&lt;/code&gt; macro that is mostly identical except that you can name the output type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// no traits are needed
struct Country { country: String, count: i64 }

let countries = sqlx::query_as!(Country,
        "
SELECT country, COUNT(*) as count
FROM users
GROUP BY country
WHERE organization = ?
        ",
        organization
    )
    .fetch_all(&amp;amp;pool) // -&amp;gt; Vec&amp;lt;Country&amp;gt;
    .await?;

// countries[0].country
// countries[0].count
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To avoid the need of having a development database around to compile the project even when no modifications (to the database-accessing parts of the code) are done, you can enable "offline mode" to cache the results of the SQL query analysis using the &lt;code&gt;sqlx&lt;/code&gt; command-line tool. See &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/sqlx-cli/README.md#enable-building-in-offline-mode-with-query"&gt;sqlx-cli/README.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Compile-time verified queries do quite a bit of work at compile time. Incremental actions like &lt;code&gt;cargo check&lt;/code&gt; and &lt;code&gt;cargo build&lt;/code&gt; can be significantly faster when using an optimized build by putting the following in your &lt;code&gt;Cargo.toml&lt;/code&gt; (More information in the &lt;a href="https://doc.rust-lang.org/cargo/reference/profiles.html"&gt;Profiles section&lt;/a&gt; of The Cargo Book)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[profile.dev.package.sqlx-macros]
opt-level = 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; The &lt;code&gt;dotenv&lt;/code&gt; crate itself appears abandoned as of &lt;a href="https://github.com/dotenv-rs/dotenv/issues/74"&gt;December 2021&lt;/a&gt; so we now use the &lt;code&gt;dotenvy&lt;/code&gt; crate instead. The file format is the same.&lt;/p&gt; 
&lt;h2&gt;Safety&lt;/h2&gt; 
&lt;p&gt;This crate uses &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; to ensure everything is implemented in 100% Safe Rust.&lt;/p&gt; 
&lt;p&gt;If the &lt;code&gt;sqlite&lt;/code&gt; feature is enabled, this is downgraded to &lt;code&gt;#![deny(unsafe_code)]&lt;/code&gt; with &lt;code&gt;#![allow(unsafe_code)]&lt;/code&gt; on the &lt;code&gt;sqlx::sqlite&lt;/code&gt; module. There are several places where we interact with the C SQLite API. We try to document each call for the invariants we're assuming. We absolutely welcome auditing of, and feedback on, our unsafe code usage.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any Contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>block/goose</title>
      <link>https://github.com/block/goose</link>
      <description>&lt;p&gt;an open source, extensible AI agent that goes beyond code suggestions - install, execute, edit, and test with any LLM&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;codename goose&lt;/h1&gt; 
 &lt;p&gt;&lt;em&gt;a local, extensible, open source AI agent that automates engineering tasks&lt;/em&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt; &lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true"&gt; &lt;/a&gt; &lt;a href="https://discord.gg/7GaTvbDwga"&gt; &lt;img src="https://img.shields.io/discord/1287729918100246654?logo=discord&amp;amp;logoColor=white&amp;amp;label=Join+Us&amp;amp;color=blueviolet" alt="Discord"&gt; &lt;/a&gt; &lt;a href="https://github.com/block/goose/actions/workflows/ci.yml"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/block/goose/ci.yml?branch=main" alt="CI"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;goose is your on-machine AI agent, capable of automating complex development tasks from start to finish. More than just code suggestions, goose can build entire projects from scratch, write and execute code, debug failures, orchestrate workflows, and interact with external APIs - &lt;em&gt;autonomously&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Whether you're prototyping an idea, refining existing code, or managing intricate engineering pipelines, goose adapts to your workflow and executes tasks with precision.&lt;/p&gt; 
&lt;p&gt;Designed for maximum flexibility, goose works with any LLM and supports multi-model configuration to optimize performance and cost, seamlessly integrates with MCP servers, and is available as both a desktop app as well as CLI - making it the ultimate AI assistant for developers who want to move faster and focus on innovation.&lt;/p&gt; 
&lt;h1&gt;Quick Links&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/getting-started/installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/getting-started"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Goose Around with Us&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/block-opensource"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/@blockopensource"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/block-opensource"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/blockopensource"&gt;Twitter/X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bsky.app/profile/opensource.block.xyz"&gt;Bluesky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://njump.me/opensource@block.xyz"&gt;Nostr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>firecracker-microvm/firecracker</title>
      <link>https://github.com/firecracker-microvm/firecracker</link>
      <description>&lt;p&gt;Secure and fast microVMs for serverless computing.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="docs/images/fc_logo_full_transparent-bg_white-fg.png"&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="docs/images/fc_logo_full_transparent-bg.png"&gt; 
 &lt;img alt="Firecracker Logo Title" width="750" src="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/images/fc_logo_full_transparent-bg.png"&gt; 
&lt;/picture&gt; 
&lt;p&gt;Our mission is to enable secure, multi-tenant, minimal-overhead execution of container and function workloads.&lt;/p&gt; 
&lt;p&gt;Read more about the Firecracker Charter &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What is Firecracker?&lt;/h2&gt; 
&lt;p&gt;Firecracker is an open source virtualization technology that is purpose-built for creating and managing secure, multi-tenant container and function-based services that provide serverless operational models. Firecracker runs workloads in lightweight virtual machines, called microVMs, which combine the security and isolation properties provided by hardware virtualization technology with the speed and flexibility of containers.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;The main component of Firecracker is a virtual machine monitor (VMM) that uses the Linux Kernel Virtual Machine (KVM) to create and run microVMs. Firecracker has a minimalist design. It excludes unnecessary devices and guest-facing functionality to reduce the memory footprint and attack surface area of each microVM. This improves security, decreases the startup time, and increases hardware utilization. Firecracker has also been integrated in container runtimes, for example &lt;a href="https://github.com/kata-containers/kata-containers"&gt;Kata Containers&lt;/a&gt; and &lt;a href="https://github.com/liquidmetal-dev/flintlock"&gt;Flintlock&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Firecracker was developed at Amazon Web Services to accelerate the speed and efficiency of services like &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; and &lt;a href="https://aws.amazon.com/fargate/"&gt;AWS Fargate&lt;/a&gt;. Firecracker is open sourced under &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/LICENSE"&gt;Apache version 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To read more about Firecracker, check out &lt;a href="https://firecracker-microvm.github.io"&gt;firecracker-microvm.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;To get started with Firecracker, download the latest &lt;a href="https://github.com/firecracker-microvm/firecracker/releases"&gt;release&lt;/a&gt; binaries or build it from source.&lt;/p&gt; 
&lt;p&gt;You can build Firecracker on any Unix/Linux system that has Docker running (we use a development container) and &lt;code&gt;bash&lt;/code&gt; installed, as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/firecracker-microvm/firecracker
cd firecracker
tools/devtool build
toolchain="$(uname -m)-unknown-linux-musl"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Firecracker binary will be placed at &lt;code&gt;build/cargo_target/${toolchain}/debug/firecracker&lt;/code&gt;. For more information on building, testing, and running Firecracker, go to the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md"&gt;quickstart guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The overall security of Firecracker microVMs, including the ability to meet the criteria for safe multi-tenant computing, depends on a well configured Linux host operating system. A configuration that we believe meets this bar is included in &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/prod-host-setup.md"&gt;the production host setup document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Firecracker is already running production workloads within AWS, but it's still Day 1 on the journey guided by our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md"&gt;mission&lt;/a&gt;. There's a lot more to build and we welcome all contributions.&lt;/p&gt; 
&lt;p&gt;To contribute to Firecracker, check out the development setup section in the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md"&gt;getting started guide&lt;/a&gt; and then the Firecracker &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;New Firecracker versions are released via the GitHub repository &lt;a href="https://github.com/firecracker-microvm/firecracker/releases"&gt;releases&lt;/a&gt; page, typically every two or three months. A history of changes is recorded in our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHANGELOG.md"&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Firecracker release policy is detailed &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/RELEASE_POLICY.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Design&lt;/h2&gt; 
&lt;p&gt;Firecracker's overall architecture is described in &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/design.md"&gt;the design document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features &amp;amp; Capabilities&lt;/h2&gt; 
&lt;p&gt;Firecracker consists of a single micro Virtual Machine Manager process that exposes an API endpoint to the host once started. The API is &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/src/firecracker/swagger/firecracker.yaml"&gt;specified in OpenAPI format&lt;/a&gt;. Read more about it in the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/api_requests"&gt;API docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;strong&gt;API endpoint&lt;/strong&gt; can be used to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configure the microvm by: 
  &lt;ul&gt; 
   &lt;li&gt;Setting the number of vCPUs (the default is 1).&lt;/li&gt; 
   &lt;li&gt;Setting the memory size (the default is 128 MiB).&lt;/li&gt; 
   &lt;li&gt;Configuring a &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/cpu_templates/cpu-templates.md"&gt;CPU template&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Add one or more network interfaces to the microVM.&lt;/li&gt; 
 &lt;li&gt;Add one or more read-write or read-only disks to the microVM, each represented by a file-backed block device.&lt;/li&gt; 
 &lt;li&gt;Trigger a block device re-scan while the guest is running. This enables the guest OS to pick up size changes to the block device's backing file.&lt;/li&gt; 
 &lt;li&gt;Change the backing file for a block device, before or after the guest boots.&lt;/li&gt; 
 &lt;li&gt;Configure rate limiters for virtio devices which can limit the bandwidth, operations per second, or both.&lt;/li&gt; 
 &lt;li&gt;Configure the logging and metric system.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[BETA]&lt;/code&gt; Configure the data tree of the guest-facing metadata service. The service is only available to the guest if this resource is configured.&lt;/li&gt; 
 &lt;li&gt;Add a &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/vsock.md"&gt;vsock socket&lt;/a&gt; to the microVM.&lt;/li&gt; 
 &lt;li&gt;Add a &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/entropy.md"&gt;entropy device&lt;/a&gt; to the microVM.&lt;/li&gt; 
 &lt;li&gt;Start the microVM using a given kernel image, root file system, and boot arguments.&lt;/li&gt; 
 &lt;li&gt;[x86_64 only] Stop the microVM.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Built-in Capabilities&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Demand fault paging and CPU oversubscription enabled by default.&lt;/li&gt; 
 &lt;li&gt;Advanced, thread-specific seccomp filters for enhanced security.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/jailer.md"&gt;Jailer&lt;/a&gt; process for starting Firecracker in production scenarios; applies a cgroup/namespace isolation barrier and then drops privileges.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tested platforms&lt;/h2&gt; 
&lt;p&gt;We test all combinations of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Instance&lt;/th&gt; 
   &lt;th align="left"&gt;Host OS &amp;amp; Kernel&lt;/th&gt; 
   &lt;th align="left"&gt;Guest Rootfs&lt;/th&gt; 
   &lt;th align="left"&gt;Guest Kernel&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;c5n.metal&lt;/td&gt; 
   &lt;td align="left"&gt;al2 linux_5.10&lt;/td&gt; 
   &lt;td align="left"&gt;ubuntu 24.04&lt;/td&gt; 
   &lt;td align="left"&gt;linux_5.10&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m5n.metal&lt;/td&gt; 
   &lt;td align="left"&gt;al2023 linux_6.1&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;linux_6.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m6i.metal&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7i.metal-24xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7i.metal-48xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m6a.metal&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7a.metal-48xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m6g.metal&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7g.metal&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m8g.metal-24xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m8g.metal-48xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Known issues and Limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;pl031&lt;/code&gt; RTC device on aarch64 does not support interrupts, so guest programs which use an RTC alarm (e.g. &lt;code&gt;hwclock&lt;/code&gt;) will not work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;Firecracker's performance characteristics are listed as part of the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SPECIFICATION.md"&gt;specification documentation&lt;/a&gt;. All specifications are a part of our commitment to supporting container and function workloads in serverless operational models, and are therefore enforced via continuous integration testing.&lt;/p&gt; 
&lt;h2&gt;Policy for Security Disclosures&lt;/h2&gt; 
&lt;p&gt;The security of Firecracker is our top priority. If you suspect you have uncovered a vulnerability, contact us privately, as outlined in our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md"&gt;security policy document&lt;/a&gt;; we will immediately prioritize your disclosure.&lt;/p&gt; 
&lt;h2&gt;FAQ &amp;amp; Contact&lt;/h2&gt; 
&lt;p&gt;Frequently asked questions are collected in our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/FAQ.md"&gt;FAQ doc&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can get in touch with the Firecracker community in the following ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Security-related issues, see our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md"&gt;security policy document&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Chat with us on our &lt;a href="https://join.slack.com/t/firecracker-microvm/shared_invite/zt-2tc0mfxpc-tU~HYAYSzLDl5XGGJU3YIg"&gt;Slack workspace&lt;/a&gt; &lt;em&gt;Note: most of the maintainers are on a European time zone.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Open a GitHub issue in this repository.&lt;/li&gt; 
 &lt;li&gt;Email the maintainers at &lt;a href="mailto:firecracker-maintainers@amazon.com"&gt;firecracker-maintainers@amazon.com&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When communicating within the Firecracker community, please mind our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CODE_OF_CONDUCT.md"&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>