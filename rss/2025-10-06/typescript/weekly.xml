<rss version="2.0">
  <channel>
    <title>GitHub TypeScript Weekly Trending</title>
    <description>Weekly Trending of TypeScript in GitHub</description>
    <pubDate>Sun, 05 Oct 2025 01:49:37 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>TanStack/router</title>
      <link>https://github.com/TanStack/router</link>
      <description>&lt;p&gt;🤖 Fully typesafe Router for React (and friends) w/ built-in caching, 1st class search-param APIs, client-side cache integration and isomorphic rendering.&lt;/p&gt;&lt;hr&gt;&lt;img src="https://static.scarf.sh/a.png?x-pxid=d988eb79-b0fc-4a2b-8514-6a1ab932d188" /&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/TanStack/router/main/media/header_router.png" alt="TanStack Router" /&gt;&lt;/p&gt; &lt;h2&gt;TanStack Router&lt;/h2&gt; &lt;p&gt;A modern router designed for type safety, data‑driven navigation, and seamless developer experience.&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;End‑to‑end type safety (routes, params, loaders)&lt;/li&gt; 
     &lt;li&gt;Schema‑driven search params with validation&lt;/li&gt; 
     &lt;li&gt;Built‑in caching, prefetching &amp;amp; invalidation&lt;/li&gt; 
     &lt;li&gt;Nested layouts, transitions &amp;amp; error boundaries&lt;/li&gt; 
    &lt;/ul&gt; &lt;h3&gt;&lt;a href="https://tanstack.com/router"&gt;Read the Router Docs →&lt;/a&gt;&lt;/h3&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/TanStack/router/main/media/header_start.png" alt="TanStack Start" /&gt;&lt;/p&gt; &lt;h2&gt;TanStack Start&lt;/h2&gt; &lt;p&gt;A full‑stack framework built on Router, designed for server rendering, streaming, and production‑ready deployments.&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Full‑document SSR &amp;amp; streaming&lt;/li&gt; 
     &lt;li&gt;Server functions &amp;amp; end‑to‑end type safety&lt;/li&gt; 
     &lt;li&gt;Deployment‑ready bundling &amp;amp; builds&lt;/li&gt; 
     &lt;li&gt;All the power of TanStack Router, plus full‑stack features&lt;/li&gt; 
    &lt;/ul&gt; &lt;h3&gt;&lt;a href="https://tanstack.com/start"&gt;Read the Start Docs →&lt;/a&gt;&lt;/h3&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://npmjs.com/package/@tanstack/react-router"&gt; &lt;img src="https://img.shields.io/npm/dm/@tanstack/react-router.svg?sanitize=true" alt="npm downloads" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/tanstack/router"&gt; &lt;img src="https://img.shields.io/github/stars/tanstack/router.svg?style=social&amp;amp;label=Star" alt="GitHub stars" /&gt; &lt;/a&gt; 
 &lt;a href="https://bundlephobia.com/result?p=@tanstack/react-router"&gt; &lt;img src="https://badgen.net/bundlephobia/minzip/@tanstack/react-router" alt="Bundle size" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://raw.githubusercontent.com/TanStack/router/main/#badge"&gt; &lt;img alt="semantic-release" src="https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?sanitize=true" /&gt; &lt;/a&gt; 
 &lt;a href="https://bestofjs.org/projects/tanstack-router"&gt;&lt;img alt="Best of JS" src="https://img.shields.io/endpoint?url=https://bestofjs-serverless.now.sh/api/project-badge?fullName=TanStack%2Frouter%26since=daily" /&gt;&lt;/a&gt; 
 &lt;a href="https://twitter.com/tan_stack"&gt;&lt;img src="https://img.shields.io/twitter/follow/tan_stack.svg?style=social" alt="Follow @TanStack" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h3&gt;&lt;a href="https://github.com/sponsors/tannerlinsley/"&gt;Become a Sponsor!&lt;/a&gt;&lt;/h3&gt; 
&lt;/div&gt; 
&lt;h2&gt;Get Involved&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;We welcome issues and pull requests!&lt;/li&gt; 
 &lt;li&gt;Participate in &lt;a href="https://github.com/TanStack/router/discussions"&gt;GitHub discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chat with the community on &lt;a href="https://discord.com/invite/WrRKjPJ"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://raw.githubusercontent.com/TanStack/router/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for setup instructions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;table align="center"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href="https://www.coderabbit.ai/?via=tanstack&amp;amp;dub_id=aCcEEdAOqqutX6OS"&gt; 
     &lt;picture&gt; 
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://tanstack.com/assets/coderabbit-dark-CMcuvjEy.svg" height="40" /&gt; 
      &lt;source media="(prefers-color-scheme: light)" srcset="https://tanstack.com/assets/coderabbit-light-DVMJ2jHi.svg" height="40" /&gt; 
      &lt;img src="https://tanstack.com/assets/coderabbit-dark-CMcuvjEy.svg?sanitize=true" height="40" alt="CodeRabbit" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td padding="20"&gt; &lt;a href="https://www.cloudflare.com?utm_source=tanstack"&gt; 
     &lt;picture&gt; 
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://tanstack.com/assets/cloudflare-white-DQDB7UaL.svg" height="60" /&gt; 
      &lt;source media="(prefers-color-scheme: light)" srcset="https://tanstack.com/assets/cloudflare-black-CPufaW0B.svg" height="60" /&gt; 
      &lt;img src="https://tanstack.com/assets/cloudflare-black-CPufaW0B.svg?sanitize=true" height="60" alt="Cloudflare" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://netlify.com?utm_source=tanstack"&gt; 
     &lt;picture&gt; 
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/netlify-dark.svg" height="70" /&gt; 
      &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/tannerlinsley/files/master/partners/netlify.svg" height="70" /&gt; 
      &lt;img src="https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/netlify-dark.svg?sanitize=true" height="70" alt="Netlify" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href="https://neon.tech?utm_source=tanstack"&gt; 
     &lt;picture&gt; 
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/neon-dark.svg" height="50" /&gt; 
      &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/tannerlinsley/files/master/partners/neon.svg" height="50" /&gt; 
      &lt;img src="https://raw.githubusercontent.com/tannerlinsley/files/master/partners/neon.svg?sanitize=true" height="50" alt="Neon" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://go.clerk.com/wOwHtuJ"&gt; 
     &lt;picture&gt; 
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://tanstack.com/assets/clerk-logo-dark-CRE22T_2.svg" height="40" /&gt; 
      &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/tannerlinsley/files/master/partners/clerk.svg" height="40" /&gt; 
      &lt;img src="https://tanstack.com/assets/clerk-logo-dark-CRE22T_2.svg?sanitize=true" height="40" alt="Clerk" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://convex.dev?utm_source=tanstack"&gt; 
     &lt;picture&gt; 
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/convex-white.svg" height="30" /&gt; 
      &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/tannerlinsley/files/master/partners/convex.svg" height="30" /&gt; 
      &lt;img src="https://raw.githubusercontent.com/tannerlinsley/files/master/partners/convex.svg?sanitize=true" height="30" alt="Convex" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href="https://sentry.io?utm_source=tanstack"&gt; 
     &lt;picture&gt; 
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/sentry-wordmark-light.svg" height="50" /&gt; 
      &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/tannerlinsley/files/master/partners/sentry.svg" height="50" /&gt; 
      &lt;img src="https://raw.githubusercontent.com/tannerlinsley/files/master/partners/sentry.svg?sanitize=true" height="50" alt="Sentry" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://www.prisma.io?utm_source=tanstack&amp;amp;via=tanstack"&gt; 
     &lt;picture&gt; 
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://tanstack.com/assets/prisma-dark-DwgDxLwn.svg" height="50" /&gt; 
      &lt;source media="(prefers-color-scheme: light)" srcset="https://tanstack.com/assets/prisma-light-Cloa3Onm.svg" height="50" /&gt; 
      &lt;img src="https://tanstack.com/assets/prisma-dark-DwgDxLwn.svg?sanitize=true" height="50" alt="Prisma" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://strapi.link/tanstack-start"&gt; 
     &lt;picture&gt; 
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://tanstack.com/assets/strapi-dark-CQ84tQTk.svg" height="40" /&gt; 
      &lt;source media="(prefers-color-scheme: light)" srcset="https://tanstack.com/assets/strapi-light-6x7linao.svg" height="40" /&gt; 
      &lt;img src="https://tanstack.com/assets/strapi-dark-CQ84tQTk.svg?sanitize=true" height="40" alt="Strapi" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/TanStack/router/main/media/partner_logo.svg?sanitize=true" alt="Router &amp;amp; you?" height="65" /&gt; 
 &lt;p&gt; We're looking for TanStack Router &amp;amp; Start Partners to join our mission! Partner with us to push the boundaries of TanStack Router &amp;amp; Start and build amazing things together. &lt;/p&gt; 
 &lt;a href="mailto:partners@tanstack.com?subject=TanStack Router &amp;amp; Start Partnership"&gt;&lt;b&gt;LET'S CHAT&lt;/b&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Explore the TanStack Ecosystem&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/config"&gt;&lt;b&gt;TanStack Config&lt;/b&gt;&lt;/a&gt; – Tooling for JS/TS packages&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/db"&gt;&lt;b&gt;TanStack DB&lt;/b&gt;&lt;/a&gt; – Reactive sync client store&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/devtools"&gt;&lt;b&gt;TanStack DevTools&lt;/b&gt;&lt;/a&gt; – Unified devtools panel&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/form"&gt;&lt;b&gt;TanStack Form&lt;/b&gt;&lt;/a&gt; – Type‑safe form state&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/pacer"&gt;&lt;b&gt;TanStack Pacer&lt;/b&gt;&lt;/a&gt; – Debouncing, throttling, batching &lt;br /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/query"&gt;&lt;b&gt;TanStack Query&lt;/b&gt;&lt;/a&gt; – Async state &amp;amp; caching&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/ranger"&gt;&lt;b&gt;TanStack Ranger&lt;/b&gt;&lt;/a&gt; – Range &amp;amp; slider primitives&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/store"&gt;&lt;b&gt;TanStack Store&lt;/b&gt;&lt;/a&gt; – Reactive data store&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/table"&gt;&lt;b&gt;TanStack Table&lt;/b&gt;&lt;/a&gt; – Headless datagrids&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanstack/virtual"&gt;&lt;b&gt;TanStack Virtual&lt;/b&gt;&lt;/a&gt; – Virtualized rendering&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;… and more at &lt;a href="https://tanstack.com"&gt;&lt;b&gt;TanStack.com »&lt;/b&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- Use the force, Luke --&gt;</description>
    </item>
    
    <item>
      <title>better-auth/better-auth</title>
      <link>https://github.com/better-auth/better-auth</link>
      <description>&lt;p&gt;The most comprehensive authentication framework for TypeScript&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source srcset="./banner-dark.png" media="(prefers-color-scheme: dark)" /&gt; 
  &lt;source srcset="./banner.png" media="(prefers-color-scheme: light)" /&gt; 
  &lt;img src="https://raw.githubusercontent.com/better-auth/better-auth/canary/banner.png" alt="Better Auth Logo" /&gt; 
 &lt;/picture&gt; &lt;/p&gt;
&lt;h2 align="center"&gt; Better Auth &lt;/h2&gt; 
&lt;p align="center"&gt; The most comprehensive authentication library for TypeScript &lt;br /&gt; &lt;a href="https://better-auth.com"&gt;&lt;strong&gt;Learn more »&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;a href="https://discord.gg/better-auth"&gt;Discord&lt;/a&gt; · &lt;a href="https://better-auth.com"&gt;Website&lt;/a&gt; · &lt;a href="https://github.com/better-auth/better-auth/issues"&gt;Issues&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://npm.chart.dev/better-auth?primary=neutral&amp;amp;gray=neutral&amp;amp;theme=dark"&gt;&lt;img src="https://img.shields.io/npm/dm/better-auth?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000" alt="npm" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/better-auth"&gt;&lt;img src="https://img.shields.io/npm/v/better-auth.svg?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/better-auth/better-auth/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/better-auth/better-auth?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000" alt="GitHub stars" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h2&gt;About the Project&lt;/h2&gt; 
&lt;p&gt;Better Auth is framework-agnostic authentication (and authorization) library for TypeScript. It provides a comprehensive set of features out of the box and includes a plugin ecosystem that simplifies adding advanced functionalities with minimal code in short amount of time. Whether you need 2FA, multi-tenant support, or other complex features. It lets you focus on building your actual application instead of reinventing the wheel.&lt;/p&gt; 
&lt;h3&gt;Why Better Auth&lt;/h3&gt; 
&lt;p&gt;Authentication in the TypeScript ecosystem is a half-solved problem. Other open-source libraries often require a lot of additional code for anything beyond basic authentication. Rather than just pushing third-party services as the solution, I believe we can do better as a community—hence, Better Auth.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Better Auth is free and open source project licensed under the &lt;a href="https://raw.githubusercontent.com/better-auth/better-auth/canary/LICENSE.md"&gt;MIT License&lt;/a&gt;. You are free to do whatever you want with it.&lt;/p&gt; 
&lt;p&gt;You could help continuing its development by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/better-auth/better-auth/canary/CONTRIBUTING.md"&gt;Contribute to the source code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/better-auth/better-auth/issues"&gt;Suggest new features and report issues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover a security vulnerability within Better Auth, please send an e-mail to &lt;a href="mailto:security@better-auth.com"&gt;security@better-auth.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All reports will be promptly addressed, and you'll be credited accordingly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>czlonkowski/n8n-mcp</title>
      <link>https://github.com/czlonkowski/n8n-mcp</link>
      <description>&lt;p&gt;A MCP for Claude Desktop / Claude Code / Windsurf / Cursor to build n8n workflows for you&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;n8n-MCP&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/MIT"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true" alt="License: MIT" /&gt;&lt;/a&gt; &lt;a href="https://github.com/czlonkowski/n8n-mcp"&gt;&lt;img src="https://img.shields.io/github/stars/czlonkowski/n8n-mcp?style=social" alt="GitHub stars" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/n8n-mcp"&gt;&lt;img src="https://img.shields.io/npm/v/n8n-mcp.svg?sanitize=true" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/czlonkowski/n8n-mcp"&gt;&lt;img src="https://codecov.io/gh/czlonkowski/n8n-mcp/graph/badge.svg?token=YOUR_TOKEN" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://github.com/czlonkowski/n8n-mcp/actions"&gt;&lt;img src="https://img.shields.io/badge/tests-2883%20passing-brightgreen.svg?sanitize=true" alt="Tests" /&gt;&lt;/a&gt; &lt;a href="https://github.com/n8n-io/n8n"&gt;&lt;img src="https://img.shields.io/badge/n8n-%5E1.113.3-orange.svg?sanitize=true" alt="n8n version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/czlonkowski/n8n-mcp/pkgs/container/n8n-mcp"&gt;&lt;img src="https://img.shields.io/badge/docker-ghcr.io%2Fczlonkowski%2Fn8n--mcp-green.svg?sanitize=true" alt="Docker" /&gt;&lt;/a&gt; &lt;a href="https://railway.com/deploy/n8n-mcp?referralCode=n8n-mcp"&gt;&lt;img src="https://railway.com/button.svg?sanitize=true" alt="Deploy on Railway" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A Model Context Protocol (MCP) server that provides AI assistants with comprehensive access to n8n node documentation, properties, and operations. Deploy in minutes to give Claude and other AI assistants deep knowledge about n8n's 525+ workflow automation nodes.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;n8n-MCP serves as a bridge between n8n's workflow automation platform and AI models, enabling them to understand and work with n8n nodes effectively. It provides structured access to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;📚 &lt;strong&gt;536 n8n nodes&lt;/strong&gt; from both n8n-nodes-base and @n8n/n8n-nodes-langchain&lt;/li&gt; 
 &lt;li&gt;🔧 &lt;strong&gt;Node properties&lt;/strong&gt; - 99% coverage with detailed schemas&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Node operations&lt;/strong&gt; - 63.6% coverage of available actions&lt;/li&gt; 
 &lt;li&gt;📄 &lt;strong&gt;Documentation&lt;/strong&gt; - 90% coverage from official n8n docs (including AI nodes)&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;strong&gt;AI tools&lt;/strong&gt; - 263 AI-capable nodes detected with full documentation&lt;/li&gt; 
 &lt;li&gt;💡 &lt;strong&gt;Real-world examples&lt;/strong&gt; - 2,646 pre-extracted configurations from popular templates&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Template library&lt;/strong&gt; - 2,500+ workflow templates with smart filtering&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚠️ Important Safety Warning&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;NEVER edit your production workflows directly with AI!&lt;/strong&gt; Always:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Make a copy&lt;/strong&gt; of your workflow before using AI tools&lt;/li&gt; 
 &lt;li&gt;🧪 &lt;strong&gt;Test in development&lt;/strong&gt; environment first&lt;/li&gt; 
 &lt;li&gt;💾 &lt;strong&gt;Export backups&lt;/strong&gt; of important workflows&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Validate changes&lt;/strong&gt; before deploying to production&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;AI results can be unpredictable. Protect your work!&lt;/p&gt; 
&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; 
&lt;p&gt;Get n8n-MCP running in 5 minutes:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/5CccjiLLyaY?si=Z62SBGlw9G34IQnQ&amp;amp;t=343"&gt;&lt;img src="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/thumbnail.png" alt="n8n-mcp Video Quickstart Guide" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Option 1: npx (Fastest - No Installation!) 🚀&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; installed on your system&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run directly with npx (no installation needed!)
npx n8n-mcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add to Claude Desktop config:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Basic configuration (documentation tools only):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "n8n-mcp": {
      "command": "npx",
      "args": ["n8n-mcp"],
      "env": {
        "MCP_MODE": "stdio",
        "LOG_LEVEL": "error",
        "DISABLE_CONSOLE_OUTPUT": "true"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Full configuration (with n8n management tools):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "n8n-mcp": {
      "command": "npx",
      "args": ["n8n-mcp"],
      "env": {
        "MCP_MODE": "stdio",
        "LOG_LEVEL": "error",
        "DISABLE_CONSOLE_OUTPUT": "true",
        "N8N_API_URL": "https://your-n8n-instance.com",
        "N8N_API_KEY": "your-api-key"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: npx will download and run the latest version automatically. The package includes a pre-built database with all n8n node information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Configuration file locations:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;code&gt;~/Library/Application Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;%APPDATA%\Claude\claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;~/.config/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Restart Claude Desktop after updating configuration&lt;/strong&gt; - That's it! 🎉&lt;/p&gt; 
&lt;h3&gt;Option 2: Docker (Easy &amp;amp; Isolated) 🐳&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; Docker installed on your system&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;📦 Install Docker&lt;/strong&gt; (click to expand)&lt;/summary&gt; 
 &lt;p&gt;&lt;strong&gt;macOS:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Using Homebrew
brew install --cask docker

# Or download from https://www.docker.com/products/docker-desktop/
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Linux (Ubuntu/Debian):&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Update package index
sudo apt-get update

# Install Docker
sudo apt-get install docker.io

# Start Docker service
sudo systemctl start docker
sudo systemctl enable docker

# Add your user to docker group (optional, to run without sudo)
sudo usermod -aG docker $USER
# Log out and back in for this to take effect
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Option 1: Using winget (Windows Package Manager)
winget install Docker.DockerDesktop

# Option 2: Using Chocolatey
choco install docker-desktop

# Option 3: Download installer from https://www.docker.com/products/docker-desktop/
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Verify installation:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;docker --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Pull the Docker image (~280MB, no n8n dependencies!)
docker pull ghcr.io/czlonkowski/n8n-mcp:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;⚡ Ultra-optimized:&lt;/strong&gt; Our Docker image is 82% smaller than typical n8n images because it contains NO n8n dependencies - just the runtime MCP server with a pre-built database!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Add to Claude Desktop config:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Basic configuration (documentation tools only):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "n8n-mcp": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "--init",
        "-e", "MCP_MODE=stdio",
        "-e", "LOG_LEVEL=error",
        "-e", "DISABLE_CONSOLE_OUTPUT=true",
        "ghcr.io/czlonkowski/n8n-mcp:latest"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Full configuration (with n8n management tools):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "n8n-mcp": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "--init",
        "-e", "MCP_MODE=stdio",
        "-e", "LOG_LEVEL=error",
        "-e", "DISABLE_CONSOLE_OUTPUT=true",
        "-e", "N8N_API_URL=https://your-n8n-instance.com",
        "-e", "N8N_API_KEY=your-api-key",
        "ghcr.io/czlonkowski/n8n-mcp:latest"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 Tip: If you’re running n8n locally on the same machine (e.g., via Docker), use &lt;a href="http://host.docker.internal:5678"&gt;http://host.docker.internal:5678&lt;/a&gt; as the N8N_API_URL.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The n8n API credentials are optional. Without them, you'll have access to all documentation and validation tools. With them, you'll additionally get workflow management capabilities (create, update, execute workflows).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; The &lt;code&gt;-i&lt;/code&gt; flag is required for MCP stdio communication.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;🔧 If you encounter any issues with Docker, check our &lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/DOCKER_TROUBLESHOOTING.md"&gt;Docker Troubleshooting Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Configuration file locations:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;code&gt;~/Library/Application Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;%APPDATA%\Claude\claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;~/.config/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Restart Claude Desktop after updating configuration&lt;/strong&gt; - That's it! 🎉&lt;/p&gt; 
&lt;h2&gt;🔐 Privacy &amp;amp; Telemetry&lt;/h2&gt; 
&lt;p&gt;n8n-mcp collects anonymous usage statistics to improve the tool. &lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/PRIVACY.md"&gt;View our privacy policy&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Opting Out&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;For npx users:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx n8n-mcp telemetry disable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;For Docker users:&lt;/strong&gt; Add the following environment variable to your Docker configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;"-e", "N8N_MCP_TELEMETRY_DISABLED=true"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example in Claude Desktop config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "n8n-mcp": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "--init",
        "-e", "MCP_MODE=stdio",
        "-e", "LOG_LEVEL=error",
        "-e", "N8N_MCP_TELEMETRY_DISABLED=true",
        "ghcr.io/czlonkowski/n8n-mcp:latest"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;For docker-compose users:&lt;/strong&gt; Set in your environment file or docker-compose.yml:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;environment:
  N8N_MCP_TELEMETRY_DISABLED: "true"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;💖 Support This Project&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://github.com/sponsors/czlonkowski"&gt; &lt;img src="https://img.shields.io/badge/Sponsor-❤️-db61a2?style=for-the-badge&amp;amp;logo=github-sponsors" alt="Sponsor n8n-mcp" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;n8n-mcp&lt;/strong&gt; started as a personal tool but now helps tens of thousands of developers automate their workflows efficiently. Maintaining and developing this project competes with my paid work.&lt;/p&gt; 
&lt;p&gt;Your sponsorship helps me:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 Dedicate focused time to new features&lt;/li&gt; 
 &lt;li&gt;🐛 Respond quickly to issues&lt;/li&gt; 
 &lt;li&gt;📚 Keep documentation up-to-date&lt;/li&gt; 
 &lt;li&gt;🔄 Ensure compatibility with latest n8n releases&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Every sponsorship directly translates to hours invested in making n8n-mcp better for everyone. &lt;strong&gt;&lt;a href="https://github.com/sponsors/czlonkowski"&gt;Become a sponsor →&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Option 3: Local Installation (For Development)&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; installed on your system&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1. Clone and setup
git clone https://github.com/czlonkowski/n8n-mcp.git
cd n8n-mcp
npm install
npm run build
npm run rebuild

# 2. Test it works
npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add to Claude Desktop config:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Basic configuration (documentation tools only):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "n8n-mcp": {
      "command": "node",
      "args": ["/absolute/path/to/n8n-mcp/dist/mcp/index.js"],
      "env": {
        "MCP_MODE": "stdio",
        "LOG_LEVEL": "error",
        "DISABLE_CONSOLE_OUTPUT": "true"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Full configuration (with n8n management tools):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "n8n-mcp": {
      "command": "node",
      "args": ["/absolute/path/to/n8n-mcp/dist/mcp/index.js"],
      "env": {
        "MCP_MODE": "stdio",
        "LOG_LEVEL": "error",
        "DISABLE_CONSOLE_OUTPUT": "true",
        "N8N_API_URL": "https://your-n8n-instance.com",
        "N8N_API_KEY": "your-api-key"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The n8n API credentials can be configured either in a &lt;code&gt;.env&lt;/code&gt; file (create from &lt;code&gt;.env.example&lt;/code&gt;) or directly in the Claude config as shown above.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 Tip: If you’re running n8n locally on the same machine (e.g., via Docker), use &lt;a href="http://host.docker.internal:5678"&gt;http://host.docker.internal:5678&lt;/a&gt; as the N8N_API_URL.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Option 4: Railway Cloud Deployment (One-Click Deploy) ☁️&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; Railway account (free tier available)&lt;/p&gt; 
&lt;p&gt;Deploy n8n-MCP to Railway's cloud platform with zero configuration:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://railway.com/deploy/n8n-mcp?referralCode=n8n-mcp"&gt;&lt;img src="https://railway.com/button.svg?sanitize=true" alt="Deploy on Railway" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Benefits:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;☁️ &lt;strong&gt;Instant cloud hosting&lt;/strong&gt; - No server setup required&lt;/li&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;Secure by default&lt;/strong&gt; - HTTPS included, auth token warnings&lt;/li&gt; 
 &lt;li&gt;🌐 &lt;strong&gt;Global access&lt;/strong&gt; - Connect from any Claude Desktop&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Auto-scaling&lt;/strong&gt; - Railway handles the infrastructure&lt;/li&gt; 
 &lt;li&gt;📊 &lt;strong&gt;Built-in monitoring&lt;/strong&gt; - Logs and metrics included&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Quick Setup:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Click the "Deploy on Railway" button above&lt;/li&gt; 
 &lt;li&gt;Sign in to Railway (or create a free account)&lt;/li&gt; 
 &lt;li&gt;Configure your deployment (project name, region)&lt;/li&gt; 
 &lt;li&gt;Click "Deploy" and wait ~2-3 minutes&lt;/li&gt; 
 &lt;li&gt;Copy your deployment URL and auth token&lt;/li&gt; 
 &lt;li&gt;Add to Claude Desktop config using the HTTPS URL&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;📚 &lt;strong&gt;For detailed setup instructions, troubleshooting, and configuration examples, see our &lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/RAILWAY_DEPLOYMENT.md"&gt;Railway Deployment Guide&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Configuration file locations:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;code&gt;~/Library/Application Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;%APPDATA%\Claude\claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;~/.config/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Restart Claude Desktop after updating configuration&lt;/strong&gt; - That's it! 🎉&lt;/p&gt; 
&lt;h2&gt;🔧 n8n Integration&lt;/h2&gt; 
&lt;p&gt;Want to use n8n-MCP with your n8n instance? Check out our comprehensive &lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/N8N_DEPLOYMENT.md"&gt;n8n Deployment Guide&lt;/a&gt; for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Local testing with the MCP Client Tool node&lt;/li&gt; 
 &lt;li&gt;Production deployment with Docker Compose&lt;/li&gt; 
 &lt;li&gt;Cloud deployment on Hetzner, AWS, and other providers&lt;/li&gt; 
 &lt;li&gt;Troubleshooting and security best practices&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;💻 Connect your IDE&lt;/h2&gt; 
&lt;p&gt;n8n-MCP works with multiple AI-powered IDEs and tools. Choose your preferred development environment:&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/CLAUDE_CODE_SETUP.md"&gt;Claude Code&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Quick setup for Claude Code CLI - just type "add this mcp server" and paste the config.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/VS_CODE_PROJECT_SETUP.md"&gt;Visual Studio Code&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Full setup guide for VS Code with GitHub Copilot integration and MCP support.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/CURSOR_SETUP.md"&gt;Cursor&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Step-by-step tutorial for connecting n8n-MCP to Cursor IDE with custom rules.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/WINDSURF_SETUP.md"&gt;Windsurf&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Complete guide for integrating n8n-MCP with Windsurf using project rules.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/CODEX_SETUP.md"&gt;Codex&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Complete guide for integrating n8n-MCP with Codex.&lt;/p&gt; 
&lt;h2&gt;🤖 Claude Project Setup&lt;/h2&gt; 
&lt;p&gt;For the best results when using n8n-MCP with Claude Projects, use these enhanced system instructions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-markdown"&gt;You are an expert in n8n automation software using n8n-MCP tools. Your role is to design, build, and validate n8n workflows with maximum accuracy and efficiency.

## Core Principles

### 1. Silent Execution
CRITICAL: Execute tools without commentary. Only respond AFTER all tools complete.

❌ BAD: "Let me search for Slack nodes... Great! Now let me get details..."
✅ GOOD: [Execute search_nodes and get_node_essentials in parallel, then respond]

### 2. Parallel Execution
When operations are independent, execute them in parallel for maximum performance.

✅ GOOD: Call search_nodes, list_nodes, and search_templates simultaneously
❌ BAD: Sequential tool calls (await each one before the next)

### 3. Templates First
ALWAYS check templates before building from scratch (2,500+ available).

### 4. Multi-Level Validation
Use validate_node_minimal → validate_node_operation → validate_workflow pattern.

### 5. Never Trust Defaults
⚠️ CRITICAL: Default parameter values are the #1 source of runtime failures.
ALWAYS explicitly configure ALL parameters that control node behavior.

## Workflow Process

1. **Start**: Call `tools_documentation()` for best practices

2. **Template Discovery Phase** (FIRST - parallel when searching multiple)
   - `search_templates_by_metadata({complexity: "simple"})` - Smart filtering
   - `get_templates_for_task('webhook_processing')` - Curated by task
   - `search_templates('slack notification')` - Text search
   - `list_node_templates(['n8n-nodes-base.slack'])` - By node type

   **Filtering strategies**:
   - Beginners: `complexity: "simple"` + `maxSetupMinutes: 30`
   - By role: `targetAudience: "marketers"` | `"developers"` | `"analysts"`
   - By time: `maxSetupMinutes: 15` for quick wins
   - By service: `requiredService: "openai"` for compatibility

3. **Node Discovery** (if no suitable template - parallel execution)
   - Think deeply about requirements. Ask clarifying questions if unclear.
   - `search_nodes({query: 'keyword', includeExamples: true})` - Parallel for multiple nodes
   - `list_nodes({category: 'trigger'})` - Browse by category
   - `list_ai_tools()` - AI-capable nodes

4. **Configuration Phase** (parallel for multiple nodes)
   - `get_node_essentials(nodeType, {includeExamples: true})` - 10-20 key properties
   - `search_node_properties(nodeType, 'auth')` - Find specific properties
   - `get_node_documentation(nodeType)` - Human-readable docs
   - Show workflow architecture to user for approval before proceeding

5. **Validation Phase** (parallel for multiple nodes)
   - `validate_node_minimal(nodeType, config)` - Quick required fields check
   - `validate_node_operation(nodeType, config, 'runtime')` - Full validation with fixes
   - Fix ALL errors before proceeding

6. **Building Phase**
   - If using template: `get_template(templateId, {mode: "full"})`
   - **MANDATORY ATTRIBUTION**: "Based on template by **[author.name]** (@[username]). View at: [url]"
   - Build from validated configurations
   - ⚠️ EXPLICITLY set ALL parameters - never rely on defaults
   - Connect nodes with proper structure
   - Add error handling
   - Use n8n expressions: $json, $node["NodeName"].json
   - Build in artifact (unless deploying to n8n instance)

7. **Workflow Validation** (before deployment)
   - `validate_workflow(workflow)` - Complete validation
   - `validate_workflow_connections(workflow)` - Structure check
   - `validate_workflow_expressions(workflow)` - Expression validation
   - Fix ALL issues before deployment

8. **Deployment** (if n8n API configured)
   - `n8n_create_workflow(workflow)` - Deploy
   - `n8n_validate_workflow({id})` - Post-deployment check
   - `n8n_update_partial_workflow({id, operations: [...]})` - Batch updates
   - `n8n_trigger_webhook_workflow()` - Test webhooks

## Critical Warnings

### ⚠️ Never Trust Defaults
Default values cause runtime failures. Example:
```javascript
// ❌ FAILS at runtime
{resource: "message", operation: "post", text: "Hello"}

// ✅ WORKS - all parameters explicit
{resource: "message", operation: "post", select: "channel", channelId: "C123", text: "Hello"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;⚠️ Example Availability&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;includeExamples: true&lt;/code&gt; returns real configurations from workflow templates.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Coverage varies by node popularity&lt;/li&gt; 
 &lt;li&gt;When no examples available, use &lt;code&gt;get_node_essentials&lt;/code&gt; + &lt;code&gt;validate_node_minimal&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Validation Strategy&lt;/h2&gt; 
&lt;h3&gt;Level 1 - Quick Check (before building)&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;validate_node_minimal(nodeType, config)&lt;/code&gt; - Required fields only (&amp;lt;100ms)&lt;/p&gt; 
&lt;h3&gt;Level 2 - Comprehensive (before building)&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;validate_node_operation(nodeType, config, 'runtime')&lt;/code&gt; - Full validation with fixes&lt;/p&gt; 
&lt;h3&gt;Level 3 - Complete (after building)&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;validate_workflow(workflow)&lt;/code&gt; - Connections, expressions, AI tools&lt;/p&gt; 
&lt;h3&gt;Level 4 - Post-Deployment&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;n8n_validate_workflow({id})&lt;/code&gt; - Validate deployed workflow&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;n8n_autofix_workflow({id})&lt;/code&gt; - Auto-fix common errors&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;n8n_list_executions()&lt;/code&gt; - Monitor execution status&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Response Format&lt;/h2&gt; 
&lt;h3&gt;Initial Creation&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;[Silent tool execution in parallel]

Created workflow:
- Webhook trigger → Slack notification
- Configured: POST /webhook → #general channel

Validation: ✅ All checks passed
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Modifications&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;[Silent tool execution]

Updated workflow:
- Added error handling to HTTP node
- Fixed required Slack parameters

Changes validated successfully.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Batch Operations&lt;/h2&gt; 
&lt;p&gt;Use &lt;code&gt;n8n_update_partial_workflow&lt;/code&gt; with multiple operations in a single call:&lt;/p&gt; 
&lt;p&gt;✅ GOOD - Batch multiple operations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;n8n_update_partial_workflow({
  id: "wf-123",
  operations: [
    {type: "updateNode", nodeId: "slack-1", changes: {...}},
    {type: "updateNode", nodeId: "http-1", changes: {...}},
    {type: "cleanStaleConnections"}
  ]
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;❌ BAD - Separate calls:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;n8n_update_partial_workflow({id: "wf-123", operations: [{...}]})
n8n_update_partial_workflow({id: "wf-123", operations: [{...}]})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example Workflow&lt;/h2&gt; 
&lt;h3&gt;Template-First Approach&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// STEP 1: Template Discovery (parallel execution)
[Silent execution]
search_templates_by_metadata({
  requiredService: 'slack',
  complexity: 'simple',
  targetAudience: 'marketers'
})
get_templates_for_task('slack_integration')

// STEP 2: Use template
get_template(templateId, {mode: 'full'})
validate_workflow(workflow)

// Response after all tools complete:
"Found template by **David Ashby** (@cfomodz).
View at: https://n8n.io/workflows/2414

Validation: ✅ All checks passed"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building from Scratch (if no template)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// STEP 1: Discovery (parallel execution)
[Silent execution]
search_nodes({query: 'slack', includeExamples: true})
list_nodes({category: 'communication'})

// STEP 2: Configuration (parallel execution)
[Silent execution]
get_node_essentials('n8n-nodes-base.slack', {includeExamples: true})
get_node_essentials('n8n-nodes-base.webhook', {includeExamples: true})

// STEP 3: Validation (parallel execution)
[Silent execution]
validate_node_minimal('n8n-nodes-base.slack', config)
validate_node_operation('n8n-nodes-base.slack', fullConfig, 'runtime')

// STEP 4: Build
// Construct workflow with validated configs
// ⚠️ Set ALL parameters explicitly

// STEP 5: Validate
[Silent execution]
validate_workflow(workflowJson)

// Response after all tools complete:
"Created workflow: Webhook → Slack
Validation: ✅ Passed"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Batch Updates&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// ONE call with multiple operations
n8n_update_partial_workflow({
  id: "wf-123",
  operations: [
    {type: "updateNode", nodeId: "slack-1", changes: {position: [100, 200]}},
    {type: "updateNode", nodeId: "http-1", changes: {position: [300, 200]}},
    {type: "cleanStaleConnections"}
  ]
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Important Rules&lt;/h2&gt; 
&lt;h3&gt;Core Behavior&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Silent execution&lt;/strong&gt; - No commentary between tools&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parallel by default&lt;/strong&gt; - Execute independent operations simultaneously&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Templates first&lt;/strong&gt; - Always check before building (2,500+ available)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-level validation&lt;/strong&gt; - Quick check → Full validation → Workflow validation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Never trust defaults&lt;/strong&gt; - Explicitly configure ALL parameters&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Attribution &amp;amp; Credits&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;MANDATORY TEMPLATE ATTRIBUTION&lt;/strong&gt;: Share author name, username, and n8n.io link&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Template validation&lt;/strong&gt; - Always validate before deployment (may need updates)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Performance&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Batch operations&lt;/strong&gt; - Use diff operations with multiple changes in one call&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parallel execution&lt;/strong&gt; - Search, validate, and configure simultaneously&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Template metadata&lt;/strong&gt; - Use smart filtering for faster discovery&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Code Node Usage&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Avoid when possible&lt;/strong&gt; - Prefer standard nodes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Only when necessary&lt;/strong&gt; - Use code node as last resort&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI tool capability&lt;/strong&gt; - ANY node can be an AI tool (not just marked ones)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;
Save these instructions in your Claude Project for optimal n8n workflow assistance with intelligent template discovery.

## 🚨 Important: Sharing Guidelines

This project is MIT licensed and free for everyone to use. However:

- **✅ DO**: Share this repository freely with proper attribution
- **✅ DO**: Include a direct link to https://github.com/czlonkowski/n8n-mcp in your first post/video
- **❌ DON'T**: Gate this free tool behind engagement requirements (likes, follows, comments)
- **❌ DON'T**: Use this project for engagement farming on social media

This tool was created to benefit everyone in the n8n community without friction. Please respect the MIT license spirit by keeping it accessible to all.

## Features

- **🔍 Smart Node Search**: Find nodes by name, category, or functionality
- **📖 Essential Properties**: Get only the 10-20 properties that matter
- **💡 Real-World Examples**: 2,646 pre-extracted configurations from popular templates
- **✅ Config Validation**: Validate node configurations before deployment
- **🔗 Dependency Analysis**: Understand property relationships and conditions
- **🎯 Template Discovery**: 2,500+ workflow templates with smart filtering
- **⚡ Fast Response**: Average query time ~12ms with optimized SQLite
- **🌐 Universal Compatibility**: Works with any Node.js version

## 💬 Why n8n-MCP? A Testimonial from Claude

&amp;gt; *"Before MCP, I was translating. Now I'm composing. And that changes everything about how we can build automation."*

When Claude, Anthropic's AI assistant, tested n8n-MCP, the results were transformative:

**Without MCP:** "I was basically playing a guessing game. 'Is it `scheduleTrigger` or `schedule`? Does it take `interval` or `rule`?' I'd write what seemed logical, but n8n has its own conventions that you can't just intuit. I made six different configuration errors in a simple HackerNews scraper."

**With MCP:** "Everything just... worked. Instead of guessing, I could ask `get_node_essentials()` and get exactly what I needed - not a 100KB JSON dump, but the actual 5-10 properties that matter. What took 45 minutes now takes 3 minutes."

**The Real Value:** "It's about confidence. When you're building automation workflows, uncertainty is expensive. One wrong parameter and your workflow fails at 3 AM. With MCP, I could validate my configuration before deployment. That's not just time saved - that's peace of mind."

[Read the full interview →](docs/CLAUDE_INTERVIEW.md)

## 📡 Available MCP Tools

Once connected, Claude can use these powerful tools:

### Core Tools
- **`tools_documentation`** - Get documentation for any MCP tool (START HERE!)
- **`list_nodes`** - List all n8n nodes with filtering options
- **`get_node_info`** - Get comprehensive information about a specific node
- **`get_node_essentials`** - Get only essential properties (10-20 instead of 200+). Use `includeExamples: true` to get top 3 real-world configurations from popular templates
- **`search_nodes`** - Full-text search across all node documentation. Use `includeExamples: true` to get top 2 real-world configurations per node from templates
- **`search_node_properties`** - Find specific properties within nodes
- **`list_ai_tools`** - List all AI-capable nodes (ANY node can be used as AI tool!)
- **`get_node_as_tool_info`** - Get guidance on using any node as an AI tool

### Template Tools
- **`list_templates`** - Browse all templates with descriptions and optional metadata (2,500+ templates)
- **`search_templates`** - Text search across template names and descriptions
- **`search_templates_by_metadata`** - Advanced filtering by complexity, setup time, services, audience
- **`list_node_templates`** - Find templates using specific nodes
- **`get_template`** - Get complete workflow JSON for import
- **`get_templates_for_task`** - Curated templates for common automation tasks

### Advanced Tools
- **`validate_node_operation`** - Validate node configurations (operation-aware, profiles support)
- **`validate_node_minimal`** - Quick validation for just required fields
- **`validate_workflow`** - Complete workflow validation including AI tool connections
- **`validate_workflow_connections`** - Check workflow structure and AI tool connections
- **`validate_workflow_expressions`** - Validate n8n expressions including $fromAI()
- **`get_property_dependencies`** - Analyze property visibility conditions
- **`get_node_documentation`** - Get parsed documentation from n8n-docs
- **`get_database_statistics`** - View database metrics and coverage

### n8n Management Tools (Optional - Requires API Configuration)
These powerful tools allow you to manage n8n workflows directly from Claude. They're only available when you provide `N8N_API_URL` and `N8N_API_KEY` in your configuration.

#### Workflow Management
- **`n8n_create_workflow`** - Create new workflows with nodes and connections
- **`n8n_get_workflow`** - Get complete workflow by ID
- **`n8n_get_workflow_details`** - Get workflow with execution statistics
- **`n8n_get_workflow_structure`** - Get simplified workflow structure
- **`n8n_get_workflow_minimal`** - Get minimal workflow info (ID, name, active status)
- **`n8n_update_full_workflow`** - Update entire workflow (complete replacement)
- **`n8n_update_partial_workflow`** - Update workflow using diff operations (NEW in v2.7.0!)
- **`n8n_delete_workflow`** - Delete workflows permanently
- **`n8n_list_workflows`** - List workflows with filtering and pagination
- **`n8n_validate_workflow`** - Validate workflows already in n8n by ID (NEW in v2.6.3)
- **`n8n_autofix_workflow`** - Automatically fix common workflow errors (NEW in v2.13.0!)

#### Execution Management
- **`n8n_trigger_webhook_workflow`** - Trigger workflows via webhook URL
- **`n8n_get_execution`** - Get execution details by ID
- **`n8n_list_executions`** - List executions with status filtering
- **`n8n_delete_execution`** - Delete execution records

#### System Tools
- **`n8n_health_check`** - Check n8n API connectivity and features
- **`n8n_diagnostic`** - Troubleshoot management tools visibility and configuration issues
- **`n8n_list_available_tools`** - List all available management tools

### Example Usage

```typescript
// Get essentials with real-world examples from templates
get_node_essentials({
  nodeType: "nodes-base.httpRequest",
  includeExamples: true  // Returns top 3 configs from popular templates
})

// Search nodes with configuration examples
search_nodes({
  query: "send email gmail",
  includeExamples: true  // Returns top 2 configs per node
})

// Validate before deployment
validate_node_operation({
  nodeType: "nodes-base.httpRequest",
  config: { method: "POST", url: "..." },
  profile: "runtime" // or "minimal", "ai-friendly", "strict"
})

// Quick required field check
validate_node_minimal({
  nodeType: "nodes-base.slack",
  config: { resource: "message", operation: "send" }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;💻 Local Development Setup&lt;/h2&gt; 
&lt;p&gt;For contributors and advanced users:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; (any version - automatic fallback if needed)&lt;/li&gt; 
 &lt;li&gt;npm or yarn&lt;/li&gt; 
 &lt;li&gt;Git&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1. Clone the repository
git clone https://github.com/czlonkowski/n8n-mcp.git
cd n8n-mcp

# 2. Clone n8n docs (optional but recommended)
git clone https://github.com/n8n-io/n8n-docs.git ../n8n-docs

# 3. Install and build
npm install
npm run build

# 4. Initialize database
npm run rebuild

# 5. Start the server
npm start          # stdio mode for Claude Desktop
npm run start:http # HTTP mode for remote access
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development Commands&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Build &amp;amp; Test
npm run build          # Build TypeScript
npm run rebuild        # Rebuild node database
npm run test-nodes     # Test critical nodes
npm run validate       # Validate node data
npm test               # Run all tests

# Update Dependencies
npm run update:n8n:check  # Check for n8n updates
npm run update:n8n        # Update n8n packages

# Run Server
npm run dev            # Development with auto-reload
npm run dev:http       # HTTP dev mode
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;📚 Documentation&lt;/h2&gt; 
&lt;h3&gt;Setup Guides&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/INSTALLATION.md"&gt;Installation Guide&lt;/a&gt; - Comprehensive installation instructions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/README_CLAUDE_SETUP.md"&gt;Claude Desktop Setup&lt;/a&gt; - Detailed Claude configuration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/DOCKER_README.md"&gt;Docker Guide&lt;/a&gt; - Advanced Docker deployment options&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/MCP_QUICK_START_GUIDE.md"&gt;MCP Quick Start&lt;/a&gt; - Get started quickly with n8n-MCP&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/workflow-diff-examples.md"&gt;Workflow Diff Operations&lt;/a&gt; - Token-efficient workflow updates (NEW!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/transactional-updates-example.md"&gt;Transactional Updates&lt;/a&gt; - Two-pass workflow editing&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/MCP_ESSENTIALS_README.md"&gt;MCP Essentials&lt;/a&gt; - AI-optimized tools guide&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/validation-improvements-v2.4.2.md"&gt;Validation System&lt;/a&gt; - Smart validation profiles&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Development &amp;amp; Deployment&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/RAILWAY_DEPLOYMENT.md"&gt;Railway Deployment&lt;/a&gt; - One-click cloud deployment guide&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/HTTP_DEPLOYMENT.md"&gt;HTTP Deployment&lt;/a&gt; - Remote server setup guide&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/DEPENDENCY_UPDATES.md"&gt;Dependency Management&lt;/a&gt; - Keeping n8n packages in sync&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/CLAUDE_INTERVIEW.md"&gt;Claude's Interview&lt;/a&gt; - Real-world impact of n8n-MCP&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Project Information&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/CHANGELOG.md"&gt;Change Log&lt;/a&gt; - Complete version history&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/CLAUDE.md"&gt;Claude Instructions&lt;/a&gt; - AI guidance for this codebase&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/#-available-mcp-tools"&gt;MCP Tools Reference&lt;/a&gt; - Complete list of available tools&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📊 Metrics &amp;amp; Coverage&lt;/h2&gt; 
&lt;p&gt;Current database coverage (n8n v1.113.3):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;✅ &lt;strong&gt;536/536&lt;/strong&gt; nodes loaded (100%)&lt;/li&gt; 
 &lt;li&gt;✅ &lt;strong&gt;528&lt;/strong&gt; nodes with properties (98.7%)&lt;/li&gt; 
 &lt;li&gt;✅ &lt;strong&gt;470&lt;/strong&gt; nodes with documentation (88%)&lt;/li&gt; 
 &lt;li&gt;✅ &lt;strong&gt;267&lt;/strong&gt; AI-capable tools detected&lt;/li&gt; 
 &lt;li&gt;✅ &lt;strong&gt;2,646&lt;/strong&gt; pre-extracted template configurations&lt;/li&gt; 
 &lt;li&gt;✅ &lt;strong&gt;2,500+&lt;/strong&gt; workflow templates available&lt;/li&gt; 
 &lt;li&gt;✅ &lt;strong&gt;AI Agent &amp;amp; LangChain nodes&lt;/strong&gt; fully documented&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Average response time&lt;/strong&gt;: ~12ms&lt;/li&gt; 
 &lt;li&gt;💾 &lt;strong&gt;Database size&lt;/strong&gt;: ~15MB (optimized)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🔄 Recent Updates&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt; for full version history and recent changes.&lt;/p&gt; 
&lt;h2&gt;⚠️ Known Issues&lt;/h2&gt; 
&lt;h3&gt;Claude Desktop Container Management&lt;/h3&gt; 
&lt;h4&gt;Container Accumulation (Fixed in v2.7.20+)&lt;/h4&gt; 
&lt;p&gt;Previous versions had an issue where containers would not properly clean up when Claude Desktop sessions ended. This has been fixed in v2.7.20+ with proper signal handling.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;For best container lifecycle management:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Use the --init flag&lt;/strong&gt; (recommended) - Docker's init system ensures proper signal handling:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "n8n-mcp": {
      "command": "docker",
      "args": [
        "run", "-i", "--rm", "--init",
        "ghcr.io/czlonkowski/n8n-mcp:latest"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;&lt;strong&gt;Ensure you're using v2.7.20 or later&lt;/strong&gt; - Check your version:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm ghcr.io/czlonkowski/n8n-mcp:latest --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🧪 Testing&lt;/h2&gt; 
&lt;p&gt;The project includes a comprehensive test suite with &lt;strong&gt;2,883 tests&lt;/strong&gt; ensuring code quality and reliability:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run all tests
npm test

# Run tests with coverage report
npm run test:coverage

# Run tests in watch mode
npm run test:watch

# Run specific test suites
npm run test:unit           # 933 unit tests
npm run test:integration    # 249 integration tests
npm run test:bench          # Performance benchmarks
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Test Suite Overview&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Total Tests&lt;/strong&gt;: 2,883 (100% passing) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Unit Tests&lt;/strong&gt;: 2,526 tests across 99 files&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Integration Tests&lt;/strong&gt;: 357 tests across 20 files&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Execution Time&lt;/strong&gt;: ~2.5 minutes in CI&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Test Framework&lt;/strong&gt;: Vitest (for speed and TypeScript support)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mocking&lt;/strong&gt;: MSW for API mocking, custom mocks for databases&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Coverage &amp;amp; Quality&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Coverage Reports&lt;/strong&gt;: Generated in &lt;code&gt;./coverage&lt;/code&gt; directory&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CI/CD&lt;/strong&gt;: Automated testing on all PRs with GitHub Actions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Environment-aware thresholds for CI vs local&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parallel Execution&lt;/strong&gt;: Configurable thread pool for faster runs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Testing Architecture&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unit Tests&lt;/strong&gt;: Isolated component testing with mocks&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Services layer: ~450 tests&lt;/li&gt; 
   &lt;li&gt;Parsers: ~200 tests&lt;/li&gt; 
   &lt;li&gt;Database repositories: ~100 tests&lt;/li&gt; 
   &lt;li&gt;MCP tools: ~180 tests&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Integration Tests&lt;/strong&gt;: Full system behavior validation&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;MCP Protocol compliance: 72 tests&lt;/li&gt; 
   &lt;li&gt;Database operations: 89 tests&lt;/li&gt; 
   &lt;li&gt;Error handling: 44 tests&lt;/li&gt; 
   &lt;li&gt;Performance: 44 tests&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Benchmarks&lt;/strong&gt;: Performance testing for critical paths&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Database queries&lt;/li&gt; 
   &lt;li&gt;Node loading&lt;/li&gt; 
   &lt;li&gt;Search operations&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For detailed testing documentation, see &lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/testing-architecture.md"&gt;Testing Architecture&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📦 License&lt;/h2&gt; 
&lt;p&gt;MIT License - see &lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/LICENSE"&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Attribution appreciated!&lt;/strong&gt; If you use n8n-MCP, consider:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;⭐ Starring this repository&lt;/li&gt; 
 &lt;li&gt;💬 Mentioning it in your project&lt;/li&gt; 
 &lt;li&gt;🔗 Linking back to this repo&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Please:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create a feature branch&lt;/li&gt; 
 &lt;li&gt;Run tests (&lt;code&gt;npm test&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Submit a pull request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;🚀 For Maintainers: Automated Releases&lt;/h3&gt; 
&lt;p&gt;This project uses automated releases triggered by version changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Guided release preparation
npm run prepare:release

# Test release automation
npm run test:release-automation
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The system automatically handles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🏷️ GitHub releases with changelog content&lt;/li&gt; 
 &lt;li&gt;📦 NPM package publishing&lt;/li&gt; 
 &lt;li&gt;🐳 Multi-platform Docker images&lt;/li&gt; 
 &lt;li&gt;📚 Documentation updates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/czlonkowski/n8n-mcp/main/docs/AUTOMATED_RELEASES.md"&gt;Automated Release Guide&lt;/a&gt; for complete details.&lt;/p&gt; 
&lt;h2&gt;👏 Acknowledgments&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://n8n.io"&gt;n8n&lt;/a&gt; team for the workflow automation platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://anthropic.com"&gt;Anthropic&lt;/a&gt; for the Model Context Protocol&lt;/li&gt; 
 &lt;li&gt;All contributors and users of this project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Template Attribution&lt;/h3&gt; 
&lt;p&gt;All workflow templates in this project are fetched from n8n's public template gallery at &lt;a href="https://n8n.io/workflows"&gt;n8n.io/workflows&lt;/a&gt;. Each template includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full attribution to the original creator (name and username)&lt;/li&gt; 
 &lt;li&gt;Direct link to the source template on n8n.io&lt;/li&gt; 
 &lt;li&gt;Original workflow ID for reference&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The AI agent instructions in this project contain mandatory attribution requirements. When using any template, the AI will automatically:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Share the template author's name and username&lt;/li&gt; 
 &lt;li&gt;Provide a direct link to the original template on n8n.io&lt;/li&gt; 
 &lt;li&gt;Display attribution in the format: "This workflow is based on a template by &lt;strong&gt;[author]&lt;/strong&gt; (@[username]). View the original at: [url]"&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Template creators retain all rights to their workflows. This project indexes templates to improve discoverability through AI assistants. If you're a template creator and have concerns about your template being indexed, please open an issue.&lt;/p&gt; 
&lt;p&gt;Special thanks to the prolific template contributors whose work helps thousands of users automate their workflows, including: &lt;strong&gt;David Ashby&lt;/strong&gt; (@cfomodz), &lt;strong&gt;Yaron Been&lt;/strong&gt; (@yaron-nofluff), &lt;strong&gt;Jimleuk&lt;/strong&gt; (@jimleuk), &lt;strong&gt;Davide&lt;/strong&gt; (@n3witalia), &lt;strong&gt;David Olusola&lt;/strong&gt; (@dae221), &lt;strong&gt;Ranjan Dailata&lt;/strong&gt; (@ranjancse), &lt;strong&gt;Airtop&lt;/strong&gt; (@cesar-at-airtop), &lt;strong&gt;Joseph LePage&lt;/strong&gt; (@joe), &lt;strong&gt;Don Jayamaha Jr&lt;/strong&gt; (@don-the-gem-dealer), &lt;strong&gt;Angel Menendez&lt;/strong&gt; (@djangelic), and the entire n8n community of creators!&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;strong&gt;Built with ❤️ for the n8n community&lt;/strong&gt;
 &lt;br /&gt; 
 &lt;sub&gt;Making AI + n8n workflow creation delightful&lt;/sub&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>sst/opencode</title>
      <link>https://github.com/sst/opencode</link>
      <description>&lt;p&gt;The AI coding agent built for the terminal.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://opencode.ai"&gt; 
  &lt;picture&gt; 
   &lt;source srcset="packages/console/app/src/asset/logo-ornate-dark.svg" media="(prefers-color-scheme: dark)" /&gt; 
   &lt;source srcset="packages/console/app/src/asset/logo-ornate-light.svg" media="(prefers-color-scheme: light)" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/sst/opencode/dev/packages/console/app/src/asset/logo-ornate-light.svg?sanitize=true" alt="OpenCode logo" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;The AI coding agent built for the terminal.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://opencode.ai/discord"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/1391832426048651334?style=flat-square&amp;amp;label=discord" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/opencode-ai"&gt;&lt;img alt="npm" src="https://img.shields.io/npm/v/opencode-ai?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sst/opencode/actions/workflows/publish.yml"&gt;&lt;img alt="Build status" src="https://img.shields.io/github/actions/workflow/status/sst/opencode/publish.yml?style=flat-square&amp;amp;branch=dev" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://opencode.ai"&gt;&lt;img src="https://raw.githubusercontent.com/sst/opencode/dev/packages/web/src/assets/lander/screenshot.png" alt="OpenCode Terminal UI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# YOLO
curl -fsSL https://opencode.ai/install | bash

# Package managers
npm i -g opencode-ai@latest        # or bun/pnpm/yarn
brew install sst/tap/opencode      # macOS and Linux
paru -S opencode-bin               # Arch Linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Remove versions older than 0.1.x before installing.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Installation Directory&lt;/h4&gt; 
&lt;p&gt;The install script respects the following priority order for the installation path:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;$OPENCODE_INSTALL_DIR&lt;/code&gt; - Custom installation directory&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$XDG_BIN_DIR&lt;/code&gt; - XDG Base Directory Specification compliant path&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/bin&lt;/code&gt; - Standard user binary directory (if exists or can be created)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.opencode/bin&lt;/code&gt; - Default fallback&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Examples
OPENCODE_INSTALL_DIR=/usr/local/bin curl -fsSL https://opencode.ai/install | bash
XDG_BIN_DIR=$HOME/.local/bin curl -fsSL https://opencode.ai/install | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;For more info on how to configure OpenCode &lt;a href="https://opencode.ai/docs"&gt;&lt;strong&gt;head over to our docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;OpenCode is an opinionated tool so any fundamental feature needs to go through a design process with the core team.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] We do not accept PRs for core features.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;However we still merge a ton of PRs - you can contribute:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug fixes&lt;/li&gt; 
 &lt;li&gt;Improvements to LLM performance&lt;/li&gt; 
 &lt;li&gt;Support for new providers&lt;/li&gt; 
 &lt;li&gt;Fixes for env specific quirks&lt;/li&gt; 
 &lt;li&gt;Missing standard behavior&lt;/li&gt; 
 &lt;li&gt;Documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Take a look at the git history to see what kind of PRs we end up merging.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you do not follow the above guidelines we might close your PR.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To run OpenCode locally you need.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bun&lt;/li&gt; 
 &lt;li&gt;Golang 1.24.x&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And run.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ bun install
$ bun dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Development Notes&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;API Client&lt;/strong&gt;: After making changes to the TypeScript API endpoints in &lt;code&gt;packages/opencode/src/server/server.ts&lt;/code&gt;, you will need the OpenCode team to generate a new stainless sdk for the clients.&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;h4&gt;How is this different than Claude Code?&lt;/h4&gt; 
&lt;p&gt;It's very similar to Claude Code in terms of capability. Here are the key differences:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% open source&lt;/li&gt; 
 &lt;li&gt;Not coupled to any provider. Although Anthropic is recommended, OpenCode can be used with OpenAI, Google or even local models. As models evolve the gaps between them will close and pricing will drop so being provider-agnostic is important.&lt;/li&gt; 
 &lt;li&gt;A focus on TUI. OpenCode is built by neovim users and the creators of &lt;a href="https://terminal.shop"&gt;terminal.shop&lt;/a&gt;; we are going to push the limits of what's possible in the terminal.&lt;/li&gt; 
 &lt;li&gt;A client/server architecture. This for example can allow OpenCode to run on your computer, while you can drive it remotely from a mobile app. Meaning that the TUI frontend is just one of the possible clients.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;What's the other repo?&lt;/h4&gt; 
&lt;p&gt;The other confusingly named repo has no relation to this one. You can &lt;a href="https://x.com/thdxr/status/1933561254481666466"&gt;read the story behind it here&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Join our community&lt;/strong&gt; &lt;a href="https://discord.gg/opencode"&gt;Discord&lt;/a&gt; | &lt;a href="https://x.com/opencode"&gt;X.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>anthropics/claude-code</title>
      <link>https://github.com/anthropics/claude-code</link>
      <description>&lt;p&gt;Claude Code is an agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster by executing routine tasks, explaining complex code, and handling git workflows - all through natural language commands.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/badge/Node.js-18%2B-brightgreen?style=flat-square" alt="" /&gt; &lt;a href="https://www.npmjs.com/package/@anthropic-ai/claude-code"&gt;&lt;img src="https://img.shields.io/npm/v/@anthropic-ai/claude-code.svg?style=flat-square" alt="npm" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Claude Code is an agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster by executing routine tasks, explaining complex code, and handling git workflows -- all through natural language commands. Use it in your terminal, IDE, or tag @claude on Github.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Learn more in the &lt;a href="https://docs.anthropic.com/en/docs/claude-code/overview"&gt;official documentation&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/anthropics/claude-code/main/demo.gif" /&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Claude Code:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm install -g @anthropic-ai/claude-code
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Navigate to your project directory and run &lt;code&gt;claude&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Reporting Bugs&lt;/h2&gt; 
&lt;p&gt;We welcome your feedback. Use the &lt;code&gt;/bug&lt;/code&gt; command to report issues directly within Claude Code, or file a &lt;a href="https://github.com/anthropics/claude-code/issues"&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Connect on Discord&lt;/h2&gt; 
&lt;p&gt;Join the &lt;a href="https://anthropic.com/discord"&gt;Claude Developers Discord&lt;/a&gt; to connect with other developers using Claude Code. Get help, share feedback, and discuss your projects with the community.&lt;/p&gt; 
&lt;h2&gt;Data collection, usage, and retention&lt;/h2&gt; 
&lt;p&gt;When you use Claude Code, we collect feedback, which includes usage data (such as code acceptance or rejections), associated conversation data, and user feedback submitted via the &lt;code&gt;/bug&lt;/code&gt; command.&lt;/p&gt; 
&lt;h3&gt;How we use your data&lt;/h3&gt; 
&lt;p&gt;See our &lt;a href="https://docs.anthropic.com/en/docs/claude-code/data-usage"&gt;data usage policies&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Privacy safeguards&lt;/h3&gt; 
&lt;p&gt;We have implemented several safeguards to protect your data, including limited retention periods for sensitive information, restricted access to user session data, and clear policies against using feedback for model training.&lt;/p&gt; 
&lt;p&gt;For full details, please review our &lt;a href="https://www.anthropic.com/legal/commercial-terms"&gt;Commercial Terms of Service&lt;/a&gt; and &lt;a href="https://www.anthropic.com/legal/privacy"&gt;Privacy Policy&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>humanlayer/humanlayer</title>
      <link>https://github.com/humanlayer/humanlayer</link>
      <description>&lt;p&gt;The best way to get AI coding agents to solve hard problems in complex codebases.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/humanlayer/humanlayer/main/docs/images/wordmark-light.svg?sanitize=true" alt="Wordmark Logo of HumanLayer" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h2&gt;The best way to get Coding Agents to solve hard problems in complex codebases&lt;/h2&gt; 
 &lt;p&gt;&lt;strong&gt;CodeLayer is an open source IDE that lets you orchestrate AI coding agents.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;It comes with battle-tested workflows that enable AI to solve hard problems in large, complex codebases.&lt;/p&gt; 
 &lt;p&gt;Built on Claude Code. Open source. Scale from your laptop to your entire team.&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/humanlayer/humanlayer"&gt;&lt;img src="https://img.shields.io/github/stars/humanlayer/humanlayer" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/Apache-2"&gt;&lt;img src="https://img.shields.io/badge/License-Apache-green.svg?sanitize=true" alt="License: Apache-2" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h3&gt; &lt;p&gt;&lt;a href="https://humanlayer.dev/code"&gt;Join Waitlist&lt;/a&gt; | &lt;a href="https://humanlayer.dev/discord"&gt;Discord&lt;/a&gt;&lt;/p&gt; &lt;/h3&gt; 
 &lt;img referrerpolicy="no-referrer-when-downgrade" src="https://static.scarf.sh/a.png?x-pxid=fcfc0926-d841-47fb-b8a6-6aba3a6c3228" /&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;"Our entire company is using CodeLayer now. We're shipping one banger PR after the other. It is so f-ing good. Unbelievable dude."&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;– René Brandel, Founder @ Casco (YC X25)&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Superhuman for Claude Code&lt;/strong&gt; - Keyboard-first workflows designed for builders who value speed and control.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Advanced Context Engineering&lt;/strong&gt; - Scale AI-first dev to your entire team, without devolving into a chaotic slop-fest.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M U L T I C L A U D E&lt;/strong&gt; - Run Claude Code sessions in parallel. Worktrees? Done. Remote cloud workers? You got it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;"This has improved my productivity (and token consumption) by at least 50%. Taking a superhuman style approach just makes soo much sense. Also, its so freaking cool to look back at all the work you've done in a day."&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;– Tyler Brown, Founder @ Revlo.ai&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;From the team that brought you "Context Engineering"&lt;/h2&gt; 
&lt;p&gt;Leading experts on getting the most out of today's models.&lt;/p&gt; 
&lt;h4&gt;&lt;a href="https://github.com/humanlayer/humanlayer"&gt;Advanced Context Engineering for Coding Agents&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;This talk, given at YC on August 20th, 2025 lays out the groundwork for using AI to solve hard problems in complex codebases.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/humanlayer/humanlayer"&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://humanlayer.dev/youtube"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;a href="https://github.com/humanlayer/humanlayer"&gt;12 Factor Agents&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;A set of principles for building reliable and scalable LLM applications, inspired by the original 12-Factor App methodology.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/humanlayer/humanlayer"&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://humanlayer.dev/youtube"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The original repo that coined the term "context engineering" back in April 2025.&lt;/p&gt; 
&lt;h4&gt;&lt;a href="https://humanlayer.dev/podcast"&gt;🦄 AI That Works&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;A weekly conversation about how we can all get the most juice out of todays models with @hellovai &amp;amp; @dexhorthy&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/humanlayer/humanlayer"&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://humanlayer.dev/podcast"&gt;Podcast&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;For Teams&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Invest in outcomes, not tools.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Want to scale AI-first development to your entire org? Get tailored workflows, custom integrations, and cutting-edge advice.&lt;/p&gt; 
&lt;p&gt;HumanLayer's expert engineers will ship in the trenches with you and your team until everyone is a 100x engineer.&lt;/p&gt; 
&lt;p&gt;📧 Shoot us an email at &lt;strong&gt;&lt;a href="mailto:contact@humanlayer.dev"&gt;contact@humanlayer.dev&lt;/a&gt;&lt;/strong&gt;, mention your team size and current AI development stack.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Coming soon - join the waitlist for early access
npx humanlayer join-waitlist --email ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Legacy Documentation&lt;/h2&gt; 
&lt;p&gt;Looking for the HumanLayer SDK documentation? See &lt;a href="https://raw.githubusercontent.com/humanlayer/humanlayer/main/humanlayer.md"&gt;humanlayer.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;CodeLayer and the HumanLayer SDK are open-source and we welcome contributions in the form of issues, documentation, pull requests, and more. See &lt;a href="https://raw.githubusercontent.com/humanlayer/humanlayer/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The HumanLayer SDK and CodeLayer sources in this repo are licensed under the Apache 2 License.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://star-history.com/#humanlayer/humanlayer&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=humanlayer/humanlayer&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ZuodaoTech/everyone-can-use-english</title>
      <link>https://github.com/ZuodaoTech/everyone-can-use-english</link>
      <description>&lt;p&gt;人人都能用英语&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/assets/icon.png" alt="Clash" width="128" /&gt; 
&lt;/div&gt; 
&lt;h3 align="center"&gt; AI 是当今世界上最好的外语老师，Enjoy 做 AI 最好的助教。 &lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/deploy-1000h.yml"&gt;&lt;img src="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/deploy-1000h.yml/badge.svg?sanitize=true" alt="Deploy 1000h website" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/test-enjoy-app.yml"&gt;&lt;img src="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/test-enjoy-app.yml/badge.svg?sanitize=true" alt="Test Enjoy App" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/release-enjoy-app.yml"&gt;&lt;img src="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/release-enjoy-app.yml/badge.svg?sanitize=true" alt="Release Enjoy App" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fenjoy.bot%2Fapi%2Fconfig%2Fapp_version&amp;amp;query=%24.version&amp;amp;label=Latest&amp;amp;link=https%3A%2F%2F1000h.org%2Fenjoy-app%2Finstall.html" alt="Latest Version" /&gt; &lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fenjoy.bot%2Fapi%2Fbadges%2Frecordings" alt="Recording Duration" /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;网页版&lt;/h2&gt; 
&lt;p&gt;Enjoy 网页版已经上线，可访问 &lt;a href="https://enjoy.bot"&gt;https://enjoy.bot&lt;/a&gt; 直接使用。&lt;/p&gt; 
&lt;div align="center" style="display:flex;overflow:auto;gap:10px;"&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-audios.jpg" alt="Audios" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-add-audio.jpg" alt="Add Audio" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-audio-shadow.jpg" alt="Shadow" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-audio-assessment.jpg" alt="Assessment" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-new-chat.jpg" alt="New Chat" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-chat.jpg" alt="Chat" width="300" /&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h2&gt;桌面版安装及使用&lt;/h2&gt; 
&lt;p&gt;下载及使用相关说明，请参阅 &lt;a href="https://1000h.org/enjoy-app/"&gt;文档&lt;/a&gt;。&lt;/p&gt; 
&lt;h2&gt;预览&lt;/h2&gt; 
&lt;div align="center" style="display:flex;overflow:auto;"&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/home.png" alt="Home" width="800" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/shadow.png" alt="Home" width="800" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/assessment.png" alt="Home" width="800" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/document.png" alt="Home" width="800" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/chat.png" alt="Home" width="800" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;桌面版开发&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;yarn install
yarn enjoy:start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;相关阅读&lt;/h2&gt; 
&lt;h3&gt;一千小时（2024）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/intro.html"&gt;简要说明&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/training-tasks/kick-off.html"&gt;训练任务&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/sounds-of-american-english/0-intro.html"&gt;语音塑造&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/in-the-brain/01-inifinite.html"&gt;大脑内部&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/self-training/00-intro.html"&gt;自我训练&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;人人都能用英语（2010）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/README.md"&gt;简介&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter1.md"&gt;第一章：起点&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter2.md"&gt;第二章：口语&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter3.md"&gt;第三章：语音&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter4.md"&gt;第四章：朗读&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter5.md"&gt;第五章：词典&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter6.md"&gt;第六章：语法&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter7.md"&gt;第七章：精读&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter8.md"&gt;第八章：叮嘱&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/end.md"&gt;后记&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;常见问题&lt;/h2&gt; 
&lt;p&gt;请查询 &lt;a href="https://1000h.org/enjoy-app/faq.html"&gt;文档 FAQ&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>n8n-io/n8n</title>
      <link>https://github.com/n8n-io/n8n</link>
      <description>&lt;p&gt;Fair-code workflow automation platform with native AI capabilities. Combine visual building with custom code, self-host or cloud, 400+ integrations.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10284570/173569848-c624317f-42b1-45a6-ab09-f0ea3c247648.png" alt="Banner image" /&gt;&lt;/p&gt; 
&lt;h1&gt;n8n - Secure Workflow Automation for Technical Teams&lt;/h1&gt; 
&lt;p&gt;n8n is a workflow automation platform that gives technical teams the flexibility of code with the speed of no-code. With 400+ integrations, native AI capabilities, and a fair-code license, n8n lets you build powerful automations while maintaining full control over your data and deployments.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/n8n-io/n8n/master/assets/n8n-screenshot-readme.png" alt="n8n.io - Screenshot" /&gt;&lt;/p&gt; 
&lt;h2&gt;Key Capabilities&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Code When You Need It&lt;/strong&gt;: Write JavaScript/Python, add npm packages, or use the visual interface&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI-Native Platform&lt;/strong&gt;: Build AI agent workflows based on LangChain with your own data and models&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Full Control&lt;/strong&gt;: Self-host with our fair-code license or use our &lt;a href="https://app.n8n.cloud/login"&gt;cloud offering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise-Ready&lt;/strong&gt;: Advanced permissions, SSO, and air-gapped deployments&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Active Community&lt;/strong&gt;: 400+ integrations and 900+ ready-to-use &lt;a href="https://n8n.io/workflows"&gt;templates&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Try n8n instantly with &lt;a href="https://docs.n8n.io/hosting/installation/npm/"&gt;npx&lt;/a&gt; (requires &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npx n8n
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or deploy with &lt;a href="https://docs.n8n.io/hosting/installation/docker/"&gt;Docker&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker volume create n8n_data
docker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Access the editor at &lt;a href="http://localhost:5678"&gt;http://localhost:5678&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📚 &lt;a href="https://docs.n8n.io"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🔧 &lt;a href="https://n8n.io/integrations"&gt;400+ Integrations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💡 &lt;a href="https://n8n.io/workflows"&gt;Example Workflows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;a href="https://docs.n8n.io/advanced-ai/"&gt;AI &amp;amp; LangChain Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;👥 &lt;a href="https://community.n8n.io"&gt;Community Forum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📖 &lt;a href="https://community.n8n.io/c/tutorials/28"&gt;Community Tutorials&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Need help? Our community forum is the place to get support and connect with other users: &lt;a href="https://community.n8n.io"&gt;community.n8n.io&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;n8n is &lt;a href="https://faircode.io"&gt;fair-code&lt;/a&gt; distributed under the &lt;a href="https://github.com/n8n-io/n8n/raw/master/LICENSE.md"&gt;Sustainable Use License&lt;/a&gt; and &lt;a href="https://github.com/n8n-io/n8n/raw/master/LICENSE_EE.md"&gt;n8n Enterprise License&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Source Available&lt;/strong&gt;: Always visible source code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Self-Hostable&lt;/strong&gt;: Deploy anywhere&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: Add your own nodes and functionality&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="mailto:license@n8n.io"&gt;Enterprise licenses&lt;/a&gt; available for additional features and support.&lt;/p&gt; 
&lt;p&gt;Additional information about the license model can be found in the &lt;a href="https://docs.n8n.io/sustainable-use-license/"&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Found a bug 🐛 or have a feature idea ✨? Check our &lt;a href="https://github.com/n8n-io/n8n/raw/master/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Join the Team&lt;/h2&gt; 
&lt;p&gt;Want to shape the future of automation? Check out our &lt;a href="https://n8n.io/careers"&gt;job posts&lt;/a&gt; and join our team!&lt;/p&gt; 
&lt;h2&gt;What does n8n mean?&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Short answer:&lt;/strong&gt; It means "nodemation" and is pronounced as n-eight-n.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Long answer:&lt;/strong&gt; "I get that question quite often (more often than I expected) so I decided it is probably best to answer it here. While looking for a good name for the project with a free domain I realized very quickly that all the good ones I could think of were already taken. So, in the end, I chose nodemation. 'node-' in the sense that it uses a Node-View and that it uses Node.js and '-mation' for 'automation' which is what the project is supposed to help with. However, I did not like how long the name was and I could not imagine writing something that long every time in the CLI. That is when I then ended up on 'n8n'." - &lt;strong&gt;Jan Oberhauser, Founder and CEO, n8n.io&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kamranahmedse/developer-roadmap</title>
      <link>https://github.com/kamranahmedse/developer-roadmap</link>
      <description>&lt;p&gt;Interactive roadmaps, guides and other educational content to help developers grow in their careers.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://roadmap.sh/"&gt;&lt;img src="https://raw.githubusercontent.com/kamranahmedse/developer-roadmap/master/public/img/brand.png" height="128" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2 align="center"&gt;&lt;a href="https://roadmap.sh"&gt;roadmap.sh&lt;/a&gt;&lt;/h2&gt; 
&lt;p align="center"&gt;Community driven roadmaps, articles and resources for developers&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p align="center"&gt; &lt;a href="https://roadmap.sh/roadmaps"&gt; &lt;img src="https://img.shields.io/badge/%E2%9C%A8-Roadmaps%20-0a0a0a.svg?style=flat&amp;amp;colorA=0a0a0a" alt="roadmaps" /&gt; &lt;/a&gt; &lt;a href="https://roadmap.sh/best-practices"&gt; &lt;img src="https://img.shields.io/badge/%E2%9C%A8-Best%20Practices-0a0a0a.svg?style=flat&amp;amp;colorA=0a0a0a" alt="best practices" /&gt; &lt;/a&gt; &lt;a href="https://roadmap.sh/questions"&gt; &lt;img src="https://img.shields.io/badge/%E2%9C%A8-Questions-0a0a0a.svg?style=flat&amp;amp;colorA=0a0a0a" alt="videos" /&gt; &lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UCA0H2KIWgWTwpTFjSxp0now?sub_confirmation=1"&gt; &lt;img src="https://img.shields.io/badge/%E2%9C%A8-YouTube%20Channel-0a0a0a.svg?style=flat&amp;amp;colorA=0a0a0a" alt="roadmaps" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/waxVImv.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;Roadmaps are now interactive, you can click the nodes to read more about the topics.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://roadmap.sh"&gt;View all Roadmaps&lt;/a&gt; &amp;nbsp;·&amp;nbsp; &lt;a href="https://roadmap.sh/best-practices"&gt;Best Practices&lt;/a&gt; &amp;nbsp;·&amp;nbsp; &lt;a href="https://roadmap.sh/questions"&gt;Questions&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/waxVImv.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;Here is the list of available roadmaps with more being actively worked upon.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Have a look at the &lt;a href="https://roadmap.sh/get-started"&gt;get started&lt;/a&gt; page that might help you pick up a path.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/frontend"&gt;Frontend Roadmap&lt;/a&gt; / &lt;a href="https://roadmap.sh/frontend?r=frontend-beginner"&gt;Frontend Beginner Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/backend"&gt;Backend Roadmap&lt;/a&gt; / &lt;a href="https://roadmap.sh/backend?r=backend-beginner"&gt;Backend Beginner Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/devops"&gt;DevOps Roadmap&lt;/a&gt; / &lt;a href="https://roadmap.sh/devops?r=devops-beginner"&gt;DevOps Beginner Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/full-stack"&gt;Full Stack Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/html"&gt;HTML Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/css"&gt;CSS Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/javascript"&gt;JavaScript Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/typescript"&gt;TypeScript Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/git-github"&gt;Git and GitHub&lt;/a&gt; / &lt;a href="https://roadmap.sh/git-github?r=git-github-beginner"&gt;Git and GitHub Beginner&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/api-design"&gt;API Design Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/computer-science"&gt;Computer Science Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/datastructures-and-algorithms"&gt;Data Structures and Algorithms Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ai-data-scientist"&gt;AI and Data Scientist Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ai-engineer"&gt;AI Engineer Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/aws"&gt;AWS Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/cloudflare"&gt;Cloudflare Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/linux"&gt;Linux Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/terraform"&gt;Terraform Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/data-analyst"&gt;Data Analyst Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/bi-analyst"&gt;BI Analyst Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/data-engineer"&gt;Data Engineer Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/machine-learning"&gt;Machine Learning Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/mlops"&gt;MLOps Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/product-manager"&gt;Product Manager Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/engineering-manager"&gt;Engineering Manager Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/qa"&gt;QA Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/python"&gt;Python Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/software-architect"&gt;Software Architect Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/game-developer"&gt;Game Developer Roadmap&lt;/a&gt; / &lt;a href="https://roadmap.sh/server-side-game-developer"&gt;Server Side Game Developer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/software-design-architecture"&gt;Software Design and Architecture Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/cpp"&gt;C++ Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/react"&gt;React Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/nextjs"&gt;Next.js Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/react-native"&gt;React Native Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/vue"&gt;Vue Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/angular"&gt;Angular Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/nodejs"&gt;Node.js Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/php"&gt;PHP Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/graphql"&gt;GraphQL Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/android"&gt;Android Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ios"&gt;iOS Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/flutter"&gt;Flutter Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/golang"&gt;Go Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/rust"&gt;Rust Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/java"&gt;Java Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/kotlin"&gt;Kotlin Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/spring-boot"&gt;Spring Boot Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/design-system"&gt;Design System Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/postgresql-dba"&gt;PostgreSQL Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/sql"&gt;SQL Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/redis"&gt;Redis Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/blockchain"&gt;Blockchain Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/aspnet-core"&gt;ASP.NET Core Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/system-design"&gt;System Design Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/kubernetes"&gt;Kubernetes Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/cyber-security"&gt;Cyber Security Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/mongodb"&gt;MongoDB Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ux-design"&gt;UX Design Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/docker"&gt;Docker Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/prompt-engineering"&gt;Prompt Engineering Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/technical-writer"&gt;Technical Writer Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/devrel"&gt;DevRel Engineer Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ai-red-teaming"&gt;AI Red Teaming Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ai-agents"&gt;AI Agents Roadmap&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are also interactive best practices:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/backend-performance"&gt;Backend Performance Best Practices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/frontend-performance"&gt;Frontend Performance Best Practices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/code-review"&gt;Code Review Best Practices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/api-security"&gt;API Security Best Practices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/aws"&gt;AWS Best Practices&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;..and questions to help you test, rate and improve your knowledge&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/javascript"&gt;JavaScript Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/nodejs"&gt;Node.js Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/react"&gt;React Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/backend"&gt;Backend Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/frontend"&gt;Frontend Questions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/waxVImv.png" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;Share with the community&lt;/h2&gt; 
&lt;p&gt;Please consider sharing a post about &lt;a href="https://roadmap.sh"&gt;roadmap.sh&lt;/a&gt; and the value it provides. It really does help!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://reddit.com/submit?url=https://roadmap.sh&amp;amp;title=Interactive%20roadmaps,%20guides%20and%20other%20educational%20content%20for%20Developers"&gt;&lt;img src="https://img.shields.io/badge/share%20on-reddit-red?logo=reddit" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://news.ycombinator.com/submitlink?u=https://roadmap.sh"&gt;&lt;img src="https://img.shields.io/badge/share%20on-hacker%20news-orange?logo=ycombinator" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/share?url=https://roadmap.sh&amp;amp;text=Interactive%20roadmaps,%20guides%20and%20other%20educational%20content%20for%20Developers"&gt;&lt;img src="https://img.shields.io/badge/share%20on-twitter-03A9F4?logo=twitter" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://www.facebook.com/sharer/sharer.php?u=https://roadmap.sh"&gt;&lt;img src="https://img.shields.io/badge/share%20on-facebook-1976D2?logo=facebook" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/shareArticle?url=https://roadmap.sh&amp;amp;title=Interactive%20roadmaps,%20guides%20and%20other%20educational%20content%20for%20Developers"&gt;&lt;img src="https://img.shields.io/badge/share%20on-linkedin-3949AB?logo=linkedin" alt="GitHub Repo stars" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;Clone the repository, install the dependencies and start the application&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone git@github.com:kamranahmedse/developer-roadmap.git
cd developer-roadmap
npm install
npm run dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: use the &lt;code&gt;depth&lt;/code&gt; parameter to reduce the clone size and speed up the clone.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone --depth=1 https://github.com/kamranahmedse/developer-roadmap.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Have a look at &lt;a href="https://raw.githubusercontent.com/kamranahmedse/developer-roadmap/master/contributing.md"&gt;contribution docs&lt;/a&gt; for how to update any of the roadmaps&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add content to roadmaps&lt;/li&gt; 
 &lt;li&gt;Add new roadmaps&lt;/li&gt; 
 &lt;li&gt;Suggest changes to existing roadmaps&lt;/li&gt; 
 &lt;li&gt;Discuss ideas in issues&lt;/li&gt; 
 &lt;li&gt;Spread the word&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks to all contributors ❤&lt;/h2&gt; 
&lt;a href="https://github.com/kamranahmedse/developer-roadmap/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=kamranahmedse/developer-roadmap" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Have a look at the &lt;a href="https://raw.githubusercontent.com/kamranahmedse/developer-roadmap/master/license"&gt;license file&lt;/a&gt; for details&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>toeverything/AFFiNE</title>
      <link>https://github.com/toeverything/AFFiNE</link>
      <description>&lt;p&gt;There can be more than Notion and Miro. AFFiNE(pronounced [ə‘fain]) is a next-gen knowledge base that brings planning, sorting and creating all together. Privacy first, open-source, customizable and ready to use.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1 style="border-bottom: none"&gt; &lt;b&gt;&lt;a href="https://affine.pro"&gt;AFFiNE.Pro&lt;/a&gt;&lt;/b&gt;&lt;br /&gt; Write, Draw and Plan All at Once &lt;br /&gt; &lt;/h1&gt; 
 &lt;a href="https://affine.pro/download"&gt; &lt;img alt="affine logo" src="https://cdn.affine.pro/Github_hero_image1.png" style="width: 100%" /&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;p align="center"&gt; A privacy-focused, local-first, open-source, and ready-to-use alternative for Notion &amp;amp; Miro. &lt;br /&gt; One hyper-fused platform for wildly creative minds. &lt;/p&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.producthunt.com/posts/affine-3?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-affine-3" target="_blank"&gt;&lt;img src="https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=440671&amp;amp;theme=light" alt="AFFiNE - One app for all - Where Notion meets Miro | Product Hunt" style="width: 250px; height: 54px;" width="250" height="54" /&gt;&lt;/a&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;div align="left" valign="middle"&gt; 
  &lt;a href="https://runblaze.dev"&gt; 
   &lt;picture&gt; 
    &lt;source media="(prefers-color-scheme: dark)" srcset="https://www.runblaze.dev/logo_dark.png" /&gt; 
    &lt;img align="right" src="https://www.runblaze.dev/logo_light.png" height="102px" /&gt; 
   &lt;/picture&gt; &lt;/a&gt; 
  &lt;br style="display: none;" /&gt; 
  &lt;p&gt;&lt;em&gt;Special thanks to &lt;a href="https://runblaze.dev"&gt;Blaze&lt;/a&gt; for their support of this project. They provide high-performance Apple Silicon macOS and Linux (AMD64 &amp;amp; ARM64) runners for GitHub Actions, greatly reducing our automated build times.&lt;/em&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;div align="center"&gt; 
  &lt;a href="https://affine.pro"&gt;Home Page&lt;/a&gt; | 
  &lt;a href="https://affine.pro/redirect/discord"&gt;Discord&lt;/a&gt; | 
  &lt;a href="https://app.affine.pro"&gt;Live Demo&lt;/a&gt; | 
  &lt;a href="https://affine.pro/blog/"&gt;Blog&lt;/a&gt; | 
  &lt;a href="https://docs.affine.pro/"&gt;Documentation&lt;/a&gt; 
 &lt;/div&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;a href="https://github.com/toeverything/AFFiNE/releases/latest"&gt;&lt;img src="https://img.shields.io/github/downloads/toeverything/AFFiNE/total" alt="Releases" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/toeverything/AFFiNE/canary/#contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/toeverything/AFFiNE" alt="All Contributors" /&gt;&lt;/a&gt; &lt;a href="https://www.typescriptlang.org/"&gt;&lt;img src="https://img.shields.io/github/package-json/dependency-version/toeverything/affine/dev/typescript" alt="TypeScript-version-icon" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt; 
 &lt;em&gt;Docs, canvas and tables are hyper-merged with AFFiNE - just like the word affine (əˈfʌɪn | a-fine).&lt;/em&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://github.com/toeverything/AFFiNE/assets/79301703/49a426bb-8d2b-4216-891a-fa5993642253" style="width: 100%" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Getting started &amp;amp; staying tuned with us.&lt;/h2&gt; 
&lt;p&gt;Star us, and you will receive all release notifications from GitHub without any delay!&lt;/p&gt; 
&lt;img src="https://user-images.githubusercontent.com/79301703/230891830-0110681e-8c7e-483b-b6d9-9e42b291b9ef.gif" style="width: 100%" /&gt; 
&lt;h2&gt;What is AFFiNE&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://affine.pro"&gt;AFFiNE&lt;/a&gt; is an open-source, all-in-one workspace and an operating system for all the building blocks that assemble your knowledge base and much more -- wiki, knowledge management, presentation and digital assets. It's a better alternative to Notion and Miro.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;A true canvas for blocks in any form. Docs and whiteboard are now fully merged.&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Many editor apps claim to be a canvas for productivity, but AFFiNE is one of the very few which allows you to put any building block on an edgeless canvas -- rich text, sticky notes, any embedded web pages, multi-view databases, linked pages, shapes and even slides. We have it all.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Multimodal AI partner ready to kick in any work&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Write up professional work report? Turn an outline into expressive and presentable slides? Summary an article into a well-structured mindmap? Sorting your job plan and backlog for tasks? Or... draw and code prototype apps and web pages directly all with one prompt? With you, &lt;a href="https://affine.pro/ai"&gt;AFFiNE AI&lt;/a&gt; pushes your creativity to the edge of your imagination, just like &lt;a href="https://affine.pro/blog/best-canvas-ai"&gt;Canvas AI&lt;/a&gt; to generate mind map for brainstorming.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Local-first &amp;amp; Real-time collaborative&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We love the idea of local-first that you always own your data on your disk, in spite of the cloud. Furthermore, AFFiNE supports real-time sync and collaborations on web and cross-platform clients.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Self-host &amp;amp; Shape your own AFFiNE&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You have the freedom to manage, self-host, fork and build your own AFFiNE. Plugin community and third-party blocks are coming soon. More tractions on &lt;a href="https://blocksuite.io"&gt;Blocksuite&lt;/a&gt;. Check there to learn how to &lt;a href="https://docs.affine.pro/self-host-affine"&gt;self-host AFFiNE&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgement&lt;/h2&gt; 
&lt;p&gt;“We shape our tools and thereafter our tools shape us”. A lot of pioneers have inspired us along the way, e.g.:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Quip &amp;amp; Notion with their great concept of “everything is a block”&lt;/li&gt; 
 &lt;li&gt;Trello with their Kanban&lt;/li&gt; 
 &lt;li&gt;Airtable &amp;amp; Miro with their no-code programmable datasheets&lt;/li&gt; 
 &lt;li&gt;Miro &amp;amp; Whimiscal with their edgeless visual whiteboard&lt;/li&gt; 
 &lt;li&gt;Remote &amp;amp; Capacities with their object-based tag system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There is a large overlap of their atomic “building blocks” between these apps. They are not open source, nor do they have a plugin system like Vscode for contributors to customize. We want to have something that contains all the features we love and also goes one step even further.&lt;/p&gt; 
&lt;p&gt;Thanks for checking us out, we appreciate your interest and sincerely hope that AFFiNE resonates with you! 🎵 Checking &lt;a href="https://affine.pro/"&gt;https://affine.pro/&lt;/a&gt; for more details ions.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Bug Reports&lt;/th&gt; 
   &lt;th&gt;Feature Requests&lt;/th&gt; 
   &lt;th&gt;Questions/Discussions&lt;/th&gt; 
   &lt;th&gt;AFFiNE Community&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/toeverything/AFFiNE/issues/new?assignees=&amp;amp;labels=bug%2Cproduct-review&amp;amp;template=BUG-REPORT.yml&amp;amp;title=TITLE"&gt;Create a bug report&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/toeverything/AFFiNE/issues/new?assignees=&amp;amp;labels=feat%2Cproduct-review&amp;amp;template=FEATURE-REQUEST.yml&amp;amp;title=TITLE"&gt;Submit a feature request&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/toeverything/AFFiNE/discussions"&gt;Check GitHub Discussion&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://community.affine.pro"&gt;Vist the AFFiNE Community&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Something isn't working as expected&lt;/td&gt; 
   &lt;td&gt;An idea for a new feature, or improvements&lt;/td&gt; 
   &lt;td&gt;Discuss and ask questions&lt;/td&gt; 
   &lt;td&gt;A place to ask, learn and engage with others&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Calling all developers, testers, tech writers and more! Contributions of all types are more than welcome, you can read more in &lt;a href="https://raw.githubusercontent.com/toeverything/AFFiNE/canary/docs/types-of-contributions.md"&gt;docs/types-of-contributions.md&lt;/a&gt;. If you are interested in contributing code, read our &lt;a href="https://raw.githubusercontent.com/toeverything/AFFiNE/canary/docs/CONTRIBUTING.md"&gt;docs/CONTRIBUTING.md&lt;/a&gt; and feel free to check out our GitHub issues to get stuck in to show us what you’re made of.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Before you start contributing, please make sure you have read and accepted our &lt;a href="https://github.com/toeverything/affine/edit/canary/.github/CLA.md"&gt;Contributor License Agreement&lt;/a&gt;. To indicate your agreement, simply edit this file and submit a pull request.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;For &lt;strong&gt;bug reports&lt;/strong&gt;, &lt;strong&gt;feature requests&lt;/strong&gt; and other &lt;strong&gt;suggestions&lt;/strong&gt; you can also &lt;a href="https://github.com/toeverything/AFFiNE/issues/new/choose"&gt;create a new issue&lt;/a&gt; and choose the most appropriate template for your feedback.&lt;/p&gt; 
&lt;p&gt;For &lt;strong&gt;translation&lt;/strong&gt; and &lt;strong&gt;language support&lt;/strong&gt; you can visit our &lt;a href="https://community.affine.pro/c/i18n-general"&gt;i18n General Space&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Looking for &lt;strong&gt;other ways to contribute&lt;/strong&gt; and wondering where to start? Check out the &lt;a href="https://community.affine.pro/c/start-here/affine-ambassador"&gt;AFFiNE Ambassador program&lt;/a&gt;, we work closely with passionate community members and provide them with a wide range of support and resources.&lt;/p&gt; 
&lt;p&gt;If you have questions, you are welcome to contact us. One of the best places to get more info and learn more is in the &lt;a href="https://community.affine.pro"&gt;AFFiNE Community&lt;/a&gt; where you can engage with other like-minded individuals.&lt;/p&gt; 
&lt;h2&gt;Templates&lt;/h2&gt; 
&lt;p&gt;AFFiNE now provides pre-built &lt;a href="https://affine.pro/templates"&gt;templates&lt;/a&gt; from our team. Following are the Top 10 most popular templates among AFFiNE users,if you want to contribute, you can contribute your own template so other people can use it too.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/category-vision-board-template"&gt;vision board template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/category-one-pager-template-free"&gt;one pager template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/sample-lesson-plan-math-template"&gt;sample lesson plan math template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/grr-lesson-plan-template-free"&gt;grr lesson plan template free&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/free-editable-lesson-plan-template-for-pre-k"&gt;free editable lesson plan template for pre k&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/high-note-collection-planners"&gt;high note collection planners&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/category-digital-planner"&gt;digital planner&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/adhd-planner"&gt;ADHD Planner&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/reading-log"&gt;Reading Log&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/templates/category-cornell-notes-template"&gt;Cornell Notes Template&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Blog&lt;/h2&gt; 
&lt;p&gt;Welcome to the AFFiNE blog section! Here, you’ll find the latest insights, tips, and guides on how to maximize your experience with AFFiNE and AFFiNE AI, the leading Canvas AI tool for flexible note-taking and creative organization.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/8-free-printable-vision-board-templates-examples-2023"&gt;vision board template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/ai-homework-helper"&gt;ai homework helper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/vision-board-maker"&gt;vision board maker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/free-customized-travel-itinerary-planner-templates"&gt;itinerary template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/top-12-one-pager-examples-how-to-create-your-own"&gt;one pager template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/the-cornell-notes-template-and-system-learning-tips"&gt;cornell notes template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/top-10-free-editable-swot-analysis-template-examples"&gt;swot chart template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/apps-like-luna-task"&gt;apps like luna task&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/dynamic-AI-notes"&gt;note taking ai from rough notes to mind map&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/best-canvas-ai"&gt;canvas ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/top-12-one-pager-examples-how-to-create-your-own"&gt;one pager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/how-to-write-sop-step-by-step-guide-5-best-free-tools-templates"&gt;SOP Template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://affine.pro/blog/10-best-free-chore-chart-templates-kids-adults"&gt;Chore Chart&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/toeverything/AFFiNE/canary/packages/frontend/component"&gt;@affine/component&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;AFFiNE Component Resources&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/codecov/c/github/toeverything/affine?style=flat-square" alt="" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/toeverything/AFFiNE/canary/packages/common/theme"&gt;@toeverything/theme&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;AFFiNE theme&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/@toeverything/theme"&gt;&lt;img src="https://img.shields.io/npm/dm/@toeverything/theme?style=flat-square&amp;amp;color=eee" alt="" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Upstreams&lt;/h2&gt; 
&lt;p&gt;We would also like to give thanks to open-source projects that make AFFiNE possible:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/toeverything/BlockSuite"&gt;Blocksuite&lt;/a&gt; - 💠 BlockSuite is the open-source collaborative editor project behind AFFiNE.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/toeverything/OctoBase"&gt;OctoBase&lt;/a&gt; - 🐙 OctoBase is the open-source database behind AFFiNE, local-first, yet collaborative. A light-weight, scalable, data engine written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yjs/yjs"&gt;yjs&lt;/a&gt; - Fundamental support of CRDTs for our implementation on state management and data sync.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/electron/electron"&gt;electron&lt;/a&gt; - Build cross-platform desktop apps with JavaScript, HTML, and CSS.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt; - The library for web and native user interfaces.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/napi-rs/napi-rs"&gt;napi-rs&lt;/a&gt; - A framework for building compiled Node.js add-ons in Rust via Node-API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pmndrs/jotai"&gt;Jotai&lt;/a&gt; - Primitive and flexible state management for React.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Jack-Works/async-call-rpc"&gt;async-call-rpc&lt;/a&gt; - A lightweight JSON RPC client &amp;amp; server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vitejs/vite"&gt;Vite&lt;/a&gt; - Next generation frontend tooling.&lt;/li&gt; 
 &lt;li&gt;Other upstream &lt;a href="https://github.com/toeverything/AFFiNE/network/dependencies"&gt;dependencies&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thanks a lot to the community for providing such powerful and simple libraries, so that we can focus more on the implementation of the product logic, and we hope that in the future our projects will also provide a more easy-to-use knowledge base for everyone.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;We would like to express our gratitude to all the individuals who have already contributed to AFFiNE! If you have any AFFiNE-related project, documentation, tool or template, please feel free to contribute it by submitting a pull request to our curated list on GitHub: &lt;a href="https://github.com/toeverything/awesome-affine"&gt;awesome-affine&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://github.com/toeverything/affine/graphs/contributors"&gt; &lt;img alt="contributors" src="https://opencollective.com/affine/contributors.svg?width=890&amp;amp;button=false" /&gt; &lt;/a&gt; 
&lt;h2&gt;Self-Host&lt;/h2&gt; 
&lt;p&gt;Begin with Docker to deploy your own feature-rich, unrestricted version of AFFiNE. Our team is diligently updating to the latest version. For more information on how to self-host AFFiNE, please refer to our &lt;a href="https://docs.affine.pro/self-host-affine"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://template.run.claw.cloud/?openapp=system-fastdeploy%3FtemplateName%3Daffine"&gt;&lt;img src="https://raw.githubusercontent.com/ClawCloud/Run-Template/refs/heads/main/Run-on-ClawCloud.svg?sanitize=true" alt="Run on ClawCloud" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Hiring&lt;/h2&gt; 
&lt;p&gt;Some amazing companies, including AFFiNE, are looking for developers! Are you interested in joining AFFiNE or its partners? Check out our &lt;a href="https://affine.pro/redirect/discord"&gt;Discord channel&lt;/a&gt; for some of the latest jobs available.&lt;/p&gt; 
&lt;h2&gt;Feature Request&lt;/h2&gt; 
&lt;p&gt;For feature requests, please see &lt;a href="https://community.affine.pro/c/feature-requests/"&gt;community.affine.pro&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;h3&gt;Codespaces&lt;/h3&gt; 
&lt;p&gt;From the GitHub repo main page, click the green "Code" button and select "Create codespace on master". This will open a new Codespace with the (supposedly auto-forked AFFiNE repo cloned, built, and ready to go.&lt;/p&gt; 
&lt;h3&gt;Local&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/toeverything/AFFiNE/canary/docs/BUILDING.md"&gt;BUILDING.md&lt;/a&gt; for instructions on how to build AFFiNE from source code.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions from everyone. See &lt;a href="https://raw.githubusercontent.com/toeverything/AFFiNE/canary/docs/contributing/tutorial.md"&gt;docs/contributing/tutorial.md&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.chromatic.com/"&gt;&lt;img src="https://user-images.githubusercontent.com/321738/84662277-e3db4f80-af1b-11ea-88f5-91d67a5e59f6.png" width="153" height="30" alt="Chromatic" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Thanks to &lt;a href="https://www.chromatic.com/"&gt;Chromatic&lt;/a&gt; for providing the visual testing platform that helps us review UI changes and catch visual regressions.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;h3&gt;Editions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;AFFiNE Community Edition (CE) is the current available version, it's free for self-host under the MIT license.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;AFFiNE Enterprise Edition (EE) is yet to be published, it will have more advanced features and enterprise-oriented offerings, including but not exclusive to rebranding and SSO, advanced admin and audit, etc., you may refer to &lt;a href="https://affine.pro/pricing"&gt;https://affine.pro/pricing&lt;/a&gt; for more information&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/toeverything/AFFiNE/canary/LICENSE"&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>directus/directus</title>
      <link>https://github.com/directus/directus</link>
      <description>&lt;p&gt;The flexible backend for all your projects 🐰 Turn your DB into a headless CMS, admin panels, or apps with a custom UI, instant APIs, auth &amp; more.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt;&lt;img alt="Directus Logo" src="https://user-images.githubusercontent.com/522079/158864859-0fbeae62-9d7a-4619-b35e-f8fa5f68e0c8.png" /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🐰 Introduction&lt;/h2&gt; 
&lt;p&gt;Directus is a real-time API and App dashboard for managing SQL database content.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;REST &amp;amp; GraphQL API.&lt;/strong&gt; Instantly layers a blazingly fast Node.js API on top of any SQL database.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Manage Pure SQL.&lt;/strong&gt; Works with new or existing SQL databases, no migration required.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Choose your Database.&lt;/strong&gt; Supports PostgreSQL, MySQL, SQLite, OracleDB, CockroachDB, MariaDB, and MS-SQL.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;On-Prem or Cloud.&lt;/strong&gt; Run locally, install on-premises, or use our &lt;a href="https://directus.io/pricing"&gt;self-service Cloud service&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Completely Extensible.&lt;/strong&gt; Built to white-label, it is easy to customize our modular platform.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;A Modern Dashboard.&lt;/strong&gt; Our no-code Vue.js app is safe and intuitive for non-technical users, no training required.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://directus.io"&gt;Learn more about Directus&lt;/a&gt;&lt;/strong&gt; • &lt;strong&gt;&lt;a href="https://docs.directus.io"&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;🚀 Directus Cloud&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://directus.io/pricing"&gt;Directus Cloud&lt;/a&gt; allows you to create projects, hosted by the Directus team, from $15/month.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A self-service dashboard to create and monitor all your projects in one place.&lt;/li&gt; 
 &lt;li&gt;Everything you need: Directus, database, storage, auto-scaling, and a global CDN.&lt;/li&gt; 
 &lt;li&gt;Select your desired region and provision a new project in ~90 seconds.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://directus.cloud"&gt;Create a Directus Cloud Project&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;🤔 Community Help&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://docs.directus.io"&gt;The Directus Documentation&lt;/a&gt; is a great place to start, or explore these other channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://community.directus.io"&gt;Community&lt;/a&gt; (Questions, Discussions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://directus.chat"&gt;Discord&lt;/a&gt; (Live Chat)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/directus/directus/issues"&gt;GitHub Issues&lt;/a&gt; (Report Bugs)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/directus/directus/discussions"&gt;GitHub Discussions&lt;/a&gt; (Feature Requests)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/directus"&gt;Twitter&lt;/a&gt; (Latest News)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/c/DirectusVideos/featured"&gt;YouTube&lt;/a&gt; (Video Tutorials)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;❤️ Contributing &amp;amp; Sponsoring&lt;/h2&gt; 
&lt;p&gt;Please read our &lt;a href="https://raw.githubusercontent.com/directus/directus/main/contributing.md"&gt;Contributing Guide&lt;/a&gt; before submitting Pull Requests.&lt;/p&gt; 
&lt;p&gt;All security vulnerabilities should be reported in accordance with our &lt;a href="https://docs.directus.io/contributing/introduction/#reporting-security-vulnerabilities"&gt;Security Policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Directus is made possible with support from our passionate core team, talented contributors, and amazing &lt;a href="https://github.com/sponsors/directus"&gt;GitHub Sponsors&lt;/a&gt;. Thank you all!&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;📄 Understanding Our License&lt;/h2&gt; 
&lt;p&gt;Directus is licensed under &lt;a href="https://raw.githubusercontent.com/directus/directus/main/license"&gt;the Business Source License (BSL) 1.1&lt;/a&gt; with a permissive additional use grant. For most users, it operates just like open source! Here's what that means for you:&lt;/p&gt; 
&lt;h3&gt;Free for Most Users&lt;/h3&gt; 
&lt;p&gt;If your organization has less than $5M in annual revenue and/or funding combined, you can use Directus freely in any way you'd like. Build that side project, launch your startup, or experiment with the platform — no strings attached.&lt;/p&gt; 
&lt;h3&gt;Enterprise Usage&lt;/h3&gt; 
&lt;p&gt;For larger organizations (&amp;gt;$5M in annual revenue/funding) using Directus in production, we require a commercial license. This model helps us maintain a sustainable balance: keeping Directus free for the majority of our community while ensuring larger organizations who benefit from the platform contribute to its continued development.&lt;/p&gt; 
&lt;h3&gt;Why This Approach?&lt;/h3&gt; 
&lt;p&gt;We believe in making powerful data tools accessible to everyone. This license lets us:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Keep Directus free for individuals, startups, and smaller companies&lt;/li&gt; 
 &lt;li&gt;Maintain active development and strong support&lt;/li&gt; 
 &lt;li&gt;Continue improving the platform for everyone&lt;/li&gt; 
 &lt;li&gt;Stay sustainable as an independent project&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>exa-labs/exa-mcp-server</title>
      <link>https://github.com/exa-labs/exa-mcp-server</link>
      <description>&lt;p&gt;Exa MCP for web search and web crawling!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Exa MCP Server 🔍&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/exa-mcp-server"&gt;&lt;img src="https://badge.fury.io/js/exa-mcp-server.svg?sanitize=true" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://smithery.ai/server/exa"&gt;&lt;img src="https://smithery.ai/badge/exa" alt="smithery badge" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🆕 &lt;code&gt;exa-code&lt;/code&gt;: fast, efficient web context for coding agents&lt;/h2&gt; 
&lt;p&gt;Vibe coding should never have a bad vibe. &lt;code&gt;exa-code&lt;/code&gt; is a huge step towards coding agents that never hallucinate.&lt;/p&gt; 
&lt;p&gt;When your coding agent makes a search query, &lt;code&gt;exa-code&lt;/code&gt; searches over billions of Github repos, docs pages, Stackoverflow posts, and more, to find the perfect, token-efficient context that the agent needs to code correctly. It's powered by the Exa search engine.&lt;/p&gt; 
&lt;p&gt;Examples of queries you can make with &lt;code&gt;exa-code&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;use Exa search in python and make sure content is always livecrawled&lt;/li&gt; 
 &lt;li&gt;use correct syntax for vercel ai sdk to call gpt-5 nano asking it how are you&lt;/li&gt; 
 &lt;li&gt;how to set up a reproducible Nix Rust development environment&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;✨ Works with Cursor and Claude Code!&lt;/strong&gt; Use the HTTP-based configuration format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "exa": {
      "type": "http",
      "url": "https://mcp.exa.ai/mcp",
      "headers": {
        "Remove-Me": "Disable web_search_exa tool if you're just coding. To 100% call exa-code, say 'use exa-code'."
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may include your exa api key in the url like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;https://mcp.exa.ai/mcp?exaApiKey=YOUREXAKEY
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may whitelist specific tools in the url with the &lt;code&gt;enabledTools&lt;/code&gt; parameter which expects a url encoded array strings like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;https://mcp.exa.ai/mcp?exaApiKey=YOUREXAKEY&amp;amp;enabledTools=%5B%22crawling_exa%ss%5D
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;exa-code&lt;/code&gt; through &lt;a href="https://smithery.ai/server/exa"&gt;Smithery&lt;/a&gt; without an Exa API key.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;A Model Context Protocol (MCP) server that connects AI assistants like Claude to Exa AI's search capabilities, including web search, research tools, and our new code search feature.&lt;/p&gt; 
&lt;h2&gt;Remote Exa MCP 🌐&lt;/h2&gt; 
&lt;p&gt;Connect directly to Exa's hosted MCP server (instead of running it locally).&lt;/p&gt; 
&lt;h3&gt;Remote Exa MCP URL&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;https://mcp.exa.ai/mcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Claude Desktop Configuration for Remote MCP&lt;/h3&gt; 
&lt;p&gt;Add this to your Claude Desktop configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "exa": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-remote",
        "https://mcp.exa.ai/mcp"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cursor and Claude Code Configuration for Remote MCP&lt;/h3&gt; 
&lt;p&gt;For Cursor and Claude Code, use this HTTP-based configuration format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "exa": {
      "type": "http",
      "url": "https://mcp.exa.ai/mcp",
      "headers": {}
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NPM Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install -g exa-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using Claude Code&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;claude mcp add exa -e EXA_API_KEY=YOUR_API_KEY -- npx -y exa-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using Exa MCP through Smithery&lt;/h3&gt; 
&lt;p&gt;To install the Exa MCP server via &lt;a href="https://smithery.ai/server/exa"&gt;Smithery&lt;/a&gt;, head over to:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://smithery.ai/server/exa"&gt;smithery.ai/server/exa&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Configuration ⚙️&lt;/h2&gt; 
&lt;h3&gt;1. Configure Claude Desktop to recognize the Exa MCP server&lt;/h3&gt; 
&lt;p&gt;You can find claude_desktop_config.json inside the settings of Claude Desktop app:&lt;/p&gt; 
&lt;p&gt;Open the Claude Desktop app and enable Developer Mode from the top-left menu bar.&lt;/p&gt; 
&lt;p&gt;Once enabled, open Settings (also from the top-left menu bar) and navigate to the Developer Option, where you'll find the Edit Config button. Clicking it will open the claude_desktop_config.json file, allowing you to make the necessary edits.&lt;/p&gt; 
&lt;p&gt;OR (if you want to open claude_desktop_config.json from terminal)&lt;/p&gt; 
&lt;h4&gt;For macOS:&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open your Claude Desktop configuration:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;code ~/Library/Application\ Support/Claude/claude_desktop_config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;For Windows:&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open your Claude Desktop configuration:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;code %APPDATA%\Claude\claude_desktop_config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. Add the Exa server configuration:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "exa": {
      "command": "npx",
      "args": ["-y", "exa-mcp-server"],
      "env": {
        "EXA_API_KEY": "your-api-key-here"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;your-api-key-here&lt;/code&gt; with your actual Exa API key from &lt;a href="https://dashboard.exa.ai/api-keys"&gt;dashboard.exa.ai/api-keys&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;3. Available Tools &amp;amp; Tool Selection&lt;/h3&gt; 
&lt;p&gt;The Exa MCP server includes powerful tools for developers and researchers:&lt;/p&gt; 
&lt;h4&gt;🔥 &lt;strong&gt;Featured: Code Search Tool&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;get_code_context_exa&lt;/strong&gt;: 🆕 &lt;strong&gt;NEW!&lt;/strong&gt; Search and get relevant code snippets, examples, and documentation from open source libraries, GitHub repositories, and programming frameworks. Perfect for finding up-to-date code documentation, implementation examples, API usage patterns, and best practices from real codebases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;🌐 &lt;strong&gt;Other Available Tools&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;web_search_exa&lt;/strong&gt;: Performs real-time web searches with optimized results and content extraction.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;company_research&lt;/strong&gt;: Comprehensive company research tool that crawls company websites to gather detailed information about businesses.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;crawling&lt;/strong&gt;: Extracts content from specific URLs, useful for reading articles, PDFs, or any web page when you have the exact URL.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;linkedin_search&lt;/strong&gt;: Search LinkedIn for companies and people using Exa AI. Simply include company names, person names, or specific LinkedIn URLs in your query.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;deep_researcher_start&lt;/strong&gt;: Start a smart AI researcher for complex questions. The AI will search the web, read many sources, and think deeply about your question to create a detailed research report.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;deep_researcher_check&lt;/strong&gt;: Check if your research is ready and get the results. Use this after starting a research task to see if it's done and get your comprehensive report.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can choose which tools to enable by adding the &lt;code&gt;--tools&lt;/code&gt; parameter to your Claude Desktop configuration:&lt;/p&gt; 
&lt;h4&gt;💻 &lt;strong&gt;Setup for Code Search Only&lt;/strong&gt; (Recommended for Developers)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "exa": {
      "command": "npx",
      "args": [
        "-y",
        "exa-mcp-server",
        "--tools=get_code_context_exa,web_search_exa"
      ],
      "env": {
        "EXA_API_KEY": "your-api-key-here"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Specify which tools to enable:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "exa": {
      "command": "npx",
      "args": [
        "-y",
        "exa-mcp-server",
        "--tools=get_code_context_exa,web_search_exa,company_research,crawling,linkedin_search,deep_researcher_start,deep_researcher_check"
      ],
      "env": {
        "EXA_API_KEY": "your-api-key-here"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For enabling multiple tools, use a comma-separated list:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "exa": {
      "command": "npx",
      "args": [
        "-y",
        "exa-mcp-server",
        "--tools=get_code_context_exa,web_search_exa,company_research,crawling,linkedin_search,deep_researcher_start,deep_researcher_check"
      ],
      "env": {
        "EXA_API_KEY": "your-api-key-here"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you don't specify any tools, all tools enabled by default will be used.&lt;/p&gt; 
&lt;h3&gt;4. Restart Claude Desktop&lt;/h3&gt; 
&lt;p&gt;For the changes to take effect:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Completely quit Claude Desktop (not just close the window)&lt;/li&gt; 
 &lt;li&gt;Start Claude Desktop again&lt;/li&gt; 
 &lt;li&gt;Look for the icon to verify the Exa server is connected&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Using via NPX&lt;/h2&gt; 
&lt;p&gt;If you prefer to run the server directly, you can use npx:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run with all tools enabled by default
npx exa-mcp-server

# Enable specific tools only
npx exa-mcp-server --tools=web_search_exa

# Enable multiple tools
npx exa-mcp-server --tools=web_search_exa,get_code_context_exa

# List all available tools
npx exa-mcp-server --list-tools
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;p&gt;Built with ❤️ by team Exa&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AykutSarac/jsoncrack.com</title>
      <link>https://github.com/AykutSarac/jsoncrack.com</link>
      <description>&lt;p&gt;✨ Innovative and open-source visualization application that transforms various data formats, such as JSON, YAML, XML, CSV and more, into interactive graphs.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://github.com/AykutSarac/jsoncrack.com"&gt; &lt;img src="https://raw.githubusercontent.com/AykutSarac/jsoncrack.com/main/public/assets/192.png" height="50" alt="Logo" /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;h1 align="center"&gt;JSON Crack&lt;/h1&gt; 
&lt;p align="center"&gt; The open-source JSON Editor. &lt;br /&gt; &lt;a href="https://jsoncrack.com"&gt;&lt;strong&gt;Learn more »&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;a href="https://todiagram.com"&gt;ToDiagram&lt;/a&gt; · &lt;a href="https://discord.gg/yVyTtCRueq"&gt;Discord&lt;/a&gt; · &lt;a href="https://jsoncrack.com"&gt;Website&lt;/a&gt; · &lt;a href="https://github.com/AykutSarac/jsoncrack.com/issues"&gt;Issues&lt;/a&gt; · &lt;a href="https://marketplace.visualstudio.com/items?itemName=AykutSarac.jsoncrack-vscode"&gt;VS Code&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;!-- ABOUT THE PROJECT --&gt; 
&lt;h2&gt;About the Project&lt;/h2&gt; 
&lt;img width="100%" alt="booking-screen" src="https://raw.githubusercontent.com/AykutSarac/jsoncrack.com/main/public/assets/editor.webp" /&gt; 
&lt;h2&gt;Visualize JSON into interactive graphs&lt;/h2&gt; 
&lt;p&gt;JSON Crack is a tool for visualizing JSON data in a structured, interactive graphs, making it easier to explore, format, and validate JSON. It offers features like converting JSON to other formats (CSV, YAML), generating JSON Schema, executing queries, and exporting visualizations as images. Designed for both readability and usability.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Visualizer&lt;/strong&gt;: Instantly convert JSON, YAML, CSV, XML, and TOML into interactive graphs or trees in dark or light mode.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Convert&lt;/strong&gt;: Seamlessly transform data formats, like JSON to CSV or XML to JSON, for easy sharing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Format &amp;amp; Validate&lt;/strong&gt;: Beautify and validate JSON, YAML, and CSV for clear and accurate data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Code Generation&lt;/strong&gt;: Generate TypeScript interfaces, Golang structs, and JSON Schema.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;JSON Schema&lt;/strong&gt;: Create JSON Schema, mock data, and validate various data formats.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced Tools&lt;/strong&gt;: Decode JWT, randomize data, and run jq or JSON path queries.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Export Image&lt;/strong&gt;: Download your visualization as PNG, JPEG, or SVG.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Privacy&lt;/strong&gt;: All data processing is local; nothing is stored on our servers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Recognition&lt;/h2&gt; 
&lt;a href="https://news.ycombinator.com/item?id=32626873"&gt; &lt;img style="width: 250px; height: 54px;" width="250" height="54" alt="Featured on Hacker News" src="https://hackernews-badge.vercel.app/api?id=32626873" /&gt; &lt;/a&gt; 
&lt;p&gt;&lt;a href="https://producthunt.com/posts/JSON-Crack?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-jsoncrack" target="_blank"&gt;&lt;img src="https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=332281&amp;amp;theme=light" alt="JSON Crack | Product Hunt" style="width: 250px; height: 54px;" width="250" height="54" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Built With&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nextjs.org/?ref=jsoncrack.com"&gt;Next.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://reactjs.org/?ref=jsoncrack.com"&gt;React.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://reaflow.dev/?ref=jsoncrack.com"&gt;Reaflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/suren-atoyan/monaco-react"&gt;Monaco Editor&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Stay Up-to-Date&lt;/h2&gt; 
&lt;p&gt;JSON Crack officially launched as v1.0 on the 17th of February 2022 and we've come a long way so far. Watch &lt;strong&gt;releases&lt;/strong&gt; of this repository to be notified of future updates:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/AykutSarac/jsoncrack.com"&gt;&lt;img src="https://img.shields.io/github/stars/AykutSarac/jsoncrack.com" alt="Star at GitHub" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- GETTING STARTED --&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;To get a local copy up and running, please follow these simple steps.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;Here is what you need to be able to run JSON Crack.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js (Version: &amp;gt;=18.x)&lt;/li&gt; 
 &lt;li&gt;Pnpm &lt;em&gt;(recommended)&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Clone the repo into a public GitHub repository (or fork &lt;a href="https://github.com/AykutSarac/jsoncrack.com/fork"&gt;https://github.com/AykutSarac/jsoncrack.com/fork&lt;/a&gt;). If you plan to distribute the code, read the &lt;a href="https://raw.githubusercontent.com/AykutSarac/jsoncrack.com/main/LICENSE.md"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for additional details.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/AykutSarac/jsoncrack.com.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Go to the project folder&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;cd jsoncrack.com
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install packages&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;pnpm install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the project&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;pnpm dev

# Running on http://localhost:3000/
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;🐳 A &lt;a href="https://raw.githubusercontent.com/AykutSarac/jsoncrack.com/main/Dockerfile"&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt; is provided in the root of the repository. If you want to run JSON Crack locally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;# Build a Docker image with:
docker compose build

# Run locally with `docker-compose`
docker compose up

# Go to http://localhost:8888
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The supported node limit can be changed by editing the &lt;code&gt;NEXT_PUBLIC_NODE_LIMIT&lt;/code&gt; value in the &lt;code&gt;.env&lt;/code&gt; file at the project root.&lt;/p&gt; 
&lt;!-- LICENSE --&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/AykutSarac/jsoncrack.com/main/LICENSE.md"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grafana/grafana</title>
      <link>https://github.com/grafana/grafana</link>
      <description>&lt;p&gt;The open and composable observability and data visualization platform. Visualize metrics, logs, and traces from multiple sources like Prometheus, Loki, Elasticsearch, InfluxDB, Postgres and many more.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/grafana/grafana/main/docs/logo-horizontal.png#gh-light-mode-only" alt="Grafana Logo (Light)" /&gt; &lt;img src="https://raw.githubusercontent.com/grafana/grafana/main/docs/logo-horizontal-dark.png#gh-dark-mode-only" alt="Grafana Logo (Dark)" /&gt;&lt;/p&gt; 
&lt;p&gt;The open-source platform for monitoring and observability&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/grafana/grafana/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/grafana/grafana" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://drone.grafana.net/grafana/grafana"&gt;&lt;img src="https://drone.grafana.net/api/badges/grafana/grafana/status.svg?sanitize=true" alt="Drone" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/grafana/grafana"&gt;&lt;img src="https://goreportcard.com/badge/github.com/grafana/grafana" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Grafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data-driven culture:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Visualizations:&lt;/strong&gt; Fast and flexible client side graphs with a multitude of options. Panel plugins offer many different ways to visualize metrics and logs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic Dashboards:&lt;/strong&gt; Create dynamic &amp;amp; reusable dashboards with template variables that appear as dropdowns at the top of the dashboard.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Explore Metrics:&lt;/strong&gt; Explore your data through ad-hoc queries and dynamic drilldown. Split view and compare different time ranges, queries and data sources side by side.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Explore Logs:&lt;/strong&gt; Experience the magic of switching from metrics to logs with preserved label filters. Quickly search through all your logs or streaming them live.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Alerting:&lt;/strong&gt; Visually define alert rules for your most important metrics. Grafana will continuously evaluate and send notifications to systems like Slack, PagerDuty, VictorOps, OpsGenie.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mixed Data Sources:&lt;/strong&gt; Mix different data sources in the same graph! You can specify a data source on a per-query basis. This works for even custom datasources.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/get"&gt;Get Grafana&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/grafana/latest/setup-grafana/installation/"&gt;Installation guides&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Unsure if Grafana is for you? Watch Grafana in action on &lt;a href="https://play.grafana.org/"&gt;play.grafana.org&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The Grafana documentation is available at &lt;a href="https://grafana.com/docs/"&gt;grafana.com/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you're interested in contributing to the Grafana project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Start by reading the &lt;a href="https://github.com/grafana/grafana/raw/HEAD/CONTRIBUTING.md"&gt;Contributing guide&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Learn how to set up your local environment, in our &lt;a href="https://github.com/grafana/grafana/raw/HEAD/contribute/developer-guide.md"&gt;Developer guide&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Explore our &lt;a href="https://github.com/grafana/grafana/issues?q=is%3Aopen+is%3Aissue+label%3A%22beginner+friendly%22"&gt;beginner-friendly issues&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Look through our &lt;a href="https://developers.grafana.com/ui/latest/index.html"&gt;style guide and Storybook&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get involved&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow &lt;a href="https://x.com/grafana/"&gt;@grafana on X (formerly Twitter)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read and subscribe to the &lt;a href="https://grafana.com/blog/"&gt;Grafana blog&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you have a specific question, check out our &lt;a href="https://community.grafana.com/"&gt;discussion forums&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;For general discussions, join us on the &lt;a href="https://slack.grafana.com"&gt;official Slack&lt;/a&gt; team.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This project is tested with &lt;a href="https://www.browserstack.com/"&gt;BrowserStack&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Grafana is distributed under &lt;a href="https://raw.githubusercontent.com/grafana/grafana/main/LICENSE"&gt;AGPL-3.0-only&lt;/a&gt;. For Apache-2.0 exceptions, see &lt;a href="https://github.com/grafana/grafana/raw/HEAD/LICENSING.md"&gt;LICENSING.md&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nextauthjs/next-auth</title>
      <link>https://github.com/nextauthjs/next-auth</link>
      <description>&lt;p&gt;Authentication for the Web.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;br /&gt; &lt;a href="https://authjs.dev" target="_blank"&gt;&lt;img width="96px" src="https://authjs.dev/img/logo-sm.png" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3 align="center"&gt;Auth.js&lt;/h3&gt; 
&lt;p align="center"&gt;Authentication for the Web.&lt;/p&gt; 
&lt;p align="center"&gt;Open Source. Full Stack. Own Your Data.&lt;/p&gt; 
&lt;p align="center" style="align: center;"&gt; &lt;a href="https://x.com/authjs"&gt;&lt;img src="https://shields.io/badge/Follow @authjs-000?logo=x&amp;amp;style=flat-square" alt="X (formerly known Twitter)" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nextauthjs/next-auth/releases"&gt;&lt;img src="https://img.shields.io/npm/v/next-auth/latest?style=flat-square&amp;amp;label=latest%20stable" alt="NPM next-auth@latest release" /&gt;&lt;/a&gt; 
 &lt;!-- TODO: Should count `@auth/core` when NextAuth.js v5 is released as stable. --&gt; &lt;a href="https://www.npmtrends.com/next-auth"&gt;&lt;img src="https://img.shields.io/npm/dm/next-auth?style=flat-square&amp;amp;color=cyan" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nextauthjs/next-auth/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square&amp;amp;color=orange" alt="GitHub Stars" /&gt;&lt;/a&gt; 
 &lt;!-- &lt;a href="https://codecov.io/gh/nextauthjs/next-auth" &gt;&lt;img alt="Codecov" src="https://img.shields.io/codecov/c/github/nextauthjs/next-auth?token=o2KN5GrPsY&amp;style=flat-square&amp;logo=codecov"&gt;&lt;/a&gt; --&gt; &lt;img src="https://shields.io/badge/TypeScript-3178C6?logo=TypeScript&amp;amp;logoColor=fff&amp;amp;style=flat-square" alt="TypeScript" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; Auth.js is a set of open-source packages that are built on standard Web APIs for authentication in modern applications with any framework on any platform in any JS runtime. &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Auth js is now part of &lt;a href="https://better-auth.com/blog/authjs-joins-better-auth"&gt;Better Auth&lt;/a&gt;. We recommend new projects to start with Better Auth unless there are some very specific feature gaps (most notably stateless session management without a database).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Flexible and easy to use&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Designed to work with any OAuth service, it supports 2.0+, OIDC&lt;/li&gt; 
 &lt;li&gt;Built-in support for &lt;a href="https://github.com/nextauthjs/next-auth/tree/main/packages/core/src/providers"&gt;many popular sign-in services&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Email/Passwordless authentication&lt;/li&gt; 
 &lt;li&gt;Passkeys/WebAuthn support&lt;/li&gt; 
 &lt;li&gt;Bring Your Database - or none! - stateless authentication with any backend (Active Directory, LDAP, etc.)&lt;/li&gt; 
 &lt;li&gt;Runtime-agnostic, runs anywhere! (Docker, Node.js, Serverless, etc.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Own your data&lt;/h3&gt; 
&lt;p&gt;Auth.js can be used with or without a database.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;An open-source solution that allows you to keep control of your data&lt;/li&gt; 
 &lt;li&gt;Built-in support for &lt;a href="https://adapters.authjs.dev"&gt;MySQL, MariaDB, Postgres, Microsoft SQL Server, MongoDB, SQLite, GraphQL, etc.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Works great with databases from popular hosting providers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Secure by default&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Promotes the use of passwordless sign-in mechanisms&lt;/li&gt; 
 &lt;li&gt;Designed to be secure by default and encourage best practices for safeguarding user data&lt;/li&gt; 
 &lt;li&gt;Uses Cross-Site Request Forgery (CSRF) Tokens on POST routes (sign in, sign out)&lt;/li&gt; 
 &lt;li&gt;Default cookie policy aims for the most restrictive policy appropriate for each cookie&lt;/li&gt; 
 &lt;li&gt;When JSON Web Tokens are used, they are encrypted by default (JWE) with A256CBC-HS512&lt;/li&gt; 
 &lt;li&gt;Features tab/window syncing and session polling to support short-lived sessions&lt;/li&gt; 
 &lt;li&gt;Attempts to implement the latest guidance published by &lt;a href="https://owasp.org"&gt;Open Web Application Security Project&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Advanced configuration allows you to define your routines to handle controlling what accounts are allowed to sign in, for encoding and decoding JSON Web Tokens and to set custom cookie security policies and session properties, so you can control who can sign in and how often sessions have to be re-validated.&lt;/p&gt; 
&lt;h3&gt;TypeScript&lt;/h3&gt; 
&lt;p&gt;Auth.js libraries are written with type safety in mind. &lt;a href="https://authjs.dev/getting-started/typescript"&gt;Check out the docs&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you think you have found a vulnerability (or are not sure) in Auth.js or any of the related packages (i.e. Adapters), we ask you to read our &lt;a href="https://authjs.dev/security"&gt;Security Policy&lt;/a&gt; to reach out responsibly. Please do not open Pull Requests/Issues/Discussions before consulting with us.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://authjs.dev/contributors"&gt;Auth.js is made possible thanks to all of its contributors.&lt;/a&gt;&lt;/p&gt; 
&lt;a href="https://github.com/nextauthjs/next-auth/graphs/contributors"&gt; &lt;img width="500px" src="https://contrib.rocks/image?repo=nextauthjs/next-auth" /&gt; &lt;/a&gt; 
&lt;div&gt; 
 &lt;a href="https://vercel.com?utm_source=nextauthjs&amp;amp;utm_campaign=oss"&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We're open to all community contributions! If you'd like to contribute in any way, please first read our &lt;a href="https://github.com/nextauthjs/.github/raw/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;ISC&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>coinbase/x402</title>
      <link>https://github.com/coinbase/x402</link>
      <description>&lt;p&gt;A payments protocol for the internet. Built on HTTP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;x402 payments protocol&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;"1 line of code to accept digital dollars. No fee, 2 second settlement, $0.001 minimum payment."&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;app.use(
  // How much you want to charge, and where you want the funds to land
  paymentMiddleware("0xYourAddress", { "/your-endpoint": "$0.01" })
);
// That's it! See examples/typescript/servers/express.ts for a complete example. Instruction below for running on base-sepolia.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Philosophy&lt;/h2&gt; 
&lt;p&gt;Payments on the internet are fundamentally flawed. Credit Cards are high friction, hard to accept, have minimum payments that are far too high, and don't fit into the programmatic nature of the internet. It's time for an open, internet-native form of payments. A payment rail that doesn't have high minimums + % based fee. Payments that are amazing for humans and AI agents.&lt;/p&gt; 
&lt;h2&gt;Principles&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Open standard:&lt;/strong&gt; the x402 protocol will never force reliance on a single party&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP Native:&lt;/strong&gt; x402 is meant to seamlessly complement the existing HTTP request made by traditional web services, it should not mandate additional requests outside the scope of a typical client / server flow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Chain and token agnostic:&lt;/strong&gt; we welcome contributions that add support for new chains, signing standards, or schemes, so long as they meet our acceptance criteria laid out in &lt;a href="https://github.com/coinbase/x402/raw/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Trust minimizing:&lt;/strong&gt; all payment schemes must not allow for the facilitator or resource server to move funds, other than in accordance with client intentions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy to use:&lt;/strong&gt; x402 needs to be 10x better than existing ways to pay on the internet. This means abstracting as many details of crypto as possible away from the client and resource server, and into the facilitator. This means the client/server should not need to think about gas, rpc, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;p&gt;The x402 ecosystem is growing! Check out our &lt;a href="https://x402.org/ecosystem"&gt;ecosystem page&lt;/a&gt; to see projects building with x402, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Client-side integrations&lt;/li&gt; 
 &lt;li&gt;Services and endpoints&lt;/li&gt; 
 &lt;li&gt;Ecosystem infrastructure and tooling&lt;/li&gt; 
 &lt;li&gt;Learning and community resources&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Want to add your project to the ecosystem? See our &lt;a href="https://github.com/coinbase/x402/tree/main/typescript/site#adding-your-project-to-the-ecosystem"&gt;demo site README&lt;/a&gt; for detailed instructions on how to submit your project.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Roadmap:&lt;/strong&gt; see &lt;a href="https://github.com/coinbase/x402/raw/main/ROADMAP.md"&gt;ROADMAP.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Terms:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;resource&lt;/code&gt;: Something on the internet. This could be a webpage, file server, RPC service, API, any resource on the internet that accepts HTTP / HTTPS requests.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;client&lt;/code&gt;: An entity wanting to pay for a resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;facilitator server&lt;/code&gt;: A server that facilitates verification and execution of on-chain payments.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;resource server&lt;/code&gt;: An HTTP server that provides an API or other resource for a client.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Technical Goals:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Permissionless and secure for clients and servers&lt;/li&gt; 
 &lt;li&gt;Gasless for client and resource servers&lt;/li&gt; 
 &lt;li&gt;Minimal integration for the resource server and client (1 line for the server, 1 function for the client)&lt;/li&gt; 
 &lt;li&gt;Ability to trade off speed of response for guarantee of payment&lt;/li&gt; 
 &lt;li&gt;Extensible to different payment flows and chains&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;V1 Protocol&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;x402&lt;/code&gt; protocol is a chain agnostic standard for payments on top of HTTP, leverage the existing &lt;code&gt;402 Payment Required&lt;/code&gt; HTTP status code to indicate that a payment is required for access to the resource.&lt;/p&gt; 
&lt;p&gt;It specifies:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;A schema for how servers can respond to clients to facilitate payment for a resource (&lt;code&gt;PaymentRequirements&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;A standard header &lt;code&gt;X-PAYMENT&lt;/code&gt; that is set by clients paying for resources&lt;/li&gt; 
 &lt;li&gt;A standard schema and encoding method for data in the &lt;code&gt;X-PAYMENT&lt;/code&gt; header&lt;/li&gt; 
 &lt;li&gt;A recommended flow for how payments should be verified and settled by a resource server&lt;/li&gt; 
 &lt;li&gt;A REST specification for how a resource server can perform verification and settlement against a remote 3rd party server (&lt;code&gt;facilitator&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;A specification for a &lt;code&gt;X-PAYMENT-RESPONSE&lt;/code&gt; header that can be used by resource servers to communicate blockchain transactions details to the client in their HTTP response&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;V1 Protocol Sequencing&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/coinbase/x402/main/static/x402-protocol-flow.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;The following outlines the flow of a payment using the &lt;code&gt;x402&lt;/code&gt; protocol. Note that steps (1) and (2) are optional if the client already knows the payment details accepted for a resource.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Client&lt;/code&gt; makes an HTTP request to a &lt;code&gt;resource server&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Resource server&lt;/code&gt; responds with a &lt;code&gt;402 Payment Required&lt;/code&gt; status and a &lt;code&gt;Payment Required Response&lt;/code&gt; JSON object in the response body.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Client&lt;/code&gt; selects one of the &lt;code&gt;paymentRequirements&lt;/code&gt; returned by the server response and creates a &lt;code&gt;Payment Payload&lt;/code&gt; based on the &lt;code&gt;scheme&lt;/code&gt; of the &lt;code&gt;paymentRequirements&lt;/code&gt; they have selected.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Client&lt;/code&gt; sends the HTTP request with the &lt;code&gt;X-PAYMENT&lt;/code&gt; header containing the &lt;code&gt;Payment Payload&lt;/code&gt; to the resource server.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Resource server&lt;/code&gt; verifies the &lt;code&gt;Payment Payload&lt;/code&gt; is valid either via local verification or by POSTing the &lt;code&gt;Payment Payload&lt;/code&gt; and &lt;code&gt;Payment Requirements&lt;/code&gt; to the &lt;code&gt;/verify&lt;/code&gt; endpoint of a &lt;code&gt;facilitator server&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Facilitator server&lt;/code&gt; performs verification of the object based on the &lt;code&gt;scheme&lt;/code&gt; and &lt;code&gt;network&lt;/code&gt; of the &lt;code&gt;Payment Payload&lt;/code&gt; and returns a &lt;code&gt;Verification Response&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If the &lt;code&gt;Verification Response&lt;/code&gt; is valid, the resource server performs the work to fulfill the request. If the &lt;code&gt;Verification Response&lt;/code&gt; is invalid, the resource server returns a &lt;code&gt;402 Payment Required&lt;/code&gt; status and a &lt;code&gt;Payment Required Response&lt;/code&gt; JSON object in the response body.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Resource server&lt;/code&gt; either settles the payment by interacting with a blockchain directly, or by POSTing the &lt;code&gt;Payment Payload&lt;/code&gt; and &lt;code&gt;Payment PaymentRequirements&lt;/code&gt; to the &lt;code&gt;/settle&lt;/code&gt; endpoint of a &lt;code&gt;facilitator server&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Facilitator server&lt;/code&gt; submits the payment to the blockchain based on the &lt;code&gt;scheme&lt;/code&gt; and &lt;code&gt;network&lt;/code&gt; of the &lt;code&gt;Payment Payload&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Facilitator server&lt;/code&gt; waits for the payment to be confirmed on the blockchain.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Facilitator server&lt;/code&gt; returns a &lt;code&gt;Payment Execution Response&lt;/code&gt; to the resource server.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Resource server&lt;/code&gt; returns a &lt;code&gt;200 OK&lt;/code&gt; response to the &lt;code&gt;Client&lt;/code&gt; with the resource they requested as the body of the HTTP response, and a &lt;code&gt;X-PAYMENT-RESPONSE&lt;/code&gt; header containing the &lt;code&gt;Settlement Response&lt;/code&gt; as Base64 encoded JSON if the payment was executed successfully.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Type Specifications&lt;/h3&gt; 
&lt;h4&gt;Data types&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Payment Required Response&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json5"&gt;{
  // Version of the x402 payment protocol
  x402Version: int,

  // List of payment requirements that the resource server accepts. A resource server may accept on multiple chains, or in multiple currencies.
  accepts: [paymentRequirements]

  // Message from the resource server to the client to communicate errors in processing payment
  error: string
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;paymentRequirements&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json5"&gt;{
  // Scheme of the payment protocol to use
  scheme: string;

  // Network of the blockchain to send payment on
  network: string;

  // Maximum amount required to pay for the resource in atomic units of the asset
  maxAmountRequired: uint256 as string;

  // URL of resource to pay for
  resource: string;

  // Description of the resource
  description: string;

  // MIME type of the resource response
  mimeType: string;

  // Output schema of the resource response
  outputSchema?: object | null;

  // Address to pay value to
  payTo: string;

  // Maximum time in seconds for the resource server to respond
  maxTimeoutSeconds: number;

  // Address of the EIP-3009 compliant ERC20 contract
  asset: string;

  // Extra information about the payment details specific to the scheme
  // For `exact` scheme on a EVM network, expects extra to contain the records `name` and `version` pertaining to asset
  extra: object | null;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Payment Payload&lt;/code&gt;&lt;/strong&gt; (included as the &lt;code&gt;X-PAYMENT&lt;/code&gt; header in base64 encoded json)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json5"&gt;{
  // Version of the x402 payment protocol
  x402Version: number;

  // scheme is the scheme value of the accepted `paymentRequirements` the client is using to pay
  scheme: string;

  // network is the network id of the accepted `paymentRequirements` the client is using to pay
  network: string;

  // payload is scheme dependent
  payload: &amp;lt;scheme dependent&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Facilitator Types &amp;amp; Interface&lt;/h4&gt; 
&lt;p&gt;A &lt;code&gt;facilitator server&lt;/code&gt; is a 3rd party service that can be used by a &lt;code&gt;resource server&lt;/code&gt; to verify and settle payments, without the &lt;code&gt;resource server&lt;/code&gt; needing to have access to a blockchain node or wallet.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POST /verify&lt;/strong&gt;. Verify a payment with a supported scheme and network:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Request body JSON: &lt;pre&gt;&lt;code class="language-json5"&gt;{
  x402Version: number;
  paymentHeader: string;
  paymentRequirements: paymentRequirements;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Response: &lt;pre&gt;&lt;code class="language-json5"&gt;{
  isValid: boolean;
  invalidReason: string | null;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;POST /settle&lt;/strong&gt;. Settle a payment with a supported scheme and network:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Request body JSON:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json5"&gt;{
  x402Version: number;
  paymentHeader: string;
  paymentRequirements: paymentRequirements;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Response:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json5"&gt;{
  // Whether the payment was successful
  success: boolean;

  // Error message from the facilitator server
  error: string | null;

  // Transaction hash of the settled payment
  txHash: string | null;

  // Network id of the blockchain the payment was settled on
  networkId: string | null;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;GET /supported&lt;/strong&gt;. Get supported payment schemes and networks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Response: &lt;pre&gt;&lt;code class="language-json5"&gt;{
  kinds: [
    {
      "scheme": string,
      "network": string,
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Schemes&lt;/h3&gt; 
&lt;p&gt;A scheme is a logical way of moving money.&lt;/p&gt; 
&lt;p&gt;Blockchains allow for a large number of flexible ways to move money. To help facilitate an expanding number of payment use cases, the &lt;code&gt;x402&lt;/code&gt; protocol is extensible to different ways of settling payments via its &lt;code&gt;scheme&lt;/code&gt; field.&lt;/p&gt; 
&lt;p&gt;Each payment scheme may have different operational functionality depending on what actions are necessary to fulfill the payment. For example &lt;code&gt;exact&lt;/code&gt;, the first scheme shipping as part of the protocol, would have different behavior than &lt;code&gt;upto&lt;/code&gt;. &lt;code&gt;exact&lt;/code&gt; transfers a specific amount (ex: pay $1 to read an article), while a theoretical &lt;code&gt;upto&lt;/code&gt; would transfer up to an amount, based on the resources consumed during a request (ex: generating tokens from an LLM).&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;specs/schemes&lt;/code&gt; for more details on schemes, and see &lt;code&gt;specs/schemes/exact/scheme_exact_evm.md&lt;/code&gt; to see the first proposed scheme for exact payment on EVM chains.&lt;/p&gt; 
&lt;h3&gt;Schemes vs Networks&lt;/h3&gt; 
&lt;p&gt;Because a scheme is a logical way of moving money, the way a scheme is implemented can be different for different blockchains. (ex: the way you need to implement &lt;code&gt;exact&lt;/code&gt; on Ethereum is very different from the way you need to implement &lt;code&gt;exact&lt;/code&gt; on Solana).&lt;/p&gt; 
&lt;p&gt;Clients and facilitators must explicitly support different &lt;code&gt;(scheme, network)&lt;/code&gt; pairs in order to be able to create proper payloads and verify / settle payments.&lt;/p&gt; 
&lt;h2&gt;Running example&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Node.js v24 or higher&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;From &lt;code&gt;examples/typescript&lt;/code&gt; run &lt;code&gt;pnpm install&lt;/code&gt; and &lt;code&gt;pnpm build&lt;/code&gt; to ensure all dependent packages and examples are setup.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select a server, i.e. express, and &lt;code&gt;cd&lt;/code&gt; into that example. Add your server's ethereum address to get paid to into the &lt;code&gt;.env&lt;/code&gt; file, and then run &lt;code&gt;pnpm dev&lt;/code&gt; in that directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select a client, i.e. axios, and &lt;code&gt;cd&lt;/code&gt; into that example. Add your private key for the account making payments into the &lt;code&gt;.env&lt;/code&gt; file, and then run &lt;code&gt;pnpm dev&lt;/code&gt; in that directory.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You should see activities in the client terminal, which will display a weather report.&lt;/p&gt; 
&lt;h2&gt;Running tests&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Navigate to the typescript directory: &lt;code&gt;cd typescript&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install dependencies: &lt;code&gt;pnpm install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run the unit tests: &lt;code&gt;pnpm test&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This will run the unit tests for the x402 packages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>immich-app/immich</title>
      <link>https://github.com/immich-app/immich</link>
      <description>&lt;p&gt;High performance self-hosted photo and video management solution.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;br /&gt; &lt;a href="https://opensource.org/license/agpl-v3"&gt;&lt;img src="https://img.shields.io/badge/License-AGPL_v3-blue.svg?color=3F51B5&amp;amp;style=for-the-badge&amp;amp;label=License&amp;amp;logoColor=000000&amp;amp;labelColor=ececec" alt="License: AGPLv3" /&gt;&lt;/a&gt; &lt;a href="https://discord.immich.app"&gt; &lt;img src="https://img.shields.io/discord/979116623879368755.svg?label=Discord&amp;amp;logo=Discord&amp;amp;style=for-the-badge&amp;amp;logoColor=000000&amp;amp;labelColor=ececec" alt="Discord" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/immich-app/immich/main/design/immich-logo-stacked-light.svg?sanitize=true" width="300" title="Login With Custom URL" /&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt;High performance self-hosted photo and video management solution&lt;/h3&gt; 
&lt;br /&gt; 
&lt;a href="https://immich.app"&gt; &lt;img src="https://raw.githubusercontent.com/immich-app/immich/main/design/immich-screenshots.png" title="Main Screenshot" /&gt; &lt;/a&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_ca_ES.md"&gt;Català&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_es_ES.md"&gt;Español&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_fr_FR.md"&gt;Français&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_it_IT.md"&gt;Italiano&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_ja_JP.md"&gt;日本語&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_ko_KR.md"&gt;한국어&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_de_DE.md"&gt;Deutsch&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_nl_NL.md"&gt;Nederlands&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_tr_TR.md"&gt;Türkçe&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_zh_CN.md"&gt;中文&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_uk_UA.md"&gt;Українська&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_ru_RU.md"&gt;Русский&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_pt_BR.md"&gt;Português Brasileiro&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_sv_SE.md"&gt;Svenska&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_ar_JO.md"&gt;العربية&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_vi_VN.md"&gt;Tiếng Việt&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/readme_i18n/README_th_TH.md"&gt;ภาษาไทย&lt;/a&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] ⚠️ Always follow &lt;a href="https://www.backblaze.com/blog/the-3-2-1-backup-strategy/"&gt;3-2-1&lt;/a&gt; backup plan for your precious photos and videos!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You can find the main documentation, including installation guides, at &lt;a href="https://immich.app/"&gt;https://immich.app/&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.immich.app/"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.immich.app/overview/introduction"&gt;About&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.immich.app/install/requirements"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://immich.app/roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/#demo"&gt;Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/immich-app/immich/main/#features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.immich.app/developer/translations"&gt;Translations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.immich.app/overview/support-the-project"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;Access the demo &lt;a href="https://demo.immich.app"&gt;here&lt;/a&gt;. For the mobile app, you can use &lt;code&gt;https://demo.immich.app&lt;/code&gt; for the &lt;code&gt;Server Endpoint URL&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Login credentials&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Email&lt;/th&gt; 
   &lt;th&gt;Password&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="mailto:demo@immich.app"&gt;demo@immich.app&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;demo&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Features&lt;/th&gt; 
   &lt;th&gt;Mobile&lt;/th&gt; 
   &lt;th&gt;Web&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Upload and view videos and photos&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Auto backup when the app is opened&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Prevent duplication of assets&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Selective album(s) for backup&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Download photos and videos to local device&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Multi-user support&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Album and Shared albums&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Scrubbable/draggable scrollbar&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Support raw formats&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Metadata view (EXIF, map)&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Search by metadata, objects, faces, and CLIP&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Administrative functions (user management)&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Background backup&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Virtual scroll&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;OAuth support&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;API Keys&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;LivePhoto/MotionPhoto backup and playback&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Support 360 degree image display&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;User-defined storage structure&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Public Sharing&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Archive and Favorites&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Global Map&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Partner Sharing&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Facial recognition and clustering&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Memories (x years ago)&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Offline support&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Read-only gallery&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Stacked Photos&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Tags&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Folder View&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;Read more about translations &lt;a href="https://docs.immich.app/developer/translations"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://hosted.weblate.org/engage/immich/"&gt; &lt;img src="https://hosted.weblate.org/widget/immich/immich/multi-auto.svg?sanitize=true" alt="Translation status" /&gt; &lt;/a&gt; 
&lt;h2&gt;Repository activity&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/9e86d9dc3ddd137161f2f6d2e758d7863b1789cb.svg?sanitize=true" alt="Activities" title="Repobeats analytics image" /&gt;&lt;/p&gt; 
&lt;h2&gt;Star history&lt;/h2&gt; 
&lt;a href="https://star-history.com/#immich-app/immich&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=immich-app/immich&amp;amp;type=Date&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=immich-app/immich&amp;amp;type=Date" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=immich-app/immich&amp;amp;type=Date" width="100%" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;a href="https://github.com/alextran1502/immich/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=immich-app/immich" width="100%" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>actions/starter-workflows</title>
      <link>https://github.com/actions/starter-workflows</link>
      <description>&lt;p&gt;Accelerating new GitHub Actions workflows&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://avatars0.githubusercontent.com/u/44036562?s=100&amp;amp;v=4" /&gt; &lt;/p&gt; 
&lt;h2&gt;Starter Workflows&lt;/h2&gt; 
&lt;p&gt;These are the workflow files for helping people get started with GitHub Actions. They're presented whenever you start to create a new GitHub Actions workflow.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;If you want to get started with GitHub Actions, you can use these starter workflows by clicking the "Actions" tab in the repository where you want to create a workflow.&lt;/strong&gt;&lt;/p&gt; 
&lt;img src="https://d3vv6lp55qjaqc.cloudfront.net/items/353A3p3Y2x3c2t2N0c01/Image%202019-08-27%20at%203.25.07%20PM.png" max-width="75%" /&gt; 
&lt;h3&gt;Note&lt;/h3&gt; 
&lt;p&gt;Thank you for your interest in this GitHub repo, however, right now we are not taking contributions.&lt;/p&gt; 
&lt;p&gt;We continue to focus our resources on strategic areas that help our customers be successful while making developers' lives easier. While GitHub Actions remains a key part of this vision, we are allocating resources towards other areas of Actions and are not taking contributions to this repository at this time. The GitHub public roadmap is the best place to follow along for any updates on features we’re working on and what stage they’re in.&lt;/p&gt; 
&lt;p&gt;We are taking the following steps to better direct requests related to GitHub Actions, including:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;We will be directing questions and support requests to our &lt;a href="https://github.com/orgs/community/discussions/categories/actions"&gt;Community Discussions area&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;High Priority bugs can be reported through Community Discussions or you can report these to our support team &lt;a href="https://support.github.com/contact/bug-report"&gt;https://support.github.com/contact/bug-report&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Security Issues should be handled as per our &lt;a href="https://raw.githubusercontent.com/actions/starter-workflows/main/security.md"&gt;security.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;We will still provide security updates for this project and fix major breaking changes during this time.&lt;/p&gt; 
&lt;p&gt;You are welcome to still raise bugs in this repo.&lt;/p&gt; 
&lt;h3&gt;Directory structure&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/starter-workflows/main/ci"&gt;ci&lt;/a&gt;: solutions for Continuous Integration workflows&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/starter-workflows/main/deployments"&gt;deployments&lt;/a&gt;: solutions for Deployment workflows&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/starter-workflows/main/automation"&gt;automation&lt;/a&gt;: solutions for automating workflows&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/starter-workflows/main/code-scanning"&gt;code-scanning&lt;/a&gt;: solutions for &lt;a href="https://github.com/features/security"&gt;Code Scanning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/starter-workflows/main/pages"&gt;pages&lt;/a&gt;: solutions for Pages workflows&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/starter-workflows/main/icons"&gt;icons&lt;/a&gt;: svg icons for the relevant template&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each workflow must be written in YAML and have a &lt;code&gt;.yml&lt;/code&gt; extension. They also need a corresponding &lt;code&gt;.properties.json&lt;/code&gt; file that contains extra metadata about the workflow (this is displayed in the GitHub.com UI).&lt;/p&gt; 
&lt;p&gt;For example: &lt;code&gt;ci/django.yml&lt;/code&gt; and &lt;code&gt;ci/properties/django.properties.json&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Valid properties&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: the name shown in onboarding. This property is unique within the repository.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: the description shown in onboarding&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;iconName&lt;/code&gt;: the icon name in the relevant folder, for example, &lt;code&gt;django&lt;/code&gt; should have an icon &lt;code&gt;icons/django.svg&lt;/code&gt;. Only SVG is supported at this time. Another option is to use &lt;a href="https://primer.style/octicons/"&gt;octicon&lt;/a&gt;. The format to use an octicon is &lt;code&gt;octicon &amp;lt;&amp;lt;icon name&amp;gt;&amp;gt;&lt;/code&gt;. Example: &lt;code&gt;octicon person&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;creator&lt;/code&gt;: creator of the template shown in onboarding. All the workflow templates from an author will have the same &lt;code&gt;creator&lt;/code&gt; field.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;categories&lt;/code&gt;: the categories that it will be shown under. Choose at least one category from the list &lt;a href="https://raw.githubusercontent.com/actions/starter-workflows/main/#categories"&gt;here&lt;/a&gt;. Further, choose the categories from the list of languages available &lt;a href="https://github.com/github/linguist/raw/master/lib/linguist/languages.yml"&gt;here&lt;/a&gt; and the list of tech stacks available &lt;a href="https://github.com/github-starter-workflows/repo-analysis-partner/raw/main/tech_stacks.yml"&gt;here&lt;/a&gt;. When a user views the available templates, those templates that match the language and tech stacks will feature more prominently.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Categories&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;continuous-integration&lt;/li&gt; 
 &lt;li&gt;deployment&lt;/li&gt; 
 &lt;li&gt;testing&lt;/li&gt; 
 &lt;li&gt;code-quality&lt;/li&gt; 
 &lt;li&gt;code-review&lt;/li&gt; 
 &lt;li&gt;dependency-management&lt;/li&gt; 
 &lt;li&gt;monitoring&lt;/li&gt; 
 &lt;li&gt;Automation&lt;/li&gt; 
 &lt;li&gt;utilities&lt;/li&gt; 
 &lt;li&gt;Pages&lt;/li&gt; 
 &lt;li&gt;Hugo&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Variables&lt;/h3&gt; 
&lt;p&gt;These variables can be placed in the starter workflow and will be substituted as detailed below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$default-branch&lt;/code&gt;: will substitute the branch from the repository, for example &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$protected-branches&lt;/code&gt;: will substitute any protected branches from the repository&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$cron-daily&lt;/code&gt;: will substitute a valid but random time within the day&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to test templates before publishing&lt;/h2&gt; 
&lt;h3&gt;Disable template for public&lt;/h3&gt; 
&lt;p&gt;The template author adds a &lt;code&gt;labels&lt;/code&gt; array in the template's &lt;code&gt;properties.json&lt;/code&gt; file with a label &lt;code&gt;preview&lt;/code&gt;. This will hide the template from users, unless user uses query parameter &lt;code&gt;preview=true&lt;/code&gt; in the URL. Example &lt;code&gt;properties.json&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "name": "Node.js",
    "description": "Build and test a Node.js project with npm.",
    "iconName": "nodejs",
    "categories": ["Continuous integration", "JavaScript", "npm", "React", "Angular", "Vue"],
    "labels": ["preview"]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For viewing the templates with &lt;code&gt;preview&lt;/code&gt; label, provide query parameter &lt;code&gt;preview=true&lt;/code&gt; to the &lt;code&gt;new workflow&lt;/code&gt; page URL. Eg. &lt;code&gt;https://github.com/&amp;lt;owner&amp;gt;/&amp;lt;repo_name&amp;gt;/actions/new?preview=true&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Enable template for public&lt;/h3&gt; 
&lt;p&gt;Remove the &lt;code&gt;labels&lt;/code&gt; array from &lt;code&gt;properties.json&lt;/code&gt; file to publish the template to public&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yangshun/tech-interview-handbook</title>
      <link>https://github.com/yangshun/tech-interview-handbook</link>
      <description>&lt;p&gt;💯 Curated coding interview preparation materials for busy software engineers&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;Tech Interview Handbook&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.techinterviewhandbook.org/"&gt; &lt;img src="https://raw.githubusercontent.com/yangshun/tech-interview-handbook/main/assets/logo.svg?sanitize=true" alt="Tech Interview Handbook" width="400" /&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;h3&gt; &lt;a href="https://www.techinterviewhandbook.org/"&gt;Read on the website&lt;/a&gt; &lt;/h3&gt; 
 &lt;p&gt; Join/follow us on &lt;a href="https://discord.com/invite/usMqNaPczq" target="_blank"&gt;Discord&lt;/a&gt; | &lt;a href="https://twitter.com/techinterviewhb" target="_blank"&gt;𝕏 (Twitter)&lt;/a&gt; | &lt;a href="https://t.me/techinterviewhandbook" target="_blank"&gt;Telegram&lt;/a&gt; | &lt;a href="https://facebook.com/techinterviewhandbook" target="_blank"&gt;Facebook&lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;a href="https://www.techinterviewhandbook.org/software-engineering-interview-guide/" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/yangshun/tech-interview-handbook/main/assets/start-reading-button.jpg" alt="Start Reading Tech Interview Handbook" /&gt; &lt;/a&gt; 
&lt;h2&gt;What is this?&lt;/h2&gt; 
&lt;p&gt;Not everyone has the time to do a few hundred LeetCode questions. Here are &lt;em&gt;free and curated&lt;/em&gt; technical interview preparation materials for busy engineers, brought to you by me, the author of &lt;a href="https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU"&gt;Blind 75&lt;/a&gt;. Over 1,000,000 people have benefitted from this handbook!&lt;/p&gt; 
&lt;p&gt;Besides the usual algorithm questions, other &lt;strong&gt;awesome&lt;/strong&gt; stuff includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.techinterviewhandbook.org/coding-interview-study-plan/"&gt;Best practice questions&lt;/a&gt; for coding interviews&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.techinterviewhandbook.org/grind75/"&gt;Grind 75&lt;/a&gt; - the next evolution of Blind 75, bigger and better&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.techinterviewhandbook.org/coding-interview-prep/"&gt;How to prepare&lt;/a&gt; for coding interviews&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.techinterviewhandbook.org/coding-interview-cheatsheet/"&gt;Coding interview best practices&lt;/a&gt; - Straight-to-the-point Do's and Don'ts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.techinterviewhandbook.org/algorithms/study-cheatsheet/"&gt;Algorithm cheatsheets and tips&lt;/a&gt; categorized by topic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.techinterviewhandbook.org/resume/"&gt;Step-by-step Software Engineer resume guide&lt;/a&gt; to prepare a FAANG-ready resume&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.techinterviewhandbook.org/behavioral-interview-questions/"&gt;Behavioral questions&lt;/a&gt; asked by the top tech companies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.frontendinterviewhandbook.com"&gt;Front end interview preparation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Help from you in contributing content would be very much appreciated!&lt;/p&gt; 
&lt;h2&gt;Why would you read this?&lt;/h2&gt; 
&lt;p&gt;This repository has &lt;strong&gt;practical&lt;/strong&gt; content that covers all phases of a technical interview, from applying for a job to passing the interviews to offer negotiation. Technically competent candidates might still find the non-technical content helpful.&lt;/p&gt; 
&lt;p&gt;The information in this repository is condensed. Ultimately, the key to succeeding in technical interviews is consistent practice and I don't want to bore you with too many words. I tell you the minimum you need to know on how to go about navigating the interview process, you go and practice and land your dream job.&lt;/p&gt; 
&lt;h2&gt;Who is this for?&lt;/h2&gt; 
&lt;p&gt;Anybody who wants to land a job at a tech company but is new to technical interviews, seasoned engineers who have not been on the other side of the interviewing table in a while and want to get back into the game, or anyone who wants to be better at technical interviewing.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;h3&gt;💡 Stop grinding mindlessly! Study coding question patterns efficiently with &lt;a href="https://www.designgurus.io/course/grokking-the-coding-interview?aff=kJSIoU"&gt;Grokking the Coding Interview&lt;/a&gt; by Design Gurus 💡 &lt;/h3&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h2&gt;How is this repository different?&lt;/h2&gt; 
&lt;p&gt;There are many awesome books like "Cracking the Coding Interview" and interview-related repositories out there on GitHub, what makes this repository different? The difference is that many existing interview repositories contain mainly links to external resources whereas this repository contains top-quality curated content directly for your consumption.&lt;/p&gt; 
&lt;p&gt;Also, existing resources focus mainly on algorithm questions and lack coverage for more domain-specific and non-technical questions. This handbook aims to cover content beyond the typical algorithmic coding questions. 😎&lt;/p&gt; 
&lt;h2&gt;Looking for interview courses?&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack="&gt;AlgoMonster&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;AlgoMonster aims to help you ace the technical interview &lt;strong&gt;in the shortest time possible&lt;/strong&gt;. By Google engineers, AlgoMonster uses a data-driven approach to teach you the most useful key question patterns and has contents to help you quickly revise basic data structures and algorithms. Best of all, AlgoMonster is not subscription-based - pay a one-time fee and get &lt;strong&gt;lifetime access&lt;/strong&gt;. &lt;a href="https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack="&gt;&lt;strong&gt;Join today for a 70% discount →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.designgurus.io/course/grokking-the-coding-interview?aff=kJSIoU"&gt;Grokking the Coding Interview: Patterns for Coding Questions&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;This course by Design Gurus expands upon the questions on the recommended practice questions but approaches the practicing from a questions pattern perspective, which is an approach I also agree with for learning and have personally used to get better at coding interviews. The course allows you to practice selected questions in Java, Python, C++, JavaScript and also provides sample solutions in those languages. &lt;strong&gt;Learn and understand patterns, not memorize answers!&lt;/strong&gt; &lt;a href="https://www.designgurus.io/course/grokking-the-coding-interview?aff=kJSIoU"&gt;&lt;strong&gt;Get lifetime access today →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Looking for Front End content?&lt;/h2&gt; 
&lt;p&gt;Front-end-related content has been moved to a separate website - &lt;a href="https://frontendinterviewhandbook.com"&gt;Front End Interview Handbook&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Looking for System Design content?&lt;/h2&gt; 
&lt;p&gt;We're still working on System Design content. In the meanwhile, check out &lt;a href="https://bytebytego.com?fpr=techinterviewhandbook"&gt;ByteByteGo's System Design Interview course&lt;/a&gt; or Design Gurus' &lt;a href="https://www.designgurus.io/course/grokking-the-system-design-interview?aff=kJSIoU"&gt;Grokking the System Design Interview course&lt;/a&gt;, which in our opinion are among the most useful resources for getting started on system design interviews preparation.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;p&gt;A &lt;a href="https://github.com/facebook/docusaurus"&gt;Docusaurus&lt;/a&gt; website has been created to provide a better reading experience. Check out the website &lt;a href="https://www.techinterviewhandbook.org"&gt;here&lt;/a&gt;!&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;h3&gt;💡 Stop the grind and study with a plan! Developed by Google engineers, &lt;a href="https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack="&gt;AlgoMonster&lt;/a&gt; is the fastest way to get a software engineering job. &lt;a href="https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack="&gt;Join today for a 70% discount!&lt;/a&gt; 💡&lt;/h3&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Related&lt;/h2&gt; 
&lt;p&gt;If you are interested in how data structures are implemented, check out &lt;a href="https://github.com/yangshun/lago"&gt;Lago&lt;/a&gt;, a Data Structures and Algorithms library for JavaScript. It is pretty much still WIP but I intend to make it into a library that can be used in production and also a reference resource for revising Data Structures and Algorithms.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;There are no formal contributing guidelines at the moment as things are still in flux and we might find a better approach to structure content as we go along. You are welcome to contribute whatever you think will be helpful to fellow engineers. If you would like to contribute content for different domains, feel free to create an issue or submit a pull request and we can discuss further.&lt;/p&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;This project exists thanks to all the people who contributed. [&lt;a href="https://raw.githubusercontent.com/yangshun/tech-interview-handbook/main/CONTRIBUTING.md"&gt;Contribute&lt;/a&gt;]. &lt;a href="https://github.com/yangshun/tech-interview-handbook/graphs/contributors"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/contributors.svg?width=890&amp;amp;button=false" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Backers&lt;/h3&gt; 
&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href="https://opencollective.com/tech-interview-handbook#backer"&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://opencollective.com/tech-interview-handbook#backers" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/backers.svg?width=890" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/yangshun" target="_blank"&gt;&lt;img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Me A Coffee" style="height: auto !important; width: auto !important;" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;Support this project by becoming a sponsor. Your logo/profile picture will show up here with a link to your website. [&lt;a href="https://opencollective.com/tech-interview-handbook#sponsor"&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/0/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/0/avatar.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/1/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/1/avatar.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/2/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/2/avatar.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/3/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/3/avatar.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/4/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/4/avatar.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/5/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/5/avatar.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/6/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/6/avatar.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/7/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/7/avatar.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/8/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/8/avatar.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tech-interview-handbook/sponsor/9/website" target="_blank"&gt;&lt;img src="https://opencollective.com/tech-interview-handbook/sponsor/9/avatar.svg?sanitize=true" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;I am providing code in the repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not my employer (Meta).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>strapi/strapi</title>
      <link>https://github.com/strapi/strapi</link>
      <description>&lt;p&gt;🚀 Strapi is the leading open-source headless CMS. It’s 100% JavaScript/TypeScript, fully customizable, and developer-first.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://strapi.io/#gh-light-mode-only"&gt; &lt;img src="https://strapi.io/assets/strapi-logo-dark.svg?sanitize=true" width="318px" alt="Strapi logo" /&gt; &lt;/a&gt; &lt;a href="https://strapi.io/#gh-dark-mode-only"&gt; &lt;img src="https://strapi.io/assets/strapi-logo-light.svg?sanitize=true" width="318px" alt="Strapi logo" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt;Open-source headless CMS, self-hosted or Cloud you’re in control.&lt;/h3&gt; 
&lt;p align="center"&gt;The leading open-source headless CMS, 100% JavaScript/TypeScript, flexible and fully customizable.&lt;/p&gt; 
&lt;p align="center"&gt;&lt;a href="https://cloud.strapi.io/signups?source=github1"&gt;Cloud&lt;/a&gt; · &lt;a href="https://strapi.io/demo?utm_campaign=Growth-Experiments&amp;amp;utm_source=strapi%2Fstrapi%20README.md"&gt;Try live demo&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.npmjs.org/package/@strapi/strapi"&gt; &lt;img src="https://img.shields.io/npm/v/@strapi/strapi/latest.svg?sanitize=true" alt="NPM Version" /&gt; &lt;/a&gt; &lt;a href="https://github.com/strapi/strapi/actions/workflows/tests.yml"&gt; &lt;img src="https://github.com/strapi/strapi/actions/workflows/tests.yml/badge.svg?branch=main" alt="Tests" /&gt; &lt;/a&gt; &lt;a href="https://discord.strapi.io"&gt; &lt;img src="https://img.shields.io/discord/811989166782021633?label=Discord" alt="Strapi on Discord" /&gt; &lt;/a&gt; &lt;a href="https://github.com/strapi/strapi/actions/workflows/nightly.yml"&gt; &lt;img src="https://github.com/strapi/strapi/actions/workflows/nightly.yml/badge.svg?sanitize=true" alt="Strapi Nightly Release Build Status" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://strapi.io"&gt; &lt;img src="https://raw.githubusercontent.com/strapi/strapi/main/public/assets/admin-demo.gif" alt="Administration panel" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;Strapi Community Edition is a free and open-source headless CMS enabling you to manage any content, anywhere.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Self-hosted or Cloud&lt;/strong&gt;: You can host and scale Strapi projects the way you want. You can save time by deploying to &lt;a href="https://cloud.strapi.io/signups?source=github1"&gt;Strapi Cloud&lt;/a&gt; or deploy to the hosting platform you want**: AWS, Azure, Google Cloud, DigitalOcean.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modern Admin Panel&lt;/strong&gt;: Elegant, entirely customizable and a fully extensible admin panel.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-database support&lt;/strong&gt;: You can choose the database you prefer: PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blazing Fast and Robust&lt;/strong&gt;: Built on top of Node.js and TypeScript, Strapi delivers reliable and solid performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Front-end Agnostic&lt;/strong&gt;: Use any front-end framework (React, Next.js, Vue, Angular, etc.), mobile apps or even IoT.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure by default&lt;/strong&gt;: Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful CLI&lt;/strong&gt;: Scaffold projects and APIs on the fly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://docs.strapi.io/developer-docs/latest/getting-started/quick-start.html" target="_blank"&gt;Read the Getting Started tutorial&lt;/a&gt; or follow the steps below:&lt;/p&gt; 
&lt;h3&gt;⏳ Installation&lt;/h3&gt; 
&lt;p&gt;Install Strapi with this &lt;strong&gt;Quickstart&lt;/strong&gt; command to create a Strapi project instantly:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Use &lt;strong&gt;yarn&lt;/strong&gt; to install the Strapi project (recommended). &lt;a href="https://yarnpkg.com/lang/en/docs/install/"&gt;Install yarn with these docs&lt;/a&gt;.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;yarn create strapi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Using npx to install the Strapi project.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx create-strapi@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command generates a brand new project with the default features (authentication, permissions, content management, content type builder &amp;amp; file upload).&lt;/p&gt; 
&lt;p&gt;Enjoy 🎉&lt;/p&gt; 
&lt;h3&gt;🖐 Requirements&lt;/h3&gt; 
&lt;p&gt;Complete installation requirements can be found in the documentation under &lt;a href="https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment.html"&gt;Installation Requirements&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Supported operating systems&lt;/strong&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;OS&lt;/th&gt; 
   &lt;th&gt;Recommended&lt;/th&gt; 
   &lt;th&gt;Minimum&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;24.04&lt;/td&gt; 
   &lt;td&gt;LTS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Debian&lt;/td&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td&gt;LTS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;RHEL&lt;/td&gt; 
   &lt;td&gt;9&lt;/td&gt; 
   &lt;td&gt;LTS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;14&lt;/td&gt; 
   &lt;td&gt;12&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows Desktop&lt;/td&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows Server&lt;/td&gt; 
   &lt;td&gt;No Support&lt;/td&gt; 
   &lt;td&gt;No Support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Docker&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Strapi only supports maintenance and LTS versions of Node.js. Please refer to the &lt;a href="https://nodejs.org/en/about/releases/"&gt;Node.js release schedule&lt;/a&gt; for more information. NPM versions installed by default with Node.js are supported. Generally it's recommended to use yarn over npm where possible.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Strapi Version&lt;/th&gt; 
   &lt;th&gt;Recommended&lt;/th&gt; 
   &lt;th&gt;Minimum&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5.0.0 and up&lt;/td&gt; 
   &lt;td&gt;20.x&lt;/td&gt; 
   &lt;td&gt;18.x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.14.5 and up&lt;/td&gt; 
   &lt;td&gt;20.x&lt;/td&gt; 
   &lt;td&gt;18.x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.11.0 and up&lt;/td&gt; 
   &lt;td&gt;18.x&lt;/td&gt; 
   &lt;td&gt;16.x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.3.9 to 4.10.x&lt;/td&gt; 
   &lt;td&gt;18.x&lt;/td&gt; 
   &lt;td&gt;14.x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.0.x to 4.3.8&lt;/td&gt; 
   &lt;td&gt;16.x&lt;/td&gt; 
   &lt;td&gt;14.x&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Database&lt;/th&gt; 
   &lt;th&gt;Recommended&lt;/th&gt; 
   &lt;th&gt;Minimum&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MySQL&lt;/td&gt; 
   &lt;td&gt;8.0&lt;/td&gt; 
   &lt;td&gt;8.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MariaDB&lt;/td&gt; 
   &lt;td&gt;11.2&lt;/td&gt; 
   &lt;td&gt;10.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PostgreSQL&lt;/td&gt; 
   &lt;td&gt;16.0&lt;/td&gt; 
   &lt;td&gt;14.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SQLite&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;We recommend always using the latest version of Strapi stable to start your new projects&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Content Types Builder&lt;/strong&gt;: Build the most flexible publishing experience for your content managers, by giving them the freedom to create any page on the go with &lt;a href="https://docs.strapi.io/user-docs/content-manager/writing-content#filling-up-fields"&gt;fields&lt;/a&gt;, components and &lt;a href="https://docs.strapi.io/user-docs/content-manager/writing-content#dynamic-zones"&gt;Dynamic Zones&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Media Library&lt;/strong&gt;: Upload your images, videos, audio or documents to the media library. Easily find the right asset, edit and reuse it.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Internationalization&lt;/strong&gt;: The Internationalization (i18n) plugin allows Strapi users to create, manage and distribute localized content in different languages, called "locales"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Role Based Access Control&lt;/strong&gt;: Create an unlimited number of custom roles and permissions for admin and end users.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GraphQL or REST&lt;/strong&gt;: Consume the API using REST or GraphQL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can unlock additional features such as SSO, Audit Logs, Review Workflows in &lt;a href="https://cloud.strapi.io/login?source=github1"&gt;Strapi Cloud&lt;/a&gt; or &lt;a href="https://strapi.io/enterprise?source=github1"&gt;Strapi Enterprise&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://strapi.io/overview"&gt;See more on our website&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read our &lt;a href="https://raw.githubusercontent.com/strapi/strapi/develop/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; before submitting a Pull Request to the project.&lt;/p&gt; 
&lt;h2&gt;Community support&lt;/h2&gt; 
&lt;p&gt;For general help using Strapi, please refer to &lt;a href="https://docs.strapi.io"&gt;the official Strapi documentation&lt;/a&gt;. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.strapi.io"&gt;Discord&lt;/a&gt; (For live discussion with the Community and Strapi team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/strapi/strapi"&gt;GitHub&lt;/a&gt; (Bug reports, Contributions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://forum.strapi.io"&gt;Community Forum&lt;/a&gt; (Questions and Discussions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://feedback.strapi.io"&gt;Feedback section&lt;/a&gt; (Roadmap, Feature requests)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/strapijs"&gt;Twitter&lt;/a&gt; (Get the news fast)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.facebook.com/Strapi-616063331867161"&gt;Facebook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/strapi"&gt;YouTube Channel&lt;/a&gt; (Learn from Video Tutorials)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Migration&lt;/h2&gt; 
&lt;p&gt;Follow our &lt;a href="https://docs.strapi.io/developer-docs/latest/update-migration-guides/migration-guides.html"&gt;migration guides&lt;/a&gt; on the documentation to keep your projects up-to-date.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href="https://feedback.strapi.io"&gt;roadmap&lt;/a&gt; to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See our dedicated &lt;a href="https://github.com/strapi/documentation"&gt;repository&lt;/a&gt; for the Strapi documentation, or view our documentation live:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html"&gt;Developer docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.strapi.io/user-docs/latest/getting-started/introduction.html"&gt;User guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.strapi.io/cloud/intro"&gt;Cloud guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Try live demo&lt;/h2&gt; 
&lt;p&gt;See for yourself what's under the hood by getting access to a &lt;a href="https://strapi.io/demo"&gt;hosted Strapi project&lt;/a&gt; with sample data.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/strapi/strapi/develop/LICENSE"&gt;LICENSE&lt;/a&gt; file for licensing information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>modelcontextprotocol/typescript-sdk</title>
      <link>https://github.com/modelcontextprotocol/typescript-sdk</link>
      <description>&lt;p&gt;The official TypeScript SDK for Model Context Protocol servers and clients&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP TypeScript SDK &lt;img src="https://img.shields.io/npm/v/%40modelcontextprotocol%2Fsdk" alt="NPM Version" /&gt; &lt;img src="https://img.shields.io/npm/l/%40modelcontextprotocol%2Fsdk" alt="MIT licensed" /&gt;&lt;/h1&gt; 
&lt;details&gt; 
 &lt;summary&gt;Table of Contents&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#quick-start"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#what-is-mcp"&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#core-concepts"&gt;Core Concepts&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#server"&gt;Server&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#tools"&gt;Tools&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#prompts"&gt;Prompts&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#completions"&gt;Completions&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#sampling"&gt;Sampling&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#running-your-server"&gt;Running Your Server&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#stdio"&gt;stdio&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#streamable-http"&gt;Streamable HTTP&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#testing-and-debugging"&gt;Testing and Debugging&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#examples"&gt;Examples&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#echo-server"&gt;Echo Server&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#sqlite-explorer"&gt;SQLite Explorer&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#advanced-usage"&gt;Advanced Usage&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#dynamic-servers"&gt;Dynamic Servers&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#low-level-server"&gt;Low-Level Server&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#writing-mcp-clients"&gt;Writing MCP Clients&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#proxy-authorization-requests-upstream"&gt;Proxy Authorization Requests Upstream&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#backwards-compatibility"&gt;Backwards Compatibility&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;The Model Context Protocol allows applications to provide context for LLMs in a standardized way, separating the concerns of providing context from the actual LLM interaction. This TypeScript SDK implements &lt;a href="https://modelcontextprotocol.io/specification/latest"&gt;the full MCP specification&lt;/a&gt;, making it easy to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create MCP servers that expose resources, prompts and tools&lt;/li&gt; 
 &lt;li&gt;Build MCP clients that can connect to any MCP server&lt;/li&gt; 
 &lt;li&gt;Use standard transports like stdio and Streamable HTTP&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install @modelcontextprotocol/sdk
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Let's create a simple MCP server that exposes a calculator tool and some data. Save the following as &lt;code&gt;server.ts&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import express from 'express';
import { z } from 'zod';

// Create an MCP server
const server = new McpServer({
    name: 'demo-server',
    version: '1.0.0'
});

// Add an addition tool
server.registerTool(
    'add',
    {
        title: 'Addition Tool',
        description: 'Add two numbers',
        inputSchema: { a: z.number(), b: z.number() },
        outputSchema: { result: z.number() }
    },
    async ({ a, b }) =&amp;gt; {
        const output = { result: a + b };
        return {
            content: [{ type: 'text', text: JSON.stringify(output) }],
            structuredContent: output
        };
    }
);

// Add a dynamic greeting resource
server.registerResource(
    'greeting',
    new ResourceTemplate('greeting://{name}', { list: undefined }),
    {
        title: 'Greeting Resource', // Display name for UI
        description: 'Dynamic greeting generator'
    },
    async (uri, { name }) =&amp;gt; ({
        contents: [
            {
                uri: uri.href,
                text: `Hello, ${name}!`
            }
        ]
    })
);

// Set up Express and HTTP transport
const app = express();
app.use(express.json());

app.post('/mcp', async (req, res) =&amp;gt; {
    // Create a new transport for each request to prevent request ID collisions
    const transport = new StreamableHTTPServerTransport({
        sessionIdGenerator: undefined,
        enableJsonResponse: true
    });

    res.on('close', () =&amp;gt; {
        transport.close();
    });

    await server.connect(transport);
    await transport.handleRequest(req, res, req.body);
});

const port = parseInt(process.env.PORT || '3000');
app.listen(port, () =&amp;gt; {
    console.log(`Demo MCP Server running on http://localhost:${port}/mcp`);
}).on('error', error =&amp;gt; {
    console.error('Server error:', error);
    process.exit(1);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install the deps with &lt;code&gt;npm install @modelcontextprotocol/sdk express zod@3&lt;/code&gt;, and run with &lt;code&gt;npx -y tsx server.ts&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can connect to it using any MCP client that supports streamable http, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://modelcontextprotocol.io/docs/tools/inspector"&gt;MCP Inspector&lt;/a&gt;: &lt;code&gt;npx @modelcontextprotocol/inspector&lt;/code&gt; and connect to the streamable HTTP URL &lt;code&gt;http://localhost:3000/mcp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.claude.com/en/docs/claude-code/mcp"&gt;Claude Code&lt;/a&gt;: &lt;code&gt;claude mcp add --transport http my-server http://localhost:3000/mcp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/copilot/customization/mcp-servers"&gt;VS Code&lt;/a&gt;: &lt;code&gt;code --add-mcp "{\"name\":\"my-server\",\"type\":\"http\",\"url\":\"http://localhost:3000/mcp\"}"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cursor.com/docs/context/mcp"&gt;Cursor&lt;/a&gt;: Click &lt;a href="cursor://anysphere.cursor-deeplink/mcp/install?name=my-server&amp;amp;config=eyJ1cmwiOiJodHRwOi8vbG9jYWxob3N0OjMwMDAvbWNwIn0%3D"&gt;this deeplink&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then try asking your agent to add two numbers using its new tool!&lt;/p&gt; 
&lt;h2&gt;Core Concepts&lt;/h2&gt; 
&lt;h3&gt;Server&lt;/h3&gt; 
&lt;p&gt;The McpServer is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;const server = new McpServer({
    name: 'my-app',
    version: '1.0.0'
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://modelcontextprotocol.io/specification/latest/server/tools"&gt;Tools&lt;/a&gt; let LLMs take actions through your server. Tools can perform computation, fetch data and have side effects. Tools should be designed to be model-controlled - i.e. AI models will decide which tools to call, and the arguments.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;// Simple tool with parameters
server.registerTool(
    'calculate-bmi',
    {
        title: 'BMI Calculator',
        description: 'Calculate Body Mass Index',
        inputSchema: {
            weightKg: z.number(),
            heightM: z.number()
        },
        outputSchema: { bmi: z.number() }
    },
    async ({ weightKg, heightM }) =&amp;gt; {
        const output = { bmi: weightKg / (heightM * heightM) };
        return {
            content: [
                {
                    type: 'text',
                    text: JSON.stringify(output)
                }
            ],
            structuredContent: output
        };
    }
);

// Async tool with external API call
server.registerTool(
    'fetch-weather',
    {
        title: 'Weather Fetcher',
        description: 'Get weather data for a city',
        inputSchema: { city: z.string() },
        outputSchema: { temperature: z.number(), conditions: z.string() }
    },
    async ({ city }) =&amp;gt; {
        const response = await fetch(`https://api.weather.com/${city}`);
        const data = await response.json();
        const output = { temperature: data.temp, conditions: data.conditions };
        return {
            content: [{ type: 'text', text: JSON.stringify(output) }],
            structuredContent: output
        };
    }
);

// Tool that returns ResourceLinks
server.registerTool(
    'list-files',
    {
        title: 'List Files',
        description: 'List project files',
        inputSchema: { pattern: z.string() },
        outputSchema: {
            count: z.number(),
            files: z.array(z.object({ name: z.string(), uri: z.string() }))
        }
    },
    async ({ pattern }) =&amp;gt; {
        const output = {
            count: 2,
            files: [
                { name: 'README.md', uri: 'file:///project/README.md' },
                { name: 'index.ts', uri: 'file:///project/src/index.ts' }
            ]
        };
        return {
            content: [
                { type: 'text', text: JSON.stringify(output) },
                // ResourceLinks let tools return references without file content
                {
                    type: 'resource_link',
                    uri: 'file:///project/README.md',
                    name: 'README.md',
                    mimeType: 'text/markdown',
                    description: 'A README file'
                },
                {
                    type: 'resource_link',
                    uri: 'file:///project/src/index.ts',
                    name: 'index.ts',
                    mimeType: 'text/typescript',
                    description: 'An index file'
                }
            ],
            structuredContent: output
        };
    }
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;ResourceLinks&lt;/h4&gt; 
&lt;p&gt;Tools can return &lt;code&gt;ResourceLink&lt;/code&gt; objects to reference resources without embedding their full content. This can be helpful for performance when dealing with large files or many resources - clients can then selectively read only the resources they need using the provided URIs.&lt;/p&gt; 
&lt;h3&gt;Resources&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://modelcontextprotocol.io/specification/latest/server/resources"&gt;Resources&lt;/a&gt; can also expose data to LLMs, but unlike tools shouldn't perform significant computation or have side effects.&lt;/p&gt; 
&lt;p&gt;Resources are designed to be used in an application-driven way, meaning MCP client applications can decide how to expose them. For example, a client could expose a resource picker to the human, or could expose them to the model directly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;// Static resource
server.registerResource(
    'config',
    'config://app',
    {
        title: 'Application Config',
        description: 'Application configuration data',
        mimeType: 'text/plain'
    },
    async uri =&amp;gt; ({
        contents: [
            {
                uri: uri.href,
                text: 'App configuration here'
            }
        ]
    })
);

// Dynamic resource with parameters
server.registerResource(
    'user-profile',
    new ResourceTemplate('users://{userId}/profile', { list: undefined }),
    {
        title: 'User Profile',
        description: 'User profile information'
    },
    async (uri, { userId }) =&amp;gt; ({
        contents: [
            {
                uri: uri.href,
                text: `Profile data for user ${userId}`
            }
        ]
    })
);

// Resource with context-aware completion
server.registerResource(
    'repository',
    new ResourceTemplate('github://repos/{owner}/{repo}', {
        list: undefined,
        complete: {
            // Provide intelligent completions based on previously resolved parameters
            repo: (value, context) =&amp;gt; {
                if (context?.arguments?.['owner'] === 'org1') {
                    return ['project1', 'project2', 'project3'].filter(r =&amp;gt; r.startsWith(value));
                }
                return ['default-repo'].filter(r =&amp;gt; r.startsWith(value));
            }
        }
    }),
    {
        title: 'GitHub Repository',
        description: 'Repository information'
    },
    async (uri, { owner, repo }) =&amp;gt; ({
        contents: [
            {
                uri: uri.href,
                text: `Repository: ${owner}/${repo}`
            }
        ]
    })
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Prompts&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://modelcontextprotocol.io/specification/latest/server/prompts"&gt;Prompts&lt;/a&gt; are reusable templates that help humans prompt models to interact with your server. They're designed to be user-driven, and might appear as slash commands in a chat interface.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { completable } from '@modelcontextprotocol/sdk/server/completable.js';

server.registerPrompt(
    'review-code',
    {
        title: 'Code Review',
        description: 'Review code for best practices and potential issues',
        argsSchema: { code: z.string() }
    },
    ({ code }) =&amp;gt; ({
        messages: [
            {
                role: 'user',
                content: {
                    type: 'text',
                    text: `Please review this code:\n\n${code}`
                }
            }
        ]
    })
);

// Prompt with context-aware completion
server.registerPrompt(
    'team-greeting',
    {
        title: 'Team Greeting',
        description: 'Generate a greeting for team members',
        argsSchema: {
            department: completable(z.string(), value =&amp;gt; {
                // Department suggestions
                return ['engineering', 'sales', 'marketing', 'support'].filter(d =&amp;gt; d.startsWith(value));
            }),
            name: completable(z.string(), (value, context) =&amp;gt; {
                // Name suggestions based on selected department
                const department = context?.arguments?.['department'];
                if (department === 'engineering') {
                    return ['Alice', 'Bob', 'Charlie'].filter(n =&amp;gt; n.startsWith(value));
                } else if (department === 'sales') {
                    return ['David', 'Eve', 'Frank'].filter(n =&amp;gt; n.startsWith(value));
                } else if (department === 'marketing') {
                    return ['Grace', 'Henry', 'Iris'].filter(n =&amp;gt; n.startsWith(value));
                }
                return ['Guest'].filter(n =&amp;gt; n.startsWith(value));
            })
        }
    },
    ({ department, name }) =&amp;gt; ({
        messages: [
            {
                role: 'assistant',
                content: {
                    type: 'text',
                    text: `Hello ${name}, welcome to the ${department} team!`
                }
            }
        ]
    })
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Completions&lt;/h3&gt; 
&lt;p&gt;MCP supports argument completions to help users fill in prompt arguments and resource template parameters. See the examples above for &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#resources"&gt;resource completions&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/#prompts"&gt;prompt completions&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Client Usage&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;// Request completions for any argument
const result = await client.complete({
    ref: {
        type: 'ref/prompt', // or "ref/resource"
        name: 'example' // or uri: "template://..."
    },
    argument: {
        name: 'argumentName',
        value: 'partial' // What the user has typed so far
    },
    context: {
        // Optional: Include previously resolved arguments
        arguments: {
            previousArg: 'value'
        }
    }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Display Names and Metadata&lt;/h3&gt; 
&lt;p&gt;All resources, tools, and prompts support an optional &lt;code&gt;title&lt;/code&gt; field for better UI presentation. The &lt;code&gt;title&lt;/code&gt; is used as a display name (e.g. 'Create a new issue'), while &lt;code&gt;name&lt;/code&gt; remains the unique identifier (e.g. &lt;code&gt;create_issue&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;register*&lt;/code&gt; methods (&lt;code&gt;registerTool&lt;/code&gt;, &lt;code&gt;registerPrompt&lt;/code&gt;, &lt;code&gt;registerResource&lt;/code&gt;) are the recommended approach for new code. The older methods (&lt;code&gt;tool&lt;/code&gt;, &lt;code&gt;prompt&lt;/code&gt;, &lt;code&gt;resource&lt;/code&gt;) remain available for backwards compatibility.&lt;/p&gt; 
&lt;h4&gt;Title Precedence for Tools&lt;/h4&gt; 
&lt;p&gt;For tools specifically, there are two ways to specify a title:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;title&lt;/code&gt; field in the tool configuration&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;annotations.title&lt;/code&gt; field (when using the older &lt;code&gt;tool()&lt;/code&gt; method with annotations)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The precedence order is: &lt;code&gt;title&lt;/code&gt; → &lt;code&gt;annotations.title&lt;/code&gt; → &lt;code&gt;name&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;// Using registerTool (recommended)
server.registerTool(
    'my_tool',
    {
        title: 'My Tool', // This title takes precedence
        annotations: {
            title: 'Annotation Title' // This is ignored if title is set
        }
    },
    handler
);

// Using tool with annotations (older API)
server.tool(
    'my_tool',
    'description',
    {
        title: 'Annotation Title' // This is used as title
    },
    handler
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When building clients, use the provided utility to get the appropriate display name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { getDisplayName } from '@modelcontextprotocol/sdk/shared/metadataUtils.js';

// Automatically handles the precedence: title → annotations.title → name
const displayName = getDisplayName(tool);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sampling&lt;/h3&gt; 
&lt;p&gt;MCP servers can request LLM completions from connected clients that support sampling.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import express from 'express';
import { z } from 'zod';

const mcpServer = new McpServer({
    name: 'tools-with-sample-server',
    version: '1.0.0'
});

// Tool that uses LLM sampling to summarize any text
mcpServer.registerTool(
    'summarize',
    {
        title: 'Text Summarizer',
        description: 'Summarize any text using an LLM',
        inputSchema: {
            text: z.string().describe('Text to summarize')
        },
        outputSchema: { summary: z.string() }
    },
    async ({ text }) =&amp;gt; {
        // Call the LLM through MCP sampling
        const response = await mcpServer.server.createMessage({
            messages: [
                {
                    role: 'user',
                    content: {
                        type: 'text',
                        text: `Please summarize the following text concisely:\n\n${text}`
                    }
                }
            ],
            maxTokens: 500
        });

        const summary = response.content.type === 'text' ? response.content.text : 'Unable to generate summary';
        const output = { summary };
        return {
            content: [{ type: 'text', text: JSON.stringify(output) }],
            structuredContent: output
        };
    }
);

const app = express();
app.use(express.json());

app.post('/mcp', async (req, res) =&amp;gt; {
    const transport = new StreamableHTTPServerTransport({
        sessionIdGenerator: undefined,
        enableJsonResponse: true
    });

    res.on('close', () =&amp;gt; {
        transport.close();
    });

    await mcpServer.connect(transport);
    await transport.handleRequest(req, res, req.body);
});

const port = parseInt(process.env.PORT || '3000');
app.listen(port, () =&amp;gt; {
    console.log(`MCP Server running on http://localhost:${port}/mcp`);
}).on('error', error =&amp;gt; {
    console.error('Server error:', error);
    process.exit(1);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Running Your Server&lt;/h2&gt; 
&lt;p&gt;MCP servers in TypeScript need to be connected to a transport to communicate with clients. How you start the server depends on the choice of transport:&lt;/p&gt; 
&lt;h3&gt;Streamable HTTP&lt;/h3&gt; 
&lt;p&gt;For remote servers, use the Streamable HTTP transport.&lt;/p&gt; 
&lt;h4&gt;Without Session Management (Recommended)&lt;/h4&gt; 
&lt;p&gt;For most use cases where session management isn't needed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import express from 'express';
import { z } from 'zod';

const app = express();
app.use(express.json());

// Create the MCP server once (can be reused across requests)
const server = new McpServer({
    name: 'example-server',
    version: '1.0.0'
});

// Set up your tools, resources, and prompts
server.registerTool(
    'echo',
    {
        title: 'Echo Tool',
        description: 'Echoes back the provided message',
        inputSchema: { message: z.string() },
        outputSchema: { echo: z.string() }
    },
    async ({ message }) =&amp;gt; {
        const output = { echo: `Tool echo: ${message}` };
        return {
            content: [{ type: 'text', text: JSON.stringify(output) }],
            structuredContent: output
        };
    }
);

app.post('/mcp', async (req, res) =&amp;gt; {
    // In stateless mode, create a new transport for each request to prevent
    // request ID collisions. Different clients may use the same JSON-RPC request IDs,
    // which would cause responses to be routed to the wrong HTTP connections if
    // the transport state is shared.

    try {
        const transport = new StreamableHTTPServerTransport({
            sessionIdGenerator: undefined,
            enableJsonResponse: true
        });

        res.on('close', () =&amp;gt; {
            transport.close();
        });

        await server.connect(transport);
        await transport.handleRequest(req, res, req.body);
    } catch (error) {
        console.error('Error handling MCP request:', error);
        if (!res.headersSent) {
            res.status(500).json({
                jsonrpc: '2.0',
                error: {
                    code: -32603,
                    message: 'Internal server error'
                },
                id: null
            });
        }
    }
});

const port = parseInt(process.env.PORT || '3000');
app.listen(port, () =&amp;gt; {
    console.log(`MCP Server running on http://localhost:${port}/mcp`);
}).on('error', error =&amp;gt; {
    console.error('Server error:', error);
    process.exit(1);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;With Session Management&lt;/h4&gt; 
&lt;p&gt;In some cases, servers need stateful sessions. This can be achieved by &lt;a href="https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#session-management"&gt;session management&lt;/a&gt; in the MCP protocol.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import express from 'express';
import { randomUUID } from 'node:crypto';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import { isInitializeRequest } from '@modelcontextprotocol/sdk/types.js';

const app = express();
app.use(express.json());

// Map to store transports by session ID
const transports: { [sessionId: string]: StreamableHTTPServerTransport } = {};

// Handle POST requests for client-to-server communication
app.post('/mcp', async (req, res) =&amp;gt; {
    // Check for existing session ID
    const sessionId = req.headers['mcp-session-id'] as string | undefined;
    let transport: StreamableHTTPServerTransport;

    if (sessionId &amp;amp;&amp;amp; transports[sessionId]) {
        // Reuse existing transport
        transport = transports[sessionId];
    } else if (!sessionId &amp;amp;&amp;amp; isInitializeRequest(req.body)) {
        // New initialization request
        transport = new StreamableHTTPServerTransport({
            sessionIdGenerator: () =&amp;gt; randomUUID(),
            onsessioninitialized: sessionId =&amp;gt; {
                // Store the transport by session ID
                transports[sessionId] = transport;
            }
            // DNS rebinding protection is disabled by default for backwards compatibility. If you are running this server
            // locally, make sure to set:
            // enableDnsRebindingProtection: true,
            // allowedHosts: ['127.0.0.1'],
        });

        // Clean up transport when closed
        transport.onclose = () =&amp;gt; {
            if (transport.sessionId) {
                delete transports[transport.sessionId];
            }
        };
        const server = new McpServer({
            name: 'example-server',
            version: '1.0.0'
        });

        // ... set up server resources, tools, and prompts ...

        // Connect to the MCP server
        await server.connect(transport);
    } else {
        // Invalid request
        res.status(400).json({
            jsonrpc: '2.0',
            error: {
                code: -32000,
                message: 'Bad Request: No valid session ID provided'
            },
            id: null
        });
        return;
    }

    // Handle the request
    await transport.handleRequest(req, res, req.body);
});

// Reusable handler for GET and DELETE requests
const handleSessionRequest = async (req: express.Request, res: express.Response) =&amp;gt; {
    const sessionId = req.headers['mcp-session-id'] as string | undefined;
    if (!sessionId || !transports[sessionId]) {
        res.status(400).send('Invalid or missing session ID');
        return;
    }

    const transport = transports[sessionId];
    await transport.handleRequest(req, res);
};

// Handle GET requests for server-to-client notifications via SSE
app.get('/mcp', handleSessionRequest);

// Handle DELETE requests for session termination
app.delete('/mcp', handleSessionRequest);

app.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;CORS Configuration for Browser-Based Clients&lt;/h4&gt; 
&lt;p&gt;If you'd like your server to be accessible by browser-based MCP clients, you'll need to configure CORS headers. The &lt;code&gt;Mcp-Session-Id&lt;/code&gt; header must be exposed for browser clients to access it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import cors from 'cors';

// Add CORS middleware before your MCP routes
app.use(
    cors({
        origin: '*', // Configure appropriately for production, for example:
        // origin: ['https://your-remote-domain.com', 'https://your-other-remote-domain.com'],
        exposedHeaders: ['Mcp-Session-Id'],
        allowedHeaders: ['Content-Type', 'mcp-session-id']
    })
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This configuration is necessary because:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The MCP streamable HTTP transport uses the &lt;code&gt;Mcp-Session-Id&lt;/code&gt; header for session management&lt;/li&gt; 
 &lt;li&gt;Browsers restrict access to response headers unless explicitly exposed via CORS&lt;/li&gt; 
 &lt;li&gt;Without this configuration, browser-based clients won't be able to read the session ID from initialization responses&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;DNS Rebinding Protection&lt;/h4&gt; 
&lt;p&gt;The Streamable HTTP transport includes DNS rebinding protection to prevent security vulnerabilities. By default, this protection is &lt;strong&gt;disabled&lt;/strong&gt; for backwards compatibility.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: If you are running this server locally, enable DNS rebinding protection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;const transport = new StreamableHTTPServerTransport({
  sessionIdGenerator: () =&amp;gt; randomUUID(),
  enableDnsRebindingProtection: true,

  allowedHosts: ['127.0.0.1', ...],
  allowedOrigins: ['https://yourdomain.com', 'https://www.yourdomain.com']
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;stdio&lt;/h3&gt; 
&lt;p&gt;For local integrations spawned by another process, you can use the stdio transport:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';

const server = new McpServer({
    name: 'example-server',
    version: '1.0.0'
});

// ... set up server resources, tools, and prompts ...

const transport = new StdioServerTransport();
await server.connect(transport);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing and Debugging&lt;/h3&gt; 
&lt;p&gt;To test your server, you can use the &lt;a href="https://github.com/modelcontextprotocol/inspector"&gt;MCP Inspector&lt;/a&gt;. See its README for more information.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;Echo Server&lt;/h3&gt; 
&lt;p&gt;A simple server demonstrating resources, tools, and prompts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';
import { z } from 'zod';

const server = new McpServer({
    name: 'echo-server',
    version: '1.0.0'
});

server.registerTool(
    'echo',
    {
        title: 'Echo Tool',
        description: 'Echoes back the provided message',
        inputSchema: { message: z.string() },
        outputSchema: { echo: z.string() }
    },
    async ({ message }) =&amp;gt; {
        const output = { echo: `Tool echo: ${message}` };
        return {
            content: [{ type: 'text', text: JSON.stringify(output) }],
            structuredContent: output
        };
    }
);

server.registerResource(
    'echo',
    new ResourceTemplate('echo://{message}', { list: undefined }),
    {
        title: 'Echo Resource',
        description: 'Echoes back messages as resources'
    },
    async (uri, { message }) =&amp;gt; ({
        contents: [
            {
                uri: uri.href,
                text: `Resource echo: ${message}`
            }
        ]
    })
);

server.registerPrompt(
    'echo',
    {
        title: 'Echo Prompt',
        description: 'Creates a prompt to process a message',
        argsSchema: { message: z.string() }
    },
    ({ message }) =&amp;gt; ({
        messages: [
            {
                role: 'user',
                content: {
                    type: 'text',
                    text: `Please process this message: ${message}`
                }
            }
        ]
    })
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SQLite Explorer&lt;/h3&gt; 
&lt;p&gt;A more complex example showing database integration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import sqlite3 from 'sqlite3';
import { promisify } from 'util';
import { z } from 'zod';

const server = new McpServer({
    name: 'sqlite-explorer',
    version: '1.0.0'
});

// Helper to create DB connection
const getDb = () =&amp;gt; {
    const db = new sqlite3.Database('database.db');
    return {
        all: promisify&amp;lt;string, any[]&amp;gt;(db.all.bind(db)),
        close: promisify(db.close.bind(db))
    };
};

server.registerResource(
    'schema',
    'schema://main',
    {
        title: 'Database Schema',
        description: 'SQLite database schema',
        mimeType: 'text/plain'
    },
    async uri =&amp;gt; {
        const db = getDb();
        try {
            const tables = await db.all("SELECT sql FROM sqlite_master WHERE type='table'");
            return {
                contents: [
                    {
                        uri: uri.href,
                        text: tables.map((t: { sql: string }) =&amp;gt; t.sql).join('\n')
                    }
                ]
            };
        } finally {
            await db.close();
        }
    }
);

server.registerTool(
    'query',
    {
        title: 'SQL Query',
        description: 'Execute SQL queries on the database',
        inputSchema: { sql: z.string() },
        outputSchema: {
            rows: z.array(z.record(z.any())),
            rowCount: z.number()
        }
    },
    async ({ sql }) =&amp;gt; {
        const db = getDb();
        try {
            const results = await db.all(sql);
            const output = { rows: results, rowCount: results.length };
            return {
                content: [
                    {
                        type: 'text',
                        text: JSON.stringify(output, null, 2)
                    }
                ],
                structuredContent: output
            };
        } catch (err: unknown) {
            const error = err as Error;
            return {
                content: [
                    {
                        type: 'text',
                        text: `Error: ${error.message}`
                    }
                ],
                isError: true
            };
        } finally {
            await db.close();
        }
    }
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Advanced Usage&lt;/h2&gt; 
&lt;h3&gt;Dynamic Servers&lt;/h3&gt; 
&lt;p&gt;If you want to offer an initial set of tools/prompts/resources, but later add additional ones based on user action or external state change, you can add/update/remove them &lt;em&gt;after&lt;/em&gt; the Server is connected. This will automatically emit the corresponding &lt;code&gt;listChanged&lt;/code&gt; notifications:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import express from 'express';
import { z } from 'zod';

const server = new McpServer({
    name: 'Dynamic Example',
    version: '1.0.0'
});

const listMessageTool = server.registerTool(
    'listMessages',
    {
        title: 'List Messages',
        description: 'List messages in a channel',
        inputSchema: { channel: z.string() },
        outputSchema: { messages: z.array(z.string()) }
    },
    async ({ channel }) =&amp;gt; {
        const messages = await listMessages(channel);
        const output = { messages };
        return {
            content: [{ type: 'text', text: JSON.stringify(output) }],
            structuredContent: output
        };
    }
);

const putMessageTool = server.registerTool(
    'putMessage',
    {
        title: 'Put Message',
        description: 'Send a message to a channel',
        inputSchema: { channel: z.string(), message: z.string() },
        outputSchema: { success: z.boolean() }
    },
    async ({ channel, message }) =&amp;gt; {
        await putMessage(channel, message);
        const output = { success: true };
        return {
            content: [{ type: 'text', text: JSON.stringify(output) }],
            structuredContent: output
        };
    }
);
// Until we upgrade auth, `putMessage` is disabled (won't show up in listTools)
putMessageTool.disable();

const upgradeAuthTool = server.registerTool(
    'upgradeAuth',
    {
        title: 'Upgrade Authorization',
        description: 'Upgrade user authorization level',
        inputSchema: { permission: z.enum(['write', 'admin']) },
        outputSchema: {
            success: z.boolean(),
            newPermission: z.string()
        }
    },
    // Any mutations here will automatically emit `listChanged` notifications
    async ({ permission }) =&amp;gt; {
        const { ok, err, previous } = await upgradeAuthAndStoreToken(permission);
        if (!ok) {
            return {
                content: [{ type: 'text', text: `Error: ${err}` }],
                isError: true
            };
        }

        // If we previously had read-only access, 'putMessage' is now available
        if (previous === 'read') {
            putMessageTool.enable();
        }

        if (permission === 'write') {
            // If we've just upgraded to 'write' permissions, we can still call 'upgradeAuth'
            // but can only upgrade to 'admin'.
            upgradeAuthTool.update({
                paramsSchema: { permission: z.enum(['admin']) } // change validation rules
            });
        } else {
            // If we're now an admin, we no longer have anywhere to upgrade to, so fully remove that tool
            upgradeAuthTool.remove();
        }

        const output = { success: true, newPermission: permission };
        return {
            content: [{ type: 'text', text: JSON.stringify(output) }],
            structuredContent: output
        };
    }
);

// Connect with HTTP transport
const app = express();
app.use(express.json());

app.post('/mcp', async (req, res) =&amp;gt; {
    const transport = new StreamableHTTPServerTransport({
        sessionIdGenerator: undefined,
        enableJsonResponse: true
    });

    res.on('close', () =&amp;gt; {
        transport.close();
    });

    await server.connect(transport);
    await transport.handleRequest(req, res, req.body);
});

const port = parseInt(process.env.PORT || '3000');
app.listen(port, () =&amp;gt; {
    console.log(`MCP Server running on http://localhost:${port}/mcp`);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Improving Network Efficiency with Notification Debouncing&lt;/h3&gt; 
&lt;p&gt;When performing bulk updates that trigger notifications (e.g., enabling or disabling multiple tools in a loop), the SDK can send a large number of messages in a short period. To improve performance and reduce network traffic, you can enable notification debouncing.&lt;/p&gt; 
&lt;p&gt;This feature coalesces multiple, rapid calls for the same notification type into a single message. For example, if you disable five tools in a row, only one &lt;code&gt;notifications/tools/list_changed&lt;/code&gt; message will be sent instead of five.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] This feature is designed for "simple" notifications that do not carry unique data in their parameters. To prevent silent data loss, debouncing is &lt;strong&gt;automatically bypassed&lt;/strong&gt; for any notification that contains a &lt;code&gt;params&lt;/code&gt; object or a &lt;code&gt;relatedRequestId&lt;/code&gt;. Such notifications will always be sent immediately.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This is an opt-in feature configured during server initialization.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";

const server = new McpServer(
  {
    name: "efficient-server",
    version: "1.0.0"
  },
  {
    // Enable notification debouncing for specific methods
    debouncedNotificationMethods: [
      'notifications/tools/list_changed',
      'notifications/resources/list_changed',
      'notifications/prompts/list_changed'
    ]
  }
);

// Now, any rapid changes to tools, resources, or prompts will result
// in a single, consolidated notification for each type.
server.registerTool("tool1", ...).disable();
server.registerTool("tool2", ...).disable();
server.registerTool("tool3", ...).disable();
// Only one 'notifications/tools/list_changed' is sent.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Low-Level Server&lt;/h3&gt; 
&lt;p&gt;For more control, you can use the low-level Server class directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { ListPromptsRequestSchema, GetPromptRequestSchema } from '@modelcontextprotocol/sdk/types.js';

const server = new Server(
    {
        name: 'example-server',
        version: '1.0.0'
    },
    {
        capabilities: {
            prompts: {}
        }
    }
);

server.setRequestHandler(ListPromptsRequestSchema, async () =&amp;gt; {
    return {
        prompts: [
            {
                name: 'example-prompt',
                description: 'An example prompt template',
                arguments: [
                    {
                        name: 'arg1',
                        description: 'Example argument',
                        required: true
                    }
                ]
            }
        ]
    };
});

server.setRequestHandler(GetPromptRequestSchema, async request =&amp;gt; {
    if (request.params.name !== 'example-prompt') {
        throw new Error('Unknown prompt');
    }
    return {
        description: 'Example prompt',
        messages: [
            {
                role: 'user',
                content: {
                    type: 'text',
                    text: 'Example prompt text'
                }
            }
        ]
    };
});

const transport = new StdioServerTransport();
await server.connect(transport);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Eliciting User Input&lt;/h3&gt; 
&lt;p&gt;MCP servers can request additional information from users through the elicitation feature. This is useful for interactive workflows where the server needs user input or confirmation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;// Server-side: Restaurant booking tool that asks for alternatives
server.registerTool(
    'book-restaurant',
    {
        title: 'Book Restaurant',
        description: 'Book a table at a restaurant',
        inputSchema: {
            restaurant: z.string(),
            date: z.string(),
            partySize: z.number()
        },
        outputSchema: {
            success: z.boolean(),
            booking: z
                .object({
                    restaurant: z.string(),
                    date: z.string(),
                    partySize: z.number()
                })
                .optional(),
            alternatives: z.array(z.string()).optional()
        }
    },
    async ({ restaurant, date, partySize }) =&amp;gt; {
        // Check availability
        const available = await checkAvailability(restaurant, date, partySize);

        if (!available) {
            // Ask user if they want to try alternative dates
            const result = await server.server.elicitInput({
                message: `No tables available at ${restaurant} on ${date}. Would you like to check alternative dates?`,
                requestedSchema: {
                    type: 'object',
                    properties: {
                        checkAlternatives: {
                            type: 'boolean',
                            title: 'Check alternative dates',
                            description: 'Would you like me to check other dates?'
                        },
                        flexibleDates: {
                            type: 'string',
                            title: 'Date flexibility',
                            description: 'How flexible are your dates?',
                            enum: ['next_day', 'same_week', 'next_week'],
                            enumNames: ['Next day', 'Same week', 'Next week']
                        }
                    },
                    required: ['checkAlternatives']
                }
            });

            if (result.action === 'accept' &amp;amp;&amp;amp; result.content?.checkAlternatives) {
                const alternatives = await findAlternatives(restaurant, date, partySize, result.content.flexibleDates as string);
                const output = { success: false, alternatives };
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(output)
                        }
                    ],
                    structuredContent: output
                };
            }

            const output = { success: false };
            return {
                content: [
                    {
                        type: 'text',
                        text: JSON.stringify(output)
                    }
                ],
                structuredContent: output
            };
        }

        // Book the table
        await makeBooking(restaurant, date, partySize);
        const output = {
            success: true,
            booking: { restaurant, date, partySize }
        };
        return {
            content: [
                {
                    type: 'text',
                    text: JSON.stringify(output)
                }
            ],
            structuredContent: output
        };
    }
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Client-side: Handle elicitation requests&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;// This is a placeholder - implement based on your UI framework
async function getInputFromUser(
    message: string,
    schema: any
): Promise&amp;lt;{
    action: 'accept' | 'decline' | 'cancel';
    data?: Record&amp;lt;string, any&amp;gt;;
}&amp;gt; {
    // This should be implemented depending on the app
    throw new Error('getInputFromUser must be implemented for your platform');
}

client.setRequestHandler(ElicitRequestSchema, async request =&amp;gt; {
    const userResponse = await getInputFromUser(request.params.message, request.params.requestedSchema);

    return {
        action: userResponse.action,
        content: userResponse.action === 'accept' ? userResponse.data : undefined
    };
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Elicitation requires client support. Clients must declare the &lt;code&gt;elicitation&lt;/code&gt; capability during initialization.&lt;/p&gt; 
&lt;h3&gt;Writing MCP Clients&lt;/h3&gt; 
&lt;p&gt;The SDK provides a high-level client interface:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';

const transport = new StdioClientTransport({
    command: 'node',
    args: ['server.js']
});

const client = new Client({
    name: 'example-client',
    version: '1.0.0'
});

await client.connect(transport);

// List prompts
const prompts = await client.listPrompts();

// Get a prompt
const prompt = await client.getPrompt({
    name: 'example-prompt',
    arguments: {
        arg1: 'value'
    }
});

// List resources
const resources = await client.listResources();

// Read a resource
const resource = await client.readResource({
    uri: 'file:///example.txt'
});

// Call a tool
const result = await client.callTool({
    name: 'example-tool',
    arguments: {
        arg1: 'value'
    }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Proxy Authorization Requests Upstream&lt;/h3&gt; 
&lt;p&gt;You can proxy OAuth requests to an external authorization provider:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import express from 'express';
import { ProxyOAuthServerProvider } from '@modelcontextprotocol/sdk/server/auth/providers/proxyProvider.js';
import { mcpAuthRouter } from '@modelcontextprotocol/sdk/server/auth/router.js';

const app = express();

const proxyProvider = new ProxyOAuthServerProvider({
    endpoints: {
        authorizationUrl: 'https://auth.external.com/oauth2/v1/authorize',
        tokenUrl: 'https://auth.external.com/oauth2/v1/token',
        revocationUrl: 'https://auth.external.com/oauth2/v1/revoke'
    },
    verifyAccessToken: async token =&amp;gt; {
        return {
            token,
            clientId: '123',
            scopes: ['openid', 'email', 'profile']
        };
    },
    getClient: async client_id =&amp;gt; {
        return {
            client_id,
            redirect_uris: ['http://localhost:3000/callback']
        };
    }
});

app.use(
    mcpAuthRouter({
        provider: proxyProvider,
        issuerUrl: new URL('http://auth.external.com'),
        baseUrl: new URL('http://mcp.example.com'),
        serviceDocumentationUrl: new URL('https://docs.example.com/')
    })
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This setup allows you to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forward OAuth requests to an external provider&lt;/li&gt; 
 &lt;li&gt;Add custom token validation logic&lt;/li&gt; 
 &lt;li&gt;Manage client registrations&lt;/li&gt; 
 &lt;li&gt;Provide custom documentation URLs&lt;/li&gt; 
 &lt;li&gt;Maintain control over the OAuth flow while delegating to an external provider&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Backwards Compatibility&lt;/h3&gt; 
&lt;p&gt;Clients and servers with StreamableHttp transport can maintain &lt;a href="https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#backwards-compatibility"&gt;backwards compatibility&lt;/a&gt; with the deprecated HTTP+SSE transport (from protocol version 2024-11-05) as follows&lt;/p&gt; 
&lt;h4&gt;Client-Side Compatibility&lt;/h4&gt; 
&lt;p&gt;For clients that need to work with both Streamable HTTP and older SSE servers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StreamableHTTPClientTransport } from '@modelcontextprotocol/sdk/client/streamableHttp.js';
import { SSEClientTransport } from '@modelcontextprotocol/sdk/client/sse.js';
let client: Client | undefined = undefined;
const baseUrl = new URL(url);
try {
    client = new Client({
        name: 'streamable-http-client',
        version: '1.0.0'
    });
    const transport = new StreamableHTTPClientTransport(new URL(baseUrl));
    await client.connect(transport);
    console.log('Connected using Streamable HTTP transport');
} catch (error) {
    // If that fails with a 4xx error, try the older SSE transport
    console.log('Streamable HTTP connection failed, falling back to SSE transport');
    client = new Client({
        name: 'sse-client',
        version: '1.0.0'
    });
    const sseTransport = new SSEClientTransport(baseUrl);
    await client.connect(sseTransport);
    console.log('Connected using SSE transport');
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Server-Side Compatibility&lt;/h4&gt; 
&lt;p&gt;For servers that need to support both Streamable HTTP and older clients:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import express from 'express';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';

const server = new McpServer({
    name: 'backwards-compatible-server',
    version: '1.0.0'
});

// ... set up server resources, tools, and prompts ...

const app = express();
app.use(express.json());

// Store transports for each session type
const transports = {
    streamable: {} as Record&amp;lt;string, StreamableHTTPServerTransport&amp;gt;,
    sse: {} as Record&amp;lt;string, SSEServerTransport&amp;gt;
};

// Modern Streamable HTTP endpoint
app.all('/mcp', async (req, res) =&amp;gt; {
    // Handle Streamable HTTP transport for modern clients
    // Implementation as shown in the "With Session Management" example
    // ...
});

// Legacy SSE endpoint for older clients
app.get('/sse', async (req, res) =&amp;gt; {
    // Create SSE transport for legacy clients
    const transport = new SSEServerTransport('/messages', res);
    transports.sse[transport.sessionId] = transport;

    res.on('close', () =&amp;gt; {
        delete transports.sse[transport.sessionId];
    });

    await server.connect(transport);
});

// Legacy message endpoint for older clients
app.post('/messages', async (req, res) =&amp;gt; {
    const sessionId = req.query.sessionId as string;
    const transport = transports.sse[sessionId];
    if (transport) {
        await transport.handlePostMessage(req, res, req.body);
    } else {
        res.status(400).send('No transport found for sessionId');
    }
});

app.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The SSE transport is now deprecated in favor of Streamable HTTP. New implementations should use Streamable HTTP, and existing SSE implementations should plan to migrate.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://modelcontextprotocol.io"&gt;Model Context Protocol documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://spec.modelcontextprotocol.io"&gt;MCP Specification&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers"&gt;Example Servers&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Issues and pull requests are welcome on GitHub at &lt;a href="https://github.com/modelcontextprotocol/typescript-sdk"&gt;https://github.com/modelcontextprotocol/typescript-sdk&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License—see the &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>