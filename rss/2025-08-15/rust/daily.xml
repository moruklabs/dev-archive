<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Thu, 14 Aug 2025 01:39:13 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>block/goose</title>
      <link>https://github.com/block/goose</link>
      <description>&lt;p&gt;an open source, extensible AI agent that goes beyond code suggestions - install, execute, edit, and test with any LLM&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;codename goose&lt;/h1&gt; 
 &lt;p&gt;&lt;em&gt;a local, extensible, open source AI agent that automates engineering tasks&lt;/em&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt; &lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://discord.gg/7GaTvbDwga"&gt; &lt;img src="https://img.shields.io/discord/1287729918100246654?logo=discord&amp;amp;logoColor=white&amp;amp;label=Join+Us&amp;amp;color=blueviolet" alt="Discord" /&gt; &lt;/a&gt; &lt;a href="https://github.com/block/goose/actions/workflows/ci.yml"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/block/goose/ci.yml?branch=main" alt="CI" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;goose is your on-machine AI agent, capable of automating complex development tasks from start to finish. More than just code suggestions, goose can build entire projects from scratch, write and execute code, debug failures, orchestrate workflows, and interact with external APIs - &lt;em&gt;autonomously&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Whether you're prototyping an idea, refining existing code, or managing intricate engineering pipelines, goose adapts to your workflow and executes tasks with precision.&lt;/p&gt; 
&lt;p&gt;Designed for maximum flexibility, goose works with any LLM and supports multi-model configuration to optimize performance and cost, seamlessly integrates with MCP servers, and is available as both a desktop app as well as CLI - making it the ultimate AI assistant for developers who want to move faster and focus on innovation.&lt;/p&gt; 
&lt;h1&gt;Quick Links&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/getting-started/installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/getting-started"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Goose Around with Us&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/block-opensource"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/@blockopensource"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/block-opensource"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/blockopensource"&gt;Twitter/X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bsky.app/profile/opensource.block.xyz"&gt;Bluesky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://njump.me/opensource@block.xyz"&gt;Nostr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>BurntSushi/ripgrep</title>
      <link>https://github.com/BurntSushi/ripgrep</link>
      <description>&lt;p&gt;ripgrep recursively searches directories for a regex pattern while respecting your gitignore&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ripgrep (rg)&lt;/h2&gt; 
&lt;p&gt;ripgrep is a line-oriented search tool that recursively searches the current directory for a regex pattern. By default, ripgrep will respect gitignore rules and automatically skip hidden files/directories and binary files. (To disable all automatic filtering by default, use &lt;code&gt;rg -uuu&lt;/code&gt;.) ripgrep has first class support on Windows, macOS and Linux, with binary downloads available for &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;every release&lt;/a&gt;. ripgrep is similar to other popular search tools like The Silver Searcher, ack and grep.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/actions"&gt;&lt;img src="https://github.com/BurntSushi/ripgrep/workflows/ci/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/ripgrep"&gt;&lt;img src="https://img.shields.io/crates/v/ripgrep.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://repology.org/project/ripgrep/badges"&gt;&lt;img src="https://repology.org/badge/tiny-repos/ripgrep.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Dual-licensed under MIT or the &lt;a href="https://unlicense.org"&gt;UNLICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CHANGELOG&lt;/h3&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt; for a release history.&lt;/p&gt; 
&lt;h3&gt;Documentation quick links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md"&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/regex/1/regex/#syntax"&gt;Regex syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;Configuration files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#complete"&gt;Shell completions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#building"&gt;Building&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#translations"&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Screenshot of search results&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://burntsushi.net/stuff/ripgrep1.png"&gt;&lt;img src="https://burntsushi.net/stuff/ripgrep1.png" alt="A screenshot of a sample search with ripgrep" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Quick examples comparing tools&lt;/h3&gt; 
&lt;p&gt;This example searches the entire &lt;a href="https://github.com/BurntSushi/linux"&gt;Linux kernel source tree&lt;/a&gt; (after running &lt;code&gt;make defconfig &amp;amp;&amp;amp; make -j8&lt;/code&gt;) for &lt;code&gt;[A-Z]+_SUSPEND&lt;/code&gt;, where all matches must be words. Timings were collected on a system with an Intel i9-12900K 5.2 GHz.&lt;/p&gt; 
&lt;p&gt;Please remember that a single benchmark is never enough! See my &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;blog post on ripgrep&lt;/a&gt; for a very detailed comparison with more benchmarks and analysis.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.082s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/p-ranav/hypergrep"&gt;hypergrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hgrep -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.167s (2.04x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;git grep -P -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.273s (3.34x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;The Silver Searcher&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ag -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;534&lt;/td&gt; 
   &lt;td&gt;0.443s (5.43x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r --ignore-files --no-hidden -I -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.639s (7.82x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.727s (8.91x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;2.670s (32.70x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/beyondgrep/ack3"&gt;ack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ack -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;2677&lt;/td&gt; 
   &lt;td&gt;2.935s (35.94x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Here's another benchmark on the same corpus as above that disregards gitignore files and searches with a whitelist instead. The corpus is the same as in the previous benchmark, and the flags passed to each command ensure that they are doing equivalent work:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -uuu -tc -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.063s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.607s (9.62x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grep -E -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.674s (10.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Now we'll move to searching on single large file. Here is a straight-up comparison between ripgrep, ugrep and GNU grep on a file cached in memory (~13GB, &lt;a href="http://opus.nlpl.eu/download.php?f=OpenSubtitles/v2018/mono/OpenSubtitles.raw.en.gz"&gt;&lt;code&gt;OpenSubtitles.raw.en.gz&lt;/code&gt;&lt;/a&gt;, decompressed):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.042s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;1.339s (1.28x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 egrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;6.577s (6.31x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;In the above benchmark, passing the &lt;code&gt;-n&lt;/code&gt; flag (for showing line numbers) increases the times to &lt;code&gt;1.664s&lt;/code&gt; for ripgrep and &lt;code&gt;9.484s&lt;/code&gt; for GNU grep. ugrep times are unaffected by the presence or absence of &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Beware of performance cliffs though:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.053s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;6.234s (5.92x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;28.973s (27.51x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;And performance can drop precipitously across the board when searching big files for patterns without any opportunities for literal optimizations:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;15.569s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;21.857s (1.40x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;32.409s (2.08x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6795&lt;/td&gt; 
   &lt;td&gt;8m30s (32.74x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Finally, high match counts also tend to both tank performance and smooth out the differences between tools (because performance is dominated by how quickly one can handle a match and not the algorithm used to detect the match, generally speaking):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;6.948s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;11.721s (1.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;15.217s (2.19x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Why should I use ripgrep?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;It can replace many use cases served by other search tools because it contains most of their features and is generally faster. (See &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#posix4ever"&gt;the FAQ&lt;/a&gt; for more details on whether ripgrep can truly replace grep.)&lt;/li&gt; 
 &lt;li&gt;Like other tools specialized to code search, ripgrep defaults to &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#recursive-search"&gt;recursive search&lt;/a&gt; and does &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#automatic-filtering"&gt;automatic filtering&lt;/a&gt;. Namely, ripgrep won't search files ignored by your &lt;code&gt;.gitignore&lt;/code&gt;/&lt;code&gt;.ignore&lt;/code&gt;/&lt;code&gt;.rgignore&lt;/code&gt; files, it won't search hidden files and it won't search binary files. Automatic filtering can be disabled with &lt;code&gt;rg -uuu&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;ripgrep can &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#manual-filtering-file-types"&gt;search specific types of files&lt;/a&gt;. For example, &lt;code&gt;rg -tpy foo&lt;/code&gt; limits your search to Python files and &lt;code&gt;rg -Tjs foo&lt;/code&gt; excludes JavaScript files from your search. ripgrep can be taught about new file types with custom matching rules.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports many features found in &lt;code&gt;grep&lt;/code&gt;, such as showing the context of search results, searching multiple patterns, highlighting matches with color and full Unicode support. Unlike GNU grep, ripgrep stays fast while supporting Unicode (which is always on).&lt;/li&gt; 
 &lt;li&gt;ripgrep has optional support for switching its regex engine to use PCRE2. Among other things, this makes it possible to use look-around and backreferences in your patterns, which are not supported in ripgrep's default regex engine. PCRE2 support can be enabled with &lt;code&gt;-P/--pcre2&lt;/code&gt; (use PCRE2 always) or &lt;code&gt;--auto-hybrid-regex&lt;/code&gt; (use PCRE2 only if needed). An alternative syntax is provided via the &lt;code&gt;--engine (default|pcre2|auto)&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;ripgrep has &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#replacements"&gt;rudimentary support for replacements&lt;/a&gt;, which permit rewriting output based on what was matched.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#file-encoding"&gt;searching files in text encodings&lt;/a&gt; other than UTF-8, such as UTF-16, latin-1, GBK, EUC-JP, Shift_JIS and more. (Some support for automatically detecting UTF-16 is provided. Other text encodings must be specifically specified with the &lt;code&gt;-E/--encoding&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;ripgrep supports searching files compressed in a common format (brotli, bzip2, gzip, lz4, lzma, xz, or zstandard) with the &lt;code&gt;-z/--search-zip&lt;/code&gt; flag.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#preprocessor"&gt;arbitrary input preprocessing filters&lt;/a&gt; which could be PDF text extraction, less supported decompression, decrypting, automatic encoding detection and so on.&lt;/li&gt; 
 &lt;li&gt;ripgrep can be configured via a &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;configuration file&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In other words, use ripgrep if you like speed, filtering by default, fewer bugs and Unicode support.&lt;/p&gt; 
&lt;h3&gt;Why shouldn't I use ripgrep?&lt;/h3&gt; 
&lt;p&gt;Despite initially not wanting to add every feature under the sun to ripgrep, over time, ripgrep has grown support for most features found in other file searching tools. This includes searching for results spanning across multiple lines, and opt-in support for PCRE2, which provides look-around and backreference support.&lt;/p&gt; 
&lt;p&gt;At this point, the primary reasons not to use ripgrep probably consist of one or more of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need a portable and ubiquitous tool. While ripgrep works on Windows, macOS and Linux, it is not ubiquitous and it does not conform to any standard such as POSIX. The best tool for this job is good old grep.&lt;/li&gt; 
 &lt;li&gt;There still exists some other feature (or bug) not listed in this README that you rely on that's in another tool that isn't in ripgrep.&lt;/li&gt; 
 &lt;li&gt;There is a performance edge case where ripgrep doesn't do well where another tool does do well. (Please file a bug report!)&lt;/li&gt; 
 &lt;li&gt;ripgrep isn't possible to install on your machine or isn't available for your platform. (Please file a bug report!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Is it really faster than everything else?&lt;/h3&gt; 
&lt;p&gt;Generally, yes. A large number of benchmarks with detailed analysis for each is &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;available on my blog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Summarizing, ripgrep is fast because:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is built on top of &lt;a href="https://github.com/rust-lang/regex"&gt;Rust's regex engine&lt;/a&gt;. Rust's regex engine uses finite automata, SIMD and aggressive literal optimizations to make searching very fast. (PCRE2 support can be opted into with the &lt;code&gt;-P/--pcre2&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;Rust's regex library maintains performance with full Unicode support by building UTF-8 decoding directly into its deterministic finite automaton engine.&lt;/li&gt; 
 &lt;li&gt;It supports searching with either memory maps or by searching incrementally with an intermediate buffer. The former is better for single files and the latter is better for large directories. ripgrep chooses the best searching strategy for you automatically.&lt;/li&gt; 
 &lt;li&gt;Applies your ignore patterns in &lt;code&gt;.gitignore&lt;/code&gt; files using a &lt;a href="https://docs.rs/regex/1/regex/struct.RegexSet.html"&gt;&lt;code&gt;RegexSet&lt;/code&gt;&lt;/a&gt;. That means a single file path can be matched against multiple glob patterns simultaneously.&lt;/li&gt; 
 &lt;li&gt;It uses a lock-free parallel recursive directory iterator, courtesy of &lt;a href="https://docs.rs/crossbeam"&gt;&lt;code&gt;crossbeam&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.rs/ignore"&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature comparison&lt;/h3&gt; 
&lt;p&gt;Andy Lester, author of &lt;a href="https://beyondgrep.com/"&gt;ack&lt;/a&gt;, has published an excellent table comparing the features of ack, ag, git-grep, GNU grep and ripgrep: &lt;a href="https://beyondgrep.com/feature-comparison/"&gt;https://beyondgrep.com/feature-comparison/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Note that ripgrep has grown a few significant new features recently that are not yet present in Andy's table. This includes, but is not limited to, configuration files, passthru, support for searching compressed files, multiline search and opt-in fancy regex support via PCRE2.&lt;/p&gt; 
&lt;h3&gt;Playground&lt;/h3&gt; 
&lt;p&gt;If you'd like to try ripgrep before installing, there's an unofficial &lt;a href="https://codapi.org/ripgrep/"&gt;playground&lt;/a&gt; and an &lt;a href="https://codapi.org/try/ripgrep/"&gt;interactive tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have any questions about these, please open an issue in the &lt;a href="https://github.com/nalgeon/tryxinyminutes"&gt;tutorial repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;The binary name for ripgrep is &lt;code&gt;rg&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;Archives of precompiled binaries for ripgrep are available for Windows, macOS and Linux.&lt;/a&gt;&lt;/strong&gt; Linux and Windows binaries are static executables. Users of platforms not explicitly mentioned below are advised to download one of these archives.&lt;/p&gt; 
&lt;p&gt;If you're a &lt;strong&gt;macOS Homebrew&lt;/strong&gt; or a &lt;strong&gt;Linuxbrew&lt;/strong&gt; user, then you can install ripgrep from homebrew-core:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;MacPorts&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.macports.org/ports.php?by=name&amp;amp;substr=ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo port install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Chocolatey&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://chocolatey.org/packages/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ choco install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Scoop&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/ripgrep.json"&gt;official bucket&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Winget&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/b/BurntSushi/ripgrep"&gt;winget-pkgs&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ winget install BurntSushi.ripgrep.MSVC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Arch Linux&lt;/strong&gt; user, then you can install ripgrep from the official repos:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -S ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Gentoo&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.gentoo.org/packages/sys-apps/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo emerge sys-apps/ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Fedora&lt;/strong&gt; user, you can install ripgrep from official repositories.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;openSUSE&lt;/strong&gt; user, ripgrep is included in &lt;strong&gt;openSUSE Tumbleweed&lt;/strong&gt; and &lt;strong&gt;openSUSE Leap&lt;/strong&gt; since 15.1.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo zypper install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;RHEL/CentOS 7/8&lt;/strong&gt; user, you can install ripgrep from &lt;a href="https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/"&gt;copr&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo yum install -y yum-utils
$ sudo yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo
$ sudo yum install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Nix&lt;/strong&gt; user, you can install ripgrep from &lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/text/ripgrep/default.nix"&gt;nixpkgs&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ nix-env --install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Flox&lt;/strong&gt; user, you can install ripgrep as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ flox install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Guix&lt;/strong&gt; user, you can install ripgrep from the official package collection:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ guix install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Debian&lt;/strong&gt; user (or a user of a Debian derivative like &lt;strong&gt;Ubuntu&lt;/strong&gt;), then ripgrep can be installed using a binary &lt;code&gt;.deb&lt;/code&gt; file provided in each &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;ripgrep release&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ curl -LO https://github.com/BurntSushi/ripgrep/releases/download/14.1.0/ripgrep_14.1.1-1_amd64.deb
$ sudo dpkg -i ripgrep_14.1.1-1_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you run Debian stable, ripgrep is &lt;a href="https://tracker.debian.org/pkg/rust-ripgrep"&gt;officially maintained by Debian&lt;/a&gt;, although its version may be older than the &lt;code&gt;deb&lt;/code&gt; package available in the previous step.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Ubuntu Cosmic (18.10)&lt;/strong&gt; (or newer) user, ripgrep is &lt;a href="https://launchpad.net/ubuntu/+source/rust-ripgrep"&gt;available&lt;/a&gt; using the same packaging as Debian:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(N.B. Various snaps for ripgrep on Ubuntu are also available, but none of them seem to work right and generate a number of very strange bug reports that I don't know how to fix and don't have the time to fix. Therefore, it is no longer a recommended installation option.)&lt;/p&gt; 
&lt;p&gt;If you're an &lt;strong&gt;ALT&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.altlinux.org/en/search?name=ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;FreeBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.freshports.org/textproc/ripgrep/"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkg install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;OpenBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://openports.se/textproc/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ doas pkg_add ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;NetBSD&lt;/strong&gt; user, then you can install ripgrep from &lt;a href="https://pkgsrc.se/textproc/ripgrep"&gt;pkgsrc&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgin install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_64&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/haikuports/haikuports/tree/master/sys-apps/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_gcc2&lt;/strong&gt; user, then you can install ripgrep from the same port as Haiku x86_64 using the x86 secondary architecture build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep_x86
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Void Linux&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://voidlinux.org/packages/?arch=x86_64&amp;amp;q=ripgrep"&gt;official repository&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo xbps-install -Syv ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Rust programmer&lt;/strong&gt;, ripgrep can be installed with &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Note that the minimum supported version of Rust for ripgrep is &lt;strong&gt;1.88.0&lt;/strong&gt;, although ripgrep may work with older versions.&lt;/li&gt; 
 &lt;li&gt;Note that the binary may be bigger than expected because it contains debug symbols. This is intentional. To remove debug symbols and therefore reduce the file size, run &lt;code&gt;strip&lt;/code&gt; on the binary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, one can use &lt;a href="https://github.com/cargo-bins/cargo-binstall"&gt;&lt;code&gt;cargo binstall&lt;/code&gt;&lt;/a&gt; to install a ripgrep binary directly from GitHub:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo binstall ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;ripgrep is written in Rust, so you'll need to grab a &lt;a href="https://www.rust-lang.org/"&gt;Rust installation&lt;/a&gt; in order to compile it. ripgrep compiles with Rust 1.88.0 (stable) or newer. In general, ripgrep tracks the latest stable release of the Rust compiler.&lt;/p&gt; 
&lt;p&gt;To build ripgrep:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/BurntSushi/ripgrep
$ cd ripgrep
$ cargo build --release
$ ./target/release/rg --version
0.1.3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the past, ripgrep supported a &lt;code&gt;simd-accel&lt;/code&gt; Cargo feature when using a Rust nightly compiler. This only benefited UTF-16 transcoding. Since it required unstable features, this build mode was prone to breakage. Because of that, support for it has been removed. If you want SIMD optimizations for UTF-16 transcoding, then you'll have to petition the &lt;a href="https://github.com/hsivonen/encoding_rs"&gt;&lt;code&gt;encoding_rs&lt;/code&gt;&lt;/a&gt; project to use stable APIs.&lt;/p&gt; 
&lt;p&gt;Finally, optional PCRE2 support can be built with ripgrep by enabling the &lt;code&gt;pcre2&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo build --release --features 'pcre2'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enabling the PCRE2 feature works with a stable Rust compiler and will attempt to automatically find and link with your system's PCRE2 library via &lt;code&gt;pkg-config&lt;/code&gt;. If one doesn't exist, then ripgrep will build PCRE2 from source using your system's C compiler and then statically link it into the final executable. Static linking can be forced even when there is an available PCRE2 system library by either building ripgrep with the MUSL target or by setting &lt;code&gt;PCRE2_SYS_STATIC=1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;ripgrep can be built with the MUSL target on Linux by first installing the MUSL library on your system (consult your friendly neighborhood package manager). Then you just need to add MUSL support to your Rust toolchain and rebuild ripgrep, which yields a fully static executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ rustup target add x86_64-unknown-linux-musl
$ cargo build --release --target x86_64-unknown-linux-musl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Applying the &lt;code&gt;--features&lt;/code&gt; flag from above works as expected. If you want to build a static executable with MUSL and with PCRE2, then you will need to have &lt;code&gt;musl-gcc&lt;/code&gt; installed, which might be in a separate package from the actual MUSL library, depending on your Linux distribution.&lt;/p&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;p&gt;ripgrep is relatively well-tested, including both unit tests and integration tests. To run the full test suite, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo test --all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;from the repository root.&lt;/p&gt; 
&lt;h3&gt;Related tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dandavison/delta"&gt;delta&lt;/a&gt; is a syntax highlighting pager that supports the &lt;code&gt;rg --json&lt;/code&gt; output format. So all you need to do to make it work is &lt;code&gt;rg --json pattern | delta&lt;/code&gt;. See &lt;a href="https://dandavison.github.io/delta/grep.html"&gt;delta's manual section on grep&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Vulnerability reporting&lt;/h3&gt; 
&lt;p&gt;For reporting a security vulnerability, please &lt;a href="https://blog.burntsushi.net/about/"&gt;contact Andrew Gallant&lt;/a&gt;. The contact page has my email address and PGP public key if you wish to send an encrypted message.&lt;/p&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;p&gt;The following is a list of known translations of ripgrep's documentation. These are unofficially maintained and may not be up to date.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chinanf-boy/ripgrep-zh#%E6%9B%B4%E6%96%B0-"&gt;Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/UltiRequiem/traducciones/tree/master/ripgrep"&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>tree-sitter/tree-sitter</title>
      <link>https://github.com/tree-sitter/tree-sitter</link>
      <description>&lt;p&gt;An incremental parsing system for programming tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tree-sitter&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://zenodo.org/badge/latestdoi/14164618"&gt;&lt;img src="https://zenodo.org/badge/14164618.svg?sanitize=true" alt="DOI" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/w7nTvsVJhm"&gt;&lt;img src="https://img.shields.io/discord/1063097320771698699?logo=discord&amp;amp;label=discord" alt="discord" /&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/#tree-sitter-chat:matrix.org"&gt;&lt;img src="https://img.shields.io/matrix/tree-sitter-chat%3Amatrix.org?logo=matrix&amp;amp;label=matrix" alt="matrix" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;General&lt;/strong&gt; enough to parse any programming language&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; enough to parse on every keystroke in a text editor&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Robust&lt;/strong&gt; enough to provide useful results even in the presence of syntax errors&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dependency-free&lt;/strong&gt; so that the runtime library (which is written in pure C) can be embedded in any application&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://tree-sitter.github.io"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tree-sitter/tree-sitter/master/lib/binding_rust/README.md"&gt;Rust binding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tree-sitter/tree-sitter/master/lib/binding_web/README.md"&gt;WASM binding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tree-sitter/tree-sitter/master/crates/cli/README.md"&gt;Command-line interface&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rathole-org/rathole</title>
      <link>https://github.com/rathole-org/rathole</link>
      <description>&lt;p&gt;A lightweight and high-performance reverse proxy for NAT traversal, written in Rust. An alternative to frp and ngrok.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rathole&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/rathole-logo.png" alt="rathole-logo" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rapiz1/rathole/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/rapiz1/rathole" alt="GitHub stars" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rapiz1/rathole/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/rapiz1/rathole" alt="GitHub release (latest SemVer)" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/rapiz1/rathole/rust.yml?branch=main" alt="GitHub Workflow Status (branch)" /&gt; &lt;a href="https://github.com/rapiz1/rathole/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/rapiz1/rathole/total" alt="GitHub all releases" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/rapiz1/rathole"&gt;&lt;img src="https://img.shields.io/docker/pulls/rapiz1/rathole" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://gitter.im/rapiz1/rathole?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/rapiz1/rathole.svg?sanitize=true" alt="Join the chat at https://gitter.im/rapiz1/rathole" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/README.md"&gt;English&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/README-zh.md"&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A secure, stable and high-performance reverse proxy for NAT traversal, written in Rust&lt;/p&gt; 
&lt;p&gt;rathole, like &lt;a href="https://github.com/fatedier/frp"&gt;frp&lt;/a&gt; and &lt;a href="https://github.com/inconshreveable/ngrok"&gt;ngrok&lt;/a&gt;, can help to expose the service on the device behind the NAT to the Internet, via a server with a public IP.&lt;/p&gt; 
&lt;!-- TOC --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#rathole"&gt;rathole&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#configuration"&gt;Configuration&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#tuning"&gt;Tuning&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#benchmark"&gt;Benchmark&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#planning"&gt;Planning&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /TOC --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt; Much higher throughput can be achieved than frp, and more stable when handling a large volume of connections. See &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#benchmark"&gt;Benchmark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Low Resource Consumption&lt;/strong&gt; Consumes much fewer memory than similar tools. See &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#benchmark"&gt;Benchmark&lt;/a&gt;. &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/build-guide.md"&gt;The binary can be&lt;/a&gt; &lt;strong&gt;as small as ~500KiB&lt;/strong&gt; to fit the constraints of devices, like embedded devices as routers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; Tokens of services are mandatory and service-wise. The server and clients are responsible for their own configs. With the optional Noise Protocol, encryption can be configured at ease. No need to create a self-signed certificate! TLS is also supported.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hot Reload&lt;/strong&gt; Services can be added or removed dynamically by hot-reloading the configuration file. HTTP API is WIP.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;A full-powered &lt;code&gt;rathole&lt;/code&gt; can be obtained from the &lt;a href="https://github.com/rapiz1/rathole/releases"&gt;release&lt;/a&gt; page. Or &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/build-guide.md"&gt;build from source&lt;/a&gt; &lt;strong&gt;for other platforms and minimizing the binary&lt;/strong&gt;. A &lt;a href="https://hub.docker.com/r/rapiz1/rathole"&gt;Docker image&lt;/a&gt; is also available.&lt;/p&gt; 
&lt;p&gt;The usage of &lt;code&gt;rathole&lt;/code&gt; is very similar to frp. If you have experience with the latter, then the configuration is very easy for you. The only difference is that configuration of a service is split into the client side and the server side, and a token is mandatory.&lt;/p&gt; 
&lt;p&gt;To use &lt;code&gt;rathole&lt;/code&gt;, you need a server with a public IP, and a device behind the NAT, where some services that need to be exposed to the Internet.&lt;/p&gt; 
&lt;p&gt;Assuming you have a NAS at home behind the NAT, and want to expose its ssh service to the Internet:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;On the server which has a public IP&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Create &lt;code&gt;server.toml&lt;/code&gt; with the following content and accommodate it to your needs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# server.toml
[server]
bind_addr = "0.0.0.0:2333" # `2333` specifies the port that rathole listens for clients

[server.services.my_nas_ssh]
token = "use_a_secret_that_only_you_know" # Token that is used to authenticate the client for the service. Change to an arbitrary value.
bind_addr = "0.0.0.0:5202" # `5202` specifies the port that exposes `my_nas_ssh` to the Internet
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./rathole server.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;On the host which is behind the NAT (your NAS)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Create &lt;code&gt;client.toml&lt;/code&gt; with the following content and accommodate it to your needs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# client.toml
[client]
remote_addr = "myserver.com:2333" # The address of the server. The port must be the same with the port in `server.bind_addr`

[client.services.my_nas_ssh]
token = "use_a_secret_that_only_you_know" # Must be the same with the server to pass the validation
local_addr = "127.0.0.1:22" # The address of the service that needs to be forwarded
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./rathole client.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Now the client will try to connect to the server &lt;code&gt;myserver.com&lt;/code&gt; on port &lt;code&gt;2333&lt;/code&gt;, and any traffic to &lt;code&gt;myserver.com:5202&lt;/code&gt; will be forwarded to the client's port &lt;code&gt;22&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;So you can &lt;code&gt;ssh myserver.com:5202&lt;/code&gt; to ssh to your NAS.&lt;/p&gt; 
&lt;p&gt;To run &lt;code&gt;rathole&lt;/code&gt; run as a background service on Linux, checkout the &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/examples/systemd"&gt;systemd examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;rathole&lt;/code&gt; can automatically determine to run in the server mode or the client mode, according to the content of the configuration file, if only one of &lt;code&gt;[server]&lt;/code&gt; and &lt;code&gt;[client]&lt;/code&gt; block is present, like the example in &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/#quickstart"&gt;Quickstart&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;But the &lt;code&gt;[client]&lt;/code&gt; and &lt;code&gt;[server]&lt;/code&gt; block can also be put in one file. Then on the server side, run &lt;code&gt;rathole --server config.toml&lt;/code&gt; and on the client side, run &lt;code&gt;rathole --client config.toml&lt;/code&gt; to explicitly tell &lt;code&gt;rathole&lt;/code&gt; the running mode.&lt;/p&gt; 
&lt;p&gt;Before heading to the full configuration specification, it's recommend to skim &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/examples"&gt;the configuration examples&lt;/a&gt; to get a feeling of the configuration format.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/transport.md"&gt;Transport&lt;/a&gt; for more details about encryption and the &lt;code&gt;transport&lt;/code&gt; block.&lt;/p&gt; 
&lt;p&gt;Here is the full configuration specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[client]
remote_addr = "example.com:2333" # Necessary. The address of the server
default_token = "default_token_if_not_specify" # Optional. The default token of services, if they don't define their own ones
heartbeat_timeout = 40 # Optional. Set to 0 to disable the application-layer heartbeat test. The value must be greater than `server.heartbeat_interval`. Default: 40 seconds
retry_interval = 1 # Optional. The interval between retry to connect to the server. Default: 1 second

[client.transport] # The whole block is optional. Specify which transport to use
type = "tcp" # Optional. Possible values: ["tcp", "tls", "noise"]. Default: "tcp"

[client.transport.tcp] # Optional. Also affects `noise` and `tls`
proxy = "socks5://user:passwd@127.0.0.1:1080" # Optional. The proxy used to connect to the server. `http` and `socks5` is supported.
nodelay = true # Optional. Determine whether to enable TCP_NODELAY, if applicable, to improve the latency but decrease the bandwidth. Default: true
keepalive_secs = 20 # Optional. Specify `tcp_keepalive_time` in `tcp(7)`, if applicable. Default: 20 seconds
keepalive_interval = 8 # Optional. Specify `tcp_keepalive_intvl` in `tcp(7)`, if applicable. Default: 8 seconds

[client.transport.tls] # Necessary if `type` is "tls"
trusted_root = "ca.pem" # Necessary. The certificate of CA that signed the server's certificate
hostname = "example.com" # Optional. The hostname that the client uses to validate the certificate. If not set, fallback to `client.remote_addr`

[client.transport.noise] # Noise protocol. See `docs/transport.md` for further explanation
pattern = "Noise_NK_25519_ChaChaPoly_BLAKE2s" # Optional. Default value as shown
local_private_key = "key_encoded_in_base64" # Optional
remote_public_key = "key_encoded_in_base64" # Optional

[client.transport.websocket] # Necessary if `type` is "websocket"
tls = true # If `true` then it will use settings in `client.transport.tls`

[client.services.service1] # A service that needs forwarding. The name `service1` can change arbitrarily, as long as identical to the name in the server's configuration
type = "tcp" # Optional. The protocol that needs forwarding. Possible values: ["tcp", "udp"]. Default: "tcp"
token = "whatever" # Necessary if `client.default_token` not set
local_addr = "127.0.0.1:1081" # Necessary. The address of the service that needs to be forwarded
nodelay = true # Optional. Override the `client.transport.nodelay` per service
retry_interval = 1 # Optional. The interval between retry to connect to the server. Default: inherits the global config

[client.services.service2] # Multiple services can be defined
local_addr = "127.0.0.1:1082"

[server]
bind_addr = "0.0.0.0:2333" # Necessary. The address that the server listens for clients. Generally only the port needs to be change.
default_token = "default_token_if_not_specify" # Optional
heartbeat_interval = 30 # Optional. The interval between two application-layer heartbeat. Set to 0 to disable sending heartbeat. Default: 30 seconds

[server.transport] # Same as `[client.transport]`
type = "tcp"

[server.transport.tcp] # Same as the client
nodelay = true
keepalive_secs = 20
keepalive_interval = 8

[server.transport.tls] # Necessary if `type` is "tls"
pkcs12 = "identify.pfx" # Necessary. pkcs12 file of server's certificate and private key
pkcs12_password = "password" # Necessary. Password of the pkcs12 file

[server.transport.noise] # Same as `[client.transport.noise]`
pattern = "Noise_NK_25519_ChaChaPoly_BLAKE2s"
local_private_key = "key_encoded_in_base64"
remote_public_key = "key_encoded_in_base64"

[server.transport.websocket] # Necessary if `type` is "websocket"
tls = true # If `true` then it will use settings in `server.transport.tls`

[server.services.service1] # The service name must be identical to the client side
type = "tcp" # Optional. Same as the client `[client.services.X.type]
token = "whatever" # Necessary if `server.default_token` not set
bind_addr = "0.0.0.0:8081" # Necessary. The address of the service is exposed at. Generally only the port needs to be change.
nodelay = true # Optional. Same as the client

[server.services.service2]
bind_addr = "0.0.0.1:8082"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Logging&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;rathole&lt;/code&gt;, like many other Rust programs, use environment variables to control the logging level. &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;trace&lt;/code&gt; are available.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;RUST_LOG=error ./rathole config.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will run &lt;code&gt;rathole&lt;/code&gt; with only error level logging.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;RUST_LOG&lt;/code&gt; is not present, the default logging level is &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Tuning&lt;/h3&gt; 
&lt;p&gt;From v0.4.7, rathole enables TCP_NODELAY by default, which should benefit the latency and interactive applications like rdp, Minecraft servers. However, it slightly decreases the bandwidth.&lt;/p&gt; 
&lt;p&gt;If the bandwidth is more important, TCP_NODELAY can be opted out with &lt;code&gt;nodelay = false&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;rathole has similar latency to &lt;a href="https://github.com/fatedier/frp"&gt;frp&lt;/a&gt;, but can handle a more connections, provide larger bandwidth, with less memory usage.&lt;/p&gt; 
&lt;p&gt;For more details, see the separate page &lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/benchmark.md"&gt;Benchmark&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;However, don't take it from here that &lt;code&gt;rathole&lt;/code&gt; can magically make your forwarded service faster several times than before.&lt;/strong&gt; The benchmark is done on local loopback, indicating the performance when the task is cpu-bounded. One can gain quite a improvement if the network is not the bottleneck. Unfortunately, that's not true for many users. In that case, the main benefit is lower resource consumption, while the bandwidth and the latency may not improved significantly.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/http_throughput.svg?sanitize=true" alt="http_throughput" /&gt; &lt;img src="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/tcp_bitrate.svg?sanitize=true" alt="tcp_bitrate" /&gt; &lt;img src="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/udp_bitrate.svg?sanitize=true" alt="udp_bitrate" /&gt; &lt;img src="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/mem-graph.png" alt="mem" /&gt;&lt;/p&gt; 
&lt;h2&gt;Planning&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; HTTP APIs for configuration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/rathole-org/rathole/main/docs/out-of-scope.md"&gt;Out of Scope&lt;/a&gt; lists features that are not planned to be implemented and why.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cocoindex-io/cocoindex</title>
      <link>https://github.com/cocoindex-io/cocoindex</link>
      <description>&lt;p&gt;Data transformation framework for AI. Ultra performant, with incremental processing.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://cocoindex.io/images/github.svg?sanitize=true" alt="CocoIndex" /&gt; &lt;/p&gt; 
&lt;h1 align="center"&gt;Data transformation for AI&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/cocoindex-io/cocoindex"&gt;&lt;img src="https://img.shields.io/github/stars/cocoindex-io/cocoindex?color=5B5BD6" alt="GitHub" /&gt;&lt;/a&gt; &lt;a href="https://cocoindex.io/docs/getting_started/quickstart"&gt;&lt;img src="https://img.shields.io/badge/Documentation-394e79?logo=readthedocs&amp;amp;logoColor=00B9FF" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%202.0-5B5BD6?logoColor=white" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/cocoindex/"&gt;&lt;img src="https://img.shields.io/pypi/v/cocoindex?color=5B5BD6" alt="PyPI version" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;!--[![PyPI - Downloads](https://img.shields.io/pypi/dm/cocoindex)](https://pypistats.org/packages/cocoindex) --&gt; 
 &lt;p&gt;&lt;a href="https://pepy.tech/projects/cocoindex"&gt;&lt;img src="https://static.pepy.tech/badge/cocoindex/month" alt="PyPI Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cocoindex-io/cocoindex/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/cocoindex-io/cocoindex/actions/workflows/CI.yml/badge.svg?event=push&amp;amp;color=5B5BD6" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cocoindex-io/cocoindex/actions/workflows/release.yml"&gt;&lt;img src="https://github.com/cocoindex-io/cocoindex/actions/workflows/release.yml/badge.svg?event=push&amp;amp;color=5B5BD6" alt="release" /&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/zpA9S2DR7s"&gt;&lt;img src="https://img.shields.io/discord/1314801574169673738?logo=discord&amp;amp;color=5B5BD6&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://trendshift.io/repositories/13939" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/13939" alt="cocoindex-io%2Fcocoindex | Trendshift" style="width: 250px; height: 55px;" width="250" height="55" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Ultra performant data transformation framework for AI, with core engine written in Rust. Support incremental processing and data lineage out-of-box. Exceptional developer velocity. Production-ready at day 0.&lt;/p&gt; 
&lt;p&gt;⭐ Drop a star to help us grow!&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;!-- Keep these links. Translations will automatically update with the README. --&gt; 
 &lt;p&gt;&lt;a href="https://readme-i18n.com/cocoindex-io/cocoindex?lang=de"&gt;Deutsch&lt;/a&gt; | &lt;a href="https://readme-i18n.com/cocoindex-io/cocoindex?lang=en"&gt;English&lt;/a&gt; | &lt;a href="https://readme-i18n.com/cocoindex-io/cocoindex?lang=es"&gt;Español&lt;/a&gt; | &lt;a href="https://readme-i18n.com/cocoindex-io/cocoindex?lang=fr"&gt;français&lt;/a&gt; | &lt;a href="https://readme-i18n.com/cocoindex-io/cocoindex?lang=ja"&gt;日本語&lt;/a&gt; | &lt;a href="https://readme-i18n.com/cocoindex-io/cocoindex?lang=ko"&gt;한국어&lt;/a&gt; | &lt;a href="https://readme-i18n.com/cocoindex-io/cocoindex?lang=pt"&gt;Português&lt;/a&gt; | &lt;a href="https://readme-i18n.com/cocoindex-io/cocoindex?lang=ru"&gt;Русский&lt;/a&gt; | &lt;a href="https://readme-i18n.com/cocoindex-io/cocoindex?lang=zh"&gt;中文&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;img src="https://cocoindex.io/images/transformation.svg?sanitize=true" alt="CocoIndex Transformation" /&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;CocoIndex makes it super easy to transform data with AI workloads, and keep source data and target in sync effortlessly.&lt;/p&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;img src="https://cocoindex.io/images/venn-features.png" alt="CocoIndex Features" width="400" /&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;Either creating embedding, building knowledge graphs, or any data transformations - beyond traditional SQL.&lt;/p&gt; 
&lt;h2&gt;Exceptional velocity&lt;/h2&gt; 
&lt;p&gt;Just declare transformation in dataflow with ~100 lines of python&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# import
data['content'] = flow_builder.add_source(...)

# transform
data['out'] = data['content']
    .transform(...)
    .transform(...)

# collect data
collector.collect(...)

# export to db, vector db, graph db ...
collector.export(...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;CocoIndex follows the idea of &lt;a href="https://en.wikipedia.org/wiki/Dataflow_programming"&gt;Dataflow&lt;/a&gt; programming model. Each transformation creates a new field solely based on input fields, without hidden states and value mutation. All data before/after each transformation is observable, with lineage out of the box.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Particularly&lt;/strong&gt;, developers don't explicitly mutate data by creating, updating and deleting. They just need to define transformation/formula for a set of source data.&lt;/p&gt; 
&lt;h2&gt;Build like LEGO&lt;/h2&gt; 
&lt;p&gt;Native builtins for different source, targets and transformations. Standardize interface, make it 1-line code switch between different components.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://cocoindex.io/images/components.svg?sanitize=true" alt="CocoIndex Features" /&gt; &lt;/p&gt; 
&lt;h2&gt;Data Freshness&lt;/h2&gt; 
&lt;p&gt;CocoIndex keep source data and target in sync effortlessly.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://github.com/user-attachments/assets/f4eb29b3-84ee-4fa0-a1e2-80eedeeabde6" alt="Incremental Processing" width="700" /&gt; &lt;/p&gt; 
&lt;p&gt;It has out-of-box support for incremental indexing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;minimal recomputation on source or logic change.&lt;/li&gt; 
 &lt;li&gt;(re-)processing necessary portions; reuse cache when possible&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start:&lt;/h2&gt; 
&lt;p&gt;If you're new to CocoIndex, we recommend checking out&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;📖 &lt;a href="https://cocoindex.io/docs"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;a href="https://cocoindex.io/docs/getting_started/quickstart"&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎬 &lt;a href="https://youtu.be/gv5R8nOXsWU?si=9ioeKYkMEnYevTXT"&gt;Quick Start Video Tutorial&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install CocoIndex Python library&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U cocoindex
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;&lt;a href="https://cocoindex.io/docs/getting_started/installation#-install-postgres"&gt;Install Postgres&lt;/a&gt; if you don't have one. CocoIndex uses it for incremental processing.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Define data flow&lt;/h2&gt; 
&lt;p&gt;Follow &lt;a href="https://cocoindex.io/docs/getting_started/quickstart"&gt;Quick Start Guide&lt;/a&gt; to define your first indexing flow. An example flow looks like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;@cocoindex.flow_def(name="TextEmbedding")
def text_embedding_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):
    # Add a data source to read files from a directory
    data_scope["documents"] = flow_builder.add_source(cocoindex.sources.LocalFile(path="markdown_files"))

    # Add a collector for data to be exported to the vector index
    doc_embeddings = data_scope.add_collector()

    # Transform data of each document
    with data_scope["documents"].row() as doc:
        # Split the document into chunks, put into `chunks` field
        doc["chunks"] = doc["content"].transform(
            cocoindex.functions.SplitRecursively(),
            language="markdown", chunk_size=2000, chunk_overlap=500)

        # Transform data of each chunk
        with doc["chunks"].row() as chunk:
            # Embed the chunk, put into `embedding` field
            chunk["embedding"] = chunk["text"].transform(
                cocoindex.functions.SentenceTransformerEmbed(
                    model="sentence-transformers/all-MiniLM-L6-v2"))

            # Collect the chunk into the collector.
            doc_embeddings.collect(filename=doc["filename"], location=chunk["location"],
                                   text=chunk["text"], embedding=chunk["embedding"])

    # Export collected data to a vector index.
    doc_embeddings.export(
        "doc_embeddings",
        cocoindex.targets.Postgres(),
        primary_key_fields=["filename", "location"],
        vector_indexes=[
            cocoindex.VectorIndexDef(
                field_name="embedding",
                metric=cocoindex.VectorSimilarityMetric.COSINE_SIMILARITY)])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It defines an index flow like this:&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img width="400" alt="Data Flow" src="https://github.com/user-attachments/assets/2ea7be6d-3d94-42b1-b2bd-22515577e463" /&gt; &lt;/p&gt; 
&lt;h2&gt;🚀 Examples and demo&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Example&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/text_embedding"&gt;Text Embedding&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Index text documents with embeddings for semantic search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/code_embedding"&gt;Code Embedding&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Index code embeddings for semantic search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/pdf_embedding"&gt;PDF Embedding&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Parse PDF and index text embeddings for semantic search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/manuals_llm_extraction"&gt;Manuals LLM Extraction&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Extract structured information from a manual using LLM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/amazon_s3_embedding"&gt;Amazon S3 Embedding&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Index text documents from Amazon S3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/azure_blob_embedding"&gt;Azure Blob Storage Embedding&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Index text documents from Azure Blob Storage&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/gdrive_text_embedding"&gt;Google Drive Text Embedding&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Index text documents from Google Drive&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/docs_to_knowledge_graph"&gt;Docs to Knowledge Graph&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Extract relationships from Markdown documents and build a knowledge graph&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/text_embedding_qdrant"&gt;Embeddings to Qdrant&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Index documents in a Qdrant collection for semantic search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/fastapi_server_docker"&gt;FastAPI Server with Docker&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Run the semantic search server in a Dockerized FastAPI setup&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/product_recommendation"&gt;Product Recommendation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Build real-time product recommendations with LLM and graph database&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/image_search"&gt;Image Search with Vision API&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generates detailed captions for images using a vision model, embeds them, enables live-updating semantic search via FastAPI and served on a React frontend&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/face_recognition"&gt;Face Recognition&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Recognize faces in images and build embedding index&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/paper_metadata"&gt;Paper Metadata&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Index papers in PDF files, and build metadata tables for each paper&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/multi_format_indexing"&gt;Multi Format Indexing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Build visual document index from PDFs and images with ColPali for semantic search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/custom_output_files"&gt;Custom Output Files&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Convert markdown files to HTML files and save them to a local directory, using &lt;em&gt;CocoIndex Custom Targets&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/patient_intake_extraction"&gt;Patient intake form extraction&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use LLM to extract structured data from patient intake forms with different formats&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;More coming and stay tuned 👀!&lt;/p&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;For detailed documentation, visit &lt;a href="https://cocoindex.io/docs"&gt;CocoIndex Documentation&lt;/a&gt;, including a &lt;a href="https://cocoindex.io/docs/getting_started/quickstart"&gt;Quickstart guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;p&gt;We love contributions from our community ❤️. For details on contributing or running the project for development, check out our &lt;a href="https://cocoindex.io/docs/about/contributing"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;👥 Community&lt;/h2&gt; 
&lt;p&gt;Welcome with a huge coconut hug 🥥⋆｡˚🤗. We are super excited for community contributions of all kinds - whether it's code improvements, documentation updates, issue reports, feature requests, and discussions in our Discord.&lt;/p&gt; 
&lt;p&gt;Join our community here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🌟 &lt;a href="https://github.com/cocoindex-io/cocoindex"&gt;Star us on GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;👋 &lt;a href="https://discord.com/invite/zpA9S2DR7s"&gt;Join our Discord community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;▶️ &lt;a href="https://www.youtube.com/@cocoindex-io"&gt;Subscribe to our YouTube channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href="https://cocoindex.io/blogs/"&gt;Read our blog posts&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support us:&lt;/h2&gt; 
&lt;p&gt;We are constantly improving, and more features and examples are coming soon. If you love this project, please drop us a star ⭐ at GitHub repo &lt;a href="https://github.com/cocoindex-io/cocoindex"&gt;&lt;img src="https://img.shields.io/github/stars/cocoindex-io/cocoindex?color=5B5BD6" alt="GitHub" /&gt;&lt;/a&gt; to stay tuned and help us grow.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;CocoIndex is Apache 2.0 licensed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solana-labs/solana</title>
      <link>https://github.com/solana-labs/solana</link>
      <description>&lt;p&gt;Web-Scale Blockchain for fast, secure, scalable, decentralized apps and marketplaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PLEASE READ: This repo is now a public archive&lt;/h1&gt; 
&lt;p&gt;This repo still exists in archived form, feel free to fork any reference implementations it still contains.&lt;/p&gt; 
&lt;p&gt;See Agave, the Solana validator implementation from Anza: &lt;a href="https://github.com/anza-xyz/agave"&gt;https://github.com/anza-xyz/agave&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://solana.com"&gt; &lt;img alt="Solana" src="https://i.imgur.com/IKyzQ6T.png" width="250" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/solana-core"&gt;&lt;img src="https://img.shields.io/crates/v/solana-core.svg?sanitize=true" alt="Solana crate" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/solana-core"&gt;&lt;img src="https://docs.rs/solana-core/badge.svg?sanitize=true" alt="Solana documentation" /&gt;&lt;/a&gt; &lt;a href="https://buildkite.com/solana-labs/solana/builds?branch=master"&gt;&lt;img src="https://badge.buildkite.com/8cc350de251d61483db98bdfc895b9ea0ac8ffa4a32ee850ed.svg?branch=master" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/solana-labs/solana"&gt;&lt;img src="https://codecov.io/gh/solana-labs/solana/branch/master/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;h2&gt;&lt;strong&gt;1. Install rustc, cargo and rustfmt.&lt;/strong&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ curl https://sh.rustup.rs -sSf | sh
$ source $HOME/.cargo/env
$ rustup component add rustfmt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When building the master branch, please make sure you are using the latest stable rust version by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ rustup update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When building a specific release branch, you should check the rust version in &lt;code&gt;ci/rust-version.sh&lt;/code&gt; and if necessary, install that version by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ rustup install VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that if this is not the latest rust version on your machine, cargo commands may require an &lt;a href="https://rust-lang.github.io/rustup/overrides.html"&gt;override&lt;/a&gt; in order to use the correct version.&lt;/p&gt; 
&lt;p&gt;On Linux systems you may need to install libssl-dev, pkg-config, zlib1g-dev, protobuf etc.&lt;/p&gt; 
&lt;p&gt;On Ubuntu:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ sudo apt-get update
$ sudo apt-get install libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang cmake make libprotobuf-dev protobuf-compiler
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ sudo dnf install openssl-devel systemd-devel pkg-config zlib-devel llvm clang cmake make protobuf-devel protobuf-compiler perl-core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;strong&gt;2. Download the source code.&lt;/strong&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ git clone https://github.com/solana-labs/solana.git
$ cd solana
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;strong&gt;3. Build.&lt;/strong&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ ./cargo build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Testing&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Run the test suite:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ ./cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Starting a local testnet&lt;/h3&gt; 
&lt;p&gt;Start your own testnet locally, instructions are in the &lt;a href="https://docs.solanalabs.com/clusters/benchmark"&gt;online docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Accessing the remote development cluster&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;devnet&lt;/code&gt; - stable public cluster for development accessible via devnet.solana.com. Runs 24/7. Learn more about the &lt;a href="https://docs.solanalabs.com/clusters"&gt;public clusters&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Benchmarking&lt;/h1&gt; 
&lt;p&gt;First, install the nightly build of rustc. &lt;code&gt;cargo bench&lt;/code&gt; requires the use of the unstable features only available in the nightly build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ rustup install nightly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the benchmarks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo +nightly bench
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Release Process&lt;/h1&gt; 
&lt;p&gt;The release process for this project is described &lt;a href="https://raw.githubusercontent.com/solana-labs/solana/master/RELEASE.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Code coverage&lt;/h1&gt; 
&lt;p&gt;To generate code coverage statistics:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ scripts/coverage.sh
$ open target/cov/lcov-local/index.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Why coverage? While most see coverage as a code quality metric, we see it primarily as a developer productivity metric. When a developer makes a change to the codebase, presumably it's a &lt;em&gt;solution&lt;/em&gt; to some problem. Our unit-test suite is how we encode the set of &lt;em&gt;problems&lt;/em&gt; the codebase solves. Running the test suite should indicate that your change didn't &lt;em&gt;infringe&lt;/em&gt; on anyone else's solutions. Adding a test &lt;em&gt;protects&lt;/em&gt; your solution from future changes. Say you don't understand why a line of code exists, try deleting it and running the unit-tests. The nearest test failure should tell you what problem was solved by that code. If no test fails, go ahead and submit a Pull Request that asks, "what problem is solved by this code?" On the other hand, if a test does fail and you can think of a better way to solve the same problem, a Pull Request with your solution would most certainly be welcome! Likewise, if rewriting a test can better communicate what code it's protecting, please send us that patch!&lt;/p&gt; 
&lt;h1&gt;Disclaimer&lt;/h1&gt; 
&lt;p&gt;All claims, content, designs, algorithms, estimates, roadmaps, specifications, and performance measurements described in this project are done with the Solana Labs, Inc. (“SL”) good faith efforts. It is up to the reader to check and validate their accuracy and truthfulness. Furthermore, nothing in this project constitutes a solicitation for investment.&lt;/p&gt; 
&lt;p&gt;Any content produced by SL or developer resources that SL provides are for educational and inspirational purposes only. SL does not encourage, induce or sanction the deployment, integration or use of any such applications (including the code comprising the Solana blockchain protocol) in violation of applicable laws or regulations and hereby prohibits any such deployment, integration or use. This includes the use of any such applications by the reader (a) in violation of export control or sanctions laws of the United States or any other applicable jurisdiction, (b) if the reader is located in or ordinarily resident in a country or territory subject to comprehensive sanctions administered by the U.S. Office of Foreign Assets Control (OFAC), or (c) if the reader is or is working on behalf of a Specially Designated National (SDN) or a person subject to similar blocking or denied party prohibitions.&lt;/p&gt; 
&lt;p&gt;The reader should be aware that U.S. export control and sanctions laws prohibit U.S. persons (and other persons that are subject to such laws) from transacting with persons in certain countries and territories or that are on the SDN list. Accordingly, there is a risk to individuals that other persons using any of the code contained in this repo, or a derivation thereof, may be sanctioned persons and that transactions with such persons would be a violation of U.S. export controls and sanctions law.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jdx/mise</title>
      <link>https://github.com/jdx/mise</link>
      <description>&lt;p&gt;dev tools, env vars, task runner&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;&lt;a href="https://mise.jdx.dev"&gt; &lt;img src="https://github.com/jdx/mise/assets/216188/27a8ea18-9383-4d86-a445-305b9a6248c1" alt="mise-logo" width="400" /&gt;&lt;br /&gt; mise-en-place &lt;/a&gt;&lt;/h1&gt; 
 &lt;!-- &lt;a href="https://mise.jdx.dev"&gt;&lt;picture&gt; --&gt; 
 &lt;!--   &lt;source media="(prefers-color-scheme: dark)" width="617" srcset="./docs/logo-dark@2x.png"&gt; --&gt; 
 &lt;!--   &lt;img alt="mise logo" width="617" src="./docs/logo-light@2x.png"&gt; --&gt; 
 &lt;!-- &lt;/picture&gt;&lt;/a&gt; --&gt; 
 &lt;a href="https://crates.io/crates/mise"&gt;&lt;img alt="Crates.io" src="https://img.shields.io/crates/v/mise?style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/raw/main/LICENSE"&gt;&lt;img alt="GitHub" src="https://img.shields.io/github/license/jdx/mise?color=%2344CC11&amp;amp;style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/actions/workflows/test.yml"&gt;&lt;img alt="GitHub Workflow Status" src="https://img.shields.io/github/actions/workflow/status/jdx/mise/test.yml?style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://discord.gg/mABnUDvP57"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/1066429325269794907?color=%23738ADB&amp;amp;style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;p&gt;&lt;em&gt;The front-end to your dev env.&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is it?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Like &lt;a href="https://asdf-vm.com"&gt;asdf&lt;/a&gt; (or &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; or &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; but for any language) it manages &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; like node, python, cmake, terraform, and &lt;a href="https://mise.jdx.dev/registry.html"&gt;hundreds more&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://github.com/direnv/direnv"&gt;direnv&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/environments/"&gt;environment variables&lt;/a&gt; for different project directories.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://www.gnu.org/software/make/manual/make.html"&gt;make&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; used to build and test projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;The following demo shows how to install and use &lt;code&gt;mise&lt;/code&gt; to manage multiple versions of &lt;code&gt;node&lt;/code&gt; on the same system. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; 
&lt;p&gt;It also shows that you can use &lt;code&gt;mise&lt;/code&gt; to install and many other tools such as &lt;code&gt;jq&lt;/code&gt;, &lt;code&gt;terraform&lt;/code&gt;, or &lt;code&gt;go&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://mise.jdx.dev/demo.html"&gt;&lt;img src="https://raw.githubusercontent.com/jdx/mise/main/docs/tapes/demo.gif" alt="demo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/demo.html"&gt;demo transcript&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Install mise&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/getting-started.html"&gt;Getting started&lt;/a&gt; for more options.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ curl https://mise.run | sh
$ ~/.local/bin/mise --version
2025.8.9 macos-arm64 (a1b2d3e 2025-08-13)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hook mise into your shell (pick the right one for your shell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;# note this assumes mise is located at ~/.local/bin/mise
# which is what https://mise.run does by default
echo 'eval "$(~/.local/bin/mise activate bash)"' &amp;gt;&amp;gt; ~/.bashrc
echo 'eval "$(~/.local/bin/mise activate zsh)"' &amp;gt;&amp;gt; ~/.zshrc
echo '~/.local/bin/mise activate fish | source' &amp;gt;&amp;gt; ~/.config/fish/config.fish
echo '~/.local/bin/mise activate pwsh | Out-String | Invoke-Expression' &amp;gt;&amp;gt; ~/.config/powershell/Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Execute commands with specific tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise exec node@22 -- node -v
mise node@22.x.x ✓ installed
v22.x.x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise use --global node@22 go@1
$ node -v
v22.x.x
$ go version
go version go1.x.x macos/arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h3&gt;Manage environment variables&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[env]
SOME_VAR = "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise set SOME_VAR=bar
$ echo $SOME_VAR
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;mise&lt;/code&gt; can also &lt;a href="https://mise.jdx.dev/environments/#env-directives"&gt;load &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Run tasks&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tasks.build]
description = "build the project"
run = "echo building..."
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise run build
building...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Example mise project&lt;/h3&gt; 
&lt;p&gt;Here is a combined example to give you an idea of how you can use mise to manage your a project's tools, environment, and tasks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tools]
terraform = "1"
aws-cli = "2"

[env]
TF_WORKSPACE = "development"
AWS_REGION = "us-west-2"
AWS_PROFILE = "dev"

[tasks.plan]
description = "Run terraform plan with configured workspace"
run = """
terraform init
terraform workspace select $TF_WORKSPACE
terraform plan
"""

[tasks.validate]
description = "Validate AWS credentials and terraform config"
run = """
aws sts get-caller-identity
terraform validate
"""

[tasks.deploy]
description = "Deploy infrastructure after validation"
depends = ["validate", "plan"]
run = "terraform apply -auto-approve"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;mise install # install tools specified in mise.toml
mise run deploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Find more examples in the &lt;a href="https://mise.jdx.dev/mise-cookbook/"&gt;mise cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Full Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev"&gt;mise.jdx.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;p&gt;We're grateful for Cloudflare's support through &lt;a href="https://www.cloudflare.com/lp/project-alexandria/"&gt;Project Alexandria&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/jdx/mise/graphs/contributors"&gt;&lt;img src="https://contrib.rocks/image?repo=jdx/mise" alt="Contributors" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pola-rs/polars</title>
      <link>https://github.com/pola-rs/polars</link>
      <description>&lt;p&gt;Dataframes powered by a multithreaded, vectorized query engine, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://pola.rs"&gt; &lt;img src="https://raw.githubusercontent.com/pola-rs/polars-static/master/banner/polars_github_banner.svg?sanitize=true" alt="Polars logo" /&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://crates.io/crates/polars"&gt; &lt;img src="https://img.shields.io/crates/v/polars.svg?sanitize=true" alt="crates.io Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://pypi.org/project/polars/"&gt; &lt;img src="https://img.shields.io/pypi/v/polars.svg?sanitize=true" alt="PyPi Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://www.npmjs.com/package/nodejs-polars"&gt; &lt;img src="https://img.shields.io/npm/v/nodejs-polars.svg?sanitize=true" alt="NPM Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://community.r-multiverse.org/polars"&gt; &lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fcommunity.r-multiverse.org%2Fapi%2Fpackages%2Fpolars&amp;amp;query=%24.Version&amp;amp;label=r-multiverse" alt="R-multiverse Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://doi.org/10.5281/zenodo.7697217"&gt; &lt;img src="https://zenodo.org/badge/DOI/10.5281/zenodo.7697217.svg?sanitize=true" alt="DOI Latest Release" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;b&gt;Documentation&lt;/b&gt;: &lt;a href="https://docs.pola.rs/api/python/stable/reference/index.html"&gt;Python&lt;/a&gt; - &lt;a href="https://docs.rs/polars/latest/polars/"&gt;Rust&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/nodejs-polars/index.html"&gt;Node.js&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/r-polars/index.html"&gt;R&lt;/a&gt; | &lt;b&gt;StackOverflow&lt;/b&gt;: &lt;a href="https://stackoverflow.com/questions/tagged/python-polars"&gt;Python&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/rust-polars"&gt;Rust&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/nodejs-polars"&gt;Node.js&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/r-polars"&gt;R&lt;/a&gt; | &lt;a href="https://docs.pola.rs/"&gt;User guide&lt;/a&gt; | &lt;a href="https://discord.gg/4UfP5cfBE7"&gt;Discord&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Polars: Blazingly fast DataFrames in Rust, Python, Node.js, R, and SQL&lt;/h2&gt; 
&lt;p&gt;Polars is a DataFrame interface on top of an OLAP Query Engine implemented in Rust using &lt;a href="https://arrow.apache.org/docs/format/Columnar.html"&gt;Apache Arrow Columnar Format&lt;/a&gt; as the memory model.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lazy | eager execution&lt;/li&gt; 
 &lt;li&gt;Multi-threaded&lt;/li&gt; 
 &lt;li&gt;SIMD&lt;/li&gt; 
 &lt;li&gt;Query optimization&lt;/li&gt; 
 &lt;li&gt;Powerful expression API&lt;/li&gt; 
 &lt;li&gt;Hybrid Streaming (larger-than-RAM datasets)&lt;/li&gt; 
 &lt;li&gt;Rust | Python | NodeJS | R | ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To learn more, read the &lt;a href="https://docs.pola.rs/"&gt;user guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Python&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; import polars as pl
&amp;gt;&amp;gt;&amp;gt; df = pl.DataFrame(
...     {
...         "A": [1, 2, 3, 4, 5],
...         "fruits": ["banana", "banana", "apple", "apple", "banana"],
...         "B": [5, 4, 3, 2, 1],
...         "cars": ["beetle", "audi", "beetle", "beetle", "beetle"],
...     }
... )

# embarrassingly parallel execution &amp;amp; very expressive query language
&amp;gt;&amp;gt;&amp;gt; df.sort("fruits").select(
...     "fruits",
...     "cars",
...     pl.lit("fruits").alias("literal_string_fruits"),
...     pl.col("B").filter(pl.col("cars") == "beetle").sum(),
...     pl.col("A").filter(pl.col("B") &amp;gt; 2).sum().over("cars").alias("sum_A_by_cars"),
...     pl.col("A").sum().over("fruits").alias("sum_A_by_fruits"),
...     pl.col("A").reverse().over("fruits").alias("rev_A_by_fruits"),
...     pl.col("A").sort_by("B").over("fruits").alias("sort_A_by_B_by_fruits"),
... )
shape: (5, 8)
┌──────────┬──────────┬──────────────┬─────┬─────────────┬─────────────┬─────────────┬─────────────┐
│ fruits   ┆ cars     ┆ literal_stri ┆ B   ┆ sum_A_by_ca ┆ sum_A_by_fr ┆ rev_A_by_fr ┆ sort_A_by_B │
│ ---      ┆ ---      ┆ ng_fruits    ┆ --- ┆ rs          ┆ uits        ┆ uits        ┆ _by_fruits  │
│ str      ┆ str      ┆ ---          ┆ i64 ┆ ---         ┆ ---         ┆ ---         ┆ ---         │
│          ┆          ┆ str          ┆     ┆ i64         ┆ i64         ┆ i64         ┆ i64         │
╞══════════╪══════════╪══════════════╪═════╪═════════════╪═════════════╪═════════════╪═════════════╡
│ "apple"  ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 7           ┆ 4           ┆ 4           │
│ "apple"  ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 7           ┆ 3           ┆ 3           │
│ "banana" ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 8           ┆ 5           ┆ 5           │
│ "banana" ┆ "audi"   ┆ "fruits"     ┆ 11  ┆ 2           ┆ 8           ┆ 2           ┆ 2           │
│ "banana" ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 8           ┆ 1           ┆ 1           │
└──────────┴──────────┴──────────────┴─────┴─────────────┴─────────────┴─────────────┴─────────────┘
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SQL&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; df = pl.scan_csv("docs/assets/data/iris.csv")
&amp;gt;&amp;gt;&amp;gt; ## OPTION 1
&amp;gt;&amp;gt;&amp;gt; # run SQL queries on frame-level
&amp;gt;&amp;gt;&amp;gt; df.sql("""
...	SELECT species,
...	  AVG(sepal_length) AS avg_sepal_length
...	FROM self
...	GROUP BY species
...	""").collect()
shape: (3, 2)
┌────────────┬──────────────────┐
│ species    ┆ avg_sepal_length │
│ ---        ┆ ---              │
│ str        ┆ f64              │
╞════════════╪══════════════════╡
│ Virginica  ┆ 6.588            │
│ Versicolor ┆ 5.936            │
│ Setosa     ┆ 5.006            │
└────────────┴──────────────────┘
&amp;gt;&amp;gt;&amp;gt; ## OPTION 2
&amp;gt;&amp;gt;&amp;gt; # use pl.sql() to operate on the global context
&amp;gt;&amp;gt;&amp;gt; df2 = pl.LazyFrame({
...    "species": ["Setosa", "Versicolor", "Virginica"],
...    "blooming_season": ["Spring", "Summer", "Fall"]
...})
&amp;gt;&amp;gt;&amp;gt; pl.sql("""
... SELECT df.species,
...     AVG(df.sepal_length) AS avg_sepal_length,
...     df2.blooming_season
... FROM df
... LEFT JOIN df2 ON df.species = df2.species
... GROUP BY df.species, df2.blooming_season
... """).collect()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SQL commands can also be run directly from your terminal using the Polars CLI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# run an inline SQL query
&amp;gt; polars -c "SELECT species, AVG(sepal_length) AS avg_sepal_length, AVG(sepal_width) AS avg_sepal_width FROM read_csv('docs/assets/data/iris.csv') GROUP BY species;"

# run interactively
&amp;gt; polars
Polars CLI v0.3.0
Type .help for help.

&amp;gt; SELECT species, AVG(sepal_length) AS avg_sepal_length, AVG(sepal_width) AS avg_sepal_width FROM read_csv('docs/assets/data/iris.csv') GROUP BY species;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the &lt;a href="https://github.com/pola-rs/polars-cli"&gt;Polars CLI repository&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Performance 🚀🚀&lt;/h2&gt; 
&lt;h3&gt;Blazingly fast&lt;/h3&gt; 
&lt;p&gt;Polars is very fast. In fact, it is one of the best performing solutions available. See the &lt;a href="https://www.pola.rs/benchmarks.html"&gt;PDS-H benchmarks&lt;/a&gt; results.&lt;/p&gt; 
&lt;h3&gt;Lightweight&lt;/h3&gt; 
&lt;p&gt;Polars is also very lightweight. It comes with zero required dependencies, and this shows in the import times:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;polars: 70ms&lt;/li&gt; 
 &lt;li&gt;numpy: 104ms&lt;/li&gt; 
 &lt;li&gt;pandas: 520ms&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Handles larger-than-RAM data&lt;/h3&gt; 
&lt;p&gt;If you have data that does not fit into memory, Polars' query engine is able to process your query (or parts of your query) in a streaming fashion. This drastically reduces memory requirements, so you might be able to process your 250GB dataset on your laptop. Collect with &lt;code&gt;collect(engine='streaming')&lt;/code&gt; to run the query streaming. (This might be a little slower, but it is still very fast!)&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;p&gt;Install the latest Polars version with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install polars
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We also have a conda package (&lt;code&gt;conda install -c conda-forge polars&lt;/code&gt;), however pip is the preferred way to install Polars.&lt;/p&gt; 
&lt;p&gt;Install Polars with all optional dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install 'polars[all]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also install a subset of all optional dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install 'polars[numpy,pandas,pyarrow]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.pola.rs/user-guide/installation/#feature-flags"&gt;User Guide&lt;/a&gt; for more details on optional dependencies&lt;/p&gt; 
&lt;p&gt;To see the current Polars version and a full list of its optional dependencies, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;pl.show_versions()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Releases happen quite often (weekly / every few days) at the moment, so updating Polars regularly to get the latest bugfixes / features might not be a bad idea.&lt;/p&gt; 
&lt;h3&gt;Rust&lt;/h3&gt; 
&lt;p&gt;You can take latest release from &lt;code&gt;crates.io&lt;/code&gt;, or if you want to use the latest features / performance improvements point to the &lt;code&gt;main&lt;/code&gt; branch of this repo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;polars = { git = "https://github.com/pola-rs/polars", rev = "&amp;lt;optional git tag&amp;gt;" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Requires Rust version &lt;code&gt;&amp;gt;=1.80&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Want to contribute? Read our &lt;a href="https://docs.pola.rs/development/contributing/"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Python: compile Polars from source&lt;/h2&gt; 
&lt;p&gt;If you want a bleeding edge release or maximal performance you should compile Polars from source.&lt;/p&gt; 
&lt;p&gt;This can be done by going through the following steps in sequence:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the latest &lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://maturin.rs/"&gt;maturin&lt;/a&gt;: &lt;code&gt;pip install maturin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cd py-polars&lt;/code&gt; and choose one of the following: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;, slow binary with debug assertions and symbols, fast compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-release&lt;/code&gt;, fast binary without debug assertions, minimal debug symbols, long compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-nodebug-release&lt;/code&gt;, same as build-release but without any debug symbols, slightly faster to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-debug-release&lt;/code&gt;, same as build-release but with full debug symbols, slightly slower to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-dist-release&lt;/code&gt;, fastest binary, extreme compile times&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;By default the binary is compiled with optimizations turned on for a modern CPU. Specify &lt;code&gt;LTS_CPU=1&lt;/code&gt; with the command if your CPU is older and does not support e.g. AVX2.&lt;/p&gt; 
&lt;p&gt;Note that the Rust crate implementing the Python bindings is called &lt;code&gt;py-polars&lt;/code&gt; to distinguish from the wrapped Rust crate &lt;code&gt;polars&lt;/code&gt; itself. However, both the Python package and the Python module are named &lt;code&gt;polars&lt;/code&gt;, so you can &lt;code&gt;pip install polars&lt;/code&gt; and &lt;code&gt;import polars&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Using custom Rust functions in Python&lt;/h2&gt; 
&lt;p&gt;Extending Polars with UDFs compiled in Rust is easy. We expose PyO3 extensions for &lt;code&gt;DataFrame&lt;/code&gt; and &lt;code&gt;Series&lt;/code&gt; data structures. See more in &lt;a href="https://github.com/pola-rs/polars/tree/main/pyo3-polars"&gt;https://github.com/pola-rs/polars/tree/main/pyo3-polars&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Going big...&lt;/h2&gt; 
&lt;p&gt;Do you expect more than 2^32 (~4.2 billion) rows? Compile Polars with the &lt;code&gt;bigidx&lt;/code&gt; feature flag or, for Python users, install &lt;code&gt;pip install polars-u64-idx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Don't use this unless you hit the row boundary as the default build of Polars is faster and consumes less memory.&lt;/p&gt; 
&lt;h2&gt;Legacy&lt;/h2&gt; 
&lt;p&gt;Do you want Polars to run on an old CPU (e.g. dating from before 2011), or on an &lt;code&gt;x86-64&lt;/code&gt; build of Python on Apple Silicon under Rosetta? Install &lt;code&gt;pip install polars-lts-cpu&lt;/code&gt;. This version of Polars is compiled without &lt;a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions"&gt;AVX&lt;/a&gt; target features.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.jetbrains.com"&gt;&lt;img src="https://www.jetbrains.com/company/brand/img/jetbrains_logo.png" height="50" alt="JetBrains logo" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sxyazi/yazi</title>
      <link>https://github.com/sxyazi/yazi</link>
      <description>&lt;p&gt;💥 Blazing fast terminal file manager written in Rust, based on async I/O.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt;
 &lt;br /&gt; 
 &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=yazi" target="_blank"&gt; &lt;img alt="Warp sponsorship" width="300" src="https://github.com/user-attachments/assets/c7f141e7-9751-407d-bb0e-d6f2c487b34f" /&gt; &lt;br /&gt; &lt;b&gt;Warp, the intelligent terminal&lt;/b&gt; &lt;br /&gt; &lt;sup&gt;Yazi's AI-powered terminal of choice!&lt;br /&gt;Available for macOS, Linux and Windows&lt;/sup&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;Yazi - ⚡️ Blazing Fast Terminal File Manager&lt;/h2&gt; 
&lt;p&gt;Yazi (means "duck") is a terminal file manager written in Rust, based on non-blocking async I/O. It aims to provide an efficient, user-friendly, and customizable file management experience.&lt;/p&gt; 
&lt;p&gt;💡 A new article explaining its internal workings: &lt;a href="https://yazi-rs.github.io/blog/why-is-yazi-fast"&gt;Why is Yazi Fast?&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Full Asynchronous Support&lt;/strong&gt;: All I/O operations are asynchronous, CPU tasks are spread across multiple threads, making the most of available resources.&lt;/li&gt; 
 &lt;li&gt;💪 &lt;strong&gt;Powerful Async Task Scheduling and Management&lt;/strong&gt;: Provides real-time progress updates, task cancellation, and internal task priority assignment.&lt;/li&gt; 
 &lt;li&gt;🖼️ &lt;strong&gt;Built-in Support for Multiple Image Protocols&lt;/strong&gt;: Also integrated with Überzug++ and Chafa, covering almost all terminals.&lt;/li&gt; 
 &lt;li&gt;🌟 &lt;strong&gt;Built-in Code Highlighting and Image Decoding&lt;/strong&gt;: Combined with the pre-loading mechanism, greatly accelerates image and normal file loading.&lt;/li&gt; 
 &lt;li&gt;🔌 &lt;strong&gt;Concurrent Plugin System&lt;/strong&gt;: UI plugins (rewriting most of the UI), functional plugins, custom previewer/preloader/spotter/fetcher; Just some pieces of Lua.&lt;/li&gt; 
 &lt;li&gt;📡 &lt;strong&gt;Data Distribution Service&lt;/strong&gt;: Built on a client-server architecture (no additional server process required), integrated with a Lua-based publish-subscribe model, achieving cross-instance communication and state persistence.&lt;/li&gt; 
 &lt;li&gt;📦 &lt;strong&gt;Package Manager&lt;/strong&gt;: Install plugins and themes with one command, keeping them up-to-date, or pin them to a specific version.&lt;/li&gt; 
 &lt;li&gt;🧰 Integration with ripgrep, fd, fzf, zoxide&lt;/li&gt; 
 &lt;li&gt;💫 Vim-like input/pick/confirm/which/notify component, auto-completion for cd paths&lt;/li&gt; 
 &lt;li&gt;🏷️ Multi-Tab Support, Cross-directory selection, Scrollable Preview (for videos, PDFs, archives, code, directories, etc.)&lt;/li&gt; 
 &lt;li&gt;🔄 Bulk Renaming, Archive Extraction, Visual Mode, File Chooser, &lt;a href="https://github.com/yazi-rs/plugins/tree/main/git.yazi"&gt;Git Integration&lt;/a&gt;, &lt;a href="https://github.com/yazi-rs/plugins/tree/main/mount.yazi"&gt;Mount Manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎨 Theme System, Mouse Support, Trash Bin, Custom Layouts, Virtual Filesystem, CSI u, OSC 52&lt;/li&gt; 
 &lt;li&gt;... and more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://github.com/sxyazi/yazi/assets/17523360/92ff23fa-0cd5-4f04-b387-894c12265cc7"&gt;https://github.com/sxyazi/yazi/assets/17523360/92ff23fa-0cd5-4f04-b387-894c12265cc7&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Project status&lt;/h2&gt; 
&lt;p&gt;Public beta, can be used as a daily driver.&lt;/p&gt; 
&lt;p&gt;Yazi is currently in heavy development, expect breaking changes.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usage: &lt;a href="https://yazi-rs.github.io/docs/installation"&gt;https://yazi-rs.github.io/docs/installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Features: &lt;a href="https://yazi-rs.github.io/features"&gt;https://yazi-rs.github.io/features&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Discussion&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Discord Server (English mainly): &lt;a href="https://discord.gg/qfADduSdJu"&gt;https://discord.gg/qfADduSdJu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Telegram Group (Chinese mainly): &lt;a href="https://t.me/yazi_rs"&gt;https://t.me/yazi_rs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Image Preview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Protocol&lt;/th&gt; 
   &lt;th&gt;Support&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/kovidgoyal/kitty"&gt;kitty&lt;/a&gt; (&amp;gt;= 0.28.0)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://sw.kovidgoyal.net/kitty/graphics-protocol/#unicode-placeholders"&gt;Kitty unicode placeholders&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com"&gt;iTerm2&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/wez/wezterm"&gt;WezTerm&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://invent.kde.org/utilities/konsole"&gt;Konsole&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/sxyazi/yazi/raw/main/yazi-adapter/src/drivers/kgp_old.rs"&gt;Kitty old protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://codeberg.org/dnkl/foot"&gt;foot&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.vt100.net/docs/vt3xx-gp/chapter14.html"&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ghostty-org/ghostty"&gt;Ghostty&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://sw.kovidgoyal.net/kitty/graphics-protocol/#unicode-placeholders"&gt;Kitty unicode placeholders&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt; (&amp;gt;= v1.22.10352.0)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.vt100.net/docs/vt3xx-gp/chapter14.html"&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/bakkeby/st-flexipatch"&gt;st with Sixel patch&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.vt100.net/docs/vt3xx-gp/chapter14.html"&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.warp.dev"&gt;Warp&lt;/a&gt; (macOS/Linux only)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Eugeny/tabby"&gt;Tabby&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/microsoft/vscode"&gt;VSCode&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/raphamorim/rio"&gt;Rio&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://gitlab.gnome.org/raggesilver/blackbox"&gt;Black Box&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.vt100.net/docs/vt3xx-gp/chapter14.html"&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vercel/hyper"&gt;Hyper&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ismail-yilmaz/Bobcat"&gt;Bobcat&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;X11 / Wayland&lt;/td&gt; 
   &lt;td&gt;Window system protocol&lt;/td&gt; 
   &lt;td&gt;☑️ &lt;a href="https://github.com/jstkdng/ueberzugpp"&gt;Überzug++&lt;/a&gt; required&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fallback&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/ASCII_art"&gt;ASCII art (Unicode block)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☑️ &lt;a href="https://hpjansson.org/chafa/"&gt;Chafa&lt;/a&gt; required&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;See &lt;a href="https://yazi-rs.github.io/docs/image-preview"&gt;https://yazi-rs.github.io/docs/image-preview&lt;/a&gt; for details.&lt;/p&gt; 
&lt;!-- Protocols --&gt; 
&lt;!-- Dependencies --&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Yazi is MIT-licensed. For more information check the &lt;a href="https://raw.githubusercontent.com/sxyazi/yazi/main/LICENSE"&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lancedb/lance</title>
      <link>https://github.com/lancedb/lance</link>
      <description>&lt;p&gt;Modern columnar data format for ML and LLMs implemented in Rust. Convert from parquet in 2 lines of code for 100x faster random access, vector index, and data versioning. Compatible with Pandas, DuckDB, Polars, Pyarrow, and PyTorch with more integrations coming..&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p align="center"&gt; &lt;img width="257" alt="Lance Logo" src="https://user-images.githubusercontent.com/917119/199353423-d3e202f7-0269-411d-8ff2-e747e419e492.png" /&gt; &lt;/p&gt;
 &lt;p&gt;&lt;strong&gt;Modern columnar data format for ML. Convert from Parquet in 2-lines of code for 100x faster random access, zero-cost schema evolution, rich secondary indices, versioning, and more.&lt;br /&gt;&lt;/strong&gt; &lt;strong&gt;Compatible with Pandas, DuckDB, Polars, Pyarrow, and Ray with more integrations on the way.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://lancedb.github.io/lance/"&gt;Documentation&lt;/a&gt; • &lt;a href="https://blog.lancedb.com/"&gt;Blog&lt;/a&gt; • &lt;a href="https://discord.gg/zMM32dvNtd"&gt;Discord&lt;/a&gt; • &lt;a href="https://x.com/lancedb"&gt;X&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/lancedb/lance/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/lancedb/lance/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="CI Badge" /&gt;&lt;/a&gt; &lt;a href="https://lancedb.github.io/lance/"&gt;&lt;img src="https://img.shields.io/badge/docs-passing-brightgreen" alt="Docs Badge" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/lance"&gt;&lt;img src="https://img.shields.io/crates/v/lance.svg?sanitize=true" alt="crates.io badge" /&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/pylance/"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/pylance" alt="Python versions badge" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;Lance is a modern columnar data format that is optimized for ML workflows and datasets. Lance is perfect for:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Building search engines and feature stores.&lt;/li&gt; 
 &lt;li&gt;Large-scale ML training requiring high performance IO and shuffles.&lt;/li&gt; 
 &lt;li&gt;Storing, querying, and inspecting deeply nested data for robotics or large blobs like images, point clouds, and more.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The key features of Lance include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;High-performance random access:&lt;/strong&gt; 100x faster than Parquet without sacrificing scan performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vector search:&lt;/strong&gt; find nearest neighbors in milliseconds and combine OLAP-queries with vector search.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Zero-copy, automatic versioning:&lt;/strong&gt; manage versions of your data without needing extra infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ecosystem integrations:&lt;/strong&gt; Apache Arrow, Pandas, Polars, DuckDB, Ray, Spark and more on the way.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Lance is in active development and we welcome contributions. Please see our &lt;a href="https://lancedb.github.io/lance/community/contributing"&gt;contributing guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;pip install pylance
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install a preview release:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;pip install --pre --extra-index-url https://pypi.fury.io/lancedb/ pylance
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Preview releases are released more often than full releases and contain the latest features and bug fixes. They receive the same level of testing as full releases. We guarantee they will remain published and available for download for at least 6 months. When you want to pin to a specific version, prefer a stable release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Converting to Lance&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import lance

import pandas as pd
import pyarrow as pa
import pyarrow.dataset

df = pd.DataFrame({"a": [5], "b": [10]})
uri = "/tmp/test.parquet"
tbl = pa.Table.from_pandas(df)
pa.dataset.write_dataset(tbl, uri, format='parquet')

parquet = pa.dataset.dataset(uri, format='parquet')
lance.write_dataset(parquet, "/tmp/test.lance")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Reading Lance data&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;dataset = lance.dataset("/tmp/test.lance")
assert isinstance(dataset, pa.dataset.Dataset)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Pandas&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;df = dataset.to_table().to_pandas()
df
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;DuckDB&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import duckdb

# If this segfaults, make sure you have duckdb v0.7+ installed
duckdb.query("SELECT * FROM dataset LIMIT 10").to_df()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Vector search&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Download the sift1m subset&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;wget ftp://ftp.irisa.fr/local/texmex/corpus/sift.tar.gz
tar -xzf sift.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Convert it to Lance&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import lance
from lance.vector import vec_to_table
import numpy as np
import struct

nvecs = 1000000
ndims = 128
with open("sift/sift_base.fvecs", mode="rb") as fobj:
    buf = fobj.read()
    data = np.array(struct.unpack("&amp;lt;128000000f", buf[4 : 4 + 4 * nvecs * ndims])).reshape((nvecs, ndims))
    dd = dict(zip(range(nvecs), data))

table = vec_to_table(dd)
uri = "vec_data.lance"
sift1m = lance.write_dataset(table, uri, max_rows_per_group=8192, max_rows_per_file=1024*1024)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build the index&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;sift1m.create_index("vector",
                    index_type="IVF_PQ",
                    num_partitions=256,  # IVF
                    num_sub_vectors=16)  # PQ
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Search the dataset&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# Get top 10 similar vectors
import duckdb

dataset = lance.dataset(uri)

# Sample 100 query vectors. If this segfaults, make sure you have duckdb v0.7+ installed
sample = duckdb.query("SELECT vector FROM dataset USING SAMPLE 100").to_df()
query_vectors = np.array([np.array(x) for x in sample.vector])

# Get nearest neighbors for all of them
rs = [dataset.to_table(nearest={"column": "vector", "k": 10, "q": q})
      for q in query_vectors]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Directory structure&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Directory&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/lancedb/lance/main/rust"&gt;rust&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Core Rust implementation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/lancedb/lance/main/python"&gt;python&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Python bindings (PyO3)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/lancedb/lance/main/java"&gt;java&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Java bindings (JNI)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/lancedb/lance/main/docs"&gt;docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation source&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;What makes Lance different&lt;/h2&gt; 
&lt;p&gt;Here we will highlight a few aspects of Lance’s design. For more details, see the full &lt;a href="https://lancedb.github.io/lance/format"&gt;Lance design document&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Vector index&lt;/strong&gt;: Vector index for similarity search over embedding space. Support both CPUs (&lt;code&gt;x86_64&lt;/code&gt; and &lt;code&gt;arm&lt;/code&gt;) and GPU (&lt;code&gt;Nvidia (cuda)&lt;/code&gt; and &lt;code&gt;Apple Silicon (mps)&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Encodings&lt;/strong&gt;: To achieve both fast columnar scan and sub-linear point queries, Lance uses custom encodings and layouts.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Nested fields&lt;/strong&gt;: Lance stores each subfield as a separate column to support efficient filters like “find images where detected objects include cats”.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Versioning&lt;/strong&gt;: A Manifest can be used to record snapshots. Currently we support creating new versions automatically via appends, overwrites, and index creation.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Fast updates&lt;/strong&gt; (ROADMAP): Updates will be supported via write-ahead logs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Rich secondary indices&lt;/strong&gt;: Support &lt;code&gt;BTree&lt;/code&gt;, &lt;code&gt;Bitmap&lt;/code&gt;, &lt;code&gt;Full text search&lt;/code&gt;, &lt;code&gt;Label list&lt;/code&gt;, &lt;code&gt;NGrams&lt;/code&gt;, and more.&lt;/p&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;h3&gt;Vector search&lt;/h3&gt; 
&lt;p&gt;We used the SIFT dataset to benchmark our results with 1M vectors of 128D&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;For 100 randomly sampled query vectors, we get &amp;lt;1ms average response time (on a 2023 m2 MacBook Air)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/lancedb/lance/main/docs/src/images/avg_latency.png" alt="avg_latency.png" /&gt;&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;ANNs are always a trade-off between recall and performance&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/lancedb/lance/main/docs/src/images/recall_vs_latency.png" alt="avg_latency.png" /&gt;&lt;/p&gt; 
&lt;h3&gt;Vs. parquet&lt;/h3&gt; 
&lt;p&gt;We create a Lance dataset using the Oxford Pet dataset to do some preliminary performance testing of Lance as compared to Parquet and raw image/XMLs. For analytics queries, Lance is 50-100x better than reading the raw metadata. For batched random access, Lance is 100x better than both parquet and raw files.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/lancedb/lance/main/docs/src/images/lance_perf.png" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;Why are you building yet another data format?!&lt;/h2&gt; 
&lt;p&gt;The machine learning development cycle involves the steps:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;graph LR
    A[Collection] --&amp;gt; B[Exploration];
    B --&amp;gt; C[Analytics];
    C --&amp;gt; D[Feature Engineer];
    D --&amp;gt; E[Training];
    E --&amp;gt; F[Evaluation];
    F --&amp;gt; C;
    E --&amp;gt; G[Deployment];
    G --&amp;gt; H[Monitoring];
    H --&amp;gt; A;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;People use different data representations to varying stages for the performance or limited by the tooling available. Academia mainly uses XML / JSON for annotations and zipped images/sensors data for deep learning, which is difficult to integrate into data infrastructure and slow to train over cloud storage. While industry uses data lakes (Parquet-based techniques, i.e., Delta Lake, Iceberg) or data warehouses (AWS Redshift or Google BigQuery) to collect and analyze data, they have to convert the data into training-friendly formats, such as &lt;a href="https://github.com/eto-ai/rikai"&gt;Rikai&lt;/a&gt;/&lt;a href="https://github.com/uber/petastorm"&gt;Petastorm&lt;/a&gt; or &lt;a href="https://www.tensorflow.org/tutorials/load_data/tfrecord"&gt;TFRecord&lt;/a&gt;. Multiple single-purpose data transforms, as well as syncing copies between cloud storage to local training instances have become a common practice.&lt;/p&gt; 
&lt;p&gt;While each of the existing data formats excels at the workload it was originally designed for, we need a new data format tailored for multistage ML development cycles to reduce and data silos.&lt;/p&gt; 
&lt;p&gt;A comparison of different data formats in each stage of ML development cycle.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;Lance&lt;/th&gt; 
   &lt;th&gt;Parquet &amp;amp; ORC&lt;/th&gt; 
   &lt;th&gt;JSON &amp;amp; XML&lt;/th&gt; 
   &lt;th&gt;TFRecord&lt;/th&gt; 
   &lt;th&gt;Database&lt;/th&gt; 
   &lt;th&gt;Warehouse&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Analytics&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Feature Engineering&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Good&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Training&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Exploration&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Infra Support&lt;/td&gt; 
   &lt;td&gt;Rich&lt;/td&gt; 
   &lt;td&gt;Rich&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Limited&lt;/td&gt; 
   &lt;td&gt;Rich&lt;/td&gt; 
   &lt;td&gt;Rich&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Community Highlights&lt;/h2&gt; 
&lt;p&gt;Lance is currently used in production by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lancedb/lancedb"&gt;LanceDB&lt;/a&gt;, a serverless, low-latency vector database for ML applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.lancedb.com/enterprise/introduction"&gt;LanceDB Enterprise&lt;/a&gt;, hyperscale LanceDB with enterprise SLA.&lt;/li&gt; 
 &lt;li&gt;Leading multimodal Gen AI companies for training over petabyte-scale multimodal data.&lt;/li&gt; 
 &lt;li&gt;Self-driving car company for large-scale storage, retrieval and processing of multi-modal data.&lt;/li&gt; 
 &lt;li&gt;E-commerce company for billion-scale+ vector personalized search.&lt;/li&gt; 
 &lt;li&gt;and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Presentations, Blogs and Talks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://blog.lancedb.com/designing-a-table-format-for-ml-workloads/"&gt;Designing a Table Format for ML Workloads&lt;/a&gt;, Feb 2025.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xmTFEzAh8ho"&gt;Transforming Multimodal Data Management with LanceDB, Ray Summit&lt;/a&gt;, Oct 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.lancedb.com/lance-v2/"&gt;Lance v2: A columnar container format for modern data&lt;/a&gt;, Apr 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://drive.google.com/file/d/1Orh9rK0Mpj9zN_gnQF1eJJFpAc6lStGm/view?usp=drive_link"&gt;Lance Deep Dive&lt;/a&gt;. July 2023.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1a4nAiQAkPDBtOfXFpPg7lbeDAxcNDVKgoUkw3cUs2rE/edit#slide=id.p"&gt;Lance: A New Columnar Data Format&lt;/a&gt;, &lt;a href="https://www.scipy2022.scipy.org/posters"&gt;Scipy 2022, Austin, TX&lt;/a&gt;. July, 2022.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>BoundaryML/baml</title>
      <link>https://github.com/BoundaryML/baml</link>
      <description>&lt;p&gt;The AI framework that adds the engineering to prompt engineering (Python/TS/Ruby/Java/C#/Rust/Go compatible)&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://boundaryml.com?utm_source=github" target="_blank" rel="noopener noreferrer"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="fern/assets/baml-lamb-white.png" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/BoundaryML/baml/canary/fern/assets/baml-lamb-white.png" height="64" id="top" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://pypi.org/project/baml-py/"&gt;&lt;img src="https://img.shields.io/pypi/v/baml-py?color=006dad&amp;amp;label=BAML%20Version" alt="BAML Version" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h2&gt;BAML: Basically a Made-up Language&lt;/h2&gt; 
 &lt;h4&gt; &lt;p&gt;&lt;a href="https://www.boundaryml.com/"&gt;Homepage&lt;/a&gt; | &lt;a href="https://docs.boundaryml.com"&gt;Docs&lt;/a&gt; | &lt;a href="https://www.boundaryml.com/chat"&gt;BAML AI Chat&lt;/a&gt; | &lt;a href="https://discord.gg/BTNBeXGuaS"&gt;Discord&lt;/a&gt;&lt;/p&gt; &lt;/h4&gt; 
&lt;/div&gt; 
&lt;p&gt;BAML is a simple prompting language for building reliable &lt;strong&gt;AI workflows and agents&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;BAML makes prompt engineering easy by turning it into &lt;em&gt;schema engineering&lt;/em&gt; -- where you mostly focus on the models of your prompt -- to get more reliable outputs. You don't need to write your whole app in BAML, only the prompts! You can wire-up your LLM Functions in any language of your choice! See our quickstarts for &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;Go, and more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;BAML comes with all batteries included -- with full typesafety, streaming, retries, wide model support, even when they don't support native &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#enable-reliable-tool-calling-with-any-model-even-when-they-dont-support-it"&gt;tool-calling APIs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Try BAML&lt;/strong&gt;: &lt;a href="https://www.promptfiddle.com"&gt;Prompt Fiddle&lt;/a&gt; • &lt;a href="https://baml-examples.vercel.app/"&gt;Interactive App Examples&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;The core BAML principle: LLM Prompts are functions&lt;/h2&gt; 
&lt;p&gt;The fundamental building block in BAML is a function. Every prompt is a function that takes in parameters and returns a type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every function additionally defines which models it uses and what its prompt is.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; StopTool | ReplyTool {
    client "openai/gpt-4o-mini"

    prompt #"
        Be a {{ tone }} bot.

        {{ ctx.output_format }}

        {% for m in message %}
        {{ _.role(m.role) }}
        {{ m.content }}
        {% endfor %}
    "#
}

class Message {
    role string
    content string
}

class ReplyTool {
  response string
}

class StopTool {
  action "stop" @description(#"
    when it might be a good time to end the conversation
  "#)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;BAML Functions can be called from any language&lt;/h2&gt; 
&lt;p&gt;Below we call the ChatAgent function we defined in BAML through Python. BAML's Rust compiler generates a "baml_client" to access and call them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from baml_client import b
from baml_client.types import Message, StopTool

messages = [Message(role="assistant", content="How can I help?")]

while True:
  print(messages[-1].content)
  user_reply = input()
  messages.append(Message(role="user", content=user_reply))
  tool = b.ChatAgent(messages, "happy")
  if isinstance(tool, StopTool):
    print("Goodbye!")
    break
  else:
    messages.append(Message(role="assistant", content=tool.response))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can write any kind of agent or workflow using chained BAML functions. An agent is a while loop that calls a Chat BAML Function with some state.&lt;/p&gt; 
&lt;p&gt;And if you need to stream, add a couple more lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;stream = b.stream.ChatAgent(messages, "happy")
# partial is a Partial type with all Optional fields
for tool in stream:
    if isinstance(tool, StopTool):
      ...
    
final = stream.get_final_response()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And get fully type-safe outputs for each chunk in the stream.&lt;/p&gt; 
&lt;h2&gt;Test prompts 10x faster, right in your IDE&lt;/h2&gt; 
&lt;p&gt;BAML comes with native tooling for VSCode (jetbrains + neovim coming soon).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Visualize full prompt (including any multi-modal assets), and the API request&lt;/strong&gt;. BAML gives you full transparency and control of the prompt.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/c0b34db9-80cd-45a7-a356-6b5ab4a9c5b7" alt="raw-curl" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using AI is all about iteration speed.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If testing your pipeline takes 2 minutes, you can only test 10 ideas in 20 minutes.&lt;/p&gt; 
&lt;p&gt;If you reduce it to 5 seconds, you can test 240 ideas in the same amount of time. &lt;img src="https://github.com/user-attachments/assets/6fc6b8a6-ffed-4cfc-80b8-78bc8a3d66a6" alt="resume-attempt2-smaller2" /&gt;&lt;/p&gt; 
&lt;p&gt;The playground also allows you to run tests in parallel -- for even faster iteration speeds 🚀.&lt;/p&gt; 
&lt;p&gt;No need to login to websites, and no need to manually define json schemas.&lt;/p&gt; 
&lt;h2&gt;Enable reliable tool-calling with any model&lt;/h2&gt; 
&lt;p&gt;BAML works even when the models don't support native tool-calling APIs. We created the SAP (schema-aligned parsing) algorithm to support the flexible outputs LLMs can provide, like markdown within a JSON blob or chain-of-thought prior to answering. &lt;a href="https://www.boundaryml.com/blog/schema-aligned-parsing"&gt;Read more about SAP&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;With BAML, your structured outputs work in Day-1 of a model release. No need to figure out whether a model supports parallel tool calls, or whether it supports recursive schemas, or &lt;code&gt;anyOf&lt;/code&gt; or &lt;code&gt;oneOf&lt;/code&gt; etc.&lt;/p&gt; 
&lt;p&gt;See it in action with: &lt;strong&gt;&lt;a href="https://www.boundaryml.com/blog/deepseek-r1-function-calling"&gt;Deepseek-R1&lt;/a&gt;&lt;/strong&gt; and &lt;a href="https://www.boundaryml.com/blog/openai-o1"&gt;OpenAI O1&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Switch from 100s of models in a couple lines&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;function Extract() -&amp;gt; Resume {
+  client openai/o3-mini
  prompt #"
    ....
  "#
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/retry-policy"&gt;Retry policies&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/fallback"&gt;fallbacks&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/round-robin"&gt;model rotations&lt;/a&gt;. All statically defined. &lt;img src="https://www.boundaryml.com/blog/2025-01-24-ai-agents-need-a-new-syntax/06-fallback-retry.gif" alt="Fallback Retry" /&gt; Want to do pick models at runtime? Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-advanced/llm-client-registry"&gt;Client Registry&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We support: &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai"&gt;OpenAI&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/anthropic"&gt;Anthropic&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-ai-gemini"&gt;Gemini&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-vertex"&gt;Vertex&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/aws-bedrock"&gt;Bedrock&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai-from-azure"&gt;Azure OpenAI&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic"&gt;Anything OpenAI Compatible&lt;/a&gt; (&lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-ollama"&gt;Ollama&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-open-router"&gt;OpenRouter&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-v-llm"&gt;VLLM&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-lm-studio"&gt;LMStudio&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-together-ai"&gt;TogetherAI&lt;/a&gt;, and more)&lt;/p&gt; 
&lt;h2&gt;Build beautiful streaming UIs&lt;/h2&gt; 
&lt;p&gt;BAML generates a ton of utilities for NextJS, Python (and any language) to make streaming UIs easy. &lt;img src="https://github.com/user-attachments/assets/cf82495b-21fc-40bf-ae98-93eef923d620" alt="recipe-generator" /&gt;&lt;/p&gt; 
&lt;p&gt;BAML's streaming interfaces are fully type-safe. Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-basics/streaming"&gt;Streaming Docs&lt;/a&gt;, and our &lt;a href="https://docs.boundaryml.com/guide/framework-integration/react-next-js/quick-start"&gt;React hooks&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Fully Open-Source, and offline&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% open-source (Apache 2)&lt;/li&gt; 
 &lt;li&gt;100% private. AGI will not require an internet connection, neither will BAML 
  &lt;ul&gt; 
   &lt;li&gt;No network requests beyond model calls you explicitly set&lt;/li&gt; 
   &lt;li&gt;Not stored or used for any training data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;BAML files can be saved locally on your machine and checked into Github for easy diffs.&lt;/li&gt; 
 &lt;li&gt;Built in Rust. So fast, you can't even tell it's there.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;BAML's Design Philosophy&lt;/h2&gt; 
&lt;p&gt;Everything is fair game when making new syntax. If you can code it, it can be yours. This is our design philosophy to help restrict ideas:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;1:&lt;/strong&gt; Avoid invention when possible 
  &lt;ul&gt; 
   &lt;li&gt;Yes, prompts need versioning — we have a great versioning tool: git&lt;/li&gt; 
   &lt;li&gt;Yes, you need to save prompts — we have a great storage tool: filesystems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;2:&lt;/strong&gt; Any file editor and any terminal should be enough to use it&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;3:&lt;/strong&gt; Be fast&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;4:&lt;/strong&gt; A first year university student should be able to understand it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why a new programming language&lt;/h2&gt; 
&lt;p&gt;We used to write websites like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;def home():
    return "&amp;lt;button onclick=\"() =&amp;gt; alert(\\\"hello!\\\")\"&amp;gt;Click&amp;lt;/button&amp;gt;"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And now we do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;function Home() {
  return &amp;lt;button onClick={() =&amp;gt; setCount(prev =&amp;gt; prev + 1)}&amp;gt;
          {count} clicks!
         &amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;New syntax can be incredible at expressing new ideas. Plus the idea of maintaining hundreds of f-strings for prompts kind of disgusts us 🤮. Strings are bad for maintainable codebases. We prefer structured strings.&lt;/p&gt; 
&lt;p&gt;The goal of BAML is to give you the expressiveness of English, but the structure of code.&lt;/p&gt; 
&lt;p&gt;Full &lt;a href="https://www.boundaryml.com/blog/ai-agents-need-new-syntax"&gt;blog post&lt;/a&gt; by us.&lt;/p&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;As models get better, we'll continue expecting even more out of them. But what will never change is that we'll want a way to write maintainable code that uses those models. The current way we all just assemble strings is very reminiscent of the early days PHP/HTML soup in web development. We hope some of the ideas we shared today can make a tiny dent in helping us all shape the way we all code tomorrow.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Do I need to write my whole app in BAML?&lt;/td&gt; 
   &lt;td&gt;Nope, only the prompts! BAML translates definitions into the language of your choice! &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;more&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Is BAML stable?&lt;/td&gt; 
   &lt;td&gt;Yes, many companies use it in production! We ship updates weekly!&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Why a new language?&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#why-a-new-programming-language"&gt;Jump to section&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Checkout our &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/CONTRIBUTING.md"&gt;guide on getting started&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;You can cite the BAML repo as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bibtex"&gt;@software{baml,
  author = {Vaibhav Gupta, Aaron Villalpando and Boundary ML team},
  title = {BAML},
  url = {https://github.com/boundaryml/baml},
  year = {2024}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ❤️ by Boundary&lt;/p&gt; 
&lt;p&gt;HQ in Seattle, WA&lt;/p&gt; 
&lt;p&gt;P.S. We're hiring for software engineers that love rust. &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/founders@boundaryml.com"&gt;Email us&lt;/a&gt; or reach out on &lt;a href="https://discord.gg/ENtBB6kkXH"&gt;discord&lt;/a&gt;!&lt;/p&gt; 
&lt;div align="left" style="align-items: left;"&gt; 
 &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#top"&gt; &lt;img src="https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white" alt="Back to Top" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;img src="https://imgs.xkcd.com/comics/standards.png" alt_text="hi" /&gt;</description>
    </item>
    
    <item>
      <title>MystenLabs/sui</title>
      <link>https://github.com/MystenLabs/sui</link>
      <description>&lt;p&gt;Sui, a next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the Move programming language&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/MystenLabs/sui/refs/heads/main/docs/site/static/img/logo.svg?sanitize=true" alt="Logo" width="100" height="100" /&gt; &lt;/p&gt; 
&lt;h1&gt;Welcome to Sui&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/MystenLabs/sui/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/tag/MystenLabs/sui.svg?sort=semver" alt="Github release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/MystenLabs/sui/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/MystenLabs/sui" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://sui.io"&gt;Sui&lt;/a&gt; is a next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the &lt;a href="https://github.com/MystenLabs/awesome-move"&gt;Move programming language&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sui Highlights&lt;/h2&gt; 
&lt;p&gt;Sui offers the following benefits and capabilities:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unmatched scalability, instant settlement&lt;/li&gt; 
 &lt;li&gt;A safe smart contract language accessible to mainstream developers&lt;/li&gt; 
 &lt;li&gt;Ability to define rich and composable on-chain assets&lt;/li&gt; 
 &lt;li&gt;Better user experience for web3 apps&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sui is the only blockchain today that can scale with the growth of web3 while achieving industry-leading performance, cost, programmability, and usability. As Sui approaches Mainnet launch, it will demonstrate capacity beyond the transaction processing capabilities of established systems – traditional and blockchain alike. Sui is the first internet-scale programmable blockchain platform, a foundational layer for web3.&lt;/p&gt; 
&lt;h2&gt;Sui Architecture&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart LR
    CC(CLI Client) --&amp;gt; ClientService
    RC(Rest Client) --&amp;gt; ClientService
    RPCC(RPC Client) --&amp;gt; ClientService
    ClientService --&amp;gt; AuthorityAggregator
    AuthorityAggregator --&amp;gt; AC1[AuthorityClient] &amp;amp; AC2[AuthorityClient]
    subgraph Authority1
      AS[AuthorityState]
    end
    subgraph Authority2
      AS2[AuthorityState]
    end
    AC1 &amp;lt;==&amp;gt;|Network TCP| Authority1
    AC2 &amp;lt;==&amp;gt;|Network TCP| Authority2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sui Overview&lt;/h2&gt; 
&lt;p&gt;Sui is a smart contract platform maintained by a permissionless set of authorities that play a role similar to validators or miners in other blockchain systems.&lt;/p&gt; 
&lt;p&gt;Sui offers scalability and unprecedented low-latency for common use cases. Sui makes the vast majority of transactions processable in parallel, which makes better use of processing resources, and offers the option to increase throughput with more resources. Sui forgoes consensus to instead use simpler and lower-latency primitives for common use cases, such as payment transactions and asset transfers. This is unprecedented in the blockchain world and enables a number of new latency-sensitive distributed applications, ranging from gaming to retail payment at physical points of sale.&lt;/p&gt; 
&lt;p&gt;Sui is written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt; and supports smart contracts written in the &lt;a href="https://github.com/move-language/move"&gt;Move programming language&lt;/a&gt; to define assets that may have an owner. Move programs define operations on these assets including custom rules for their creation, the transfer of these assets to new owners, and operations that mutate assets.&lt;/p&gt; 
&lt;p&gt;Sui has a native token called SUI, with a fixed supply. The SUI token is used to pay for gas, and is also used as &lt;a href="https://learn.bybit.com/blockchain/delegated-proof-of-stake-dpos/"&gt;delegated stake on authorities&lt;/a&gt; within an epoch. The voting power of authorities within this epoch is a function of this delegated stake. Authorities are periodically reconfigured according to the stake delegated to them. In any epoch, the set of authorities is &lt;a href="https://pmg.csail.mit.edu/papers/osdi99.pdf"&gt;Byzantine fault tolerant&lt;/a&gt;. At the end of the epoch, fees collected through all transactions processed are distributed to authorities according to their contribution to the operation of the system. Authorities can in turn share some of the fees as rewards to users that delegated stakes to them.&lt;/p&gt; 
&lt;p&gt;Sui is supported by several cutting-edge &lt;a href="https://github.com/MystenLabs/sui/raw/main/docs/content/concepts/research-papers.mdx"&gt;peer-reviewed studies&lt;/a&gt; and extensive years of open-source development.&lt;/p&gt; 
&lt;h2&gt;More About Sui&lt;/h2&gt; 
&lt;p&gt;Use the following links to learn more about Sui and the Sui ecosystem:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Learn more about working with Sui in the &lt;a href="https://docs.sui.io/"&gt;Sui Documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join the Sui community on &lt;a href="https://discord.gg/sui"&gt;Sui Discord&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Find out more about the Sui ecosystem on the &lt;a href="https://sui.io/resources/"&gt;Sui Resources&lt;/a&gt; page.&lt;/li&gt; 
 &lt;li&gt;Review information about Sui governance, &lt;a href="https://suifoundation.org/decentralization"&gt;decentralization&lt;/a&gt;, and &lt;a href="https://sui.io/grants-hub"&gt;Developer Grants Program&lt;/a&gt; on the &lt;a href="https://sui.io/about"&gt;Sui Foundation&lt;/a&gt; site.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; for details on how to contribute to Sui.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/CODE_OF_CONDUCT.MD"&gt;Code of Conduct&lt;/a&gt; for details on our code of conduct.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>j178/prek</title>
      <link>https://github.com/j178/prek</link>
      <description>&lt;p&gt;⚡ Better `pre-commit`, re-engineered in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;prek&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/badge/Development-Early_Stage-yellowgreen" alt="Development Status" /&gt; &lt;a href="https://github.com/j178/prek/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/j178/prek/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://github.com/j178/prek/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/j178/prek/total?&amp;amp;logo=github" alt="GitHub downloads" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/3NRJUqJz86"&gt;&lt;img src="https://img.shields.io/discord/1403581202102878289?logo=discord" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img width="250" alt="prek" src="https://github.com/user-attachments/assets/3a87815a-9f3c-48e7-8c1d-384b07ad3b35" /&gt; 
&lt;p&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; is a framework to run hooks written in many languages, and it manages the language toolchain and dependencies for running the hooks.&lt;/p&gt; 
&lt;p&gt;prek is a reimagined version of pre-commit, built in Rust. It is designed to be a faster, dependency-free and drop-in alternative for it, while also providing some additional long-requested features.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] This project was previously named &lt;code&gt;prefligit&lt;/code&gt;, but it has been renamed to &lt;code&gt;prek&lt;/code&gt; to avoid typosquatting issues.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] This project is still in early stage of development, some features are still not implemented. It is not production-ready yet, but feel free to try it out and provide feedback.&lt;/p&gt; 
 &lt;p&gt;Current supported languages are &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, &lt;code&gt;docker&lt;/code&gt;, &lt;code&gt;docker-image&lt;/code&gt;, &lt;code&gt;pygrep&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 A single binary with no dependencies, does not require Python or any other runtime.&lt;/li&gt; 
 &lt;li&gt;⚡ About &lt;a href="https://github.com/j178/prek/raw/master/BENCHMARK.md"&gt;10x faster&lt;/a&gt; than &lt;code&gt;pre-commit&lt;/code&gt; and uses only a third of disk space.&lt;/li&gt; 
 &lt;li&gt;🔄 Fully compatible with the original pre-commit configurations and hooks.&lt;/li&gt; 
 &lt;li&gt;🐍 Integration with &lt;a href="https://github.com/astral-sh/uv"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; for managing Python virtual environments and dependencies.&lt;/li&gt; 
 &lt;li&gt;🛠️ Improved toolchain installations for Python, Node.js, Go, Rust and Ruby, shared between hooks.&lt;/li&gt; 
 &lt;li&gt;📦 Built-in implementation of some common hooks.&lt;/li&gt; 
 &lt;li&gt;🏗️ (TODO) Built-in support for monorepos.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to migrate&lt;/h2&gt; 
&lt;p&gt;prek is designed as a drop-in replacement:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/j178/prek/master/#installation"&gt;Install prek&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Replace &lt;code&gt;pre-commit&lt;/code&gt; with &lt;code&gt;prek&lt;/code&gt; in your commands&lt;/li&gt; 
 &lt;li&gt;Your existing &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; works unchanged&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ prek run
trim trailing whitespace.................................................Passed
fix end of files.........................................................Passed
typos....................................................................Passed
cargo fmt................................................................Passed
cargo clippy.............................................................Passed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For configuring &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; and writing hooks, you can refer to the &lt;a href="https://pre-commit.com/"&gt;pre-commit documentation&lt;/a&gt; as prek is fully compatible with it.&lt;/p&gt; 
&lt;h2&gt;Why prek?&lt;/h2&gt; 
&lt;h3&gt;prek is way faster&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is about &lt;a href="https://github.com/j178/prek/raw/master/BENCHMARK.md"&gt;10x faster&lt;/a&gt; than &lt;code&gt;pre-commit&lt;/code&gt; and uses only a third of disk space.&lt;/li&gt; 
 &lt;li&gt;It redesigned how hook environments and toolchains are managed, they are all shared between hooks, which reduces the disk space usage and speeds up the installation process.&lt;/li&gt; 
 &lt;li&gt;Repositories are cloned in parallel, and hooks are installed in parallel if their dependencies are disjoint.&lt;/li&gt; 
 &lt;li&gt;It uses &lt;a href="https://github.com/astral-sh/uv"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; for creating Python virtualenvs and installing dependencies, which is known for its speed and efficiency.&lt;/li&gt; 
 &lt;li&gt;It implements some common hooks in Rust, built in prek, which are faster than their Python counterparts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;prek provides a better user experience&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;No need to install Python or any other runtime, just download a single binary.&lt;/li&gt; 
 &lt;li&gt;No hassle with your Python version or virtual environments, prek automatically installs the required Python version and creates a virtual environment for you.&lt;/li&gt; 
 &lt;li&gt;(TODO): Built-in support for workspaces (or monorepos), each subproject can have its own &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prek run&lt;/code&gt; has some improvements over &lt;code&gt;pre-commit run&lt;/code&gt;, such as: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;prek run --directory &amp;lt;dir&amp;gt;&lt;/code&gt; runs hooks for files in the specified directory, no need to use &lt;code&gt;git ls-files -- &amp;lt;dir&amp;gt; | xargs pre-commit run --files&lt;/code&gt; anymore.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;prek run --last-commit&lt;/code&gt; runs hooks for files changed in the last commit.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prek list&lt;/code&gt; command lists all available hooks, their ids, and descriptions, providing a better overview of the configured hooks.&lt;/li&gt; 
 &lt;li&gt;prek provides shell completions for &lt;code&gt;prek run &amp;lt;hook_id&amp;gt;&lt;/code&gt; command, making it easier to run specific hooks without remembering their ids.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Standalone installer&lt;/summary&gt; 
 &lt;p&gt;prek provides a standalone installer script to download and install the tool:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;# On Linux and macOS
curl --proto '=https' --tlsv1.2 -LsSf https://github.com/j178/prek/releases/download/v0.0.24/prek-installer.sh | sh

# On Windows
powershell -ExecutionPolicy ByPass -c "irm https://github.com/j178/prek/releases/download/v0.0.24/prek-installer.ps1 | iex"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;PyPI&lt;/summary&gt; 
 &lt;p&gt;prek is published as Python binary wheel to PyPI, you can install it using &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;uv&lt;/code&gt; (recommended), or &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;pip install prek

# or

uv tool install prek

# or

pipx install prek
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Homebrew&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;brew install j178/tap/prek
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Cargo&lt;/summary&gt; 
 &lt;p&gt;Build from source using Cargo:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;cargo install --locked --git https://github.com/j178/prek
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GitHub Releases&lt;/summary&gt; 
 &lt;p&gt;prek release artifacts can be downloaded directly from the &lt;a href="https://github.com/j178/prekprek/releases"&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;If installed via the standalone installer, prek can update itself to the latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ prek self update
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;This project is heavily inspired by the original &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; tool, and it wouldn't be possible without the hard work of the maintainers and contributors of that project.&lt;/p&gt; 
&lt;p&gt;And a special thanks to the &lt;a href="https://github.com/astral-sh"&gt;Astral&lt;/a&gt; team for their remarkable projects, particularly &lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt;, from which I've learned a lot on how to write efficient and idiomatic Rust code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stalwartlabs/stalwart</title>
      <link>https://github.com/stalwartlabs/stalwart</link>
      <description>&lt;p&gt;All-in-one Mail &amp; Collaboration server. Secure, scalable and fluent in every protocol (IMAP, JMAP, SMTP, CalDAV, CardDAV, WebDAV).&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://stalw.art"&gt; &lt;img src="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/img/logo-red.svg?sanitize=true" height="150" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt; Secure, scalable mail &amp;amp; collaboration server with comprehensive protocol support 🛡️ &lt;br /&gt;(IMAP, JMAP, SMTP, CalDAV, CardDAV, WebDAV) &lt;/h3&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/stalwartlabs/stalwart/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/stalwartlabs/stalwart/ci.yml?style=flat-square" alt="continuous integration" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.gnu.org/licenses/agpl-3.0"&gt;&lt;img src="https://img.shields.io/badge/License-AGPL_v3-blue.svg?label=license&amp;amp;style=flat-square" alt="License: AGPL v3" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://stalw.art/docs/install/get-started"&gt;&lt;img src="https://img.shields.io/badge/read_the-docs-red?style=flat-square" alt="Documentation" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://mastodon.social/@stalwartlabs"&gt;&lt;img src="https://img.shields.io/mastodon/follow/109929667531941122?style=flat-square&amp;amp;logo=mastodon&amp;amp;color=%236364ff&amp;amp;label=Follow%20on%20Mastodon" alt="Mastodon" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/stalwartlabs"&gt;&lt;img src="https://img.shields.io/twitter/follow/stalwartlabs?style=flat-square&amp;amp;logo=x&amp;amp;label=Follow%20on%20Twitter" alt="Twitter" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.com/servers/stalwart-923615863037390889"&gt;&lt;img src="https://img.shields.io/discord/923615863037390889?label=Join%20Discord&amp;amp;logo=discord&amp;amp;style=flat-square" alt="Discord" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.reddit.com/r/stalwartlabs/"&gt;&lt;img src="https://img.shields.io/reddit/subreddit-subscribers/stalwartlabs?label=Join%20%2Fr%2Fstalwartlabs&amp;amp;logo=reddit&amp;amp;style=flat-square" alt="Reddit" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Stalwart&lt;/strong&gt; is an open-source mail &amp;amp; collaboration server with JMAP, IMAP4, POP3, SMTP, CalDAV, CardDAV and WebDAV support and a wide range of modern features. It is written in Rust and designed to be secure, fast, robust and scalable.&lt;/p&gt; 
&lt;p&gt;Key features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt; server with complete protocol support: 
  &lt;ul&gt; 
   &lt;li&gt;JMAP: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8621"&gt;JMAP for Mail&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://www.ietf.org/archive/id/draft-ietf-jmap-sieve-22.html"&gt;JMAP for Sieve Scripts&lt;/a&gt;.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8887"&gt;WebSocket&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc9404.html"&gt;Blob Management&lt;/a&gt; and &lt;a href="https://www.rfc-editor.org/rfc/rfc9425.html"&gt;Quotas&lt;/a&gt; extensions.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;IMAP: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc9051"&gt;IMAP4rev2&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc3501"&gt;IMAP4rev1&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc5804"&gt;ManageSieve&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;Numerous &lt;a href="https://stalw.art/docs/development/rfcs#imap4-and-extensions"&gt;extensions&lt;/a&gt; supported.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;POP3: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc1939"&gt;POP3&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc2595"&gt;STLS&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc5034"&gt;SASL&lt;/a&gt; support as well as other &lt;a href="https://datatracker.ietf.org/doc/html/rfc2449"&gt;extensions&lt;/a&gt;.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;SMTP: 
    &lt;ul&gt; 
     &lt;li&gt;SMTP server with built-in &lt;a href="https://datatracker.ietf.org/doc/html/rfc7489"&gt;DMARC&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6376"&gt;DKIM&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc7208"&gt;SPF&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc8617"&gt;ARC&lt;/a&gt; support for message authentication.&lt;/li&gt; 
     &lt;li&gt;Strong transport security through &lt;a href="https://datatracker.ietf.org/doc/html/rfc6698"&gt;DANE&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc8461"&gt;MTA-STS&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc8460"&gt;SMTP TLS&lt;/a&gt; reporting.&lt;/li&gt; 
     &lt;li&gt;Inbound throttling and filtering with granular configuration rules, sieve scripting, MTA hooks and milter integration.&lt;/li&gt; 
     &lt;li&gt;Distributed virtual queues with delayed delivery, priority delivery, quotas, routing rules and throttling support.&lt;/li&gt; 
     &lt;li&gt;Envelope rewriting and message modification.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt; server: 
  &lt;ul&gt; 
   &lt;li&gt;Calendaring with &lt;a href="https://datatracker.ietf.org/doc/html/rfc4791"&gt;CalDAV&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6638"&gt;CalDAV Scheduling&lt;/a&gt; and e-mail alarms support.&lt;/li&gt; 
   &lt;li&gt;Contact management with &lt;a href="https://datatracker.ietf.org/doc/html/rfc6352"&gt;CardDAV&lt;/a&gt; support.&lt;/li&gt; 
   &lt;li&gt;File storage with &lt;a href="https://datatracker.ietf.org/doc/html/rfc4918"&gt;WebDAV&lt;/a&gt; support.&lt;/li&gt; 
   &lt;li&gt;Sharing with &lt;a href="https://datatracker.ietf.org/doc/html/rfc3744"&gt;WebDAV ACL&lt;/a&gt; support for fine-grained access control.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Spam&lt;/strong&gt; and &lt;strong&gt;Phishing&lt;/strong&gt; built-in filter: 
  &lt;ul&gt; 
   &lt;li&gt;Comprehensive set of filtering &lt;strong&gt;rules&lt;/strong&gt; on par with popular solutions.&lt;/li&gt; 
   &lt;li&gt;LLM-driven spam filtering and message analysis.&lt;/li&gt; 
   &lt;li&gt;Statistical &lt;strong&gt;spam classifier&lt;/strong&gt; with automatic training capabilities and address book integration.&lt;/li&gt; 
   &lt;li&gt;DNS Blocklists (&lt;strong&gt;DNSBLs&lt;/strong&gt;) checking of IP addresses, domains, and hashes.&lt;/li&gt; 
   &lt;li&gt;Collaborative digest-based spam filtering with &lt;strong&gt;Pyzor&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Phishing&lt;/strong&gt; protection against homographic URL attacks, sender spoofing and other techniques.&lt;/li&gt; 
   &lt;li&gt;Trusted &lt;strong&gt;reply&lt;/strong&gt; tracking to recognize and prioritize genuine e-mail replies.&lt;/li&gt; 
   &lt;li&gt;Sender &lt;strong&gt;reputation&lt;/strong&gt; monitoring by IP address, ASN, domain and email address.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Greylisting&lt;/strong&gt; to temporarily defer unknown senders.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Spam traps&lt;/strong&gt; to set up decoy email addresses that catch and analyze spam.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Pluggable storage backends with &lt;strong&gt;RocksDB&lt;/strong&gt;, &lt;strong&gt;FoundationDB&lt;/strong&gt;, &lt;strong&gt;PostgreSQL&lt;/strong&gt;, &lt;strong&gt;mySQL&lt;/strong&gt;, &lt;strong&gt;SQLite&lt;/strong&gt;, &lt;strong&gt;S3-Compatible&lt;/strong&gt;, &lt;strong&gt;Azure&lt;/strong&gt;, &lt;strong&gt;Redis&lt;/strong&gt; and &lt;strong&gt;ElasticSearch&lt;/strong&gt; support.&lt;/li&gt; 
   &lt;li&gt;Full-text search available in 17 languages.&lt;/li&gt; 
   &lt;li&gt;Sieve scripting language with support for all &lt;a href="https://www.iana.org/assignments/sieve-extensions/sieve-extensions.xhtml"&gt;registered extensions&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Email aliases, mailing lists, subaddressing and catch-all addresses support.&lt;/li&gt; 
   &lt;li&gt;Automatic account configuration and discovery with &lt;a href="https://www.ietf.org/id/draft-bucksch-autoconfig-02.html"&gt;autoconfig&lt;/a&gt; and &lt;a href="https://learn.microsoft.com/en-us/exchange/architecture/client-access/autodiscover?view=exchserver-2019"&gt;autodiscover&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Multi-tenancy support with domain and tenant isolation.&lt;/li&gt; 
   &lt;li&gt;Disk quotas per user and tenant.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure and robust&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Encryption at rest with &lt;strong&gt;S/MIME&lt;/strong&gt; or &lt;strong&gt;OpenPGP&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Automatic TLS certificate provisioning with &lt;a href="https://datatracker.ietf.org/doc/html/rfc8555"&gt;ACME&lt;/a&gt; using &lt;code&gt;TLS-ALPN-01&lt;/code&gt;, &lt;code&gt;DNS-01&lt;/code&gt; or &lt;code&gt;HTTP-01&lt;/code&gt; challenges.&lt;/li&gt; 
   &lt;li&gt;Automated blocking of IP addresses that attack, abuse or scan the server for exploits.&lt;/li&gt; 
   &lt;li&gt;Rate limiting.&lt;/li&gt; 
   &lt;li&gt;Security audited (read the &lt;a href="https://stalw.art/blog/security-audit"&gt;report&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;Memory safe (thanks to Rust).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scalable and fault-tolerant&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Designed to handle growth seamlessly, from small setups to large-scale deployments of thousands of nodes.&lt;/li&gt; 
   &lt;li&gt;Built with &lt;strong&gt;fault tolerance&lt;/strong&gt; and &lt;strong&gt;high availability&lt;/strong&gt; in mind, recovers from hardware or software failures with minimal operational impact.&lt;/li&gt; 
   &lt;li&gt;Peer-to-peer cluster coordination or with &lt;strong&gt;Kafka&lt;/strong&gt;, &lt;strong&gt;Redpanda&lt;/strong&gt;, &lt;strong&gt;NATS&lt;/strong&gt; or &lt;strong&gt;Redis&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;, &lt;strong&gt;Apache Mesos&lt;/strong&gt; and &lt;strong&gt;Docker Swarm&lt;/strong&gt; support for automated scaling and container orchestration.&lt;/li&gt; 
   &lt;li&gt;Read replicas, sharded blob storage and in-memory data stores for high performance and low latency.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Authentication and Authorization&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;OpenID Connect&lt;/strong&gt; authentication.&lt;/li&gt; 
   &lt;li&gt;OAuth 2.0 authorization with &lt;a href="https://www.rfc-editor.org/rfc/rfc8628"&gt;authorization code&lt;/a&gt; and &lt;a href="https://www.rfc-editor.org/rfc/rfc8628"&gt;device authorization&lt;/a&gt; flows.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;LDAP&lt;/strong&gt;, &lt;strong&gt;OIDC&lt;/strong&gt;, &lt;strong&gt;SQL&lt;/strong&gt; or built-in authentication backend support.&lt;/li&gt; 
   &lt;li&gt;Two-factor authentication with Time-based One-Time Passwords (&lt;code&gt;2FA-TOTP&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Application passwords (App Passwords).&lt;/li&gt; 
   &lt;li&gt;Roles and permissions.&lt;/li&gt; 
   &lt;li&gt;Access Control Lists (ACLs).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Logging and tracing with &lt;strong&gt;OpenTelemetry&lt;/strong&gt;, journald, log files and console support.&lt;/li&gt; 
   &lt;li&gt;Metrics with &lt;strong&gt;OpenTelemetry&lt;/strong&gt; and &lt;strong&gt;Prometheus&lt;/strong&gt; integration.&lt;/li&gt; 
   &lt;li&gt;Webhooks for event-driven automation.&lt;/li&gt; 
   &lt;li&gt;Alerts with email and webhook notifications.&lt;/li&gt; 
   &lt;li&gt;Live tracing and metrics.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web-based administration&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Dashboard with real-time statistics and monitoring.&lt;/li&gt; 
   &lt;li&gt;Account, domain, group and mailing list management.&lt;/li&gt; 
   &lt;li&gt;SMTP queue management for messages and outbound DMARC and TLS reports.&lt;/li&gt; 
   &lt;li&gt;Report visualization interface for received DMARC, TLS-RPT and Failure (ARF) reports.&lt;/li&gt; 
   &lt;li&gt;Configuration of every aspect of the mail server.&lt;/li&gt; 
   &lt;li&gt;Log viewer with search and filtering capabilities.&lt;/li&gt; 
   &lt;li&gt;Self-service portal for password reset and encryption-at-rest key management.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/img/screencast-setup.gif" /&gt; 
&lt;h2&gt;Presentation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Want a deeper dive?&lt;/strong&gt; Need to explain to your boss why Stalwart is the perfect fit? Whether you're evaluating options, making a case to your team, or simply curious about how it all works under the hood, these slides walk you through the key features, architecture, and benefits of Stalwart. Browse the &lt;a href="https://stalw.art/slides"&gt;slides&lt;/a&gt; to see what makes it stand out.&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;Install Stalwart on your server by following the instructions for your platform:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/linux"&gt;Linux / MacOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/windows"&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/docker"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All documentation is available at &lt;a href="https://stalw.art/docs/install/get-started"&gt;stalw.art/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you are having problems running Stalwart, you found a bug or just have a question, do not hesitate to reach us on &lt;a href="https://github.com/stalwartlabs/stalwart/discussions"&gt;GitHub Discussions&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/stalwartlabs"&gt;Reddit&lt;/a&gt; or &lt;a href="https://discord.com/servers/stalwart-923615863037390889"&gt;Discord&lt;/a&gt;. Additionally you may purchase an &lt;a href="https://stalw.art/enterprise"&gt;Enterprise License&lt;/a&gt; to obtain priority support from Stalwart Labs LLC.&lt;/p&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;p&gt;Your support is crucial in helping us continue to improve the project, add new features, and maintain the highest level of quality. By &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;, you help fund the development and future of Stalwart. As a thank-you, sponsors who contribute $5 per month or more will automatically receive a &lt;a href="https://stalw.art/enterprise/"&gt;Enterprise edition&lt;/a&gt; license. And, sponsors who contribute $30 per month or more, also have access to &lt;a href="https://stalw.art/support"&gt;Premium Support&lt;/a&gt; from Stalwart Labs.&lt;/p&gt; 
&lt;p&gt;These are some of our open-source sponsors:&lt;/p&gt; 
&lt;!-- sponsors --&gt;
&lt;a href="https://github.com/kbjr"&gt;&lt;img src="https://github.com/kbjr.png" width="60px" alt="User avatar: James Brumond" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/MailRoute"&gt;&lt;img src="https://github.com/MailRoute.png" width="60px" alt="User avatar: MailRoute, Inc." /&gt;&lt;/a&gt;
&lt;a href="https://github.com/JAMflow-Cloud"&gt;&lt;img src="https://github.com/JAMflow-Cloud.png" width="60px" alt="User avatar: JAMflow Cloud" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/starsong-consulting"&gt;&lt;img src="https://github.com/starsong-consulting.png" width="60px" alt="User avatar: Starsong GmbH" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/Vie-eco"&gt;&lt;img src="https://github.com/Vie-eco.png" width="60px" alt="User avatar: Vie.eco" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/mingfu-design"&gt;&lt;img src="https://github.com/mingfu-design.png" width="60px" alt="User avatar: Ming Fu Design Ltd. 明孚設計有限公司" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/tamwuff"&gt;&lt;img src="https://github.com/tamwuff.png" width="60px" alt="User avatar: Tamino" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/panascais"&gt;&lt;img src="https://github.com/panascais.png" width="60px" alt="User avatar: panascais" /&gt;&lt;/a&gt;
&lt;!-- sponsors --&gt; 
&lt;p&gt;&lt;br /&gt;If you would like to support our work, please consider &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; JMAP for Calendars, Contacts and File Storage support&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Webmail client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/stalwartlabs/stalwart/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3Aenhancement"&gt;enhancement requests&lt;/a&gt; page for a full list of proposed features by the community.&lt;/p&gt; 
&lt;h2&gt;Funding&lt;/h2&gt; 
&lt;p&gt;Part of the development of this project was funded through:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nlnet.nl/entrust"&gt;NGI0 Entrust Fund&lt;/a&gt;, a fund established by &lt;a href="https://nlnet.nl/"&gt;NLnet&lt;/a&gt; with financial support from the European Commission's &lt;a href="https://ngi.eu/"&gt;Next Generation Internet&lt;/a&gt; programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 101069594.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nlnet.nl/NGI0/"&gt;NGI Zero Core&lt;/a&gt;, a fund established by &lt;a href="https://nlnet.nl/"&gt;NLnet&lt;/a&gt; with financial support from the European Commission's programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 101092990.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you find the project useful you can help by &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;. Thank you!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is dual-licensed under the &lt;strong&gt;GNU Affero General Public License v3.0&lt;/strong&gt; (AGPL-3.0; as published by the Free Software Foundation) and the &lt;strong&gt;Stalwart Enterprise License v1 (SELv1)&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/AGPL-3.0-only.txt"&gt;GNU Affero General Public License v3.0&lt;/a&gt; is a free software license that ensures your freedom to use, modify, and distribute the software, with the condition that any modified versions of the software must also be distributed under the same license.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/LicenseRef-SEL.txt"&gt;Stalwart Enterprise License v1 (SELv1)&lt;/a&gt; is a proprietary license designed for commercial use. It offers additional features and greater flexibility for businesses that do not wish to comply with the AGPL-3.0 license requirements.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each file in this project contains a license notice at the top, indicating the applicable license(s). The license notice follows the &lt;a href="https://reuse.software/"&gt;REUSE guidelines&lt;/a&gt; to ensure clarity and consistency. The full text of each license is available in the &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/"&gt;LICENSES&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2020, Stalwart Labs LLC&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>paritytech/polkadot-sdk</title>
      <link>https://github.com/paritytech/polkadot-sdk</link>
      <description>&lt;p&gt;The Parity Polkadot Blockchain SDK&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/images/Polkadot_Logo_Horizontal_Pink_White.png#gh-dark-mode-only" alt="SDK Logo" /&gt; &lt;img src="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/images/Polkadot_Logo_Horizontal_Pink_Black.png#gh-light-mode-only" alt="SDK Logo" /&gt;&lt;/p&gt; 
 &lt;h1&gt;Polkadot SDK&lt;/h1&gt; 
 &lt;p&gt;&lt;img src="https://img.shields.io/github/stars/paritytech/polkadot-sdk" alt="GitHub stars" /&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://img.shields.io/github/forks/paritytech/polkadot-sdk" alt="GitHub forks" /&gt;&lt;/p&gt; 
 &lt;!-- markdownlint-disable-next-line MD013 --&gt; 
 &lt;p&gt;&lt;a href="https://substrate.stackexchange.com/"&gt;&lt;img src="https://img.shields.io/badge/StackExchange-Community%20&amp;amp;%20Support-222222?logo=stackexchange" alt="StackExchange" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://img.shields.io/github/contributors/paritytech/polkadot-sdk" alt="GitHub contributors" /&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://img.shields.io/github/commit-activity/m/paritytech/polkadot-sdk" alt="GitHub commit activity" /&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://img.shields.io/github/last-commit/paritytech/polkadot-sdk" alt="GitHub last commit" /&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;The Polkadot SDK repository provides all the components needed to start building on the &lt;a href="https://polkadot.com/"&gt;Polkadot&lt;/a&gt; network, a multi-chain blockchain platform that enables different blockchains to interoperate and share information in a secure and scalable way.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;h2&gt;⚡ Quickstart&lt;/h2&gt; 
&lt;p&gt;If you want to get an example node running quickly you can execute the following getting started script:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/scripts/getting-started.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;👩🏽‍💻 Building&lt;/h2&gt; 
&lt;p&gt;In order to build this project you need to install some dependencies, follow the instructions in &lt;a href="https://docs.polkadot.com/develop/parachains/install-polkadot-sdk"&gt;this guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📚 Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.polkadot.com"&gt;Polkadot Documentation Portal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/index.html"&gt;🦀 rust-docs&lt;/a&gt;: Where we keep track of the API docs of our Rust crates. Includes: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/polkadot_sdk/index.html"&gt;Introduction&lt;/a&gt; to each component of the Polkadot SDK: Substrate, FRAME, Cumulus, and XCM&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/guides/index.html"&gt;Guides&lt;/a&gt;, namely how to build your first FRAME pallet&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/polkadot_sdk/templates/index.html"&gt;Templates&lt;/a&gt; for starting a new project.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/external_resources/index.html"&gt;External Resources&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Have a question? You can ask in the Polkadot SDK Developers Chat. Messages from either of these channels are bridged to the other, so you can use whichever one you like. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://t.me/substratedevs"&gt;Telegram&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://matrix.to/#/#substratedevs:matrix.org"&gt;Matrix&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://discord.com/channels/722223075629727774/997505821955076196"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://substrate.stackexchange.com/"&gt;Polkadot and Substrate StackExchange&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Releases&lt;/h2&gt; 
&lt;!-- markdownlint-disable-next-line MD013 --&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/paritytech/release-registry/main/badges/polkadot-sdk-latest.svg?sanitize=true" alt="Current Stable Release" /&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://raw.githubusercontent.com/paritytech/release-registry/main/badges/polkadot-sdk-next.svg?sanitize=true" alt="Next Stable Release" /&gt;&lt;/p&gt; 
&lt;p&gt;The Polkadot SDK is released every three months as a &lt;code&gt;Polkadot stableYYMM&lt;/code&gt; release. Each stable release is supported for one year with patches. See the next upcoming versions in the &lt;a href="https://github.com/paritytech/release-registry/"&gt;Release Registry&lt;/a&gt; and more docs in &lt;a href="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/RELEASE.md"&gt;RELEASE.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can use &lt;a href="https://github.com/paritytech/psvm"&gt;&lt;code&gt;psvm&lt;/code&gt;&lt;/a&gt; to update all dependencies to a specific version without needing to manually select the correct version for each crate.&lt;/p&gt; 
&lt;h2&gt;🛠️ Tooling&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/paritytech/psvm"&gt;Polkadot SDK Version Manager&lt;/a&gt;: A simple tool to manage and update the Polkadot SDK dependencies in any Cargo.toml file. It will automatically update the Polkadot SDK dependencies to their correct crates.io version.&lt;/p&gt; 
&lt;h2&gt;🔐 Security&lt;/h2&gt; 
&lt;p&gt;The security policy and procedures can be found in &lt;a href="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/contributor/SECURITY.md"&gt;docs/contributor/SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🤍 Contributing &amp;amp; Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Ensure you follow our &lt;a href="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/contributor/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt;. In every interaction and contribution, this project adheres to the &lt;a href="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/contributor/CODE_OF_CONDUCT.md"&gt;Contributor Covenant Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;👾 Ready to Contribute?&lt;/h3&gt; 
&lt;p&gt;Take a look at the issues labeled with &lt;a href="https://github.com/paritytech/polkadot-sdk/labels/C1-mentor"&gt;&lt;code&gt;mentor&lt;/code&gt;&lt;/a&gt; (or alternatively &lt;a href="https://mentor.tasty.limo/"&gt;this&lt;/a&gt; page, created by one of the maintainers) label to get started! We always recognize valuable contributions by proposing an on-chain tip to the Polkadot network as a token of our appreciation.&lt;/p&gt; 
&lt;h2&gt;Polkadot Fellowship&lt;/h2&gt; 
&lt;p&gt;Development in this repo usually goes hand in hand with the &lt;code&gt;fellowship&lt;/code&gt; organization. In short, this repository provides all the SDK pieces needed to build both Polkadot and its parachains. But, the actual Polkadot runtime lives in the &lt;code&gt;fellowship/runtimes&lt;/code&gt; repository. Read more about the fellowship, this separation, the RFC process &lt;a href="https://polkadot-fellows.github.io/dashboard/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;History&lt;/h2&gt; 
&lt;p&gt;This repository is the amalgamation of 3 separate repositories that used to make up Polkadot SDK, namely Substrate, Polkadot and Cumulus. Read more about the merge and its history &lt;a href="https://polkadot-public.notion.site/Polkadot-SDK-FAQ-fbc4cecc2c46443fb37b9eeec2f0d85f"&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>succinctlabs/sp1</title>
      <link>https://github.com/succinctlabs/sp1</link>
      <description>&lt;p&gt;SP1 is a zero‑knowledge virtual machine that proves the correct execution of programs compiled for the RISC-V architecture.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SP1&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/succinctlabs/sp1/dev/assets/sp1.png" alt="SP1" /&gt;&lt;/p&gt; 
&lt;p&gt;SP1 is the fastest, most-feature complete zero-knowledge virtual machine (zkVM) that can prove the execution of arbitrary Rust (or any LLVM-compiled language) programs. SP1 makes ZK accessible to &lt;em&gt;any developer&lt;/em&gt;, by making it easy to write ZKP programs in normal Rust code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.succinct.xyz/docs/sp1/getting-started/install"&gt;Install&lt;/a&gt;&lt;/strong&gt; | &lt;a href="https://docs.succinct.xyz/docs/sp1/introduction"&gt;Docs&lt;/a&gt; | &lt;a href="https://github.com/succinctlabs/sp1/tree/main/examples"&gt;Examples&lt;/a&gt; | &lt;a href="https://t.me/+AzG4ws-kD24yMGYx"&gt;Telegram Chat&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Today, developers can write programs, including complex, large programs like a ZK Tendermint light client or type-1 zkEVM using Reth, in Rust (with std support), generate proofs and verify them. Most Rust crates should be supported and can be used seamlessly by your program. Example programs can be found in the &lt;a href="https://github.com/succinctlabs/sp1/tree/main/examples"&gt;examples&lt;/a&gt; folder.&lt;/p&gt; 
&lt;p&gt;To get started, make sure you have &lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust&lt;/a&gt; installed. Then follow the &lt;a href="https://docs.succinct.xyz/docs/sp1/getting-started/install"&gt;installation&lt;/a&gt; guide in the SP1 book and read the &lt;a href="https://docs.succinct.xyz/docs/sp1/getting-started/quickstart"&gt;getting started&lt;/a&gt; section.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;SP1 has undergone audits from &lt;a href="https://www.veridise.com/"&gt;Veridise&lt;/a&gt;, &lt;a href="https://cantina.xyz/"&gt;Cantina&lt;/a&gt;, and &lt;a href="https://kalos.xyz/"&gt;KALOS&lt;/a&gt; and is recommended for production use. The audit reports are available &lt;a href="https://raw.githubusercontent.com/succinctlabs/sp1/dev/audits"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Rust Versions (MSRV)&lt;/h2&gt; 
&lt;p&gt;The current MSRV (minimum supported Rust version) is 1.79.&lt;/p&gt; 
&lt;h2&gt;For Contributors&lt;/h2&gt; 
&lt;p&gt;Open-source is a core part of SP1's ethos and key to its advantages. We wish to cultivate a vibrant community of open-source contributors that span individuals, teams and geographies. If you want to contribute, or follow along with contributor discussion, you can use our main Telegram to chat with us. Our contributor guidelines can be found in &lt;a href="https://raw.githubusercontent.com/succinctlabs/sp1/dev/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;. A quick overview of development tips can be found in &lt;a href="https://raw.githubusercontent.com/succinctlabs/sp1/dev/DEVELOPMENT.md"&gt;DEVELOPMENT.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We are always looking for contributors interested in tasks big and small, including minor chores across the codebase, optimizing performance, adding precompiles for commonly used cryptographic operations, adding documentation, creating new example programs and more. Please reach out in the Telegram chat if interested!&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;We would like to acknowledge the projects below whose previous work has been instrumental in making this project a reality.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Plonky3/Plonky3"&gt;Plonky3&lt;/a&gt;: The SP1's prover is powered by the Plonky3 toolkit.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/valida-xyz/valida"&gt;Valida&lt;/a&gt;: The SP1 cross-table lookups, prover, borrow macro, and chip design, including constraints, are inspired by Valida.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/risc0/risc0"&gt;RISC0&lt;/a&gt;: The SP1 rust toolchain, install/build scripts, and our RISCV runtime borrow code from RISC0.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.cairo-lang.org/how_cairo_works/builtins.html"&gt;Cairo&lt;/a&gt;: Cairo introduced the idea of "builtins" which allow zkVMs to accelerate certain operations. However, the complexity of "builtins" was embedded in the CPU, limiting their complexity. SP1 extends this idea by executing on a vision of easily extensible "precompiles" that can be added as additional tables alongside the CPU.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>robbert-vdh/nih-plug</title>
      <link>https://github.com/robbert-vdh/nih-plug</link>
      <description>&lt;p&gt;Rust VST3 and CLAP plugin framework and plugins - because everything is better when you do it yourself&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NIH-plug&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/robbert-vdh/nih-plug/actions/workflows/build.yml?query=branch%3Amaster"&gt;&lt;img src="https://github.com/robbert-vdh/nih-plug/actions/workflows/build.yml/badge.svg?branch=master" alt="Automated builds" /&gt;&lt;/a&gt; &lt;a href="https://github.com/robbert-vdh/nih-plug/actions/workflows/test.yml?query=branch%3Amaster"&gt;&lt;img src="https://github.com/robbert-vdh/nih-plug/actions/workflows/test.yml/badge.svg?branch=master" alt="Tests" /&gt;&lt;/a&gt; &lt;a href="https://nih-plug.robbertvanderhelm.nl/"&gt;&lt;img src="https://github.com/robbert-vdh/nih-plug/actions/workflows/docs.yml/badge.svg?branch=master" alt="Docs" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;NIH-plug is an API-agnostic audio plugin framework written in Rust, as well as a small collection of plugins. The idea is to have a stateful yet simple plugin API that gets rid of as much unnecessary ceremony wherever possible, while also keeping the amount of magic to minimum and making it easy to experiment with different approaches to things. See the &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#current-features"&gt;current features&lt;/a&gt; section for more information on the project's current status.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://nih-plug.robbertvanderhelm.nl/"&gt;documentation&lt;/a&gt;, or use the &lt;a href="https://github.com/robbert-vdh/nih-plug-template"&gt;cookiecutter template&lt;/a&gt; to quickly get started with NIH-plug.&lt;/p&gt; 
&lt;h3&gt;Table of contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#framework"&gt;Framework&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#current-features"&gt;Current features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#building"&gt;Building&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#plugin-formats"&gt;Plugin formats&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#example-plugins"&gt;Example plugins&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#licensing"&gt;Licensing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;p&gt;Check each plugin's readme file for more details on what the plugin actually does. You can download the development binaries for Linux, Windows and macOS from the &lt;a href="https://github.com/robbert-vdh/nih-plug/actions/workflows/build.yml?query=branch%3Amaster"&gt;automated builds&lt;/a&gt; page. Or if you're not signed in on GitHub, then you can also find the latest nightly build &lt;a href="https://nightly.link/robbert-vdh/nih-plug/workflows/build/master"&gt;here&lt;/a&gt;. You may need to &lt;a href="https://disable-gatekeeper.github.io/"&gt;disable Gatekeeper&lt;/a&gt; on macOS to be able to use the plugins.&lt;/p&gt; 
&lt;p&gt;Scroll down for more information on the underlying plugin framework.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/buffr_glitch"&gt;&lt;strong&gt;Buffr Glitch&lt;/strong&gt;&lt;/a&gt; is the plugin for you if you enjoy the sound of a CD player skipping This plugin is essentially a MIDI triggered buffer repeat plugin. When you play a note, the plugin will sample the period corresponding to that note's frequency and use that as a single waveform cycle. This can end up sounding like an in-tune glitch when used sparingly, or like a weird synthesizer when used less subtly.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/crisp"&gt;&lt;strong&gt;Crisp&lt;/strong&gt;&lt;/a&gt; adds a bright crispy top end to any low bass sound. Inspired by Polarity's &lt;a href="https://youtu.be/MKfFn4L1zeg"&gt;Fake Distortion&lt;/a&gt; video.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/crossover"&gt;&lt;strong&gt;Crossover&lt;/strong&gt;&lt;/a&gt; is as boring as it sounds. It cleanly splits the signal into two to five bands using a variety of algorithms. Those bands are then sent to auxiliary outputs so they can be accessed and processed individually. Meant as an alternative to Bitwig's Multiband FX devices but with cleaner crossovers and a linear-phase option.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/diopser"&gt;&lt;strong&gt;Diopser&lt;/strong&gt;&lt;/a&gt; is a totally original phase rotation plugin. Useful for oomphing up kickdrums and basses, transforming synths into their evil phase-y cousin, and making everything sound like a cheap Sci-Fi laser beam.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/loudness_war_winner"&gt;&lt;strong&gt;Loudness War Winner&lt;/strong&gt;&lt;/a&gt; does what it says on the tin. Have you ever wanted to show off your dominance by winning the loudness war? Neither have I. Dissatisfaction guaranteed.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/puberty_simulator"&gt;&lt;strong&gt;Puberty Simulator&lt;/strong&gt;&lt;/a&gt; is that patent pending One Weird Plugin that simulates the male voice change during puberty! If it was not already obvious from that sentence, this plugin is a joke, but it might actually be useful (or at least interesting) in some situations. This plugin pitches the signal down an octave, but it also has the side effect of causing things to sound like a cracking voice or to make them sound slightly out of tune.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/safety_limiter"&gt;&lt;strong&gt;Safety Limiter&lt;/strong&gt;&lt;/a&gt; is a simple tool to prevent ear damage. As soon as there is a peak above 0 dBFS or the specified threshold, the plugin will cut over to playing SOS in Morse code, gradually fading out again when the input returns back to safe levels. Made for personal use during plugin development and intense sound design sessions, but maybe you'll find it useful too!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/soft_vacuum"&gt;&lt;strong&gt;Soft Vacuum&lt;/strong&gt;&lt;/a&gt; is a straightforward port of Airwindows' &lt;a href="https://www.airwindows.com/hard-vacuum-vst/"&gt;Hard Vacuum&lt;/a&gt; plugin with parameter smoothing and up to 16x linear-phase oversampling, because I liked the distortion and just wished it had oversampling. All credit goes to Chris from Airwindows. I just wanted to share this in case anyone else finds it useful.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/spectral_compressor"&gt;&lt;strong&gt;Spectral Compressor&lt;/strong&gt;&lt;/a&gt; can squash anything into pink noise, apply simultaneous upwards and downwards compressor to dynamically match the sidechain signal's spectrum and morph one sound into another, and lots more. Have you ever wondered what a 16384 band OTT would sound like? Neither have I.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Framework&lt;/h2&gt; 
&lt;h3&gt;Current features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports both VST3 and &lt;a href="https://github.com/free-audio/clap"&gt;CLAP&lt;/a&gt; by simply adding the corresponding &lt;code&gt;nih_export_&amp;lt;api&amp;gt;!(Foo)&lt;/code&gt; macro to your plugin's library.&lt;/li&gt; 
 &lt;li&gt;Standalone binaries can be made by calling &lt;code&gt;nih_export_standalone(Foo)&lt;/code&gt; from your &lt;code&gt;main()&lt;/code&gt; function. Standalones come with a CLI for configuration and full JACK audio, MIDI, and transport support.&lt;/li&gt; 
 &lt;li&gt;Rich declarative parameter system without any boilerplate. 
  &lt;ul&gt; 
   &lt;li&gt;Define parameters for your plugin by adding &lt;code&gt;FloatParam&lt;/code&gt;, &lt;code&gt;IntParam&lt;/code&gt;, &lt;code&gt;BoolParam&lt;/code&gt;, and &lt;code&gt;EnumParam&amp;lt;T&amp;gt;&lt;/code&gt; fields to your parameter struct, assign stable IDs to them with the &lt;code&gt;#[id = "foobar"]&lt;/code&gt;, and a &lt;code&gt;#[derive(Params)]&lt;/code&gt; does all of the boring work for you.&lt;/li&gt; 
   &lt;li&gt;Parameters can have complex value distributions and the parameter objects come with built-in smoothers and callbacks.&lt;/li&gt; 
   &lt;li&gt;Use simple enums deriving the &lt;code&gt;Enum&lt;/code&gt; trait with the &lt;code&gt;EnumParam&amp;lt;T&amp;gt;&lt;/code&gt; parameter type for parameters that allow the user to choose between multiple discrete options. That way you can use regular Rust pattern matching when working with these values without having to do any conversions yourself.&lt;/li&gt; 
   &lt;li&gt;Store additional non-parameter state for your plugin by adding any field that can be serialized with &lt;a href="https://serde.rs/"&gt;Serde&lt;/a&gt; to your plugin's &lt;code&gt;Params&lt;/code&gt; object and annotating them with &lt;code&gt;#[persist = "key"]&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Optional support for state migrations, for handling breaking changes in plugin parameters.&lt;/li&gt; 
   &lt;li&gt;Group your parameters into logical groups by nesting &lt;code&gt;Params&lt;/code&gt; objects using the &lt;code&gt;#[nested(group = "...")]&lt;/code&gt;attribute.&lt;/li&gt; 
   &lt;li&gt;The &lt;code&gt;#[nested]&lt;/code&gt; attribute also enables you to use multiple copies of the same parameter, either as regular object fields or through arrays.&lt;/li&gt; 
   &lt;li&gt;When needed, you can also provide your own implementation for the &lt;code&gt;Params&lt;/code&gt; trait to enable compile time generated parameters and other bespoke functionality.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Stateful. Behaves mostly like JUCE, just without all of the boilerplate.&lt;/li&gt; 
 &lt;li&gt;Comes with a simple yet powerful way to asynchronously run background tasks from a plugin that's both type-safe and realtime-safe.&lt;/li&gt; 
 &lt;li&gt;Does not make any assumptions on how you want to process audio, but does come with utilities and adapters to help with common access patterns. 
  &lt;ul&gt; 
   &lt;li&gt;Efficiently iterate over an audio buffer either per-sample per-channel, per-block per-channel, or even per-block per-sample-per-channel with the option to manually index the buffer or get access to a channel slice at any time.&lt;/li&gt; 
   &lt;li&gt;Easily leverage per-channel SIMD using the SIMD adapters on the buffer and block iterators.&lt;/li&gt; 
   &lt;li&gt;Comes with bring-your-own-FFT adapters for common (inverse) short-time Fourier Transform operations. More to come.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Optional sample accurate automation support for VST3 and CLAP that can be enabled by setting the &lt;code&gt;Plugin::SAMPLE_ACCURATE_AUTOMATION&lt;/code&gt; constant to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Optional support for compressing the human readable JSON state files using &lt;a href="https://en.wikipedia.org/wiki/Zstd"&gt;Zstandard&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Comes with adapters for popular Rust GUI frameworks as well as some basic widgets for them that integrate with NIH-plug's parameter system. Currently there's support for &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/nih_plug_egui"&gt;egui&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/nih_plug_iced"&gt;iced&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/nih_plug_vizia"&gt;VIZIA&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;A simple and safe API for state saving and restoring from the editor is provided by the framework if you want to do your own internal preset management.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Full support for receiving and outputting both modern polyphonic note expression events as well as MIDI CCs, channel pressure, and pitch bend for CLAP and VST3. 
  &lt;ul&gt; 
   &lt;li&gt;MIDI SysEx is also supported. Plugins can define their own structs or sum types to wrap around those messages so they don't need to interact with raw byte buffers in the process function.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Support for flexible dynamic buffer configurations, including variable numbers of input and output ports.&lt;/li&gt; 
 &lt;li&gt;First-class support several more exotic CLAP features: 
  &lt;ul&gt; 
   &lt;li&gt;Both monophonic and polyphonic parameter modulation are supported.&lt;/li&gt; 
   &lt;li&gt;Plugins can declaratively define pages of remote controls that DAWs can bind to hardware controllers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;A plugin bundler accessible through the &lt;code&gt;cargo xtask bundle &amp;lt;package&amp;gt; &amp;lt;build_arguments&amp;gt;&lt;/code&gt; command that automatically detects which plugin targets your plugin exposes and creates the correct plugin bundles for your target operating system and architecture, with cross-compilation support. The cargo subcommand can easily be added to &lt;a href="https://github.com/robbert-vdh/nih-plug/tree/master/nih_plug_xtask"&gt;your own project&lt;/a&gt; as an alias or &lt;a href="https://github.com/robbert-vdh/nih-plug/tree/master/cargo_nih_plug"&gt;globally&lt;/a&gt; as a regular cargo subcommand.&lt;/li&gt; 
 &lt;li&gt;Tested on Linux and Windows, with limited testing on macOS. Windows support has mostly been tested through Wine with &lt;a href="https://github.com/robbert-vdh/yabridge"&gt;yabridge&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;See the &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/src/plugin.rs"&gt;&lt;code&gt;Plugin&lt;/code&gt;&lt;/a&gt; trait's documentation for an incomplete list of the functionality that has currently not yet been implemented.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;NIH-plug works with the latest stable Rust compiler.&lt;/p&gt; 
&lt;p&gt;After installing &lt;a href="https://rustup.rs/"&gt;Rust&lt;/a&gt;, you can compile any of the plugins in the &lt;code&gt;plugins&lt;/code&gt; directory in the following way, replacing &lt;code&gt;gain&lt;/code&gt; with the name of the plugin:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo xtask bundle gain --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Plugin formats&lt;/h3&gt; 
&lt;p&gt;NIH-plug can currently export VST3 and &lt;a href="https://github.com/free-audio/clap"&gt;CLAP&lt;/a&gt; plugins. Exporting a specific plugin format for a plugin is as simple as calling the &lt;code&gt;nih_export_&amp;lt;format&amp;gt;!(Foo);&lt;/code&gt; macro. The &lt;code&gt;cargo xtask bundle&lt;/code&gt; command will detect which plugin formats your plugin supports and create the appropriate bundles accordingly, even when cross compiling.&lt;/p&gt; 
&lt;h3&gt;Example plugins&lt;/h3&gt; 
&lt;p&gt;The best way to get an idea for what the API looks like is to look at the examples.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain"&gt;&lt;strong&gt;gain&lt;/strong&gt;&lt;/a&gt; is a simple smoothed gain plugin that shows off a couple other parts of the API, like support for storing arbitrary serializable state.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;gain-gui&lt;/strong&gt; is the same plugin as gain, but with a GUI to control the parameter and a digital peak meter. Comes in three exciting flavors: &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain_gui_egui"&gt;egui&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain_gui_iced"&gt;iced&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain_gui_vizia"&gt;VIZIA&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There are also examples for making custom GUIs with &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/byo_gui_gl"&gt;OpenGL&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/byo_gui_wgpu"&gt;wgpu&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/byo_gui_softbuffer"&gt;softbuffer&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/midi_inverter"&gt;&lt;strong&gt;midi_inverter&lt;/strong&gt;&lt;/a&gt; takes note/MIDI events and flips around the note, channel, expression, pressure, and CC values. This example demonstrates how to receive and output those events.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/poly_mod_synth"&gt;&lt;strong&gt;poly_mod_synth&lt;/strong&gt;&lt;/a&gt; is a simple polyphonic synthesizer with support for polyphonic modulation in supported CLAP hosts. This demonstrates how polyphonic modulation can be used in NIH-plug.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/sine"&gt;&lt;strong&gt;sine&lt;/strong&gt;&lt;/a&gt; is a simple test tone generator plugin with frequency smoothing that can also make use of MIDI input instead of generating a static signal based on the plugin's parameters.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/stft"&gt;&lt;strong&gt;stft&lt;/strong&gt;&lt;/a&gt; shows off some of NIH-plug's other optional higher level helper features, such as an adapter to process audio with a short-term Fourier transform using the overlap-add method, all using the compositional &lt;code&gt;Buffer&lt;/code&gt; interfaces.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/sysex"&gt;&lt;strong&gt;sysex&lt;/strong&gt;&lt;/a&gt; is a simple example of how to send and receive SysEx messages by defining custom message types.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;The framework, its libraries, and the example plugins in &lt;code&gt;plugins/examples/&lt;/code&gt; are all licensed under the &lt;a href="https://www.isc.org/licenses/"&gt;ISC license&lt;/a&gt;. However, the &lt;a href="https://github.com/RustAudio/vst3-sys"&gt;VST3 bindings&lt;/a&gt; used by &lt;code&gt;nih_export_vst3!()&lt;/code&gt; are licensed under the GPLv3 license. This means that unless you replace these bindings with your own bindings made from scratch, any VST3 plugins built with NIH-plug need to be able to comply with the terms of the GPLv3 license.&lt;/p&gt; 
&lt;p&gt;The other plugins in the &lt;code&gt;plugins/&lt;/code&gt; directory may be licensed under the GPLv3 license. Check the plugin's &lt;code&gt;Cargo.toml&lt;/code&gt; file for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GreptimeTeam/greptimedb</title>
      <link>https://github.com/GreptimeTeam/greptimedb</link>
      <description>&lt;p&gt;Open-source, cloud-native, unified observability database for metrics, logs and traces, supporting SQL/PromQL/Streaming. Available on GreptimeCloud.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://cdn.jsdelivr.net/gh/GreptimeTeam/greptimedb@main/docs/logo-text-padding.png" /&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://cdn.jsdelivr.net/gh/GreptimeTeam/greptimedb@main/docs/logo-text-padding-dark.png" /&gt; 
  &lt;img alt="GreptimeDB Logo" src="https://cdn.jsdelivr.net/gh/GreptimeTeam/greptimedb@main/docs/logo-text-padding.png" width="400px" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;h2 align="center"&gt;Real-Time &amp;amp; Cloud-Native Observability Database&lt;br /&gt;for metrics, logs, and traces&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Delivers sub-second querying at PB scale and exceptional cost efficiency from edge to cloud.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;div align="center"&gt; 
 &lt;h3 align="center"&gt; &lt;a href="https://greptime.com/product/cloud"&gt;GreptimeCloud&lt;/a&gt; | &lt;a href="https://docs.greptime.com/"&gt;User Guide&lt;/a&gt; | &lt;a href="https://greptimedb.rs/"&gt;API Docs&lt;/a&gt; | &lt;a href="https://github.com/GreptimeTeam/greptimedb/issues/5446"&gt;Roadmap 2025&lt;/a&gt; &lt;/h3&gt; 
 &lt;a href="https://github.com/GreptimeTeam/greptimedb/releases/latest"&gt; &lt;img src="https://img.shields.io/github/v/release/GreptimeTeam/greptimedb.svg?sanitize=true" alt="Version" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/GreptimeTeam/greptimedb/releases/latest"&gt; &lt;img src="https://img.shields.io/github/release-date/GreptimeTeam/greptimedb.svg?sanitize=true" alt="Releases" /&gt; &lt;/a&gt; 
 &lt;a href="https://hub.docker.com/r/greptime/greptimedb/"&gt; &lt;img src="https://img.shields.io/docker/pulls/greptime/greptimedb.svg?sanitize=true" alt="Docker Pulls" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/GreptimeTeam/greptimedb/actions/workflows/develop.yml"&gt; &lt;img src="https://github.com/GreptimeTeam/greptimedb/actions/workflows/develop.yml/badge.svg?sanitize=true" alt="GitHub Actions" /&gt; &lt;/a&gt; 
 &lt;a href="https://codecov.io/gh/GrepTimeTeam/greptimedb"&gt; &lt;img src="https://codecov.io/gh/GrepTimeTeam/greptimedb/branch/main/graph/badge.svg?token=FITFDI3J3C" alt="Codecov" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/greptimeTeam/greptimedb/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/github/license/greptimeTeam/greptimedb" alt="License" /&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;a href="https://greptime.com/slack"&gt; &lt;img src="https://img.shields.io/badge/slack-GreptimeDB-0abd59?logo=slack&amp;amp;style=for-the-badge" alt="Slack" /&gt; &lt;/a&gt; 
 &lt;a href="https://twitter.com/greptime"&gt; &lt;img src="https://img.shields.io/badge/twitter-follow_us-1d9bf0.svg?style=for-the-badge" alt="Twitter" /&gt; &lt;/a&gt; 
 &lt;a href="https://www.linkedin.com/company/greptime/"&gt; &lt;img src="https://img.shields.io/badge/linkedin-connect_with_us-0a66c2.svg?style=for-the-badge" alt="LinkedIn" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#features"&gt;⭐ Key Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#quick-comparison"&gt;Quick Comparison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#architecture"&gt;Architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#try-greptimedb"&gt;Try GreptimeDB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#build-from-source"&gt;Build From Source&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#tools--extensions"&gt;Tools &amp;amp; Extensions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#project-status"&gt;Project Status&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#community"&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#commercial-support"&gt;Commercial Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/#acknowledgement"&gt;Acknowledgement&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;GreptimeDB&lt;/strong&gt; is an open-source, cloud-native database purpose-built for the unified collection and analysis of observability data (metrics, logs, and traces). Whether you’re operating on the edge, in the cloud, or across hybrid environments, GreptimeDB empowers real-time insights at massive scale — all in one system.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.greptime.com/user-guide/concepts/why-greptimedb"&gt;Unified Observability Data&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Store metrics, logs, and traces as timestamped, contextual wide events. Query via &lt;a href="https://docs.greptime.com/user-guide/query-data/sql"&gt;SQL&lt;/a&gt;, &lt;a href="https://docs.greptime.com/user-guide/query-data/promql"&gt;PromQL&lt;/a&gt;, and &lt;a href="https://docs.greptime.com/user-guide/flow-computation/overview"&gt;streaming&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.greptime.com/user-guide/manage-data/data-index"&gt;High Performance &amp;amp; Cost Effective&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Written in Rust, with a distributed query engine, &lt;a href="https://docs.greptime.com/user-guide/manage-data/data-index"&gt;rich indexing&lt;/a&gt;, and optimized columnar storage, delivering sub-second responses at PB scale.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.greptime.com/user-guide/concepts/architecture"&gt;Cloud-Native Architecture&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Designed for &lt;a href="https://docs.greptime.com/user-guide/deployments-administration/deploy-on-kubernetes/greptimedb-operator-management"&gt;Kubernetes&lt;/a&gt;, with compute/storage separation, native object storage (AWS S3, Azure Blob, etc.) and seamless cross-cloud access.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.greptime.com/user-guide/protocols/overview"&gt;Developer-Friendly&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Access via SQL/PromQL interfaces, REST API, MySQL/PostgreSQL protocols, and popular ingestion &lt;a href="https://docs.greptime.com/user-guide/protocols/overview"&gt;protocols&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.greptime.com/user-guide/deployments-administration/overview"&gt;Flexible Deployment&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Deploy anywhere: edge (including ARM/&lt;a href="https://docs.greptime.com/user-guide/deployments-administration/run-on-android"&gt;Android&lt;/a&gt;) or cloud, with unified APIs and efficient data sync.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Learn more in &lt;a href="https://docs.greptime.com/user-guide/concepts/why-greptimedb"&gt;Why GreptimeDB&lt;/a&gt; and &lt;a href="https://greptime.com/blogs/2025-04-25-greptimedb-observability2-new-database"&gt;Observability 2.0 and the Database for It&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Comparison&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;GreptimeDB&lt;/th&gt; 
   &lt;th&gt;Traditional TSDB&lt;/th&gt; 
   &lt;th&gt;Log Stores&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Data Types&lt;/td&gt; 
   &lt;td&gt;Metrics, Logs, Traces&lt;/td&gt; 
   &lt;td&gt;Metrics only&lt;/td&gt; 
   &lt;td&gt;Logs only&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Query Language&lt;/td&gt; 
   &lt;td&gt;SQL, PromQL, Streaming&lt;/td&gt; 
   &lt;td&gt;Custom/PromQL&lt;/td&gt; 
   &lt;td&gt;Custom/DSL&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Deployment&lt;/td&gt; 
   &lt;td&gt;Edge + Cloud&lt;/td&gt; 
   &lt;td&gt;Cloud/On-prem&lt;/td&gt; 
   &lt;td&gt;Mostly central&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Indexing &amp;amp; Performance&lt;/td&gt; 
   &lt;td&gt;PB-Scale, Sub-second&lt;/td&gt; 
   &lt;td&gt;Varies&lt;/td&gt; 
   &lt;td&gt;Varies&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Integration&lt;/td&gt; 
   &lt;td&gt;REST, SQL, Common protocols&lt;/td&gt; 
   &lt;td&gt;Varies&lt;/td&gt; 
   &lt;td&gt;Varies&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://greptime.com/blogs/2025-03-18-jsonbench-greptimedb-performance"&gt;GreptimeDB tops JSONBench's billion-record cold run test!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GreptimeTeam/greptimedb/tree/main/docs/benchmarks/tsbs"&gt;TSBS Benchmark&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read &lt;a href="https://docs.greptime.com/user-guide/concepts/features-that-you-concern#how-is-greptimedbs-performance-compared-to-other-solutions"&gt;more benchmark reports&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read the &lt;a href="https://docs.greptime.com/contributor-guide/overview/#architecture"&gt;architecture&lt;/a&gt; document.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://deepwiki.com/GreptimeTeam/greptimedb/1-overview"&gt;DeepWiki&lt;/a&gt; provides an in-depth look at GreptimeDB: &lt;img alt="GreptimeDB System Overview" src="https://raw.githubusercontent.com/GreptimeTeam/greptimedb/main/docs/architecture.png" /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Try GreptimeDB&lt;/h2&gt; 
&lt;h3&gt;1. &lt;a href="https://greptime.com/playground"&gt;Live Demo&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Experience GreptimeDB directly in your browser.&lt;/p&gt; 
&lt;h3&gt;2. &lt;a href="https://console.greptime.cloud/"&gt;GreptimeCloud&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Start instantly with a free cluster.&lt;/p&gt; 
&lt;h3&gt;3. Docker (Local Quickstart)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker pull greptime/greptimedb
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker run -p 127.0.0.1:4000-4003:4000-4003 \
  -v "$(pwd)/greptimedb_data:/greptimedb_data" \
  --name greptime --rm \
  greptime/greptimedb:latest standalone start \
  --http-addr 0.0.0.0:4000 \
  --rpc-bind-addr 0.0.0.0:4001 \
  --mysql-addr 0.0.0.0:4002 \
  --postgres-addr 0.0.0.0:4003
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Dashboard: &lt;a href="http://localhost:4000/dashboard"&gt;http://localhost:4000/dashboard&lt;/a&gt; &lt;a href="https://docs.greptime.com/getting-started/installation/overview"&gt;Full Install Guide&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Troubleshooting:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cannot connect to the database? Ensure that ports &lt;code&gt;4000&lt;/code&gt;, &lt;code&gt;4001&lt;/code&gt;, &lt;code&gt;4002&lt;/code&gt;, and &lt;code&gt;4003&lt;/code&gt; are not blocked by a firewall or used by other services.&lt;/li&gt; 
 &lt;li&gt;Failed to start? Check the container logs with &lt;code&gt;docker logs greptime&lt;/code&gt; for further details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.greptime.com/getting-started/quick-start"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.greptime.com/user-guide/overview"&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GreptimeTeam/demo-scene"&gt;Demo Scenes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.greptime.com/faq-and-others/faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Build From Source&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust toolchain&lt;/a&gt; (nightly)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grpc.io/docs/protoc-installation/"&gt;Protobuf compiler&lt;/a&gt; (&amp;gt;= 3.15)&lt;/li&gt; 
 &lt;li&gt;C/C++ building essentials, including &lt;code&gt;gcc&lt;/code&gt;/&lt;code&gt;g++&lt;/code&gt;/&lt;code&gt;autoconf&lt;/code&gt; and glibc library (eg. &lt;code&gt;libc6-dev&lt;/code&gt; on Ubuntu and &lt;code&gt;glibc-devel&lt;/code&gt; on Fedora)&lt;/li&gt; 
 &lt;li&gt;Python toolchain (optional): Required only if using some test scripts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Build and Run:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make
cargo run -- standalone start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tools &amp;amp; Extensions&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Kubernetes:&lt;/strong&gt; &lt;a href="https://github.com/GrepTimeTeam/greptimedb-operator"&gt;GreptimeDB Operator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Helm Charts:&lt;/strong&gt; &lt;a href="https://github.com/GreptimeTeam/helm-charts"&gt;Greptime Helm Charts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dashboard:&lt;/strong&gt; &lt;a href="https://github.com/GreptimeTeam/dashboard"&gt;Web UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SDKs/Ingester:&lt;/strong&gt; &lt;a href="https://github.com/GreptimeTeam/greptimedb-ingester-go"&gt;Go&lt;/a&gt;, &lt;a href="https://github.com/GreptimeTeam/greptimedb-ingester-java"&gt;Java&lt;/a&gt;, &lt;a href="https://github.com/GreptimeTeam/greptimedb-ingester-cpp"&gt;C++&lt;/a&gt;, &lt;a href="https://github.com/GreptimeTeam/greptimedb-ingester-erl"&gt;Erlang&lt;/a&gt;, &lt;a href="https://github.com/GreptimeTeam/greptimedb-ingester-rust"&gt;Rust&lt;/a&gt;, &lt;a href="https://github.com/GreptimeTeam/greptimedb-ingester-js"&gt;JS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Grafana&lt;/strong&gt;: &lt;a href="https://github.com/GreptimeTeam/greptimedb/raw/main/grafana/README.md"&gt;Official Dashboard&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Status&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; Beta. &lt;strong&gt;GA (v1.0):&lt;/strong&gt; Targeted for mid 2025.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Being used in production by early adopters&lt;/li&gt; 
 &lt;li&gt;Stable, actively maintained, with regular releases (&lt;a href="https://docs.greptime.com/nightly/reference/about-greptimedb-version"&gt;version info&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Suitable for evaluation and pilot deployments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For production use, we recommend using the latest stable release. &lt;a href="https://www.star-history.com/#GreptimeTeam/GreptimeDB&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=GreptimeTeam/GreptimeDB&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you find this project useful, a ⭐ would mean a lot to us! &lt;img alt="Known Users" src="https://greptime.com/logo/img/users.png" /&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;We invite you to engage and contribute!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://greptime.com/slack"&gt;Slack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GreptimeTeam/greptimedb/discussions"&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://greptime.com/"&gt;Official Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://greptime.com/blogs/"&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/greptime/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://X.com/greptime"&gt;X (Twitter)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/@greptime"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;GreptimeDB is licensed under the &lt;a href="https://apache.org/licenses/LICENSE-2.0.txt"&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Commercial Support&lt;/h2&gt; 
&lt;p&gt;Running GreptimeDB in your organization? We offer enterprise add-ons, services, training, and consulting. &lt;a href="https://greptime.com/contactus"&gt;Contact us&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read our &lt;a href="https://github.com/GreptimeTeam/greptimedb/raw/main/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Explore &lt;a href="https://docs.greptime.com/contributor-guide/overview.html"&gt;Internal Concepts&lt;/a&gt; and &lt;a href="https://deepwiki.com/GreptimeTeam/greptimedb"&gt;DeepWiki&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Pick up a &lt;a href="https://github.com/GreptimeTeam/greptimedb/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;good first issue&lt;/a&gt; and join the #contributors &lt;a href="https://greptime.com/slack"&gt;Slack&lt;/a&gt; channel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgement&lt;/h2&gt; 
&lt;p&gt;Special thanks to all contributors! See &lt;a href="https://github.com/GreptimeTeam/greptimedb/raw/main/AUTHOR.md"&gt;AUTHORS.md&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Uses &lt;a href="https://arrow.apache.org/"&gt;Apache Arrow™&lt;/a&gt; (memory model)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://parquet.apache.org/"&gt;Apache Parquet™&lt;/a&gt; (file storage)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://arrow.apache.org/datafusion/"&gt;Apache Arrow DataFusion™&lt;/a&gt; (query engine)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://opendal.apache.org/"&gt;Apache OpenDAL™&lt;/a&gt; (data access abstraction)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>aws/amazon-q-developer-cli</title>
      <link>https://github.com/aws/amazon-q-developer-cli</link>
      <description>&lt;p&gt;✨ Agentic chat experience in your terminal. Build applications using natural language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amazon Q CLI&lt;/h1&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;DMG&lt;/strong&gt;: &lt;a href="https://desktop-release.q.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg"&gt;Download now&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-ubuntu"&gt;Ubuntu/Debian&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-appimage"&gt;AppImage&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-alternative-linux"&gt;Alternative Linux builds&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you so much for considering to contribute to Amazon Q.&lt;/p&gt; 
&lt;p&gt;Before getting started, see our &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/CONTRIBUTING.md#security-issue-notifications"&gt;contributing docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;MacOS 
  &lt;ul&gt; 
   &lt;li&gt;Xcode 13 or later&lt;/li&gt; 
   &lt;li&gt;Brew&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1. Clone repo&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/aws/amazon-q-developer-cli.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. Install the Rust toolchain using &lt;a href="https://rustup.rs"&gt;Rustup&lt;/a&gt;:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
rustup default stable
rustup toolchain install nightly
cargo install typos-cli
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. Develop locally&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;To compile and run: &lt;code&gt;cargo run --bin chat_cli&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run tests: &lt;code&gt;cargo test&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run lints: &lt;code&gt;cargo clippy&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To format rust files: &lt;code&gt;cargo +nightly fmt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run subcommands: &lt;code&gt;cargo run --bin chat_cli -- {subcommand}&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Login would then be: &lt;code&gt;cargo run --bin chat_cli -- login&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Layout&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/chat_cli/"&gt;&lt;code&gt;chat_cli&lt;/code&gt;&lt;/a&gt; - the &lt;code&gt;q&lt;/code&gt; CLI, allows users to interface with Amazon Q Developer from the command line&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/scripts/"&gt;&lt;code&gt;scripts/&lt;/code&gt;&lt;/a&gt; - Contains ops and build related scripts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/"&gt;&lt;code&gt;crates/&lt;/code&gt;&lt;/a&gt; - Contains all rust crates&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/docs/"&gt;&lt;code&gt;docs/&lt;/code&gt;&lt;/a&gt; - Contains technical documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;For security related concerns, see &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/SECURITY.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;This repo is dual licensed under MIT and Apache 2.0 licenses.&lt;/p&gt; 
&lt;p&gt;Those licenses can be found &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/LICENSE.MIT"&gt;here&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/LICENSE.APACHE"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;“Amazon Web Services” and all related marks, including logos, graphic designs, and service names, are trademarks or trade dress of AWS in the U.S. and other countries. AWS’s trademarks and trade dress may not be used in connection with any product or service that is not AWS’s, in any manner that is likely to cause confusion among customers, or in any manner that disparages or discredits AWS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aptos-labs/aptos-core</title>
      <link>https://github.com/aptos-labs/aptos-core</link>
      <description>&lt;p&gt;Aptos is a layer 1 blockchain built to support the widespread use of blockchain through better technology and user experience.&lt;/p&gt;&lt;hr&gt;&lt;a href="https://aptos.dev"&gt; &lt;img width="100%" src="https://raw.githubusercontent.com/aptos-labs/aptos-core/main/.assets/aptos_banner.png" alt="Aptos Banner" /&gt; &lt;/a&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/aptos-labs/aptos-core/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-Apache-green.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aptos-labs/aptos-core/actions/workflows/lint-test.yaml"&gt;&lt;img src="https://github.com/aptos-labs/aptos-core/actions/workflows/lint-test.yaml/badge.svg?sanitize=true" alt="Lint+Test" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/aptos-labs/aptos-core"&gt;&lt;img src="https://codecov.io/gh/aptos-labs/aptos-core/branch/main/graph/badge.svg?token=X01RKXSGDE" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/aptosnetwork"&gt;&lt;img src="https://img.shields.io/discord/945856774056083548?style=flat-square" alt="Discord chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Aptos is a layer 1 blockchain bringing a paradigm shift to Web3 through better technology and user experience. Built with Move to create a home for developers building next-gen applications.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://aptosfoundation.org/"&gt;Aptos Foundation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aptos.dev"&gt;Aptos Developer Network&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aptos.dev/guides/system-integrators-guide"&gt;Guide - Integrate with the Aptos Blockchain&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aptos.dev/tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Follow us on &lt;a href="https://twitter.com/Aptos"&gt;Twitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join us on the &lt;a href="https://discord.gg/aptosnetwork"&gt;Aptos Discord&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;You can learn more about contributing to the Aptos project by reading our &lt;a href="https://github.com/aptos-labs/aptos-core/raw/main/CONTRIBUTING.md"&gt;Contribution Guide&lt;/a&gt; and by viewing our &lt;a href="https://github.com/aptos-labs/aptos-core/raw/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Aptos Core is licensed under &lt;a href="https://github.com/aptos-labs/aptos-core/raw/main/LICENSE"&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DioxusLabs/dioxus</title>
      <link>https://github.com/DioxusLabs/dioxus</link>
      <description>&lt;p&gt;Fullstack app framework for web, desktop, and mobile.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;/p&gt;
&lt;p align="center"&gt; 
 &lt;!-- &lt;img src="./notes/header-light-updated.svg#gh-light-mode-only" &gt;
      &lt;img src="./notes/header-dark-updated.svg#gh-dark-mode-only" &gt; --&gt; 
 &lt;!-- &lt;a href="https://dioxuslabs.com"&gt;
          &lt;img src="./notes/flat-splash.avif"&gt;
      &lt;/a&gt; --&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/splash-header-darkmode.svg#gh-dark-mode-only" style="width: 80%; height: auto;" /&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/splash-header.svg#gh-light-mode-only" style="width: 80%; height: auto;" /&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/image-splash.avif" /&gt; &lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;!-- Crates version --&gt; 
 &lt;a href="https://crates.io/crates/dioxus"&gt; &lt;img src="https://img.shields.io/crates/v/dioxus.svg?style=flat-square" alt="Crates.io version" /&gt; &lt;/a&gt; 
 &lt;!-- Downloads --&gt; 
 &lt;a href="https://crates.io/crates/dioxus"&gt; &lt;img src="https://img.shields.io/crates/d/dioxus.svg?style=flat-square" alt="Download" /&gt; &lt;/a&gt; 
 &lt;!-- docs --&gt; 
 &lt;a href="https://docs.rs/dioxus"&gt; &lt;img src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square" alt="docs.rs docs" /&gt; &lt;/a&gt; 
 &lt;!-- CI --&gt; 
 &lt;a href="https://github.com/jkelleyrtp/dioxus/actions"&gt; &lt;img src="https://github.com/dioxuslabs/dioxus/actions/workflows/main.yml/badge.svg?sanitize=true" alt="CI status" /&gt; &lt;/a&gt; 
 &lt;!--Awesome --&gt; 
 &lt;a href="https://dioxuslabs.com/awesome"&gt; &lt;img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true" alt="Awesome Page" /&gt; &lt;/a&gt; 
 &lt;!-- Discord --&gt; 
 &lt;a href="https://discord.gg/XgGxMSkvUM"&gt; &lt;img src="https://img.shields.io/discord/899851952891002890.svg?logo=discord&amp;amp;style=flat-square" alt="Discord Link" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h3&gt; &lt;a href="https://dioxuslabs.com"&gt; Website &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/tree/main/examples"&gt; Examples &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://dioxuslabs.com/learn/0.6/guide"&gt; Guide &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/zh-cn/README.md"&gt; 中文 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/pt-br/README.md"&gt; PT-BR &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/ja-jp/README.md"&gt; 日本語 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/tr-tr"&gt; Türkçe &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/ko-kr"&gt; 한국어 &lt;/a&gt; &lt;/h3&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/releases/tag/v0.7.0-alpha.0"&gt;✨ Dioxus 0.7 is in alpha - test it out! ✨&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;Build for web, desktop, and mobile, and more with a single codebase. Zero-config setup, integrated hot-reloading, and signals-based state management. Add backend functionality with Server Functions and bundle with our CLI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn app() -&amp;gt; Element {
    let mut count = use_signal(|| 0);

    rsx! {
        h1 { "High-Five counter: {count}" }
        button { onclick: move |_| count += 1, "Up high!" }
        button { onclick: move |_| count -= 1, "Down low!" }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⭐️ Unique features:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cross-platform apps in three lines of code (web, desktop, mobile, server, and more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dioxuslabs.com/blog/release-050"&gt;Ergonomic state management&lt;/a&gt; combines the best of React, Solid, and Svelte&lt;/li&gt; 
 &lt;li&gt;Built-in featureful, type-safe, fullstack web framework&lt;/li&gt; 
 &lt;li&gt;Integrated bundler for deploying to the web, macOS, Linux, and Windows&lt;/li&gt; 
 &lt;li&gt;Subsecond Rust hot-patching and asset hot-reloading&lt;/li&gt; 
 &lt;li&gt;And more! &lt;a href="https://dioxuslabs.com/learn/0.6/"&gt;Take a tour of Dioxus&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Instant hot-reloading&lt;/h2&gt; 
&lt;p&gt;With one command, &lt;code&gt;dx serve&lt;/code&gt; and your app is running. Edit your markup, styles, and even Rust code and see changes in milliseconds.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/hotreload-video.webp" /&gt; 
 &lt;!-- &lt;video src="https://private-user-images.githubusercontent.com/10237910/386919031-6da371d5-3340-46da-84ff-628216851ba6.mov" width="500"&gt;&lt;/video&gt; --&gt; 
 &lt;!-- &lt;video src="https://private-user-images.githubusercontent.com/10237910/386919031-6da371d5-3340-46da-84ff-628216851ba6.mov" width="500"&gt;&lt;/video&gt; --&gt; 
&lt;/div&gt; 
&lt;h2&gt;Productive, typesafe, fullstack web framework&lt;/h2&gt; 
&lt;p&gt;Directly call your backend from your frontend with our built-in type-safe RPC using &lt;a href="http://crates.io/crates/server_fn"&gt;&lt;code&gt;server_fn&lt;/code&gt;&lt;/a&gt;. Supports streaming, suspense, bundle splitting, websockets, and more.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn app() -&amp;gt; Element {
  let mut fortune = use_signal(|| "Fetch a fortune!");
  rsx! {
    h1 { "{fortune}" }
    button {
      onclick: move |_| async move {
        fortune.set(fetch_fortune().await.unwrap());
      }
    }
  }
}

#[server]
async fn fetch_fortune() -&amp;gt; ServerFnResult&amp;lt;String&amp;gt; {
  "Dioxus is super productive!".to_string()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;First-party primitive components&lt;/h2&gt; 
&lt;p&gt;Get started quickly with a complete set of primitives modeled after shadcn/ui and Radix-Primitives.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/primitive-components.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;First-class Android and iOS support&lt;/h2&gt; 
&lt;p&gt;Dioxus is the fastest way to build native mobile apps with Rust. Simply run &lt;code&gt;dx serve --platform android&lt;/code&gt; and your app is running in an emulator or on device in seconds. Call directly into JNI and Native APIs.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/android_and_ios2.avif" width="500" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Bundle for web, desktop, and mobile&lt;/h2&gt; 
&lt;p&gt;Simply run &lt;code&gt;dx bundle&lt;/code&gt; and your app will be built and bundled with maximization optimizations. On the web, take advantage of &lt;a href="https://dioxuslabs.com/learn/0.6/guides/assets"&gt;&lt;code&gt;.avif&lt;/code&gt; generation, &lt;code&gt;.wasm&lt;/code&gt; compression, minification&lt;/a&gt;, and more. Build WebApps weighing &lt;a href="https://github.com/ealmloff/tiny-dioxus/"&gt;less than 50kb&lt;/a&gt; and desktop/mobile apps less than 5mb.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/bundle.gif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Fantastic documentation&lt;/h2&gt; 
&lt;p&gt;We've put a ton of effort into building clean, readable, and comprehensive documentation. All html elements and listeners are documented with MDN docs, and our Docs runs continuous integration with Dioxus itself to ensure that the docs are always up to date. Check out the &lt;a href="https://dioxuslabs.com/learn/0.6/"&gt;Dioxus website&lt;/a&gt; for guides, references, recipes, and more. Fun fact: we use the Dioxus website as a testbed for new Dioxus features - &lt;a href="https://github.com/dioxusLabs/docsite"&gt;check it out!&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/docs.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Dioxus is a community-driven project, with a very active &lt;a href="https://discord.gg/XgGxMSkvUM"&gt;Discord&lt;/a&gt; and &lt;a href="https://github.com/DioxusLabs/dioxus/issues"&gt;GitHub&lt;/a&gt; community. We're always looking for help, and we're happy to answer questions and help you get started. &lt;a href="https://github.com/DioxusLabs/dioxus-std"&gt;Our SDK&lt;/a&gt; is community-run and we even have a &lt;a href="https://github.com/dioxus-community/"&gt;GitHub organization&lt;/a&gt; for the best Dioxus crates that receive free upgrades and support.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/dioxus-community.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Full-time core team&lt;/h2&gt; 
&lt;p&gt;Dioxus has grown from a side project to a small team of fulltime engineers. Thanks to the generous support of FutureWei, Satellite.im, the GitHub Accelerator program, we're able to work on Dioxus full-time. Our long term goal is for Dioxus to become self-sustaining by providing paid high-quality enterprise tools. If your company is interested in adopting Dioxus and would like to work with us, please reach out!&lt;/p&gt; 
&lt;h2&gt;Supported Platforms&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;table style="width:100%"&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Web&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render directly to the DOM using WebAssembly&lt;/li&gt; 
      &lt;li&gt;Pre-render with SSR and rehydrate on the client&lt;/li&gt; 
      &lt;li&gt;Simple "hello world" at about 50kb, comparable to React&lt;/li&gt; 
      &lt;li&gt;Built-in dev server and hot reloading for quick iteration&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Desktop&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render using Webview or - experimentally - with WGPU or &lt;a href="https://freyaui.dev"&gt;Freya&lt;/a&gt; (Skia) &lt;/li&gt; 
      &lt;li&gt;Zero-config setup. Simply `cargo run` or `dx serve` to build your app &lt;/li&gt; 
      &lt;li&gt;Full support for native system access without IPC &lt;/li&gt; 
      &lt;li&gt;Supports macOS, Linux, and Windows. Portable &amp;lt;3mb binaries &lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Mobile&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render using Webview or - experimentally - with WGPU or Skia &lt;/li&gt; 
      &lt;li&gt;Build .ipa and .apk files for iOS and Android &lt;/li&gt; 
      &lt;li&gt;Call directly into Java and Objective-C with minimal overhead&lt;/li&gt; 
      &lt;li&gt;From "hello world" to running on device in seconds&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Server-side Rendering&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Suspense, hydration, and server-side rendering&lt;/li&gt; 
      &lt;li&gt;Quickly drop in backend functionality with server functions&lt;/li&gt; 
      &lt;li&gt;Extractors, middleware, and routing integrations&lt;/li&gt; 
      &lt;li&gt;Static-site generation and incremental regeneration&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;h2&gt;Running the examples&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The examples in the main branch of this repository target the git version of dioxus and the CLI. If you are looking for examples that work with the latest stable release of dioxus, check out the &lt;a href="https://github.com/DioxusLabs/dioxus/tree/v0.6/examples"&gt;0.6 branch&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The examples in the top level of this repository can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo run --example &amp;lt;example&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, we encourage you to download the dioxus-cli. If you are running the git version of dioxus, you can install the matching version of the CLI with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo install --git https://github.com/DioxusLabs/dioxus dioxus-cli --locked
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the CLI, you can also run examples with the web platform. You just need to disable the default desktop feature and enable the web feature with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;dx serve --example &amp;lt;example&amp;gt; --platform web -- --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dioxus vs other frameworks&lt;/h2&gt; 
&lt;p&gt;We love all frameworks and enjoy watching innovation in the Rust ecosystem. In fact, many of our projects are shared with other frameworks. For example, our flex-box library &lt;a href="https://github.com/DioxusLabs/taffy"&gt;Taffy&lt;/a&gt; is used by &lt;a href="https://bevyengine.org/"&gt;Bevy&lt;/a&gt;, &lt;a href="https://zed.dev/"&gt;Zed&lt;/a&gt;, &lt;a href="https://lapce.dev/"&gt;Lapce&lt;/a&gt;, &lt;a href="https://github.com/iced-rs/iced"&gt;Iced&lt;/a&gt;, and many more.&lt;/p&gt; 
&lt;p&gt;Dioxus places an emphasis on a few key points that make it different from other frameworks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;React-like&lt;/strong&gt;: we rely on concepts like components, props, and hooks to build UIs, with our state management being closer to Svelte than to SolidJS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTML and CSS&lt;/strong&gt;: we lean completely into HTML and CSS, quirks and all.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Renderer-agnostic&lt;/strong&gt;: you can swap out the renderer for any platform you want thanks to &lt;a href="https://dioxuslabs.com/blog/templates-diffing"&gt;our fast VirtualDOM&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Collaborative&lt;/strong&gt;: whenever possible, we spin out crates like &lt;a href="https://github.com/DioxusLabs/taffy"&gt;Taffy&lt;/a&gt;, &lt;a href="https://github.com/DioxusLabs/manganis"&gt;manganis&lt;/a&gt;, &lt;a href="https://github.com/DioxusLabs/include_mdbook"&gt;include_mdbook&lt;/a&gt;, and &lt;a href="http://github.com/dioxusLabs/blitz"&gt;blitz&lt;/a&gt; so the ecosystem can grow together.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Dioxus vs Tauri&lt;/h3&gt; 
&lt;p&gt;Tauri is a framework for building desktop mobile apps where your frontend is written in a web-based framework like React, Vue, Svelte, etc. Whenever you need to do native work, you can write Rust functions and call them from your frontend.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Natively Rust&lt;/strong&gt;: Tauri's architecture limits your UI to either JavaScript or WebAssembly. With Dioxus, your Rust code is running natively on the user's machine, letting you do things like spawning threads, accessing the filesystem, without any IPC bridge. This drastically simplifies your app's architecture and makes it easier to build. You can build a Tauri app with Dioxus-Web as a frontend if you'd like.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Different scopes&lt;/strong&gt;: Tauri needs to support JavaScript and its complex build tooling, limiting the scope of what you can do with it. Since Dioxus is exclusively focused on Rust, we're able to provide extra utilities like Server Functions, advanced bundling, and a native renderer.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Shared DNA&lt;/strong&gt;: While Tauri and Dioxus are separate projects, they do share libraries like Tao and Wry: windowing and webview libraries maintained by the Tauri team.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Dioxus vs Leptos&lt;/h3&gt; 
&lt;p&gt;Leptos is a library for building fullstack web-apps, similar to SolidJS and SolidStart. The two libraries share similar goals on the web, but have several key differences:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reactivity model&lt;/strong&gt;: Leptos uses signals to drive both reactivity and rendering, while Dioxus uses signals just for reactivity. For managing re-renders, Dioxus uses a highly optimized VirtualDOM to support desktop and mobile architectures. Both Dioxus and Leptos are extremely fast and comparable to the fastest web frameworks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Different scopes&lt;/strong&gt;: Dioxus provides renderers for web, desktop, mobile, LiveView, and more. We also maintain community libraries and a cross-platform SDK. Leptos has a tighter focus on the fullstack web with features that Dioxus doesn't have like islands, &lt;code&gt;&amp;lt;Form /&amp;gt;&lt;/code&gt; components, and other web-specific utilities.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Different DSLs&lt;/strong&gt;: Dioxus uses its own custom Rust-like DSL for building UIs while Leptos uses an HTML-like syntax. We chose this to retain compatibility with IDE features like code-folding and syntax highlighting. Generally, Dioxus leans into more "magic" with its DSL including automatic formatting of strings and hot-reloading of simple Rust expressions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// dioxus
rsx! {
  div {
    class: "my-class",
    enabled: true,
    "Hello, {name}"
  }
}

// leptos
view! {
  &amp;lt;div class="my-class" enabled={true}&amp;gt;
    "Hello "
    {name}
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Dioxus vs Yew&lt;/h3&gt; 
&lt;p&gt;Yew is a framework for building reactive web apps that initially served as an inspiration for Dioxus. Yew is tightly integrated with the web but has limited utilities for server-side-rendering or alternative rendering engines. Dioxus was built as a redesign of Yew with a focus on cross-platform support, fantastic developer tooling, improved ergonomics, and a complete full-stack web story.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full-stack capabilities&lt;/strong&gt;: Yew was initially designed for SPAs and remains deeply integrated with the web platform. Dioxus, in contrast, was built from the ground up for fullstack and cross-platform development, enabling seamless app creation across web, desktop, mobile, and server applications.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Developer Tooling&lt;/strong&gt;: Dioxus offers a richer set of built-in developer tools, such as autoformatting, hot-reloading, and an integrated bundler, helping streamline the development experience.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ongoing support&lt;/strong&gt;: Dioxus is very actively maintained, with new features and bug fixes being fixed on a daily or weekly basis.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Dioxus vs egui&lt;/h3&gt; 
&lt;p&gt;egui is a cross-platform GUI library for Rust powering tools like &lt;a href="https://www.rerun.io"&gt;Rerun.io&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Immediate vs Retained&lt;/strong&gt;: egui is designed to be re-rendered on every frame. This is suitable for games and other interactive applications, but it does not retain style and layout state between frames. Dioxus is a retained UI framework, meaning that the UI is built once and then modified between frames. This enables Dioxus to use native web technologies like HTML and CSS with better battery life and performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: egui brings its own styling and layout solution while Dioxus expects you to use the built-in HTML and CSS. This enables dioxus apps to use any CSS library like Tailwind or Material UI.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;State management&lt;/strong&gt;: egui's state management is based on a single global state object. Dioxus encourages encapsulation of state by using components and props, making components more reusable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Dioxus vs Iced&lt;/h3&gt; 
&lt;p&gt;Iced is a cross-platform GUI library inspired by Elm. Iced renders natively with WGPU and supports the web using DOM nodes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Elm state management&lt;/strong&gt;: Iced uses Elm's state management model, which is based on message passing and reducers. This is simply a different state management model than Dioxus and can be rather verbose at times.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Native Feel&lt;/strong&gt;: Since Dioxus uses a webview as its renderer, it automatically gets native text input, paste handling, and other native features like accessibility. Iced's renderer currently doesn't implement these features, making it feel less native.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;WGPU&lt;/strong&gt;: Dioxus' WGPU renderer is currently quite immature and not yet ready for production use. Iced's WGPU renderer is much more mature and is being used in production. This enables certain types of apps that need GPU access to be built with Iced that can't currently be built with Dioxus.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Dioxus vs Electron&lt;/h3&gt; 
&lt;p&gt;Dioxus and Electron are two entirely different projects with similar goals. Electron makes it possible for developers to build cross-platform desktop apps using web technologies like HTML, CSS, and JavaScript.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;: Dioxus uses the system's native WebView - or optionally, a WGPU renderer - to render the UI. This makes a typical Dioxus app about 15mb on macOS in comparison to Electron's 100mb. Electron also ships an embedded chromium instance which cannot share system resources with the host OS in the same way as Dioxus.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Maturity&lt;/strong&gt;: Electron is a mature project with a large community and a lot of tooling. Dioxus is still quite young in comparison to Electron. Expect to run into features like deep-linking that require extra work to implement.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out the website &lt;a href="https://dioxuslabs.com/learn/0.6/contributing"&gt;section on contributing&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Report issues on our &lt;a href="https://github.com/dioxuslabs/dioxus/issues"&gt;issue tracker&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/XgGxMSkvUM"&gt;Join&lt;/a&gt; the discord and ask questions!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;a href="https://github.com/dioxuslabs/dioxus/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=dioxuslabs/dioxus&amp;amp;max=30&amp;amp;columns=10" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under either the &lt;a href="https://github.com/DioxusLabs/dioxus/raw/master/LICENSE-MIT"&gt;MIT license&lt;/a&gt; or the &lt;a href="https://github.com/DioxusLabs/dioxus/raw/master/LICENSE-APACHE"&gt;Apache-2 License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Dioxus by you, shall be licensed as MIT or Apache-2, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bevyengine/bevy</title>
      <link>https://github.com/bevyengine/bevy</link>
      <description>&lt;p&gt;A refreshingly simple data-driven game engine built in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://bevy.org"&gt;&lt;img src="https://raw.githubusercontent.com/bevyengine/bevy/main/assets/branding/bevy_logo_light_dark_and_dimmed.svg?sanitize=true" alt="Bevy" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/bevyengine/bevy#license"&gt;&lt;img src="https://img.shields.io/badge/license-MIT%2FApache-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/v/bevy.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/d/bevy.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/bevy/latest/bevy/"&gt;&lt;img src="https://docs.rs/bevy/badge.svg?sanitize=true" alt="Docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bevyengine/bevy/actions"&gt;&lt;img src="https://github.com/bevyengine/bevy/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/bevy"&gt;&lt;img src="https://img.shields.io/discord/691052431525675048.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Bevy?&lt;/h2&gt; 
&lt;p&gt;Bevy is a refreshingly simple data-driven game engine built in Rust. It is free and open-source forever!&lt;/p&gt; 
&lt;h2&gt;WARNING&lt;/h2&gt; 
&lt;p&gt;Bevy is still in the early stages of development. Important features are missing. Documentation is sparse. A new version of Bevy containing breaking changes to the API is released &lt;a href="https://bevy.org/news/bevy-0-6/#the-train-release-schedule"&gt;approximately once every 3 months&lt;/a&gt;. We provide &lt;a href="https://bevy.org/learn/migration-guides/"&gt;migration guides&lt;/a&gt;, but we can't guarantee migrations will always be easy. Use only if you are willing to work in this environment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; Bevy relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally close to "the latest stable release" of Rust.&lt;/p&gt; 
&lt;h2&gt;Design Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Capable&lt;/strong&gt;: Offer a complete 2D and 3D feature set&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Easy for newbies to pick up, but infinitely flexible for power users&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Focused&lt;/strong&gt;: Data-oriented architecture using the Entity Component System paradigm&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modular&lt;/strong&gt;: Use only what you need. Replace what you don't like&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: App logic should run quickly, and when possible, in parallel&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Productive&lt;/strong&gt;: Changes should compile quickly ... waiting isn't fun&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org"&gt;Features&lt;/a&gt;:&lt;/strong&gt; A quick overview of Bevy's features.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/news/"&gt;News&lt;/a&gt;&lt;/strong&gt;: A development blog that covers our progress, plans and shiny new features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt;:&lt;/strong&gt; Bevy's official Quick Start Guide. The best place to start learning Bevy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.rs/bevy"&gt;Bevy Rust API Docs&lt;/a&gt;:&lt;/strong&gt; Bevy's Rust API docs, which are automatically generated from the doc comments in this repo.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;Official Examples&lt;/a&gt;:&lt;/strong&gt; Bevy's dedicated, runnable examples, which are great for digging into specific concepts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/#learning"&gt;Community-Made Learning Resources&lt;/a&gt;&lt;/strong&gt;: More tutorials, documentation, and examples made by the Bevy community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Before contributing or participating in discussions with the community, you should familiarize yourself with our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CODE_OF_CONDUCT.md"&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://discord.gg/bevy"&gt;Discord&lt;/a&gt;:&lt;/strong&gt; Bevy's official discord server.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://reddit.com/r/bevy"&gt;Reddit&lt;/a&gt;:&lt;/strong&gt; Bevy's official subreddit.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/discussions"&gt;GitHub Discussions&lt;/a&gt;:&lt;/strong&gt; The best place for questions about Bevy, answered right here!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/"&gt;Bevy Assets&lt;/a&gt;:&lt;/strong&gt; A collection of awesome Bevy projects, tools, plugins and learning materials.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you'd like to help build Bevy, check out the &lt;strong&gt;&lt;a href="https://bevy.org/learn/contribute/introduction"&gt;Contributor's Guide&lt;/a&gt;&lt;/strong&gt;. For simple problems, feel free to &lt;a href="https://github.com/bevyengine/bevy/issues"&gt;open an issue&lt;/a&gt; or &lt;a href="https://github.com/bevyengine/bevy/pulls"&gt;PR&lt;/a&gt; and tackle it yourself!&lt;/p&gt; 
&lt;p&gt;For more complex architecture decisions and experimental mad science, please open an &lt;a href="https://github.com/bevyengine/rfcs"&gt;RFC&lt;/a&gt; (Request For Comments) so we can brainstorm together effectively!&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We recommend checking out the &lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt; for a brief introduction.&lt;/p&gt; 
&lt;p&gt;Follow the &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;Setup guide&lt;/a&gt; to ensure your development environment is set up correctly. Once set up, you can quickly try out the &lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;examples&lt;/a&gt; by cloning this repo and running the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Switch to the correct version (latest release, default is main development branch)
git checkout latest
# Runs the "breakout" example
cargo run --example breakout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To draw a window with standard functionality enabled, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use bevy::prelude::*;

fn main() {
  App::new()
    .add_plugins(DefaultPlugins)
    .run();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fast Compiles&lt;/h3&gt; 
&lt;p&gt;Bevy can be built just fine using default configuration on stable Rust. However for really fast iterative compiles, you should enable the "fast compiles" setup by &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;following the instructions here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;Bevy Cargo Features&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;This &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;list&lt;/a&gt; outlines the different cargo features supported by Bevy. These allow you to customize the Bevy feature set for your use-case.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Bevy is the result of the hard work of many people. A huge thanks to all Bevy contributors, the many open source projects that have come before us, the &lt;a href="https://arewegameyet.rs/"&gt;Rust gamedev ecosystem&lt;/a&gt;, and the many libraries we build on.&lt;/p&gt; 
&lt;p&gt;A huge thanks to Bevy's &lt;a href="https://bevy.org"&gt;generous sponsors&lt;/a&gt;. Bevy will always be free and open source, but it isn't free to make. Please consider &lt;a href="https://bevy.org/donate/"&gt;sponsoring our work&lt;/a&gt; if you like what we're building.&lt;/p&gt; 
&lt;!-- This next line need to stay exactly as is. It is required for BrowserStack sponsorship. --&gt; 
&lt;p&gt;This project is tested with BrowserStack.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Bevy is free, open source and permissively licensed! Except where noted (below and/or in individual files), all code in this repository is dual-licensed under either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MIT License (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option. This means you can select the license you prefer! This dual-licensing approach is the de-facto standard in the Rust ecosystem and there are &lt;a href="https://github.com/bevyengine/bevy/issues/2373"&gt;very good reasons&lt;/a&gt; to include both.&lt;/p&gt; 
&lt;p&gt;Some of the engine's code carries additional copyright notices and license terms due to their external origins. These are generally BSD-like, but exact details vary by crate: If the README of a crate contains a 'License' header (or similar), the additional copyright notices and license terms applicable to that crate will be listed. The above licensing requirement still applies to contributions to those crates, and sections of those crates will carry those license terms. The &lt;a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields"&gt;license&lt;/a&gt; field of each crate will also reflect this.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/assets"&gt;assets&lt;/a&gt; included in this repository (for our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/examples/README.md"&gt;examples&lt;/a&gt;) typically fall under different open licenses. These will not be included in your game (unless copied in by you), and they are not distributed in the published bevy crates. See &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CREDITS.md"&gt;CREDITS.md&lt;/a&gt; for the details of the licenses of those files.&lt;/p&gt; 
&lt;h3&gt;Your contributions&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apache/datafusion</title>
      <link>https://github.com/apache/datafusion</link>
      <description>&lt;p&gt;Apache DataFusion SQL Query Engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache DataFusion&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/datafusion"&gt;&lt;img src="https://img.shields.io/crates/v/datafusion.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/apache/datafusion/raw/main/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%20v2-blue.svg?sanitize=true" alt="Apache licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/apache/datafusion/actions?query=branch%3Amain"&gt;&lt;img src="https://github.com/apache/datafusion/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/commit-activity/m/apache/datafusion" alt="Commit Activity" /&gt; &lt;a href="https://github.com/apache/datafusion/issues"&gt;&lt;img src="https://img.shields.io/github/issues-raw/apache/datafusion" alt="Open Issues" /&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/Qw5gKqHxUM"&gt;&lt;img src="https://img.shields.io/badge/Chat-Discord-purple" alt="Discord chat" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/apache-datafusion/"&gt;&lt;img src="https://img.shields.io/badge/Follow-Linkedin-blue" alt="Linkedin" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/msrv/datafusion?label=Min%20Rust%20Version" alt="Crates.io MSRV" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://datafusion.apache.org/"&gt;Website&lt;/a&gt; | &lt;a href="https://docs.rs/datafusion/latest/datafusion/"&gt;API Docs&lt;/a&gt; | &lt;a href="https://discord.com/channels/885562378132000778/885562378132000781"&gt;Chat&lt;/a&gt;&lt;/p&gt; 
&lt;a href="https://datafusion.apache.org/"&gt; &lt;img src="https://github.com/apache/datafusion/raw/HEAD/docs/source/_static/images/2x_bgwhite_original.png" width="512" alt="logo" /&gt; &lt;/a&gt; 
&lt;p&gt;DataFusion is an extensible query engine written in &lt;a href="http://rustlang.org"&gt;Rust&lt;/a&gt; that uses &lt;a href="https://arrow.apache.org"&gt;Apache Arrow&lt;/a&gt; as its in-memory format.&lt;/p&gt; 
&lt;p&gt;This crate provides libraries and binaries for developers building fast and feature rich database and analytic systems, customized to particular workloads. See &lt;a href="https://datafusion.apache.org/user-guide/introduction.html#use-cases"&gt;use cases&lt;/a&gt; for examples. The following related subprojects target end users:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion-python/"&gt;DataFusion Python&lt;/a&gt; offers a Python interface for SQL and DataFrame queries.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion-comet/"&gt;DataFusion Comet&lt;/a&gt; is an accelerator for Apache Spark based on DataFusion.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;"Out of the box," DataFusion offers [SQL] and [&lt;code&gt;Dataframe&lt;/code&gt;] APIs, excellent &lt;a href="https://benchmark.clickhouse.com/"&gt;performance&lt;/a&gt;, built-in support for CSV, Parquet, JSON, and Avro, extensive customization, and a great community.&lt;/p&gt; 
&lt;p&gt;DataFusion features a full query planner, a columnar, streaming, multi-threaded, vectorized execution engine, and partitioned data sources. You can customize DataFusion at almost all points including additional data sources, query languages, functions, custom operators and more. See the &lt;a href="https://datafusion.apache.org/contributor-guide/architecture.html"&gt;Architecture&lt;/a&gt; section for more details.&lt;/p&gt; 
&lt;p&gt;Here are links to some important information&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/"&gt;Project Site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/cli/installation.html"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/example-usage.html"&gt;Rust Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/dataframe.html"&gt;Rust DataFrame API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/datafusion/latest/datafusion"&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion/tree/main/datafusion-examples"&gt;Rust Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://arrow.apache.org/datafusion-python/"&gt;Python DataFrame API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/datafusion/latest/datafusion/index.html#architecture"&gt;Architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What can you do with this crate?&lt;/h2&gt; 
&lt;p&gt;DataFusion is great for building projects such as domain specific query engines, new database platforms and data pipelines, query languages and more. It lets you start quickly from a fully working engine, and then customize those features specific to your use. &lt;a href="https://datafusion.apache.org/user-guide/introduction.html#known-users"&gt;Click Here&lt;/a&gt; to see a list known users.&lt;/p&gt; 
&lt;h2&gt;Contributing to DataFusion&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://datafusion.apache.org/contributor-guide"&gt;contributor guide&lt;/a&gt; and &lt;a href="https://datafusion.apache.org/contributor-guide/communication.html"&gt;communication&lt;/a&gt; pages for more information.&lt;/p&gt; 
&lt;h2&gt;Crate features&lt;/h2&gt; 
&lt;p&gt;This crate has several &lt;a href="https://doc.rust-lang.org/cargo/reference/features.html"&gt;features&lt;/a&gt; which can be specified in your &lt;code&gt;Cargo.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Default features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nested_expressions&lt;/code&gt;: functions for working with nested type function such as &lt;code&gt;array_to_string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;compression&lt;/code&gt;: reading files compressed with &lt;code&gt;xz2&lt;/code&gt;, &lt;code&gt;bzip2&lt;/code&gt;, &lt;code&gt;flate2&lt;/code&gt;, and &lt;code&gt;zstd&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;crypto_expressions&lt;/code&gt;: cryptographic functions such as &lt;code&gt;md5&lt;/code&gt; and &lt;code&gt;sha256&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datetime_expressions&lt;/code&gt;: date and time functions such as &lt;code&gt;to_timestamp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encoding_expressions&lt;/code&gt;: &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt; functions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parquet&lt;/code&gt;: support for reading the &lt;a href="https://parquet.apache.org/"&gt;Apache Parquet&lt;/a&gt; format&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parquet_encryption&lt;/code&gt;: support for using &lt;a href="https://parquet.apache.org/docs/file-format/data-pages/encryption/"&gt;Parquet Modular Encryption&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;regex_expressions&lt;/code&gt;: regular expression functions, such as &lt;code&gt;regexp_match&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unicode_expressions&lt;/code&gt;: Include unicode aware functions such as &lt;code&gt;character_length&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unparser&lt;/code&gt;: enables support to reverse LogicalPlans back into SQL&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;recursive_protection&lt;/code&gt;: uses &lt;a href="https://docs.rs/recursive/latest/recursive/"&gt;recursive&lt;/a&gt; for stack overflow protection.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;avro&lt;/code&gt;: support for reading the &lt;a href="https://avro.apache.org/"&gt;Apache Avro&lt;/a&gt; format&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;backtrace&lt;/code&gt;: include backtrace information in error messages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pyarrow&lt;/code&gt;: conversions between PyArrow and DataFusion types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;serde&lt;/code&gt;: enable arrow-schema's &lt;code&gt;serde&lt;/code&gt; feature&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;DataFusion API Evolution and Deprecation Guidelines&lt;/h2&gt; 
&lt;p&gt;Public methods in Apache DataFusion evolve over time: while we try to maintain a stable API, we also improve the API over time. As a result, we typically deprecate methods before removing them, according to the &lt;a href="https://datafusion.apache.org/library-user-guide/api-health.html"&gt;deprecation guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Dependencies and &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Following the &lt;a href="https://blog.rust-lang.org/2023/08/29/committing-lockfiles.html"&gt;guidance&lt;/a&gt; on committing &lt;code&gt;Cargo.lock&lt;/code&gt; files, this project commits its &lt;code&gt;Cargo.lock&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;CI uses the committed &lt;code&gt;Cargo.lock&lt;/code&gt; file, and dependencies are updated regularly using &lt;a href="https://docs.github.com/en/code-security/dependabot/working-with-dependabot"&gt;Dependabot&lt;/a&gt; PRs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sharkdp/bat</title>
      <link>https://github.com/sharkdp/bat</link>
      <description>&lt;p&gt;A cat(1) clone with wings.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/sharkdp/bat/master/doc/logo-header.svg?sanitize=true" alt="bat - a cat clone with wings" /&gt;&lt;br /&gt; &lt;a href="https://github.com/sharkdp/bat/actions?query=workflow%3ACICD"&gt;&lt;img src="https://github.com/sharkdp/bat/workflows/CICD/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/l/bat.svg?sanitize=true" alt="license" /&gt; &lt;a href="https://crates.io/crates/bat"&gt;&lt;img src="https://img.shields.io/crates/v/bat.svg?colorB=319e8c" alt="Version info" /&gt;&lt;/a&gt;&lt;br /&gt; A &lt;i&gt;cat(1)&lt;/i&gt; clone with syntax highlighting and Git integration. &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#syntax-highlighting"&gt;Key Features&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#how-to-use"&gt;How To Use&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#installation"&gt;Installation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#customization"&gt;Customization&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#project-goals-and-alternatives"&gt;Project goals, alternatives&lt;/a&gt;&lt;br /&gt; [English] [&lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-zh.md"&gt;中文&lt;/a&gt;] [&lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-ja.md"&gt;日本語&lt;/a&gt;] [&lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-ko.md"&gt;한국어&lt;/a&gt;] [&lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-ru.md"&gt;Русский&lt;/a&gt;] &lt;/p&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;A special &lt;em&gt;thank you&lt;/em&gt; goes to our biggest &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors.md"&gt;sponsors&lt;/a&gt;:&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt; &lt;a href="https://www.warp.dev/bat"&gt; &lt;img src="https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors/warp-logo.png" width="200" alt="Warp" /&gt; &lt;br /&gt; &lt;strong&gt;Warp, the intelligent terminal&lt;/strong&gt; &lt;br /&gt; &lt;sub&gt;Available on MacOS, Linux, Windows&lt;/sub&gt; &lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://graphite.dev/?utm_source=github&amp;amp;utm_medium=repo&amp;amp;utm_campaign=bat"&gt; &lt;img src="https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors/graphite-logo.jpeg" width="200" alt="Graphite" /&gt; &lt;br /&gt; &lt;strong&gt;Graphite is the AI developer productivity platform helping&lt;br /&gt;teams on GitHub ship higher quality software, faster&lt;/strong&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3&gt;Syntax highlighting&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; supports syntax highlighting for a large number of programming and markup languages:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://imgur.com/rGsdnDe.png" alt="Syntax highlighting example" /&gt;&lt;/p&gt; 
&lt;h3&gt;Git integration&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; communicates with &lt;code&gt;git&lt;/code&gt; to show modifications with respect to the index (see left side bar):&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/2lSW4RE.png" alt="Git integration example" /&gt;&lt;/p&gt; 
&lt;h3&gt;Show non-printable characters&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;-A&lt;/code&gt;/&lt;code&gt;--show-all&lt;/code&gt; option to show and highlight non-printable characters:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/WndGp9H.png" alt="Non-printable character example" /&gt;&lt;/p&gt; 
&lt;h3&gt;Automatic paging&lt;/h3&gt; 
&lt;p&gt;By default, &lt;code&gt;bat&lt;/code&gt; pipes its own output to a pager (e.g. &lt;code&gt;less&lt;/code&gt;) if the output is too large for one screen. If you would rather &lt;code&gt;bat&lt;/code&gt; work like &lt;code&gt;cat&lt;/code&gt; all the time (never page output), you can set &lt;code&gt;--paging=never&lt;/code&gt; as an option, either on the command line or in your configuration file. If you intend to alias &lt;code&gt;cat&lt;/code&gt; to &lt;code&gt;bat&lt;/code&gt; in your shell configuration, you can use &lt;code&gt;alias cat='bat --paging=never'&lt;/code&gt; to preserve the default behavior.&lt;/p&gt; 
&lt;h4&gt;File concatenation&lt;/h4&gt; 
&lt;p&gt;Even with a pager set, you can still use &lt;code&gt;bat&lt;/code&gt; to concatenate files &lt;span&gt;😉&lt;/span&gt;. Whenever &lt;code&gt;bat&lt;/code&gt; detects a non-interactive terminal (i.e. when you pipe into another process or into a file), &lt;code&gt;bat&lt;/code&gt; will act as a drop-in replacement for &lt;code&gt;cat&lt;/code&gt; and fall back to printing the plain file contents, regardless of the &lt;code&gt;--pager&lt;/code&gt; option's value.&lt;/p&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;p&gt;Display a single file on the terminal&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; bat README.md
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Display multiple files at once&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; bat src/*.rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read from stdin, determine the syntax automatically (note, highlighting will only work if the syntax can be determined from the first line of the file, usually through a shebang such as &lt;code&gt;#!/bin/sh&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; curl -s https://sh.rustup.rs | bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read from stdin, specify the language explicitly&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; yaml2json .travis.yml | json_pp | bat -l json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Show and highlight non-printable characters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; bat -A /etc/hosts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use it as a &lt;code&gt;cat&lt;/code&gt; replacement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat &amp;gt; note.md  # quickly create a new file

bat header.md content.md footer.md &amp;gt; document.md

bat -n main.rs  # show line numbers (only)

bat f - g  # output 'f', then stdin, then 'g'.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Integration with other tools&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;You can use &lt;code&gt;bat&lt;/code&gt; as a previewer for &lt;a href="https://github.com/junegunn/fzf"&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt;. To do this, use &lt;code&gt;bat&lt;/code&gt;'s &lt;code&gt;--color=always&lt;/code&gt; option to force colorized output. You can also use &lt;code&gt;--line-range&lt;/code&gt; option to restrict the load times for long files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fzf --preview "bat --color=always --style=numbers --line-range=:500 {}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information, see &lt;a href="https://github.com/junegunn/fzf#preview-window"&gt;&lt;code&gt;fzf&lt;/code&gt;'s &lt;code&gt;README&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;You can use the &lt;code&gt;-exec&lt;/code&gt; option of &lt;code&gt;find&lt;/code&gt; to preview all search results with &lt;code&gt;bat&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find … -exec bat {} +
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you happen to use &lt;a href="https://github.com/sharkdp/fd"&gt;&lt;code&gt;fd&lt;/code&gt;&lt;/a&gt;, you can use the &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--exec-batch&lt;/code&gt; option to do the same:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fd … -X bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;With &lt;a href="https://github.com/eth-p/bat-extras/raw/master/doc/batgrep.md"&gt;&lt;code&gt;batgrep&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;bat&lt;/code&gt; can be used as the printer for &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt; search results.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;batgrep needle src/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;tail -f&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; can be combined with &lt;code&gt;tail -f&lt;/code&gt; to continuously monitor a given file with syntax highlighting.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tail -f /var/log/pacman.log | bat --paging=never -l log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that we have to switch off paging in order for this to work. We have also specified the syntax explicitly (&lt;code&gt;-l log&lt;/code&gt;), as it can not be auto-detected in this case.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;git&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;You can combine &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;git show&lt;/code&gt; to view an older version of a given file with proper syntax highlighting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git show v0.6.0:src/main.rs | bat -l rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;You can combine &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;git diff&lt;/code&gt; to view lines around code changes with proper syntax highlighting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;batdiff() {
    git diff --name-only --relative --diff-filter=d -z | xargs -0 bat --diff
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you prefer to use this as a separate tool, check out &lt;code&gt;batdiff&lt;/code&gt; in &lt;a href="https://github.com/eth-p/bat-extras"&gt;&lt;code&gt;bat-extras&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are looking for more support for git and diff operations, check out &lt;a href="https://github.com/dandavison/delta"&gt;&lt;code&gt;delta&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;xclip&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The line numbers and Git modification markers in the output of &lt;code&gt;bat&lt;/code&gt; can make it hard to copy the contents of a file. To prevent this, you can call &lt;code&gt;bat&lt;/code&gt; with the &lt;code&gt;-p&lt;/code&gt;/&lt;code&gt;--plain&lt;/code&gt; option or simply pipe the output into &lt;code&gt;xclip&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat main.cpp | xclip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; will detect that the output is being redirected and print the plain file contents.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;man&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; can be used as a colorizing pager for &lt;code&gt;man&lt;/code&gt;, by setting the &lt;code&gt;MANPAGER&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export MANPAGER="sh -c 'awk '\''{ gsub(/\x1B\[[0-9;]*m/, \"\", \$0); gsub(/.\x08/, \"\", \$0); print }'\'' | bat -p -lman'"
man 2 select
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(replace &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;batcat&lt;/code&gt; if you are on Debian or Ubuntu)&lt;/p&gt; 
&lt;p&gt;If you prefer to have this bundled in a new command, you can also use &lt;a href="https://github.com/eth-p/bat-extras/raw/master/doc/batman.md"&gt;&lt;code&gt;batman&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;br /&gt; This will &lt;a href="https://github.com/sharkdp/bat/issues/1145"&gt;not work&lt;/a&gt; out of the box with Mandoc's &lt;code&gt;man&lt;/code&gt; implementation.&lt;/p&gt; 
 &lt;p&gt;Please either use &lt;code&gt;batman&lt;/code&gt;, or convert the shell script to a &lt;a href="https://en.wikipedia.org/wiki/Shebang_(Unix)"&gt;shebang executable&lt;/a&gt; and point &lt;code&gt;MANPAGER&lt;/code&gt; to that.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Note that the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/assets/syntaxes/02_Extra/Manpage.sublime-syntax"&gt;Manpage syntax&lt;/a&gt; is developed in this repository and still needs some work.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;prettier&lt;/code&gt; / &lt;code&gt;shfmt&lt;/code&gt; / &lt;code&gt;rustfmt&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The &lt;a href="https://github.com/eth-p/bat-extras/raw/master/doc/prettybat.md"&gt;&lt;code&gt;prettybat&lt;/code&gt;&lt;/a&gt; script is a wrapper that will format code and print it with &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;Warp&lt;/code&gt;&lt;/h4&gt; 
&lt;a href="https://app.warp.dev/drive/folder/-Bat-Warp-Pack-lxhe7HrEwgwpG17mvrFSz1"&gt; &lt;img src="https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors/warp-pack-header.png" alt="Warp" /&gt; &lt;/a&gt; 
&lt;h4&gt;Highlighting &lt;code&gt;--help&lt;/code&gt; messages&lt;/h4&gt; 
&lt;p&gt;You can use &lt;code&gt;bat&lt;/code&gt; to colorize help text: &lt;code&gt;$ cp --help | bat -plhelp&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can also use a wrapper around this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# in your .bashrc/.zshrc/*rc
alias bathelp='bat --plain --language=help'
help() {
    "$@" --help 2&amp;gt;&amp;amp;1 | bathelp
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can do &lt;code&gt;$ help cp&lt;/code&gt; or &lt;code&gt;$ help git commit&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When you are using &lt;code&gt;zsh&lt;/code&gt;, you can also use global aliases to override &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;--help&lt;/code&gt; entirely:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;alias -g -- -h='-h 2&amp;gt;&amp;amp;1 | bat --language=help --style=plain'
alias -g -- --help='--help 2&amp;gt;&amp;amp;1 | bat --language=help --style=plain'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;, you can use abbreviations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-fish"&gt;abbr -a --position anywhere -- --help '--help | bat -plhelp'
abbr -a --position anywhere -- -h '-h | bat -plhelp'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This way, you can keep on using &lt;code&gt;cp --help&lt;/code&gt;, but get colorized help pages.&lt;/p&gt; 
&lt;p&gt;Be aware that in some cases, &lt;code&gt;-h&lt;/code&gt; may not be a shorthand of &lt;code&gt;--help&lt;/code&gt; (for example with &lt;code&gt;ls&lt;/code&gt;). In cases where you need to use &lt;code&gt;-h&lt;/code&gt; as a command argument you can prepend &lt;code&gt;\&lt;/code&gt; to the arguement (eg. &lt;code&gt;ls \-h&lt;/code&gt;) to escape the aliasing defined above.&lt;/p&gt; 
&lt;p&gt;Please report any issues with the help syntax in &lt;a href="https://github.com/victor-gp/cmd-help-sublime-syntax"&gt;this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/bat-cat/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/bat-cat.svg?columns=3&amp;amp;exclude_unsupported=1" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;On Ubuntu (using &lt;code&gt;apt&lt;/code&gt;)&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;... and other Debian-based Linux distributions.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; is available on &lt;a href="https://packages.ubuntu.com/search?keywords=bat&amp;amp;exact=1"&gt;Ubuntu since 20.04 ("Focal")&lt;/a&gt; and &lt;a href="https://packages.debian.org/bullseye/bat"&gt;Debian since August 2021 (Debian 11 - "Bullseye")&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If your Ubuntu/Debian installation is new enough you can simply run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: If you install &lt;code&gt;bat&lt;/code&gt; this way, please note that the executable may be installed as &lt;code&gt;batcat&lt;/code&gt; instead of &lt;code&gt;bat&lt;/code&gt; (due to &lt;a href="https://github.com/sharkdp/bat/issues/982"&gt;a name clash with another package&lt;/a&gt;). You can set up a &lt;code&gt;bat -&amp;gt; batcat&lt;/code&gt; symlink or alias to prevent any issues that may come up because of this and to be consistent with other distributions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir -p ~/.local/bin
ln -s /usr/bin/batcat ~/.local/bin/bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;an example alias for &lt;code&gt;batcat&lt;/code&gt; as &lt;code&gt;bat&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;alias bat="batcat"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Ubuntu (using most recent &lt;code&gt;.deb&lt;/code&gt; packages)&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;... and other Debian-based Linux distributions.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;If the package has not yet been promoted to your Ubuntu/Debian installation, or you want the most recent release of &lt;code&gt;bat&lt;/code&gt;, download the latest &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href="https://github.com/sharkdp/bat/releases"&gt;release page&lt;/a&gt; and install it via:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo dpkg -i bat_0.18.3_amd64.deb  # adapt version number and architecture
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Alpine Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://pkgs.alpinelinux.org/packages?name=bat"&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official sources, provided you have the appropriate repository enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;apk add bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Arch Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://www.archlinux.org/packages/extra/x86_64/bat/"&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official sources:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pacman -S bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Fedora&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://koji.fedoraproject.org/koji/packageinfo?packageID=27506"&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official &lt;a href="https://docs.fedoraproject.org/en-US/modularity/using-modules/"&gt;Fedora Modular&lt;/a&gt; repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dnf install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Funtoo Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://github.com/funtoo/dev-kit/tree/1.4-release/sys-apps/bat"&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from dev-kit.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;emerge sys-apps/bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Gentoo Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://packages.gentoo.org/packages/sys-apps/bat"&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official sources:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;emerge sys-apps/bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Void Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via xbps-install:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;xbps-install -S bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Termux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via pkg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pkg install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On FreeBSD&lt;/h3&gt; 
&lt;p&gt;You can install a precompiled &lt;a href="https://www.freshports.org/textproc/bat"&gt;&lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; with pkg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pkg install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or build it on your own from the FreeBSD ports:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd /usr/ports/textproc/bat
make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On OpenBSD&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; package using &lt;a href="https://man.openbsd.org/pkg_add.1"&gt;&lt;code&gt;pkg_add(1)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pkg_add bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Via nix&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; using the &lt;a href="https://nixos.org/nix"&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-env -i bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Via flox&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; using &lt;a href="https://flox.dev"&gt;Flox&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;flox install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On openSUSE&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; with zypper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;zypper install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Via snap package&lt;/h3&gt; 
&lt;p&gt;There is currently no recommended snap package available. Existing packages may be available, but are not officially supported and may contain &lt;a href="https://github.com/sharkdp/bat/issues/1519"&gt;issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;On macOS (or Linux) via Homebrew&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; with &lt;a href="https://formulae.brew.sh/formula/bat"&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On macOS via MacPorts&lt;/h3&gt; 
&lt;p&gt;Or install &lt;code&gt;bat&lt;/code&gt; with &lt;a href="https://ports.macports.org/port/bat/summary"&gt;MacPorts&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;port install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Windows&lt;/h3&gt; 
&lt;p&gt;There are a few options to install &lt;code&gt;bat&lt;/code&gt; on Windows. Once you have installed &lt;code&gt;bat&lt;/code&gt;, take a look at the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#using-bat-on-windows"&gt;"Using &lt;code&gt;bat&lt;/code&gt; on Windows"&lt;/a&gt; section.&lt;/p&gt; 
&lt;h4&gt;Prerequisites&lt;/h4&gt; 
&lt;p&gt;You will need to install the &lt;a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist#latest-microsoft-visual-c-redistributable-version"&gt;Visual C++ Redistributable&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;With WinGet&lt;/h4&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via &lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/winget"&gt;WinGet&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;winget install sharkdp.bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;With Chocolatey&lt;/h4&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via &lt;a href="https://chocolatey.org/packages/Bat"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;choco install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;With Scoop&lt;/h4&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via &lt;a href="https://scoop.sh/"&gt;scoop&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;scoop install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;From prebuilt binaries:&lt;/h4&gt; 
&lt;p&gt;You can download prebuilt binaries from the &lt;a href="https://github.com/sharkdp/bat/releases"&gt;Release page&lt;/a&gt;,&lt;/p&gt; 
&lt;p&gt;You will need to install the &lt;a href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads"&gt;Visual C++ Redistributable&lt;/a&gt; package.&lt;/p&gt; 
&lt;h3&gt;From binaries&lt;/h3&gt; 
&lt;p&gt;Check out the &lt;a href="https://github.com/sharkdp/bat/releases"&gt;Release page&lt;/a&gt; for prebuilt versions of &lt;code&gt;bat&lt;/code&gt; for many different architectures. Statically-linked binaries are also available: look for archives with &lt;code&gt;musl&lt;/code&gt; in the file name.&lt;/p&gt; 
&lt;h3&gt;From source&lt;/h3&gt; 
&lt;p&gt;If you want to build &lt;code&gt;bat&lt;/code&gt; from source, you need Rust 1.74.0 or higher. You can then use &lt;code&gt;cargo&lt;/code&gt; to build everything:&lt;/p&gt; 
&lt;h4&gt;From local source&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install --path . --locked
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The &lt;code&gt;--path .&lt;/code&gt; above specifies the directory of the source code and NOT where &lt;code&gt;bat&lt;/code&gt; will be installed. For more information see the docs for &lt;a href="https://doc.rust-lang.org/cargo/commands/cargo-install.html"&gt;&lt;code&gt;cargo install&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;From &lt;code&gt;crates.io&lt;/code&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install --locked bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that additional files like the man page or shell completion files can not be installed automatically in both these ways. If installing from a local source, they will be generated by &lt;code&gt;cargo&lt;/code&gt; and should be available in the cargo target folder under &lt;code&gt;build&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Furthermore, shell completions are also available by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat --completion &amp;lt;shell&amp;gt;
# see --help for supported shells
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;h3&gt;Highlighting theme&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;bat --list-themes&lt;/code&gt; to get a list of all available themes for syntax highlighting. To select the &lt;code&gt;TwoDark&lt;/code&gt; theme, call &lt;code&gt;bat&lt;/code&gt; with the &lt;code&gt;--theme=TwoDark&lt;/code&gt; option or set the &lt;code&gt;BAT_THEME&lt;/code&gt; environment variable to &lt;code&gt;TwoDark&lt;/code&gt;. Use &lt;code&gt;export BAT_THEME="TwoDark"&lt;/code&gt; in your shell's startup file to make the change permanent. Alternatively, use &lt;code&gt;bat&lt;/code&gt;'s &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#configuration-file"&gt;configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to preview the different themes on a custom file, you can use the following command (you need &lt;a href="https://github.com/junegunn/fzf"&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; for this):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat --list-themes | fzf --preview="bat --theme={} --color=always /path/to/file"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; automatically picks a fitting theme depending on your terminal's background color. You can use the &lt;code&gt;--theme-dark&lt;/code&gt; / &lt;code&gt;--theme-light&lt;/code&gt; options or the &lt;code&gt;BAT_THEME_DARK&lt;/code&gt; / &lt;code&gt;BAT_THEME_LIGHT&lt;/code&gt; environment variables to customize the themes used. This is especially useful if you frequently switch between dark and light mode.&lt;/p&gt; 
&lt;p&gt;You can also use a custom theme by following the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#adding-new-themes"&gt;'Adding new themes' section below&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;8-bit themes&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; has three themes that always use &lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors"&gt;8-bit colors&lt;/a&gt;, even when truecolor support is available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ansi&lt;/code&gt; looks decent on any terminal. It uses 3-bit colors: black, red, green, yellow, blue, magenta, cyan, and white.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base16&lt;/code&gt; is designed for &lt;a href="https://github.com/tinted-theming/home"&gt;base16&lt;/a&gt; terminal themes. It uses 4-bit colors (3-bit colors plus bright variants) in accordance with the &lt;a href="https://github.com/tinted-theming/home/raw/main/styling.md"&gt;base16 styling guidelines&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base16-256&lt;/code&gt; is designed for &lt;a href="https://github.com/tinted-theming/tinted-shell"&gt;tinted-shell&lt;/a&gt;. It replaces certain bright colors with 8-bit colors from 16 to 21. &lt;strong&gt;Do not&lt;/strong&gt; use this simply because you have a 256-color terminal but are not using tinted-shell.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Although these themes are more restricted, they have three advantages over truecolor themes. They:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enjoy maximum compatibility. Some terminal utilities do not support more than 3-bit colors.&lt;/li&gt; 
 &lt;li&gt;Adapt to terminal theme changes. Even for already printed output.&lt;/li&gt; 
 &lt;li&gt;Visually harmonize better with other terminal software.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Output style&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;--style&lt;/code&gt; option to control the appearance of &lt;code&gt;bat&lt;/code&gt;'s output. You can use &lt;code&gt;--style=numbers,changes&lt;/code&gt;, for example, to show only Git changes and line numbers but no grid and no file header. Set the &lt;code&gt;BAT_STYLE&lt;/code&gt; environment variable to make these changes permanent or use &lt;code&gt;bat&lt;/code&gt;'s &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#configuration-file"&gt;configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!tip] If you specify a default style in &lt;code&gt;bat&lt;/code&gt;'s config file, you can change which components are displayed during a single run of &lt;code&gt;bat&lt;/code&gt; using the &lt;code&gt;--style&lt;/code&gt; command-line argument. By prefixing a component with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, it can be added or removed from the current style.&lt;/p&gt; 
 &lt;p&gt;For example, if your config contains &lt;code&gt;--style=full,-snip&lt;/code&gt;, you can run bat with &lt;code&gt;--style=-grid,+snip&lt;/code&gt; to remove the grid and add back the &lt;code&gt;snip&lt;/code&gt; component. Or, if you want to override the styles completely, you use &lt;code&gt;--style=numbers&lt;/code&gt; to only show the line numbers.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Adding new syntaxes / language definitions&lt;/h3&gt; 
&lt;p&gt;Should you find that a particular syntax is not available within &lt;code&gt;bat&lt;/code&gt;, you can follow these instructions to easily add new syntaxes to your current &lt;code&gt;bat&lt;/code&gt; installation.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; uses the excellent &lt;a href="https://github.com/trishume/syntect/"&gt;&lt;code&gt;syntect&lt;/code&gt;&lt;/a&gt; library for syntax highlighting. &lt;code&gt;syntect&lt;/code&gt; can read any &lt;a href="https://www.sublimetext.com/docs/3/syntax.html"&gt;Sublime Text &lt;code&gt;.sublime-syntax&lt;/code&gt; file&lt;/a&gt; and theme.&lt;/p&gt; 
&lt;p&gt;A good resource for finding Sublime Syntax packages is &lt;a href="https://packagecontrol.io/"&gt;Package Control&lt;/a&gt;. Once you found a syntax:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create a folder with syntax definition files:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;mkdir -p "$(bat --config-dir)/syntaxes"
cd "$(bat --config-dir)/syntaxes"

# Put new '.sublime-syntax' language definition files
# in this folder (or its subdirectories), for example:
git clone https://github.com/tellnobody1/sublime-purescript-syntax
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now use the following command to parse these files into a binary cache:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;bat cache --build
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Finally, use &lt;code&gt;bat --list-languages&lt;/code&gt; to check if the new languages are available.&lt;/p&gt; &lt;p&gt;If you ever want to go back to the default settings, call:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;bat cache --clear
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you think that a specific syntax should be included in &lt;code&gt;bat&lt;/code&gt; by default, please consider opening a "syntax request" ticket after reading the policies and instructions &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/assets.md"&gt;here&lt;/a&gt;: &lt;a href="https://github.com/sharkdp/bat/issues/new?labels=syntax-request&amp;amp;template=syntax_request.md"&gt;Open Syntax Request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Adding new themes&lt;/h3&gt; 
&lt;p&gt;This works very similar to how we add new syntax definitions.&lt;/p&gt; 
&lt;p&gt;First, create a folder with the new syntax highlighting themes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir -p "$(bat --config-dir)/themes"
cd "$(bat --config-dir)/themes"

# Download a theme in '.tmTheme' format, for example:
git clone https://github.com/greggb/sublime-snazzy

# Update the binary cache
bat cache --build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, use &lt;code&gt;bat --list-themes&lt;/code&gt; to check if the new themes are available.&lt;/p&gt; 
&lt;h3&gt;Adding or changing file type associations&lt;/h3&gt; 
&lt;p&gt;You can add new (or change existing) file name patterns using the &lt;code&gt;--map-syntax&lt;/code&gt; command line option. The option takes an argument of the form &lt;code&gt;pattern:syntax&lt;/code&gt; where &lt;code&gt;pattern&lt;/code&gt; is a glob pattern that is matched against the file name and the absolute file path. The &lt;code&gt;syntax&lt;/code&gt; part is the full name of a supported language (use &lt;code&gt;bat --list-languages&lt;/code&gt; for an overview).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You probably want to use this option as &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#configuration-file"&gt;an entry in &lt;code&gt;bat&lt;/code&gt;'s configuration file&lt;/a&gt; for persistence instead of passing it on the command line as a one-off. Generally you'd just use &lt;code&gt;-l&lt;/code&gt; if you want to manually specify a language for a file.&lt;/p&gt; 
&lt;p&gt;Example: To use "INI" syntax highlighting for all files with a &lt;code&gt;.conf&lt;/code&gt; file extension, use&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;--map-syntax='*.conf:INI'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: To open all files called &lt;code&gt;.ignore&lt;/code&gt; (exact match) with the "Git Ignore" syntax, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;--map-syntax='.ignore:Git Ignore'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: To open all &lt;code&gt;.conf&lt;/code&gt; files in subfolders of &lt;code&gt;/etc/apache2&lt;/code&gt; with the "Apache Conf" syntax, use (this mapping is already built in):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;--map-syntax='/etc/apache2/**/*.conf:Apache Conf'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using a different pager&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; uses the pager that is specified in the &lt;code&gt;PAGER&lt;/code&gt; environment variable. If this variable is not set, &lt;code&gt;less&lt;/code&gt; is used by default. If you want to use a different pager, you can either modify the &lt;code&gt;PAGER&lt;/code&gt; variable or set the &lt;code&gt;BAT_PAGER&lt;/code&gt; environment variable to override what is specified in &lt;code&gt;PAGER&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If &lt;code&gt;PAGER&lt;/code&gt; is &lt;code&gt;more&lt;/code&gt; or &lt;code&gt;most&lt;/code&gt;, &lt;code&gt;bat&lt;/code&gt; will silently use &lt;code&gt;less&lt;/code&gt; instead to ensure support for colors.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you want to pass command-line arguments to the pager, you can also set them via the &lt;code&gt;PAGER&lt;/code&gt;/&lt;code&gt;BAT_PAGER&lt;/code&gt; variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export BAT_PAGER="less -RF"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Instead of using environment variables, you can also use &lt;code&gt;bat&lt;/code&gt;'s &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#configuration-file"&gt;configuration file&lt;/a&gt; to configure the pager (&lt;code&gt;--pager&lt;/code&gt; option).&lt;/p&gt; 
&lt;h3&gt;Using &lt;code&gt;less&lt;/code&gt; as a pager&lt;/h3&gt; 
&lt;p&gt;When using &lt;code&gt;less&lt;/code&gt; as a pager, &lt;code&gt;bat&lt;/code&gt; will automatically pass extra options along to &lt;code&gt;less&lt;/code&gt; to improve the experience. Specifically, &lt;code&gt;-R&lt;/code&gt;/&lt;code&gt;--RAW-CONTROL-CHARS&lt;/code&gt;, &lt;code&gt;-F&lt;/code&gt;/&lt;code&gt;--quit-if-one-screen&lt;/code&gt;, and under certain conditions, &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--no-init&lt;/code&gt; and/or &lt;code&gt;-S&lt;/code&gt;/&lt;code&gt;--chop-long-lines&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] These options will not be added if:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The pager is not named &lt;code&gt;less&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;The &lt;code&gt;--pager&lt;/code&gt; argument contains any command-line arguments (e.g. &lt;code&gt;--pager="less -R"&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;The &lt;code&gt;BAT_PAGER&lt;/code&gt; environment variable contains any command-line arguments (e.g. &lt;code&gt;export BAT_PAGER="less -R"&lt;/code&gt;)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;The &lt;code&gt;--quit-if-one-screen&lt;/code&gt; option will not be added when:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The &lt;code&gt;--paging=always&lt;/code&gt; argument is used.&lt;/li&gt; 
  &lt;li&gt;The &lt;code&gt;BAT_PAGING&lt;/code&gt; environment is set to &lt;code&gt;always&lt;/code&gt;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;code&gt;-R&lt;/code&gt; option is needed to interpret ANSI colors correctly.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;-F&lt;/code&gt; option instructs &lt;code&gt;less&lt;/code&gt; to exit immediately if the output size is smaller than the vertical size of the terminal. This is convenient for small files because you do not have to press &lt;code&gt;q&lt;/code&gt; to quit the pager.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;-X&lt;/code&gt; option is needed to fix a bug with the &lt;code&gt;--quit-if-one-screen&lt;/code&gt; feature in versions of &lt;code&gt;less&lt;/code&gt; older than version 530. Unfortunately, it also breaks mouse-wheel support in &lt;code&gt;less&lt;/code&gt;. If you want to enable mouse-wheel scrolling on older versions of &lt;code&gt;less&lt;/code&gt; and do not mind losing the quit-if-one-screen feature, you can set the pager (via &lt;code&gt;--pager&lt;/code&gt; or &lt;code&gt;BAT_PAGER&lt;/code&gt;) to &lt;code&gt;less -R&lt;/code&gt;. For &lt;code&gt;less&lt;/code&gt; 530 or newer, it should work out of the box.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;-S&lt;/code&gt; option is added when &lt;code&gt;bat&lt;/code&gt;'s &lt;code&gt;-S&lt;/code&gt;/&lt;code&gt;--chop-long-lines&lt;/code&gt; option is used. This tells &lt;code&gt;less&lt;/code&gt; to truncate any lines larger than the terminal width.&lt;/p&gt; 
&lt;h3&gt;Indentation&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; expands tabs to 4 spaces by itself, not relying on the pager. To change this, simply add the &lt;code&gt;--tabs&lt;/code&gt; argument with the number of spaces you want to be displayed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Defining tab stops for the pager (via the &lt;code&gt;--pager&lt;/code&gt; argument by &lt;code&gt;bat&lt;/code&gt;, or via the &lt;code&gt;LESS&lt;/code&gt; environment variable for &lt;code&gt;less&lt;/code&gt;) won't be taken into account because the pager will already get expanded spaces instead of tabs. This behaviour is added to avoid indentation issues caused by the sidebar. Calling &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;--tabs=0&lt;/code&gt; will override it and let tabs be consumed by the pager.&lt;/p&gt; 
&lt;h3&gt;Dark mode&lt;/h3&gt; 
&lt;p&gt;If you make use of the dark mode feature in macOS, you might want to configure &lt;code&gt;bat&lt;/code&gt; to use a different theme based on the OS theme. The following snippet uses the &lt;code&gt;default&lt;/code&gt; theme when in the &lt;em&gt;dark mode&lt;/em&gt; and the &lt;code&gt;GitHub&lt;/code&gt; theme when in the &lt;em&gt;light mode&lt;/em&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;alias cat="bat --theme auto:system --theme-dark default --theme-light GitHub"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration file&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; can also be customized with a configuration file. The location of the file is dependent on your operating system. To get the default path for your system, call&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat --config-file
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can use &lt;code&gt;BAT_CONFIG_PATH&lt;/code&gt; or &lt;code&gt;BAT_CONFIG_DIR&lt;/code&gt; environment variables to point &lt;code&gt;bat&lt;/code&gt; to a non-default location of the configuration file or the configuration directory respectively:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export BAT_CONFIG_PATH="/path/to/bat/bat.conf"
export BAT_CONFIG_DIR="/path/to/bat"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A default configuration file can be created with the &lt;code&gt;--generate-config-file&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat --generate-config-file
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is also now a systemwide configuration file, which is located under &lt;code&gt;/etc/bat/config&lt;/code&gt; on Linux and Mac OS and &lt;code&gt;C:\ProgramData\bat\config&lt;/code&gt; on windows. If the system wide configuration file is present, the content of the user configuration will simply be appended to it.&lt;/p&gt; 
&lt;h3&gt;Format&lt;/h3&gt; 
&lt;p&gt;The configuration file is a simple list of command line arguments. Use &lt;code&gt;bat --help&lt;/code&gt; to see a full list of possible options and values. In addition, you can add comments by prepending a line with the &lt;code&gt;#&lt;/code&gt; character.&lt;/p&gt; 
&lt;p&gt;Example configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Set the theme to "TwoDark"
--theme="TwoDark"

# Show line numbers, Git modifications and file header (but no grid)
--style="numbers,changes,header"

# Use italic text on the terminal (not supported on all terminals)
--italic-text=always

# Use C++ syntax for Arduino .ino files
--map-syntax "*.ino:C++"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Using &lt;code&gt;bat&lt;/code&gt; on Windows&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; mostly works out-of-the-box on Windows, but a few features may need extra configuration.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;You will need to install the &lt;a href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads"&gt;Visual C++ Redistributable&lt;/a&gt; package.&lt;/p&gt; 
&lt;h3&gt;Paging&lt;/h3&gt; 
&lt;p&gt;Windows only includes a very limited pager in the form of &lt;code&gt;more&lt;/code&gt;. You can download a Windows binary for &lt;code&gt;less&lt;/code&gt; &lt;a href="http://www.greenwoodsoftware.com/less/download.html"&gt;from its homepage&lt;/a&gt; or &lt;a href="https://chocolatey.org/packages/Less"&gt;through Chocolatey&lt;/a&gt;. To use it, place the binary in a directory in your &lt;code&gt;PATH&lt;/code&gt; or &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#using-a-different-pager"&gt;define an environment variable&lt;/a&gt;. The &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#on-windows"&gt;Chocolatey package&lt;/a&gt; installs &lt;code&gt;less&lt;/code&gt; automatically.&lt;/p&gt; 
&lt;h3&gt;Colors&lt;/h3&gt; 
&lt;p&gt;Windows 10 natively supports colors in both &lt;code&gt;conhost.exe&lt;/code&gt; (Command Prompt) and PowerShell since &lt;a href="https://en.wikipedia.org/wiki/Windows_10_version_history#Version_1511_(November_Update)"&gt;v1511&lt;/a&gt;, as well as in newer versions of bash. On earlier versions of Windows, you can use &lt;a href="http://cmder.app/"&gt;Cmder&lt;/a&gt;, which includes &lt;a href="https://conemu.github.io/"&gt;ConEmu&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Old versions of &lt;code&gt;less&lt;/code&gt; do not correctly interpret colors on Windows. To fix this, you can add the optional Unix tools to your PATH when installing Git. If you don’t have any other pagers installed, you can disable paging entirely by passing &lt;code&gt;--paging=never&lt;/code&gt; or by setting &lt;code&gt;BAT_PAGER&lt;/code&gt; to an empty string.&lt;/p&gt; 
&lt;h3&gt;Cygwin&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; on Windows does not natively support Cygwin's unix-style paths (&lt;code&gt;/cygdrive/*&lt;/code&gt;). When passed an absolute cygwin path as an argument, &lt;code&gt;bat&lt;/code&gt; will encounter the following error: &lt;code&gt;The system cannot find the path specified. (os error 3)&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This can be solved by creating a wrapper or adding the following function to your &lt;code&gt;.bash_profile&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat() {
    local index
    local args=("$@")
    for index in $(seq 0 ${#args[@]}) ; do
        case "${args[index]}" in
        -*) continue;;
        *)  [ -e "${args[index]}" ] &amp;amp;&amp;amp; args[index]="$(cygpath --windows "${args[index]}")";;
        esac
    done
    command bat "${args[@]}"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;h3&gt;Garbled output&lt;/h3&gt; 
&lt;p&gt;If an input file contains color codes or other ANSI escape sequences or control characters, &lt;code&gt;bat&lt;/code&gt; will have problems performing syntax highlighting and text wrapping, and thus the output can become garbled.&lt;/p&gt; 
&lt;p&gt;If your version of &lt;code&gt;bat&lt;/code&gt; supports the &lt;code&gt;--strip-ansi=auto&lt;/code&gt; option, it can be used to remove such sequences before syntax highlighting. Alternatively, you may disable both syntax highlighting and wrapping by passing the &lt;code&gt;--color=never --wrap=never&lt;/code&gt; options to &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The &lt;code&gt;auto&lt;/code&gt; option of &lt;code&gt;--strip-ansi&lt;/code&gt; avoids removing escape sequences when the syntax is plain text.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Terminals &amp;amp; colors&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; handles terminals &lt;em&gt;with&lt;/em&gt; and &lt;em&gt;without&lt;/em&gt; truecolor support. However, the colors in most syntax highlighting themes are not optimized for 8-bit colors. It is therefore strongly recommended that you use a terminal with 24-bit truecolor support (&lt;code&gt;terminator&lt;/code&gt;, &lt;code&gt;konsole&lt;/code&gt;, &lt;code&gt;iTerm2&lt;/code&gt;, ...), or use one of the basic &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#8-bit-themes"&gt;8-bit themes&lt;/a&gt; designed for a restricted set of colors. See &lt;a href="https://gist.github.com/XVilka/8346728"&gt;this article&lt;/a&gt; for more details and a full list of terminals with truecolor support.&lt;/p&gt; 
&lt;p&gt;Make sure that your truecolor terminal sets the &lt;code&gt;COLORTERM&lt;/code&gt; variable to either &lt;code&gt;truecolor&lt;/code&gt; or &lt;code&gt;24bit&lt;/code&gt;. Otherwise, &lt;code&gt;bat&lt;/code&gt; will not be able to determine whether or not 24-bit escape sequences are supported (and fall back to 8-bit colors).&lt;/p&gt; 
&lt;h3&gt;Line numbers and grid are hardly visible&lt;/h3&gt; 
&lt;p&gt;Please try a different theme (see &lt;code&gt;bat --list-themes&lt;/code&gt; for a list). The &lt;code&gt;OneHalfDark&lt;/code&gt; and &lt;code&gt;OneHalfLight&lt;/code&gt; themes provide grid and line colors that are brighter.&lt;/p&gt; 
&lt;h3&gt;File encodings&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; natively supports UTF-8 as well as UTF-16. For every other file encoding, you may need to convert to UTF-8 first because the encodings can typically not be auto-detected. You can &lt;code&gt;iconv&lt;/code&gt; to do so. Example: if you have a PHP file in Latin-1 (ISO-8859-1) encoding, you can call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;iconv -f ISO-8859-1 -t UTF-8 my-file.php | bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: you might have to use the &lt;code&gt;-l&lt;/code&gt;/&lt;code&gt;--language&lt;/code&gt; option if the syntax can not be auto-detected by &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Recursive clone to retrieve all submodules
git clone --recursive https://github.com/sharkdp/bat

# Build (debug version)
cd bat
cargo build --bins

# Run unit tests and integration tests
cargo test

# Install (release version)
cargo install --path . --locked

# Build a bat binary with modified syntaxes and themes
bash assets/create.sh
cargo install --path . --locked --force
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to build an application that uses &lt;code&gt;bat&lt;/code&gt;'s pretty-printing features as a library, check out the &lt;a href="https://docs.rs/bat/"&gt;the API documentation&lt;/a&gt;. Note that you have to use either &lt;code&gt;regex-onig&lt;/code&gt; or &lt;code&gt;regex-fancy&lt;/code&gt; as a feature when you depend on &lt;code&gt;bat&lt;/code&gt; as a library.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Take a look at the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sharkdp"&gt;sharkdp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/eth-p"&gt;eth-p&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/keith-hall"&gt;keith-hall&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Enselic"&gt;Enselic&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security vulnerabilities&lt;/h2&gt; 
&lt;p&gt;Please contact &lt;a href="https://david-peter.de/"&gt;David Peter&lt;/a&gt; via email if you want to report a vulnerability in &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Project goals and alternatives&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; tries to achieve the following goals:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Provide beautiful, advanced syntax highlighting&lt;/li&gt; 
 &lt;li&gt;Integrate with Git to show file modifications&lt;/li&gt; 
 &lt;li&gt;Be a drop-in replacement for (POSIX) &lt;code&gt;cat&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Offer a user-friendly command-line interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are a lot of alternatives, if you are looking for similar programs. See &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/alternatives.md"&gt;this document&lt;/a&gt; for a comparison.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2018-2023 &lt;a href="https://github.com/sharkdp/bat"&gt;bat-developers&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; is made available under the terms of either the MIT License or the Apache License 2.0, at your option.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; files for license details.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>