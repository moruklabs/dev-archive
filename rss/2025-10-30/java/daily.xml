<rss version="2.0">
  <channel>
    <title>GitHub Java Daily Trending</title>
    <description>Daily Trending of Java in GitHub</description>
    <pubDate>Wed, 29 Oct 2025 01:34:17 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>Stirling-Tools/Stirling-PDF</title>
      <link>https://github.com/Stirling-Tools/Stirling-PDF</link>
      <description>&lt;p&gt;#1 Locally hosted web application that allows you to perform various operations on PDF files&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/docs/stirling.png" width="80" /&gt;&lt;/p&gt; 
&lt;h1 align="center"&gt;Stirling-PDF&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://hub.docker.com/r/frooodle/s-pdf"&gt;&lt;img src="https://img.shields.io/docker/pulls/frooodle/s-pdf" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/HYmhKj45pU"&gt;&lt;img src="https://img.shields.io/discord/1068636748814483718?label=Discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/Stirling-Tools/Stirling-PDF"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/Stirling-Tools/Stirling-PDF/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Stirling-Tools/stirling-pdf"&gt;&lt;img src="https://img.shields.io/github/stars/stirling-tools/stirling-pdf?style=social" alt="GitHub Repo stars" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/stirling-pdf?embed=true&amp;amp;utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-stirling-pdf" target="_blank"&gt;&lt;img src="https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=641239&amp;amp;theme=light" alt="Stirling PDF - Open source locally hosted web PDF editor | Product Hunt" style="width: 250px; height: 54px;" width="250" height="54" /&gt;&lt;/a&gt; &lt;a href="https://cloud.digitalocean.com/apps/new?repo=https://github.com/Stirling-Tools/Stirling-PDF/tree/digitalOcean&amp;amp;refcode=c3210994b1af"&gt;&lt;img src="https://www.deploytodo.com/do-btn-blue.svg?sanitize=true" alt="Deploy to DO" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.stirlingpdf.com"&gt;Stirling-PDF&lt;/a&gt; is a robust, locally hosted web-based PDF manipulation tool using Docker. It enables you to carry out various operations on PDF files, including splitting, merging, converting, reorganizing, adding images, rotating, compressing, and more. This locally hosted web application has evolved to encompass a comprehensive set of features, addressing all your PDF requirements.&lt;/p&gt; 
&lt;p&gt;All files and PDFs exist either exclusively on the client side, reside in server memory only during task execution, or temporarily reside in a file solely for the execution of the task. Any file downloaded by the user will have been deleted from the server by that point.&lt;/p&gt; 
&lt;p&gt;Homepage: &lt;a href="https://stirlingpdf.com"&gt;https://stirlingpdf.com&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;All documentation available at &lt;a href="https://docs.stirlingpdf.com/"&gt;https://docs.stirlingpdf.com/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/images/stirling-home.jpg" alt="stirling-home" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Parallel file processing and downloads&lt;/li&gt; 
 &lt;li&gt;Dark mode support&lt;/li&gt; 
 &lt;li&gt;Custom download options&lt;/li&gt; 
 &lt;li&gt;Custom 'Pipelines' to run multiple features in an automated queue&lt;/li&gt; 
 &lt;li&gt;API for integration with external scripts&lt;/li&gt; 
 &lt;li&gt;Optional Login and Authentication support (see &lt;a href="https://docs.stirlingpdf.com/Advanced%20Configuration/System%20and%20Security"&gt;here&lt;/a&gt; for documentation)&lt;/li&gt; 
 &lt;li&gt;Enterprise features like SSO (see &lt;a href="https://docs.stirlingpdf.com/Advanced%20Configuration/Single%20Sign-On%20Configuration"&gt;here&lt;/a&gt; for documentation)&lt;/li&gt; 
 &lt;li&gt;Database Backup and Import (see &lt;a href="https://docs.stirlingpdf.com/Advanced%20Configuration/DATABASE"&gt;here&lt;/a&gt; for documentation)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;50+ PDF Operations&lt;/h3&gt; 
&lt;h4&gt;Organise&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Merge&lt;/strong&gt;: Combine multiple PDFs into one&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Split&lt;/strong&gt;: Divide PDFs into multiple files&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extract page(s)&lt;/strong&gt;: Extract specific pages from PDF&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Remove&lt;/strong&gt;: Delete pages from PDF&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Crop PDF&lt;/strong&gt;: Adjust PDF page boundaries&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rotate&lt;/strong&gt;: Rotate pages in 90-degree increments&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Adjust page size/scale&lt;/strong&gt;: Resize page contents&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-Page Layout&lt;/strong&gt;: Add multiple pages to PDF&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to Single Large Page&lt;/strong&gt;: Convert to single continuous page&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Organize&lt;/strong&gt;: Rearrange PDF pages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Convert to PDF&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Image to PDF&lt;/strong&gt;: Convert images to PDF format&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Convert file to PDF&lt;/strong&gt;: Convert various common file types to PDF&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTML to PDF&lt;/strong&gt;: Transform HTML documents to PDF&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Markdown to PDF&lt;/strong&gt;: Convert Markdown files to PDF&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CBZ to PDF&lt;/strong&gt;: Convert comic book archives&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CBR to PDF&lt;/strong&gt;: Convert comic book rar archives&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Email to PDF&lt;/strong&gt;: Convert email files to PDF&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Vector Image to PDF&lt;/strong&gt;: Convert vector images (PS, EPS, EPSF) to PDF format&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Convert from PDF&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to Word&lt;/strong&gt;: Convert to documet (docx, doc, odt) format&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to Image&lt;/strong&gt;: Extract PDF pages as images&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to RTF (Text)&lt;/strong&gt;: Convert to Rich Text Format&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to Presentation&lt;/strong&gt;: Convert to presentation (pptx, ppt, odp) format&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to CSV&lt;/strong&gt;: Extract tables to CSV&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to XML&lt;/strong&gt;: Convert to XML format&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to HTML&lt;/strong&gt;: Transform to HTML&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to PDF/A&lt;/strong&gt;: Convert to archival (PDF/A-1b, PDF/A-2b) format&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to Markdown&lt;/strong&gt;: Convert PDF to Markdown&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to CBZ&lt;/strong&gt;: Convert to comic book archive&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to CBR&lt;/strong&gt;: Convert to comic book rar archive&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PDF to Vector Image&lt;/strong&gt;: Convert PDF to vector image (EPS, PS, PCL, XPS) format&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Sign &amp;amp; Security&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Sign&lt;/strong&gt;: Add digital signatures&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Remove Password&lt;/strong&gt;: Remove PDF security&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add Watermark&lt;/strong&gt;: Apply watermarks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sign with Certificate&lt;/strong&gt;: Certificate-based signing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add Stamp to PDF&lt;/strong&gt;: Apply digital stamps&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Auto Redact&lt;/strong&gt;: Automatically redact content&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Change Permissions&lt;/strong&gt;: Modify access permissions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add Password&lt;/strong&gt;: Apply PDF encryption&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Manual Redaction&lt;/strong&gt;: Manual content redaction&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Remove Certificate Sign&lt;/strong&gt;: Remove digital signatures&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sanitize&lt;/strong&gt;: Clean PDF of potential security issues&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Validate PDF Signature&lt;/strong&gt;: Verify digital signatures&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;View &amp;amp; Edit&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;OCR / Cleanup scans&lt;/strong&gt;: Optical Character Recognition&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add Image&lt;/strong&gt;: Insert images into PDF&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extract Images&lt;/strong&gt;: Extract embedded images&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Change Metadata&lt;/strong&gt;: Edit PDF metadata&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Get ALL Info on PDF&lt;/strong&gt;: Comprehensive PDF analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced Colour options&lt;/strong&gt;: Colour manipulation (various options for colour inversion, CMYK conversion)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Compare&lt;/strong&gt;: Compare PDF documents&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add Page Numbers&lt;/strong&gt;: Insert page numbering&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flatten&lt;/strong&gt;: Flatten PDF layers, and interactive elements&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Remove Annotations&lt;/strong&gt;: Delete comments and markups&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Remove Blank pages&lt;/strong&gt;: Delete empty pages&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Remove Image&lt;/strong&gt;: Delete embedded images&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View/Edit PDF&lt;/strong&gt;: Interactive PDF editing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Unlock PDF Forms&lt;/strong&gt;: Enable form editing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add Attachments&lt;/strong&gt;: Attach files to PDF&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advanced&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Compress&lt;/strong&gt;: Reduce file size&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Pipeline&lt;/strong&gt;: Automated workflow processing (OCR images pipeline, prepare PDFs for emailing pipeline)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Adjust Colours/Contrast&lt;/strong&gt;: Colour and contrast adjustment&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Auto Rename PDF File&lt;/strong&gt;: Automatic file renaming&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Auto Split Pages&lt;/strong&gt;: Automatic page splitting&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Detect/Split Scanned photos&lt;/strong&gt;: Photo detection and splitting&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Overlay PDFs&lt;/strong&gt;: Layer PDFs over each other&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Repair&lt;/strong&gt;: Fix corrupted PDFs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Show JavaScript&lt;/strong&gt;: Display embedded JavaScript&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Auto Split by Size/Count&lt;/strong&gt;: Split by file size or page count&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Split PDF by Chapters&lt;/strong&gt;: Chapter-based splitting&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Split PDF by Sections&lt;/strong&gt;: Section-based splitting&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scanner Effect&lt;/strong&gt;: Apply scanner-like effects&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Edit Table of Contents&lt;/strong&gt;: Modify PDF bookmarks and TOC&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;📖 Get Started&lt;/h1&gt; 
&lt;p&gt;Visit our comprehensive documentation at &lt;a href="https://docs.stirlingpdf.com"&gt;docs.stirlingpdf.com&lt;/a&gt; for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation guides for all platforms&lt;/li&gt; 
 &lt;li&gt;Configuration options&lt;/li&gt; 
 &lt;li&gt;Feature documentation&lt;/li&gt; 
 &lt;li&gt;API reference&lt;/li&gt; 
 &lt;li&gt;Security setup&lt;/li&gt; 
 &lt;li&gt;Enterprise features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Languages&lt;/h2&gt; 
&lt;p&gt;Stirling-PDF currently supports 40 languages!&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Progress&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Arabic (العربية) (ar_AR)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/58" alt="58%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Azerbaijani (Azərbaycan Dili) (az_AZ)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/59" alt="59%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Basque (Euskara) (eu_ES)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/35" alt="35%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Bulgarian (Български) (bg_BG)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/65" alt="65%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Catalan (Català) (ca_CA)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/65" alt="65%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Croatian (Hrvatski) (hr_HR)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/94" alt="94%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Czech (Česky) (cs_CZ)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/67" alt="67%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Danish (Dansk) (da_DK)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/59" alt="59%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dutch (Nederlands) (nl_NL)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/57" alt="57%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;English (English) (en_GB)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/100" alt="100%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;English (US) (en_US)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/100" alt="100%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;French (Français) (fr_FR)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/87" alt="87%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;German (Deutsch) (de_DE)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/98" alt="98%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Greek (Ελληνικά) (el_GR)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/64" alt="64%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hindi (हिंदी) (hi_IN)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/64" alt="64%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hungarian (Magyar) (hu_HU)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/98" alt="98%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Indonesian (Bahasa Indonesia) (id_ID)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/59" alt="59%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Irish (Gaeilge) (ga_IE)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/65" alt="65%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Italian (Italiano) (it_IT)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/95" alt="95%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Japanese (日本語) (ja_JP)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/89" alt="89%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Korean (한국어) (ko_KR)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/64" alt="64%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Norwegian (Norsk) (no_NB)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/63" alt="63%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Persian (فارسی) (fa_IR)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/61" alt="61%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Polish (Polski) (pl_PL)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/69" alt="69%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Portuguese (Português) (pt_PT)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/66" alt="66%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Portuguese Brazilian (Português) (pt_BR)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/72" alt="72%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Romanian (Română) (ro_RO)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/55" alt="55%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Russian (Русский) (ru_RU)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/88" alt="88%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Serbian Latin alphabet (Srpski) (sr_LATN_RS)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/95" alt="95%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Simplified Chinese (简体中文) (zh_CN)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/89" alt="89%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Slovakian (Slovensky) (sk_SK)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/49" alt="49%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Slovenian (Slovenščina) (sl_SI)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/68" alt="68%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Spanish (Español) (es_ES)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/93" alt="93%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Swedish (Svenska) (sv_SE)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/62" alt="62%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Thai (ไทย) (th_TH)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/56" alt="56%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Tibetan (བོད་ཡིག་) (bo_CN)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/62" alt="62%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Traditional Chinese (繁體中文) (zh_TW)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/95" alt="95%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Turkish (Türkçe) (tr_TR)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/95" alt="95%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ukrainian (Українська) (uk_UA)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/67" alt="67%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Vietnamese (Tiếng Việt) (vi_VN)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/54" alt="54%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Malayalam (മലയാളം) (ml_IN)&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://geps.dev/progress/70" alt="70%" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Stirling PDF Enterprise&lt;/h2&gt; 
&lt;p&gt;Stirling PDF offers an Enterprise edition of its software. This is the same great software but with added features, support and comforts. Check out our &lt;a href="https://docs.stirlingpdf.com/Pro"&gt;Enterprise docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🤝 Looking to contribute?&lt;/h2&gt; 
&lt;p&gt;Join our community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/devGuide/HowToAddNewLanguage.md"&gt;Translation Guide (How to add custom languages)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/devGuide/DeveloperGuide.md"&gt;Developer Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Stirling-Tools/Stirling-PDF/issues"&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/HYmhKj45pU"&gt;Discord Community&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>apache/paimon</title>
      <link>https://github.com/apache/paimon</link>
      <description>&lt;p&gt;Apache Paimon is a lake format that enables building a Realtime Lakehouse Architecture with Flink and Spark for both streaming and batch operations.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://github.com/apache/paimon/raw/master/docs/static/paimon-simple.png" alt="Paimon" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.apache.org/licenses/LICENSE-2.0.html"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://the-asf.slack.com/archives/C053Q2NCW8G"&gt;&lt;img src="https://img.shields.io/badge/slack-join-orange.svg?sanitize=true" alt="Get on Slack" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Apache Paimon is a lake format that enables building a Realtime Lakehouse Architecture with Flink and Spark for both streaming and batch operations. Paimon innovatively combines lake format and LSM structure, bringing realtime streaming updates into the lake architecture.&lt;/p&gt; 
&lt;p&gt;Background and documentation are available at &lt;a href="https://paimon.apache.org"&gt;https://paimon.apache.org&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Paimon&lt;/code&gt;'s former name was &lt;code&gt;Flink Table Store&lt;/code&gt;, developed from the Flink community. The architecture refers to some design concepts of Iceberg. Thanks to Apache Flink and Apache Iceberg.&lt;/p&gt; 
&lt;h2&gt;Collaboration&lt;/h2&gt; 
&lt;p&gt;Paimon tracks issues in GitHub and prefers to receive contributions as pull requests.&lt;/p&gt; 
&lt;h2&gt;Mailing Lists&lt;/h2&gt; 
&lt;table class="table table-striped"&gt; 
 &lt;thead&gt; 
  &lt;tr&gt;
   &lt;th class="text-center"&gt;Name&lt;/th&gt; 
   &lt;th class="text-center"&gt;Subscribe&lt;/th&gt; 
   &lt;th class="text-center"&gt;Digest&lt;/th&gt; 
   &lt;th class="text-center"&gt;Unsubscribe&lt;/th&gt; 
   &lt;th class="text-center"&gt;Post&lt;/th&gt; 
   &lt;th class="text-center"&gt;Archive&lt;/th&gt; 
  &lt;/tr&gt;
 &lt;/thead&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;strong&gt;user&lt;/strong&gt;@paimon.apache.org&lt;br /&gt; &lt;small&gt;User support and questions mailing list&lt;/small&gt; &lt;/td&gt; 
   &lt;td class="text-center"&gt;&lt;i class="fa fa-pencil-square-o"&gt;&lt;/i&gt; &lt;a href="mailto:user-subscribe@paimon.apache.org"&gt;Subscribe&lt;/a&gt;&lt;/td&gt; 
   &lt;td class="text-center"&gt;&lt;i class="fa fa-pencil-square-o"&gt;&lt;/i&gt; &lt;a href="mailto:user-digest-subscribe@paimon.apache.org"&gt;Subscribe&lt;/a&gt;&lt;/td&gt; 
   &lt;td class="text-center"&gt;&lt;i class="fa fa-pencil-square-o"&gt;&lt;/i&gt; &lt;a href="mailto:user-unsubscribe@paimon.apache.org"&gt;Unsubscribe&lt;/a&gt;&lt;/td&gt; 
   &lt;td class="text-center"&gt;&lt;i class="fa fa-pencil-square-o"&gt;&lt;/i&gt; &lt;a href="mailto:user@paimon.apache.org"&gt;Post&lt;/a&gt;&lt;/td&gt; 
   &lt;td class="text-center"&gt; &lt;a href="https://lists.apache.org/list.html?user@paimon.apache.org"&gt;Archives&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;strong&gt;dev&lt;/strong&gt;@paimon.apache.org&lt;br /&gt; &lt;small&gt;Development related discussions&lt;/small&gt; &lt;/td&gt; 
   &lt;td class="text-center"&gt;&lt;i class="fa fa-pencil-square-o"&gt;&lt;/i&gt; &lt;a href="mailto:dev-subscribe@paimon.apache.org"&gt;Subscribe&lt;/a&gt;&lt;/td&gt; 
   &lt;td class="text-center"&gt;&lt;i class="fa fa-pencil-square-o"&gt;&lt;/i&gt; &lt;a href="mailto:dev-digest-subscribe@paimon.apache.org"&gt;Subscribe&lt;/a&gt;&lt;/td&gt; 
   &lt;td class="text-center"&gt;&lt;i class="fa fa-pencil-square-o"&gt;&lt;/i&gt; &lt;a href="mailto:dev-unsubscribe@paimon.apache.org"&gt;Unsubscribe&lt;/a&gt;&lt;/td&gt; 
   &lt;td class="text-center"&gt;&lt;i class="fa fa-pencil-square-o"&gt;&lt;/i&gt; &lt;a href="mailto:dev@paimon.apache.org"&gt;Post&lt;/a&gt;&lt;/td&gt; 
   &lt;td class="text-center"&gt; &lt;a href="https://lists.apache.org/list.html?dev@paimon.apache.org"&gt;Archives&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;&lt;b style="color:red"&gt;Please make sure you are subscribed to the mailing list you are posting to!&lt;/b&gt; If you are not subscribed to the mailing list, your message will either be rejected (dev@ list) or you won't receive the response (user@ list).&lt;/p&gt; 
&lt;h2&gt;Slack&lt;/h2&gt; 
&lt;p&gt;You can join the Paimon community on Slack. Paimon channel is in ASF Slack workspace.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Anyone with an @apache.org email address can become a full member of the ASF Slack workspace. Search &lt;a href="https://the-asf.slack.com/archives/C053Q2NCW8G"&gt;Paimon channel&lt;/a&gt; and join it.&lt;/li&gt; 
 &lt;li&gt;If you don't have an @apache.org email address, you can email to &lt;code&gt;user@paimon.apache.org&lt;/code&gt; to apply for an &lt;a href="https://infra.apache.org/slack.html"&gt;ASF Slack invitation&lt;/a&gt;. Then join &lt;a href="https://the-asf.slack.com/archives/C053Q2NCW8G"&gt;Paimon channel&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;JDK 8/11 is required for building the project. Maven version &amp;gt;=3.6.3.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the &lt;code&gt;mvn clean install -DskipTests&lt;/code&gt; command to build the project.&lt;/li&gt; 
 &lt;li&gt;Run the &lt;code&gt;mvn spotless:apply&lt;/code&gt; to format the project (both Java and Scala).&lt;/li&gt; 
 &lt;li&gt;IDE: Mark &lt;code&gt;paimon-common/target/generated-sources/antlr4&lt;/code&gt; as Sources Root.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://paimon.apache.org/docs/master/project/contributing/"&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The code in this repository is licensed under the &lt;a href="https://raw.githubusercontent.com/apache/paimon/master/LICENSE"&gt;Apache Software License 2&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ashishps1/awesome-low-level-design</title>
      <link>https://github.com/ashishps1/awesome-low-level-design</link>
      <description>&lt;p&gt;Learn Low Level Design (LLD) and prepare for interviews using free resources.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/images/lld-repo-logo.png" width="350" height="200" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://blog.algomaster.io/"&gt;Join Free Newsletter&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;This repository contains resources to learn Low Level Design (LLD) / Object Oriented Design (OOD) and prepare for interviews.&lt;/p&gt; 
&lt;p&gt;👉 For a better and more comprehensive experience, checkout the &lt;a href="https://algomaster.io/learn/lld"&gt;LLD page at AlgoMaster.io&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🧱 OOP Fundamentals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/classes-and-objects"&gt;Classes and Objects&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/enums"&gt;Enums&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/interfaces"&gt;Interfaces&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/encapsulation"&gt;Encapsulation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/abstraction"&gt;Abstraction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/inheritance"&gt;Inheritance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/polymorphism"&gt;Polymorphism&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🔗 Class Relationships&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/association"&gt;Association&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/aggregation"&gt;Aggregation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/composition"&gt;Composition&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/dependency"&gt;Dependency&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🧭 Design Principles&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/dry"&gt;DRY Principle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/yagni"&gt;YAGNI Principle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/kiss"&gt;KISS Principle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898"&gt;SOLID Principles with Pictures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.algomaster.io/p/solid-principles-explained-with-code"&gt;SOLID Principles with Code&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🧩 Design Patterns&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;strong&gt;Creational Patterns&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;Structural Patterns&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;Behavioral Patterns&lt;/strong&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/singleton"&gt;Singleton&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/adapter"&gt;Adapter&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/iterator"&gt;Iterator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/factory-method"&gt;Factory Method&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/bridge"&gt;Bridge&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/observer"&gt;Observer&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/abstract-factory"&gt;Abstract Factory&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/composite"&gt;Composite&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/strategy"&gt;Strategy&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/builder"&gt;Builder&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/decorator"&gt;Decorator&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/command"&gt;Command&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/prototype"&gt;Prototype&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/facade"&gt;Facade&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/state"&gt;State&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/flyweight"&gt;Flyweight&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/template-method"&gt;Template Method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/proxy"&gt;Proxy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/visitor"&gt;Visitor&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/mediator"&gt;Mediator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/memento"&gt;Memento&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://algomaster.io/learn/lld/chain-of-responsibility"&gt;Chain of Responsibility&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;🗂️ UML&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://blog.algomaster.io/p/uml-class-diagram-explained-with-examples"&gt;Class Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.algomaster.io/p/119449cd-b003-46da-9e4d-0eb356d216d8"&gt;Use Case Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.algomaster.io/p/4dd99bdc-5c35-4a80-bc53-1777cb57aa05"&gt;Sequence Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-activity-diagram/"&gt;Activity Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-state-machine-diagram/"&gt;State Machine Diagram&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;✅ &lt;a href="https://blog.algomaster.io/p/how-to-answer-a-lld-interview-problem"&gt;How to Answer a LLD Interview Problem&lt;/a&gt;&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/images/interview-template.png" width="350" height="250" /&gt; 
&lt;h2&gt;💻 Low Level Design Interview Problems&lt;/h2&gt; 
&lt;h3&gt;Easy Problems&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/parking-lot.md"&gt;Design Parking Lot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/stack-overflow.md"&gt;Design Stack Overflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/vending-machine.md"&gt;Design a Vending Machine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/logging-framework.md"&gt;Design Logging Framework&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/traffic-signal.md"&gt;Design Traffic Signal Control System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/coffee-vending-machine.md"&gt;Design Coffee Vending Machine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/task-management-system.md"&gt;Design a Task Management System&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Medium Problems&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/atm.md"&gt;Design ATM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/linkedin.md"&gt;Design LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/lru-cache.md"&gt;Design LRU Cache&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/tic-tac-toe.md"&gt;Design Tic Tac Toe Game&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/pub-sub-system.md"&gt;Design Pub Sub System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/elevator-system.md"&gt;Design an Elevator System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/car-rental-system.md"&gt;Design Car Rental System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/online-auction-system.md"&gt;Design an Online Auction System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/hotel-management-system.md"&gt;Design Hotel Management System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/digital-wallet-service.md"&gt;Design a Digital Wallet Service&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/airline-management-system.md"&gt;Design Airline Management System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/library-management-system.md"&gt;Design a Library Management System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/social-networking-service.md"&gt;Design a Social Network like Facebook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/restaurant-management-system.md"&gt;Design Restaurant Management System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/concert-ticket-booking-system.md"&gt;Design a Concert Ticket Booking System&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Hard Problems&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/cricinfo.md"&gt;Design CricInfo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/splitwise.md"&gt;Design Splitwise&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/chess-game.md"&gt;Design Chess Game&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/snake-and-ladder.md"&gt;Design a Snake and Ladder game&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/ride-sharing-service.md"&gt;Design Ride-Sharing Service like Uber&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/course-registration-system.md"&gt;Design Course Registration System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/movie-ticket-booking-system.md"&gt;Design Movie Ticket Booking System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/online-shopping-service.md"&gt;Design Online Shopping System like Amazon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/online-stock-brokerage-system.md"&gt;Design Online Stock Brokerage System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/music-streaming-service.md"&gt;Design Music Streaming Service like Spotify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ashishps1/awesome-low-level-design/main/problems/food-delivery-service.md"&gt;Design Online Food Delivery Service like Swiggy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📇 Courses&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://algomaster.io/learn/lld/what-is-lld"&gt;Master LLD Interviews - AlgoMaster.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📚 Books&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.amazon.in/dp/9385889753"&gt;Head First Design Patterns&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.amazon.in/dp/B001GSTOAM"&gt;Clean Code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.amazon.in/dp/0134757599"&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📩 Newsletter&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://blog.algomaster.io/"&gt;AlgoMaster Newsletter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Additional resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.coursera.org/learn/object-oriented-design"&gt;Coursera - Object-Oriented Design&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.coursera.org/learn/design-patterns"&gt;Coursera - Design Patterns&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DovAmir/awesome-design-patterns"&gt;Github - Awesome Design Patterns&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! If you'd like to add a new problem, improve existing content, or fix errors:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create a feature branch: &lt;code&gt;git checkout -b feature/your-feature-name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Commit your changes: &lt;code&gt;git commit -m 'Add some feature'&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Push to the branch: &lt;code&gt;git push origin feature/your-feature-name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Submit a pull request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Please make sure to update Readme files and documentation as appropriate.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;i&gt;If you find this resource helpful, please give it a star and share it with others!&lt;/i&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mybatis/mybatis-3</title>
      <link>https://github.com/mybatis/mybatis-3</link>
      <description>&lt;p&gt;MyBatis SQL mapper framework for Java&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MyBatis SQL Mapper Framework for Java&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/mybatis/mybatis-3/actions?query=workflow%3A%22Java+CI%22"&gt;&lt;img src="https://github.com/mybatis/mybatis-3/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/mybatis/mybatis-3?branch=master"&gt;&lt;img src="https://coveralls.io/repos/mybatis/mybatis-3/badge.svg?branch=master&amp;amp;service=github" alt="Coverage Status" /&gt;&lt;/a&gt; &lt;a href="https://sonarcloud.io/summary/new_code?id=mybatis_mybatis-3"&gt;&lt;img src="https://sonarcloud.io/api/project_badges/measure?project=mybatis_mybatis-3&amp;amp;metric=alert_status" alt="Quality Gate Status" /&gt;&lt;/a&gt; &lt;a href="https://maven-badges.herokuapp.com/maven-central/org.mybatis/mybatis"&gt;&lt;img src="https://maven-badges.herokuapp.com/maven-central/org.mybatis/mybatis/badge.svg?sanitize=true" alt="Maven central" /&gt;&lt;/a&gt; &lt;a href="https://oss.sonatype.org/content/repositories/snapshots/org/mybatis/mybatis/"&gt;&lt;img src="https://img.shields.io/nexus/s/https/oss.sonatype.org/org.mybatis/mybatis.svg?sanitize=true" alt="Sonatype Nexus (Snapshots)" /&gt;&lt;/a&gt; &lt;a href="https://www.apache.org/licenses/LICENSE-2.0.html"&gt;&lt;img src="https://img.shields.io/:license-apache-brightgreen.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/tagged/mybatis"&gt;&lt;img src="https://img.shields.io/:stack%20overflow-mybatis-brightgreen.svg?sanitize=true" alt="Stack Overflow" /&gt;&lt;/a&gt; &lt;a href="https://www.openhub.net/p/mybatis"&gt;&lt;img src="https://www.openhub.net/p/mybatis/widgets/project_thin_badge.gif" alt="Project Stats" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://mybatis.org/images/mybatis-logo.png" alt="mybatis" /&gt;&lt;/p&gt; 
&lt;p&gt;The MyBatis SQL mapper framework makes it easier to use a relational database with object-oriented applications. MyBatis couples objects with stored procedures or SQL statements using an XML descriptor or annotations. Simplicity is the biggest advantage of the MyBatis data mapper over object relational mapping tools.&lt;/p&gt; 
&lt;h2&gt;Essentials&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://mybatis.org/mybatis-3"&gt;See the docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mybatis/mybatis-3/releases"&gt;Download Latest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://oss.sonatype.org/content/repositories/snapshots/org/mybatis/mybatis/"&gt;Download Snapshot&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/mybatis/mybatis-3/master/CONTRIBUTING.md"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;Mybatis-3 code runs more expressive testing depending on jdk usage and platform.&lt;/p&gt; 
&lt;p&gt;By default, we set &lt;code&gt;&amp;lt;excludedGroups&amp;gt;TestcontainersTests,RequireIllegalAccess&amp;lt;/excludedGroups&amp;gt;&lt;/code&gt; which will exclude a subset of tests with @Tag('TestcontainersTests') and @Tag('RequireIllegalAccess').&lt;/p&gt; 
&lt;p&gt;When we run on ci platform, we further make adjustments as needed. See &lt;a href="https://raw.githubusercontent.com/mybatis/mybatis-3/master/.github/workflows/ci.yaml"&gt;here&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;As of 12/28/2024, using combined system + jdk will result in given number of tests ran. This will change as tests are added or removed over time.&lt;/p&gt; 
&lt;p&gt;without adjusting settings (ie use as is, platform does not matter)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;any OS + jdk 17 = 1899 tests&lt;/li&gt; 
 &lt;li&gt;any OS + jdk 21 = 1899 tests&lt;/li&gt; 
 &lt;li&gt;any OS + jdk 23 = 1899 tests&lt;/li&gt; 
 &lt;li&gt;any OS + jdk 24 = 1899 tests&lt;/li&gt; 
 &lt;li&gt;any OS + jdk 25 = 1899 tests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;our adjustments for GH actions where platform does matter&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;windows + jdk 17 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;windows + jdk 21 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;windows + jdk 23 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;windows + jdk 24 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;windows + jdk 25 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;linux + jdk 17 = 1934 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;linux + jdk 21 = 1934 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;linux + jdk 23 = 1934 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;linux + jdk 24 = 1934 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;linux + jdk 25 = 1934 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;mac + jdk 17 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;mac + jdk 21 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;mac + jdk 23 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;mac + jdk 24 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;mac + jdk 25 = 1899 tests&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>OpenAPITools/openapi-generator</title>
      <link>https://github.com/OpenAPITools/openapi-generator</link>
      <description>&lt;p&gt;OpenAPI Generator allows generation of API client libraries (SDK generation), server stubs, documentation and configuration automatically given an OpenAPI Spec (v2, v3)&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;OpenAPI Generator&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.openapitools%22%20AND%20a%3A%22openapi-generator%22"&gt;&lt;img src="https://img.shields.io/maven-metadata/v/https/repo1.maven.org/maven2/org/openapitools/openapi-generator/maven-metadata.xml.svg?sanitize=true" alt="Stable releases in Maven Central" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-orange" alt="Apache 2.0 License" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/openapi_generator"&gt;&lt;img src="https://img.shields.io/opencollective/backers/openapi_generator?color=orange&amp;amp;label=OpenCollective%20Backers" alt="Open Collective backers" /&gt;&lt;/a&gt; &lt;a href="https://join.slack.com/t/openapi-generator/shared_invite/zt-36ucx4ybl-jYrN6euoYn6zxXNZdldoZA"&gt;&lt;img src="https://img.shields.io/badge/Slack-Join%20the%20chat%20room-orange" alt="Join the Slack chat room" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/oas_generator"&gt;&lt;img src="https://img.shields.io/twitter/follow/oas_generator.svg?style=social&amp;amp;label=Follow" alt="Follow OpenAPI Generator Twitter account to get the latest update" /&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/OpenAPITools/openapi-generator"&gt;&lt;img src="https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod" alt="Contribute with Gitpod" /&gt;&lt;/a&gt; &lt;a href="https://conan.io/center/recipes/openapi-generator"&gt;&lt;img src="https://shields.io/conan/v/openapi-generator" alt="Conan Center" /&gt;&lt;/a&gt; &lt;a href="https://ge.openapi-generator.tech/scans"&gt;&lt;img src="https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&amp;amp;labelColor=02303A" alt="Revved up by Develocity" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/OpenAPITools/openapi-generator/tree/master"&gt;Master&lt;/a&gt; (&lt;code&gt;7.17.0&lt;/code&gt;): &lt;a href="https://circleci.com/gh/OpenAPITools/openapi-generator"&gt;&lt;img src="https://circleci.com/gh/OpenAPITools/openapi-generator.svg?style=shield" alt="Integration Test2" /&gt;&lt;/a&gt; &lt;a href="https://app.bitrise.io/app/4a2b10a819d12b67"&gt;&lt;img src="https://img.shields.io/bitrise/4a2b10a819d12b67/master?label=bitrise%3A%20Swift+4,5&amp;amp;token=859FMDR8QHwabCzwvZK6vQ" alt="Bitrise" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;span&gt;⭐&lt;/span&gt;&lt;span&gt;⭐&lt;/span&gt;&lt;span&gt;⭐&lt;/span&gt; If you would like to contribute, please refer to &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/CONTRIBUTING.md"&gt;guidelines&lt;/a&gt; and a list of &lt;a href="https://github.com/openapitools/openapi-generator/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22"&gt;open tasks&lt;/a&gt;. &lt;span&gt;⭐&lt;/span&gt;&lt;span&gt;⭐&lt;/span&gt;&lt;span&gt;⭐&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;‼&lt;/span&gt; To migrate from Swagger Codegen to OpenAPI Generator, please refer to the &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/migration-from-swagger-codegen.md"&gt;migration guide&lt;/a&gt; &lt;span&gt;‼&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;📔&lt;/span&gt; For more information, please refer to the &lt;a href="https://github.com/openapitools/openapi-generator/wiki"&gt;Wiki page&lt;/a&gt; and &lt;a href="https://github.com/openapitools/openapi-generator/wiki/FAQ"&gt;FAQ&lt;/a&gt; &lt;span&gt;📔&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;📔&lt;/span&gt; The eBook &lt;a href="https://gum.co/openapi_generator_ebook"&gt;A Beginner's Guide to Code Generation for REST APIs&lt;/a&gt; is a good starting point for beginners &lt;span&gt;📔&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; If the OpenAPI spec, templates or any input (e.g. options, environment variables) is obtained from an untrusted source or environment, please make sure you've reviewed these inputs before using OpenAPI Generator to generate the API client, server stub or documentation to avoid potential security issues (e.g. &lt;a href="https://en.wikipedia.org/wiki/Code_injection"&gt;code injection&lt;/a&gt;). For security vulnerabilities, please contact &lt;a href="mailto:team@openapitools.org"&gt;team@openapitools.org&lt;/a&gt;. &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;‼&lt;/span&gt; Both "OpenAPI Tools" (&lt;a href="https://OpenAPITools.org"&gt;https://OpenAPITools.org&lt;/a&gt; - the parent organization of OpenAPI Generator) and "OpenAPI Generator" are not affiliated with OpenAPI Initiative (OAI) &lt;span&gt;‼&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;If you find OpenAPI Generator useful for work, please consider asking your company to support this Open Source project by &lt;a href="https://opencollective.com/openapi_generator"&gt;becoming a sponsor&lt;/a&gt;. You can also individually sponsor the project by &lt;a href="https://opencollective.com/openapi_generator"&gt;becoming a backer&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Thank you to our bronze sponsors!&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://www.namsor.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/namsor.png" alt="NamSor" /&gt;&lt;/a&gt; &lt;a href="https://www.lightbow.net/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/lightbow.png" alt="LightBow" /&gt;&lt;/a&gt; &lt;a href="https://docspring.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/docspring.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://datadoghq.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/datadog.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://cpl.thalesgroup.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/thales.jpg" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.apideck.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/apideck.jpg" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.pexa.com.au/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/pexa.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.numary.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/numary.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.onesignal.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/onesignal.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.virtualansoftware.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/virtualansoftware.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.merge.dev/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/mergedev.jpeg" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.burkert.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/burkert.jpg" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.finbourne.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/finbourne.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://bump.sh/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/bumpsh.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.bileto.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/bileto.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.bairesdev.com/sponsoring-open-source-projects/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/bairesdev.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.dmtech.de/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/dmtech.jpeg" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://adyen.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/adyen.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://fornex.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/fornex.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://runalloy.com/signup?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1524_openapigenerator"&gt;&lt;img src="https://openapi-generator.tech/img/companies/alloyautomation.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://ssstwitter.com/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/ssstwitter.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.svix.com/?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/svix.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://litslink.com/services/artificial-intelligence?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/litslink.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://designli.co?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/designli.jpg" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://opensource.muenchen.de?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/itm.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://konghq.com/products/kong-konnect?utm_medium=referral&amp;amp;utm_source=github&amp;amp;utm_campaign=platform&amp;amp;utm_content=openapi-generator"&gt;&lt;img src="https://openapi-generator.tech/img/companies/kong.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://route4me.com/?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/route4me.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.dotcom-monitor.com/sponsoring-open-source-projects/?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/dm.png" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://www.clickittech.com/?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/clickit.jpg" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://unified.to/?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/unified_to.jpg" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://savetwt.com/?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/savetwt.jpg" width="128" height="128" /&gt;&lt;/a&gt; &lt;a href="https://serpapi.com/?utm_source=openapi-generator&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=oss-sponsorship"&gt;&lt;img src="https://openapi-generator.tech/img/companies/serpapi.png" width="128" height="128" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Thank you GoDaddy for sponsoring the domain names, Linode for sponsoring the VPS, Checkly for sponsoring the API monitoring and Gradle for sponsoring Develocity&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://www.godaddy.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://openapi-generator.tech/img/companies/godaddy.png" width="150" /&gt;&lt;/a&gt; &lt;a href="https://www.linode.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://www.linode.com/media/images/logos/standard/light/linode-logo_standard_light_small.png" alt="Linode" /&gt;&lt;/a&gt; &lt;a href="https://checklyhq.com/?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRAhEYadUyZYzGUotZiSdXkVMqqLGuohyixLl4eUpUV6pAbUULL" width="150" /&gt;&lt;/a&gt; &lt;a href="https://gradle.org?utm_source=openapi_generator&amp;amp;utm_medium=github_webpage&amp;amp;utm_campaign=sponsor"&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/Gradle_logo.png/320px-Gradle_logo.png" width="150" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;OpenAPI Generator allows generation of API client libraries (SDK generation), server stubs, documentation and configuration automatically given an &lt;a href="https://github.com/OAI/OpenAPI-Specification"&gt;OpenAPI Spec&lt;/a&gt; (both 2.0 and 3.0 are supported). Currently, the following languages/frameworks are supported:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;Languages/Frameworks&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;API clients&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;ActionScript&lt;/strong&gt;, &lt;strong&gt;Ada&lt;/strong&gt;, &lt;strong&gt;Apex&lt;/strong&gt;, &lt;strong&gt;Bash&lt;/strong&gt;, &lt;strong&gt;C&lt;/strong&gt;, &lt;strong&gt;C#&lt;/strong&gt; (.net 2.0, 3.5 or later, .NET Standard 1.3 - 2.1, .NET Core 3.1, .NET 5.0. Libraries: RestSharp, GenericHost, HttpClient), &lt;strong&gt;C++&lt;/strong&gt; (Arduino, cpp-restsdk, Qt5, Tizen, Unreal Engine 4), &lt;strong&gt;Clojure&lt;/strong&gt;, &lt;strong&gt;Crystal&lt;/strong&gt;, &lt;strong&gt;Dart&lt;/strong&gt;, &lt;strong&gt;Elixir&lt;/strong&gt;, &lt;strong&gt;Elm&lt;/strong&gt;, &lt;strong&gt;Eiffel&lt;/strong&gt;, &lt;strong&gt;Erlang&lt;/strong&gt;, &lt;strong&gt;Go&lt;/strong&gt;, &lt;strong&gt;Groovy&lt;/strong&gt;, &lt;strong&gt;Haskell&lt;/strong&gt; (http-client, Servant), &lt;strong&gt;Java&lt;/strong&gt; (Apache HttpClient 4.x, Apache HttpClient 5.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign, RestTemplate, RESTEasy, Vertx, Google API Client Library for Java, Rest-assured, Spring 5 Web Client, Spring 6 RestClient, MicroProfile Rest Client, Helidon), &lt;strong&gt;Jetbrains HTTP Client&lt;/strong&gt;, &lt;strong&gt;Julia&lt;/strong&gt;, &lt;strong&gt;k6&lt;/strong&gt;, &lt;strong&gt;Kotlin&lt;/strong&gt;, &lt;strong&gt;Lua&lt;/strong&gt;, &lt;strong&gt;N4JS&lt;/strong&gt;, &lt;strong&gt;Nim&lt;/strong&gt;, &lt;strong&gt;Node.js/JavaScript&lt;/strong&gt; (ES5, ES6, AngularJS with Google Closure Compiler annotations, Flow types, Apollo GraphQL DataStore), &lt;strong&gt;Objective-C&lt;/strong&gt;, &lt;strong&gt;OCaml&lt;/strong&gt;, &lt;strong&gt;Perl&lt;/strong&gt;, &lt;strong&gt;PHP&lt;/strong&gt;, &lt;strong&gt;PowerShell&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;R&lt;/strong&gt;, &lt;strong&gt;Ruby&lt;/strong&gt;, &lt;strong&gt;Rust&lt;/strong&gt; (hyper, reqwest, rust-server), &lt;strong&gt;Scala&lt;/strong&gt; (akka, http4s, scalaz, sttp, swagger-async-httpclient, pekko), &lt;strong&gt;Swift&lt;/strong&gt; (2.x, 3.x, 4.x, 5.x, 6.x), &lt;strong&gt;Typescript&lt;/strong&gt; (AngularJS, Angular (9.x - 19.x), Aurelia, Axios, Fetch, Inversify, jQuery, Nestjs, Node, redux-query, Rxjs), &lt;strong&gt;XoJo&lt;/strong&gt;, &lt;strong&gt;Zapier&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Server stubs&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Ada&lt;/strong&gt;, &lt;strong&gt;C#&lt;/strong&gt; (ASP.NET Core, Azure Functions), &lt;strong&gt;C++&lt;/strong&gt; (Oat++, Pistache, Restbed, Qt5 QHTTPEngine), &lt;strong&gt;Erlang&lt;/strong&gt;, &lt;strong&gt;F#&lt;/strong&gt; (Giraffe), &lt;strong&gt;Go&lt;/strong&gt; (net/http, Gin, Echo), &lt;strong&gt;Haskell&lt;/strong&gt; (Servant, Yesod), &lt;strong&gt;Java&lt;/strong&gt; (MSF4J, Spring, Undertow, JAX-RS: CDI, CXF, Inflector, Jersey, RestEasy, Play Framework, &lt;a href="https://github.com/ProKarma-Inc/pkmst-getting-started-examples"&gt;PKMST&lt;/a&gt;, &lt;a href="https://vertx.io/"&gt;Vert.x&lt;/a&gt;, &lt;a href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt;, &lt;a href="https://helidon.io/"&gt;Helidon&lt;/a&gt;), &lt;strong&gt;Julia&lt;/strong&gt;, &lt;strong&gt;Kotlin&lt;/strong&gt; (Spring Boot, &lt;a href="https://github.com/ktorio/ktor"&gt;Ktor&lt;/a&gt;, &lt;a href="https://vertx.io/"&gt;Vert.x&lt;/a&gt;), &lt;strong&gt;PHP&lt;/strong&gt; (&lt;a href="https://docs.flightphp.com/"&gt;Flight&lt;/a&gt;, Laravel, Lumen, &lt;a href="https://github.com/mezzio/mezzio"&gt;Mezzio (fka Zend Expressive)&lt;/a&gt;, Slim, Silex, &lt;a href="https://symfony.com/"&gt;Symfony&lt;/a&gt;), &lt;strong&gt;Python&lt;/strong&gt; (FastAPI, Flask), &lt;strong&gt;NodeJS&lt;/strong&gt;, &lt;strong&gt;Ruby&lt;/strong&gt; (Sinatra, Rails5), &lt;strong&gt;Rust&lt;/strong&gt; (&lt;a href="https://openapi-generator.tech/docs/generators/rust-server/"&gt;rust-server&lt;/a&gt;), &lt;strong&gt;Scala&lt;/strong&gt; (Akka, &lt;a href="https://github.com/finagle/finch"&gt;Finch&lt;/a&gt;, &lt;a href="https://github.com/lagom/lagom"&gt;Lagom&lt;/a&gt;, &lt;a href="https://www.playframework.com/"&gt;Play&lt;/a&gt;, &lt;a href="https://github.com/com-lihaoyi/cask"&gt;Cask&lt;/a&gt;, Scalatra)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;API documentation generators&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;Confluence Wiki&lt;/strong&gt;, &lt;strong&gt;Asciidoc&lt;/strong&gt;, &lt;strong&gt;Markdown&lt;/strong&gt;, &lt;strong&gt;PlantUML&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Configuration files&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://httpd.apache.org/"&gt;&lt;strong&gt;Apache2&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;, &lt;strong&gt;JMeter&lt;/strong&gt;, &lt;strong&gt;Ktorm&lt;/strong&gt;, &lt;strong&gt;MySQL Schema&lt;/strong&gt;, &lt;strong&gt;Postman Collection&lt;/strong&gt;, &lt;strong&gt;Protocol Buffer&lt;/strong&gt;, &lt;strong&gt;WSDL&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#sponsors"&gt;Sponsors&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#thank-you-to-our-bronze-sponsors"&gt;Thank you to our bronze sponsors!&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#thank-you-godaddy-for-sponsoring-the-domain-names-linode-for-sponsoring-the-vps-checkly-for-sponsoring-the-api-monitoring-and-gradle-for-sponsoring-develocity"&gt;Thank you GoDaddy for sponsoring the domain names, Linode for sponsoring the VPS, Checkly for sponsoring the API monitoring and Gradle for sponsoring Develocity&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;Table of contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#1---installation"&gt;1 - Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#11---compatibility"&gt;1.1 - Compatibility&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#12---artifacts-on-maven-central"&gt;1.2 - Artifacts on Maven Central&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#13---download-jar"&gt;1.3 - Download JAR&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#launcher-script"&gt;Launcher Script&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#14---build-projects"&gt;1.4 - Build Projects&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#nix-users"&gt;Nix users&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#15---homebrew"&gt;1.5 - Homebrew&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#16---docker"&gt;1.6 - Docker&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#public-pre-built-docker-images"&gt;Public Pre-built Docker images&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#openapi-generator-cli-docker-image"&gt;OpenAPI Generator CLI Docker Image&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#openapi-generator-online-docker-image"&gt;OpenAPI Generator Online Docker Image&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#development-in-docker"&gt;Development in docker&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#run-docker-in-vagrant"&gt;Run Docker in Vagrant&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#17---npm"&gt;1.7 - NPM&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#18---pip"&gt;1.8 - pip&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#2---getting-started"&gt;2 - Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#3---usage"&gt;3 - Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#to-generate-a-sample-client-library"&gt;To generate a sample client library&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#31---customization"&gt;3.1 - Customization&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#32---workflow-integration-maven-gradle-github-cicd"&gt;3.2 - Workflow Integration (Maven, Gradle, Github, CI/CD)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#33---online-openapi-generator"&gt;3.3 - Online OpenAPI generator&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#34---license-information-on-generated-code"&gt;3.4 - License information on Generated Code&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#35---ide-integration"&gt;3.5 - IDE Integration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#4---companiesprojects-using-openapi-generator"&gt;4 - Companies/Projects using OpenAPI Generator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#5---presentationsvideostutorialsbooks"&gt;5 - Presentations/Videos/Tutorials/Books&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#6---about-us"&gt;6 - About Us&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#61---openapi-generator-core-team"&gt;6.1 - OpenAPI Generator Core Team&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#core-team-members"&gt;Core Team Members&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#template-creator"&gt;Template Creator&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#how-to-join-the-core-team"&gt;How to join the core team&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#62---openapi-generator-technical-committee"&gt;6.2 - OpenAPI Generator Technical Committee&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#members-of-technical-committee"&gt;Members of Technical Committee&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#63---history-of-openapi-generator"&gt;6.3 - History of OpenAPI Generator&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#founding-members-alphabetical-order"&gt;Founding Members (alphabetical order):&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#7---license"&gt;7 - License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;1 - Installation&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;1.1 - Compatibility&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The OpenAPI Specification has undergone 3 revisions since initial creation in 2010. The openapi-generator project has the following compatibilities with the OpenAPI Specification:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;OpenAPI Generator Version&lt;/th&gt; 
   &lt;th&gt;Release Date&lt;/th&gt; 
   &lt;th&gt;Notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;7.17.0 (upcoming minor release) &lt;a href="https://github.com/OpenAPITools/openapi-generator/wiki/FAQ#how-to-test-with-the-latest-master-of-openapi-generator"&gt;SNAPSHOT&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;24.10.2025&lt;/td&gt; 
   &lt;td&gt;Minor release with breaking changes (with fallback)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/OpenAPITools/openapi-generator/releases/tag/v7.16.0"&gt;7.16.0&lt;/a&gt; (latest stable release)&lt;/td&gt; 
   &lt;td&gt;28.09.2025&lt;/td&gt; 
   &lt;td&gt;Minor release with breaking changes (with fallback)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/OpenAPITools/openapi-generator/releases/tag/v6.6.0"&gt;6.6.0&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;11.05.2023&lt;/td&gt; 
   &lt;td&gt;Minor release with breaking changes (with fallback)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/OpenAPITools/openapi-generator/releases/tag/v5.4.0"&gt;5.4.0&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;31.01.2022&lt;/td&gt; 
   &lt;td&gt;Minor release with breaking changes (with fallback)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/OpenAPITools/openapi-generator/releases/tag/v4.3.1"&gt;4.3.1&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;06.05.2020&lt;/td&gt; 
   &lt;td&gt;Patch release (enhancements, bug fixes, etc)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;OpenAPI Spec compatibility: 1.0, 1.1, 1.2, 2.0, 3.0, 3.1 (beta support)&lt;/p&gt; 
&lt;p&gt;(We do not publish daily/nightly build. Please use SNAPSHOT instead)&lt;/p&gt; 
&lt;p&gt;For old releases, please refer to the &lt;a href="https://github.com/OpenAPITools/openapi-generator/releases"&gt;&lt;strong&gt;Release&lt;/strong&gt;&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;For decommissioned generators/libraries/frameworks, please refer to &lt;a href="https://github.com/OpenAPITools/openapi-generator/issues?q=label%3ADecommission+is%3Amerged+"&gt;the "Decommission" label&lt;/a&gt; in the pull request page.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;1.2 - Artifacts on Maven Central&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;You can find our released artifacts on maven central:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Core:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.openapitools&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;openapi-generator&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${openapi-generator-version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the different versions of the &lt;a href="https://search.maven.org/artifact/org.openapitools/openapi-generator"&gt;openapi-generator&lt;/a&gt; artifact available on maven central.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Cli:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.openapitools&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;openapi-generator-cli&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${openapi-generator-version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the different versions of the &lt;a href="https://search.maven.org/artifact/org.openapitools/openapi-generator-cli"&gt;openapi-generator-cli&lt;/a&gt; artifact available on maven central.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Maven plugin:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.openapitools&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;openapi-generator-maven-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${openapi-generator-version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;See the different versions of the &lt;a href="https://search.maven.org/artifact/org.openapitools/openapi-generator-maven-plugin"&gt;openapi-generator-maven-plugin&lt;/a&gt; artifact available on maven central.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenAPITools/openapi-generator/raw/master/modules/openapi-generator-maven-plugin/README.md"&gt;Readme&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Gradle plugin:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.openapitools&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;openapi-generator-gradle-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${openapi-generator-version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;See the different versions of the &lt;a href="https://search.maven.org/artifact/org.openapitools/openapi-generator-gradle-plugin"&gt;openapi-generator-gradle-plugin&lt;/a&gt; artifact available on maven central.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenAPITools/openapi-generator/raw/master/modules/openapi-generator-gradle-plugin/README.adoc"&gt;Readme&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;1.3 - Download JAR&lt;/a&gt;&lt;/h3&gt; 
&lt;!-- RELEASE_VERSION --&gt; 
&lt;p&gt;If you're looking for the latest stable version, you can grab it directly from Maven.org (Java 11 runtime at a minimum):&lt;/p&gt; 
&lt;p&gt;JAR location: &lt;code&gt;https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.16.0/openapi-generator-cli-7.16.0.jar&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For &lt;strong&gt;Mac/Linux&lt;/strong&gt; users:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.16.0/openapi-generator-cli-7.16.0.jar -O openapi-generator-cli.jar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;strong&gt;Windows&lt;/strong&gt; users, you will need to install &lt;a href="http://gnuwin32.sourceforge.net/packages/wget.htm"&gt;wget&lt;/a&gt; or you can use Invoke-WebRequest in PowerShell (3.0+), e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Invoke-WebRequest -OutFile openapi-generator-cli.jar https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.16.0/openapi-generator-cli-7.16.0.jar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After downloading the JAR, run &lt;code&gt;java -jar openapi-generator-cli.jar help&lt;/code&gt; to show the usage.&lt;/p&gt; 
&lt;p&gt;For Mac users, please make sure Java 11 is installed (Tips: run &lt;code&gt;java -version&lt;/code&gt; to check the version), and export &lt;code&gt;JAVA_HOME&lt;/code&gt; in order to use the supported Java version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;export JAVA_HOME=`/usr/libexec/java_home -v 1.11`
export PATH=${JAVA_HOME}/bin:$PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- /RELEASE_VERSION --&gt; 
&lt;h3&gt;Launcher Script&lt;/h3&gt; 
&lt;p&gt;One downside to manual jar downloads is that you don't keep up-to-date with the latest released version. We have a Bash launcher script at &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh"&gt;bin/utils/openapi-generator.cli.sh&lt;/a&gt; which resolves this issue.&lt;/p&gt; 
&lt;p&gt;To install the launcher script, copy the contents of the script to a location on your path and make the script executable.&lt;/p&gt; 
&lt;p&gt;An example of setting this up (NOTE: Always evaluate scripts curled from external systems before executing them).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir -p ~/bin/openapitools
curl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh &amp;gt; ~/bin/openapitools/openapi-generator-cli
chmod u+x ~/bin/openapitools/openapi-generator-cli
export PATH=$PATH:~/bin/openapitools/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, &lt;code&gt;openapi-generator-cli&lt;/code&gt; is "installed". On invocation, it will query the GitHub repository for the most recently released version. If this matches the last downloaded jar, it will execute as normal. If a newer version is found, the script will download the latest release and execute it.&lt;/p&gt; 
&lt;p&gt;If you need to invoke an older version of the generator, you can define the variable &lt;code&gt;OPENAPI_GENERATOR_VERSION&lt;/code&gt; either ad hoc or globally. You can export this variable if you'd like to persist a specific release version.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Execute latest released openapi-generator-cli
openapi-generator-cli version

# Execute version 4.1.0 for the current invocation, regardless of the latest released version
OPENAPI_GENERATOR_VERSION=4.1.0 openapi-generator-cli version

# Execute version 4.1.0-SNAPSHOT for the current invocation
OPENAPI_GENERATOR_VERSION=4.1.0-SNAPSHOT openapi-generator-cli version

# Execute version 4.0.2 for every invocation in the current shell session
export OPENAPI_GENERATOR_VERSION=4.0.2
openapi-generator-cli version # is 4.0.2
openapi-generator-cli version # is also 4.0.2

# To "install" a specific version, set the variable in .bashrc/.bash_profile
echo "export OPENAPI_GENERATOR_VERSION=4.0.2" &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
openapi-generator-cli version # is always 4.0.2, unless any of the above overrides are done ad hoc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;1.4 - Build Projects&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;To build from source, you need the following installed and available in your &lt;code&gt;$PATH:&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://adoptium.net/"&gt;Java 11&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://maven.apache.org/"&gt;Apache Maven 3.8.8 or greater&lt;/a&gt; (optional)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;After cloning the project, you can build it from source using &lt;a href="https://maven.apache.org/wrapper/"&gt;maven wrapper&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux: &lt;code&gt;./mvnw clean install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Windows: &lt;code&gt;mvnw.cmd clean install&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Nix users&lt;/h4&gt; 
&lt;p&gt;If you're a nix user, you can enter OpenAPI Generator shell, by typing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix develop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It will enter a shell with Java 11 installed.&lt;/p&gt; 
&lt;p&gt;Direnv supports automatically loading of the nix developer shell, so if you're using direnv too, type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;direnv allow
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and have &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;mvn&lt;/code&gt; set up with correct versions each time you enter project directory.&lt;/p&gt; 
&lt;p&gt;The default build contains minimal static analysis (via CheckStyle). To run your build with PMD and Spotbugs, use the &lt;code&gt;static-analysis&lt;/code&gt; profile:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux: &lt;code&gt;./mvnw -Pstatic-analysis clean install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Windows: &lt;code&gt;mvnw.cmd -Pstatic-analysis clean install&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;1.5 - Homebrew&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;To install, run &lt;code&gt;brew install openapi-generator&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Here is an example usage to generate a Ruby client:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;openapi-generator generate -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml -g ruby -o /tmp/test/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To reinstall with the latest master, run &lt;code&gt;brew uninstall openapi-generator &amp;amp;&amp;amp; brew install --HEAD openapi-generator&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To install OpenJDK (pre-requisites), please run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew tap AdoptOpenJDK/openjdk
brew install --cask adoptopenjdk11
export JAVA_HOME=`/usr/libexec/java_home -v 1.11`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or download installer via &lt;a href="https://adoptium.net/"&gt;https://adoptium.net/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;To install Maven (optional), please run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install maven
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;1.6 - Docker&lt;/a&gt;&lt;/h3&gt; 
&lt;h4&gt;Public Pre-built Docker images&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/r/openapitools/openapi-generator-cli/"&gt;https://hub.docker.com/r/openapitools/openapi-generator-cli/&lt;/a&gt; (official CLI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/r/openapitools/openapi-generator-online/"&gt;https://hub.docker.com/r/openapitools/openapi-generator-online/&lt;/a&gt; (official web service)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;OpenAPI Generator CLI Docker Image&lt;/h4&gt; 
&lt;p&gt;The OpenAPI Generator image acts as a standalone executable. It can be used as an alternative to installing via homebrew, or for developers who are unable to install Java or upgrade the installed version.&lt;/p&gt; 
&lt;p&gt;To generate code with this image, you'll need to mount a local location as a volume.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -v "${PWD}:/local" openapitools/openapi-generator-cli generate \
    -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml \
    -g go \
    -o /local/out/go
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The generated code will be located under &lt;code&gt;./out/go&lt;/code&gt; in the current directory.&lt;/p&gt; 
&lt;h4&gt;OpenAPI Generator Online Docker Image&lt;/h4&gt; 
&lt;p&gt;The openapi-generator-online image can act as a self-hosted web application and API for generating code. This container can be incorporated into a CI pipeline, and requires at least two HTTP requests and some docker orchestration to access generated code.&lt;/p&gt; 
&lt;p&gt;Example usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Start container at port 8888 and save the container id
&amp;gt; CID=$(docker run -d -p 8888:8080 openapitools/openapi-generator-online)

# allow for startup
&amp;gt; sleep 10

# Get the IP of the running container (optional)
GEN_IP=$(docker inspect --format '{{.NetworkSettings.IPAddress}}'  $CID)

# Execute an HTTP request to generate a Ruby client
&amp;gt; curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' \
-d '{"openAPIUrl": "https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml"}' \
'http://localhost:8888/api/gen/clients/ruby'

{"code":"c2d483.3.4672-40e9-91df-b9ffd18d22b8","link":"http://localhost:8888/api/gen/download/c2d483.3.4672-40e9-91df-b9ffd18d22b8"}

# Download the generated zip file
&amp;gt; wget http://localhost:8888/api/gen/download/c2d483.3.4672-40e9-91df-b9ffd18d22b8

# Unzip the file
&amp;gt; unzip c2d483.3.4672-40e9-91df-b9ffd18d22b8

# Shutdown the openapi generator image
&amp;gt; docker stop $CID &amp;amp;&amp;amp; docker rm $CID
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Development in docker&lt;/h4&gt; 
&lt;p&gt;You can use &lt;code&gt;run-in-docker.sh&lt;/code&gt; to do all development. This script maps your local repository to &lt;code&gt;/gen&lt;/code&gt; in the docker container. It also maps &lt;code&gt;~/.m2/repository&lt;/code&gt; to the appropriate container location.&lt;/p&gt; 
&lt;p&gt;To execute &lt;code&gt;mvn package&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/openapitools/openapi-generator
cd openapi-generator
./run-in-docker.sh mvn package
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build artifacts are now accessible in your working directory.&lt;/p&gt; 
&lt;p&gt;Once built, &lt;code&gt;run-in-docker.sh&lt;/code&gt; will act as an executable for openapi-generator-cli. To generate code, you'll need to output to a directory under &lt;code&gt;/gen&lt;/code&gt; (e.g. &lt;code&gt;/gen/out&lt;/code&gt;). For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./run-in-docker.sh help # Executes 'help' command for openapi-generator-cli
./run-in-docker.sh list # Executes 'list' command for openapi-generator-cli
./run-in-docker.sh generate -i modules/openapi-generator/src/test/resources/3_0/petstore.yaml \
    -g go -o /gen/out/go-petstore -p packageName=petstore # generates go client, outputs locally to ./out/go-petstore
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Troubleshooting&lt;/h5&gt; 
&lt;p&gt;If an error like this occurs, just execute the &lt;strong&gt;./mvnw clean install -U&lt;/strong&gt; command:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project openapi-generator: A type incompatibility occurred while executing org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test: java.lang.ExceptionInInitializerError cannot be cast to java.io.IOException&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./run-in-docker.sh ./mvnw clean install -U
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Failed to execute goal org.fortasoft:gradle-maven-plugin:1.0.8:invoke (default) on project openapi-generator-gradle-plugin-mvn-wrapper: org.gradle.tooling.BuildException: Could not execute build using Gradle distribution '&lt;a href="https://services.gradle.org/distributions/gradle-4.7-bin.zip"&gt;https://services.gradle.org/distributions/gradle-4.7-bin.zip&lt;/a&gt;'&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Right now: no solution for this one :|&lt;/p&gt; 
&lt;h4&gt;Run Docker in Vagrant&lt;/h4&gt; 
&lt;p&gt;Prerequisite: install &lt;a href="https://www.vagrantup.com/downloads.html"&gt;Vagrant&lt;/a&gt; and &lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/openapitools/openapi-generator.git
cd openapi-generator
vagrant up
vagrant ssh
cd /vagrant
./run-in-docker.sh ./mvnw package
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;1.7 - NPM&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There is also an &lt;a href="https://www.npmjs.com/package/@openapitools/openapi-generator-cli"&gt;NPM package wrapper&lt;/a&gt; available for different platforms (e.g. Linux, Mac, Windows). (JVM is still required) Please see the &lt;a href="https://github.com/openapitools/openapi-generator-cli"&gt;project's README&lt;/a&gt; there for more information.&lt;/p&gt; 
&lt;p&gt;Install it globally to get the CLI available on the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm install @openapitools/openapi-generator-cli -g
openapi-generator-cli version
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- RELEASE_VERSION --&gt; 
&lt;p&gt;To use a specific version of "openapi-generator-cli"&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;openapi-generator-cli version-manager set 7.16.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or install it as dev-dependency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm install @openapitools/openapi-generator-cli -D
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- /RELEASE_VERSION --&gt; 
&lt;p&gt;You can use &lt;a href="https://github.com/OpenAPITools/openapi-generator-cli?tab=readme-ov-file#use-locally-built-jar"&gt;locally built JARs&lt;/a&gt; or &lt;a href="https://github.com/OpenAPITools/openapi-generator-cli?tab=readme-ov-file#use-nightly-snapshot-build"&gt;&lt;code&gt;SNAPSHOT&lt;/code&gt; versions&lt;/a&gt; as well.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;1.8 - pip&lt;/a&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Platform(s)&lt;/strong&gt;: Linux, macOS, Windows &lt;strong&gt;Install&lt;/strong&gt; via &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; (&lt;code&gt;java&lt;/code&gt; executable is needed to run):&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;pip install openapi-generator-cli
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install a specific version&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pip install openapi-generator-cli==7.16.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also install with &lt;a href="https://github.com/activeviam/jdk4py"&gt;jdk4py&lt;/a&gt; instead of java binary. (python&amp;gt;=3.10 is required)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pip install openapi-generator-cli[jdk4py]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ref: &lt;a href="https://github.com/openAPITools/openapi-generator-pip"&gt;https://github.com/openAPITools/openapi-generator-pip&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;2 - Getting Started&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;To generate a PHP client for &lt;a href="https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml"&gt;petstore.yaml&lt;/a&gt;, please run the following&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/openapitools/openapi-generator
cd openapi-generator
./mvnw clean package
java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar generate \
   -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml \
   -g php \
   -o /var/tmp/php_api_client
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(if you're on Windows, replace the last command with &lt;code&gt;java -jar modules\openapi-generator-cli\target\openapi-generator-cli.jar generate -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml -g php -o c:\temp\php_api_client&lt;/code&gt;)&lt;/p&gt; 
&lt;!-- RELEASE_VERSION --&gt; 
&lt;p&gt;You can also download the JAR (latest release) directly from &lt;a href="https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.16.0/openapi-generator-cli-7.16.0.jar"&gt;maven.org&lt;/a&gt;&lt;/p&gt; 
&lt;!-- /RELEASE_VERSION --&gt; 
&lt;p&gt;To get a list of &lt;strong&gt;general&lt;/strong&gt; options available, please run &lt;code&gt;java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar help generate&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To get a list of PHP specified options (which can be passed to the generator with a config file via the &lt;code&gt;-c&lt;/code&gt; option), please run &lt;code&gt;java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar config-help -g php&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;3 - Usage&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;To generate a sample client library&lt;/h3&gt; 
&lt;p&gt;You can build a client against the &lt;a href="https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml"&gt;Petstore API&lt;/a&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./bin/generate-samples.sh ./bin/configs/java-okhttp-gson.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(On Windows, please install &lt;a href="https://gitforwindows.org/"&gt;GIT Bash for Windows&lt;/a&gt; to run the command above)&lt;/p&gt; 
&lt;p&gt;This script uses the default library, which is &lt;code&gt;okhttp-gson&lt;/code&gt;. It will run the generator with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar generate \
  -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml \
  -g java \
  -t modules/openapi-generator/src/main/resources/Java \
  --additional-properties artifactId=petstore-okhttp-gson,hideGenerationTimestamp=true \
  -o samples/client/petstore/java/okhttp-gson
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;with a number of options. &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/generators/java.md"&gt;The java options are documented here.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can also get the options with the &lt;code&gt;help generate&lt;/code&gt; command (below only shows partial results):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NAME
        openapi-generator-cli generate - Generate code with the specified
        generator.

SYNOPSIS
        openapi-generator-cli generate
                [(-a &amp;lt;authorization&amp;gt; | --auth &amp;lt;authorization&amp;gt;)]
                [--api-name-suffix &amp;lt;api name suffix&amp;gt;] [--api-package &amp;lt;api package&amp;gt;]
                [--artifact-id &amp;lt;artifact id&amp;gt;] [--artifact-version &amp;lt;artifact version&amp;gt;]
                [(-c &amp;lt;configuration file&amp;gt; | --config &amp;lt;configuration file&amp;gt;)] [--dry-run]
                [(-e &amp;lt;templating engine&amp;gt; | --engine &amp;lt;templating engine&amp;gt;)]
                [--enable-post-process-file]
                [(-g &amp;lt;generator name&amp;gt; | --generator-name &amp;lt;generator name&amp;gt;)]
                [--generate-alias-as-model] [--git-host &amp;lt;git host&amp;gt;]
                [--git-repo-id &amp;lt;git repo id&amp;gt;] [--git-user-id &amp;lt;git user id&amp;gt;]
                [--global-property &amp;lt;global properties&amp;gt;...] [--group-id &amp;lt;group id&amp;gt;]
                [--http-user-agent &amp;lt;http user agent&amp;gt;]
                [(-i &amp;lt;spec file&amp;gt; | --input-spec &amp;lt;spec file&amp;gt;)]
                [--ignore-file-override &amp;lt;ignore file override location&amp;gt;]
                [--import-mappings &amp;lt;import mappings&amp;gt;...]
                [--instantiation-types &amp;lt;instantiation types&amp;gt;...]
                [--invoker-package &amp;lt;invoker package&amp;gt;]
                [--language-specific-primitives &amp;lt;language specific primitives&amp;gt;...]
                [--legacy-discriminator-behavior] [--library &amp;lt;library&amp;gt;]
                [--log-to-stderr] [--minimal-update]
                [--model-name-prefix &amp;lt;model name prefix&amp;gt;]
                [--model-name-suffix &amp;lt;model name suffix&amp;gt;]
                [--model-package &amp;lt;model package&amp;gt;]
                [(-o &amp;lt;output directory&amp;gt; | --output &amp;lt;output directory&amp;gt;)] [(-p &amp;lt;additional properties&amp;gt; | --additional-properties &amp;lt;additional properties&amp;gt;)...]
                [--package-name &amp;lt;package name&amp;gt;] [--release-note &amp;lt;release note&amp;gt;]
                [--remove-operation-id-prefix]
                [--reserved-words-mappings &amp;lt;reserved word mappings&amp;gt;...]
                [(-s | --skip-overwrite)] [--server-variables &amp;lt;server variables&amp;gt;...]
                [--skip-validate-spec] [--strict-spec &amp;lt;true/false strict behavior&amp;gt;]
                [(-t &amp;lt;template directory&amp;gt; | --template-dir &amp;lt;template directory&amp;gt;)]
                [--type-mappings &amp;lt;type mappings&amp;gt;...] [(-v | --verbose)]

OPTIONS
        -a &amp;lt;authorization&amp;gt;, --auth &amp;lt;authorization&amp;gt;
            adds authorization headers when fetching the OpenAPI definitions
            remotely. Pass in a URL-encoded string of name:header with a comma
            separating multiple values

...... (results omitted)

        -v, --verbose
            verbose mode

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can then compile and run the client, as well as unit tests against it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd samples/client/petstore/java/okhttp-gson
mvn package
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Other generators have &lt;a href="https://github.com/OpenAPITools/openapi-generator/tree/master/samples"&gt;samples&lt;/a&gt; too.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;3.1 - Customization&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Please refer to &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/customization.md"&gt;customization.md&lt;/a&gt; on how to customize the output (e.g. package name, version)&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;3.2 - Workflow Integration (Maven, Gradle, Github, CI/CD)&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Please refer to &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/integration.md"&gt;integration.md&lt;/a&gt; on how to integrate OpenAPI generator with Maven, Gradle, sbt, Bazel, Github and CI/CD.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;3.3 - Online OpenAPI generator&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Here are the public online services:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;latest stable version: &lt;a href="https://api.openapi-generator.tech"&gt;https://api.openapi-generator.tech&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;latest master: &lt;a href="https://api-latest-master.openapi-generator.tech"&gt;https://api-latest-master.openapi-generator.tech&lt;/a&gt; (updated with latest master every hour)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The server is sponsored by &lt;a href="https://www.linode.com/"&gt;Linode&lt;/a&gt; &lt;a href="https://www.linode.com/"&gt;&lt;img src="https://www.linode.com/media/images/logos/standard/light/linode-logo_standard_light_small.png" alt="Linode Logo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;(These services are beta and do not have any guarantee on service level)&lt;/p&gt; 
&lt;p&gt;Please refer to &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/online.md"&gt;online.md&lt;/a&gt; on how to run and use the &lt;code&gt;openapi-generator-online&lt;/code&gt; - a web service for &lt;code&gt;openapi-generator&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;3.4 - License information on Generated Code&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The OpenAPI Generator project is intended as a benefit for users of the Open API Specification. The project itself has the &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#7---license"&gt;License&lt;/a&gt; as specified. In addition, please understand the following points:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The templates included with this project are subject to the &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#7---license"&gt;License&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Generated code is intentionally &lt;em&gt;not&lt;/em&gt; subject to the parent project license&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When code is generated from this project, it shall be considered &lt;strong&gt;AS IS&lt;/strong&gt; and owned by the user of the software. There are no warranties--expressed or implied--for generated code. You can do what you wish with it, and once generated, the code is your responsibility and subject to the licensing terms that you deem appropriate.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;3.5 - IDE Integration&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Here is a list of community-contributed IDE plug-ins that integrate with OpenAPI Generator:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Eclipse: &lt;a href="https://www.eclipse.org/codewind/open-api-tools-for-eclipse.html"&gt;Codewind OpenAPI Tools for Eclipse&lt;/a&gt; by &lt;a href="https://www.ibm.com"&gt;IBM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;IntelliJ IDEA: &lt;a href="https://plugins.jetbrains.com/plugin/8433-openapi-generator"&gt;OpenAPI Generator&lt;/a&gt; by &lt;a href="https://jimschubert.us/#/"&gt;Jim Schubert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;IntelliJ IDEA: &lt;a href="https://plugins.jetbrains.com/plugin/10690-senya-editor"&gt;Senya Editor&lt;/a&gt; by &lt;a href="https://senya.io"&gt;senya.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.reprezen.com/"&gt;RepreZen API Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Visual Studio: &lt;a href="https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator"&gt;REST API Client Code Generator&lt;/a&gt; by &lt;a href="https://christian-helle.blogspot.com/"&gt;Christian Resma Helle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Visual Studio Code: &lt;a href="https://marketplace.visualstudio.com/items?itemName=IBM.codewind-openapi-tools"&gt;Codewind OpenAPI Tools&lt;/a&gt; by &lt;a href="https://marketplace.visualstudio.com/publishers/IBM"&gt;IBM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;4 - Companies/Projects using OpenAPI Generator&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Here are some companies/projects (alphabetical order) using OpenAPI Generator in production. To add your company/project to the list, please visit &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/README.md"&gt;README.md&lt;/a&gt; and click on the icon to edit the page.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.aau.dk"&gt;Aalborg University&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/actcoding"&gt;act coding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.adaptant.io/"&gt;Adaptant Solutions AG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.adesso.de/"&gt;adesso SE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://adorsys.com/"&gt;adorsys GmbH &amp;amp; Co.KG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.adyen.com/"&gt;Adyen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.agoda.com/"&gt;Agoda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.airthings.com/"&gt;Airthings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.aleri.de/"&gt;Aleri Solutions Gmbh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.allianz.com"&gt;Allianz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://angular.schule/"&gt;Angular.Schule&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aqovia.com/"&gt;Aqovia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://www.anz.com/"&gt;Australia and New Zealand Banking Group (ANZ)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.arduino.cc/"&gt;Arduino&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.askul.co.jp"&gt;ASKUL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aws.amazon.com/"&gt;Amazon Web Services (AWS)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://b-com.com/en"&gt;b&amp;lt;&amp;gt;com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://e.baidu.com"&gt;百度营销&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dev.bandwidth.com"&gt;Bandwidth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://banzaicloud.com"&gt;Banzai Cloud&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bimdata.io"&gt;BIMData.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.bithost.ch"&gt;Bithost GmbH&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.bosch-connected-industry.com"&gt;Bosch Connected Industry&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.boxever.com/"&gt;Boxever&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.brevy.com"&gt;Brevy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.bunker-holding.com/"&gt;Bunker Holding Group&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.csun.edu"&gt;California State University, Northridge&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cam-inc.co.jp/"&gt;CAM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.camptocamp.com/en"&gt;Camptocamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.carlsberggroup.com/"&gt;Carlsberg Group&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://home.cern/"&gt;CERN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.christopherqueenconsulting.com/"&gt;Christopher Queen Consulting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cisco.com/"&gt;Cisco&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.codecentric.de/"&gt;codecentric AG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.coinapi.io/"&gt;CoinAPI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.commencis.com/"&gt;Commencis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://configcat.com/"&gt;ConfigCat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cronn.de/"&gt;cronn GmbH&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossoverhealth.com/"&gt;Crossover Health&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cupix.com/"&gt;Cupix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.datadoghq.com"&gt;Datadog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.dbsystel.de"&gt;DB Systel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.deeproute.ai/"&gt;Deeporute.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.devsupply.com/"&gt;Devsupply&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.dmTECH.de"&gt;dmTECH GmbH&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docspring.com/"&gt;DocSpring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dwango.co.jp/"&gt;dwango&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.edgeimpulse.com/"&gt;Edge Impulse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.elementai.com/"&gt;Element AI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.embotics.com/"&gt;Embotics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.emineo.ch"&gt;emineo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.fastly.com/"&gt;fastly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.fenergo.com/"&gt;Fenergo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://corp.freee.co.jp/en/"&gt;freee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.freshcells.de/"&gt;FreshCells&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.fuse.no/"&gt;Fuse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.gantner.com"&gt;Gantner&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RepreZen/GenFlow"&gt;GenFlow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.getyourguide.com/"&gt;GetYourGuide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://glovoapp.com/"&gt;Glovo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pepabo.com/en/"&gt;GMO Pepabo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://godaddy.com"&gt;GoDaddy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gumtree.com"&gt;Gumtree&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.here.com/"&gt;Here&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.ibm.com/"&gt;IBM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.instana.com"&gt;Instana&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.interxion.com"&gt;Interxion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://inquisico.com"&gt;Inquisico&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.juststarinfo.com"&gt;JustStar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://k6.io/"&gt;k6.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.klarna.com/"&gt;Klarna&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.kronsoft.ro/home/"&gt;Kronsoft Development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubernetes.io"&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://muenchen.digital/it-at-m/"&gt;Landeshauptstadt München - it@M&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linode.com/"&gt;Linode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.logicdrop.com"&gt;Logicdrop&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.lumeris.com"&gt;Lumeris&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.lvm.de"&gt;LVM Versicherungen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.mailslurp.com"&gt;MailSlurp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://manticoresearch.com"&gt;Manticore Search&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developers.mastercard.com"&gt;Mastercard&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.mediavision.fr/"&gt;Médiavision&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.metaswitch.com/"&gt;Metaswitch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.moonvision.io/"&gt;MoonVision&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myworkout.com"&gt;Myworkout&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.namsor.com/"&gt;NamSor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.neverfail.com/"&gt;Neverfail&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://neuerenergy.com"&gt;NeuerEnergy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.nokia.com/"&gt;Nokia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.onesignal.com/"&gt;OneSignal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.theocc.com/"&gt;Options Clearing Corporation (OCC)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.openet.com/"&gt;Openet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://openvalidation.io/"&gt;openVALIDATION&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oracle.com/"&gt;Oracle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.paxos.com"&gt;Paxos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://plaid.com"&gt;Plaid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://plaid.co.jp/"&gt;PLAID, Inc.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.pinterest.com"&gt;Pinterest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ponicode.dev/"&gt;Ponicode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.pricefx.com/"&gt;Pricefx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.print-nanny.com/"&gt;PrintNanny&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/prometheus/alertmanager"&gt;Prometheus/Alertmanager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.qavar.com"&gt;Qavar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://qed-it.com"&gt;QEDIT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://qovery.com"&gt;Qovery&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.qulix.com"&gt;Qulix Systems&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://corp.raksul.com"&gt;Raksul&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.raiffeisen.ch"&gt;Raiffeisen Schweiz Genossenschaft&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.redhat.com"&gt;RedHat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.reprezen.com/swagger-openapi-code-generation-api-first-microservices-enterprise-development"&gt;RepreZen API Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://restunited.com"&gt;REST United&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.robocorp.com"&gt;Robocorp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.robotinfra.com"&gt;Robotinfra&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.searchapi.io/"&gt;SearchApi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://smarthr.co.jp/"&gt;SmartHR&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.sie.com/en/index.html"&gt;Sony Interactive Entertainment&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.splitit.com/"&gt;Splitit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://www.stingray.com"&gt;Stingray&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.suva.ch/"&gt;Suva&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.svix.com/"&gt;Svix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dev.telstra.com"&gt;Telstra&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tencent.com"&gt;Tencent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.u-aizu.ac.jp/en/"&gt;The University of Aizu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tinqin.com/"&gt;TINQIN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.translucent.dk"&gt;Translucent ApS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.traveltimeplatform.com/"&gt;TravelTime platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tribalscale.com"&gt;TribalScale&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://trifork.com"&gt;Trifork&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://www.tui-infotec.com/"&gt;TUI InfoTec GmbH&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com"&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.unblu.com/"&gt;unblu inc.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.veamly.com/"&gt;Veamly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.vmware.com/"&gt;VMWare&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.wbt-solutions.de/"&gt;wbt-solutions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.woleet.io/"&gt;Woleet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://wso2.com/"&gt;WSO2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://vouchery.io"&gt;Vouchery.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.xero.com/"&gt;Xero&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.yahoo.co.jp/"&gt;Yahoo Japan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.viadee.de/"&gt;viadee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://vonage.com"&gt;Vonage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.yitutech.com/"&gt;YITU Technology&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.yelp.com/"&gt;Yelp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.zalando.com"&gt;Zalando&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.outscale.com/"&gt;3DS Outscale&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;5 - Presentations/Videos/Tutorials/Books&lt;/a&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;2018/05/12 - &lt;a href="https://ackintosh.github.io/blog/2018/05/12/openapi-generator/"&gt;OpenAPI Generator - community drivenで成長するコードジェネレータ&lt;/a&gt; by &lt;a href="https://github.com/ackintosh"&gt;中野暁人&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/05/15 - &lt;a href="http://jmini.github.io/blog/2018/2018-05-15_new-open-source-project.html"&gt;Starting a new open-source project&lt;/a&gt; by &lt;a href="https://github.com/jmini"&gt;Jeremie Bresson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/05/15 - &lt;a href="https://www.publickey1.jp/blog/18/rest_apiapiopenapi_generatorswagger_generator.html"&gt;REST API仕様からAPIクライアントやスタブサーバを自動生成する「OpenAPI Generator」オープンソースで公開。Swagger Codegenからのフォーク&lt;/a&gt; by &lt;a href="https://www.publickey1.jp"&gt;Publickey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/06/08 - &lt;a href="https://angular.schule/blog/2018-06-swagger-codegen-is-now-openapi-generator"&gt;Swagger Codegen is now OpenAPI Generator&lt;/a&gt; by &lt;a href="https://github.com/JohannesHoppe"&gt;JohannesHoppe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/06/21 - &lt;a href="https://fr.slideshare.net/chbornet/jhipster-conf-2018-connect-your-jhipster-apps-to-the-world-of-apis-with-openapi-and-grpc"&gt;Connect your JHipster apps to the world of APIs with OpenAPI and gRPC&lt;/a&gt; by &lt;a href="https://github.com/cbornet"&gt;Christophe Bornet&lt;/a&gt; at &lt;a href="https://jhipster-conf.github.io/"&gt;JHipster Conf 2018&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/06/22 - &lt;a href="https://rohki.hatenablog.com/entry/2018/06/22/073000"&gt;OpenAPI Generator で Gatling Client を生成してみた&lt;/a&gt; at &lt;a href="https://rohki.hatenablog.com/"&gt;ソモサン&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/06/27 - &lt;a href="https://speakerdeck.com/wing328/lessons-learned-from-leading-an-open-source-project-supporting-30-plus-programming-languages"&gt;Lessons Learned from Leading an Open-Source Project Supporting 30+ Programming Languages&lt;/a&gt; - &lt;a href="https://github.com/wing328"&gt;William Cheng&lt;/a&gt; at &lt;a href="http://bit.ly/2waDKKX"&gt;LinuxCon + ContainerCon + CloudOpen China 2018&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/07/19 - &lt;a href="https://medium.com/ringcentral-developers/openapi-generator-for-go-contribution-quickstart-8cc72bf37b53"&gt;OpenAPI Generator Contribution Quickstart - RingCentral Go SDK&lt;/a&gt; by &lt;a href="https://github.com/grokify"&gt;John Wang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/08/22 - &lt;a href="https://yinm.info/20180822/"&gt;OpenAPI Generatorのプロジェクト構成などのメモ&lt;/a&gt; by &lt;a href="https://github.com/yinm"&gt;Yusuke Iinuma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/09/12 - &lt;a href="https://www.reprezen.com/blog/reprezen-openapi-3.0-upgrade-now-is-the-time"&gt;RepreZen and OpenAPI 3.0: Now is the Time&lt;/a&gt; by &lt;a href="https://www.reprezen.com/blog/author/miles-daffin"&gt;Miles Daffin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/10/31 - &lt;a href="https://github.com/HarmoWatch/openapi-generator-cli"&gt;A node package wrapper for openapi-generator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/11/03 - &lt;a href="http://ryuichi111std.hatenablog.com/entry/2018/11/03/214005"&gt;OpenAPI Generator + golang + Flutter でアプリ開発&lt;/a&gt; by &lt;a href="https://github.com/ryuichi111"&gt;Ryuichi Daigo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/11/15 - &lt;a href="https://blog.csdn.net/yzy199391/article/details/84023982"&gt;基于openapi3.0的yaml文件生成java代码的一次实践&lt;/a&gt; by &lt;a href="https://me.csdn.net/yzy199391"&gt;焱魔王&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/11/18 - &lt;a href="https://lornajane.net/posts/2018/generating-php-library-code-from-openapi"&gt;Generating PHP library code from OpenAPI&lt;/a&gt; by &lt;a href="https://lornajane.net/"&gt;Lorna Jane&lt;/a&gt; at &lt;a href="https://lornajane.net/blog"&gt;LORNAJANE Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/11/19 - &lt;a href="https://youtu.be/-lDot4Yn7Dg"&gt;OpenAPIs are everywhere&lt;/a&gt; by &lt;a href="https://github.com/jmini"&gt;Jeremie Bresson (Unblu)&lt;/a&gt; at &lt;a href="https://www.eclipsecon.org/europe2018"&gt;EclipseCon Europe 2018&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2018/12/09 - &lt;a href="https://qiita.com/watiko/items/0961287c02eac9211572"&gt;openapi-generator をカスタマイズする方法&lt;/a&gt; by &lt;a href="https://qiita.com/watiko"&gt;@watiko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019/01/03 - &lt;a href="https://lekkimworld.com/2019/01/03/calling-a-swagger-service-from-apex-using-openapi-generator/"&gt;Calling a Swagger service from Apex using openapi-generator&lt;/a&gt; by &lt;a href="https://lekkimworld.com"&gt;Mikkel Flindt Heisterberg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019/01/13 - &lt;a href="https://ky-yk-d.hatenablog.com/entry/2019/01/13/234108"&gt;OpenAPI GeneratorでRESTful APIの定義書から色々自動生成する&lt;/a&gt; by &lt;a href="https://twitter.com/ky_yk_d"&gt;@ky_yk_d&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019/01/20 - &lt;a href="https://medium.com/commencis/contract-first-api-development-with-openapi-generator-and-connexion-b21bbf2f9244"&gt;Contract-First API Development with OpenAPI Generator and Connexion&lt;/a&gt; by &lt;a href="https://github.com/anlcnydn"&gt;Anil Can Aydin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019/01/30 - &lt;a href="https://dzone.com/articles/rapid-api-development-using-open-api-generator"&gt;Rapid Application Development With API First Approach Using Open-API Generator&lt;/a&gt; by &lt;a href="https://dzone.com/users/828329/milan_sonkar.html"&gt;Milan Sonkar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019/02/02 - &lt;a href="https://speakerdeck.com/akihito_nakano/gunmaweb34"&gt;平静を保ち、コードを生成せよ 〜 OpenAPI Generator誕生の背景と軌跡 〜&lt;/a&gt; by &lt;a href="https://github.com/ackintosh"&gt;中野暁人&lt;/a&gt; at &lt;a href="https://gunmaweb.connpass.com/event/113974/"&gt;Gunma.web #34 スキーマ駆動開発&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019/02/20 - &lt;a href="https://mux.com/blog/an-adventure-in-openapi-v3-api-code-generation/"&gt;An adventure in OpenAPI V3 code generation&lt;/a&gt; by &lt;a href="https://mux.com/blog/author/philc/"&gt;Phil Cluff&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019/02/26 - &lt;a href="https://medium.com/google-cloud/building-api-services-a-beginners-guide-7274ae4c547f"&gt;Building API Services: A Beginner’s Guide&lt;/a&gt; by &lt;a href="https://medium.com/@ratrosy"&gt;Ratros Y.&lt;/a&gt; in &lt;a href="https://medium.com/google-cloud"&gt;Google Cloud Platform Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019/02/26 - &lt;a href="https://medium.com/@ratrosy/building-apis-with-openapi-continued-5d0faaed32eb"&gt;Building APIs with OpenAPI: Continued&lt;/a&gt; by &lt;a href="https://medium.com/@ratrosy"&gt;Ratros Y.&lt;/a&gt; in &lt;a href="https://medium.com/google-cloud"&gt;Google Cloud Platform Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-03-07 - &lt;a href="https://qiita.com/chibato/items/e4a748db12409b40c02f"&gt;OpenAPI Generator で Spring Boot と Angular をタイプセーフに繋ぐ&lt;/a&gt; by &lt;a href="https://github.com/chibat"&gt;Tomofumi Chiba&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-03-16 - &lt;a href="https://vadosware.io/post/quick-intro-to-manual-openapi-v3/"&gt;A Quick introduction to manual OpenAPI V3&lt;/a&gt; by &lt;a href="https://github.com/t3hmrman"&gt;vados&lt;/a&gt; at &lt;a href="https://vadosware.io"&gt;VADOSWARE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-03-25 - &lt;a href="https://blogs.sap.com/2019/03/25/integrate-sap-s4hana-cloud-sdk-with-open-api/"&gt;Access any REST service with the SAP S/4HANA Cloud SDK&lt;/a&gt; by &lt;a href="https://people.sap.com/alexander.duemont"&gt;Alexander Duemont&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-03-25 - &lt;a href="https://qiita.com/amuyikam/items/e8a45daae59c68be0fc8"&gt;OpenAPI generatorを試してみる&lt;/a&gt; by &lt;a href="https://twitter.com/amuyikam"&gt;@amuyikam&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-03-27 - &lt;a href="https://techblog.zozo.com/entry/openapi3/go"&gt;OpenAPI3を使ってみよう！Go言語でクライアントとスタブの自動生成まで！&lt;/a&gt; by &lt;a href="https://twitter.com/gold_kou"&gt;@gold_kou&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-04-17 - &lt;a href="https://tech-blog.optim.co.jp/entry/2019/04/17/174000"&gt;OpenAPIによるスキーマファースト開発の実施サンプルとCloud Runについて&lt;/a&gt; by &lt;a href="https://twitter.com/yukey1031"&gt;@yukey1031&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-04-18 - &lt;a href="https://speakerdeck.com/ota42y/how-to-use-openapi3-for-api-developer"&gt;How to use OpenAPI3 for API developer (RubyKaigi 2019)&lt;/a&gt; by &lt;a href="https://twitter.com/ota42y"&gt;@ota42y&lt;/a&gt; at &lt;a href="https://rubykaigi.org/2019"&gt;RubyKaigi 2019&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-04-29 - &lt;a href="https://gum.co/openapi_generator_ebook"&gt;A Beginner's Guide to Code Generation for REST APIs (OpenAPI Generator)&lt;/a&gt; by &lt;a href="https://twitter.com/wing328"&gt;William Cheng&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-05-01 - &lt;a href="https://simply-how.com/design-and-generate-api-code-from-openapi"&gt;Design and generate a REST API from Swagger / OpenAPI in Java, Python, C# and more&lt;/a&gt; by &lt;a href="https://simply-how.com/"&gt;Simply How&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-05-17 - &lt;a href="https://www.47northlabs.com/knowledge-base/generate-spring-boot-rest-api-using-swagger-openapi/"&gt;Generate Spring Boot REST API using Swagger/OpenAPI&lt;/a&gt; by &lt;a href="https://www.47northlabs.com/author/antonie-zafirov/"&gt;Antonie Zafirov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-05-22 - &lt;a href="https://gum.co/openapi_generator_ebook_gb"&gt;REST APIs代码生成指南(OpenAPI Generator)&lt;/a&gt; by &lt;a href="https://twitter.com/wing328"&gt;William Cheng&lt;/a&gt;, &lt;a href="https://github.com/xmeng1"&gt;Xin Meng&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-05-24 - &lt;a href="https://gum.co/openapi_generator_ebook_big5"&gt;REST API 代碼生成指南 (OpenAPI Generator)&lt;/a&gt; by &lt;a href="https://twitter.com/wing328"&gt;William Cheng&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-06-24 - &lt;a href="https://speakerdeck.com/wing328/kubernetes-clients-and-openapi-generator"&gt;Kubernetes Clients and OpenAPI Generator&lt;/a&gt; by &lt;a href="https://twitter.com/wing328"&gt;William Cheng&lt;/a&gt; at &lt;a href="https://www.lfasiallc.com/events/contributors-summit-china-2019/"&gt;Kubernetes Contributor Summits Shanghai 2019&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-06-28 &lt;a href="https://marketplace.eclipse.org/content/codewind-openapi-tools"&gt;Codewind OpenAPI Tools&lt;/a&gt; in &lt;a href="https://marketplace.eclipse.org/"&gt;Eclipse Marketplace&lt;/a&gt; by IBM&lt;/li&gt; 
 &lt;li&gt;2019-06-29 &lt;a href="https://marketplace.visualstudio.com/items?itemName=IBM.codewind-openapi-tools"&gt;Codewind OpenAPI Tools&lt;/a&gt; in &lt;a href="https://marketplace.visualstudio.com/"&gt;Visual Studio Marketplace&lt;/a&gt; by IBM&lt;/li&gt; 
 &lt;li&gt;2019-07-04 - &lt;a href="https://gum.co/openapi_generator_ebook_big5"&gt;REST API のためのコード生成入門 (OpenAPI Generator)&lt;/a&gt; by &lt;a href="https://twitter.com/wing328"&gt;William Cheng&lt;/a&gt;, &lt;a href="https://github.com/ackintosh"&gt;中野暁人&lt;/a&gt;, &lt;a href="https://github.com/taxpon"&gt;和田拓朗&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-07-08 - &lt;a href="https://tech.cam-inc.co.jp/entry/2019/07/08/140000"&gt;OpenAPI Generator にコントリビュートしたら社名が載った話。(CAM) - CAM TECH BLOG&lt;/a&gt; by &lt;a href="https://www.cam-inc.co.jp/"&gt;CAM, Inc.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-07-14 - &lt;a href="https://qiita.com/yuji38kwmt/items/dfb929316a1335a161c0"&gt;OpenAPI GeneratorでPythonのクライアントライブラリを作成した&lt;/a&gt; by &lt;a href="https://qiita.com/yuji38kwmt"&gt;yuji38kwmt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-07-19 - &lt;a href="https://speakerdeck.com/wing328/developer-experience-dx-for-open-source-projects-english-japanese"&gt;Developer Experience (DX) for Open-Source Projects: How to Engage Developers and Build a Growing Developer Community&lt;/a&gt; by &lt;a href="https://twitter.com/wing328"&gt;William Cheng&lt;/a&gt;, &lt;a href="https://github.com/ackintosh"&gt;中野暁人&lt;/a&gt; at &lt;a href="https://events.linuxfoundation.org/events/open-source-summit-japan-2019/"&gt;Open Source Summit Japan 2019&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-08-14 - &lt;a href="https://bitmovin.com/our-openapi-journey-with-standardizing-sdks/"&gt;Our OpenAPI journey with Standardizing SDKs&lt;/a&gt; by &lt;a href="https://bitmovin.com/author/sburgstaller/"&gt;Sebastian Burgstaller&lt;/a&gt; at &lt;a href="https://www.bitmovin.com"&gt;Bitmovin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-08-15 - &lt;a href="https://www.m3tech.blog/entry/2019/08/15/110000"&gt;APIのコードを自動生成させたいだけならgRPCでなくてもよくない?&lt;/a&gt; by &lt;a href="https://corporate.m3.com/"&gt;M3, Inc.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-08-22 - &lt;a href="https://employment.en-japan.com/engineerhub/entry/2019/08/22/103000"&gt;マイクロサービスにおけるWeb APIスキーマの管理─ GraphQL、gRPC、OpenAPIの特徴と使いどころ&lt;/a&gt; by &lt;a href="https://twitter.com/ota42y"&gt;@ota42y&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-08-24 - &lt;a href="https://qiita.com/masayoshi0222/items/4845e4c715d04587c104"&gt;SwaggerドキュメントからOpenAPI Generatorを使ってモックサーバー作成&lt;/a&gt; by &lt;a href="https://qiita.com/masayoshi0222"&gt;坂本正義&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-08-29 - &lt;a href="https://cloud.tencent.com/developer/article/1495986"&gt;OpenAPI初探&lt;/a&gt; by &lt;a href="https://cloud.tencent.com/developer/user/1113152"&gt;peakxie&lt;/a&gt; at &lt;a href="https://cloud.tencent.com/developer"&gt;腾讯云社区&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-08-29 - &lt;a href="https://www.servicemesher.com/blog/kubernetes-1.16-crd-ga-preview/"&gt;全面进化：Kubernetes CRD 1.16 GA前瞻&lt;/a&gt; by &lt;a href="https://github.com/yue9944882"&gt;Min Kim&lt;/a&gt; at &lt;a href="https://www.servicemesher.com/blog/"&gt;ServiceMesher Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-01 - &lt;a href="https://www.youtube.com/watch?v=5cJtbIrsYkg"&gt;Creating a PHP-Slim server using OpenAPI (Youtube video)&lt;/a&gt; by &lt;a href="https://www.youtube.com/channel/UCnG-TN23lswO6QbvWhMtxpA"&gt;Daniel Persson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-06 - &lt;a href="https://wissel.net/blog/2019/09/vertx-and-openapi.html"&gt;Vert.x and OpenAPI&lt;/a&gt; by &lt;a href="https://twitter.com/notessensei"&gt;Stephan H Wissel&lt;/a&gt; at &lt;a href="https://wissel.net"&gt;wissel.net blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-09 - &lt;a href="https://cloud.ibm.com/docs/cloud-native?topic=cloud-native-rest-api"&gt;Cloud-native development - Creating RESTful microservices&lt;/a&gt; in &lt;a href="https://cloud.ibm.com/docs"&gt;IBM Cloud Docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-14 - &lt;a href="https://developer.mastercard.com/platform/documentation/generating-and-configuring-a-mastercard-api-client/"&gt;Generating and Configuring a Mastercard API Client&lt;/a&gt; at &lt;a href="https://developer.mastercard.com/platform/documentation/"&gt;Mastercard Developers Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-15 - &lt;a href="https://qiita.com/ShoichiKuraoka/items/f1f7a3c2376f7cd9c56a"&gt;OpenAPI(Swagger)導入下調べ&lt;/a&gt; by &lt;a href="https://qiita.com/ShoichiKuraoka"&gt;Shoichi Kuraoka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-17 - &lt;a href="https://www.http4k.org/tutorials/documenting_apis_with_openapi/"&gt;Tutorial: Documenting http4k APIs with OpenApi3&lt;/a&gt; by &lt;a href="https://www.http4k.org/"&gt;http4k&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-22 - &lt;a href="https://booth.pm/ja/items/1571902"&gt;OpenAPI 3を完全に理解できる本&lt;/a&gt; by &lt;a href="https://twitter.com/ota42y"&gt;@ota42y&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-22 - &lt;a href="https://medium.com/@amirm.lavasani/restful-apis-tutorial-of-openapi-specification-eeada0e3901d"&gt;RESTful APIs: Tutorial of OpenAPI Specification&lt;/a&gt; by &lt;a href="https://medium.com/@amirm.lavasani"&gt;Amir Lavasani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-22 - &lt;a href="https://devrel.net/dev-rel/redefining-sdks-as-software-diversity-kits"&gt;Redefining SDKs as software diversity kits&lt;/a&gt; by &lt;a href="https://twitter.com/sidneyallen"&gt;Sid Maestre (Xero)&lt;/a&gt; at &lt;a href="https://sf2019.devrel.net/"&gt;DevRelCon San Francisco 2019&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-23 - &lt;a href="https://qiita.com/littleFeet/items/492df2ad68a0799a5e5e"&gt;swaggerからOpenApi GeneratorでSpringのコードを自動生成&lt;/a&gt; by &lt;a href="https://qiita.com/littleFeet"&gt;@littleFeet&lt;/a&gt; at &lt;a href="https://qiita.com/"&gt;Qiita&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-09-24 - &lt;a href="https://www.slideshare.net/JanWeinschenker/eine-stunde-was-mit-api-first"&gt;Eine Stunde was mit Api First!&lt;/a&gt; by &lt;a href="https://twitter.com/janweinschenker"&gt;@janweinschenker&lt;/a&gt; at &lt;a href="https://javaforumnord.de/"&gt;Java Forum Nord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-10-09 - &lt;a href="https://autopp-tech.hatenablog.com/entry/2019/10/09/222039"&gt;openapi-generator で生成した Go クライアントで Bearer 認証をする&lt;/a&gt; by &lt;a href="https://github.com/autopp"&gt;Akira Tanimura&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-10-10 - &lt;a href="https://www.meetup.com/fr-FR/Criteo-Labs-Tech-Talks/events/264775768/"&gt;Automatic Generation of REST Clients&lt;/a&gt; by Thomas Peyrard, Senior Software Engineer at Criteo in &lt;a href="https://www.meetup.com/fr-FR/Criteo-Labs-Tech-Talks/events/264775768/"&gt;Full-Stack Tech Talks (Meetup)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-10-12 - &lt;a href="https://blog.csdn.net/wxid2798226/article/details/102527467"&gt;OpenApi自动生成client&lt;/a&gt; by &lt;a href="https://me.csdn.net/wxid2798226"&gt;郑泽洲&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-10-16 - &lt;a href="https://medium.com/@accounts_76224/how-to-ship-apis-faster-cabef2f819e4"&gt;How to ship APIs faster?&lt;/a&gt; by &lt;a href="https://ponicode.dev"&gt;Simon Guilliams @ PoniCode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-10-22 - &lt;a href="https://qiita.com/boronngo/items/4b78b92526209daeaee9"&gt;OpenAPI + Spring Boot(Kotlin)でファイルダウンロードAPIを作成する&lt;/a&gt; by &lt;a href="https://twitter.com/yuki_furukawa5"&gt;Yuki Furukawa&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-10-24 - &lt;a href="https://github.com/pe-st/apidocs/raw/master/MicroProfile-OpenAPI-all-slides.pdf"&gt;Microprofile OpenAPI - Code First or Design First?&lt;/a&gt; by &lt;a href="https://twitter.com/pesche"&gt;Peter [pɛʃə] Steiner&lt;/a&gt; at &lt;a href="https://www.eclipsecon.org/europe2019/sessions/microprofile-openapi-code-first-or-design-first"&gt;eclipsecon Europe 2019&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-06 - &lt;a href="https://98elements.com/blog/generating-api-clients-based-on-openapi-v3-specifications"&gt;Generating API clients based on OpenAPI v3 specifications&lt;/a&gt; by &lt;a href="https://98elements.com"&gt;Dominik Jastrzębski @ 98elements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-06 - &lt;a href="https://qiita.com/YasuhiroABE/items/c73920eab2d9d6e97fd9"&gt;OpenAPIを利用して自前のAPIサーバー(Sinatra)を移植した時のメモ&lt;/a&gt; by &lt;a href="https://twitter.com/YasuhiroABE"&gt;Yasuhiro ABE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-07 - &lt;a href="https://www.youtube.com/watch?v=F9iF3a1Z8Y8"&gt;API First development with OpenAPI - You should you practise it !?&lt;/a&gt; by &lt;a href="https://www.nickvanhoof.com/"&gt;Nick Van Hoof&lt;/a&gt; at &lt;a href="https://devoxx.be/"&gt;Devoxx Belgium 2019&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-08 - &lt;a href="https://www.youtube.com/watch?v=m28JFovKQ20"&gt;JHipster beyond CRUD - API-First for Enterprises by Enrico Costanzi&lt;/a&gt; by &lt;a href="https://twitter.com/enricocostanzi"&gt;Enrico Costanzi&lt;/a&gt; at &lt;a href="https://jhipster-conf.github.io/"&gt;JHipster Conf 2019 in Paris&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-11 - &lt;a href="https://qiita.com/unhurried/items/7b74f7d3c43545dadd2b"&gt;TypeScript REST APIクライアント&lt;/a&gt; by &lt;a href="https://qiita.com/unhurried"&gt;@unhurried&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-11 - &lt;a href="https://www.youtube.com/watch?v=MMay_nht8ec"&gt;One Spec to Rule them all - OpenAPI in Action&lt;/a&gt; by &lt;a href="https://github.com/littldr"&gt;Andreas Litt&lt;/a&gt; at &lt;a href="https://www.codetalks.com/"&gt;code.talks 2019&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-13 - &lt;a href="https://simply-how.com/design-and-generate-api-code-from-openapi"&gt;OpenAPI 3.0 Editor And Generator With A Spring Boot Example&lt;/a&gt; at &lt;a href="https://simply-how.com/"&gt;Simply How&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-17 - &lt;a href="https://www.youtube.com/playlist?list=PLtJyHVMdzfF6fBkOUV5VDVErP23CGgHIy"&gt;OpenAPI Generator YouTube playlist&lt;/a&gt; at &lt;a href="https://www.youtube.com"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-20 - &lt;a href="https://noti.st/lornajane/HvDH7U/introduction-to-openapi"&gt;Introduction to OpenAPI&lt;/a&gt; by &lt;a href="https://twitter.com/lornajane"&gt;Lorna Mitchell&lt;/a&gt; at &lt;a href="https://gotocph.com/2019/"&gt;GOTO Copenhagen 2019&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-20 - &lt;a href="https://dotnetthoughts.net/how-to-generate-angular-code-from-openapi-specifications/"&gt;How to Generate Angular code from OpenAPI specifications&lt;/a&gt; by Anuraj&lt;/li&gt; 
 &lt;li&gt;2019-11-23 - &lt;a href="https://www.slideshare.net/techblogyahoo/swagger-openapi-specification-30-api"&gt;Swagger ではない OpenAPI Specification 3.0 による API サーバー開発&lt;/a&gt; by &lt;a href="https://github.com/t2y"&gt;Tetsuya Morimoto&lt;/a&gt; at &lt;a href="https://ccc2019fall.java-users.jp/"&gt;JJUG CCC 2019 Fall&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-24 - &lt;a href="https://medium.com/@irinasouthwell_220/accelerate-flutter-development-with-openapi-and-dart-code-generation-1f16f8329a6a"&gt;Accelerate Flutter development with OpenAPI and Dart code generation&lt;/a&gt; by &lt;a href="https://medium.com/@irinasouthwell_220"&gt;Irina Southwell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-25 - &lt;a href="https://qiita.com/pochopocho13/items/8db662e1934fb2b408b8"&gt;openapi-generatorで手軽にスタブサーバとクライアントの生成&lt;/a&gt; by &lt;a href="https://twitter.com/pochopocho13"&gt;@pochopocho13&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-11-26 - &lt;a href="https://blog.b9lab.com/cordacon-2019-highlights-braid-server-and-openapi-generator-for-corda-flows-api-s-d24179ccb27c"&gt;CordaCon 2019 Highlights: Braid Server and OpenAPI Generator for Corda Client API’s&lt;/a&gt; by &lt;a href="https://blog.b9lab.com/@adelrestom"&gt;Adel Rustum&lt;/a&gt; at &lt;a href="https://blog.b9lab.com/"&gt;B9lab&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-12-03 - &lt;a href="https://www.corda.net/blog/a-road-to-less-coding-auto-generate-apilibrary/"&gt;A Road to Less Coding: Auto-Generate APILibrary&lt;/a&gt; at &lt;a href="https://www.corda.net/blog/"&gt;Corda Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-12-04 - &lt;a href="https://qiita.com/teracy55/items/0327c7a170ec772970c6"&gt;Angular＋NestJS＋OpenAPI（Swagger）でマイクロサービスを視野に入れた環境を考える&lt;/a&gt; by &lt;a href="https://twitter.com/teracy55"&gt;てらしー&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-12-05 - &lt;a href="https://speakerdeck.com/sullis/code-generation-on-the-java-vm-2019-12-05"&gt;Code generation on the Java VM&lt;/a&gt; by &lt;a href="https://speakerdeck.com/sullis"&gt;Sean Sullivan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-12-17 - &lt;a href="https://www.techscore.com/blog/2019/12/17/openapi-generator-oauth2-accesstoken/"&gt;OpenAPI Generator で OAuth2 アクセストークン発行のコードまで生成してみる&lt;/a&gt; by &lt;a href="https://www.techscore.com/blog/"&gt;TECHSCORE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-12-23 - &lt;a href="https://www.electronicdesign.com/technologies/embedded-revolution/article/21119177/use-ada-for-your-web-development"&gt;Use Ada for Your Web Development&lt;/a&gt; by &lt;a href="https://github.com/stcarrez"&gt;Stephane Carrez&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2019-12-23 - &lt;a href="https://gift-tech.co.jp/articles/structured-openapi-schema"&gt;OpenAPIのスキーマを分割・構造化していく方法&lt;/a&gt; by &lt;a href="https://github.com/t2h5"&gt;小飯塚達也&lt;/a&gt; at &lt;a href="https://gift-tech.co.jp/"&gt;GiFT, Inc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-01-17 - &lt;a href="https://www.youtube.com/watch?v=mFBP-M0ZPfw&amp;amp;t=178s"&gt;OpenAPI demo for Pulp 3.0 GA&lt;/a&gt; by &lt;a href="https://www.youtube.com/channel/UCI43Ffs4VPDv7awXvvBJfRQ"&gt;Pulp&lt;/a&gt; at &lt;a href="https://www.youtube.com/"&gt;Youtube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-01-19 - &lt;a href="https://dev.to/rolfstreefkerk/why-document-a-rest-api-as-code-5e7p"&gt;Why document a REST API as code?&lt;/a&gt; by &lt;a href="https://github.com/rpstreef"&gt;Rolf Streefkerk&lt;/a&gt; at &lt;a href="https://dev.to"&gt;DEV Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-01-28 - &lt;a href="https://dev.to/matttyler/get-your-serverless-swagger-back-with-openapi-48gc"&gt;Get Your Serverless Swagger Back with OpenAPI&lt;/a&gt; by &lt;a href="https://dev.to/matttyler"&gt;Matt Tyler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-01-30 - &lt;a href="https://www.yutaka0m.work/entry/2020/01/30/163905"&gt;OpenAPI Generatorへのコントリビュート&lt;/a&gt; by &lt;a href="https://github.com/yutaka0m"&gt;yutaka0m&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-02-01 - &lt;a href="https://fosdem.org/2020/schedule/event/openapi/"&gt;Using OpenAPI to Maximise Your Pulp 3 Experience&lt;/a&gt; by &lt;a href="https://github.com/dkliban/"&gt;Dennis Kliban&lt;/a&gt; at &lt;a href="https://fosdem.org/"&gt;FOSDEM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-02-07 - &lt;a href="https://www.youtube.com/watch?v=zhb7vUApLW8&amp;amp;t=927s"&gt;Why you should use OpenAPI for your API design&lt;/a&gt; by &lt;a href="https://apiconference.net/speaker/nick-van-hoof/"&gt;Nick Van Hoof&lt;/a&gt; at &lt;a href="https://apiconference.net/"&gt;API Conference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-02-17 - &lt;a href="https://www.brightbox.com/blog/2020/02/17/using-openapi-to-validate-kubernetes-configs/"&gt;Rubynetes: using OpenAPI to validate Kubernetes configs&lt;/a&gt; by Neil Wilson at &lt;a href="https://www.brightbox.com/"&gt;Brightbox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-02-20 - &lt;a href="https://devblog.xero.com/building-sdks-for-the-future-b79ff726dfd6"&gt;Building SDKs for the future&lt;/a&gt; by &lt;a href="https://twitter.com/sidneyallen"&gt;Sid Maestre (Xero)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-02-27 - &lt;a href="https://tech.medpeer.co.jp/entry/e2e-ie11"&gt;Nuxt利用プロダクトでIE11と仲良くするためのE2E&lt;/a&gt; at &lt;a href="https://tech.medpeer.co.jp/"&gt;Medpeer.co.jp Tech Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-02-29 - &lt;a href="https://link.springer.com/chapter/10.1007/978-3-030-41494-8_14"&gt;Providing Support to IoT Devices Deployed in Disconnected Rural Environment (Conference paper)&lt;/a&gt; by Sergio Laso, Daniel Flores-Martín, Juan Luis HerreraCarlos, CanalJuan Manuel, MurilloJavier Berrocal&lt;/li&gt; 
 &lt;li&gt;2020-03-02 - &lt;a href="https://www.mokkapps.de/blog/how-to-generate-angular-and-spring-code-from-open-api-specification/"&gt;How To Generate Angular &amp;amp; Spring Code From OpenAPI Specification&lt;/a&gt; by &lt;a href="https://www.mokkapps.de/"&gt;Michael Hoffmann&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-03-02 - &lt;a href="https://gift-tech.co.jp/articles/openapi-generator-typescript"&gt;OpenAPI Generator + TypeScript で始める自動生成の型に守られた豊かなクライアント生活&lt;/a&gt; by &lt;a href="https://gift-tech.co.jp/members/naokiioroi"&gt;五百蔵 直樹&lt;/a&gt; at &lt;a href="https://gift-tech.co.jp/"&gt;GiFT株式会社&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-03-10 - &lt;a href="https://speakerdeck.com/akihito_nakano/openapi-generator-meetup-number-1"&gt;OpenAPI Generator Meetup #1&lt;/a&gt; by &lt;a href="https://github.com/ackintosh"&gt;中野暁人&lt;/a&gt; at &lt;a href="https://openapi-generator-meetup.connpass.com/event/168187/"&gt;OpenAPI Generator Meetup #1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-03-15 - &lt;a href="https://k6.io/blog/load-testing-your-api-with-swagger-openapi-and-k6"&gt;Load Testing Your API with Swagger/OpenAPI and k6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-04-13 - &lt;a href="https://tech-blog.optim.co.jp/entry/2020/04/13/100000"&gt;俺的【OAS】との向き合い方 (爆速でOpenAPIと友達になろう)&lt;/a&gt; in &lt;a href="https://tech-blog.optim.co.jp/"&gt;OPTim Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-04-22 - &lt;a href="https://nordicapis.com/introduction-to-openapi-generator/"&gt;Introduction to OpenAPI Generator&lt;/a&gt; by &lt;a href="https://nordicapis.com/author/sandovaleffect/"&gt;Kristopher Sandoval&lt;/a&gt; in &lt;a href="https://nordicapis.com/"&gt;Nordic APIs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-04-27 - &lt;a href="https://medium.com/pdf-generator-api/how-we-use-open-api-v3-specification-to-auto-generate-api-documentation-code-snippets-and-clients-d127a3cea784"&gt;How we use Open API v3 specification to auto-generate API documentation, code-snippets and clients&lt;/a&gt; by &lt;a href="https://medium.com/@tanel.tahepold"&gt;Tanel Tähepõld&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-05-09 - &lt;a href="https://qiita.com/kasa_le/items/97ca6a8dd4605695c25c"&gt;OpenAPIでお手軽にモックAPIサーバーを動かす&lt;/a&gt; by &lt;a href="https://qiita.com/kasa_le"&gt;Sachie Kamba&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-05-18 - &lt;a href="https://dev.to/alfonzjanfrithz/spring-boot-rest-with-openapi-3-59jm"&gt;Spring Boot REST with OpenAPI 3&lt;/a&gt; by &lt;a href="https://dev.to/alfonzjanfrithz"&gt;Alfonz Jan Frithz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-05-19 - &lt;a href="https://www.youtube.com/watch?v=sIaXmR6xRAw"&gt;Dead Simple APIs with Open API&lt;/a&gt; by &lt;a href="https://github.com/dragonmantank"&gt;Chris Tankersley&lt;/a&gt; at &lt;a href="https://developer.nexmo.com/"&gt;Nexmo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-05-22 - &lt;a href="https://dev.to/unhurried/typescript-rest-api-client-4in3"&gt;TypeScript REST API Client&lt;/a&gt; by &lt;a href="https://dev.to/unhurried"&gt;"unhurried"&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-05-28 - &lt;a href="https://www.youtube.com/watch?v=agYVz6dzh1I"&gt;【使用 lotify + Swagger 建置可共用的 LINE Notify bot】 - #NiJia @ Chatbot Developer Taiwan 第 #19 小聚&lt;/a&gt; by &lt;a href="https://www.youtube.com/channel/UCxeYUyZNnHmpX23YNF-ewvw"&gt;Chatbot Developer Taiwan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-05-28 - &lt;a href="https://www.youtube.com/watch?v=xexLvQqAhiA"&gt;Building APIs with Laravel using OpenAPI&lt;/a&gt; by &lt;a href="https://github.com/dragonmantank"&gt;Chris Tankersley&lt;/a&gt; at &lt;a href="https://laracon.eu/"&gt;Laracon EU&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-06-12 - &lt;a href="https://ieeexplore.ieee.org/document/9274746"&gt;Interoperability by construction: code generation for Arrowhead Clients&lt;/a&gt; by Michele Albano, Brian Nielsen at &lt;a href="https://ieeexplore.ieee.org/xpl/conhome/9274544/proceeding"&gt;2020 IEEE Conference on Industrial Cyberphysical Systems (ICPS)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-06-23 - &lt;a href="https://www.cam-inc.co.jp/news/20200623"&gt;新規サーバーアプリケーションにTypeScriptを採用してみた&lt;/a&gt; at &lt;a href="https://www.cam-inc.co.jp/news/tech-blog/"&gt;CAM Tech Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-06-29 - &lt;a href="https://ieeexplore.ieee.org/document/9127353"&gt;Artifact Abstract: Deployment of APIs on Android Mobile Devices and Microcontrollers&lt;/a&gt; by &lt;a href="https://ieeexplore.ieee.org/document/9127353/authors#authors"&gt;Sergio Laso ; Marino Linaje ; Jose Garcia-Alonso ; Juan M. Murillo ; Javier Berrocal&lt;/a&gt; at &lt;a href="https://ieeexplore.ieee.org/xpl/conhome/9125449/proceeding"&gt;2020 IEEE International Conference on Pervasive Computing and Communications (PerCom)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-07-07 - &lt;a href="https://blog.dreamfactory.com/5-best-api-documentation-tools/"&gt;5 Best API Documentation Tools&lt;/a&gt; by Susanna Bouse at &lt;a href="https://blog.dreamfactory.com/"&gt;DreamFactory Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-07-12 - &lt;a href="https://qiita.com/professor/items/4cbd04ec084d13057bc2"&gt;Open API 3.0の定義からgolangのサーバコードのスケルトンを作成する&lt;/a&gt; by &lt;a href="https://qiita.com/professor"&gt;@professor (Qiita Blog)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-07-20 - &lt;a href="https://www.datadoghq.com/blog/java-go-libraries/"&gt;Datadog API client libraries now available for Java and Go&lt;/a&gt; by Jordan Obey at &lt;a href="https://www.datadoghq.com/blog"&gt;Datadog Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-07-23 - &lt;a href="https://dev.to/no0law1/generate-client-sdk-for-net-core-using-open-api-2dgh"&gt;Generate Client SDK for .NET Core using Open Api&lt;/a&gt; by &lt;a href="https://dev.to/no0law1"&gt;Nuno Reis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-07-26 - &lt;a href="https://qiita.com/gyamoto/items/eeeff81b6770487319ed"&gt;Dartのhttp_interceptorライブラリを使うと配列のクエリパラメータが消えてしまう件の応急処置&lt;/a&gt; by &lt;a href="https://qiita.com/gyamoto"&gt;@gyamoto&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-08-01 - &lt;a href="https://dev.to/martinmcwhorter/generate-angular-reactiveforms-from-swagger-openapi-35h9"&gt;Generate Angular ReactiveForms from Swagger/OpenAPI&lt;/a&gt; by &lt;a href="https://dev.to/martinmcwhorter"&gt;Martin McWhorter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-08-03 - &lt;a href="https://medium.com/@everisBrasil/criando-bibliotecas-para-apis-restful-com-openapi-swagger-editor-e-openapi-generator-75349a6420fd"&gt;Criando Bibliotecas para APIs RESTful com OpenAPI, Swagger Editor e OpenAPI Generator&lt;/a&gt; by &lt;a href="https://medium.com/@everisBrasil"&gt;everis Brasil (an NTT DATA Company)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-08-19 - &lt;a href="https://thinkit.co.jp/article/17704"&gt;マイクロサービスを連携してみよう&lt;/a&gt; by &lt;a href="https://thinkit.co.jp/author/17588"&gt;岡井 裕矢(おかい ゆうや)&lt;/a&gt;, &lt;a href="https://thinkit.co.jp/author/17705"&gt;泉 勝(いずみ まさる)&lt;/a&gt; at &lt;a href="https://thinkit.co.jp/"&gt;Think IT（シンクイット）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-08-25 - &lt;a href="https://tech.smarthr.jp/entry/2020/08/25/135631"&gt;OpenAPI Generator と TypeScript で型安全にフロントエンド開発をしている話&lt;/a&gt; at &lt;a href="https://tech.smarthr.jp/"&gt;SmartHR Tech Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-09-10 - &lt;a href="https://www.instana.com/blog/introduction-to-openapi-with-instana/"&gt;Introduction to OpenAPI with Instana&lt;/a&gt; by &lt;a href="https://www.instana.com/blog/author/cedricziel/"&gt;Cedric Ziel&lt;/a&gt; at &lt;a href="https://www.instana.com/blog/"&gt;Instana Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-09-17 - &lt;a href="https://medium.com/@ghufz.learn/generate-powershellsdk-using-openapi-generator-33b700891e33"&gt;Generate PowerShellSDK using openapi-generator&lt;/a&gt; by &lt;a href="https://medium.com/@ghufz.learn"&gt;Ghufran Zahidi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-09-24 - &lt;a href="https://medium.com/@sceleski/how-to-automate-api-code-generation-openapi-swagger-and-boost-productivity-1176a0056d8a"&gt;How to automate API code generation (OpenAPI/Swagger) and boost productivity - Tutorial with React Native featuring TypeScript&lt;/a&gt; by &lt;a href="https://medium.com/@sceleski"&gt;Sanjin Celeski&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-09-25 - &lt;a href="https://medium.com/@pguso/generate-openapi-angular-client-8c9288e8bbd4"&gt;Generate OpenAPI Angular Client&lt;/a&gt; by &lt;a href="https://medium.com/@pguso"&gt;Patric&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-10-24 - &lt;a href="https://www.josephguadagno.net/2020/10/24/working-with-microsoft-identity-react-native-client"&gt;Working with Microsoft Identity - React Native Client&lt;/a&gt; by &lt;a href="https://www.josephguadagno.net/"&gt;Joseph Guadagno&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-10-31 - &lt;a href="https://www.youtube.com/watch?v=J4JHLESAiFk"&gt;[B2] OpenAPI Specification으로 타입-세이프하게 API 개발하기: 희망편 VS 절망편&lt;/a&gt; by 최태건 at &lt;a href="https://2020.feconf.kr/"&gt;FEConf 2020&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-11-05 - &lt;a href="https://www.massiveart.com/blog/automated-rest-api-code-generation-wie-it-systeme-miteinander-sprechen"&gt;Automated REST-Api Code Generation: Wie IT-Systeme miteinander sprechen&lt;/a&gt; by Stefan Rottensteiner at &lt;a href="https://www.massiveart.com/blog"&gt;MASSIVE ART Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-12-01 - &lt;a href="https://qiita.com/saki-engineering/items/b20d8b6074c4da9664a5"&gt;OpenAPI GeneratorでGoのAPIサーバー/クライアントコードを自動生成する&lt;/a&gt; by &lt;a href="https://qiita.com/saki-engineering"&gt;@saki-engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-12-04 - &lt;a href="https://www.youtube.com/watch?v=7Lke9dHRqT0"&gt;Scaling the Test Coverage of OpenAPI Generator for 30+ Programming Languages&lt;/a&gt; by &lt;a href="https://github.com/wing328"&gt;William Cheng&lt;/a&gt; at &lt;a href="https://events.linuxfoundation.org/archive/2020/open-source-summit-japan/"&gt;Open Source Summit Japan + Automotive Linux Summit 2020&lt;/a&gt; (&lt;a href="https://speakerdeck.com/wing328/scaling-the-test-coverage-of-openapi-generator-for-30-plus-programming-languages"&gt;Slides&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;2020-12-09 - &lt;a href="https://qiita.com/yoshifujiT/items/905c18700ede23f40840"&gt;プロジェクトにOpenAPI Generatorで自動生成された型付きAPI Clientを導入した話&lt;/a&gt; by &lt;a href="https://github.com/yoshifujiT"&gt;@yoshifujiT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2020-12-15 - &lt;a href="https://techblog.yahoo.co.jp/entry/2020121530052952/"&gt;Next.js + NestJS + GraphQLで変化に追従するフロントエンドへ 〜 ショッピングクーポンの事例紹介&lt;/a&gt; by &lt;a href="https://github.com/ogugu9"&gt;小倉 陸&lt;/a&gt; at &lt;a href="https://techblog.yahoo.co.jp/"&gt;Yahoo! JAPAN Tech Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-01-08 - &lt;a href="https://www.nginx.com/blog/hello-new-api-part-1/"&gt;Hello, New API – Part 1&lt;/a&gt; by &lt;a href="https://www.nginx.com/people/jeremy-schulman/"&gt;Jeremy Schulman&lt;/a&gt; at &lt;a href="https://www.mlb.com"&gt;Major League Baseball&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-01-18 - &lt;a href="https://codezine.jp/article/detail/13406?p=2"&gt;「アプリ開発あるある」を疑うことから始まった、API Clientコードの自動生成【デブスト2020】&lt;/a&gt; by &lt;a href="https://codezine.jp/author/1"&gt;CodeZine編集部&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-02-05 - &lt;a href="https://blog.viadee.de/en/rest-api-roundtrip"&gt;REST-API-Roundtrip with SpringDoc and OpenAPI Generator&lt;/a&gt; by &lt;a href="https://twitter.com/benklatt"&gt;Benjamin Klatt&lt;/a&gt; at &lt;a href="https://www.viadee.de/en/"&gt;viadee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-02-17 - &lt;a href="https://medium.com/nerd-for-tech/rest-api-roundtrip-with-springdoc-and-openapi-generator-30bd27ccf698"&gt;REST-API-Roundtrip with SpringDoc and OpenAPI Generator&lt;/a&gt; by &lt;a href="https://cloud-viadee.medium.com/"&gt;cloud @viadee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-03-08 - &lt;a href="https://blog.csdn.net/u013019701/article/details/114531975"&gt;OpenAPI Generator 工具的躺坑尝试&lt;/a&gt; by &lt;a href="https://blog.csdn.net/u013019701"&gt;独家雨天&lt;/a&gt; at &lt;a href="https://blog.csdn.net/"&gt;CSDN官方博客&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-03-16 - &lt;a href="https://cloud.tencent.com/developer/article/1802704"&gt;如何基于 Swagger 使用 OpenAPI Generator 生成 JMeter 脚本？&lt;/a&gt; by &lt;a href="https://cloud.tencent.com/developer/user/5836255"&gt;高楼Zee&lt;/a&gt; at &lt;a href="https://cloud.tencent.com/developer/column"&gt;腾讯云专栏&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-03-24 - &lt;a href="https://zenn.dev/takepepe/articles/openapi-generator-cli-ts"&gt;openapi-generator-cli による TypeScript 型定義&lt;/a&gt; by &lt;a href="https://zenn.dev/takepepe"&gt;Takefumi Yoshii&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-03-28 - &lt;a href="https://dev.to/arnaudcortisse/trying-out-nestjs-part-4-generate-typescript-clients-from-openapi-documents-28mk"&gt;Trying out NestJS part 4: Generate Typescript clients from OpenAPI documents&lt;/a&gt; by &lt;a href="https://dev.to/arnaudcortisse"&gt;Arnaud Cortisse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-03-31 - &lt;a href="https://www.baeldung.com/java-openapi-generator-server"&gt;Open API Server Implementation Using OpenAPI Generator&lt;/a&gt; at &lt;a href="https://www.baeldung.com/"&gt;Baeldung&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-03-31 - &lt;a href="https://www.1ju.org/article/java-openapi-generator-server"&gt;使用OpenAPI Generator實現Open API Server&lt;/a&gt; at &lt;a href="https://www.1ju.org/"&gt;億聚網&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-04-19 - &lt;a href="https://www.twilio.com/blog/introducing-twilio-open-api-specification-beta"&gt;Introducing Twilio’s OpenAPI Specification Beta&lt;/a&gt; by &lt;a href="https://www.twilio.com/blog/author/gpj"&gt;GARETH PAUL JONES&lt;/a&gt; at &lt;a href="https://www.twilio.com/blog"&gt;Twilio Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-04-22 - &lt;a href="https://medium.com/unibuddy-technology-blog/leveraging-openapi-strengths-in-a-micro-service-environment-3d7f9e7c26ff"&gt;Leveraging OpenApi strengths in a Micro-Service environment&lt;/a&gt; by Nicolas Jellab at &lt;a href="https://medium.com/unibuddy-technology-blog"&gt;Unibuddy Technology Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-04-27 - &lt;a href="https://speakerdeck.com/wing328/from-zero-to-publishing-powershell-api-clients-in-powershell-gallery-within-minutes"&gt;From zero to publishing PowerShell API clients in PowerShell Gallery within minutes&lt;/a&gt; by &lt;a href="https://github.com/wing328"&gt;William Cheng&lt;/a&gt; at &lt;a href="https://events.devopscollective.org/event/powershell-devops-global-summit-2021/"&gt;PowerShell + DevOps Global Summit 2021&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-05-31 - &lt;a href="https://aakira.app/blog/2021/05/flutter-open-api/"&gt;FlutterでOpen Api Generator(Swagger)を使う&lt;/a&gt; by &lt;a href="https://twitter.com/_a_akira"&gt;AAkira&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-06-22 - &lt;a href="https://dzone.com/articles/rest-api-documentation-and-client-generation-with"&gt;Rest API Documentation and Client Generation With OpenAPI&lt;/a&gt; by &lt;a href="https://dzone.com/users/1011797/prasanthnath.g@gmail.com.html"&gt;Prasanth Gullapalli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-07-16 - &lt;a href="https://www.youtube.com/watch?v=YrrKQHxLPpQ"&gt;銀行事業のサーバーサイド開発について / LINE 京都開発室 エンジニア採用説明会&lt;/a&gt; by 野田誠人, Robert Mitchell&lt;/li&gt; 
 &lt;li&gt;2021-07-19 - &lt;a href="https://sylhare.github.io/2021/07/19/Openapi-swagger-codegen-with-kotlin.html"&gt;OpenAPI code generation with kotlin&lt;/a&gt; by &lt;a href="https://github.com/sylhare"&gt;sylhare&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-07-29 - &lt;a href="https://dzone.com/articles/how-to-rewrite-a-huge-code-base"&gt;How To Rewrite a Huge Codebase&lt;/a&gt; by &lt;a href="https://dzone.com/users/4565446/publiusovidius.html"&gt;Curtis Poe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-08-21 - &lt;a href="https://medium.com/@flowsquad/generating-client-apis-using-swagger-part-1-2d46f13f5e92"&gt;Generating Client APIs using Swagger Part 1&lt;/a&gt; by &lt;a href="https://medium.com/@flowsquad"&gt;FlowSquad.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-09-11 - &lt;a href="https://docs.aws.amazon.com/parallelcluster/latest/ug/api-reference-v3.html"&gt;Invoking AWS ParallelCluster API&lt;/a&gt; at &lt;a href="https://docs.aws.amazon.com/parallelcluster/latest/ug/api-reference-v3.html"&gt;AWS ParallelCluster API official documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-09-20 - &lt;a href="https://www.youtube.com/watch?v=s2zMtwd5klg"&gt;OpenAPI Generator - The Babel Fish of the API World&lt;/a&gt; by &lt;a href="https://github.com/cliffano"&gt;Cliffano Subagio (Principal Engineer at Shine Solutions)&lt;/a&gt; at &lt;a href="https://www.apidays.global/australia2021/"&gt;Apidays LIVE Australia 2021&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-10-02 - &lt;a href="https://hackernoon.com/how-to-write-fewer-lines-of-code-with-the-openapi-generator"&gt;How to Write Fewer Lines of Code with the OpenAPI Generator&lt;/a&gt; by &lt;a href="https://hackernoon.com/u/alphamikle"&gt;Mikhail Alfa&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-10-12 - &lt;a href="https://www.youtube.com/watch?v=9hEsNBSqTFk"&gt;OpenAPI Generator : 4000 étoiles sur GitHub et des spaghettis&lt;/a&gt; by &lt;a href="https://github.com/jmini"&gt;Jérémie Bresson&lt;/a&gt; at &lt;a href="https://cfp.devoxx.fr/2021/speaker/jeremie_bresson"&gt;Devoxx FR 2021&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-10-17 - &lt;a href="https://richardwillis.info/blog/generate-a-type-script-http-client-from-an-open-api-spec-in-dot-net-5"&gt;Generate a TypeScript HTTP Client From An OpenAPI Spec In DotNET 5&lt;/a&gt; by &lt;a href="https://github.com/badsyntax"&gt;Richard Willis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-11-06 - &lt;a href="https://zenn.dev/woo_noo/articles/5cb09f8e2899ae782ad1"&gt;スタートアップの開発で意識したこと&lt;/a&gt; by &lt;a href="https://zenn.dev/woo_noo"&gt;woo-noo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021-11-09 - &lt;a href="https://apexlabs.ai/post/effective-software-development-using-openapi-generator"&gt;Effective Software Development using OpenAPI Generator&lt;/a&gt; by Ajil Oomme&lt;/li&gt; 
 &lt;li&gt;2021-12-07 - &lt;a href="https://betterprogramming.pub/4-use-cases-of-openapi-which-are-good-to-know-1a041f4ad71e"&gt;An Introduction to OpenAPI&lt;/a&gt; by &lt;a href="https://naamanhirschfeld.medium.com/"&gt;Na'aman Hirschfeld&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-01-02 - &lt;a href="https://arxiv.org/abs/2201.00270"&gt;Towards a secure API client generator for IoT devices&lt;/a&gt; by Anders Aaen Springborg, Martin Kaldahl Andersen, Kaare Holland Hattel, Michele Albano&lt;/li&gt; 
 &lt;li&gt;2022-02-02 - &lt;a href="https://www.youtube.com/watch?v=kPW7ccu9Yvk"&gt;Use OpenApi generator to share your models between Flutter and your backend&lt;/a&gt; by &lt;a href="https://feb2022.fluttervikings.com/speakers/guillaume_bernos"&gt;Guillaume Bernos&lt;/a&gt; at &lt;a href="https://feb2022.fluttervikings.com/"&gt;Flutter Vikings Conference 2022 (Hybrid)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-03-15 - &lt;a href="https://qiita.com/yuji38kwmt/items/824d74d4889055ab37d8"&gt;OpenAPI Specでハイフン区切りのEnum値をOpenAPI Generatorで出力すると、ハイフン区切りのまま出力される&lt;/a&gt; by &lt;a href="https://qiita.com/yuji38kwmt"&gt;yuji38kwmt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-04-01 - &lt;a href="https://techblog.zozo.com/entry/coexistence-of-openapi-and-spring"&gt;OpenAPI Generatorのコード生成とSpring Frameworkのカスタムデータバインディングを共存させる&lt;/a&gt; in &lt;a href="https://techblog.zozo.com/"&gt;ZOZO Tech Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-04-06 - &lt;a href="https://apexlabs.ai/post/openapi-generator"&gt;Effective Software Development using OpenAPI Generator&lt;/a&gt; by Ajil Oommen (Senior Flutter Developer)&lt;/li&gt; 
 &lt;li&gt;2022-05-13 - &lt;a href="https://www.youtube.com/watch?v=XC8oVn_efTw"&gt;A Path From an API To Client Libraries&lt;/a&gt; by &lt;a href="https://www.devoxx.co.uk/talk/?id=11211"&gt;Filip Srnec&lt;/a&gt; at Infobip&lt;/li&gt; 
 &lt;li&gt;2022-06-01 - &lt;a href="https://medium.com/xgeeks/api-first-using-openapi-and-spring-boot-2602c04bb0d3"&gt;API First, using OpenAPI and Spring Boot&lt;/a&gt; by &lt;a href="https://estrazulas.medium.com/"&gt;Micael Estrázulas Vianna&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-06-10 - &lt;a href="https://www.propelauth.com/post/autogenerating-clients-with-fastapi-and-github-actions"&gt;Autogenerating Clients with FastAPI and Github Actions&lt;/a&gt; by &lt;a href="https://www.propelauth.com/author/andrew"&gt;Andrew Israel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-06-12 - &lt;a href="https://medium.com/geekculture/mustache-templates-with-openapi-specs-f24711c67dec"&gt;Mustache templates with OpenAPI specs&lt;/a&gt; by &lt;a href="https://github.com/gcatanese"&gt;Beppe Catanese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-07-01 - &lt;a href="https://huongdanjava.com/generate-api-contract-using-openapi-generator-maven-plugin.html"&gt;Generate API contract using OpenAPI Generator Maven plugin&lt;/a&gt; by &lt;a href="https://huongdanjava.com/"&gt;Khanh Nguyen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-07-22 - &lt;a href="https://blog.roccoshi.top/2022/java/openapi-generator%E7%9A%84%E4%BD%BF%E7%94%A8/"&gt;使用OpenAPI Generator Maven plugin开发api优先的java客户端和服务端代码&lt;/a&gt; by &lt;a href="https://github.com/Lincest"&gt;Lincest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-08-01 - &lt;a href="https://blog.tjoyal.dev/etsy-open-api-v3/"&gt;Tutorial: Etsy Open API v3 (ruby)&lt;/a&gt; by &lt;a href="https://github.com/tjoyal"&gt;Thierry Joyal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-09-03 - &lt;a href="https://blog.kevinhu.me/2022/09/03/03-openapi-generator/"&gt;OpenAPI Generator For Go Web Development&lt;/a&gt; by &lt;a href="https://twitter.com/Oldgunix"&gt;Kevin Hu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-10-01 - &lt;a href="https://nainaistar.hatenablog.com/entry/2022/10/03/120000"&gt;OpenAPI Generatorをカスタマイズしたコードを生成する（Swagger Codegenとほぼ同じ）&lt;/a&gt; by &lt;a href="https://twitter.com/nainaistar"&gt;きり丸&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-10-21 - &lt;a href="https://zenn.dev/msksgm/articles/20221021-kotlin-spring-openapi-generator"&gt;Kotlin（Spring Boot）の API を OpenAPI Generator で自動生成&lt;/a&gt; by &lt;a href="https://zenn.dev/msksgm"&gt;msksgm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-10-26 - &lt;a href="https://www.youtube.com/watch?v=_s_if69t2iQ"&gt;Quarkus Insights #106: Quarkiverse Extension Spotlight: OpenApi Generator&lt;/a&gt; by &lt;a href="https://www.youtube.com/c/Quarkusio"&gt;Quarkusio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-11-28 - &lt;a href="https://tmsvr.com/openapi-code-generation-for-rest-apis/"&gt;The REST API implementation flow&lt;/a&gt; by &lt;a href="https://tmsvr.com/author/imre/"&gt;Imre Tömösvári&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022-12-13 - &lt;a href="https://boottechnologies-ci.medium.com/api-first-with-spring-webflux-and-openapi-generator-38b7804c4ed4"&gt;API-First with Spring WebFlux and OpenAPI Generator&lt;/a&gt; by &lt;a href="https://boottechnologies-ci.medium.com/"&gt;Eric Anicet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-01-06 - &lt;a href="https://medium.com/helidon/major-improvements-with-helidon-and-openapi-f76a0951508e"&gt;Major Improvements with Helidon and OpenAPI&lt;/a&gt; by &lt;a href="https://medium.com/@tquinno600"&gt;Tim Quinn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-02-02 - &lt;a href="https://lengrand.fr/replacing-postman-in-seconds-with-the-jetbrains-http-client/"&gt;Replacing Postman with the Jetbrains HTTP Client&lt;/a&gt; by &lt;a href="https://github.com/jlengrand"&gt;julien Lengrand-Lambert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-03-15 - &lt;a href="https://techblog.zozo.com/entry/how-to-write-openapi-for-openapi-generator"&gt;OpenAPI Generatorに適したOpenAPIの書き方&lt;/a&gt; by &lt;a href="https://techblog.zozo.com/"&gt;ZOZO Tech Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-03-19 - &lt;a href="https://link.springer.com/chapter/10.1007/978-3-031-26507-5_10"&gt;EXOGEM: Extending OpenAPI Generator for Monitoring of RESTful APIs&lt;/a&gt; by Daniel Friis Holtebo, Jannik Lucas Sommer, Magnus Mølgaard Lund, Alessandro Tibo, Junior Dongo &amp;amp; Michele Albano at "ICSOC 2022: Service-Oriented Computing – ICSOC 2022 Workshops"&lt;/li&gt; 
 &lt;li&gt;2023-03-28 - &lt;a href="https://www.linkedin.com/pulse/api-first-design-openapi-generator-jonathan-manera/"&gt;API-First Design with OpenAPI Generator&lt;/a&gt; by &lt;a href="https://www.linkedin.com/in/manerajona/"&gt;Jonathan Manera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-03-28 - &lt;a href="https://zenn.dev/msksgm/books/implementing-server-side-kotlin-development"&gt;ハンズオンで学ぶサーバーサイド Kotlin（Spring Boot&amp;amp;Arrow&amp;amp;OpenAPI Generator）v1.0.1&lt;/a&gt; by &lt;a href="https://zenn.dev/msksgm"&gt;msk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-04-01 - &lt;a href="https://testingboss.com/blog/openapi-client-generation/"&gt;OpenAPI Client Code Generation&lt;/a&gt; by Kwo Ding&lt;/li&gt; 
 &lt;li&gt;2023-04-27 - [Create an Angular Client using OpenAPI Specifications](Create an Angular Client using OpenAPI Specifications) by &lt;a href="https://pguso.medium.com/"&gt;Patric&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-05-16 - &lt;a href="https://www.adyen.com/blog/adyen-java-library"&gt;Adyen for Java developers&lt;/a&gt; by &lt;a href="https://github.com/gcatanese"&gt;Beppe Catanese, Developer Advocate, Adyen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-05-18 - &lt;a href="https://blog.51cto.com/u_15181572/6294974"&gt;如何基于 Swagger 使用 OpenAPI Generator 生成 JMeter 脚本？&lt;/a&gt; by &lt;a href="https://blog.51cto.com/u_15181572"&gt;高楼（Zee)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-06-28 - &lt;a href="https://huongdanjava.com/generate-api-contract-using-openapi-generator-maven-plugin.html"&gt;Generate API contract using OpenAPI Generator Maven plugin&lt;/a&gt; by &lt;a href="https://huongdanjava.com/"&gt;Khanh Nguyen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-06-30 - &lt;a href="https://medium.com/@ramavathvinayak/generate-client-sdks-with-openapi-generator-in-springboot-f9f012e73c0b"&gt;Generate Client SDKs with OpenApi Generator in Springboot&lt;/a&gt; by &lt;a href="https://medium.com/@ramavathvinayak"&gt;Vinayak Ramavath&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023-12-10 - &lt;a href="https://www.youtube.com/watch?v=CbNwKVV5LRM"&gt;UnityでOpenAPI Generatorを使う&lt;/a&gt; by &lt;a href="https://www.youtube.com/@souptori8417"&gt;Soup Tori&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2024-01-24 - &lt;a href="https://www.youtube.com/watch?v=0jhONfBrcKw"&gt;Comment générer des stubs wiremock avec openapi generator&lt;/a&gt; by &lt;a href="https://github.com/acouvreur"&gt;Alexis Couvreur&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2024-03-04 - &lt;a href="https://www.pullrequest.com/blog/generating-typescript-types-with-openapi-for-rest-api-consumption/"&gt;Generating TypeScript Types with OpenAPI for REST API Consumption&lt;/a&gt; by &lt;a href="https://www.pullrequest.com/"&gt;PullRequest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2024-03-07 - &lt;a href="https://medium.com/@gfox1984/fully-typed-web-apps-with-openapi-part-1-595d55766670"&gt;Fully typed Web Apps with OpenAPI (Part 1)&lt;/a&gt; by &lt;a href="https://medium.com/@gfox1984"&gt;Guillaume Renard&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2024-03-08 - &lt;a href="https://fortee.jp/phperkaigi-2024/proposal/9e2e6c38-d078-4efa-99b4-83ebf9033b34"&gt;Laravel OpenAPIによる "辛くない" スキーマ駆動開発&lt;/a&gt; by &lt;a href="https://twitter.com/KentarouTakeda"&gt;KentarouTakeda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2024-04-04 - &lt;a href="https://www.shuttle.dev/blog/2024/04/04/using-openapi-rust"&gt;Working with OpenAPI using Rust&lt;/a&gt; by &lt;a href="https://twitter.com/joshmo_dev"&gt;Joshua Mo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2024-04-08 - &lt;a href="https://medium.com/javarevisited/implement-api-first-strategy-with-openapi-generator-plugin-e4bbe7f0d778"&gt;Implement API first strategy with OpenAPI generator plugin&lt;/a&gt; by &lt;a href="https://medium.com/@wirelesser"&gt;Rui Zhou&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2024-05-06 - &lt;a href="https://www.javacodegeeks.com/openapi-generator-custom-templates.html"&gt;OpenAPI Generator Custom Templates&lt;/a&gt; by &lt;a href="https://www.javacodegeeks.com/author/mary-zheng"&gt;Mary Zheng&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2025-02-09 - &lt;a href="https://medium.com/@jugurtha.aitoufella/custom-validation-with-openapigenerator-and-spring-boot-3-34a656e815c8"&gt;Custom validation with OpenApiGenerator and Spring Boot 3&lt;/a&gt; by &lt;a href="https://medium.com/@jugurtha.aitoufella"&gt;Jugurtha Aitoufella&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2025-02-20 - &lt;a href="https://www.youtube.com/watch?v=-B33pQnGQUI"&gt;Optimizing API Integration in a Large React Application Using OpenAPI Generator&lt;/a&gt; by Stefano Marzo&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;6 - About Us&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;What's the design philosophy or principle behind OpenAPI Generator?&lt;/p&gt; 
&lt;p&gt;We focus on developer experience. The generators should produce code, config, documentation, and more that are easily understandable and consumable by users. We focused on simple use cases to start with (bottom-up approach). Since then the project and the community have grown a lot: 600k weekly downloads via NPM CLI wrapper, 30M downloads via openapi-generator-cli docker image just to highlight a few. We've gradually supported more features (e.g. oneOf, anyOf introduced in OpenAPI 3.0) in various generators and we will continue this approach to deliver something based on our understanding of user demand and what they want, and continue to add support of new features introduced in OpenAPI specification (such as v3.1 and future versions of the OpenAPI specification).&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;6.1 - OpenAPI Generator Core Team&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;OpenAPI Generator core team members are contributors who have been making significant contributions (review issues, fix bugs, make enhancements, etc) to the project on a regular basis.&lt;/p&gt; 
&lt;h4&gt;Core Team Members&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wing328"&gt;@wing328&lt;/a&gt; (2015/07) &lt;a href="https://www.patreon.com/wing328"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jimschubert"&gt;@jimschubert&lt;/a&gt; (2016/05) &lt;a href="https://www.patreon.com/jimschubert"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cbornet"&gt;@cbornet&lt;/a&gt; (2016/05)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jmini"&gt;@jmini&lt;/a&gt; (2018/04) &lt;a href="https://www.patreon.com/jmini"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/etherealjoy"&gt;@etherealjoy&lt;/a&gt; (2019/06)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span&gt;❤️&lt;/span&gt; = Link to support the contributor directly&lt;/p&gt; 
&lt;h4&gt;Template Creator&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Embedded templates are only supported in &lt;em&gt;Mustache&lt;/em&gt; format. Support for all other formats is experimental and subject to change at any time.&lt;/p&gt; 
&lt;p&gt;Here is a list of template creators:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;API Clients: 
  &lt;ul&gt; 
   &lt;li&gt;Ada: @stcarrez&lt;/li&gt; 
   &lt;li&gt;Apex: @asnelling&lt;/li&gt; 
   &lt;li&gt;Bash: @bkryza&lt;/li&gt; 
   &lt;li&gt;C: @PowerOfCreation @zhemant &lt;a href="https://www.patreon.com/zhemant"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;C++ Oat++: @Kraust&lt;/li&gt; 
   &lt;li&gt;C++ REST: @Danielku15&lt;/li&gt; 
   &lt;li&gt;C++ Tiny: @AndersSpringborg @kaareHH @michelealbano @mkakbas&lt;/li&gt; 
   &lt;li&gt;C++ UE4: @Kahncode&lt;/li&gt; 
   &lt;li&gt;C# (.NET 2.0): @who&lt;/li&gt; 
   &lt;li&gt;C# (.NET Standard 1.3 ): @Gronsak&lt;/li&gt; 
   &lt;li&gt;C# (.NET 4.5 refactored): @jimschubert &lt;a href="https://www.patreon.com/jimschubert"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;C# (GenericHost): @devhl-labs&lt;/li&gt; 
   &lt;li&gt;C# (HttpClient): @Blackclaws&lt;/li&gt; 
   &lt;li&gt;Clojure: @xhh&lt;/li&gt; 
   &lt;li&gt;Crystal: @wing328&lt;/li&gt; 
   &lt;li&gt;Dart: @yissachar&lt;/li&gt; 
   &lt;li&gt;Dart (refactor): @joernahrens&lt;/li&gt; 
   &lt;li&gt;Dart 2: @swipesight&lt;/li&gt; 
   &lt;li&gt;Dart (Jaguar): @jaumard&lt;/li&gt; 
   &lt;li&gt;Dart (Dio): @josh-burton&lt;/li&gt; 
   &lt;li&gt;Elixir: @niku&lt;/li&gt; 
   &lt;li&gt;Elm: @eriktim&lt;/li&gt; 
   &lt;li&gt;Eiffel: @jvelilla&lt;/li&gt; 
   &lt;li&gt;Erlang: @tsloughter&lt;/li&gt; 
   &lt;li&gt;Erlang (PropEr): @jfacorro @robertoaloi&lt;/li&gt; 
   &lt;li&gt;Groovy: @victorgit&lt;/li&gt; 
   &lt;li&gt;Go: @wing328 &lt;a href="https://www.patreon.com/wing328"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Go (rewritten in 2.3.0): @antihax&lt;/li&gt; 
   &lt;li&gt;Godot (GDScript): @Goutte &lt;a href="https://liberapay.com/Goutte"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Haskell (http-client): @jonschoning&lt;/li&gt; 
   &lt;li&gt;Java (Feign): @davidkiss&lt;/li&gt; 
   &lt;li&gt;Java (Retrofit): @0legg&lt;/li&gt; 
   &lt;li&gt;Java (Retrofit2): @emilianobonassi&lt;/li&gt; 
   &lt;li&gt;Java (Jersey2): @xhh&lt;/li&gt; 
   &lt;li&gt;Java (okhttp-gson): @xhh&lt;/li&gt; 
   &lt;li&gt;Java (RestTemplate): @nbruno&lt;/li&gt; 
   &lt;li&gt;Java (Spring 5 WebClient): @daonomic&lt;/li&gt; 
   &lt;li&gt;Java (Spring 6 RestClient): @nicklas2751&lt;/li&gt; 
   &lt;li&gt;Java (RESTEasy): @gayathrigs&lt;/li&gt; 
   &lt;li&gt;Java (Vertx): @lopesmcc&lt;/li&gt; 
   &lt;li&gt;Java (Google APIs Client Library): @charlescapps&lt;/li&gt; 
   &lt;li&gt;Java (Rest-assured): @viclovsky&lt;/li&gt; 
   &lt;li&gt;Java (Java 11 Native HTTP client): @bbdouglas&lt;/li&gt; 
   &lt;li&gt;Java (Apache HttpClient 5.x): @harrywhite4 @andrevegas&lt;/li&gt; 
   &lt;li&gt;Java (Helidon): @spericas @tjquinno @tvallin&lt;/li&gt; 
   &lt;li&gt;Javascript/NodeJS: @jfiala&lt;/li&gt; 
   &lt;li&gt;JavaScript (Apollo DataSource): @erithmetic&lt;/li&gt; 
   &lt;li&gt;JavaScript (Closure-annotated Angular) @achew22&lt;/li&gt; 
   &lt;li&gt;JavaScript (Flow types) @jaypea&lt;/li&gt; 
   &lt;li&gt;Jetbrains HTTP Client : @jlengrand&lt;/li&gt; 
   &lt;li&gt;JMeter: @davidkiss&lt;/li&gt; 
   &lt;li&gt;Julia: @tanmaykm&lt;/li&gt; 
   &lt;li&gt;Kotlin: @jimschubert &lt;a href="https://www.patreon.com/jimschubert"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Kotlin (MultiPlatform): @andrewemery&lt;/li&gt; 
   &lt;li&gt;Kotlin (Volley): @alisters&lt;/li&gt; 
   &lt;li&gt;Kotlin (jvm-spring-webclient): @stefankoppier&lt;/li&gt; 
   &lt;li&gt;Kotlin (jvm-spring-restclient): @stefankoppier&lt;/li&gt; 
   &lt;li&gt;Lua: @daurnimator&lt;/li&gt; 
   &lt;li&gt;N4JS: @mmews-n4&lt;/li&gt; 
   &lt;li&gt;Nim: @hokamoto&lt;/li&gt; 
   &lt;li&gt;OCaml: @cgensoul&lt;/li&gt; 
   &lt;li&gt;Perl: @wing328 &lt;a href="https://www.patreon.com/wing328"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;PHP (Guzzle): @baartosz&lt;/li&gt; 
   &lt;li&gt;PHP (with Data Transfer): @Articus&lt;/li&gt; 
   &lt;li&gt;PowerShell: @beatcracker&lt;/li&gt; 
   &lt;li&gt;PowerShell (refactored in 5.0.0): @wing328&lt;/li&gt; 
   &lt;li&gt;Python: @spacether [&lt;span&gt;❤️&lt;/span&gt;][spacether sponsorship]&lt;/li&gt; 
   &lt;li&gt;Python-Experimental: @spacether [&lt;span&gt;❤️&lt;/span&gt;][spacether sponsorship]&lt;/li&gt; 
   &lt;li&gt;Python (refactored in 7.0.0): @wing328&lt;/li&gt; 
   &lt;li&gt;R: @ramnov&lt;/li&gt; 
   &lt;li&gt;Ruby (Faraday): @meganemura @dkliban&lt;/li&gt; 
   &lt;li&gt;Ruby (HTTPX): @honeyryderchuck&lt;/li&gt; 
   &lt;li&gt;Rust: @farcaller&lt;/li&gt; 
   &lt;li&gt;Rust (rust-server): @metaswitch&lt;/li&gt; 
   &lt;li&gt;Scala (scalaz &amp;amp; http4s): @tbrown1979&lt;/li&gt; 
   &lt;li&gt;Scala (Akka): @cchafer&lt;/li&gt; 
   &lt;li&gt;Scala (sttp): @chameleon82&lt;/li&gt; 
   &lt;li&gt;Scala (sttp4): @flsh86&lt;/li&gt; 
   &lt;li&gt;Scala (scala-sttp4-jsoniter): @lbialy&lt;/li&gt; 
   &lt;li&gt;Scala (Pekko): @mickaelmagniez&lt;/li&gt; 
   &lt;li&gt;Scala (http4s): @JennyLeahy&lt;/li&gt; 
   &lt;li&gt;Swift: @tkqubo&lt;/li&gt; 
   &lt;li&gt;Swift 3: @hexelon&lt;/li&gt; 
   &lt;li&gt;Swift 4: @ehyche&lt;/li&gt; 
   &lt;li&gt;Swift 5: @4brunu&lt;/li&gt; 
   &lt;li&gt;Swift 6: @4brunu&lt;/li&gt; 
   &lt;li&gt;Swift Combine: @dydus0x14&lt;/li&gt; 
   &lt;li&gt;TypeScript (Angular1): @mhardorf&lt;/li&gt; 
   &lt;li&gt;TypeScript (Angular2): @roni-frantchi&lt;/li&gt; 
   &lt;li&gt;TypeScript (Angular6): @akehir&lt;/li&gt; 
   &lt;li&gt;TypeScript (Angular7): @topce&lt;/li&gt; 
   &lt;li&gt;TypeScript (Axios): @nicokoenig&lt;/li&gt; 
   &lt;li&gt;TypeScript (Fetch): @leonyu&lt;/li&gt; 
   &lt;li&gt;TypeScript (Inversify): @gualtierim&lt;/li&gt; 
   &lt;li&gt;TypeScript (jQuery): @bherila&lt;/li&gt; 
   &lt;li&gt;TypeScript (Nestjs): @vfrank66&lt;/li&gt; 
   &lt;li&gt;TypeScript (Node): @mhardorf&lt;/li&gt; 
   &lt;li&gt;TypeScript (Rxjs): @denyo&lt;/li&gt; 
   &lt;li&gt;TypeScript (redux-query): @petejohansonxo&lt;/li&gt; 
   &lt;li&gt;Xojo: @Topheee&lt;/li&gt; 
   &lt;li&gt;Zapier: @valmoz, @emajo&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Server Stubs 
  &lt;ul&gt; 
   &lt;li&gt;Ada: @stcarrez&lt;/li&gt; 
   &lt;li&gt;C# ASP.NET 5: @jimschubert &lt;a href="https://www.patreon.com/jimschubert"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;C# ASP.NET Core 3.0: @A-Joshi&lt;/li&gt; 
   &lt;li&gt;C# APS.NET Core 3.1: @phatcher&lt;/li&gt; 
   &lt;li&gt;C# Azure functions: @Abrhm7786&lt;/li&gt; 
   &lt;li&gt;C# NancyFX: @mstefaniuk&lt;/li&gt; 
   &lt;li&gt;C++ (Qt5 QHttpEngine): @etherealjoy&lt;/li&gt; 
   &lt;li&gt;C++ Oat++: @Kraust&lt;/li&gt; 
   &lt;li&gt;C++ Pistache: @sebymiano&lt;/li&gt; 
   &lt;li&gt;C++ Restbed: @stkrwork&lt;/li&gt; 
   &lt;li&gt;Erlang Server: @galaxie @nelsonvides&lt;/li&gt; 
   &lt;li&gt;F# (Giraffe) Server: @nmfisher&lt;/li&gt; 
   &lt;li&gt;Go Server: @guohuang&lt;/li&gt; 
   &lt;li&gt;Go Server (refactored in 7.0.0): @lwj5&lt;/li&gt; 
   &lt;li&gt;Go (Echo) Server: @ph4r5h4d&lt;/li&gt; 
   &lt;li&gt;Go (Gin) Server: @kemokemo&lt;/li&gt; 
   &lt;li&gt;GraphQL Express Server: @renepardon&lt;/li&gt; 
   &lt;li&gt;Haskell Servant: @algas&lt;/li&gt; 
   &lt;li&gt;Haskell Yesod: @yotsuya&lt;/li&gt; 
   &lt;li&gt;Java Camel: @carnevalegiacomo&lt;/li&gt; 
   &lt;li&gt;Java Dubbo: @redoom&lt;/li&gt; 
   &lt;li&gt;Java MSF4J: @sanjeewa-malalgoda&lt;/li&gt; 
   &lt;li&gt;Java Spring Boot: @diyfr&lt;/li&gt; 
   &lt;li&gt;Java Undertow: @stevehu&lt;/li&gt; 
   &lt;li&gt;Java Play Framework: @JFCote&lt;/li&gt; 
   &lt;li&gt;Java PKMST: @anshu2185 @sanshuman @rkumar-pk @ninodpillai&lt;/li&gt; 
   &lt;li&gt;Java Vert.x: @lwlee2608&lt;/li&gt; 
   &lt;li&gt;Java Micronaut: @andriy-dmytruk&lt;/li&gt; 
   &lt;li&gt;Java Helidon: @spericas @tjquinno @tvallin&lt;/li&gt; 
   &lt;li&gt;Java WireMock: &lt;a href="https://github.com/acouvreur"&gt;@acouvreur&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;JAX-RS RestEasy: @chameleon82&lt;/li&gt; 
   &lt;li&gt;JAX-RS CXF: @hiveship&lt;/li&gt; 
   &lt;li&gt;JAX-RS CXF (CDI): @nickcmaynard&lt;/li&gt; 
   &lt;li&gt;JAX-RS RestEasy (JBoss EAP): @jfiala&lt;/li&gt; 
   &lt;li&gt;Julia: @tanmaykm&lt;/li&gt; 
   &lt;li&gt;Kotlin: @jimschubert &lt;a href="https://www.patreon.com/jimschubert"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Kotlin (Spring Boot): @dr4ke616&lt;/li&gt; 
   &lt;li&gt;Kotlin (Vertx): @Wooyme&lt;/li&gt; 
   &lt;li&gt;Kotlin (JAX-RS): @anttileppa&lt;/li&gt; 
   &lt;li&gt;Kotlin Misk: @andrewwilsonnew @guiarn&lt;/li&gt; 
   &lt;li&gt;Kotlin WireMock: @stefankoppier&lt;/li&gt; 
   &lt;li&gt;NodeJS Express: @YishTish&lt;/li&gt; 
   &lt;li&gt;PHP Flight: @daniel-sc&lt;/li&gt; 
   &lt;li&gt;PHP Laravel: @renepardon&lt;/li&gt; 
   &lt;li&gt;PHP Laravel (refactor in 7.12.0): @gijs-blanken&lt;/li&gt; 
   &lt;li&gt;PHP Lumen: @abcsun&lt;/li&gt; 
   &lt;li&gt;PHP Mezzio (with Path Handler): @Articus&lt;/li&gt; 
   &lt;li&gt;PHP Slim: @jfastnacht&lt;/li&gt; 
   &lt;li&gt;PHP Slim4: &lt;a href="https://github.com/ybelenko"&gt;@ybelenko&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;PHP Symfony: @ksm2&lt;/li&gt; 
   &lt;li&gt;PHP Symfony6: @BenjaminHae&lt;/li&gt; 
   &lt;li&gt;Python FastAPI: @krjakbrjak&lt;/li&gt; 
   &lt;li&gt;Python AIOHTTP:&lt;/li&gt; 
   &lt;li&gt;Ruby on Rails 5: @zlx&lt;/li&gt; 
   &lt;li&gt;Rust (rust-server): @metaswitch&lt;/li&gt; 
   &lt;li&gt;Rust (rust-axum): @linxGnu&lt;/li&gt; 
   &lt;li&gt;Scala Akka: @Bouillie&lt;/li&gt; 
   &lt;li&gt;Scala Cask: @aaronp&lt;/li&gt; 
   &lt;li&gt;Scala Finch: @jimschubert &lt;a href="https://www.patreon.com/jimschubert"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Scala Lagom: @gmkumar2005&lt;/li&gt; 
   &lt;li&gt;Scala Play: @adigerber&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Documentation 
  &lt;ul&gt; 
   &lt;li&gt;AsciiDoc: @man-at-home&lt;/li&gt; 
   &lt;li&gt;HTML Doc 2: @jhitchcock&lt;/li&gt; 
   &lt;li&gt;Confluence Wiki: @jhitchcock&lt;/li&gt; 
   &lt;li&gt;PlantUML: @pburls&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Configuration 
  &lt;ul&gt; 
   &lt;li&gt;Apache2: @stkrwork&lt;/li&gt; 
   &lt;li&gt;k6: @mostafa&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Schema 
  &lt;ul&gt; 
   &lt;li&gt;Avro: @sgadouar&lt;/li&gt; 
   &lt;li&gt;GraphQL: @wing328 &lt;a href="https://www.patreon.com/wing328"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Ktorm: @Luiz-Monad&lt;/li&gt; 
   &lt;li&gt;MySQL: &lt;a href="https://github.com/ybelenko"&gt;@ybelenko&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;PostgreSQL: &lt;a href="https://github.com/iri"&gt;@iri&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Postman Collection: @gcatanese&lt;/li&gt; 
   &lt;li&gt;Protocol Buffer: @wing328&lt;/li&gt; 
   &lt;li&gt;WSDL: @adessoDpd&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span&gt;❤️&lt;/span&gt; = Link to support the contributor directly&lt;/p&gt; 
&lt;h4&gt;How to join the core team&lt;/h4&gt; 
&lt;p&gt;Here are the requirements to become a core team member:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;rank within top 50 in &lt;a href="https://github.com/openapitools/openapi-generator/graphs/contributors"&gt;https://github.com/openapitools/openapi-generator/graphs/contributors&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;to contribute, here are some good &lt;a href="https://github.com/openapitools/openapi-generator/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22"&gt;starting points&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;regular contributions to the project 
  &lt;ul&gt; 
   &lt;li&gt;about 3 hours per week&lt;/li&gt; 
   &lt;li&gt;for contribution, it can be addressing issues, reviewing PRs submitted by others, submitting PR to fix bugs or make enhancements, etc&lt;/li&gt; 
   &lt;li&gt;must be active in the past 3 months at the time of application&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To join the core team, please reach out to &lt;a href="mailto:team@openapitools.org"&gt;team@openapitools.org&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;To become a Template Creator, simply submit a PR for new API client (e.g. Rust, Elixir) or server stub (e.g. Ruby Grape) generator.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;6.2 - OpenAPI Generator Technical Committee&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Members of the OpenAPI Generator technical committee shoulder the following responsibilities:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Provides guidance and direction to other users&lt;/li&gt; 
 &lt;li&gt;Reviews pull requests and issues&lt;/li&gt; 
 &lt;li&gt;Improves the generator by making enhancements, fixing bugs or updating documentations&lt;/li&gt; 
 &lt;li&gt;Sets the technical direction of the generator&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Who is eligible? Those who want to join must have at least 3 PRs merged into a generator. (Exceptions can be granted to template creators or contributors who have made a lot of code changes with less than 3 merged PRs)&lt;/p&gt; 
&lt;p&gt;If you want to join the committee, please kindly apply by sending an email to &lt;a href="mailto:team@openapitools.org"&gt;team@openapitools.org&lt;/a&gt; with your Github ID.&lt;/p&gt; 
&lt;h4&gt;Members of Technical Committee&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Languages/Generators&lt;/th&gt; 
   &lt;th align="left"&gt;Member (join date)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;ActionScript&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Ada&lt;/td&gt; 
   &lt;td align="left"&gt;@stcarrez (2018/02) @michelealbano (2018/02)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Android&lt;/td&gt; 
   &lt;td align="left"&gt;@jaz-ah (2017/09)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Apex&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Bash&lt;/td&gt; 
   &lt;td align="left"&gt;@frol (2017/07) @bkryza (2017/08) @kenjones-cisco (2017/09)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;C&lt;/td&gt; 
   &lt;td align="left"&gt;@zhemant (2018/11) @ityuhui (2019/12) @michelealbano (2020/03) @eafer (2024/12)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;C++&lt;/td&gt; 
   &lt;td align="left"&gt;@ravinikam (2017/07) @stkrwork (2017/07) @etherealjoy (2018/02) @martindelille (2018/03) @muttleyxd (2019/08) @aminya (2025/05)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;C#&lt;/td&gt; 
   &lt;td align="left"&gt;@mandrean (2017/08) @shibayan (2020/02) @Blackclaws (2021/03) @lucamazzanti (2021/05) @iBicha (2023/07)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Clojure&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Crystal&lt;/td&gt; 
   &lt;td align="left"&gt;@cyangle (2021/01)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Dart&lt;/td&gt; 
   &lt;td align="left"&gt;@jaumard (2018/09) @josh-burton (2019/12) @amondnet (2019/12) @sbu-WBT (2020/12) @kuhnroyal (2020/12) @agilob (2020/12) @ahmednfwela (2021/08)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Eiffel&lt;/td&gt; 
   &lt;td align="left"&gt;@jvelilla (2017/09)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Elixir&lt;/td&gt; 
   &lt;td align="left"&gt;@mrmstn (2018/12)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Elm&lt;/td&gt; 
   &lt;td align="left"&gt;@eriktim (2018/09)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Erlang&lt;/td&gt; 
   &lt;td align="left"&gt;@tsloughter (2017/11) @jfacorro (2018/10) @robertoaloi (2018/10) @nelsonvides (2024/09)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;F#&lt;/td&gt; 
   &lt;td align="left"&gt;@nmfisher (2019/05)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Go&lt;/td&gt; 
   &lt;td align="left"&gt;@antihax (2017/11) @grokify (2018/07) @kemokemo (2018/09) @jirikuncar (2021/01) @ph4r5h4d (2021/04) @lwj5 (2023/04)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;GraphQL&lt;/td&gt; 
   &lt;td align="left"&gt;@renepardon (2018/12)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Groovy&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Haskell&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Java&lt;/td&gt; 
   &lt;td align="left"&gt;@bbdouglas (2017/07) @sreeshas (2017/08) @jfiala (2017/08) @lukoyanov (2017/09) @cbornet (2017/09) @jeff9finger (2018/01) @karismann (2019/03) @Zomzog (2019/04) @lwlee2608 (2019/10) @martin-mfg (2023/08)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Java Spring&lt;/td&gt; 
   &lt;td align="left"&gt;@cachescrubber (2022/02) @welshm (2022/02) @MelleD (2022/02) @atextor (2022/02) @manedev79 (2022/02) @javisst (2022/02) @borsch (2022/02) @banlevente (2022/02) @Zomzog (2022/09) @martin-mfg (2023/08)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;JMeter&lt;/td&gt; 
   &lt;td align="left"&gt;@kannkyo (2021/01)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Jetbrains HTTP Client&lt;/td&gt; 
   &lt;td align="left"&gt;@jlengrand (2023/01)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Julia&lt;/td&gt; 
   &lt;td align="left"&gt;@tanmaykm (2023/01)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Kotlin&lt;/td&gt; 
   &lt;td align="left"&gt;@karismann (2019/03) @Zomzog (2019/04) @andrewemery (2019/10) @4brunu (2019/11) @yutaka0m (2020/03) @stefankoppier (2022/06) @e5l (2024/10)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Lua&lt;/td&gt; 
   &lt;td align="left"&gt;@daurnimator (2017/08)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;N4JS&lt;/td&gt; 
   &lt;td align="left"&gt;@mmews-n4 (2023/03)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Nim&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;NodeJS/Javascript&lt;/td&gt; 
   &lt;td align="left"&gt;@CodeNinjai (2017/07) @frol (2017/07) @cliffano (2017/07)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;ObjC&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;OCaml&lt;/td&gt; 
   &lt;td align="left"&gt;@cgensoul (2019/08), @sir4ur0n (2025/08)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Perl&lt;/td&gt; 
   &lt;td align="left"&gt;@wing328 (2017/07) &lt;a href="https://www.patreon.com/wing328"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt; @yue9944882 (2019/06)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;PHP&lt;/td&gt; 
   &lt;td align="left"&gt;@jebentier (2017/07), @dkarlovi (2017/07), @mandrean (2017/08), @jfastnacht (2017/09), &lt;a href="https://github.com/ybelenko"&gt;@ybelenko&lt;/a&gt; (2018/07), @renepardon (2018/12)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;PowerShell&lt;/td&gt; 
   &lt;td align="left"&gt;@wing328 (2020/05)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Python&lt;/td&gt; 
   &lt;td align="left"&gt;@cbornet (2017/09) @tomplus (2018/10) @krjakbrjak (2023/02) @fa0311 (2023/10) @multani (2023/10)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;R&lt;/td&gt; 
   &lt;td align="left"&gt;@Ramanth (2019/07) @saigiridhar21 (2019/07)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Ruby&lt;/td&gt; 
   &lt;td align="left"&gt;@cliffano (2017/07) @zlx (2017/09) @autopp (2019/02)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Rust&lt;/td&gt; 
   &lt;td align="left"&gt;@frol (2017/07) @farcaller (2017/08) @richardwhiuk (2019/07) @paladinzh (2020/05) @jacob-pro (2022/10) @dsteeley (2025/07)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Scala&lt;/td&gt; 
   &lt;td align="left"&gt;@clasnake (2017/07), @shijinkui (2018/01), @ramzimaalej (2018/03), @chameleon82 (2020/03), @Bouillie (2020/04) @fish86 (2023/06)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Swift&lt;/td&gt; 
   &lt;td align="left"&gt;@jgavris (2017/07) @ehyche (2017/08) @Edubits (2017/09) @jaz-ah (2017/09) @4brunu (2019/11) @dydus0x14 (2023/06)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;TypeScript&lt;/td&gt; 
   &lt;td align="left"&gt;@TiFu (2017/07) @taxpon (2017/07) @sebastianhaas (2017/07) @kenisteward (2017/07) @Vrolijkx (2017/09) @macjohnny (2018/01) @topce (2018/10) @akehir (2019/07) @petejohansonxo (2019/11) @amakhrov (2020/02) @davidgamero (2022/03) @mkusaka (2022/04) @joscha (2024/10)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Xojo&lt;/td&gt; 
   &lt;td align="left"&gt;@Topheee (2023/04)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Past Members of Technical Committee:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Languages/Generators&lt;/th&gt; 
   &lt;th align="left"&gt;Member (join date)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Python&lt;/td&gt; 
   &lt;td align="left"&gt;@taxpon (2017/07) @frol (2017/07) @mbohlool (2017/07) @cbornet (2017/09) @kenjones-cisco (2017/11) @tomplus (2018/10) @arun-nalla (2019/11)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;span&gt;❤️&lt;/span&gt; = Link to support the contributor directly&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;6.3 - History of OpenAPI Generator&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;OpenAPI Generator is a fork of &lt;a href="https://github.com/swagger-api/swagger-codegen"&gt;Swagger Codegen&lt;/a&gt;. In view of the issues with the Swagger Codegen 3.0.0 (beta) release and the disagreement on the project's direction, more than 40 top contributors and template creators of Swagger Codegen decided to fork Swagger Codegen and maintain a community-driven version called "OpenAPI Generator". Please refer to the &lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/qna.md"&gt;Q&amp;amp;A&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h4&gt;Founding Members (alphabetical order):&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ackintosh"&gt;Akihito Nakano&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/galaxie"&gt;Artem Ocheredko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Articus"&gt;Arthur Mogliev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bkryza"&gt;Bartek Kryza&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bvwells"&gt;Ben Wells&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bjgill"&gt;Benjamin Gill&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cbornet"&gt;Christophe Bornet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cliffano"&gt;Cliffano Subagio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/d-date"&gt;Daiki Matsudate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Danielku15"&gt;Daniel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilianobonassi"&gt;Emiliano Bonassi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/eriktim"&gt;Erik Timmers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/macjohnny"&gt;Esteban Gehring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gustavoapaz"&gt;Gustavo Paz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jvelilla"&gt;Javier Velilla&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JFCote"&gt;Jean-François Côté&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jimschubert"&gt;Jim Schubert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jonschoning"&gt;Jon Schoning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jmini"&gt;Jérémie Bresson&lt;/a&gt; &lt;a href="https://www.patreon.com/jmini"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jayearn"&gt;Jörn Ahrens&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kenisteward"&gt;Keni Steward&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mstefaniuk"&gt;Marcin Stefaniuk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MartinDelille"&gt;Martin Delille&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/algas"&gt;Masahiro Yamauchi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/michelealbano"&gt;Michele Albano&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ramzimaalej"&gt;Ramzi Maalej&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ravinikam"&gt;Ravindra Nikam&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ricardona"&gt;Ricardo Cardona&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sebastianhaas"&gt;Sebastian Haas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mandrean"&gt;Sebastian Mandrean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sreeshas"&gt;Sreenidhi Sreesha&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stkrwork"&gt;Stefan Krismann&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stcarrez"&gt;Stephane Carrez&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/taxpon"&gt;Takuro Wada&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tomplus"&gt;Tomasz Prus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tsloughter"&gt;Tristan Sloughter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/viclovsky"&gt;Victor Orlovsky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/victorgit"&gt;Victor Trakhtenberg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/frol"&gt;Vlad Frolov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/farcaller"&gt;Vladimir Pouzanov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wing328"&gt;William Cheng&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xmeng1"&gt;Xin Meng&lt;/a&gt; &lt;a href="https://www.patreon.com/user/overview?u=16435385"&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xhh"&gt;Xu Hui Hui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/antihax"&gt;antihax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/beatcracker"&gt;beatcracker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https:/github.com/daurnimator"&gt;daurnimator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/etherealjoy"&gt;etherealjoy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jfiala"&gt;jfiala&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lukoyanov"&gt;lukoyanov&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span&gt;❤️&lt;/span&gt; = Link to support the contributor directly&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/#table-of-contents"&gt;7 - License&lt;/a&gt;&lt;/h2&gt; 
&lt;hr /&gt; 
&lt;p&gt;Copyright 2018 OpenAPI-Generator Contributors (&lt;a href="https://openapi-generator.tech"&gt;https://openapi-generator.tech&lt;/a&gt;) Copyright 2018 SmartBear Software&lt;/p&gt; 
&lt;p&gt;Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; 
&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>apache/dolphinscheduler</title>
      <link>https://github.com/apache/dolphinscheduler</link>
      <description>&lt;p&gt;Apache DolphinScheduler is the modern data orchestration platform. Agile to create high performance workflow with low-code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Dolphinscheduler&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://www.apache.org/licenses/LICENSE-2.0.html"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;img src="https://codecov.io/gh/apache/dolphinscheduler/branch/dev/graph/badge.svg?sanitize=true" alt="codecov" /&gt; &lt;a href="https://sonarcloud.io/dashboard?id=apache-dolphinscheduler"&gt;&lt;img src="https://sonarcloud.io/api/project_badges/measure?project=apache-dolphinscheduler&amp;amp;metric=alert_status" alt="Quality Gate Status" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/dolphinschedule"&gt;&lt;img src="https://img.shields.io/twitter/follow/dolphinschedule.svg?style=social&amp;amp;label=Follow" alt="Twitter Follow" /&gt;&lt;/a&gt; 
 &lt;!-- markdown-link-check-disable-line --&gt; &lt;a href="https://s.apache.org/dolphinscheduler-slack"&gt;&lt;img src="https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&amp;amp;style=social" alt="Slack Status" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/README_zh_CN.md"&gt;&lt;img src="https://img.shields.io/badge/%E6%96%87%E6%A1%A3-%E4%B8%AD%E6%96%87%E7%89%88-blue.svg?sanitize=true" alt="CN doc" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Apache DolphinScheduler is a modern data orchestration platform that empowers agile, low-code development of high-performance workflows. It is dedicated to handling complex task dependencies in data pipelines, and provides a wide range of built-in job types ** out of the box**&lt;/p&gt; 
&lt;p&gt;Key features for DolphinScheduler are as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Easy to deploy, provides four deployment modes including Standalone, Cluster, Docker and Kubernetes.&lt;/li&gt; 
 &lt;li&gt;Easy to use, workflows can be created and managed via Web UI, &lt;a href="https://dolphinscheduler.apache.org/python/main/index.html"&gt;Python SDK&lt;/a&gt; or Open API&lt;/li&gt; 
 &lt;li&gt;Highly reliable and high availability, with a decentralized, multi-master and multi-worker architecture and native supports for horizontal scaling.&lt;/li&gt; 
 &lt;li&gt;High performance, its performance is several times faster than other orchestration platforms, and it is capable of handling tens of millions of tasks per day&lt;/li&gt; 
 &lt;li&gt;Cloud Native, DolphinScheduler supports orchestrating workflows cross multiple clouds and data centers, and allows custom task types&lt;/li&gt; 
 &lt;li&gt;Workflow Versioning, provides version control for both workflows and individual workflow instances, including tasks.&lt;/li&gt; 
 &lt;li&gt;Flexible state control of workflows and tasks, supports pause/stop/recover them in any time&lt;/li&gt; 
 &lt;li&gt;Multi-tenancy support&lt;/li&gt; 
 &lt;li&gt;Additional features, backfill support(Web UI native), permission control including project and data source etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;QuickStart&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;For quick experience 
  &lt;ul&gt; 
   &lt;li&gt;Want to &lt;a href="https://dolphinscheduler.apache.org/en-us/docs/3.3.0-alpha/guide/installation/standalone"&gt;start with standalone&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Want to &lt;a href="https://dolphinscheduler.apache.org/en-us/docs/3.3.0-alpha/guide/start/docker"&gt;start with Docker&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;For Kubernetes 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://dolphinscheduler.apache.org/en-us/docs/3.3.0-alpha/guide/installation/kubernetes"&gt;Start with Kubernetes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;For Terraform 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/deploy/terraform/README.md"&gt;Start with Terraform&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;User Interface Screenshots&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Homepage:&lt;/strong&gt; Project and workflow overview, including the latest workflow instance and task instance status statistics. &lt;img src="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/images/home.png" alt="home" /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Workflow Definition:&lt;/strong&gt; Create and manage workflows by drag and drop, easy to build and maintain complex workflows, support &lt;a href="https://dolphinscheduler.apache.org/en-us/docs/3.3.0-alpha/introduction-to-functions_menu/task_menu"&gt;a wide range of tasks&lt;/a&gt; out of box. &lt;img src="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/images/workflow-definition.png" alt="workflow-definition" /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Workflow Tree View:&lt;/strong&gt; Abstract tree structure could provide a clearer understanding of task relationships &lt;img src="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/images/workflow-tree.png" alt="workflow-tree" /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data source:&lt;/strong&gt; Supports multiple external data sources, provides unified data access capabilities for MySQL, PostgreSQL, Hive, Trino, etc. &lt;img src="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/images/data-source.png" alt="data-source" /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Monitor:&lt;/strong&gt; View the status of the master, worker and database in real time, including server resource usage and load, do quick health check without logging in to the server. &lt;img src="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/images/monitor.png" alt="monitor" /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Suggestions &amp;amp; Bug Reports&lt;/h2&gt; 
&lt;p&gt;Follow &lt;a href="https://github.com/apache/dolphinscheduler/issues/new/choose"&gt;this guide&lt;/a&gt; to report your suggestions or bugs.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The community welcomes contributions from everyone. Please refer to this page to find out more details: &lt;a href="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/docs/docs/en/contribute/join/contribute.md"&gt;How to contribute&lt;/a&gt;. Check out good first issue in &lt;a href="https://github.com/apache/dolphinscheduler/contribute"&gt;here&lt;/a&gt; if you are new to DolphinScheduler.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Welcome to join the Apache DolphinScheduler community by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join the &lt;a href="https://s.apache.org/dolphinscheduler-slack"&gt;DolphinScheduler Slack&lt;/a&gt; to keep in touch with the community&lt;/li&gt; 
 &lt;li&gt;Follow the &lt;a href="https://twitter.com/dolphinschedule"&gt;DolphinScheduler Twitter&lt;/a&gt; and get the latest news 
  &lt;!-- markdown-link-check-disable-line --&gt;&lt;/li&gt; 
 &lt;li&gt;Subscribe DolphinScheduler mail list, &lt;a href="mailto:users-subscribe@dolphinscheduler.apache.org"&gt;users@dolphinscheduler.apache.org&lt;/a&gt; for users and &lt;a href="mailto:dev-subscribe@dolphinscheduler.apache.org"&gt;dev@dolphinscheduler.apache.org&lt;/a&gt; for developers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Landscapes&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;br /&gt;&lt;br /&gt; &lt;img src="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/images/cncf-landscape-white-bg.jpg" width="175" alt="cncf-landscape" /&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://raw.githubusercontent.com/apache/dolphinscheduler/dev/images/cncf-white-bg.jpg" width="200" alt="cncf-logo" /&gt; &lt;br /&gt;&lt;br /&gt; DolphinScheduler enriches the &lt;a href="https://landscape.cncf.io/?item=orchestration-management--scheduling-orchestration--dolphinscheduler"&gt;CNCF CLOUD NATIVE Landscape.&lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apache/rocketmq</title>
      <link>https://github.com/apache/rocketmq</link>
      <description>&lt;p&gt;Apache RocketMQ is a cloud native messaging and streaming platform, making it simple to build event-driven applications.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Apache RocketMQ&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/apache/rocketmq/actions/workflows/maven.yaml"&gt;&lt;img src="https://github.com/apache/rocketmq/actions/workflows/maven.yaml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/apache/rocketmq"&gt;&lt;img src="https://codecov.io/gh/apache/rocketmq/branch/master/graph/badge.svg?sanitize=true" alt="CodeCov" /&gt;&lt;/a&gt; &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Corg.apache.rocketmq"&gt;&lt;img src="https://maven-badges.herokuapp.com/maven-central/org.apache.rocketmq/rocketmq-all/badge.svg?sanitize=true" alt="Maven Central" /&gt;&lt;/a&gt; &lt;a href="https://www.apache.org/licenses/LICENSE-2.0.html"&gt;&lt;img src="https://img.shields.io/badge/release-download-orange.svg?sanitize=true" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://www.apache.org/licenses/LICENSE-2.0.html"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="http://isitmaintained.com/project/apache/rocketmq"&gt;&lt;img src="http://isitmaintained.com/badge/open/apache/rocketmq.svg?sanitize=true" alt="Average Time to Resolve An Issue" /&gt;&lt;/a&gt; &lt;a href="http://isitmaintained.com/project/apache/rocketmq"&gt;&lt;img src="http://isitmaintained.com/badge/resolution/apache/rocketmq.svg?sanitize=true" alt="Percentage of Issues Still Open" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=ApacheRocketMQ"&gt;&lt;img src="https://img.shields.io/twitter/follow/ApacheRocketMQ?style=social" alt="Twitter Follow" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://rocketmq.apache.org"&gt;Apache RocketMQ&lt;/a&gt; is a distributed messaging and streaming platform with low latency, high performance and reliability, trillion-level capacity and flexible scalability.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It offers a variety of features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Messaging patterns including publish/subscribe, request/reply and streaming&lt;/li&gt; 
 &lt;li&gt;Financial grade transactional message&lt;/li&gt; 
 &lt;li&gt;Built-in fault tolerance and high availability configuration options based on &lt;a href="https://raw.githubusercontent.com/apache/rocketmq/develop/docs/en/controller/quick_start.md"&gt;DLedger Controller&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Built-in message tracing capability, also supports opentracing&lt;/li&gt; 
 &lt;li&gt;Versatile big-data and streaming ecosystem integration&lt;/li&gt; 
 &lt;li&gt;Message retroactivity by time or offset&lt;/li&gt; 
 &lt;li&gt;Reliable FIFO and strict ordered messaging in the same queue&lt;/li&gt; 
 &lt;li&gt;Efficient pull and push consumption model&lt;/li&gt; 
 &lt;li&gt;Million-level message accumulation capacity in a single queue&lt;/li&gt; 
 &lt;li&gt;Multiple messaging protocols like gRPC, MQTT, JMS and OpenMessaging&lt;/li&gt; 
 &lt;li&gt;Flexible distributed scale-out deployment architecture&lt;/li&gt; 
 &lt;li&gt;Lightning-fast batch message exchange system&lt;/li&gt; 
 &lt;li&gt;Various message filter mechanics such as SQL and Tag&lt;/li&gt; 
 &lt;li&gt;Docker images for isolated testing and cloud isolated clusters&lt;/li&gt; 
 &lt;li&gt;Feature-rich administrative dashboard for configuration, metrics and monitoring&lt;/li&gt; 
 &lt;li&gt;Authentication and authorization&lt;/li&gt; 
 &lt;li&gt;Free open source connectors, for both sources and sinks&lt;/li&gt; 
 &lt;li&gt;Lightweight real-time computing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;This paragraph guides you through steps of installing RocketMQ in different ways. For local development and testing, only one instance will be created for each component.&lt;/p&gt; 
&lt;h3&gt;Run RocketMQ locally&lt;/h3&gt; 
&lt;p&gt;RocketMQ runs on all major operating systems and requires only a Java JDK version 8 or higher to be installed. To check, run &lt;code&gt;java -version&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ java -version
java version "1.8.0_121"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Windows users, click &lt;a href="https://dist.apache.org/repos/dist/release/rocketmq/5.3.3/rocketmq-all-5.3.3-bin-release.zip"&gt;here&lt;/a&gt; to download the 5.3.3 RocketMQ binary release, unpack it to your local disk, such as &lt;code&gt;D:\rocketmq&lt;/code&gt;. For macOS and Linux users, execute following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Download release from the Apache mirror
$ wget https://dist.apache.org/repos/dist/release/rocketmq/5.3.3/rocketmq-all-5.3.3-bin-release.zip

# Unpack the release
$ unzip rocketmq-all-5.3.3-bin-release.zip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Prepare a terminal and change to the extracted &lt;code&gt;bin&lt;/code&gt; directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cd rocketmq-all-5.3.3-bin-release/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;1) Start NameServer&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;NameServer will be listening at &lt;code&gt;0.0.0.0:9876&lt;/code&gt;, make sure that the port is not used by others on the local machine, and then do as follows.&lt;/p&gt; 
&lt;p&gt;For macOS and Linux users:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;### start Name Server
$ nohup sh mqnamesrv &amp;amp;

### check whether Name Server is successfully started
$ tail -f ~/logs/rocketmqlogs/namesrv.log
The Name Server boot success...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Windows users, you need to set environment variables first:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;From the desktop, right click the Computer icon.&lt;/li&gt; 
 &lt;li&gt;Choose Properties from the context menu.&lt;/li&gt; 
 &lt;li&gt;Click the Advanced system settings link.&lt;/li&gt; 
 &lt;li&gt;Click Environment Variables.&lt;/li&gt; 
 &lt;li&gt;Add Environment &lt;code&gt;ROCKETMQ_HOME="D:\rocketmq"&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then change directory to rocketmq, type and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ mqnamesrv.cmd
The Name Server boot success...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2) Start Broker&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;For macOS and Linux users:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;### start Broker
$ nohup sh bin/mqbroker -n localhost:9876 &amp;amp;

### check whether Broker is successfully started, eg: Broker's IP is 192.168.1.2, Broker's name is broker-a
$ tail -f ~/logs/rocketmqlogs/broker.log
The broker[broker-a, 192.169.1.2:10911] boot success...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Windows users:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ mqbroker.cmd -n localhost:9876
The broker[broker-a, 192.169.1.2:10911] boot success...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run RocketMQ in Docker&lt;/h3&gt; 
&lt;p&gt;You can run RocketMQ on your own machine within Docker containers, &lt;code&gt;host&lt;/code&gt; network will be used to expose listening port in the container.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1) Start NameServer&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ docker run -it --net=host apache/rocketmq ./mqnamesrv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2) Start Broker&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ docker run -it --net=host --mount type=bind,source=/tmp/store,target=/home/rocketmq/store apache/rocketmq ./mqbroker -n localhost:9876
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run RocketMQ in Kubernetes&lt;/h3&gt; 
&lt;p&gt;You can also run a RocketMQ cluster within a Kubernetes cluster using &lt;a href="https://github.com/apache/rocketmq-operator"&gt;RocketMQ Operator&lt;/a&gt;. Before your operations, make sure that &lt;code&gt;kubectl&lt;/code&gt; and related kubeconfig file installed on your machine.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1) Install CRDs&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;### install CRDs
$ git clone https://github.com/apache/rocketmq-operator
$ cd rocketmq-operator &amp;amp;&amp;amp; make deploy

### check whether CRDs are successfully installed
$ kubectl get crd | grep rocketmq.apache.org
brokers.rocketmq.apache.org                 2022-05-12T09:23:18Z
consoles.rocketmq.apache.org                2022-05-12T09:23:19Z
nameservices.rocketmq.apache.org            2022-05-12T09:23:18Z
topictransfers.rocketmq.apache.org          2022-05-12T09:23:19Z

### check whether operator is running
$ kubectl get pods | grep rocketmq-operator
rocketmq-operator-6f65c77c49-8hwmj   1/1     Running   0          93s
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2) Create Cluster Instance&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;### create RocketMQ cluster resource
$ cd example &amp;amp;&amp;amp; kubectl create -f rocketmq_v1alpha1_rocketmq_cluster.yaml

### check whether cluster resources are running
$ kubectl get sts
NAME                 READY   AGE
broker-0-master      1/1     107m
broker-0-replica-1   1/1     107m
name-service         1/1     107m
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Apache RocketMQ Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-streams"&gt;RocketMQ Streams&lt;/a&gt;: A lightweight stream computing engine based on Apache RocketMQ.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-flink"&gt;RocketMQ Flink&lt;/a&gt;: The Apache RocketMQ connector of Apache Flink that supports source and sink connector in data stream and Table.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-apis"&gt;RocketMQ APIs&lt;/a&gt;: RocketMQ protobuf protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-clients"&gt;RocketMQ Clients&lt;/a&gt;: gRPC/protobuf-based RocketMQ clients.&lt;/li&gt; 
 &lt;li&gt;RocketMQ Remoting-based Clients 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-client-cpp"&gt;RocketMQ Client CPP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-client-go"&gt;RocketMQ Client Go&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-client-python"&gt;RocketMQ Client Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-client-nodejs"&gt;RocketMQ Client Nodejs&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-spring"&gt;RocketMQ Spring&lt;/a&gt;: A project which helps developers quickly integrate Apache RocketMQ with Spring Boot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-exporter"&gt;RocketMQ Exporter&lt;/a&gt;: An Apache RocketMQ exporter for Prometheus.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-operator"&gt;RocketMQ Operator&lt;/a&gt;: Providing a way to run an Apache RocketMQ cluster on Kubernetes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-docker"&gt;RocketMQ Docker&lt;/a&gt;: The Git repo of the Docker Image for Apache RocketMQ.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-dashboard"&gt;RocketMQ Dashboard&lt;/a&gt;: Operation and maintenance console of Apache RocketMQ.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-connect"&gt;RocketMQ Connect&lt;/a&gt;: A tool for scalably and reliably streaming data between Apache RocketMQ and other systems.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-mqtt"&gt;RocketMQ MQTT&lt;/a&gt;: A new MQTT protocol architecture model, based on which Apache RocketMQ can better support messages from terminals such as IoT devices and Mobile APP.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-eventbridge"&gt;RocketMQ EventBridge&lt;/a&gt;: EventBridge makes it easier to build an event-driven application.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-externals"&gt;RocketMQ Incubating Community Projects&lt;/a&gt;: Incubator community projects of Apache RocketMQ, including &lt;a href="https://github.com/apache/rocketmq-externals/tree/master/logappender"&gt;logappender&lt;/a&gt;, &lt;a href="https://github.com/apache/rocketmq-externals/tree/master/rocketmq-ansible"&gt;rocketmq-ansible&lt;/a&gt;, &lt;a href="https://github.com/apache/rocketmq-externals/tree/master/rocketmq-beats-integration"&gt;rocketmq-beats-integration&lt;/a&gt;, &lt;a href="https://github.com/apache/rocketmq-externals/tree/master/rocketmq-cloudevents-binding"&gt;rocketmq-cloudevents-binding&lt;/a&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-site"&gt;RocketMQ Site&lt;/a&gt;: The repository for Apache RocketMQ website.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/rocketmq-e2e"&gt;RocketMQ E2E&lt;/a&gt;: A project for testing Apache RocketMQ, including end-to-end, performance, compatibility tests.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Learn it &amp;amp; Contact us&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Mailing Lists: &lt;a href="https://rocketmq.apache.org/about/contact/"&gt;https://rocketmq.apache.org/about/contact/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Home: &lt;a href="https://rocketmq.apache.org"&gt;https://rocketmq.apache.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Docs: &lt;a href="https://rocketmq.apache.org/docs/quick-start/"&gt;https://rocketmq.apache.org/docs/quick-start/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Issues: &lt;a href="https://github.com/apache/rocketmq/issues"&gt;https://github.com/apache/rocketmq/issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rips: &lt;a href="https://github.com/apache/rocketmq/wiki/RocketMQ-Improvement-Proposal"&gt;https://github.com/apache/rocketmq/wiki/RocketMQ-Improvement-Proposal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ask: &lt;a href="https://stackoverflow.com/questions/tagged/rocketmq"&gt;https://stackoverflow.com/questions/tagged/rocketmq&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Slack: &lt;a href="https://rocketmq-invite-automation.herokuapp.com/"&gt;https://rocketmq-invite-automation.herokuapp.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We always welcome new contributions, whether for trivial cleanups, &lt;a href="https://github.com/apache/rocketmq/wiki/RocketMQ-Improvement-Proposal"&gt;big new features&lt;/a&gt; or other material rewards, more details see &lt;a href="http://rocketmq.apache.org/docs/how-to-contribute/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0.html"&gt;Apache License, Version 2.0&lt;/a&gt; Copyright (C) Apache Software Foundation&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Export Control Notice&lt;/h2&gt; 
&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href="http://www.wassenaar.org/"&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this Apache Software Foundation distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt; 
&lt;p&gt;The following provides more details on the included cryptographic software:&lt;/p&gt; 
&lt;p&gt;This software uses Apache Commons Crypto (&lt;a href="https://commons.apache.org/proper/commons-crypto/"&gt;https://commons.apache.org/proper/commons-crypto/&lt;/a&gt;) to support authentication, and encryption and decryption of data sent across the network between services.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>liferay/liferay-portal</title>
      <link>https://github.com/liferay/liferay-portal</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Liferay Development Team&lt;/h1&gt; 
&lt;p&gt;Liferay Portal is produced by the worldwide Liferay engineering team and represents many hours of development, testing, writing documentation, and working with the wider Liferay community of customers, partners, and open source developers. We are glad you have chosen Liferay Portal and hope that it meets or exceeds your expectations!&lt;/p&gt; 
&lt;p&gt;In addition to Liferay's engineering staff, a special thanks goes to the many open source developers who volunteer their time and energy to help with the release, with bug fixing, idea generation, documentation, translations, or other contributions that helped improve this release.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;SPDX-License-Identifier: (LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06)&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;LICENSING.md&lt;/code&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DependencyTrack/dependency-track</title>
      <link>https://github.com/DependencyTrack/dependency-track</link>
      <description>&lt;p&gt;Dependency-Track is an intelligent Component Analysis platform that allows organizations to identify and reduce risk in the software supply chain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/DependencyTrack/dependency-track/actions?workflow=CI+Build"&gt;&lt;img src="https://github.com/DependencyTrack/dependency-track/actions/workflows/ci-build.yaml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/gh/DependencyTrack/dependency-track/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=DependencyTrack/dependency-track&amp;amp;utm_campaign=Badge_Grade"&gt;&lt;img src="https://app.codacy.com/project/badge/Grade/b2ecd06dab57438a9a55bc4a71c5a8ce" alt="Codacy Badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/stevespringett/Alpine"&gt;&lt;img src="https://img.shields.io/badge/built%20on-Alpine-blue.svg?sanitize=true" alt="Alpine" /&gt;&lt;/a&gt; &lt;a href="https://github.com/DependencyTrack/dependency-track/raw/master/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/badge/license-apache%20v2-brightgreen.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://www.owasp.org/index.php/OWASP_Dependency_Track_Project"&gt;&lt;img src="https://img.shields.io/badge/owasp-flagship%20project-orange.svg?sanitize=true" alt="OWASP Flagship" /&gt;&lt;/a&gt; &lt;a href="https://dependencytrack.org/"&gt;&lt;img src="https://img.shields.io/badge/https://-dependencytrack.org-blue.svg?sanitize=true" alt="Website" /&gt;&lt;/a&gt; &lt;a href="https://docs.dependencytrack.org/"&gt;&lt;img src="https://img.shields.io/badge/read-documentation-blue.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://dependencytrack.org/slack"&gt;&lt;img src="https://img.shields.io/badge/chat%20on-slack-46BC99.svg?sanitize=true" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://dependencytrack.org/discussion"&gt;&lt;img src="https://img.shields.io/badge/discussion-groups.io-blue.svg?sanitize=true" alt="Group Discussion" /&gt;&lt;/a&gt; &lt;a href="https://dependencytrack.org/youtube"&gt;&lt;img src="https://img.shields.io/badge/youtube-subscribe-%23c4302b.svg?sanitize=true" alt="YouTube Subscribe" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/dependencytrack"&gt;&lt;img src="https://img.shields.io/twitter/follow/dependencytrack.svg?label=Follow&amp;amp;style=social" alt="Twitter" /&gt;&lt;/a&gt; &lt;a href="https://github.com/DependencyTrack/dependency-track/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/DependencyTrack/dependency-track/total.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/DependencyTrack/dependency-track/releases"&gt;&lt;img src="https://img.shields.io/github/release/DependencyTrack/dependency-track.svg?sanitize=true" alt="Latest" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/dependencytrack/apiserver/"&gt;&lt;img src="https://img.shields.io/docker/pulls/dependencytrack/apiserver.svg?label=Docker%20Pulls%20%28API%20Server%29" alt="Pulls - API Server" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/dependencytrack/frontend/"&gt;&lt;img src="https://img.shields.io/docker/pulls/dependencytrack/frontend.svg?label=Docker%20Pulls%20%28Frontend%29" alt="Pulls - Frontend" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/dependencytrack/bundled/"&gt;&lt;img src="https://img.shields.io/docker/pulls/dependencytrack/bundled.svg?label=Docker%20Pulls%20%28Bundled%29" alt="Pulls - Bundled" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/owasp/dependency-track/"&gt;&lt;img src="https://img.shields.io/docker/pulls/owasp/dependency-track.svg?label=Docker%20Pulls%20%28OWASP%20Legacy%29" alt="Pulls - Legacy" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/DependencyTrack/branding/master/dt-logo.svg?sanitize=true" alt="logo preview" /&gt;&lt;/p&gt; 
&lt;p&gt;Dependency-Track is an intelligent &lt;a href="https://owasp.org/www-community/Component_Analysis"&gt;Component Analysis&lt;/a&gt; platform that allows organizations to identify and reduce risk in the software supply chain. Dependency-Track takes a unique and highly beneficial approach by leveraging the capabilities of &lt;a href="https://owasp.org/www-community/Component_Analysis#software-bill-of-materials-sbom"&gt;Software Bill of Materials&lt;/a&gt; (SBOM). This approach provides capabilities that traditional Software Composition Analysis (SCA) solutions cannot achieve.&lt;/p&gt; 
&lt;p&gt;Dependency-Track monitors component usage across all versions of every application in its portfolio in order to proactively identify risk across an organization. The platform has an API-first design and is ideal for use in CI/CD environments.&lt;/p&gt; 
&lt;h2&gt;Ecosystem Overview&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/DependencyTrack/dependency-track/master/docs/images/integrations.png" alt="alt text" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Consumes and produces &lt;a href="https://cyclonedx.org"&gt;CycloneDX&lt;/a&gt; Software Bill of Materials (SBOM)&lt;/li&gt; 
 &lt;li&gt;Consumes and produces &lt;a href="https://cyclonedx.org/capabilities/vex/"&gt;CycloneDX Vulnerability Exploitability Exchange (VEX)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Component support for: 
  &lt;ul&gt; 
   &lt;li&gt;Applications&lt;/li&gt; 
   &lt;li&gt;Libraries&lt;/li&gt; 
   &lt;li&gt;Frameworks&lt;/li&gt; 
   &lt;li&gt;Operating systems&lt;/li&gt; 
   &lt;li&gt;Containers&lt;/li&gt; 
   &lt;li&gt;Firmware&lt;/li&gt; 
   &lt;li&gt;Files&lt;/li&gt; 
   &lt;li&gt;Hardware&lt;/li&gt; 
   &lt;li&gt;Services&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Tracks component usage across every application in an organizations portfolio&lt;/li&gt; 
 &lt;li&gt;Quickly identify what is affected, and where&lt;/li&gt; 
 &lt;li&gt;Identifies multiple forms of risk including 
  &lt;ul&gt; 
   &lt;li&gt;Components with known vulnerabilities&lt;/li&gt; 
   &lt;li&gt;Out-of-date components&lt;/li&gt; 
   &lt;li&gt;Modified components&lt;/li&gt; 
   &lt;li&gt;License risk&lt;/li&gt; 
   &lt;li&gt;More coming soon...&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Integrates with multiple sources of vulnerability intelligence including: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://nvd.nist.gov"&gt;National Vulnerability Database&lt;/a&gt; (NVD)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.github.com/advisories"&gt;GitHub Advisories&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ossindex.sonatype.org"&gt;Sonatype OSS Index&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://snyk.io"&gt;Snyk&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.aquasec.com/products/trivy/"&gt;Trivy&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://osv.dev"&gt;OSV&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://vulndb.cyberriskanalytics.com"&gt;VulnDB&lt;/a&gt; from &lt;a href="https://www.riskbasedsecurity.com"&gt;Risk Based Security&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;More coming soon.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Helps to prioritize mitigation by incorporating support for the &lt;a href="https://www.first.org/epss/"&gt;Exploit Prediction Scoring System (EPSS)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Maintain a private vulnerability database of vulnerability components&lt;/li&gt; 
 &lt;li&gt;Robust policy engine with support for global and per-project policies 
  &lt;ul&gt; 
   &lt;li&gt;Security risk and compliance&lt;/li&gt; 
   &lt;li&gt;License risk and compliance&lt;/li&gt; 
   &lt;li&gt;Operational risk and compliance&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ecosystem agnostic with built-in repository support for: 
  &lt;ul&gt; 
   &lt;li&gt;Cargo (Rust)&lt;/li&gt; 
   &lt;li&gt;Composer (PHP)&lt;/li&gt; 
   &lt;li&gt;Gems (Ruby)&lt;/li&gt; 
   &lt;li&gt;Hex (Erlang/Elixir)&lt;/li&gt; 
   &lt;li&gt;Maven (Java)&lt;/li&gt; 
   &lt;li&gt;NPM (Javascript)&lt;/li&gt; 
   &lt;li&gt;CPAN (Perl)&lt;/li&gt; 
   &lt;li&gt;NuGet (.NET)&lt;/li&gt; 
   &lt;li&gt;PyPI (Python)&lt;/li&gt; 
   &lt;li&gt;More coming soon.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Identifies APIs and external service components including: 
  &lt;ul&gt; 
   &lt;li&gt;Service provider&lt;/li&gt; 
   &lt;li&gt;Endpoint URIs&lt;/li&gt; 
   &lt;li&gt;Data classification&lt;/li&gt; 
   &lt;li&gt;Directional flow of data&lt;/li&gt; 
   &lt;li&gt;Trust boundary traversal&lt;/li&gt; 
   &lt;li&gt;Authentication requirements&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Includes a comprehensive auditing workflow for triaging results&lt;/li&gt; 
 &lt;li&gt;Configurable notifications supporting Slack, Microsoft Teams, Mattermost, Webhooks, Webex, Email and Jira&lt;/li&gt; 
 &lt;li&gt;Supports standardized SPDX license ID’s and tracks license use by component&lt;/li&gt; 
 &lt;li&gt;Easy to read metrics for components, projects, and portfolio&lt;/li&gt; 
 &lt;li&gt;Native support for Kenna Security, Fortify SSC, ThreadFix, and DefectDojo&lt;/li&gt; 
 &lt;li&gt;API-first design facilitates easy integration with other systems&lt;/li&gt; 
 &lt;li&gt;API documentation available in OpenAPI format&lt;/li&gt; 
 &lt;li&gt;OAuth 2.0 + OpenID Connect (OIDC) support for single sign-on (authN/authZ)&lt;/li&gt; 
 &lt;li&gt;Supports internally managed users, Active Directory/LDAP, and API Keys&lt;/li&gt; 
 &lt;li&gt;Simple to install and configure. Get up and running in just a few minutes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/DependencyTrack/dependency-track/master/docs/images/screenshots/dashboard.png" alt="alt text" /&gt;&lt;/p&gt; 
&lt;h3&gt;Quickstart (Docker Compose)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Downloads the latest Docker Compose file
curl -LO https://dependencytrack.org/docker-compose.yml

# Starts the stack using Docker Compose
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Quickstart (Docker Swarm)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Downloads the latest Docker Compose file
curl -LO https://dependencytrack.org/docker-compose.yml

# Initializes Docker Swarm (if not previously initialized)
docker swarm init

# Starts the stack using Docker Swarm
docker stack deploy -c docker-compose.yml dtrack
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Quickstart (Manual Execution)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Pull the image from the Docker Hub OWASP repo
docker pull dependencytrack/bundled

# Creates a dedicated volume where data can be stored outside the container
docker volume create --name dependency-track

# Run the bundled container with 8GB RAM on port 8080
docker run -d -m 8192m -p 8080:8080 --name dependency-track -v dependency-track:/data dependencytrack/bundled
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTICE: Always use official binary releases in production.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Distributions&lt;/h2&gt; 
&lt;p&gt;Dependency-Track has three distribution variants. They are:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Package&lt;/th&gt; 
   &lt;th align="left"&gt;Package Format&lt;/th&gt; 
   &lt;th align="center"&gt;Recommended&lt;/th&gt; 
   &lt;th align="center"&gt;Supported&lt;/th&gt; 
   &lt;th align="center"&gt;Docker&lt;/th&gt; 
   &lt;th align="center"&gt;Download&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;API Server&lt;/td&gt; 
   &lt;td align="left"&gt;Executable WAR&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Frontend&lt;/td&gt; 
   &lt;td align="left"&gt;Single Page Application&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Bundled&lt;/td&gt; 
   &lt;td align="left"&gt;Executable WAR&lt;/td&gt; 
   &lt;td align="center"&gt;❌&lt;/td&gt; 
   &lt;td align="center"&gt;☑️&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
   &lt;td align="center"&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;API Server&lt;/h4&gt; 
&lt;p&gt;The API Server contains an embedded Jetty server and all server-side functionality, but excludes the frontend user interface. This variant is new as of Dependency-Track v4.0.&lt;/p&gt; 
&lt;h4&gt;Frontend&lt;/h4&gt; 
&lt;p&gt;The &lt;a href="https://github.com/DependencyTrack/frontend"&gt;Frontend&lt;/a&gt; is the user interface that is accessible in a web browser. The Frontend is a Single Page Application (SPA) that can be deployed independently of the Dependency-Track API Server. This variant is new as of Dependency-Track v3.8.&lt;/p&gt; 
&lt;h4&gt;Bundled&lt;/h4&gt; 
&lt;p&gt;The Bundled variant combines the API Server and the Frontend user interface. This variant was previously referred to as the executable war and was the preferred distribution from Dependency-Track v3.0 - v3.8. This variant is supported but deprecated and will be discontinued in a future release.&lt;/p&gt; 
&lt;h4&gt;Traditional&lt;/h4&gt; 
&lt;p&gt;The Traditional variant combines the API Server and the Frontend user interface and must be deployed to a Servlet container. This variant is not supported, deprecated, and will be discontinued in a future release.&lt;/p&gt; 
&lt;h2&gt;Deploying on Kubernetes with Helm&lt;/h2&gt; 
&lt;p&gt;Refer to &lt;a href="https://github.com/DependencyTrack/helm-charts"&gt;https://github.com/DependencyTrack/helm-charts&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Interested in contributing to Dependency-Track? Please check &lt;a href="https://raw.githubusercontent.com/DependencyTrack/dependency-track/master/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; to see how you can help!&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href="https://dependencytrack.org/"&gt;https://dependencytrack.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Documentation: &lt;a href="https://docs.dependencytrack.org/"&gt;https://docs.dependencytrack.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Component Analysis: &lt;a href="https://owasp.org/www-community/Component_Analysis"&gt;https://owasp.org/www-community/Component_Analysis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Twitter: &lt;a href="https://dependencytrack.org/twitter"&gt;https://dependencytrack.org/twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;YouTube: &lt;a href="https://dependencytrack.org/youtube"&gt;https://dependencytrack.org/youtube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Slack: &lt;a href="https://dependencytrack.org/slack"&gt;https://dependencytrack.org/slack&lt;/a&gt; (Invite: &lt;a href="https://dependencytrack.org/slack/invite"&gt;https://dependencytrack.org/slack/invite&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Discussion (Groups.io): &lt;a href="https://dependencytrack.org/discussion"&gt;https://dependencytrack.org/discussion&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Copyright &amp;amp; License&lt;/h2&gt; 
&lt;p&gt;Dependency-Track is Copyright (c) OWASP Foundation. All Rights Reserved.&lt;/p&gt; 
&lt;p&gt;Permission to modify and redistribute is granted under the terms of the &lt;a href="https://github.com/DependencyTrack/dependency-track/raw/master/LICENSE.txt"&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Dependency-Track makes use of several other open source libraries. Please see the &lt;a href="https://github.com/DependencyTrack/dependency-track/raw/master/NOTICES.txt"&gt;notices&lt;/a&gt; file for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openjdk/jdk</title>
      <link>https://github.com/openjdk/jdk</link>
      <description>&lt;p&gt;JDK main-line development https://openjdk.org/projects/jdk&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the JDK!&lt;/h1&gt; 
&lt;p&gt;For build instructions please see the &lt;a href="https://openjdk.org/groups/build/doc/building.html"&gt;online documentation&lt;/a&gt;, or either of these files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openjdk/jdk/master/doc/building.html"&gt;doc/building.html&lt;/a&gt; (html version)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openjdk/jdk/master/doc/building.md"&gt;doc/building.md&lt;/a&gt; (markdown version)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href="https://openjdk.org/"&gt;https://openjdk.org/&lt;/a&gt; for more information about the OpenJDK Community and the JDK and see &lt;a href="https://bugs.openjdk.org"&gt;https://bugs.openjdk.org&lt;/a&gt; for JDK issue tracking.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>langchain4j/langchain4j</title>
      <link>https://github.com/langchain4j/langchain4j</link>
      <description>&lt;p&gt;LangChain4j is an open-source Java library that simplifies the integration of LLMs into Java applications through a unified API, providing access to popular LLMs and vector databases. It makes implementing RAG, tool calling (including support for MCP), and agents easy. LangChain4j integrates seamlessly with various enterprise Java frameworks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LangChain for Java: Supercharge your Java application with the power of LLMs&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/langchain4j/langchain4j/actions/workflows/main.yaml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/langchain4j/langchain4j/main.yaml?branch=main&amp;amp;style=for-the-badge&amp;amp;label=CI%20BUILD&amp;amp;logo=github" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/langchain4j/langchain4j/actions/workflows/nightly_jdk17.yaml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/langchain4j/langchain4j/nightly_jdk17.yaml?branch=main&amp;amp;style=for-the-badge&amp;amp;label=NIGHTLY%20BUILD&amp;amp;logo=github" alt="Nightly Build" /&gt;&lt;/a&gt; &lt;a href="https://app.codacy.com/gh/langchain4j/langchain4j/dashboard"&gt;&lt;img src="https://img.shields.io/badge/Codacy-Dashboard-blue?style=for-the-badge&amp;amp;logo=codacy" alt="CODACY" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/JzTFvyjG6R"&gt;&lt;img src="https://dcbadge.vercel.app/api/server/JzTFvyjG6R?style=for-the-badge" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://bsky.app/profile/langchain4j.dev"&gt;&lt;img src="https://img.shields.io/badge/@langchain4j-follow-blue?logo=bluesky&amp;amp;style=for-the-badge" alt="BlueSky" /&gt;&lt;/a&gt; &lt;a href="https://x.com/langchain4j"&gt;&lt;img src="https://img.shields.io/badge/@langchain4j-follow-blue?logo=x&amp;amp;style=for-the-badge" alt="X" /&gt;&lt;/a&gt; &lt;a href="https://search.maven.org/#search%7Cgav%7C1%7Cg:%22dev.langchain4j%22%20AND%20a:%22langchain4j%22"&gt;&lt;img src="https://img.shields.io/maven-central/v/dev.langchain4j/langchain4j?logo=apachemaven&amp;amp;style=for-the-badge" alt="Maven Version" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Welcome!&lt;/p&gt; 
&lt;p&gt;The goal of LangChain4j is to simplify integrating LLMs into Java applications.&lt;/p&gt; 
&lt;p&gt;Here's how:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Unified APIs:&lt;/strong&gt; LLM providers (like OpenAI or Google Vertex AI) and embedding (vector) stores (such as Pinecone or Milvus) use proprietary APIs. LangChain4j offers a unified API to avoid the need for learning and implementing specific APIs for each of them. To experiment with different LLMs or embedding stores, you can easily switch between them without the need to rewrite your code. LangChain4j currently supports &lt;a href="https://docs.langchain4j.dev/integrations/language-models/"&gt;20+ popular LLM providers&lt;/a&gt; and &lt;a href="https://docs.langchain4j.dev/integrations/embedding-stores/"&gt;30+ embedding stores&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Comprehensive Toolbox:&lt;/strong&gt; Since early 2023, the community has been building numerous LLM-powered applications, identifying common abstractions, patterns, and techniques. LangChain4j has refined these into practical code. Our toolbox includes tools ranging from low-level prompt templating, chat memory management, and function calling to high-level patterns like Agents and RAG. For each abstraction, we provide an interface along with multiple ready-to-use implementations based on common techniques. Whether you're building a chatbot or developing a RAG with a complete pipeline from data ingestion to retrieval, LangChain4j offers a wide variety of options.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Numerous Examples:&lt;/strong&gt; These &lt;a href="https://github.com/langchain4j/langchain4j-examples"&gt;examples&lt;/a&gt; showcase how to begin creating various LLM-powered applications, providing inspiration and enabling you to start building quickly.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;LangChain4j began development in early 2023 amid the ChatGPT hype. We noticed a lack of Java counterparts to the numerous Python and JavaScript LLM libraries and frameworks, and we had to fix that! Although "LangChain" is in our name, the project is a fusion of ideas and concepts from LangChain, Haystack, LlamaIndex, and the broader community, spiced up with a touch of our own innovation.&lt;/p&gt; 
&lt;p&gt;We actively monitor community developments, aiming to quickly incorporate new techniques and integrations, ensuring you stay up-to-date. The library is under active development. While some features are still being worked on, the core functionality is in place, allowing you to start building LLM-powered apps now!&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Documentation can be found &lt;a href="https://docs.langchain4j.dev"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The documentation chatbot (experimental) can be found &lt;a href="https://chat.langchain4j.dev/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Getting started guide can be found &lt;a href="https://docs.langchain4j.dev/get-started"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Code Examples&lt;/h2&gt; 
&lt;p&gt;Please see examples of how LangChain4j can be used in &lt;a href="https://github.com/langchain4j/langchain4j-examples"&gt;langchain4j-examples&lt;/a&gt; repo:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/langchain4j/langchain4j-examples/tree/main/other-examples/src/main/java"&gt;Examples in plain Java&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples"&gt;Examples with Quarkus&lt;/a&gt; (uses &lt;a href="https://github.com/quarkiverse/quarkus-langchain4j"&gt;quarkus-langchain4j&lt;/a&gt; dependency)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/langchain4j/langchain4j-examples/tree/main/spring-boot-example/src/main/java/dev/langchain4j/example"&gt;Example with Spring Boot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/helidon-io/helidon-examples/tree/helidon-4.x/examples/integrations/langchain4j"&gt;Examples with Helidon&lt;/a&gt; (uses &lt;a href="https://mvnrepository.com/artifact/io.helidon.integrations.langchain4j"&gt;io.helidon.integrations.langchain4j&lt;/a&gt; dependency)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/micronaut-projects/micronaut-langchain4j/tree/0.3.x/doc-examples/example-openai-java"&gt;Examples with Micronaut&lt;/a&gt; (uses &lt;a href="https://micronaut-projects.github.io/micronaut-langchain4j/latest/guide/"&gt;micronaut-langchain4j&lt;/a&gt; dependency)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Useful Materials&lt;/h2&gt; 
&lt;p&gt;Useful materials can be found &lt;a href="https://docs.langchain4j.dev/useful-materials"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Get Help&lt;/h2&gt; 
&lt;p&gt;Please use &lt;a href="https://discord.gg/JzTFvyjG6R"&gt;Discord&lt;/a&gt; or &lt;a href="https://github.com/langchain4j/langchain4j/discussions"&gt;GitHub discussions&lt;/a&gt; to get help.&lt;/p&gt; 
&lt;h2&gt;Request Features&lt;/h2&gt; 
&lt;p&gt;Please let us know what features you need by &lt;a href="https://github.com/langchain4j/langchain4j/issues/new/choose"&gt;opening an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;Contribution guidelines can be found &lt;a href="https://github.com/langchain4j/langchain4j/raw/main/CONTRIBUTING.md"&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apache/hadoop</title>
      <link>https://github.com/apache/hadoop</link>
      <description>&lt;p&gt;Apache Hadoop&lt;/p&gt;&lt;hr&gt;&lt;p&gt;For the latest information about Hadoop, please visit our website at:&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://hadoop.apache.org/"&gt;http://hadoop.apache.org/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;and our wiki, at:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://cwiki.apache.org/confluence/display/HADOOP/"&gt;https://cwiki.apache.org/confluence/display/HADOOP/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apache/hive</title>
      <link>https://github.com/apache/hive</link>
      <description>&lt;p&gt;Apache Hive&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Hive (TM)&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://travis-ci.org/apache/hive/branches"&gt;&lt;img src="https://travis-ci.org/apache/hive.svg?branch=master" alt="Master Build Status" /&gt;&lt;/a&gt; &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.apache.hive%22"&gt;&lt;img src="https://maven-badges.herokuapp.com/maven-central/org.apache.hive/hive/badge.svg?sanitize=true" alt="Maven Central" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Apache Hive (TM) data warehouse software facilitates reading, writing, and managing large datasets residing in distributed storage using SQL. Built on top of Apache Hadoop (TM), it provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Tools to enable easy access to data via SQL, thus enabling data warehousing tasks such as extract/transform/load (ETL), reporting, and data analysis&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A mechanism to impose structure on a variety of data formats&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Access to files stored either directly in Apache HDFS (TM) or in other data storage systems such as Apache HBase (TM)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Query execution using Apache Tez framework, designed for interactive query, and has substantially reduced overheads versus MapReduce.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Hive provides standard SQL functionality, including many of the later 2003 and 2011 features for analytics. These include OLAP functions, subqueries, common table expressions, and more. Hive's SQL can also be extended with user code via user defined functions (UDFs), user defined aggregates (UDAFs), and user defined table functions (UDTFs).&lt;/p&gt; 
&lt;p&gt;Hive is not designed for online transaction processing. It is best used for traditional data warehousing tasks where the amount of data processed is large enough to require a distributed system. Hive is designed to maximize scalability (scale out with more machines added dynamically to the Hadoop cluster), performance, extensibility, fault-tolerance, and loose-coupling with its input formats.&lt;/p&gt; 
&lt;h1&gt;General Info&lt;/h1&gt; 
&lt;p&gt;For the latest information about Hive, please visit out website at:&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://hive.apache.org/"&gt;http://hive.apache.org/&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Installation Instructions and a quick tutorial: &lt;a href="https://hive.apache.org/development/gettingstarted-latest"&gt;https://hive.apache.org/development/gettingstarted-latest&lt;/a&gt; &lt;a href="https://hive.apache.org/development/quickstart"&gt;https://hive.apache.org/development/quickstart&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Instructions to build Hive from source: &lt;a href="https://hive.apache.org/development/gettingstarted-latest/#building-hive-from-source"&gt;https://hive.apache.org/development/gettingstarted-latest/#building-hive-from-source&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A longer tutorial that covers more features of HiveQL: &lt;a href="https://hive.apache.org/docs/latest/user/tutorial"&gt;https://hive.apache.org/docs/latest/user/tutorial&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The HiveQL Language Manual: &lt;a href="https://hive.apache.org/docs/latest/language/languagemanual"&gt;https://hive.apache.org/docs/latest/language/languagemanual&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Requirements&lt;/h1&gt; 
&lt;h2&gt;Java&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Hive Version&lt;/th&gt; 
   &lt;th align="center"&gt;Java Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hive 4.0.1&lt;/td&gt; 
   &lt;td align="center"&gt;Java 8&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hive 4.1.x&lt;/td&gt; 
   &lt;td align="center"&gt;Java 17&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hive 4.2.x&lt;/td&gt; 
   &lt;td align="center"&gt;Java 21&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Hadoop&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Hadoop 3.x&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Upgrading from older versions of Hive&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Hive includes changes to the MetaStore schema. If you are upgrading from an earlier version of Hive it is imperative that you upgrade the MetaStore schema by running the appropriate schema upgrade scripts located in the scripts/metastore/upgrade directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;We have provided upgrade scripts for MySQL, PostgreSQL, Oracle, Microsoft SQL Server, and Derby databases. If you are using a different database for your MetaStore you will need to provide your own upgrade script.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Useful mailing lists&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="mailto:user@hive.apache.org"&gt;user@hive.apache.org&lt;/a&gt; - To discuss and ask usage questions. Send an empty email to &lt;a href="mailto:user-subscribe@hive.apache.org"&gt;user-subscribe@hive.apache.org&lt;/a&gt; in order to subscribe to this mailing list.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="mailto:dev@hive.apache.org"&gt;dev@hive.apache.org&lt;/a&gt; - For discussions about code, design and features. Send an empty email to &lt;a href="mailto:dev-subscribe@hive.apache.org"&gt;dev-subscribe@hive.apache.org&lt;/a&gt; in order to subscribe to this mailing list.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="mailto:commits@hive.apache.org"&gt;commits@hive.apache.org&lt;/a&gt; - In order to monitor commits to the source repository. Send an empty email to &lt;a href="mailto:commits-subscribe@hive.apache.org"&gt;commits-subscribe@hive.apache.org&lt;/a&gt; in order to subscribe to this mailing list.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>spring-projects/spring-ai-examples</title>
      <link>https://github.com/spring-projects/spring-ai-examples</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;spring-ai-examples&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>StarRocks/starrocks</title>
      <link>https://github.com/StarRocks/starrocks</link>
      <description>&lt;p&gt;The world's fastest open query engine for sub-second analytics both on and off the data lakehouse. With the flexibility to support nearly any scenario, StarRocks provides best-in-class performance for multi-dimensional analytics, real-time analytics, and ad-hoc queries. A Linux Foundation project.&lt;/p&gt;&lt;hr&gt;&lt;img referrerpolicy="no-referrer-when-downgrade" src="https://static.scarf.sh/a.png?x-pxid=e8355b6b-a9fc-4d4e-8ed8-b3157aa1827d" /&gt; 
&lt;p align="center"&gt; &lt;a href="https://starrocks.io/index"&gt; &lt;img width="900" src="https://cdn.starrocks.io/static/github/starrocks.png?t=12234" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://starrocks.io/download/community"&gt;Download&lt;/a&gt; | &lt;a href="https://docs.starrocks.io/"&gt;Docs&lt;/a&gt; | &lt;a href="https://starrocks.io/blog/benchmark-test"&gt;Benchmarks&lt;/a&gt; | &lt;a href="https://github.com/StarRocks/demo"&gt;Demo&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://img.shields.io/badge/Made%20with-JAVA%20%26%20C%2B%2B-red" alt="JAVA&amp;amp;C++" /&gt;  &lt;img src="https://img.shields.io/github/commit-activity/m/StarRocks/starrocks" alt="Commit Activities" /&gt;  &lt;a href="https://github.com/StarRocks/starrocks/issues"&gt; &lt;img src="https://img.shields.io/github/issues-raw/StarRocks/starrocks" alt="Open Issues" /&gt; &lt;/a&gt;  &lt;a href="https://starrocks.io/index"&gt; &lt;img src="https://img.shields.io/badge/Visit%20StarRocks-Website-green" alt="Website" /&gt; &lt;/a&gt;  &lt;a href="https://try.starrocks.com/join-starrocks-on-slack"&gt; &lt;img src="https://img.shields.io/badge/Join-Slack-ff69b4" alt="Slack" /&gt; &lt;/a&gt;  &lt;a href="https://twitter.com/StarRocksLabs"&gt; &lt;img src="https://img.shields.io/twitter/follow/StarRocksLabs?style=social" alt="Twitter" /&gt; &lt;/a&gt; &lt;a href="https://gurubase.io/g/starrocks"&gt; &lt;img src="https://img.shields.io/badge/Gurubase-Ask%20StarRocks%20Guru-006BFF" alt="Gurubase" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
&lt;/div&gt; StarRocks is the world's fastest open query engine for sub-second, ad-hoc analytics both on and off the data lakehouse. With average query performance 3x faster than other popular alternatives, StarRocks is a query engine that eliminates the need for denormalization and adapts to your use cases, without having to move your data or rewrite SQL. A Linux Foundation project. 
&lt;br /&gt;
&lt;br /&gt; 
&lt;p&gt;Learn more 👉🏻 &lt;a href="https://www.youtube.com/watch?v=RfXO5GOnbW4&amp;amp;ab_channel=CelerData"&gt;What Is StarRocks: Features and Use Cases&lt;/a&gt;, Join &lt;a href="https://summit.starrocks.io/2025"&gt;StarRocks Summit 2025&lt;/a&gt;!&lt;/p&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;img src="https://cdn.starrocks.io/static/github/community.gif" /&gt;  &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;🚀 Native vectorized SQL engine:&lt;/strong&gt; StarRocks adopts vectorization technology to make full use of the parallel computing power of CPU, achieving sub-second query returns in multi-dimensional analyses, which is 5 to 10 times faster than previous systems.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📊 Standard SQL:&lt;/strong&gt; StarRocks supports ANSI SQL syntax (fully supported TPC-H and TPC-DS). It is also compatible with the MySQL protocol. Various clients and BI software can be used to access StarRocks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;💡 Smart query optimization:&lt;/strong&gt; StarRocks can optimize complex queries through CBO (Cost Based Optimizer). With a better execution plan, the data analysis efficiency will be greatly improved.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⚡ Real-time update:&lt;/strong&gt; The updated model of StarRocks can perform upsert/delete operations according to the primary key, and achieve efficient query while concurrent updates.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🪟 Intelligent materialized view:&lt;/strong&gt; The materialized view of StarRocks can be automatically updated during the data import and automatically selected when the query is executed.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✨ Querying data in data lakes directly&lt;/strong&gt;: StarRocks allows direct access to data from Apache Hive™, Apache Iceberg™, Delta Lake™ and Apache Hudi™ without importing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🎛️ Resource management&lt;/strong&gt;: This feature allows StarRocks to limit resource consumption for queries and implement isolation and efficient use of resources among tenants in the same cluster.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;💠 Easy to maintain&lt;/strong&gt;: Simple architecture makes StarRocks easy to deploy, maintain and scale out. StarRocks tunes its query plan agilely, balances the resources when the cluster is scaled in or out, and recovers the data replica under node failure automatically.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;Architecture Overview&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/StarRocks/starrocks/main/images/arch.png" /&gt;  &lt;/p&gt; 
&lt;p&gt;StarRocks’s streamlined architecture is mainly composed of two modules: Frontend (FE) and Backend (BE). The entire system eliminates single points of failure through seamless and horizontal scaling of FE and BE, as well as replication of metadata and data.&lt;/p&gt; 
&lt;p&gt;Starting from version 3.0, StarRocks supports a new shared-data architecture, which can provide better scalability and lower costs.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/StarRocks/starrocks/main/docs/en/_assets/shared-data.png" width="55%" height="55%" /&gt;  &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;h3&gt;📚 Read the docs&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Section&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.starrocks.io/docs/quick_start/"&gt;Quick Starts&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;How-tos and Tutorials.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.starrocks.io/docs/deployment/deployment_overview/"&gt;Deploy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Learn how to run and configure StarRocks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.starrocks.io/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Full documentation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.starrocks.io/blog"&gt;Blogs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;StarRocks deep dive and user stories.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;❓ Get support&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://try.starrocks.com/join-starrocks-on-slack"&gt;&lt;img align="right" width="150" src="https://firstcontributions.github.io/assets/Readme/join-slack-team.png" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://try.starrocks.com/join-starrocks-on-slack"&gt;Slack community: &lt;/a&gt; join technical discussions, ask questions, and meet other users!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC38wR-ogamk4naaWNQ45y7Q/featured"&gt;YouTube channel:&lt;/a&gt; subscribe to the latest video tutorials and webcasts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StarRocks/starrocks/issues"&gt;GitHub issues:&lt;/a&gt; report an issue with StarRocks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;Contributing to StarRocks&lt;/h2&gt; 
&lt;p&gt;We welcome all kinds of contributions from the community, individuals and partners. We owe our success to your active involvement.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;See &lt;a href="https://github.com/StarRocks/starrocks/raw/main/CONTRIBUTING.md"&gt;Contributing.md&lt;/a&gt; to get started.&lt;/li&gt; 
 &lt;li&gt;Set up StarRocks development environment:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.starrocks.io/docs/developers/development-environment/ide-setup/"&gt;IDE Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.starrocks.io/docs/developers/build-starrocks/Build_in_docker/"&gt;Compile StarRocks with Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.starrocks.io/docs/deployment/deploy_manually/"&gt;Deploy StarRocks manually&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Understand our &lt;a href="https://github.com/StarRocks/community/raw/main/Contributors/guide/workflow.md"&gt;GitHub workflow&lt;/a&gt; for opening a pull request; use this &lt;a href="https://github.com/StarRocks/starrocks/raw/main/.github/PULL_REQUEST_TEMPLATE.md"&gt;PR Template&lt;/a&gt; when submitting a pull request.&lt;/li&gt; 
 &lt;li&gt;Pick a &lt;a href="https://github.com/StarRocks/starrocks/labels/good%20first%20issue"&gt;good first issue&lt;/a&gt; and start contributing.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;📝 License:&lt;/strong&gt; StarRocks is licensed under &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;👥 Community Membership:&lt;/strong&gt; Learn more about different &lt;a href="https://raw.githubusercontent.com/StarRocks/starrocks/main/community/membership.md"&gt;contributor roles&lt;/a&gt; in StarRocks community.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;💬 Developer Group：&lt;/strong&gt; Please join our &lt;a href="https://groups.google.com/g/starrocks-dev"&gt;Google Groups&lt;/a&gt; to discuss StarRocks features, project directions, issues, pull requests, or share suggestions.&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;Used By&lt;/h2&gt; 
&lt;p&gt;This project is used by the following companies. Learn more about their use cases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AzDxEZuMBwM&amp;amp;ab_channel=StarRocks_labs"&gt;Airbnb&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/airtable-eng/live-shard-data-archive-export-and-ingestion-to-starrocks-for-validation-6af555e8b3fe"&gt;Airtable&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7N34q65mthk"&gt;Alibaba&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Jm-D0xvOtek"&gt;Celonis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3Z9jSCaHnYg&amp;amp;list=PL0eWwaesODdhBhKSnvpfIEAB9sgk8rKmy"&gt;Coinbase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://starrocks.medium.com/demandbase-ditches-denormalization-by-switching-off-clickhouse-44195d795a83"&gt;Demandbase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.starrocks.io/blog/reduced-80-cost-didis-journey-from-multiple-olap-engines-to-starrocks"&gt;Didi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qNk_-QTZk3E"&gt;Eightfold.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hbXovqR6tOc"&gt;Fanatics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/fresha-data-engineering/how-we-accidentally-became-one-of-uks-first-starrocks-production-pioneers-7db249f10010"&gt;Fresha&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://engineering.grab.com/building-a-spark-observability"&gt;Grab&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.starrocks.io/blog/haezoom-and-cloudshift-overcome-apache-druids-limits-with-starrocks"&gt;Haezoom&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/p/a7916a7e87bf"&gt;HerdWatch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tUC3FS3ki10"&gt;Intuit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/starrocks-engineering/real-time-analytics-at-scale-why-we-use-starrocks-0aa3c859cbeb"&gt;iQiyi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://starrocks.medium.com/how-join-changed-how-we-approach-data-infra-at-naver-3a5bb1dac49f"&gt;Naver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/pinterest-engineering/delivering-faster-analytics-at-pinterest-a639cdfad374"&gt;Pinterest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://celerdata.com/blog/how-shopee-3xed-their-query-performance-with-starrocks"&gt;Shopee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.starrocks.io/blog/tencent-unifies-their-gaming-analytics-with-starrocks"&gt;Tencent(Games)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WVHXFks9EQk"&gt;Tencent(LLM)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://starrocks.medium.com/trip-com-starrocks-efficiently-supports-high-concurrent-queries-dramatically-reduces-labor-and-1e1921dd6bf8"&gt;Trip.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.trmlabs.com/post/from-bigquery-to-lakehouse-how-we-built-a-petabyte-scale-data-analytics-platform-part-1"&gt;TRM Labs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://celerdata.com/blog/verisoul-enables-real-time-analytics-by-transitioning-off-bigquery"&gt;Verisoul&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/starrocks-engineering/vivos-journey-to-a-high-performance-lakehouse-with-starrocks-56a502a0fde8"&gt;Vivo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2cvIZY4EDak&amp;amp;list=PL0eWwaesODdiJ0aXLzSTyNfkjjIFYpOTf"&gt;Xiaohongshu/RedNote&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.zeptonow.com/data-that-delivers-real-time-insights-for-brand-success-in-quick-commerce-b8b9e994d20b"&gt;Zepto&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Dev4Mod/WaEnhancer</title>
      <link>https://github.com/Dev4Mod/WaEnhancer</link>
      <description>&lt;p&gt;WhatsApp tools for Android&lt;/p&gt;&lt;hr&gt;&lt;p&gt;| &lt;strong&gt;English&lt;/strong&gt; | &lt;a href="https://raw.githubusercontent.com/Dev4Mod/WaEnhancer/master/README.pt-BR.md"&gt;Português(Brasil)&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;WaEnhancer&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;strong&gt;WaEnhancer is an Xposed module that enhances your WhatsApp experience.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This module is intended for educational purposes only, you may have problems with your WhatsApp account, risk of banning! Use it at your own risk.&lt;/p&gt; 
 &lt;p&gt;Please note that this project is currently in development, so bugs and crashes may occur. If you encounter any issues report them in our group or create an &lt;a href="https://github.com/Dev4Mod/WaEnhancer/issues"&gt;issue&lt;/a&gt; here.&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Main Features&lt;/h2&gt; 
&lt;details closed&gt; 
 &lt;summary&gt;Privacy&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;Hide Forwarded Tag&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Remove Forward Limit&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Disable Pinned Chats Limit&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Freeze Last Seen&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Hide Status View&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Hide Blue Ticks&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Hide View Once and Audio Seen&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Hide Delivered&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Hide Typing&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Hide Recording Audio&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Disable View Once&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Send Blue Ticks upon Reply&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Delete for everyone on all messages&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Show Edited Message History&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Remove See More Button&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Anti Revoke Status&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Anti Revoke Message&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Anti Disappearing Messages&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Custom Privacy per Contact&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Ghost Mode&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Always Online&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Call Privacy &amp;amp; Blocking&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Call Information&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Call Contact Whitelist/Blocklist&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details closed&gt; 
 &lt;summary&gt;Home Screen&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;Show Name&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Show Bio&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Show DND Button&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Separate Groups&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Hide Archived Chats&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Show Online Dot in Conversation List&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Remove Channel Recommendations&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Hide Tabs on Home&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Enable IGStatus on Home Screen&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Filter Chats&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Wallpaper in Home Screen&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Show Chat Broadcast Icon&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;List Animations&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Disable Channels&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details closed&gt; 
 &lt;summary&gt;General&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;Time in 12-Hour Format&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Seconds on Timestamp&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Buttons Stroke&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Menu Icons&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Outlined Icons&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;New Settings Style&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Theme Mode Selection&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Lite Mode&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Force English&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Bootloader Spoofer&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Tasker Automation&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Show Toast on Contact Online&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Toast on Message Delete&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Toast on Viewed Message&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Google Translate Integration&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Double Click to React&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Custom Reaction Emoji&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Disable Auto Status&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Enable Copy Status&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Toast on Viewed Status&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details closed&gt; 
 &lt;summary&gt;Media&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;Download Status&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Download View Once&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;HD Quality Videos&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;HD Quality Images&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Send videos in 60FPS&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Send videos in original resolution&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Increased Video Size Limit&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Disable Audio Sensor (Proximity)&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Audio Transcription&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Voice Note Speed Control&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Send Audio as Voice/Audio Note&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Enable Media Preview&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Custom Download Location&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details closed&gt; 
 &lt;summary&gt;Customization&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;Colors Customization&lt;/code&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;Primary Color&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;Secondary Color&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;Background Color&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Bubble Colors Customization&lt;/code&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;Left Bubble Color&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;Right Bubble Color&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Wallpaper &amp;amp; Transparency Settings&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Hide Tabs&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Custom Filters and Theme&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Custom CSS Themes&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Custom DPI&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Theme Manager&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Animation Emojis&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;New Context Menu UI&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Show Admin Group Icon&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Menu with Icons&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Status Style Customization&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Old Statuses UI&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Custom Colors for Text Status&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details closed&gt; 
 &lt;summary&gt;Others&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;Selection of Call Type&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Confirmation to Send Sticker&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Disable Default Emojis&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Stamp Copied Messages&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Ensure that your device is rooted.&lt;/li&gt; 
 &lt;li&gt;Install the Xposed Framework (recommend &lt;a href="https://github.com/JingMatrix/LSPosed"&gt;this&lt;/a&gt; LPosed) on your device.&lt;/li&gt; 
 &lt;li&gt;Download the WaEnhancer from the &lt;a href="https://github.com/Dev4Mod/WaEnhancer/actions"&gt;Actions&lt;/a&gt; section.&lt;/li&gt; 
 &lt;li&gt;Install the WaEnhancer APK.&lt;/li&gt; 
 &lt;li&gt;Enable the WaEnhancer module in the Xposed Installer app.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you encounter any issues or have questions about WaEnhancer, please &lt;a href="https://t.me/waenhancer"&gt;Visit Telegram&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the GNU License - see the &lt;a href="https://raw.githubusercontent.com/Dev4Mod/WaEnhancer/master/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bootloader Spoofer (Thanks to &lt;a href="https://github.com/chiteroman"&gt;chiteroman&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;LSPosed Framework Core Patch (thanks to the &lt;a href="https://github.com/LSPosed"&gt;LSPosed&lt;/a&gt; team)&lt;/li&gt; 
 &lt;li&gt;Bridge Client and Server (Thanks to &lt;a href="https://github.com/rhunk/"&gt;rhunk&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Please use WaEnhancer responsibly and in compliance with the terms and conditions of the apps you are modifying. Misuse of this tool may lead to legal consequences.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Snailclimb/JavaGuide</title>
      <link>https://github.com/Snailclimb/JavaGuide</link>
      <description>&lt;p&gt;「Java学习+面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！&lt;/p&gt;&lt;hr&gt;&lt;p&gt;推荐你通过在线阅读网站进行阅读，体验更好，速度更快！地址：&lt;a href="https://javaguide.cn/"&gt;javaguide.cn&lt;/a&gt;。&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/Snailclimb/JavaGuide"&gt;&lt;img src="https://oss.javaguide.cn/github/javaguide/csdn/1c00413c65d1995993bf2b0daf7b4f03.png" alt="logo" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/Snailclimb/JavaGuide"&gt;GitHub&lt;/a&gt; | &lt;a href="https://gitee.com/SnailClimb/JavaGuide"&gt;Gitee&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://trendshift.io/repositories/1319" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/1319" alt="Snailclimb%2FJavaGuide | Trendshift" style="width: 250px; height: 55px;" width="250" height="55" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;面试专版&lt;/strong&gt;：准备 Java 面试的小伙伴可以考虑面试专版：&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/zhuanlan/java-mian-shi-zhi-bei.md"&gt;《Java 面试指北 》&lt;/a&gt;&lt;/strong&gt; (质量很高，专为面试打造，配合 JavaGuide 食用)。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;知识星球&lt;/strong&gt;：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/about-the-author/zhishixingqiu-two-years.md"&gt;JavaGuide 知识星球&lt;/a&gt;&lt;/strong&gt;（点击链接即可查看星球的详细介绍，一定确定自己真的需要再加入）。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;使用建议&lt;/strong&gt; ：有水平的面试官都是顺着项目经历挖掘技术问题。一定不要死记硬背技术八股文！详细的学习建议请参考：&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/javaguide/use-suggestion.md"&gt;JavaGuide 使用建议&lt;/a&gt;。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;求个Star&lt;/strong&gt;：如果觉得 JavaGuide 的内容对你有帮助的话，还请点个免费的 Star，这是对我最大的鼓励，感谢各位一起同行，共勉！Github 地址：&lt;a href="https://github.com/Snailclimb/JavaGuide"&gt;https://github.com/Snailclimb/JavaGuide&lt;/a&gt; 。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;转载须知&lt;/strong&gt;：以下所有文章如非文首说明为转载皆为 JavaGuide 原创，转载请在文首注明出处。如发现恶意抄袭/搬运，会动用法律武器维护自己的权益。让我们一起维护一个良好的技术创作环境！&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" style="margin: 0 auto;" /&gt; 
&lt;/div&gt; 
&lt;!-- #region home --&gt; 
&lt;h2&gt;项目相关&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/javaguide/intro.html"&gt;项目介绍&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/javaguide/use-suggestion.html"&gt;使用建议&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/javaguide/contribution-guideline.html"&gt;贡献指南&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/javaguide/faq.html"&gt;常见问题&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Java&lt;/h2&gt; 
&lt;h3&gt;基础&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;知识点/面试题总结&lt;/strong&gt; : (必看&lt;span&gt;👍&lt;/span&gt; )：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/java-basic-questions-01.md"&gt;Java 基础常见知识点&amp;amp;面试题总结(上)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/java-basic-questions-02.md"&gt;Java 基础常见知识点&amp;amp;面试题总结(中)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/java-basic-questions-03.md"&gt;Java 基础常见知识点&amp;amp;面试题总结(下)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;重要知识点详解&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/why-there-only-value-passing-in-java.md"&gt;为什么 Java 中只有值传递？&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/serialization.md"&gt;Java 序列化详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/generics-and-wildcards.md"&gt;泛型&amp;amp;通配符详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/reflection.md"&gt;Java 反射机制详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/proxy.md"&gt;Java 代理模式详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/bigdecimal.md"&gt;BigDecimal 详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/unsafe.md"&gt;Java 魔法类 Unsafe 详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/spi.md"&gt;Java SPI 机制详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/basis/syntactic-sugar.md"&gt;Java 语法糖详解&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;集合&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;知识点/面试题总结&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/java-collection-questions-01.md"&gt;Java 集合常见知识点&amp;amp;面试题总结(上)&lt;/a&gt; (必看 &lt;span&gt;👍&lt;/span&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/java-collection-questions-02.md"&gt;Java 集合常见知识点&amp;amp;面试题总结(下)&lt;/a&gt; (必看 &lt;span&gt;👍&lt;/span&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/java-collection-precautions-for-use.md"&gt;Java 容器使用注意事项总结&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;源码分析&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/arraylist-source-code.md"&gt;ArrayList 核心源码+扩容机制分析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/linkedlist-source-code.md"&gt;LinkedList 核心源码分析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/hashmap-source-code.md"&gt;HashMap 核心源码+底层数据结构分析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/concurrent-hash-map-source-code.md"&gt;ConcurrentHashMap 核心源码+底层数据结构分析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/linkedhashmap-source-code.md"&gt;LinkedHashMap 核心源码分析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/copyonwritearraylist-source-code.md"&gt;CopyOnWriteArrayList 核心源码分析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/arrayblockingqueue-source-code.md"&gt;ArrayBlockingQueue 核心源码分析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/priorityqueue-source-code.md"&gt;PriorityQueue 核心源码分析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/collection/delayqueue-source-code.md"&gt;DelayQueue 核心源码分析&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;IO&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/io/io-basis.md"&gt;IO 基础知识总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/io/io-design-patterns.md"&gt;IO 设计模式总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/io/io-model.md"&gt;IO 模型详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/io/nio-basis.md"&gt;NIO 核心知识总结&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;并发&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;知识点/面试题总结&lt;/strong&gt; : (必看 &lt;span&gt;👍&lt;/span&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/java-concurrent-questions-01.md"&gt;Java 并发常见知识点&amp;amp;面试题总结（上）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/java-concurrent-questions-02.md"&gt;Java 并发常见知识点&amp;amp;面试题总结（中）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/java-concurrent-questions-03.md"&gt;Java 并发常见知识点&amp;amp;面试题总结（下）&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;重要知识点详解&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/optimistic-lock-and-pessimistic-lock.md"&gt;乐观锁和悲观锁详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/cas.md"&gt;CAS 详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/jmm.md"&gt;JMM（Java 内存模型）详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;线程池&lt;/strong&gt;：&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/java-thread-pool-summary.md"&gt;Java 线程池详解&lt;/a&gt;、&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/java-thread-pool-best-practices.md"&gt;Java 线程池最佳实践&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/threadlocal.md"&gt;ThreadLocal 详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/java-concurrent-collections.md"&gt;Java 并发容器总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/atomic-classes.md"&gt;Atomic 原子类总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/aqs.md"&gt;AQS 详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/concurrent/completablefuture-intro.md"&gt;CompletableFuture 详解&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;JVM (必看 &lt;span&gt;👍&lt;/span&gt;)&lt;/h3&gt; 
&lt;p&gt;JVM 这部分内容主要参考 &lt;a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html"&gt;JVM 虚拟机规范-Java8&lt;/a&gt; 和周志明老师的&lt;a href="https://book.douban.com/subject/34907497/"&gt;《深入理解 Java 虚拟机（第 3 版）》&lt;/a&gt; （强烈建议阅读多遍！）。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/jvm/memory-area.md"&gt;Java 内存区域&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/jvm/jvm-garbage-collection.md"&gt;JVM 垃圾回收&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/jvm/class-file-structure.md"&gt;类文件结构&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/jvm/class-loading-process.md"&gt;类加载过程&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/jvm/classloader.md"&gt;类加载器&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/jvm/jvm-parameters-intro.md"&gt;【待完成】最重要的 JVM 参数总结（翻译完善了一半）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/jvm/jvm-intro.md"&gt;【加餐】大白话带你认识 JVM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/jvm/jdk-monitoring-and-troubleshooting-tools.md"&gt;JDK 监控和故障处理工具&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;新特性&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Java 8&lt;/strong&gt;：&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java8-tutorial-translate.md"&gt;Java 8 新特性总结（翻译）&lt;/a&gt;、&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java8-common-new-features.md"&gt;Java8 常用新特性总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java9.md"&gt;Java 9 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java10.md"&gt;Java 10 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java11.md"&gt;Java 11 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java12-13.md"&gt;Java 12 &amp;amp; 13 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java14-15.md"&gt;Java 14 &amp;amp; 15 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java16.md"&gt;Java 16 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java17.md"&gt;Java 17 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java18.md"&gt;Java 18 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java19.md"&gt;Java 19 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java20.md"&gt;Java 20 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java21.md"&gt;Java 21 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java22-23.md"&gt;Java 22 &amp;amp; 23 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java24.md"&gt;Java 24 新特性概览&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/java/new-features/java25.md"&gt;Java 25 新特性概览&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;计算机基础&lt;/h2&gt; 
&lt;h3&gt;操作系统&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/operating-system/operating-system-basic-questions-01.md"&gt;操作系统常见知识点&amp;amp;面试题总结(上)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/operating-system/operating-system-basic-questions-02.md"&gt;操作系统常见知识点&amp;amp;面试题总结(下)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;： 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/operating-system/linux-intro.md"&gt;后端程序员必备的 Linux 基础知识总结&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/operating-system/shell-intro.md"&gt;Shell 编程基础知识总结&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;网络&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;知识点/面试题总结&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/other-network-questions.md"&gt;计算机网络常见知识点&amp;amp;面试题总结(上)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/other-network-questions2.md"&gt;计算机网络常见知识点&amp;amp;面试题总结(下)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/computer-network-xiexiren-summary.md"&gt;谢希仁老师的《计算机网络》内容总结（补充）&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;重要知识点详解&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/osi-and-tcp-ip-model.md"&gt;OSI 和 TCP/IP 网络分层模型详解（基础）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/application-layer-protocol.md"&gt;应用层常见协议总结（应用层）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/http-vs-https.md"&gt;HTTP vs HTTPS（应用层）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/http1.0-vs-http1.1.md"&gt;HTTP 1.0 vs HTTP 1.1（应用层）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/http-status-codes.md"&gt;HTTP 常见状态码（应用层）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/dns.md"&gt;DNS 域名系统详解（应用层）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/tcp-connection-and-disconnection.md"&gt;TCP 三次握手和四次挥手（传输层）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/tcp-reliability-guarantee.md"&gt;TCP 传输可靠性保障（传输层）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/arp.md"&gt;ARP 协议详解(网络层)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/nat.md"&gt;NAT 协议详解(网络层)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/network/network-attack-means.md"&gt;网络攻击常见手段总结（安全）&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;数据结构&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;图解数据结构：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/data-structure/linear-data-structure.md"&gt;线性数据结构 :数组、链表、栈、队列&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/data-structure/graph.md"&gt;图&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/data-structure/heap.md"&gt;堆&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/data-structure/tree.md"&gt;树&lt;/a&gt;：重点关注&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/data-structure/red-black-tree.md"&gt;红黑树&lt;/a&gt;、B-，B+，B*树、LSM 树&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;其他常用数据结构：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/data-structure/bloom-filter.md"&gt;布隆过滤器&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;算法&lt;/h3&gt; 
&lt;p&gt;算法这部分内容非常重要，如果你不知道如何学习算法的话，可以看下我写的：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.zhihu.com/question/323359308/answer/1545320858"&gt;算法学习书籍+资源推荐&lt;/a&gt; 。&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.zhihu.com/question/31092580/answer/1534887374"&gt;如何刷 Leetcode?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;常见算法问题总结&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/algorithms/string-algorithm-problems.md"&gt;几道常见的字符串算法题总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/algorithms/linkedlist-algorithm-problems.md"&gt;几道常见的链表算法题总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md"&gt;剑指 offer 部分编程题&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/cs-basics/algorithms/10-classical-sorting-algorithms.md"&gt;十大经典排序算法&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;另外，&lt;a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/"&gt;GeeksforGeeks&lt;/a&gt; 这个网站总结了常见的算法 ，比较全面系统。&lt;/p&gt; 
&lt;h2&gt;数据库&lt;/h2&gt; 
&lt;h3&gt;基础&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/basis.md"&gt;数据库基础知识总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/nosql.md"&gt;NoSQL 基础知识总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/character-set.md"&gt;字符集详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SQL : 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/sql/sql-syntax-summary.md"&gt;SQL 语法基础知识总结&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/sql/sql-questions-01.md"&gt;SQL 常见面试题总结&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MySQL&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;知识点/面试题总结：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/mysql-questions-01.md"&gt;MySQL 常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/strong&gt; (必看 &lt;span&gt;👍&lt;/span&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/mysql-high-performance-optimization-specification-recommendations.md"&gt;MySQL 高性能优化规范建议总结&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;重要知识点：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/mysql-index.md"&gt;MySQL 索引详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/transaction-isolation-level.md"&gt;MySQL 事务隔离级别图文详解)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/mysql-logs.md"&gt;MySQL 三大日志(binlog、redo log 和 undo log)详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/innodb-implementation-of-mvcc.md"&gt;InnoDB 存储引擎对 MVCC 的实现&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/how-sql-executed-in-mysql.md"&gt;SQL 语句在 MySQL 中的执行过程&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/mysql-query-cache.md"&gt;MySQL 查询缓存详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/mysql-query-execution-plan.md"&gt;MySQL 执行计划分析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/mysql-auto-increment-primary-key-continuous.md"&gt;MySQL 自增主键一定是连续的吗&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/some-thoughts-on-database-storage-time.md"&gt;MySQL 时间类型数据存储建议&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mysql/index-invalidation-caused-by-implicit-conversion.md"&gt;MySQL 隐式转换造成索引失效&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Redis&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;知识点/面试题总结&lt;/strong&gt; : (必看&lt;span&gt;👍&lt;/span&gt; )：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/redis/redis-questions-01.md"&gt;Redis 常见知识点&amp;amp;面试题总结(上)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/redis/redis-questions-02.md"&gt;Redis 常见知识点&amp;amp;面试题总结(下)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;重要知识点：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/redis/3-commonly-used-cache-read-and-write-strategies.md"&gt;3 种常用的缓存读写策略详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/redis/redis-data-structures-01.md"&gt;Redis 5 种基本数据结构详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/redis/redis-data-structures-02.md"&gt;Redis 3 种特殊数据结构详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/redis/redis-persistence.md"&gt;Redis 持久化机制详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/redis/redis-memory-fragmentation.md"&gt;Redis 内存碎片详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/redis/redis-common-blocking-problems-summary.md"&gt;Redis 常见阻塞原因总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/redis/redis-cluster.md"&gt;Redis 集群详解&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MongoDB&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mongodb/mongodb-questions-01.md"&gt;MongoDB 常见知识点&amp;amp;面试题总结(上)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/mongodb/mongodb-questions-02.md"&gt;MongoDB 常见知识点&amp;amp;面试题总结(下)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;搜索引擎&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/database/elasticsearch/elasticsearch-questions-01.md"&gt;Elasticsearch 常见面试题总结(付费)&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号" /&gt;&lt;/p&gt; 
&lt;h2&gt;开发工具&lt;/h2&gt; 
&lt;h3&gt;Maven&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/tools/maven/maven-core-concepts.md"&gt;Maven 核心概念总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/tools/maven/maven-best-practices.md"&gt;Maven 最佳实践&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Gradle&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/tools/gradle/gradle-core-concepts.md"&gt;Gradle 核心概念总结&lt;/a&gt;（可选，目前国内还是使用 Maven 普遍一些）&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/tools/docker/docker-intro.md"&gt;Docker 核心概念总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/tools/docker/docker-in-action.md"&gt;Docker 实战&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Git&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/tools/git/git-intro.md"&gt;Git 核心概念总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/tools/git/github-tips.md"&gt;GitHub 实用小技巧总结&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;系统设计&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/system-design-questions.md"&gt;系统设计常见面试题总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/design-pattern.md"&gt;设计模式常见面试题总结&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;基础&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/basis/RESTfulAPI.md"&gt;RestFul API 简明教程&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/basis/software-engineering.md"&gt;软件工程简明教程简明教程&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/basis/naming.md"&gt;代码命名指南&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/basis/refactoring.md"&gt;代码重构指南&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/basis/unit-test.md"&gt;单元测试指南&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;常用框架&lt;/h3&gt; 
&lt;h4&gt;Spring/SpringBoot (必看 &lt;span&gt;👍&lt;/span&gt;)&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;知识点/面试题总结&lt;/strong&gt; :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/framework/spring/spring-knowledge-and-questions-summary.md"&gt;Spring 常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/framework/spring/springboot-knowledge-and-questions-summary.md"&gt;SpringBoot 常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/framework/spring/spring-common-annotations.md"&gt;Spring/Spring Boot 常用注解总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Snailclimb/springboot-guide"&gt;SpringBoot 入门指南&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;重要知识点详解&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/framework/spring/ioc-and-aop.md"&gt;IoC &amp;amp; AOP详解（快速搞懂）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/framework/spring/spring-transaction.md"&gt;Spring 事务详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/framework/spring/spring-design-patterns-summary.md"&gt;Spring 中的设计模式详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/framework/spring/spring-boot-auto-assembly-principles.md"&gt;SpringBoot 自动装配原理详解&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;MyBatis&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/framework/mybatis/mybatis-interview.md"&gt;MyBatis 常见面试题总结&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;安全&lt;/h3&gt; 
&lt;h4&gt;认证授权&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/security/basis-of-authority-certification.md"&gt;认证授权基础概念详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/security/jwt-intro.md"&gt;JWT 基础概念详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/security/advantages-and-disadvantages-of-jwt.md"&gt;JWT 优缺点分析以及常见问题解决方案&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/security/sso-intro.md"&gt;SSO 单点登录详解&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/security/design-of-authority-system.md"&gt;权限系统设计详解&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;数据安全&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/security/encryption-algorithms.md"&gt;常见加密算法总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/security/sentive-words-filter.md"&gt;敏感词过滤方案总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/security/data-desensitization.md"&gt;数据脱敏方案总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/security/data-validation.md"&gt;为什么前后端都要做数据校验&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;定时任务&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/schedule-task.md"&gt;Java 定时任务详解&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Web 实时消息推送&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/system-design/web-real-time-message-push.md"&gt;Web 实时消息推送详解&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;分布式&lt;/h2&gt; 
&lt;h3&gt;理论&amp;amp;算法&amp;amp;协议&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/protocol/cap-and-base-theorem.html"&gt;CAP 理论和 BASE 理论解读&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/protocol/paxos-algorithm.html"&gt;Paxos 算法解读&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/protocol/raft-algorithm.html"&gt;Raft 算法解读&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/protocol/gossip-protocl.html"&gt;Gossip 协议详解&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;RPC&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/rpc/rpc-intro.html"&gt;RPC 基础知识总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/rpc/dubbo.html"&gt;Dubbo 常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;ZooKeeper&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;这两篇文章可能有内容重合部分，推荐都看一遍。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.html"&gt;ZooKeeper 相关概念总结(入门)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.html"&gt;ZooKeeper 相关概念总结(进阶)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;API 网关&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/api-gateway.html"&gt;API 网关基础知识总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/distributed-system/spring-cloud-gateway-questions.md"&gt;Spring Cloud Gateway 常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;分布式 ID&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/distributed-id.html"&gt;分布式ID介绍&amp;amp;实现方案总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/distributed-id-design.html"&gt;分布式 ID 设计指南&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;分布式锁&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/distributed-lock.html"&gt;分布式锁介绍&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javaguide.cn/distributed-system/distributed-lock-implementations.html"&gt;分布式锁常见实现方案总结&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;分布式事务&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://javaguide.cn/distributed-system/distributed-transaction.html"&gt;分布式事务常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;分布式配置中心&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/distributed-system/distributed-configuration-center.md"&gt;分布式配置中心常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;高性能&lt;/h2&gt; 
&lt;h3&gt;数据库优化&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/read-and-write-separation-and-library-subtable.md"&gt;数据库读写分离和分库分表&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/data-cold-hot-separation.md"&gt;数据冷热分离&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/sql-optimization.md"&gt;常见 SQL 优化手段总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/deep-pagination-optimization.md"&gt;深度分页介绍及优化建议&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;负载均衡&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/load-balancing.md"&gt;负载均衡常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;CDN&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/cdn.md"&gt;CDN（内容分发网络）常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;消息队列&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/message-queue/message-queue.md"&gt;消息队列基础知识总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/message-queue/disruptor-questions.md"&gt;Disruptor 常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/message-queue/rabbitmq-questions.md"&gt;RabbitMQ 常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/message-queue/rocketmq-questions.md"&gt;RocketMQ 常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-performance/message-queue/kafka-questions-01.md"&gt;Kafka 常见知识点&amp;amp;面试题总结&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;高可用&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-availability/high-availability-system-design.md"&gt;高可用系统设计指南&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;冗余设计&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-availability/redundancy.md"&gt;冗余设计详解&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;限流&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-availability/limit-request.md"&gt;服务限流详解&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;降级&amp;amp;熔断&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-availability/fallback-and-circuit-breaker.md"&gt;降级&amp;amp;熔断详解&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;超时&amp;amp;重试&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Snailclimb/JavaGuide/main/docs/high-availability/timeout-and-retry.md"&gt;超时&amp;amp;重试详解&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;集群&lt;/h3&gt; 
&lt;p&gt;相同的服务部署多份，避免单点故障。&lt;/p&gt; 
&lt;h3&gt;灾备设计和异地多活&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;灾备&lt;/strong&gt; = 容灾 + 备份。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;备份&lt;/strong&gt;：将系统所产生的的所有重要数据多备份几份。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;容灾&lt;/strong&gt;：在异地建立两个完全相同的系统。当某个地方的系统突然挂掉，整个应用系统可以切换到另一个，这样系统就可以正常提供服务了。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;异地多活&lt;/strong&gt; 描述的是将服务部署在异地并且服务同时对外提供服务。和传统的灾备设计的最主要区别在于“多活”，即所有站点都是同时在对外提供服务的。异地多活是为了应对突发状况比如火灾、地震等自然或者人为灾害。&lt;/p&gt; 
&lt;h2&gt;Star 趋势&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://api.star-history.com/svg?repos=Snailclimb/JavaGuide&amp;amp;type=Date" alt="Stars" /&gt;&lt;/p&gt; 
&lt;h2&gt;公众号&lt;/h2&gt; 
&lt;p&gt;如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号" /&gt;&lt;/p&gt; 
&lt;!-- #endregion home --&gt;</description>
    </item>
    
    <item>
      <title>traccar/traccar</title>
      <link>https://github.com/traccar/traccar</link>
      <description>&lt;p&gt;Traccar GPS Tracking System&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://www.traccar.org"&gt;Traccar&lt;/a&gt;&lt;/h1&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Traccar is an open source GPS tracking system. This repository contains Java-based back-end service. It supports more than 200 GPS protocols and more than 2000 models of GPS tracking devices. Traccar can be used with any major SQL database system. It also provides easy to use &lt;a href="https://www.traccar.org/traccar-api/"&gt;REST API&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other parts of Traccar solution include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/traccar/traccar-web"&gt;Traccar web app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/traccar/traccar-manager-android"&gt;Traccar Manager Android app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/traccar/traccar-manager-ios"&gt;Traccar Manager iOS app&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There is also a set of mobile apps that you can use for tracking mobile devices:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/traccar/traccar-client-android"&gt;Traccar Client Android app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/traccar/traccar-client-ios"&gt;Traccar Client iOS app&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Some of the available features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Real-time GPS tracking&lt;/li&gt; 
 &lt;li&gt;Driver behaviour monitoring&lt;/li&gt; 
 &lt;li&gt;Detailed and summary reports&lt;/li&gt; 
 &lt;li&gt;Geofencing functionality&lt;/li&gt; 
 &lt;li&gt;Alarms and notifications&lt;/li&gt; 
 &lt;li&gt;Account and device management&lt;/li&gt; 
 &lt;li&gt;Email and SMS support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href="https://www.traccar.org/build/"&gt;build from source documentation&lt;/a&gt; on the official website.&lt;/p&gt; 
&lt;h2&gt;Team&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Anton Tananaev (&lt;a href="mailto:anton@traccar.org"&gt;anton@traccar.org&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Andrey Kunitsyn (&lt;a href="mailto:andrey@traccar.org"&gt;andrey@traccar.org&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Apache License, Version 2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>xuxueli/xxl-job</title>
      <link>https://github.com/xuxueli/xxl-job</link>
      <description>&lt;p&gt;A distributed task scheduling framework.（分布式任务调度平台XXL-JOB）&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://www.xuxueli.com/doc/static/xxl-job/images/xxl-logo.jpg" width="150" /&gt; &lt;/p&gt;
&lt;h3 align="center"&gt;XXL-JOB&lt;/h3&gt; 
&lt;p align="center"&gt; XXL-JOB, a distributed task scheduling framework. &lt;br /&gt; &lt;a href="https://www.xuxueli.com/xxl-job/"&gt;&lt;strong&gt;-- Home Page --&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;a href="https://github.com/xuxueli/xxl-job/actions"&gt; &lt;img src="https://github.com/xuxueli/xxl-job/workflows/Java%20CI/badge.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://central.sonatype.com/artifact/com.xuxueli/xxl-job-core"&gt; &lt;img src="https://img.shields.io/maven-central/v/com.xuxueli/xxl-job-core" /&gt; &lt;/a&gt; &lt;a href="https://github.com/xuxueli/xxl-job/releases"&gt; &lt;img src="https://img.shields.io/github/release/xuxueli/xxl-job.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://github.com/xuxueli/xxl-job/"&gt; &lt;img src="https://img.shields.io/github/stars/xuxueli/xxl-job" /&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/r/xuxueli/xxl-job-admin/"&gt; &lt;img src="https://img.shields.io/docker/pulls/xuxueli/xxl-job-admin" /&gt; &lt;/a&gt; &lt;a href="http://www.gnu.org/licenses/gpl-3.0.html"&gt; &lt;img src="https://img.shields.io/badge/license-GPLv3-blue.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://www.xuxueli.com/page/donate.html"&gt; &lt;img src="https://img.shields.io/badge/%24-donate-ff69b4.svg?style=flat" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;XXL-JOB is a distributed task scheduling framework. It's core design goal is to develop quickly and learn simple, lightweight, and easy to expand. Now, it's already open source, and many companies use it in production environments, real "out-of-the-box".&lt;/p&gt; 
&lt;p&gt;XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。&lt;/p&gt; 
&lt;h2&gt;Sponsor&lt;/h2&gt; 
&lt;p&gt;XXL-JOB is an open source and free project, with its ongoing development made possible entirely by the support of these awesome backers.&lt;/p&gt; 
&lt;p&gt;XXL-JOB 是一个开源且免费项目，其正在进行的开发完全得益于支持者的支持。开源不易，&lt;a href="https://www.xuxueli.com/page/donate.html"&gt;前往赞助项目开发&lt;/a&gt;&lt;/p&gt; 
&lt;!-- supporter start --&gt; 
&lt;h3 style="color: #E6BE8A;"&gt;金牌赞助方&lt;/h3&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href="https://www.aliyun.com/product/aliware/mse?utm_content=g_1000401794" title="" target="_blank"&gt; &lt;img width="150px" src="http://www.xuxueli.com/page/static/images/logo_aliyun2.png" /&gt; &lt;br /&gt; &lt;span style="text-decoration:underline;color: #E6BE8A;"&gt;阿里云 提供云上托管 XXL-JOB&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://www.mall4j.com/cn/?statId=10" title="" target="_blank"&gt; &lt;img width="150px" src="http://www.xuxueli.com/page/static/images/logo_mail4j.png" /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!-- supporter end --&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.xuxueli.com/xxl-job/"&gt;中文文档&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.xuxueli.com/xxl-job/en/"&gt;English Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.xuxueli.com/page/community.html"&gt;社区交流&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;1、简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；&lt;/li&gt; 
 &lt;li&gt;2、动态：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；&lt;/li&gt; 
 &lt;li&gt;3、调度中心HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心HA；&lt;/li&gt; 
 &lt;li&gt;4、执行器HA（分布式）：任务分布式执行，任务"执行器"支持集群部署，可保证任务执行HA；&lt;/li&gt; 
 &lt;li&gt;5、注册中心: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；&lt;/li&gt; 
 &lt;li&gt;6、弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；&lt;/li&gt; 
 &lt;li&gt;7、触发策略：提供丰富的任务触发策略，包括：Cron触发、固定间隔触发、固定延时触发、API（事件）触发、人工触发、父子任务触发；&lt;/li&gt; 
 &lt;li&gt;8、调度过期策略：调度中心错过调度时间的补偿处理策略，包括：忽略、立即补偿触发一次等；&lt;/li&gt; 
 &lt;li&gt;9、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；&lt;/li&gt; 
 &lt;li&gt;10、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；&lt;/li&gt; 
 &lt;li&gt;11、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；&lt;/li&gt; 
 &lt;li&gt;12、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；&lt;/li&gt; 
 &lt;li&gt;13、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；&lt;/li&gt; 
 &lt;li&gt;14、分片广播任务：执行器集群部署时，任务路由策略选择"分片广播"情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；&lt;/li&gt; 
 &lt;li&gt;15、动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。&lt;/li&gt; 
 &lt;li&gt;16、故障转移：任务路由策略选择"故障转移"情况下，如果执行器集群中某一台机器故障，将会自动Failover切换到一台正常的执行器发送调度请求。&lt;/li&gt; 
 &lt;li&gt;17、任务进度监控：支持实时监控任务进度；&lt;/li&gt; 
 &lt;li&gt;18、Rolling实时日志：支持在线查看调度结果，并且支持以Rolling方式实时查看执行器输出的完整的执行日志；&lt;/li&gt; 
 &lt;li&gt;19、GLUE：提供Web IDE，支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程。支持30个版本的历史版本回溯。&lt;/li&gt; 
 &lt;li&gt;20、脚本任务：支持以GLUE模式开发和运行脚本任务，包括Shell、Python、NodeJS、PHP、PowerShell等类型脚本;&lt;/li&gt; 
 &lt;li&gt;21、命令行任务：原生提供通用命令行任务Handler（Bean任务，"CommandJobHandler"）；业务方只需要提供命令行即可；&lt;/li&gt; 
 &lt;li&gt;22、任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会主动触发一次子任务的执行, 多个子任务用逗号分隔；&lt;/li&gt; 
 &lt;li&gt;23、一致性：“调度中心”通过DB锁保证集群分布式调度的一致性, 一次任务调度只会触发一次执行；&lt;/li&gt; 
 &lt;li&gt;24、自定义任务参数：支持在线配置调度任务入参，即时生效；&lt;/li&gt; 
 &lt;li&gt;25、调度线程池：调度系统多线程触发调度运行，确保调度精确执行，不被堵塞；&lt;/li&gt; 
 &lt;li&gt;26、数据加密：调度中心和执行器之间的通讯进行数据加密，提升调度信息安全性；&lt;/li&gt; 
 &lt;li&gt;27、邮件报警：任务失败时支持邮件报警，支持配置多邮件地址群发报警邮件；&lt;/li&gt; 
 &lt;li&gt;28、推送maven中央仓库: 将会把最新稳定版推送到maven中央仓库, 方便用户接入和使用;&lt;/li&gt; 
 &lt;li&gt;29、运行报表：支持实时查看运行数据，如任务数量、调度次数、执行器数量等；以及调度报表，如调度日期分布图，调度成功分布图等；&lt;/li&gt; 
 &lt;li&gt;30、全异步：任务调度流程全异步化设计实现，如异步调度、异步运行、异步回调等，有效对密集调度进行流量削峰，理论上支持任意时长任务的运行；&lt;/li&gt; 
 &lt;li&gt;31、跨语言/OpenAPI：调度中心与执行器提供语言无关的 OpenApi（RESTful 格式），第三方任意语言可据此对接调度中心或者实现执行器，实现多语言支持。除此之外，还提供了 “多任务模式”和“httpJobHandler”等其他跨语言方案；&lt;/li&gt; 
 &lt;li&gt;32、国际化：调度中心支持国际化设置，提供中文、英文两种可选语言，默认为中文；&lt;/li&gt; 
 &lt;li&gt;33、容器化：提供官方docker镜像，并实时更新推送dockerhub，进一步实现产品开箱即用；&lt;/li&gt; 
 &lt;li&gt;34、线程池隔离：调度线程池进行隔离拆分，慢任务自动降级进入"Slow"线程池，避免耗尽调度线程，提高系统稳定性；&lt;/li&gt; 
 &lt;li&gt;35、用户管理：支持在线管理系统用户，存在管理员、普通用户两种角色；&lt;/li&gt; 
 &lt;li&gt;36、权限控制：执行器维度进行权限控制，管理员拥有全量权限，普通用户需要分配执行器权限后才允许相关操作；&lt;/li&gt; 
 &lt;li&gt;37、AI任务：原生提供AI执行器，并内置多个AI任务Handler，与spring-ai、ollama、dify等集成打通，支持快速开发AI类任务。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;于2015年中，我在github上创建XXL-JOB项目仓库并提交第一个commit，随之进行系统结构设计，UI选型，交互设计……&lt;/p&gt; 
&lt;p&gt;于2015-11月，XXL-JOB终于RELEASE了第一个大版本V1.0， 随后我将之发布到OSCHINA，XXL-JOB在OSCHINA上获得了@红薯的热门推荐，同期分别达到了OSCHINA的“热门动弹”排行第一和git.oschina的开源软件月热度排行第一，在此特别感谢红薯，感谢大家的关注和支持。&lt;/p&gt; 
&lt;p&gt;于2015-12月，我将XXL-JOB发表到我司内部知识库，并且得到内部同事认可。&lt;/p&gt; 
&lt;p&gt;于2016-01月，我司展开XXL-JOB的内部接入和定制工作，在此感谢袁某和尹某两位同事的贡献，同时也感谢内部其他给与关注与支持的同事。&lt;/p&gt; 
&lt;p&gt;于2017-05-13，在上海举办的 "&lt;a href="https://www.oschina.net/event/2236961"&gt;第62期开源中国源创会&lt;/a&gt;" 的 "放码过来" 环节，我登台对XXL-JOB做了演讲，台下五百位在场观众反响热烈（&lt;a href="https://www.oschina.net/question/2686220_2242120"&gt;图文回顾&lt;/a&gt; ）。&lt;/p&gt; 
&lt;p&gt;于2017-10-22，又拍云 Open Talk 联合 Spring Cloud 中国社区举办的 "&lt;a href="https://opentalk.upyun.com/303.html"&gt;进击的微服务实战派上海站&lt;/a&gt;"，我登台对XXL-JOB做了演讲，现场观众反响热烈并在会后与XXL-JOB用户热烈讨论交流。&lt;/p&gt; 
&lt;p&gt;于2017-12-11，XXL-JOB有幸参会《&lt;a href="http://bj2017.archsummit.com/"&gt;InfoQ ArchSummit全球架构师峰会&lt;/a&gt;》，并被拍拍贷架构总监"杨波老师"在专题 "&lt;a href="http://bj2017.archsummit.com/training/2"&gt;微服务原理、基础架构和开源实践&lt;/a&gt;" 中现场介绍。&lt;/p&gt; 
&lt;p&gt;于2017-12-18，XXL-JOB参与"&lt;a href="http://www.oschina.net/project/top_cn_2017?sort=1"&gt;2017年度最受欢迎中国开源软件&lt;/a&gt;"评比，在当时已录入的约九千个国产开源项目中角逐，最终进入了前30强。&lt;/p&gt; 
&lt;p&gt;于2018-01-15，XXL-JOB参与"&lt;a href="https://www.oschina.net/news/92438/2017-mayun-top-50"&gt;2017码云最火开源项目&lt;/a&gt;"评比，在当时已录入的约六千五百个码云项目中角逐，最终进去了前20强。&lt;/p&gt; 
&lt;p&gt;于2018-04-14，iTechPlus在上海举办的 "&lt;a href="http://www.itdks.com/eventlist/detail/2065"&gt;2018互联网开发者大会&lt;/a&gt;"，我登台对XXL-JOB做了演讲，现场观众反响热烈并在会后与XXL-JOB用户热烈讨论交流。&lt;/p&gt; 
&lt;p&gt;于2018-05-27，在上海举办的 "&lt;a href="https://www.oschina.net/event/2278742"&gt;第75期开源中国源创会&lt;/a&gt;" 的 "架构" 主题专场，我登台进行“基础架构与中间件图谱”主题演讲，台下上千位在场观众反响热烈（&lt;a href="https://www.oschina.net/question/3802184_2280606"&gt;图文回顾&lt;/a&gt; ）。&lt;/p&gt; 
&lt;p&gt;于2018-12-05，XXL-JOB参与"&lt;a href="https://www.oschina.net/project/top_cn_2018?sort=1"&gt;2018年度最受欢迎中国开源软件&lt;/a&gt;"评比，在当时已录入的一万多个开源项目中角逐，最终排名第19名。&lt;/p&gt; 
&lt;p&gt;于2019-12-10，XXL-JOB参与"&lt;a href="https://www.oschina.net/project/top_cn_2019"&gt;2019年度最受欢迎中国开源软件&lt;/a&gt;"评比，在当时已录入的一万多个开源项目中角逐，最终排名"开发框架和基础组件类"第9名。&lt;/p&gt; 
&lt;p&gt;于2020-11-16，XXL-JOB参与"&lt;a href="https://www.oschina.net/project/top_cn_2020"&gt;2020年度最受欢迎中国开源软件&lt;/a&gt;"评比，在当时已录入的一万多个开源项目中角逐，最终排名"开发框架和基础组件类"第8名。&lt;/p&gt; 
&lt;p&gt;于2021-12-06，XXL-JOB参与"&lt;a href="https://www.oschina.net/project/top_cn_2021"&gt;2021年度OSC中国开源项目评选&lt;/a&gt; "评比，在当时已录入的一万多个开源项目中角逐，最终当选"最受欢迎项目"。&lt;/p&gt; 
&lt;p&gt;于2024-11-06，XXL-JOB经 GitCode 官方评审，获得 “G-Star项目毕业认证”。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我司大众点评目前已接入XXL-JOB，内部别名《Ferrari》（Ferrari基于XXL-JOB的V1.1版本定制而成，新接入应用推荐升级最新版本）。 据最新统计, 自2016-01-21接入至2017-12-01期间，该系统已调度约100万次，表现优异。新接入应用推荐使用最新版本，因为经过数十个版本的更新，系统的任务模型、UI交互模型以及底层调度通讯模型都有了较大的优化和提升，核心功能更加稳定高效。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;至今，XXL-JOB已接入多家公司的线上产品线，接入场景如电商业务，O2O业务和大数据作业等，截止最新统计时间为止，XXL-JOB已接入的公司包括不限于：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- 1、大众点评【美团点评】
- 2、山东学而网络科技有限公司；
- 3、安徽慧通互联科技有限公司；
- 4、人人聚财金服；
- 5、上海棠棣信息科技股份有限公司
- 6、运满满【运满满】
- 7、米其林 (中国区)【米其林】
- 8、妈妈联盟
- 9、九樱天下（北京）信息技术有限公司
- 10、万普拉斯科技有限公司【一加手机】
- 11、上海亿保健康管理有限公司
- 12、海尔馨厨【海尔】
- 13、河南大红包电子商务有限公司
- 14、成都顺点科技有限公司
- 15、深圳市怡亚通
- 16、深圳麦亚信科技股份有限公司
- 17、上海博莹科技信息技术有限公司
- 18、中国平安科技有限公司【中国平安】
- 19、杭州知时信息科技有限公司
- 20、博莹科技（上海）有限公司
- 21、成都依能股份有限责任公司
- 22、湖南高阳通联信息技术有限公司
- 23、深圳市邦德文化发展有限公司
- 24、福建阿思可网络教育有限公司
- 25、优信二手车【优信】
- 26、上海悠游堂投资发展股份有限公司【悠游堂】
- 27、北京粉笔蓝天科技有限公司
- 28、中秀科技(无锡)有限公司
- 29、武汉空心科技有限公司
- 30、北京蚂蚁风暴科技有限公司
- 31、四川互宜达科技有限公司
- 32、钱包行云（北京）科技有限公司
- 33、重庆欣才集团
- 34、咪咕互动娱乐有限公司【中国移动】
- 35、北京诺亦腾科技有限公司
- 36、增长引擎(北京)信息技术有限公司
- 37、北京英贝思科技有限公司
- 38、刚泰集团
- 39、深圳泰久信息系统股份有限公司
- 40、随行付支付有限公司
- 41、广州瀚农网络科技有限公司
- 42、享点科技有限公司
- 43、杭州比智科技有限公司
- 44、圳临界线网络科技有限公司
- 45、广州知识圈网络科技有限公司
- 46、国誉商业上海有限公司
- 47、海尔消费金融有限公司，嗨付、够花【海尔】
- 48、广州巴图鲁信息科技有限公司
- 49、深圳市鹏海运电子数据交换有限公司
- 50、深圳市亚飞电子商务有限公司
- 51、上海趣医网络有限公司
- 52、聚金资本
- 53、北京父母邦网络科技有限公司
- 54、中山元赫软件科技有限公司
- 55、中商惠民(北京)电子商务有限公司
- 56、凯京集团
- 57、华夏票联（北京）科技有限公司
- 58、拍拍贷【拍拍贷】
- 59、北京尚德机构在线教育有限公司
- 60、任子行股份有限公司
- 61、北京时态电子商务有限公司
- 62、深圳卷皮网络科技有限公司
- 63、北京安博通科技股份有限公司
- 64、未来无线网
- 65、厦门瓷禧网络有限公司
- 66、北京递蓝科软件股份有限公司
- 67、郑州创海软件科技公司
- 68、北京国槐信息科技有限公司
- 69、浪潮软件集团
- 70、多立恒(北京)信息技术有限公司
- 71、广州极迅客信息科技有限公司
- 72、赫基（中国）集团股份有限公司
- 73、海投汇
- 74、上海润益创业孵化器管理股份有限公司
- 75、汉纳森（厦门）数据股份有限公司
- 76、安信信托
- 77、岚儒财富
- 78、捷道软件
- 79、湖北享七网络科技有限公司
- 80、湖南创发科技责任有限公司
- 81、深圳小安时代互联网金融服务有限公司
- 82、湖北享七网络科技有限公司
- 83、钱包行云(北京)科技有限公司
- 84、360金融【360】
- 85、易企秀
- 86、摩贝（上海）生物科技有限公司
- 87、广东芯智慧科技有限公司
- 88、联想集团【联想】
- 89、怪兽充电
- 90、行圆汽车
- 91、深圳店店通科技邮箱公司
- 92、京东【京东】
- 93、米庄理财
- 94、咖啡易融
- 95、梧桐诚选
- 96、恒大地产【恒大】
- 97、昆明龙慧
- 98、上海涩瑶软件
- 99、易信【网易】
- 100、铜板街
- 101、杭州云若网络科技有限公司
- 102、特百惠（中国）有限公司
- 103、常山众卡运力供应链管理有限公司
- 104、深圳立创电子商务有限公司
- 105、杭州智诺科技股份有限公司
- 106、北京云漾信息科技有限公司
- 107、深圳市多银科技有限公司
- 108、亲宝宝
- 109、上海博卡软件科技有限公司
- 110、智慧树在线教育平台
- 111、米族金融
- 112、北京辰森世纪
- 113、云南滇医通
- 114、广州市分领网络科技有限责任公司
- 115、浙江微能科技有限公司
- 116、上海馨飞电子商务有限公司
- 117、上海宝尊电子商务有限公司
- 118、直客通科技技术有限公司
- 119、科度科技有限公司
- 120、上海数慧系统技术有限公司
- 121、我的医药网
- 122、多粉平台
- 123、铁甲二手机
- 124、上海海新得数据技术有限公司
- 125、深圳市珍爱网信息技术有限公司【珍爱网】
- 126、小蜜蜂
- 127、吉荣数科技
- 128、上海恺域信息科技有限公司
- 129、广州荔支网络有限公司【荔枝FM】
- 130、杭州闪宝科技有限公司
- 131、北京互联新网科技发展有限公司
- 132、誉道科技
- 133、山西兆盛房地产开发有限公司
- 134、北京蓝睿通达科技有限公司
- 135、月亮小屋（中国）有限公司【蓝月亮】
- 136、青岛国瑞信息技术有限公司
- 137、博雅云计算（北京）有限公司
- 138、华泰证券香港子公司
- 139、杭州东方通信软件技术有限公司
- 140、武汉博晟安全技术股份有限公司
- 141、深圳市六度人和科技有限公司
- 142、杭州趣维科技有限公司（小影）
- 143、宁波单车侠之家科技有限公司【单车侠】
- 144、丁丁云康信息科技（北京）有限公司
- 145、云钱袋
- 146、南京中兴力维
- 147、上海矽昌通信技术有限公司
- 148、深圳萨科科技
- 149、中通服创立科技有限责任公司
- 150、深圳市对庄科技有限公司
- 151、上证所信息网络有限公司
- 152、杭州火烧云科技有限公司【婚礼纪】
- 153、天津青芒果科技有限公司【芒果头条】
- 154、长飞光纤光缆股份有限公司
- 155、世纪凯歌（北京）医疗科技有限公司
- 156、浙江霖梓控股有限公司
- 157、江西腾飞网络技术有限公司
- 158、安迅物流有限公司
- 159、肉联网
- 160、北京北广梯影广告传媒有限公司
- 161、上海数慧系统技术有限公司
- 162、大志天成
- 163、上海云鹊医
- 164、上海云鹊医
- 165、墨迹天气【墨迹天气】
- 166、上海逸橙信息科技有限公司
- 167、沅朋物联
- 168、杭州恒生云融网络科技有限公司
- 169、绿米联创
- 170、重庆易宠科技有限公司
- 171、安徽引航科技有限公司（乐职网）
- 172、上海数联医信企业发展有限公司
- 173、良彬建材
- 174、杭州求是同创网络科技有限公司
- 175、荷马国际
- 176、点雇网
- 177、深圳市华星光电技术有限公司
- 178、厦门神州鹰软件科技有限公司
- 179、深圳市招商信诺人寿保险有限公司
- 180、上海好屋网信息技术有限公司
- 181、海信集团【海信】
- 182、信凌可信息科技（上海）有限公司
- 183、长春天成科技发展有限公司
- 184、用友金融信息技术股份有限公司【用友】
- 185、北京咖啡易融有限公司
- 186、国投瑞银基金管理有限公司
- 187、晋松(上海)网络信息技术有限公司
- 188、深圳市随手科技有限公司【随手记】
- 189、深圳水务科技有限公司
- 190、易企秀【易企秀】
- 191、北京磁云科技
- 192、南京蜂泰互联网科技有限公司
- 193、章鱼直播
- 194、奖多多科技
- 195、天津市神州商龙科技股份有限公司
- 196、岩心科技
- 197、车码科技（北京）有限公司
- 198、贵阳市投资控股集团
- 199、康旗股份
- 200、龙腾出行
- 201、杭州华量软件
- 202、合肥顶岭医疗科技有限公司
- 203、重庆表达式科技有限公司
- 204、上海米道信息科技有限公司
- 205、北京益友会科技有限公司
- 206、北京融贯电子商务有限公司
- 207、中国外汇交易中心
- 208、中国外运股份有限公司
- 209、中国上海晓圈教育科技有限公司
- 210、普联软件股份有限公司
- 211、北京科蓝软件股份有限公司
- 212、江苏斯诺物联科技有限公司
- 213、北京搜狐-狐友【搜狐】
- 214、新大陆网商金融
- 215、山东神码中税信息科技有限公司
- 216、河南汇顺网络科技有限公司
- 217、北京华夏思源科技发展有限公司
- 218、上海东普信息科技有限公司
- 219、上海鸣勃网络科技有限公司
- 220、广东学苑教育发展有限公司
- 221、深圳强时科技有限公司
- 222、上海云砺信息科技有限公司
- 223、重庆愉客行网络有限公司
- 224、数云
- 225、国家电网运检部
- 226、杭州找趣
- 227、浩鲸云计算科技股份有限公司
- 228、科大讯飞【科大讯飞】
- 229、杭州行装网络科技有限公司
- 230、即有分期金融
- 231、深圳法司德信息科技有限公司
- 232、上海博复信息科技有限公司
- 233、杭州云嘉云计算有限公司
- 234、有家民宿(有家美宿)
- 235、北京赢销通软件技术有限公司
- 236、浙江聚有财金融服务外包有限公司
- 237、易族智汇(北京)科技有限公司
- 238、合肥顶岭医疗科技开发有限公司
- 239、车船宝(深圳)旭珩科技有限公司)
- 240、广州富力地产有限公司
- 241、氢课（上海）教育科技有限公司
- 242、武汉氪细胞网络技术有限公司
- 243、杭州有云科技有限公司
- 244、上海仙豆智能机器人有限公司
- 245、拉卡拉支付股份有限公司【拉卡拉】
- 246、虎彩印艺股份有限公司
- 247、北京数微科技有限公司
- 248、广东智瑞科技有限公司
- 249、找钢网
- 250、九机网
- 251、杭州跑跑网络科技有限公司
- 252、深圳未来云集
- 253、杭州每日给力科技有限公司
- 254、上海齐犇信息科技有限公司
- 255、滴滴出行【滴滴】
- 256、合肥云诊信息科技有限公司
- 257、云知声智能科技股份有限公司
- 258、南京坦道科技有限公司
- 259、爱乐优（二手平台）
- 260、猫眼电影（私有化部署）【猫眼电影】
- 261、美团大象（私有化部署）【美团大象】
- 262、作业帮教育科技（北京）有限公司【作业帮】
- 263、北京小年糕互联网技术有限公司
- 264、山东矩阵软件工程股份有限公司
- 265、陕西国驿软件科技有限公司
- 266、君开信息科技
- 267、村鸟网络科技有限责任公司
- 268、云南国际信托有限公司
- 269、金智教育
- 270、珠海市筑巢科技有限公司
- 271、上海百胜软件股份有限公司
- 272、深圳市科盾科技有限公司
- 273、哈啰出行【哈啰】
- 274、途虎养车【途虎】
- 275、卡思优派人力资源集团
- 276、南京观为智慧软件科技有限公司
- 277、杭州城市大脑科技有限公司
- 278、猿辅导【猿辅导】
- 279、洛阳健创网络科技有限公司
- 280、魔力耳朵
- 281、亿阳信通
- 282、上海招鲤科技有限公司
- 283、四川商旅无忧科技服务有限公司
- 284、UU跑腿
- 285、北京老虎证券【老虎证券】
- 286、悠活省吧（北京）网络科技有限公司
- 287、F5未来商店
- 288、深圳环阳通信息技术有限公司
- 289、遠傳電信
- 290、作业帮（北京）教育科技有限公司【作业帮】
- 291、成都科鸿智信科技有限公司
- 292、北京木屋时代科技有限公司
- 293、大学通（哈尔滨）科技有限责任公司
- 294、浙江华坤道威数据科技有限公司
- 295、吉祥航空【吉祥航空】
- 296、南京圆周网络科技有限公司
- 297、广州市洋葱omall电子商务
- 298、天津联物科技有限公司
- 299、跑哪儿科技（北京）有限公司
- 300、深圳市美西西餐饮有限公司(喜茶)
- 301、平安不动产有限公司【平安】
- 302、江苏中海昇物联科技有限公司
- 303、湖南牙医帮科技有限公司
- 304、重庆民航凯亚信息技术有限公司（易通航）
- 305、递易（上海）智能科技有限公司
- 306、亚朵
- 307、浙江新课堂教育股份有限公司
- 308、北京蜂创科技有限公司
- 309、德一智慧城市信息系统有限公司
- 310、北京翼点科技有限公司
- 311、湖南智数新维度信息科技有限公司
- 312、北京玖扬博文文化发展有限公司
- 313、上海宇珩信息科技有限公司
- 314、全景智联（武汉）科技有限公司
- 315、天津易客满国际物流有限公司
- 316、南京爱福路汽车科技有限公司
- 317、我房旅居集团
- 318、湛江亲邻科技有限公司
- 319、深圳市姜科网络有限公司
- 320、青岛日日顺物流有限公司
- 321、南京太川信息技术有限公司
- 322、美图之家科技有限公司【美图】
- 323、南京太川信息技术有限公司
- 324、众薪科技（北京）有限公司
- 325、武汉安安物联科技有限公司
- 326、北京智客朗道网络科技有限公司
- 327、深圳市超级猩猩健身管理管理有限公司
- 328、重庆达志科技有限公司
- 329、上海享评信息科技有限公司
- 330、薪得付信息科技
- 331、跟谁学
- 332、中道（苏州）旅游网络科技有限公司
- 333、广州小卫科技有限公司
- 334、上海非码网络科技有限公司
- 335、途家网网络技术（北京）有限公司【途家】
- 336、广州辉凡信息科技有限公司
- 337、天维尔信息科技股份有限公司
- 338、上海极豆科技有限公司
- 339、苏州触达信息技术有限公司
- 340、北京热云科技有限公司
- 341、中智企服（北京）科技有限公司
- 342、易联云计算（杭州）有限责任公司
- 343、青岛航空股份有限公司【青岛航空】
- 344、山西博睿通科技有限公司
- 345、网易杭州网络有限公司【网易】
- 346、北京果果乐学科技有限公司
- 347、百望股份有限公司
- 348、中保金服（深圳）科技有限公司
- 349、天津运友物流科技股份有限公司
- 350、广东创能科技股份有限公司
- 351、上海倚博信息科技有限公司
- 352、深圳百果园实业（集团）股份有限公司
- 353、广州细刻网络科技有限公司
- 354、武汉鸿业众创科技有限公司
- 355、金锡科技（广州）有限公司
- 356、易瑞国际电子商务有限公司
- 357、奇点云
- 358、中视信息科技有限公司
- 359、开源项目:datax-web
- 360、云知声智能科技股份有限公司
- 361、开源项目:bboss
- 362、成都深驾科技有限公司
- 363、FunPlus【趣加】
- 364、杭州创匠信科技有限公司
- 365、龙匠（北京）科技发展有限公司
- 366、广州一链通互联网科技有限公司
- 367、上海星艾网络科技有限公司
- 368、虎博网络技术(上海)有限公司
- 369、青岛优米信息技术有限公司
- 370、八维通科技有限公司
- 371、烟台合享智星数据科技有限公司
- 372、东吴证券股份有限公司
- 373、中通云仓股份有限公司【中通】
- 374、北京加菲猫科技有限公司
- 375、北京匠心演绎科技有限公司
- 376、宝贝走天下
- 377、厦门众库科技有限公司
- 378、海通证券数据中心
- 389、湖南快乐通宝小额贷款有限公司
- 380、浙江大华技术股份有限公司
- 381、杭州魔筷科技有限公司
- 382、青岛掌讯通区块链科技有限公司
- 383、新大陆金融科技
- 384、常州玺拓软件科技有限公司
- 385、北京正保网格教育科技有限公司
- 386、统一企业（中国）投资有限公司【统一】
- 387、微革网络科技有限公司
- 388、杭州融易算科技有限公司
- 399、青岛上啥班网络科技有限公司
- 390、京东酒世界
- 391、杭州爱博仕科技有限公司
- 392、五星金服控股有限公司
- 393、福建乐摩物联科技有限公司
- 394、百炼智能科技有限公司
- 395、山东能源数智云科技有限公司
- 396、招商局能源运输股份有限公司
- 397、三一集团【三一】
- 398、东巴文（深圳）健康管理有限公司
- 399、索易软件
- 400、深圳市宁远科技有限公司
- 401、熙牛医疗
- 402、南京智鹤电子科技有限公司
- 403、嘀嗒出行【嘀嗒出行】
- 404、广州虎牙信息科技有限公司【虎牙】
- 405、广州欧莱雅百库网络科技有限公司【欧莱雅】
- 406、微微科技有限公司
- 407、我爱我家房地产经纪有限公司【我爱我家】
- 408、九号发现
- 409、薪人薪事
- 410、武汉氪细胞网络技术有限公司
- 411、广州市斯凯奇商业有限公司
- 412、微淼商学院
- 413、杭州车盛科技有限公司
- 414、深兰科技（上海）有限公司
- 415、安徽中科美络信息技术有限公司
- 416、比亚迪汽车工业有限公司【比亚迪】
- 417、湖南小桔信息技术有限公司
- 418、安徽科大国创软件科技有限公司
- 419、克而瑞
- 420、陕西云基华海信息技术有限公司
- 421、安徽深宁科技有限公司
- 422、广东康爱多数字健康有限公司
- 423、嘉里电子商务
- 424、上海时代光华教育发展有限公司
- 425、CityDo
- 426、上海禹知信息科技有限公司
- 427、广东智瑞科技有限公司
- 428、西安爱铭网络科技有限公司
- 429、心医国际数字医疗系统(大连)有限公司
- 430、乐其电商
- 431、锐达科技
- 432、天津长城滨银汽车金融有限公司
- 433、代码网
- 434、东莞市东城乔伦软件开发工作室
- 435、浙江百应科技有限公司
- 436、上海力爱帝信息技术有限公司(Red E)
- 437、云徙科技有限公司
- 438、北京康智乐思网络科技有限公司【大姨吗APP】
- 439、安徽开元瞬视科技有限公司
- 440、立方
- 441、厦门纵行科技
- 442、乐山-菲尼克斯半导体有限公司
- 443、武汉光谷联合集团有限公司
- 444、上海金仕达软件科技有限公司
- 445、深圳易世通达科技有限公司
- 446、爱动超越人工智能科技（北京）有限责任公司
- 447、迪普信（北京）科技有限公司
- 448、掌站科技（北京）有限公司
- 449、深圳市华云中盛股份有限公司
- 450、上海原圈科技有限公司
- 451、广州赞赏信息科技有限公司
- 452、Amber Group
- 453、德威国际货运代理（上海）公司
- 454、浙江杰夫兄弟智慧科技有限公司
- 455、信也科技
- 456、开思时代科技（深圳）有限公司
- 457、大连槐德科技有限公司
- 458、同程生活
- 459、松果出行
- 460、企鹅杏仁集团
- 461、宁波科云信息科技有限公司
- 462、上海格蓝威驰信息科技有限公司
- 463、杭州趣淘鲸科技有限公司
- 464、湖州市数字惠民科技有限公司
- 465、乐普（北京）医疗器械股份有限公司
- 466、广州市晴川高新技术开发有限公司
- 467、山西缇客科技有限公司
- 468、徐州卡西穆电子商务有限公司
- 469、格创东智科技有限公司
- 470、世纪龙信息网络有限责任公司
- 471、邦道科技有限公司
- 472、河南中盟新云科技股份有限公司
- 473、横琴人寿保险有限公司
- 474、上海海隆华钟信息技术有限公司
- 475、上海久湛
- 476、上海仙豆智能机器人有限公司
- 477、广州汇尚网络科技有限公司
- 478、深圳市阿卡索资讯股份有限公司
- 479、青岛佳家康健康管理有限责任公司
- 480、蓝城兄弟
- 481、成都天府通金融服务股份有限公司
- 482、深圳云镖网络科技有限公司
- 483、上海影创科技
- 484、成都艾拉物联
- 485、北京客邻尚品网络技术有限公司
- 486、IT实战联盟
- 487、杭州尤拉夫科技有限公司
- 488、中大检测(湖南)股份有限公司
- 489、江苏电老虎工业互联网股份有限公司
- 490、上海助通信息科技有限公司
- 491、北京符节科技有限公司
- 492、杭州英祐科技有限公司
- 493、江苏电老虎工业互联网股份有限公司
- 494、深圳市点猫科技有限公司
- 495、杭州天音
- 496、深圳市二十一科技互联网有限公司
- 497、海南海口翎度科技
- 498、北京小趣智品科技有限公司
- 499、广州石竹计算机软件有限公司
- 500、深圳市惟客数据科技有限公司
- 501、中国医疗器械有限公司
- 502、上海云谦科技有限公司
- 503、上海磐农信息科技有限公司
- 504、广州领航食品有限公司
- 505、青岛掌讯通区块链科技有限公司
- 506、北京新网数码信息技术有限公司
- 507、超体信息科技(深圳)有限公司
- 508、长沙店帮手信息科技有限公司
- 509、上海助弓装饰工程有限公司
- 510、杭州寻联网络科技有限公司
- 511、成都大淘客科技有限公司
- 512、松果出行
- 513、深圳市唤梦科技有限公司
- 514、上汽集团商用车技术中心
- 515、北京中航讯科技股份有限公司
- 516、北龙中网(北京)科技有限责任公司
- 517、前海超级前台(深圳)信息技术有限公司
- 518、上海中商网络股份有限公司
- 519、上海助通信息科技有限公司
- 520、宁波聚臻智能科技有限公司
- 521、上海零动数码科技股份有限公司
- 522、浙江学海教育科技有限公司
- 523、聚学云(山东)信息技术有限公司
- 524、多氟多新材料股份有限公司
- 525、智慧眼科技股份有限公司
- 526、广东智通人才连锁股份有限公司
- 527、世纪开元智印互联科技集团股份有限公司
- 528、北京理想汽车【理想汽车】
- 529、巽逸科技(重庆)有限公司
- 530、义乌购电子商务有限公司
- 531、深圳市珂莱蒂尔服饰有限公司
- 532、江西国泰利民信息科技有限公司
- 533、广西广电大数据科技有限公司
- 534、杭州艾麦科技有限公司
- 535、广州小滴科技有限公司
- 536、佳缘科技股份有限公司
- 537、上海深擎信息科技有限公司
- 538、武商网
- 539、福建民本信息科技有限公司
- 540、杭州惠合信息科技有限公司
- 541、厦门爱立得科技有限公司
- 542、成都拟合未来科技有限公司
- 543、宁波聚臻智能科技有限公司
- 544、广东百慧科技有限公司
- 545、笨马网络
- 546、深圳市信安数字科技有限公司
- 547、深圳市思乐数据技术有限公司
- 548、四川绿源集科技有限公司
- 549、湖南云医链生物科技有限公司
- 550、杭州源诚科技有限公司
- 551、北京开课吧科技有限公司
- 552、北京多来点信息技术有限公司
- 553、JEECG BOOT低代码开发平台
- 554、苏州同元软控信息技术有限公司
- 555、江苏大泰信息技术有限公司
- 556、北京大禹汇智
- 557、北京盛哲科技有限公司
- 558、广州钛动科技有限公司
- 559、北京大禹汇智科技有限公司
- 560、湖南鼎翰文化股份有限公司
- 561、苏州安软信息科技有限公司
- 562、芒果tv
- 563、上海艺赛旗软件股份有限公司
- 564、中盈优创资讯科技有限公司
- 565、乐乎公寓
- 566、启明信息
- 567、苏州安软
- 568、南京富金的软件科技有限公司
- 569、深圳市新科聚合网络技术有限公司
- 570、你好现在(北京)科技股份有限公司
- 571、360考试宝典
- 572、北京一零科技有限公司
- 573、厦门星纵信息
- 574、Dalligent Solusi Indonesia
- 575、深圳华普物联科技有限公司
- 576、深圳行健自动化股份有限公司
- 577、深圳市富融信息科技服务有限公司
- 578、蓝鸟云
- 579、上海澎博财经资讯有限公司
- 580、北京小鸦科技有限公司
- 581、杭州盈泉云科技有限公司
- 582、惟客数据
- 583、GOSO香蜜闺秀
- 584、普乐师（上海）数字科技有限公司
- 585、西安市雁塔区咖北堂网络科技部
- 586、宁波聚臻智能科技有限公司
- 587、普乐师数字科技有限公司
- 588、江苏蟹联网科技有限公司
- 589、杭州未智科技有限公司
- 590、安吉智行物流有限公司
- 591、华生大家居集团有限公司
- 592、美心食品（广州）有限公司
- 593、货拉拉【货拉拉APP】
- 594、杭州思韬瑞科技有限公司
- 595、杭州玖融科技有限公司
- 596、北京优海网络科技有限公司
- 597、浙江大维高新技术股份有限公司
- 598、粤港澳大湾区数字经济研究院
- 599、普康（杭州）健康科技有限公司
- 600、华西证券股份有限公司【华西证券】
- 601、杭州海康机器人股份有限公司【海康】
- 602、河南宸邦信息技术有限公司
- 603、成都次元节点网络科技有限公司
- 604、富士康科技集团【富士康】
- 605、青岛东软载波科技股份有限公司
- 606、小菊快跑科技有限公司
- 607、视源股份
- 608、宁波聚臻智能科技有限公司
- 609、阔天科技有限公司
- 610、网宿科技有限公司
- 611、南京梵鼎信息技术有限公司
- 612、房天下【房天下】
- 613、特瓦特能源科技有限公司
- 614、拓迪智能科技有限公司
- 615、东软集团【东软】
- 616、开普云
- 617、领课网络
- 618、南京特维软件有限公司
- 619、福建易联众保睿通信息科技有限公司
- 620、浙江核心同花顺金融科技有限公司【同花顺】
- 621、浙江博观瑞思科技有限公司
- 622、北京新美互通科技有限公司
- 623、北京有生博大软件股份有限公司
- 624、时代中国
- 625、鱼泡网
- 626、一粒方糖（安徽）科技有限公司
- 627、北京外研在线数字科技有限公司
- 628、德电（中国）通信技术有限公司
- 629、杭州寻联网络科技有限公司
- 630、橙联（中国）有限公司
- 631、北京承启通科技有限公司
- 632、银联数据服务有限公司【银联】
- 633、上海晶确科技有限公司
- 634、亚信科技有限公司
- 635、福建新航物联网科技有限公司
- 636、上扬软件
- 637、深蓝汽车科技有限公司
- 638、南昌节点汇智科技有限公司
- 639、锐明技术
- 640、再造再生健康科技有限公司
- 641、华宝证券
- 642、卓正医疗
- 643、深圳湛信科技
- 644、陕西鑫众为软件有限公司
- 645、深圳市润农科技有限公司
- 646、庚商教育智能科技有限公司
- 647、杭州祎声科技
- 648、四川久远银海软件股份有限公司
- 649、GeeFox极狐低代码
- 650、浙江和仁科技股份有限公司
- 651、宁波聚臻智能科技有限公司
- 652、福建福昕软件开发股份有限公司【福昕】
- 653、广州中长康达信息技术有限公司
- 654、武汉趣改信息科技有限公司
- 655、北京华夏思源科技发展有限公司
- 656、宁波关关通科技有限公司
- 657、青岛吕氏餐饮有限公司
- 658、杭州乐刻网络科技有限公司
- 659、上海红瓦信息科技有限公司
- 660、陕西旅小宝信息科技有限公司
- 661、中科卓恒(大连)科技有限公司
- 662、北京华益精点生物技术有限公司
- 663、马士基（中国）航运有限公司【马士基】
- 664、陕西美咚网络科技有限公司
- 665、山东新北洋信息技术股份有限公司 
- 666、福建中瑞文化发展集团有限公司
- 667、黑龙江省建工集团有限责任公司【黑龙江省建工】
- 668、志信能达安全科技(广州)有限公司
- 669、重庆开源共创科技有限公司
- 670、华泰人寿保险股份有限公司【华泰人寿】
- 671、成都盘古纵横集团
- 672、北京果果乐学科技有限公司
- 673、北京凌云空间科技有限公司
- 674、临工重机股份有限公司
- 675、上海热风时尚管理集团【热风】
- 676、HashKey Exchange
- 677、傲基（深圳）跨境商务股份有限公司
- 678、青岛文达通科技股份有限公司
- 679、杭州普罗云科技有限公司
- 680、浙江云鹭科技有限公司
- 681、中山市芯宏柿网络科技有限公司
- 682、深圳市家家顺物联科技
- 683、重庆斑西科技有限公司
- 684、福建省泰古信息技术有限公司
- 685、贵阳永青仪电科技有限公司
- 686、广州博依特智能信息科技有限公司
- 687、河南宠呦呦信息技术有限公司
- 688、陕西星邑空间技术有限公司
- 689、广东西欧克实业有限公司
- 690、唱吧麦颂KTV
- 691、联通云
- 692、北京爱话本科技有限公司
- 693、北京起创科技有限公司
- ……
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;更多接入的公司，欢迎在 &lt;a href="https://github.com/xuxueli/xxl-job/issues/1"&gt;登记地址&lt;/a&gt; 登记，登记仅仅为了产品推广。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;欢迎大家的关注和使用，XXL-JOB也将拥抱变化，持续发展。&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Open a pull request to fix a bug, or open an &lt;a href="https://github.com/xuxueli/xxl-job/issues/"&gt;Issue&lt;/a&gt; to discuss a new feature or change.&lt;/p&gt; 
&lt;p&gt;欢迎参与项目贡献！比如提交PR修复一个bug，或者新建 &lt;a href="https://github.com/xuxueli/xxl-job/issues/"&gt;Issue&lt;/a&gt; 讨论新特性或者变更。&lt;/p&gt; 
&lt;h2&gt;Copyright and License&lt;/h2&gt; 
&lt;p&gt;This product is open source and free, and will continue to provide free community technical support. Individual or enterprise users are free to access and use.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Licensed under the GNU General Public License (GPL) v3.&lt;/li&gt; 
 &lt;li&gt;Copyright (c) 2015-present, xuxueli.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;产品开源免费，并且将持续提供免费的社区技术支持。个人或企业内部可自由的接入和使用。如有需要可 &lt;a href="https://www.xuxueli.com/page/community.html"&gt;邮件联系&lt;/a&gt; 作者免费获取项目授权。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apache/fineract</title>
      <link>https://github.com/apache/fineract</link>
      <description>&lt;p&gt;Apache Fineract&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Fineract&lt;/h1&gt; 
&lt;!-- TODO Reactivate when there is a working CI-CD instance: [![Swagger Validation](https://validator.swagger.io/validator?url=https://sandbox.mifos.community/fineract-provider/swagger-ui/fineract.yaml)](https://validator.swagger.io/validator/debug?url=https://sandbox.mifos.community/fineract-provider/swagger-ui/fineract.yaml) --&gt; 
&lt;p&gt;&lt;a href="https://github.com/apache/fineract/actions/workflows/build-mariadb.yml"&gt;&lt;img src="https://github.com/apache/fineract/actions/workflows/build-mariadb.yml/badge.svg?branch=develop" alt="Build" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/apache/fineract"&gt;&lt;img src="https://img.shields.io/docker/pulls/apache/fineract.svg?logo=Docker" alt="Docker Hub" /&gt;&lt;/a&gt; &lt;a href="https://github.com/apache/fineract/actions/workflows/publish-dockerhub.yml"&gt;&lt;img src="https://github.com/apache/fineract/actions/workflows/publish-dockerhub.yml/badge.svg?sanitize=true" alt="Docker Build" /&gt;&lt;/a&gt; &lt;a href="https://sonarcloud.io/summary/new_code?id=apache_fineract"&gt;&lt;img src="https://sonarcloud.io/api/project_badges/measure?project=apache_fineract&amp;amp;metric=sqale_index" alt="Technical Debt" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Apache Fineract is an open-source core banking platform providing a flexible, extensible foundation for a wide range of financial services. By making robust banking technology openly available, it lowers barriers for institutions and innovators to reach underserved and unbanked populations.&lt;/p&gt; 
&lt;p&gt;Have a look at the &lt;a href="https://fineract.apache.org/docs/current"&gt;documentation&lt;/a&gt;, the &lt;a href="https://cwiki.apache.org/confluence/display/FINERACT"&gt;wiki&lt;/a&gt; or at the &lt;a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=91554327"&gt;FAQ&lt;/a&gt;, if this README does not answer what you are looking for.&lt;/p&gt; 
&lt;h1&gt;COMMUNITY&lt;/h1&gt; 
&lt;p&gt;If you are interested in contributing to this project, but perhaps don't quite know how and where to get started, please &lt;a href="http://fineract.apache.org/#contribute"&gt;join our developer mailing list&lt;/a&gt;, listen into our conversations, chime into threads, or just send us a "Hello!" introduction email; we're a friendly bunch, and look forward to hearing from you. A more informal alternative is the &lt;a href="https://app.slack.com/client/T0F5GHE8Y/C028634A61L"&gt;Fineract Slack channel&lt;/a&gt; (thank you, Mifos, for supporting the Slack channel!).&lt;/p&gt; 
&lt;p&gt;For the developer wiki, see &lt;a href="https://cwiki.apache.org/confluence/display/FINERACT/Contributor%27s+Zone"&gt;Contributor's Zone&lt;/a&gt;. Maybe &lt;a href="https://cwiki.apache.org/confluence/display/FINERACT/How-to+articles"&gt;these how-to articles&lt;/a&gt; help you to get started.&lt;/p&gt; 
&lt;p&gt;In any case visit &lt;a href="https://issues.apache.org/jira/secure/Dashboard.jspa?selectPageId=12335824"&gt;our JIRA Dashboard&lt;/a&gt; to find issues to work on, see what others are doing, or open new issues.&lt;/p&gt; 
&lt;p&gt;In the moment you get started writing code, please consult our &lt;a href="https://raw.githubusercontent.com/apache/fineract/develop/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; guidelines, where you will find more information on subjects like coding style, testing and pull requests.&lt;/p&gt; 
&lt;h1&gt;REQUIREMENTS&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;min. 16GB RAM and 8 core CPU&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MariaDB &amp;gt;= 11.5.2&lt;/code&gt; or &lt;code&gt;PostgreSQL &amp;gt;= 17.0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Java &amp;gt;= 21&lt;/code&gt; (Azul Zulu JVM is tested by our CI on GitHub Actions)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Tomcat (min. v10) is only required, if you wish to deploy the Fineract WAR to a separate external servlet container. You do not need to install Tomcat to run Fineract. We recommend the use of the self-contained JAR, which transparently embeds a servlet container using Spring Boot.&lt;/p&gt; 
&lt;h1&gt;SECURITY&lt;/h1&gt; 
&lt;p&gt;If you believe you have found a security vulnerability, &lt;a href="https://fineract.apache.org/#contribute"&gt;let us know privately&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For details about security during development and deployment, see the documentation &lt;a href="https://fineract.apache.org/docs/current/#_security"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;INSTRUCTIONS&lt;/h1&gt; 
&lt;p&gt;The following how-to's assume you have Java installed, you cloned the repository (or downloaded and extracted a &lt;a href="https://github.com/apache/fineract/releases"&gt;specific version&lt;/a&gt;) and you have a &lt;a href="https://raw.githubusercontent.com/apache/fineract/develop/#database-and-tables"&gt;database server&lt;/a&gt; (MariaDB or PostgreSQL) running.&lt;/p&gt; 
&lt;h2&gt;How to run for local development&lt;/h2&gt; 
&lt;p&gt;Run the following commands in this order:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./gradlew createDB -PdbName=fineract_tenants
./gradlew createDB -PdbName=fineract_default
./gradlew devRun
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This creates two databases and builds and runs Fineract, which will be listening for API requests on port 8443 (by default) now.&lt;/p&gt; 
&lt;p&gt;Confirm Fineract is ready with, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl --insecure https://localhost:8443/fineract-provider/actuator/health
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To test authenticated endpoints, include credentials in your request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl --location \
  https://localhost:8443/fineract-provider/api/v1/clients \
  --header 'Content-Type: application/json' \
  --header 'Fineract-Platform-TenantId: default' \
  --header 'Authorization: Basic bWlmb3M6cGFzc3dvcmQ='
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to run for production&lt;/h2&gt; 
&lt;p&gt;Running Fineract to try it out is relatively easy. If you intend to use it in a production environment, be aware that a proper deployment can be complex, costly, and time-consuming. Considerations include: Security, privacy, compliance, performance, service availability, backups, and more. The Fineract project does not provide a comprehensive guide for deploying Fineract in production. You might need skills in enterprise Java applications and more. Alternatively, you could pay a vendor for Fineract deployment and maintenance. You will find tips and tricks for deploying and securing Fineract in our official documentation and in the community-maintained wiki.&lt;/p&gt; 
&lt;h2&gt;How to build the JAR file&lt;/h2&gt; 
&lt;p&gt;Build a modern, cloud native, fully self contained JAR file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./gradlew clean bootJar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The JAR will be created in the &lt;code&gt;fineract-provider/build/libs&lt;/code&gt; directory. As we are not allowed to include a JDBC driver in the built JAR, download a JDBC driver of your choice. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wget https://dlm.mariadb.com/4174416/Connectors/java/connector-java-3.5.2/mariadb-java-client-3.5.2.jar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Start the JAR and specify the directory containing the JDBC driver using the loader.path option, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;java -Dloader.path=. -jar fineract-provider/build/libs/fineract-provider.jar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This does not require an external Tomcat.&lt;/p&gt; 
&lt;p&gt;The tenants database connection details are configured &lt;a href="https://raw.githubusercontent.com/apache/fineract/develop/#instructions-to-run-using-docker-or-podman"&gt;via environment variables (as with Docker container)&lt;/a&gt;, e.g. like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export FINERACT_HIKARI_PASSWORD=verysecret
...
java -jar fineract-provider.jar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build the WAR file&lt;/h2&gt; 
&lt;p&gt;Build a traditional WAR file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./gradlew :fineract-war:clean :fineract-war:war
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The WAR will be created in the &lt;code&gt;fineract-war/build/libs&lt;/code&gt; directory. Afterwards deploy the WAR to your Tomcat Servlet Container.&lt;/p&gt; 
&lt;p&gt;We recommend using the JAR instead of the WAR file deployment, because it's much easier.&lt;/p&gt; 
&lt;h2&gt;How to run using Docker or Podman&lt;/h2&gt; 
&lt;p&gt;It is possible to do a 'one-touch' installation of Fineract using containers (AKA "Docker"). This includes the database running in the container.&lt;/p&gt; 
&lt;p&gt;As prerequisites, you must have &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker-compose&lt;/code&gt; installed on your machine; see &lt;a href="https://docs.docker.com/install/"&gt;Docker Install&lt;/a&gt; and &lt;a href="https://docs.docker.com/compose/install/"&gt;Docker Compose Install&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can also use &lt;a href="https://github.com/containers/libpod"&gt;Podman&lt;/a&gt; (e.g. via &lt;code&gt;dnf install podman-docker&lt;/code&gt;), and &lt;a href="https://github.com/containers/podman-compose/"&gt;Podman Compose&lt;/a&gt; (e.g. via &lt;code&gt;pip3 install podman-compose&lt;/code&gt;) instead of Docker.&lt;/p&gt; 
&lt;p&gt;To run a new Fineract instance on Linux you can simply:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/apache/fineract.git
cd fineract
./gradlew :fineract-provider:jibDockerBuild -x test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Windows, do this instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cmd"&gt;git clone https://github.com/apache/fineract.git --config core.autocrlf=input
cd fineract
gradlew :fineract-provider:jibDockerBuild -x test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install the Loki log driver and start:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker plugin install grafana/loki-docker-driver:latest \
  --alias loki --grant-all-permissions
docker compose -f docker-compose-development.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Fineract (back-end) should be running at &lt;a href="https://localhost:8443/fineract-provider/"&gt;https://localhost:8443/fineract-provider/&lt;/a&gt; now. Wait for &lt;a href="https://localhost:8443/fineract-provider/actuator/health"&gt;https://localhost:8443/fineract-provider/actuator/health&lt;/a&gt; to return &lt;code&gt;{"status":"UP"}&lt;/code&gt;. You must go to &lt;a href="https://localhost:8443"&gt;https://localhost:8443&lt;/a&gt; and remember to accept the self-signed SSL certificate of the API once in your browser.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hub.docker.com/r/apache/fineract"&gt;Docker Hub&lt;/a&gt; has a pre-built container image of this project, built continuously.&lt;/p&gt; 
&lt;p&gt;You must specify the MySQL tenants database JDBC URL by passing it to the &lt;code&gt;fineract&lt;/code&gt; container via environment variables; please consult the &lt;a href="https://raw.githubusercontent.com/apache/fineract/develop/docker-compose.yml"&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/a&gt; for exact details how to specify those.&lt;/p&gt; 
&lt;p&gt;The logfiles and the Java Flight Recorder output are available in &lt;code&gt;PROJECT_ROOT/build/fineract/logs&lt;/code&gt;. If you use IntelliJ then you can double-click on the &lt;code&gt;.jfr&lt;/code&gt; file and open it with the IDE. You can also download &lt;a href="https://www.azul.com/products/components/azul-mission-control/"&gt;Azul Mission Control&lt;/a&gt; to analyze the Java Flight Recorder file.&lt;/p&gt; 
&lt;p&gt;NOTE: If you have issues with the file permissions and Docker Compose then you might need to change the variable values for &lt;code&gt;FINERACT_USER&lt;/code&gt; and &lt;code&gt;FINERACT_GROUP&lt;/code&gt; in &lt;code&gt;PROJECT_ROOT/config/docker/env/fineract-common.env&lt;/code&gt;. You can find out what values you need to put there with the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;id -u ${USER}
id -g ${GROUP}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please make sure that you are not checking in your changed values. The defaults should work for most people.&lt;/p&gt; 
&lt;h2&gt;How to run on Kubernetes&lt;/h2&gt; 
&lt;h3&gt;General Clusters&lt;/h3&gt; 
&lt;p&gt;You can also run Fineract using containers on a Kubernetes cluster. Make sure you set up and connect to your Kubernetes cluster. You can follow &lt;a href="https://cwiki.apache.org/confluence/display/FINERACT/Install+and+configure+kubectl+and+Google+Cloud+SDK+on+ubuntu+16.04"&gt;this&lt;/a&gt; guide to set up a Kubernetes cluster on GKE. Make sure to replace &lt;code&gt;apache-fineract-cn&lt;/code&gt; with &lt;code&gt;apache-fineract&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Now e.g. from your Google Cloud shell, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/apache/fineract.git
cd fineract/kubernetes
./kubectl-startup.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To shutdown and reset your Cluster, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./kubectl-shutdown.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using Minikube&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can run fineract on a local kubernetes cluster using &lt;a href="https://minikube.sigs.k8s.io/docs/"&gt;minikube&lt;/a&gt;. As prerequisite you must have &lt;code&gt;minikube&lt;/code&gt; and &lt;code&gt;kubectl&lt;/code&gt; installed on your machine; see &lt;a href="https://kubernetes.io/docs/tasks/tools/install-minikube/"&gt;Minikube &amp;amp; Kubectl install&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To run a new Fineract instance on Minikube you can simply:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/apache/fineract.git
cd fineract/kubernetes
minikube start
./kubectl-startup.sh
minikube service fineract-server --url --https
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Fineract is now running at the printed URL, which you can check e.g. using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;http --verify=no --timeout 240 --check-status get $(minikube service fineract-server --url --https)/fineract-provider/actuator/health
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To check the status of your containers on your local minikube Kubernetes cluster, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;minikube dashboard
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check Fineract logs using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;kubectl logs deployment/fineract-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To shutdown and reset your cluster, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./kubectl-shutdown.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to enable External Message Broker (ActiveMQ or Apache Kafka)&lt;/h2&gt; 
&lt;p&gt;There are two use-cases where external message broker is needed:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;External Business Events / Reliable Event Framework&lt;/li&gt; 
 &lt;li&gt;Executing Partitioned Spring Batch Jobs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;External Events are business events, e.g.: &lt;code&gt;ClientCreated&lt;/code&gt;, which might be important for third party systems. Apache Fineract supports ActiveMQ (or other JMS compliant brokers) and Apache Kafka endpoints for sending out Business Events. By default, they are not emitted.&lt;/p&gt; 
&lt;p&gt;In case of a large deployment with millions of accounts, the Close of Business Day Spring Batch job may run several hours. In order to speed up this task, remote partitioning of the job is supported. The Manager node partitions breaks up the COB job into smaller pieces (sub tasks), which then can be executed on multiple Worker nodes in parallel. The worker nodes are notified either by ActiveMQ or Kafka regarding their new sub tasks.&lt;/p&gt; 
&lt;h3&gt;ActiveMQ&lt;/h3&gt; 
&lt;p&gt;JMS based messaging is disabled by default. In &lt;code&gt;docker-compose-postgresql-activemq.yml&lt;/code&gt; an example is shown, where ActiveMQ is enabled. In that configuration one Spring Batch Manager instance and two Spring Batch Worker instances are created. Spring based events should be disabled and jms based event handling should be enabled. Furthermore, proper broker JMS URL should be configured.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;      FINERACT_REMOTE_JOB_MESSAGE_HANDLER_JMS_ENABLED=true
      FINERACT_REMOTE_JOB_MESSAGE_HANDLER_SPRING_EVENTS_ENABLED=false
      FINERACT_REMOTE_JOB_MESSAGE_HANDLER_JMS_BROKER_URL=tcp://activemq:61616
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For additional ActiveMQ related configuration please take a look to the &lt;code&gt;application.properties&lt;/code&gt; where the supported configuration parameters are listed with their default values.&lt;/p&gt; 
&lt;h3&gt;Kafka&lt;/h3&gt; 
&lt;p&gt;Kafka support is also disabled by default. In &lt;code&gt;docker-compose-postgresql-kafka.yml&lt;/code&gt; an example is shown, where self-hosted Kafka is enabled for both External Events and Spring Batch Remote Job execution.&lt;/p&gt; 
&lt;p&gt;During the development Fineract was tested with PLAINTEXT Kafka brokers without authentication and with AWS MSK using IAM authentication. The extra &lt;a href="https://github.com/aws/aws-msk-iam-auth/releases"&gt;JAR file&lt;/a&gt; required for IAM authentication is already added to the classpath. An example MSK setup can be found in &lt;code&gt;docker-compose-postgresql-kafka-msk.yml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The full list of supported Kafka related properties is documented in the &lt;a href="https://fineract.apache.org/docs/current/"&gt;Fineract Platform documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;DATABASE AND TABLES&lt;/h1&gt; 
&lt;p&gt;You can run the required version of the database server in a container, instead of having to install it, like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --name mariadb-11.5 -p 3306:3306 -e MARIADB_ROOT_PASSWORD=mysql -d mariadb:11.5.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and stop and destroy it like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker rm -f mariadb-11.5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Beware that this container database keeps its state inside the container and not on the host filesystem. It is lost when you destroy (rm) this container. This is typically fine for development. See &lt;a href="https://hub.docker.com/_/mariadb"&gt;Caveats: Where to Store Data on the database container documentation&lt;/a&gt; regarding how to make it persistent instead of ephemeral.&lt;/p&gt; 
&lt;h2&gt;MySQL/MariaDB and UTC timezone&lt;/h2&gt; 
&lt;p&gt;With release &lt;code&gt;1.8.0&lt;/code&gt; we introduced improved date time handling in Fineract. Date time is stored in UTC, and UTC timezone enforced even on the JDBC driver, e. g. for MySQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;serverTimezone=UTC&amp;amp;useLegacyDatetimeCode=false&amp;amp;sessionVariables=time_zone='-00:00'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you use MySQL as Fineract database, the following configuration is highly recommended:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the application in UTC (the default command line in our Docker image has the necessary parameters already set)&lt;/li&gt; 
 &lt;li&gt;Run the MySQL database server in UTC (if you use managed services like AWS RDS, then this should be the default anyway, but it would be good to double-check)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In case Fineract and MySQL do not run in UTC, MySQL might save date time values differently from PostgreSQL&lt;/p&gt; 
&lt;p&gt;Example scenario: If the Fineract instance runs in timezone: GMT+2, and the local date time is 2022-08-11 17:15 ...&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;... then PostgreSQL saves the LocalDateTime as is: 2022-08-11 17:15&lt;/li&gt; 
 &lt;li&gt;... and MySQL saves the LocalDateTime in UTC: 2022-08-11 15:15&lt;/li&gt; 
 &lt;li&gt;... but when we read the date time from PostgreSQL or from MySQL, both systems give us the same value: 2022-08-11 17:15 GMT+2&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If a previously used Fineract instance didn't run in UTC (backward compatibility), all prior dates will be read wrongly by MySQL. This can cause issues, when you run the database migration scripts.&lt;/p&gt; 
&lt;p&gt;Recommendation: Shift all dates in your database by the timezone offset that your Fineract instance used.&lt;/p&gt; 
&lt;h1&gt;CONNECTION POOL CONFIGURATION&lt;/h1&gt; 
&lt;p&gt;Please check &lt;code&gt;application.properties&lt;/code&gt; to see which connection pool settings can be tweaked. The associated environment variables are prefixed with &lt;code&gt;FINERACT_HIKARI_*&lt;/code&gt;. You can find more information about specific connection pool settings at the &lt;a href="https://github.com/brettwooldridge/HikariCP?tab=readme-ov-file#gear-configuration-knobs-baby"&gt;HikariCP Github repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;NOTE: We keep backwards compatibility until one of the next releases to ensure that things are working as expected. Environment variables prefixed &lt;code&gt;fineract_tenants_*&lt;/code&gt; can still be used to configure the database connection, but we strongly encourage using &lt;code&gt;FINERACT_HIKARI_*&lt;/code&gt; with more options.&lt;/p&gt; 
&lt;h1&gt;VERSIONS&lt;/h1&gt; 
&lt;p&gt;A release version is derived from source control. The version will include &lt;code&gt;-SNAPSHOT&lt;/code&gt; unless the current branch looks like a release or release maintenance branch. See &lt;code&gt;gitVersioning&lt;/code&gt; settings in &lt;code&gt;build.gradle&lt;/code&gt; for details.&lt;/p&gt; 
&lt;p&gt;The latest stable release can be viewed on the develop branch: &lt;a href="https://github.com/apache/fineract/tree/develop" title="Latest Release"&gt;Latest Release on Develop&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The progress of this project can be viewed in the left hand navigation under &lt;a href="https://cwiki.apache.org/confluence/display/FINERACT/Fineract+Releases"&gt;this page of the wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;LICENSE&lt;/h1&gt; 
&lt;p&gt;This project is licensed under &lt;a href="https://github.com/apache/fineract/raw/develop/APACHE_LICENSETEXT.md"&gt;Apache License Version 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Connector/J JDBC Driver client library from &lt;a href="https://www.mariadb.org"&gt;MariaDB&lt;/a&gt; is licensed under the LGPL. The library is often used in development when running integration tests that use the Liquibase library. That JDBC driver is however not distributed with the Fineract product and is not required to use the product. If you are a developer and object to using the LGPL licensed Connector/J JDBC driver, simply do not run the integration tests that use the Liquibase library and use another JDBC driver. As discussed in &lt;a href="https://issues.apache.org/jira/browse/LEGAL-462"&gt;LEGAL-462&lt;/a&gt;, this project therefore complies with the &lt;a href="https://www.apache.org/legal/resolved.html"&gt;Apache Software Foundation third-party license policy&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;PLATFORM API&lt;/h1&gt; 
&lt;p&gt;Fineract does not provide a UI, but provides an API. Running Fineract locally, the Swagger documentation can be accessed under &lt;code&gt;https://localhost:8443/fineract-provider/swagger-ui/index.html&lt;/code&gt;. A live version can be accessed via &lt;a href="https://sandbox.mifos.community/fineract-provider/swagger-ui/index.html"&gt;this Sandbox&lt;/a&gt; (not hosted by us).&lt;/p&gt; 
&lt;p&gt;Apache Fineract supports client code generation using &lt;a href="https://github.com/swagger-api/swagger-codegen"&gt;Swagger Codegen&lt;/a&gt; based on the &lt;a href="https://swagger.io/specification/"&gt;OpenAPI Specification&lt;/a&gt;. For more instructions on how to generate client code, check &lt;a href="https://fineract.apache.org/docs/current/#_generate_api_client"&gt;this section&lt;/a&gt; of the Fineract documentation. &lt;a href="https://www.youtube.com/watch?v=FlVd-0YAo6c"&gt;This video&lt;/a&gt; documents the use of the Swagger-UI.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>karatelabs/karate</title>
      <link>https://github.com/karatelabs/karate</link>
      <description>&lt;p&gt;Test Automation Made Simple&lt;/p&gt;&lt;hr&gt;&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt; &lt;h3&gt; &lt;a href="https://github.com/karatelabs/karate/wiki/Get-Started"&gt;⏩ &lt;br /&gt; Get Started&lt;/a&gt; &lt;/h3&gt; &lt;/th&gt; 
   &lt;td&gt; Get started using VS Code, IntelliJ, Maven, Gradle, NPM, &lt;br /&gt; GitHub Codespaces, Docker or the command-line &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt; &lt;h3&gt; &lt;a href="https://github.com/karatelabs/karate-examples/raw/main/README.md"&gt;💡 &lt;br /&gt; Examples&lt;/a&gt; &lt;/h3&gt; &lt;/th&gt; 
   &lt;td&gt; Examples and demos of integrations with other frameworks &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt; &lt;h3&gt; &lt;a href="https://www.youtube.com/playlist?list=PLnONaB4tNFOkxwM3dOvXLXJstSg_wMJSs"&gt;📺 &lt;br /&gt; Kick Start Videos&lt;/a&gt; &lt;/h3&gt; &lt;/th&gt; 
   &lt;td&gt; Beginner-friendly step-by-step guides to starting from scratch &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h1&gt;Karate&lt;/h1&gt; 
&lt;h2&gt;Test Automation Made &lt;code&gt;Simple.&lt;/code&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;a href="https://github.com/karatelabs/karate/wiki/Support"&gt; &lt;img src="https://img.shields.io/badge/support-wiki-red.svg?sanitize=true" /&gt; &lt;/a&gt; 
 &lt;a href="https://twitter.com/getkarate"&gt; &lt;img src="https://img.shields.io/badge/@getkarate--lightgrey?logo=twitter&amp;amp;style=social" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/karatelabs/karate/stargazers"&gt; &lt;img src="https://img.shields.io/github/stars/karatelabs/karate?style=social" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;a href="https://central.sonatype.com/namespace/io.karatelabs"&gt; &lt;img src="https://img.shields.io/maven-central/v/io.karatelabs/karate-core.svg?sanitize=true" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/karatelabs/karate/actions?query=workflow%3Amaven-build"&gt; &lt;img src="https://github.com/karatelabs/karate/actions/workflows/maven-build.yml/badge.svg?branch=develop" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/karatelabs/karate/releases"&gt; &lt;img src="https://img.shields.io/github/release/karatelabs/karate.svg?sanitize=true" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://karatelabs.io"&gt;&lt;img src="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/resources/karate-map.jpg" height="650" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Karate is the only open-source tool to combine API test-automation, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty"&gt;mocks&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling"&gt;performance-testing&lt;/a&gt; and even &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core"&gt;UI automation&lt;/a&gt; into a &lt;strong&gt;single&lt;/strong&gt;, &lt;em&gt;unified&lt;/em&gt; framework. The syntax is language-neutral, and easy for even non-programmers. Assertions and HTML reports are built-in, and you can run tests in parallel for speed.&lt;/p&gt; 
&lt;p&gt;There's also a cross-platform &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#standalone-jar"&gt;stand-alone executable&lt;/a&gt; for teams not comfortable with Java. You don't have to compile code. Just write tests in a &lt;strong&gt;simple&lt;/strong&gt;, &lt;em&gt;readable&lt;/em&gt; syntax - carefully designed for HTTP, JSON, GraphQL and XML. And you can mix API and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core"&gt;UI test-automation&lt;/a&gt; within the same test script.&lt;/p&gt; 
&lt;p&gt;A &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-api"&gt;Java API&lt;/a&gt; also exists for those who prefer to programmatically integrate Karate's rich automation and data-assertion capabilities.&lt;/p&gt; 
&lt;h2&gt;Hello World&lt;/h2&gt; 
&lt;h3&gt;For API Testing&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://gist.github.com/ptrthomas/d5a2d9e15d0b07e4f1b46f692a599f93"&gt;&lt;img src="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/resources/karate-hello-world.jpg" height="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you are familiar with Cucumber / Gherkin, the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#cucumber-vs-karate"&gt;&lt;em&gt;big difference&lt;/em&gt;&lt;/a&gt; here is that you &lt;strong&gt;don't&lt;/strong&gt; need to write extra "glue" code or Java "step definitions" !&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;It is worth pointing out that JSON is a 'first class citizen' of the syntax such that you can express payload and expected data without having to use double-quotes and without having to enclose JSON field names in quotes. There is no need to 'escape' characters like you would have had to in Java or other programming languages.&lt;/p&gt; 
&lt;p&gt;And you don't need to create additional Java classes for any of the payloads that you need to work with.&lt;/p&gt; 
&lt;h1&gt;Index&lt;/h1&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt;Start&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#maven"&gt;Maven&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#gradle"&gt;Gradle&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#quickstart"&gt;Quickstart&lt;/a&gt; | &lt;a href="https://github.com/karatelabs/karate/tree/master/karate-netty#standalone-jar"&gt;Standalone Executable&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#folder-structure"&gt;Naming Conventions&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure"&gt;Script Structure&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Run&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#junit-5"&gt;JUnit 5&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#command-line"&gt;Command Line&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#ide-support"&gt;IDE Support&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;Tags / Grouping&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;Parallel Execution&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-api"&gt;Java API&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#jbang"&gt;jbang&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Report&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;Configuration&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment"&gt;Environment Switching&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#test-reports"&gt;Reports&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#junit-html-report"&gt;JUnit HTML Report&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#dry-run"&gt;Dry Run&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#report-verbosity"&gt;Report Verbosity&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#logging"&gt;Logging&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#log-masking"&gt;Log Masking&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Types&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#json"&gt;JSON&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#xml"&gt;XML&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions"&gt;JavaScript Functions&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;Reading Files&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion"&gt;Type / String Conversion&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#floats-and-integers"&gt;Floats and Integers&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;Embedded Expressions&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#jsonpath-filters"&gt;JsonPath&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#xpath-functions"&gt;XPath&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;Karate Expressions&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variables&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#text"&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#table"&gt;&lt;code&gt;table&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#yaml"&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#csv"&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-string"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-json"&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-xml"&gt;&lt;code&gt;xml&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-xmlstring"&gt;&lt;code&gt;xmlstring&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-bytes"&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-copy"&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Actions&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#print"&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#replace"&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#get"&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#remove"&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#listen"&gt;&lt;code&gt;listen&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#doc"&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#compare-image"&gt;&lt;code&gt;compareImage&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;&lt;code&gt;karate&lt;/code&gt; JS API&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;HTTP&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#url"&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#path"&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#request"&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#method"&gt;&lt;code&gt;method&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#status"&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#soap-action"&gt;&lt;code&gt;soap action&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#retry-until"&gt;&lt;code&gt;retry until&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Request&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#param"&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#cookie"&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#form-field"&gt;&lt;code&gt;form field&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-file"&gt;&lt;code&gt;multipart file&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-field"&gt;&lt;code&gt;multipart field&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-entity"&gt;&lt;code&gt;multipart entity&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#params"&gt;&lt;code&gt;params&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#headers"&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#cookies"&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#form-fields"&gt;&lt;code&gt;form fields&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-files"&gt;&lt;code&gt;multipart files&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-fields"&gt;&lt;code&gt;multipart fields&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Response&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responsebytes"&gt;&lt;code&gt;responseBytes&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responsestatus"&gt;&lt;code&gt;responseStatus&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders"&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responsecookies"&gt;&lt;code&gt;responseCookies&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responsetime"&gt;&lt;code&gt;responseTime&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responsetype"&gt;&lt;code&gt;responseType&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#requesttimestamp"&gt;&lt;code&gt;requestTimeStamp&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Assert&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match ==&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match--not-equals"&gt;&lt;code&gt;match !=&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains"&gt;&lt;code&gt;match contains&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-only"&gt;&lt;code&gt;match contains only&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-any"&gt;&lt;code&gt;match contains any&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-deep"&gt;&lt;code&gt;match contains deep&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-only-deep"&gt;&lt;code&gt;match contains only deep&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#not-contains"&gt;&lt;code&gt;match !contains&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-each"&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-each-contains-deep"&gt;&lt;code&gt;match each contains deep&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-header"&gt;&lt;code&gt;match header&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching"&gt;Fuzzy Matching&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#schema-validation"&gt;Schema Validation&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#contains-short-cuts"&gt;&lt;code&gt;contains&lt;/code&gt; short-cuts&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Re-Use&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;Calling Other &lt;code&gt;*.feature&lt;/code&gt; Files&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features"&gt;Data Driven Features&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions"&gt;Calling JavaScript Functions&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;Calling Java Code&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#commonly-needed-utilities"&gt;Commonly Needed Utilities&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests"&gt;Data Driven Scenarios&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Advanced&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#polling"&gt;Polling&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic"&gt;Conditional Logic&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#hooks"&gt;Before / After Hooks&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms"&gt;JSON Transforms&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#loops"&gt;Loops&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#http-basic-authentication-example"&gt;HTTP Basic Auth&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#http-header-manipulation"&gt;Header Manipulation&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#text"&gt;GraphQL&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#async"&gt;Websockets / Async&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call-vs-read"&gt;&lt;code&gt;call&lt;/code&gt; vs &lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;More&lt;/th&gt; 
   &lt;td&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty"&gt;Test Doubles&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling"&gt;Performance Testing&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core"&gt;UI Testing&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-robot"&gt;Desktop Automation&lt;/a&gt; | &lt;a href="https://github.com/karatelabs/karate/wiki/IDE-Support#vs-code-karate-plugin"&gt;VS Code / Debug&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#comparison-with-rest-assured"&gt;Karate vs REST-assured&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#cucumber-vs-karate"&gt;Karate vs Cucumber&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;Examples and Demos&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Java knowledge is not required and even non-programmers can write tests&lt;/li&gt; 
 &lt;li&gt;Scripts are plain-text, require no compilation step or IDE, and teams can collaborate using Git / standard SCM&lt;/li&gt; 
 &lt;li&gt;Based on the popular Cucumber / Gherkin standard - with &lt;a href="https://github.com/karatelabs/karate/wiki/IDE-Support"&gt;IDE support&lt;/a&gt; and syntax-coloring options&lt;/li&gt; 
 &lt;li&gt;Elegant &lt;a href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;DSL&lt;/a&gt; syntax 'natively' supports JSON and XML - including &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;JsonPath&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#xpath-functions"&gt;XPath&lt;/a&gt; expressions&lt;/li&gt; 
 &lt;li&gt;Eliminate the need for 'Java Beans' or 'helper code' to represent payloads and HTTP end-points, and &lt;a href="https://twitter.com/KarateDSL/status/873035687817117696"&gt;dramatically reduce the lines of code&lt;/a&gt; needed for a test&lt;/li&gt; 
 &lt;li&gt;Ideal for testing the highly dynamic responses from &lt;a href="http://graphql.org"&gt;GraphQL&lt;/a&gt; API-s because of Karate's built-in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#text"&gt;text-manipulation&lt;/a&gt; and &lt;a href="https://github.com/json-path/JsonPath#path-examples"&gt;JsonPath&lt;/a&gt; capabilities&lt;/li&gt; 
 &lt;li&gt;Tests are super-readable - as scenario data can be expressed in-line, in human-friendly &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#json"&gt;JSON&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#xml"&gt;XML&lt;/a&gt;, Cucumber &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-cucumber-way"&gt;Scenario&lt;/a&gt; Outline &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#table"&gt;tables&lt;/a&gt;, or a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set-multiple"&gt;payload builder&lt;/a&gt; approach &lt;a href="https://gist.github.com/ptrthomas/d6beb17e92a43220d254af942e3ed3d9"&gt;unique to Karate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Express expected results as readable, well-formed JSON or XML, and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;assert in a single step&lt;/a&gt; that the entire response payload (no matter how complex or deeply nested) - is as expected&lt;/li&gt; 
 &lt;li&gt;Comprehensive &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching"&gt;assertion capabilities&lt;/a&gt; - and failures clearly report which data element (and path) is not as expected, for easy troubleshooting of even large payloads&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/karatelabs/karate/wiki/IDE-Support#vs-code-karate-plugin"&gt;Fully featured debugger&lt;/a&gt; that can step &lt;em&gt;backwards&lt;/em&gt; and even &lt;a href="https://twitter.com/KarateDSL/status/1167533484560142336"&gt;re-play a step while editing it&lt;/a&gt; - a &lt;em&gt;huge&lt;/em&gt; time-saver&lt;/li&gt; 
 &lt;li&gt;Simpler and more &lt;a href="https://twitter.com/KarateDSL/status/878984854012022784"&gt;powerful alternative&lt;/a&gt; to JSON-schema for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#schema-validation"&gt;validating payload structure&lt;/a&gt; and format - that even supports &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root"&gt;cross-field&lt;/a&gt; / domain validation logic&lt;/li&gt; 
 &lt;li&gt;Scripts can &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;call other scripts&lt;/a&gt; - which means that you can easily re-use and maintain authentication and 'set up' flows efficiently, across multiple tests&lt;/li&gt; 
 &lt;li&gt;Embedded JavaScript engine that allows you to build a library of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions"&gt;re-usable functions&lt;/a&gt; that suit your specific environment or organization&lt;/li&gt; 
 &lt;li&gt;Re-use of payload-data and user-defined functions across tests is &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;so easy&lt;/a&gt; - that it becomes a natural habit for the test-developer&lt;/li&gt; 
 &lt;li&gt;Built-in support for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment"&gt;switching configuration&lt;/a&gt; across different environments (e.g. dev, QA, pre-prod)&lt;/li&gt; 
 &lt;li&gt;Support for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests"&gt;data-driven tests&lt;/a&gt; and being able to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;tag or group&lt;/a&gt; tests is built-in, no need to rely on an external framework&lt;/li&gt; 
 &lt;li&gt;Native support for reading &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#yaml"&gt;YAML&lt;/a&gt; and even &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#csv-files"&gt;CSV&lt;/a&gt; files - and you can use them for data-driven tests&lt;/li&gt; 
 &lt;li&gt;Standard Java / Maven project structure, and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#command-line"&gt;seamless integration&lt;/a&gt; into CI / CD pipelines - and support for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#junit-5"&gt;JUnit 5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Option to use as a light-weight &lt;a href="https://github.com/karatelabs/karate/tree/master/karate-netty#standalone-jar"&gt;stand-alone executable&lt;/a&gt; - convenient for teams not comfortable with Java&lt;/li&gt; 
 &lt;li&gt;Multi-threaded &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;parallel execution&lt;/a&gt;, which is a huge time-saver, especially for integration and end-to-end tests&lt;/li&gt; 
 &lt;li&gt;Built-in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#test-reports"&gt;test-reports&lt;/a&gt; compatible with Cucumber so that you have the option of using third-party (open-source) maven-plugins for even &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo#example-report"&gt;better-looking reports&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Reports include HTTP request and response &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#test-reports"&gt;logs &lt;em&gt;in-line&lt;/em&gt;&lt;/a&gt;, which makes &lt;a href="https://twitter.com/KarateDSL/status/899671441221623809"&gt;troubleshooting&lt;/a&gt; and &lt;a href="https://twitter.com/KarateDSL/status/935029435140489216"&gt;debugging&lt;/a&gt; easier&lt;/li&gt; 
 &lt;li&gt;Easily invoke JDK classes, Java libraries, or re-use custom Java code if needed, for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;ultimate extensibility&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Simple plug-in system for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#http-basic-authentication-example"&gt;authentication&lt;/a&gt; and HTTP &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers"&gt;header management&lt;/a&gt; that will handle any complex, real-world scenario&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core"&gt;Cross-browser Web UI automation&lt;/a&gt; so that you can test &lt;em&gt;all&lt;/em&gt; layers of your application with the same framework&lt;/li&gt; 
 &lt;li&gt;[experimental] &lt;a href="https://github.com/karatelabs/karate/issues/743"&gt;Android and iOS mobile support&lt;/a&gt; via &lt;a href="http://appium.io"&gt;Appium&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Visual Validation via the built-in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#compare-image"&gt;image comparison&lt;/a&gt; capabilities&lt;/li&gt; 
 &lt;li&gt;Cross platform &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-robot"&gt;Desktop Automation&lt;/a&gt; that can be &lt;a href="https://twitter.com/ptrthomas/status/1215534821234995200"&gt;mixed into Web Automation flows&lt;/a&gt; if needed&lt;/li&gt; 
 &lt;li&gt;Option to invoke via a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-api"&gt;Java API&lt;/a&gt;, which means that you can easily &lt;a href="https://stackoverflow.com/q/47795762/143475"&gt;mix Karate into Java projects or legacy UI-automation suites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/ptrthomas/status/986463717465391104"&gt;Save significant effort&lt;/a&gt; by re-using Karate test-suites as &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling"&gt;Gatling performance tests&lt;/a&gt; that &lt;em&gt;deeply&lt;/em&gt; assert that server responses are accurate under load&lt;/li&gt; 
 &lt;li&gt;Gatling integration can hook into &lt;a href="https://github.com/karatelabs/karate/tree/master/karate-gatling#custom"&gt;&lt;em&gt;any&lt;/em&gt; custom Java code&lt;/a&gt; - which means that you can perf-test even non-HTTP protocols such as &lt;a href="https://github.com/karatelabs/karate-examples/raw/main/grpc/README.md"&gt;gRPC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty"&gt;API mocks&lt;/a&gt; or test-doubles that even &lt;a href="https://hackernoon.com/api-consumer-contract-tests-and-test-doubles-with-karate-72c30ea25c18"&gt;maintain CRUD 'state'&lt;/a&gt; across multiple calls - enabling TDD for micro-services and &lt;a href="https://martinfowler.com/articles/consumerDrivenContracts.html"&gt;Consumer Driven Contracts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#async"&gt;Async&lt;/a&gt; support that allows you to seamlessly integrate the handling of custom events or listening to message-queues&lt;/li&gt; 
 &lt;li&gt;Built-in &lt;a href="https://twitter.com/KarateDSL/status/1338892932691070976"&gt;HTML templating&lt;/a&gt; so that you can extend your test-reports into readable specifications&lt;/li&gt; 
 &lt;li&gt;Comprehensive support for different flavors of HTTP calls: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#soap-action"&gt;SOAP&lt;/a&gt; / XML requests&lt;/li&gt; 
   &lt;li&gt;HTTPS / &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;SSL&lt;/a&gt; - without needing certificates, key-stores or trust-stores&lt;/li&gt; 
   &lt;li&gt;HTTP &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;proxy server&lt;/a&gt; support&lt;/li&gt; 
   &lt;li&gt;URL-encoded &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#form-field"&gt;HTML-form&lt;/a&gt; data&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-field"&gt;Multi-part&lt;/a&gt; file-upload - including &lt;code&gt;multipart/mixed&lt;/code&gt; and &lt;code&gt;multipart/related&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Browser-like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#cookie"&gt;cookie&lt;/a&gt; handling&lt;/li&gt; 
   &lt;li&gt;Full control over HTTP &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;headers&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#path"&gt;path&lt;/a&gt; and query &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#param"&gt;parameters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#retry-until"&gt;Re-try&lt;/a&gt; until condition&lt;/li&gt; 
   &lt;li&gt;&lt;a href="http://www.websocket.org"&gt;Websocket&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#async"&gt;support&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Real World Examples&lt;/h2&gt; 
&lt;p&gt;A set of real-life examples can be found here: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;Karate Demos&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Comparison with REST-assured&lt;/h2&gt; 
&lt;p&gt;For teams familiar with or currently using &lt;a href="http://rest-assured.io"&gt;REST-assured&lt;/a&gt;, this detailed comparison of &lt;a href="http://tinyurl.com/karatera"&gt;Karate vs REST-assured&lt;/a&gt; - can help you evaluate Karate. Do note that if you prefer a pure Java API - Karate has &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-api"&gt;that covered&lt;/a&gt;, and with far more capabilities.&lt;/p&gt; 
&lt;h2&gt;References&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/WT4gg7Jutzg"&gt;API Testing with Karate&lt;/a&gt; - video + demos by &lt;a href="https://twitter.com/ptrthomas"&gt;Peter Thomas&lt;/a&gt; (creator / lead dev of Karate)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/_kMxvd37auc?si=WOEkvEUH6eWeHZUC"&gt;Introducing Karate: The ULTIMATE Test Automation Tool&lt;/a&gt; - video by &lt;a href="https://www.linkedin.com/in/willettjames/"&gt;James Willett&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/KarateDSL/status/1120985060843249664"&gt;Karate in the ThoughtWorks Tech Radar&lt;/a&gt; and featured &lt;a href="https://twitter.com/KarateDSL/status/1262719979104817152"&gt;a second time&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://speakerdeck.com/takanorig/microservices-testing-automation-with-karate"&gt;マイクロサービスにおけるテスト自動化 with Karate&lt;/a&gt; - (&lt;em&gt;Microservices Test Automation with Karate&lt;/em&gt;) presentation by &lt;a href="https://twitter.com/takanorig"&gt;Takanori Suzuki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.softwaretester.blog/writing-api-tests-with-karate"&gt;Writing API Tests with Karate&lt;/a&gt; - book by &lt;a href="https://www.softwaretester.blog/about"&gt;Benjamin Bischoff&lt;/a&gt;, Packt Publishing, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cXDIYpT6zck&amp;amp;t=4333s"&gt;Karate Webinar&lt;/a&gt; - Simplificando automação de API com Karate Framework by &lt;a href="https://www.linkedin.com/in/luanapassis/"&gt;Luana Assis&lt;/a&gt; from &lt;a href="https://www.base2.com.br/"&gt;Base2 Tecnologia&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Karate also has a dedicated "tag", and a very active and supportive community at &lt;a href="https://stackoverflow.com/questions/tagged/karate"&gt;Stack Overflow&lt;/a&gt; - where you can get support and ask questions.&lt;/p&gt; 
&lt;p&gt;You can find a lot more references, tutorials and blog-posts at &lt;a href="https://karatelabs.io"&gt;karatelabs.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;p&gt;If you are a Java developer - Karate requires at least &lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html"&gt;Java&lt;/a&gt; 17 and then either &lt;a href="http://maven.apache.org"&gt;Maven&lt;/a&gt;, &lt;a href="https://gradle.org"&gt;Gradle&lt;/a&gt;, or a Java IDE that embeds either to be installed. Note that Karate works fine on OpenJDK.&lt;/p&gt; 
&lt;p&gt;If you are new to programming or test-automation, the &lt;a href="https://plugins.jetbrains.com/plugin/19232-karate"&gt;official IntelliJ plugin&lt;/a&gt; is recommended.&lt;/p&gt; 
&lt;p&gt;If you &lt;em&gt;don't&lt;/em&gt; want to use Java, the &lt;a href="https://marketplace.visualstudio.com/items?itemName=karatelabs.karate"&gt;Karate extension for Visual Studio Code&lt;/a&gt; is recommended, and JavaScript, .NET, Ruby and Python programmers will feel right at home.&lt;/p&gt; 
&lt;p&gt;Both the official Visual Studio Code and IntelliJ plugins support step-through debugging of Karate tests.&lt;/p&gt; 
&lt;h2&gt;Maven&lt;/h2&gt; 
&lt;p&gt;All you need is available in the &lt;a href="https://search.maven.org/artifact/com.intuit.karate/karate-core"&gt;&lt;code&gt;karate-core&lt;/code&gt;&lt;/a&gt; artifact. You can run tests with this &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;directly&lt;/a&gt;, but teams can choose the JUnit variant (shown below) that pulls in JUnit 5 and &lt;a href="https://stackoverflow.com/a/65578167/143475"&gt;slightly improves the in-IDE experience&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.karatelabs&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;karate-junit5&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.5.1&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Gradle&lt;/h2&gt; 
&lt;p&gt;Alternatively for &lt;a href="https://gradle.org"&gt;Gradle&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;    testImplementation 'io.karatelabs:karate-junit5:1.5.1'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also refer to the wiki for using &lt;a href="https://github.com/karatelabs/karate/wiki/Gradle"&gt;Karate with Gradle&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Karate Core "Fat JAR"&lt;/h3&gt; 
&lt;p&gt;If you mix Karate into a Maven or Gradle project with many other dependendies, you may run into problems because of dependency conflicts. For example a lot of Java projects directly (or indirectly) depend on Netty or Thymeleaf or ANTLR, etc.&lt;/p&gt; 
&lt;p&gt;If you face issues such as "class not found", just pull in the &lt;code&gt;karate-core&lt;/code&gt; dependency, and use the &lt;code&gt;all&lt;/code&gt; &lt;a href="https://www.baeldung.com/maven-artifact-classifiers"&gt;classifier&lt;/a&gt; in your &lt;code&gt;pom.xml&lt;/code&gt; (or &lt;code&gt;build.gradle&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;For example when using Maven:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;io.karatelabs&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;karate-core&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${karate.version}&amp;lt;/version&amp;gt;
  &amp;lt;classifier&amp;gt;all&amp;lt;/classifier&amp;gt;
  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that for very complicated projects you can consider using a &lt;a href="https://maven.apache.org/guides/introduction/introduction-to-profiles.html"&gt;Maven profile&lt;/a&gt; so that testing-related dependencies don't collide with your development-time dependencies. Of course it is an option to have Karate tests in a separate stand-alone maven project and folder, while still being in the same Git repository.&lt;/p&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;p&gt;It may be easier for you to use the Karate Maven archetype to create a skeleton project with one command. You can then skip the next few sections, as the &lt;code&gt;pom.xml&lt;/code&gt;, recommended directory structure, sample test and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#junit-5"&gt;JUnit 5&lt;/a&gt; runners - will be created for you.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you are behind a corporate proxy, or especially if your local Maven installation has been configured to point to a repository within your local network, the command below may not work. One workaround is to temporarily disable or rename your Maven &lt;a href="https://maven.apache.org/settings.html"&gt;&lt;code&gt;settings.xml&lt;/code&gt;&lt;/a&gt; file, and try again.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can replace the values of &lt;code&gt;com.mycompany&lt;/code&gt; and &lt;code&gt;myproject&lt;/code&gt; as per your needs.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mvn archetype:generate \
-DarchetypeGroupId=io.karatelabs \
-DarchetypeArtifactId=karate-archetype \
-DarchetypeVersion=1.5.1 \
-DgroupId=com.mycompany \
-DartifactId=myproject
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a folder called &lt;code&gt;myproject&lt;/code&gt; (or whatever you set the name to).&lt;/p&gt; 
&lt;p&gt;Note, that when running the command in Windows (PowerShell) you must use quotes around each property value to prevent parsing errors.&lt;/p&gt; 
&lt;h2&gt;IDE Support&lt;/h2&gt; 
&lt;p&gt;Refer to the wiki - &lt;a href="https://github.com/karatelabs/karate/wiki/IDE-Support"&gt;IDE Support&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Folder Structure&lt;/h2&gt; 
&lt;p&gt;A Karate test script has the file extension &lt;code&gt;.feature&lt;/code&gt; which is the standard followed by Cucumber. You are free to organize your files using regular Java package conventions.&lt;/p&gt; 
&lt;p&gt;The Maven tradition is to have non-Java source files in a separate &lt;code&gt;src/test/resources&lt;/code&gt; folder structure - but we recommend that you keep them side-by-side with your &lt;code&gt;*.java&lt;/code&gt; files. When you have a large and complex project, you will end up with a few data files (e.g. &lt;code&gt;*.js&lt;/code&gt;, &lt;code&gt;*.json&lt;/code&gt;, &lt;code&gt;*.txt&lt;/code&gt;) as well and it is much more convenient to see the &lt;code&gt;*.java&lt;/code&gt; and &lt;code&gt;*.feature&lt;/code&gt; files and all related artifacts in the same place.&lt;/p&gt; 
&lt;p&gt;This can be easily achieved with the following tweak to your maven &lt;code&gt;&amp;lt;build&amp;gt;&lt;/code&gt; section.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;build&amp;gt;
    &amp;lt;testResources&amp;gt;
        &amp;lt;testResource&amp;gt;
            &amp;lt;directory&amp;gt;src/test/java&amp;lt;/directory&amp;gt;
            &amp;lt;excludes&amp;gt;
                &amp;lt;exclude&amp;gt;**/*.java&amp;lt;/exclude&amp;gt;
            &amp;lt;/excludes&amp;gt;
        &amp;lt;/testResource&amp;gt;
    &amp;lt;/testResources&amp;gt;        
    &amp;lt;plugins&amp;gt;
    ...
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is very common in the world of Maven users and keep in mind that these are tests and not production code.&lt;/p&gt; 
&lt;p&gt;Alternatively, if using Gradle then add the following &lt;code&gt;sourceSets&lt;/code&gt; definition&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the above in place, you don't have to keep switching between your &lt;code&gt;src/test/java&lt;/code&gt; and &lt;code&gt;src/test/resources&lt;/code&gt; folders, you can have all your test-code and artifacts under &lt;code&gt;src/test/java&lt;/code&gt; and everything will work as expected.&lt;/p&gt; 
&lt;p&gt;Once you get used to this, you may even start wondering why projects need a &lt;code&gt;src/test/resources&lt;/code&gt; folder at all !&lt;/p&gt; 
&lt;h2&gt;Naming Conventions&lt;/h2&gt; 
&lt;p&gt;Since these are tests and not production Java code, you don't need to be bound by the &lt;code&gt;com.mycompany.foo.bar&lt;/code&gt; convention and the un-necessary explosion of sub-folders that ensues. We suggest that you have a folder hierarchy only one or two levels deep - where the folder names clearly identify which 'resource', 'entity' or API is the web-service under test.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;src/test/java
    |
    +-- karate-config.js
    +-- logback-test.xml
    +-- some-reusable.feature
    +-- some-classpath-function.js
    +-- some-classpath-payload.json
    |
    \-- animals
        |
        +-- AnimalsTest.java
        |
        +-- cats
        |   |
        |   +-- cats-post.feature
        |   +-- cats-get.feature
        |   +-- cat.json
        |   \-- CatsRunner.java
        |
        \-- dogs
            |
            +-- dog-crud.feature
            +-- dog.json
            +-- some-helper-function.js
            \-- DogsRunner.java
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Assuming you use JUnit, there are some good reasons for the recommended (best practice) naming convention and choice of file-placement shown above:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Not using the &lt;code&gt;*Test.java&lt;/code&gt; convention for the JUnit classes (e.g. &lt;code&gt;CatsRunner.java&lt;/code&gt;) in the &lt;code&gt;cats&lt;/code&gt; and &lt;code&gt;dogs&lt;/code&gt; folder ensures that these tests will &lt;strong&gt;not&lt;/strong&gt; be picked up when invoking &lt;code&gt;mvn test&lt;/code&gt; (for the whole project) from the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#command-line"&gt;command line&lt;/a&gt;. But you can still invoke these tests from the IDE, which is convenient when in development mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AnimalsTest.java&lt;/code&gt; (the only file that follows the &lt;code&gt;*Test.java&lt;/code&gt; naming convention) acts as the 'test suite' for the entire project. By default, Karate will load all &lt;code&gt;*.feature&lt;/code&gt; files from sub-directories as well. But since &lt;code&gt;some-reusable.feature&lt;/code&gt; is &lt;em&gt;above&lt;/em&gt; &lt;code&gt;AnimalsTest.java&lt;/code&gt; in the folder hierarchy, it will &lt;strong&gt;not&lt;/strong&gt; be picked-up. Which is exactly what we want, because &lt;code&gt;some-reusable.feature&lt;/code&gt; is designed to be &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;called&lt;/a&gt; only from one of the other test scripts (perhaps with some parameters being passed). You can also use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;tags&lt;/a&gt; to skip files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;some-classpath-function.js&lt;/code&gt; and &lt;code&gt;some-classpath-payload.json&lt;/code&gt; are in the 'root' of the Java &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#classpath"&gt;'classpath'&lt;/a&gt; which means they can be easily &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;read&lt;/a&gt; (and re-used) from any test-script by using the &lt;code&gt;classpath:&lt;/code&gt; prefix, for e.g: &lt;code&gt;read('classpath:some-classpath-function.js')&lt;/code&gt;. Relative paths will also work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For details on what actually goes into a script or &lt;code&gt;*.feature&lt;/code&gt; file, refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#syntax-guide"&gt;syntax guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;JUnit 5&lt;/h2&gt; 
&lt;p&gt;Karate supports &lt;a href="https://junit.org/junit5"&gt;JUnit 5&lt;/a&gt; and the advantage is that you can have multiple methods in a test-class. Only 1 &lt;code&gt;import&lt;/code&gt; is needed, and instead of a class-level annotation, you use a nice &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Fluent_interface"&gt;fluent-api&lt;/a&gt; to express which tests and tags you want to use.&lt;/p&gt; 
&lt;p&gt;Note that the Java class does not need to be &lt;code&gt;public&lt;/code&gt; and even the test methods do not need to be &lt;code&gt;public&lt;/code&gt; - so tests end up being very concise.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Karate will traverse sub-directories and look for &lt;code&gt;*.feature&lt;/code&gt; files. For example if you have the JUnit class in the &lt;code&gt;com.mycompany&lt;/code&gt; package, &lt;code&gt;*.feature&lt;/code&gt; files in &lt;code&gt;com.mycompany.foo&lt;/code&gt; and &lt;code&gt;com.mycompany.bar&lt;/code&gt; will also be run. This is one reason why you may want to prefer a 'flat' directory structure as &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#naming-conventions"&gt;explained above&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Here is an &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-junit5/src/test/java/karate/SampleTest.java"&gt;example&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;package karate;

import com.intuit.karate.junit5.Karate;

class SampleTest {

    @Karate.Test
    Karate testSample() {
        return Karate.run("sample").relativeTo(getClass());
    }
    
    @Karate.Test
    Karate testTags() {
        return Karate.run("tags").tags("@second").relativeTo(getClass());
    }

    @Karate.Test
    Karate testSystemProperty() {
        return Karate.run("classpath:karate/tags.feature")
                .tags("@second")
                .karateEnv("e2e")
                .systemProperty("foo", "bar");
    }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that more "builder" methods are available from the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;&lt;code&gt;Runner.Builder&lt;/code&gt;&lt;/a&gt; class such as &lt;code&gt;reportDir()&lt;/code&gt; etc.&lt;/p&gt; 
&lt;p&gt;You should be able to right-click and run a single method using your IDE - which should be sufficient when you are in development mode. But to be able to run JUnit 5 tests from the command-line, you need to ensure that the latest version of the &lt;a href="https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html"&gt;maven-surefire-plugin&lt;/a&gt; is present in your project &lt;code&gt;pom.xml&lt;/code&gt; (within the &lt;code&gt;&amp;lt;build&amp;gt;/&amp;lt;plugins&amp;gt;&lt;/code&gt; section):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.22.2&amp;lt;/version&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run a single test method, for example the &lt;code&gt;testTags()&lt;/code&gt; in the example above, you can do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mvn test -Dtest=SampleTest#testTags
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also look at how to run tests via the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#command-line"&gt;command-line&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;parallel runner&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;JUnit HTML report&lt;/h3&gt; 
&lt;p&gt;When you use the JUnit runner - after the execution of each feature, an HTML report is output to the &lt;code&gt;target/karate-reports&lt;/code&gt; folder and the full path will be printed to the console (see &lt;a href="https://twitter.com/KarateDSL/status/935029435140489216"&gt;video&lt;/a&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;html report: (paste into browser to view)
-----------------------------------------
file:///projects/myproject/target/karate-reports/mypackage.myfeature.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can easily select (double-click), copy and paste this &lt;code&gt;file:&lt;/code&gt; URL into your browser address bar. This report is useful for troubleshooting and debugging a test because all requests and responses are shown in-line with the steps, along with error messages and the output of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#print"&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; statements. Just re-fresh your browser window if you re-run the test.&lt;/p&gt; 
&lt;h3&gt;Dry Run&lt;/h3&gt; 
&lt;p&gt;This will give you the usual HTML report showing what features will be run, including all steps shown (including comments) so that it can be reviewed. Of course the actual time-durations, and logs will be missing, and &lt;em&gt;everything&lt;/em&gt; will pass.&lt;/p&gt; 
&lt;p&gt;The “dry run” report is useful to review the tag "coverage" of what will be run. For example you can get a nice feature “coverage” report, provided you have a rich set of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;tags&lt;/a&gt;. e.g. &lt;code&gt;@smoke @module=one @module=two&lt;/code&gt; etc.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;&lt;code&gt;Runner.Builder&lt;/code&gt;&lt;/a&gt; API has a &lt;code&gt;dryRun()&lt;/code&gt; method to switch this on. Note that this mode can be also triggered via the command-line by adding &lt;code&gt;-D&lt;/code&gt; or &lt;code&gt;--dryrun&lt;/code&gt; to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karateoptions"&gt;&lt;code&gt;karate.options&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Command Line&lt;/h2&gt; 
&lt;p&gt;If you are using Karate via the &lt;a href="https://marketplace.visualstudio.com/items?itemName=karatelabs.karate"&gt;VS Code Plugin&lt;/a&gt; or the stand-alone JAR, refer to the &lt;a href="https://github.com/karatelabs/karate/wiki/Get-Started:-Other-Runtime-Options"&gt;CLI usage guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Command Line - Maven&lt;/h3&gt; 
&lt;p&gt;Normally in dev mode, you will use your IDE to run a &lt;code&gt;*.feature&lt;/code&gt; file directly or via the companion 'runner' JUnit Java class. When you have a 'runner' class in place, it would be possible to run it from the command-line as well.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;mvn test&lt;/code&gt; command only runs test classes that follow the &lt;code&gt;*Test.java&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#naming-conventions"&gt;naming convention&lt;/a&gt; by default. But you can choose a single test to run like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mvn test -Dtest=CatsRunner
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;karate.options&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;When your Java test "runner" is linked to multiple feature files, which will be the case when you use the recommended &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;parallel runner&lt;/a&gt;, you can narrow down your scope to a single feature, scenario or directory via the command-line, useful in dev-mode. Note how even &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;tags&lt;/a&gt; to exclude (or include) can be specified:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that any &lt;code&gt;Feature&lt;/code&gt; or &lt;code&gt;Scenario&lt;/code&gt; with the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#special-tags"&gt;special &lt;code&gt;@ignore&lt;/code&gt; tag&lt;/a&gt; will be skipped by default.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;mvn test "-Dkarate.options=--tags ~@skipme classpath:demo/cats/cats.feature" -Dtest=DemoTestParallel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Multiple feature files (or paths) can be specified, de-limited by the space character. They should be at the end of the &lt;code&gt;karate.options&lt;/code&gt;. To run only a single scenario, append the line number on which the scenario is defined, de-limited by &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mvn test "-Dkarate.options=PathToFeatureFiles/order.feature:12" -Dtest=DemoTestParallel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since paths are expected at the end of the command-line options - if you want to only over-ride tags, use the &lt;code&gt;=&lt;/code&gt; sign to make argument values clear. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mvn test -Dkarate.options='-t=@dev -t=@src' -Dtest=ExamplesTest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Command Line - Gradle&lt;/h3&gt; 
&lt;p&gt;For Gradle, you must extend the test task to allow the &lt;code&gt;karate.options&lt;/code&gt; to be passed to the runtime (otherwise they get consumed by Gradle itself). To do that, add the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;test {
    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then the above command in Gradle would look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./gradlew test --tests *CatsRunner
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./gradlew test -Dtest.single=CatsRunner
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Test Suites&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The recommended way to define and run test-suites and reporting in Karate is to use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;parallel runner&lt;/a&gt;, described in the next section. The approach in this section is more suited for troubleshooting in dev-mode, using your IDE.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;One way to define 'test-suites' in Karate is to have a JUnit class at a level 'above' (in terms of folder hierarchy) all the &lt;code&gt;*.feature&lt;/code&gt; files in your project. So if you take the previous &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#naming-conventions"&gt;folder structure example&lt;/a&gt;, you can do this on the command-line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mvn test "-Dkarate.options=--tags ~@skipme" -Dtest=AnimalsTest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here, &lt;code&gt;AnimalsTest&lt;/code&gt; is the name of the Java class we designated to run the multiple &lt;code&gt;*.feature&lt;/code&gt; files that make up your test-suite. There is a neat way to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;tag your tests&lt;/a&gt; and the above example demonstrates how to run all tests &lt;em&gt;except&lt;/em&gt; the ones tagged &lt;code&gt;@skipme&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note that the special, built-in tag &lt;code&gt;@ignore&lt;/code&gt; will &lt;em&gt;always&lt;/em&gt; be skipped by default, and you don't need to specify &lt;code&gt;~@ignore&lt;/code&gt; anywhere.&lt;/p&gt; 
&lt;p&gt;You can 'lock down' the fact that you only want to execute the single JUnit class that functions as a test-suite - by using the following &lt;a href="http://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html"&gt;maven-surefire-plugin configuration&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${maven.surefire.version}&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;animals/AnimalsTest.java&amp;lt;/include&amp;gt;
        &amp;lt;/includes&amp;gt;
        &amp;lt;systemProperties&amp;gt;
            &amp;lt;karate.options&amp;gt;--tags @smoke&amp;lt;/karate.options&amp;gt;
        &amp;lt;/systemProperties&amp;gt;            
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note how the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karateoptions"&gt;&lt;code&gt;karate.options&lt;/code&gt;&lt;/a&gt; can be specified using the &lt;code&gt;&amp;lt;systemProperties&amp;gt;&lt;/code&gt; configuration.&lt;/p&gt; 
&lt;p&gt;For Gradle, you simply specify the test which is to be &lt;code&gt;include&lt;/code&gt;-d:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;test {
    include 'animals/AnimalsTest.java'
    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The big drawback of the approach above is that you cannot run tests in parallel. The recommended approach for Karate reporting in a Continuous Integration set-up is described in the next section which can generate the &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin"&gt;JUnit XML&lt;/a&gt; format that most CI tools can consume. The &lt;a href="https://cucumber.io/docs/cucumber/reporting"&gt;Cucumber JSON format&lt;/a&gt; can be also emitted, which gives you plenty of options for generating pretty reports using third-party maven plugins.&lt;/p&gt; 
&lt;p&gt;And most importantly - you can run tests in parallel without having to depend on third-party hacks that introduce code-generation and config 'bloat' into your &lt;code&gt;pom.xml&lt;/code&gt; or &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Parallel Execution&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Please note that some &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/resources/analytics.md"&gt;user analytics is tracked&lt;/a&gt; only when you view the built-in Karate HTML report.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Karate can run tests in parallel, and dramatically cut down execution time. This is a 'core' feature and does not depend on JUnit, Maven or Gradle.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;For those running Karate in non-Java projects via the command-line, note that you can set the number of threads via &lt;code&gt;--threads&lt;/code&gt; or &lt;code&gt;-T&lt;/code&gt; as explained &lt;a href="https://karatelabs.github.io/karate/karate-netty/#parallel-execution"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can easily "choose" features and tags to run and compose test-suites in a very flexible manner.&lt;/li&gt; 
 &lt;li&gt;You can use the returned &lt;code&gt;Results&lt;/code&gt; object to check if any scenarios failed, and to even summarize the errors&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin"&gt;JUnit XML&lt;/a&gt; reports can be generated in the "&lt;code&gt;reportDir&lt;/code&gt;" path you specify, and you can easily configure your CI to look for these files after a build (for e.g. in &lt;code&gt;**/*.xml&lt;/code&gt; or &lt;code&gt;**/karate-reports/*.xml&lt;/code&gt;). Note that you have to call the &lt;code&gt;outputJunitXml(true)&lt;/code&gt; method on the &lt;code&gt;Runner&lt;/code&gt; "builder".&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cucumber.io/docs/cucumber/reporting"&gt;Cucumber JSON reports&lt;/a&gt; can be generated, except that the extension will be &lt;code&gt;.json&lt;/code&gt; instead of &lt;code&gt;.xml&lt;/code&gt;. Note that you have to call the &lt;code&gt;outputCucumberJson(true)&lt;/code&gt; method on the &lt;code&gt;Runner&lt;/code&gt; "builder".&lt;/li&gt; 
 &lt;li&gt;HTML reports can be disabled by calling &lt;a href="https://github.com/karatelabs/karate/raw/v1.2.1.RC1/karate-core/src/main/java/com/karatelabs/karate/Runner.java#L515"&gt;&lt;code&gt;outputHtmlReport(false)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;Runner.path()&lt;/code&gt; "builder" method in &lt;code&gt;karate-core&lt;/code&gt; is how you refer to the package you want to execute, and all feature files within sub-directories will be picked up&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Runner.path()&lt;/code&gt; takes multiple string parameters, so you can refer to multiple packages or even individual &lt;code&gt;*.feature&lt;/code&gt; files and easily "compose" a test-suite 
  &lt;ul&gt; 
   &lt;li&gt;e.g. &lt;code&gt;Runner.path("classpath:animals", "classpath:some/other/package.feature")&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;To &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;choose tags&lt;/a&gt;, call the &lt;code&gt;tags()&lt;/code&gt; API, note that by default, any &lt;code&gt;*.feature&lt;/code&gt; file tagged with the special (built-in) tag: &lt;code&gt;@ignore&lt;/code&gt; will be skipped. You can also specify tags on the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#test-suites"&gt;command-line&lt;/a&gt;. The &lt;code&gt;tags()&lt;/code&gt; method also takes multiple arguments, for e.g. 
  &lt;ul&gt; 
   &lt;li&gt;this is an "AND" operation: &lt;code&gt;tags("@customer", "@smoke")&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;and this is an "OR" operation: &lt;code&gt;tags("@customer,@smoke")&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;There is an optional &lt;code&gt;reportDir()&lt;/code&gt; method if you want to customize the directory to which the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;HTML, XML and JSON&lt;/a&gt; files will be output, it defaults to &lt;code&gt;target/karate-reports&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;If you want to dynamically and programmatically determine the tags and features to be included - the API also accepts &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as the &lt;code&gt;path()&lt;/code&gt; and &lt;code&gt;tags()&lt;/code&gt; methods arguments&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parallel()&lt;/code&gt; &lt;em&gt;has&lt;/em&gt; to be the last method called, and you pass the number of parallel threads needed. It returns a &lt;code&gt;Results&lt;/code&gt; object that has all the information you need - such as the number of passed or failed tests.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;JUnit 5 Parallel Execution&lt;/h3&gt; 
&lt;p&gt;The example below assumes that &lt;a href="https://junit.org/junit5"&gt;JUnit 5&lt;/a&gt; is available on the classpath, and uses the &lt;code&gt;@Test&lt;/code&gt; annotation and the &lt;code&gt;assertEquals()&lt;/code&gt; method.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;But if you really want, you could use the &lt;code&gt;Runner&lt;/code&gt; and &lt;code&gt;Results&lt;/code&gt; API directly in &lt;em&gt;any&lt;/em&gt; Java class, and even a "main" method.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Use the &lt;a href="https://github.com/karatelabs/karate-template"&gt;&lt;code&gt;karate-template&lt;/code&gt;&lt;/a&gt; project if you want to get an &lt;a href="https://github.com/karatelabs/karate-template/raw/main/src/test/java/examples/ExamplesTest.java"&gt;example&lt;/a&gt; as part of a working, "skeleton" project.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;import com.intuit.karate.Results;
import com.intuit.karate.Runner;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

class TestParallel {

    @Test
    void testParallel() {
        Results results = Runner.path("classpath:animals").tags("~@skipme").parallel(5);
        assertEquals(0, results.getFailCount(), results.getErrorMessages());
    }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Parallel Stats&lt;/h3&gt; 
&lt;p&gt;For convenience, some stats are logged to the console when execution completes, which should look something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;======================================================
elapsed:   2.35 | threads:    5 | thread time: 4.98 
features:    54 | ignored:   25 | efficiency: 0.42
scenarios:  145 | passed:   145 | failed: 0
======================================================
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The parallel runner will always run &lt;code&gt;Feature&lt;/code&gt;-s in parallel. Karate will also run &lt;code&gt;Scenario&lt;/code&gt;-s in parallel by default. So if you have a &lt;code&gt;Feature&lt;/code&gt; with multiple &lt;code&gt;Scenario&lt;/code&gt;-s in it - they will execute in parallel, and even each &lt;code&gt;Examples&lt;/code&gt; row in a &lt;code&gt;Scenario Outline&lt;/code&gt; will do so !&lt;/p&gt; 
&lt;p&gt;A &lt;code&gt;karate-timeline.html&lt;/code&gt; file will also be saved to the report output directory mentioned above (&lt;code&gt;target/karate-reports&lt;/code&gt; by default) - which is useful for visually verifying or troubleshooting the effectiveness of the test-run (&lt;a href="https://twitter.com/KarateDSL/status/1049321708241317888"&gt;see video&lt;/a&gt;).&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;@parallel=false&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;In rare cases you may want to suppress the default of &lt;code&gt;Scenario&lt;/code&gt;-s executing in parallel and the special &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/a&gt; &lt;code&gt;@parallel=false&lt;/code&gt; can be used. If you place it above the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure"&gt;&lt;code&gt;Feature&lt;/code&gt;&lt;/a&gt; keyword, it will apply to all &lt;code&gt;Scenario&lt;/code&gt;-s. And if you just want one or two &lt;code&gt;Scenario&lt;/code&gt;-s to NOT run in parallel, you can place this tag above only &lt;em&gt;those&lt;/em&gt; &lt;code&gt;Scenario&lt;/code&gt;-s. See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/encoding/encoding.feature"&gt;example&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Note that forcing &lt;code&gt;Scenario&lt;/code&gt;-s to run in a particular sequence &lt;a href="https://stackoverflow.com/a/46080568/143475"&gt;is an anti-pattern&lt;/a&gt;, and should be avoided as far as possible.&lt;/p&gt; 
&lt;h2&gt;Test Reports&lt;/h2&gt; 
&lt;p&gt;As mentioned above, most CI tools would be able to process the JUnit XML output of the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;parallel runner&lt;/a&gt; and determine the status of the build as well as generate reports.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;Karate Demo&lt;/a&gt; has a working example of the recommended parallel-runner set up. It also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo#example-report"&gt;details how&lt;/a&gt; a third-party library can be easily used to generate some very nice-looking reports, from the JSON output of the parallel runner.&lt;/p&gt; 
&lt;p&gt;For example, here below is an actual report generated by the &lt;a href="https://github.com/damianszczepanik/cucumber-reporting"&gt;cucumber-reporting&lt;/a&gt; open-source library.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/resources/karate-maven-report.jpg" height="600px" /&gt; 
&lt;p&gt;Another example for a popular Maven reporting plugin that is compatible with Karate JSON is &lt;a href="https://github.com/trivago/cluecumber-report-plugin"&gt;Cluecumber&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The demo also features &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo#code-coverage-using-jacoco"&gt;code-coverage using Jacoco&lt;/a&gt;, and some tips for even non-Java back-ends. Some third-party report-server solutions integrate with Karate such as &lt;a href="https://github.com/reportportal/agent-java-karate"&gt;ReportPortal.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Logging&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This is optional, and Karate will work without the logging config in place, but the default console logging may be too verbose for your needs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Karate uses &lt;a href="http://logback.qos.ch"&gt;LOGBack&lt;/a&gt; which looks for a file called &lt;code&gt;logback-test.xml&lt;/code&gt; on the '&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#classpath"&gt;classpath&lt;/a&gt;'.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;In rare cases, e.g. if you are using Karate to create a Java application, &lt;a href="http://logback.qos.ch/manual/configuration.html"&gt;LOGBack will look for &lt;code&gt;logback.xml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Here is a sample &lt;code&gt;logback-test.xml&lt;/code&gt; for you to get started.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;configuration&amp;gt;
 
    &amp;lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&amp;gt;
        &amp;lt;encoder&amp;gt;
            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
    &amp;lt;/appender&amp;gt;
  
    &amp;lt;appender name="FILE" class="ch.qos.logback.core.FileAppender"&amp;gt;
        &amp;lt;file&amp;gt;target/karate.log&amp;lt;/file&amp;gt;
        &amp;lt;encoder&amp;gt;
            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
    &amp;lt;/appender&amp;gt;    
   
    &amp;lt;logger name="com.intuit.karate" level="DEBUG"/&amp;gt;
   
    &amp;lt;root level="info"&amp;gt;
        &amp;lt;appender-ref ref="STDOUT" /&amp;gt;
        &amp;lt;appender-ref ref="FILE" /&amp;gt;
    &amp;lt;/root&amp;gt;
  
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can change the &lt;code&gt;com.intuit.karate&lt;/code&gt; logger level to &lt;code&gt;INFO&lt;/code&gt; to reduce the amount of logging. When the level is &lt;code&gt;DEBUG&lt;/code&gt; the entire request and response payloads are logged. If you use the above config, logs will be captured in &lt;code&gt;target/karate.log&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to keep the level as &lt;code&gt;DEBUG&lt;/code&gt; (&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#test-reports"&gt;for HTML reports&lt;/a&gt;) but suppress logging to the console, you can comment out the &lt;code&gt;STDOUT&lt;/code&gt; "root" &lt;code&gt;appender-ref&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;  &amp;lt;root level="warn"&amp;gt;
      &amp;lt;!-- &amp;lt;appender-ref ref="STDOUT" /&amp;gt; --&amp;gt;
      &amp;lt;appender-ref ref="FILE" /&amp;gt;
  &amp;lt;/root&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or another option is to use a &lt;a href="http://logback.qos.ch/manual/filters.html#thresholdFilter"&gt;&lt;code&gt;ThresholdFilter&lt;/code&gt;&lt;/a&gt;, so you still see critical logs on the console:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;  &amp;lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&amp;gt;
      &amp;lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&amp;gt;
          &amp;lt;level&amp;gt;WARN&amp;lt;/level&amp;gt;
      &amp;lt;/filter&amp;gt;
      &amp;lt;encoder&amp;gt;
          &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;
      &amp;lt;/encoder&amp;gt;
  &amp;lt;/appender&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to exclude the logs from your CI/CD pipeline but keep them in the execution of your users in their locals you can configure your logback using &lt;a href="http://logback.qos.ch/manual/configuration.html#conditional"&gt;Janino&lt;/a&gt;. In such cases it might be desirable to have your tests using &lt;code&gt;karate.logger.debug('your additional info')&lt;/code&gt; instead of the &lt;code&gt;print&lt;/code&gt; keyword so you can keep logs in your pipeline in INFO.&lt;/p&gt; 
&lt;p&gt;For suppressing sensitive information such as secrets and passwords from the log and reports, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#log-masking"&gt;Log Masking&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#report-verbosity"&gt;Report Verbosity&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Configuration&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You can skip this section and jump straight to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#syntax-guide"&gt;Syntax Guide&lt;/a&gt; if you are in a hurry to get started with Karate. Things will work even if the &lt;code&gt;karate-config.js&lt;/code&gt; file is not present.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Classpath&lt;/h2&gt; 
&lt;p&gt;The 'classpath' is a Java concept and is where some configuration files such as the one for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#logging"&gt;logging&lt;/a&gt; are expected to be by default. If you use the Maven &lt;code&gt;&amp;lt;test-resources&amp;gt;&lt;/code&gt; tweak &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#folder-structure"&gt;described earlier&lt;/a&gt; (recommended), the 'root' of the classpath will be in the &lt;code&gt;src/test/java&lt;/code&gt; folder, or else would be &lt;code&gt;src/test/resources&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The only 'rule' is that on start-up Karate expects a file called &lt;code&gt;karate-config.js&lt;/code&gt; to exist on the 'classpath' and contain a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions"&gt;JavaScript function&lt;/a&gt;. The function is expected to return a JSON object and all keys and values in that JSON object will be made available as script variables.&lt;/p&gt; 
&lt;p&gt;And that's all there is to Karate configuration ! You can easily get the value of the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment"&gt;current 'environment' or 'profile'&lt;/a&gt;, and then set up 'global' variables using some simple JavaScript. Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function fn() {   
  var env = karate.env; // get java system property 'karate.env'
  karate.log('karate.env system property was:', env);
  if (!env) {
    env = 'dev'; // a custom 'intelligent' default
  }
  var config = { // base config JSON
    appId: 'my.app.id',
    appSecret: 'my.secret',
    someUrlBase: 'https://some-host.com/v1/auth/',
    anotherUrlBase: 'https://another-host.com/v1/'
  };
  if (env == 'stage') {
    // over-ride only those that need to be
    config.someUrlBase = 'https://stage-host/v1/auth';
  } else if (env == 'e2e') {
    config.someUrlBase = 'https://e2e-host/v1/auth';
  }
  // don't waste time waiting for a connection or if servers don't respond within 5 seconds
  karate.configure('connectTimeout', 5000);
  karate.configure('readTimeout', 5000);
  return config;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Here above, you see the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-log"&gt;&lt;code&gt;karate.log()&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-env"&gt;&lt;code&gt;karate.env&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configure"&gt;&lt;code&gt;karate.configure()&lt;/code&gt;&lt;/a&gt; "helpers" being used. Note that the &lt;code&gt;karate-config.js&lt;/code&gt; is re-processed for &lt;em&gt;every&lt;/em&gt; &lt;code&gt;Scenario&lt;/code&gt; and in rare cases, you may want to initialize (e.g. auth tokens) only once for all of your tests. This can be achieved using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle"&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;A common requirement is to pass dynamic parameter values via the command line, and you can use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-properties"&gt;&lt;code&gt;karate.properties['some.name']&lt;/code&gt;&lt;/a&gt; syntax for getting a system property passed via JVM options in the form &lt;code&gt;-Dsome.name=foo&lt;/code&gt;. Refer to the section on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#dynamic-port-numbers"&gt;dynamic port numbers&lt;/a&gt; for an example.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You can even retrieve operating-system environment variables via &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;Java interop&lt;/a&gt; as follows: &lt;code&gt;var systemPath = java.lang.System.getenv('PATH');&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This decision to use JavaScript for config is influenced by years of experience with the set-up of complicated test-suites and fighting with &lt;a href="http://maven.apache.org/guides/introduction/introduction-to-profiles.html"&gt;Maven profiles&lt;/a&gt;, &lt;a href="https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html"&gt;Maven resource-filtering&lt;/a&gt; and the XML-soup that somehow gets summoned by the &lt;a href="http://maven.apache.org/plugins/maven-antrun-plugin/usage.html"&gt;Maven AntRun plugin&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Karate's approach frees you from Maven, is far more expressive, allows you to eyeball all environments in one place, and is still a plain-text file. If you want, you could even create &lt;a href="https://stackoverflow.com/a/49693808/143475"&gt;nested chunks of JSON that 'name-space' your config variables&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;One way to appreciate Karate's approach is to think over what it takes to add a new environment-dependent variable (e.g. a password) into a test. In typical frameworks it could mean changing multiple properties files, maven profiles and placeholders, and maybe even threading the value via a dependency-injection framework - before you can even access the value within your test.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This approach is indeed slightly more complicated than traditional &lt;code&gt;*.properties&lt;/code&gt; files - but you &lt;em&gt;need&lt;/em&gt; this complexity. Keep in mind that these are tests (not production code) and this config is going to be maintained more by the dev or QE team instead of the 'ops' or operations team.&lt;/p&gt; 
&lt;p&gt;And there is no more worrying about Maven profiles and whether the 'right' &lt;code&gt;*.properties&lt;/code&gt; file has been copied to the proper place.&lt;/p&gt; 
&lt;h2&gt;Switching the Environment&lt;/h2&gt; 
&lt;p&gt;There is only one thing you need to do to switch the environment - which is to set a Java system property.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;By default, the value of &lt;code&gt;karate.env&lt;/code&gt; when you access it within &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; - would be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The recipe for doing this when running Maven from the command line is:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mvn test -DargLine="-Dkarate.env=e2e"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or in Gradle:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./gradlew test -Dkarate.env=e2e
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can refer to the documentation of the &lt;a href="http://maven.apache.org/plugins-archives/maven-surefire-plugin-2.12.4/examples/system-properties.html"&gt;Maven Surefire Plugin&lt;/a&gt; for alternate ways of achieving this, but the &lt;code&gt;argLine&lt;/code&gt; approach is the simplest and should be more than sufficient for your Continuous Integration or test-automation needs.&lt;/p&gt; 
&lt;p&gt;Here's a reminder that running any &lt;a href="https://maven.apache.org/surefire/maven-surefire-plugin/examples/single-test.html"&gt;single JUnit test via Maven&lt;/a&gt; can be done by:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mvn test -Dtest=CatsRunner
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where &lt;code&gt;CatsRunner&lt;/code&gt; is the JUnit class name (in any package) you wish to run.&lt;/p&gt; 
&lt;p&gt;Karate is flexible, you can easily over-write config variables within the Java or JUnit "runner" - which is very convenient when in dev-mode or rapid-prototyping.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;System.setProperty("karate.env", "pre-prod");
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But the recommended way is to use the &lt;code&gt;karateEnv(name, value)&lt;/code&gt; or &lt;code&gt;systemProperty(name, value)&lt;/code&gt; API on the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;parallel-runner&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For advanced users, note that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;tags&lt;/a&gt; and the &lt;code&gt;karate.env&lt;/code&gt; environment-switch can be "linked" using the special &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#environment-tags"&gt;environment tags&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Environment Specific Config&lt;/h2&gt; 
&lt;p&gt;When your project gets complex, you can have separate &lt;code&gt;karate-config-&amp;lt;env&amp;gt;.js&lt;/code&gt; files that will be processed for that specific value of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment"&gt;&lt;code&gt;karate.env&lt;/code&gt;&lt;/a&gt;. This is especially useful when you want to maintain passwords, secrets or even URL-s specific for your local dev environment.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Make sure you configure your source code management system (e.g. Git) to ignore &lt;code&gt;karate-config-*.js&lt;/code&gt; if needed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;There should always be &lt;code&gt;karate-config.js&lt;/code&gt; in the "root" folder, even if you don't have any "common" config. In such cases, the function can do nothing or return an empty JSON. &lt;a href="https://github.com/karatelabs/karate/issues/1588"&gt;Learn more&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Here are the rules Karate uses on bootstrap (before every &lt;code&gt;Scenario&lt;/code&gt; or &lt;code&gt;Examples&lt;/code&gt; row in a &lt;code&gt;Scenario Outline&lt;/code&gt;):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;if the system-property &lt;code&gt;karate.config.dir&lt;/code&gt; was set, Karate will look in this folder for &lt;code&gt;karate-config.js&lt;/code&gt; - and if found, will process it&lt;/li&gt; 
 &lt;li&gt;else if &lt;code&gt;karate-config.js&lt;/code&gt; was not found in the above location (or &lt;code&gt;karate.config.dir&lt;/code&gt; was not set), &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;&lt;code&gt;classpath:karate-config.js&lt;/code&gt;&lt;/a&gt; would be processed (this is the default / common case)&lt;/li&gt; 
 &lt;li&gt;if the &lt;code&gt;karate.env&lt;/code&gt; system property was set 
  &lt;ul&gt; 
   &lt;li&gt;if &lt;code&gt;karate.config.dir&lt;/code&gt; was set, Karate will also look for &lt;code&gt;file:&amp;lt;karate.config.dir&amp;gt;/karate-config-&amp;lt;env&amp;gt;.js&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;else (if the &lt;code&gt;karate.config.dir&lt;/code&gt; was &lt;em&gt;not&lt;/em&gt; set), Karate will look for &lt;code&gt;classpath:karate-config-&amp;lt;env&amp;gt;.js&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;if the over-ride &lt;code&gt;karate-config-&amp;lt;env&amp;gt;.js&lt;/code&gt; exists, it will be processed, and the configuration (JSON entries) returned by this function will over-ride any set by &lt;code&gt;karate-config.js&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;karate demo&lt;/a&gt; for an &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/karate-config-contract.js"&gt;example&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;karate-base.js&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Advanced users who build frameworks on top of Karate have the option to supply a &lt;code&gt;karate-base.js&lt;/code&gt; file that Karate will look for on the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#classpath"&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/a&gt;. This is useful when you ship a JAR file containing re-usable features and JavaScript / Java code and want to 'default' a few variables that teams can 'inherit' from. So an additional rule in the above flow of 'rules' (before the &lt;em&gt;first&lt;/em&gt; step) is as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;if &lt;code&gt;classpath:karate-base.js&lt;/code&gt; exists - Karate will process this as a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;configuration source&lt;/a&gt; before anything else&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Syntax Guide&lt;/h1&gt; 
&lt;h2&gt;Script Structure&lt;/h2&gt; 
&lt;p&gt;Karate scripts are technically in '&lt;a href="https://docs.cucumber.io/gherkin/reference/"&gt;Gherkin&lt;/a&gt;' format - but all you need to grok as someone who needs to test web-services are the three sections: &lt;code&gt;Feature&lt;/code&gt;, &lt;code&gt;Background&lt;/code&gt; and &lt;code&gt;Scenario&lt;/code&gt;. There can be multiple Scenario-s in a &lt;code&gt;*.feature&lt;/code&gt; file, and at least one should be present. The &lt;code&gt;Background&lt;/code&gt; is optional.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Variables set using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;Background&lt;/code&gt; will be re-set before &lt;em&gt;every&lt;/em&gt; &lt;code&gt;Scenario&lt;/code&gt;. If you are looking for a way to do something only &lt;strong&gt;once&lt;/strong&gt; per &lt;code&gt;Feature&lt;/code&gt;, take a look at &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;. On the other hand, if you are expecting a variable in the &lt;code&gt;Background&lt;/code&gt; to be modified by one &lt;code&gt;Scenario&lt;/code&gt; so that later ones can see the updated value - that is &lt;em&gt;not&lt;/em&gt; how you should think of them, and you should combine your 'flow' into one scenario. Keep in mind that you should be able to comment-out a &lt;code&gt;Scenario&lt;/code&gt; or skip some via &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/a&gt; without impacting any others. Note that the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;parallel runner&lt;/a&gt; will run &lt;code&gt;Scenario&lt;/code&gt;-s in parallel, which means they can run in &lt;em&gt;any&lt;/em&gt; order. If you are looking for ways to do something only &lt;em&gt;once&lt;/em&gt; per feature or across &lt;em&gt;all&lt;/em&gt; your tests, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#hooks"&gt;Hooks&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Lines that start with a &lt;code&gt;#&lt;/code&gt; are comments.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature: brief description of what is being tested
    more lines of description if needed.

Background:
  # this section is optional !
  # steps here are executed before each Scenario in this file
  # variables defined here will be 'global' to all scenarios
  # and will be re-initialized before every scenario

Scenario: brief description of this scenario
  # steps for this scenario

Scenario: a different scenario
  # steps for this other scenario
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;There is also a variant of &lt;code&gt;Scenario&lt;/code&gt; called &lt;code&gt;Scenario Outline&lt;/code&gt; along with &lt;code&gt;Examples&lt;/code&gt;, useful for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests"&gt;data-driven tests&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Given-When-Then&lt;/h3&gt; 
&lt;p&gt;The business of web-services testing requires access to low-level aspects such as HTTP headers, URL-paths, query-parameters, complex JSON or XML payloads and response-codes. And Karate gives you control over these aspects with the small set of keywords focused on HTTP such as &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#url"&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#path"&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#param"&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;p&gt;Karate does not attempt to have tests be in "natural language" like how Cucumber tests are &lt;a href="https://docs.cucumber.io/gherkin/reference/"&gt;traditionally expected to be&lt;/a&gt;. That said, the syntax is very concise, and the convention of every step having to start with either &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;And&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt; or &lt;code&gt;Then&lt;/code&gt;, makes things very readable. You end up with a decent approximation of BDD even though web-services by nature are "headless", without a UI, and not really human-friendly.&lt;/p&gt; 
&lt;h4&gt;Cucumber vs Karate&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Karate was based on Cucumber-JVM until version 0.8.0 but the parser and engine were &lt;a href="https://github.com/karatelabs/karate/issues/444"&gt;re-written from scratch&lt;/a&gt; in 0.9.0 onwards. So we use the same &lt;a href="https://docs.cucumber.io/gherkin/"&gt;Gherkin&lt;/a&gt; syntax - but the similarity ends there.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you are familiar with Cucumber (JVM), you may be wondering if you need to write &lt;a href="https://docs.cucumber.io/gherkin/step-organization/"&gt;step-definitions&lt;/a&gt;. The answer is &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Karate's approach is that all the step-definitions you need in order to work with HTTP, JSON and XML have been already implemented. And since you can easily extend Karate &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;using JavaScript&lt;/a&gt;, there is no need to compile Java code any more.&lt;/p&gt; 
&lt;p&gt;The following table summarizes some key differences between Cucumber and Karate.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;span&gt;▫&lt;/span&gt;&lt;/th&gt; 
   &lt;th&gt;Cucumber&lt;/th&gt; 
   &lt;th&gt;Karate&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Step Definitions Built-In&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. You need to keep implementing them as your functionality grows. &lt;a href="https://thepracticaldeveloper.com/2017/08/03/microservices-end-to-end-tests-with-cucumber-and-spring-boot/"&gt;This can get very tedious&lt;/a&gt;, especially since for &lt;a href="https://docs.cucumber.io/cucumber/state/#dependency-injection"&gt;dependency-injection&lt;/a&gt;, you are &lt;a href="http://angiejones.tech/rest-assured-with-cucumber-using-bdd-for-web-services-automation?refreshed=y#comment-40"&gt;on your own&lt;/a&gt;.&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;strong&gt;Yes&lt;/strong&gt;. No extra Java code needed.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Single Layer of Code To Maintain&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. There are 2 Layers. The &lt;a href="https://docs.cucumber.io/gherkin/reference/"&gt;Gherkin&lt;/a&gt; spec or &lt;code&gt;*.feature&lt;/code&gt; files make up one layer, and you will also have the corresponding Java step-definitions.&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;strong&gt;Yes&lt;/strong&gt;. Only 1 layer of Karate-script (based on Gherkin).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Readable Specification&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Yes&lt;/strong&gt;. Cucumber will read like natural language &lt;em&gt;if&lt;/em&gt; you implement the step-definitions right.&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt; &lt;strong&gt;No&lt;/strong&gt;. Although Karate is simple, and a &lt;a href="https://ayende.com/blog/2984/dsl-vs-fluent-interface-compare-contrast"&gt;true DSL&lt;/a&gt;, it is ultimately a &lt;a href="https://hackernoon.com/yes-karate-is-not-true-bdd-698bf4a9be39"&gt;mini-programming language&lt;/a&gt;. But it is &lt;a href="https://stackoverflow.com/a/47799207/143475"&gt;perfect for testing web-services&lt;/a&gt; at the level of HTTP requests and responses.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Re-Use Feature Files&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. Cucumber does not support being able to call (and thus re-use) other &lt;code&gt;*.feature&lt;/code&gt; files from a test-script.&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Dynamic Data-Driven Testing&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. Cucumber's &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-cucumber-way"&gt;&lt;code&gt;Scenario Outline&lt;/code&gt;&lt;/a&gt; expects the &lt;code&gt;Examples&lt;/code&gt; to contain a fixed set of rows.&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;strong&gt;Yes&lt;/strong&gt;. Karate's support for calling other &lt;code&gt;*.feature&lt;/code&gt; files allows you to use a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features"&gt;JSON array as the data-source&lt;/a&gt; and you can &lt;a href="https://twitter.com/KarateDSL/status/1051433711814627329"&gt;use JSON&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#csv-files"&gt;even CSV&lt;/a&gt; directly in a data-driven &lt;code&gt;Scenario Outline&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Parallel Execution&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. There are some challenges (especially with reporting) and you can find various discussions and third-party projects on the web that attempt to close this gap&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;. Karate runs even &lt;code&gt;Scenario&lt;/code&gt;-s in parallel, not just &lt;code&gt;Feature&lt;/code&gt;-s.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Run 'Set-Up' Routines Only Once&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. Cucumber has a limitation where &lt;code&gt;Background&lt;/code&gt; steps are re-run for every &lt;code&gt;Scenario&lt;/code&gt; and worse - even for every &lt;code&gt;Examples&lt;/code&gt; row within a &lt;code&gt;Scenario Outline&lt;/code&gt;. This has been a &lt;a href="https://github.com/cucumber/cucumber-jvm/issues/515"&gt;highly-requested open issue&lt;/a&gt; for a &lt;em&gt;long&lt;/em&gt; time.&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#hooks"&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Embedded JavaScript Engine&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;. And you have to roll your own approach to environment-specific configuration and worry about &lt;a href="https://docs.cucumber.io/cucumber/state/#dependency-injection"&gt;dependency-injection&lt;/a&gt;.&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;strong&gt;Yes&lt;/strong&gt;. Easily define all environments in a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;single file&lt;/a&gt; and share variables across all scenarios. Full script-ability via &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions"&gt;JS&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop"&gt;Java interop&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;One nice thing about the design of the Gherkin syntax is that script-steps are treated the same no matter whether they start with the keyword &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;And&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt; or &lt;code&gt;Then&lt;/code&gt;. What this means is that you are free to use whatever makes sense for you. You could even have all the steps start with &lt;code&gt;When&lt;/code&gt; and Karate won't care.&lt;/p&gt; 
&lt;p&gt;In fact Gherkin supports the &lt;a href="https://www.relishapp.com/cucumber/cucumber/docs/gherkin/using-star-notation-instead-of-given-when-then"&gt;catch-all symbol '&lt;code&gt;*&lt;/code&gt;'&lt;/a&gt; - instead of forcing you to use &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt; or &lt;code&gt;Then&lt;/code&gt;. This is perfect for those cases where it really doesn't make sense - for example the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure"&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt; section or when you use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; syntax. When eyeballing a test-script, think of the &lt;code&gt;*&lt;/code&gt; as a 'bullet-point'.&lt;/p&gt; 
&lt;p&gt;You can read more about the Given-When-Then convention at the &lt;a href="https://docs.cucumber.io/gherkin/reference/"&gt;Cucumber reference documentation&lt;/a&gt;. Since Karate uses Gherkin, you can also employ &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests"&gt;data-driven&lt;/a&gt; techniques such as expressing data-tables in test scripts. Another good thing that Karate inherits is the nice IDE support for Cucumber that &lt;a href="https://www.jetbrains.com/idea/help/cucumber.html"&gt;IntelliJ&lt;/a&gt; and &lt;a href="https://cucumber.io/cucumber-eclipse/"&gt;Eclipse&lt;/a&gt; have. So you can do things like right-click and run a &lt;code&gt;*.feature&lt;/code&gt; file (or scenario) without needing to use a JUnit runner.&lt;/p&gt; 
&lt;p&gt;For a detailed discussion on BDD and how Karate relates to Cucumber, please refer to this blog-post: &lt;a href="https://medium.com/@ptrthomas/yes-karate-is-not-true-bdd-698bf4a9be39"&gt;Yes, Karate is not &lt;em&gt;true&lt;/em&gt; BDD&lt;/a&gt;. It is the opinion of the author of Karate that &lt;em&gt;true&lt;/em&gt; BDD is un-necessary over-kill for API testing, and this is explained more in &lt;a href="https://stackoverflow.com/a/47799207/143475"&gt;this answer&lt;/a&gt; on &lt;a href="https://stackoverflow.com/questions/tagged/karate"&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;With the formalities out of the way, let's dive straight into the syntax.&lt;/p&gt; 
&lt;h1&gt;Setting and Using Variables&lt;/h1&gt; 
&lt;h2&gt;&lt;code&gt;def&lt;/code&gt;&lt;/h2&gt; 
&lt;h3&gt;Set a named variable&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# assigning a string value:
Given def myVar = 'world'

# using a variable
Then print myVar

# assigning a number (you can use '*' instead of Given / When / Then)
* def myNum = 5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;def&lt;/code&gt; will over-write any variable that was using the same name earlier. Keep in mind that the start-up &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;configuration routine&lt;/a&gt; could have already initialized some variables before the script even started. For details of scope and visibility of variables, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure"&gt;Script Structure&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;request&lt;/code&gt; are not allowed as variable names. This is just to reduce confusion for users new to Karate who tend to do &lt;code&gt;* def request = {}&lt;/code&gt; and expect the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#request"&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; body or similarly, the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#url"&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; to be set.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The examples above are simple, but a variety of expression 'shapes' are supported on the right hand side of the &lt;code&gt;=&lt;/code&gt; symbol. The section on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;Karate Expressions&lt;/a&gt; goes into the details.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/h2&gt; 
&lt;h3&gt;Assert if an expression evaluates to &lt;code&gt;true&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Once defined, you can refer to a variable by name. Expressions are evaluated using the embedded JavaScript engine. The assert keyword can be used to assert that an expression returns a boolean value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given def color = 'red '
And def num = 5
Then assert color + num == 'red 5'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Everything to the right of the &lt;code&gt;assert&lt;/code&gt; keyword will be evaluated as a single expression.&lt;/p&gt; 
&lt;p&gt;Something worth mentioning here is that you would hardly need to use &lt;code&gt;assert&lt;/code&gt; in your test scripts. Instead you would typically use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; keyword, that is designed for performing powerful assertions against JSON and XML response payloads.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;print&lt;/code&gt;&lt;/h2&gt; 
&lt;h3&gt;Log to the console&lt;/h3&gt; 
&lt;p&gt;You can use &lt;code&gt;print&lt;/code&gt; to log variables to the console in the middle of a script. For convenience, you can have multiple expressions separated by commas, so this is the recommended pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* print 'the value of a is:', a
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Similar to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;, the expressions on the right-hand-side of a &lt;code&gt;print&lt;/code&gt; have to be valid JavaScript. JsonPath and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;Karate expressions&lt;/a&gt; are not supported.&lt;/p&gt; 
&lt;p&gt;If you use commas (instead of concatenating strings using &lt;code&gt;+&lt;/code&gt;), Karate will 'pretty-print' variables, which is what you typically want when dealing with &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#native-data-types"&gt;JSON or XML&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def myJson = { foo: 'bar', baz: [1, 2, 3] }
* print 'the value of myJson is:', myJson
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which results in the following output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;20:29:11.290 [main] INFO  com.intuit.karate - [print] the value of myJson is: {
  "foo": "bar",
  "baz": [
    1,
    2,
    3
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Since XML is represented internally as a JSON-like or map-like object, if you perform string concatenation when printing, you will &lt;em&gt;not&lt;/em&gt; see XML - which can be confusing at first. Use the comma-delimited form (see above) or the JS helper (see below).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The built-in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;&lt;code&gt;karate&lt;/code&gt; object&lt;/a&gt; is explained in detail later, but for now, note that this is also injected into &lt;code&gt;print&lt;/code&gt; (and even &lt;code&gt;assert&lt;/code&gt;) statements, and it has a helpful &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-pretty"&gt;&lt;code&gt;pretty&lt;/code&gt;&lt;/a&gt; method, that takes a JSON argument and a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-prettyxml"&gt;&lt;code&gt;prettyXml&lt;/code&gt;&lt;/a&gt; method that deals with XML. So you could have also done something like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* print 'the value of myJson is:\n' + karate.pretty(myJson)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; keyword on how to switch on pretty-printing of all HTTP requests and responses.&lt;/p&gt; 
&lt;h1&gt;'Native' data types&lt;/h1&gt; 
&lt;p&gt;Native data types mean that you can insert them into a script without having to worry about enclosing them in strings and then having to 'escape' double-quotes all over the place. They seamlessly fit 'in-line' within your test script.&lt;/p&gt; 
&lt;h2&gt;JSON&lt;/h2&gt; 
&lt;p&gt;Note that the parser is 'lenient' so that you don't have to enclose all keys in double-quotes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def cat = { name: 'Billie', scores: [2, 5] }
* assert cat.scores[1] == 5
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Some characters such as the hyphen &lt;code&gt;-&lt;/code&gt; are not permitted in 'lenient' JSON keys (because they are interpreted by the JS engine as a 'minus sign'). In such cases, you &lt;em&gt;have&lt;/em&gt; to use string quotes: &lt;code&gt;{ 'Content-Type': 'application/json' }&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;When asserting for expected values in JSON or XML, always prefer using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; instead of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;. Match failure messages are much more descriptive and useful, and you get the power of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;embedded expressions&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching"&gt;fuzzy matching&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def cats = [{ name: 'Billie' }, { name: 'Bob' }]
* match cats[1] == { name: 'Bob' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Karate's native support for JSON means that you can assign parts of a JSON instance into another variable, which is useful when dealing with complex &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; payloads.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def first = cats[0]
* match first == { name: 'Billie' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For manipulating or updating JSON (or XML) using path expressions, refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; 
&lt;h2&gt;XML&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given def cat = &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;scores&amp;gt;&amp;lt;score&amp;gt;2&amp;lt;/score&amp;gt;&amp;lt;score&amp;gt;5&amp;lt;/score&amp;gt;&amp;lt;/scores&amp;gt;&amp;lt;/cat&amp;gt;
# sadly, xpath list indexes start from 1
Then match cat/cat/scores/score[2] == '5'
# but karate allows you to traverse xml like json !!
Then match cat.cat.scores.score[1] == 5
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Embedded Expressions&lt;/h3&gt; 
&lt;p&gt;Karate has a very useful payload 'templating' approach. Variables can be referred to within JSON, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given def user = { name: 'john', age: 21 }
And def lang = 'en'
When def session = { name: '#(user.name)', locale: '#(lang)', sessionUser: '#(user)'  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So the rule is - if a string value within a JSON (or XML) object declaration is enclosed between &lt;code&gt;#(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; - it will be evaluated as a JavaScript expression. And any variables which are alive in the context can be used in this expression. Here's how it works for XML:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given def user = &amp;lt;user&amp;gt;&amp;lt;name&amp;gt;john&amp;lt;/name&amp;gt;&amp;lt;/user&amp;gt;
And def lang = 'en'
When def session = &amp;lt;session&amp;gt;&amp;lt;locale&amp;gt;#(lang)&amp;lt;/locale&amp;gt;&amp;lt;sessionUser&amp;gt;#(user)&amp;lt;/sessionUser&amp;gt;&amp;lt;/session&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This comes in useful in some cases - and avoids needing to use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions"&gt;JavaScript functions&lt;/a&gt; to manipulate JSON. So you get the best of both worlds: the elegance of JSON to express complex nested data - while at the same time being able to dynamically plug values (that could even be other JSON or XML 'trees') into a 'template'.&lt;/p&gt; 
&lt;p&gt;Note that embedded expressions will be evaluated even when you &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read()&lt;/code&gt; from a JSON or XML file&lt;/a&gt;. This is super-useful for re-use and data-driven tests.&lt;/p&gt; 
&lt;p&gt;A few special built-in variables such as &lt;code&gt;$&lt;/code&gt; (which is a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-self"&gt;reference to the JSON root&lt;/a&gt;) - can be mixed into JSON embedded expressions.&lt;/p&gt; 
&lt;p&gt;A &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#remove-if-null"&gt;special case&lt;/a&gt; of embedded expressions can remove a JSON key (or XML element / attribute) if the expression evaluates to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Rules for Embedded Expressions&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;They work only within JSON or XML&lt;/li&gt; 
 &lt;li&gt;and when on the Right Hand Side of a 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;and when you &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; a JSON or XML file&lt;/li&gt; 
 &lt;li&gt;the expression &lt;em&gt;has&lt;/em&gt; to start with &lt;code&gt;#(&lt;/code&gt; and end with &lt;code&gt;)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Because of the last rule above, note that string-concatenation may not work quite the way you expect:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# wrong !
* def foo = { bar: 'hello #(name)' }
# right !
* def foo = { bar: '#("hello " + name)' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Observe how you can achieve string concatenation if you really want, because any valid JavaScript expression can be stuffed within an embedded expression. You could always do this in two steps:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def temp = 'hello ' + name
* def foo = { bar: '#(temp)' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a convenience, embedded expressions are supported on the Right Hand Side of a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statement even for "quoted string" literals:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = 'a1'
* match foo == '#("a" + 1)'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And do note that in Karate 1.0 onwards, ES6 string-interpolation within "backticks" is supported:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* param filter = `ORDER_DATE:"${todaysDate}"`
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Enclosed JavaScript&lt;/h3&gt; 
&lt;p&gt;An alternative to embedded expressions (for JSON only) is to enclose the entire payload within parentheses - which tells Karate to evaluate it as pure JavaScript. This can be a lot simpler than embedded expressions in many cases, and JavaScript programmers will feel right at home.&lt;/p&gt; 
&lt;p&gt;The example below shows the difference between embedded expressions and enclosed JavaScript:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;When def user = { name: 'john', age: 21 }
And def lang = 'en'

* def embedded = { name: '#(user.name)', locale: '#(lang)', sessionUser: '#(user)' }
* def enclosed = ({ name: user.name, locale: lang, sessionUser: user })
* match embedded == enclosed
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;So how would you choose between the two approaches to create JSON ? &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;Embedded expressions&lt;/a&gt; are useful when you have complex JSON &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; from files, because you can auto-replace (or even &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#remove-if-null"&gt;remove&lt;/a&gt;) data-elements with values dynamically evaluated from variables. And the JSON will still be 'well-formed', and editable in your IDE or text-editor. Embedded expressions also make more sense in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#ignore-or-validate"&gt;validation&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#schema-validation"&gt;schema-like&lt;/a&gt; short-cut situations. It can also be argued that the &lt;code&gt;#&lt;/code&gt; symbol is easy to spot when eyeballing your test scripts - which makes things more readable and clear.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Multi-Line Expressions&lt;/h3&gt; 
&lt;p&gt;The keywords &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#request"&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; take multi-line input as the last argument. This is useful when you want to express a one-off lengthy snippet of text in-line, without having to split it out into a separate &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;file&lt;/a&gt;. Note how triple-quotes (&lt;code&gt;"""&lt;/code&gt;) are used to enclose content. Here are some examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# instead of:
* def cat = &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;scores&amp;gt;&amp;lt;score&amp;gt;2&amp;lt;/score&amp;gt;&amp;lt;score&amp;gt;5&amp;lt;/score&amp;gt;&amp;lt;/scores&amp;gt;&amp;lt;/cat&amp;gt;

# this is more readable:
* def cat = 
  """
  &amp;lt;cat&amp;gt;
      &amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;
      &amp;lt;scores&amp;gt;
          &amp;lt;score&amp;gt;2&amp;lt;/score&amp;gt;
          &amp;lt;score&amp;gt;5&amp;lt;/score&amp;gt;
      &amp;lt;/scores&amp;gt;
  &amp;lt;/cat&amp;gt;
  """
# example of a request payload in-line
Given request 
  """ 
  &amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;
  &amp;lt;S:Envelope xmlns:S="http://schemas.xmlsoap.org/soap/envelope/"&amp;gt;
  &amp;lt;S:Body&amp;gt;
  &amp;lt;ns2:QueryUsageBalance xmlns:ns2="http://www.mycompany.com/usage/V1"&amp;gt;
      &amp;lt;ns2:UsageBalance&amp;gt;
          &amp;lt;ns2:LicenseId&amp;gt;12341234&amp;lt;/ns2:LicenseId&amp;gt;
      &amp;lt;/ns2:UsageBalance&amp;gt;
  &amp;lt;/ns2:QueryUsageBalance&amp;gt;
  &amp;lt;/S:Body&amp;gt;
  &amp;lt;/S:Envelope&amp;gt;
  """

# example of a payload assertion in-line
Then match response ==
  """
  { id: { domain: "DOM", type: "entityId", value: "#ignore" },
    created: { on: "#ignore" }, 
    lastUpdated: { on: "#ignore" },
    entityState: "ACTIVE"
  }
  """
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;table&lt;/code&gt;&lt;/h2&gt; 
&lt;h3&gt;A simple way to create JSON Arrays&lt;/h3&gt; 
&lt;p&gt;Now that we have seen how JSON is a 'native' data type that Karate understands, there is a very nice way to create JSON using the support for expressing &lt;a href="http://www.thinkcode.se/blog/2014/06/30/cucumber-data-tables"&gt;data-tables&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* table cats
  | name   | age |
  | 'Bob'  | 2   |
  | 'Wild' | 4   |
  | 'Nyan' | 3   |

* match cats == [{name: 'Bob', age: 2}, {name: 'Wild', age: 4}, {name: 'Nyan', age: 3}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; keyword is explained later, but it should be clear right away how convenient the &lt;code&gt;table&lt;/code&gt; keyword is. JSON can be combined with the ability to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features"&gt;call other &lt;code&gt;*.feature&lt;/code&gt; files&lt;/a&gt; to achieve dynamic data-driven testing in Karate.&lt;/p&gt; 
&lt;p&gt;Notice that in the above example, string values within the table need to be enclosed in quotes. Otherwise they would be evaluated as expressions - which does come in useful for some dynamic data-driven situations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def one = 'hello'
* def two = { baz: 'world' }
* table json
  | foo     | bar            |
  | one     | { baz: 1 }     |
  | two.baz | ['baz', 'ban'] |
* match json == [{ foo: 'hello', bar: { baz: 1 } }, { foo: 'world', bar: ['baz', 'ban'] }]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yes, you can even nest chunks of JSON in tables, and things work as you would expect.&lt;/p&gt; 
&lt;p&gt;Empty cells or expressions that evaluate to &lt;code&gt;null&lt;/code&gt; will result in the key being omitted from the JSON. To force a &lt;code&gt;null&lt;/code&gt; value, wrap it in parentheses:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def one = { baz: null }
* table json
  | foo     | bar    |
  | 'hello' |        |
  | one.baz | (null) |
  | 'world' | null   |
* match json == [{ foo: 'hello' }, { bar: null }, { foo: 'world' }]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An alternate way to create data is using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set-multiple"&gt;&lt;code&gt;set&lt;/code&gt; multiple&lt;/a&gt; syntax. It is actually a 'transpose' of the &lt;code&gt;table&lt;/code&gt; approach, and can be very convenient when there are a large number of keys per row or if the nesting is complex. Here is an example of what is possible:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* set search
  | path       | 0        | 1      | 2       |
  | name.first | 'John'   | 'Jane' |         |
  | name.last  | 'Smith'  | 'Doe'  | 'Waldo' |
  | age        | 20       |        |         |

* match search[0] == { name: { first: 'John', last: 'Smith' }, age: 20 }
* match search[1] == { name: { first: 'Jane', last: 'Doe' } }
* match search[2] == { name: { last: 'Waldo' } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;text&lt;/code&gt;&lt;/h2&gt; 
&lt;h3&gt;Don't parse, treat as raw text&lt;/h3&gt; 
&lt;p&gt;Not something you would commonly use, but in some cases you need to disable Karate's default behavior of attempting to parse anything that looks like JSON (or XML) when using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multi-line-expressions"&gt;multi-line&lt;/a&gt; / string &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;expressions&lt;/a&gt;. This is especially relevant when manipulating &lt;a href="http://graphql.org"&gt;GraphQL&lt;/a&gt; queries - because although they look suspiciously like JSON, they are not, and tend to confuse Karate's internals. And as shown in the example below, having text 'in-line' is useful especially when you use the &lt;code&gt;Scenario Outline:&lt;/code&gt; and &lt;code&gt;Examples:&lt;/code&gt; for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests"&gt;data-driven tests&lt;/a&gt; involving place-holder substitutions in strings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Scenario Outline:
  # note the 'text' keyword instead of 'def'
  * text query =
    """
    {
      hero(name: "&amp;lt;name&amp;gt;") {
        height
        mass
      }
    }
    """
  Given path 'graphql'
  And request { query: '#(query)' }
  And header Accept = 'application/json'
  When method post
  Then status 200

  Examples:
    | name  |
    | John  |
    | Smith | 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that if you did not need to inject &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests"&gt;&lt;code&gt;Examples:&lt;/code&gt;&lt;/a&gt; into 'placeholders' enclosed within &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;reading from a file&lt;/a&gt; with the extension &lt;code&gt;*.txt&lt;/code&gt; may have been sufficient.&lt;/p&gt; 
&lt;p&gt;For placeholder-substitution, the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#replace"&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/a&gt; keyword can be used instead, but with the advantage that the text can be read from a file or dynamically created.&lt;/p&gt; 
&lt;p&gt;Karate is a great fit for testing GraphQL because of how easy it is to deal with dynamic and deeply nested JSON responses. Refer to this example for more details: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/graphql/graphql.feature"&gt;&lt;code&gt;graphql.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/h2&gt; 
&lt;h3&gt;Text Placeholder Replacement&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Modifying existing JSON and XML is &lt;strong&gt;natively&lt;/strong&gt; supported by Karate via the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword, and &lt;code&gt;replace&lt;/code&gt; is primarily intended for dealing with raw strings. But when you deal with complex, nested JSON (or XML) - it may be easier in some cases to use &lt;code&gt;replace&lt;/code&gt;, especially when you want to substitute multiple placeholders with one value, and when you don't need array manipulation. Since &lt;code&gt;replace&lt;/code&gt; auto-converts the result to a string, make sure you perform &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion"&gt;type conversion&lt;/a&gt; back to JSON (or XML) if applicable.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Karate provides an elegant 'native-like' experience for placeholder substitution within strings or text content. This is useful in any situation where you need to concatenate dynamic string fragments to form content such as GraphQL or SQL.&lt;/p&gt; 
&lt;p&gt;The placeholder format defaults to angle-brackets, for example: &lt;code&gt;&amp;lt;replaceMe&amp;gt;&lt;/code&gt;. Here is how to replace one placeholder at a time:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def text = 'hello &amp;lt;foo&amp;gt; world'
* replace text.foo = 'bar'
* match text == 'hello bar world'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Karate makes it really easy to substitute multiple placeholders in a single, readable step as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def text = 'hello &amp;lt;one&amp;gt; world &amp;lt;two&amp;gt; bye'

* replace text
  | token | value   |
  | one   | 'cruel' |
  | two   | 'good'  |

* match text == 'hello cruel world good bye'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note how strings have to be enclosed in quotes. This is so that you can mix expressions into text replacements as shown below. This example also shows how you can use a custom placeholder format instead of the default:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def text = 'hello &amp;lt;one&amp;gt; world ${two} bye'
* def first = 'cruel'
* def json = { second: 'good' }

* replace text
    | token  | value       |
    | one    | first       |
    | ${two} | json.second |

* match text == 'hello cruel world good bye'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to this file for a detailed example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/replace.feature"&gt;&lt;code&gt;replace.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;YAML Files&lt;/h2&gt; 
&lt;p&gt;For those who may prefer &lt;a href="http://yaml.org"&gt;YAML&lt;/a&gt; as a simpler way to represent data, Karate allows you to read YAML content from a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;file&lt;/a&gt; - and it will be auto-converted into JSON.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# yaml from a file (the extension matters), and the data-type of 'bar' would be JSON
* def bar = read('data.yaml')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;A very rare need is to be able to convert a string which happens to be in YAML form into JSON, and this can be done via the &lt;code&gt;yaml&lt;/code&gt; type cast keyword. For example - if a response data element or downloaded file is YAML and you need to use the data in subsequent steps. Also see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion"&gt;type conversion&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* text foo =
  """
  name: John
  input:
    id: 1
    subType: 
      name: Smith
      deleted: false
  """
# yaml to json type conversion  
* yaml foo = foo
* match foo ==
  """
  {
    name: 'John',
    input: { 
      id: 1,
      subType: { name: 'Smith', deleted: false }    
    }
  }
  """
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;CSV Files&lt;/h2&gt; 
&lt;p&gt;Karate can read &lt;code&gt;*.csv&lt;/code&gt; files and will auto-convert them to JSON. A header row is always expected. See the section on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;reading files&lt;/a&gt; - and also this example &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/outline/dynamic-csv.feature"&gt;&lt;code&gt;dynamic-csv.feature&lt;/code&gt;&lt;/a&gt;, which shows off the convenience of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#dynamic-scenario-outline"&gt;dynamic &lt;code&gt;Scenario Outline&lt;/code&gt;-s&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In rare cases you may want to use a csv-file as-is and &lt;em&gt;not&lt;/em&gt; auto-convert it to JSON. A good example is when you want to use a CSV file as the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#request"&gt;request-body&lt;/a&gt; for a file-upload. You could get by by renaming the file-extension to say &lt;code&gt;*.txt&lt;/code&gt; but an alternative is to use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#read-file-as-string"&gt;&lt;code&gt;karate.readAsString()&lt;/code&gt;&lt;/a&gt; API.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Just like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#yaml"&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/a&gt;, you may occasionally need to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion"&gt;convert a string&lt;/a&gt; which happens to be in CSV form into JSON, and this can be done via the &lt;code&gt;csv&lt;/code&gt; keyword.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* text foo =
    """
    name,type
    Billie,LOL
    Bob,Wild
    """
* csv bar = foo
* match bar == [{ name: 'Billie', type: 'LOL' }, { name: 'Bob', type: 'Wild' }]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;JavaScript Functions&lt;/h2&gt; 
&lt;p&gt;JavaScript Functions are also 'native'. And yes, functions can take arguments.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Standard JavaScript syntax rules apply, but the right-hand-side should begin with the &lt;code&gt;function&lt;/code&gt; keyword if declared &lt;em&gt;in-line&lt;/em&gt;. When using stand-alone &lt;code&gt;*.js&lt;/code&gt; files, you can have a comment before the &lt;code&gt;function&lt;/code&gt; keyword, and you can use &lt;code&gt;fn&lt;/code&gt; as the function name, so that your IDE does not complain about JavaScript syntax errors, e.g. &lt;code&gt;function fn(x){ return x + 1 }&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def greeter = function(title, name) { return 'hello ' + title + ' ' + name }
* assert greeter('Mr.', 'Bob') == 'hello Mr. Bob'
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;When JavaScript executes in Karate, the built-in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;&lt;code&gt;karate&lt;/code&gt; object&lt;/a&gt; provides some commonly used utility functions. And with &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;Karate expressions&lt;/a&gt;, you can "dive into" JavaScript without needing to define a function - and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic"&gt;conditional logic&lt;/a&gt; is a good example.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Java Interop&lt;/h3&gt; 
&lt;p&gt;For more complex functions you are better off using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multi-line-expressions"&gt;multi-line&lt;/a&gt; 'doc-string' approach. This example actually calls into existing Java code, and being able to do this opens up a whole lot of possibilities. The JavaScript interpreter will try to convert types across Java and JavaScript as smartly as possible. For e.g. JSON objects become Java &lt;code&gt;Map&lt;/code&gt;-s, JSON arrays become Java &lt;code&gt;List&lt;/code&gt;-s, and Java Bean properties are accessible (and update-able) using 'dot notation' e.g. '&lt;code&gt;object.name&lt;/code&gt;'&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def dateStringToLong =
  """
  function(s) {
    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');
    var sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    return sdf.parse(s).time; // '.getTime()' would also have worked instead of '.time'
  } 
  """
* assert dateStringToLong("2016-12-24T03:39:21.081+0000") == 1482550761081
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;More examples of Java interop and how to invoke custom code can be found in the section on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;Calling Java&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;code&gt;call&lt;/code&gt; keyword provides an &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions"&gt;alternate way of calling JavaScript functions&lt;/a&gt; that have only one argument. The argument can be provided after the function name, without parentheses, which makes things slightly more readable (and less cluttered) especially when the solitary argument is JSON.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def timeLong = call dateStringToLong '2016-12-24T03:39:21.081+0000'
* assert timeLong == 1482550761081

# a better example, with a JSON argument
* def greeter = function(name){ return 'Hello ' + name.first + ' ' + name.last + '!' }
* def greeting = call greeter { first: 'John', last: 'Smith' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Reading Files&lt;/h2&gt; 
&lt;p&gt;Karate makes re-use of payload data, utility-functions and even other test-scripts as easy as possible. Teams typically define complicated JSON (or XML) payloads in a file and then re-use this in multiple scripts. Keywords such as &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#remove"&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; allow you to to 'tweak' payload-data to fit the scenario under test. You can imagine how this greatly simplifies setting up tests for boundary conditions. And such re-use makes it easier to re-factor tests when needed, which is great for maintainability.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set-multiple"&gt;&lt;code&gt;set&lt;/code&gt; (multiple)&lt;/a&gt; keyword can build complex, nested JSON (or XML) from scratch in a data-driven manner, and you may not even need to read from files for many situations. Test data can be within the main flow itself, which makes scripts highly readable.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Reading files is achieved using the built-in JavaScript function called &lt;code&gt;read()&lt;/code&gt;. By default, the file is expected to be in the same folder (package) and side-by-side with the &lt;code&gt;*.feature&lt;/code&gt; file. But you can prefix the name with &lt;code&gt;classpath:&lt;/code&gt; in which case the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#classpath"&gt;'root' folder&lt;/a&gt; would be &lt;code&gt;src/test/java&lt;/code&gt; (assuming you are using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#folder-structure"&gt;recommended folder structure&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Prefer &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#classpath"&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/a&gt; when a file is expected to be heavily re-used all across your project. And yes, relative paths will work.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# json
* def someJson = read('some-json.json')
* def moreJson = read('classpath:more-json.json')

# xml
* def someXml = read('../common/my-xml.xml')

# import yaml (will be converted to json)
* def jsonFromYaml = read('some-data.yaml')

# csv (will be converted to json)
* def jsonFromCsv = read('some-data.csv')

# string
* def someString = read('classpath:messages.txt')

# javascript (will be evaluated)
* def someValue = read('some-js-code.js')

# if the js file evaluates to a function, it can be re-used later using the 'call' keyword (or invoked just like normal js)
* def someFunction = read('classpath:some-reusable-code.js')
* def someCallResult = call someFunction
* def sameCallResult = someFunction()

# the following short-cut is also allowed
* def someCallResult = call read('some-js-code.js')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;re-use other &lt;code&gt;*.feature&lt;/code&gt;&lt;/a&gt; files from test-scripts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# perfect for all those common authentication or 'set up' flows
* def result = call read('classpath:some-reusable-steps.feature')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When a &lt;em&gt;called&lt;/em&gt; feature depends on some side-by-side resources such as JSON or JS files, you can use the &lt;code&gt;this:&lt;/code&gt; prefix to ensure that relative paths work correctly - because by default Karate calculates relative paths from the "root" feature or the top-most "caller".&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def data = read('this:payload.json')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If a file does not end in &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.xml&lt;/code&gt;, &lt;code&gt;.yaml&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt; or &lt;code&gt;.txt&lt;/code&gt;, it is treated as a stream - which is typically what you would need for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-field"&gt;&lt;code&gt;multipart&lt;/code&gt;&lt;/a&gt; file uploads.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def someStream = read('some-pdf.pdf')
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The &lt;code&gt;.graphql&lt;/code&gt; and &lt;code&gt;.gql&lt;/code&gt; extensions are also recognized (for GraphQL) but are handled the same way as &lt;code&gt;.txt&lt;/code&gt; and treated as a string.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For JSON and XML files, Karate will evaluate any &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;embedded expressions&lt;/a&gt; on load. This enables more concise tests, and the file can be re-usable in multiple, data-driven tests.&lt;/p&gt; 
&lt;p&gt;Since it is internally implemented as a JavaScript function, you can mix calls to &lt;code&gt;read()&lt;/code&gt; freely wherever JavaScript expressions are allowed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def someBigString = read('first.txt') + read('second.txt')
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Tip: you can even use JS expressions to dynamically choose a file based on some condition: &lt;code&gt;* def someConfig = read('my-config-' + someVariable + '.json')&lt;/code&gt;. Refer to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic"&gt;conditional logic&lt;/a&gt; for more ideas.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;And a very common need would be to use a file as the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#request"&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; body:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given request read('some-big-payload.json')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or in a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;And match response == read('expected-response-payload.json')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The rarely used &lt;code&gt;file:&lt;/code&gt; prefix is also supported. You could use it for 'hard-coded' absolute paths in dev mode, but is obviously not recommended for CI test-suites. A good example of where you may need this is if you programmatically write a file to the &lt;code&gt;target&lt;/code&gt; folder, and then you can read it like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def payload = read('file:target/large.xml')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Path Prefixes&lt;/h3&gt; 
&lt;p&gt;To summarize the possible prefixes:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prefix&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;relative to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#classpath"&gt;classpath&lt;/a&gt;, recommended for re-usable features&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;file:&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;do not use this unless you know what you are doing, see above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;this:&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;when in a &lt;em&gt;called&lt;/em&gt; feature, ensure that files are resolved relative to the current feature file&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Take a look at the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;Karate Demos&lt;/a&gt; for real-life examples of how you can use files for validating HTTP responses, like this one: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/read/read-files.feature"&gt;&lt;code&gt;read-files.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Read File As String&lt;/h3&gt; 
&lt;p&gt;In some rare cases where you don't want to auto-convert JSON, XML, YAML or CSV, and just get the raw string content (without having to re-name the file to end with &lt;code&gt;.txt&lt;/code&gt;) - you can use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-readasstring"&gt;&lt;code&gt;karate.readAsString()&lt;/code&gt;&lt;/a&gt; API. Here is an example of using a CSV file as the request-body:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given path 'upload'
And header Content-Type = 'text/csv'
And request karate.readAsString('classpath:my.csv')
When method post
Then status 202
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Compare Image&lt;/h2&gt; 
&lt;p&gt;Karate provides a flexible way to compare two images to determine if they are the same or similar. This is especially useful when capturing screenshots during tests and comparing against baseline images that are known to be correct.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A stand-alone example can be found here: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/examples/image-comparison"&gt;&lt;code&gt;examples/image-comparison&lt;/code&gt;&lt;/a&gt; along with a &lt;a href="https://youtu.be/wlvmNBraP60"&gt;video explanation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Below is a simple example that will compare a &lt;code&gt;baseline&lt;/code&gt; image to a more recent &lt;code&gt;latest&lt;/code&gt; image. An image comparison UI will also be embedded into the Karate HTML report with detailed information about any differences between the two images.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* compareImage { baseline: 'screenshots/login.png', latest: '/tmp/login.png' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also compare images using Karate &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#path-prefixes"&gt;path prefixes&lt;/a&gt; (e.g. &lt;code&gt;classpath:&lt;/code&gt;, &lt;code&gt;this:&lt;/code&gt;, &lt;code&gt;file:&lt;/code&gt;) or byte arrays:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def latestImgBytes = karate.readAsBytes('login.png')
* compareImage { baseline: 'classpath:screenshots/login.png', latest: '#(latestImgBytes)' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may configure the following image comparison options using the &lt;code&gt;configure&lt;/code&gt; action:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* configure imageComparison = { /* image comparison options ... */ }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Image comparison configuration options:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;allowScaling&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt; we will scale latest images to match the dimensions of the baseline when they are not equal&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;engine&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;'resemble'&lt;/td&gt; 
   &lt;td&gt;Comparison engine(s) to use. Valid options are &lt;code&gt;resemble&lt;/code&gt; and &lt;code&gt;ssim&lt;/code&gt; separated by either &lt;code&gt;,&lt;/code&gt; or &lt;code&gt;&amp;amp;#124&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;failureThreshold&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;0.0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Precentage of &lt;code&gt;latest&lt;/code&gt; image pixels allowed to differ from &lt;code&gt;baseline&lt;/code&gt; before we consider the comparison as failed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mismatchShouldPass&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt; all image comparisons will pass (even when difference is &amp;gt;= &lt;code&gt;failureThreshold&lt;/code&gt;). Note: failures will result in image comparison UI &lt;em&gt;always&lt;/em&gt; being embedded in Karate HTML reports regardless of &lt;code&gt;hideUiOnSuccess&lt;/code&gt; setting.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;onShowRebase&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string (js)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Function to be called when displaying image comparison rebase in Karate HTML reports (e.g. to customize rebase filename and/or output)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;onShowConfig&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string (js)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Function to be called when displaying image comparison configuration in Karate HTML reports (e.g. to customize configuration output)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;hideUiOnSuccess&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt; the comparison UI will &lt;em&gt;NOT&lt;/em&gt; be embedded in Karate HTML reports for all non-failed image comparisons&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# use only 'ssim' (structural similarity) engine
* configure imageComparison = { engine: 'ssim' }

# always use both 'resemble' and 'ssim' engines but only evaluate the lowest mismatch percentage against our `failureThreshold`
* configure imageComparison = { engine: 'resemble,ssim' }

# prefer 'resemble' and fallback to 'ssim' engine only if the resemble mismatch percentage is &amp;gt;= `failureThreshold`
* configure imageComparison = { engine: 'resemble|ssim' }

# only consider the comparison as failed when 2% or more pixels are different from the baseline
* configure imageComparison = { failureThreshold: 2 }

# consider image comparisons that fail due to too many mismatched pixels as passed (especially useful when you are first starting without any baseline images)
* configure imageComparison = { mismatchShouldPass: true }

# custom JS function called in Karate HTML image comparison UI when the user clicks the `Rebase` button
* text onShowRebaseFn =
"""
function (config, downloadLatestFn) {
  // trigger download of latest image with custom file name
  downloadLatestFn('custom_latest.png')
  return 'this text will be displayed to the user when they click the rebase button'
}
"""
* configure imageComparison = { onShowRebase: '#(onShowRebaseFn)' }

# custom JS function called in Karate HTML image comparison UI when the user clicks the `Show config` button
* text onShowConfigFn =
"""
function (customConfigJson, config) {
  return 'this text will be displayed above the image comparison config\n' + customConfigJson
}
"""
* configure imageComparison = { onShowConfig: '#(onShowConfigFn)' }

# don't embed the image comparison UI when the latest image is the same / similar to the baseline (e.g. to save space and speed up report loading)
* configure imageComparison = { hideUiOnSuccess: true }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Image comparison engines can also be customized:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { /* engine options ... */ } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Image comparison configuration options:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Engines&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ignoredBoxes&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;resemble, ssim&lt;/td&gt; 
   &lt;td&gt;array of object&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Array of rectangles that should be ignored during image comparison&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;resemble&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;'less'&lt;/td&gt; 
   &lt;td&gt;Resemble ignore preset. Valid options are &lt;code&gt;nothing&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;antialiasing&lt;/code&gt;, &lt;code&gt;colors&lt;/code&gt;, &lt;code&gt;alpha&lt;/code&gt; (see &lt;a href="https://github.com/t12y/resemble/raw/0c55a1849232b68aa4c16f1d7a949cc429a6af8e/src/main/java/io/github/t12y/resemble/Options.java#L20"&gt;presets&lt;/a&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ignoreAreasColoredWith&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;resemble&lt;/td&gt; 
   &lt;td&gt;object&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Resemble option to ignore a specific color&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ignoreColors&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;resemble&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt; only pixel brightness is compared&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ignoreAntialiasing&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;resemble&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt; only pixel brightness is compared for pixels determined to be antialiased&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;tolerances&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;resemble&lt;/td&gt; 
   &lt;td&gt;object&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Resemble option to override preset tolerances for color and brightness&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ssim&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;ssim&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;'WEBER'&lt;/td&gt; 
   &lt;td&gt;SSIM algorithm. Valid options are &lt;code&gt;FAST&lt;/code&gt; or &lt;code&gt;WEBER&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;rgb2grayVersion&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;ssim&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;'INTEGER'&lt;/td&gt; 
   &lt;td&gt;SSIM grayscale algorithm. Valid options are &lt;code&gt;ORIGINAL&lt;/code&gt; or &lt;code&gt;INTEGER&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;k1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;ssim&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;0.01&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;SSIM first stability constant (see &lt;a href="https://github.com/obartra/ssim/raw/3f3af6118c78b3ed4f0ff6eb224700c071f29c99/assets/ssim.pdf"&gt;ssim.pdf&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;k2&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;ssim&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;0.03&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;SSIM second stability constant (see &lt;a href="https://github.com/obartra/ssim/raw/3f3af6118c78b3ed4f0ff6eb224700c071f29c99/assets/ssim.pdf"&gt;ssim.pdf&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;windowSize&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;ssim&lt;/td&gt; 
   &lt;td&gt;integer&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;11&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Window size for the SSIM map (see &lt;a href="https://github.com/obartra/ssim/raw/3f3af6118c78b3ed4f0ff6eb224700c071f29c99/assets/ssim.pdf"&gt;ssim.pdf&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bitDepth&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;ssim&lt;/td&gt; 
   &lt;td&gt;integer&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;8&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;The number of bits used to encode each pixel&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;maxSize&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;ssim&lt;/td&gt; 
   &lt;td&gt;integer&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;256&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;The maximum size on the smallest dimension before downsampling&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# ignore areas of an image (e.g. to avoid constant failures due to loading animations)
* def boxes =
"""
[{
  top: 483,
  left: 1085,
  bottom: 893,
  right: 1496
}]
"""
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoredBoxes: #(boxes) } }

#############################
### Resemble-only options ###
#############################

# zero-tolerance for color shifts
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignore: 'nothing' } }

# ignore all purple areas
* def purple =
"""
{
  r: 190,
  g: 0,
  b: 255
}
"""
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoreAreasColoredWith: '#(purple)' } }

# compare images as grayscale
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoreColors: true } }

# attempt to detect and ignore antialiasing
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoreAntialiasing: true } }

# customize color / brightness tolerances
* def customTolerances =
"""
{
  red: 4,
  green: 4,
  blue: 4,
  alpha: 4,
  minBrightness: 4,
  maxBrightness: 250
}
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { tolerances: '#(customTolerances)' } }

#########################
### SSIM-only options ###
#########################

# switch to `fast` SSIM algorithm
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ssim: 'FAST' } }

# switch to `original` grayscale SSIM algorithm
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { rgb2grayVersion: 'ORIGINAL' } }

# update SSIM stability constants
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { k1: 0, k2: 0 } }

# update SSIM window size
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { windowSize: 3 } }

# update SSIM bit depth
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { bitDepth: 16 } }

# update SSIM max size
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { maxSize: 512 } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Type Conversion&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Best practice is to stick to using only &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; unless there is a very good reason to do otherwise.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Internally, Karate will auto-convert JSON (and even XML) to Java &lt;code&gt;Map&lt;/code&gt; objects. And JSON arrays would become Java &lt;code&gt;List&lt;/code&gt;-s. But you will never need to worry about this internal data-representation most of the time.&lt;/p&gt; 
&lt;p&gt;In some rare cases, for e.g. if you acquired a string from some external source, or if you generated JSON (or XML) by concatenating text or using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#replace"&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/a&gt;, you may want to convert a string to JSON and vice-versa. You can even perform a conversion from XML to JSON if you want.&lt;/p&gt; 
&lt;p&gt;One example of when you may want to convert JSON (or XML) to a string is when you are passing a payload to custom code via &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;Java interop&lt;/a&gt;. Do note that when passing JSON, the default &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; representations should suffice for most needs (&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/java/cats-java.feature"&gt;see example&lt;/a&gt;), and using them would avoid un-necessary string-conversion.&lt;/p&gt; 
&lt;p&gt;So you have the following type markers you can use instead of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; (or the rarely used &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#text"&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt;). The first four below are best explained in this example file: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature"&gt;&lt;code&gt;type-conv.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a name="type-string"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt; - convert JSON or any other data-type (except XML) to a string&lt;/li&gt; 
 &lt;li&gt;&lt;a name="type-json"&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; - convert XML, a map-like or list-like object, a string, or even a Java object into JSON&lt;/li&gt; 
 &lt;li&gt;&lt;a name="type-xml"&gt;&lt;code&gt;xml&lt;/code&gt;&lt;/a&gt; - convert JSON, a map-like object, a string, or even a Java object into XML&lt;/li&gt; 
 &lt;li&gt;&lt;a name="type-xmlstring"&gt;&lt;code&gt;xmlstring&lt;/code&gt;&lt;/a&gt; - specifically for converting the map-like Karate internal representation of XML into a string&lt;/li&gt; 
 &lt;li&gt;&lt;a name="type-csv"&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt; - convert a CSV string into JSON, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#csv"&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a name="type-yaml"&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/a&gt; - convert a YAML string into JSON, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#yaml"&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a name="type-bytes"&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; - convert to a byte-array, useful for binary payloads or comparisons, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/websocket/echo.feature"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a name="type-copy"&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; - to clone a given payload variable reference (JSON, XML, Map or List), refer: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#copy"&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;csv&lt;/code&gt; and &lt;code&gt;yaml&lt;/code&gt; types can be initialized in-line using the "triple quote" or "docstring" multi-line approach as shown &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/type-conversion.feature"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to 'pretty print' a JSON or XML value with indenting, refer to the documentation of the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#print"&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; 
&lt;h3&gt;Floats and Integers&lt;/h3&gt; 
&lt;p&gt;While converting a number to a string is easy (just concatenate an empty string e.g. &lt;code&gt;myInt + ''&lt;/code&gt;), in some rare cases, you may need to convert a string to a number. You can do this by multiplying by &lt;code&gt;1&lt;/code&gt; or using the built-in JavaScript &lt;code&gt;parseInt()&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = '10'
* string json = { bar: '#(1 * foo)' }
* match json == '{"bar":10.0}'

* string json = { bar: '#(parseInt(foo))' }
* match json == '{"bar":10.0}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As per the JSON spec, all numeric values are treated as doubles, so for integers - it really doesn't matter if there is a decimal point or not. In fact it may be a good idea to slip doubles instead of integers into some of your tests ! Anyway, there are times when you may want to force integers (perhaps for cosmetic reasons) and you can easily do so using the 'double-tilde' &lt;a href="http://rocha.la/JavaScript-bitwise-operators-in-practice"&gt;short-cut: '&lt;code&gt;~~&lt;/code&gt;'&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = '10'
* string json = { bar: '#(~~foo)' }
* match json == '{"bar":10}'

# JS math can introduce a decimal point in some cases
* def foo = 100
* string json = { bar: '#(foo * 0.1)' }
* match json == '{"bar":10.0}'

# but you can easily coerce to an integer if needed
* string json = { bar: '#(~~(foo * 0.1))' }
* match json == '{"bar":10}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Large Numbers&lt;/h3&gt; 
&lt;p&gt;Sometimes when dealing with very large numbers, the JS engine may mangle the number into scientific notation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def big = 123123123123
* string json = { num: '#(big)' }
* match json == '{"num":1.23123123123E11}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can be easily solved by using &lt;code&gt;java.math.BigDecimal&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def big = new java.math.BigDecimal(123123123123)
* string json = { num: '#(big)' }
* match json == '{"num":123123123123}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more tips, refer &lt;a href="https://stackoverflow.com/a/77576066/143475"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Karate has a built-in HTML templating engine that can be used to insert additional custom HTML into the test-reports. Here is an &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/users-doc.feature"&gt;example&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* url 'https://jsonplaceholder.typicode.com/users'
* method get
* doc { read: 'users.html' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Any Karate &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;variable&lt;/a&gt; will be available to the template, which is &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/users.html"&gt;&lt;code&gt;users.html&lt;/code&gt;&lt;/a&gt; in this example.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;table class="table table-striped"&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;ID&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;E-Mail&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;tr th:each="user: response"&amp;gt;
      &amp;lt;td th:text="user.id"&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td th:text="user.name"&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td th:text="user.email"&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see what the result looks like &lt;a href="https://twitter.com/ptrthomas/status/1335478948365443072"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Since templates can be loaded using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#classpath"&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/a&gt; prefix, you can even re-use templates across your projects via &lt;a href="https://stackoverflow.com/a/58339662/143475"&gt;Java JAR files&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Karate Expressions&lt;/h1&gt; 
&lt;p&gt;Before we get to the HTTP keywords, it is worth doing a recap of the various 'shapes' that the right-hand-side of an assignment statement can take:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Example&lt;/th&gt; 
   &lt;th&gt;Shape&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = 'bar'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS&lt;/td&gt; 
   &lt;td&gt;simple strings, numbers or booleans&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = 'bar' + baz[0]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS&lt;/td&gt; 
   &lt;td&gt;any valid JavaScript expression, and variables can be mixed in, another example: &lt;code&gt;bar.length + 1&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = { bar: '#(baz)' }&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON&lt;/td&gt; 
   &lt;td&gt;anything that starts with a &lt;code&gt;{&lt;/code&gt; or a &lt;code&gt;[&lt;/code&gt; is parsed as JSON, use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#text"&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; instead of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; if you need to suppress the default behavior&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = ({ bar: baz })&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#enclosed-javascript"&gt;enclosed JavaScript&lt;/a&gt;, the result of which is exactly equivalent to the above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = &amp;lt;foo&amp;gt;bar&amp;lt;/foo&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;XML&lt;/td&gt; 
   &lt;td&gt;anything that starts with a &lt;code&gt;&amp;lt;&lt;/code&gt; is parsed as XML, use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#text"&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; instead of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; if you need to suppress the default behavior&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = function(arg){ return arg + bar }&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS Fn&lt;/td&gt; 
   &lt;td&gt;anything that starts with &lt;code&gt;function(...){&lt;/code&gt; is parsed as a JS function.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = read('bar.json')&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS&lt;/td&gt; 
   &lt;td&gt;using the built-in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; function&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = $.bar[0]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JsonPath&lt;/td&gt; 
   &lt;td&gt;short-cut JsonPath on the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = /bar/baz&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;XPath&lt;/td&gt; 
   &lt;td&gt;short-cut XPath on the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = get bar $..baz[?(@.ban)]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#get"&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; JsonPath&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/json-path/JsonPath#path-examples"&gt;JsonPath&lt;/a&gt; on the variable &lt;code&gt;bar&lt;/code&gt;, you can also use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#get-plus-index"&gt;&lt;code&gt;get[0]&lt;/code&gt;&lt;/a&gt; to get the first item if the JsonPath evaluates to an array - especially useful when using wildcards such as &lt;code&gt;[*]&lt;/code&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#jsonpath-filters"&gt;filter-criteria&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = $bar..baz[?(@.ban)]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;$var.JsonPath&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#get-short-cut"&gt;convenience short-cut&lt;/a&gt; for the above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = get bar count(/baz//ban)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#get"&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; XPath&lt;/td&gt; 
   &lt;td&gt;XPath on the variable &lt;code&gt;bar&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = karate.pretty(bar)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS&lt;/td&gt; 
   &lt;td&gt;using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;built-in &lt;code&gt;karate&lt;/code&gt; object&lt;/a&gt; in JS expressions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def Foo = Java.type('com.mycompany.Foo')&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS-Java&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop"&gt;Java Interop&lt;/a&gt;, and even package-name-spaced one-liners like &lt;code&gt;java.lang.System.currentTimeMillis()&lt;/code&gt; are possible&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = call bar { baz: '#(ban)' }&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;, where expressions like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read('foo.js')&lt;/code&gt;&lt;/a&gt; are allowed as the object to be called or the argument&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def foo = bar({ baz: ban })&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS&lt;/td&gt; 
   &lt;td&gt;equivalent to the above, JavaScript function invocation&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Core Keywords&lt;/h1&gt; 
&lt;p&gt;They are &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;These are essential HTTP operations, they focus on setting one (un-named or 'key-less') value at a time and therefore don't need an &lt;code&gt;=&lt;/code&gt; sign in the syntax.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;url&lt;/code&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given url 'https://myhost.com/v1/cats'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Within a &lt;code&gt;Scenario&lt;/code&gt;, a URL remains constant until you use the &lt;code&gt;url&lt;/code&gt; keyword again, so this is a good place to set-up the 'non-changing' parts of your REST URL-s.&lt;/p&gt; 
&lt;p&gt;A URL can take expressions, so the approach below is legal. And yes, variables can come from global &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;config&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given url 'https://' + e2eHostName + '/v1/api'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;JavaScript enthusiasts may prefer variable interpolation using backticks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* url `https://${e2eHostName}/v1/api`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are trying to build dynamic URLs including query-string parameters in the form: &lt;code&gt;http://myhost/some/path?foo=bar&amp;amp;search=true&lt;/code&gt; - please refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#param"&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;configure url&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;When you &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; other features, the &lt;code&gt;url&lt;/code&gt; will be "reset". But if you want the &lt;code&gt;url&lt;/code&gt; to persist, you can do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature:

Scenario:
* configure url = 'https://httpbin.org'
* path 'anything'
* method get
* call read('@called')

@ignore @called
Scenario:
* path 'anything'
* method get
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note how in the "called" &lt;code&gt;Scenario&lt;/code&gt; you could omit the &lt;code&gt;url&lt;/code&gt;. It is easy to change the &lt;code&gt;url&lt;/code&gt; anytime by using the keyword. Note that you can use variables to set up the &lt;code&gt;url&lt;/code&gt; any time you need to.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;path&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;REST-style path parameters. Can be expressions that will be evaluated. Comma delimited values are supported which can be more convenient, and takes care of URL-encoding and appending '/' between path segments as needed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given path 'documents', documentId, 'download'

# or you can do the same on multiple lines if you wish
Given path 'documents'
And path documentId
And path 'download'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the &lt;code&gt;path&lt;/code&gt; 'resets' after any HTTP request is made but not the &lt;code&gt;url&lt;/code&gt;. The &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#hello-world"&gt;Hello World&lt;/a&gt; is a great example of 'REST-ful' use of the &lt;code&gt;url&lt;/code&gt; when the test focuses on a single REST 'resource'. Look at how the &lt;code&gt;path&lt;/code&gt; did not need to be specified for the second HTTP &lt;code&gt;get&lt;/code&gt; call since &lt;code&gt;/cats&lt;/code&gt; is part of the &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Important: If you attempt to build a URL in the form &lt;code&gt;?myparam=value&lt;/code&gt; by using &lt;code&gt;path&lt;/code&gt; the &lt;code&gt;?&lt;/code&gt; will get encoded into &lt;code&gt;%3F&lt;/code&gt;. Use either the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#param"&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt; keyword, e.g.: &lt;code&gt;* param myparam = 'value'&lt;/code&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#url"&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;* url 'http://example.com/v1?myparam'&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Because Karate strips trailing slashes if part of a &lt;code&gt;path&lt;/code&gt; parameter, if you want to append a forward-slash to the end of the URL in the final HTTP request - make sure that the last &lt;code&gt;path&lt;/code&gt; is a single '/'. For example, if your path has to be &lt;code&gt;documents/&lt;/code&gt; (and not just &lt;code&gt;documents&lt;/code&gt;), use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given path 'documents', '/'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;request&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;In-line JSON:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given request { name: 'Billie', type: 'LOL' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In-line XML:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;And request &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;type&amp;gt;Ceiling&amp;lt;/type&amp;gt;&amp;lt;/cat&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;file&lt;/a&gt; in the same package. Use the &lt;code&gt;classpath:&lt;/code&gt; prefix to load from the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#classpath"&gt;classpath&lt;/a&gt; instead.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given request read('my-json.json')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You could always use a variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;And request myVariable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In most cases you won't need to set the &lt;code&gt;Content-Type&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; as Karate will automatically do the right thing depending on the data-type of the &lt;code&gt;request&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Defining the &lt;code&gt;request&lt;/code&gt; is mandatory if you are using an HTTP &lt;code&gt;method&lt;/code&gt; that expects a body such as &lt;code&gt;post&lt;/code&gt;. If you really need to have an empty body, you can use an empty string as shown below, and you can force the right &lt;code&gt;Content-Type&lt;/code&gt; header by using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given request ''
And header Content-Type = 'text/html'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Sending a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;file&lt;/a&gt; as the entire binary request body is easy (note that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-file"&gt;&lt;code&gt;multipart&lt;/code&gt;&lt;/a&gt; is different):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given path 'upload'
And request read('my-image.jpg')
When method put
Then status 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;method&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The HTTP verb - &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;options&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;trace&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Lower-case is fine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;When method post
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is worth internalizing that during test-execution, it is upon the &lt;code&gt;method&lt;/code&gt; keyword that the actual HTTP request is issued. Which suggests that the step should be in the &lt;code&gt;When&lt;/code&gt; form, for example: &lt;code&gt;When method post&lt;/code&gt;. And steps that follow should logically be in the &lt;code&gt;Then&lt;/code&gt; form. Also make sure that you complete the set up of things like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#url"&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#param"&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; etc. &lt;em&gt;before&lt;/em&gt; you fire the &lt;code&gt;method&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# set headers or params (if any) BEFORE the method step
Given header Accept = 'application/json'
When method get
# the step that immediately follows the above would typically be:
Then status 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Although rarely needed, variable references or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;expressions&lt;/a&gt; are also supported:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def putOrPost = (someVariable == 'dev' ? 'put' : 'post')
* method putOrPost
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;status&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;This is a shortcut to assert the HTTP response code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Then status 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And this assertion will cause the test to fail if the HTTP response code is something else.&lt;/p&gt; 
&lt;p&gt;See also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responsestatus"&gt;&lt;code&gt;responseStatus&lt;/code&gt;&lt;/a&gt; if you want to do some complex assertions against the HTTP status code.&lt;/p&gt; 
&lt;h1&gt;Keywords that set key-value pairs&lt;/h1&gt; 
&lt;p&gt;They are &lt;code&gt;param&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;form field&lt;/code&gt; and &lt;code&gt;multipart field&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The syntax will include a '=' sign between the key and the value. The key should not be within quotes.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;To make dynamic data-driven testing easier, the following keywords also exist: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#params"&gt;&lt;code&gt;params&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#headers"&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#cookies-json"&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#form-fields"&gt;&lt;code&gt;form fields&lt;/code&gt;&lt;/a&gt;. They use JSON to build the relevant parts of the HTTP request.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;code&gt;param&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Setting query-string parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given param someKey = 'hello'
And param anotherKey = someVariable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above would result in a URL like: &lt;code&gt;http://myhost/mypath?someKey=hello&amp;amp;anotherKey=foo&lt;/code&gt;. Note that the &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; will be automatically inserted.&lt;/p&gt; 
&lt;p&gt;Multi-value params are also supported:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* param myParam = ['foo', 'bar']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For convenience, a &lt;code&gt;null&lt;/code&gt; value will be ignored. You can also use JSON to set multiple query-parameters in one-line using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#params"&gt;&lt;code&gt;params&lt;/code&gt;&lt;/a&gt; and this is especially useful for dynamic data-driven testing.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;header&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;You can use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions"&gt;functions&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;expressions&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given header Authorization = myAuthFunction()
And header transaction-id = 'test-' + myIdString
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is worth repeating that in most cases you won't need to set the &lt;code&gt;Content-Type&lt;/code&gt; header as Karate will automatically do the right thing depending on the data-type of the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#request"&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Because of how easy it is to set HTTP headers, Karate does not provide any special keywords for things like the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept"&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; header. You simply do something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given path 'some/path'
And request { some: 'data' }
And header Accept = 'application/json'
When method post
Then status 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A common need is to send the same header(s) for &lt;em&gt;every&lt;/em&gt; request, and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers"&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; (with JSON) is how you can set this up once for all subsequent requests. And if you do this within a &lt;code&gt;Background:&lt;/code&gt; section, it would apply to all &lt;code&gt;Scenario:&lt;/code&gt; sections within the &lt;code&gt;*.feature&lt;/code&gt; file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* configure headers = { 'Content-Type': 'application/xml' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;Content-Type&lt;/code&gt; had to be enclosed in quotes in the JSON above because the "&lt;code&gt;-&lt;/code&gt;" (hyphen character) would cause problems otherwise. Also note that "&lt;code&gt;; charset=UTF-8&lt;/code&gt;" would be appended to the &lt;code&gt;Content-Type&lt;/code&gt; header that Karate sends by default, and in some rare cases, you may need to suppress this behavior completely. You can do so by setting the &lt;code&gt;charset&lt;/code&gt; to null via the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* configure charset = null
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need headers to be dynamically generated for each HTTP request, use a JavaScript function with &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers"&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; instead of JSON.&lt;/p&gt; 
&lt;p&gt;Multi-value headers (though rarely used in the wild) are also supported:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* header myHeader = ['foo', 'bar']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also look at the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#headers"&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt; keyword which uses JSON and makes some kinds of dynamic data-driven testing easier.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Setting a cookie:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given cookie foo = 'bar'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You also have the option of setting multiple cookies in one-step using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#cookies"&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; 
&lt;p&gt;Note that any cookies returned in the HTTP response would be automatically set for any future requests. This mechanism works by calling &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure cookies&lt;/code&gt;&lt;/a&gt; behind the scenes and if you need to stop auto-adding cookies for future requests, just do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* configure cookies = null
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also refer to the built-in variable &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responsecookies"&gt;&lt;code&gt;responseCookies&lt;/code&gt;&lt;/a&gt; for how you can access and perform assertions on cookie data values.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;form field&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;HTML form fields would be URL-encoded when the HTTP request is submitted (by the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#method"&gt;&lt;code&gt;method&lt;/code&gt;&lt;/a&gt; step). You would typically use these to simulate a user sign-in and then grab a security token from the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;Content-Type&lt;/code&gt; header will be automatically set to: &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. You just need to do a normal &lt;code&gt;POST&lt;/code&gt; (or &lt;code&gt;GET&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given path 'login'
And form field username = 'john'
And form field password = 'secret'
When method post
Then status 200
And def authToken = response.token
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A good example of the use of &lt;code&gt;form field&lt;/code&gt; for a typical sign-in flow is this OAuth 2 demo: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/oauth/oauth2.feature"&gt;&lt;code&gt;oauth2.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Multi-values are supported the way you would expect (e.g. for simulating check-boxes and multi-selects):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* form field selected = ['apple', 'orange']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also dynamically set multiple fields in one step using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#form-fields"&gt;&lt;code&gt;form fields&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;multipart field&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Use this for building multipart named (form) field requests. This is typically combined with &lt;code&gt;multipart file&lt;/code&gt; as shown below.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Multiple fields can be set in one step using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-fields"&gt;&lt;code&gt;multipart fields&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;code&gt;multipart file&lt;/code&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given multipart file myFile = { read: 'test.pdf', filename: 'upload-name.pdf', contentType: 'application/pdf' }
And multipart field message = 'hello world'
When method post
Then status 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is important to note that &lt;code&gt;myFile&lt;/code&gt; above is the "field name" within the &lt;code&gt;multipart/form-data&lt;/code&gt; request payload. This roughly corresponds to a &lt;a href="https://curl.haxx.se/docs/manpage.html#-F"&gt;&lt;code&gt;cURL&lt;/code&gt;&lt;/a&gt; argument of &lt;code&gt;-F @myFile=test.pdf&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;multipart&lt;/code&gt; file uploads can be tricky, and hard to get right. If you get stuck and ask a question on &lt;a href="https://stackoverflow.com/questions/tagged/karate"&gt;Stack Overflow&lt;/a&gt;, make sure you provide a &lt;code&gt;cURL&lt;/code&gt; command that works - or else it would be very difficult for anyone to troubleshoot what you could be doing wrong. Also see &lt;a href="https://github.com/karatelabs/karate/issues/1645#issuecomment-862502881"&gt;this thread&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Also note that &lt;code&gt;multipart file&lt;/code&gt; takes a JSON argument so that you can easily set the &lt;code&gt;filename&lt;/code&gt; and the &lt;code&gt;contentType&lt;/code&gt; (mime-type) in one step.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;read&lt;/code&gt;: the name of a file, and the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;classpath:&lt;/code&gt;&lt;/a&gt; prefix also is allowed. mandatory unless &lt;code&gt;value&lt;/code&gt; is used, see below.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;value&lt;/code&gt;: alternative to &lt;code&gt;read&lt;/code&gt; in rare cases where something like a JSON or XML file is being uploaded and you want to create it dynamically.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: optional, if not specified there will be no &lt;code&gt;filename&lt;/code&gt; attribute in &lt;code&gt;Content-Disposition&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;contentType&lt;/code&gt;: optional, will default to &lt;code&gt;application/octet-stream&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When 'multipart' content is involved, the &lt;code&gt;Content-Type&lt;/code&gt; header of the HTTP request defaults to &lt;code&gt;multipart/form-data&lt;/code&gt;. You can over-ride it by using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword before the &lt;code&gt;method&lt;/code&gt; step. Look at &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-entity"&gt;&lt;code&gt;multipart entity&lt;/code&gt;&lt;/a&gt; for an example.&lt;/p&gt; 
&lt;p&gt;Also refer to this &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;demo example&lt;/a&gt; for a working example of multipart file uploads: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/upload/upload.feature"&gt;&lt;code&gt;upload.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also dynamically set multiple files in one step using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-files"&gt;&lt;code&gt;multipart files&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;multipart entity&lt;/code&gt;&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This is technically not in the key-value form: &lt;code&gt;multipart field name = 'foo'&lt;/code&gt;, but logically belongs here in the documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Use this for multipart content items that don't have field-names. Here below is an example that also demonstrates using the &lt;a href="https://tools.ietf.org/html/rfc2387"&gt;&lt;code&gt;multipart/related&lt;/code&gt;&lt;/a&gt; content-type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given path 'v2', 'documents'
And multipart entity read('foo.json')
And multipart field image = read('bar.jpg')
And header Content-Type = 'multipart/related'
When method post 
Then status 201
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Multi-Param Keywords&lt;/h1&gt; 
&lt;h2&gt;Keywords that set multiple key-value pairs in one step&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;params&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt;, &lt;code&gt;cookies&lt;/code&gt;, &lt;code&gt;form fields&lt;/code&gt;, &lt;code&gt;multipart fields&lt;/code&gt; and &lt;code&gt;multipart files&lt;/code&gt; take a single JSON argument (which can be in-line or a variable reference), and this enables certain types of dynamic data-driven testing, especially because any JSON key with a &lt;code&gt;null&lt;/code&gt; value will be ignored. Here is a good example in the demos: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/search/dynamic-params.feature"&gt;&lt;code&gt;dynamic-params.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;params&lt;/code&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* params { searchBy: 'client', active: true, someList: [1, 2, 3] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#param"&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def someData = { Authorization: 'sometoken', tx_id: '1234', extraTokens: ['abc', 'def'] }
* headers someData
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* cookies { someKey: 'someValue', foo: 'bar' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#cookie"&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;form fields&lt;/code&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def credentials = { username: '#(user.name)', password: 'secret', projects: ['one', 'two'] }
* form fields credentials
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#form-field"&gt;&lt;code&gt;form field&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;multipart fields&lt;/code&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;And multipart fields { message: 'hello world', json: { foo: 'bar' } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-field"&gt;&lt;code&gt;multipart field&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;multipart files&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The single JSON argument needs to be in the form &lt;code&gt;{ field1: { read: 'file1.ext' }, field2: { read: 'file2.ext' } }&lt;/code&gt; where each nested JSON is in the form expected by &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#multipart-file"&gt;&lt;code&gt;multipart file&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def json = {}
* set json.myFile1 = { read: 'test1.pdf', filename: 'upload-name1.pdf', contentType: 'application/pdf' }
# if you have dynamic keys you can do this
* def key = 'myFile2'
* json[key] = { read: 'test2.pdf', filename: 'upload-name2.pdf', contentType: 'application/pdf' }
And multipart files json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For an example, refer: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/upload/upload-multiple-files.feature"&gt;&lt;code&gt;upload-multiple-files.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;SOAP&lt;/h1&gt; 
&lt;p&gt;Since a SOAP request needs special handling, this is the only case where the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#method"&gt;&lt;code&gt;method&lt;/code&gt;&lt;/a&gt; step is not used to actually fire the request to the server.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;soap action&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The name of the SOAP action specified is used as the 'SOAPAction' header. Here is an example which also demonstrates how you could assert for expected values in the response XML.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given request read('soap-request.xml')
When soap action 'QueryUsageBalance'
Then status 200
And match response /Envelope/Body/QueryUsageBalanceResponse/Result/Error/Code == 'DAT_USAGE_1003'
And match response /Envelope/Body/QueryUsageBalanceResponse == read('expected-response.xml')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;demos&lt;/a&gt; for an example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/soap/soap.feature"&gt;&lt;code&gt;soap.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;More examples are available that showcase various ways of parameter-izing and dynamically manipulating SOAP requests in a data-driven fashion. Karate is quite flexible, and provides multiple options for you to evolve patterns that fit your environment, as you can see here: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature"&gt;&lt;code&gt;xml.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;retry until&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Karate has built-in support for re-trying an HTTP request until a certain condition has been met. The default setting for the max retry-attempts is 3 with a poll interval of 3000 milliseconds (3 seconds). If needed, this can be changed by using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; - any time during a test, or set globally via &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* configure retry = { count: 10, interval: 5000 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;retry&lt;/code&gt; keyword is designed to extend the existing &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#method"&gt;&lt;code&gt;method&lt;/code&gt;&lt;/a&gt; syntax (and should appear &lt;strong&gt;before&lt;/strong&gt; a &lt;code&gt;method&lt;/code&gt; step) like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given url demoBaseUrl
And path 'greeting'
And retry until response.id &amp;gt; 3
When method get
Then status 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Any JavaScript expression that uses any variable in scope can be placed after the "&lt;code&gt;retry until&lt;/code&gt;" part. So you can refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responsestatus"&gt;&lt;code&gt;responseStatus&lt;/code&gt;&lt;/a&gt; or even &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders"&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; if needed. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given url demoBaseUrl
And path 'greeting'
And retry until responseStatus == 200 &amp;amp;&amp;amp; response.id &amp;gt; 3
When method get
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that it has to be a pure JavaScript expression - which means that &lt;code&gt;match&lt;/code&gt; syntax such as &lt;code&gt;contains&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work. But you can easily achieve any complex logic by &lt;a href="https://stackoverflow.com/a/55823180/143475"&gt;using the JS API&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Refer to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/polling/polling.feature"&gt;&lt;code&gt;polling.feature&lt;/code&gt;&lt;/a&gt; for an example, and also see the alternative way to achieve &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#polling"&gt;polling&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;Managing Headers, SSL, Timeouts and HTTP Proxy&lt;/h2&gt; 
&lt;p&gt;You can adjust configuration settings for the HTTP client used by Karate using this keyword. The syntax is similar to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; but instead of a named variable, you update configuration. Here are the configuration keys supported:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-url"&gt;&lt;code&gt;configure url&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON / JS function&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers"&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON / JS function&lt;/td&gt; 
   &lt;td&gt;Just like &lt;code&gt;configure headers&lt;/code&gt;, but for cookies. You will typically never use this, as response cookies are auto-added to all future requests. If you need to clear cookies at any time, just do &lt;code&gt;configure cookies = null&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;logPrettyRequest&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;Pretty print the request payload JSON or XML with indenting (default &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;logPrettyResponse&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;Pretty print the response payload JSON or XML with indenting (default &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;printEnabled&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;Can be used to suppress the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#print"&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; output when not in 'dev mode' by setting as &lt;code&gt;false&lt;/code&gt; (default &lt;code&gt;true&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;report&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON / boolean&lt;/td&gt; 
   &lt;td&gt;see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#report-verbosity"&gt;report verbosity&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;afterScenario&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS function&lt;/td&gt; 
   &lt;td&gt;Will be called &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#hooks"&gt;after every &lt;code&gt;Scenario&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;Example&lt;/code&gt; within a &lt;code&gt;Scenario Outline&lt;/code&gt;), refer to this example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature"&gt;&lt;code&gt;hooks.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;afterScenarioOutline&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS function&lt;/td&gt; 
   &lt;td&gt;Will be called &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#hooks"&gt;after every &lt;code&gt;Scenario Outline&lt;/code&gt;&lt;/a&gt;. Is called after the last &lt;code&gt;afterScenario&lt;/code&gt; for the last scenario in the outline. Refer to this example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature"&gt;&lt;code&gt;hooks.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;afterFeature&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JS function&lt;/td&gt; 
   &lt;td&gt;Will be called &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#hooks"&gt;after every &lt;code&gt;Feature&lt;/code&gt;&lt;/a&gt;, refer to this example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature"&gt;&lt;code&gt;hooks.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ssl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;Enable HTTPS calls without needing to configure a trusted certificate or key-store.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ssl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;Like above, but force the SSL algorithm to one of &lt;a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext"&gt;these values&lt;/a&gt;. (The above form internally defaults to &lt;code&gt;TLS&lt;/code&gt; if simply set to &lt;code&gt;true&lt;/code&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ssl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON&lt;/td&gt; 
   &lt;td&gt;see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#x509-certificate-authentication"&gt;X509 certificate authentication&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;followRedirects&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;Whether the HTTP client automatically follows redirects - (default &lt;code&gt;true&lt;/code&gt;), refer to this &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/redirect/redirect.feature"&gt;example&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;connectTimeout&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;integer&lt;/td&gt; 
   &lt;td&gt;Set the connect timeout (milliseconds). The default is 30000 (30 seconds). Note that for &lt;code&gt;karate-apache&lt;/code&gt;, this sets the &lt;a href="https://stackoverflow.com/a/22722260/143475"&gt;socket timeout&lt;/a&gt; to the same value as well.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;readTimeout&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;integer&lt;/td&gt; 
   &lt;td&gt;Set the read timeout (milliseconds). The default is 30000 (30 seconds).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;proxy&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;Set the URI of the HTTP proxy to use.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;proxy&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON&lt;/td&gt; 
   &lt;td&gt;For a proxy that requires authentication, set the &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;, see example below. Also a &lt;code&gt;nonProxyHosts&lt;/code&gt; key is supported which can take a list for e.g. &lt;code&gt;{ uri: 'http://my.proxy.host:8080', nonProxyHosts: ['host1', 'host2']}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;localAddress&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling#configure-localaddress"&gt;&lt;code&gt;karate-gatling&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;The charset that will be sent in the request &lt;code&gt;Content-Type&lt;/code&gt; which defaults to &lt;code&gt;utf-8&lt;/code&gt;. You typically never need to change this, and you can over-ride (or disable) this per-request if needed via the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword (&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/content-type.feature"&gt;example&lt;/a&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;retry&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON&lt;/td&gt; 
   &lt;td&gt;defaults to &lt;code&gt;{ count: 3, interval: 3000 }&lt;/code&gt; - see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#retry-until"&gt;&lt;code&gt;retry until&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;callSingleCache&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON&lt;/td&gt; 
   &lt;td&gt;defaults to &lt;code&gt;{ minutes: 0, dir: 'target' }&lt;/code&gt; - see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-callsinglecache"&gt;&lt;code&gt;configure callSingleCache&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;lowerCaseResponseHeaders&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;Converts every key in the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders"&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; to lower-case which makes it easier to validate or re-use&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;abortedStepsShouldPass&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;defaults to &lt;code&gt;false&lt;/code&gt;, whether steps after a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-abort"&gt;&lt;code&gt;karate.abort()&lt;/code&gt;&lt;/a&gt; should be marked as &lt;code&gt;PASSED&lt;/code&gt; instead of &lt;code&gt;SKIPPED&lt;/code&gt; - this can impact the behavior of 3rd-party reports, see &lt;a href="https://github.com/karatelabs/karate/issues/755"&gt;this issue&lt;/a&gt; for details&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;logModifier&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Java Object&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#log-masking"&gt;Log Masking&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON / JS function&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#configure-responseheaders"&gt;&lt;code&gt;karate-netty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;cors&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#configure-cors"&gt;&lt;code&gt;karate-netty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;driver&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core"&gt;UI Automation&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;driverTarget&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON / Java Object&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core#configure-drivertarget"&gt;&lt;code&gt;configure driverTarget&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;pauseIfNotPerf&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;defaults to &lt;code&gt;false&lt;/code&gt;, relevant only for performance-testing, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-pause"&gt;&lt;code&gt;karate.pause()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling#think-time"&gt;&lt;code&gt;karate-gatling&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;xmlNamespaceAware&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;defaults to &lt;code&gt;false&lt;/code&gt;, to handle XML namespaces in &lt;a href="https://github.com/karatelabs/karate/issues/1587"&gt;some special circumstances&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;abortSuiteOnFailure&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;defaults to &lt;code&gt;false&lt;/code&gt;, to not attempt to run any more tests upon a failure&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ntlmAuth&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;JSON&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#ntlm-authentication"&gt;NTLM Authentication&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;matchEachEmptyAllowed&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;defaults to &lt;code&gt;false&lt;/code&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-each"&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/a&gt; by default expects the array to be non-empty, refer to &lt;a href="https://github.com/karatelabs/karate/issues/2364"&gt;this issue&lt;/a&gt; to understand why you may want to over-ride this.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;httpRetryEnabled&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;defaults to &lt;code&gt;false&lt;/code&gt;, retry when the http requests fails with an exception &lt;code&gt;org.apache.httpNoHttpResponseException&lt;/code&gt;. For details see &lt;a href="https://github.com/karatelabs/karate/issues/2408"&gt;this issue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# pretty print the response payload
* configure logPrettyResponse = true

# enable ssl (and no certificate is required)
* configure ssl = true

# enable ssl and force the algorithm to TLSv1.2
* configure ssl = 'TLSv1.2'

# time-out if the response is not received within 10 seconds (after the connection is established)
* configure readTimeout = 10000

# set the uri of the http proxy server to use
* configure proxy = 'http://my.proxy.host:8080'

# proxy which needs authentication
* configure proxy = { uri: 'http://my.proxy.host:8080', username: 'john', password: 'secret' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;configure&lt;/code&gt; globally&lt;/h2&gt; 
&lt;p&gt;If you need to set any of these "globally" you can easily do so using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;the &lt;code&gt;karate&lt;/code&gt; object&lt;/a&gt; in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; - for e.g:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;  karate.configure('ssl', true);
  karate.configure('readTimeout', 5000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In rare cases where you need to add nested non-JSON data to the &lt;code&gt;configure&lt;/code&gt; value, you have to play by the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#restrictions-on-global-variables"&gt;rules&lt;/a&gt; that apply within &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;. Here is an example of performing a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core#configure-driver"&gt;&lt;code&gt;configure driver&lt;/code&gt;&lt;/a&gt; step in JavaScript:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;  var LM = Java.type('com.mycompany.MyHttpLogModifier');
  var driverConfig = { type:'chromedriver', start: false, webDriverUrl:'https://user:password@zalenium.net/wd/hub' };
  driverConfig.httpConfig = karate.toMap({ logModifier: LM.INSTANCE });
  karate.configure('driver', driverConfig);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Report Verbosity&lt;/h3&gt; 
&lt;p&gt;By default, Karate will add logs to the report output so that HTTP requests and responses appear in-line in the HTML reports. There may be cases where you want to suppress this to make the reports "lighter" and easier to read.&lt;/p&gt; 
&lt;p&gt;The configure key here is &lt;code&gt;report&lt;/code&gt; and it takes a JSON value. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* configure report = { showLog: true, showAllSteps: false }
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;code&gt;report&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;showLog&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;HTTP requests and responses (including headers) will appear in the HTML report, default &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;showAllSteps&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;If &lt;code&gt;false&lt;/code&gt;, any step that starts with &lt;code&gt;*&lt;/code&gt; instead of &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt;, &lt;code&gt;Then&lt;/code&gt; etc. will &lt;em&gt;not&lt;/em&gt; appear in the HTML report. The &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#print"&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; step is an exception. Default &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;You can 'reset' default settings by using the following short-cut:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# reset to defaults
* configure report = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since you can use &lt;code&gt;configure&lt;/code&gt; any time within a test, you have control over which requests or steps you want to show / hide. This can be convenient if a particular call results in a huge response payload.&lt;/p&gt; 
&lt;p&gt;The following short-cut is also supported which will disable all logs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* configure report = false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;@report=false&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;When you use a re-usable feature that has &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/multiple-functions-in-one-file"&gt;commonly used utilities&lt;/a&gt;, you may want to hide this completely from the HTML reports. The special &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#tags"&gt;tag&lt;/a&gt; &lt;code&gt;@report=false&lt;/code&gt; can be used, and it can even be used only for a single &lt;code&gt;Scenario&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;@ignore @report=false
Feature:

Scenario:
# some re-usable steps
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Log Masking&lt;/h3&gt; 
&lt;p&gt;In cases where you want to "mask" values which are sensitive from a security point of view from the output files, logs and HTML reports, you can implement the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/http/HttpLogModifier.java"&gt;&lt;code&gt;HttpLogModifier&lt;/code&gt;&lt;/a&gt; and tell Karate to use it via the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; keyword. Here is an &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/DemoLogModifier.java"&gt;example&lt;/a&gt; of an implementation. For performance reasons, you can implement &lt;code&gt;enableForUri()&lt;/code&gt; so that this "activates" only for some URL patterns.&lt;/p&gt; 
&lt;p&gt;Instantiating a Java class and using this in a test is easy (see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/headers-masking.feature"&gt;example&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# if this was in karate-config.js, it would apply "globally"
* def LM = Java.type('demo.headers.DemoLogModifier')
* configure logModifier = new LM()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or globally in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;var LM = Java.type('demo.headers.DemoLogModifier');
karate.configure('logModifier', new LM());
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since &lt;code&gt;karate-config.js&lt;/code&gt; is processed for every &lt;code&gt;Scenario&lt;/code&gt;, you can use a singleton instead of calling &lt;code&gt;new&lt;/code&gt; every time. Something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;var LM = Java.type('demo.headers.DemoLogModifier');
karate.configure('logModifier', LM.INSTANCE);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;System Properties for SSL and HTTP proxy&lt;/h3&gt; 
&lt;p&gt;For HTTPS / SSL, you can also specify a custom certificate or trust store by &lt;a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#InstallationAndCustomization"&gt;setting Java system properties&lt;/a&gt;. And similarly - for &lt;a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html"&gt;specifying the HTTP proxy&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;X509 Certificate Authentication&lt;/h3&gt; 
&lt;p&gt;Also referred to as "mutual auth" - if your API requires that clients present an X509 certificate for authentication, Karate supports this via JSON as the &lt;code&gt;configure ssl&lt;/code&gt; value. The following parameters are supported:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Required?&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;keyStore&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;path to file containing public and private keys for your client certificate.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;keyStorePassword&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;password for keyStore file.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;keyStoreType&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;Format of the keyStore file. Allowed keystore types are as described in the &lt;a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore"&gt;Java &lt;code&gt;KeyStore&lt;/code&gt; docs&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;trustStore&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;path to file containing the trust chain for your server certificate.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;trustStorePassword&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;password for trustStore file.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;trustStoreType&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;Format of the trustStore file. Allowed keystore types are as described in the &lt;a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore"&gt;Java &lt;code&gt;KeyStore&lt;/code&gt; docs&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;trustAll&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;if all server certificates should be considered trusted. Default value is &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt; will allow self-signed certificates. If &lt;code&gt;false&lt;/code&gt;, will expect the whole chain in the &lt;code&gt;trustStore&lt;/code&gt; or use what is available in the environment.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;algorithm&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;force the SSL algorithm to one of &lt;a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext"&gt;these values&lt;/a&gt;. Default is &lt;code&gt;TLS&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# enable X509 certificate authentication with PKCS12 file 'certstore.pfx' and password 'certpassword'
* configure ssl = { keyStore: 'classpath:certstore.pfx', keyStorePassword: 'certpassword', keyStoreType: 'pkcs12' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# trust all server certificates, in the feature file
* configure ssl = { trustAll: true }
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// trust all server certificates, global configuration in 'karate-config.js'
karate.configure('ssl', { trustAll: true });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For end-to-end examples in the Karate demos, look at the files in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/ssl"&gt;this folder&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;NTLM Authentication&lt;/h3&gt; 
&lt;p&gt;Karate provides support for NTLM authentication using the Apache NTLMEngine implementation.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Required?&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;username&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;required&lt;/td&gt; 
   &lt;td&gt;NTLM username&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;password&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;required&lt;/td&gt; 
   &lt;td&gt;NTLM password&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;workstation&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;The workstation the authentication request is originating from&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;optional&lt;/td&gt; 
   &lt;td&gt;The domain to authenticate within&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# enable NTLM authentication for the remaining scenario requests
* configure ntlmAuth = { username: 'admin', password: 'secret', domain: 'my.domain', workstation: 'my-pc' }

# enable NTLM authentication with only credentials
* configure ntlmAuth = { username: 'admin', password: 'secret' }

# disable NTLM authentication
* configure ntlmAuth = null
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// enable NTLM authentication within js
karate.confgure('ntlmAuth', { username: 'admin', password: 'secret', domain: 'my.domain', workstation: 'my-pc' })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Payload Assertions&lt;/h1&gt; 
&lt;h2&gt;Prepare, Mutate, Assert.&lt;/h2&gt; 
&lt;p&gt;Now it should be clear how Karate makes it easy to express JSON or XML. If you &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;read from a file&lt;/a&gt;, the advantage is that multiple scripts can re-use the same data.&lt;/p&gt; 
&lt;p&gt;Once you have a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#native-data-types"&gt;JSON or XML object&lt;/a&gt;, Karate provides multiple ways to manipulate, extract or transform data. And you can easily assert that the data is as expected by comparing it with another JSON or XML object.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;match&lt;/code&gt;&lt;/h2&gt; 
&lt;h3&gt;Payload Assertions / Smart Comparison&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;match&lt;/code&gt; operation is smart because white-space does not matter, and the order of keys (or data elements) does not matter. Karate is even able to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#ignore-or-validate"&gt;ignore fields you choose&lt;/a&gt; - which is very useful when you want to handle server-side dynamically generated fields such as UUID-s, time-stamps, security-tokens and the like.&lt;/p&gt; 
&lt;p&gt;The match syntax involves a double-equals sign '==' to represent a comparison (and not an assignment '=').&lt;/p&gt; 
&lt;p&gt;Since &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; go well together, they are both introduced in the examples in the section below.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;set&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Game, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; - Karate !&lt;/p&gt; 
&lt;h3&gt;JS for JSON&lt;/h3&gt; 
&lt;p&gt;Before you consider the &lt;code&gt;set&lt;/code&gt; keyword - note that for simple JSON update operations, you can use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; - especially useful when the path you are trying to mutate is dynamic. Since the &lt;code&gt;eval&lt;/code&gt; keyword can be omitted when operating on variables using JavaScript, this leads to very concise code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def myJson = { a: '1' }
* myJson.b = 2
* match myJson == { a: '1', b: 2 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; for more / advanced examples.&lt;/p&gt; 
&lt;h3&gt;Manipulating Data&lt;/h3&gt; 
&lt;p&gt;Setting values on JSON documents is simple using the &lt;code&gt;set&lt;/code&gt; keyword.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def myJson = { foo: 'bar' }
* set myJson.foo = 'world'
* match myJson == { foo: 'world' }

# add new keys.  you can use pure JsonPath expressions (notice how this is different from the above)
* set myJson $.hey = 'ho'
* match myJson == { foo: 'world', hey: 'ho' }

# and even append to json arrays (or create them automatically)
* set myJson.zee[0] = 5
* match myJson == { foo: 'world', hey: 'ho', zee: [5] }

# omit the array index to append
* set myJson.zee[] = 6
* match myJson == { foo: 'world', hey: 'ho', zee: [5, 6] }

# nested json ? no problem
* set myJson.cat = { name: 'Billie' }
* match myJson == { foo: 'world', hey: 'ho', zee: [5, 6], cat: { name: 'Billie' } }

# and for match - the order of keys does not matter
* match myJson == { cat: { name: 'Billie' }, hey: 'ho', foo: 'world', zee: [5, 6] }

# you can ignore fields marked with '#ignore'
* match myJson == { cat: '#ignore', hey: 'ho', foo: 'world', zee: [5, 6] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;XML and XPath works just like you'd expect.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def cat = &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;
* set cat /cat/name = 'Jean'
* match cat / == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Jean&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;

# you can even set whole fragments of xml
* def xml = &amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;baz&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;
* set xml/foo/bar = &amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;
* match xml == &amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;&amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the section on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#xpath-functions"&gt;XPath Functions&lt;/a&gt; for examples of advanced XPath usage.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;match&lt;/code&gt; and variables&lt;/h3&gt; 
&lt;p&gt;In case you were wondering, variables (and even expressions) are supported on the right-hand-side. So you can compare 2 JSON (or XML) payloads if you wanted to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = { hello: 'world', baz: 'ban' }
* def bar = { baz: 'ban', hello: 'world' }
* match foo == bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are wondering about the finer details of the &lt;code&gt;match&lt;/code&gt; syntax, the Left-Hand-Side has to be either a&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;variable name - e.g. &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;a 'named' JsonPath or XPath expression - e.g. &lt;code&gt;foo[0].bar&lt;/code&gt; or &lt;code&gt;foo[*].bar&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;note that this cannot be "dynamic" (with in-line variables) so &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#get"&gt;use an extra step&lt;/a&gt; if needed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;any valid function or method call - e.g. &lt;code&gt;foo.bar()&lt;/code&gt; or &lt;code&gt;foo.bar('hello').baz&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;or anything wrapped in parentheses which will be evaluated as JavaScript - e.g. &lt;code&gt;(foo + bar)&lt;/code&gt; or &lt;code&gt;(42)&lt;/code&gt; - and in &lt;em&gt;this&lt;/em&gt; case, variables can be used&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And the right-hand-side can be any valid &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;Karate expression&lt;/a&gt;. Refer to the section on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#jsonpath-short-cuts"&gt;JsonPath short-cuts&lt;/a&gt; for a deeper understanding of 'named' JsonPath expressions in Karate.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;match !=&lt;/code&gt; (not equals)&lt;/h3&gt; 
&lt;p&gt;The 'not equals' operator &lt;code&gt;!=&lt;/code&gt; works as you would expect:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def test = { foo: 'bar' }
* match test != { foo: 'baz' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You typically will &lt;em&gt;never&lt;/em&gt; need to use the &lt;code&gt;!=&lt;/code&gt; (not-equals) operator ! Use it sparingly, and only for string, number or simple payload comparisons.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;code&gt;set&lt;/code&gt; multiple&lt;/h3&gt; 
&lt;p&gt;Karate has an elegant way to set multiple keys (via path expressions) in one step. For convenience, non-existent keys (or array elements) will be created automatically. You can find more JSON examples here: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature"&gt;&lt;code&gt;js-arrays.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def cat = { name: '' }

* set cat
  | path   | value |
  | name   | 'Bob' |
  | age    | 5     |

* match cat == { name: 'Bob', age: 5 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One extra convenience for JSON is that if the variable itself (which was &lt;code&gt;cat&lt;/code&gt; in the above example) does not exist, it will be created automatically. You can even create (or modify existing) JSON arrays by using multiple columns.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* set foo
  | path | 0     | 1     |
  | bar  | 'baz' | 'ban' |

* match foo == [{ bar: 'baz' }, { bar: 'ban' }]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you have to set a bunch of deeply nested keys, you can move the parent path to the top, next to the &lt;code&gt;set&lt;/code&gt; keyword and save a lot of typing ! Note that this is not supported for "arrays" like above, and you can have only one &lt;code&gt;value&lt;/code&gt; column.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* set foo.bar
  | path   | value |
  | one    | 1     |
  | two[0] | 2     |
  | two[1] | 3     |

* match foo == { bar: { one: 1, two: [2, 3] } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The same concept applies to XML and you can build complicated payloads from scratch in just a few, extremely readable lines. The &lt;code&gt;value&lt;/code&gt; column can take expressions, &lt;em&gt;even&lt;/em&gt; XML chunks. You can find more examples here: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature"&gt;&lt;code&gt;xml.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* set search /acc:getAccountByPhoneNumber
  | path                        | value |
  | acc:phone/@foo              | 'bar' |
  | acc:phone/acc:number[1]     | 1234  |
  | acc:phone/acc:number[2]     | 5678  |     
  | acc:phoneNumberSearchOption | 'all' |

* match search ==
  """
  &amp;lt;acc:getAccountByPhoneNumber&amp;gt;
      &amp;lt;acc:phone foo="bar"&amp;gt;
          &amp;lt;acc:number&amp;gt;1234&amp;lt;/acc:number&amp;gt;
          &amp;lt;acc:number&amp;gt;5678&amp;lt;/acc:number&amp;gt;
      &amp;lt;/acc:phone&amp;gt;
      &amp;lt;acc:phoneNumberSearchOption&amp;gt;all&amp;lt;/acc:phoneNumberSearchOption&amp;gt;        
  &amp;lt;/acc:getAccountByPhoneNumber&amp;gt;
  """
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;This is like the opposite of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; if you need to remove keys or data elements from JSON or XML instances. You can even remove JSON array elements by index.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def json = { foo: 'world', hey: 'ho', zee: [1, 2, 3] }
* remove json.hey
* match json == { foo: 'world', zee: [1, 2, 3] }
* remove json $.zee[1]
* match json == { foo: 'world', zee: [1, 3] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; works for XML elements as well:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def xml = &amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;&amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;
* remove xml/foo/bar/hello
* match xml == &amp;lt;foo&amp;gt;&amp;lt;bar/&amp;gt;&amp;lt;/foo&amp;gt;
* remove xml /foo/bar
* match xml == &amp;lt;foo/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also take a look at how a special case of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;embedded-expressions&lt;/a&gt; can remove key-value pairs from a JSON (or XML) payload: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#remove-if-null"&gt;Remove if Null&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See also &lt;code&gt;delete&lt;/code&gt;, below.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;For JSON, you can also use the JS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete"&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator via &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;, useful when the path you are trying to mutate is dynamic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def key = 'a'
* def foo = { a: 1 }
* eval delete foo[key]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a convenience, you can omit the &lt;code&gt;eval&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* delete foo[key]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Fuzzy Matching&lt;/h2&gt; 
&lt;h3&gt;Ignore or Validate&lt;/h3&gt; 
&lt;p&gt;When expressing expected results (in JSON or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-and-xml"&gt;XML&lt;/a&gt;) you can mark some fields to be ignored when the match (comparison) is performed. You can even use a regular-expression so that instead of checking for equality, Karate will just validate that the actual value conforms to the expected pattern.&lt;/p&gt; 
&lt;p&gt;This means that even when you have dynamic server-side generated values such as UUID-s and time-stamps appearing in the response, you can still assert that the full-payload matched in one step.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def cat = { name: 'Billie', type: 'LOL', id: 'a9f7a56b-8d5c-455c-9d13-808461d17b91' }
* match cat == { name: '#ignore', type: '#regex [A-Z]{3}', id: '#uuid' }
# this will fail
# * match cat == { name: '#ignore', type: '#regex .{2}', id: '#uuid' }	
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that regex escaping has to be done with a &lt;em&gt;double&lt;/em&gt; back-slash - for e.g: &lt;code&gt;'#regex a\\.dot'&lt;/code&gt; will match &lt;code&gt;'a.dot'&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The supported markers are the following:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Marker&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#ignore&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Skip comparison for this field even if the data element or JSON key is present&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#null&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects actual value to be &lt;code&gt;null&lt;/code&gt;, and the data element or JSON key &lt;em&gt;must&lt;/em&gt; be present&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#notnull&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects actual value to be not-&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#present&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Actual value can be any type or &lt;em&gt;even&lt;/em&gt; &lt;code&gt;null&lt;/code&gt;, but the key &lt;em&gt;must&lt;/em&gt; be present (only for JSON / XML, see below)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#notpresent&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects the key to be &lt;strong&gt;not&lt;/strong&gt; present at all (only for JSON / XML, see below)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#array&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects actual value to be a JSON array&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#object&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects actual value to be a JSON object&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects actual value to be a boolean &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#number&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects actual value to be a number&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#string&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects actual value to be a string&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#uuid&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects actual (string) value to conform to the UUID format&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#regex STR&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects actual (string) value to match the regular-expression 'STR' (see examples above)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#? EXPR&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expects the JavaScript expression 'EXPR' to evaluate to true, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#self-validation-expressions"&gt;self-validation expressions&lt;/a&gt; below&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#[NUM] EXPR&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Advanced array validation, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#schema-validation"&gt;schema validation&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#(EXPR)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;For completeness, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;embedded expressions&lt;/a&gt; belong in this list as well&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Note that &lt;code&gt;#present&lt;/code&gt; and &lt;code&gt;#notpresent&lt;/code&gt; only make sense when you are matching within a JSON or XML context or using a JsonPath or XPath on the left-hand-side.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def json = { foo: 'bar' }
* match json == { foo: '#present' }
* match json.nope == '#notpresent'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The rest can also be used even in 'primitive' data matches like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* match foo == '#string'
# convenient (and recommended) way to check for array length
* match bar == '#[2]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Optional Fields&lt;/h3&gt; 
&lt;p&gt;If two cross-hatch &lt;code&gt;#&lt;/code&gt; symbols are used as the prefix (for example: &lt;code&gt;##number&lt;/code&gt;), it means that the key is optional or that the value can be null.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = { bar: 'baz' }
* match foo == { bar: '#string', ban: '##string' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remove If Null&lt;/h3&gt; 
&lt;p&gt;A very useful behavior when you combine the optional marker with an &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;embedded expression&lt;/a&gt; is as follows: if the embedded expression evaluates to &lt;code&gt;null&lt;/code&gt; - the JSON key (or XML element or attribute) will be deleted from the payload (the equivalent of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#remove"&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def data = { a: 'hello', b: null, c: null }
* def json = { foo: '#(data.a)', bar: '#(data.b)', baz: '##(data.c)' }
* match json == { foo: 'hello', bar: null }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are just trying to pre-define schema snippets to use in a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching"&gt;fuzzy-match&lt;/a&gt;, you can use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#enclosed-javascript"&gt;enclosed Javascript&lt;/a&gt; to suppress the default behavior of replacing placeholders. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def dogSchema = { id: '#string', color: '#string' }
# here we enclose in round-brackets to preserve the optional embedded expression
# so that it can be used later in a "match"
* def schema = ({ id: '#string', name: '#string', dog: '##(dogSchema)' })

* def response1 = { id: '123', name: 'foo' }
* match response1 == schema
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And if you need to suppress placeholder substitution for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt;, but still need a JSON snippet, you can do this. Note how we read as a string, but &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion"&gt;"cast" to JSON&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* json schema = karate.readAsString('schema.json')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to use the triple-quote / multi-line way of defining JSON or if you have to use XML - you can use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#text"&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; and "cast" to JSON or XML as a second step - before using in a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* text schema =
"""
&amp;lt;root&amp;gt;
  &amp;lt;a&amp;gt;#string&amp;lt;/a&amp;gt;
  &amp;lt;b&amp;gt;##(subSchema)&amp;lt;/b&amp;gt;
&amp;lt;/root&amp;gt;
"""
* xml schema = schema
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;#null&lt;/code&gt; and &lt;code&gt;#notpresent&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Karate's &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; is strict, and the case where a JSON key exists but has a &lt;code&gt;null&lt;/code&gt; value (&lt;code&gt;#null&lt;/code&gt;) is considered different from the case where the key is not present at all (&lt;code&gt;#notpresent&lt;/code&gt;) in the payload.&lt;/p&gt; 
&lt;p&gt;But note that &lt;code&gt;##null&lt;/code&gt; can be used to represent a convention that many teams adopt, which is that keys with &lt;code&gt;null&lt;/code&gt; values are stripped from the JSON payload. In other words, &lt;code&gt;{ a: 1, b: null }&lt;/code&gt; is considered 'equal' to &lt;code&gt;{ a: 1 }&lt;/code&gt; and &lt;code&gt;{ a: 1, b: '##null' }&lt;/code&gt; will &lt;code&gt;match&lt;/code&gt; both cases.&lt;/p&gt; 
&lt;p&gt;These examples (all exact matches) can make things more clear:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = { }
* match foo == { a: '##null' }
* match foo == { a: '##notnull' }
* match foo == { a: '#notpresent' }
* match foo == { a: '#ignore' }

* def foo = { a: null }
* match foo == { a: '#null' }    
* match foo == { a: '##null' }
* match foo == { a: '#present' }
* match foo == { a: '#ignore' }

* def foo = { a: 1 }
* match foo == { a: '#notnull' }
* match foo == { a: '##notnull' }
* match foo == { a: '#present' }
* match foo == { a: '#ignore' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you can alternatively use JsonPath on the left-hand-side:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = { a: 1 }
* match foo.a == '#present'
* match foo.nope == '#notpresent'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But of course it is preferable to match whole objects in one step as far as possible.&lt;/p&gt; 
&lt;h3&gt;'Self' Validation Expressions&lt;/h3&gt; 
&lt;p&gt;The special 'predicate' marker &lt;code&gt;#? EXPR&lt;/code&gt; in the table above is an interesting one. It is best explained via examples. Any valid JavaScript expression that evaluates to a &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy"&gt;Truthy&lt;/a&gt; or &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy"&gt;Falsy&lt;/a&gt; value is expected after the &lt;code&gt;#?&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Observe how the value of the field being validated (or 'self') is injected into the 'underscore' expression variable: '&lt;code&gt;_&lt;/code&gt;'&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def date = { month: 3 }
* match date == { month: '#? _ &amp;gt; 0 &amp;amp;&amp;amp; _ &amp;lt; 13' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;What is even more interesting is that expressions can refer to variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def date = { month: 3 }
* def min = 1
* def max = 12
* match date == { month: '#? _ &amp;gt;= min &amp;amp;&amp;amp; _ &amp;lt;= max' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And functions work as well ! You can imagine how you could evolve a nice set of utilities that validate all your domain objects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def date = { month: 3 }
* def isValidMonth = function(m) { return m &amp;gt;= 1 &amp;amp;&amp;amp; m &amp;lt;= 12 }
* match date == { month: '#? isValidMonth(_)' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Especially since strings can be easily coerced to numbers (and vice-versa) in Javascript, you can combine built-in validators with the self-validation 'predicate' form like this: &lt;code&gt;'#number? _ &amp;gt; 0'&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# given this invalid input (string instead of number)
* def date = { month: '3' }
# this will pass
* match date == { month: '#? _ &amp;gt; 0' }
# but this 'combined form' will fail, which is what we want
# * match date == { month: '#number? _ &amp;gt; 0' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Referring to the JSON root&lt;/h4&gt; 
&lt;p&gt;You can actually refer to any JsonPath on the document via &lt;code&gt;$&lt;/code&gt; and perform cross-field or conditional validations ! This example uses &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains"&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#self-validation-expressions"&gt;&lt;code&gt;#?&lt;/code&gt;&lt;/a&gt; 'predicate' syntax, and situations where this comes in useful will be apparent when we discuss &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-each"&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given def temperature = { celsius: 100, fahrenheit: 212 }
Then match temperature == { celsius: '#number', fahrenheit: '#? _ == $.celsius * 1.8 + 32' }
# when validation logic is an 'equality' check, an embedded expression works better
Then match temperature contains { fahrenheit: '#($.celsius * 1.8 + 32)' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;match&lt;/code&gt; text or binary&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# when the response is plain-text
Then match response == 'Health Check OK'
And match response != 'Error'

# when the response is binary (byte-array)
Then match responseBytes == read('test.pdf')

# incidentally, match and assert behave exactly the same way for strings
* def hello = 'Hello World!'
* match hello == 'Hello World!'
* assert hello == 'Hello World!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Checking if a string is contained within another string is a very common need and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains"&gt;&lt;code&gt;match&lt;/code&gt; (name) &lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; works just like you'd expect:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def hello = 'Hello World!'
* match hello contains 'World'
* match hello !contains 'blah'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For case-insensitive string comparisons, see how to create &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#commonly-needed-utilities"&gt;custom utilities&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-lowercase"&gt;&lt;code&gt;karate.lowerCase()&lt;/code&gt;&lt;/a&gt;. And for dealing with binary content - see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-bytes"&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;match header&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Since asserting against header values in the response is a common task - &lt;code&gt;match header&lt;/code&gt; has a special meaning. It short-cuts to the pre-defined variable &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders"&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; and reduces some complexity - because strictly, HTTP headers are a 'multi-valued map' or a 'map of lists' - the Java-speak equivalent being &lt;code&gt;Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt;. And since header names are case-insensitive - it ignores the case when finding the header to match.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# so after a http request
Then match header Content-Type == 'application/json'
# 'contains' works as well
Then match header Content-Type contains 'application'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note the extra convenience where you don't have to enclose the LHS key in quotes.&lt;/p&gt; 
&lt;p&gt;You can always directly access the variable called &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responseheaders"&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/a&gt; if you wanted to do more checks, but you typically won't need to.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;match&lt;/code&gt; and XML&lt;/h3&gt; 
&lt;p&gt;All the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#fuzzy-matching"&gt;fuzzy matching&lt;/a&gt; markers will work in XML as well. Here are some examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;  * def xml = &amp;lt;root&amp;gt;&amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;foo&amp;gt;bar&amp;lt;/foo&amp;gt;&amp;lt;/root&amp;gt;
  * match xml == &amp;lt;root&amp;gt;&amp;lt;hello&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;foo&amp;gt;#ignore&amp;lt;/foo&amp;gt;&amp;lt;/root&amp;gt;
  * def xml = &amp;lt;root&amp;gt;&amp;lt;hello foo="bar"&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;/root&amp;gt;
  * match xml == &amp;lt;root&amp;gt;&amp;lt;hello foo="#ignore"&amp;gt;world&amp;lt;/hello&amp;gt;&amp;lt;/root&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to this file for a comprehensive set of XML examples: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature"&gt;&lt;code&gt;xml.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Matching Sub-Sets of JSON Keys and Arrays&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;match contains&lt;/code&gt;&lt;/h3&gt; 
&lt;h4&gt;JSON Keys&lt;/h4&gt; 
&lt;p&gt;In some cases where the response JSON is wildly dynamic, you may want to only check for the existence of some keys. And &lt;code&gt;match&lt;/code&gt; (name) &lt;code&gt;contains&lt;/code&gt; is how you can do so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = { bar: 1, baz: 'hello', ban: 'world' }

* match foo contains { bar: 1 }
* match foo contains { baz: 'hello' }
* match foo contains { bar:1, baz: 'hello' }
# this will fail
# * match foo == { bar:1, baz: 'hello' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;match contains&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; "recurse" any nested JSON chunks so use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-deep"&gt;&lt;code&gt;match contains deep&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt; 
&lt;p&gt;Also note that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-any"&gt;&lt;code&gt;match contains any&lt;/code&gt;&lt;/a&gt; is possible for JSON objects as well as &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#json-arrays"&gt;JSON arrays&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;(not) &lt;code&gt;!contains&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;It is sometimes useful to be able to check if a key-value-pair does &lt;strong&gt;not&lt;/strong&gt; exist. This is possible by prefixing &lt;code&gt;contains&lt;/code&gt; with a &lt;code&gt;!&lt;/code&gt; (with no space in between).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = { bar: 1, baz: 'hello', ban: 'world' }
* match foo !contains { bar: 2 }
* match foo !contains { huh: '#notnull' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here's a reminder that the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#null-and-notpresent"&gt;&lt;code&gt;#notpresent&lt;/code&gt;&lt;/a&gt; marker can be mixed into an equality &lt;code&gt;match&lt;/code&gt; (&lt;code&gt;==&lt;/code&gt;) to assert that some keys exist and at the same time ensure that some keys do &lt;strong&gt;not&lt;/strong&gt; exist:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = { a: 1 }
* match foo == { a: '#number', b: '#notpresent' }

# if b can be present (optional) but should always be null
* match foo == { a: '#number', b: '##null' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;!&lt;/code&gt; (not) operator is especially useful for &lt;code&gt;contains&lt;/code&gt; and JSON arrays.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = [1, 2, 3]
* match foo !contains 4
* match foo !contains [5, 6]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;JSON Arrays&lt;/h4&gt; 
&lt;p&gt;This is a good time to deep-dive into JsonPath, which is perfect for slicing and dicing JSON into manageable chunks. It is worth taking a few minutes to go through the documentation and examples here: &lt;a href="https://github.com/jayway/JsonPath#path-examples"&gt;JsonPath Examples&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here are some example assertions performed while scraping a list of child elements out of the JSON below. Observe how you can &lt;code&gt;match&lt;/code&gt; the result of a JsonPath expression with your expected data.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given def cat = 
  """
  {
    name: 'Billie',
    kittens: [
      { id: 23, name: 'Bob' },
      { id: 42, name: 'Wild' }
    ]
  }
  """
# normal 'equality' match. note the wildcard '*' in the JsonPath (returns an array)
Then match cat.kittens[*].id == [23, 42]

# when inspecting a json array, 'contains' just checks if the expected items exist
# and the size and order of the actual array does not matter
Then match cat.kittens[*].id contains 23
Then match cat.kittens[*].id contains [42]
Then match cat.kittens[*].id contains [23, 42]
Then match cat.kittens[*].id contains [42, 23]

# the .. operator is great because it matches nodes at any depth in the JSON "tree"
Then match cat..name == ['Billie', 'Bob', 'Wild']

# and yes, you can assert against nested objects within JSON arrays !
Then match cat.kittens contains [{ id: 42, name: 'Wild' }, { id: 23, name: 'Bob' }]

# ... and even ignore fields at the same time !
Then match cat.kittens contains { id: 42, name: '#string' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is worth mentioning that to do the equivalent of the last line in Java, you would typically have to traverse 2 Java Objects, one of which is within a list, and you would have to check for nulls as well.&lt;/p&gt; 
&lt;p&gt;When you use Karate, all your data assertions can be done in pure JSON and without needing a thick forest of companion Java objects. And when you &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#read"&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; your JSON objects from (re-usable) files, even complex response payload assertions can be accomplished in just a single line of Karate-script.&lt;/p&gt; 
&lt;p&gt;Refer to this &lt;a href="https://twitter.com/KarateDSL/status/873035687817117696"&gt;case study&lt;/a&gt; for how dramatic the reduction of lines of code can be.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;match contains only&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;For those cases where you need to assert that &lt;strong&gt;all&lt;/strong&gt; array elements are present but in &lt;strong&gt;any order&lt;/strong&gt; you can do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def data = { foo: [1, 2, 3] }
* match data.foo contains 1
* match data.foo contains [2]
* match data.foo contains [3, 2]
* match data.foo contains only [3, 2, 1]
* match data.foo contains only [2, 3, 1]
# this will fail
# * match data.foo contains only [2, 3]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;match contains any&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;To assert that &lt;strong&gt;any&lt;/strong&gt; of the given array elements are present.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def data = { foo: [1, 2, 3] }
* match data.foo contains any [9, 2, 8]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And this happens to work as expected for JSON object keys as well:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def data = { a: 1, b: 'x' }
* match data contains any { b: 'x', c: true }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;match contains deep&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This modifies the behavior of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains"&gt;&lt;code&gt;match contains&lt;/code&gt;&lt;/a&gt; so that nested lists or objects are processed for a "deep contains" match instead of a "deep equals" one which is the default. This is convenient for complex nested payloads where you are sure that you only want to check for &lt;em&gt;some&lt;/em&gt; values in the various "trees" of data.&lt;/p&gt; 
&lt;p&gt;Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Scenario: recurse nested json
  * def original = { a: 1, b: 2, c: 3, d: { a: 1, b: 2 } }
  * def expected = { a: 1, c: 3, d: { b: 2 } }
  * match original contains deep expected

Scenario: recurse nested array
  * def original = { a: 1, arr: [ { b: 2, c: 3 }, { b: 3, c: 4 } ] }
  * def expected = { a: 1, arr: [ { b: 2 }, { c: 4 } ] }
  * match original contains deep expected
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;the NOT operator e.g. &lt;code&gt;!contains deep&lt;/code&gt; is not yet supported, please contribute code if you can.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;code&gt;match contains only deep&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is exactly like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match ==&lt;/code&gt;&lt;/a&gt; but the order of arrays does not matter. All arrays no matter the "depth" will be checked in this way.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def response = { foo: [ 'a', 'b' ] }
* match response contains only deep { foo: [ 'b', 'a' ] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Validate every element in a JSON array&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;match&lt;/code&gt; keyword can be made to iterate over all elements in a JSON array using the &lt;code&gt;each&lt;/code&gt; modifier. Here's how it works:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def data = { foo: [{ bar: 1, baz: 'a' }, { bar: 2, baz: 'b' }, { bar: 3, baz: 'c' }]}

* match each data.foo == { bar: '#number', baz: '#string' }

# and you can use 'contains' the way you'd expect
* match each data.foo contains { bar: '#number' }
* match each data.foo contains { bar: '#? _ != 4' }

# some more examples of validation macros
* match each data.foo contains { baz: "#? _ != 'z'" }
* def isAbc = function(x) { return x == 'a' || x == 'b' || x == 'c' }
* match each data.foo contains { baz: '#? isAbc(_)' }

# this is also possible, see the subtle difference from the above
* def isXabc = function(x) { return x.baz == 'a' || x.baz == 'b' || x.baz == 'c' }
* match each data.foo == '#? isXabc(_)'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here is a contrived example that uses &lt;code&gt;match each&lt;/code&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains"&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#self-validation-expressions"&gt;&lt;code&gt;#?&lt;/code&gt;&lt;/a&gt; 'predicate' marker to validate that the value of &lt;code&gt;totalPrice&lt;/code&gt; is always equal to the &lt;code&gt;roomPrice&lt;/code&gt; of the first item in the &lt;code&gt;roomInformation&lt;/code&gt; array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Given def json =
  """
  {
    "hotels": [
      { "roomInformation": [{ "roomPrice": 618.4 }], "totalPrice": 618.4  },
      { "roomInformation": [{ "roomPrice": 679.79}], "totalPrice": 679.79 }
    ]
  }
  """
Then match each json.hotels contains { totalPrice: '#? _ == _$.roomInformation[0].roomPrice' }
# when validation logic is an 'equality' check, an embedded expression works better
Then match each json.hotels contains { totalPrice: '#(_$.roomInformation[0].roomPrice)' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Referring to self&lt;/h4&gt; 
&lt;p&gt;While &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root"&gt;&lt;code&gt;$&lt;/code&gt;&lt;/a&gt; always refers to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root"&gt;JSON 'root'&lt;/a&gt;, note the use of &lt;code&gt;_$&lt;/code&gt; above to represent the 'current' node of a &lt;code&gt;match each&lt;/code&gt; iteration. Here is a recap of symbols that can be used in JSON &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;embedded expressions&lt;/a&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Symbol&lt;/th&gt; 
   &lt;th&gt;Evaluates To&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;The &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root"&gt;'root'&lt;/a&gt; of the JSON document in scope&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;The value of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#self-validation-expressions"&gt;'self'&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;_$&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;The 'parent' of 'self' or 'current' item in the list, relevant when using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-each"&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;There is a shortcut for &lt;code&gt;match each&lt;/code&gt; explained in the next section that can be quite useful, especially for 'in-line' schema-like validations.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;match each contains deep&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;match each&lt;/code&gt; can be combined with &lt;code&gt;contains deep&lt;/code&gt; so that for each JSON object a “deep contains” match is performed within nested lists or objects.&lt;/p&gt; 
&lt;p&gt;This is useful for testing payloads with JSON arrays whose members have a few essential keys that you wish to validate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;  Given def response = 
  """
  [
    {
      "a": 1,
      "arr": [
          {
              "b": 2,
              "c": 3
          }
      ]
    },
    {
      "a": 1,
      "arr": [
          {
              "b": 2,
              "c": 3
          },
          {
              "b": 4,
              "c": 5
          }
      ]
    }
  ]
  """
  Then match each response contains deep { a: 1, arr: [ { b: 2 } ] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Schema Validation&lt;/h2&gt; 
&lt;p&gt;Karate provides a far more simpler and more powerful way than &lt;a href="http://json-schema.org"&gt;JSON-schema&lt;/a&gt; to validate the structure of a given payload. You can even mix domain and conditional validations and perform all assertions in a single step.&lt;/p&gt; 
&lt;p&gt;But first, a special short-cut for array validation needs to be introduced:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo = ['bar', 'baz']

# should be an array
* match foo == '#[]'

# should be an array of size 2
* match foo == '#[2]'

# should be an array of strings with size 2
* match foo == '#[2] #string'

# each array element should have a 'length' property with value 3
* match foo == '#[]? _.length == 3'

# should be an array of strings each of length 3
* match foo == '#[] #string? _.length == 3'

# should be null or an array of strings
* match foo == '##[] #string'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This 'in-line' short-cut for validating JSON arrays is similar to how &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-each"&gt;&lt;code&gt;match each&lt;/code&gt;&lt;/a&gt; works. So now, complex payloads (that include arrays) can easily be validated in one step by combining &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#ignore-or-validate"&gt;validation markers&lt;/a&gt; like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def oddSchema = { price: '#string', status: '#? _ &amp;lt; 3', ck: '##number', name: '#regex[0-9X]' }
* def isValidTime = read('time-validator.js')
When method get
Then match response ==
  """
  { 
    id: '#regex[0-9]+',
    count: '#number',
    odd: '#(oddSchema)',
    data: { 
      countryId: '#number', 
      countryName: '#string', 
      leagueName: '##string', 
      status: '#number? _ &amp;gt;= 0', 
      sportName: '#string',
      time: '#? isValidTime(_)'
    },
    odds: '#[] oddSchema'  
  }
  """
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Especially note the re-use of the &lt;code&gt;oddSchema&lt;/code&gt; both as an &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;embedded-expression&lt;/a&gt; and as an array validation (on the last line).&lt;/p&gt; 
&lt;p&gt;And you can perform conditional / &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#referring-to-the-json-root"&gt;cross-field validations&lt;/a&gt; and even business-logic validations at the same time.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# optional (can be null) and if present should be an array of size greater than zero
* match $.odds == '##[_ &amp;gt; 0]'

# should be an array of size equal to $.count
* match $.odds == '#[$.count]'

# use a predicate function to validate each array element
* def isValidOdd = function(o){ return o.name.length == 1 }
* match $.odds == '#[]? isValidOdd(_)'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to this for the complete example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/schema-like.feature"&gt;&lt;code&gt;schema-like.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;And there is another example in the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;karate-demos&lt;/a&gt;: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/schema/schema.feature"&gt;&lt;code&gt;schema.feature&lt;/code&gt;&lt;/a&gt; where you can compare Karate's approach with an actual JSON-schema example. You can also find a nice visual comparison and explanation &lt;a href="https://twitter.com/KarateDSL/status/878984854012022784"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;contains&lt;/code&gt; short-cuts&lt;/h3&gt; 
&lt;p&gt;Especially when payloads are complex (or highly dynamic), it may be more practical to use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains"&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; semantics. Karate has the following short-cut symbols designed to be mixed into &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;&lt;code&gt;embedded expressions&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Symbol&lt;/th&gt; 
   &lt;th&gt;Means&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains"&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;^^&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-only"&gt;&lt;code&gt;contains only&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;^*&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-any"&gt;&lt;code&gt;contains any&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;^+&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-contains-deep"&gt;&lt;code&gt;contains deep&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;!^&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#not-contains"&gt;&lt;code&gt;not contains&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;For completeness, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match--not-equals"&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/a&gt; also belong in the above list.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Here'a table of the alternative 'in-line' forms compared with the 'standard' form. Note that &lt;em&gt;all&lt;/em&gt; the short-cut forms on the right-side of the table resolve to 'equality' (&lt;code&gt;==&lt;/code&gt;) matches, which enables them to be 'in-lined' into a &lt;em&gt;full&lt;/em&gt; (single-step) payload &lt;code&gt;match&lt;/code&gt;, using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;embedded expressions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://gist.github.com/ptrthomas/2a1e30bcb4d782279019b3d5c10b3ed1"&gt;&lt;img src="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/resources/karate-json-assertions.jpg" height="690px" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A very useful capability is to be able to check that an array &lt;code&gt;contains&lt;/code&gt; an object that &lt;code&gt;contains&lt;/code&gt; the provided &lt;em&gt;sub-set&lt;/em&gt; of keys instead of having to specify the &lt;em&gt;complete&lt;/em&gt; JSON - which can get really cumbersome for large objects. This turns out to be very useful in practice, and this particular &lt;code&gt;match&lt;/code&gt; &lt;em&gt;jsonArray&lt;/em&gt; &lt;code&gt;contains '#(^&lt;/code&gt;&lt;em&gt;partialObject&lt;/em&gt;&lt;code&gt;)'&lt;/code&gt; form has no 'in-line' equivalent (see the third-from-last row above).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The last row in the table is a little different from the rest, and this short-cut form is the recommended way to validate the length of a JSON array. As a rule of thumb, prefer &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; over &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;, because &lt;code&gt;match&lt;/code&gt; failure messages are more detailed and descriptive.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;In real-life tests, these are very useful when the order of items in arrays returned from the server are not guaranteed. You can easily assert that all expected elements are present, &lt;em&gt;even&lt;/em&gt; in nested parts of your JSON - while doing a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; on the &lt;em&gt;full&lt;/em&gt; payload.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def cat = 
  """
  {
    name: 'Billie',
    kittens: [
      { id: 23, name: 'Bob' },
      { id: 42, name: 'Wild' }
    ]
  }
  """
* def expected = [{ id: 42, name: 'Wild' }, { id: 23, name: 'Bob' }]
* match cat == { name: 'Billie', kittens: '#(^^expected)' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There's a lot going on in the last line above ! It validates the entire payload in one step and checks if the &lt;code&gt;kittens&lt;/code&gt; array &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#contains-short-cuts"&gt;&lt;em&gt;&lt;strong&gt;contains all&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; the &lt;code&gt;expected&lt;/code&gt; items but in &lt;em&gt;&lt;strong&gt;any order&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;get&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;By now, it should be clear that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/(https://github.com/jayway/JsonPath#path-examples)"&gt;JsonPath&lt;/a&gt; can be very useful for extracting JSON 'trees' out of a given object. The &lt;code&gt;get&lt;/code&gt; keyword allows you to save the results of a JsonPath expression for later use - which is especially useful for dynamic &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features"&gt;data-driven testing&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def cat = 
  """
  {
    name: 'Billie',
    kittens: [
      { id: 23, name: 'Bob' },
      { id: 42, name: 'Wild' }
    ]
  }
  """
* def kitnums = get cat.kittens[*].id
* match kitnums == [23, 42]
* def kitnames = get cat $.kittens[*].name
* match kitnames == ['Bob', 'Wild']
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;get&lt;/code&gt; short-cut&lt;/h3&gt; 
&lt;p&gt;The 'short cut' &lt;code&gt;$variableName&lt;/code&gt; form is also supported. Refer to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#jsonpath-short-cuts"&gt;JsonPath short-cuts&lt;/a&gt; for a detailed explanation. So the above could be re-written as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def kitnums = $cat.kittens[*].id
* match kitnums == [23, 42]
* def kitnames = $cat.kittens[*].name
* match kitnames == ['Bob', 'Wild']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is worth repeating that the above can be condensed into 2 lines. Note that since &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-and-variables"&gt;only JsonPath is expected&lt;/a&gt; on the left-hand-side of the &lt;code&gt;==&lt;/code&gt; sign of a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statement, you don't need to prefix the variable reference with &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* match cat.kittens[*].id == [23, 42]
* match cat.kittens[*].name == ['Bob', 'Wild']

# if you prefer using 'pure' JsonPath, you can do this
* match cat $.kittens[*].id == [23, 42]
* match cat $.kittens[*].name == ['Bob', 'Wild']
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;get&lt;/code&gt; plus index&lt;/h3&gt; 
&lt;p&gt;A convenience that the &lt;code&gt;get&lt;/code&gt; syntax supports (but not the &lt;code&gt;$&lt;/code&gt; short-cut form) is to return a single element if the right-hand-side evaluates to a list-like result (e.g. a JSON array). This is useful because the moment you use a wildcard &lt;code&gt;[*]&lt;/code&gt; or search filter in JsonPath (see the next section), you get an &lt;em&gt;array&lt;/em&gt; back - even though typically you would only be interested in the &lt;em&gt;first&lt;/em&gt; item.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def actual = 23

# so instead of this
* def kitnums = get cat.kittens[*].id
* match actual == kitnums[0]

# you can do this in one line
* match actual == get[0] cat.kittens[*].id
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;JsonPath filters&lt;/h3&gt; 
&lt;p&gt;JsonPath &lt;a href="https://github.com/json-path/JsonPath#filter-operators"&gt;filter expressions&lt;/a&gt; are very useful for extracting elements that meet some filter criteria out of arrays.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def cat = 
  """
  {
    name: 'Billie',
    kittens: [
      { id: 23, name: 'Bob' },
      { id: 42, name: 'Wild' }
    ]
  }
  """
# find single kitten where id == 23
* def bob = get[0] cat.kittens[?(@.id==23)]
* match bob.name == 'Bob'

# using the karate object if the expression is dynamic
* def temp = karate.jsonPath(cat, "$.kittens[?(@.name=='" + bob.name + "')]")
* match temp[0] == bob

# or alternatively
* def temp = karate.jsonPath(cat, "$.kittens[?(@.name=='" + bob.name + "')]")[0]
* match temp == bob
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You usually won't need this, but the second-last line above shows how the &lt;code&gt;karate&lt;/code&gt; object can be used to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-jsonpath"&gt;evaluate JsonPath&lt;/a&gt; if the filter expression depends on a variable. If you find yourself struggling to write &lt;a href="https://stackoverflow.com/a/52741196/143475"&gt;dynamic JsonPath filters&lt;/a&gt;, look at &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-filter"&gt;&lt;code&gt;karate.filter()&lt;/code&gt;&lt;/a&gt; as an alternative, described just below.&lt;/p&gt; 
&lt;h2&gt;JSON Transforms&lt;/h2&gt; 
&lt;p&gt;Karate supports the following &lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;functional-style&lt;/a&gt; operations via the JS API - &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-map"&gt;&lt;code&gt;karate.map()&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-filter"&gt;&lt;code&gt;karate.filter()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-foreach"&gt;&lt;code&gt;karate.forEach()&lt;/code&gt;&lt;/a&gt;. They can be very useful in some situations. A &lt;a href="https://stackoverflow.com/a/53120851/143475"&gt;good example&lt;/a&gt; is when you have the &lt;em&gt;expected&lt;/em&gt; data available as ready-made JSON but it is in a different "shape" from the &lt;em&gt;actual&lt;/em&gt; data or HTTP &lt;code&gt;response&lt;/code&gt;. There is also a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-mapwithkey"&gt;&lt;code&gt;karate.mapWithKey()&lt;/code&gt;&lt;/a&gt; for a common need - which is to convert an array of primitives into an array of objects, which is the form that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features"&gt;data driven features&lt;/a&gt; expect.&lt;/p&gt; 
&lt;p&gt;The Graal JS engine that Karate uses supports the full ES6 spec, which means that JSON variables are first-class JS objects, and arrays can be &lt;em&gt;directly&lt;/em&gt; looped over or manipulated using &lt;a href="https://stackoverflow.com/a/76091034/143475"&gt;&lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt;. And JS "arrow functions" are supported, which makes code much more concise.&lt;/p&gt; 
&lt;p&gt;A few more useful "transforms" are to select a sub-set of key-value pairs using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-filterkeys"&gt;&lt;code&gt;karate.filterKeys()&lt;/code&gt;&lt;/a&gt;, merging 2 or more JSON-s using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-merge"&gt;&lt;code&gt;karate.merge()&lt;/code&gt;&lt;/a&gt; and combining 2 or more arrays (or objects) into a single array using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-append"&gt;&lt;code&gt;karate.append()&lt;/code&gt;&lt;/a&gt;. And &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-appendto"&gt;&lt;code&gt;karate.appendTo()&lt;/code&gt;&lt;/a&gt; is for updating an existing variable (the equivalent of &lt;code&gt;array.push()&lt;/code&gt; in JavaScript), which is especially useful in the body of a &lt;code&gt;karate.forEach()&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also sort arrays of arbitrary JSON using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-sort"&gt;&lt;code&gt;karate.sort()&lt;/code&gt;&lt;/a&gt;. Simple arrays of strings or numbers can be stripped of duplicates using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-distinct"&gt;&lt;code&gt;karate.distinct()&lt;/code&gt;&lt;/a&gt;. All JS "native" array operations can be used, such as &lt;code&gt;someName.reverse()&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that a single JS function is sufficient to transform a given JSON object into a completely new one, and you can use complex conditional logic if needed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Scenario: karate map operation
    * def fun = function(x){ return x * x }
    * def list = [1, 2, 3]
    * def res = karate.map(list, fun)
    * match res == [1, 4, 9]

Scenario: js style map operation
    * def list = [1, 2, 3]
    * def res = list.map(list, x =&amp;gt; x * x)
    * match res == [1, 4, 9]

Scenario: convert an array into a different shape
    * def before = [{ foo: 1 }, { foo: 2 }, { foo: 3 }]
    * def fun = function(x){ return { bar: x.foo } }
    * def after = karate.map(before, fun)
    * match after == [{ bar: 1 }, { bar: 2 }, { bar: 3 }]

Scenario: convert array of primitives into array of objects
    * def list = [ 'Bob', 'Wild', 'Nyan' ]
    * def data = karate.mapWithKey(list, 'name')
    * match data == [{ name: 'Bob' }, { name: 'Wild' }, { name: 'Nyan' }]

Scenario: karate filter operation
    * def fun = function(x){ return x % 2 == 0 }
    * def list = [1, 2, 3, 4]
    * def res = karate.filter(list, fun)
    * match res == [2, 4]

Scenario: js style filter operation
    * def list = [1, 2, 3, 4]
    * def res = list.filter(list, x =&amp;gt; x % 2 == 0)
    * match res == [2, 4]    

Scenario: karate.forEach() works even on object key-values, not just arrays
    * def keys = []
    * def vals = []
    * def idxs = []
    * def fun = 
    """
    function(x, y, i) { 
      karate.appendTo(keys, x); 
      karate.appendTo(vals, y); 
      karate.appendTo(idxs, i); 
    }
    """
    * def map = { a: 2, b: 4, c: 6 }
    * karate.forEach(map, fun)
    * match keys == ['a', 'b', 'c']
    * match vals == [2, 4, 6]
    * match idxs == [0, 1, 2]

Scenario: filterKeys
    * def schema = { a: '#string', b: '#number', c: '#boolean' }
    * def response = { a: 'x', c: true }
    # very useful for validating a response against a schema "super-set"
    * match response == karate.filterKeys(schema, response)
    * match karate.filterKeys(response, 'b', 'c') == { c: true }
    * match karate.filterKeys(response, ['a', 'b']) == { a: 'x' }

Scenario: merge
    * def foo = { a: 1 }
    * def bar = karate.merge(foo, { b: 2 })
    * match bar == { a: 1, b: 2 }

Scenario: append
    * def foo = [{ a: 1 }]
    * def bar = karate.append(foo, { b: 2 })
    * match bar == [{ a: 1 }, { b: 2 }]

Scenario: sort
    * def foo = [{a: { b: 3 }}, {a: { b: 1 }}, {a: { b: 2 }}]
    * def fun = function(x){ return x.a.b }
    * def bar = karate.sort(foo, fun)
    * match bar == [{a: { b: 1 }}, {a: { b: 2 }}, {a: { b: 3 }}]
    * match bar.reverse() == [{a: { b: 3 }}, {a: { b: 2 }}, {a: { b: 1 }}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Loops&lt;/h3&gt; 
&lt;p&gt;Given the examples above, it has to be said that a best practice with Karate is to avoid JavaScript &lt;code&gt;for&lt;/code&gt; loops as far as possible. A common requirement is to build an array with &lt;code&gt;n&lt;/code&gt; elements or do something &lt;code&gt;n&lt;/code&gt; times where &lt;code&gt;n&lt;/code&gt; is an integer (that could even be a variable reference). This is easily achieved with the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-repeat"&gt;&lt;code&gt;karate.repeat()&lt;/code&gt;&lt;/a&gt; API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def fun = function(i){ return i * 2 }
* def foo = karate.repeat(5, fun)
* match foo == [0, 2, 4, 6, 8]

* def foo = []
* def fun = function(i){ karate.appendTo(foo, i) }
* karate.repeat(5, fun)
* match foo == [0, 1, 2, 3, 4]

# generate test data easily
* def fun = function(i){ return { name: 'User ' + (i + 1) } }
* def foo = karate.repeat(3, fun)
* match foo == [{ name: 'User 1' }, { name: 'User 2' }, { name: 'User 3' }]

# generate a range of numbers as a json array
* def foo = karate.range(4, 9)
* match foo == [4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And there's also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-range"&gt;&lt;code&gt;karate.range()&lt;/code&gt;&lt;/a&gt; which can be useful to generate test-data.&lt;/p&gt; 
&lt;p&gt;Don't forget that Karate's &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests"&gt;data-driven testing capabilities&lt;/a&gt; can loop over arrays of JSON objects automatically.&lt;/p&gt; 
&lt;h2&gt;XPath Functions&lt;/h2&gt; 
&lt;p&gt;When handling XML, you sometimes need to call &lt;a href="https://docs.oracle.com/javase/tutorial/jaxp/xslt/xpath.html"&gt;XPath functions&lt;/a&gt;, for example to get the count of a node-set. Any valid XPath expression is allowed on the left-hand-side of a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statement.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def foo =
  """
  &amp;lt;records&amp;gt;
    &amp;lt;record index="1"&amp;gt;a&amp;lt;/record&amp;gt;
    &amp;lt;record index="2"&amp;gt;b&amp;lt;/record&amp;gt;
    &amp;lt;record index="3" foo="bar"&amp;gt;c&amp;lt;/record&amp;gt;
  &amp;lt;/records&amp;gt;
  """

* match foo count(/records//record) == 3
* match foo //record[@index=2] == 'b'
* match foo //record[@foo='bar'] == 'c'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Advanced XPath&lt;/h3&gt; 
&lt;p&gt;Some XPath expressions return a list of nodes (instead of a single node). But since you can express a list of data-elements as a JSON array - even these XPath expressions can be used in &lt;code&gt;match&lt;/code&gt; statements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def teachers = 
  """
  &amp;lt;teachers&amp;gt;
    &amp;lt;teacher department="science"&amp;gt;
      &amp;lt;subject&amp;gt;math&amp;lt;/subject&amp;gt;
      &amp;lt;subject&amp;gt;physics&amp;lt;/subject&amp;gt;
    &amp;lt;/teacher&amp;gt;
    &amp;lt;teacher department="arts"&amp;gt;
      &amp;lt;subject&amp;gt;political education&amp;lt;/subject&amp;gt;
      &amp;lt;subject&amp;gt;english&amp;lt;/subject&amp;gt;
    &amp;lt;/teacher&amp;gt;
  &amp;lt;/teachers&amp;gt;
  """
* match teachers //teacher[@department='science']/subject == ['math', 'physics']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your XPath is dynamic and has to be formed 'on the fly' perhaps by using some variable derived from previous steps, you can use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-xmlpath"&gt;&lt;code&gt;karate.xmlPath()&lt;/code&gt;&lt;/a&gt; helper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def xml = &amp;lt;query&amp;gt;&amp;lt;name&amp;gt;&amp;lt;foo&amp;gt;bar&amp;lt;/foo&amp;gt;&amp;lt;/name&amp;gt;&amp;lt;/query&amp;gt;
* def elementName = 'name'
* def name = karate.xmlPath(xml, '/query/' + elementName + '/foo')
* match name == 'bar'
* def queryName = karate.xmlPath(xml, '/query/' + elementName)
* match queryName == &amp;lt;name&amp;gt;&amp;lt;foo&amp;gt;bar&amp;lt;/foo&amp;gt;&amp;lt;/name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can refer to this file (which is part of the Karate test-suite) for more XML examples: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml-and-xpath.feature"&gt;&lt;code&gt;xml-and-xpath.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Special Variables&lt;/h1&gt; 
&lt;p&gt;These are 'built-in' variables, there are only a few and all of them give you access to the HTTP response.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;response&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;After every HTTP call this variable is set with the response body, and is available until the next HTTP request over-writes it. You can easily assign the whole &lt;code&gt;response&lt;/code&gt; (or just parts of it using Json-Path or XPath) to a variable, and use it in later steps.&lt;/p&gt; 
&lt;p&gt;The response is automatically available as a JSON, XML or String object depending on what the response contents are.&lt;/p&gt; 
&lt;p&gt;As a short-cut, when running JsonPath expressions - &lt;code&gt;$&lt;/code&gt; represents the &lt;code&gt;response&lt;/code&gt;. This has the advantage that you can use pure &lt;a href="https://github.com/jayway/JsonPath#path-examples"&gt;JsonPath&lt;/a&gt; and be more concise. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# the three lines below are equivalent
Then match response $ == { name: 'Billie' }
Then match response == { name: 'Billie' }
Then match $ == { name: 'Billie' }

# the three lines below are equivalent
Then match response.name == 'Billie'
Then match response $.name == 'Billie'
Then match $.name == 'Billie'

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And similarly for XML and XPath, '/' represents the &lt;code&gt;response&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# the four lines below are equivalent
Then match response / == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;
Then match response/ == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;
Then match response == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt;
Then match / == &amp;lt;cat&amp;gt;&amp;lt;name&amp;gt;Billie&amp;lt;/name&amp;gt;&amp;lt;/cat&amp;gt; 

# the three lines below are equivalent
Then match response /cat/name == 'Billie'
Then match response/cat/name == 'Billie'
Then match /cat/name == 'Billie'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;JsonPath short-cuts&lt;/h4&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#get-short-cut"&gt;&lt;code&gt;$varName&lt;/code&gt; form&lt;/a&gt; is used on the right-hand-side of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;Karate expressions&lt;/a&gt; and is &lt;em&gt;slightly&lt;/em&gt; different from pure &lt;a href="https://github.com/json-path/JsonPath#path-examples"&gt;JsonPath expressions&lt;/a&gt; which always begin with &lt;code&gt;$.&lt;/code&gt; or &lt;code&gt;$[&lt;/code&gt;. Here is a summary of what the different 'shapes' mean in Karate:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Shape&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$.bar&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pure JsonPath equivalent of &lt;code&gt;$response.bar&lt;/code&gt; where &lt;code&gt;response&lt;/code&gt; is a JSON object&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$[0]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pure JsonPath equivalent of &lt;code&gt;$response[0]&lt;/code&gt; where &lt;code&gt;response&lt;/code&gt; is a JSON array&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$foo.bar&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Evaluates the JsonPath &lt;code&gt;$.bar&lt;/code&gt; on the variable &lt;code&gt;foo&lt;/code&gt; which is a JSON object or map-like&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$foo[0]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Evaluates the JsonPath &lt;code&gt;$[0]&lt;/code&gt; on the variable &lt;code&gt;foo&lt;/code&gt; which is a JSON array or list-like&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;There is no need to prefix variable names with &lt;code&gt;$&lt;/code&gt; on the left-hand-side of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statements because it is implied. You &lt;em&gt;can&lt;/em&gt; if you want to, but since &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-and-variables"&gt;&lt;em&gt;only&lt;/em&gt; JsonPath (on variables)&lt;/a&gt; is allowed here, Karate ignores the &lt;code&gt;$&lt;/code&gt; and looks only at the variable name. None of the examples in the documentation use the &lt;code&gt;$varName&lt;/code&gt; form on the LHS, and this is the recommended best-practice.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;code&gt;responseBytes&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;This will always hold the contents of the response as a byte-array. This is rarely used, unless you are expecting binary content returned by the server. The &lt;code&gt;match&lt;/code&gt; keyword will &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-text-or-binary"&gt;work as you expect&lt;/a&gt;. Here is an example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/mock/binary.feature"&gt;&lt;code&gt;binary.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;responseCookies&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;responseCookies&lt;/code&gt; variable is set upon any HTTP response and is a map-like (or JSON-like) object. It can be easily inspected or used in expressions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* assert responseCookies['my.key'].value == 'someValue'

# karate's unified data handling means that even 'match' works
* match responseCookies contains { time: '#notnull' }

# ... which means that checking if a cookie does NOT exist is a piece of cake
* match responseCookies !contains { blah: '#notnull' }

# save a response cookie for later use
* def time = responseCookies.time.value
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a convenience, cookies from the previous response are collected and passed as-is as part of the next HTTP request. This is what is normally expected and simulates a web-browser - which makes it easy to script things like HTML-form based authentication into test-flows. Refer to the documentation for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#cookie"&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/a&gt; for details and how you can disable this if need be.&lt;/p&gt; 
&lt;p&gt;Each item within &lt;code&gt;responseCookies&lt;/code&gt; is itself a 'map-like' object. Typically you would examine the &lt;code&gt;value&lt;/code&gt; property as in the example above, but &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; are also available.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;See also &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-header"&gt;&lt;code&gt;match header&lt;/code&gt;&lt;/a&gt; which is what you would normally need.&lt;/p&gt; 
&lt;p&gt;But if you need to use values in the response headers - they will be in a variable named &lt;code&gt;responseHeaders&lt;/code&gt;. Note that it is a 'map of lists' so you will need to do things like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def contentType = responseHeaders['Content-Type'][0]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And just as in the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#responsecookies"&gt;&lt;code&gt;responseCookies&lt;/code&gt;&lt;/a&gt; example above, you can use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; to run complex validations on the &lt;code&gt;responseHeaders&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-response"&gt;&lt;code&gt;karate.response.header(name)&lt;/code&gt;&lt;/a&gt; can be simpler to just get a header value string by name, and it will ignore-case for the name passed as the argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* match karate.response.header('content-type') == 'application/json'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;responseStatus&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;You would normally only need to use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#status"&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; keyword. But if you really need to use the HTTP response code in an expression or save it for later, you can get it as an integer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def uploadStatusCode = responseStatus

# check if the response status is either of two values
Then assert responseStatus == 200 || responseStatus == 204
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; can give you some extra readable options:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* match [200, 201, 204] contains responseStatus

# this may be sufficient to check a range of values
* assert responseStatus &amp;gt;= 200
* assert responseStatus &amp;lt; 300

# but using karate.range() you can even do this !
* match karate.range(200, 299) contains responseStatus
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;responseTime&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The response time (in milliseconds) for the current &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; would be available in a variable called &lt;code&gt;responseTime&lt;/code&gt;. You can use this to assert that it was returned within the expected time like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;When method post
Then status 201
And assert responseTime &amp;lt; 1000
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;responseType&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Karate will attempt to parse the raw HTTP response body as JSON or XML and make it available as the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; value. If parsing fails, Karate will log a warning and the value of &lt;code&gt;response&lt;/code&gt; will then be a plain string. You can still perform string comparisons such as a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match-text-or-binary"&gt;&lt;code&gt;match contains&lt;/code&gt;&lt;/a&gt; and look for error messages etc. In rare cases, you may want to check what the "type" of the &lt;code&gt;response&lt;/code&gt; is and it can be one of 3 different values: &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;So if you really wanted to assert that the HTTP response body is well-formed JSON or XML you can do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;When method post
Then status 201
And match responseType == 'json'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;requestTimeStamp&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Very rarely used - but you can get the Java system-time (for the current &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;) at the point when the HTTP request was initiated (the value of &lt;code&gt;System.currentTimeMillis()&lt;/code&gt;) which can be used for detailed logging or custom framework / stats calculations.&lt;/p&gt; 
&lt;h1&gt;HTTP Header Manipulation&lt;/h1&gt; 
&lt;h2&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Custom header manipulation for every HTTP request is something that Karate makes very easy and pluggable. For every HTTP request made from Karate, the internal flow is as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;did we &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; the value of &lt;code&gt;headers&lt;/code&gt; ?&lt;/li&gt; 
 &lt;li&gt;if so, is the configured value a JavaScript function ? 
  &lt;ul&gt; 
   &lt;li&gt;if so, a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; is made to that function.&lt;/li&gt; 
   &lt;li&gt;did the function invocation return a map-like (or JSON) object ? 
    &lt;ul&gt; 
     &lt;li&gt;all the key-value pairs are added to the HTTP headers.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;or is the configured value a JSON object ? 
  &lt;ul&gt; 
   &lt;li&gt;all the key-value pairs are added to the HTTP headers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This makes setting up of complex authentication schemes for your test-flows really easy. It typically ends up being a one-liner that appears in the &lt;code&gt;Background&lt;/code&gt; section at the start of your test-scripts. You can re-use the function you create across your whole project.&lt;/p&gt; 
&lt;p&gt;Here is an example JavaScript function that uses some variables in the context (which have been possibly set as the result of a sign-in) to build the &lt;code&gt;Authorization&lt;/code&gt; header. Note how even &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;calls to Java code&lt;/a&gt; can be made if needed.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;In the example below, note the use of the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-get"&gt;&lt;code&gt;karate.get()&lt;/code&gt;&lt;/a&gt; helper for getting the value of a dynamic variable (which was &lt;em&gt;not set&lt;/em&gt; at the time this JS &lt;code&gt;function&lt;/code&gt; was &lt;em&gt;declared&lt;/em&gt;). This is preferred because it takes care of situations such as if the value is &lt;code&gt;undefined&lt;/code&gt; in JavaScript. In rare cases you may need to &lt;em&gt;set&lt;/em&gt; a variable from this routine, and a good example is to make the generated UUID "visible" to the currently executing script or feature. You can easily do this via &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-set"&gt;&lt;code&gt;karate.set('someVarName', value)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function fn() {
  var uuid = '' + java.util.UUID.randomUUID(); // convert to string
  var out = { // so now the txid_header would be a unique uuid for each request
    txid_header: uuid,
    ip_header: '123.45.67.89', // hard coded here, but also can be as dynamic as you want   
  };
  var authString = '';
  var authToken = karate.get('authToken'); // use the 'karate' helper to do a 'safe' get of a 'dynamic' variable
  if (authToken) { // and if 'authToken' is not null ... 
    authString = ',auth_type=MyAuthScheme'
        + ',auth_key=' + authToken.key
        + ',auth_user=' + authToken.userId
        + ',auth_project=' + authToken.projectId;
  }
  // the 'appId' variable here is expected to have been set via karate-config.js (bootstrap init) and will never change
  out['Authorization'] = 'My_Auth app_id=' + appId + authString;
  return out;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Assuming the above code is in a file called &lt;code&gt;my-headers.js&lt;/code&gt;, the next section on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;calling other feature files&lt;/a&gt; shows how it looks like in action at the beginning of a test script.&lt;/p&gt; 
&lt;p&gt;Notice how once the &lt;code&gt;authToken&lt;/code&gt; variable is initialized, it is used by the above function to generate headers for every HTTP call made as part of the test flow.&lt;/p&gt; 
&lt;p&gt;If a few steps in your flow need to temporarily change (or completely bypass) the currently-set header-manipulation scheme, just update &lt;code&gt;configure headers&lt;/code&gt; to a new value (or set it to &lt;code&gt;null&lt;/code&gt;) in the middle of a script. Then use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword to do a custom 'over-ride' if needed.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;karate-demo&lt;/a&gt; has an example showing various ways to &lt;code&gt;configure&lt;/code&gt; or set headers: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/headers.feature"&gt;&lt;code&gt;headers.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;The &lt;code&gt;karate&lt;/code&gt; object&lt;/h1&gt; 
&lt;p&gt;A JavaScript function or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;Karate expression&lt;/a&gt; at runtime has access to a utility object in a variable named: &lt;code&gt;karate&lt;/code&gt;. This provides the following methods:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operation&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-abort"&gt;&lt;code&gt;karate.abort()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;you can prematurely exit a &lt;code&gt;Scenario&lt;/code&gt; by combining this with &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic"&gt;conditional logic&lt;/a&gt; like so: &lt;code&gt;* if (condition) karate.abort()&lt;/code&gt; - please use &lt;a href="https://martinfowler.com/articles/nonDeterminism.html"&gt;sparingly&lt;/a&gt; ! and also see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure abortedStepsShouldPass&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-append"&gt;&lt;code&gt;karate.append(... items)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;useful to create lists out of items (which can be lists as well), see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms"&gt;JSON transforms&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-appendto"&gt;&lt;code&gt;karate.appendTo(name, ... items)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;useful to append to a list-like variable (that has to exist) in scope, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms"&gt;JSON transforms&lt;/a&gt; - the first argument can be a reference to an array-like variable or even the name (string) of an existing variable which is list-like&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-compareimage"&gt;&lt;code&gt;karate.compareImage(baseline, latest, [options])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;compare two images the same way that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#compare-image"&gt;&lt;code&gt;compareImage&lt;/code&gt;&lt;/a&gt; works (with an optional &lt;code&gt;options&lt;/code&gt; argument), returns an object with the following keys: &lt;code&gt;baseline&lt;/code&gt;, &lt;code&gt;latest&lt;/code&gt;, &lt;code&gt;mismatchPercentage&lt;/code&gt;, &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;failureThreshold&lt;/code&gt; and optionally: &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;isBaselineMissing&lt;/code&gt;, &lt;code&gt;isScaleMismatch&lt;/code&gt;, &lt;code&gt;isMismatch&lt;/code&gt;, &lt;code&gt;resembleMismatchPercentage&lt;/code&gt;, &lt;code&gt;ssimMismatchPercentage&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-call"&gt;&lt;code&gt;karate.call(fileName, [arg])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;invoke a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;&lt;code&gt;*.feature&lt;/code&gt; file&lt;/a&gt; or a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions"&gt;JavaScript function&lt;/a&gt; the same way that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; works (with an optional solitary argument), see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call-vs-read"&gt;&lt;code&gt;call()&lt;/code&gt; vs &lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; for details&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-callsingle"&gt;&lt;code&gt;karate.callSingle(fileName, [arg])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;like the above, but guaranteed to run &lt;strong&gt;only once&lt;/strong&gt; even across multiple features - see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle"&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-configure"&gt;&lt;code&gt;karate.configure(key, value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;does the same thing as the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; keyword, and a very useful example is to do &lt;code&gt;karate.configure('connectTimeout', 5000);&lt;/code&gt; in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; - which has the 'global' effect of not wasting time if a connection cannot be established within 5 seconds&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-distinct"&gt;&lt;code&gt;karate.distinct(list)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;returns only unique items out of an array of strings or numbers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-doc"&gt;&lt;code&gt;karate.doc(arg)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;just like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-render"&gt;&lt;code&gt;karate.render()&lt;/code&gt;&lt;/a&gt; but will insert the HTML into the report&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-embed"&gt;&lt;code&gt;karate.embed(object, mimeType)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;embeds the object (can be raw bytes or an image) into the JSON report output, see this &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/embed/embed.feature"&gt;example&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-env"&gt;&lt;code&gt;karate.env&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;gets the value (read-only) of the environment property 'karate.env', and this is typically used for bootstrapping &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;configuration&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-eval"&gt;&lt;code&gt;karate.eval(expression)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;for really advanced needs, you can programmatically generate a snippet of JavaScript which can be evaluated at run-time, you can find an example &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature"&gt;here&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-exec"&gt;&lt;code&gt;karate.exec(command)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;convenient way to execute an OS specific command and return the console output e.g. &lt;code&gt;karate.exec('some.exe -h')&lt;/code&gt; (or &lt;code&gt;karate.exec(['some.exe', '-h'])&lt;/code&gt;) useful for calling non-Java code (that can even return data) or for starting user-interfaces to be automated, this command will block until the process terminates, also see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-fork"&gt;&lt;code&gt;karate.fork()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-extract"&gt;&lt;code&gt;karate.extract(text, regex, group)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;useful to "scrape" text out of non-JSON or non-XML text sources such as HTML, &lt;code&gt;group&lt;/code&gt; follows the Java &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html"&gt;regex rules&lt;/a&gt;, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/extract.feature"&gt;this example&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-extractall"&gt;&lt;code&gt;karate.extractAll(text, regex, group)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;like the above, but returns a list of text-matches&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-fail"&gt;&lt;code&gt;karate.fail(message)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;if you want to conditionally stop a test with a descriptive error message, e.g. &lt;code&gt;* if (condition) karate.fail('we expected something else')&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-feature"&gt;&lt;code&gt;karate.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;get metadata about the currently executing feature within a test&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-filter"&gt;&lt;code&gt;karate.filter(list, predicate)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;functional-style 'filter' operation useful to filter list-like objects (e.g. JSON arrays), see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature"&gt;example&lt;/a&gt;, the second argument has to be a JS function (item, [index]) that returns a &lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-filterkeys"&gt;&lt;code&gt;karate.filterKeys(map, keys)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;extracts a sub-set of key-value pairs from the first argument, the second argument can be a list (or varargs) of keys - or even another JSON where only the keys would be used for extraction, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature"&gt;example&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;karate.forEach(list, function)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;functional-style 'loop' operation useful to traverse list-like (or even map-like) objects (e.g. JSON / arrays), see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature"&gt;example&lt;/a&gt;, the second argument has to be a JS function (item, [index]) for lists and (key, [value], [index]) for JSON / maps&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-fork"&gt;&lt;code&gt;karate.fork(map)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;executes an OS command, but forks a process in parallel and will not block the test like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-exec"&gt;&lt;code&gt;karate.exec()&lt;/code&gt;&lt;/a&gt; e.g. &lt;code&gt;karate.fork({ args: ['some.exe', '-h'] })&lt;/code&gt; or &lt;code&gt;karate.fork(['some.exe', '-h'])&lt;/code&gt; - you can use a composite string as &lt;code&gt;line&lt;/code&gt; (or the solitary argument e.g. &lt;code&gt;karate.fork('some.exe -h')&lt;/code&gt;) instead of &lt;code&gt;args&lt;/code&gt;, and an optional &lt;code&gt;workingDir&lt;/code&gt; string property and &lt;code&gt;env&lt;/code&gt; JSON / map is also supported - this returns a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/shell/Command.java"&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; object which has operations such as &lt;code&gt;waitSync()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; if you need more control, more details &lt;a href="https://stackoverflow.com/a/62911366/143475"&gt;here&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-fromstring"&gt;&lt;code&gt;karate.fromString(string)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;for advanced conditional logic for e.g. when a string coming from an external process is dynamic - and whether it is JSON or XML is not known in advance, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature"&gt;example&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-get"&gt;&lt;code&gt;karate.get(name, [default])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;get the value of a variable by name (or JsonPath expression), if not found - this returns &lt;code&gt;null&lt;/code&gt; which is easier to handle in JavaScript (than &lt;code&gt;undefined&lt;/code&gt;), and an optional (literal / constant) second argument can be used to return a "default" value, very useful to set variables in called features that have not been pre-defined&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-http"&gt;&lt;code&gt;karate.http(url)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;returns a convenience &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/Http.java"&gt;&lt;code&gt;Http&lt;/code&gt;&lt;/a&gt; request builder class, only recommended for &lt;a href="https://github.com/karatelabs/karate/tree/develop/examples/ui-test#webdriver-tips"&gt;advanced use&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-jsonpath"&gt;&lt;code&gt;karate.jsonPath(json, expression)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;brings the power of &lt;a href="https://github.com/json-path/JsonPath"&gt;JsonPath&lt;/a&gt; into JavaScript, and you can find an example &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature"&gt;here&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-keysof"&gt;&lt;code&gt;karate.keysOf(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;returns only the keys of a map-like object&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-log"&gt;&lt;code&gt;karate.log(... args)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;log to the same logger (and log file) being used by the parent process, logging can be suppressed with &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure printEnabled&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;false&lt;/code&gt;, and just like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#print"&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; - use comma-separated values to "pretty print" JSON or XML&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-logger-debug"&gt;&lt;code&gt;karate.logger.debug(... args)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;access to the Karate logger directly and log in debug. Might be desirable instead of &lt;code&gt;karate.log&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt; when looking to reduce the logs in console in your CI/CD pipeline but still retain the information for reports. See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#logging"&gt;Logging&lt;/a&gt; for additional details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-lowercase"&gt;&lt;code&gt;karate.lowerCase(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;useful to brute-force all keys and values in a JSON or XML payload to lower-case, useful in some cases, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/lower-case.feature"&gt;example&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-map"&gt;&lt;code&gt;karate.map(list, function)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;functional-style 'map' operation useful to transform list-like objects (e.g. JSON arrays), see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature"&gt;example&lt;/a&gt;, the second argument has to be a JS function (item, [index])&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-mapwithkey"&gt;&lt;code&gt;karate.mapWithKey(list, string)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;convenient for the common case of transforming an array of primitives into an array of objects, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms"&gt;JSON transforms&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-match"&gt;&lt;code&gt;karate.match(actual, expected)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;brings the power of the &lt;em&gt;fuzzy&lt;/em&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; syntax into Karate-JS, returns a JSON in the form &lt;code&gt;{ pass: '#boolean', message: '#string' }&lt;/code&gt; and you can find an example &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature"&gt;here&lt;/a&gt; - you can even place a &lt;em&gt;full&lt;/em&gt; match expression like this: &lt;code&gt;karate.match("each foo contains { a: '#number' }")&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-merge"&gt;&lt;code&gt;karate.merge(... maps)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;useful to merge the key-values of two (or more) JSON (or map-like) objects, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#json-transforms"&gt;JSON transforms&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-os"&gt;&lt;code&gt;karate.os&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;returns the operating system details as JSON, for e.g. &lt;code&gt;{ type: 'macosx', name: 'Mac OS X' }&lt;/code&gt; - useful for writing conditional logic, the possible &lt;code&gt;type&lt;/code&gt;-s being: &lt;code&gt;macosx&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;linux&lt;/code&gt; and &lt;code&gt;unknown&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-pause"&gt;&lt;code&gt;karate.pause(number)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;sleep time in milliseconds, relevant only for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling#think-time"&gt;performance-testing&lt;/a&gt; - and will be a no-op otherwise unless &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure pauseIfNotPerf&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-pretty"&gt;&lt;code&gt;karate.pretty(value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;return a 'pretty-printed', nicely indented string representation of the JSON value, also see: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#print"&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-prettyxml"&gt;&lt;code&gt;karate.prettyXml(value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;return a 'pretty-printed', nicely indented string representation of the XML value, also see: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#print"&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-prevrequest"&gt;&lt;code&gt;karate.prevRequest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;for advanced users, you can inspect the &lt;em&gt;actual&lt;/em&gt; HTTP request after it happens, useful if you are writing a framework over Karate, refer to this example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/request/request.feature"&gt;&lt;code&gt;request.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-properties"&gt;&lt;code&gt;karate.properties[key]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;get the value of any Java system-property by name, useful for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#dynamic-port-numbers"&gt;advanced custom configuration&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-range"&gt;&lt;code&gt;karate.range(start, end, [interval])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;returns a JSON array of integers (inclusive), the optional third argument must be a positive integer and defaults to 1, and if start &amp;lt; end the order of values is reversed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-read"&gt;&lt;code&gt;karate.read(filename)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;the same &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; function - which is pre-defined even within JS blocks, so there is no need to ever do &lt;code&gt;karate.read()&lt;/code&gt;, and just &lt;code&gt;read()&lt;/code&gt; is sufficient&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-readasbytes"&gt;&lt;code&gt;karate.readAsBytes(filename)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;rarely used, like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-readasstring"&gt;&lt;code&gt;karate.readAsString&lt;/code&gt;&lt;/a&gt; - but returns a byte array&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-readasstream"&gt;&lt;code&gt;karate.readAsStream(filename)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;rarely used, like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-readasstring"&gt;&lt;code&gt;karate.readAsString&lt;/code&gt;&lt;/a&gt; - but returns a Java &lt;code&gt;InputStream&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-readasstring"&gt;&lt;code&gt;karate.readAsString(filename)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#read-file-as-string"&gt;rarely used&lt;/a&gt;, behaves exactly like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; - but does &lt;em&gt;not&lt;/em&gt; auto convert to JSON or XML&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-remove"&gt;&lt;code&gt;karate.remove(name, path)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;very rarely used - when needing to perform conditional removal of JSON keys or XML nodes. Behaves the same way as the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#remove"&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; keyword.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-render"&gt;&lt;code&gt;karate.render(arg)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;renders an HTML template, the &lt;code&gt;arg&lt;/code&gt; can be a string (prefixable path to the HTML) or a JSON that takes either a &lt;code&gt;path&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt; property, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#doc"&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-repeat"&gt;&lt;code&gt;karate.repeat(count, function)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;useful for building an array with &lt;code&gt;count&lt;/code&gt; items or doing something &lt;code&gt;count&lt;/code&gt; times, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#loops"&gt;loops&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-response"&gt;&lt;code&gt;karate.response&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;returns the last HTTP response as a JS object that enables advanced use-cases such as getting a header ignoring case: &lt;code&gt;karate.response.header('some-header')&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-request"&gt;&lt;code&gt;karate.request&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;returns the last HTTP request as a JS object that enables advanced use-cases such as getting a header ignoring case: &lt;code&gt;karate.request.header('some-header')&lt;/code&gt;, which works &lt;a href="https://github.com/karatelabs/karate/tree/master/karate-netty#requestheaders"&gt;even in mocks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-scenario"&gt;&lt;code&gt;karate.scenario&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;get metadata about the currently executing &lt;code&gt;Scenario&lt;/code&gt; (or &lt;code&gt;Outline&lt;/code&gt; - &lt;code&gt;Example&lt;/code&gt;) within a test&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-scenarioOutline"&gt;&lt;code&gt;karate.scenarioOutline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;get metadata about the currently executing scenario outline within a test&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-set"&gt;&lt;code&gt;karate.set(name, value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;sets the value of a variable (immediately), which may be needed in case any other routines (such as the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers"&gt;configured headers&lt;/a&gt;) depend on that variable&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-setall"&gt;&lt;code&gt;karate.set(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;where the single argument is expected to be a &lt;code&gt;Map&lt;/code&gt; or JSON-like, and will perform the above &lt;code&gt;karate.set()&lt;/code&gt; operation for all key-value pairs in one-shot&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-setpath"&gt;&lt;code&gt;karate.set(name, path, value)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;only needed when you need to conditionally build payload elements, especially XML. This is best explained via &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature#L211"&gt;an example&lt;/a&gt;, and it behaves the same way as the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword. Also see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-setxml"&gt;&lt;code&gt;karate.setXml(name, xmlString)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;rarely used, refer to the example above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-setup"&gt;&lt;code&gt;karate.setup([name])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;call a &lt;code&gt;Scenario&lt;/code&gt; tagged with the built-in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#setup"&gt;&lt;code&gt;@setup&lt;/code&gt;&lt;/a&gt; annotation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-setuponce"&gt;&lt;code&gt;karate.setupOnce([name])&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-setup"&gt;&lt;code&gt;karate.setup()&lt;/code&gt;&lt;/a&gt; above, but cache the result so that the "setup" runs only once&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-signal"&gt;&lt;code&gt;karate.signal(result)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;trigger an event that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-listen"&gt;&lt;code&gt;karate.listen(timeout)&lt;/code&gt;&lt;/a&gt; is waiting for, and pass the data, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#async"&gt;async&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-sizeof"&gt;&lt;code&gt;karate.sizeOf(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;returns the size of the map-like or list-like object&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-sort"&gt;&lt;code&gt;karate.sort(list, function)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;sorts the list using the provided custom function called for each item in the list (and the optional second argument is the item index) e.g. &lt;code&gt;karate.sort(myList, x =&amp;gt; x.val)&lt;/code&gt;, and the second / function argument is not needed if the list is of plain strings or numbers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-start"&gt;&lt;code&gt;karate.start()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;only for starting a mock from &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#within-a-karate-test"&gt;within a test / feature file see mocks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-stop"&gt;&lt;code&gt;karate.stop(port)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;will pause the test execution until a socket connection (even HTTP &lt;code&gt;GET&lt;/code&gt;) is made to the port logged to the console, useful for troubleshooting UI tests without using a &lt;a href="https://twitter.com/KarateDSL/status/1167533484560142336"&gt;de-bugger&lt;/a&gt;, of course - &lt;em&gt;NEVER&lt;/em&gt; forget to remove this after use !&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-target"&gt;&lt;code&gt;karate.target(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;currently for web-ui automation only, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core#target-lifecycle"&gt;target lifecycle&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-tags"&gt;&lt;code&gt;karate.tags&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;for advanced users - scripts can introspect the tags that apply to the current scope, refer to this example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/tags.feature"&gt;&lt;code&gt;tags.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-tagvalues"&gt;&lt;code&gt;karate.tagValues&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;for even more advanced users - Karate natively supports tags in a &lt;code&gt;@name=val1,val2&lt;/code&gt; format, and there is an inheritance mechanism where &lt;code&gt;Scenario&lt;/code&gt; level tags can over-ride &lt;code&gt;Feature&lt;/code&gt; level tags, refer to this example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/tags.feature"&gt;&lt;code&gt;tags.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-toabsolutepath"&gt;&lt;code&gt;karate.toAbsolutePath(relativePath)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;when you want to get the absolute OS path to the argument which could even have a prefix such as &lt;code&gt;classpath:&lt;/code&gt;, e.g. &lt;code&gt;karate.toAbsolutePath('some.json')&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-tobean"&gt;&lt;code&gt;karate.toBean(json, className)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;converts a JSON string or map-like object into a Java object, given the Java class name as the second argument, refer to this &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature"&gt;file&lt;/a&gt; for an example&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-tocsv"&gt;&lt;code&gt;karate.toCsv(list)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;converts a JSON array (of objects) or a list-like object into a CSV string, writing this to a file is your responsibility or you could use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-write"&gt;&lt;code&gt;karate.write()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-tojava"&gt;&lt;code&gt;karate.toJava(function)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;rarely used, when you need to pass a JS function to custom Java code, typically for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#async"&gt;Async&lt;/a&gt;, and another edge case is to convert a JSON array or object to a Java &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;Map&lt;/code&gt;, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/to-bean.feature"&gt;example&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-tojavafile"&gt;&lt;code&gt;karate.toJavaFile(path)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;in case you need a &lt;code&gt;java.io.File&lt;/code&gt; instance to pass to Java interop, takes the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;Karate prefixes&lt;/a&gt; such as &lt;code&gt;classpath:&lt;/code&gt; for convenience&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-tojson"&gt;&lt;code&gt;karate.toJson(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;converts a Java object into JSON, and &lt;code&gt;karate.toJson(object, true)&lt;/code&gt; will strip all keys that have &lt;code&gt;null&lt;/code&gt; values from the resulting JSON, convenient for unit-testing Java code, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/unit/cat.feature"&gt;example&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-typeof"&gt;&lt;code&gt;karate.typeOf(any)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;for advanced conditional logic when object types are dynamic and not known in advance, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature"&gt;example&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-urldecode"&gt;&lt;code&gt;karate.urlDecode(string)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;URL decode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-urlencode"&gt;&lt;code&gt;karate.urlEncode(string)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;URL encode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-valuesof"&gt;&lt;code&gt;karate.valuesOf(object)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;returns only the values of a map-like object (or itself if a list-like object)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-waitforhttp"&gt;&lt;code&gt;karate.waitForHttp(url)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;will wait until the URL is ready to accept HTTP connections&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-waitforport"&gt;&lt;code&gt;karate.waitForPort(host, port)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;will wait until the host:port is ready to accept socket connections&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-websocket"&gt;&lt;code&gt;karate.webSocket(url, handler)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#websocket"&gt;websocket&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-write"&gt;&lt;code&gt;karate.write(object, path)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;normally not recommended, please &lt;a href="https://stackoverflow.com/a/54593057/143475"&gt;read this first&lt;/a&gt;&lt;/em&gt; - writes the bytes of &lt;code&gt;object&lt;/code&gt; to a path which will &lt;em&gt;always&lt;/em&gt; be relative to the "build" directory (typically &lt;code&gt;target&lt;/code&gt;), see this example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/embed/embed-pdf.js"&gt;&lt;code&gt;embed-pdf.js&lt;/code&gt;&lt;/a&gt; - and this method returns a &lt;code&gt;java.io.File&lt;/code&gt; reference to the file created / written to&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a name="karate-xmlpath"&gt;&lt;code&gt;karate.xmlPath(xml, expression)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Just like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-jsonpath"&gt;&lt;code&gt;karate.jsonPath()&lt;/code&gt;&lt;/a&gt; - but for XML, and allows you to use dynamic XPath if needed, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature"&gt;example&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Code Reuse / Common Routines&lt;/h1&gt; 
&lt;h2&gt;&lt;code&gt;call&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;In any complex testing endeavor, you would find yourself needing 'common' code that needs to be re-used across multiple test scripts. A typical need would be to perform a 'sign in', or create a fresh user as a pre-requisite for the scenarios being tested.&lt;/p&gt; 
&lt;p&gt;There are two types of code that can be &lt;code&gt;call&lt;/code&gt;-ed. &lt;code&gt;*.feature&lt;/code&gt; files and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions"&gt;JavaScript functions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Calling other &lt;code&gt;*.feature&lt;/code&gt; files&lt;/h2&gt; 
&lt;p&gt;When you have a sequence of HTTP calls that need to be repeated for multiple test scripts, Karate allows you to treat a &lt;code&gt;*.feature&lt;/code&gt; file as a re-usable unit. You can also pass parameters into the &lt;code&gt;*.feature&lt;/code&gt; file being called, and extract variables out of the invocation result.&lt;/p&gt; 
&lt;p&gt;Here is an example of using the &lt;code&gt;call&lt;/code&gt; keyword to invoke another feature file, loaded using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you find this hard to understand at first, try looking at this &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/callfeature/call-feature.feature"&gt;set of examples&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature: which makes a 'call' to another re-usable feature

Background:
  * configure headers = read('classpath:my-headers.js')
  * def signIn = call read('classpath:my-signin.feature') { username: 'john', password: 'secret' }
  * def authToken = signIn.authToken

Scenario: some scenario
  # main test steps
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; can be used to &lt;em&gt;assign&lt;/em&gt; a &lt;strong&gt;feature&lt;/strong&gt; to a variable. For example look at how "&lt;code&gt;creator&lt;/code&gt;" has been defined in the &lt;code&gt;Background&lt;/code&gt; in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/calldynamic/call-dynamic-json.feature"&gt;this example&lt;/a&gt;, and used later in a &lt;code&gt;call&lt;/code&gt; statement. This is very close to how "custom keywords" work in other frameworks. See this other example for more ideas: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/dsl/dsl.feature"&gt;&lt;code&gt;dsl.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The contents of &lt;code&gt;my-signin.feature&lt;/code&gt; are shown below. A few points to note:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Karate creates a new 'context' for the feature file being invoked but passes along all variables and configuration. This means that all your &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;config variables&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt; settings&lt;/a&gt; would be available to use, for example &lt;code&gt;loginUrlBase&lt;/code&gt; in the example below.&lt;/li&gt; 
 &lt;li&gt;When you use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; in the 'called' feature, it will &lt;strong&gt;not&lt;/strong&gt; over-write variables in the 'calling' feature (unless you explicitly choose to use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;shared scope&lt;/a&gt;). But note that JSON, XML, Map-like or List-like variables are 'passed by reference' which means that 'called' feature steps can &lt;em&gt;update&lt;/em&gt; or 'mutate' them using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword. Use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#copy"&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; keyword to 'clone' a JSON or XML payload if needed, and refer to this example for more details: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/copy.feature"&gt;&lt;code&gt;copy.feature&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;You can add (or over-ride) variables by passing a call 'argument' as shown above. Only one JSON argument is allowed, but this does not limit you in any way as you can use any complex JSON structure. You can even initialize the JSON in a separate step and pass it by name, especially if it is complex. Observe how using JSON for parameter-passing makes things super-readable. In the 'called' feature, the argument can also be accessed using the built-in variable: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#built-in-variables-for-call"&gt;&lt;code&gt;__arg&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;All&lt;/strong&gt; variables that were defined (using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;) in the 'called' script would be returned as 'keys' within a JSON-like object. Note that this includes &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#special-variables"&gt;'built-in' variables&lt;/a&gt;, which means that things like the last value of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; would also be present. In the example above you can see that the JSON 'envelope' returned - is assigned to the variable named &lt;code&gt;signIn&lt;/code&gt;. And then getting hold of any data that was generated by the 'called' script is as simple as accessing it by name, for example &lt;code&gt;signIn.authToken&lt;/code&gt; as shown above. This design has the following advantages: 
  &lt;ul&gt; 
   &lt;li&gt;'called' Karate scripts don't need to use any special keywords to 'return' data and can behave like 'normal' Karate tests in 'stand-alone' mode if needed&lt;/li&gt; 
   &lt;li&gt;the data 'return' mechanism is 'safe', there is no danger of the 'called' script over-writing any variables in the 'calling' (or parent) script (unless you use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;shared scope&lt;/a&gt;)&lt;/li&gt; 
   &lt;li&gt;the need to explicitly 'unpack' variables by name from the returned 'envelope' keeps things readable and maintainable in the 'caller' script&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that only &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;variables&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;configuration settings&lt;/a&gt; will be passed. You can't do things such as &lt;code&gt;* url 'http://foo.bar'&lt;/code&gt; and expect the URL to be set in the "called" feature. Use a variable in the "called" feature instead, for e.g. &lt;code&gt;* url myUrl&lt;/code&gt; or take a look at &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-url"&gt;&lt;code&gt;configure url&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature: here are the contents of 'my-signin.feature'

Scenario:
  Given url loginUrlBase
  And request { userId: '#(username)', userPass: '#(password)' }
  When method post
  Then status 200
  And def authToken = response

  # second HTTP call, to get a list of 'projects'
  Given path 'users', authToken.userId, 'projects'
  When method get
  Then status 200
  # logic to 'choose' first project
  And set authToken.projectId = response.projects[0].projectId;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above example actually makes two HTTP requests - the first is a standard 'sign-in' POST and then (for illustrative purposes) another HTTP call (a GET) is made for retrieving a list of projects for the signed-in user, and the first one is 'selected' and added to the returned 'auth token' JSON object.&lt;/p&gt; 
&lt;p&gt;So you get the picture, any kind of complicated 'sign-in' flow can be scripted and re-used.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If the second HTTP call above expects headers to be set by &lt;code&gt;my-headers.js&lt;/code&gt; - which in turn depends on the &lt;code&gt;authToken&lt;/code&gt; variable being updated, you will need to duplicate the line &lt;code&gt;* configure headers = read('classpath:my-headers.js')&lt;/code&gt; from the 'caller' feature here as well. The above example does &lt;strong&gt;not&lt;/strong&gt; use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;shared scope&lt;/a&gt;, which means that the variables in the 'calling' (parent) feature are &lt;em&gt;not&lt;/em&gt; shared by the 'called' &lt;code&gt;my-signin.feature&lt;/code&gt;. The above example can be made more simpler with the use of &lt;code&gt;call&lt;/code&gt; (or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;) &lt;em&gt;without&lt;/em&gt; a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;-assignment to a variable, and is the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;recommended pattern&lt;/a&gt; for implementing re-usable authentication setup flows.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Do look at the documentation and example for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers"&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; also as it goes hand-in-hand with &lt;code&gt;call&lt;/code&gt;. In the above example, the end-result of the &lt;code&gt;call&lt;/code&gt; to &lt;code&gt;my-signin.feature&lt;/code&gt; resulted in the &lt;code&gt;authToken&lt;/code&gt; variable being initialized. Take a look at how the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers"&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; example uses the &lt;code&gt;authToken&lt;/code&gt; variable.&lt;/p&gt; 
&lt;h3&gt;Call Tag Selector&lt;/h3&gt; 
&lt;p&gt;You can "select" a single &lt;code&gt;Scenario&lt;/code&gt; (or &lt;code&gt;Scenario&lt;/code&gt;-s or &lt;code&gt;Scenario Outline&lt;/code&gt;-s or even specific &lt;code&gt;Examples&lt;/code&gt; rows) by appending a "tag selector" at the end of the feature-file you are calling. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;call read('classpath:my-signin.feature@name=someScenarioName')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While the tag does not need to be in the &lt;code&gt;@key=value&lt;/code&gt; form, it is recommended for readability when you start getting into the business of giving meaningful names to your &lt;code&gt;Scenario&lt;/code&gt;-s.&lt;/p&gt; 
&lt;p&gt;This "tag selection" capability is designed for you to be able to "compose" flows out of existing test-suites when using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-gatling"&gt;Karate Gatling integration&lt;/a&gt;. Normally we recommend that you keep your "re-usable" features lightweight - by limiting them to just one &lt;code&gt;Scenario&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Call Same Feature&lt;/h4&gt; 
&lt;p&gt;As a convenience, you can call a tag directly, which is a short-cut to call another &lt;code&gt;Scenario&lt;/code&gt; within the same feature file. Note that you would typically want to use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#special-tags"&gt;&lt;code&gt;@ignore&lt;/code&gt;&lt;/a&gt; tag for such cases.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Scenario: one
* call read('@two')

@ignore @two
Scenario: two
* print 'called'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Data-Driven Features&lt;/h3&gt; 
&lt;p&gt;If the argument passed to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;call of a &lt;code&gt;*.feature&lt;/code&gt; file&lt;/a&gt; is a JSON array, something interesting happens. The feature is invoked for each item in the array. Each array element is expected to be a JSON object, and for each object - the behavior will be as described above.&lt;/p&gt; 
&lt;p&gt;But this time, the return value from the &lt;code&gt;call&lt;/code&gt; step will be a JSON array of the same size as the input array. And each element of the returned array will be the 'envelope' of variables that resulted from each iteration where the &lt;code&gt;*.feature&lt;/code&gt; got invoked.&lt;/p&gt; 
&lt;p&gt;Here is an example that combines the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#table"&gt;&lt;code&gt;table&lt;/code&gt;&lt;/a&gt; keyword with calling a &lt;code&gt;*.feature&lt;/code&gt;. Observe how the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#get"&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#get-short-cut"&gt;shortcut&lt;/a&gt; is used to 'distill' the result array of variable 'envelopes' into an array consisting only of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#response"&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; payloads.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* table kittens 
  | name   | age |
  | 'Bob'  |   2 |
  | 'Wild' |   1 |
  | 'Nyan' |   3 |

* def result = call read('cat-create.feature') kittens
* def created = $result[*].response
* match each created == { id: '#number', name: '#string', age: '#number' }
* match created[*].name contains only ['Bob', 'Wild', 'Nyan']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And here is how &lt;code&gt;cat-create.feature&lt;/code&gt; could look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;@ignore
Feature:

Scenario:
  Given url someUrlFromConfig
  And path 'cats'
  And request { name: '#(name)', age: '#(age)' }
  When method post
  Then status 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you replace the &lt;code&gt;table&lt;/code&gt; with perhaps a JavaScript function call that gets some JSON data from some data-source, you can imagine how you could go about dynamic data-driven testing.&lt;/p&gt; 
&lt;p&gt;Although it is just a few lines of code, take time to study the above example carefully. It is a great example of how to effectively use the unique combination of syntax and JsonPath that Karate provides.&lt;/p&gt; 
&lt;p&gt;Also look at the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;demo examples&lt;/a&gt;, especially &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/search/dynamic-params.feature"&gt;&lt;code&gt;dynamic-params.feature&lt;/code&gt;&lt;/a&gt; - to compare the above approach with how the Gherkin &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-cucumber-way"&gt;&lt;code&gt;Scenario Outline:&lt;/code&gt;&lt;/a&gt; can be alternatively used for data-driven tests.&lt;/p&gt; 
&lt;h3&gt;Built-in variables for &lt;code&gt;call&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Although all properties in the passed JSON-like argument are 'unpacked' into the current scope as separate 'named' variables, it sometimes makes sense to access the whole argument and this can be done via &lt;code&gt;__arg&lt;/code&gt;. And if being called in a loop, a built-in variable called &lt;code&gt;__loop&lt;/code&gt; will also be available that will hold the value of the current loop index. So you can do things like this: &lt;code&gt;* def name = name + __loop&lt;/code&gt; - or you can use the loop index value for looking up other values that may be in scope - in a data-driven style.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Refers To&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;__arg&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;the single &lt;code&gt;call&lt;/code&gt; (or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;) argument, will be &lt;code&gt;null&lt;/code&gt; if there was none&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;__loop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;the current iteration index (starts from 0) if being called in a loop, will be &lt;code&gt;-1&lt;/code&gt; if not&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Refer to this &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;demo feature&lt;/a&gt; for an example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/calltable/kitten-create.feature"&gt;&lt;code&gt;kitten-create.feature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Default Values&lt;/h3&gt; 
&lt;p&gt;Some users need "callable" features that are re-usable even when variables have not been defined by the calling feature. Normally an undefined variable results in nasty JavaScript errors. But there is an elegant way you can specify a default value using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-get"&gt;&lt;code&gt;karate.get()&lt;/code&gt;&lt;/a&gt; API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# if foo is not defined, it will default to 42
* def foo = karate.get('foo', 42)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A word of caution: we recommend that you should not over-use Karate's capability of being able to re-use features. Re-use can sometimes result in negative benefits - especially when applied to test-automation. Prefer readability over re-use. See this for an &lt;a href="https://stackoverflow.com/a/54126724/143475"&gt;example&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;For a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; (or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;) - payload / data structures (JSON, XML, Map-like or List-like) variables are 'passed by reference' which means that steps within the 'called' feature can update or 'mutate' them, for e.g. using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; keyword. This is actually the intent most of the time and is convenient. If you want to pass a 'clone' to a 'called' feature, you can do so using the rarely used &lt;code&gt;copy&lt;/code&gt; keyword that works very similar to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion"&gt;type conversion&lt;/a&gt;. This is best explained in this example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/copy.feature"&gt;&lt;code&gt;copy.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Calling JavaScript Functions&lt;/h2&gt; 
&lt;p&gt;Examples of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions"&gt;defining and using JavaScript functions&lt;/a&gt; appear in earlier sections of this document. Being able to define and re-use JavaScript functions is a powerful capability of Karate. For example, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;call re-usable functions that take complex data as an argument and return complex data that can be stored in a variable&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;call and interoperate with Java code&lt;/a&gt; if needed&lt;/li&gt; 
 &lt;li&gt;share and re-use test &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#commonly-needed-utilities"&gt;utilities&lt;/a&gt; or 'helper' functionality across your organization&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;For an advanced example of how you can build and re-use a common set of JS functions, refer to &lt;a href="https://stackoverflow.com/a/49384760/143475"&gt;this answer on Stack Overflow&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;In real-life scripts, you would typically also use this capability of Karate to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers"&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt; where the specified JavaScript function uses the variables that result from a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;sign in&lt;/a&gt; to manipulate headers for all subsequent HTTP requests. And it is worth mentioning that the Karate &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;configuration 'bootstrap'&lt;/a&gt; routine is itself a JavaScript function.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Also refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; keyword for a simpler way to execute arbitrary JavaScript that can be useful in some situations.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;JS function argument rules for &lt;code&gt;call&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;When using &lt;code&gt;call&lt;/code&gt; (or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt;), only one argument is allowed. But this does not limit you in any way, because similar to how you can &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;call &lt;code&gt;*.feature files&lt;/code&gt;&lt;/a&gt;, you can pass a whole JSON object as the argument. In the case of the &lt;code&gt;call&lt;/code&gt; of a JavaScript function, you can also pass a JSON array or a primitive (string, number, boolean) as the solitary argument, and the function implementation is expected to handle whatever is passed.&lt;/p&gt; 
&lt;p&gt;Instead of using &lt;code&gt;call&lt;/code&gt; (or &lt;code&gt;callonce&lt;/code&gt;) you are always free to call JavaScript functions 'normally' and then you can use more than one argument.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def adder = function(a, b){ return a + b }
* assert adder(1, 2) == 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Return types&lt;/h3&gt; 
&lt;p&gt;Naturally, only one value can be returned. But again, you can return a JSON object. There are two things that can happen to the returned value.&lt;/p&gt; 
&lt;p&gt;Either - it can be assigned to a variable like so.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def returnValue = call myFunction
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or - if a &lt;code&gt;call&lt;/code&gt; is made without an assignment, and if the function returns a map-like object, it will add each key-value pair returned as a new variable into the execution context.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# while this looks innocent ...
# ... behind the scenes, it could be creating (or over-writing) a bunch of variables !
* call someFunction
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While this sounds dangerous and should be used with care (and limits readability), the reason this feature exists is to quickly set (or over-write) a bunch of config variables when needed. In fact, this is the mechanism used when &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; is processed on start-up.&lt;/p&gt; 
&lt;h4&gt;Shared Scope&lt;/h4&gt; 
&lt;p&gt;This behavior where all key-value pairs in the returned map-like object get automatically added as variables - applies to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-other-feature-files"&gt;calling of &lt;code&gt;*.feature&lt;/code&gt; files&lt;/a&gt; as well. In other words, when &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; is used without a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt;, the 'called' script not only shares all variables (and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; settings) but can update the shared execution context. This is very useful to boil-down those 'common' steps that you may have to perform at the start of multiple test-scripts - into one-liners. But use wisely, because called scripts will now over-write variables that may have been already defined.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def config = { user: 'john', password: 'secret' }
# this next line may perform many steps and result in multiple variables set for the rest of the script
* call read('classpath:common-setup.feature') config
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;call&lt;/code&gt; within the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure"&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt; in case you have multiple &lt;code&gt;Scenario&lt;/code&gt; sections or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-tests"&gt;&lt;code&gt;Examples&lt;/code&gt;&lt;/a&gt;. Note the 'inline' use of the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;read&lt;/a&gt; function as a short-cut above. This applies to JS functions as well:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* call read('my-function.js')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These heavily commented &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;demo examples&lt;/a&gt; can help you understand 'shared scope' better, and are designed to get you started with creating re-usable 'sign-in' or authentication flows:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Scope&lt;/th&gt; 
   &lt;th&gt;Caller Feature&lt;/th&gt; 
   &lt;th&gt;Called Feature&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Isolated&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/call-isolated-headers.feature"&gt;&lt;code&gt;call-isolated-headers.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/common-multiple.feature"&gt;&lt;code&gt;common-multiple.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Shared&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/call-updates-config.feature"&gt;&lt;code&gt;call-updates-config.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/common.feature"&gt;&lt;code&gt;common.feature&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Once you get comfortable with Karate, you can consider moving your authentication flow into a 'global' one-time flow using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-callsingle"&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;, think of it as '&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; on steroids'.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;code&gt;call&lt;/code&gt; vs &lt;code&gt;read()&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Since this is a frequently asked question, the different ways of being able to re-use code (or data) are summarized below.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Code&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def login = read('login.feature')&lt;/code&gt;&lt;br /&gt;&lt;code&gt;* call login&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;Shared Scope&lt;/a&gt;, and the &lt;br /&gt;&lt;code&gt;login&lt;/code&gt; variable can be re-used&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* call read('login.feature')&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;short-cut for the above &lt;br /&gt;without needing a variable&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def credentials = read('credentials.json')&lt;/code&gt;&lt;br /&gt;&lt;code&gt;* def login = read('login.feature')&lt;/code&gt;&lt;br /&gt;&lt;code&gt;* call login credentials&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Note how using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; &lt;br /&gt;for a JSON file returns &lt;em&gt;data&lt;/em&gt; - &lt;br /&gt;not "callable" code, and here it is &lt;br /&gt;used as the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; argument&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* call read('login.feature') read('credentials.json')&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;You &lt;em&gt;can&lt;/em&gt; do this in theory, &lt;br /&gt;but it is not as readable as the above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* karate.call('login.feature')&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;The &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-call"&gt;JS API&lt;/a&gt; allows you to do this, &lt;br /&gt;but this will &lt;em&gt;not&lt;/em&gt; be &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;Shared Scope&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def result = call read('login.feature')&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; result assigned to a variable &lt;br /&gt;and &lt;em&gt;not&lt;/em&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;Shared Scope&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def result = karate.call('login.feature')&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;exactly equivalent to the above !&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* if (cond) karate.call(true, 'login.feature')&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;if you need &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic"&gt;conditional logic&lt;/a&gt; &lt;br /&gt;&lt;em&gt;and&lt;/em&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;Shared Scope&lt;/a&gt;, add a &lt;br /&gt;boolean &lt;code&gt;true&lt;/code&gt; first argument&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def credentials = read('credentials.json')&lt;/code&gt;&lt;br /&gt;&lt;code&gt;* def result = call read('login.feature') credentials&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;like the above, &lt;br /&gt;but with a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; argument&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def credentials = read('credentials.json')&lt;/code&gt;&lt;br /&gt;&lt;code&gt;* def result = karate.call('login.feature', credentials)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;like the above, but in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-call"&gt;JS API&lt;/a&gt; form, &lt;br /&gt;the advantage of the above form is &lt;br /&gt;that using an in-line argument is less &lt;br /&gt;"cluttered" (see next row)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* def login = read('login.feature')&lt;/code&gt;&lt;br /&gt;&lt;code&gt;* def result = call login { user: 'john', password: 'secret' }&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;using the &lt;code&gt;call&lt;/code&gt; keyword makes &lt;br /&gt;passing an in-line JSON argument &lt;br /&gt;more "readable"&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* call read 'credentials.json'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Since "&lt;code&gt;read&lt;/code&gt;" happens to be a &lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions"&gt;&lt;em&gt;function&lt;/em&gt;&lt;/a&gt; (that takes a single &lt;br /&gt;string argument), this has the effect &lt;br /&gt;of loading &lt;em&gt;all&lt;/em&gt; keys in the JSON file&lt;br /&gt;into &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;Shared Scope&lt;/a&gt; as &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;variables&lt;/a&gt; ! &lt;br /&gt;This &lt;em&gt;can&lt;/em&gt; be &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core#locator-lookup"&gt;sometimes handy&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* call read ('credentials.json')&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A common mistake. First, there &lt;br /&gt;is no meaning in &lt;code&gt;call&lt;/code&gt; for JSON. &lt;br /&gt;Second, the space after the "&lt;code&gt;read&lt;/code&gt;" &lt;br /&gt;makes this equal to the above.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;* karate.set(read('credentials.json'))&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;For completeness - this has &lt;em&gt;exactly&lt;/em&gt; the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-setall"&gt;same effect&lt;/a&gt; as the above two rows !&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Calling Java&lt;/h3&gt; 
&lt;p&gt;There are examples of calling JVM classes in the section on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop"&gt;Java Interop&lt;/a&gt; and in the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;file-upload demo&lt;/a&gt;. Also look at the section on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#commonly-needed-utilities"&gt;commonly needed utilities&lt;/a&gt; for more ideas.&lt;/p&gt; 
&lt;p&gt;Calling any Java code is that easy. Given this custom, user-defined Java class:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;package com.mycompany;

import java.util.HashMap;
import java.util.Map;

public class JavaDemo {    
    
    public Map&amp;lt;String, Object&amp;gt; doWork(String fromJs) {
        Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        map.put("someKey", "hello " + fromJs);
        return map;
    }

    public static String doWorkStatic(String fromJs) {
        return "hello " + fromJs;
    }   

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is how it can be called from a test-script via &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions"&gt;JavaScript&lt;/a&gt;, and yes, even static methods can be invoked:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def doWork =
  """
  function(arg) {
    var JavaDemo = Java.type('com.mycompany.JavaDemo');
    var jd = new JavaDemo();
    return jd.doWork(arg);  
  }
  """
# in this case the solitary 'call' argument is of type string
* def result = call doWork 'world'
* match result == { someKey: 'hello world' }

# using a static method - observe how java interop is truly seamless !
* def JavaDemo = Java.type('com.mycompany.JavaDemo')
* def result = JavaDemo.doWorkStatic('world')
* assert result == 'hello world'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that JSON gets auto-converted to &lt;code&gt;Map&lt;/code&gt; (or &lt;code&gt;List&lt;/code&gt;) when making the cross-over to Java. Refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/java/cats-java.feature"&gt;&lt;code&gt;cats-java.feature&lt;/code&gt;&lt;/a&gt; demo for an example.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;An additional-level of auto-conversion happens when objects cross the boundary between JS and Java. In the rare case that you need to mutate a &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;List&lt;/code&gt; returned from Java but while still within a JS block, use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-tojson"&gt;&lt;code&gt;karate.toJson()&lt;/code&gt;&lt;/a&gt; to convert.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Another example is &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/dogs/dogs.feature"&gt;&lt;code&gt;dogs.feature&lt;/code&gt;&lt;/a&gt; - which actually makes JDBC (database) calls, and since the data returned from the Java code is JSON, the last section of the test is able to use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; &lt;em&gt;very&lt;/em&gt; effectively for data assertions.&lt;/p&gt; 
&lt;p&gt;Good examples of how you can extend Karate, even bypass the HTTP client - but still use Karate's test-automation effectively, are the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/karatelabs/karate-examples/raw/main/aws-dynamodb/README.md"&gt;AWS DynamoDB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/karatelabs/karate-examples/raw/main/ssh/README.md"&gt;SSH&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/getkarate/status/1417023536082812935"&gt;Active MQ + Async&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/karatelabs/karate-examples/raw/main/database/README.md"&gt;Spring Boot + Database&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/karatelabs/karate-examples/raw/main/rabbitmq/README.md"&gt;RabbitMQ&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;HTTP Basic Authentication Example&lt;/h4&gt; 
&lt;p&gt;This should make it clear why Karate does not provide 'out of the box' support for any particular HTTP authentication scheme. Things are designed so that you can plug-in what you need, without needing to compile Java code. You get to choose how to manage your environment-specific configuration values such as user-names and passwords.&lt;/p&gt; 
&lt;p&gt;First the JavaScript file, &lt;code&gt;basic-auth.js&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function fn(creds) {
  var temp = creds.username + ':' + creds.password;
  var Base64 = Java.type('java.util.Base64');
  var encoded = Base64.getEncoder().encodeToString(temp.toString().getBytes());
  return 'Basic ' + encoded;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And here's how it works in a test-script using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#header"&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; keyword.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* header Authorization = call read('basic-auth.js') { username: 'john', password: 'secret' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can set this up for all subsequent requests or dynamically generate headers for each HTTP request if you &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure-headers"&gt;&lt;code&gt;configure headers&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Cucumber has a limitation where &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure"&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt; steps are re-run for every &lt;code&gt;Scenario&lt;/code&gt;. And if you have a &lt;code&gt;Scenario Outline&lt;/code&gt;, this happens for &lt;em&gt;every&lt;/em&gt; row in the &lt;code&gt;Examples&lt;/code&gt;. This is a problem especially for expensive, time-consuming HTTP calls, and this has been an &lt;a href="https://github.com/cucumber/cucumber-jvm/issues/515"&gt;open issue for a long time&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Karate's &lt;code&gt;callonce&lt;/code&gt; keyword behaves exactly like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; but is guaranteed to execute only once. The results of the first call are cached, and any future calls will simply return the cached result instead of executing the JavaScript function (or feature) again and again.&lt;/p&gt; 
&lt;p&gt;This does require you to move 'set-up' into a separate &lt;code&gt;*.feature&lt;/code&gt; (or JavaScript) file. But this totally makes sense for things not part of the 'main' test flow and which typically need to be re-usable anyway.&lt;/p&gt; 
&lt;p&gt;So when you use the combination of &lt;code&gt;callonce&lt;/code&gt; in a &lt;code&gt;Background&lt;/code&gt;, you can indeed get the same effect as using a &lt;a href="https://junit.org/junit5/docs/5.0.0/api/org/junit/jupiter/api/BeforeAll.html"&gt;&lt;code&gt;@BeforeAll&lt;/code&gt;&lt;/a&gt; annotation, and you can find examples in the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;karate-demo&lt;/a&gt;, such as this one: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/callonce/call-once.feature"&gt;&lt;code&gt;callonce.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A &lt;code&gt;callonce&lt;/code&gt; is ideally used for only "pure" JSON. You may face issues if you attempt to mix in JS functions or Java code. See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle"&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This is for evaluating arbitrary JavaScript and you are advised to use this only as a last resort ! Conditional logic is not recommended especially within test scripts because &lt;a href="https://martinfowler.com/articles/nonDeterminism.html"&gt;tests should be deterministic&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There are a few situations where this comes in handy:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you &lt;em&gt;really&lt;/em&gt; don't need to assign a result to a variable&lt;/li&gt; 
 &lt;li&gt;statements in the &lt;code&gt;if&lt;/code&gt; form (also see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#conditional-logic"&gt;conditional logic&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;'one-off' logic (or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop"&gt;Java interop&lt;/a&gt;) where you don't need the 'ceremony' of a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-javascript-functions"&gt;re-usable function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;JavaScript / JSON-style mutation of existing &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;variables&lt;/a&gt; as a dynamic alternative to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#remove"&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; - by using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-setpath"&gt;&lt;code&gt;karate.set()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-remove"&gt;&lt;code&gt;karate.remove()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# just perform an action, we don't care about saving the result
* eval myJavaScriptFunction()

# do something only if a condition is true
* eval if (zone == 'zone1') karate.set('temp', 'after')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a convenience, you can omit the &lt;code&gt;eval&lt;/code&gt; keyword and so you can shorten the above to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* myJavaScriptFunction()
* if (zone == 'zone1') karate.set('temp', 'after')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is &lt;strong&gt;very&lt;/strong&gt; convenient especially if you are calling a method on a variable that has been &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;defined&lt;/a&gt; such as the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;&lt;code&gt;karate&lt;/code&gt;&lt;/a&gt; object, and for general-purpose scripting needs such as &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core"&gt;UI automation&lt;/a&gt;. Note how &lt;code&gt;karate.set()&lt;/code&gt; and &lt;code&gt;karate.remove()&lt;/code&gt; below are used directly as a script "statement".&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;# you can use multiple lines of JavaScript if needed
* eval
  """
  var foo = function(v){ return v * v };
  var nums = [0, 1, 2, 3, 4];
  var squares = [];
  for (var n in nums) {
    squares.push(foo(n));
  }
  karate.set('temp', squares);
  """
* match temp == [0, 1, 4, 9, 16]

* def json = { a: 1 }
* def key = 'b'
# use dynamic path expressions to mutate json
* json[key] = 2
* match json == { a: 1, b: 2 }
* karate.remove('json', key)
* match json == { a: 1 }
* karate.set('json', '$.c[]', { d: 'e' })
* match json == { a: 1, c: [{ d: 'e' }] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Advanced / Tricks&lt;/h1&gt; 
&lt;h2&gt;Polling&lt;/h2&gt; 
&lt;p&gt;The built-in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#retry-until"&gt;&lt;code&gt;retry until&lt;/code&gt;&lt;/a&gt; syntax should suffice for most needs, but if you have some specific needs, this demo example (using JavaScript) should get you up and running: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/polling/polling.feature"&gt;&lt;code&gt;polling.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Conditional Logic&lt;/h2&gt; 
&lt;p&gt;The keywords &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#given-when-then"&gt;&lt;code&gt;Given&lt;/code&gt; &lt;code&gt;When&lt;/code&gt; &lt;code&gt;Then&lt;/code&gt;&lt;/a&gt; are only for decoration and should not be thought of as similar to an &lt;code&gt;if - then - else&lt;/code&gt; statement. And as a testing framework, Karate &lt;a href="https://martinfowler.com/articles/nonDeterminism.html"&gt;discourages tests&lt;/a&gt; that give different results on every run.&lt;/p&gt; 
&lt;p&gt;That said, if you really need to implement 'conditional' checks, this can be one pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def filename = zone == 'zone1' ? 'test1.feature' : 'test2.feature'
* def result = call read(filename)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And this is another, using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-call"&gt;&lt;code&gt;karate.call()&lt;/code&gt;&lt;/a&gt;. Here we want to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; a file only if a condition is satisfied:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def result = responseStatus == 404 ? {} : karate.call('delete-user.feature')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or if we don't care about the result, we can &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; an &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* if (responseStatus == 200) karate.call('delete-user.feature')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And this may give you more ideas. You can always use a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions"&gt;JavaScript function&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;call Java&lt;/a&gt; for more complex logic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def expected = zone == 'zone1' ? { foo: '#string' } : { bar: '#number' }
* match response == expected
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;JSON Lookup&lt;/h3&gt; 
&lt;p&gt;You can always use a JavaScript &lt;a href="https://www.w3schools.com/js/js_switch.asp"&gt;&lt;code&gt;switch case&lt;/code&gt;&lt;/a&gt; within an &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions"&gt;function&lt;/a&gt; block. But one pattern that you should be aware of is that JSON is actually a great data-structure for looking up data.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def data =
"""
{
   foo: 'hello',
   bar: 'world'  
}
"""
# in real-life key can be dynamic
* def key = 'bar'
# and used to lookup data
* match (data[key]) == 'world'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find more details &lt;a href="https://stackoverflow.com/a/59162760/143475"&gt;here&lt;/a&gt;. Also note how you can wrap the LHS of the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; in parentheses in the rare cases where the parser expects JsonPath by default.&lt;/p&gt; 
&lt;h3&gt;Abort and Fail&lt;/h3&gt; 
&lt;p&gt;In some rare cases you need to exit a &lt;code&gt;Scenario&lt;/code&gt; based on some condition. You can use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-abort"&gt;&lt;code&gt;karate.abort()&lt;/code&gt;&lt;/a&gt; like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* if (responseStatus == 404) karate.abort()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;code&gt;karate.abort()&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; fail the test. Conditionally making a test fail is easy with &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-fail"&gt;&lt;code&gt;karate.fail()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* if (condition) karate.fail('a custom message')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But normally a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statement is preferred unless you want a really descriptive error message.&lt;/p&gt; 
&lt;p&gt;Also refer to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#polling"&gt;polling&lt;/a&gt; for more ideas.&lt;/p&gt; 
&lt;h2&gt;Commonly Needed Utilities&lt;/h2&gt; 
&lt;p&gt;Since it is so easy to dive into &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;Java-interop&lt;/a&gt;, Karate does not include any random-number functions, uuid generator or date / time utilities out of the box. You simply roll your own.&lt;/p&gt; 
&lt;p&gt;Here is an example of how to get the current date, and formatted the way you want:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def getDate =
  """
  function() {
    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');
    var sdf = new SimpleDateFormat('yyyy/MM/dd');
    var date = new java.util.Date();
    return sdf.format(date);
  } 
  """

* def temp = getDate()
* print temp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the above will result in something like this being logged: &lt;code&gt;[print] 2017/10/16&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Here below are a few more common examples:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Utility&lt;/th&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;System Time (as a string)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;function(){ return java.lang.System.currentTimeMillis() + '' }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;UUID&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;function(){ return java.util.UUID.randomUUID() + '' }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Random Number (&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;max-1&lt;/code&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;function(max){ return Math.floor(Math.random() * max) }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Case Insensitive Comparison&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;function(a, b){ return a.equalsIgnoreCase(b) }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sleep or Wait for &lt;code&gt;pause&lt;/code&gt; milliseconds&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;function(pause){ java.lang.Thread.sleep(pause) }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The first three are good enough for random string generation for most situations. Note that if you need to do a lot of case-insensitive string checks, &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-lowercase"&gt;&lt;code&gt;karate.lowerCase()&lt;/code&gt;&lt;/a&gt; is what you are looking for.&lt;/p&gt; 
&lt;h3&gt;Multiple Functions in One File&lt;/h3&gt; 
&lt;p&gt;If you find yourself needing a complex helper or utility function, we strongly recommend that you &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;use Java&lt;/a&gt; because it is much easier to maintain and even debug if needed. And if you need multiple functions, you can easily organize them into a single Java class with multiple static methods.&lt;/p&gt; 
&lt;p&gt;That said, if you want to stick to JavaScript, but find yourself accumulating a lot of helper functions that you need to use in multiple feature files, the following pattern is recommended.&lt;/p&gt; 
&lt;p&gt;You can organize multiple "common" utilities into a single re-usable feature file as follows e.g. &lt;code&gt;common.feature&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;@ignore
Feature:

Scenario:
  * def hello = function(){ return 'hello' }
  * def world = function(){ return 'world' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then you have two options. The first option using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;shared scope&lt;/a&gt; should be fine for most projects, but if you want to "name space" your functions, use "isolated scope":&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Scenario: function re-use, global / shared scope
    * call read('common.feature')
    * assert hello() == 'hello'
    * assert world() == 'world'

Scenario: function re-use, isolated / name-spaced scope
    * def utils = call read('common.feature')
    * assert utils.hello() == 'hello'
    * assert utils.world() == 'world'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can even move commonly used routines into &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#restrictions-on-global-variables"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; which means that they become "global". But we recommend that you do this only if you are sure that these routines are needed in almost &lt;em&gt;all&lt;/em&gt; &lt;code&gt;*.feature&lt;/code&gt; files. Bloating your configuration can lead to loss of performance, and maintainability may suffer.&lt;/p&gt; 
&lt;h2&gt;Async&lt;/h2&gt; 
&lt;p&gt;The JS API has a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-signal"&gt;&lt;code&gt;karate.signal(result)&lt;/code&gt;&lt;/a&gt; method that is useful for involving asynchronous flows into a test.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;listen&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;You use the &lt;code&gt;listen&lt;/code&gt; keyword (with a timeout) to wait until that event occurs. The &lt;code&gt;listenResult&lt;/code&gt; magic variable will hold the value passed to the call to &lt;code&gt;karate.signal()&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This is best &lt;a href="https://github.com/karatelabs/karate/tree/master/karate-netty#consumer-provider-example"&gt;explained&lt;/a&gt; in this &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/mock/contract/payment-service.feature"&gt;example&lt;/a&gt; that involves listening to an ActiveMQ / JMS queue.&lt;/p&gt; 
&lt;p&gt;Note how &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions"&gt;JS functions&lt;/a&gt; defined at run-time can be mixed with custom &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-interop"&gt;Java code&lt;/a&gt; to get things done. You need to use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-tojava"&gt;&lt;code&gt;karate.toJava()&lt;/code&gt;&lt;/a&gt; to "wrap" JS functions passed to custom Java code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Background:
* def QueueConsumer = Java.type('mock.contract.QueueConsumer')
* def queue = new QueueConsumer(queueName)
* def handler = function(msg){ karate.signal(msg) }
* queue.listen(karate.toJava(handler))
* url paymentServiceUrl + '/payments'

Scenario: create, get, update, list and delete payments
    Given request { amount: 5.67, description: 'test one' }
    When method post
    Then status 200
    And match response == { id: '#number', amount: 5.67, description: 'test one' }
    And def id = response.id
    * listen 5000
    * json shipment = listenResult
    * print '### received:', shipment
    * match shipment == { paymentId: '#(id)', status: 'shipped' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;WebSocket&lt;/h2&gt; 
&lt;p&gt;Karate also has built-in support for &lt;a href="http://www.websocket.org"&gt;websocket&lt;/a&gt; that is based on the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#async"&gt;async&lt;/a&gt; capability and the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#listen"&gt;&lt;code&gt;listen&lt;/code&gt;&lt;/a&gt; keyword. The following method signatures are available on the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;&lt;code&gt;karate&lt;/code&gt; JS object&lt;/a&gt; to obtain a websocket client:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;karate.webSocket(url)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;karate.webSocket(url, handler)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;karate.webSocket(url, handler, options)&lt;/code&gt; - where &lt;code&gt;options&lt;/code&gt; is an optional JSON (or map-like) object that takes the following optional keys: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;subProtocol&lt;/code&gt; - in case the server expects it&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; - another JSON of key-value pairs&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;maxPayloadSize&lt;/code&gt; - this defaults to 4194304 (bytes, around 4 MB)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These will init a websocket client for the given &lt;code&gt;url&lt;/code&gt; and optional &lt;code&gt;subProtocol&lt;/code&gt;. You can call &lt;code&gt;send()&lt;/code&gt; on the returned object to send a message.&lt;/p&gt; 
&lt;p&gt;If a &lt;code&gt;handler&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#javascript-functions"&gt;function&lt;/a&gt; (returning a boolean) is provided - it will be used to complete the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#listen"&gt;&lt;code&gt;listen&lt;/code&gt;&lt;/a&gt; "wait" if &lt;code&gt;true&lt;/code&gt; is returned. A handler function is needed only if you have to ignore some incoming traffic and stop the "wait" when a certain payload arrives. If you don't pass a &lt;code&gt;handler&lt;/code&gt; (or it is &lt;code&gt;null&lt;/code&gt;), the first message is returned.&lt;/p&gt; 
&lt;p&gt;Note that &lt;code&gt;karate.signal()&lt;/code&gt; (described as part of the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#listen"&gt;&lt;code&gt;listen&lt;/code&gt;&lt;/a&gt; keyword) will be called internally and the &lt;code&gt;listenResult&lt;/code&gt; will be the payload contents of the "selected" message.&lt;/p&gt; 
&lt;p&gt;Here is an example, where the same websocket connection is used to send as well as receive a message.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def handler = function(msg){ return msg.startsWith('hello') }
* def socket = karate.webSocket(demoBaseUrl + '/websocket', handler)
* socket.send('Billie')
* listen 5000
* match listenResult == 'hello Billie !'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For handling binary messages, the same &lt;code&gt;karate.webSocket()&lt;/code&gt; method signatures exist for &lt;code&gt;karate.webSocketBinary()&lt;/code&gt;. Refer to these examples for more: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/websocket/echo.feature"&gt;&lt;code&gt;echo.feature&lt;/code&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/websocket/websocket.feature"&gt;&lt;code&gt;websocket.feature&lt;/code&gt;&lt;/a&gt;. Note that any websocket instances created will be auto-closed at the end of the &lt;code&gt;Scenario&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Java Function References&lt;/h3&gt; 
&lt;p&gt;JavaScript functions have some limitations when combined with multi-threaded Java code. So it is recommended that you directly use a Java &lt;code&gt;Function&lt;/code&gt; when possible instead of using the &lt;code&gt;karate.toJava()&lt;/code&gt; "wrapper" as shown above.&lt;/p&gt; 
&lt;p&gt;One pattern you can adopt is to create a "factory" method that returns a Java function - where you can easily delegate to the logic you want. For example, see the &lt;code&gt;sayHelloFactory()&lt;/code&gt; method below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;public class Hello {

    public static String sayHello(String message) {
        return "hello " + message;
    }

    public static Function&amp;lt;String, String&amp;gt; sayHelloFactory() {
        return s -&amp;gt; sayHello(s);
    }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And now, to get a reference to that "function" you can do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;* def sayHello = Java.type('com.myco.Hello').sayHelloFactory()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can be convenient when using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#shared-scope"&gt;shared scope&lt;/a&gt; because you can just call &lt;code&gt;sayHello('myname')&lt;/code&gt; where needed.&lt;/p&gt; 
&lt;h2&gt;Tags&lt;/h2&gt; 
&lt;p&gt;Gherkin has a great way to sprinkle meta-data into test-scripts - which gives you some interesting options when running tests in bulk. The most common use-case would be to partition your tests into 'smoke', 'regression' and the like - which enables being able to selectively execute a sub-set of tests.&lt;/p&gt; 
&lt;p&gt;The documentation on how to run tests via the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#test-suites"&gt;command line&lt;/a&gt; has an example of how to use tags to decide which tests to &lt;em&gt;not&lt;/em&gt; run (or ignore). Also see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/tags/first.feature"&gt;&lt;code&gt;first.feature&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/tags/second.feature"&gt;&lt;code&gt;second.feature&lt;/code&gt;&lt;/a&gt; in the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;demos&lt;/a&gt;. If you find yourself juggling multiple tags with logical &lt;code&gt;AND&lt;/code&gt; and &lt;code&gt;OR&lt;/code&gt; complexity, refer to this &lt;a href="https://stackoverflow.com/a/50693388/143475"&gt;Stack Overflow answer&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;For advanced users, Karate supports being able to query for tags within a test, and even tags in a &lt;code&gt;@name=value&lt;/code&gt; form. Refer to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-tags"&gt;&lt;code&gt;karate.tags&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-tagvalues"&gt;&lt;code&gt;karate.tagValues&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Special Tags&lt;/h3&gt; 
&lt;p&gt;For completeness, the "built-in" tags are the following:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tag&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;@ignore&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Any &lt;code&gt;Scenario&lt;/code&gt; with (or that has inherited) this tag will be skipped at run-time. This does not apply to anything that is "called" though&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;@parallel&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallelfalse"&gt;&lt;code&gt;@parallel=false&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;@report&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reportfalse"&gt;&lt;code&gt;@report=false&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;@setup&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#setup"&gt;&lt;code&gt;@setup&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;@env&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;See below&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;@envnot&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;See below&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Environment Tags&lt;/h3&gt; 
&lt;p&gt;There are two special tags that allow you to "select" or "un-select" a &lt;code&gt;Scenario&lt;/code&gt; depending on the value of &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#switching-the-environment"&gt;&lt;code&gt;karate.env&lt;/code&gt;&lt;/a&gt;. This can be really convenient, for example to &lt;em&gt;never&lt;/em&gt; run some tests in a certain "production like" or sensitive environment.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;@env=foo,bar&lt;/code&gt; - will run only when the value of &lt;code&gt;karate.env&lt;/code&gt; is not-null &lt;em&gt;and&lt;/em&gt; equal to &lt;code&gt;foo&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code&gt;bar&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@envnot=foo&lt;/code&gt; - will run when the value of &lt;code&gt;karate.env&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or anything &lt;em&gt;other than&lt;/em&gt; &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;@env=dev  
Scenario: runs only when karate.env is 'dev'
* print 'karate.env is:', karate.env
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since multiple values are supported, you can also do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;@envnot=perf,prod  
Scenario: never runs in perf or prod
* print 'karate.env is:', karate.env
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Tags And Examples&lt;/h3&gt; 
&lt;p&gt;A little-known capability of the Gherkin syntax is to be able to tag even specific rows in a bunch of examples ! You have to repeat the &lt;code&gt;Examples&lt;/code&gt; section for each tag. The example below combines this with the advanced features described above.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Scenario Outline: examples partitioned by tag
* def vals = karate.tagValues
* match vals.region[0] == expected

  @region=US
  Examples:
    | expected |
    | US       |

  @region=GB
  Examples:
    | expected |
    | GB       |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that if you tag &lt;code&gt;Examples&lt;/code&gt; like this, and if a tag selector is used when running a given &lt;code&gt;Feature&lt;/code&gt; - only the &lt;code&gt;Examples&lt;/code&gt; that match the tag selector will be executed. There is no concept of a "default" where for e.g. if there is no matching tag - that the &lt;code&gt;Examples&lt;/code&gt; without a tag will be executed. But note that you can use the negative form of a tag selector: &lt;code&gt;~@region=GB&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Dynamic Port Numbers&lt;/h2&gt; 
&lt;p&gt;In situations where you start an (embedded) application server as part of the test set-up phase, a typical challenge is that the HTTP port may be determined at run-time. So how can you get this value injected into the Karate configuration ?&lt;/p&gt; 
&lt;p&gt;It so happens that the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;&lt;code&gt;karate&lt;/code&gt;&lt;/a&gt; object has a field called &lt;code&gt;properties&lt;/code&gt; which can read a Java system-property by name like this: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-properties"&gt;&lt;code&gt;karate.properties['myName']&lt;/code&gt;&lt;/a&gt;. Since the &lt;code&gt;karate&lt;/code&gt; object is injected within &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; on start-up, it is a simple and effective way for other processes within the same JVM to pass configuration values to Karate at run-time. Refer to the 'demo' &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/karate-config.js"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; for an example and how the &lt;code&gt;demo.server.port&lt;/code&gt; system-property is set-up in the test runner: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/TestBase.java"&gt;&lt;code&gt;TestBase.java&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Java API&lt;/h2&gt; 
&lt;p&gt;Karate has a &lt;a href="https://twitter.com/KarateDSL/status/1353969718730788865"&gt;set of Java API-s&lt;/a&gt; that expose the HTTP, JSON, data-assertion and UI automation capabilities. The primary classes are described below.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/Http.java"&gt;&lt;code&gt;Http&lt;/code&gt;&lt;/a&gt; - build and execute any HTTP request and retrieve responses&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/Json.java"&gt;&lt;code&gt;Json&lt;/code&gt;&lt;/a&gt; - build and manipulate JSON data using JsonPath expressions, convert to and from Java &lt;code&gt;Map&lt;/code&gt;-s and &lt;code&gt;List&lt;/code&gt;-s, parse strings into JSON and convert Java objects into JSON&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/Match.java"&gt;&lt;code&gt;Match&lt;/code&gt;&lt;/a&gt; - exposes all of Karate's &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; capabilities, and this works for Java &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; objects&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/main/java/com/intuit/karate/driver/Driver.java"&gt;&lt;code&gt;Driver&lt;/code&gt;&lt;/a&gt; - perform &lt;a href="https://github.com/karatelabs/karate/tree/master/karate-core"&gt;web-browser automation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Do note that if you choose the Java API, you will naturally lose some of the test-automation framework benefits such as HTML reports, parallel execution and &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;JavaScript&lt;/a&gt; / &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;configuration&lt;/a&gt;. You may have to rely on unit-testing frameworks or integrate additional dependencies.&lt;/p&gt; 
&lt;h3&gt;jbang&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://www.jbang.dev"&gt;jbang&lt;/a&gt; is a great way for you to install and execute scripts that use Karate's Java API on any machine with minimal setup. Note that jbang itself is &lt;a href="https://www.jbang.dev/documentation/guide/latest/installation.html"&gt;super-easy to install&lt;/a&gt; and there is even a "&lt;a href="https://www.jbang.dev/documentation/guide/latest/installation.html#zero-install"&gt;Zero Install&lt;/a&gt;" option.&lt;/p&gt; 
&lt;p&gt;Here below is an example jbang script that uses the Karate &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-api"&gt;Java API&lt;/a&gt; to do some useful work. Name the file as &lt;code&gt;javadsl.java&lt;/code&gt; and run using the command: &lt;code&gt;jbang javadsl.java&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;please replace &lt;code&gt;RELEASE&lt;/code&gt; with the exact version of Karate you intend to use if applicable&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;///usr/bin/env jbang "$0" "$@" ; exit $?
//DEPS com.intuit.karate:karate-core:RELEASE:all

import com.intuit.karate.*;
import java.util.List;

public class javadsl {

    public static void main(String[] args) {
        List users = Http.to("https://jsonplaceholder.typicode.com/users")
                .get().json().asList();
        Match.that(users.get(0)).contains("{ name: 'Leanne Graham' }");
        String city = Json.of(users).get("$[0].address.city");
        Match.that("Gwenborough").isEqualTo(city);
        System.out.println("\n*** second user: " + Json.of(users.get(1)).toString());
    }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read the documentation of the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-netty#jbang"&gt;stand-alone JAR&lt;/a&gt; for more - such as how you can even install custom command-line applications using jbang !&lt;/p&gt; 
&lt;h3&gt;Invoking feature files using the Java API&lt;/h3&gt; 
&lt;p&gt;It is also possible to invoke a feature file via a Java API which can be useful in some test-automation situations.&lt;/p&gt; 
&lt;p&gt;A common use case is to mix API-calls into a larger test-suite, for example a Selenium or WebDriver UI test. So you can use Karate to set-up data via API calls, then run the UI test-automation, and finally again use Karate to assert that the system-state is as expected. Note that you can even include calls to a database from Karate using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;Java interop&lt;/a&gt;. And &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/dogs/dogs.feature"&gt;this example&lt;/a&gt; may make it clear why using Karate itself to drive even your UI-tests may be a good idea.&lt;/p&gt; 
&lt;p&gt;The static method &lt;code&gt;com.intuit.karate.Runner.runFeature()&lt;/code&gt; is best explained in this demo unit-test: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/java/JavaApiTest.java"&gt;&lt;code&gt;JavaApiTest.java&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can optionally pass in variable values or over-ride config via a &lt;code&gt;HashMap&lt;/code&gt; or leave the second-last argument as &lt;code&gt;null&lt;/code&gt;. The variable state after feature execution would be returned as a &lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;. The last &lt;code&gt;boolean&lt;/code&gt; argument is whether the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configuration"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; should be processed or not. Refer to the documentation on &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#type-conversion"&gt;type-conversion&lt;/a&gt; to make sure you can 'unpack' data returned from Karate correctly, especially when dealing with XML.&lt;/p&gt; 
&lt;h2&gt;Hooks&lt;/h2&gt; 
&lt;p&gt;If you are looking for &lt;a href="http://toolsqa.com/cucumber/cucumber-hooks/"&gt;Cucumber 'hooks'&lt;/a&gt; Karate does not support them, mainly because they depend on Java code, which goes against the Karate Way™.&lt;/p&gt; 
&lt;p&gt;Instead, Karate gives you all you need as part of the syntax. Here is a summary:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;To Run Some Code&lt;/th&gt; 
   &lt;th&gt;How&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Before &lt;em&gt;everything&lt;/em&gt; (or 'globally' once)&lt;/td&gt; 
   &lt;td&gt;See &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle"&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Before every &lt;code&gt;Scenario&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure"&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt;. Note that &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; is processed before &lt;em&gt;every&lt;/em&gt; &lt;code&gt;Scenario&lt;/code&gt; - so you can choose to put "global" config here, for example using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configure"&gt;&lt;code&gt;karate.configure()&lt;/code&gt;&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Once (or at the start of) every &lt;code&gt;Feature&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; in the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#script-structure"&gt;&lt;code&gt;Background&lt;/code&gt;&lt;/a&gt;. The advantage is that you can set up variables (using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; if needed) which can be used in all &lt;code&gt;Scenario&lt;/code&gt;-s within that &lt;code&gt;Feature&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;After every &lt;code&gt;Scenario&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure afterScenario&lt;/code&gt;&lt;/a&gt; (see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature"&gt;example&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;After every &lt;code&gt;Scenario Outline&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure afterScenarioOutline&lt;/code&gt;&lt;/a&gt; (see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature"&gt;example&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;At the end of the &lt;code&gt;Feature&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#configure"&gt;&lt;code&gt;configure afterFeature&lt;/code&gt;&lt;/a&gt; (see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/hooks/hooks.feature"&gt;example&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that for the &lt;code&gt;afterFeature&lt;/code&gt; hook to work, you should be using the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;&lt;code&gt;Runner&lt;/code&gt; API&lt;/a&gt; and not the JUnit runner.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Only recommended for advanced users, but this guarantees a routine is run only once, &lt;em&gt;even&lt;/em&gt; when &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#parallel-execution"&gt;running tests in parallel&lt;/a&gt;. You can use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-callsingle"&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt; in &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt; like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;var result = karate.callSingle('classpath:some/package/my.feature');
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It can take a second JSON argument following the same rules as &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#call"&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt;. Once you get a result, you typically use it to set global variables.&lt;/p&gt; 
&lt;p&gt;Refer to this example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/karate-config.js"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/headers/headers-single.feature"&gt;&lt;code&gt;headers-single.feature&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; use &lt;code&gt;karate.callSingle()&lt;/code&gt; directly in a &lt;code&gt;*.feature&lt;/code&gt; file, but it logically fits better in the global "bootstrap". Ideally it should return "pure JSON" and note that you always get a "deep clone" of the cached result object.&lt;/p&gt; 
&lt;p&gt;IMPORTANT: There are some restrictions when using &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#callonce"&gt;&lt;code&gt;callonce&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;karate.callSingle()&lt;/code&gt; especially within &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-configjs"&gt;&lt;code&gt;karate-config.js&lt;/code&gt;&lt;/a&gt;. Ideally you should return only &lt;em&gt;pure&lt;/em&gt; JSON data (or a primitive string, number etc.). Keep in mind that the reason this exists is to "cache" data, and &lt;em&gt;not&lt;/em&gt; behavior. So if you return complex objects such as a custom Java instance or a JS function that depends on complex objects, this &lt;a href="https://github.com/karatelabs/karate/issues/1558"&gt;&lt;em&gt;may&lt;/em&gt; cause issues when you run in parallel&lt;/a&gt;. If you really need to re-use a Java function, see &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#java-function-references"&gt;Java Function References&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Multiple calls using &lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The first argument to &lt;code&gt;karate.callSingle()&lt;/code&gt; is used as the "cache key". So if you tried to re-use the same feature but with multiple arguments, things will not work as you expect. But you can suffix a &lt;code&gt;?name&lt;/code&gt; to the feature to de-dupe it, like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;var adminResponse = karate.callSingle('classpath:get-token.feature?admin', {'username': 'admin', 'password': 'password123' });
var userResponse = karate.callSingle('classpath:get-token.feature?user', {'username': 'user', 'password': 'password456' });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now &lt;code&gt;adminResponse&lt;/code&gt; and &lt;code&gt;userResponse&lt;/code&gt; will be different, even though the same feature file is being used for a &lt;code&gt;callSingle()&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;configure callSingleCache&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;When re-running tests in development mode and when your test suite depends on say an &lt;code&gt;Authorization&lt;/code&gt; header set by &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karatecallsingle"&gt;&lt;code&gt;karate.callSingle()&lt;/code&gt;&lt;/a&gt;, you can cache the results locally to a file, which is very convenient when your "auth token" is valid for a period of a few minutes - which typically is the case. This means that as long as the token "on file" is valid, you can save time by not having to make the one or two HTTP calls needed to "sign-in" or create "throw-away" users in your SSO store.&lt;/p&gt; 
&lt;p&gt;So in "dev mode" you can easily set this behavior like this. Just ensure that this is "configured" &lt;em&gt;before&lt;/em&gt; you use &lt;code&gt;karate.callSingle()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;if (karate.env == 'local') {
  karate.configure('callSingleCache', { minutes: 15 });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default Karate will use &lt;code&gt;target&lt;/code&gt; (or &lt;code&gt;build&lt;/code&gt;) as the "cache" folder, which you can over-ride by adding a &lt;code&gt;dir&lt;/code&gt; key:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;  karate.configure('callSingleCache', { minutes: 15, dir: 'some/other/folder' });
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This caching behavior will work only if the result of &lt;code&gt;karate.callSingle()&lt;/code&gt; is a JSON-like object, and any JS functions or Java objects mixed in will be lost.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Data Driven Tests&lt;/h2&gt; 
&lt;h3&gt;The Cucumber Way&lt;/h3&gt; 
&lt;p&gt;Cucumber has a concept of &lt;a href="https://docs.cucumber.io/gherkin/reference/#scenario-outline"&gt;Scenario Outlines&lt;/a&gt; where you can re-use a set of data-driven steps and assertions, and the data can be declared in a very user-friendly fashion. Observe the usage of &lt;code&gt;Scenario Outline:&lt;/code&gt; instead of &lt;code&gt;Scenario:&lt;/code&gt;, and the new &lt;code&gt;Examples:&lt;/code&gt; section.&lt;/p&gt; 
&lt;p&gt;You should take a minute to compare this with the &lt;a href="https://github.com/basdijkstra/rest-assured-workshop/raw/d9734da98bfcd8087055bdcd78545581dd23cb77/src/test/java/answers/RestAssuredAnswers2Test.java"&gt;exact same example implemented in REST-assured and TestNG&lt;/a&gt;. Note that this example only does a "string equals" check on &lt;em&gt;parts&lt;/em&gt; of the JSON, but with Karate you are always encouraged to match the &lt;em&gt;entire&lt;/em&gt; payload in one step.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature: karate answers 2

Background:
  * url 'http://localhost:8080'

Scenario Outline: given circuit name, validate country
  Given path 'api/f1/circuits/&amp;lt;name&amp;gt;.json'
  When method get
  Then match $.MRData.CircuitTable.Circuits[0].Location.country == '&amp;lt;country&amp;gt;'

  Examples:
    | name   | country  |
    | monza  | Italy    |
    | spa    | Belgium  |
    | sepang | Malaysia |

Scenario Outline: given race number, validate number of pitstops for Max Verstappen in 2015
  Given path 'api/f1/2015/&amp;lt;race&amp;gt;/drivers/max_verstappen/pitstops.json'
  When method get
  Then assert response.MRData.RaceTable.Races[0].PitStops.length == &amp;lt;stops&amp;gt;

  Examples:
    | race | stops |
    | 1    | 1     |
    | 2    | 3     |
    | 3    | 2     |
    | 4    | 2     |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is great for testing boundary conditions against a single end-point, with the added bonus that your test becomes even more readable. This approach can certainly enable product-owners or domain-experts who are not programmer-folk, to review, and even collaborate on test-scenarios and scripts.&lt;/p&gt; 
&lt;h3&gt;Scenario Outline Enhancements&lt;/h3&gt; 
&lt;p&gt;Karate has enhanced the Cucumber &lt;code&gt;Scenario Outline&lt;/code&gt; as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Type Hints&lt;/strong&gt;: if the &lt;code&gt;Examples&lt;/code&gt; column header has a &lt;code&gt;!&lt;/code&gt; appended, each value will be evaluated as a JavaScript data-type (number, boolean, or &lt;em&gt;even&lt;/em&gt; in-line JSON) - else it defaults to string.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Magic Variables&lt;/strong&gt;: &lt;code&gt;__row&lt;/code&gt; gives you the entire row as a JSON object, and &lt;code&gt;__num&lt;/code&gt; gives you the row index (the first row is &lt;code&gt;0&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Auto Variables&lt;/strong&gt;: in addition to &lt;code&gt;__row&lt;/code&gt;, each column key-value will be available as a separate &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;variable&lt;/a&gt;, which greatly simplifies JSON manipulation - especially when you want to re-use JSON &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#reading-files"&gt;files&lt;/a&gt; containing &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#embedded-expressions"&gt;embedded expressions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Any empty cells will result in a &lt;code&gt;null&lt;/code&gt; value for that column-key, and this can be useful to &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#remove-if-null"&gt;remove nodes&lt;/a&gt; from JSON or XML documents&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These are best explained with &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/outline.feature"&gt;examples&lt;/a&gt;. You can choose between the string-placeholder style &lt;code&gt;&amp;lt;foo&amp;gt;&lt;/code&gt; or &lt;em&gt;directly&lt;/em&gt; refer to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#def"&gt;variable&lt;/a&gt; &lt;code&gt;foo&lt;/code&gt; (or even the &lt;em&gt;whole row&lt;/em&gt; JSON as &lt;code&gt;__row&lt;/code&gt;) in JSON-friendly &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;expressions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Note that even the scenario name can accept placeholders - which is very useful in reports.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Scenario Outline: name is &amp;lt;name&amp;gt; and age is &amp;lt;age&amp;gt;
  * def temp = '&amp;lt;name&amp;gt;'
  * match temp == name
  * match temp == __row.name
  * def expected = __num == 0 ? 'name is Bob and age is 5' : 'name is Nyan and age is 6'
  * match expected == karate.scenario.name

  Examples:
    | name | age |
    | Bob  | 5   |
    | Nyan | 6   |

Scenario Outline: magic variables with type hints
  * def expected = [{ name: 'Bob', age: 5 }, { name: 'Nyan', age: 6 }]
  * match __row == expected[__num]

  Examples:
    | name | age! |
    | Bob  | 5    |
    | Nyan | 6    |

Scenario Outline: embedded expressions and type hints
  * match __row == { name: '#(name)', alive: '#boolean' }

  Examples:
    | name | alive! |
    | Bob  | false  |
    | Nyan | true   |

Scenario Outline: inline json
  * match __row == { first: 'hello', second: { a: 1 } }
  * match first == 'hello'
  * match second == { a: 1 }

  Examples:
    | first  | second!  |
    | hello  | { a: 1 } |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For another example, see: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/outline/examples.feature"&gt;&lt;code&gt;examples.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you're looking for more complex ways of dynamically naming your scenarios you can use JS string interpolation by including placeholders in your scenario name.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Scenario Outline: name is ${name.first} ${name.last} and age is ${age}
  * match name.first == "#? _ == 'Bob' || _ == 'Nyan'"
  * match name.last == "#? _ == 'Dylan' || _ == 'Cat'"
  * match title == karate.scenario.name

Examples:
  | name!                               | age | title                           |
  | { "first": "Bob", "last": "Dylan" } | 10  | name is Bob Dylan and age is 10 |
  | { "first": "Nyan", "last": "Cat" }  | 5   | name is Nyan Cat and age is 5   |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;String interpolation will support variables in scope and / or the &lt;code&gt;Examples&lt;/code&gt; (including functions defined globally, but not functions defined in the background). Even Java interop and access to the &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#the-karate-object"&gt;&lt;code&gt;karate&lt;/code&gt; JS API&lt;/a&gt; would work.&lt;/p&gt; 
&lt;p&gt;For some more examples check &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-core/src/test/java/com/intuit/karate/core/parser/test-outline-name-js.feature"&gt;&lt;code&gt;test-outline-name-js.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;The Karate Way&lt;/h3&gt; 
&lt;p&gt;The limitation of the Cucumber &lt;code&gt;Scenario Outline:&lt;/code&gt; (seen above) is that the number of rows in the &lt;code&gt;Examples:&lt;/code&gt; is fixed. But take a look at how Karate can &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#data-driven-features"&gt;loop over a &lt;code&gt;*.feature&lt;/code&gt; file&lt;/a&gt; for each object in a JSON array - which gives you dynamic data-driven testing, if you need it. For advanced examples, refer to some of the scenarios within this &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo"&gt;demo&lt;/a&gt;: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/search/dynamic-params.feature#L70"&gt;&lt;code&gt;dynamic-params.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Also see the option below, where you can data-drive an &lt;code&gt;Examples:&lt;/code&gt; table using JSON.&lt;/p&gt; 
&lt;h3&gt;Dynamic Scenario Outline&lt;/h3&gt; 
&lt;p&gt;You can feed an &lt;code&gt;Examples&lt;/code&gt; table from a custom data-source, which is great for those situations where the table-content is dynamically resolved at run-time. This capability is triggered when the table consists of a single "cell", i.e. there is exactly one row and one column in the table.&lt;/p&gt; 
&lt;h4&gt;JSON Array Data Source&lt;/h4&gt; 
&lt;p&gt;The "scenario expression" result is expected to be an array of JSON objects. Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature: scenario outline using a JSON array as the data-source

Scenario Outline: cat name: ${name}
    Given url demoBaseUrl
    And path 'cats'
    And request { name: '#(name)' }
    When method post
    Then status 200
    And match response == { id: '#number', name: '#(name)' }

    # the single cell can be any valid karate expression
    Examples:
    | read('../callarray/kittens.json') |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see the structure of the data here: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/callarray/kittens.json"&gt;&lt;code&gt;kittens.json&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Any &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#karate-expressions"&gt;Karate expression&lt;/a&gt; can be used in the "cell expression", and you can even use &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#calling-java"&gt;Java-interop&lt;/a&gt; to use external data-sources such as a database.&lt;/p&gt; 
&lt;p&gt;Note that Karate has built-in support for &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#csv-files"&gt;CSV files&lt;/a&gt; and here is an example: &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/karate-demo/src/test/java/demo/outline/dynamic-csv.feature"&gt;&lt;code&gt;dynamic-csv.feature&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;@setup&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;In cases where the data-source needs multiple steps, for e.g. if an API needs to be called to get a JSON array, you can call a separate &lt;code&gt;Scenario&lt;/code&gt; to "set up" this data. The &lt;code&gt;@setup&lt;/code&gt; tag is built-in for this purpose and any &lt;code&gt;Scenario&lt;/code&gt; tagged with this will behave like &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#special-tags"&gt;&lt;code&gt;@ignore&lt;/code&gt;&lt;/a&gt;. So the only way to call this &lt;code&gt;Scenario&lt;/code&gt; is by using the &lt;code&gt;karate.setup()&lt;/code&gt; JS API.&lt;/p&gt; 
&lt;p&gt;Here is the above example re-written to do so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature: scenario outline using a JSON array as the data-source

@setup
Scenario:
* def kittens = read('../callarray/kittens.json')

Scenario Outline: cat name: ${name}
    Given url demoBaseUrl
    And path 'cats'
    And request { name: '#(name)' }
    When method post
    Then status 200
    And match response == { id: '#number', name: '#(name)' }

    Examples:
    | karate.setup().kittens |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The result of &lt;code&gt;karate.setup()&lt;/code&gt; will be a JSON of all the variables created within the &lt;code&gt;Scenario&lt;/code&gt; tagged with &lt;code&gt;@setup&lt;/code&gt;. Note how we "unpack" the &lt;code&gt;kittens&lt;/code&gt; and use it to "data drive" the &lt;code&gt;Scenario Outline&lt;/code&gt;. You can get really creative and use &lt;a href="https://github.com/karatelabs/karate/issues/1905#issuecomment-1207342290"&gt;JS functions to filter data&lt;/a&gt; for different needs.&lt;/p&gt; 
&lt;p&gt;Note that &lt;code&gt;@setup&lt;/code&gt; is designed specifically to create data for a &lt;a href="https://raw.githubusercontent.com/karatelabs/karate/master/#dynamic-scenario-outline"&gt;dynamic &lt;code&gt;Scenario Outline&lt;/code&gt;&lt;/a&gt; and it is the first thing to execute within a &lt;code&gt;Feature&lt;/code&gt;. In other words, it &lt;em&gt;cannot&lt;/em&gt; depend on the &lt;code&gt;Background&lt;/code&gt;. The &lt;code&gt;Background&lt;/code&gt; will be used for each &lt;code&gt;Scenario&lt;/code&gt; that is spawned from a &lt;code&gt;Scenario Outline&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Though not really recommended, you can have multiple &lt;code&gt;Scenario&lt;/code&gt;-s within a &lt;code&gt;Feature&lt;/code&gt; tagged with &lt;code&gt;@setup&lt;/code&gt;. But in that case you should de-dupe them using a name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature:

@setup=myname
Scenario:
* def data = [{ a: 1 }, { a: 2}]

Scenario Outline:
* print __row

Examples:
| karate.setup('myname').data |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And since it is common to run a &lt;code&gt;@setup&lt;/code&gt; &lt;code&gt;Scenario&lt;/code&gt; only once per-feature you can call &lt;code&gt;karate.setupOnce()&lt;/code&gt;. In the feature below, the &lt;code&gt;* print 'in setup'&lt;/code&gt; step will run only once. Also note how the &lt;code&gt;Background&lt;/code&gt; will run 4 times (twice per &lt;code&gt;Scenario&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature:

Background:
* print 'in background', __num

@setup
Scenario:
* print 'in setup'
* def data = [{a:1}, {a:2}]

Scenario Outline: first
* print __row

Examples:
| karate.setupOnce().data |

Scenario Outline: second
* print __row

Examples:
| karate.setupOnce().data |
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;JSON Function Data Source&lt;/h4&gt; 
&lt;p&gt;An advanced option is where the "scenario expression" returns a JavaScript "generator" function. This is a very powerful way to generate test-data without having to load a large number of data rows into memory. The function has to return a JSON object. To signal the end of the data, just return &lt;code&gt;null&lt;/code&gt;. The function argument is the row-index, so you can easily determine &lt;em&gt;when&lt;/em&gt; to stop the generation of data. Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cucumber"&gt;Feature: scenario outline using a dynamic generator function

@setup
Scenario:
    * def generator = function(i){ if (i == 20) return null; return { name: 'cat' + i, age: i } }

Scenario Outline: cat name: ${name}
    Given url demoBaseUrl
    And path 'cats'
    And request { name: '#(name)', age: '#(age)' }
    When method post
    Then status 200
    And match response == { id: '#number', name: '#(name)' }

    Examples:
    | karate.setup().generator |
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>