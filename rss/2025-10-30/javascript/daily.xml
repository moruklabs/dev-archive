<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Wed, 29 Oct 2025 01:34:26 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>qeeqbox/social-analyzer</title>
      <link>https://github.com/qeeqbox/social-analyzer</link>
      <description>&lt;p&gt;API, CLI, and Web App for analyzing and finding a person's profile in 1000 social media \ websites&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/socialanalyzerlogo_.png" /&gt;&lt;/p&gt; 
&lt;p&gt;Social Analyzer - API, CLI, and Web App for analyzing &amp;amp; finding a person's profile across +1000 social media \ websites. It includes different analysis and detection modules, and you can choose which modules to use during the investigation process.&lt;/p&gt; 
&lt;p&gt;The detection modules utilize a rating mechanism based on different detection techniques, which produces a rate value that starts from 0 to 100 (No-Maybe-Yes). This module is intended to have fewer false positives.&lt;/p&gt; 
&lt;p&gt;The analysis and public extracted information from this OSINT tool could help investigate profiles related to suspicious or malicious activities such as cyberbullying, cyber grooming, cyberstalking, and spreading misinformation.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;This project is currently used by some law enforcement agencies in countries where resources are limited - The detection database is different than the one shared here..&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;So·cial Me·di·a&lt;/h2&gt; 
&lt;p&gt;Websites and applications that enable users to create and share content or to participate in social networking - Oxford Dictionary&lt;/p&gt; 
&lt;h2&gt;Structure&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/structure.png" /&gt; 
&lt;h2&gt;APP (Preferred!)&lt;/h2&gt; 
&lt;p&gt;Standard localhost WEB APP url: &lt;a href="http://0.0.0.0:9005/app.html"&gt;http://0.0.0.0:9005/app.html&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/intro_fast.gif" style="max-width:768px" /&gt; 
&lt;h2&gt;CLI&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/cli.gif" style="max-width:768px" /&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;String &amp;amp; name analysis (Permutations and Combinations)&lt;/li&gt; 
 &lt;li&gt;Find a profile using multiple techniques (HTTPS library &amp;amp; Webdriver)&lt;/li&gt; 
 &lt;li&gt;Multi profile search (Used for correlation - any combination separated with "," )&lt;/li&gt; 
 &lt;li&gt;Multilayers detections (OCR, normal, advanced &amp;amp; special)&lt;/li&gt; 
 &lt;li&gt;Visualized profile information using Ixora (Metadata &amp;amp; Patterns)&lt;/li&gt; 
 &lt;li&gt;Metadata &amp;amp; Patterns extraction (Added from Qeeqbox OSINT project)&lt;/li&gt; 
 &lt;li&gt;Force-directed Graph for Metadata (Needs ExtractPatterns)&lt;/li&gt; 
 &lt;li&gt;Search by top ranking or by country (Alexa Ranking)&lt;/li&gt; 
 &lt;li&gt;Search by type (adult, music, etc.. - automated websites stats)&lt;/li&gt; 
 &lt;li&gt;Profiles stats and static info (Category country)&lt;/li&gt; 
 &lt;li&gt;Cross Metadata stats (Added from Qeeqbox OSINT project)&lt;/li&gt; 
 &lt;li&gt;Auto-flirtation to unnecessary output (Enable javascript etc..)&lt;/li&gt; 
 &lt;li&gt;Search engine lookup (Google API - optional)&lt;/li&gt; 
 &lt;li&gt;Custom search queries (Google API &amp;amp; DuckDuckGo API - optional)&lt;/li&gt; 
 &lt;li&gt;Profile screenshot, title, info, and website description&lt;/li&gt; 
 &lt;li&gt;Find name origins, name similarity &amp;amp; common words by language&lt;/li&gt; 
 &lt;li&gt;Find possible profile\person age (Limited analysis)&lt;/li&gt; 
 &lt;li&gt;Custom user-agent, proxy, timeout &amp;amp; implicit wait&lt;/li&gt; 
 &lt;li&gt;Python CLI &amp;amp; NodeJS CLI (limited to FindUserProfilesFast option)&lt;/li&gt; 
 &lt;li&gt;Screenshots of detected profile (The latest version of Chrome must be installed)&lt;/li&gt; 
 &lt;li&gt;Grid option for faster checking (limited to docker-compose)&lt;/li&gt; 
 &lt;li&gt;Dump logs to folder or terminal (prettified)&lt;/li&gt; 
 &lt;li&gt;Adjust finding\getting profile workers (default 15)&lt;/li&gt; 
 &lt;li&gt;Re-checking option for failed profiles&lt;/li&gt; 
 &lt;li&gt;Filter profiles by good, maybe, and bad&lt;/li&gt; 
 &lt;li&gt;Save the analysis as a JSON file&lt;/li&gt; 
 &lt;li&gt;Simplified web interface and CLI&lt;/li&gt; 
 &lt;li&gt;And, more!!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Special Detections&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Facebook (Phone number, name, or profile name)&lt;/li&gt; 
 &lt;li&gt;Gmail (&lt;a href="mailto:example@gmail.com"&gt;example@gmail.com&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Google (&lt;a href="mailto:example@example.com"&gt;example@example.com&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install &amp;amp; Run&lt;/h2&gt; 
&lt;h3&gt;Linux (As Node WebApp)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get update
#Depedning on your Linux distro, you may or may not need these 2 lines
sudo DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
sudo add-apt-repository ppa:mozillateam/ppa -y
sudo apt-get install -y firefox-esr tesseract-ocr git nodejs npm
git clone https://github.com/qeeqbox/social-analyzer.git
cd social-analyzer
npm update
npm install
npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux (As Node CLI)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get update
#Depedning on your Linux distro, you may or may not need these 2 lines
sudo DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
sudo add-apt-repository ppa:mozillateam/ppa -y
sudo apt-get install -y firefox-esr tesseract-ocr git nodejs npm
git clone https://github.com/qeeqbox/social-analyzer.git
cd social-analyzer
npm install
nodejs app.js --username "johndoe"
#or
nodejs app.js --username "johndoe,janedoe" --metadata
#or
nodejs app.js --username "johndoe,janedoe" --metadata --top 100
#or
nodejs app.js --username "johndoe" --type "adult"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux (As python package)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get update
sudo apt-get install python3 python3-pip
pip3 install social-analyzer
python3 -m social-analyzer --username "johndoe"
#or
python3 -m social-analyzer --username "johndoe" --metadata
#or
python3 -m social-analyzer --username "johndoe" --metadata --top 100
#or
python3 -m social-analyzer --username "johndoe" --type "adult"
#or
python3 -m social-analyzer --username "johndoe" --websites "car" --logs --screenshots
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux (As python script)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get update
sudo apt-get install git python3 python3-pip
git clone https://github.com/qeeqbox/social-analyzer
cd social-analyzer
pip3 install -r requirements.txt
python3 app.py --username "janedoe"
#or
python3 app.py --username "johndoe" --metadata
#or
python3 app.py --username "johndoe" --metadata --top 100
#or
python3 app.py --username "johndoe" --type "adult"
#or
python3 app.py --username "johndoe" --websites "car" --logs --screenshots
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Importing as object (python)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;
#E.g. #1
from importlib import import_module
SocialAnalyzer = import_module("social-analyzer").SocialAnalyzer()
results = SocialAnalyzer.run_as_object(username="johndoe",silent=True)
print(results)

#E.g. #2
from importlib import import_module
SocialAnalyzer = import_module("social-analyzer").SocialAnalyzer()
results = SocialAnalyzer.run_as_object(username="johndoe,janedoe",silent=True,output="json",filter="good",metadata=False,timeout=10, profiles="detected")
print(results)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux, Windows, MacOS, Raspberry pi..&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;check this &lt;a href="https://github.com/qeeqbox/social-analyzer/wiki/install"&gt;wiki&lt;/a&gt; for all possible installation methods&lt;/li&gt; 
 &lt;li&gt;check this &lt;a href="https://github.com/qeeqbox/social-analyzer/wiki/integration"&gt;wiki&lt;/a&gt; for integrating social-analyzer with your OSINT tools, feeds, etc...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;social-analyzer --h&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Required Arguments:
  --username   E.g. johndoe, john_doe or johndoe9999

Optional Arguments:
  --websites    A website or websites separated by space E.g. youtube, tiktokor tumblr
  --mode        Analysis mode E.g.fast -&amp;gt; FindUserProfilesFast, slow -&amp;gt; FindUserProfilesSlow or special -&amp;gt; FindUserProfilesSpecial
  --output      Show the output in the following format: json -&amp;gt; json outputfor integration or pretty -&amp;gt; prettify the output
  --options     Show the following when a profile is found: link, rate, titleor text
  --method      find -&amp;gt; show detected profiles, get -&amp;gt; show all profiles regardless detected or not, all -&amp;gt; combine find &amp;amp; get
  --filter      Filter detected profiles by good, maybe or bad, you can do combine them with comma (good,bad) or use all
  --profiles    Filter profiles by detected, unknown or failed, you can do combine them with comma (detected,failed) or use all
  --countries   select websites by country or countries separated by space as: us br ru
  --type        Select websites by type (Adult, Music etc)
  --top         select top websites as 10, 50 etc...[--websites is not needed]
  --extract     Extract profiles, urls &amp;amp; patterns if possible
  --metadata    Extract metadata if possible (pypi QeeqBox OSINT)
  --trim        Trim long strings
  --gui         Reserved for a gui (Not implemented)
  --cli         Reserved for a cli (Not needed)

Listing websites &amp;amp; detections:
  --list        List all available websites

Setting:
  --headers     Headers as dict
  --logs_dir    Change logs directory
  --timeout     Change timeout between each request
  --silent      Disable output to screen
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Open Shell&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https://github.com/qeeqbox/social-analyzer&amp;amp;tutorial=README.md"&gt;&lt;img src="https://img.shields.io/static/v1?label=%3E_&amp;amp;message=Open%20in%20Cloud%20Shell&amp;amp;color=3267d6&amp;amp;style=flat-square" alt="Open in Cloud Shell" /&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/qeeqbox/social-analyzer"&gt;&lt;img src="https://img.shields.io/static/v1?label=%3E_&amp;amp;message=Open%20in%20repl.it%20Shell&amp;amp;color=606c74&amp;amp;style=flat-square" alt="Open in repl.it Shell" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;DuckDuckGo API, Google API, NodeJS, bootstrap, selectize, jQuery, Wikipedia, font-awesome, selenium-webdriver &amp;amp; tesseract.js&lt;/li&gt; 
 &lt;li&gt;Let me know if I missed a reference or resource!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Disclaimer\Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download this project from GitHub and treat it as a security project&lt;/li&gt; 
 &lt;li&gt;If you want your website to be excluded from this project list, please reach out to me&lt;/li&gt; 
 &lt;li&gt;This tool is meant to be used locally, not as a service (It does not have any Access Control)&lt;/li&gt; 
 &lt;li&gt;For issues related to modules that end with -private or under the private group &lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/modules.png" alt="" /&gt;, reach out directly to me (do not open an issue on GitHub)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other Projects&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/qeeqbox/analyzer"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/analyzer.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/chameleon"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/chameleon.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/honeypots"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/honeypots.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/osint"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/osint.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/url-sandbox"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/url-sandbox.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/mitre-visualizer"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/mitre-visualizer.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/woodpecker"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/woodpecker.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/docker-images"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/docker-images.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/seahorse"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/seahorse.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/rhino"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/rhino.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/raven"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/raven.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/image-analyzer"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/image-analyzer.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>trekhleb/javascript-algorithms</title>
      <link>https://github.com/trekhleb/javascript-algorithms</link>
      <description>&lt;p&gt;📝 Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Algorithms and Data Structures&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;🇺🇦 UKRAINE &lt;a href="https://war.ukraine.ua/"&gt;IS BEING ATTACKED&lt;/a&gt; BY RUSSIAN ARMY. CIVILIANS ARE GETTING KILLED. RESIDENTIAL AREAS ARE GETTING BOMBED.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Help Ukraine via: 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://prytulafoundation.org/en/"&gt;Serhiy Prytula Charity Foundation&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://savelife.in.ua/en/donate-en/"&gt;Come Back Alive Charity Foundation&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi"&gt;National Bank of Ukraine&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;More info on &lt;a href="https://war.ukraine.ua/"&gt;war.ukraine.ua&lt;/a&gt; and &lt;a href="https://twitter.com/MFA_Ukraine"&gt;MFA of Ukraine&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://github.com/trekhleb/javascript-algorithms/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/trekhleb/javascript-algorithms"&gt;&lt;img src="https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/repo-size/trekhleb/javascript-algorithms.svg?sanitize=true" alt="repo size" /&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;/p&gt; 
&lt;p&gt;Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-CN.md"&gt;&lt;em&gt;简体中文&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-TW.md"&gt;&lt;em&gt;繁體中文&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ko-KR.md"&gt;&lt;em&gt;한국어&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ja-JP.md"&gt;&lt;em&gt;日本語&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pl-PL.md"&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.fr-FR.md"&gt;&lt;em&gt;Français&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.es-ES.md"&gt;&lt;em&gt;Español&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pt-BR.md"&gt;&lt;em&gt;Português&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ru-RU.md"&gt;&lt;em&gt;Русский&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.tr-TR.md"&gt;&lt;em&gt;Türkçe&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.it-IT.md"&gt;&lt;em&gt;Italiano&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.id-ID.md"&gt;&lt;em&gt;Bahasa Indonesia&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uk-UA.md"&gt;&lt;em&gt;Українська&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ar-AR.md"&gt;&lt;em&gt;Arabic&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.vi-VN.md"&gt;&lt;em&gt;Tiếng Việt&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.de-DE.md"&gt;&lt;em&gt;Deutsch&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uz-UZ.md"&gt;&lt;em&gt;Uzbek&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.he-IL.md"&gt;&lt;em&gt;עברית&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Data Structures&lt;/h2&gt; 
&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt; 
&lt;p&gt;Remember that each data has its own trade-offs. And you need to pay attention more to why you're choosing a certain data structure than to how to implement it.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/linked-list"&gt;Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/doubly-linked-list"&gt;Doubly Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/queue"&gt;Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/stack"&gt;Stack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/hash-table"&gt;Hash Table&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/heap"&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/priority-queue"&gt;Priority Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/trie"&gt;Trie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree"&gt;Tree&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/binary-search-tree"&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/avl-tree"&gt;AVL Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/red-black-tree"&gt;Red-Black Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/segment-tree"&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/fenwick-tree"&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/graph"&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/disjoint-set"&gt;Disjoint Set&lt;/a&gt; - a union–find data structure or merge–find set&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/bloom-filter"&gt;Bloom Filter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/lru-cache/"&gt;LRU Cache&lt;/a&gt; - Least Recently Used (LRU) cache&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Algorithms&lt;/h2&gt; 
&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is a set of rules that precisely define a sequence of operations.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;h3&gt;Algorithms by Topic&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Math&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/bits"&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/binary-floating-point"&gt;Binary Floating Point&lt;/a&gt; - binary representation of the floating-point numbers.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/factorial"&gt;Factorial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci"&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/prime-factors"&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan's theorem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/primality-test"&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm"&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/least-common-multiple"&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/sieve-of-eratosthenes"&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/is-power-of-two"&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle"&gt;Pascal's Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/complex-number"&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/radian"&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering"&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/horner-method"&gt;Horner's method&lt;/a&gt; - polynomial evaluation&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix"&gt;Matrices&lt;/a&gt; - matrices and basic matrix operations (multiplication, transposition, etc.)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-distance"&gt;Euclidean Distance&lt;/a&gt; - distance between two points/vectors/matrices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition"&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/square-root"&gt;Square Root&lt;/a&gt; - Newton's method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/liu-hui"&gt;Liu Hui π Algorithm&lt;/a&gt; - approximate π calculations based on N-gons&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform"&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/cartesian-product"&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/fisher-yates"&gt;Fisher–Yates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set"&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise, backtracking, and cascading solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations"&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations"&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence"&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence"&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence"&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem"&gt;Knapsack Problem&lt;/a&gt; - "0/1" and "Unbound" ones&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt; - "Brute Force" and "Dynamic Programming" (Kadane's) versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum"&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/hamming-distance"&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/palindrome"&gt;Palindrome&lt;/a&gt; - check if the string is the same in reverse&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance"&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/knuth-morris-pratt"&gt;Knuth–Morris–Pratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/z-algorithm"&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/rabin-karp"&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring"&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching"&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Searches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search"&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/jump-search"&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search"&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/interpolation-search"&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sorting&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bubble-sort"&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/selection-sort"&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/insertion-sort"&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/heap-sort"&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort"&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort"&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/shell-sort"&gt;Shellsort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/counting-sort"&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/radix-sort"&gt;Radix Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bucket-sort"&gt;Bucket Sort&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/traversal"&gt;Straight Traversal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/reverse-traversal"&gt;Reverse Traversal&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Trees&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search"&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/breadth-first-search"&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Graphs&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search"&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/breadth-first-search"&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal"&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra"&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford"&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall"&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/detect-cycle"&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim"&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/topological-sorting"&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/articulation-points"&gt;Articulation Points&lt;/a&gt; - Tarjan's algorithm (DFS based)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bridges"&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/eulerian-path"&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury's algorithm - Visit every edge exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle"&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/strongly-connected-components"&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju's algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman"&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/polynomial-hash"&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/rail-fence-cipher"&gt;Rail Fence Cipher&lt;/a&gt; - a transposition cipher algorithm for encoding messages&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/caesar-cipher"&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/hill-cipher"&gt;Hill Cipher&lt;/a&gt; - substitution cipher based on linear algebra&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://github.com/trekhleb/nano-neuron"&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/knn"&gt;k-NN&lt;/a&gt; - k-nearest neighbors classification algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/k-means"&gt;k-Means&lt;/a&gt; - k-Means clustering algorithm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Image Processing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving"&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Statistics&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/statistics/weighted-random"&gt;Weighted Random&lt;/a&gt; - select the random item from the list based on items' weights&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Evolutionary algorithms&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://github.com/trekhleb/self-parking-car-evolution"&gt;Genetic algorithm&lt;/a&gt; - example of how the genetic algorithm may be applied for training the self-parking cars&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Uncategorized&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower"&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/square-matrix-rotation"&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal's Triangle based examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks"&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/stack/valid-parentheses"&gt;Valid Parentheses&lt;/a&gt; - check if a string has valid parentheses (using stack)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens"&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour"&gt;Knight's Tour&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Algorithms by Paradigm&lt;/h3&gt; 
&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class of algorithms. It is an abstraction higher than the notion of an algorithm, just as an algorithm is an abstraction higher than a computer program.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search"&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman"&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform"&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem"&gt;Unbound Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra"&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim"&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal"&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search"&gt;Binary Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower"&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle"&gt;Pascal's Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm"&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort"&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort"&gt;Quicksort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search"&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search"&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix"&gt;Matrices&lt;/a&gt; - generating and traversing the matrices of different shapes&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering"&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks"&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations"&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations"&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci"&gt;Fibonacci Number&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving"&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance"&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence"&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring"&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence"&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence"&gt;Shortest Common Supersequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem"&gt;0/1 Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition"&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford"&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall"&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching"&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate the next solution, you test if it satisfies all conditions and only then continue generating subsequent solutions. Otherwise, backtrack and go on a different path to finding a solution. Normally the DFS traversal of state-space is being used. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set"&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle"&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens"&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour"&gt;Knight's Tour&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum"&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of a least-cost solution to the problem in order to discard partial solutions with costs larger than the lowest-cost solution found so far. Normally, BFS traversal in combination with DFS traversal of state-space tree is being used.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to use this repository&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may want to run it to check code quality.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm run lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- 'LinkedList'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If linting or testing is failing, try to delete the &lt;code&gt;node_modules&lt;/code&gt; folder and re-install npm packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rm -rf ./node_modules
npm i
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also, make sure that you're using the correct Node version (&lt;code&gt;&amp;gt;=16&lt;/code&gt;). If you're using &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; for Node version management you may run &lt;code&gt;nvm use&lt;/code&gt; from the root folder of the project and the correct version will be picked up.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Then just, simply run the following command to test if your playground code works as expected:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- 'playground'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Useful Information&lt;/h2&gt; 
&lt;h3&gt;References&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8"&gt;▶ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://okso.app/showcase/data-structures"&gt;✍🏻 Data Structure Sketches&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Big O Notation&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows. On the chart below, you may find the most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/assets/big-o-graph.png" alt="Big O graphs" /&gt;&lt;/p&gt; 
&lt;p&gt;Source: &lt;a href="http://bigocheatsheet.com/"&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Big O Notation&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Computations for 10 elements&lt;/th&gt; 
   &lt;th&gt;Computations for 100 elements&lt;/th&gt; 
   &lt;th&gt;Computations for 1000 elements&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Constant&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(log N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Logarithmic&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;9&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Linear&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;100&lt;/td&gt; 
   &lt;td&gt;1000&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N log N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;n log(n)&lt;/td&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;600&lt;/td&gt; 
   &lt;td&gt;9000&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N^2)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Quadratic&lt;/td&gt; 
   &lt;td&gt;100&lt;/td&gt; 
   &lt;td&gt;10000&lt;/td&gt; 
   &lt;td&gt;1000000&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(2^N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Exponential&lt;/td&gt; 
   &lt;td&gt;1024&lt;/td&gt; 
   &lt;td&gt;1.26e+29&lt;/td&gt; 
   &lt;td&gt;1.07e+301&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N!)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Factorial&lt;/td&gt; 
   &lt;td&gt;3628800&lt;/td&gt; 
   &lt;td&gt;9.3e+157&lt;/td&gt; 
   &lt;td&gt;4.02e+2567&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Data Structure Operations Complexity&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Data Structure&lt;/th&gt; 
   &lt;th align="center"&gt;Access&lt;/th&gt; 
   &lt;th align="center"&gt;Search&lt;/th&gt; 
   &lt;th align="center"&gt;Insertion&lt;/th&gt; 
   &lt;th align="center"&gt;Deletion&lt;/th&gt; 
   &lt;th align="left"&gt;Comments&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Linked List&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Hash Table&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;-&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="left"&gt;In case of perfect hash function costs would be O(1)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Binary Search Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="left"&gt;In case of balanced tree costs would be O(log(n))&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Red-Black Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;AVL Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Bloom Filter&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;-&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;-&lt;/td&gt; 
   &lt;td align="left"&gt;False positives are possible while searching&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Array Sorting Algorithms Complexity&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th align="center"&gt;Best&lt;/th&gt; 
   &lt;th align="center"&gt;Average&lt;/th&gt; 
   &lt;th align="center"&gt;Worst&lt;/th&gt; 
   &lt;th align="center"&gt;Memory&lt;/th&gt; 
   &lt;th align="center"&gt;Stable&lt;/th&gt; 
   &lt;th align="left"&gt;Comments&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Bubble sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Insertion sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Selection sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Heap sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Merge sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Quick sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="left"&gt;Quicksort is usually done in-place with O(log(n)) stack space&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Shell sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;depends on gap sequence&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;(log(n))&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Counting sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n + r&lt;/td&gt; 
   &lt;td align="center"&gt;n + r&lt;/td&gt; 
   &lt;td align="center"&gt;n + r&lt;/td&gt; 
   &lt;td align="center"&gt;n + r&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;r - biggest number in array&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Radix sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n * k&lt;/td&gt; 
   &lt;td align="center"&gt;n * k&lt;/td&gt; 
   &lt;td align="center"&gt;n * k&lt;/td&gt; 
   &lt;td align="center"&gt;n + k&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;k - length of longest key&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Project Backers&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You may support this project via ❤️️ &lt;a href="https://github.com/sponsors/trekhleb"&gt;GitHub&lt;/a&gt; or ❤️️ &lt;a href="https://www.patreon.com/trekhleb"&gt;Patreon&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms/raw/master/BACKERS.md"&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;∑ = 1&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://trekhleb.dev"&gt;@trekhleb&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A few more &lt;a href="https://trekhleb.dev/projects/"&gt;projects&lt;/a&gt; and &lt;a href="https://trekhleb.dev/blog/"&gt;articles&lt;/a&gt; about JavaScript and algorithms on &lt;a href="https://trekhleb.dev"&gt;trekhleb.dev&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NginxProxyManager/nginx-proxy-manager</title>
      <link>https://github.com/NginxProxyManager/nginx-proxy-manager</link>
      <description>&lt;p&gt;Docker container for managing Nginx proxy hosts with a simple, powerful interface&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://nginxproxymanager.com/github.png" /&gt; &lt;br /&gt;&lt;br /&gt; &lt;img src="https://img.shields.io/badge/version-2.12.6-green.svg?style=for-the-badge" /&gt; &lt;a href="https://hub.docker.com/repository/docker/jc21/nginx-proxy-manager"&gt; &lt;img src="https://img.shields.io/docker/stars/jc21/nginx-proxy-manager.svg?style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/repository/docker/jc21/nginx-proxy-manager"&gt; &lt;img src="https://img.shields.io/docker/pulls/jc21/nginx-proxy-manager.svg?style=for-the-badge" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;This project comes as a pre-built docker image that enables you to easily forward to your websites running at home or otherwise, including free SSL, without having to know too much about Nginx or Letsencrypt.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NginxProxyManager/nginx-proxy-manager/develop/#quick-setup"&gt;Quick Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nginxproxymanager.com/setup/"&gt;Full Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nginxproxymanager.com/screenshots/"&gt;Screenshots&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Goal&lt;/h2&gt; 
&lt;p&gt;I created this project to fill a personal need to provide users with an easy way to accomplish reverse proxying hosts with SSL termination and it had to be so easy that a monkey could do it. This goal hasn't changed. While there might be advanced options they are optional and the project should be as simple as possible so that the barrier for entry here is low.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/jc21" target="_blank"&gt;&lt;img src="http://public.jc21.com/github/by-me-a-coffee.png" alt="Buy Me A Coffee" style="height: 51px !important;width: 217px !important;" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Beautiful and Secure Admin Interface based on &lt;a href="https://tabler.github.io/"&gt;Tabler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Easily create forwarding domains, redirections, streams and 404 hosts without knowing anything about Nginx&lt;/li&gt; 
 &lt;li&gt;Free SSL using Let's Encrypt or provide your own custom SSL certificates&lt;/li&gt; 
 &lt;li&gt;Access Lists and basic HTTP Authentication for your hosts&lt;/li&gt; 
 &lt;li&gt;Advanced Nginx configuration available for super users&lt;/li&gt; 
 &lt;li&gt;User management, permissions and audit log&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Hosting your home network&lt;/h2&gt; 
&lt;p&gt;I won't go in to too much detail here but here are the basics for someone new to this self-hosted world.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Your home router will have a Port Forwarding section somewhere. Log in and find it&lt;/li&gt; 
 &lt;li&gt;Add port forwarding for port 80 and 443 to the server hosting this project&lt;/li&gt; 
 &lt;li&gt;Configure your domain name details to point to your home, either with a static ip or a service like DuckDNS or &lt;a href="https://github.com/jc21/route53-ddns"&gt;Amazon Route53&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Use the Nginx Proxy Manager as your gateway to forward to your other web based services&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Quick Setup&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Docker and Docker-Compose&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/install/"&gt;Docker Install documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;Docker-Compose Install documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Create a docker-compose.yml file similar to this:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;services:
  app:
    image: 'docker.io/jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is the bare minimum configuration required. See the &lt;a href="https://nginxproxymanager.com/setup/"&gt;documentation&lt;/a&gt; for more.&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Bring up your stack by running&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker-compose up -d

# If using docker-compose-plugin
docker compose up -d

&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Log in to the Admin UI&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;When your docker container is running, connect to it on port &lt;code&gt;81&lt;/code&gt; for the admin interface. Sometimes this can take a little bit because of the entropy of keys.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://127.0.0.1:81"&gt;http://127.0.0.1:81&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Default Admin User:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Email:    admin@example.com
Password: changeme
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Immediately after logging in with this default user you will be asked to modify your details and change your password.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;All are welcome to create pull requests for this project, against the &lt;code&gt;develop&lt;/code&gt; branch. Official releases are created from the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; 
&lt;p&gt;CI is used in this project. All PR's must pass before being considered. After passing, docker builds for PR's are available on dockerhub for manual verifications.&lt;/p&gt; 
&lt;p&gt;Documentation within the &lt;code&gt;develop&lt;/code&gt; branch is available for preview at &lt;a href="https://develop.nginxproxymanager.com"&gt;https://develop.nginxproxymanager.com&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;Special thanks to &lt;a href="https://github.com/NginxProxyManager/nginx-proxy-manager/graphs/contributors"&gt;all of our contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Support&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NginxProxyManager/nginx-proxy-manager/issues"&gt;Found a bug?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NginxProxyManager/nginx-proxy-manager/discussions"&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://reddit.com/r/nginxproxymanager"&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Asabeneh/30-Days-Of-JavaScript</title>
      <link>https://github.com/Asabeneh/30-Days-Of-JavaScript</link>
      <description>&lt;p&gt;30 days of JavaScript programming challenge is a step-by-step guide to learn JavaScript programming language in 30 days. This challenge may take more than 100 days, please just follow your own pace. These videos may help too: https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;30 Days Of JavaScript&lt;/h1&gt; 
&lt;!--  &lt;strong&gt;Learn with Asabeneh by joining the upcoming [&lt;em&gt;CODING BOOTCAMP&lt;/em&gt;](https://docs.google.com/forms/d/e/1FAIpQLSf0oNIYR9XU1DCctfl-pY36KbWse-SQX5aQaUgetqSinFYnmQ/viewform) &lt;/strong&gt; --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;# Day&lt;/th&gt; 
   &lt;th align="center"&gt;Topics&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;01&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/readMe.md"&gt;Introduction&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;02&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/02_Day_Data_types/02_day_data_types.md"&gt;Data Types&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;03&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/03_Day_Booleans_operators_date/03_booleans_operators_date.md"&gt;Booleans, Operators, Date&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;04&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/04_Day_Conditionals/04_day_conditionals.md"&gt;Conditionals&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;05&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/05_Day_Arrays/05_day_arrays.md"&gt;Arrays&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;06&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/06_Day_Loops/06_day_loops.md"&gt;Loops&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;07&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/07_Day_Functions/07_day_functions.md"&gt;Functions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;08&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/08_Day_Objects/08_day_objects.md"&gt;Objects&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;09&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/09_Day_Higher_order_functions/09_day_higher_order_functions.md"&gt;Higher Order Functions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/10_Day_Sets_and_Maps/10_day_Sets_and_Maps.md"&gt;Sets and Maps&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/11_Day_Destructuring_and_spreading/11_day_destructuring_and_spreading.md"&gt;Destructuring and Spreading&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;12&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/12_Day_Regular_expressions/12_day_regular_expressions.md"&gt;Regular Expressions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;13&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/13_Day_Console_object_methods/13_day_console_object_methods.md"&gt;Console Object Methods&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;14&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/14_Day_Error_handling/14_day_error_handling.md"&gt;Error Handling&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;15&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/15_Day_Classes/15_day_classes.md"&gt;Classes&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;16&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/16_Day_JSON/16_day_json.md"&gt;JSON&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;17&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/17_Day_Web_storages/17_day_web_storages.md"&gt;Web Storages&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;18&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/18_Day_Promises/18_day_promises.md"&gt;Promises&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;19&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/19_Day_Closures/19_day_closures.md"&gt;Closure&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;20&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/20_Day_Writing_clean_codes/20_day_writing_clean_codes.md"&gt;Writing Clean Code&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;21&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/21_Day_DOM/21_day_dom.md"&gt;DOM&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;22&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/22_Day_Manipulating_DOM_object/22_day_manipulating_DOM_object.md"&gt;Manipulating DOM Object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/23_Day_Event_listeners/23_day_event_listeners.md"&gt;Event Listeners&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;24&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/24_Day_Project_solar_system/24_day_project_solar_system.md"&gt;Mini Project: Solar System&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/25_Day_World_countries_data_visualization_1/25_day_world_countries_data_visualization_1.md"&gt;Mini Project: World Countries Data Visualization 1&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;26&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/26_Day_World_countries_data_visualization_2/26_day_world_countries_data_visualization_2.md"&gt;Mini Project: World Countries Data Visualization 2&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;27&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/27_Day_Mini_project_portfolio/27_day_mini_project_portfolio.md"&gt;Mini Project: Portfolio&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;28&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/28_Day_Mini_project_leaderboard/28_day_mini_project_leaderboard.md"&gt;Mini Project: Leaderboard&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;29&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/29_Day_Mini_project_animating_characters/29_day_mini_project_animating_characters.md"&gt;Mini Project: Animating characters&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/30_Day_Mini_project_final/30_day_mini_project_final.md"&gt;Final Projects&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- &lt;strong&gt;Learn with Asabeneh by joining the upcoming [&lt;em&gt;CODING BOOTCAMP&lt;/em&gt;](https://docs.google.com/forms/d/e/1FAIpQLSf0oNIYR9XU1DCctfl-pY36KbWse-SQX5aQaUgetqSinFYnmQ/viewform) &lt;/strong&gt; --&gt; 
&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; 
&lt;div&gt; 
 &lt;h2&gt;💖 Sponsors&lt;/h2&gt; 
 &lt;p&gt;Our amazing sponsors for supporting my open-source contribution and the &lt;strong&gt;30 Days of Challenge&lt;/strong&gt; series!&lt;/p&gt; 
 &lt;h3&gt;Current Sponsor&lt;/h3&gt; 
 &lt;hr /&gt; 
 &lt;div align="center"&gt; 
  &lt;a href="https://ref.wisprflow.ai/MPMzRGE" target="_blank"&gt; 
   &lt;picture&gt; 
    &lt;!-- Dark mode --&gt; 
    &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/Asabeneh/asabeneh/master/images/Wispr_Flow-Logo-white.png" /&gt; 
    &lt;!-- Light mode (fallback) --&gt; 
    &lt;img src="https://raw.githubusercontent.com/Asabeneh/asabeneh/master/images/Wispr_Flow-logo.png" width="400px" alt="Wispr Flow Logo" title="Wispr Flow" /&gt; 
   &lt;/picture&gt; &lt;/a&gt; 
  &lt;h3&gt;Dictation that understands code&lt;/h3&gt; 
  &lt;p&gt;&lt;em&gt;Ship 4x faster with developer-first dictation that works in every app.&lt;/em&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;hr /&gt; 
 &lt;h3&gt;🙌 Become a Sponsor&lt;/h3&gt; 
 &lt;p&gt;You can support this project by becoming a sponsor on &lt;strong&gt;&lt;a href="https://github.com/sponsors/asabeneh"&gt;GitHub Sponsors&lt;/a&gt;&lt;/strong&gt; or through &lt;a href="https://www.paypal.me/asabeneh"&gt;PayPal&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;Every contribution, big or small, makes a huge difference. Thank you for your support! 🌟&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;div align="center"&gt; 
  &lt;h1&gt; 30 Days Of JavaScript: Introduction&lt;/h1&gt; 
  &lt;a class="header-badge" target="_blank" href="https://www.linkedin.com/in/asabeneh/"&gt; &lt;img src="https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social" /&gt; &lt;/a&gt; 
  &lt;a class="header-badge" target="_blank" href="https://twitter.com/Asabeneh"&gt; &lt;img alt="Twitter Follow" src="https://img.shields.io/twitter/follow/asabeneh?style=social" /&gt; &lt;/a&gt; 
  &lt;p&gt;&lt;sub&gt;Author: &lt;a href="https://www.linkedin.com/in/asabeneh/" target="_blank"&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br /&gt; &lt;small&gt; January, 2020&lt;/small&gt; &lt;/sub&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;p&gt;🇬🇧 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/readMe.md"&gt;English&lt;/a&gt; 🇪🇸 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/Spanish/readme.md"&gt;Spanish&lt;/a&gt; 🇮🇹 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/Italian/readMe.md"&gt;Italian&lt;/a&gt; 🇷🇺 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/RU/README.md"&gt;Russian&lt;/a&gt; 🇹🇷 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/Turkish/readMe.md"&gt;Turkish&lt;/a&gt; 🇦🇿 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/Azerbaijani/readMe.md"&gt;Azerbaijan&lt;/a&gt; 🇰🇷 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/Korea/README.md"&gt;Korean&lt;/a&gt; 🇻🇳 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/Vietnamese/README.md"&gt;Vietnamese&lt;/a&gt; 🇵🇱 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/Polish/readMe.md"&gt;Polish&lt;/a&gt; 🇧🇷 &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/Portuguese/readMe.md"&gt;Portuguese&lt;/a&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/02_Day_Data_types/02_day_data_types.md"&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/day_1_1.png" alt="Thirty Days Of JavaScript" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#30-days-of-javascript"&gt;30 Days Of JavaScript&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#-become-a-sponsor"&gt;🙌 Become a Sponsor&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#-day-1"&gt;📔 Day 1&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#setup"&gt;Setup&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#install-nodejs"&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#browser"&gt;Browser&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#installing-google-chrome"&gt;Installing Google Chrome&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#opening-google-chrome-console"&gt;Opening Google Chrome Console&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#writing-code-on-browser-console"&gt;Writing Code on Browser Console&lt;/a&gt; 
        &lt;ul&gt; 
         &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#consolelog"&gt;Console.log&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#consolelog-with-multiple-arguments"&gt;Console.log with Multiple Arguments&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#syntax"&gt;Syntax&lt;/a&gt;&lt;/li&gt; 
        &lt;/ul&gt; &lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#arithmetics"&gt;Arithmetics&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#code-editor"&gt;Code Editor&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#installing-visual-studio-code"&gt;Installing Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#how-to-use-visual-studio-code"&gt;How to Use Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#adding-javascript-to-a-web-page"&gt;Adding JavaScript to a Web Page&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#inline-script"&gt;Inline Script&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#internal-script"&gt;Internal Script&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#external-script"&gt;External Script&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#multiple-external-scripts"&gt;Multiple External Scripts&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#introduction-to-data-types"&gt;Introduction to Data types&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#numbers"&gt;Numbers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#strings"&gt;Strings&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#booleans"&gt;Booleans&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#undefined"&gt;Undefined&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#null"&gt;Null&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#checking-data-types"&gt;Checking Data Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#comments-again"&gt;Comments Again&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/#-day-1-exercises"&gt;💻 Day 1: Exercises&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;📔 Day 1&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; on deciding to participate in 30 days of JavaScript programming challenge. In this challenge, you will learn everything you need to be a JavaScript programmer, and in general, the whole concept of programming. In the end of the challenge, you will get a 30DaysOfJavaScript programming challenge completion certificate. In case you need help or if you would like to help others you may join the dedicated &lt;a href="https://t.me/ThirtyDaysOfJavaScript"&gt;telegram group&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A 30DaysOfJavaScript&lt;/strong&gt; challenge is a guide for both beginners and advanced JavaScript developers. Welcome to JavaScript. JavaScript is the language of the web. I enjoy using and teaching JavaScript and I hope you will do so too.&lt;/p&gt; 
&lt;p&gt;In this step by step JavaScript challenge, you will learn JavaScript, the most popular programming language in the history of mankind. JavaScript is used &lt;strong&gt;&lt;em&gt;to add interactivity to websites, to develop mobile apps, desktop applications, games&lt;/em&gt;&lt;/strong&gt; and nowadays JavaScript can be used for &lt;strong&gt;server-side programming&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;machine learning&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;AI&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;em&gt;JavaScript (JS)&lt;/em&gt;&lt;/strong&gt; has increased in popularity in recent years and has been the leading programming language for last ten years and is the most used programming language on GitHub.&lt;/p&gt; 
&lt;p&gt;This challenge is easy to read, written in conversational English, engaging, motivating and at the same time, it is very demanding. You need to allocate much time to finish this challenge. If you are a visual learner, you may get the video lesson on &lt;a href="https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw"&gt; Washera&lt;/a&gt; YouTube channel. Subscribe the channel, comment and ask questions on YouTube vides and be proactive, the author will eventually notice you.&lt;/p&gt; 
&lt;p&gt;The author likes to hear your opinion about the challenge, share the author by expressing your thoughts about the 30DaysOfJavaScript challenge. You can leave your testimonial on this &lt;a href="https://www.asabeneh.com/testimonials"&gt;link&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;No prior knowledge of programming is required to follow this challenge. You need only:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Motivation&lt;/li&gt; 
 &lt;li&gt;A computer&lt;/li&gt; 
 &lt;li&gt;Internet&lt;/li&gt; 
 &lt;li&gt;A browser&lt;/li&gt; 
 &lt;li&gt;A code editor&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;I believe you have the motivation and a strong desire to be a developer, a computer and Internet. If you have those, then you have everything to get started.&lt;/p&gt; 
&lt;h3&gt;Install Node.js&lt;/h3&gt; 
&lt;p&gt;You may not need Node.js right now but you may need it for later. Install &lt;a href="https://nodejs.org/en/"&gt;node.js&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/download_node.png" alt="Node download" /&gt;&lt;/p&gt; 
&lt;p&gt;After downloading double click and install&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/install_node.png" alt="Install node" /&gt;&lt;/p&gt; 
&lt;p&gt;We can check if node is installed on our local machine by opening our device terminal or command prompt.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;asabeneh $ node -v
v12.14.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When making this tutorial I was using Node version 12.14.0, but now the recommended version of Node.js for download is v14.17.6, by the time you use this material you may have a higher Node.js version.&lt;/p&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;p&gt;There are many browsers out there. However, I strongly recommend Google Chrome.&lt;/p&gt; 
&lt;h4&gt;Installing Google Chrome&lt;/h4&gt; 
&lt;p&gt;Install &lt;a href="https://www.google.com/chrome/"&gt;Google Chrome&lt;/a&gt; if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/google_chrome.png" alt="Google Chrome" /&gt;&lt;/p&gt; 
&lt;h4&gt;Opening Google Chrome Console&lt;/h4&gt; 
&lt;p&gt;You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting &lt;em&gt;More tools -&amp;gt; Developer tools&lt;/em&gt; or using a keyboard shortcut. I prefer using shortcuts.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/opening_developer_tool.png" alt="Opening chrome" /&gt;&lt;/p&gt; 
&lt;p&gt;To open the Chrome console using a keyboard shortcut.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;Mac
Command+Option+J

Windows/Linux:
Ctl+Shift+J
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/opening_chrome_console_shortcut.png" alt="Opening console" /&gt;&lt;/p&gt; 
&lt;p&gt;After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/js_code_on_chrome_console.png" alt="write code on console" /&gt;&lt;/p&gt; 
&lt;h4&gt;Writing Code on Browser Console&lt;/h4&gt; 
&lt;p&gt;We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;Mac
Command+Option+I

Windows:
Ctl+Shift+I
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log&lt;/h5&gt; 
&lt;p&gt;To write our first JavaScript code, we used a built-in function &lt;strong&gt;console.log()&lt;/strong&gt;. We passed an argument as input data, and the function displays the output. We passed &lt;code&gt;'Hello, World'&lt;/code&gt; as input data or argument in the console.log() function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Hello, World!')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log with Multiple Arguments&lt;/h5&gt; 
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/strong&gt; function can take multiple parameters separated by commas. The syntax looks like as follows:&lt;strong&gt;&lt;code&gt;console.log(param1, param2, param3)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/console_log_multipl_arguments.png" alt="console log multiple arguments" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Hello', 'World', '!')
console.log('HAPPY', 'NEW', 'YEAR', 2020)
console.log('Welcome', 'to', 30, 'Days', 'Of', 'JavaScript')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As you can see from the snippet code above, &lt;em&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/em&gt; can take multiple arguments.&lt;/p&gt; 
&lt;p&gt;Congratulations! You wrote your first JavaScript code using &lt;em&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt; 
&lt;h5&gt;Comments&lt;/h5&gt; 
&lt;p&gt;We can add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code. In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this &lt;code&gt;//&lt;/code&gt; is also a comment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// This is the first comment  
// This is the second comment  
// I am a single line comment
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;/*
This is a multiline comment  
 Multiline comments can take multiple lines  
 JavaScript is the language of the web  
 */
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Syntax&lt;/h5&gt; 
&lt;p&gt;Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is &lt;em&gt;the arrangement of words and phrases to create well-formed sentences in a language&lt;/em&gt;. The technical definition of syntax is the structure of statements in a computer language. Programming languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/raising_syntax_error.png" alt="Error" /&gt;&lt;/p&gt; 
&lt;p&gt;I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Hello, World!')
console.log('Hello, World!')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So far, we saw how to display text using the &lt;em&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/em&gt;. If we are printing text or string using &lt;em&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/em&gt;, the text has to be inside the single quotes, double quotes, or a backtick. &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Hello, World!')
console.log("Hello, World!")
console.log(`Hello, World!`)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arithmetics&lt;/h4&gt; 
&lt;p&gt;Now, let us practice more writing JavaScript codes using &lt;em&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/em&gt; on Google Chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. It is possible to write JavaScript code on Google Chrome console can directly without the &lt;strong&gt;&lt;em&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/arithmetic.png" alt="Arithmetic" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log(2 + 3) // Addition
console.log(3 - 2) // Subtraction
console.log(2 * 3) // Multiplication
console.log(3 / 2) // Division
console.log(3 % 2) // Modulus - finding remainder
console.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Code Editor&lt;/h3&gt; 
&lt;p&gt;We can write our codes on the browser console, but it won't be for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days of JavaScript challenge, we will be using Visual Studio Code.&lt;/p&gt; 
&lt;h4&gt;Installing Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Visual Studio Code is a very popular open-source text editor. I would recommend to &lt;a href="https://code.visualstudio.com/"&gt;download Visual Studio Code&lt;/a&gt;, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/vscode.png" alt="Vscode" /&gt;&lt;/p&gt; 
&lt;p&gt;If you installed Visual Studio Code, let us start using it.&lt;/p&gt; 
&lt;h4&gt;How to Use Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/vscode_ui.png" alt="Vscode ui" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/adding_project_to_vscode.png" alt="Vscode add project" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/opening_project_on_vscode.png" alt="Vscode open project" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/scripts_on_vscode.png" alt="script file" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/vsc_live_server.png" alt="Installing Live Server" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/running_script.png" alt="running script" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/launched_on_new_tab.png" alt="coding running" /&gt;&lt;/p&gt; 
&lt;h2&gt;Adding JavaScript to a Web Page&lt;/h2&gt; 
&lt;p&gt;JavaScript can be added to a web page in three different ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;em&gt;Inline script&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;em&gt;Internal script&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;em&gt;External script&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;em&gt;Multiple External scripts&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following sections show different ways of adding JavaScript code to your web page.&lt;/p&gt; 
&lt;h3&gt;Inline Script&lt;/h3&gt; 
&lt;p&gt;Create a project folder on your desktop or in any location, name it 30DaysOfJS and create an &lt;strong&gt;&lt;em&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; file in the project folder. Then paste the following code and open it in a browser, for example &lt;a href="https://www.google.com/chrome/"&gt;Chrome&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;30DaysOfScript:Inline Script&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;button onclick="alert('Welcome to 30DaysOfJavaScript!')"&amp;gt;Click Me&amp;lt;/button&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, you just wrote your first inline script. We can create a pop up alert message using the &lt;em&gt;&lt;code&gt;alert()&lt;/code&gt;&lt;/em&gt; built-in function.&lt;/p&gt; 
&lt;h3&gt;Internal Script&lt;/h3&gt; 
&lt;p&gt;The internal script can be written in the &lt;em&gt;&lt;code&gt;head&lt;/code&gt;&lt;/em&gt; or the &lt;em&gt;&lt;code&gt;body&lt;/code&gt;&lt;/em&gt;, but it is preferred to put it on the body of the HTML document. First, let us write on the head part of the page.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;30DaysOfScript:Internal Script&amp;lt;/title&amp;gt;
    &amp;lt;script&amp;gt;
      console.log('Welcome to 30DaysOfJavaScript')
    &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is how we write an internal script most of the time. Writing the JavaScript code in the body section is the most preferred option. Open the browser console to see the output from the &lt;code&gt;console.log()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;30DaysOfScript:Internal Script&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;button onclick="alert('Welcome to 30DaysOfJavaScript!');"&amp;gt;Click Me&amp;lt;/button&amp;gt;
    &amp;lt;script&amp;gt;
      console.log('Welcome to 30DaysOfJavaScript')
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open the browser console to see the output from the &lt;code&gt;console.log()&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/js_code_vscode.png" alt="js code from vscode" /&gt;&lt;/p&gt; 
&lt;h3&gt;External Script&lt;/h3&gt; 
&lt;p&gt;Similar to the internal script, the external script link can be on the header or body, but it is preferred to put it in the body. First, we should create an external JavaScript file with .js extension. All files ending with .js extension are JavaScript files. Create a file named introduction.js inside your project directory and write the following code and link this .js file at the bottom of the body.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Welcome to 30DaysOfJavaScript')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;External scripts in the &lt;em&gt;head&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;30DaysOfJavaScript:External script&amp;lt;/title&amp;gt;
    &amp;lt;script src="introduction.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;External scripts in the &lt;em&gt;body&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;30DaysOfJavaScript:External script&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;!-- JavaScript external link could be in the header or in the body --&amp;gt; 
    &amp;lt;!-- Before the closing tag of the body is the recommended place to put the external JavaScript script --&amp;gt;
    &amp;lt;script src="introduction.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open the browser console to see the output of the &lt;code&gt;console.log()&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Multiple External Scripts&lt;/h3&gt; 
&lt;p&gt;We can also link multiple external JavaScript files to a web page. Create a &lt;code&gt;helloworld.js&lt;/code&gt; file inside the 30DaysOfJS folder and write the following code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Hello, World!')
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Multiple External Scripts&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script src="./helloworld.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="./introduction.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Your main.js file should be below all other scripts&lt;/em&gt;. It is very important to remember this.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/multiple_script.png" alt="Multiple Script" /&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction to Data types&lt;/h2&gt; 
&lt;p&gt;In JavaScript and also other programming languages, there are different types of data types. The following are JavaScript primitive data types: &lt;em&gt;String, Number, Boolean, undefined, Null&lt;/em&gt;, and &lt;em&gt;Symbol&lt;/em&gt;.&lt;/p&gt; 
&lt;h3&gt;Numbers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Integers: Integer (negative, zero and positive) numbers Example: ... -3, -2, -1, 0, 1, 2, 3 ...&lt;/li&gt; 
 &lt;li&gt;Float-point numbers: Decimal number Example ... -3.5, -2.25, -1.0, 0.0, 1.1, 2.2, 3.5 ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Strings&lt;/h3&gt; 
&lt;p&gt;A collection of one or more characters between two single quotes, double quotes, or backticks.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;'a'
'Asabeneh'
"Asabeneh"
'Finland'
'JavaScript is a beautiful programming language'
'I love teaching'
'I hope you are enjoying the first day'
`We can also create a string using a backtick`
'A string could be just as small as one character or as big as many pages'
'Any data type under a single quote, double quote or backtick is a string'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Booleans&lt;/h3&gt; 
&lt;p&gt;A boolean value is either True or False. Any comparisons returns a boolean value, which is either true or false.&lt;/p&gt; 
&lt;p&gt;A boolean data type is either a true or false value.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;true // if the light is on, the value is true
false // if the light is off, the value is false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Undefined&lt;/h3&gt; 
&lt;p&gt;In JavaScript, if we don't assign a value to a variable, the value is undefined. In addition to that, if a function is not returning anything, it returns undefined.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;let firstName
console.log(firstName) // undefined, because it is not assigned to a value yet
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Null&lt;/h3&gt; 
&lt;p&gt;Null in JavaScript means an empty value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;let emptyValue = null
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Checking Data Types&lt;/h2&gt; 
&lt;p&gt;To check the data type of a certain variable, we use the &lt;strong&gt;typeof&lt;/strong&gt; operator. See the following example.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log(typeof 'Asabeneh') // string
console.log(typeof 5) // number
console.log(typeof true) // boolean
console.log(typeof null) // object type
console.log(typeof undefined) // undefined
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Comments Again&lt;/h2&gt; 
&lt;p&gt;Remember that commenting in JavaScript is similar to other programming languages. Comments are important in making your code more readable. There are two ways of commenting:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Single line commenting&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Multiline commenting&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// commenting the code itself with a single comment
// let firstName = 'Asabeneh'; single line comment
// let lastName = 'Yetayeh'; single line comment
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Multiline commenting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;/*
  let location = 'Helsinki';
  let age = 100;
  let isMarried = true;
  This is a Multiple line comment
*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Variables&lt;/h2&gt; 
&lt;p&gt;Variables are &lt;em&gt;containers&lt;/em&gt; of data. Variables are used to &lt;em&gt;store&lt;/em&gt; data in a memory location. When a variable is declared, a memory location is reserved. When a variable is assigned to a value (data), the memory space will be filled with that data. To declare a variable, we use &lt;em&gt;var&lt;/em&gt;, &lt;em&gt;let&lt;/em&gt;, or &lt;em&gt;const&lt;/em&gt; keywords.&lt;/p&gt; 
&lt;p&gt;For a variable that changes at a different time, we use &lt;em&gt;let&lt;/em&gt;. If the data does not change at all, we use &lt;em&gt;const&lt;/em&gt;. For example, PI, country name, gravity do not change, and we can use &lt;em&gt;const&lt;/em&gt;. We will not use var in this challenge and I don't recommend you to use it. It is error prone way of declaring variable it has lots of leak. We will talk more about var, let, and const in detail in other sections (scope). For now, the above explanation is enough.&lt;/p&gt; 
&lt;p&gt;A valid JavaScript variable name must follow the following rules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A JavaScript variable name should not begin with a number.&lt;/li&gt; 
 &lt;li&gt;A JavaScript variable name does not allow special characters except dollar sign and underscore.&lt;/li&gt; 
 &lt;li&gt;A JavaScript variable name follows a camelCase convention.&lt;/li&gt; 
 &lt;li&gt;A JavaScript variable name should not have space between words.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following are examples of valid JavaScript variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;firstName
lastName
country
city
capitalCity
age
isMarried

first_name
last_name
is_married
capital_city

num1
num_1
_num_1
$num1
year2020
year_2020
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The first and second variables on the list follows the camelCase convention of declaring in JavaScript. In this material, we will use camelCase variables(camelWithOneHump). We use CamelCase(CamelWithTwoHump) to declare classes, we will discuss about classes and objects in other section.&lt;/p&gt; 
&lt;p&gt;Example of invalid variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;  first-name
  1_num
  num_#_1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Let us declare variables with different data types. To declare a variable, we need to use &lt;em&gt;let&lt;/em&gt; or &lt;em&gt;const&lt;/em&gt; keyword before the variable name. Following the variable name, we write an equal sign (assignment operator), and a value(assigned data).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// Syntax
let nameOfVariable = value
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The nameOfVriable is the name that stores different data of value. See below for detail examples.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Examples of declared variables&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// Declaring different variables of different data types
let firstName = 'Asabeneh' // first name of a person
let lastName = 'Yetayeh' // last name of a person
let country = 'Finland' // country
let city = 'Helsinki' // capital city
let age = 100 // age in years
let isMarried = true

console.log(firstName, lastName, country, city, age, isMarried)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;Asabeneh Yetayeh Finland Helsinki 100 true
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// Declaring variables with number values
let age = 100 // age in years
const gravity = 9.81 // earth gravity  in m/s2
const boilingPoint = 100 // water boiling point, temperature in °C
const PI = 3.14 // geometrical constant
console.log(gravity, boilingPoint, PI)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;9.81 100 3.14
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// Variables can also be declaring in one line separated by comma, however I recommend to use a seperate line to make code more readble
let name = 'Asabeneh', job = 'teacher', live = 'Finland'
console.log(name, job, live)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;Asabeneh teacher Finland
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you run &lt;em&gt;index.html&lt;/em&gt; file in the 01-Day folder you should get this:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/day_1.png" alt="Day one" /&gt;&lt;/p&gt; 
&lt;p&gt;🌕 You are amazing! You have just completed day 1 challenge and you are on your way to greatness. Now do some exercises for your brain and muscle.&lt;/p&gt; 
&lt;h1&gt;💻 Day 1: Exercises&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Write a single line comment which says, &lt;em&gt;comments can make code readable&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Write another single comment which says, &lt;em&gt;Welcome to 30DaysOfJavaScript&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Write a multiline comment which says, &lt;em&gt;comments can make code readable, easy to reuse&lt;/em&gt; &lt;em&gt;and informative&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a variable.js file and declare variables and assign string, boolean, undefined and null data types&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create datatypes.js file and use the JavaScript &lt;strong&gt;&lt;em&gt;typeof&lt;/em&gt;&lt;/strong&gt; operator to check different data types. Check the data type of each variable&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Declare four variables without assigning values&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Declare four variables with assigned values&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Declare variables to store your first name, last name, marital status, country and age in multiple lines&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Declare variables to store your first name, last name, marital status, country and age in a single line&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Declare two variables &lt;em&gt;myAge&lt;/em&gt; and &lt;em&gt;yourAge&lt;/em&gt; and assign them initial values and log to the browser console.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;I am 25 years old.
You are 30 years old.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/02_Day_Data_types/02_day_data_types.md"&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mrdoob/three.js</title>
      <link>https://github.com/mrdoob/three.js</link>
      <description>&lt;p&gt;JavaScript 3D Library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;three.js&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/three"&gt;&lt;img src="https://img.shields.io/npm/v/three" alt="NPM Package" /&gt;&lt;/a&gt; &lt;a href="https://bundlephobia.com/result?p=three"&gt;&lt;img src="https://badgen.net/bundlephobia/minzip/three" alt="Build Size" /&gt;&lt;/a&gt; &lt;a href="https://www.npmtrends.com/three"&gt;&lt;img src="https://img.shields.io/npm/dw/three" alt="NPM Downloads" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/56GBJwAnUS"&gt;&lt;img src="https://img.shields.io/discord/685241246557667386" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/mrdoob/three.js"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;JavaScript 3D library&lt;/h4&gt; 
&lt;p&gt;The aim of the project is to create an easy-to-use, lightweight, cross-browser, general-purpose 3D library. The current builds only include WebGL and WebGPU renderers but SVG and CSS3D renderers are also available as addons.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://threejs.org/examples/"&gt;Examples&lt;/a&gt; — &lt;a href="https://threejs.org/docs/"&gt;Docs&lt;/a&gt; — &lt;a href="https://threejs.org/manual/"&gt;Manual&lt;/a&gt; — &lt;a href="https://github.com/mrdoob/three.js/wiki"&gt;Wiki&lt;/a&gt; — &lt;a href="https://github.com/mrdoob/three.js/wiki/Migration-Guide"&gt;Migrating&lt;/a&gt; — &lt;a href="https://stackoverflow.com/questions/tagged/three.js"&gt;Questions&lt;/a&gt; — &lt;a href="https://discourse.threejs.org/"&gt;Forum&lt;/a&gt; — &lt;a href="https://discord.gg/56GBJwAnUS"&gt;Discord&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;This code creates a scene, a camera, and a geometric cube, and it adds the cube to the scene. It then creates a &lt;code&gt;WebGL&lt;/code&gt; renderer for the scene and camera, and it adds that viewport to the &lt;code&gt;document.body&lt;/code&gt; element. Finally, it animates the cube within the scene for the camera.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;import * as THREE from 'three';

const width = window.innerWidth, height = window.innerHeight;

// init

const camera = new THREE.PerspectiveCamera( 70, width / height, 0.01, 10 );
camera.position.z = 1;

const scene = new THREE.Scene();

const geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );
const material = new THREE.MeshNormalMaterial();

const mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );

const renderer = new THREE.WebGLRenderer( { antialias: true } );
renderer.setSize( width, height );
renderer.setAnimationLoop( animate );
document.body.appendChild( renderer.domElement );

// animation

function animate( time ) {

	mesh.rotation.x = time / 2000;
	mesh.rotation.y = time / 1000;

	renderer.render( scene, camera );

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If everything goes well, you should see &lt;a href="https://jsfiddle.net/w43x5Lgh/"&gt;this&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Cloning this repository&lt;/h3&gt; 
&lt;p&gt;Cloning the repo with all its history results in a ~2 GB download. If you don't need the whole history you can use the &lt;code&gt;depth&lt;/code&gt; parameter to significantly reduce download size.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone --depth=1 https://github.com/mrdoob/three.js.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Change log&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/mrdoob/three.js/releases"&gt;Releases&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DataDog/dd-trace-js</title>
      <link>https://github.com/DataDog/dd-trace-js</link>
      <description>&lt;p&gt;Datadog APM client for Node.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;dd-trace&lt;/code&gt;: Node.js APM Tracer Library&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/dd-trace"&gt;&lt;img src="https://img.shields.io/npm/v/dd-trace/latest?color=blue&amp;amp;label=dd-trace%40v5&amp;amp;logo=npm" alt="npm v5" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/DataDog/dd-trace-js"&gt;&lt;img src="https://codecov.io/gh/DataDog/dd-trace-js/branch/master/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img align="right" src="https://user-images.githubusercontent.com/551402/208212084-1d0c07e2-4135-4c61-b2da-8f2fddbc66ed.png" alt="Bits the dog  JavaScript" width="200px" /&gt; 
&lt;p&gt;&lt;code&gt;dd-trace&lt;/code&gt; is an npm package that you can install in your Node.js application to capture APM (Application Performance Monitoring) data. In Datadog terminology this library is called a Tracer. This data is then sent off to a process which collects and aggregates the data, called an Agent. Finally the data is sent off to the Datadog servers where it's stored and made available for querying in a myriad of ways, such as displaying in a dashboard or triggering alerts.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/DataDog/dd-trace-js/master/docs/relationship.png" alt="Tracer, Agent, Datadog relationship diagram" /&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Most of the documentation for &lt;code&gt;dd-trace&lt;/code&gt; is available on these webpages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.datadoghq.com/tracing/languages/nodejs/"&gt;Tracing Node.js Applications&lt;/a&gt; - most project documentation, including setup instructions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.datadoghq.com/tracing/trace_collection/library_config/nodejs"&gt;Configuring the Node.js Tracing Library&lt;/a&gt; - environment variables and config options&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datadog.github.io/dd-trace-js"&gt;API Documentation&lt;/a&gt; - method signatures, plugin list, and some usage examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.datadoghq.com/tracing/visualization/"&gt;APM Terms and Concepts&lt;/a&gt; - a glossary of concepts applicable across all languages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Version Release Lines and Maintenance&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Release Line&lt;/th&gt; 
   &lt;th align="center"&gt;Latest Version&lt;/th&gt; 
   &lt;th align="center"&gt;Node.js&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;a href="https://docs.datadoghq.com/tracing/trace_collection/automatic_instrumentation/single-step-apm/?tab=linuxhostorvm"&gt;SSI&lt;/a&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;a href="https://docs.datadoghq.com/tracing/trace_collection/library_injection_local/?tab=kubernetes"&gt;K8s Injection&lt;/a&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;Status&lt;/th&gt; 
   &lt;th align="center"&gt;Initial Release&lt;/th&gt; 
   &lt;th align="center"&gt;End of Life&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/DataDog/dd-trace-js/tree/v1.x"&gt;&lt;code&gt;v1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://img.shields.io/npm/v/dd-trace/legacy-v1?color=white&amp;amp;label=%20&amp;amp;style=flat-square" alt="npm v1" /&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;code&gt;&amp;gt;= v12&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;NO&lt;/td&gt; 
   &lt;td align="center"&gt;NO&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;EOL&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;2021-07-13&lt;/td&gt; 
   &lt;td align="center"&gt;2022-02-25&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/DataDog/dd-trace-js/tree/v2.x"&gt;&lt;code&gt;v2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://img.shields.io/npm/v/dd-trace/latest-node12?color=white&amp;amp;label=%20&amp;amp;style=flat-square" alt="npm v2" /&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;code&gt;&amp;gt;= v12&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;NO&lt;/td&gt; 
   &lt;td align="center"&gt;NO&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;EOL&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;2022-01-28&lt;/td&gt; 
   &lt;td align="center"&gt;2023-08-15&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/DataDog/dd-trace-js/tree/v3.x"&gt;&lt;code&gt;v3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://img.shields.io/npm/v/dd-trace/latest-node14?color=white&amp;amp;label=%20&amp;amp;style=flat-square" alt="npm v3" /&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;code&gt;&amp;gt;= v14&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;NO&lt;/td&gt; 
   &lt;td align="center"&gt;YES&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;EOL&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;2022-08-15&lt;/td&gt; 
   &lt;td align="center"&gt;2024-05-15&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/DataDog/dd-trace-js/tree/v4.x"&gt;&lt;code&gt;v4&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://img.shields.io/npm/v/dd-trace/latest-node16?color=white&amp;amp;label=%20&amp;amp;style=flat-square" alt="npm v4" /&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;code&gt;&amp;gt;= v16&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;YES&lt;/td&gt; 
   &lt;td align="center"&gt;YES&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;EOL&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;2023-05-12&lt;/td&gt; 
   &lt;td align="center"&gt;2025-01-11&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/DataDog/dd-trace-js/tree/v5.x"&gt;&lt;code&gt;v5&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://img.shields.io/npm/v/dd-trace/latest?color=white&amp;amp;label=%20&amp;amp;style=flat-square" alt="npm v5" /&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;code&gt;&amp;gt;= v18&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;YES&lt;/td&gt; 
   &lt;td align="center"&gt;YES&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;Current&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;2024-01-11&lt;/td&gt; 
   &lt;td align="center"&gt;Unknown&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;EOL = End-of-life&lt;/li&gt; 
 &lt;li&gt;SSI = Single-Step Install&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We currently maintain one release line, namely &lt;code&gt;v5&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For any new projects it is recommended to use the &lt;code&gt;v5&lt;/code&gt; release line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ npm install dd-trace
$ yarn add dd-trace
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Existing projects that need to use EOL versions of Node.js may continue to use these older release lines. This is done by specifying the version when installing the package.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ npm install dd-trace@4 # or whatever version you need
$ yarn add dd-trace@4 # or whatever version you need
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note, however, that the end-of-life release lines are no longer maintained and will not receive updates.&lt;/p&gt; 
&lt;p&gt;Any backwards-breaking functionality that is introduced into the library will result in an increase of the major version of the library and therefore a new release line. Such releases are kept to a minimum to reduce the pain of upgrading the library.&lt;/p&gt; 
&lt;p&gt;When a new release line is introduced the previous release line then enters maintenance mode where it will receive updates for the next year. Once that year is up the release line enters End of Life and will not receive new updates. The library also follows the Node.js LTS lifecycle wherein new release lines drop compatibility with Node.js versions that reach end-of-life (with the maintenance release line still receiving updates for a year).&lt;/p&gt; 
&lt;p&gt;For more information about library versioning and compatibility, see the &lt;a href="https://docs.datadoghq.com/tracing/trace_collection/compatibility/nodejs/#releases"&gt;Node.js Compatibility Requirements&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;Changes associated with each individual release are documented on the &lt;a href="https://github.com/DataDog/dd-trace-js/releases"&gt;GitHub Releases&lt;/a&gt; screen.&lt;/p&gt; 
&lt;h2&gt;Development and Contribution&lt;/h2&gt; 
&lt;p&gt;Please read the &lt;a href="https://github.com/DataDog/dd-trace-js/raw/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; document before contributing to this open source project.&lt;/p&gt; 
&lt;h2&gt;ECMAScript Modules (ESM) Support&lt;/h2&gt; 
&lt;p&gt;ESM support requires an &lt;em&gt;additional&lt;/em&gt; command line argument when starting the Node.js process. For more information, see the &lt;a href="https://docs.datadoghq.com/tracing/trace_collection/automatic_instrumentation/dd_libraries/nodejs/#esm-applications-only-import-the-loader"&gt;section on ESM support&lt;/a&gt; in the Node.js tracer documentation.&lt;/p&gt; 
&lt;h2&gt;Serverless / Lambda&lt;/h2&gt; 
&lt;p&gt;Note that there is a separate Lambda project, &lt;a href="https://github.com/DataDog/datadog-lambda-js"&gt;datadog-lambda-js&lt;/a&gt;, that is responsible for enabling metrics and distributed tracing when your application runs on Lambda. That project does depend on the &lt;code&gt;dd-trace&lt;/code&gt; package but also adds a lot of Lambda-related niceties. If you find any issues specific to Lambda integrations then the issues may get solved quicker if they're added to that repository. That said, even if your application runs on Lambda, any core instrumentation issues not related to Lambda itself may be better served by opening an issue in this repository. Regardless of where you open the issue, someone at Datadog will try to help.&lt;/p&gt; 
&lt;h2&gt;Bundling&lt;/h2&gt; 
&lt;p&gt;If you would like to trace your bundled application then please read this page on &lt;a href="https://docs.datadoghq.com/tracing/trace_collection/automatic_instrumentation/dd_libraries/nodejs/#bundling"&gt;bundling and dd-trace&lt;/a&gt;. It includes information on how to use our ESBuild plugin and includes caveats for other bundlers.&lt;/p&gt; 
&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; 
&lt;p&gt;Please refer to the &lt;a href="https://github.com/DataDog/dd-trace-js/raw/master/SECURITY.md"&gt;SECURITY.md&lt;/a&gt; document if you have found a security issue.&lt;/p&gt; 
&lt;h2&gt;Datadog With OpenTelemetery&lt;/h2&gt; 
&lt;p&gt;Please refer to the &lt;a href="https://docs.datadoghq.com/tracing/trace_collection/custom_instrumentation/nodejs/otel/"&gt;Node.js Custom Instrumentation using OpenTelemetry API&lt;/a&gt; document. It includes information on how to use the OpenTelemetry API with dd-trace-js.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Asabeneh/30-Days-Of-React</title>
      <link>https://github.com/Asabeneh/30-Days-Of-React</link>
      <description>&lt;p&gt;30 Days of React challenge is a step by step guide to learn React in 30 days. These videos may help too: https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw&lt;/p&gt;&lt;hr&gt;&lt;div&gt; 
 &lt;img align="right" width="100%" src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/30_days_of_react.jpg" /&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h1&gt; 30 Days Of React&lt;/h1&gt; 
 &lt;a class="header-badge" target="_blank" href="https://www.linkedin.com/in/asabeneh/"&gt; &lt;img src="https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social" /&gt; &lt;/a&gt; 
 &lt;a class="header-badge" target="_blank" href="https://twitter.com/Asabeneh"&gt; &lt;img alt="Twitter Follow" src="https://img.shields.io/twitter/follow/asabeneh?style=social" /&gt; &lt;/a&gt; 
 &lt;p&gt;&lt;sub&gt;Author: &lt;a href="https://www.linkedin.com/in/asabeneh/" target="_blank"&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br /&gt; &lt;small&gt; October, 2020&lt;/small&gt;&lt;/sub&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md"&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;# Day&lt;/th&gt; 
   &lt;th align="center"&gt;Topics&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;00&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo"&gt;How to Use Repo&lt;/a&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements"&gt;Requirements&lt;/a&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup"&gt;Setup&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;01&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md"&gt;JavaScript Refresher&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;02&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/02_Day_Introduction_to_React/02_introduction_to_react.md"&gt;Getting Started React&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;03&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/03_Day_Setting_Up/03_setting_up.md"&gt;Setting Up&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;04&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/04_Day_Components/04_components.md"&gt;Components&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;05&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/05_Day_Props/05_props.md"&gt;Props&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;06&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/06_Day_Map_List_Keys/06_map_list_keys.md"&gt;List, Map and Keys&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;07&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/07_Day_Class_Components/07_class_components.md"&gt;Class Components&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;08&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/08_Day_States/08_states.md"&gt;States&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;09&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/09_Day_Conditional_Rendering/09_conditional_rendering.md"&gt;Conditional Rendering&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/10_React_Project_Folder_Structure/10_react_project_folder_structure.md"&gt;React Project Folder Structure&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/11_Day_Events/11_events.md"&gt;Events&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;12&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/12_Day_Forms/12_forms.md"&gt;Forms&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;13&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/13_Day_Controlled_Versus_Uncontrolled_Input/13_uncontrolled_input.md"&gt;Controlled and Uncontrolled Component&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;14&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/14_Day_Component_Life_Cycles/14_component_life_cycles.md"&gt;Component Life Cycles&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;15&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/15_Third_Party_Packages/15_third_party_packages.md"&gt;Third Party Packages&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;16&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/16_Higher_Order_Component/16_higher_order_component.md"&gt;Higher Order Components&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;17&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/17_React_Router/17_react_router.md"&gt;React Router&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;18&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/18_Fetch_And_Axios/18_fetch_axios.md"&gt;Fetch versus Axios&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;19&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/19_projects/19_projects.md"&gt;Projects&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;20&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/20_projects/20_projects.md"&gt;Projects&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;21&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/21_Introducing_Hooks/21_introducing_hooks.md"&gt;Hooks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;22&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/22_Form_Using_Hooks/22_form_using_hooks.md"&gt;Forms Using Hook&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/23_Fetching_Data_Using_Hooks/23_fetching_data_using_hooks.md"&gt;Fetching Data Using Hooks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;24&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/24_projects/24_projects.md"&gt;Project using Hooks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/25_Custom_Hooks/25_custom_hooks.md"&gt;Custom Hooks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;26&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/26_Context/26_context.md"&gt;Context&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;27&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/27_Ref/27_ref.md"&gt;Ref&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;28&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/28_project/28_project.md"&gt;project&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;29&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/29_explore/29_explore.md"&gt;Explore&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/30_conclusions/30_conclusions.md"&gt;Conclusions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; 
&lt;!-- &lt;div&gt;
&lt;small&gt;Support the &lt;strong&gt;author&lt;/strong&gt; to create more educational materials&lt;/small&gt; &lt;br /&gt;  
&lt;a href = "https://www.paypal.me/asabeneh"&gt;&lt;img src='./images/paypal_lg.png' alt='Paypal Logo' style="width:10%"/&gt;&lt;/a&gt;
&lt;/div&gt; --&gt; 
&lt;hr /&gt; 
&lt;div&gt; 
 &lt;h2&gt;💖 Sponsors&lt;/h2&gt; 
 &lt;p&gt;Our amazing sponsors for supporting my open-source contribution and the &lt;strong&gt;30 Days of Challenge&lt;/strong&gt; series!&lt;/p&gt; 
 &lt;h3&gt;Current Sponsor&lt;/h3&gt; 
 &lt;hr /&gt; 
 &lt;div align="center"&gt; 
  &lt;a href="https://ref.wisprflow.ai/MPMzRGE" target="_blank"&gt; 
   &lt;picture&gt; 
    &lt;!-- Dark mode --&gt; 
    &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/Asabeneh/asabeneh/master/images/Wispr_Flow-Logo-white.png" /&gt; 
    &lt;!-- Light mode (fallback) --&gt; 
    &lt;img src="https://raw.githubusercontent.com/Asabeneh/asabeneh/master/images/Wispr_Flow-logo.png" width="400px" alt="Wispr Flow Logo" title="Wispr Flow" /&gt; 
   &lt;/picture&gt; &lt;/a&gt; 
  &lt;h3&gt;Dictation that understands code&lt;/h3&gt; 
  &lt;p&gt;&lt;em&gt;Ship 4x faster with developer-first dictation that works in every app.&lt;/em&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;hr /&gt; 
 &lt;h3&gt;🙌 Become a Sponsor&lt;/h3&gt; 
 &lt;p&gt;You can support this project by becoming a sponsor on &lt;strong&gt;&lt;a href="https://github.com/sponsors/asabeneh"&gt;GitHub Sponsors&lt;/a&gt;&lt;/strong&gt; or through &lt;strong&gt;&lt;a href="https://www.paypal.me/asabeneh"&gt;PayPal&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
 &lt;p&gt;Every contribution, big or small, makes a huge difference. Thank you for your support! 🌟&lt;/p&gt; 
&lt;/div&gt; --- 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#"&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo"&gt;How to Use Repo&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#star-and-fork-this-repo"&gt;Star and Fork this Repo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#clone-your-fork"&gt;Clone your Fork&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#create-a-new-branch"&gt;Create a New Branch&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#structure-exercise-solutions"&gt;Structure Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#commit-exercise-solutions"&gt;Commit Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#update-your-fork-daily"&gt;Update your Fork Daily&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup"&gt;Setup&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#install-nodejs"&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#browser"&gt;Browser&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-google-chrome"&gt;Installing Google Chrome&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#opening-google-chrome-console"&gt;Opening Google Chrome Console&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#writing-code-on-browser-console"&gt;Writing Code on Browser Console&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog"&gt;Console.log&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog-with-multiple-arguments"&gt;Console.log with Multiple Arguments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#syntax"&gt;Syntax&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#arithmetics"&gt;Arithmetics&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#code-editor"&gt;Code Editor&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-visual-studio-code"&gt;Installing Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-visual-studio-code"&gt;How to Use Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; on deciding to participate in 30 days of React programming challenge. In this challenge you will learn everything you need to use to develop a React application. In the end of the challenge you will get a 30DaysOfReact programming challenge completion certificate. In case you need help or if you would like to help others you may join the &lt;a href="https://t.me/thirtydaysofreact"&gt;telegram group&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A 30DaysOfReact&lt;/strong&gt; challenge is a guide for both beginners and advanced JavaScript and React developers. Welcome to 30 Days Of React. React is a JavaScript library. I enjoy using and teaching React and I hope you will do so too. In this step by step 30 Days React challenge, you will learn React which is one of most popular user interface JavaScript libraries. React can do everything that JavaScript can do. React can be used &lt;strong&gt;&lt;em&gt;to add interactivity to websites, to develop mobile apps, desktop applications, games&lt;/em&gt;&lt;/strong&gt;. I believe you will learn quite a lot in the next 30 days and your programming and problem solving skills will also be improved significantly.&lt;/p&gt; 
&lt;p&gt;I will use conversational English and less jargons to write this challenge. The content will be continuously updated. If you find a typo or grammar mistakes don't be surprised because I don't do any proof read before I publish it. I would recommend you to focus on the main message of the challenge instead of the English and some minor mistakes. I really appreciate if you send me pull requests for improvement and remember to pull first from master before you send pull requests. Most of the images I have used in this challenge came from 30DaysOfJavaScript challenge therefore you may need to rename file names and folders 30DaysOfReact. If you are good at arrays, loops, functions, objects, functional programming, destructuring and spreading and class then you will be able to follow the challenge properly. Otherwise, I strongly recommend you to check &lt;a href="https://github.com/Asabeneh/30-Days-Of-JavaScript"&gt;30DaysOfJavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before you dive into this course, you may check the &lt;a href="https://t.me/thirtydaysofreact"&gt;review&lt;/a&gt; of 30 Days Of React.&lt;/p&gt; 
&lt;p&gt;This challenge is easy to read, written in conversational English, engaging, motivating and at the same time, it is very demanding. You need to allocate much time to finish this challenge. If you are a visual learner, you may get the video lesson on &lt;a href="https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw"&gt; Washera&lt;/a&gt; YouTube channel. Subscribe the channel, comment and ask questions on YouTube vides and be proactive, the author will eventually notice you.&lt;/p&gt; 
&lt;p&gt;The author likes to hear your opinion about the challenge, share your thoughts about the 30DaysOfJavaScript challenge. You can leave your testimonial on this &lt;a href="https://www.asabeneh.com/testimonials"&gt;link&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Learn with Asabeneh by joining the upcoming &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSf0oNIYR9XU1DCctfl-pY36KbWse-SQX5aQaUgetqSinFYnmQ/viewform"&gt;&lt;em&gt;CODING BOOTCAMP&lt;/em&gt;&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;To get along with the challenge you need to have the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Motivation&lt;/li&gt; 
 &lt;li&gt;A computer&lt;/li&gt; 
 &lt;li&gt;Internet&lt;/li&gt; 
 &lt;li&gt;A browser&lt;/li&gt; 
 &lt;li&gt;A code editor&lt;/li&gt; 
 &lt;li&gt;HTML, CSS and JavaScript intermediate level skill&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to Use Repo&lt;/h2&gt; 
&lt;h3&gt;Star and Fork this Repo&lt;/h3&gt; 
&lt;p&gt;Star this repo to support this work and Fork the repo to create your own copy to work from.&lt;/p&gt; 
&lt;h3&gt;Clone your Fork&lt;/h3&gt; 
&lt;p&gt;You should always work directly from your forked copy.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# note that an `ssh` link is used here, but an `https` link will work the same
git clone git@github.com:username/30-Days-Of-React.git
cd 30-Days-Of-React
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Create a New Branch&lt;/h3&gt; 
&lt;p&gt;To complete daily exercises, my suggestion is to create a separate branch to house your exercise folder or any other changes you make. This will keep your master branch clean at all times, which means your master will always be similar to the original master.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git checkout -b exercise-solutions # `-b` creates the branch if it does not exist
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Structure Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;In your new branch, you can use files/folders to structure your solutions to daily exercises&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir -p solutions/day-01 # `-p` helps create nested directories
touch solutions/day-01/level1.js # touch creates a file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commit Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;Commit your solutions to your Fork&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git add solutions/day-01/level1.js
git commit -m "chore: exercise level1 complete"
git push origin exercise-solutions # branch `exercise-solutions` was created earlier
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update your Fork Daily&lt;/h3&gt; 
&lt;p&gt;This repo will be updated daily throughout the month. When a new day's content becomes available, you can update your forked copy with the steps below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1. switch to master branch
git checkout master
# 2. check if your local copy has a link to original `...Asabeneh/30-Days-Of-React.git`
git remote -v
# 3. if not, add a link to original, you can choose any name for the link or use `upstream`
git remote add upstream git@github.com:Asabeneh/30-Days-Of-React.git
# 4. check again to confirm link added
git remote -v
# 5. now you can fetch updates from original repo, assuming you named this `upstream`
git fetch upstream
# 6. merge the updates to your local master branch
git merge upstream/master master
# 7. push the merged updates to your Forked copy on GitHub
git push origin master
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that the updates are only applied to the master branch. If you wish to update any other branch, repeat steps 6-7 with the branch name. See snippet below for &lt;code&gt;exercise-solutions&lt;/code&gt; branch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git merge upstream/master exercise-solutions
git push origin exercise-solutions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;I believe you have the motivation and a strong desire to be a developer, a computer and Internet. In addition to that basic to intermediate level HTML, CSS and JS. If you have those, then you have everything to get started.&lt;/p&gt; 
&lt;h3&gt;Install Node.js&lt;/h3&gt; 
&lt;p&gt;You may not need node.js right now but you may need it for later. Install &lt;a href="https://nodejs.org/en/"&gt;node.js&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/download_node.png" alt="Node download" /&gt;&lt;/p&gt; 
&lt;p&gt;After downloading double click and install&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/install_node.png" alt="Install node" /&gt;&lt;/p&gt; 
&lt;p&gt;We can check if node is installed on our local machine by opening our device terminal or command prompt.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;asabeneh $ node -v
v12.14.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When making this tutorial I was using node version 12.14.0, but now the recommended version of node.js for download is 12.17.0.&lt;/p&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;p&gt;There are many browsers out there. However, I strongly recommend Google Chrome.&lt;/p&gt; 
&lt;h4&gt;Installing Google Chrome&lt;/h4&gt; 
&lt;p&gt;Install &lt;a href="https://www.google.com/chrome/"&gt;google chrome&lt;/a&gt; if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/google_chrome.png" alt="Google Chrome" /&gt;&lt;/p&gt; 
&lt;h4&gt;Opening Google Chrome Console&lt;/h4&gt; 
&lt;p&gt;You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting &lt;em&gt;More tools -&amp;gt; Developer tools&lt;/em&gt; or using a keyboard shortcut. I prefer using shortcuts.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_developer_tool.png" alt="Opening chrome" /&gt;&lt;/p&gt; 
&lt;p&gt;To open the Chrome console using a keyboard shortcut. It is good to know the shortcut too as a JavaScript and React developer you will spend much time on a browser console and don't be lazy to open it during development.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;Mac
Command+Option+J

Windows/Linux:
Ctl+Shift+J
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_chrome_console_shortcut.png" alt="Opening console" /&gt;&lt;/p&gt; 
&lt;p&gt;After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/js_code_on_chrome_console.png" alt="write code on console" /&gt;&lt;/p&gt; 
&lt;h4&gt;Writing Code on Browser Console&lt;/h4&gt; 
&lt;p&gt;We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;Mac
Command+Option+I

Windows:
Ctl+Shift+I
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log&lt;/h5&gt; 
&lt;p&gt;To write our first JavaScript code, we used a built-in function &lt;strong&gt;console.log()&lt;/strong&gt;. We passed an argument as input data, and the function displays the output. We passed 'Hello, World' as input data or argument in the console.log() function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Hello, World!')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log with Multiple Arguments&lt;/h5&gt; 
&lt;p&gt;The &lt;strong&gt;console.log()&lt;/strong&gt; function can take multiple parameters separated by comma. The syntax looks like as follows:&lt;strong&gt;console.log(param1, param2, param3)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/console_log_multipl_arguments.png" alt="console log multiple arguments" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Hello', 'World', '!')
console.log('HAPPY', 'NEW', 'YEAR', 2020)
console.log('Welcome', 'to', 30, 'Days', 'Of', 'JavaScript')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As you can see from the snippet code above, &lt;em&gt;console.log()&lt;/em&gt; can take multiple arguments. It is recommended to use as many console.log() prints to check what is happening in your code but don't keep all console.log() tests on your code forever. Make your life easy by keeping the browser console open.&lt;/p&gt; 
&lt;h5&gt;Comments&lt;/h5&gt; 
&lt;p&gt;We add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code.In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this /* */ is also a comment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;// This is the first comment&lt;br /&gt; // This is the second comment&lt;br /&gt; // I am a single line comment&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;/* This is a multiline comment&lt;br /&gt; Multiline comments can take multiple lines&lt;br /&gt; JavaScript is the language of the web&lt;br /&gt; */&lt;/p&gt; 
&lt;h5&gt;Syntax&lt;/h5&gt; 
&lt;p&gt;Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is &lt;em&gt;the arrangement of words and phrases to create well-formed sentences in a language&lt;/em&gt;. The technical definition of syntax is &lt;em&gt;the structure of statements in a computer language.&lt;/em&gt; Programing languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/raising_syntax_error.png" alt="Error" /&gt;&lt;/p&gt; 
&lt;p&gt;I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Hello, World!')
console.log('Hello, World!')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So far, we saw how to display text using the &lt;em&gt;console.log()&lt;/em&gt;. If we are printing text or string using &lt;em&gt;console.log()&lt;/em&gt;, the text has to be inside the single quotes, double quotes, or a backtick quotes. &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log('Hello, World!')
console.log('Hello, World!')
console.log(`Hello, World!`)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arithmetics&lt;/h4&gt; 
&lt;p&gt;Now, let us practice more writing JavaScript codes using &lt;em&gt;console.log()&lt;/em&gt; on google chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. The console can directly take arguments without the &lt;strong&gt;&lt;em&gt;console.log()&lt;/em&gt;&lt;/strong&gt; function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/arithmetic.png" alt="Arithmetic" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;console.log(2 + 3) // Addition
console.log(3 - 2) // Subtraction
console.log(2 * 3) // Multiplication
console.log(3 / 2) // Division
console.log(3 % 2) // Modulus - finding remainder
console.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Code Editor&lt;/h3&gt; 
&lt;p&gt;We can write our codes on the browser console, but it won't do for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days JavaScript challenge, we will be using Visual Studio Code.&lt;/p&gt; 
&lt;h4&gt;Installing Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Visual studio code is a very popular open-source text editor. I would recommend to &lt;a href="https://code.visualstudio.com/"&gt;download Visual Studio Code&lt;/a&gt;, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode.png" alt="Vscode" /&gt;&lt;/p&gt; 
&lt;p&gt;If you installed Visual Studio Code, let us start using it.&lt;/p&gt; 
&lt;h4&gt;How to Use Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode_ui.png" alt="Vscode ui" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/adding_project_to_vscode.png" alt="Vscode add project" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_project_on_vscode.png" alt="Vscode open project" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/scripts_on_vscode.png" alt="script file" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vsc_live_server.png" alt="Installing Live Server" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/running_script.png" alt="running script" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/launched_on_new_tab.png" alt="coding running" /&gt;&lt;/p&gt; 
&lt;p&gt;Congratulations! You have completed the setup you need to get started with React, but before we dive into React let's do a JavaScript refresher. If you are very comfortable with JavaScript you may skip day 1 JavaScript refresher. The JavaScript refresher section is vast and it may take more than one day. From my experience people usually get stuck in React because their JavaScript knowledge is very shallow therefore to fill that gap all the necessary JavaScript features which can be used in React are covered in the JavaScript refresher section. There are many exercises but you are not required to solve them. Click &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/30-Days-Of-React/02_Day_Introduction_to_React/02_introduction_to_react.md"&gt;here&lt;/a&gt; if you want skip JavaScript and jump directly into React.&lt;/p&gt; 
&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md"&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ryanhanwu/How-To-Ask-Questions-The-Smart-Way</title>
      <link>https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way</link>
      <description>&lt;p&gt;本文原文由知名 Hacker Eric S. Raymond 所撰寫，教你如何正確的提出技術問題並獲得你滿意的答案。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;提問的智慧&lt;/h1&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#contributors-"&gt;&lt;img src="https://img.shields.io/badge/all_contributors-35-orange.svg?style=flat-square" alt="All Contributors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; 
&lt;p&gt;&lt;a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/pulls"&gt;&lt;img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How To Ask Questions The Smart Way&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Copyright © 2001, 2006, 2014 Eric S. Raymond, Rick Moen&lt;/p&gt; 
&lt;p&gt;本指南英文版版權為 Eric S. Raymond, Rick Moen 所有。&lt;/p&gt; 
&lt;p&gt;原文網址 (Translated from)：&lt;a href="http://www.catb.org/~esr/faqs/smart-questions.html"&gt;http://www.catb.org/~esr/faqs/smart-questions.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015-present by &lt;a href="https://github.com/ryanhanwu"&gt;Ryan Wu&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;本中文指南是基於原文 3.10 版以及 2010 年由 &lt;a href="https://github.com/gasolin"&gt;Gasolin&lt;/a&gt; 所翻譯版本的最新翻譯；&lt;/p&gt; 
&lt;p&gt;協助指出翻譯問題，&lt;strong&gt;請&lt;a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/issues/new"&gt;發 issue&lt;/a&gt;，或直接&lt;a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/compare/"&gt;發 pull pequest&lt;/a&gt; 給我。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本文另有：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/README-zh_CN.md"&gt;简体中文版&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/history.md"&gt;原文版本歷史&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;目錄&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E8%81%B2%E6%98%8E"&gt;聲明&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E7%B0%A1%E4%BB%8B"&gt;簡介&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%9C%A8%E6%8F%90%E5%95%8F%E4%B9%8B%E5%89%8D"&gt;在提問之前&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E7%95%B6%E4%BD%A0%E6%8F%90%E5%95%8F%E6%99%82"&gt;當你提問時&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E6%85%8E%E9%81%B8%E6%8F%90%E5%95%8F%E7%9A%84%E8%AB%96%E5%A3%87"&gt;慎選提問的論壇&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#stack-overflow"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E7%B6%B2%E7%AB%99%E5%92%8Circ%E8%AB%96%E5%A3%87"&gt;網站和IRC論壇&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BD%BF%E7%94%A8%E5%B0%88%E6%A1%88%E9%83%B5%E4%BB%B6%E5%88%97%E8%A1%A8"&gt;第二步，使用專案郵件列表&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E7%BE%A9%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A2%BA%E7%9A%84%E6%A8%99%E9%A1%8C"&gt;使用有意義且描述明確的標題&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E4%BD%BF%E5%95%8F%E9%A1%8C%E5%AE%B9%E6%98%93%E5%9B%9E%E8%A6%86"&gt;使問題容易回覆&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E7%94%A8%E6%B8%85%E6%99%B0%E6%AD%A3%E7%A2%BA%E7%B2%BE%E6%BA%96%E4%B8%A6%E5%90%88%E4%B9%8E%E6%96%87%E6%B3%95%E7%9A%84%E8%AA%9E%E5%8F%A5"&gt;用清晰、正確、精準並合乎文法的語句&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E4%BD%BF%E7%94%A8%E6%98%93%E6%96%BC%E8%AE%80%E5%8F%96%E4%B8%94%E6%A8%99%E6%BA%96%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E7%99%BC%E9%80%81%E5%95%8F%E9%A1%8C"&gt;使用易於讀取且標準的文件格式發送問題&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E7%B2%BE%E7%A2%BA%E7%9A%84%E6%8F%8F%E8%BF%B0%E5%95%8F%E9%A1%8C%E4%B8%A6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9"&gt;精確的描述問題並言之有物&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E8%A9%B1%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE"&gt;話不在多而在精&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%88%A5%E5%8B%95%E8%BC%92%E8%81%B2%E7%A8%B1%E6%89%BE%E5%88%B0bug"&gt;別動輒聲稱找到Bug&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%88%A5%E7%94%A8%E4%BD%8E%E8%81%B2%E4%B8%8B%E6%B0%A3%E5%8F%96%E4%BB%A3%E4%BD%A0%E7%9C%9F%E6%AD%A3%E8%A9%B2%E5%81%9A%E7%9A%84%E4%BA%8B"&gt;別用低聲下氣取代你真正該做的事&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E6%8F%8F%E8%BF%B0%E5%95%8F%E9%A1%8C%E7%97%87%E7%8B%80%E8%80%8C%E9%9D%9E%E7%8C%9C%E6%B8%AC"&gt;描述問題症狀而非猜測&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E6%8C%89%E7%99%BC%E7%94%9F%E6%99%82%E9%96%93%E5%85%88%E5%BE%8C%E5%88%97%E5%87%BA%E5%95%8F%E9%A1%8C%E7%97%87%E7%8B%80"&gt;按發生時間先後列出問題症狀&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A8%99%E8%80%8C%E4%B8%8D%E6%98%AF%E9%81%8E%E7%A8%8B"&gt;描述目標而不是過程&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%88%A5%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E9%9B%BB%E9%83%B5%E5%9B%9E%E8%A6%86"&gt;別要求使用私人電郵回覆&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A2%BA%E5%9C%B0%E8%A1%A8%E9%81%94%E4%BD%A0%E7%9A%84%E5%95%8F%E9%A1%8C%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82"&gt;清楚明確地表達你的問題以及需求&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E8%A9%A2%E5%95%8F%E6%9C%89%E9%97%9C%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E5%95%8F%E9%A1%8C%E6%99%82"&gt;詢問有關程式碼的問題時&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%88%A5%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E6%A5%AD%E7%9A%84%E5%95%8F%E9%A1%8C%E8%B2%BC%E4%B8%8A%E4%BE%86"&gt;別把自己家庭作業的問題貼上來&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%8E%BB%E6%8E%89%E7%84%A1%E6%84%8F%E7%BE%A9%E7%9A%84%E6%8F%90%E5%95%8F%E5%8F%A5"&gt;去掉無意義的提問句&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A8%99%E9%A1%8C%E5%AF%AB%E7%B7%8A%E6%80%A5"&gt;即使你很急也不要在標題寫&lt;code&gt;緊急&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E7%A6%AE%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%E8%80%8C%E4%B8%94%E6%9C%89%E6%99%82%E9%82%84%E5%BE%88%E6%9C%89%E5%B9%AB%E5%8A%A9"&gt;禮多人不怪，而且有時還很有幫助&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E5%BE%8C%E5%8A%A0%E5%80%8B%E7%B0%A1%E7%9F%AD%E7%9A%84%E8%A3%9C%E5%85%85%E8%AA%AA%E6%98%8E"&gt;問題解決後，加個簡短的補充說明&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AE%80%E7%AD%94%E6%A1%88"&gt;如何解讀答案&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#rtfm%E5%92%8Cstfw%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86"&gt;RTFM和STFW：如何知道你已完全搞砸了&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%A6%82%E6%9E%9C%E9%82%84%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82"&gt;如果還是搞不懂&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E8%99%95%E7%90%86%E7%84%A1%E7%A6%AE%E7%9A%84%E5%9B%9E%E6%87%89"&gt;處理無禮的回應&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E6%95%97%E8%80%85"&gt;如何避免扮演失敗者&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E4%B8%8D%E8%A9%B2%E5%95%8F%E7%9A%84%E5%95%8F%E9%A1%8C"&gt;不該問的問題&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%A5%BD%E5%95%8F%E9%A1%8C%E8%88%87%E8%A0%A2%E5%95%8F%E9%A1%8C"&gt;好問題與蠢問題&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94"&gt;如果得不到回答&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E5%95%8F%E9%A1%8C"&gt;如何更好地回答問題&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E7%9B%B8%E9%97%9C%E8%B3%87%E6%BA%90"&gt;相關資源&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E9%B3%B4%E8%AC%9D"&gt;鳴謝&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;聲明&lt;/h2&gt; 
&lt;p&gt;許多專案在他們的使用協助/說明網頁中連結了本指南，這麼做很好，我們也鼓勵大家都這麼做。但如果你是負責管理這個專案網頁的人，請在超連結附近的顯著位置上註明：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;本指南不提供此專案的實際支援服務！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我們已經深刻領教到少了上述聲明所帶來的痛苦。因為少了這點聲明，我們不停地被一些白痴糾纏。這些白痴認為既然我們發布了這本指南，那麼我們就有責任解決世上所有的技術問題。&lt;/p&gt; 
&lt;p&gt;如果你是因為需要某些協助而正在閱讀這本指南，並且最後離開是因為發現從本指南作者們身上得不到直接的協助，那麼你就是我們所說的那些白痴之一。別問我們問題，我們只會忽略你。我們在這本指南中是教你如何從那些真正懂得你所遇到軟體或硬體問題的人取得協助，而99%的情況下那不會是我們。除非你確定本指南的作者之一剛好是你所遇到的問題領域的專家，否則請不要打擾我們，這樣大家都會開心一點。&lt;/p&gt; 
&lt;h2&gt;簡介&lt;/h2&gt; 
&lt;p&gt;在&lt;a href="http://www.catb.org/~esr/faqs/hacker-howto.html"&gt;駭客&lt;/a&gt;的世界裡，你所提技術問題的解答的好壞, 很大程度上取決於你提問的方式與此問題的難度。本指南將教你如何正確的提問以獲得你滿意的答案。&lt;/p&gt; 
&lt;p&gt;現在開放原始碼（Open Source）軟體已經相當盛行，您通常可以從其他更有經驗的使用者那裡獲得與駭客一樣好的答案，這是件&lt;strong&gt;好事&lt;/strong&gt;；和駭客相比，使用者們往往對那些新手常遇到的問題更寬容一些。儘管如此，以我們在此推薦的方式對待這些有經驗的使用者通常也是從他們那裡獲得有用答案的最有效方式。&lt;/p&gt; 
&lt;p&gt;首先你應該明白，駭客們喜愛有挑戰性的問題，或者能激發他們思維的好問題。如果我們並非如此，那我們也不會成為你想詢問的對象。如果你給了我們一個值得反覆咀嚼玩味的好問題，我們自會對你感激不盡。好問題是激勵，是厚禮。好問題可以提高我們的理解力，而且通常會暴露我們以前從沒意識到或者思考過的問題。對駭客而言，"好問題！"是誠摯的大力稱讚。&lt;/p&gt; 
&lt;p&gt;儘管如此，駭客們有著蔑視或傲慢面對簡單問題的壞名聲，這有時讓我們看起來對新手、無知者似乎較有敵意，但其實不是那樣的。&lt;/p&gt; 
&lt;p&gt;我們不諱言我們對那些不願思考、或者在發問前不做他們該做的事的人的蔑視。那些人是時間殺手──他們只想索取，從不付出，消耗我們可用在更有趣的問題或更值得回答的人身上的時間。我們稱這樣的人為 &lt;code&gt;失敗者（loser）&lt;/code&gt; （由於歷史原因，我們有時把它拼作 &lt;code&gt;lusers&lt;/code&gt;）。&lt;/p&gt; 
&lt;p&gt;我們意識到許多人只是想使用我們寫的軟體，他們對學習技術細節沒有興趣。對大多數人而言，電腦只是種工具，是種達到目的的手段而已。他們有自己的生活並且有更要緊的事要做。我們認可這點，也從不指望每個人都對這些讓我們著迷的技術問題感興趣。盡管如此，我們只為那些真正有興趣並願意積極參與問題解決的人調整回答問題的風格。這點不會變，也不該變：否則，我們就是在最擅長的事情上降低效率。&lt;/p&gt; 
&lt;p&gt;我們（在很大程度上）是自願的，從繁忙的生活中抽出時間來解答疑惑，而且時常被提問淹沒。所以我們無情的濾掉一些話題，特別是拋棄那些看起來像失敗者的傢伙，以便更高效的利用時間來回答&lt;code&gt;贏家（溫拿）&lt;/code&gt;的問題。&lt;/p&gt; 
&lt;p&gt;如果你厭惡我們的態度，高高在上，或過於傲慢，不妨也設身處地想想。我們並沒有要求你向我們屈服──事實上，我們大多數人非常樂意與你平等地交流，只要你付出小小努力來滿足基本要求，我們就會歡迎你加入我們的文化。但讓我們幫助那些不願意幫助自己的人是沒有效率的。無知沒有關係，但裝白痴就是不行。&lt;/p&gt; 
&lt;p&gt;所以，你不必在技術上很在行才能吸引我們的注意，但你必須表現出能引導你變得在行的特質──機敏、有想法、善於觀察、樂於主動參與解決問題。如果你做不到這些使你與眾不同的事情，我們建議你花點錢找家商業公司簽個技術支援服務契約，而不是要求駭客個人無償地幫助你。&lt;/p&gt; 
&lt;p&gt;如果你決定向我們求助，當然你也不希望被視為失敗者，更不願成為失敗者中的一員。能立刻得到快速並有效答案的最好方法，就是像贏家那樣提問──聰明、自信、有解決問題的思路，只是偶爾在特定的問題上需要獲得一點幫助。&lt;/p&gt; 
&lt;p&gt;（歡迎對本指南提出改進意見。你可以 email 你的建議至 &lt;a href="mailto:esr@thyrsus.com"&gt;esr@thyrsus.com&lt;/a&gt; 或 &lt;a href="mailto:respond-auto@linuxmafia.com"&gt;respond-auto@linuxmafia.com&lt;/a&gt;。然而請注意，本文並非&lt;a href="https://www.ietf.org/rfc/rfc1855.txt"&gt;網路禮節&lt;/a&gt;的通用指南，而我們通常會拒絕無助於在技術論壇得到有用答案的建議。）&lt;/p&gt; 
&lt;h2&gt;在提問之前&lt;/h2&gt; 
&lt;p&gt;在你準備要透過電子郵件、新聞群組或者聊天室提出技術問題前，請先做到以下事情：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;嘗試在你準備提問的論壇的舊文章中搜尋答案。&lt;/li&gt; 
 &lt;li&gt;嘗試上網搜尋來找到答案。&lt;/li&gt; 
 &lt;li&gt;嘗試閱讀手冊來找到答案。&lt;/li&gt; 
 &lt;li&gt;嘗試閱讀常見問題文件（FAQ）來找到答案。&lt;/li&gt; 
 &lt;li&gt;嘗試自己檢查或試驗來找到答案&lt;/li&gt; 
 &lt;li&gt;向你身邊的強者朋友打聽來找到答案。&lt;/li&gt; 
 &lt;li&gt;如果你是程式開發者，請嘗試閱讀原始碼來找到答案&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;當你提出問題的時候，請先表明你已經做了上述的努力；這將有助於樹立你並不是一個不勞而獲且浪費別人的時間的提問者。如果你能一併表達在做了上述努力的過程中所&lt;strong&gt;學到&lt;/strong&gt;的東西會更好，因為我們更樂於回答那些表現出能從答案中學習的人的問題。&lt;/p&gt; 
&lt;p&gt;運用某些策略，比如先用 Google 搜尋你所遇到的各種錯誤訊息（既搜尋 &lt;a href="https://groups.google.com/"&gt;Google論壇&lt;/a&gt;，也搜尋網頁），這樣很可能直接就找到了能解決問題的文件或郵件列表線索。即使沒有結果，在郵件列表或新聞組尋求幫助時加上一句 &lt;code&gt;我在 Google 中搜過下列句子但沒有找到什麼有用的東西&lt;/code&gt; 也是件好事，即使它只是表明了搜尋引擎不能提供哪些幫助。這麼做（加上搜尋過的字串）也讓遇到相似問題的其他人能被搜尋引擎引導到你的提問來。&lt;/p&gt; 
&lt;p&gt;別著急，不要指望幾秒鐘的 Google 搜尋就能解決一個複雜的問題。在向專家求助之前，再閱讀一下常見問題文件（FAQ）、放輕鬆、坐舒服一些，再花點時間思考一下這個問題。相信我們，他們能從你的提問看出你做了多少閱讀與思考，如果你是有備而來，將更有可能得到解答。不要將所有問題一股腦拋出，只因你的第一次搜尋沒有找到答案（或者找到太多答案）。&lt;/p&gt; 
&lt;p&gt;準備好你的問題，再將問題仔細的思考過一遍，因為草率的發問只能得到草率的回答，或者根本得不到任何答案。越是能表現出在尋求幫助前你為解決問題所付出的努力，你越有可能得到實質性的幫助。&lt;/p&gt; 
&lt;p&gt;小心別問錯了問題。如果你的問題基於錯誤的假設，某個普通駭客（J. Random Hacker）多半會一邊在心裏想著&lt;code&gt;蠢問題…&lt;/code&gt;， 一邊用無意義的字面解釋來答覆你，希望著你會從問題的回答（而非你想得到的答案）中汲取教訓。&lt;/p&gt; 
&lt;p&gt;絕不要自以為&lt;strong&gt;夠格&lt;/strong&gt;得到答案，你沒有；你並沒有。畢竟你沒有為這種服務支付任何報酬。你將會是自己去&lt;strong&gt;掙到&lt;/strong&gt;一個答案，靠提出有內涵的、有趣的、有思維激勵作用的問題──一個有潛力能貢獻社群經驗的問題，而不僅僅是被動的從他人處索取知識。&lt;/p&gt; 
&lt;p&gt;另一方面，表明你願意在找答案的過程中做點什麼是一個非常好的開始。&lt;code&gt;誰能給點提示？&lt;/code&gt;、&lt;code&gt;我的這個例子裏缺了什麼？&lt;/code&gt;以及&lt;code&gt;我應該檢查什麼地方&lt;/code&gt;比&lt;code&gt;請把我需要的確切的過程貼出來&lt;/code&gt;更容易得到答覆。因為你表現出只要有人能指出一個正確方向，你就有完成它的能力和決心。&lt;/p&gt; 
&lt;h2&gt;當你提問時&lt;/h2&gt; 
&lt;h3&gt;慎選提問的論壇&lt;/h3&gt; 
&lt;p&gt;小心選擇你要提問的場合。如果你做了下述的事情，你很可能被忽略掉或者被看作失敗者：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在與主題不合的論壇上貼出你的問題&lt;/li&gt; 
 &lt;li&gt;在探討進階技術問題的論壇張貼非常初級的問題；反之亦然&lt;/li&gt; 
 &lt;li&gt;在太多的不同新聞群組上重複轉貼同樣的問題（cross-post）&lt;/li&gt; 
 &lt;li&gt;向既非熟人也沒有義務解決你問題的人發送私人電郵&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;駭客會剔除掉那些搞錯場合的問題，以保護他們溝通的管道不被無關的東西淹沒。你不會想讓這種事發生在自己身上的。&lt;/p&gt; 
&lt;p&gt;因此，第一步是找到對的論壇。再說一次，Google 和其它搜尋引擎還是你最好的朋友，用它們來找到與你遭遇到困難的軟硬體問題最相關的網站。通常在那裡都有常見問題（FAQ）、郵件列表及相關說明文件的連結。如果你的努力（包括&lt;strong&gt;閱讀&lt;/strong&gt; FAQ）都沒有結果，網站上也許還有回報臭蟲（Bug-reporting）的流程或連結，如果是這樣，連過去看看。&lt;/p&gt; 
&lt;p&gt;向陌生的人或論壇發送郵件最可能是風險最大的事情。舉例來說，別假設一個提供豐富內容的網頁的作者會想充當你的免費顧問。不要對你的問題是否會受到歡迎做太樂觀的估計──如果你不確定，那就向別處發送，或者根本別發。&lt;/p&gt; 
&lt;p&gt;在選擇論壇、新聞群組或郵件列表時，別太相信名字，先看看 FAQ 或者許可書以弄清楚你的問題是否切題。發文前先翻翻已有的話題，這樣可以讓你感受一下那裡的文化。事實上，事先在新聞組或郵件列表的歷史記錄中搜尋與你問題相關的關鍵詞是個極好的主意，也許這樣就找到答案了。即使沒有，也能幫助你歸納出更好的問題。&lt;/p&gt; 
&lt;p&gt;別像機關槍似的一次"掃射"所有的幫助管道，這就像大喊大叫一樣會使人不愉快。要一個一個地來。&lt;/p&gt; 
&lt;p&gt;搞清楚你的主題！最典型的錯誤之一是在某種致力於跨平台可移植的語言、套件或工具的論壇中提關於 Unix 或 Windows 作業系統程式設計介面的問題。如果你不明白為什麼這是大錯，最好在搞清楚這之間差異之前什麼也別問。&lt;/p&gt; 
&lt;p&gt;一般來說，在仔細挑選的公共論壇中提問，會比在私有論壇中提同樣的問題更容易得到有用的回答。有幾個理由可以支持這點，一是看潛在的回覆者有多少，二是看觀眾有多少。駭客較願意回答那些能幫助到許多人的問題。&lt;/p&gt; 
&lt;p&gt;可以理解的是，老練的駭客和一些熱門軟體的作者正在接受過多的錯發訊息。就像那根最後壓垮駱駝背的稻草一樣，你的加入也有可能使情況走向極端──已經好幾次了，一些熱門軟體的作者從自己軟體的支援中抽身出來，因為伴隨而來湧入其私人信箱的無用郵件變得無法忍受。&lt;/p&gt; 
&lt;h3&gt;Stack Overflow&lt;/h3&gt; 
&lt;p&gt;搜尋，&lt;strong&gt;然後&lt;/strong&gt; 才在 Stack Exchange 發問。&lt;/p&gt; 
&lt;p&gt;近年來，Stack Exchange community 社群已經成為回答技術及其他問題的主要管道，尤其是那些開放原始碼的專案。&lt;/p&gt; 
&lt;p&gt;因為 Google 索引是即時的，在看 Stack Exchange 之前先在 Google 搜尋。有很高的機率某人已經問了一個類似的問題，而且 Stack Exchange 網站們往往會是搜尋結果中最前面幾個。如果你在 Google 上沒有找到任何答案，你再到特定相關主題的網站去找。用標籤（Tag）搜尋能讓你更縮小你的搜尋結果。&lt;/p&gt; 
&lt;p&gt;如果你還是找不到任何對你的問題有用的內容，請把你的問題發在與它最相關的網站上。提問的時候請善用格式化工具，尤其註意為代碼添加格式，並且添加相關的標籤（特別是編程語言、操作系統或庫/包的名稱）。當有人要求你提供更多相關信息時，請編輯你的貼子來補充它們[譯註：而不是發一個回帖或回答！ ]。如果你覺得一個答案對你有幫助，點擊向上的箭頭來為它投票；如果一個答案提供了問題的正確解決方案，點擊投票按鈕下方的對勾來將它標記為正解。&lt;/p&gt; 
&lt;p&gt;Stack Exchange 已經成長到&lt;a href="https://stackexchange.com/sites"&gt;超過一百個網站&lt;/a&gt;，以下是最常用的幾個站：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Super User 是問一些通用的電腦問題，如果你的問題跟程式碼或是寫程式無關，只是一些網路連線之類的，請到這裡。&lt;/li&gt; 
 &lt;li&gt;Stack Overflow 是問寫程式有關的問題。&lt;/li&gt; 
 &lt;li&gt;Server Fault 是問伺服器和網管相關的問題。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;網站和IRC論壇&lt;/h3&gt; 
&lt;p&gt;在地的使用者群組（user group），或者你所用的 Linux 發行版本也許正在宣傳他們的網頁論壇或 IRC 頻道，並提供新手幫助（在一些非英語國家，新手論壇很可能還是郵件列表）， 這些地方是開始提問的好首選，特別是當你覺得遇到的也許只是相對簡單或者很普通的問題時。有廣告贊助的 IRC 頻道是公開歡迎提問的地方，通常可以即時得到回應。&lt;/p&gt; 
&lt;p&gt;事實上，如果程式出的問題只發生在特定 Linux 發行版提供的版本（這很常見），最好先去該發行版的論壇或郵件列表中提問，再到程式本身的論壇或郵件列表提問。（否則）該項目的駭客可能僅僅回覆 "用&lt;strong&gt;我們的&lt;/strong&gt;版本"。&lt;/p&gt; 
&lt;p&gt;在任何論壇發文以前，先確認一下有沒有搜尋功能。如果有，就試著搜尋一下問題的幾個關鍵詞，也許這會有幫助。如果在此之前你已做過通用的網頁搜尋（你也該這樣做），還是再搜尋一下論壇，搜尋引擎有可能沒來得及索引此論壇的全部內容。&lt;/p&gt; 
&lt;p&gt;透過論壇或 IRC 頻道來提供使用者支援服務有增長的趨勢，電子郵件則大多為專案開發者間的交流而保留。所以最好先在論壇或 IRC 中尋求與該專案相關的協助。&lt;/p&gt; 
&lt;h3&gt;第二步，使用專案郵件列表&lt;/h3&gt; 
&lt;p&gt;當某個專案提供開發者郵件列表時，要向列表而不是其中的個別成員提問，即使你確信他能最好地回答你的問題。查一查專案的文件和首頁，找到專案的郵件列表並使用它。有幾個很好的理由支持我們採用這種辦法：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;任何好到需要向個別開發者提出的問題，也將對整個專案群組有益。反之，如果你認為自己的問題對整個專案群組來說太愚蠢，也不能成為騷擾個別開發者的理由。&lt;/li&gt; 
 &lt;li&gt;向列表提問可以分散開發者的負擔，個別開發者（尤其是專案領導人）也許太忙以至於沒法回答你的問題。&lt;/li&gt; 
 &lt;li&gt;大多數郵件列表都會被封存，那些被封存的內容將被搜尋引擎索引。如果你向列表提問並得到解答，將來其它人可以透過網頁搜尋找到你的問題和答案，也就不用再次發問了。&lt;/li&gt; 
 &lt;li&gt;如果某些問題經常被問到，開發者可以利用此資訊來改進說明文件或軟體本身，以使其更清楚。如果只是私下提問，就沒有人能看到最常見問題的完整場景。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如果一個項目既有"使用者" 也有"開發者"（或"駭客"）郵件列表或論壇，而你又不會動到那些原始碼，那麼就向"使用者"列表或論壇提問。不要假設自己會在開發者列表中受到歡迎，那些人多半會將你的提問視為干擾他們開發的噪音。&lt;/p&gt; 
&lt;p&gt;然而，如果你&lt;strong&gt;確信&lt;/strong&gt;你的問題很特別，而且在"使用者" 列表或論壇中幾天都沒有回覆，可以試試前往"開發者"列表或論壇發問。建議你在張貼前最好先暗地裡觀察幾天以了解那裡的行事方式（事實上這是參與任何私有或半私有列表的好主意）&lt;/p&gt; 
&lt;p&gt;如果你找不到一個專案的郵件列表，而只能查到專案維護者的電子信箱地址，儘管向他發信。即使是在這種情況下，也別假設（專案）郵件列表不存在。在你的電子郵件中，請陳述你已經試過但沒有找到合適的郵件列表，也提及你不反對將自己的郵件轉發給他人（許多人認為，即使沒什麼秘密，私人電子郵件也不應該被公開。透過允許將你的電子郵件轉發他人，你給了相應人員處置你郵件的選擇）。&lt;/p&gt; 
&lt;h3&gt;使用有意義且描述明確的標題&lt;/h3&gt; 
&lt;p&gt;在郵件列表、新聞群組或論壇中，大約50字以內的標題是抓住資深專家注意力的好機會。別用喋喋不休的&lt;code&gt;幫幫忙&lt;/code&gt;、&lt;code&gt;跪求&lt;/code&gt;、&lt;code&gt;急&lt;/code&gt;（更別說&lt;code&gt;救命啊！！！！&lt;/code&gt;這樣讓人反感的話，用這種標題會被條件反射式地忽略）來浪費這個機會。不要妄想用你的痛苦程度來打動我們，而是在這點空間中使用極簡單扼要的描述方式來提出問題。&lt;/p&gt; 
&lt;p&gt;一個好標題範例是&lt;code&gt;目標 -- 差異&lt;/code&gt;式的描述，許多技術支援組織就是這樣做的。在&lt;code&gt;目標&lt;/code&gt;部分指出是哪一個或哪一組東西有問題，在&lt;code&gt;差異&lt;/code&gt;部分則描述與期望的行為不一致的地方。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;蠢問題：救命啊！我的筆電不能正常顯示了！&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;聰明問題：X.org 6.8.1的滑鼠游標會變形，某牌顯示卡 MV1005 晶片組。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;更聰明問題：X.org 6.8.1的滑鼠游標，在某牌顯示卡 MV1005 晶片組環境下 - 會變形。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;編寫&lt;code&gt;目標 -- 差異&lt;/code&gt; 式描述的過程有助於你組織對問題的細緻思考。是什麼被影響了？ 僅僅是滑鼠游標或者還有其它圖形？只在 X.org 的 X 版中出現？或只是出現在6.8.1版中？ 是針對某牌顯示卡晶片組？或者只是其中的 MV1005 型號？ 一個駭客只需瞄一眼就能夠立即明白你的環境&lt;strong&gt;和&lt;/strong&gt;你遇到的問題。&lt;/p&gt; 
&lt;p&gt;總而言之，請想像一下你正在一個只顯示標題的封存討論串（Thread）索引中查尋。讓你的標題更好地反映問題，可使下一個搜尋類似問題的人能夠關注這個討論串，而不用再次提問相同的問題。&lt;/p&gt; 
&lt;p&gt;如果你想在回覆中提出問題，記得要修改內容標題，以表明你是在問一個問題， 一個看起來像 &lt;code&gt;Re: 測試&lt;/code&gt; 或者 &lt;code&gt;Re: 新bug&lt;/code&gt; 的標題很難引起足夠重視。另外，在不影響連貫性之下，適當引用並刪減前文的內容，能給新來的讀者留下線索。&lt;/p&gt; 
&lt;p&gt;對於討論串，不要直接點擊回覆來開始一個全新的討論串，這將限縮你的觀眾。因為有些郵件閱讀程序，比如 mutt ，允許使用者按討論串排序並透過折疊討論串來隱藏消息，這樣做的人永遠看不到你發的消息。&lt;/p&gt; 
&lt;p&gt;僅僅改變標題還不夠。mutt 和其它一些郵件閱讀程式還會檢查郵件標題以外的其它訊息，以便為其指定討論串。所以寧可發一個全新的郵件。&lt;/p&gt; 
&lt;p&gt;在網頁論壇上，好的提問方式稍有不同，因為討論串與特定的訊息緊密結合，並且通常在討論串外就看不到裡面的內容，故透過回覆提問，而非改變標題是可接受的。不是所有論壇都允許在回覆中出現分離的標題，而且這樣做了基本上沒有人會去看。不過，透過回覆提問，這本身就是曖昧的做法，因為它們只會被正在查看該標題的人讀到。所以，除非你&lt;strong&gt;只想&lt;/strong&gt;在該討論串當前活躍的人群中提問，不然還是另起爐灶比較好。&lt;/p&gt; 
&lt;h3&gt;使問題容易回覆&lt;/h3&gt; 
&lt;p&gt;以&lt;code&gt;請將你的回覆寄到……&lt;/code&gt;來結束你的問題多半會使你得不到回答。如果你覺得花幾秒鐘在電子信箱客戶端設置一下回覆地址都麻煩，我們也覺得花幾秒鐘思考你的問題更麻煩。如果你的電子信箱程式不支援這樣做，&lt;a href="http://linuxmafia.com/faq/Mail/muas.html"&gt;換個好點的&lt;/a&gt;；如果是作業系統不支援這種電子信箱程式，也換個好點的。&lt;/p&gt; 
&lt;p&gt;在論壇，要求透過電子郵件回覆是非常無禮的，除非你相信回覆的訊息可能比較敏感（而且有人會為了某些未知的原因，只讓你而不是整個論壇知道答案）。如果你只是想在有人回覆討論串時得到電子郵件提醒，可以要求網頁論壇發送給你。幾乎所有論壇都支援諸如&lt;code&gt;追蹤此討論串&lt;/code&gt;、&lt;code&gt;有回覆時發送郵件提醒&lt;/code&gt;等功能。&lt;/p&gt; 
&lt;h3&gt;用清晰、正確、精準並合乎文法的語句&lt;/h3&gt; 
&lt;p&gt;我們從經驗中發現，粗心的提問者通常也會粗心的寫程式與思考（我敢打包票）。回答粗心大意者的問題很不值得，我們寧願把時間耗在別處。&lt;/p&gt; 
&lt;p&gt;正確的拼字、標點符號和大小寫是很重要的。一般來說，如果你覺得這樣做很麻煩，不想在乎這些，那我們也覺得麻煩，不想在乎你的提問。花點額外的精力斟酌一下字句，用不著太僵硬與正式──事實上，駭客文化很看重能準確地使用非正式、俚語和幽默的語句。但它&lt;strong&gt;必須很&lt;/strong&gt;準確，而且有跡象表明你是在思考和關注問題。&lt;/p&gt; 
&lt;p&gt;正確地拼寫、使用標點和大小寫，不要將&lt;code&gt;its&lt;/code&gt;混淆為&lt;code&gt;it's&lt;/code&gt;，&lt;code&gt;loose&lt;/code&gt;搞成&lt;code&gt;lose&lt;/code&gt;或者將&lt;code&gt;discrete&lt;/code&gt;弄成&lt;code&gt;discreet&lt;/code&gt;。不要&lt;strong&gt;全部用大寫&lt;/strong&gt;，這會被視為無禮的大聲嚷嚷（全部小寫也好不到哪去，因為不易閱讀。&lt;a href="https://zh.wikipedia.org/wiki/%E8%89%BE%E5%80%AB%C2%B7%E8%80%83%E5%85%8B%E6%96%AF"&gt;Alan Cox&lt;/a&gt;也許可以這樣做，但你不行。）&lt;/p&gt; 
&lt;p&gt;更白話的說，如果你寫得像是個半文盲[譯註：&lt;a href="http://zh.wikipedia.org/zh-tw/%E5%B0%8F%E7%99%BD"&gt;小白&lt;/a&gt;]），那多半得不到理睬。也不要使用即時通訊中的簡寫或&lt;a href="https://zh.wikipedia.org/zh-tw/%E7%81%AB%E6%98%9F%E6%96%87"&gt;火星文&lt;/a&gt;，如將&lt;code&gt;的&lt;/code&gt;簡化為&lt;code&gt;ㄉ&lt;/code&gt;會使你看起來像一個為了少打幾個鍵而省字的小白。更糟的是，如果像個小孩似地鬼畫符那絕對是在找死，可以肯定沒人會理你（或者最多是給你一大堆指責與挖苦）。&lt;/p&gt; 
&lt;p&gt;如果在使用非母語的論壇提問，你可以犯點拼寫和語法上的小錯，但決不能在思考上馬虎（沒錯，我們通常能弄清兩者的分別）。同時，除非你知道回覆者使用的語言，否則請使用英語書寫。繁忙的駭客一般會直接刪除用他們看不懂語言寫的消息。在網路上英語是通用語言，用英語書寫可以將你的問題在尚未被閱讀就被直接刪除的可能性降到最低。&lt;/p&gt; 
&lt;p&gt;如果英文是你的第一外語（Second language），提示潛在回覆者你有潛在的語言困難是很好的： [譯註：以下附上原文以供使用]&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;English is not my native language; please excuse typing errors.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;英文不是我的母語，請原諒我的錯字或文法&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;如果你說&lt;strong&gt;某語言&lt;/strong&gt;，請寄信/私訊給我；我需要有人協助我翻譯我的問題&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;I am familiar with the technical terms, but some slang expressions and idioms are difficult for me.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;我對技術名詞很熟悉，但對於俗語或是特別用法比較不甚了解。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;I've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use one or the other.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;我把我的問題用&lt;strong&gt;某語言&lt;/strong&gt;和英文寫出來，如果你只用一種語言回答，我會樂意將其翻譯成另一種。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;使用易於讀取且標準的文件格式發送問題&lt;/h3&gt; 
&lt;p&gt;如果你人為地將問題搞得難以閱讀，它多半會被忽略，人們更願讀易懂的問題，所以：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用純文字而不是 HTML (&lt;a href="http://archive.birdhouse.org/etc/evilmail.html"&gt;關閉 HTML &lt;/a&gt;並不難）&lt;/li&gt; 
 &lt;li&gt;使用 MIME 附件通常是可以的，前提是真正有內容（譬如附帶的原始碼或patch），而不僅僅是信箱程式生成的模板（譬如只是信件內容的拷貝）。&lt;/li&gt; 
 &lt;li&gt;不要發送一段文字只是單行句子但多次斷行的郵件（這使得回覆部分內容非常困難）。設想你的讀者是在80個字符寬的終端機上閱讀郵件，最好設置你的斷行點小於80字。&lt;/li&gt; 
 &lt;li&gt;但是，也&lt;strong&gt;不要&lt;/strong&gt;用任何固定斷行資料（譬如日誌檔案拷貝或會話記錄）。檔案應該原樣包含，讓回覆者有信心他們看到的是和你看到的一樣的東西。&lt;/li&gt; 
 &lt;li&gt;在英語論壇中，不要使用&lt;code&gt;Quoted-Printable&lt;/code&gt; MIME編碼發送消息。這種編碼對於張貼非 ASCII 語言可能是必須的，但很多電子信箱程式並不支援這種編碼。當它們分斷時，那些文本中四處散佈的&lt;code&gt;=20&lt;/code&gt;符號既難看也分散注意力，甚至有可能破壞內容的語意。&lt;/li&gt; 
 &lt;li&gt;絕對，&lt;strong&gt;永遠&lt;/strong&gt;不要指望駭客們閱讀使用封閉格式編寫的文件，像是微軟公司的 Word 或 Excel 文件等。大多數駭客對此的反應就像有人將還在冒熱氣的豬糞倒在你門口階梯上時你的反應一樣。即便他們能夠處理，他們也很厭惡這麼做。&lt;/li&gt; 
 &lt;li&gt;如果你從使用 Windows 的電腦發送電子郵件，關閉微軟愚蠢的&lt;code&gt;智慧引號&lt;/code&gt;功能 （從[選項] &amp;gt; [校訂] &amp;gt; [自動校正選項], 按掉&lt;code&gt;智慧引號&lt;/code&gt;核取方塊），以免在你的郵件中到處散佈垃圾字符。&lt;/li&gt; 
 &lt;li&gt;在論壇，勿濫用&lt;code&gt;表情符號&lt;/code&gt;和&lt;code&gt;HTML&lt;/code&gt;功能（當它們提供時）。一兩個表情符號通常沒有問題，但花哨的彩色文本傾向於使人認為你是個無能之輩。過濫地使用表情符號、色彩和字體會使你看來像個傻笑的小姑娘。這通常不是個好主意，除非你只是對性而不是有用的回覆更有興趣。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如果你使用圖形使用者介面的電子信箱程式（如微軟公司的 Outlook 或者其它類似的），注意它們的預設配置不一定滿足這些要求。大多數這類程式有基於選單的&lt;code&gt;查看原始碼&lt;/code&gt;命令，用它來檢查發送文件夾中的消息，以確保發送的是沒有多餘雜質的純文本文件。&lt;/p&gt; 
&lt;h3&gt;精確的描述問題並言之有物&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;仔細、清楚地描述你的問題或臭蟲的症狀。&lt;/li&gt; 
 &lt;li&gt;描述問題發生的環境（機器配置、作業系統、應用程式、以及相關的資訊），提供經銷商的發行版和版本號（如：&lt;code&gt;Fedora Core 4&lt;/code&gt;、&lt;code&gt;Slackware 9.1&lt;/code&gt;等）。&lt;/li&gt; 
 &lt;li&gt;描述在提問前你是怎樣去研究和理解這個問題的。&lt;/li&gt; 
 &lt;li&gt;描述在提問前為確定問題而採取的診斷步驟。&lt;/li&gt; 
 &lt;li&gt;描述最近做過什麼可能相關的硬體或軟體變更。&lt;/li&gt; 
 &lt;li&gt;盡可能的提供一個可以&lt;code&gt;重製這個問題的既定環境&lt;/code&gt;的方法&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;儘量去揣測一個駭客會怎樣反問你，在他提問的時候預先給他答案。&lt;/p&gt; 
&lt;p&gt;以上幾點中，當你回報的是你認為可能在程式碼中的問題時，給駭客一個可以重製你的問題的環境尤其重要。當你這麼做時，你得到有效的回答的機會和速度都會大大的提升。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.chiark.greenend.org.uk/~sgtatham/"&gt;Simon Tatham&lt;/a&gt; 寫過一篇名為〈&lt;a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs-tw.html"&gt;如何有效地回報Bug&lt;/a&gt;〉的出色文章。強力推薦你也讀一讀。&lt;/p&gt; 
&lt;h3&gt;話不在多而在精&lt;/h3&gt; 
&lt;p&gt;你需要提供精確有內容的資訊。這並不是要求你簡單的把成堆的出錯程式碼或者資料完全轉錄到你的提問中。如果你有龐大而複雜的測試樣例能重現程式當掉的情境，儘量將它剪裁得越小越好。&lt;/p&gt; 
&lt;p&gt;這樣做的用處至少有三點。 第一，表現出你為簡化問題付出了努力，這可以使你得到回答的機會增加； 第二，簡化問題使你更有可能得到&lt;strong&gt;有用&lt;/strong&gt;的答案； 第三，在精鍊你的bug報告的過程中，你很可能就自己找到了解決方法或權宜之計。&lt;/p&gt; 
&lt;h3&gt;別動輒聲稱找到Bug&lt;/h3&gt; 
&lt;p&gt;當你在使用軟體中遇到問題，除非你非常、&lt;strong&gt;非常&lt;/strong&gt;的有根據，不要動輒聲稱找到了Bug。提示：除非你能提供解決問題的原始碼補丁，或者對前一版本的回歸測試表現出不正確的行為，否則你都多半不夠完全確信。這同樣適用在網頁和文件，如果你（聲稱）發現了文件的&lt;code&gt;Bug&lt;/code&gt;，你應該能提供相應位置的修正或替代文件。&lt;/p&gt; 
&lt;p&gt;請記得，還有許多其它使用者沒遇到你發現的問題，否則你在閱讀文件或搜尋網頁時就應該發現了（你在抱怨前&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E5%9C%A8%E6%8F%90%E5%95%8F%E4%B9%8B%E5%89%8D"&gt;已經做了這些，是吧&lt;/a&gt;？）。這也意味著很有可能是你弄錯了而不是軟體本身有問題。&lt;/p&gt; 
&lt;p&gt;編寫軟體的人總是非常辛苦地使它盡可能完美。如果你聲稱找到了Bug，也就是在質疑他們的能力，即使你是對的，也有可能會冒犯到其中某部分人。這尤其嚴重當你在標題中嚷嚷著有&lt;code&gt;Bug&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;提問時，即使你私下非常確信已經發現一個真正的臭蟲，最好寫得像是&lt;strong&gt;你&lt;/strong&gt;做錯了什麼。如果真的有臭蟲，你會在回覆中看到這點。這樣做的話，如果真有臭蟲，維護者就會向你道歉，這總比你惹惱別人然後欠別人一個道歉要好一點。&lt;/p&gt; 
&lt;h3&gt;別用低聲下氣取代你真正該做的事&lt;/h3&gt; 
&lt;p&gt;有些人明白他們不該粗魯或傲慢的提問並要求得到答覆，但他們選擇另一個極端 -- 低聲下氣：&lt;code&gt;我知道我只是個可悲的新手，一個失敗者，但...&lt;/code&gt;。這既使人困擾，也沒有用，尤其是伴隨著與實際問題含糊不清的描述時更令人反感。&lt;/p&gt; 
&lt;p&gt;別用原始靈長類動物的把戲來浪費你我的時間。取而代之的是，盡可能清楚地描述背景條件和你的問題情況。這比低聲下氣更好地定位了你的位置。&lt;/p&gt; 
&lt;p&gt;有時網頁論壇會設有專為新手提問的版面，如果你真的認為遇到了初學者的問題，到那去就是了，但一樣別那麼低聲下氣。&lt;/p&gt; 
&lt;h3&gt;描述問題症狀而非猜測&lt;/h3&gt; 
&lt;p&gt;告訴駭客們你認為問題是怎樣造成的並沒什麼幫助。（如果你的推斷如此有效，還用向別人求助嗎？），因此要確信你原原本本告訴了他們問題的症狀，而不是你的解釋和理論；讓駭客們來推測和診斷。如果你認為陳述自己的猜測很重要，清楚地說明這只是你的猜測，並描述為什麼它們不起作用。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;蠢問題&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我在編譯內核時接連遇到 SIG11 錯誤， 我懷疑某條飛線搭在主板的走線上了，這種情況應該怎樣檢查最好？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;聰明問題&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我的組裝電腦是 FIC-PA2007 主機板搭載 AMD K6/233 CPU（威盛 Apollo VP2晶片組）， 256MB Corsair PC133 SDRAM記憶體，在編譯內核時，從開機20分鐘以後就頻頻產生 SIG11 錯誤， 但是在頭20分鐘內從沒發生過相同的問題。重新啟動也沒有用，但是關機一晚上就又能工作20分鐘。 所有記憶體都換過了，沒有效果。相關部分的標準編譯記錄如下…&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;由於以上這點似乎讓許多人覺得難以配合，這裡有句話可以提醒你：&lt;code&gt;所有的診斷專家都來自密蘇里州。&lt;/code&gt; 美國國務院的官方座右銘則是：&lt;code&gt;讓我看看&lt;/code&gt;（出自國會議員 Willard D. Vandiver 在1899年時的講話：&lt;code&gt;我來自一個出產玉米，棉花，牛蒡和民主黨人的國家，滔滔雄辯既不能說服我，也不會讓我滿意。我來自密蘇里州，你必須讓我看看。&lt;/code&gt;） 針對診斷者而言，這並不是一種懷疑，而只是一種真實而有用的需求，以便讓他們看到的是與你看到的原始證據盡可能一致的東西，而不是你的猜測與歸納的結論。所以，大方的展示給我們看吧！&lt;/p&gt; 
&lt;h3&gt;按發生時間先後列出問題症狀&lt;/h3&gt; 
&lt;p&gt;問題發生前的一系列操作，往往就是對找出問題最有幫助的線索。因此，你的說明裡應該包含你的操作步驟，以及機器和軟體的反應，直到問題發生。在命令列處理的情況下，提供一段操作記錄（例如運行腳本工具所生成的），並引用相關的若干行（如20行）記錄會非常有幫助。&lt;/p&gt; 
&lt;p&gt;如果當掉的程式有診斷選項（如 -v 的詳述開關），試著選擇這些能在記錄中增加除錯資訊的選項。記住，&lt;code&gt;多&lt;/code&gt;不等於&lt;code&gt;好&lt;/code&gt;。試著選取適當的除錯級別以便提供有用的訊息而不是讓讀者淹沒在垃圾中。&lt;/p&gt; 
&lt;p&gt;如果你的說明很長（如超過四個段落），在開頭簡述問題，接下來再按時間順序詳述會有所幫助。這樣駭客們在讀你的記錄時就知道該注意哪些內容了。&lt;/p&gt; 
&lt;h3&gt;描述目標而不是過程&lt;/h3&gt; 
&lt;p&gt;如果你想弄清楚如何做某事（而不是報告一個Bug），在開頭就描述你的目標，然後才陳述重現你所卡住的特定步驟。&lt;/p&gt; 
&lt;p&gt;經常尋求技術幫助的人在心中有個更高層次的目標，而他們在自以為能達到目標的特定道路上被卡住了，然後跑來問該怎麼走，但沒有意識到這條路本身就有問題。結果要費很大的勁才能搞定。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;蠢問題&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我怎樣才能從某繪圖程式的顏色選擇器中取得十六進制的 RGB 值？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;聰明問題&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我正試著把一幅圖片的色碼替換成自己選定的色碼，我現在知道的唯一方法是編輯每個色碼區塊， 但卻無法從某繪圖程式的顏色選擇器取得十六進制的 RGB 值。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;第二種提問法比較聰明，你可能得到像是&lt;code&gt;建議採用另一個更適任的工具&lt;/code&gt;的回覆。&lt;/p&gt; 
&lt;h3&gt;別要求使用私人電郵回覆&lt;/h3&gt; 
&lt;p&gt;駭客們認為問題的解決過程應該公開、透明，此過程中如果更有經驗的人注意到不完整或者不當之處，最初的回覆才能夠、也應該被糾正。同時，作為提供幫助者也能因為能力和學識被其它同行看到而得到某種獎勵。&lt;/p&gt; 
&lt;p&gt;當你要求私下回覆時，這個過程和獎勵都被中止。別這樣做，讓&lt;strong&gt;回覆者&lt;/strong&gt;來決定是否私下回答 -- 如果他真這麼做了，通常是因為他認為問題編寫太差或者太膚淺，以至於對其它人沒有興趣。&lt;/p&gt; 
&lt;p&gt;這條規則存在一條有但書的例外，如果你確信提問可能會引來大量雷同的回覆時，那麼這個神奇的提問句會是&lt;code&gt;向我發電郵，我將為論壇歸納這些回覆&lt;/code&gt;。試著將郵件列表或新聞群組從洪水般的雷同回覆中解救出來是非常有禮貌的 -- 但你必須信守諾言。&lt;/p&gt; 
&lt;h3&gt;清楚明確地表達你的問題以及需求&lt;/h3&gt; 
&lt;p&gt;漫無邊際的提問近乎無休無止的時間黑洞。最有可能給你有用答案的人通常也正是最忙的人（他們忙是因為要親自完成大部分工作）。這樣的人對無節制的時間黑洞相當厭惡，所以他們也傾向於厭惡那些漫無邊際的提問。&lt;/p&gt; 
&lt;p&gt;如果你明確表述需要回答者做什麼（如提供指點、發送一段程式碼、檢查你的補丁、或是其他等等），就最有可能得到有用的答案。因為這會定出一個時間和精力的上限，便於回答者能集中精力來幫你。這麼做很棒。&lt;/p&gt; 
&lt;p&gt;要理解專家們所處的世界，請把專業技能想像為充裕的資源，而回覆的時間則是稀缺的資源。你要求他們奉獻的時間越少，你越有可能從真正專業而且很忙的專家那裡得到解答。&lt;/p&gt; 
&lt;p&gt;所以，界定一下你的問題，使專家花在辨識你的問題和回答所需要付出的時間減到最少，這技巧對你獲得有用的答案相當有幫助──但這技巧通常和簡化問題有所區別。因此，問&lt;code&gt;我想更好的理解X，可否指點一下哪裡有好一點的說明？&lt;/code&gt;通常比問&lt;code&gt;你能解釋一下X嗎？&lt;/code&gt;更好。如果你的程式碼不能運作，通常請別人看看哪裡有問題，比要求別人替你改正要明智得多。&lt;/p&gt; 
&lt;h3&gt;詢問有關程式碼的問題時&lt;/h3&gt; 
&lt;p&gt;如果沒有提示別人應該從何入手，別要求他人幫你調試有問題的程式碼。張貼幾百行的程式碼，然後說一聲：&lt;code&gt;它不會動&lt;/code&gt;會讓你完全被忽略。只貼幾十行程式碼，然後說一句：&lt;code&gt;在第七行以後，我期待它顯示 &amp;lt;x&amp;gt;，但實際出現的是 &amp;lt;y&amp;gt;&lt;/code&gt;比較有可能讓你得到回應。&lt;/p&gt; 
&lt;p&gt;最有效描述程式問題的方法是提供最精簡的臭蟲展示測試示例（bug-demonstrating test case）。什麼是最精簡的測試示例? 那是問題的縮影；一小個程式片段能&lt;strong&gt;剛好&lt;/strong&gt;展示出程式的異常行為，而不包含其他令人分散注意力的內容。怎麼製作最精簡的測試示例？如果你知道哪一行或哪一段程式碼會造成異常的行為，複製下來並加入足夠重現這個狀況的程式碼（例如，足以讓這段程式碼能被編譯/直譯/被應用程式處理）。如果你無法將問題縮減到一個特定區塊，就複製一份程式碼並移除不影響產生問題行為的部分。總之，測試示例越小越好（查看&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#%E8%A9%B1%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE"&gt;話不在多而在精&lt;/a&gt;一節）。&lt;/p&gt; 
&lt;p&gt;一般而言，要得到一段相當精簡的測試示例並不太容易，但永遠先嘗試這樣做的是種好習慣。這種方式可以幫助你了解如何自行解決這個問題──而且即使你的嘗試不成功，駭客們也會看到你在嘗試取得答案的過程中付出了努力，這可以讓他們更願意與你合作。&lt;/p&gt; 
&lt;p&gt;如果你只是想讓別人幫忙審（Review）一下程式碼，在信的開頭就要說出來，並且一定要提到你認為哪一部分特別需要關注以及為什麼。&lt;/p&gt; 
&lt;h3&gt;別把自己家庭作業的問題貼上來&lt;/h3&gt; 
&lt;p&gt;駭客們很擅長分辨哪些問題是家庭作業式的問題；因為我們中的大多數都曾自己解決這類問題。同樣，這些問題得由&lt;strong&gt;你&lt;/strong&gt;來搞定，你會從中學到東西。你可以要求給點提示，但別要求得到完整的解決方案。&lt;/p&gt; 
&lt;p&gt;如果你懷疑自己碰到了一個家庭作業式的問題，但仍然無法解決，試試在使用者群組，論壇或（最後一招）在專案的&lt;strong&gt;使用者&lt;/strong&gt;郵件列表或論壇中提問。儘管駭客們&lt;strong&gt;會&lt;/strong&gt;看出來，但一些有經驗的使用者也許仍會給你一些提示。&lt;/p&gt; 
&lt;h3&gt;去掉無意義的提問句&lt;/h3&gt; 
&lt;p&gt;避免用無意義的話結束提問，例如&lt;code&gt;有人能幫我嗎？&lt;/code&gt;或者&lt;code&gt;這有答案嗎？&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;首先：如果你對問題的描述不是很好，這樣問更是畫蛇添足。&lt;/p&gt; 
&lt;p&gt;其次：由於這樣問是畫蛇添足，駭客們會很厭煩你──而且通常會用邏輯上正確，但毫無意義的回答來表示他們的蔑視， 例如：&lt;code&gt;沒錯，有人能幫你&lt;/code&gt;或者&lt;code&gt;不，沒答案&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;一般來說，避免用 &lt;code&gt;是或否&lt;/code&gt;、&lt;code&gt;對或錯&lt;/code&gt;、&lt;code&gt;有或沒有&lt;/code&gt;類型的問句，除非你想得到&lt;a href="https://strcat.de/questions-with-yes-or-no-answers.html"&gt;是或否類型的回答&lt;/a&gt;。&lt;/p&gt; 
&lt;h3&gt;即使你很急也不要在標題寫&lt;code&gt;緊急&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;這是你的問題，不是我們的。宣稱&lt;code&gt;緊急&lt;/code&gt;極有可能事與願違：大多數駭客會直接刪除無禮和自私地企圖即時引起關注的問題。更嚴重的是，&lt;code&gt;緊急&lt;/code&gt;這個字（或是其他企圖引起關注的標題）通常會被垃圾信過濾器過濾掉 -- 你的問題可能永遠將無法得到解答。&lt;/p&gt; 
&lt;p&gt;有半個例外的情況是，如果你是在一些很高調，會使駭客們興奮的地方，也許值得這樣去做。在這種情況下，如果你有時間壓力，也很有禮貌地提到這點，人們也許會有興趣回答快一點。&lt;/p&gt; 
&lt;p&gt;當然，這風險很大，因為駭客們興奮的點多半與你的不同。譬如從 NASA 國際空間站（International Space Station）發這樣的標題沒有問題，但用自我感覺良好的慈善行為或政治原因發肯定不行。事實上，張貼諸如&lt;code&gt;緊急：幫我救救這個毛絨絨的小海豹！&lt;/code&gt;肯定讓你被駭客忽略或惹惱他們，即使他們認為毛絨絨的小海豹很重要。&lt;/p&gt; 
&lt;p&gt;如果你覺得這點很不可思議，最好再把這份指南剩下的內容多讀幾遍，直到你弄懂了再發文。&lt;/p&gt; 
&lt;h3&gt;禮多人不怪，而且有時還很有幫助&lt;/h3&gt; 
&lt;p&gt;彬彬有禮，多用&lt;code&gt;請&lt;/code&gt;和&lt;code&gt;謝謝您的關注&lt;/code&gt;，或&lt;code&gt;謝謝你的關照&lt;/code&gt;。讓大家都知道你對他們花時間免費提供幫助心存感激。&lt;/p&gt; 
&lt;p&gt;坦白說，這一點並沒有比清晰、正確、精準並合乎文法和避免使用專用格式重要（也不能取而代之）。駭客們一般寧可讀有點唐突但技術上鮮明的臭蟲報告，而不是那種有禮但含糊的報告。（如果這點讓你不解，記住我們是按問題能教我們什麼來評價問題的價值的）&lt;/p&gt; 
&lt;p&gt;然而，如果你有一串的問題待解決，客氣一點肯定會增加你得到有用回應的機會。&lt;/p&gt; 
&lt;p&gt;（我們注意到，自從本指南發佈後，從資深駭客那裡得到的唯一嚴重缺陷反饋，就是對預先道謝這一條。一些駭客覺得&lt;code&gt;先謝了&lt;/code&gt;意味著事後就不用再感謝任何人的暗示。我們的建議是要麼先說&lt;code&gt;先謝了&lt;/code&gt;，&lt;strong&gt;然後&lt;/strong&gt;事後再對回覆者表示感謝，或者換種方式表達感激，譬如用&lt;code&gt;謝謝你的關注&lt;/code&gt;或&lt;code&gt;謝謝你的關照&lt;/code&gt;。）&lt;/p&gt; 
&lt;h3&gt;問題解決後，加個簡短的補充說明&lt;/h3&gt; 
&lt;p&gt;問題解決後，向所有幫助過你的人發個說明，讓他們知道問題是怎樣解決的，並再一次向他們表示感謝。如果問題在新聞組或者郵件列表中引起了廣泛關注，應該在那裡貼一個說明比較恰當。&lt;/p&gt; 
&lt;p&gt;最理想的方式是向最初提問的話題回覆此消息，並在標題中包含&lt;code&gt;已修正&lt;/code&gt;，&lt;code&gt;已解決&lt;/code&gt;或其它同等含義的明顯標記。在人來人往的郵件列表裡，一個看見討論串&lt;code&gt;問題 X&lt;/code&gt;和&lt;code&gt;問題的X - 已解決&lt;/code&gt;的潛在回覆者就明白不用再浪費時間了（除非他個人覺得&lt;code&gt;問題 X&lt;/code&gt;有趣），因此可以利用此時間去解決其它問題。&lt;/p&gt; 
&lt;p&gt;補充說明不必很長或是很深入；簡單的一句&lt;code&gt;你好，原來是網路線出了問題！謝謝大家 – Bill&lt;/code&gt;比什麼也不說要來的好。事實上，除非結論真的很有技術含量，否則簡短可愛的小結比長篇大論更好。說明問題是怎樣解決的，但大可不必將解決問題的過程複述一遍。&lt;/p&gt; 
&lt;p&gt;對於有深度的問題，張貼除錯記錄的摘要是有幫助的。描述問題的最終狀態，說明是什麼解決了問題，在此&lt;strong&gt;之後&lt;/strong&gt;才指明可以避免的盲點。避免盲點的部分應放在正確的解決方案和其它總結材料之後，而不要將此訊息搞成偵探推理小說。列出那些幫助過你的名字，會讓你交到更多朋友。&lt;/p&gt; 
&lt;p&gt;除了有禮貌和有內涵以外，這種類型的補充也有助於他人在郵件列表/新聞群組/論壇中搜尋到真正解決你問題的方案，讓他們也從中受益。&lt;/p&gt; 
&lt;p&gt;至少，這種補充有助於讓每位參與協助的人因問題的解決而從中得到滿足感。如果你自己不是技術專家或者駭客，那就相信我們，這種感覺對於那些你向他們求助的大師或者專家而言，是非常重要的。問題懸而未決會讓人灰心；駭客們渴望看到問題被解決。好人有好報，滿足他們的渴望，你會在下次提問時嘗到甜頭。&lt;/p&gt; 
&lt;p&gt;思考一下怎樣才能避免他人將來也遇到類似的問題，自問寫一份文件或加個常見問題（FAQ）會不會有幫助。如果是的話就將它們發給維護者。&lt;/p&gt; 
&lt;p&gt;在駭客中，這種良好的後繼行動實際上比傳統的禮節更為重要，也是你如何透過善待他人而贏得聲譽的方式，這是非常有價值的資產。&lt;/p&gt; 
&lt;h2&gt;如何解讀答案&lt;/h2&gt; 
&lt;p&gt;&lt;a id="rtfm"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;RTFM和STFW：如何知道你已完全搞砸了&lt;/h3&gt; 
&lt;p&gt;有一個古老而神聖的傳統：如果你收到&lt;code&gt;RTFM （Read The Fucking Manual）&lt;/code&gt;的回應，回答者認為你&lt;strong&gt;應該去讀那該死的手冊&lt;/strong&gt;。當然，基本上他是對的，你應該去讀一讀。&lt;/p&gt; 
&lt;p&gt;RTFM 有一個年輕的親戚。如果你收到&lt;code&gt;STFW（Search The Fucking Web）&lt;/code&gt;的回應，回答者認為你&lt;strong&gt;應該到該死的網路上搜尋&lt;/strong&gt;過了。那人多半也是對的，去搜尋一下吧。（更溫和一點的說法是 &lt;strong&gt;&lt;a href="https://zh.lmgtfy.app/"&gt;Google是你的朋友&lt;/a&gt;&lt;/strong&gt;！）&lt;/p&gt; 
&lt;p&gt;在論壇，你也可能被要求去爬爬論壇的舊文。事實上，有人甚至可能熱心地為你提供以前解決此問題的討論串。但不要依賴這種關照，提問前應該先搜尋一下舊文。&lt;/p&gt; 
&lt;p&gt;通常，用這兩句之一回答你的人會給你一份包含你需要內容的手冊或者一個網址，而且他們打這些字的時候也正在讀著。這些答覆意味著回答者認為&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;你需要的資訊非常容易獲得&lt;/strong&gt;； &amp;nbsp;* &lt;strong&gt;你自己去搜尋這些資訊比灌給你能讓你學到更多&lt;/strong&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;你不應該因此不爽；&lt;strong&gt;依照駭客的標準，他已經表示了對你一定程度的關注，而沒有對你的要求視而不見&lt;/strong&gt;。你應該對他祖母般的慈祥表示感謝。&lt;/p&gt; 
&lt;h3&gt;如果還是搞不懂&lt;/h3&gt; 
&lt;p&gt;如果你看不懂回應，別立刻要求對方解釋。像你以前試著自己解決問題時那樣（利用手冊，FAQ，網路，身邊的高手），先試著去搞懂他的回應。如果你真的需要對方解釋，記得表現出你已經從中學到了點什麼。&lt;/p&gt; 
&lt;p&gt;比方說，如果我回答你：&lt;code&gt;看來似乎是 zentry 卡住了；你應該先清除它。&lt;/code&gt;，然後，這是一個&lt;strong&gt;很糟的&lt;/strong&gt;後續問題回應：&lt;code&gt;zentry是什麼？&lt;/code&gt; &lt;strong&gt;好&lt;/strong&gt;的問法應該是這樣：&lt;code&gt;哦~~~我看過說明了但是只有 -z 和 -p 兩個參數中提到了 zentries，而且還都沒有清楚的解釋如何清除它。你是指這兩個中的哪一個嗎？還是我看漏了什麼？&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;處理無禮的回應&lt;/h3&gt; 
&lt;p&gt;很多駭客圈子中看似無禮的行為並不是存心冒犯。相反，它是直接了當，一針見血式的交流風格，這種風格更注重解決問題，而不是使人感覺舒服而卻模模糊糊。&lt;/p&gt; 
&lt;p&gt;如果你覺得被冒犯了，試著平靜地反應。如果有人真的做了出格的事，郵件列表、新聞群組或論壇中的前輩多半會招呼他。如果這&lt;strong&gt;沒有&lt;/strong&gt;發生而你卻發火了，那麼你發火對象的言語可能在駭客社群中看起來是正常的，而&lt;strong&gt;你&lt;/strong&gt;將被視為有錯的一方，這將傷害到你獲取訊息或幫助的機會。&lt;/p&gt; 
&lt;p&gt;另一方面，你偶而真的會碰到無禮和無聊的言行。與上述相反，對真正的冒犯者狠狠地打擊，用犀利的語言將其駁得體無完膚都是可以接受的。然而，在行事之前一定要非常非常的有根據。糾正無禮的言論與開始一場毫無意義的口水戰僅一線之隔，駭客們自己莽撞地越線的情況並不鮮見。如果你是新手或外人，避開這種莽撞的機會並不高。如果你想得到的是訊息而不是消磨時光，這時最好不要把手放在鍵盤上以免冒險。&lt;/p&gt; 
&lt;p&gt;（有些人斷言很多駭客都有輕度的自閉症或亞斯伯格綜合症，缺少用於潤滑人類社會&lt;strong&gt;正常&lt;/strong&gt;交往所需的神經。這既可能是真也可能是假的。如果你自己不是駭客，興許你認為我們腦袋有問題還能幫助你應付我們的古怪行為。只管這麼幹好了，我們不在乎。我們&lt;strong&gt;喜歡&lt;/strong&gt;我們現在這個樣子，並且通常對病患標記都有站得住腳的懷疑。）&lt;/p&gt; 
&lt;p&gt;在下一節，我們會談到另一個問題，當&lt;strong&gt;你&lt;/strong&gt;行為不當時所會受到的&lt;code&gt;冒犯&lt;/code&gt;。&lt;/p&gt; 
&lt;h2&gt;如何避免扮演失敗者&lt;/h2&gt; 
&lt;p&gt;在駭客社群的論壇中有那麼幾次你可能會搞砸──以本指南所描述到的或類似的方式。而你會在公開場合中被告知你是如何搞砸的，也許攻擊的言語中還會帶點雜七雜八的顏色。&lt;/p&gt; 
&lt;p&gt;這種事發生以後，你能做的最糟糕的事莫過於哀嚎你的遭遇、宣稱被口頭攻擊、要求道歉、高聲尖叫、憋悶氣、威脅訴諸法律、向其雇主報怨、忘了關馬桶蓋等等。相反地，你該這麼做：&lt;/p&gt; 
&lt;p&gt;熬過去，這很正常。事實上，它是有益健康且合理的。&lt;/p&gt; 
&lt;p&gt;社群的標準不會自行維持，它們是透過參與者積極而&lt;strong&gt;公開地&lt;/strong&gt;執行來維持的。不要哭嚎所有的批評都應該透過私下的郵件傳送，它不是這樣運作的。當有人評論你的一個說法有誤或者提出不同看法時，堅持聲稱受到個人攻擊也毫無益處，這些都是失敗者的態度。&lt;/p&gt; 
&lt;p&gt;也有其它的駭客論壇，受過高禮節要求的誤導，禁止參與者張貼任何對別人帖子挑毛病的消息，並聲稱&lt;code&gt;如果你不想幫助使用者就閉嘴。&lt;/code&gt; 結果造成有想法的參與者紛紛離開，這麼做只會使它們淪為毫無意義的嘮叨與無用的技術論壇。&lt;/p&gt; 
&lt;p&gt;誇張的講法是：你要的是&lt;strong&gt;友善&lt;/strong&gt;（以上述方式）還是有用？兩個裡面挑一個。&lt;/p&gt; 
&lt;p&gt;記著：當駭客說你搞砸了，並且（無論多麼刺耳）告訴你別再這樣做時，他正在為關心&lt;strong&gt;你&lt;/strong&gt;和&lt;strong&gt;他的社群&lt;/strong&gt;而行動。對他而言，不理你並將你從他的生活中濾掉更簡單。如果你無法做到感謝，至少要表現地有點尊嚴，別大聲哀嚎，也別因為自己是個有戲劇性超級敏感的靈魂和自以為有資格的新來者，就指望別人像對待脆弱的洋娃娃那樣對你。&lt;/p&gt; 
&lt;p&gt;有時候，即使你沒有搞砸（或者只是在他的想像中你搞砸了），有些人也會無緣無故地攻擊你本人。在這種情況下，抱怨倒是&lt;strong&gt;真的&lt;/strong&gt;會把問題搞砸。&lt;/p&gt; 
&lt;p&gt;這些來找麻煩的人要麼是毫無辦法但自以為是專家的不中用傢伙，要麼就是測試你是否真會搞砸的心理專家。其它讀者要麼不理睬，要麼用自己的方式對付他們。這些來找麻煩的人在給他們自己找麻煩，這點你不用操心。&lt;/p&gt; 
&lt;p&gt;也別讓自己捲入口水戰，最好不要理睬大多數的口水戰 -- 當然，是在你檢驗它們只是口水戰，而並未指出你有搞砸的地方，且也沒有巧妙地將問題真正的答案藏於其後（這也是有可能的）。&lt;/p&gt; 
&lt;h2&gt;不該問的問題&lt;/h2&gt; 
&lt;p&gt;以下是幾個經典蠢問題，以及駭客沒回答時心中所想的：&lt;/p&gt; 
&lt;p&gt;問題：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#q1"&gt;我能在哪找到 X 程式或 X 資源？&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;問題：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#q2"&gt;我怎樣用 X 做 Y？&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;問題：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#q3"&gt;如何設定我的 shell 提示？&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;問題：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#q4"&gt;我可以用 Bass-o-matic 文件轉換工具將 AcmeCorp 檔案轉換為 TeX 格式嗎？&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;問題：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#q5"&gt;我的程式/設定/SQL語句沒有用&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;問題：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#q6"&gt;我的 Windows 電腦有問題，你能幫我嗎？&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;問題：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#q7"&gt;我的程式不會動了，我認為系統工具 X 有問題&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;問題：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#q8"&gt;我在安裝 Linux（或者 X ）時有問題，你能幫我嗎？&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;問題：&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#q9"&gt;我怎麼才能破解 root 帳號/竊取 OP 特權/讀別人的郵件呢？&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a id="q1"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;問題：我能在哪找到 X 程式或 X 資源？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;回答：就在我找到它的地方啊，白痴 -- 搜尋引擎的那一頭。天哪！難道還有人不會用 &lt;a href="https://www.google.com"&gt;Google&lt;/a&gt; 嗎？&lt;/p&gt; 
&lt;p&gt;&lt;a id="q2"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;問題：我怎樣用 X 做 Y？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;回答：如果你想解決的是 Y ，提問時別給出可能並不恰當的方法。這種問題說明提問者不但對 X 完全無知，也對 Y 要解決的問題糊塗，還被特定形勢禁錮了思維。最好忽略這種人，等他們把問題搞清楚了再說。&lt;/p&gt; 
&lt;p&gt;&lt;a id="q3"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;問題：如何設定我的 shell 提示？？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;回答：如果你有足夠的智慧提這個問題，你也該有足夠的智慧去 &lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#rtfm"&gt;RTFM&lt;/a&gt;，然後自己去找出來。&lt;/p&gt; 
&lt;p&gt;&lt;a id="q4"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;問題：我可以用 Bass-o-matic 文件轉換工具將 AcmeCorp 檔案轉換為 TeX 格式嗎？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;回答：試試看就知道了。如果你試過，你既知道了答案，就不用浪費我的時間了。&lt;/p&gt; 
&lt;p&gt;&lt;a id="q5"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;問題：我的程式/設定/SQL語句沒有用&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;回答：這不算是問題吧，我對要我問你二十個問題才找得出你真正問題的問題沒興趣 -- 我有更有意思的事要做呢。在看到這類問題的時候，我的反應通常不外如下三種&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;你還有什麼要補充的嗎？&lt;/li&gt; 
 &lt;li&gt;真糟糕，希望你能搞定。&lt;/li&gt; 
 &lt;li&gt;這關我屁事？&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a id="q6"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;問題：我的 Windows 電腦有問題，你能幫我嗎？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;回答：能啊，扔掉微軟的垃圾，換個像 Linux 或 BSD 的開放原始碼作業系統吧。&lt;/p&gt; 
&lt;p&gt;注意：如果程式有官方版 Windows 或者與 Windows 有互動（如Samba），你&lt;strong&gt;可以&lt;/strong&gt;問與Windows相關的問題， 只是別對問題是由 Windows 作業系統而不是程式本身造成的回覆感到驚訝， 因為 Windows 一般來說實在太爛，這種說法通常都是對的。&lt;/p&gt; 
&lt;p&gt;&lt;a id="q7"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;問題：我的程式不會動了，我認為系統工具 X 有問題&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;回答：你完全有可能是第一個注意到被成千上萬使用者反覆使用的系統呼叫與函式庫檔案有明顯缺陷的人，更有可能的是你完全沒有根據。不同凡響的說法需要不同凡響的證據，當你這樣聲稱時，你必須有清楚而詳盡的缺陷說明文件作後盾。&lt;/p&gt; 
&lt;p&gt;&lt;a id="q8"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;問題：我在安裝 Linux（或者 X ）時有問題，你能幫我嗎？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;回答：不能，我只有親自在你的電腦上動手才能找到毛病。還是去找你當地的 Linux 使用群組者尋求實際的指導吧（你能在&lt;a href="http://www.linux.org/groups/index.html"&gt;這兒&lt;/a&gt;找到使用者群組的清單）。&lt;/p&gt; 
&lt;p&gt;注意：如果安裝問題與某 Linux 的發行版有關，在它的郵件列表、論壇或本地使用者群組中提問也許是恰當的。此時，應描述問題的準確細節。在此之前，先用 &lt;code&gt;Linux&lt;/code&gt; 和&lt;strong&gt;所有&lt;/strong&gt;被懷疑的硬體作關鍵詞仔細搜尋。&lt;/p&gt; 
&lt;p&gt;&lt;a id="q9"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;問題：我怎麼才能破解 root 帳號/竊取 OP 特權/讀別人的郵件呢？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;回答：想要這樣做，說明了你是個卑鄙小人；想找個駭客幫你，說明你是個白癡！&lt;/p&gt; 
&lt;h2&gt;好問題與蠢問題&lt;/h2&gt; 
&lt;p&gt;最後，我將透過舉一些例子，來說明怎樣聰明的提問；同一個問題的兩種問法被放在一起，一種是愚蠢的，另一種才是明智的。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;蠢問題&lt;/strong&gt;：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我可以在哪兒找到關於 Foonly Flurbamatic 的資料？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;這種問法無非想得到 &lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#rtfm"&gt;STFW&lt;/a&gt; 這樣的回答。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;聰明問題&lt;/strong&gt;：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我用Google 搜尋過 "Foonly Flurbamatic 2600"，但是沒找到有用的結果。誰知道上哪兒去找對這種設備編寫程式的資料？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;這個問題已經 STFW 過了，看起來他真的遇到了麻煩。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;蠢問題&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我從 foo 項目找來的原始碼沒法編譯。它怎麼這麼爛？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;他覺得都是別人的錯，這個傲慢自大的提問者&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;聰明問題&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;foo 專案程式碼在 Nulix 6.2 版下無法編譯通過。我讀過了 FAQ，但裏面沒有提到跟 Nulix 有關的問題。這是我編譯過程的記錄，我有什麼做的不對的地方嗎？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;提問者已經指明了環境，也讀過了FAQ，還列出了錯誤，並且他沒有把問題的責任推到別人頭上，他的問題值得被關注。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;蠢問題&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我的主機板有問題了，誰來幫我？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;某駭客對這類問題的回答通常是：&lt;code&gt;好的，還要幫你拍拍背和換尿布嗎？&lt;/code&gt;，然後按下刪除鍵。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;聰明問題&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我在 S2464 主機板上試過了 X 、 Y 和 Z ，但沒什麼作用，我又試了 A 、 B 和 C 。請注意當我嘗試 C 時的奇怪現象。顯然 florbish 正在 grommicking，但結果出人意料。通常在 Athlon MP 主機板上引起 grommicking 的原因是什麼？有誰知道接下來我該做些什麼測試才能找出問題？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;這個傢伙，從另一個角度來看，值得去回答他。他表現出了解決問題的能力，而不是坐等天上掉答案。&lt;/p&gt; 
&lt;p&gt;在最後一個問題中，注意&lt;code&gt;告訴我答案&lt;/code&gt;和&lt;code&gt;給我啟示，指出我還應該做什麼診斷工作&lt;/code&gt;之間微妙而又重要的區別。&lt;/p&gt; 
&lt;p&gt;事實上，後一個問題源自於 2001 年 8 月在 Linux 內核郵件列表（lkml）上的一個真實的提問。我（Eric）就是那個提出問題的人。我在 Tyan S2464 主板上觀察到了這種無法解釋的鎖定現象，列表成員們提供了解決這一問題的重要資訊。&lt;/p&gt; 
&lt;p&gt;透過我的提問方法，我給了別人可以咀嚼玩味的東西；我設法讓人們很容易參與並且被吸引進來。我顯示了自己具備和他們同等的能力，並邀請他們與我共同探討。透過告訴他們我所走過的彎路，以避免他們再浪費時間，我也表明了對他們寶貴時間的尊重。&lt;/p&gt; 
&lt;p&gt;事後，當我向每個人表示感謝，並且讚賞這次良好的討論經歷的時候， 一個 Linux 內核郵件列表的成員表示，他覺得我的問題得到解決並非由於我是這個列表中的&lt;strong&gt;名人&lt;/strong&gt;，而是因為我用了正確的方式來提問。&lt;/p&gt; 
&lt;p&gt;駭客從某種角度來說是擁有豐富知識但缺乏人情味的傢伙；我相信他是對的，如果我&lt;strong&gt;像&lt;/strong&gt;個乞討者那樣提問，不論我是誰，一定會惹惱某些人或者被他們忽視。他建議我記下這件事，這直接導致了本指南的出現。&lt;/p&gt; 
&lt;h2&gt;如果得不到回答&lt;/h2&gt; 
&lt;p&gt;如果仍得不到回答，請不要以為我們覺得無法幫助你。有時只是看到你問題的人不知道答案罷了。沒有回應不代表你被忽視，雖然不可否認這種差別很難區分。&lt;/p&gt; 
&lt;p&gt;總的來說，簡單的重複張貼問題是個很糟的點子。這將被視為無意義的喧鬧。有點耐心，知道你問題答案的人可能生活在不同的時區，可能正在睡覺，也有可能你的問題一開始就沒有組織好。&lt;/p&gt; 
&lt;p&gt;你可以透過其他管道獲得幫助，這些管道通常更適合初學者的需要。&lt;/p&gt; 
&lt;p&gt;有許多網上的以及本地的使用者群組，由熱情的軟體愛好者（即使他們可能從沒親自寫過任何軟體）組成。通常人們組建這樣的團體來互相幫助並幫助新手。&lt;/p&gt; 
&lt;p&gt;另外，你可以向很多商業公司尋求幫助，不論公司大還是小。別為要付費才能獲得幫助而感到沮喪！畢竟，假使你的汽車發動機汽缸密封圈爆掉了──完全可能如此──你還得把它送到修車鋪，並且為維修付費。就算軟體沒花費你一分錢，你也不能強求技術支援總是免費的。&lt;/p&gt; 
&lt;p&gt;對像是 Linux 這種大眾化的軟體，每個開發者至少會對應到上萬名使用者。根本不可能由一個人來處理來自上萬名使用者的求助電話。要知道，即使你要為這些協助付費，和你所購買的同類軟體相比，你所付出的也是微不足道的（通常封閉原始碼軟體的技術支援費用比開放原始碼軟體的要高得多，且內容也沒那麼豐富）。&lt;/p&gt; 
&lt;h2&gt;如何更好地回答問題&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;態度和善一點&lt;/strong&gt;。問題帶來的壓力常使人顯得無禮或愚蠢，其實並不是這樣。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;對初犯者私下回覆&lt;/strong&gt;。對那些坦誠犯錯之人沒有必要當眾羞辱，一個真正的新手也許連怎麼搜尋或在哪找常見問題都不知道。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;如果你不確定，一定要說出來&lt;/strong&gt;！一個聽起來權威的錯誤回覆比沒有還要糟，別因為聽起來像個專家很好玩，就給別人亂指路。要謙虛和誠實，給提問者與同行都樹個好榜樣。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;如果幫不了忙，也別妨礙他&lt;/strong&gt;。不要在實際步驟上開玩笑，那樣也許會毀了使用者的配置 --有些可憐的呆瓜會把它當成真的指令。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;試探性的反問以引出更多的細節&lt;/strong&gt;。如果你做得好，提問者可以學到點東西 --你也可以。試試將蠢問題轉變成好問題，別忘了我們都曾是新手。&lt;/p&gt; 
&lt;p&gt;儘管對那些懶蟲抱怨一聲 RTFM 是正當的，能指出文件的位置（即使只是建議個 Google 搜尋關鍵詞）會更好。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;如果你決定回答，就請給出好的答案&lt;/strong&gt;。當別人正在用錯誤的工具或方法時別建議笨拙的權宜之計（workaround），應推薦更好的工具，重新界定問題。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;正面的回答問題&lt;/strong&gt;！如果這個提問者已經很深入的研究而且也表明已經試過 X 、 Y 、 Z 、 A 、 B 、 C 但沒得到結果，回答 &lt;code&gt;試試看 A 或是 B&lt;/code&gt; 或者 &lt;code&gt;試試X 、 Y 、 Z 、 A 、 B 、 C&lt;/code&gt; 並附上一個連結一點用都沒有。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;幫助你的社群從問題中學習&lt;/strong&gt;。當回覆一個好問題時，問問自己&lt;code&gt;如何修改相關文件或常見問題文件以免再次解答同樣的問題？&lt;/code&gt;，接著再向文件維護者發一份補丁。&lt;/p&gt; 
&lt;p&gt;如果你是在研究一番後才做出的回答，&lt;strong&gt;展現你的技巧而不是直接端出結果&lt;/strong&gt;。畢竟&lt;code&gt;授人以魚不如授人以漁&lt;/code&gt;。&lt;/p&gt; 
&lt;h2&gt;相關資源&lt;/h2&gt; 
&lt;p&gt;如果你需要個人電腦、Unix 系統和網路如何運作的基礎知識，參閱&lt;a href="https://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/"&gt;Unix系統和網路基本原理&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;當你發布軟體或補丁時，試著按&lt;a href="https://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html"&gt;軟體發布實踐&lt;/a&gt;操作。&lt;/p&gt; 
&lt;h2&gt;鳴謝&lt;/h2&gt; 
&lt;p&gt;Evelyn Mitchel 貢獻了一些愚蠢問題例子並啟發了編寫&lt;code&gt;如何更好地回答問題&lt;/code&gt;這一節， Mikhail Ramendik 貢獻了一些特別有價值的建議和改進。&lt;/p&gt; 
&lt;h2&gt;Contributors ✨&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href="https://allcontributors.org/docs/en/emoji-key"&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="http://fredwe.info"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7354718?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Fred&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-FredWe" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/xgdgsc"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1189869?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;xgdgsc&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-xgdgsc" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/fishballLin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11352791?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Michael Lin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-fishballLin" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/cuter44"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2285039?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Galin Wu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-cuter44" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://blog.csdn.net/lantianjialiang/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4327697?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;lantianjialiang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-lantianjialiang" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://linuxtoy.org"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15364?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Xiaodong Xu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-xuxiaodong" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://blog.clifflu.net"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1589313?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Cliff Chao-kuan Lu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-clifflu" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Fibird"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12209558?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Chaoyang Liu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-Fibird" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://www.rayjune.com/about"&gt;&lt;img src="https://avatars.githubusercontent.com/u/22052875?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;瑞君&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-RayJune" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/lvsj"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5672080?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;steven lyu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-lvsj" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://linkedin.com/in/yen-wu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11289349?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yan-Kuan Wu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-yan-kuan" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Kalger"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15393585?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alger&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-Kalger" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/HJ1AN"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10445159?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;HJ1AN&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-HJ1AN" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://konekoya.github.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12165714?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Joshua&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-konekoya" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://splasky.blogspot.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14876069?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;HY Chang(splasky)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-splasky" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/SaberPdr"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18625830?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;qiuqiu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-SaberPdr" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://a.dqwyy.moe"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20705919?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;dqwyy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-dqwyy" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://tomazwang.github.io"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7992586?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tomaz Wang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-TomazWang" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://aka.ms/anduin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19531547?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Anduin Xue&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-Anduin2017" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Pancongwen"&gt;&lt;img src="https://avatars.githubusercontent.com/u/25834392?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Pancongwen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-Pancongwen" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://cis.upenn.edu/~yishuai/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7020805?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yishuai Li&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-liyishuai" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/FranklinYu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3153452?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Franklin Yu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-FranklinYu" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://ld246.com"&gt;&lt;img src="https://avatars.githubusercontent.com/u/873584?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;D&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-88250" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://flandre.tw/github"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5981459?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Chun-Hao Lien&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-FlandreDaisuki" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/hms5232"&gt;&lt;img src="https://avatars.githubusercontent.com/u/43672033?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;hms5232&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-hms5232" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://gricn.github.io"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34237589?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;gricn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-gricn" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://zoomdong.cn/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/32598811?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;zoomdong&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-fireairforce" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://ladderoperator.top/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34033754?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;LadderOperator&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-LadderOperator" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/WuzgXY-GitHub"&gt;&lt;img src="https://avatars.githubusercontent.com/u/62000315?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;WuzgXY&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-WuzgXY-GitHub" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://baoshuo.ren"&gt;&lt;img src="https://avatars.githubusercontent.com/u/47095648?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ren Baoshuo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-renbaoshuo" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://jalenchuh.cn/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57910033?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jalen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-jalenchuh" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://www.libiao.vip"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8528590?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;BillLucky&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-BillLucky" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://blog.mcplugin.cn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56964531?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;bingchuanjuzi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-xiaopangju" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/hitjackma"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3788303?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jack M&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-hitjackma" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://www.yidajiabei.xyz"&gt;&lt;img src="https://avatars.githubusercontent.com/u/52186032?v=4?s=100" width="100px;" alt="" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;tianheg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://raw.githubusercontent.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/main/#translation-tianheg" title="Translation"&gt;🌍&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href="https://github.com/all-contributors/all-contributors"&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MagicMirrorOrg/MagicMirror</title>
      <link>https://github.com/MagicMirrorOrg/MagicMirror</link>
      <description>&lt;p&gt;MagicMirror² is an open source modular smart mirror platform. With a growing list of installable modules, the MagicMirror² allows you to convert your hallway or bathroom mirror into your personal assistant.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://raw.githubusercontent.com/MagicMirrorOrg/MagicMirror/master/.github/header.png" alt="MagicMirror²: The open source modular smart mirror platform." /&gt;&lt;/h1&gt; 
&lt;p style="text-align: center"&gt; &lt;a href="https://choosealicense.com/licenses/mit"&gt; &lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="License" /&gt; &lt;/a&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/magicmirrororg/magicmirror/automated-tests.yaml" alt="GitHub Actions" /&gt; &lt;img src="https://img.shields.io/github/check-runs/magicmirrororg/magicmirror/master" alt="Build Status" /&gt; &lt;a href="https://github.com/MagicMirrorOrg/MagicMirror"&gt; &lt;img src="https://img.shields.io/github/stars/magicmirrororg/magicmirror?style=social" alt="GitHub Stars" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MagicMirror²&lt;/strong&gt; is an open source modular smart mirror platform. With a growing list of installable modules, the &lt;strong&gt;MagicMirror²&lt;/strong&gt; allows you to convert your hallway or bathroom mirror into your personal assistant. &lt;strong&gt;MagicMirror²&lt;/strong&gt; is built by the creator of &lt;a href="https://michaelteeuw.nl/tagged/magicmirror"&gt;the original MagicMirror&lt;/a&gt; with the incredible help of a &lt;a href="https://github.com/MagicMirrorOrg/MagicMirror/graphs/contributors"&gt;growing community of contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;MagicMirror² focuses on a modular plugin system and uses &lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt; as an application wrapper. So no more web server or browser installs necessary!&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For the full documentation including &lt;strong&gt;&lt;a href="https://docs.magicmirror.builders/getting-started/installation.html"&gt;installation instructions&lt;/a&gt;&lt;/strong&gt;, please visit our dedicated documentation website: &lt;a href="https://docs.magicmirror.builders"&gt;https://docs.magicmirror.builders&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href="https://magicmirror.builders"&gt;https://magicmirror.builders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Documentation: &lt;a href="https://docs.magicmirror.builders"&gt;https://docs.magicmirror.builders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Forum: &lt;a href="https://forum.magicmirror.builders"&gt;https://forum.magicmirror.builders&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Technical discussions: &lt;a href="https://forum.magicmirror.builders/category/11/core-system"&gt;https://forum.magicmirror.builders/category/11/core-system&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Discord: &lt;a href="https://discord.gg/J5BAtvx"&gt;https://discord.gg/J5BAtvx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Blog: &lt;a href="https://michaelteeuw.nl/tagged/magicmirror"&gt;https://michaelteeuw.nl/tagged/magicmirror&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Donations: &lt;a href="https://magicmirror.builders/#donate"&gt;https://magicmirror.builders/#donate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing Guidelines&lt;/h2&gt; 
&lt;p&gt;Contributions of all kinds are welcome, not only in the form of code but also with regards to&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;bug reports&lt;/li&gt; 
 &lt;li&gt;documentation&lt;/li&gt; 
 &lt;li&gt;translations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the full contribution guidelines, check out: &lt;a href="https://docs.magicmirror.builders/about/contributing.html"&gt;https://docs.magicmirror.builders/about/contributing.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Enjoying MagicMirror? Consider a donation!&lt;/h2&gt; 
&lt;p&gt;MagicMirror² is Open Source and free. That doesn't mean we don't need any money.&lt;/p&gt; 
&lt;p&gt;Please consider a donation to help us cover the ongoing costs like webservers and email services. If we receive enough donations we might even be able to free up some working hours and spend some extra time improving the MagicMirror² core.&lt;/p&gt; 
&lt;p&gt;To donate, please follow &lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=G5D8E9MR5DTD2&amp;amp;source=url"&gt;this&lt;/a&gt; link.&lt;/p&gt; 
&lt;p style="text-align: center"&gt; &lt;a href="https://forum.magicmirror.builders/topic/728/magicmirror-is-voted-number-1-in-the-magpi-top-50"&gt;&lt;img src="https://magicmirror.builders/img/magpi-best-watermark-custom.png" width="150" alt="MagPi Top 50" /&gt;&lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sohzm/cheating-daddy</title>
      <link>https://github.com/sohzm/cheating-daddy</link>
      <description>&lt;p&gt;a free and opensource app that lets you gain an unfair advantage&lt;/p&gt;&lt;hr&gt;&lt;img width="1299" height="424" alt="cd (1)" src="https://github.com/user-attachments/assets/b25fff4d-043d-4f38-9985-f832ae0d0f6e" /&gt; 
&lt;h2&gt;Recall.ai - API for desktop recording&lt;/h2&gt; 
&lt;p&gt;If you’re looking for a hosted desktop recording API, consider checking out &lt;a href="https://www.recall.ai/product/desktop-recording-sdk/?utm_source=github&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=sohzm-cheating-daddy"&gt;Recall.ai&lt;/a&gt;, an API that records Zoom, Google Meet, Microsoft Teams, in-person meetings, and more.&lt;/p&gt; 
&lt;p&gt;This project is sponsored by Recall.ai.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; Use latest MacOS and Windows version, older versions have limited support&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; During testing it wont answer if you ask something, you need to simulate interviewer asking question, which it will answer&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;A real-time AI assistant that provides contextual help during video calls, interviews, presentations, and meetings using screen capture and audio analysis.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Live AI Assistance&lt;/strong&gt;: Real-time help powered by Google Gemini 2.0 Flash Live&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Screen &amp;amp; Audio Capture&lt;/strong&gt;: Analyzes what you see and hear for contextual responses&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multiple Profiles&lt;/strong&gt;: Interview, Sales Call, Business Meeting, Presentation, Negotiation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Transparent Overlay&lt;/strong&gt;: Always-on-top window that can be positioned anywhere&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Click-through Mode&lt;/strong&gt;: Make window transparent to clicks when needed&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;: Works on macOS, Windows, and Linux (kinda, dont use, just for testing rn)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Get a Gemini API Key&lt;/strong&gt;: Visit &lt;a href="https://aistudio.google.com/apikey"&gt;Google AI Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Install Dependencies&lt;/strong&gt;: &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Run the App&lt;/strong&gt;: &lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Enter your Gemini API key in the main window&lt;/li&gt; 
 &lt;li&gt;Choose your profile and language in settings&lt;/li&gt; 
 &lt;li&gt;Click "Start Session" to begin&lt;/li&gt; 
 &lt;li&gt;Position the window using keyboard shortcuts&lt;/li&gt; 
 &lt;li&gt;The AI will provide real-time assistance based on your screen and what interview asks&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Window Movement&lt;/strong&gt;: &lt;code&gt;Ctrl/Cmd + Arrow Keys&lt;/code&gt; - Move window&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Click-through&lt;/strong&gt;: &lt;code&gt;Ctrl/Cmd + M&lt;/code&gt; - Toggle mouse events&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Close/Back&lt;/strong&gt;: &lt;code&gt;Ctrl/Cmd + \&lt;/code&gt; - Close window or go back&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Send Message&lt;/strong&gt;: &lt;code&gt;Enter&lt;/code&gt; - Send text to AI&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Audio Capture&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;a href="https://github.com/Mohammed-Yasin-Mulla/Sound"&gt;SystemAudioDump&lt;/a&gt; for system audio&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: Loopback audio capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: Microphone input&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Electron-compatible OS (macOS, Windows, Linux)&lt;/li&gt; 
 &lt;li&gt;Gemini API key&lt;/li&gt; 
 &lt;li&gt;Screen recording permissions&lt;/li&gt; 
 &lt;li&gt;Microphone/audio permissions&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>github/awesome-copilot</title>
      <link>https://github.com/github/awesome-copilot</link>
      <description>&lt;p&gt;Community-contributed instructions, prompts, and configurations to help you make the most of GitHub Copilot.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🤖 Awesome GitHub Copilot Customizations&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://aka.ms/awesome-github-copilot"&gt;&lt;img src="https://img.shields.io/badge/Powered_by-Awesome_Copilot-blue?logo=githubcopilot" alt="Powered by Awesome Copilot" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/#contributors-"&gt;&lt;img src="https://img.shields.io/badge/all_contributors-89-orange.svg?style=flat-square" alt="All Contributors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; 
&lt;p&gt;A curated collection of prompts, instructions, and chat modes to supercharge your GitHub Copilot experience across different domains, languages, and use cases.&lt;/p&gt; 
&lt;h2&gt;🚀 What is Awesome GitHub Copilot?&lt;/h2&gt; 
&lt;p&gt;This repository provides a comprehensive toolkit for enhancing GitHub Copilot with specialized:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;👉 &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.agents.md"&gt;Awesome Agents&lt;/a&gt;&lt;/strong&gt; - Specialized GitHub Copilot agents that integrate with MCP servers to provide enhanced capabilities for specific workflows and tools&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;👉 &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.prompts.md"&gt;Awesome Prompts&lt;/a&gt;&lt;/strong&gt; - Focused, task-specific prompts for generating code, documentation, and solving specific problems&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;👉 &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.instructions.md"&gt;Awesome Instructions&lt;/a&gt;&lt;/strong&gt; - Comprehensive coding standards and best practices that apply to specific file patterns or entire projects&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;👉 &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.chatmodes.md"&gt;Awesome Chat Modes&lt;/a&gt;&lt;/strong&gt; - Specialized AI personas and conversation modes for different roles and contexts&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;👉 &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.collections.md"&gt;Awesome Collections&lt;/a&gt;&lt;/strong&gt; - Curated collections of related prompts, instructions, and chat modes organized around specific themes and workflows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🌟 Featured Collections&lt;/h2&gt; 
&lt;p&gt;Discover our curated collections of prompts, instructions, and chat modes organized around specific themes and workflows.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Items&lt;/th&gt; 
   &lt;th&gt;Tags&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/collections/awesome-copilot.md"&gt;Awesome Copilot&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Meta prompts that help you discover and generate curated GitHub Copilot chat modes, collections, instructions, prompts, and agents.&lt;/td&gt; 
   &lt;td&gt;6 items&lt;/td&gt; 
   &lt;td&gt;github-copilot, discovery, meta, prompt-engineering, agents&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/collections/partners.md"&gt;Partners&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Custom agents that have been created by GitHub partners&lt;/td&gt; 
   &lt;td&gt;11 items&lt;/td&gt; 
   &lt;td&gt;devops, security, database, cloud, infrastructure, observability, feature-flags, cicd, migration, performance&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;MCP Server&lt;/h2&gt; 
&lt;p&gt;To make it easy to add these customizations to your editor, we have created a &lt;a href="https://developer.microsoft.com/blog/announcing-awesome-copilot-mcp-server"&gt;MCP Server&lt;/a&gt; that provides a prompt for searching and installing prompts, instructions, and chat modes directly from this repository. You'll need to have Docker installed and running to run the server.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://aka.ms/awesome-copilot/mcp/vscode"&gt;&lt;img src="https://img.shields.io/badge/VS_Code-Install-0098FF?logo=visualstudiocode&amp;amp;logoColor=white" alt="Install in VS Code" /&gt;&lt;/a&gt; &lt;a href="https://aka.ms/awesome-copilot/mcp/vscode-insiders"&gt;&lt;img src="https://img.shields.io/badge/VS_Code_Insiders-Install-24bfa5?logo=visualstudiocode&amp;amp;logoColor=white" alt="Install in VS Code Insiders" /&gt;&lt;/a&gt; &lt;a href="https://aka.ms/awesome-copilot/mcp/vs"&gt;&lt;img src="https://img.shields.io/badge/Visual_Studio-Install-C16FDE?logo=visualstudio&amp;amp;logoColor=white" alt="Install in Visual Studio" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Show MCP Server JSON configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "servers": {
    "awesome-copilot": {
      "type": "stdio",
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "ghcr.io/microsoft/mcp-dotnet-samples/awesome-copilot:latest"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;🔧 How to Use&lt;/h2&gt; 
&lt;h3&gt;🤖 Custom Agents&lt;/h3&gt; 
&lt;p&gt;Custom agents can be used in Copilot coding agent (CCA), VS Code, and Copilot CLI (coming soon). For CCA, when assigning an issue to Copilot, select the custom agent from the provided list. In VS Code, you can activate the custom agent in the agents session, alongside built-in agents like Plan and Agent.&lt;/p&gt; 
&lt;h3&gt;🎯 Prompts&lt;/h3&gt; 
&lt;p&gt;Use the &lt;code&gt;/&lt;/code&gt; command in GitHub Copilot Chat to access prompts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-plaintext"&gt;/awesome-copilot create-readme
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;📋 Instructions&lt;/h3&gt; 
&lt;p&gt;Instructions automatically apply to files based on their patterns and provide contextual guidance for coding standards, frameworks, and best practices.&lt;/p&gt; 
&lt;h3&gt;💭 Chat Modes&lt;/h3&gt; 
&lt;p&gt;Activate chat modes to get specialized assistance from AI personas tailored for specific roles like architects, DBAs, or security experts.&lt;/p&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! Please see our &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt; for details on how to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add new prompts, instructions, or chat modes&lt;/li&gt; 
 &lt;li&gt;Improve existing content&lt;/li&gt; 
 &lt;li&gt;Report issues or suggest enhancements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Quick Contribution Guide&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Follow our file naming conventions and frontmatter requirements&lt;/li&gt; 
 &lt;li&gt;Test your contributions thoroughly&lt;/li&gt; 
 &lt;li&gt;Update the appropriate README tables&lt;/li&gt; 
 &lt;li&gt;Submit a pull request with a clear description&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;📖 Repository Structure&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-plaintext"&gt;├── prompts/          # Task-specific prompts (.prompt.md)
├── instructions/     # Coding standards and best practices (.instructions.md)
├── chatmodes/        # AI personas and specialized modes (.chatmode.md)
├── collections/      # Curated collections of related items (.collection.yml)
└── scripts/          # Utility scripts for maintenance
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🌟 Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Browse the Collections&lt;/strong&gt;: Check out our comprehensive lists of &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.prompts.md"&gt;prompts&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.instructions.md"&gt;instructions&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.chatmodes.md"&gt;chat modes&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.collections.md"&gt;collections&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add to your editor&lt;/strong&gt;: Click the "Install" button to install to VS Code, or copy the file contents for other editors.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Start Using&lt;/strong&gt;: Copy prompts to use with &lt;code&gt;/&lt;/code&gt; commands, let instructions enhance your coding experience, or activate chat modes for specialized assistance.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;📄 License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;🛡️ Security &amp;amp; Support&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Security Issues&lt;/strong&gt;: Please see our &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/SECURITY.md"&gt;Security Policy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: Check our &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/SUPPORT.md"&gt;Support Guide&lt;/a&gt; for getting help&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;: We follow the &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/CODE_OF_CONDUCT.md"&gt;Contributor Covenant&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎯 Why Use Awesome GitHub Copilot?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Productivity&lt;/strong&gt;: Pre-built prompts and instructions save time and provide consistent results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Best Practices&lt;/strong&gt;: Benefit from community-curated coding standards and patterns&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Specialized Assistance&lt;/strong&gt;: Access expert-level guidance through specialized chat modes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Continuous Learning&lt;/strong&gt;: Stay updated with the latest patterns and practices across technologies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Ready to supercharge your coding experience?&lt;/strong&gt; Start exploring our &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.prompts.md"&gt;prompts&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.instructions.md"&gt;instructions&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.chatmodes.md"&gt;chat modes&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Contributors ✨&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href="https://allcontributors.org/docs/en/emoji-key"&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.aaron-powell.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/434140?v=4?s=100" width="100px;" alt="Aaron Powell" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aaron Powell&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=aaronpowell" title="Code"&gt;💻&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/#maintenance-aaronpowell" title="Maintenance"&gt;🚧&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/#projectManagement-aaronpowell" title="Project Management"&gt;📆&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/#promotion-aaronpowell" title="Promotion"&gt;📣&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://mubaidr.js.org/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2222702?v=4?s=100" width="100px;" alt="Muhammad Ubaid Raza" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Muhammad Ubaid Raza&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mubaidr" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://digitarald.de/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8599?v=4?s=100" width="100px;" alt="Harald Kirschner" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Harald Kirschner&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=digitarald" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/mbianchidev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37507190?v=4?s=100" width="100px;" alt="Matteo Bianchi" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Matteo Bianchi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mbianchidev" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/AungMyoKyaw"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9404824?v=4?s=100" width="100px;" alt="Aung Myo Kyaw" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aung Myo Kyaw&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=AungMyoKyaw" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://danielscottraynsford.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7589164?v=4?s=100" width="100px;" alt="Daniel Scott-Raynsford" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniel Scott-Raynsford&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=PlagueHO" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/burkeholland"&gt;&lt;img src="https://avatars.githubusercontent.com/u/686963?v=4?s=100" width="100px;" alt="Burke Holland" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Burke Holland&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=burkeholland" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://calva.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30010?v=4?s=100" width="100px;" alt="Peter Strömberg" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peter Strömberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=PEZ" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.devprodlogs.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51440732?v=4?s=100" width="100px;" alt="Daniel Meppiel" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniel Meppiel&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=danielmeppiel" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://montemagno.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1676321?v=4?s=100" width="100px;" alt="James Montemagno" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;James Montemagno&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=jamesmontemagno" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/VamshiVerma"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21999324?v=4?s=100" width="100px;" alt="Vamshi Verma" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Vamshi Verma&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=VamshiVerma" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/sinedied"&gt;&lt;img src="https://avatars.githubusercontent.com/u/593151?v=4?s=100" width="100px;" alt="Yohan Lasorsa" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yohan Lasorsa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=sinedied" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/OrenMe"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5461862?v=4?s=100" width="100px;" alt="Oren Me" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Oren Me&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=OrenMe" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/mjrousos"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10077254?v=4?s=100" width="100px;" alt="Mike Rousos" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mike Rousos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mjrousos" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/guiopen"&gt;&lt;img src="https://avatars.githubusercontent.com/u/94094527?v=4?s=100" width="100px;" alt="Guilherme do Amaral Alves " /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Guilherme do Amaral Alves &lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=guiopen" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.buymeacoffee.com/troystaylor"&gt;&lt;img src="https://avatars.githubusercontent.com/u/44444967?v=4?s=100" width="100px;" alt="Troy Simeon Taylor" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Troy Simeon Taylor&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=troystaylor" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.linkedin.com/in/ambilykk/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10282550?v=4?s=100" width="100px;" alt="Ambily" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ambily&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=ambilykk" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://tgrall.github.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/541250?v=4?s=100" width="100px;" alt="Tugdual Grall" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tugdual Grall&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=tgrall" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/TianqiZhang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5326582?v=4?s=100" width="100px;" alt="Tianqi Zhang" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tianqi Zhang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=TianqiZhang" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/shubham070"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5480589?v=4?s=100" width="100px;" alt="Shubham Gaikwad" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shubham Gaikwad&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=shubham070" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/sdolgin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/576449?v=4?s=100" width="100px;" alt="Saul Dolgin" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Saul Dolgin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=sdolgin" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/nullchimp"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58362593?v=4?s=100" width="100px;" alt="NULLchimp" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;NULLchimp&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=nullchimp" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/MattVevang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20714898?v=4?s=100" width="100px;" alt="Matt Vevang" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Matt Vevang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=MattVevang" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://devkimchi.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1538528?v=4?s=100" width="100px;" alt="Justin Yoo" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Justin Yoo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=justinyoo" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://hachyderm.io/@0gis0"&gt;&lt;img src="https://avatars.githubusercontent.com/u/175379?v=4?s=100" width="100px;" alt="Gisela Torres" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Gisela Torres&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=0GiS0" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://debbie.codes/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13063165?v=4?s=100" width="100px;" alt="Debbie O'Brien" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Debbie O'Brien&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=debs-obrien" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/agreaves-ms"&gt;&lt;img src="https://avatars.githubusercontent.com/u/111466195?v=4?s=100" width="100px;" alt="Allen Greaves" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Allen Greaves&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=agreaves-ms" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/AmeliaRose802"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26167931?v=4?s=100" width="100px;" alt="Amelia Payne" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Amelia Payne&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=AmeliaRose802" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/SebastienDegodez"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2349146?v=4?s=100" width="100px;" alt="Sebastien DEGODEZ" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sebastien DEGODEZ&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=SebastienDegodez" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://graef.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19261257?v=4?s=100" width="100px;" alt="Sebastian Gräf" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sebastian Gräf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=segraef" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://9ssi7.dev/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/76786120?v=4?s=100" width="100px;" alt="Salih İbrahimbaş" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Salih İbrahimbaş&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=9ssi7" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/inquinity"&gt;&lt;img src="https://avatars.githubusercontent.com/u/406234?v=4?s=100" width="100px;" alt="Robert Altman" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Robert Altman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=inquinity" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/pertrai1"&gt;&lt;img src="https://avatars.githubusercontent.com/u/442374?v=4?s=100" width="100px;" alt="Rob Simpson" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rob Simpson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=pertrai1" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://ricksm.it/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7207783?v=4?s=100" width="100px;" alt="Rick Smit" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rick Smit&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=ricksmit3000" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://dotneteers.net/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/28162552?v=4?s=100" width="100px;" alt="Peter Smulovics" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peter Smulovics&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=psmulovics" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/pelikhan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4175913?v=4?s=100" width="100px;" alt="Peli de Halleux" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peli de Halleux&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=pelikhan" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.paulomorgado.net/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/470455?v=4?s=100" width="100px;" alt="Paulo Morgado" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Paulo Morgado&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=paulomorgado" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://nickyt.co/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/833231?v=4?s=100" width="100px;" alt="Nick Taylor" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nick Taylor&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=nickytonline" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/mikeparker104"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12763221?v=4?s=100" width="100px;" alt="Mike Parker" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mike Parker&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mikeparker104" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/mikekistler"&gt;&lt;img src="https://avatars.githubusercontent.com/u/85643503?v=4?s=100" width="100px;" alt="Mike Kistler" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mike Kistler&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mikekistler" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://a11ysupport.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/498678?v=4?s=100" width="100px;" alt="Michael Fairchild" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Michael Fairchild&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mfairchild365" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.linkedin.com/in/michael-volz/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/129928?v=4?s=100" width="100px;" alt="Michael A. Volz (Flynn)" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Michael A. Volz (Flynn)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=michaelvolz" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/4regab"&gt;&lt;img src="https://avatars.githubusercontent.com/u/178603515?v=4?s=100" width="100px;" alt="4regab" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;4regab&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=4regab" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/TheovanKraay"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24420698?v=4?s=100" width="100px;" alt="Theo van Kraay" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Theo van Kraay&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=TheovanKraay" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://glsauto.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/132710946?v=4?s=100" width="100px;" alt="Troy Witthoeft (glsauto)" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Troy Witthoeft (glsauto)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=twitthoeft-gls" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/iletai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26614687?v=4?s=100" width="100px;" alt="Tài Lê" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tài Lê&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=iletai" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://tinyurl.com/3p5j9mwe"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9591887?v=4?s=100" width="100px;" alt="Udaya Veeramreddygari" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Udaya Veeramreddygari&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=udayakumarreddyv" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://bio.warengonzaga.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15052701?v=4?s=100" width="100px;" alt="Waren Gonzaga" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Waren Gonzaga&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=warengonzaga" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://blog.miniasp.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/88981?v=4?s=100" width="100px;" alt="Will 保哥" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Will 保哥&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=doggy8088" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/yukiomoto"&gt;&lt;img src="https://avatars.githubusercontent.com/u/38450410?v=4?s=100" width="100px;" alt="Yuki Omoto" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yuki Omoto&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=yukiomoto" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/hueanmy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20430626?v=4?s=100" width="100px;" alt="Meii" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Meii&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=hueanmy" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/samqbush"&gt;&lt;img src="https://avatars.githubusercontent.com/u/74389839?v=4?s=100" width="100px;" alt="samqbush" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;samqbush&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=samqbush" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/sdanzo-hrb"&gt;&lt;img src="https://avatars.githubusercontent.com/u/136493100?v=4?s=100" width="100px;" alt="sdanzo-hrb" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;sdanzo-hrb&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=sdanzo-hrb" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/voidfnc"&gt;&lt;img src="https://avatars.githubusercontent.com/u/194750710?v=4?s=100" width="100px;" alt="voidfnc" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;voidfnc&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=voidfnc" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/webreidi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/55603905?v=4?s=100" width="100px;" alt="Wendy Breiding" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Wendy Breiding&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=webreidi" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/zooav"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12625412?v=4?s=100" width="100px;" alt="Ankur Sharma" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ankur Sharma&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=zooav" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://jianminhuang.cc/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6296280?v=4?s=100" width="100px;" alt="黃健旻 Vincent Huang" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;黃健旻 Vincent Huang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=Jian-Min-Huang" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/dgh06175"&gt;&lt;img src="https://avatars.githubusercontent.com/u/77305722?v=4?s=100" width="100px;" alt="이상현" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;이상현&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=dgh06175" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/abdidaudpropel"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51310019?v=4?s=100" width="100px;" alt="Abdi Daud" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Abdi Daud&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=abdidaudpropel" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://www.senseof.tech/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/50712277?v=4?s=100" width="100px;" alt="Adrien Clerbois" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Adrien Clerbois&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=AClerbois" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://www.qreate.it/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1868590?v=4?s=100" width="100px;" alt="Alan Sprecacenere" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alan Sprecacenere&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=tegola" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://asilva.dev/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2493377?v=4?s=100" width="100px;" alt="André Silva" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;André Silva&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=askpt" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://javaetmoi.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/838318?v=4?s=100" width="100px;" alt="Antoine Rey" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Antoine Rey&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=arey" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/artemsaveliev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15679218?v=4?s=100" width="100px;" alt="Artem Saveliev" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Artem Saveliev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=artemsaveliev" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://brunoborges.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/129743?v=4?s=100" width="100px;" alt="Bruno Borges" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Bruno Borges&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=brunoborges" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.peug.net/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3845786?v=4?s=100" width="100px;" alt="Christophe Peugnet" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Christophe Peugnet&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=tossnet" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.movinglive.ca/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14792628?v=4?s=100" width="100px;" alt="Chtive" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Chtive&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=MovingLive" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/craigbekker"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1115912?v=4?s=100" width="100px;" alt="Craig Bekker" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Craig Bekker&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=craigbekker" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/breakid"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1446918?v=4?s=100" width="100px;" alt="Dan" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=breakid" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/ewega"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26189114?v=4?s=100" width="100px;" alt="Eldrick Wega" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Eldrick Wega&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=ewega" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.felixarjuna.dev/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/79026094?v=4?s=100" width="100px;" alt="Felix Arjuna" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Felix Arjuna&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=felixarjuna" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/feapaydin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19946639?v=4?s=100" width="100px;" alt="Furkan Enes" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Furkan Enes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=feapaydin" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://learn.microsoft.com/dotnet"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24882762?v=4?s=100" width="100px;" alt="Genevieve Warren" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Genevieve Warren&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=gewarren" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/geoder101"&gt;&lt;img src="https://avatars.githubusercontent.com/u/145904?v=4?s=100" width="100px;" alt="George Dernikos" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;George Dernikos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=geoder101" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/giomartinsdev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/125399281?v=4?s=100" width="100px;" alt="Giovanni de Almeida Martins" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Giovanni de Almeida Martins&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=giomartinsdev" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/Ioana37"&gt;&lt;img src="https://avatars.githubusercontent.com/u/69301842?v=4?s=100" width="100px;" alt="Ioana A" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ioana A&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=Ioana37" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/nohwnd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5735905?v=4?s=100" width="100px;" alt="Jakub Jareš" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jakub Jareš&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=nohwnd" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://joe-watkins.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3695795?v=4?s=100" width="100px;" alt="Joe Watkins" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Joe Watkins&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=joe-watkins" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://johnpapa.net/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1202528?v=4?s=100" width="100px;" alt="John Papa" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;John Papa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=johnpapa" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://www.sugbo4j.co.nz/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15100839?v=4?s=100" width="100px;" alt="Joseph Gonzales" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Joseph Gonzales&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=josephgonzales01" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://digio.es/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/173672918?v=4?s=100" width="100px;" alt="José Antonio Garrido" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;José Antonio Garrido&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=josegarridodigio" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/Ranrar"&gt;&lt;img src="https://avatars.githubusercontent.com/u/95967772?v=4?s=100" width="100px;" alt="Kim Skov Rasmussen" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kim Skov Rasmussen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=Ranrar" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/whiteken"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20211937?v=4?s=100" width="100px;" alt="Kenny White" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kenny White&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=whiteken" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/LouellaCreemers"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46204894?v=4?s=100" width="100px;" alt="Louella Creemers" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Louella Creemers&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=LouellaCreemers" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://linktr.ee/lukemurray"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24467442?v=4?s=100" width="100px;" alt="Luke Murray" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Luke Murray&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=lukemurraynz" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://marknoble.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3819700?v=4?s=100" width="100px;" alt="Mark Noble" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mark Noble&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=marknoble" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://soderlind.no"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1649452?v=4?s=100" width="100px;" alt="Per Søderlind" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Per Søderlind&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=soderlind" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/riqueufmg"&gt;&lt;img src="https://avatars.githubusercontent.com/u/108551585?v=4?s=100" width="100px;" alt="Henrique Nunes" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Henrique Nunes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=riqueufmg" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/jeremiah-snee-openx"&gt;&lt;img src="https://avatars.githubusercontent.com/u/113928685?v=4?s=100" width="100px;" alt="Jeremiah Snee" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jeremiah Snee&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=jeremiah-snee-openx" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tfoot&gt; 
  &lt;tr&gt; 
   &lt;td align="center" size="13px" colspan="7"&gt; &lt;img src="https://raw.githubusercontent.com/all-contributors/all-contributors-cli/1b8533af435da9854653492b1327a23a4dbd0a10/assets/logo-small.svg?sanitize=true" /&gt; &lt;a href="https://all-contributors.js.org/docs/en/bot/usage"&gt;Add your contributions&lt;/a&gt;  &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tfoot&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href="https://github.com/all-contributors/all-contributors"&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;h2&gt;📚 Additional Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/copilot/copilot-customization"&gt;VS Code Copilot Customization Documentation&lt;/a&gt; - Official Microsoft documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/copilot/chat/copilot-chat"&gt;GitHub Copilot Chat Documentation&lt;/a&gt; - Complete chat feature guide&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/copilot/chat/chat-modes"&gt;Custom Chat Modes&lt;/a&gt; - Advanced chat configuration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/getstarted/settings"&gt;VS Code Settings&lt;/a&gt; - General VS Code configuration guide&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;™️ Trademarks&lt;/h2&gt; 
&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href="https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general"&gt;Microsoft's Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>facebook/react</title>
      <link>https://github.com/facebook/react</link>
      <description>&lt;p&gt;The library for web and native user interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://react.dev/"&gt;React&lt;/a&gt; · &lt;a href="https://github.com/facebook/react/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="GitHub license" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/react"&gt;&lt;img src="https://img.shields.io/npm/v/react.svg?style=flat" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml"&gt;&lt;img src="https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml/badge.svg?sanitize=true" alt="(Runtime) Build and Test" /&gt;&lt;/a&gt; &lt;a href="https://github.com/facebook/react/actions/workflows/compiler_typescript.yml"&gt;&lt;img src="https://github.com/facebook/react/actions/workflows/compiler_typescript.yml/badge.svg?branch=main" alt="(Compiler) TypeScript" /&gt;&lt;/a&gt; &lt;a href="https://legacy.reactjs.org/docs/how-to-contribute.html#your-first-pull-request"&gt;&lt;img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true" alt="PRs Welcome" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;React is a JavaScript library for building user interfaces.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Declarative:&lt;/strong&gt; React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Component-Based:&lt;/strong&gt; Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Learn Once, Write Anywhere:&lt;/strong&gt; We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using &lt;a href="https://nodejs.org/en"&gt;Node&lt;/a&gt; and power mobile apps using &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://react.dev/learn"&gt;Learn how to use React in your project&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;React has been designed for gradual adoption from the start, and &lt;strong&gt;you can use as little or as much React as you need&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use &lt;a href="https://react.dev/learn"&gt;Quick Start&lt;/a&gt; to get a taste of React.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn/add-react-to-an-existing-project"&gt;Add React to an Existing Project&lt;/a&gt; to use as little or as much React as you need.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn/start-a-new-react-project"&gt;Create a New React App&lt;/a&gt; if you're looking for a powerful JavaScript toolchain.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find the React documentation &lt;a href="https://react.dev/"&gt;on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://react.dev/learn"&gt;Getting Started&lt;/a&gt; page for a quick overview.&lt;/p&gt; 
&lt;p&gt;The documentation is divided into several sections:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn"&gt;Quick Start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn/tutorial-tic-tac-toe"&gt;Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn/thinking-in-react"&gt;Thinking in React&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn/installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn/describing-the-ui"&gt;Describing the UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn/adding-interactivity"&gt;Adding Interactivity&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn/managing-state"&gt;Managing State&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/learn/escape-hatches"&gt;Advanced Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/reference/react"&gt;API Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.dev/community"&gt;Where to Get Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://legacy.reactjs.org/docs/how-to-contribute.html"&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can improve it by sending pull requests to &lt;a href="https://github.com/reactjs/react.dev"&gt;this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;We have several examples &lt;a href="https://react.dev/"&gt;on the website&lt;/a&gt;. Here is the first one to get you started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { createRoot } from 'react-dom/client';

function HelloMessage({ name }) {
  return &amp;lt;div&amp;gt;Hello {name}&amp;lt;/div&amp;gt;;
}

const root = createRoot(document.getElementById('container'));
root.render(&amp;lt;HelloMessage name="Taylor" /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This example will render "Hello Taylor" into a container on the page.&lt;/p&gt; 
&lt;p&gt;You'll notice that we used an HTML-like syntax; &lt;a href="https://react.dev/learn#writing-markup-with-jsx"&gt;we call it JSX&lt;/a&gt;. JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://code.fb.com/codeofconduct"&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read &lt;a href="https://code.fb.com/codeofconduct"&gt;the full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://legacy.reactjs.org/docs/how-to-contribute.html"&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Read our &lt;a href="https://legacy.reactjs.org/docs/how-to-contribute.html"&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/facebook/react/labels/good%20first%20issue"&gt;Good First Issues&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;To help you get your feet wet and get you familiar with our contribution process, we have a list of &lt;a href="https://github.com/facebook/react/labels/good%20first%20issue"&gt;good first issues&lt;/a&gt; that contain bugs that have a relatively limited scope. This is a great place to get started.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;React is &lt;a href="https://raw.githubusercontent.com/facebook/react/main/LICENSE"&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>itdoginfo/podkop</title>
      <link>https://github.com/itdoginfo/podkop</link>
      <description>&lt;p&gt;Dev podkop&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Вещи, которые вам нужно знать перед установкой&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Это бета-версия, которая находится в активной разработке. Из версии в версию что-то может меняться.&lt;/li&gt; 
 &lt;li&gt;При возникновении проблем, нужен технически грамотный фидбэк в чат. Ознакомьтесь с закрепом в топике.&lt;/li&gt; 
 &lt;li&gt;При обновлении &lt;strong&gt;обязательно&lt;/strong&gt; &lt;a href="https://podkop.net/docs/clear-browser-cache/"&gt;сбрасывайте кэш LuCI&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Также при обновлении всегда заходите в конфигурацию и проверяйте свои настройки. Конфигурация может измениться.&lt;/li&gt; 
 &lt;li&gt;Необходимо минимум 25МБ свободного места на роутере. Роутеры с флешками на 16МБ сразу мимо.&lt;/li&gt; 
 &lt;li&gt;При старте программы редактируется конфиг Dnsmasq.&lt;/li&gt; 
 &lt;li&gt;Podkop редактирует конфиг sing-box. Обязательно сохраните ваш конфиг sing-box перед установкой, если он вам нужен.&lt;/li&gt; 
 &lt;li&gt;Информация здесь может быть устаревшей. Все изменения фиксируются в &lt;a href="https://t.me/itdogchat/81758/420321"&gt;телеграм-чате&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://podkop.net/docs/diagnostics/"&gt;Если у вас что-то не работает.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Если у вас установлен Getdomains, &lt;a href="https://github.com/itdoginfo/domain-routing-openwrt?tab=readme-ov-file#%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%B4%D0%BB%D1%8F-%D1%83%D0%B4%D0%B0%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F"&gt;его следует удалить&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Требуется версия OpenWrt 24.10.&lt;/li&gt; 
 &lt;li&gt;Dashboard доступен, если вы заходите по http (из-за особенностей clash api). И не будет работать, если вы заходите по https и/или домену.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Документация&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://podkop.net/"&gt;https://podkop.net/&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Установка Podkop&lt;/h1&gt; 
&lt;p&gt;Полная информация в &lt;a href="https://podkop.net/docs/install/"&gt;документации&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Вкратце, достаточно одного скрипта для установки и обновления:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sh &amp;lt;(wget -O - https://raw.githubusercontent.com/itdoginfo/podkop/refs/heads/main/install.sh)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Изменения 0.7.0&lt;/h2&gt; 
&lt;p&gt;Начиная с версии 0.7.0 изменена структура конфига &lt;code&gt;/etc/config/podkop&lt;/code&gt;. Старые значения несовместимы с новыми. Нужно заново настроить Podkop.&lt;/p&gt; 
&lt;p&gt;Скрипт установки обнаружит старую версию и предупредит вас об этом. Если вы согласитесь, то он сделает автоматически написанное ниже.&lt;/p&gt; 
&lt;p&gt;При обновлении вручную нужно:&lt;/p&gt; 
&lt;ol start="0"&gt; 
 &lt;li&gt;Не ныть в issue и чатик.&lt;/li&gt; 
 &lt;li&gt;Забэкапить старый конфиг:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;mv /etc/config/podkop /etc/config/podkop-070
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Стянуть новый дефолтный конфиг:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;wget -O /etc/config/podkop https://raw.githubusercontent.com/itdoginfo/podkop/refs/heads/main/podkop/files/etc/config/podkop
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Настроить заново ваш Podkop через Luci или UCI.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;ToDo&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;br /&gt; PR принимаются только по issues, у которых стоит label "enhancement". Либо по согласованию с авторами в ТГ-чате. Остальные PR на данный момент не рассматриваются.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Будущее&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; &lt;a href="https://github.com/itdoginfo/podkop/issues/118"&gt;Подписка&lt;/a&gt;. Здесь нужна реализация, чтоб для каждой секции помимо ручного выбора, был выбор фильтрации по тегу. Например, для main выбираем ключевые слова NL, DE, FI. А для extra секции фильтруем по RU. И создаётся outbound c urltest в которых перечислены outbound из фильтров.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Весь трафик в sing-box и маршрутизация полностью на его уровне.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; При успешном запуске переходит в фоновый режим и следит за состоянием sing-box. Если вдруг идёт exit 1, выполняется dnsmasq restore и снова следит за состоянием. Вопрос в том, как это искусственно провернуть. Попробовать положить прокси и посмотреть, останется ли работать DNS в этом случае. И здесь, вероятно, можно обойтись триггером в init.d. &lt;a href="https://github.com/itdoginfo/podkop/issues/111"&gt;Issue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Галочка, которая режет доступ к doh серверам.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; IPv6. Только после наполнения Wiki.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Тесты&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Unit тесты (BATS)&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Интеграционные тесты бекенда (OpenWrt rootfs + BATS)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://deepwiki.com/itdoginfo/podkop"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>upstash/context7</title>
      <link>https://github.com/upstash/context7</link>
      <description>&lt;p&gt;Context7 MCP Server -- Up-to-date code documentation for LLMs and AI code editors&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/upstash/context7/master/public/cover.png" alt="Cover" /&gt;&lt;/p&gt; 
&lt;h1&gt;Context7 MCP - Up-to-date Code Docs For Any Prompt&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://context7.com"&gt;&lt;img src="https://img.shields.io/badge/Website-context7.com-blue" alt="Website" /&gt;&lt;/a&gt; &lt;a href="https://smithery.ai/server/@upstash/context7-mcp"&gt;&lt;img src="https://smithery.ai/badge/@upstash/context7-mcp" alt="smithery badge" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@upstash/context7-mcp"&gt;&lt;img src="https://img.shields.io/npm/v/%40upstash%2Fcontext7-mcp?color=red" alt="NPM Version" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/LICENSE"&gt;&lt;img src="https://img.shields.io/npm/l/%40upstash%2Fcontext7-mcp" alt="MIT licensed" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://cursor.com/en/install-mcp?name=context7&amp;amp;config=eyJ1cmwiOiJodHRwczovL21jcC5jb250ZXh0Ny5jb20vbWNwIn0%3D"&gt;&lt;img src="https://cursor.com/deeplink/mcp-install-dark.svg?sanitize=true" alt="Install MCP Server" /&gt;&lt;/a&gt; &lt;a href="https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%7B%22name%22%3A%22context7%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40upstash%2Fcontext7-mcp%40latest%22%5D%7D"&gt;&lt;img alt="Install in VS Code (npx)" src="https://img.shields.io/badge/Install%20in%20VS%20Code-0098FF?style=for-the-badge&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.zh-TW.md"&gt;&lt;img src="https://img.shields.io/badge/docs-%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87-yellow" alt="繁體中文" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.zh-CN.md"&gt;&lt;img src="https://img.shields.io/badge/docs-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-yellow" alt="简体中文" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.ja.md"&gt;&lt;img src="https://img.shields.io/badge/docs-%E6%97%A5%E6%9C%AC%E8%AA%9E-b7003a" alt="日本語" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.ko.md"&gt;&lt;img src="https://img.shields.io/badge/docs-%ED%95%9C%EA%B5%AD%EC%96%B4-green" alt="한국어 문서" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.es.md"&gt;&lt;img src="https://img.shields.io/badge/docs-Espa%C3%B1ol-orange" alt="Documentación en Español" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.fr.md"&gt;&lt;img src="https://img.shields.io/badge/docs-Fran%C3%A7ais-blue" alt="Documentation en Français" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.pt-BR.md"&gt;&lt;img src="https://img.shields.io/badge/docs-Portugu%C3%AAs%20(Brasil)-purple" alt="Documentação em Português (Brasil)" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.it.md"&gt;&lt;img src="https://img.shields.io/badge/docs-Italian-red" alt="Documentazione in italiano" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.id-ID.md"&gt;&lt;img src="https://img.shields.io/badge/docs-Bahasa%20Indonesia-pink" alt="Dokumentasi Bahasa Indonesia" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.de.md"&gt;&lt;img src="https://img.shields.io/badge/docs-Deutsch-darkgreen" alt="Dokumentation auf Deutsch" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.ru.md"&gt;&lt;img src="https://img.shields.io/badge/docs-%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9-darkblue" alt="Документация на русском языке" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.uk.md"&gt;&lt;img src="https://img.shields.io/badge/docs-%D0%A3%D0%BA%D1%80%D0%B0%D1%97%D0%BD%D1%81%D1%8C%D0%BA%D0%B0-lightblue" alt="Українська документація" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.tr.md"&gt;&lt;img src="https://img.shields.io/badge/docs-T%C3%BCrk%C3%A7e-blue" alt="Türkçe Doküman" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.ar.md"&gt;&lt;img src="https://img.shields.io/badge/docs-Arabic-white" alt="Arabic Documentation" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/README.vi.md"&gt;&lt;img src="https://img.shields.io/badge/docs-Ti%E1%BA%BFng%20Vi%E1%BB%87t-red" alt="Tiếng Việt" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;❌ Without Context7&lt;/h2&gt; 
&lt;p&gt;LLMs rely on outdated or generic information about the libraries you use. You get:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;❌ Code examples are outdated and based on year-old training data&lt;/li&gt; 
 &lt;li&gt;❌ Hallucinated APIs that don't even exist&lt;/li&gt; 
 &lt;li&gt;❌ Generic answers for old package versions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;✅ With Context7&lt;/h2&gt; 
&lt;p&gt;Context7 MCP pulls up-to-date, version-specific documentation and code examples straight from the source — and places them directly into your prompt.&lt;/p&gt; 
&lt;p&gt;Add &lt;code&gt;use context7&lt;/code&gt; to your prompt in Cursor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-txt"&gt;Create a Next.js middleware that checks for a valid JWT in cookies and redirects unauthenticated users to `/login`. use context7
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-txt"&gt;Configure a Cloudflare Worker script to cache JSON API responses for five minutes. use context7
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Context7 fetches up-to-date code examples and documentation right into your LLM's context.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;1️⃣ Write your prompt naturally&lt;/li&gt; 
 &lt;li&gt;2️⃣ Tell the LLM to &lt;code&gt;use context7&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;3️⃣ Get working code answers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;No tab-switching, no hallucinated APIs that don't exist, no outdated code generation.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This repository hosts the source code of Context7 MCP server. The supporting components — API backend, parsing engine, and crawling engine — are private and not part of this release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;📚 Adding Projects&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/docs/adding-projects.md"&gt;project addition guide&lt;/a&gt; to learn how to add (or update) your favorite libraries to Context7.&lt;/p&gt; 
&lt;h2&gt;🛠️ Installation&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js &amp;gt;= v18.0.0&lt;/li&gt; 
 &lt;li&gt;Cursor, Claude Code, VSCode, Windsurf or another MCP Client&lt;/li&gt; 
 &lt;li&gt;Context7 API Key (Optional) for higher rate limits and private repositories (Get yours by creating an account at &lt;a href="https://context7.com/dashboard"&gt;context7.com/dashboard&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] &lt;strong&gt;SSE Protocol Deprecation Notice&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;The Server-Sent Events (SSE) transport protocol is deprecated and its endpoint will be removed in upcoming releases. Please use HTTP or stdio transport methods instead.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Installing via Smithery&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;To install Context7 MCP Server for any client automatically via &lt;a href="https://smithery.ai/server/@upstash/context7-mcp"&gt;Smithery&lt;/a&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;npx -y @smithery/cli@latest install @upstash/context7-mcp --client &amp;lt;CLIENT_NAME&amp;gt; --key &amp;lt;YOUR_SMITHERY_KEY&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can find your Smithery key in the &lt;a href="https://smithery.ai/server/@upstash/context7-mcp"&gt;Smithery.ai webpage&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Cursor&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Go to: &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Cursor Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;MCP&lt;/code&gt; -&amp;gt; &lt;code&gt;Add new global MCP server&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;Pasting the following configuration into your Cursor &lt;code&gt;~/.cursor/mcp.json&lt;/code&gt; file is the recommended approach. You may also install in a specific project by creating &lt;code&gt;.cursor/mcp.json&lt;/code&gt; in your project folder. See &lt;a href="https://docs.cursor.com/context/model-context-protocol"&gt;Cursor MCP docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Since Cursor 1.0, you can click the install button below for instant one-click installation.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;Cursor Remote Server Connection&lt;/h4&gt; 
 &lt;p&gt;&lt;a href="https://cursor.com/en/install-mcp?name=context7&amp;amp;config=eyJ1cmwiOiJodHRwczovL21jcC5jb250ZXh0Ny5jb20vbWNwIn0%3D"&gt;&lt;img src="https://cursor.com/deeplink/mcp-install-dark.svg?sanitize=true" alt="Install MCP Server" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "url": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Cursor Local Server Connection&lt;/h4&gt; 
 &lt;p&gt;&lt;a href="https://cursor.com/en/install-mcp?name=context7&amp;amp;config=eyJjb21tYW5kIjoibnB4IC15IEB1cHN0YXNoL2NvbnRleHQ3LW1jcCJ9"&gt;&lt;img src="https://cursor.com/deeplink/mcp-install-dark.svg?sanitize=true" alt="Install MCP Server" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Claude Code&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Run this command. See &lt;a href="https://docs.anthropic.com/en/docs/claude-code/mcp"&gt;Claude Code MCP docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;h4&gt;Claude Code Remote Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;claude mcp add --transport http context7 https://mcp.context7.com/mcp --header "CONTEXT7_API_KEY: YOUR_API_KEY"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Claude Code Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;claude mcp add context7 -- npx -y @upstash/context7-mcp --api-key YOUR_API_KEY
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Amp&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Run this command in your terminal. See &lt;a href="https://ampcode.com/manual#mcp"&gt;Amp MCP docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;h4&gt;Without API Key (Basic Usage)&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;amp mcp add context7 https://mcp.context7.com/mcp
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;With API Key (Higher Rate Limits &amp;amp; Private Repos)&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;amp mcp add context7 --header "CONTEXT7_API_KEY=YOUR_API_KEY" https://mcp.context7.com/mcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Windsurf&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Add this to your Windsurf MCP config file. See &lt;a href="https://docs.windsurf.com/windsurf/cascade/mcp"&gt;Windsurf MCP docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;h4&gt;Windsurf Remote Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "serverUrl": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Windsurf Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in VS Code&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;&lt;a href="https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%7B%22name%22%3A%22context7%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40upstash%2Fcontext7-mcp%40latest%22%5D%7D"&gt;&lt;img alt="Install in VS Code (npx)" src="https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&amp;amp;label=Install%20Context7%20MCP&amp;amp;color=0098FF" /&gt;&lt;/a&gt; &lt;a href="https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%7B%22name%22%3A%22context7%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40upstash%2Fcontext7-mcp%40latest%22%5D%7D"&gt;&lt;img alt="Install in VS Code Insiders (npx)" src="https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&amp;amp;label=Install%20Context7%20MCP&amp;amp;color=24bfa5" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Add this to your VS Code MCP config file. See &lt;a href="https://code.visualstudio.com/docs/copilot/chat/mcp-servers"&gt;VS Code MCP docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;h4&gt;VS Code Remote Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;"mcp": {
  "servers": {
    "context7": {
      "type": "http",
      "url": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;VS Code Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;"mcp": {
  "servers": {
    "context7": {
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Install in Cline&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;You can easily install Context7 through the &lt;a href="https://cline.bot/mcp-marketplace"&gt;Cline MCP Server Marketplace&lt;/a&gt; by following these instructions:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Open &lt;strong&gt;Cline&lt;/strong&gt;.&lt;/li&gt; 
  &lt;li&gt;Click the hamburger menu icon (☰) to enter the &lt;strong&gt;MCP Servers&lt;/strong&gt; section.&lt;/li&gt; 
  &lt;li&gt;Use the search bar within the &lt;strong&gt;Marketplace&lt;/strong&gt; tab to find &lt;em&gt;Context7&lt;/em&gt;.&lt;/li&gt; 
  &lt;li&gt;Click the &lt;strong&gt;Install&lt;/strong&gt; button.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Or you can directly edit MCP servers configuration:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Open &lt;strong&gt;Cline&lt;/strong&gt;.&lt;/li&gt; 
  &lt;li&gt;Click the hamburger menu icon (☰) to enter the &lt;strong&gt;MCP Servers&lt;/strong&gt; section.&lt;/li&gt; 
  &lt;li&gt;Choose &lt;strong&gt;Remote Servers&lt;/strong&gt; tab.&lt;/li&gt; 
  &lt;li&gt;Click the &lt;strong&gt;Edit Configuration&lt;/strong&gt; button.&lt;/li&gt; 
  &lt;li&gt;Add context7 to &lt;code&gt;mcpServers&lt;/code&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "url": "https://mcp.context7.com/mcp",
      "type": "streamableHttp",
      "headers": {
        "Authorization": "Bearer YOUR_API_KEY"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Zed&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;It can be installed via &lt;a href="https://zed.dev/extensions?query=Context7"&gt;Zed Extensions&lt;/a&gt; or you can add this to your Zed &lt;code&gt;settings.json&lt;/code&gt;. See &lt;a href="https://zed.dev/docs/assistant/context-servers"&gt;Zed Context Server docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "context_servers": {
    "Context7": {
      "source": "custom",
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Augment Code&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;To configure Context7 MCP in Augment Code, you can use either the graphical interface or manual configuration.&lt;/p&gt; 
 &lt;h3&gt;&lt;strong&gt;A. Using the Augment Code UI&lt;/strong&gt;&lt;/h3&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Click the hamburger menu.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Select &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Navigate to the &lt;strong&gt;Tools&lt;/strong&gt; section.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Click the &lt;strong&gt;+ Add MCP&lt;/strong&gt; button.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Enter the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npx -y @upstash/context7-mcp@latest
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Name the MCP: &lt;strong&gt;Context7&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Click the &lt;strong&gt;Add&lt;/strong&gt; button.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Once the MCP server is added, you can start using Context7's up-to-date code documentation features directly within Augment Code.&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;h3&gt;&lt;strong&gt;B. Manual Configuration&lt;/strong&gt;&lt;/h3&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Press Cmd/Ctrl Shift P or go to the hamburger menu in the Augment panel&lt;/li&gt; 
  &lt;li&gt;Select Edit Settings&lt;/li&gt; 
  &lt;li&gt;Under Advanced, click Edit in settings.json&lt;/li&gt; 
  &lt;li&gt;Add the server configuration to the &lt;code&gt;mcpServers&lt;/code&gt; array in the &lt;code&gt;augment.advanced&lt;/code&gt; object&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;"augment.advanced": {
  "mcpServers": [
    {
      "name": "context7",
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Once the MCP server is added, restart your editor. If you receive any errors, check the syntax to make sure closing brackets or commas are not missing.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Roo Code&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Add this to your Roo Code MCP configuration file. See &lt;a href="https://docs.roocode.com/features/mcp/using-mcp-in-roo"&gt;Roo Code MCP docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;h4&gt;Roo Code Remote Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "type": "streamable-http",
      "url": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Roo Code Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Gemini CLI&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;See &lt;a href="https://google-gemini.github.io/gemini-cli/docs/tools/mcp-server.html"&gt;Gemini CLI Configuration&lt;/a&gt; for details.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Open the Gemini CLI settings file. The location is &lt;code&gt;~/.gemini/settings.json&lt;/code&gt; (where &lt;code&gt;~&lt;/code&gt; is your home directory).&lt;/li&gt; 
  &lt;li&gt;Add the following to the &lt;code&gt;mcpServers&lt;/code&gt; object in your &lt;code&gt;settings.json&lt;/code&gt; file:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "httpUrl": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY",
        "Accept": "application/json, text/event-stream"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Or, for a local server:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If the &lt;code&gt;mcpServers&lt;/code&gt; object does not exist, create it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Qwen Coder&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;See &lt;a href="https://qwenlm.github.io/qwen-code-docs/en/tools/mcp-server/#how-to-set-up-your-mcp-server"&gt;Qwen Coder MCP Configuration&lt;/a&gt; for details.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Open the Qwen Coder settings file. The location is &lt;code&gt;~/.qwen/settings.json&lt;/code&gt; (where &lt;code&gt;~&lt;/code&gt; is your home directory).&lt;/li&gt; 
  &lt;li&gt;Add the following to the &lt;code&gt;mcpServers&lt;/code&gt; object in your &lt;code&gt;settings.json&lt;/code&gt; file:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "httpUrl": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY",
        "Accept": "application/json, text/event-stream"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Or, for a local server:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If the &lt;code&gt;mcpServers&lt;/code&gt; object does not exist, create it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Claude Desktop&lt;/b&gt;&lt;/summary&gt; 
 &lt;h4&gt;Remote Server Connection&lt;/h4&gt; 
 &lt;p&gt;Open Claude Desktop and navigate to Settings &amp;gt; Connectors &amp;gt; Add Custom Connector. Enter the name as &lt;code&gt;Context7&lt;/code&gt; and the remote MCP server URL as &lt;code&gt;https://mcp.context7.com/mcp&lt;/code&gt;.&lt;/p&gt; 
 &lt;h4&gt;Local Server Connection&lt;/h4&gt; 
 &lt;p&gt;Open Claude Desktop developer settings and edit your &lt;code&gt;claude_desktop_config.json&lt;/code&gt; file to add the following configuration. See &lt;a href="https://modelcontextprotocol.io/quickstart/user"&gt;Claude Desktop MCP docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Opencode&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Add this to your Opencode configuration file. See &lt;a href="https://opencode.ai/docs/mcp-servers"&gt;Opencode MCP docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;h4&gt;Opencode Remote Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;"mcp": {
  "context7": {
    "type": "remote",
    "url": "https://mcp.context7.com/mcp",
    "headers": {
      "CONTEXT7_API_KEY": "YOUR_API_KEY"
    },
    "enabled": true
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Opencode Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcp": {
    "context7": {
      "type": "local",
      "command": ["npx", "-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"],
      "enabled": true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in OpenAI Codex&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;See &lt;a href="https://github.com/openai/codex"&gt;OpenAI Codex&lt;/a&gt; for more information.&lt;/p&gt; 
 &lt;p&gt;Add the following configuration to your OpenAI Codex MCP server settings:&lt;/p&gt; 
 &lt;h4&gt;Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-toml"&gt;[mcp_servers.context7]
args = ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
command = "npx"
startup_timeout_ms = 20_000
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Remote Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-toml"&gt;[mcp_servers.context7]
url = "https://mcp.context7.com/mcp"
http_headers = { "CONTEXT7_API_KEY" = "YOUR_API_KEY" }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Optional troubleshooting — only if you see startup "request timed out" or "not found program". Most users can ignore this.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;First try: increase &lt;code&gt;startup_timeout_ms&lt;/code&gt; to &lt;code&gt;40_000&lt;/code&gt; and retry.&lt;/li&gt; 
   &lt;li&gt;Windows quick fix (absolute &lt;code&gt;npx&lt;/code&gt; path + explicit env):&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;pre&gt;&lt;code class="language-toml"&gt;[mcp_servers.context7]
command = "C:\\Users\\yourname\\AppData\\Roaming\\npm\\npx.cmd"
args = [
  "-y",
  "@upstash/context7-mcp",
  "--api-key",
  "YOUR_API_KEY"
]
env = { SystemRoot="C:\\Windows", APPDATA="C:\\Users\\yourname\\AppData\\Roaming" }
startup_timeout_ms = 40_000
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;macOS quick fix (use Node + installed package entry point):&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;pre&gt;&lt;code class="language-toml"&gt;[mcp_servers.context7]
command = "/Users/yourname/.nvm/versions/node/v22.14.0/bin/node"
args = ["/Users/yourname/.nvm/versions/node/v22.14.0/lib/node_modules/@upstash/context7-mcp/dist/index.js",
  "--transport",
  "stdio",
  "--api-key",
  "YOUR_API_KEY"
]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Notes: Replace &lt;code&gt;yourname&lt;/code&gt; with your OS username. Explicitly setting &lt;code&gt;APPDATA&lt;/code&gt; and &lt;code&gt;SystemRoot&lt;/code&gt; is essential because these are required by &lt;code&gt;npx&lt;/code&gt; on Windows but not set by certain versions of OpenAI Codex mcp clients by default.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in JetBrains AI Assistant&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;See &lt;a href="https://www.jetbrains.com/help/ai-assistant/configure-an-mcp-server.html"&gt;JetBrains AI Assistant Documentation&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;In JetBrains IDEs, go to &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;AI Assistant&lt;/code&gt; -&amp;gt; &lt;code&gt;Model Context Protocol (MCP)&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Click &lt;code&gt;+ Add&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Click on &lt;code&gt;Command&lt;/code&gt; in the top-left corner of the dialog and select the As JSON option from the list&lt;/li&gt; 
  &lt;li&gt;Add this configuration and click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="5"&gt; 
  &lt;li&gt;Click &lt;code&gt;Apply&lt;/code&gt; to save changes.&lt;/li&gt; 
  &lt;li&gt;The same way context7 could be added for JetBrains Junie in &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Junie&lt;/code&gt; -&amp;gt; &lt;code&gt;MCP Settings&lt;/code&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Kiro&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;See &lt;a href="https://kiro.dev/docs/mcp/configuration/"&gt;Kiro Model Context Protocol Documentation&lt;/a&gt; for details.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Navigate &lt;code&gt;Kiro&lt;/code&gt; &amp;gt; &lt;code&gt;MCP Servers&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Add a new MCP server by clicking the &lt;code&gt;+ Add&lt;/code&gt; button.&lt;/li&gt; 
  &lt;li&gt;Paste the configuration given below:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "Context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"],
      "env": {},
      "disabled": false,
      "autoApprove": []
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="4"&gt; 
  &lt;li&gt;Click &lt;code&gt;Save&lt;/code&gt; to apply the changes.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Trae&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Use the Add manually feature and fill in the JSON configuration information for that MCP server. For more details, visit the &lt;a href="https://docs.trae.ai/ide/model-context-protocol?_lang=en"&gt;Trae documentation&lt;/a&gt;.&lt;/p&gt; 
 &lt;h4&gt;Trae Remote Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "url": "https://mcp.context7.com/mcp"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Trae Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Using Bun or Deno&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Use these alternatives to run the local Context7 MCP server with other runtimes. These examples work for any client that supports launching a local MCP server via command + args.&lt;/p&gt; 
 &lt;h4&gt;Bun&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "bunx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Deno&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "deno",
      "args": [
        "run",
        "--allow-env=NO_DEPRECATION,TRACE_DEPRECATION",
        "--allow-net",
        "npm:@upstash/context7-mcp"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Using Docker&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;If you prefer to run the MCP server in a Docker container:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build the Docker Image:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;First, create a &lt;code&gt;Dockerfile&lt;/code&gt; in the project root (or anywhere you prefer):&lt;/p&gt; 
   &lt;details&gt; 
    &lt;summary&gt;Click to see Dockerfile content&lt;/summary&gt; 
    &lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM node:18-alpine

WORKDIR /app

# Install the latest version globally
RUN npm install -g @upstash/context7-mcp

# Expose default port if needed (optional, depends on MCP client interaction)
# EXPOSE 3000

# Default command to run the server
CMD ["context7-mcp"]
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/details&gt; &lt;p&gt;Then, build the image using a tag (e.g., &lt;code&gt;context7-mcp&lt;/code&gt;). &lt;strong&gt;Make sure Docker Desktop (or the Docker daemon) is running.&lt;/strong&gt; Run the following command in the same directory where you saved the &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;docker build -t context7-mcp .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configure Your MCP Client:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Update your MCP client's configuration to use the Docker command.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Example for a cline_mcp_settings.json:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "Сontext7": {
      "autoApprove": [],
      "disabled": false,
      "timeout": 60,
      "command": "docker",
      "args": ["run", "-i", "--rm", "context7-mcp"],
      "transportType": "stdio"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: This is an example configuration. Please refer to the specific examples for your MCP client (like Cursor, VS Code, etc.) earlier in this README to adapt the structure (e.g., &lt;code&gt;mcpServers&lt;/code&gt; vs &lt;code&gt;servers&lt;/code&gt;). Also, ensure the image name in &lt;code&gt;args&lt;/code&gt; matches the tag used during the &lt;code&gt;docker build&lt;/code&gt; command.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install Using the Desktop Extension&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Install the &lt;a href="https://raw.githubusercontent.com/upstash/context7/master/mcpb/context7.mcpb"&gt;context7.mcpb&lt;/a&gt; file under the mcpb folder and add it to your client. For more information, please check out &lt;a href="https://github.com/anthropics/mcpb#mcp-bundles-mcpb"&gt;MCP bundles docs&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Windows&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;The configuration on Windows is slightly different compared to Linux or macOS (&lt;em&gt;&lt;code&gt;Cline&lt;/code&gt; is used in the example&lt;/em&gt;). The same principle applies to other editors; refer to the configuration of &lt;code&gt;command&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "github.com/upstash/context7-mcp": {
      "command": "cmd",
      "args": ["/c", "npx", "-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"],
      "disabled": false,
      "autoApprove": []
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Amazon Q Developer CLI&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Add this to your Amazon Q Developer CLI configuration file. See &lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-mcp-configuration.html"&gt;Amazon Q Developer CLI docs&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Warp&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;See &lt;a href="https://docs.warp.dev/knowledge-and-collaboration/mcp#adding-an-mcp-server"&gt;Warp Model Context Protocol Documentation&lt;/a&gt; for details.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Navigate &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;AI&lt;/code&gt; &amp;gt; &lt;code&gt;Manage MCP servers&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Add a new MCP server by clicking the &lt;code&gt;+ Add&lt;/code&gt; button.&lt;/li&gt; 
  &lt;li&gt;Paste the configuration given below:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "Context7": {
    "command": "npx",
    "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"],
    "env": {},
    "working_directory": null,
    "start_on_launch": true
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="4"&gt; 
  &lt;li&gt;Click &lt;code&gt;Save&lt;/code&gt; to apply the changes.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Copilot Coding Agent&lt;/b&gt;&lt;/summary&gt; 
 &lt;h2&gt;Using Context7 with Copilot Coding Agent&lt;/h2&gt; 
 &lt;p&gt;Add the following configuration to the &lt;code&gt;mcp&lt;/code&gt; section of your Copilot Coding Agent configuration file Repository-&amp;gt;Settings-&amp;gt;Copilot-&amp;gt;Coding agent-&amp;gt;MCP configuration:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "type": "http",
      "url": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY"
      },
      "tools": ["get-library-docs", "resolve-library-id"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For more information, see the &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/copilot/how-tos/agents/copilot-coding-agent/extending-copilot-coding-agent-with-mcp"&gt;official GitHub documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in LM Studio&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;See &lt;a href="https://lmstudio.ai/blog/lmstudio-v0.3.17"&gt;LM Studio MCP Support&lt;/a&gt; for more information.&lt;/p&gt; 
 &lt;h4&gt;One-click install:&lt;/h4&gt; 
 &lt;p&gt;&lt;a href="https://lmstudio.ai/install-mcp?name=context7&amp;amp;config=eyJjb21tYW5kIjoibnB4IiwiYXJncyI6WyIteSIsIkB1cHN0YXNoL2NvbnRleHQ3LW1jcCJdfQ%3D%3D"&gt;&lt;img src="https://files.lmstudio.ai/deeplink/mcp-install-light.svg?sanitize=true" alt="Add MCP Server context7 to LM Studio" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h4&gt;Manual set-up:&lt;/h4&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Navigate to &lt;code&gt;Program&lt;/code&gt; (right side) &amp;gt; &lt;code&gt;Install&lt;/code&gt; &amp;gt; &lt;code&gt;Edit mcp.json&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Paste the configuration given below:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "Context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="3"&gt; 
  &lt;li&gt;Click &lt;code&gt;Save&lt;/code&gt; to apply the changes.&lt;/li&gt; 
  &lt;li&gt;Toggle the MCP server on/off from the right hand side, under &lt;code&gt;Program&lt;/code&gt;, or by clicking the plug icon at the bottom of the chat box.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Visual Studio 2022&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;You can configure Context7 MCP in Visual Studio 2022 by following the &lt;a href="https://learn.microsoft.com/visualstudio/ide/mcp-servers?view=vs-2022"&gt;Visual Studio MCP Servers documentation&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;Add this to your Visual Studio MCP config file (see the &lt;a href="https://learn.microsoft.com/visualstudio/ide/mcp-servers?view=vs-2022"&gt;Visual Studio docs&lt;/a&gt; for details):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "inputs": [],
  "servers": {
    "context7": {
      "type": "http",
      "url": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Or, for a local server:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcp": {
    "servers": {
      "context7": {
        "type": "stdio",
        "command": "npx",
        "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For more information and troubleshooting, refer to the &lt;a href="https://learn.microsoft.com/visualstudio/ide/mcp-servers?view=vs-2022"&gt;Visual Studio MCP Servers documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Crush&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Add this to your Crush configuration file. See &lt;a href="https://github.com/charmbracelet/crush#mcps"&gt;Crush MCP docs&lt;/a&gt; for more info.&lt;/p&gt; 
 &lt;h4&gt;Crush Remote Server Connection (HTTP)&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "$schema": "https://charm.land/crush.json",
  "mcp": {
    "context7": {
      "type": "http",
      "url": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Crush Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "$schema": "https://charm.land/crush.json",
  "mcp": {
    "context7": {
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in BoltAI&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Open the "Settings" page of the app, navigate to "Plugins," and enter the following JSON:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Once saved, enter in the chat &lt;code&gt;get-library-docs&lt;/code&gt; followed by your Context7 documentation ID (e.g., &lt;code&gt;get-library-docs /nuxt/ui&lt;/code&gt;). More information is available on &lt;a href="https://docs.boltai.com/docs/plugins/mcp-servers"&gt;BoltAI's Documentation site&lt;/a&gt;. For BoltAI on iOS, &lt;a href="https://docs.boltai.com/docs/boltai-mobile/mcp-servers"&gt;see this guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Rovo Dev CLI&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Edit your Rovo Dev CLI MCP config by running the command below -&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;acli rovodev mcp
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example config -&lt;/p&gt; 
 &lt;h4&gt;Remote Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "url": "https://mcp.context7.com/mcp"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Zencoder&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;To configure Context7 MCP in Zencoder, follow these steps:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Go to the Zencoder menu (...)&lt;/li&gt; 
  &lt;li&gt;From the dropdown menu, select Agent tools&lt;/li&gt; 
  &lt;li&gt;Click on the Add custom MCP&lt;/li&gt; 
  &lt;li&gt;Add the name and server configuration from below, and make sure to hit the Install button&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "command": "npx",
  "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Once the MCP server is added, you can easily continue using it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Qodo Gen&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;See &lt;a href="https://docs.qodo.ai/qodo-documentation/qodo-gen/qodo-gen-chat/agentic-mode/agentic-tools-mcps"&gt;Qodo Gen docs&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Open Qodo Gen chat panel in VSCode or IntelliJ.&lt;/li&gt; 
  &lt;li&gt;Click Connect more tools.&lt;/li&gt; 
  &lt;li&gt;Click + Add new MCP.&lt;/li&gt; 
  &lt;li&gt;Add the following configuration:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h4&gt;Qodo Gen Local Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Qodo Gen Remote Server Connection&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "url": "https://mcp.context7.com/mcp"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Install in Perplexity Desktop&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;See &lt;a href="https://www.perplexity.ai/help-center/en/articles/11502712-local-and-remote-mcps-for-perplexity"&gt;Local and Remote MCPs for Perplexity&lt;/a&gt; for more information.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Navigate &lt;code&gt;Perplexity&lt;/code&gt; &amp;gt; &lt;code&gt;Settings&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Select &lt;code&gt;Connectors&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Click &lt;code&gt;Add Connector&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Select &lt;code&gt;Advanced&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Enter Server Name: &lt;code&gt;Context7&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Paste the following JSON in the text area:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "args": ["-y", "@upstash/context7-mcp", "--api-key", "YOUR_API_KEY"],
  "command": "npx",
  "env": {}
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="7"&gt; 
  &lt;li&gt;Click &lt;code&gt;Save&lt;/code&gt;.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h2&gt;🔨 Available Tools&lt;/h2&gt; 
&lt;p&gt;Context7 MCP provides the following tools that LLMs can use:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;resolve-library-id&lt;/code&gt;: Resolves a general library name into a Context7-compatible library ID.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;libraryName&lt;/code&gt; (required): The name of the library to search for&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;get-library-docs&lt;/code&gt;: Fetches documentation for a library using a Context7-compatible library ID.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;context7CompatibleLibraryID&lt;/code&gt; (required): Exact Context7-compatible library ID (e.g., &lt;code&gt;/mongodb/docs&lt;/code&gt;, &lt;code&gt;/vercel/next.js&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;topic&lt;/code&gt; (optional): Focus the docs on a specific topic (e.g., "routing", "hooks")&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;tokens&lt;/code&gt; (optional, default 5000): Max number of tokens to return. Values less than 1000 are automatically increased to 1000.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🛟 Tips&lt;/h2&gt; 
&lt;h3&gt;Add a Rule&lt;/h3&gt; 
&lt;p&gt;If you don’t want to add &lt;code&gt;use context7&lt;/code&gt; to every prompt, you can define a simple rule in your MCP client's rule section:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For Windsurf, in &lt;code&gt;.windsurfrules&lt;/code&gt; file&lt;/li&gt; 
 &lt;li&gt;For Cursor, from &lt;code&gt;Cursor Settings &amp;gt; Rules&lt;/code&gt; section&lt;/li&gt; 
 &lt;li&gt;For Claude Code, in &lt;code&gt;CLAUDE.md&lt;/code&gt; file&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Or the equivalent in your MCP client to auto-invoke Context7 on any code question.&lt;/p&gt; 
&lt;h4&gt;Example Rule&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-txt"&gt;Always use context7 when I need code generation, setup or configuration steps, or
library/API documentation. This means you should automatically use the Context7 MCP
tools to resolve library id and get library docs without me having to explicitly ask.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From then on, you’ll get Context7’s docs in any related conversation without typing anything extra. You can alter the rule to match your use cases.&lt;/p&gt; 
&lt;h3&gt;Use Library Id&lt;/h3&gt; 
&lt;p&gt;If you already know exactly which library you want to use, add its Context7 ID to your prompt. That way, Context7 MCP server can skip the library-matching step and directly continue with retrieving docs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-txt"&gt;Implement basic authentication with Supabase. use library /supabase/supabase for API and docs.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The slash syntax tells the MCP tool exactly which library to load docs for.&lt;/p&gt; 
&lt;h3&gt;HTTPS Proxy&lt;/h3&gt; 
&lt;p&gt;If you are behind an HTTP proxy, Context7 uses the standard &lt;code&gt;https_proxy&lt;/code&gt; / &lt;code&gt;HTTPS_PROXY&lt;/code&gt; environment variables.&lt;/p&gt; 
&lt;h2&gt;💻 Development&lt;/h2&gt; 
&lt;p&gt;Clone the project and install dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bun i
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bun run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bun run dist/index.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CLI Arguments&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;context7-mcp&lt;/code&gt; accepts the following CLI flags:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--transport &amp;lt;stdio|http&amp;gt;&lt;/code&gt; – Transport to use (&lt;code&gt;stdio&lt;/code&gt; by default). Note that HTTP transport automatically provides both HTTP and SSE endpoints.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--port &amp;lt;number&amp;gt;&lt;/code&gt; – Port to listen on when using &lt;code&gt;http&lt;/code&gt; transport (default &lt;code&gt;3000&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--api-key &amp;lt;key&amp;gt;&lt;/code&gt; – API key for authentication (or set &lt;code&gt;CONTEXT7_API_KEY&lt;/code&gt; env var). You can get your API key by creating an account at &lt;a href="https://context7.com/dashboard"&gt;context7.com/dashboard&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example with HTTP transport and port 8080:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bun run dist/index.js --transport http --port 8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another example with stdio transport:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bun run dist/index.js --transport stdio --api-key YOUR_API_KEY
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Environment Variables&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;CONTEXT7_API_KEY&lt;/code&gt; environment variable instead of passing the &lt;code&gt;--api-key&lt;/code&gt; flag. This is useful for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Storing API keys securely in &lt;code&gt;.env&lt;/code&gt; files&lt;/li&gt; 
 &lt;li&gt;Integration with MCP server setups that use dotenv&lt;/li&gt; 
 &lt;li&gt;Tools that prefer environment variable configuration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;--api-key&lt;/code&gt; CLI flag takes precedence over the environment variable when both are provided.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example with .env file:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# .env
CONTEXT7_API_KEY=your_api_key_here
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example MCP configuration using environment variable:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp"],
      "env": {
        "CONTEXT7_API_KEY": "YOUR_API_KEY"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Local Configuration Example&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["tsx", "/path/to/folder/context7/src/index.ts", "--api-key", "YOUR_API_KEY"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Testing with MCP Inspector&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;npx -y @modelcontextprotocol/inspector npx @upstash/context7-mcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;🚨 Troubleshooting&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Module Not Found Errors&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;If you encounter &lt;code&gt;ERR_MODULE_NOT_FOUND&lt;/code&gt;, try using &lt;code&gt;bunx&lt;/code&gt; instead of &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "bunx",
      "args": ["-y", "@upstash/context7-mcp"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This often resolves module resolution issues in environments where &lt;code&gt;npx&lt;/code&gt; doesn't properly install or resolve packages.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;ESM Resolution Issues&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;For errors like &lt;code&gt;Error: Cannot find module 'uriTemplate.js'&lt;/code&gt;, try the &lt;code&gt;--experimental-vm-modules&lt;/code&gt; flag:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "--node-options=--experimental-vm-modules", "@upstash/context7-mcp@1.0.6"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;TLS/Certificate Issues&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Use the &lt;code&gt;--experimental-fetch&lt;/code&gt; flag to bypass TLS-related problems:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "--node-options=--experimental-fetch", "@upstash/context7-mcp"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;General MCP Client Errors&lt;/b&gt;&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Try adding &lt;code&gt;@latest&lt;/code&gt; to the package name&lt;/li&gt; 
  &lt;li&gt;Use &lt;code&gt;bunx&lt;/code&gt; as an alternative to &lt;code&gt;npx&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Consider using &lt;code&gt;deno&lt;/code&gt; as another alternative&lt;/li&gt; 
  &lt;li&gt;Ensure you're using Node.js v18 or higher for native fetch support&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h2&gt;⚠️ Disclaimer&lt;/h2&gt; 
&lt;p&gt;1- Context7 projects are community-contributed and while we strive to maintain high quality, we cannot guarantee the accuracy, completeness, or security of all library documentation. Projects listed in Context7 are developed and maintained by their respective owners, not by Context7. If you encounter any suspicious, inappropriate, or potentially harmful content, please use the "Report" button on the project page to notify us immediately. We take all reports seriously and will review flagged content promptly to maintain the integrity and safety of our platform. By using Context7, you acknowledge that you do so at your own discretion and risk.&lt;/p&gt; 
&lt;p&gt;2- This repository hosts the MCP server’s source code. The supporting components — API backend, parsing engine, and crawling engine — are private and not part of this release.&lt;/p&gt; 
&lt;h2&gt;🤝 Connect with Us&lt;/h2&gt; 
&lt;p&gt;Stay updated and join our community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;📢 Follow us on &lt;a href="https://x.com/context7ai"&gt;X&lt;/a&gt; for the latest news and updates&lt;/li&gt; 
 &lt;li&gt;🌐 Visit our &lt;a href="https://context7.com"&gt;Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💬 Join our &lt;a href="https://upstash.com/discord"&gt;Discord Community&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📺 Context7 In Media&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/52FC3qObp9E"&gt;Better Stack: "Free Tool Makes Cursor 10x Smarter"&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G7gK8H6u7Rs"&gt;Cole Medin: "This is Hands Down the BEST MCP Server for AI Coding Assistants"&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-ggvzyLpK6o"&gt;Income Stream Surfers: "Context7 + SequentialThinking MCPs: Is This AGI?"&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CTZm6fBYisc"&gt;Julian Goldie SEO: "Context7: New MCP AI Agent Update"&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-ls0D-rtET4"&gt;JeredBlu: "Context 7 MCP: Get Documentation Instantly + VS Code Setup"&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PS-2Azb-C3M"&gt;Income Stream Surfers: "Context7: The New MCP Server That Will CHANGE AI Coding"&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qZfENAPMnyo"&gt;AICodeKing: "Context7 + Cline &amp;amp; RooCode: This MCP Server Makes CLINE 100X MORE EFFECTIVE!"&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LqTQi8qexJM"&gt;Sean Kochel: "5 MCP Servers For Vibe Coding Glory (Just Plug-In &amp;amp; Go)"&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⭐ Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#upstash/context7&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=upstash/context7&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📄 License&lt;/h2&gt; 
&lt;p&gt;MIT&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs/node</title>
      <link>https://github.com/nodejs/node</link>
      <description>&lt;p&gt;Node.js JavaScript runtime ✨🐢🚀✨&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js&lt;/h1&gt; 
&lt;p&gt;Node.js is an open-source, cross-platform JavaScript runtime environment.&lt;/p&gt; 
&lt;p&gt;For information on using Node.js, see the &lt;a href="https://nodejs.org/"&gt;Node.js website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Node.js project uses an &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/GOVERNANCE.md"&gt;open governance model&lt;/a&gt;. The &lt;a href="https://openjsf.org/"&gt;OpenJS Foundation&lt;/a&gt; provides support for the project.&lt;/p&gt; 
&lt;p&gt;Contributors are expected to act in a collaborative manner to move the project forward. We encourage the constructive exchange of contrary opinions and compromise. The &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/GOVERNANCE.md#technical-steering-committee"&gt;TSC&lt;/a&gt; reserves the right to limit or block contributors who repeatedly act in ways that discourage, exhaust, or otherwise negatively affect other participants.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This project has a &lt;a href="https://github.com/nodejs/admin/raw/HEAD/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#support"&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#release-types"&gt;Release types&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#download"&gt;Download&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#current-and-lts-releases"&gt;Current and LTS releases&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#nightly-releases"&gt;Nightly releases&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#api-documentation"&gt;API documentation&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#verifying-binaries"&gt;Verifying binaries&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#building-nodejs"&gt;Building Node.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#security"&gt;Security&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#contributing-to-nodejs"&gt;Contributing to Node.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#current-project-team-members"&gt;Current project team members&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#tsc-technical-steering-committee"&gt;TSC (Technical Steering Committee)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#collaborators"&gt;Collaborators&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#triagers"&gt;Triagers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#release-keys"&gt;Release keys&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Looking for help? Check out the &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/.github/SUPPORT.md"&gt;instructions for getting support&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Release types&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Current&lt;/strong&gt;: Under active development. Code for the Current release is in the branch for its major version number (for example, &lt;a href="https://github.com/nodejs/node/tree/v22.x"&gt;v22.x&lt;/a&gt;). Node.js releases a new major version every 6 months, allowing for breaking changes. This happens in April and October every year. Releases appearing each October have a support life of 8 months. Releases appearing each April convert to LTS (see below) each October.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LTS&lt;/strong&gt;: Releases that receive Long Term Support, with a focus on stability and security. Every even-numbered major version will become an LTS release. LTS releases receive 12 months of &lt;em&gt;Active LTS&lt;/em&gt; support and a further 18 months of &lt;em&gt;Maintenance&lt;/em&gt;. LTS release lines have alphabetically-ordered code names, beginning with v4 Argon. There are no breaking changes or feature additions, except in some special circumstances.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nightly&lt;/strong&gt;: Code from the Current branch built every 24-hours when there are changes. Use with caution.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Current and LTS releases follow &lt;a href="https://semver.org"&gt;semantic versioning&lt;/a&gt;. A member of the Release Team &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#release-keys"&gt;signs&lt;/a&gt; each Current and LTS release. For more information, see the &lt;a href="https://github.com/nodejs/Release#readme"&gt;Release README&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Download&lt;/h3&gt; 
&lt;p&gt;Binaries, installers, and source tarballs are available at &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Current and LTS releases&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://nodejs.org/download/release/"&gt;https://nodejs.org/download/release/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://nodejs.org/download/release/latest/"&gt;latest&lt;/a&gt; directory is an alias for the latest Current release. The latest-&lt;em&gt;codename&lt;/em&gt; directory is an alias for the latest release from an LTS line. For example, the &lt;a href="https://nodejs.org/download/release/latest-hydrogen/"&gt;latest-hydrogen&lt;/a&gt; directory contains the latest Hydrogen (Node.js 18) release.&lt;/p&gt; 
&lt;h4&gt;Nightly releases&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://nodejs.org/download/nightly/"&gt;https://nodejs.org/download/nightly/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Each directory and filename includes the version (e.g., &lt;code&gt;v22.0.0&lt;/code&gt;), followed by the UTC date (e.g., &lt;code&gt;20240424&lt;/code&gt; for April 24, 2024), and the short commit SHA of the HEAD of the release (e.g., &lt;code&gt;ddd0a9e494&lt;/code&gt;). For instance, a full directory name might look like &lt;code&gt;v22.0.0-nightly20240424ddd0a9e494&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;API documentation&lt;/h4&gt; 
&lt;p&gt;Documentation for the latest Current release is at &lt;a href="https://nodejs.org/api/"&gt;https://nodejs.org/api/&lt;/a&gt;. Version-specific documentation is available in each release directory in the &lt;em&gt;docs&lt;/em&gt; subdirectory. Version-specific documentation is also at &lt;a href="https://nodejs.org/download/docs/"&gt;https://nodejs.org/download/docs/&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Verifying binaries&lt;/h3&gt; 
&lt;p&gt;Download directories contain a &lt;code&gt;SHASUMS256.txt.asc&lt;/code&gt; file with SHA checksums for the files and the releaser PGP signature.&lt;/p&gt; 
&lt;p&gt;You can get a trusted keyring from nodejs/release-keys, e.g. using &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -fsLo "/path/to/nodejs-keyring.kbx" "https://github.com/nodejs/release-keys/raw/HEAD/gpg/pubring.kbx"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can import the releaser keys in your default keyring, see &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#release-keys"&gt;Release keys&lt;/a&gt; for commands to how to do that.&lt;/p&gt; 
&lt;p&gt;Then, you can verify the files you've downloaded locally (if you're using your default keyring, pass &lt;code&gt;--keyring="${GNUPGHOME:-~/.gnupg}/pubring.kbx"&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -fsO "https://nodejs.org/dist/${VERSION}/SHASUMS256.txt.asc" \
&amp;amp;&amp;amp; gpgv --keyring="/path/to/nodejs-keyring.kbx" --output SHASUMS256.txt &amp;lt; SHASUMS256.txt.asc \
&amp;amp;&amp;amp; shasum --check SHASUMS256.txt --ignore-missing
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building Node.js&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/BUILDING.md"&gt;BUILDING.md&lt;/a&gt; for instructions on how to build Node.js from source and a list of supported platforms.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;For information on reporting security vulnerabilities in Node.js, see &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/SECURITY.md"&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing to Node.js&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/CONTRIBUTING.md"&gt;Contributing to the project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nodejs/TSC/raw/HEAD/WORKING_GROUPS.md"&gt;Working Groups&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/strategic-initiatives.md"&gt;Strategic initiatives&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/technical-values.md"&gt;Technical values and prioritization&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Current project team members&lt;/h2&gt; 
&lt;p&gt;For information about the governance of the Node.js project, see &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/GOVERNANCE.md"&gt;GOVERNANCE.md&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- node-core-utils and find-inactive-tsc.mjs depend on the format of the TSC
     list. If the format changes, those utilities need to be tested and
     updated. --&gt; 
&lt;h3&gt;TSC (Technical Steering Committee)&lt;/h3&gt; 
&lt;h4&gt;TSC voting members&lt;/h4&gt; 
&lt;!--lint disable prohibited-strings--&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aduh95"&gt;aduh95&lt;/a&gt; - &lt;strong&gt;Antoine du Hamel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:duhamelantoine1995@gmail.com"&gt;duhamelantoine1995@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anonrig"&gt;anonrig&lt;/a&gt; - &lt;strong&gt;Yagiz Nizipli&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yagiz@nizipli.com"&gt;yagiz@nizipli.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/benjamingr"&gt;benjamingr&lt;/a&gt; - &lt;strong&gt;Benjamin Gruenbaum&lt;/strong&gt; &amp;lt;&lt;a href="mailto:benjamingr@gmail.com"&gt;benjamingr@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BridgeAR"&gt;BridgeAR&lt;/a&gt; - &lt;strong&gt;Ruben Bridgewater&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruben@bridgewater.de"&gt;ruben@bridgewater.de&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gireeshpunathil"&gt;gireeshpunathil&lt;/a&gt; - &lt;strong&gt;Gireesh Punathil&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gpunathi@in.ibm.com"&gt;gpunathi@in.ibm.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jasnell"&gt;jasnell&lt;/a&gt; - &lt;strong&gt;James M Snell&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jasnell@gmail.com"&gt;jasnell@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/joyeecheung"&gt;joyeecheung&lt;/a&gt; - &lt;strong&gt;Joyee Cheung&lt;/strong&gt; &amp;lt;&lt;a href="mailto:joyeec9h3@gmail.com"&gt;joyeec9h3@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/legendecas"&gt;legendecas&lt;/a&gt; - &lt;strong&gt;Chengzhong Wu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:legendecas@gmail.com"&gt;legendecas@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marco-ippolito"&gt;marco-ippolito&lt;/a&gt; - &lt;strong&gt;Marco Ippolito&lt;/strong&gt; &amp;lt;&lt;a href="mailto:marcoippolito54@gmail.com"&gt;marcoippolito54@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mcollina"&gt;mcollina&lt;/a&gt; - &lt;strong&gt;Matteo Collina&lt;/strong&gt; &amp;lt;&lt;a href="mailto:matteo.collina@gmail.com"&gt;matteo.collina@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/panva"&gt;panva&lt;/a&gt; - &lt;strong&gt;Filip Skokan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:panva.ip@gmail.com"&gt;panva.ip@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RafaelGSS"&gt;RafaelGSS&lt;/a&gt; - &lt;strong&gt;Rafael Gonzaga&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rafael.nunu@hotmail.com"&gt;rafael.nunu@hotmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RaisinTen"&gt;RaisinTen&lt;/a&gt; - &lt;strong&gt;Darshan Sen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:raisinten@gmail.com"&gt;raisinten@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/richardlau"&gt;richardlau&lt;/a&gt; - &lt;strong&gt;Richard Lau&lt;/strong&gt; &amp;lt;&lt;a href="mailto:richard.lau@ibm.com"&gt;richard.lau@ibm.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ronag"&gt;ronag&lt;/a&gt; - &lt;strong&gt;Robert Nagy&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ronagy@icloud.com"&gt;ronagy@icloud.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ruyadorno"&gt;ruyadorno&lt;/a&gt; - &lt;strong&gt;Ruy Adorno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruy@vlt.sh"&gt;ruy@vlt.sh&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ShogunPanda"&gt;ShogunPanda&lt;/a&gt; - &lt;strong&gt;Paolo Insogna&lt;/strong&gt; &amp;lt;&lt;a href="mailto:paolo@cowtech.it"&gt;paolo@cowtech.it&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/targos"&gt;targos&lt;/a&gt; - &lt;strong&gt;Michaël Zasso&lt;/strong&gt; &amp;lt;&lt;a href="mailto:targos@protonmail.com"&gt;targos@protonmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tniessen"&gt;tniessen&lt;/a&gt; - &lt;strong&gt;Tobias Nießen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:tniessen@tnie.de"&gt;tniessen@tnie.de&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;TSC regular members&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BethGriggs"&gt;BethGriggs&lt;/a&gt; - &lt;strong&gt;Beth Griggs&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bethanyngriggs@gmail.com"&gt;bethanyngriggs@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bnoordhuis"&gt;bnoordhuis&lt;/a&gt; - &lt;strong&gt;Ben Noordhuis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:info@bnoordhuis.nl"&gt;info@bnoordhuis.nl&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cjihrig"&gt;cjihrig&lt;/a&gt; - &lt;strong&gt;Colin Ihrig&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cjihrig@gmail.com"&gt;cjihrig@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/codebytere"&gt;codebytere&lt;/a&gt; - &lt;strong&gt;Shelley Vohr&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shelley.vohr@gmail.com"&gt;shelley.vohr@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GeoffreyBooth"&gt;GeoffreyBooth&lt;/a&gt; - &lt;strong&gt;Geoffrey Booth&lt;/strong&gt; &amp;lt;&lt;a href="mailto:webadmin@geoffreybooth.com"&gt;webadmin@geoffreybooth.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MoLow"&gt;MoLow&lt;/a&gt; - &lt;strong&gt;Moshe Atlow&lt;/strong&gt; &amp;lt;&lt;a href="mailto:moshe@atlow.co.il"&gt;moshe@atlow.co.il&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Trott"&gt;Trott&lt;/a&gt; - &lt;strong&gt;Rich Trott&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rtrott@gmail.com"&gt;rtrott@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;TSC emeriti members&lt;/summary&gt; 
 &lt;h4&gt;TSC emeriti members&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://github.com/addaleax"&gt;addaleax&lt;/a&gt; - &lt;strong&gt;Anna Henningsen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:anna@addaleax.net"&gt;anna@addaleax.net&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/apapirovski"&gt;apapirovski&lt;/a&gt; - &lt;strong&gt;Anatoli Papirovski&lt;/strong&gt; &amp;lt;&lt;a href="mailto:apapirovski@mac.com"&gt;apapirovski@mac.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ChALkeR"&gt;ChALkeR&lt;/a&gt; - &lt;strong&gt;Сковорода Никита Андреевич&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chalkerx@gmail.com"&gt;chalkerx@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/chrisdickinson"&gt;chrisdickinson&lt;/a&gt; - &lt;strong&gt;Chris Dickinson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:christopher.s.dickinson@gmail.com"&gt;christopher.s.dickinson@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/danbev"&gt;danbev&lt;/a&gt; - &lt;strong&gt;Daniel Bevenius&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daniel.bevenius@gmail.com"&gt;daniel.bevenius@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/danielleadams"&gt;danielleadams&lt;/a&gt; - &lt;strong&gt;Danielle Adams&lt;/strong&gt; &amp;lt;&lt;a href="mailto:adamzdanielle@gmail.com"&gt;adamzdanielle@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/evanlucas"&gt;evanlucas&lt;/a&gt; - &lt;strong&gt;Evan Lucas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:evanlucas@me.com"&gt;evanlucas@me.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/fhinkel"&gt;fhinkel&lt;/a&gt; - &lt;strong&gt;Franziska Hinkelmann&lt;/strong&gt; &amp;lt;&lt;a href="mailto:franziska.hinkelmann@gmail.com"&gt;franziska.hinkelmann@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Fishrock123"&gt;Fishrock123&lt;/a&gt; - &lt;strong&gt;Jeremiah Senkpiel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fishrock123@rocketmail.com"&gt;fishrock123@rocketmail.com&lt;/a&gt;&amp;gt; (he/they)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/gabrielschulhof"&gt;gabrielschulhof&lt;/a&gt; - &lt;strong&gt;Gabriel Schulhof&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gabrielschulhof@gmail.com"&gt;gabrielschulhof@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/gibfahn"&gt;gibfahn&lt;/a&gt; - &lt;strong&gt;Gibson Fahnestock&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gibfahn@gmail.com"&gt;gibfahn@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/indutny"&gt;indutny&lt;/a&gt; - &lt;strong&gt;Fedor Indutny&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fedor@indutny.com"&gt;fedor@indutny.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/isaacs"&gt;isaacs&lt;/a&gt; - &lt;strong&gt;Isaac Z. Schlueter&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@izs.me"&gt;i@izs.me&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/joshgav"&gt;joshgav&lt;/a&gt; - &lt;strong&gt;Josh Gavant&lt;/strong&gt; &amp;lt;&lt;a href="mailto:josh.gavant@outlook.com"&gt;josh.gavant@outlook.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mhdawson"&gt;mhdawson&lt;/a&gt; - &lt;strong&gt;Michael Dawson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:midawson@redhat.com"&gt;midawson@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mmarchini"&gt;mmarchini&lt;/a&gt; - &lt;strong&gt;Mary Marchini&lt;/strong&gt; &amp;lt;&lt;a href="mailto:oss@mmarchini.me"&gt;oss@mmarchini.me&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mscdex"&gt;mscdex&lt;/a&gt; - &lt;strong&gt;Brian White&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mscdex@mscdex.net"&gt;mscdex@mscdex.net&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/MylesBorins"&gt;MylesBorins&lt;/a&gt; - &lt;strong&gt;Myles Borins&lt;/strong&gt; &amp;lt;&lt;a href="mailto:myles.borins@gmail.com"&gt;myles.borins@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/nebrius"&gt;nebrius&lt;/a&gt; - &lt;strong&gt;Bryan Hughes&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bryan@nebri.us"&gt;bryan@nebri.us&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ofrobots"&gt;ofrobots&lt;/a&gt; - &lt;strong&gt;Ali Ijaz Sheikh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ofrobots@google.com"&gt;ofrobots@google.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/orangemocha"&gt;orangemocha&lt;/a&gt; - &lt;strong&gt;Alexis Campailla&lt;/strong&gt; &amp;lt;&lt;a href="mailto:orangemocha@nodejs.org"&gt;orangemocha@nodejs.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/piscisaureus"&gt;piscisaureus&lt;/a&gt; - &lt;strong&gt;Bert Belder&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bertbelder@gmail.com"&gt;bertbelder@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rvagg"&gt;rvagg&lt;/a&gt; - &lt;strong&gt;Rod Vagg&lt;/strong&gt; &amp;lt;&lt;a href="mailto:r@va.gg"&gt;r@va.gg&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/sam-github"&gt;sam-github&lt;/a&gt; - &lt;strong&gt;Sam Roberts&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vieuxtech@gmail.com"&gt;vieuxtech@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/shigeki"&gt;shigeki&lt;/a&gt; - &lt;strong&gt;Shigeki Ohtsu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ohtsu@ohtsu.org"&gt;ohtsu@ohtsu.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/thefourtheye"&gt;thefourtheye&lt;/a&gt; - &lt;strong&gt;Sakthipriyan Vairamani&lt;/strong&gt; &amp;lt;&lt;a href="mailto:thechargingvolcano@gmail.com"&gt;thechargingvolcano@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/TimothyGu"&gt;TimothyGu&lt;/a&gt; - &lt;strong&gt;Tiancheng "Timothy" Gu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:timothygu99@gmail.com"&gt;timothygu99@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/trevnorris"&gt;trevnorris&lt;/a&gt; - &lt;strong&gt;Trevor Norris&lt;/strong&gt; &amp;lt;&lt;a href="mailto:trev.norris@gmail.com"&gt;trev.norris@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;!-- node-core-utils and find-inactive-collaborators.mjs depend on the format
     of the collaborator list. If the format changes, those utilities need to be
     tested and updated. --&gt; 
&lt;h3&gt;Collaborators&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/abmusse"&gt;abmusse&lt;/a&gt; - &lt;strong&gt;Abdirahim Musse&lt;/strong&gt; &amp;lt;&lt;a href="mailto:abdirahim.musse@ibm.com"&gt;abdirahim.musse@ibm.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/addaleax"&gt;addaleax&lt;/a&gt; - &lt;strong&gt;Anna Henningsen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:anna@addaleax.net"&gt;anna@addaleax.net&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aditi-1400"&gt;Aditi-1400&lt;/a&gt; - &lt;strong&gt;Aditi Singh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:aditisingh1400@gmail.com"&gt;aditisingh1400@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aduh95"&gt;aduh95&lt;/a&gt; - &lt;strong&gt;Antoine du Hamel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:duhamelantoine1995@gmail.com"&gt;duhamelantoine1995@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/aduh95"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anonrig"&gt;anonrig&lt;/a&gt; - &lt;strong&gt;Yagiz Nizipli&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yagiz@nizipli.com"&gt;yagiz@nizipli.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/anonrig"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atlowChemi"&gt;atlowChemi&lt;/a&gt; - &lt;strong&gt;Chemi Atlow&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chemi@atlow.co.il"&gt;chemi@atlow.co.il&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ayase-252"&gt;Ayase-252&lt;/a&gt; - &lt;strong&gt;Qingyu Deng&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@ayase-lab.com"&gt;i@ayase-lab.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bengl"&gt;bengl&lt;/a&gt; - &lt;strong&gt;Bryan English&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bryan@bryanenglish.com"&gt;bryan@bryanenglish.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/benjamingr"&gt;benjamingr&lt;/a&gt; - &lt;strong&gt;Benjamin Gruenbaum&lt;/strong&gt; &amp;lt;&lt;a href="mailto:benjamingr@gmail.com"&gt;benjamingr@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BethGriggs"&gt;BethGriggs&lt;/a&gt; - &lt;strong&gt;Beth Griggs&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bethanyngriggs@gmail.com"&gt;bethanyngriggs@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bnb"&gt;bnb&lt;/a&gt; - &lt;strong&gt;Tierney Cyren&lt;/strong&gt; &amp;lt;&lt;a href="mailto:hello@bnb.im"&gt;hello@bnb.im&lt;/a&gt;&amp;gt; (they/them)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bnoordhuis"&gt;bnoordhuis&lt;/a&gt; - &lt;strong&gt;Ben Noordhuis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:info@bnoordhuis.nl"&gt;info@bnoordhuis.nl&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BridgeAR"&gt;BridgeAR&lt;/a&gt; - &lt;strong&gt;Ruben Bridgewater&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruben@bridgewater.de"&gt;ruben@bridgewater.de&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cclauss"&gt;cclauss&lt;/a&gt; - &lt;strong&gt;Christian Clauss&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cclauss@me.com"&gt;cclauss@me.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cjihrig"&gt;cjihrig&lt;/a&gt; - &lt;strong&gt;Colin Ihrig&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cjihrig@gmail.com"&gt;cjihrig@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/codebytere"&gt;codebytere&lt;/a&gt; - &lt;strong&gt;Shelley Vohr&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shelley.vohr@gmail.com"&gt;shelley.vohr@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cola119"&gt;cola119&lt;/a&gt; - &lt;strong&gt;Kohei Ueno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kohei.ueno119@gmail.com"&gt;kohei.ueno119@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/daeyeon"&gt;daeyeon&lt;/a&gt; - &lt;strong&gt;Daeyeon Jeong&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daeyeon.dev@gmail.com"&gt;daeyeon.dev@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dario-piotrowicz"&gt;dario-piotrowicz&lt;/a&gt; - &lt;strong&gt;Dario Piotrowicz&lt;/strong&gt; &amp;lt;&lt;a href="mailto:dario.piotrowicz@gmail.com"&gt;dario.piotrowicz@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/debadree25"&gt;debadree25&lt;/a&gt; - &lt;strong&gt;Debadree Chatterjee&lt;/strong&gt; &amp;lt;&lt;a href="mailto:debadree333@gmail.com"&gt;debadree333@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deokjinkim"&gt;deokjinkim&lt;/a&gt; - &lt;strong&gt;Deokjin Kim&lt;/strong&gt; &amp;lt;&lt;a href="mailto:deokjin81.kim@gmail.com"&gt;deokjin81.kim@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/edsadr"&gt;edsadr&lt;/a&gt; - &lt;strong&gt;Adrian Estrada&lt;/strong&gt; &amp;lt;&lt;a href="mailto:edsadr@gmail.com"&gt;edsadr@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ErickWendel"&gt;ErickWendel&lt;/a&gt; - &lt;strong&gt;Erick Wendel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:erick.workspace@gmail.com"&gt;erick.workspace@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ethan-Arrowood"&gt;Ethan-Arrowood&lt;/a&gt; - &lt;strong&gt;Ethan Arrowood&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ethan@arrowood.dev"&gt;ethan@arrowood.dev&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fhinkel"&gt;fhinkel&lt;/a&gt; - &lt;strong&gt;Franziska Hinkelmann&lt;/strong&gt; &amp;lt;&lt;a href="mailto:franziska.hinkelmann@gmail.com"&gt;franziska.hinkelmann@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Flarna"&gt;Flarna&lt;/a&gt; - &lt;strong&gt;Gerhard Stöbich&lt;/strong&gt; &amp;lt;&lt;a href="mailto:deb2001-github@yahoo.de"&gt;deb2001-github@yahoo.de&lt;/a&gt;&amp;gt; (he/they)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gabrielschulhof"&gt;gabrielschulhof&lt;/a&gt; - &lt;strong&gt;Gabriel Schulhof&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gabrielschulhof@gmail.com"&gt;gabrielschulhof@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/geeksilva97"&gt;geeksilva97&lt;/a&gt; - &lt;strong&gt;Edy Silva&lt;/strong&gt; &amp;lt;&lt;a href="mailto:edigleyssonsilva@gmail.com"&gt;edigleyssonsilva@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gengjiawen"&gt;gengjiawen&lt;/a&gt; - &lt;strong&gt;Jiawen Geng&lt;/strong&gt; &amp;lt;&lt;a href="mailto:technicalcute@gmail.com"&gt;technicalcute@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GeoffreyBooth"&gt;GeoffreyBooth&lt;/a&gt; - &lt;strong&gt;Geoffrey Booth&lt;/strong&gt; &amp;lt;&lt;a href="mailto:webadmin@geoffreybooth.com"&gt;webadmin@geoffreybooth.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gireeshpunathil"&gt;gireeshpunathil&lt;/a&gt; - &lt;strong&gt;Gireesh Punathil&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gpunathi@in.ibm.com"&gt;gpunathi@in.ibm.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/guybedford"&gt;guybedford&lt;/a&gt; - &lt;strong&gt;Guy Bedford&lt;/strong&gt; &amp;lt;&lt;a href="mailto:guybedford@gmail.com"&gt;guybedford@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/H4ad"&gt;H4ad&lt;/a&gt; - &lt;strong&gt;Vinícius Lourenço Claro Cardoso&lt;/strong&gt; &amp;lt;&lt;a href="mailto:contact@viniciusl.com.br"&gt;contact@viniciusl.com.br&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HarshithaKP"&gt;HarshithaKP&lt;/a&gt; - &lt;strong&gt;Harshitha K P&lt;/strong&gt; &amp;lt;&lt;a href="mailto:harshitha014@gmail.com"&gt;harshitha014@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/himself65"&gt;himself65&lt;/a&gt; - &lt;strong&gt;Zeyu "Alex" Yang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:himself65@outlook.com"&gt;himself65@outlook.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/IlyasShabi"&gt;IlyasShabi&lt;/a&gt; - &lt;strong&gt;Ilyas Shabi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ilyasshabi94@gmail.com"&gt;ilyasshabi94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/islandryu"&gt;islandryu&lt;/a&gt; - &lt;strong&gt;Ryuhei Shima&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shimaryuhei@gmail.com"&gt;shimaryuhei@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jakecastelli"&gt;jakecastelli&lt;/a&gt; - &lt;strong&gt;Jake Yuesong Li&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jake.yuesong@gmail.com"&gt;jake.yuesong@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JakobJingleheimer"&gt;JakobJingleheimer&lt;/a&gt; - &lt;strong&gt;Jacob Smith&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jacob@frende.me"&gt;jacob@frende.me&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jasnell"&gt;jasnell&lt;/a&gt; - &lt;strong&gt;James M Snell&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jasnell@gmail.com"&gt;jasnell@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jazelly"&gt;jazelly&lt;/a&gt; - &lt;strong&gt;Jason Zhang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:xzha4350@gmail.com"&gt;xzha4350@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jkrems"&gt;jkrems&lt;/a&gt; - &lt;strong&gt;Jan Martin&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jan.krems@gmail.com"&gt;jan.krems@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JonasBa"&gt;JonasBa&lt;/a&gt; - &lt;strong&gt;Jonas Badalic&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jonas.badalic@gmail.com"&gt;jonas.badalic@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/joyeecheung"&gt;joyeecheung&lt;/a&gt; - &lt;strong&gt;Joyee Cheung&lt;/strong&gt; &amp;lt;&lt;a href="mailto:joyeec9h3@gmail.com"&gt;joyeec9h3@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/juanarbol"&gt;juanarbol&lt;/a&gt; - &lt;strong&gt;Juan José Arboleda&lt;/strong&gt; &amp;lt;&lt;a href="mailto:soyjuanarbol@gmail.com"&gt;soyjuanarbol@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JungMinu"&gt;JungMinu&lt;/a&gt; - &lt;strong&gt;Minwoo Jung&lt;/strong&gt; &amp;lt;&lt;a href="mailto:nodecorelab@gmail.com"&gt;nodecorelab@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KhafraDev"&gt;KhafraDev&lt;/a&gt; - &lt;strong&gt;Matthew Aitken&lt;/strong&gt; &amp;lt;&lt;a href="mailto:maitken033380023@gmail.com"&gt;maitken033380023@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/legendecas"&gt;legendecas&lt;/a&gt; - &lt;strong&gt;Chengzhong Wu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:legendecas@gmail.com"&gt;legendecas@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lemire"&gt;lemire&lt;/a&gt; - &lt;strong&gt;Daniel Lemire&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daniel@lemire.me"&gt;daniel@lemire.me&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/LiviaMedeiros"&gt;LiviaMedeiros&lt;/a&gt; - &lt;strong&gt;LiviaMedeiros&lt;/strong&gt; &amp;lt;&lt;a href="mailto:livia@cirno.name"&gt;livia@cirno.name&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ljharb"&gt;ljharb&lt;/a&gt; - &lt;strong&gt;Jordan Harband&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ljharb@gmail.com"&gt;ljharb@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lpinca"&gt;lpinca&lt;/a&gt; - &lt;strong&gt;Luigi Pinca&lt;/strong&gt; &amp;lt;&lt;a href="mailto:luigipinca@gmail.com"&gt;luigipinca@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lukekarrys"&gt;lukekarrys&lt;/a&gt; - &lt;strong&gt;Luke Karrys&lt;/strong&gt; &amp;lt;&lt;a href="mailto:luke@lukekarrys.com"&gt;luke@lukekarrys.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Lxxyx"&gt;Lxxyx&lt;/a&gt; - &lt;strong&gt;Zijian Liu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:lxxyxzj@gmail.com"&gt;lxxyxzj@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marco-ippolito"&gt;marco-ippolito&lt;/a&gt; - &lt;strong&gt;Marco Ippolito&lt;/strong&gt; &amp;lt;&lt;a href="mailto:marcoippolito54@gmail.com"&gt;marcoippolito54@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/marco-ippolito"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marsonya"&gt;marsonya&lt;/a&gt; - &lt;strong&gt;Akhil Marsonya&lt;/strong&gt; &amp;lt;&lt;a href="mailto:akhil.marsonya27@gmail.com"&gt;akhil.marsonya27@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MattiasBuelens"&gt;MattiasBuelens&lt;/a&gt; - &lt;strong&gt;Mattias Buelens&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mattias@buelens.com"&gt;mattias@buelens.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mcollina"&gt;mcollina&lt;/a&gt; - &lt;strong&gt;Matteo Collina&lt;/strong&gt; &amp;lt;&lt;a href="mailto:matteo.collina@gmail.com"&gt;matteo.collina@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/mcollina"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meixg"&gt;meixg&lt;/a&gt; - &lt;strong&gt;Xuguang Mei&lt;/strong&gt; &amp;lt;&lt;a href="mailto:meixuguang@gmail.com"&gt;meixuguang@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mhdawson"&gt;mhdawson&lt;/a&gt; - &lt;strong&gt;Michael Dawson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:midawson@redhat.com"&gt;midawson@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MoLow"&gt;MoLow&lt;/a&gt; - &lt;strong&gt;Moshe Atlow&lt;/strong&gt; &amp;lt;&lt;a href="mailto:moshe@atlow.co.il"&gt;moshe@atlow.co.il&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MrJithil"&gt;MrJithil&lt;/a&gt; - &lt;strong&gt;Jithil P Ponnan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jithil@outlook.com"&gt;jithil@outlook.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ovflowd"&gt;ovflowd&lt;/a&gt; - &lt;strong&gt;Claudio Wunder&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cwunder@gnome.org"&gt;cwunder@gnome.org&lt;/a&gt;&amp;gt; (he/they)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/panva"&gt;panva&lt;/a&gt; - &lt;strong&gt;Filip Skokan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:panva.ip@gmail.com"&gt;panva.ip@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/panva"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pimterry"&gt;pimterry&lt;/a&gt; - &lt;strong&gt;Tim Perry&lt;/strong&gt; &amp;lt;&lt;a href="mailto:pimterry@gmail.com"&gt;pimterry@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pmarchini"&gt;pmarchini&lt;/a&gt; - &lt;strong&gt;Pietro Marchini&lt;/strong&gt; &amp;lt;&lt;a href="mailto:pietro.marchini94@gmail.com"&gt;pietro.marchini94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/puskin"&gt;puskin&lt;/a&gt; - &lt;strong&gt;Giovanni Bucci&lt;/strong&gt; &amp;lt;&lt;a href="mailto:github@puskin.it"&gt;github@puskin.it&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Qard"&gt;Qard&lt;/a&gt; - &lt;strong&gt;Stephen Belanger&lt;/strong&gt; &amp;lt;&lt;a href="mailto:admin@stephenbelanger.com"&gt;admin@stephenbelanger.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RafaelGSS"&gt;RafaelGSS&lt;/a&gt; - &lt;strong&gt;Rafael Gonzaga&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rafael.nunu@hotmail.com"&gt;rafael.nunu@hotmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/RafaelGSS"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RaisinTen"&gt;RaisinTen&lt;/a&gt; - &lt;strong&gt;Darshan Sen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:raisinten@gmail.com"&gt;raisinten@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/RaisinTen"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/richardlau"&gt;richardlau&lt;/a&gt; - &lt;strong&gt;Richard Lau&lt;/strong&gt; &amp;lt;&lt;a href="mailto:richard.lau@ibm.com"&gt;richard.lau@ibm.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rluvaton"&gt;rluvaton&lt;/a&gt; - &lt;strong&gt;Raz Luvaton&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rluvaton@gmail.com"&gt;rluvaton@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ronag"&gt;ronag&lt;/a&gt; - &lt;strong&gt;Robert Nagy&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ronagy@icloud.com"&gt;ronagy@icloud.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ruyadorno"&gt;ruyadorno&lt;/a&gt; - &lt;strong&gt;Ruy Adorno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruy@vlt.sh"&gt;ruy@vlt.sh&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/santigimeno"&gt;santigimeno&lt;/a&gt; - &lt;strong&gt;Santiago Gimeno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:santiago.gimeno@gmail.com"&gt;santiago.gimeno@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ShogunPanda"&gt;ShogunPanda&lt;/a&gt; - &lt;strong&gt;Paolo Insogna&lt;/strong&gt; &amp;lt;&lt;a href="mailto:paolo@cowtech.it"&gt;paolo@cowtech.it&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/srl295"&gt;srl295&lt;/a&gt; - &lt;strong&gt;Steven R Loomis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:srl295@gmail.com"&gt;srl295@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StefanStojanovic"&gt;StefanStojanovic&lt;/a&gt; - &lt;strong&gt;Stefan Stojanovic&lt;/strong&gt; &amp;lt;&lt;a href="mailto:stefan.stojanovic@janeasystems.com"&gt;stefan.stojanovic@janeasystems.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sxa"&gt;sxa&lt;/a&gt; - &lt;strong&gt;Stewart X Addison&lt;/strong&gt; &amp;lt;&lt;a href="mailto:sxa@redhat.com"&gt;sxa@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/targos"&gt;targos&lt;/a&gt; - &lt;strong&gt;Michaël Zasso&lt;/strong&gt; &amp;lt;&lt;a href="mailto:targos@protonmail.com"&gt;targos@protonmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/theanarkh"&gt;theanarkh&lt;/a&gt; - &lt;strong&gt;theanarkh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:theratliter@gmail.com"&gt;theratliter@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tniessen"&gt;tniessen&lt;/a&gt; - &lt;strong&gt;Tobias Nießen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:tniessen@tnie.de"&gt;tniessen@tnie.de&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trivikr"&gt;trivikr&lt;/a&gt; - &lt;strong&gt;Trivikram Kamat&lt;/strong&gt; &amp;lt;&lt;a href="mailto:trivikr.dev@gmail.com"&gt;trivikr.dev@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Trott"&gt;Trott&lt;/a&gt; - &lt;strong&gt;Rich Trott&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rtrott@gmail.com"&gt;rtrott@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/UlisesGascon"&gt;UlisesGascon&lt;/a&gt; - &lt;strong&gt;Ulises Gascón&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ulisesgascongonzalez@gmail.com"&gt;ulisesgascongonzalez@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vmoroz"&gt;vmoroz&lt;/a&gt; - &lt;strong&gt;Vladimir Morozov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vmorozov@microsoft.com"&gt;vmorozov@microsoft.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VoltrexKeyva"&gt;VoltrexKeyva&lt;/a&gt; - &lt;strong&gt;Mohammed Keyvanzadeh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mohammadkeyvanzade94@gmail.com"&gt;mohammadkeyvanzade94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zcbenz"&gt;zcbenz&lt;/a&gt; - &lt;strong&gt;Cheng Zhao&lt;/strong&gt; &amp;lt;&lt;a href="mailto:zcbenz@gmail.com"&gt;zcbenz@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ZYSzys"&gt;ZYSzys&lt;/a&gt; - &lt;strong&gt;Yongsheng Zhang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:zyszys98@gmail.com"&gt;zyszys98@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;Emeriti&lt;/summary&gt; 
 &lt;!-- find-inactive-collaborators.mjs depends on the format of the emeriti list.
     If the format changes, those utilities need to be tested and updated. --&gt; 
 &lt;h3&gt;Collaborator emeriti&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ak239"&gt;ak239&lt;/a&gt; - &lt;strong&gt;Aleksei Koziatinskii&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ak239spb@gmail.com"&gt;ak239spb@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/andrasq"&gt;andrasq&lt;/a&gt; - &lt;strong&gt;Andras&lt;/strong&gt; &amp;lt;&lt;a href="mailto:andras@kinvey.com"&gt;andras@kinvey.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/AndreasMadsen"&gt;AndreasMadsen&lt;/a&gt; - &lt;strong&gt;Andreas Madsen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:amwebdk@gmail.com"&gt;amwebdk@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/AnnaMag"&gt;AnnaMag&lt;/a&gt; - &lt;strong&gt;Anna M. Kedzierska&lt;/strong&gt; &amp;lt;&lt;a href="mailto:anna.m.kedzierska@gmail.com"&gt;anna.m.kedzierska@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/antsmartian"&gt;antsmartian&lt;/a&gt; - &lt;strong&gt;Anto Aravinth&lt;/strong&gt; &amp;lt;&lt;a href="mailto:anto.aravinth.cse@gmail.com"&gt;anto.aravinth.cse@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/apapirovski"&gt;apapirovski&lt;/a&gt; - &lt;strong&gt;Anatoli Papirovski&lt;/strong&gt; &amp;lt;&lt;a href="mailto:apapirovski@mac.com"&gt;apapirovski@mac.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/aqrln"&gt;aqrln&lt;/a&gt; - &lt;strong&gt;Alexey Orlenko&lt;/strong&gt; &amp;lt;&lt;a href="mailto:eaglexrlnk@gmail.com"&gt;eaglexrlnk@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/AshCripps"&gt;AshCripps&lt;/a&gt; - &lt;strong&gt;Ash Cripps&lt;/strong&gt; &amp;lt;&lt;a href="mailto:email@ashleycripps.co.uk"&gt;email@ashleycripps.co.uk&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/bcoe"&gt;bcoe&lt;/a&gt; - &lt;strong&gt;Ben Coe&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bencoe@gmail.com"&gt;bencoe@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/bmeck"&gt;bmeck&lt;/a&gt; - &lt;strong&gt;Bradley Farias&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bradley.meck@gmail.com"&gt;bradley.meck@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/bmeurer"&gt;bmeurer&lt;/a&gt; - &lt;strong&gt;Benedikt Meurer&lt;/strong&gt; &amp;lt;&lt;a href="mailto:benedikt.meurer@gmail.com"&gt;benedikt.meurer@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/boneskull"&gt;boneskull&lt;/a&gt; - &lt;strong&gt;Christopher Hiller&lt;/strong&gt; &amp;lt;&lt;a href="mailto:boneskull@boneskull.com"&gt;boneskull@boneskull.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/brendanashworth"&gt;brendanashworth&lt;/a&gt; - &lt;strong&gt;Brendan Ashworth&lt;/strong&gt; &amp;lt;&lt;a href="mailto:brendan.ashworth@me.com"&gt;brendan.ashworth@me.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/bzoz"&gt;bzoz&lt;/a&gt; - &lt;strong&gt;Bartosz Sosnowski&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bartosz@janeasystems.com"&gt;bartosz@janeasystems.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/calvinmetcalf"&gt;calvinmetcalf&lt;/a&gt; - &lt;strong&gt;Calvin Metcalf&lt;/strong&gt; &amp;lt;&lt;a href="mailto:calvin.metcalf@gmail.com"&gt;calvin.metcalf@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ChALkeR"&gt;ChALkeR&lt;/a&gt; - &lt;strong&gt;Сковорода Никита Андреевич&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chalkerx@gmail.com"&gt;chalkerx@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/chrisdickinson"&gt;chrisdickinson&lt;/a&gt; - &lt;strong&gt;Chris Dickinson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:christopher.s.dickinson@gmail.com"&gt;christopher.s.dickinson@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/claudiorodriguez"&gt;claudiorodriguez&lt;/a&gt; - &lt;strong&gt;Claudio Rodriguez&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cjrodr@yahoo.com"&gt;cjrodr@yahoo.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/danbev"&gt;danbev&lt;/a&gt; - &lt;strong&gt;Daniel Bevenius&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daniel.bevenius@gmail.com"&gt;daniel.bevenius@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/danielleadams"&gt;danielleadams&lt;/a&gt; - &lt;strong&gt;Danielle Adams&lt;/strong&gt; &amp;lt;&lt;a href="mailto:adamzdanielle@gmail.com"&gt;adamzdanielle@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/DavidCai1993"&gt;DavidCai1993&lt;/a&gt; - &lt;strong&gt;David Cai&lt;/strong&gt; &amp;lt;&lt;a href="mailto:davidcai1993@yahoo.com"&gt;davidcai1993@yahoo.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/davisjam"&gt;davisjam&lt;/a&gt; - &lt;strong&gt;Jamie Davis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:davisjam@vt.edu"&gt;davisjam@vt.edu&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/devnexen"&gt;devnexen&lt;/a&gt; - &lt;strong&gt;David Carlier&lt;/strong&gt; &amp;lt;&lt;a href="mailto:devnexen@gmail.com"&gt;devnexen@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/devsnek"&gt;devsnek&lt;/a&gt; - &lt;strong&gt;Gus Caplan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@gus.host"&gt;me@gus.host&lt;/a&gt;&amp;gt; (they/them)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/digitalinfinity"&gt;digitalinfinity&lt;/a&gt; - &lt;strong&gt;Hitesh Kanwathirtha&lt;/strong&gt; &amp;lt;&lt;a href="mailto:digitalinfinity@gmail.com"&gt;digitalinfinity@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/dmabupt"&gt;dmabupt&lt;/a&gt; - &lt;strong&gt;Xu Meng&lt;/strong&gt; &amp;lt;&lt;a href="mailto:dmabupt@gmail.com"&gt;dmabupt@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/dnlup"&gt;dnlup&lt;/a&gt; - &lt;strong&gt;dnlup&lt;/strong&gt; &amp;lt;&lt;a href="mailto:dnlup.dev@gmail.com"&gt;dnlup.dev@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/eljefedelrodeodeljefe"&gt;eljefedelrodeodeljefe&lt;/a&gt; - &lt;strong&gt;Robert Jefe Lindstaedt&lt;/strong&gt; &amp;lt;&lt;a href="mailto:robert.lindstaedt@gmail.com"&gt;robert.lindstaedt@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/estliberitas"&gt;estliberitas&lt;/a&gt; - &lt;strong&gt;Alexander Makarenko&lt;/strong&gt; &amp;lt;&lt;a href="mailto:estliberitas@gmail.com"&gt;estliberitas@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/eugeneo"&gt;eugeneo&lt;/a&gt; - &lt;strong&gt;Eugene Ostroukhov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:eostroukhov@google.com"&gt;eostroukhov@google.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/evanlucas"&gt;evanlucas&lt;/a&gt; - &lt;strong&gt;Evan Lucas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:evanlucas@me.com"&gt;evanlucas@me.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/F3n67u"&gt;F3n67u&lt;/a&gt; - &lt;strong&gt;Feng Yu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:F3n67u@outlook.com"&gt;F3n67u@outlook.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/firedfox"&gt;firedfox&lt;/a&gt; - &lt;strong&gt;Daniel Wang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:wangyang0123@gmail.com"&gt;wangyang0123@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Fishrock123"&gt;Fishrock123&lt;/a&gt; - &lt;strong&gt;Jeremiah Senkpiel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fishrock123@rocketmail.com"&gt;fishrock123@rocketmail.com&lt;/a&gt;&amp;gt; (he/they)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/gdams"&gt;gdams&lt;/a&gt; - &lt;strong&gt;George Adams&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gadams@microsoft.com"&gt;gadams@microsoft.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/geek"&gt;geek&lt;/a&gt; - &lt;strong&gt;Wyatt Preul&lt;/strong&gt; &amp;lt;&lt;a href="mailto:wpreul@gmail.com"&gt;wpreul@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/gibfahn"&gt;gibfahn&lt;/a&gt; - &lt;strong&gt;Gibson Fahnestock&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gibfahn@gmail.com"&gt;gibfahn@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/glentiki"&gt;glentiki&lt;/a&gt; - &lt;strong&gt;Glen Keane&lt;/strong&gt; &amp;lt;&lt;a href="mailto:glenkeane.94@gmail.com"&gt;glenkeane.94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/hashseed"&gt;hashseed&lt;/a&gt; - &lt;strong&gt;Yang Guo&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yangguo@chromium.org"&gt;yangguo@chromium.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/hiroppy"&gt;hiroppy&lt;/a&gt; - &lt;strong&gt;Yuta Hiroto&lt;/strong&gt; &amp;lt;&lt;a href="mailto:hello@hiroppy.me"&gt;hello@hiroppy.me&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/iansu"&gt;iansu&lt;/a&gt; - &lt;strong&gt;Ian Sutherland&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ian@iansutherland.ca"&gt;ian@iansutherland.ca&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/iarna"&gt;iarna&lt;/a&gt; - &lt;strong&gt;Rebecca Turner&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@re-becca.org"&gt;me@re-becca.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/imran-iq"&gt;imran-iq&lt;/a&gt; - &lt;strong&gt;Imran Iqbal&lt;/strong&gt; &amp;lt;&lt;a href="mailto:imran@imraniqbal.org"&gt;imran@imraniqbal.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/imyller"&gt;imyller&lt;/a&gt; - &lt;strong&gt;Ilkka Myller&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ilkka.myller@nodefield.com"&gt;ilkka.myller@nodefield.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/indutny"&gt;indutny&lt;/a&gt; - &lt;strong&gt;Fedor Indutny&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fedor@indutny.com"&gt;fedor@indutny.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/isaacs"&gt;isaacs&lt;/a&gt; - &lt;strong&gt;Isaac Z. Schlueter&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@izs.me"&gt;i@izs.me&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/italoacasas"&gt;italoacasas&lt;/a&gt; - &lt;strong&gt;Italo A. Casas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@italoacasas.com"&gt;me@italoacasas.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/JacksonTian"&gt;JacksonTian&lt;/a&gt; - &lt;strong&gt;Jackson Tian&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shyvo1987@gmail.com"&gt;shyvo1987@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jasongin"&gt;jasongin&lt;/a&gt; - &lt;strong&gt;Jason Ginchereau&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jasongin@microsoft.com"&gt;jasongin@microsoft.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jbergstroem"&gt;jbergstroem&lt;/a&gt; - &lt;strong&gt;Johan Bergström&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bugs@bergstroem.nu"&gt;bugs@bergstroem.nu&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jdalton"&gt;jdalton&lt;/a&gt; - &lt;strong&gt;John-David Dalton&lt;/strong&gt; &amp;lt;&lt;a href="mailto:john.david.dalton@gmail.com"&gt;john.david.dalton@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jhamhader"&gt;jhamhader&lt;/a&gt; - &lt;strong&gt;Yuval Brik&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yuval@brik.org.il"&gt;yuval@brik.org.il&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/joaocgreis"&gt;joaocgreis&lt;/a&gt; - &lt;strong&gt;João Reis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:reis@janeasystems.com"&gt;reis@janeasystems.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/joesepi"&gt;joesepi&lt;/a&gt; - &lt;strong&gt;Joe Sepi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:sepi@joesepi.com"&gt;sepi@joesepi.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/joshgav"&gt;joshgav&lt;/a&gt; - &lt;strong&gt;Josh Gavant&lt;/strong&gt; &amp;lt;&lt;a href="mailto:josh.gavant@outlook.com"&gt;josh.gavant@outlook.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/julianduque"&gt;julianduque&lt;/a&gt; - &lt;strong&gt;Julian Duque&lt;/strong&gt; &amp;lt;&lt;a href="mailto:julianduquej@gmail.com"&gt;julianduquej@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/kfarnung"&gt;kfarnung&lt;/a&gt; - &lt;strong&gt;Kyle Farnung&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kfarnung@microsoft.com"&gt;kfarnung@microsoft.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/kunalspathak"&gt;kunalspathak&lt;/a&gt; - &lt;strong&gt;Kunal Pathak&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kunal.pathak@microsoft.com"&gt;kunal.pathak@microsoft.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/kuriyosh"&gt;kuriyosh&lt;/a&gt; - &lt;strong&gt;Yoshiki Kurihara&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yosyos0306@gmail.com"&gt;yosyos0306@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/kvakil"&gt;kvakil&lt;/a&gt; - &lt;strong&gt;Keyhan Vakil&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kvakil@sylph.kvakil.me"&gt;kvakil@sylph.kvakil.me&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/lance"&gt;lance&lt;/a&gt; - &lt;strong&gt;Lance Ball&lt;/strong&gt; &amp;lt;&lt;a href="mailto:lball@redhat.com"&gt;lball@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Leko"&gt;Leko&lt;/a&gt; - &lt;strong&gt;Shingo Inoue&lt;/strong&gt; &amp;lt;&lt;a href="mailto:leko.noor@gmail.com"&gt;leko.noor@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Linkgoron"&gt;Linkgoron&lt;/a&gt; - &lt;strong&gt;Nitzan Uziely&lt;/strong&gt; &amp;lt;&lt;a href="mailto:linkgoron@gmail.com"&gt;linkgoron@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/lucamaraschi"&gt;lucamaraschi&lt;/a&gt; - &lt;strong&gt;Luca Maraschi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:luca.maraschi@gmail.com"&gt;luca.maraschi@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/lundibundi"&gt;lundibundi&lt;/a&gt; - &lt;strong&gt;Denys Otrishko&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shishugi@gmail.com"&gt;shishugi@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/lxe"&gt;lxe&lt;/a&gt; - &lt;strong&gt;Aleksey Smolenchuk&lt;/strong&gt; &amp;lt;&lt;a href="mailto:lxe@lxe.co"&gt;lxe@lxe.co&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/maclover7"&gt;maclover7&lt;/a&gt; - &lt;strong&gt;Jon Moss&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@jonathanmoss.me"&gt;me@jonathanmoss.me&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mafintosh"&gt;mafintosh&lt;/a&gt; - &lt;strong&gt;Mathias Buus&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mathiasbuus@gmail.com"&gt;mathiasbuus@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/matthewloring"&gt;matthewloring&lt;/a&gt; - &lt;strong&gt;Matthew Loring&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mattloring@google.com"&gt;mattloring@google.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Mesteery"&gt;Mesteery&lt;/a&gt; - &lt;strong&gt;Mestery&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mestery@protonmail.com"&gt;mestery@protonmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/micnic"&gt;micnic&lt;/a&gt; - &lt;strong&gt;Nicu Micleușanu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:micnic90@gmail.com"&gt;micnic90@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mikeal"&gt;mikeal&lt;/a&gt; - &lt;strong&gt;Mikeal Rogers&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mikeal.rogers@gmail.com"&gt;mikeal.rogers@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/miladfarca"&gt;miladfarca&lt;/a&gt; - &lt;strong&gt;Milad Fa&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mfarazma@redhat.com"&gt;mfarazma@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mildsunrise"&gt;mildsunrise&lt;/a&gt; - &lt;strong&gt;Alba Mendez&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@alba.sh"&gt;me@alba.sh&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/misterdjules"&gt;misterdjules&lt;/a&gt; - &lt;strong&gt;Julien Gilli&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jgilli@netflix.com"&gt;jgilli@netflix.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mmarchini"&gt;mmarchini&lt;/a&gt; - &lt;strong&gt;Mary Marchini&lt;/strong&gt; &amp;lt;&lt;a href="mailto:oss@mmarchini.me"&gt;oss@mmarchini.me&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/monsanto"&gt;monsanto&lt;/a&gt; - &lt;strong&gt;Christopher Monsanto&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chris@monsan.to"&gt;chris@monsan.to&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/MoonBall"&gt;MoonBall&lt;/a&gt; - &lt;strong&gt;Chen Gang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gangc.cxy@foxmail.com"&gt;gangc.cxy@foxmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mscdex"&gt;mscdex&lt;/a&gt; - &lt;strong&gt;Brian White&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mscdex@mscdex.net"&gt;mscdex@mscdex.net&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/MylesBorins"&gt;MylesBorins&lt;/a&gt; - &lt;strong&gt;Myles Borins&lt;/strong&gt; &amp;lt;&lt;a href="mailto:myles.borins@gmail.com"&gt;myles.borins@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/not-an-aardvark"&gt;not-an-aardvark&lt;/a&gt; - &lt;strong&gt;Teddy Katz&lt;/strong&gt; &amp;lt;&lt;a href="mailto:teddy.katz@gmail.com"&gt;teddy.katz@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ofrobots"&gt;ofrobots&lt;/a&gt; - &lt;strong&gt;Ali Ijaz Sheikh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ofrobots@google.com"&gt;ofrobots@google.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Olegas"&gt;Olegas&lt;/a&gt; - &lt;strong&gt;Oleg Elifantiev&lt;/strong&gt; &amp;lt;&lt;a href="mailto:oleg@elifantiev.ru"&gt;oleg@elifantiev.ru&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/orangemocha"&gt;orangemocha&lt;/a&gt; - &lt;strong&gt;Alexis Campailla&lt;/strong&gt; &amp;lt;&lt;a href="mailto:orangemocha@nodejs.org"&gt;orangemocha@nodejs.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/othiym23"&gt;othiym23&lt;/a&gt; - &lt;strong&gt;Forrest L Norvell&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ogd@aoaioxxysz.net"&gt;ogd@aoaioxxysz.net&lt;/a&gt;&amp;gt; (they/them/themself)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/oyyd"&gt;oyyd&lt;/a&gt; - &lt;strong&gt;Ouyang Yadong&lt;/strong&gt; &amp;lt;&lt;a href="mailto:oyydoibh@gmail.com"&gt;oyydoibh@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/petkaantonov"&gt;petkaantonov&lt;/a&gt; - &lt;strong&gt;Petka Antonov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:petka_antonov@hotmail.com"&gt;petka_antonov@hotmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/phillipj"&gt;phillipj&lt;/a&gt; - &lt;strong&gt;Phillip Johnsen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:johphi@gmail.com"&gt;johphi@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/piscisaureus"&gt;piscisaureus&lt;/a&gt; - &lt;strong&gt;Bert Belder&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bertbelder@gmail.com"&gt;bertbelder@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/pmq20"&gt;pmq20&lt;/a&gt; - &lt;strong&gt;Minqi Pan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:pmq2001@gmail.com"&gt;pmq2001@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/PoojaDurgad"&gt;PoojaDurgad&lt;/a&gt; - &lt;strong&gt;Pooja D P&lt;/strong&gt; &amp;lt;&lt;a href="mailto:Pooja.D.P@ibm.com"&gt;Pooja.D.P@ibm.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/princejwesley"&gt;princejwesley&lt;/a&gt; - &lt;strong&gt;Prince John Wesley&lt;/strong&gt; &amp;lt;&lt;a href="mailto:princejohnwesley@gmail.com"&gt;princejohnwesley@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/psmarshall"&gt;psmarshall&lt;/a&gt; - &lt;strong&gt;Peter Marshall&lt;/strong&gt; &amp;lt;&lt;a href="mailto:petermarshall@chromium.org"&gt;petermarshall@chromium.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/puzpuzpuz"&gt;puzpuzpuz&lt;/a&gt; - &lt;strong&gt;Andrey Pechkurov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:apechkurov@gmail.com"&gt;apechkurov@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/refack"&gt;refack&lt;/a&gt; - &lt;strong&gt;Refael Ackermann (רפאל פלחי)&lt;/strong&gt; &amp;lt;&lt;a href="mailto:refack@gmail.com"&gt;refack@gmail.com&lt;/a&gt;&amp;gt; (he/him/הוא/אתה)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rexagod"&gt;rexagod&lt;/a&gt; - &lt;strong&gt;Pranshu Srivastava&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rexagod@gmail.com"&gt;rexagod@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rickyes"&gt;rickyes&lt;/a&gt; - &lt;strong&gt;Ricky Zhou&lt;/strong&gt; &amp;lt;&lt;a href="mailto:0x19951125@gmail.com"&gt;0x19951125@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rlidwka"&gt;rlidwka&lt;/a&gt; - &lt;strong&gt;Alex Kocharin&lt;/strong&gt; &amp;lt;&lt;a href="mailto:alex@kocharin.ru"&gt;alex@kocharin.ru&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rmg"&gt;rmg&lt;/a&gt; - &lt;strong&gt;Ryan Graham&lt;/strong&gt; &amp;lt;&lt;a href="mailto:r.m.graham@gmail.com"&gt;r.m.graham@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/robertkowalski"&gt;robertkowalski&lt;/a&gt; - &lt;strong&gt;Robert Kowalski&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rok@kowalski.gd"&gt;rok@kowalski.gd&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/romankl"&gt;romankl&lt;/a&gt; - &lt;strong&gt;Roman Klauke&lt;/strong&gt; &amp;lt;&lt;a href="mailto:romaaan.git@gmail.com"&gt;romaaan.git@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ronkorving"&gt;ronkorving&lt;/a&gt; - &lt;strong&gt;Ron Korving&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ron@ronkorving.nl"&gt;ron@ronkorving.nl&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/RReverser"&gt;RReverser&lt;/a&gt; - &lt;strong&gt;Ingvar Stepanyan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@rreverser.com"&gt;me@rreverser.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rubys"&gt;rubys&lt;/a&gt; - &lt;strong&gt;Sam Ruby&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rubys@intertwingly.net"&gt;rubys@intertwingly.net&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rvagg"&gt;rvagg&lt;/a&gt; - &lt;strong&gt;Rod Vagg&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rod@vagg.org"&gt;rod@vagg.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ryzokuken"&gt;ryzokuken&lt;/a&gt; - &lt;strong&gt;Ujjwal Sharma&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ryzokuken@disroot.org"&gt;ryzokuken@disroot.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/saghul"&gt;saghul&lt;/a&gt; - &lt;strong&gt;Saúl Ibarra Corretgé&lt;/strong&gt; &amp;lt;&lt;a href="mailto:s@saghul.net"&gt;s@saghul.net&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/sam-github"&gt;sam-github&lt;/a&gt; - &lt;strong&gt;Sam Roberts&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vieuxtech@gmail.com"&gt;vieuxtech@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/sebdeckers"&gt;sebdeckers&lt;/a&gt; - &lt;strong&gt;Sebastiaan Deckers&lt;/strong&gt; &amp;lt;&lt;a href="mailto:sebdeckers83@gmail.com"&gt;sebdeckers83@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/seishun"&gt;seishun&lt;/a&gt; - &lt;strong&gt;Nikolai Vavilov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vvnicholas@gmail.com"&gt;vvnicholas@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/shigeki"&gt;shigeki&lt;/a&gt; - &lt;strong&gt;Shigeki Ohtsu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ohtsu@ohtsu.org"&gt;ohtsu@ohtsu.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/shisama"&gt;shisama&lt;/a&gt; - &lt;strong&gt;Masashi Hirano&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shisama07@gmail.com"&gt;shisama07@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/silverwind"&gt;silverwind&lt;/a&gt; - &lt;strong&gt;Roman Reiss&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@silverwind.io"&gt;me@silverwind.io&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/starkwang"&gt;starkwang&lt;/a&gt; - &lt;strong&gt;Weijia Wang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:starkwang@126.com"&gt;starkwang@126.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/stefanmb"&gt;stefanmb&lt;/a&gt; - &lt;strong&gt;Stefan Budeanu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:stefan@budeanu.com"&gt;stefan@budeanu.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/tellnes"&gt;tellnes&lt;/a&gt; - &lt;strong&gt;Christian Tellnes&lt;/strong&gt; &amp;lt;&lt;a href="mailto:christian@tellnes.no"&gt;christian@tellnes.no&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/thefourtheye"&gt;thefourtheye&lt;/a&gt; - &lt;strong&gt;Sakthipriyan Vairamani&lt;/strong&gt; &amp;lt;&lt;a href="mailto:thechargingvolcano@gmail.com"&gt;thechargingvolcano@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/thlorenz"&gt;thlorenz&lt;/a&gt; - &lt;strong&gt;Thorsten Lorenz&lt;/strong&gt; &amp;lt;&lt;a href="mailto:thlorenz@gmx.de"&gt;thlorenz@gmx.de&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/TimothyGu"&gt;TimothyGu&lt;/a&gt; - &lt;strong&gt;Tiancheng "Timothy" Gu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:timothygu99@gmail.com"&gt;timothygu99@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/trevnorris"&gt;trevnorris&lt;/a&gt; - &lt;strong&gt;Trevor Norris&lt;/strong&gt; &amp;lt;&lt;a href="mailto:trev.norris@gmail.com"&gt;trev.norris@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/tunniclm"&gt;tunniclm&lt;/a&gt; - &lt;strong&gt;Mike Tunnicliffe&lt;/strong&gt; &amp;lt;&lt;a href="mailto:m.j.tunnicliffe@gmail.com"&gt;m.j.tunnicliffe@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/vdeturckheim"&gt;vdeturckheim&lt;/a&gt; - &lt;strong&gt;Vladimir de Turckheim&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vlad2t@hotmail.com"&gt;vlad2t@hotmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/vkurchatkin"&gt;vkurchatkin&lt;/a&gt; - &lt;strong&gt;Vladimir Kurchatkin&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vladimir.kurchatkin@gmail.com"&gt;vladimir.kurchatkin@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/vsemozhetbyt"&gt;vsemozhetbyt&lt;/a&gt; - &lt;strong&gt;Vse Mozhet Byt&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vsemozhetbyt@gmail.com"&gt;vsemozhetbyt@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/watilde"&gt;watilde&lt;/a&gt; - &lt;strong&gt;Daijiro Wachi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daijiro.wachi@gmail.com"&gt;daijiro.wachi@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/watson"&gt;watson&lt;/a&gt; - &lt;strong&gt;Thomas Watson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:w@tson.dk"&gt;w@tson.dk&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/whitlockjc"&gt;whitlockjc&lt;/a&gt; - &lt;strong&gt;Jeremy Whitlock&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jwhitlock@apache.org"&gt;jwhitlock@apache.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/XadillaX"&gt;XadillaX&lt;/a&gt; - &lt;strong&gt;Khaidi Chu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@2333.moe"&gt;i@2333.moe&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/yashLadha"&gt;yashLadha&lt;/a&gt; - &lt;strong&gt;Yash Ladha&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yash@yashladha.in"&gt;yash@yashladha.in&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/yhwang"&gt;yhwang&lt;/a&gt; - &lt;strong&gt;Yihong Wang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yh.wang@ibm.com"&gt;yh.wang@ibm.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/yorkie"&gt;yorkie&lt;/a&gt; - &lt;strong&gt;Yorkie Liu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yorkiefixer@gmail.com"&gt;yorkiefixer@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/yosuke-furukawa"&gt;yosuke-furukawa&lt;/a&gt; - &lt;strong&gt;Yosuke Furukawa&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yosuke.furukawa@gmail.com"&gt;yosuke.furukawa@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;!--lint enable prohibited-strings--&gt; 
&lt;p&gt;Collaborators follow the &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/collaborator-guide.md"&gt;Collaborator Guide&lt;/a&gt; in maintaining the Node.js project.&lt;/p&gt; 
&lt;h3&gt;Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1ilsang"&gt;1ilsang&lt;/a&gt; - &lt;strong&gt;Sangchul Lee&lt;/strong&gt; &amp;lt;&lt;a href="mailto:1ilsang.dev@gmail.com"&gt;1ilsang.dev@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atlowChemi"&gt;atlowChemi&lt;/a&gt; - &lt;strong&gt;Chemi Atlow&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chemi@atlow.co.il"&gt;chemi@atlow.co.il&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ayase-252"&gt;Ayase-252&lt;/a&gt; - &lt;strong&gt;Qingyu Deng&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@ayase-lab.com"&gt;i@ayase-lab.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bjohansebas"&gt;bjohansebas&lt;/a&gt; - &lt;strong&gt;Sebastian Beltran&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bjohansebas@gmail.com"&gt;bjohansebas@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bmuenzenmeyer"&gt;bmuenzenmeyer&lt;/a&gt; - &lt;strong&gt;Brian Muenzenmeyer&lt;/strong&gt; &amp;lt;&lt;a href="mailto:brian.muenzenmeyer@gmail.com"&gt;brian.muenzenmeyer@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CanadaHonk"&gt;CanadaHonk&lt;/a&gt; - &lt;strong&gt;Oliver Medhurst&lt;/strong&gt; &amp;lt;&lt;a href="mailto:honk@goose.icu"&gt;honk@goose.icu&lt;/a&gt;&amp;gt; (they/them)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/daeyeon"&gt;daeyeon&lt;/a&gt; - &lt;strong&gt;Daeyeon Jeong&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daeyeon.dev@gmail.com"&gt;daeyeon.dev@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gireeshpunathil"&gt;gireeshpunathil&lt;/a&gt; - &lt;strong&gt;Gireesh Punathil&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gpunathi@in.ibm.com"&gt;gpunathi@in.ibm.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gurgunday"&gt;gurgunday&lt;/a&gt; - &lt;strong&gt;Gürgün Dayıoğlu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:hey@gurgun.day"&gt;hey@gurgun.day&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HBSPS"&gt;HBSPS&lt;/a&gt; - &lt;strong&gt;Wiyeong Seo&lt;/strong&gt; &amp;lt;&lt;a href="mailto:hbsps.dev@gmail.com"&gt;hbsps.dev@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iam-frankqiu"&gt;iam-frankqiu&lt;/a&gt; - &lt;strong&gt;Frank Qiu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:iam.frankqiu@gmail.com"&gt;iam.frankqiu@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KevinEady"&gt;KevinEady&lt;/a&gt; - &lt;strong&gt;Kevin Eady&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kevin.c.eady@gmail.com"&gt;kevin.c.eady@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marsonya"&gt;marsonya&lt;/a&gt; - &lt;strong&gt;Akhil Marsonya&lt;/strong&gt; &amp;lt;&lt;a href="mailto:akhil.marsonya27@gmail.com"&gt;akhil.marsonya27@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meixg"&gt;meixg&lt;/a&gt; - &lt;strong&gt;Xuguang Mei&lt;/strong&gt; &amp;lt;&lt;a href="mailto:meixuguang@gmail.com"&gt;meixuguang@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/milesguicent"&gt;milesguicent&lt;/a&gt; - &lt;strong&gt;Miles Guicent&lt;/strong&gt; &amp;lt;&lt;a href="mailto:guicent@pm.me"&gt;guicent@pm.me&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/preveen-stack"&gt;preveen-stack&lt;/a&gt; - &lt;strong&gt;Preveen Padmanabhan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:wide4head@gmail.com"&gt;wide4head@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RaisinTen"&gt;RaisinTen&lt;/a&gt; - &lt;strong&gt;Darshan Sen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:raisinten@gmail.com"&gt;raisinten@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VoltrexKeyva"&gt;VoltrexKeyva&lt;/a&gt; - &lt;strong&gt;Mohammed Keyvanzadeh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mohammadkeyvanzade94@gmail.com"&gt;mohammadkeyvanzade94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Triagers follow the &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/issues.md#triaging-a-bug-report"&gt;Triage Guide&lt;/a&gt; when responding to new issues.&lt;/p&gt; 
&lt;h3&gt;Release keys&lt;/h3&gt; 
&lt;p&gt;Primary GPG keys for Node.js Releasers (some Releasers sign with subkeys):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Antoine du Hamel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:duhamelantoine1995@gmail.com"&gt;duhamelantoine1995@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;5BE8A3F6C8A5C01D106C0AD820B1A390B168D356&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Juan José Arboleda&lt;/strong&gt; &amp;lt;&lt;a href="mailto:soyjuanarbol@gmail.com"&gt;soyjuanarbol@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Marco Ippolito&lt;/strong&gt; &amp;lt;&lt;a href="mailto:marcoippolito54@gmail.com"&gt;marcoippolito54@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;CC68F5A3106FF448322E48ED27F5E38D5B0A215F&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Michaël Zasso&lt;/strong&gt; &amp;lt;&lt;a href="mailto:targos@protonmail.com"&gt;targos@protonmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rafael Gonzaga&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rafael.nunu@hotmail.com"&gt;rafael.nunu@hotmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Richard Lau&lt;/strong&gt; &amp;lt;&lt;a href="mailto:richard.lau@ibm.com"&gt;richard.lau@ibm.com&lt;/a&gt;&amp;gt; &lt;code&gt;C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ruy Adorno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruyadorno@hotmail.com"&gt;ruyadorno@hotmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;108F52B48DB57BB0CC439B2997B01419BD92F80A&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ulises Gascón&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ulisesgascongonzalez@gmail.com"&gt;ulisesgascongonzalez@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;A363A499291CBBC940DD62E41F10027AF002F8B0&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use the keyring the project maintains at &lt;a href="https://github.com/nodejs/release-keys/raw/refs/heads/main/gpg-only-active-keys/pubring.kbx"&gt;https://github.com/nodejs/release-keys/raw/refs/heads/main/gpg-only-active-keys/pubring.kbx&lt;/a&gt;. Alternatively, you can import them from a public key server. Have in mind that the project cannot guarantee the availability of the server nor the keys on that server.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gpg --keyserver hkps://keys.openpgp.org --recv-keys 5BE8A3F6C8A5C01D106C0AD820B1A390B168D356 # Antoine du Hamel
gpg --keyserver hkps://keys.openpgp.org --recv-keys DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7 # Juan José Arboleda
gpg --keyserver hkps://keys.openpgp.org --recv-keys CC68F5A3106FF448322E48ED27F5E38D5B0A215F # Marco Ippolito
gpg --keyserver hkps://keys.openpgp.org --recv-keys 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 # Michaël Zasso
gpg --keyserver hkps://keys.openpgp.org --recv-keys 890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 # Rafael Gonzaga
gpg --keyserver hkps://keys.openpgp.org --recv-keys C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C # Richard Lau
gpg --keyserver hkps://keys.openpgp.org --recv-keys 108F52B48DB57BB0CC439B2997B01419BD92F80A # Ruy Adorno
gpg --keyserver hkps://keys.openpgp.org --recv-keys A363A499291CBBC940DD62E41F10027AF002F8B0 # Ulises Gascón
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#verifying-binaries"&gt;Verifying binaries&lt;/a&gt; for how to use these keys to verify a downloaded file.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Other keys used to sign some previous releases&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Antoine du Hamel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:duhamelantoine1995@gmail.com"&gt;duhamelantoine1995@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;C0D6248439F1D5604AAFFB4021D900FFDB233756&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Beth Griggs&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bethanyngriggs@gmail.com"&gt;bethanyngriggs@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;4ED778F539E3634C779C87C6D7062848A1AB005C&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Bryan English&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bryan@bryanenglish.com"&gt;bryan@bryanenglish.com&lt;/a&gt;&amp;gt; &lt;code&gt;141F07595B7B3FFE74309A937405533BE57C7D57&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Chris Dickinson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:christopher.s.dickinson@gmail.com"&gt;christopher.s.dickinson@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;9554F04D7259F04124DE6B476D5A82AC7E37093B&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Colin Ihrig&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cjihrig@gmail.com"&gt;cjihrig@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;94AE36675C464D64BAFA68DD7434390BDBE9B9C5&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Danielle Adams&lt;/strong&gt; &amp;lt;&lt;a href="mailto:adamzdanielle@gmail.com"&gt;adamzdanielle@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;1C050899334244A8AF75E53792EF661D867B9DFA&lt;/code&gt; &lt;code&gt;74F12602B6F1C4E913FAA37AD3A89613643B6201&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Evan Lucas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:evanlucas@me.com"&gt;evanlucas@me.com&lt;/a&gt;&amp;gt; &lt;code&gt;B9AE9905FFD7803F25714661B63B535A4C206CA9&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Gibson Fahnestock&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gibfahn@gmail.com"&gt;gibfahn@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;77984A986EBC2AA786BC0F66B01FBB92821C587A&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Isaac Z. Schlueter&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@izs.me"&gt;i@izs.me&lt;/a&gt;&amp;gt; &lt;code&gt;93C7E9E91B49E432C2F75674B0A78B0A6C481CF6&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Italo A. Casas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@italoacasas.com"&gt;me@italoacasas.com&lt;/a&gt;&amp;gt; &lt;code&gt;56730D5401028683275BD23C23EFEFE93C4CFFFE&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;James M Snell&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jasnell@keybase.io"&gt;jasnell@keybase.io&lt;/a&gt;&amp;gt; &lt;code&gt;71DCFD284A79C3B38668286BC97EC7A07EDE3FC1&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Jeremiah Senkpiel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fishrock@keybase.io"&gt;fishrock@keybase.io&lt;/a&gt;&amp;gt; &lt;code&gt;FD3A5288F042B6850C66B31F09FE44734EB7990E&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Juan José Arboleda&lt;/strong&gt; &amp;lt;&lt;a href="mailto:soyjuanarbol@gmail.com"&gt;soyjuanarbol@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;61FC681DFB92A079F1685E77973F295594EC4689&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Julien Gilli&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jgilli@fastmail.fm"&gt;jgilli@fastmail.fm&lt;/a&gt;&amp;gt; &lt;code&gt;114F43EE0176B71C7BC219DD50A3051F888C628D&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Myles Borins&lt;/strong&gt; &amp;lt;&lt;a href="mailto:myles.borins@gmail.com"&gt;myles.borins@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Rod Vagg&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rod@vagg.org"&gt;rod@vagg.org&lt;/a&gt;&amp;gt; &lt;code&gt;DD8F2338BAE7501E3DD5AC78C273792F7D83545D&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Ruben Bridgewater&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruben@bridgewater.de"&gt;ruben@bridgewater.de&lt;/a&gt;&amp;gt; &lt;code&gt;A48C2BEE680E841632CD4E44F07496B3EB3C1762&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Shelley Vohr&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shelley.vohr@gmail.com"&gt;shelley.vohr@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;B9E2F5981AA6E0CD28160D9FF13993A75599653C&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Timothy J Fontaine&lt;/strong&gt; &amp;lt;&lt;a href="mailto:tjfontaine@gmail.com"&gt;tjfontaine@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;7937DFD2AB06298B2293C3187D33FF9D0246406D&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;The project maintains a keyring able to verify all past releases of Node.js at &lt;a href="https://github.com/nodejs/release-keys/raw/refs/heads/main/gpg/pubring.kbx"&gt;https://github.com/nodejs/release-keys/raw/refs/heads/main/gpg/pubring.kbx&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Security release stewards&lt;/h3&gt; 
&lt;p&gt;When possible, the commitment to take slots in the security release steward rotation is made by companies in order to ensure individuals who act as security stewards have the support and recognition from their employer to be able to prioritize security releases. Security release stewards manage security releases on a rotation basis as outlined in the &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/security-release-process.md"&gt;security release process&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.datadoghq.com/"&gt;Datadog&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bengl"&gt;bengl&lt;/a&gt; - &lt;strong&gt;Bryan English&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bryan@bryanenglish.com"&gt;bryan@bryanenglish.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.herodevs.com/"&gt;HeroDevs&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/marco-ippolito"&gt;marco-ippolito&lt;/a&gt; - &lt;strong&gt;Marco Ippolito&lt;/strong&gt; &amp;lt;&lt;a href="mailto:marcoippolito54@gmail.com"&gt;marcoippolito54@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nodesource.com/"&gt;NodeSource&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/juanarbol"&gt;juanarbol&lt;/a&gt; - &lt;strong&gt;Juan José Arboleda&lt;/strong&gt; &amp;lt;&lt;a href="mailto:soyjuanarbol@gmail.com"&gt;soyjuanarbol@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RafaelGSS"&gt;RafaelGSS&lt;/a&gt; - &lt;strong&gt;Rafael Gonzaga&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rafael.nunu@hotmail.com"&gt;rafael.nunu@hotmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://platformatic.dev/"&gt;Platformatic&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mcollina"&gt;mcollina&lt;/a&gt; - &lt;strong&gt;Matteo Collina&lt;/strong&gt; &amp;lt;&lt;a href="mailto:matteo.collina@gmail.com"&gt;matteo.collina@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redhat.com"&gt;Red Hat&lt;/a&gt; / &lt;a href="https://ibm.com"&gt;IBM&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/joesepi"&gt;joesepi&lt;/a&gt; - &lt;strong&gt;Joe Sepi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:joesepi@ibm.com"&gt;joesepi@ibm.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mhdawson"&gt;mhdawson&lt;/a&gt; - &lt;strong&gt;Michael Dawson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:midawson@redhat.com"&gt;midawson@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Node.js is available under the &lt;a href="https://opensource.org/licenses/MIT"&gt;MIT License&lt;/a&gt;. Node.js also includes external libraries that are available under a variety of licenses. See &lt;a href="https://github.com/nodejs/node/raw/HEAD/LICENSE"&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wangwangit/SubsTracker</title>
      <link>https://github.com/wangwangit/SubsTracker</link>
      <description>&lt;p&gt;基于Cloudflare Workers的轻量级订阅管理系统，帮助您轻松跟踪各类订阅服务的到期时间，并通过Telegram发送及时提醒。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SubsTracker - 订阅管理与提醒系统&lt;/h1&gt; 
&lt;p&gt;基于Cloudflare Workers的轻量级订阅管理系统，帮助您轻松跟踪各类订阅服务的到期时间，并通过 Telegram、Webhook 等多渠道发送及时提醒。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/22ff1592-7836-4f73-aa13-24e9d43d7064" alt="image" /&gt;&lt;/p&gt; 
&lt;h2&gt;✨ 功能特色&lt;/h2&gt; 
&lt;h3&gt;🎯 核心功能&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;订阅管理&lt;/strong&gt;：添加、编辑、删除各类订阅服务&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;智能提醒&lt;/strong&gt;：自定义提前提醒天数，自动续订计算&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;农历显示&lt;/strong&gt;：支持农历日期显示，可控制开关&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;状态管理&lt;/strong&gt;：订阅启用/停用，过期状态自动识别&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📱 多渠道通知&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Telegram&lt;/strong&gt;：支持 Telegram Bot 通知&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;NotifyX&lt;/strong&gt;：集成 NotifyX 推送服务&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Webhook 通知&lt;/strong&gt;：支持自定义 Webhook 推送&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;企业微信机器人&lt;/strong&gt;：支持企业微信群机器人通知&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;邮件通知&lt;/strong&gt;：基于 Resend 的专业邮件服务&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bark&lt;/strong&gt;：支持 iOS Bark 推送&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自定义 Webhook&lt;/strong&gt;：支持自定义请求格式和模板&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🌙 农历功能&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;农历转换&lt;/strong&gt;：支持 1900-2100 年农历转换&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;智能显示&lt;/strong&gt;：列表和编辑页面可控制农历显示&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;通知集成&lt;/strong&gt;：通知消息中可包含农历信息&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎨 用户体验&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;响应式设计&lt;/strong&gt;：完美适配桌面端和移动端&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;备注优化&lt;/strong&gt;：长备注自动截断，悬停显示完整内容&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;实时预览&lt;/strong&gt;：日期选择时实时显示对应农历&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;用户偏好&lt;/strong&gt;：记住用户的显示偏好设置&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 一键部署&lt;/h2&gt; 
&lt;h3&gt;点击按钮，一键部署到 CloudFlare Workers,&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://deploy.workers.cloudflare.com/?url=https://github.com/wangwangit/SubsTracker"&gt;&lt;img src="https://deploy.workers.cloudflare.com/button" alt="Deploy to Cloudflare Workers" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;适用于新部署的,以前部署过的直接替换js中的内容即可!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;📋 三步开始使用&lt;/h2&gt; 
&lt;h3&gt;1️⃣ 一键部署&lt;/h3&gt; 
&lt;p&gt;Fork仓库,然后点击自己仓库里的部署按钮，等待部署完成,&lt;strong&gt;注意,KV名称修改为 &lt;code&gt;SUBSCRIPTIONS_KV&lt;/code&gt;&lt;/strong&gt; &lt;img src="https://img.wangwangit.com/file/1751942578108_image.png" alt="image.png" /&gt;&lt;/p&gt; 
&lt;h3&gt;2️⃣ 首次登录&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;访问部署后的域名&lt;/li&gt; 
 &lt;li&gt;默认用户名：&lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;默认密码：&lt;code&gt;password&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3️⃣ 开始使用&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;修改默认密码&lt;/strong&gt;（进入系统配置）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;配置通知渠道&lt;/strong&gt;（选择一个或多个）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;添加订阅&lt;/strong&gt;，设置提醒&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;享受智能提醒&lt;/strong&gt;！&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;🔧 通知渠道配置&lt;/h2&gt; 
&lt;h3&gt;Telegram&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Bot Token&lt;/strong&gt;: 从 &lt;a href="https://t.me/BotFather"&gt;@BotFather&lt;/a&gt; 获取&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Chat ID&lt;/strong&gt;: 从 &lt;a href="https://t.me/userinfobot"&gt;@userinfobot&lt;/a&gt; 获取&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;NotifyX&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;API Key&lt;/strong&gt;: 从 &lt;a href="https://www.notifyx.cn/"&gt;NotifyX官网&lt;/a&gt; 获取&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;企业微信机器人&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;推送 URL&lt;/strong&gt;: 参考&lt;a href="https://developer.work.weixin.qq.com/document/path/91770"&gt;官方文档&lt;/a&gt;获取&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Webhook 通知&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;推送 URL&lt;/strong&gt;: 根据所使用的 Webhook 服务或自建接口填写，例如 &lt;code&gt;https://your-service.com/hooks/notify&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;支持自定义请求方法、请求头与消息模板&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;模板占位符&lt;/strong&gt;：&lt;code&gt;{{title}}&lt;/code&gt;、&lt;code&gt;{{content}}&lt;/code&gt;、&lt;code&gt;{{tags}}&lt;/code&gt;（多行形式）、&lt;code&gt;{{tagsLine}}&lt;/code&gt;、&lt;code&gt;{{timestamp}}&lt;/code&gt;、&lt;code&gt;{{formattedMessage}}&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Bark（iOS 推送）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;服务器地址&lt;/strong&gt;：默认 &lt;code&gt;https://api.day.app&lt;/code&gt;，也可使用自建服务器&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;设备 Key&lt;/strong&gt;：在 Bark App 内复制&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;历史记录&lt;/strong&gt;：勾选“保存推送”后可保留推送历史&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;邮件通知 (Resend)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;API Key&lt;/strong&gt;: 从 &lt;a href="https://developers.cloudflare.com/workers/tutorials/send-emails-with-resend/"&gt;Resend 官方教程&lt;/a&gt; 获取&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;发件人邮箱&lt;/strong&gt;: 必须是已在 Resend 验证的域名邮箱&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;收件人邮箱&lt;/strong&gt;: 接收通知的邮箱地址&lt;/li&gt; 
 &lt;li&gt;支持 HTML 格式的美观邮件模板&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔔 通知时间与时区说明&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cloudflare Workers 的 Cron 表达式使用 &lt;strong&gt;UTC 时区&lt;/strong&gt;，例如 &lt;code&gt;0 8 * * *&lt;/code&gt; 表示 UTC 08:00 触发&lt;/li&gt; 
 &lt;li&gt;若希望在北京时间（UTC+8）早上 8 点提醒，可将 Cron 设置为 &lt;code&gt;0 0 * * *&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;若需要小时级提醒，可将 Cron 调整为 &lt;code&gt;0 * * * *&lt;/code&gt;（每小时执行一次），并在系统配置中指定允许的通知小时&lt;/li&gt; 
 &lt;li&gt;系统配置中的 “系统时区” 用于计算订阅剩余时间和格式化展示，建议与提醒需求保持一致&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔐 第三方 API 安全调用&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;通过 &lt;code&gt;POST /api/notify/{token}&lt;/code&gt; 可触发系统通知，请在后台配置“第三方 API 访问令牌”&lt;/li&gt; 
 &lt;li&gt;令牌也可通过 &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt; 或 &lt;code&gt;?token=&amp;lt;token&amp;gt;&lt;/code&gt; 传入&lt;/li&gt; 
 &lt;li&gt;未配置或令牌不匹配时接口会直接拒绝请求，建议定期更换随机令牌&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;: 系统默认每天早上8点自动检查即将到期的订阅&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;欢迎大家关注我的公众号&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/96bae085-4299-4377-9958-9a3a11294efc" alt="39d8d5a902fa1eee6cbbbc8a0dcff4b" /&gt;&lt;/p&gt; 
&lt;h2&gt;🚀 手动部署指南&lt;/h2&gt; 
&lt;h3&gt;前提条件&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cloudflare账户&lt;/li&gt; 
 &lt;li&gt;Telegram Bot (用于发送通知)&lt;/li&gt; 
 &lt;li&gt;可以直接将代码丢给AI,帮助查漏补缺&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;部署步骤&lt;/h3&gt; 
&lt;p&gt;1.登陆cloudflare,创建worker,粘贴本项目中的js代码,点击部署&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/ff4ac794-01e1-4916-b226-1f4f604dcbd3" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;2.创建KV键值 &lt;strong&gt;SUBSCRIPTIONS_KV&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/c9ebaf3e-6015-4400-bb0a-1a55fd5e14d2" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;3.给worker绑定上键值对,以及设置定时执行时间!&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/25b663b3-8e8e-4386-a499-9b6bf12ead76" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;4.打开worker提供的域名地址,输入默认账号密码: admin password (或者admin admin123),可以在代码中查看默认账号密码!&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/5dac1ce0-43a3-4642-925c-d9cf21076454" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;5.前往系统配置,修改账号密码,以及配置tg通知的信息&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/f6db2089-28a1-439d-9de0-412ee4b2807f" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;6.配置完成可以点击测试通知,查看是否能够正常通知,然后就可以正常添加订阅使用了!&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/af530379-332c-4482-9e6e-229a9e24775e" alt="image" /&gt;&lt;/p&gt; 
&lt;h2&gt;赞助&lt;/h2&gt; 
&lt;p&gt;本项目 CDN 加速及安全防护由 Tencent EdgeOne 赞助：EdgeOne 提供长期有效的免费套餐，包含不限量的流量和请求，覆盖中国大陆节点，且无任何超额收费，感兴趣的朋友可以点击下面的链接领取&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://edgeone.ai/?from=github"&gt;Best Asian CDN, Edge, and Secure Solutions - Tencent EdgeOne&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://edgeone.ai/media/34fe3a45-492d-4ea4-ae5d-ea1087ca7b4b.png"&gt;&lt;img src="https://edgeone.ai/media/34fe3a45-492d-4ea4-ae5d-ea1087ca7b4b.png" alt="image" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🤝 贡献&lt;/h2&gt; 
&lt;p&gt;欢迎贡献代码、报告问题或提出新功能建议!&lt;/p&gt; 
&lt;h2&gt;📜 许可证&lt;/h2&gt; 
&lt;p&gt;MIT License&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#wangwangit/SubsTracker&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=wangwangit/SubsTracker&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>meshery/meshery</title>
      <link>https://github.com/meshery/meshery</link>
      <description>&lt;p&gt;Meshery, the cloud native manager&lt;/p&gt;&lt;hr&gt;&lt;p style="text-align:center;" align="center"&gt;&lt;a href="https://meshery.io"&gt;
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-light-text-side.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg?sanitize=true" alt="Meshery Logo" width="70%" /&gt;
  &lt;/picture&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://hub.docker.com/r/meshery/meshery" alt="Docker pulls"&gt; &lt;img src="https://img.shields.io/docker/pulls/meshery/meshery.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://github.com/issues?q=is%3Aopen%20is%3Aissue%20archived%3Afalse%20(org%3Ameshery%20OR%20org%3Aservice-mesh-performance%20OR%20org%3Aservice-mesh-patterns%20OR%20org%3Ameshery-extensions)%20label%3A%22help%20wanted%22%20" alt="GitHub issues by-label"&gt; &lt;img src="https://img.shields.io/github/issues/meshery/meshery/help%20wanted.svg?color=informational" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meshery/meshery/raw/master/LICENSE" alt="LICENSE"&gt; &lt;img src="https://img.shields.io/github/license/meshery/meshery?color=brightgreen" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/meshery/meshery" alt="Artifact Hub Meshery"&gt; &lt;img src="https://img.shields.io/endpoint?color=brightgreen&amp;amp;label=Helm%20Chart&amp;amp;style=plastic&amp;amp;url=https%3A%2F%2Fartifacthub.io%2Fbadge%2Frepository%2Fartifact-hub" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/meshery/meshery" alt="Go Report Card"&gt; &lt;img src="https://goreportcard.com/badge/github.com/meshery/meshery" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meshery/meshery/actions" alt="Build Status"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/meshery/meshery/release-drafter.yml" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/3564" alt="CLI Best Practices"&gt; &lt;img src="https://bestpractices.coreinfrastructure.org/projects/3564/badge" /&gt;&lt;/a&gt; &lt;a href="https://meshery.io/community#discussion-forums" alt="Discussion Forum"&gt; &lt;img src="https://img.shields.io/discourse/users?label=discuss&amp;amp;logo=discourse&amp;amp;server=https%3A%2F%2Fmeshery.io/community" /&gt;&lt;/a&gt; &lt;a href="https://slack.meshery.io" alt="Join Slack"&gt; &lt;img src="https://img.shields.io/badge/Slack-@meshery.svg?logo=slack" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=mesheryio" alt="Twitter Follow"&gt; &lt;img src="https://img.shields.io/twitter/follow/mesheryio.svg?label=Follow+Meshery&amp;amp;style=social" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meshery/meshery/releases" alt="Meshery Downloads"&gt; &lt;img src="https://img.shields.io/github/downloads/meshery/meshery/total" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/meshery/meshery" alt="OpenSSF Scorecard"&gt; &lt;img src="https://api.scorecard.dev/projects/github.com/meshery/meshery/badge" /&gt;&lt;/a&gt; &lt;a href="https://trendshift.io/repositories/888" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/888" alt="meshery%2Fmeshery | Trendshift" style="width: 150px;" width="150px" /&gt;&lt;/a&gt; 
 &lt;!-- &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fmeshery%2Fmeshery?ref=badge_shield" alt="License Scan Report"&gt;
  &lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fmeshery%2Fmeshery.svg?type=shield"/&gt;&lt;/a&gt;  
  --&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;p align="center"&gt;&lt;i&gt;If you like Meshery, please &lt;a href="https://github.com/meshery/meshery/stargazers"&gt;★&lt;/a&gt; this repository to show your support! 🤩&lt;/i&gt;&lt;/p&gt;&lt;/h5&gt; 
&lt;p align="center"&gt; MESHERY IS A CLOUD NATIVE COMPUTING FOUNDATION PROJECT &lt;/p&gt; 
&lt;div align="center" width="100%"&gt; 
 &lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/cncf-white.svg#gh-dark-mode-only" width="30%" align="center" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/cncf-black.svg#gh-light-mode-only" width="30%" align="center" /&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; A self-service engineering platform, &lt;a href="https://meshery.io"&gt;Meshery&lt;/a&gt;, is the open source, cloud native manager that enables the design and management of all Kubernetes-based infrastructure and applications (multi-cloud). Among other features, As an extensible platform, Meshery offers visual and collaborative GitOps, freeing you from the chains of YAML while managing Kubernetes multi-cluster deployments. &lt;/p&gt; 
&lt;br /&gt; 
&lt;div align="center" width="100%"&gt; 
 &lt;a href="https://www.youtube.com/watch?v=034nVaQUyME&amp;amp;list=PL3A-A6hPO2IO_yzN83wSJJUNQActzCJvO&amp;amp;index=9"&gt;&lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-dashboard-hero-image.png" width="800px" /&gt;&lt;/a&gt; 
 &lt;br /&gt;Try Meshery in your browser using the 
 &lt;a href="https://play.meshery.io"&gt;Cloud Native Playground&lt;/a&gt; (
 &lt;a href="https://www.youtube.com/watch?v=034nVaQUyME&amp;amp;list=PL3A-A6hPO2IO_yzN83wSJJUNQActzCJvO&amp;amp;index=9"&gt;teaser video&lt;/a&gt;) 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;/p&gt;
&lt;h4 align="center"&gt;Open Meshery extension, Kanvas, in your browser: https://kanvas.new&lt;/h4&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;!--
- [Functionality](#functionality)
  - [Meshery Architecture](#meshery-architecture)
  - [Join the Meshery community!](#join-the-meshery-community)
  - [Contributing](#contributing)
    - [Stargazers](#stargazers)
    - [License](#license)
--&gt; 
&lt;!-- &lt;p style="clear:both;"&gt;&amp;nbsp;&lt;/p&gt;
&lt;a href="https://meshery.io"&gt;&lt;picture&gt;
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-light-text-side.svg"&gt;
  &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg"&gt;
  &lt;img alt="Meshery - the Cloud Native Manager" src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg" align="left" width="45%"&gt;
  &lt;/picture&gt;&lt;/a&gt; 
&lt;a href="https://meshery.io"&gt;
&lt;h3 style="margin:auto;"&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;a href="https://docs.google.com/presentation/d/14kxjwYSJ_FyE3K_6CDEd6oq2kqwn0OSE8RDJ4H-KlKU/edit?usp=sharing"&gt;&lt;center&gt;&lt;i&gt;Project Overview Presentation&lt;/i&gt;&lt;/center&gt;&lt;/a&gt;
  &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;/h3&gt; --&gt; 
&lt;p style="clear:both;"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;Functionality&lt;/h1&gt; 
&lt;h2&gt;Infrastructure Lifecycle Management&lt;/h2&gt; 
&lt;p&gt;Meshery manages the configuration, deployment, and operation of your Cloud services and Kubernetes clusters while supporting hundreds of different types of cloud native infrastructure integrations. Meshery supports &lt;a href="https://meshery.io/integrations"&gt;300+ integrations&lt;/a&gt;.&lt;/p&gt; 
&lt;!--
&lt;a href="https://www.youtube.com/watch?v=034nVaQUyME"&gt;&lt;img alt="Meshery cloud native management" src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshmap.gif"  style="margin-left:10px; margin-bottom:10px;" width="100%" align="center" /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;--&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/cloud-native-integrations.png"&gt;&lt;img alt="Meshery Integrations" src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/cloud-native-integrations.png" style="margin-right:10px;margin-bottom:10px;" width="100%" align="center" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Find infrastructure configuration patterns in Meshery's &lt;a href="https://meshery.io/catalog"&gt;catalog of curated design templates&lt;/a&gt; filled with configuration best practices.&lt;/p&gt; 
&lt;h3&gt;Multiple Kubernetes Clusters and Multiple Clouds&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://meshery.io/assets/images/screens/multi-cluster-management.gif" width="50%" alt="Multi-cluster Kubernetes Manager" loading="lazy" align="center" /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;Meshery provides a single pane of glass to manage multiple Kubernetes clusters across any infrastructure, including various cloud providers. Meshery enables consistent configuration, operation, and observability across your entire Kubernetes landscape.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;h4&gt;Dry-run your deployments&lt;/h4&gt;&lt;/summary&gt; Meshery leverages Kubernetes' built-in dry-run capabilities to allow you to simulate deployments without actually applying the changes to your cluster. This enables you to: 
 &lt;ul&gt; 
  &lt;li&gt;Validate configurations: Ensure your deployment specifications (e.g., YAML manifests, Helm charts, Meshery Designs) are syntactically correct and will be accepted by the Kubernetes API server. &amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Identify potential issues: Detect errors in your configurations, such as invalid resource definitions, missing fields, or API version mismatches, before they impact your live environment.&lt;/li&gt; 
  &lt;li&gt;Preview changes: Understand the objects that Kubernetes would create or modify during a real deployment.&lt;/li&gt; 
  &lt;li&gt;Integrate with CI/CD: Incorporate dry-run as a step in your continuous integration and continuous delivery pipelines to automate pre-deployment checks and prevent faulty deployments.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;By providing this dry-run functionality, Meshery helps you increase the reliability and stability of your Kubernetes deployments by catching potential problems early in the development and deployment process.&lt;/p&gt; 
 &lt;!-- 
Assess your cloud native infrastructure configuration against deployment and operational best practices with Meshery's configuration validator. Manage your workloads with confidence. Check your Kubernetes configuration for anti-patterns and avoid common pitfalls. --&gt; 
&lt;/details&gt; 
&lt;h3&gt;Visually and collaboratively manage your infrastructure&lt;/h3&gt; 
&lt;p&gt;Using a GitOps-centric approach, visually and collaboratively design and manage your infrastructure and microservices. Meshery intelligently infers the manner in which each resource &lt;a href="https://docs.meshery.io/concepts/logical/relationships"&gt;interrelates&lt;/a&gt; with each other. Meshery supports a broad variety of built-in relationships between components, which you can use to create your own custom relationships.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/edge_mount_relationship_pod_persistent_volume.svg?sanitize=true" width="50%" alt="Multi-cluster Kubernetes Manager" align="center" /&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;img alt="OPA Logo" src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/opa-logo.svg?sanitize=true" style="margin-right:10px;" width="25px" align="left" /&gt;&lt;h4&gt;Context-Aware Policies For Applications&lt;/h4&gt;&lt;/summary&gt; 
 &lt;img alt="Meshery and Open Policy Agent Integration" src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-policies-2.png" style="margin:auto;text-align:center" width="50%" /&gt; 
 &lt;p&gt;Leverage built-in relationships to enforce configuration best practices consistently from code to Kubernetes. Customize Configure your infrastructure with confidence without needing to know or write Open Policy Agent's Rego query language.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Workspaces: Your team's Google Drive for cloud native projects&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/workspace.gif" width="50%" alt="Multi-cluster Kubernetes Manager" loading="lazy" /&gt; 
&lt;p&gt;Workspaces let you organize your work and serve as the central point of collaboration for you and your teams and point of access control to Environments and their resources.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;h4&gt;Manage your connections with Environments&lt;/h4&gt;&lt;/summary&gt; 
 &lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/environments.gif" width="50%" alt="Multi-cluster Kubernetes Manager" loading="lazy" /&gt; 
 &lt;p&gt;&lt;a href="https://docs.meshery.io/concepts/logical/environments"&gt;Environments&lt;/a&gt; make it easier for you to manage, share, and work with a collection of resources as a group, instead of dealing with all your Connections and Credentials on an individual basis.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;h4&gt;See changes to your infra before you merge&lt;/h4&gt;&lt;/summary&gt; 
 &lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-snapshot.png" width="50%" alt="Multi-cluster Kubernetes Manager" loading="lazy" align="center" /&gt; 
 &lt;p&gt;Get snapshots of your infrastructure directly in your PRs. Preview your deployment, view changes pull request-to-pull request and get infrastructure snapshots within your PRs by connecting Kanvas to your GitHub repositories.&lt;/p&gt; 
&lt;/details&gt; 
&lt;!-- &lt;h3&gt;Operate with configuration best practices&lt;/h3&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;Assess your configurations against deployment and operational best practices with Meshery's configuration validator.&lt;/p&gt;
&lt;br /&gt;&lt;br /&gt;

&lt;h3&gt;Control all of your infrastructure with mesheryctl&lt;/h3&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;Whether managing multiple Meshery deployments, importing designs, discoverying Kubernetes clusters, do so with ease using Meshery CLI in your terminal.&lt;/p&gt;
&lt;br /&gt;&lt;br /&gt; --&gt; 
&lt;h2&gt;Platform Engineering with Meshery's Extension Points&lt;/h2&gt; 
&lt;p&gt;Extend Meshery as your self-service engineering platform by taking advantage of its &lt;a href="https://docs.meshery.io/extensibility"&gt;vast set of extensibility features&lt;/a&gt;, including gRPC adapters, hot-loadable Reactjs packages and Golang plugins, subscriptions on NATS topics, consumable &lt;em&gt;and&lt;/em&gt; extendable API interfaces via REST and GraphQL.The great number of extension points in Meshery make it ideal as the foundation of your internal developer platform.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;h4&gt;Access the Cloud Native Patterns for Kubernetes&lt;/h4&gt;&lt;/summary&gt; 
 &lt;p&gt;Design and manage all of your cloud native infrastructure using the design configurator in Meshery or start from a template using the patterns from the &lt;a href="https://meshery.io/catalog"&gt;catalog&lt;/a&gt;. &lt;/p&gt;
&lt;/details&gt; 
&lt;p&gt;Meshery offers robust capabilities for managing multiple tenants within a shared Kubernetes infrastructure. Meshery provides the tools and integrations necessary to create a secure, isolated, and manageable multi-tenant environments, allowing multiple teams or organizations with granular control over their role-based access controls.&lt;/p&gt; 
&lt;p&gt;Meshery's "multi-player" functionality refers to its collaborative features that enable multiple users to interact with and manage cloud native infrastructure simultaneously. This is primarily facilitated through Kanvas, a Meshery extension visual designer and management interface.&lt;/p&gt; 
&lt;h2&gt;Performance Management&lt;/h2&gt; 
&lt;p&gt;Meshery offers load generation and performance characterization to help you assess and optimize the performance of your applications and infrastructure.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/performance-metrics.gif" alt="Multi-cluster Kubernetes Manager" width="50%" /&gt; 
&lt;p&gt;Create and reuse performance profiles for consistent characterization of the configuration of your infrastructure in context of how it performs.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h4&gt; Manage the performance of your infrastructure and its workloads&lt;/h4&gt;&lt;/summary&gt; 
 &lt;img src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-performance.gif" /&gt; 
 &lt;p&gt;Baseline and track your cloud native performance from release to release.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use performance profiles to track the historical performance of your workloads.&lt;/li&gt; 
  &lt;li&gt;Track your application performance from version to version.&lt;/li&gt; 
  &lt;li&gt;Understand behavioral differences between cloud native network functions.&lt;/li&gt; 
  &lt;li&gt;Compare performance across infrastructure deployments.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h4&gt;Load Generation and Microservice Performance Characteristization&lt;/h4&gt;&lt;/summary&gt; 
 &lt;picture align="left"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/layer5io/layer5/master/src/assets/images/service-mesh-performance/stacked/smp-light-text.svg" width="18%" align="left" style="margin-left:10px;" /&gt; 
  &lt;img alt="Shows an illustrated light mode meshery logo in light color mode and a dark mode meshery logo dark color mode." src="https://raw.githubusercontent.com/layer5io/layer5/master/src/assets/images/service-mesh-performance/stacked/smp-light-text.svg?sanitize=true" width="18%" align="left" style="margin-left:10px;" /&gt; 
 &lt;/picture&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Multiple Load Generators:&lt;/strong&gt; Meshery supports various load generators, including Fortio, Wrk2, and Nighthawk, allowing users to choose the tool that best suits your needs.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Configurable Performance Profiles:&lt;/strong&gt; Meshery provides a highly configurable set of load profiles with tunable facets, enabling users to generate TCP, gRPC, and HTTP load. You can customize parameters such as duration, concurrent threads, concurrent generators, and load generator type.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Statistical Analysis:&lt;/strong&gt; Meshery performs statistical analysis on the results of performance tests, presenting data in the form of histograms with latency buckets. Understand the distribution of response times and identify potential bottlenecks.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Comparison of Test Results:&lt;/strong&gt; Meshery enables you to compare the difference in request performance (latency and throughput) between independent performance tests. Save your load test configurations as Performance Profiles, making it easy to rerun tests with the same settings and track performance variations over time.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Kubernetes Cluster and Workload Metrics:&lt;/strong&gt; - Meshery connects to one or more Prometheus servers to gather both cluster and application metrics. Meshery also integrates with Grafana, allowing you to import your existing dashboards and visualize performance data.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;In an effort to produce infrastructure agnostic tooling, Meshery uses the &lt;a href="https://smp-spec.io"&gt;Cloud Native Performance&lt;/a&gt; specification as a common format to capture and measure your infrastructure's performance against a universal cloud native performance index. Meshery participates in advancing cloud native infrastructure adoption through the standardization of APIs. Meshery enables you to measure the value provided by Docker, Kubernetes, or other cloud native infrastructure in the context of the overhead incurred.&lt;/p&gt; 
 &lt;!-- 

SCREENSHOT / GIF NEEDED HERE

--&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;a name="running"&gt;&lt;/a&gt;Get Started with Meshery&lt;/h2&gt; 
&lt;p style="clear:both;"&gt;&lt;/p&gt; 
&lt;!-- &lt;img alt="Control Kubernetes and your workloads with mesheryctl" src=".github/assets/images/readme/mesheryctl.png"  style="margin-left:10px; margin-bottom:10px;" width="50%" align="right" /&gt; --&gt; 
&lt;h3&gt;Using `mesheryctl`&lt;/h3&gt; 
&lt;p&gt;Meshery runs as a set of containers inside or outside of your Kubernetes clusters.&lt;/p&gt; 
&lt;pre&gt;curl -L https://meshery.io/install | bash -&lt;/pre&gt; 
&lt;p&gt;Use the &lt;a href="https://docs.meshery.io/installation/quick-start"&gt;quick start&lt;/a&gt; guide.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;See all supported platforms&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;See the &lt;a href="https://meshery.io/#getting-started"&gt;getting started&lt;/a&gt; section to quickly deploy Meshery on any of these supported platforms:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Platform&lt;/th&gt; 
    &lt;th align="center"&gt;Supported?&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;img src="https://docs.meshery.io/assets/img/platforms/docker.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/docker"&gt;Docker&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/docker.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/docker"&gt;Docker - Docker App&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/docker.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/docker/docker-extensiongit"&gt;Docker - Docker Extension&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;img src="https://docs.meshery.io/assets/img/platforms/kubernetes.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/kubernetes"&gt;Kubernetes&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/aks.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/kubernetes/aks"&gt;Kubernetes - AKS&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/docker.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation#mac-or-linux"&gt;Kubernetes - Docker Desktop&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/eks.png" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/kubernetes/eks"&gt;Kubernetes - EKS&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/gke.png" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/kubernetes/gke"&gt;Kubernetes - GKE&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/helm.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/kubernetes/helm"&gt;Kubernetes - Helm&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/kind.png" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/kubernetes/kind"&gt;Kubernetes - kind&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/minikube.png" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/kubernetes/minikube"&gt;Kubernetes - Minikube&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/openshift.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/kubernetes"&gt;Kubernetes - OpenShift&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/kubernetes.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/kubernetes"&gt;Kubernetes - Rancher&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;img src="https://docs.meshery.io/assets/img/platforms/linux.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation#mac-or-linux"&gt;Linux&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;img src="https://docs.meshery.io/assets/img/platforms/apple.svg?sanitize=true" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation#mac-or-linux"&gt;Mac&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/homebrew.png" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation#mac-or-linux"&gt;Mac - Homebrew&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;img src="https://docs.meshery.io/assets/img/platforms/wsl2.png" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation#windows"&gt;Windows&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/wsl2.png" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation#windows"&gt;Scoop&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src="https://docs.meshery.io/assets/img/platforms/wsl2.png" width="20" height="20" vertical-align="middle" /&gt; &lt;a href="https://docs.meshery.io/installation/platforms/windows#wsl2"&gt;WSL2&lt;/a&gt;&lt;/td&gt; 
    &lt;td align="center"&gt;✔️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;img src="https://docs.meshery.io/assets/img/platforms/raspberry-pi.png" width="20" height="20" vertical-align="middle" /&gt; Raspberry Pi&lt;/td&gt; 
    &lt;td align="center"&gt;In Progress&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;a href="https://docs.meshery.io/installation"&gt;Meshery documentation&lt;/a&gt; offers thorough installation guides for your platform of choice.&lt;/p&gt; 
&lt;/details&gt; 
&lt;p style="clear:both;"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt;
 &amp;nbsp;
&lt;/div&gt; 
&lt;h2&gt;Join the Meshery community&lt;/h2&gt; 
&lt;p&gt;&lt;a name="contributing"&gt;&lt;/a&gt;&lt;a name="community"&gt;&lt;/a&gt; Our projects are community-built and welcome collaboration. 👍 Be sure to see the &lt;a href="https://meshery.io/community"&gt;Contributor Journey Map&lt;/a&gt; and &lt;a href="https://meshery.io/community#handbook"&gt;Community Handbook&lt;/a&gt; for a tour of resources available to you and the &lt;a href="https://meshery.io/community/#handbook/repository-overview"&gt;Repository Overview&lt;/a&gt; for a cursory description of repository by technology and programming language. Jump into community &lt;a href="https://slack.meshery.io"&gt;Slack&lt;/a&gt; or &lt;a href="https://meshery.io/community#discussion-forums"&gt;discussion forum&lt;/a&gt; to participate.&lt;/p&gt; 
&lt;p style="clear:both;"&gt; &lt;/p&gt;
&lt;h3&gt;Find your MeshMate&lt;/h3&gt; 
&lt;p&gt;MeshMates are experienced Meshery community members, who will help you learn your way around, discover live projects, and expand your community network. Connect with a MeshMate today!&lt;/p&gt; 
&lt;p&gt;Learn more about the &lt;a href="https://meshery.io/community#meshmates"&gt;MeshMates&lt;/a&gt; program. &lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;br /&gt;
&lt;br /&gt; 
&lt;div style="display: flex; justify-content: center; align-items:center;"&gt; 
 &lt;div&gt; 
  &lt;a href="https://meshery.io/community"&gt;&lt;img alt="Meshery Community" src="https://docs.meshery.io/assets/img/readme/community.png" width="140px" style="margin-right:36px; margin-bottom:7px;" align="left" /&gt;&lt;/a&gt; 
 &lt;/div&gt; 
 &lt;div style="width:60%; padding-left: 16px; padding-right: 16px"&gt; 
  &lt;p&gt; ✔️ &lt;em&gt;&lt;strong&gt;Join&lt;/strong&gt;&lt;/em&gt; any or all of the weekly meetings on &lt;a href="https://meshery.io/calendar"&gt;community calendar&lt;/a&gt;.&lt;br /&gt; ✔️ &lt;em&gt;&lt;strong&gt;Watch&lt;/strong&gt;&lt;/em&gt; community &lt;a href="https://www.youtube.com/@mesheryio?sub_confirmation=1"&gt;meeting recordings&lt;/a&gt;.&lt;br /&gt; ✔️ &lt;em&gt;&lt;strong&gt;Fill-in&lt;/strong&gt;&lt;/em&gt; a &lt;a href="https://meshery.io/newcomers"&gt;member form&lt;/a&gt; and gain access to community resources. &lt;br /&gt; ✔️ &lt;em&gt;&lt;strong&gt;Discuss&lt;/strong&gt;&lt;/em&gt; in the &lt;a href="https://meshery.io/community#discussion-forums"&gt;community forum&lt;/a&gt;.&lt;br /&gt; ✔️ &lt;em&gt;&lt;strong&gt;Explore more&lt;/strong&gt;&lt;/em&gt; in the &lt;a href="https://meshery.io/community#handbook"&gt;community handbook&lt;/a&gt;.&lt;br /&gt; &lt;/p&gt; 
 &lt;/div&gt;
 &lt;br /&gt;
 &lt;br /&gt; 
 &lt;div&gt; 
  &lt;a href="https://slack.meshery.io"&gt; 
   &lt;picture&gt; 
    &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/slack.svg" width="110px" /&gt; 
    &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/slack.svg" width="110px" /&gt; 
    &lt;img alt="Shows an illustrated light mode meshery logo in light color mode and a dark mode meshery logo dark color mode." src="https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/slack.svg?sanitize=true" width="110px" align="left" /&gt; 
   &lt;/picture&gt; &lt;/a&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;br /&gt;
&lt;br /&gt; 
&lt;p align="left"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;i&gt;Not sure where to start?&lt;/i&gt; Grab an open issue with the &lt;a href="https://github.com/issues?q=is%3Aopen%20is%3Aissue%20archived%3Afalse%20(org%3Ameshery%20OR%20org%3Aservice-mesh-performance%20OR%20org%3Aservice-mesh-patterns%20OR%20org%3Ameshery-extensions)%20label%3A%22help%20wanted%22%20"&gt;help-wanted label&lt;/a&gt;. &lt;/p&gt; 
&lt;br /&gt;
&lt;br /&gt; 
&lt;div&gt;
 &amp;nbsp;
&lt;/div&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please do! We're a warm and welcoming community of open source contributors. Please join. All types of contributions are welcome. Be sure to read the &lt;a href="https://docs.meshery.io/project/contributing"&gt;Contributor Guides&lt;/a&gt; for a tour of resources available to you and how to get started.&lt;/p&gt; 
&lt;!-- &lt;a href="https://youtu.be/MXQV-i-Hkf8"&gt;&lt;img alt="Deploying Linkerd with Meshery" src="https://docs.meshery.io/assets/img/readme/deploying-linkerd-with-meshery.png" width="100%" align="center" /&gt;&lt;/a&gt; --&gt; 
&lt;div&gt;
 &amp;nbsp;
&lt;/div&gt; 
&lt;h3&gt;Stargazers&lt;/h3&gt; 
&lt;p align="center"&gt; &lt;i&gt;If you like Meshery, please &lt;a href="https://raw.githubusercontent.com/meshery/stargazers"&gt;★&lt;/a&gt; star this repository to show your support! 🤩&lt;/i&gt; &lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/meshery/stargazers"&gt; &lt;img align="center" src="https://api.star-history.com/svg?repos=meshery/meshery&amp;amp;type=Date" /&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;This repository and site are available as open-source under the terms of the &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Software Bill of Materials (SBOM)&lt;/h4&gt; 
&lt;p&gt;Meshery's &lt;a href="https://github.com/meshery/meshery/actions/workflows/bom.yaml"&gt;Software Bill of Materials&lt;/a&gt; (SBOM) is available as a build artifact.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>npm/cli</title>
      <link>https://github.com/npm/cli</link>
      <description>&lt;p&gt;the package manager for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;npm - a JavaScript package manager&lt;/h1&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;You should be running a currently supported version of &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; to run &lt;strong&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/strong&gt;. For a list of which versions of Node.js are currently supported, please see the &lt;a href="https://nodejs.org/en/about/previous-releases"&gt;Node.js releases&lt;/a&gt; page.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/strong&gt; comes bundled with &lt;a href="https://nodejs.org/"&gt;&lt;strong&gt;&lt;code&gt;node&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, &amp;amp; most third-party distributions, by default. Officially supported downloads/distributions can be found at: &lt;a href="https://nodejs.org/en/download"&gt;nodejs.org/en/download&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Direct Download&lt;/h4&gt; 
&lt;p&gt;You can download &amp;amp; install &lt;strong&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/strong&gt; directly from &lt;a href="https://npmjs.com/"&gt;&lt;strong&gt;npmjs&lt;/strong&gt;.com&lt;/a&gt; using our custom &lt;code&gt;install.sh&lt;/code&gt; script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -qL https://www.npmjs.com/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Node Version Managers&lt;/h4&gt; 
&lt;p&gt;If you're looking to manage multiple versions of &lt;strong&gt;&lt;code&gt;Node.js&lt;/code&gt;&lt;/strong&gt; &amp;amp;/or &lt;strong&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/strong&gt;, consider using a &lt;a href="https://github.com/search?q=node+version+manager+archived%3Afalse&amp;amp;type=repositories&amp;amp;ref=advsearch"&gt;node version manager&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Links &amp;amp; Resources&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.npmjs.com/"&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; - Official docs &amp;amp; how-tos for all things &lt;strong&gt;npm&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Note: you can also search docs locally with &lt;code&gt;npm help-search &amp;lt;query&amp;gt;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/npm/cli/issues"&gt;&lt;strong&gt;Bug Tracker&lt;/strong&gt;&lt;/a&gt; - Search or submit bugs against the CLI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orgs/github/projects/4247/views/1?filterQuery=npm"&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt; - Track &amp;amp; follow along with our public roadmap&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orgs/community/discussions/categories/npm"&gt;&lt;strong&gt;Community Feedback and Discussions&lt;/strong&gt;&lt;/a&gt; - Contribute ideas &amp;amp; discussion around the npm registry, website &amp;amp; CLI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/npm/rfcs"&gt;&lt;strong&gt;RFCs&lt;/strong&gt;&lt;/a&gt; - Contribute ideas &amp;amp; specifications for the API/design of the npm CLI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://status.npmjs.org/"&gt;&lt;strong&gt;Service Status&lt;/strong&gt;&lt;/a&gt; - Monitor the current status &amp;amp; see incident reports for the website &amp;amp; registry&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://npm.github.io/statusboard/"&gt;&lt;strong&gt;Project Status&lt;/strong&gt;&lt;/a&gt; - See the health of all our maintained OSS projects in one view&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.npmjs.com/support"&gt;&lt;strong&gt;Support&lt;/strong&gt;&lt;/a&gt; - Experiencing problems with the &lt;strong&gt;npm&lt;/strong&gt; &lt;a href="https://npmjs.com"&gt;website&lt;/a&gt; or &lt;a href="https://registry.npmjs.org"&gt;registry&lt;/a&gt;? &lt;a href="https://www.npmjs.com/support"&gt;File a ticket&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Acknowledgments&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;npm&lt;/code&gt; is configured to use the &lt;strong&gt;npm Public Registry&lt;/strong&gt; at &lt;a href="https://registry.npmjs.org"&gt;https://registry.npmjs.org&lt;/a&gt; by default; Usage of this registry is subject to &lt;strong&gt;Terms of Use&lt;/strong&gt; available at &lt;a href="https://npmjs.com/policies/terms"&gt;https://npmjs.com/policies/terms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;You can configure &lt;code&gt;npm&lt;/code&gt; to use any other compatible registry you prefer. You can read more about &lt;a href="https://docs.npmjs.com/cli/v7/using-npm/registry"&gt;configuring third-party registries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;FAQ on Branding&lt;/h3&gt; 
&lt;h4&gt;Is it "npm" or "NPM" or "Npm"?&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/strong&gt; should never be capitalized unless it is being displayed in a location that is customarily all-capitals (ex. titles on &lt;code&gt;man&lt;/code&gt; pages).&lt;/p&gt; 
&lt;h4&gt;Is "npm" an acronym for "Node Package Manager"?&lt;/h4&gt; 
&lt;p&gt;Contrary to popular belief, &lt;strong&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;is not&lt;/strong&gt; in fact an acronym for "Node Package Manager"; It is a recursive bacronymic abbreviation for &lt;strong&gt;"npm is not an acronym"&lt;/strong&gt; (if the project was named "ninaa", then it would be an acronym). The precursor to &lt;strong&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/strong&gt; was actually a bash utility named &lt;strong&gt;"pm"&lt;/strong&gt;, which was the shortform name of &lt;strong&gt;"pkgmakeinst"&lt;/strong&gt; - a bash function that installed various things on various platforms. If &lt;strong&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/strong&gt; were to ever have been considered an acronym, it would be as "node pm" or, potentially "new pm".&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>koodo-reader/koodo-reader</title>
      <link>https://github.com/koodo-reader/koodo-reader</link>
      <description>&lt;p&gt;A modern ebook manager and reader with sync and backup capacities for Windows, macOS, Linux, Android, iOS and Web&lt;/p&gt;&lt;hr&gt;&lt;div align="left"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/koodo-reader/koodo-reader/raw/master/README_cn.md"&gt;简体中文&lt;/a&gt; | &lt;a href="https://github.com/koodo-reader/koodo-reader/raw/master/README_hi.md"&gt;हिंदी&lt;/a&gt; |&lt;a href="https://github.com/koodo-reader/koodo-reader/raw/master/README_pt.md"&gt;Português&lt;/a&gt; | &lt;a href="https://github.com/koodo-reader/koodo-reader/raw/master/README_id.md"&gt;Indonesian&lt;/a&gt; | English&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://dl.koodoreader.com/screenshots/logo.png" width="96px" height="96px" /&gt; 
&lt;/div&gt; 
&lt;h1 align="center"&gt; Koodo Reader &lt;/h1&gt; 
&lt;h3 align="center"&gt; A cross-platform ebook reader &lt;/h3&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://koodoreader.com/en"&gt;Download&lt;/a&gt; | &lt;a href="https://web.koodoreader.com"&gt;Preview&lt;/a&gt; | &lt;a href="https://koodoreader.com/en/roadmap"&gt;Roadmap&lt;/a&gt; | &lt;a href="https://koodoreader.com/en/document"&gt;Document&lt;/a&gt; | &lt;a href="https://koodoreader.com/en/plugin"&gt;Plugins&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Preview&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;img src="https://dl.koodoreader.com/screenshots/7.png" width="800px" /&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;img src="https://dl.koodoreader.com/screenshots/8.png" width="800px" /&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Feature&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Format support: 
  &lt;ul&gt; 
   &lt;li&gt;EPUB (&lt;strong&gt;.epub&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;PDF (&lt;strong&gt;.pdf&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;DRM-free Mobipocket (&lt;strong&gt;.mobi&lt;/strong&gt;) and Kindle (&lt;strong&gt;.azw3&lt;/strong&gt;, &lt;strong&gt;.azw&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;Plain text (&lt;strong&gt;.txt&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;FictionBook (&lt;strong&gt;.fb2&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;Comic book archive (&lt;strong&gt;.cbr&lt;/strong&gt;, &lt;strong&gt;.cbz&lt;/strong&gt;, &lt;strong&gt;.cbt&lt;/strong&gt;, &lt;strong&gt;.cb7&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;Rich text (&lt;strong&gt;.md&lt;/strong&gt;, &lt;strong&gt;.docx&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;Hyper Text (&lt;strong&gt;.html&lt;/strong&gt;, &lt;strong&gt;.xml&lt;/strong&gt;, &lt;strong&gt;.xhtml&lt;/strong&gt;, &lt;strong&gt;.mhtml&lt;/strong&gt;, &lt;strong&gt;.htm&lt;/strong&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Platform support: &lt;strong&gt;Windows&lt;/strong&gt;, &lt;strong&gt;macOS&lt;/strong&gt;, &lt;strong&gt;Linux&lt;/strong&gt;, &lt;strong&gt;Android&lt;/strong&gt;, &lt;strong&gt;iOS&lt;/strong&gt; and &lt;strong&gt;Web&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Utilize &lt;strong&gt;OneDrive&lt;/strong&gt;, &lt;strong&gt;Google Drive&lt;/strong&gt;, &lt;strong&gt;Dropbox&lt;/strong&gt;, &lt;strong&gt;MEGA&lt;/strong&gt;, &lt;strong&gt;pCloud&lt;/strong&gt;, &lt;strong&gt;Yandex Disk&lt;/strong&gt;, &lt;strong&gt;Box&lt;/strong&gt;, &lt;strong&gt;FTP&lt;/strong&gt;, &lt;strong&gt;SFTP&lt;/strong&gt;, &lt;strong&gt;WebDAV&lt;/strong&gt;, &lt;strong&gt;SMB&lt;/strong&gt;, &lt;strong&gt;Object Storage&lt;/strong&gt; to sync and backup your data.&lt;/li&gt; 
 &lt;li&gt;Easily import books from &lt;strong&gt;OneDrive&lt;/strong&gt;, &lt;strong&gt;Google Drive&lt;/strong&gt;, &lt;strong&gt;MEGA&lt;/strong&gt;, &lt;strong&gt;Yandex Disk&lt;/strong&gt;, &lt;strong&gt;Box&lt;/strong&gt;, &lt;strong&gt;FTP&lt;/strong&gt;, &lt;strong&gt;SFTP&lt;/strong&gt;, &lt;strong&gt;WebDAV&lt;/strong&gt;, &lt;strong&gt;SMB&lt;/strong&gt;, &lt;strong&gt;Object Storage&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;AI Translation, AI Dictionary, AI Summarization&lt;/li&gt; 
 &lt;li&gt;Single-column, two-column, or continuous scrolling layouts&lt;/li&gt; 
 &lt;li&gt;Text-to-speech, translation, dictionary, touch screen support, batch import&lt;/li&gt; 
 &lt;li&gt;Add bookmarks, notes, highlights to your books&lt;/li&gt; 
 &lt;li&gt;Adjust font size, font family, line-spacing, paragraph spacing, background color, text color, margins, and brightness&lt;/li&gt; 
 &lt;li&gt;Night mode and theme color&lt;/li&gt; 
 &lt;li&gt;Text highlight, underline, boldness, italics and shadow&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Desktop Version: &lt;a href="https://koodoreader.com/en/download"&gt;Download&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;Web Version：&lt;a href="https://web.koodoreader.com"&gt;Visit&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;Android Version：&lt;a href="https://koodoreader.com/en/download"&gt;Download&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;iOS Version：&lt;a href="https://koodoreader.com/en/download"&gt;Download&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;Install with Scoop:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;scoop bucket add extras
scoop install extras/koodo-reader
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install with Homebrew:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;brew install --cask koodo-reader
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install with Docker:&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The Docker version stores data in the browser cache by default. For your data security, please deploy and access it via HTTPS, then save the data to your local folder. Alternatively, you can enable the data source feature to synchronize the data to a specified server path.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you only need to deploy the web version, simply use the command below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d \
  --name koodo-reader \
  -p 80:80 \
  -p 8080:8080 \
  -e ENABLE_HTTP_SERVER=false \
  -e SERVER_USERNAME=admin \
  -e SERVER_PASSWORD=securePass123 \
  -v /path/to/host/uploads:/app/uploads \
  ghcr.io/koodo-reader/koodo-reader:master
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you also want to enable the &lt;strong&gt;data source feature&lt;/strong&gt;, please:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Set &lt;strong&gt;&lt;code&gt;ENABLE_HTTP_SERVER&lt;/code&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Change &lt;strong&gt;&lt;code&gt;SERVER_USERNAME&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;SERVER_PASSWORD&lt;/code&gt;&lt;/strong&gt; to a secure username and password&lt;/li&gt; 
 &lt;li&gt;Replace &lt;strong&gt;&lt;code&gt;/path/to/host/uploads&lt;/code&gt;&lt;/strong&gt; with the folder where you want to store reading data&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Then, select &lt;strong&gt;Docker&lt;/strong&gt; as the data source in Koodo Reader.&lt;/p&gt; 
&lt;p&gt;Data source functionality use port 8080, and web version use port 80 by default. If you want to switch to port 8090, just change &lt;strong&gt;&lt;code&gt;-p 8080:8080&lt;/code&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;code&gt;-p 8090:8080&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to use Docker Secrets to set &lt;strong&gt;&lt;code&gt;SERVER_PASSWORD&lt;/code&gt;&lt;/strong&gt;, please refer to &lt;a href="https://github.com/koodo-reader/koodo-reader/raw/master/docker-compose-secret.yml"&gt;docker-compose-secret.yml&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Screenshot&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;b&gt;Book list&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;kbd&gt;&lt;img src="https://dl.koodoreader.com/screenshots/1.png" width="800px" /&gt;&lt;/kbd&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Book display&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;kbd&gt;&lt;img src="https://dl.koodoreader.com/screenshots/5.png" width="800px" /&gt;&lt;/kbd&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;b&gt;List mode&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;kbd&gt;&lt;img src="https://dl.koodoreader.com/screenshots/2.png" width="800px" /&gt;&lt;/kbd&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Cover mode&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;kbd&gt;&lt;img src="https://dl.koodoreader.com/screenshots/3.png" width="800px" /&gt;&lt;/kbd&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Reader menu&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;kbd&gt;&lt;img src="https://dl.koodoreader.com/screenshots/6.png" width="800px" /&gt;&lt;/kbd&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Dark mode&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;kbd&gt;&lt;img src="https://dl.koodoreader.com/screenshots/4.png" width="800px" /&gt;&lt;/kbd&gt; 
 &lt;br /&gt; 
&lt;/div&gt;  
&lt;h2&gt;Develop&lt;/h2&gt; 
&lt;p&gt;Make sure that you have installed yarn and git&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download the repo&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/koodo-reader/koodo-reader.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enter desktop mode&lt;/p&gt; &lt;pre&gt;&lt;code&gt;yarn
yarn dev
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enter web mode&lt;/p&gt; &lt;pre&gt;&lt;code&gt;yarn
yarn start
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Translation&lt;/h2&gt; 
&lt;h3&gt;Edit current language&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Select your target language from the following list.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Click the view button to examine the source file. The untranslated terms are listed at the bottom of each file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Translate the terms to your target language based on the given English reference&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Sumbit the translation file or just translation snippets based on the amount of your translation to &lt;a href="https://github.com/koodo-reader/koodo-reader/issues/new?assignees=&amp;amp;labels=submit+translation&amp;amp;projects=&amp;amp;template=submit_translation.yml"&gt;this link&lt;/a&gt;. Pull request is also welcomed.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Language(A-Z)&lt;/th&gt; 
   &lt;th&gt;Code&lt;/th&gt; 
   &lt;th&gt;View&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Amharic&lt;/td&gt; 
   &lt;td&gt;am&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/am/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Arabic&lt;/td&gt; 
   &lt;td&gt;ar&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/ar/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Armenian&lt;/td&gt; 
   &lt;td&gt;hy&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/hy/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Bengali&lt;/td&gt; 
   &lt;td&gt;bn&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/bn/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Bulgarian&lt;/td&gt; 
   &lt;td&gt;bg&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/bg/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Chinese (CN)&lt;/td&gt; 
   &lt;td&gt;zh-CN&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/zh-CN/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Chinese (MO)&lt;/td&gt; 
   &lt;td&gt;zh-MO&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/zh-MO/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Chinese (TW)&lt;/td&gt; 
   &lt;td&gt;zh-TW&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/zh-TW/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Czech&lt;/td&gt; 
   &lt;td&gt;cs&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/cs/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Danish&lt;/td&gt; 
   &lt;td&gt;da&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/da/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dutch&lt;/td&gt; 
   &lt;td&gt;nl&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/nl/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;English&lt;/td&gt; 
   &lt;td&gt;en&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/en/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Esperanto&lt;/td&gt; 
   &lt;td&gt;eo&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/eo/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Finnish&lt;/td&gt; 
   &lt;td&gt;fi&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/fi/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;French&lt;/td&gt; 
   &lt;td&gt;fr&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/fr/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;German&lt;/td&gt; 
   &lt;td&gt;de&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/de/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Greek&lt;/td&gt; 
   &lt;td&gt;el&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/el/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hindi&lt;/td&gt; 
   &lt;td&gt;hi&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/hi/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hungarian&lt;/td&gt; 
   &lt;td&gt;hu&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/hu/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Indonesian&lt;/td&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/id/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Interlingue&lt;/td&gt; 
   &lt;td&gt;ie&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/ie/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Irish&lt;/td&gt; 
   &lt;td&gt;ga&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/ga/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Italian&lt;/td&gt; 
   &lt;td&gt;it&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/it/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Japanese&lt;/td&gt; 
   &lt;td&gt;ja&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/ja/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Korean&lt;/td&gt; 
   &lt;td&gt;ko&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/ko/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Persian&lt;/td&gt; 
   &lt;td&gt;fa&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/fa/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Polish&lt;/td&gt; 
   &lt;td&gt;pl&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/pl/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Portuguese&lt;/td&gt; 
   &lt;td&gt;pt&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/pt/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Portuguese (BR)&lt;/td&gt; 
   &lt;td&gt;pt-BR&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/pt-BR/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Romanian&lt;/td&gt; 
   &lt;td&gt;ro&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/ro/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Russian&lt;/td&gt; 
   &lt;td&gt;ru&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/ru/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Slovenian&lt;/td&gt; 
   &lt;td&gt;sl&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/sl/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Spanish&lt;/td&gt; 
   &lt;td&gt;es&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/es/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Swedish&lt;/td&gt; 
   &lt;td&gt;sv&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/sv/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Tamil&lt;/td&gt; 
   &lt;td&gt;ta&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/ta/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Thai&lt;/td&gt; 
   &lt;td&gt;th&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/th/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Tagalog&lt;/td&gt; 
   &lt;td&gt;tl&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/tl/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Tibetan&lt;/td&gt; 
   &lt;td&gt;bo&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/bo/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Turkish&lt;/td&gt; 
   &lt;td&gt;tr&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/tr/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ukrainian&lt;/td&gt; 
   &lt;td&gt;uk&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/uk/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Vietnamese&lt;/td&gt; 
   &lt;td&gt;vi&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/vi/translation.json"&gt;View&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Add new language&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;If you can't find your target language from the above list, Download the Engish source file from &lt;a href="https://raw.githubusercontent.com/koodo-reader/koodo-reader/master/src/assets/locales/en/translation.json"&gt;this link&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When you finish translation, submit the source file to &lt;a href="https://github.com/koodo-reader/koodo-reader/issues/new?assignees=&amp;amp;labels=submit+translation&amp;amp;projects=&amp;amp;template=submit_translation.yml"&gt;this link&lt;/a&gt;. Pull request is also welcomed.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>n00bcodr/Jellyfin-Enhanced</title>
      <link>https://github.com/n00bcodr/Jellyfin-Enhanced</link>
      <description>&lt;p&gt;A Jellyfin Plugin to enhance your Jellyfin Web experience.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jellyfin Enhanced&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;img src="https://img.shields.io/github/last-commit/n00bcodr/Jellyfin-Enhanced/main?logo=semantic-release&amp;amp;logoColor=white&amp;amp;label=Last%20Updated&amp;amp;labelColor=black&amp;amp;color=AA5CC3&amp;amp;cacheSeconds=3600" alt="Last Updated" /&gt; &lt;img src="https://img.shields.io/github/commit-activity/w/n00bcodr/Jellyfin-Enhanced?logo=git&amp;amp;label=Commit%20Activity&amp;amp;labelColor=black&amp;amp;color=00A4DC&amp;amp;cacheSeconds=600" alt="Commit Activity" /&gt; &lt;img src="https://img.shields.io/badge/Jellyfin%20Version-10.10.7-AA5CC3?logo=jellyfin&amp;amp;logoColor=00A4DC&amp;amp;labelColor=black" alt="Jellyfin Version" /&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;The essential enhancement suite for Jellyfin, bundling advanced features and customizations into one convenient plugin.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/images/panel_jellyfish.gif" alt="Enhanced Panel" width="90%" align="center" /&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;📑 Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#jellyfin-enhanced"&gt;Jellyfin Enhanced&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#-installation"&gt;🔧 Installation&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#docker-installation"&gt;🐳 Docker Installation Workaround&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#-features"&gt;✨ Features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#jellyseerr-search-integration"&gt;🪼 Jellyseerr Search&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#icon-states"&gt;Icon States&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#how-it-works"&gt;How It Works?&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#-internationalization--translations"&gt;🌐 Internationalization &amp;amp; Translations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#-custom-styling"&gt;🎨 Custom Styling&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#pause-screen-css"&gt;Pause Screen CSS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#quality-tags-css"&gt;Quality Tags CSS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#genre-tags-css"&gt;Genre Tags CSS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#language-tags-css"&gt;Language Tags CSS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#panel-css"&gt;Enhanced Panel CSS&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#-project-structure"&gt;🫚 Project Structure&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#file-structure"&gt;File Structure&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#component-breakdown"&gt;Component Breakdown&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#-compatibility"&gt;🧪 Compatibility&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#-faq--troubleshooting"&gt;💡 FAQ &amp;amp; Troubleshooting&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#common-errors"&gt;Common Errors&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#-screenshots"&gt;📸 Screenshots&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#-license"&gt;📄 License&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/#enjoying-jellyfin-enhanced"&gt;Enjoying Jellyfin Enhanced?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🔧 Installation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;In Jellyfin, go to &lt;strong&gt;Dashboard&lt;/strong&gt; &amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt; &amp;gt; &lt;strong&gt;Catalog&lt;/strong&gt; &amp;gt; ⚙️&lt;/li&gt; 
 &lt;li&gt;Click &lt;strong&gt;➕&lt;/strong&gt; and give the repository a name (e.g., "Jellyfin Enhanced").&lt;/li&gt; 
 &lt;li&gt;Set the &lt;strong&gt;Repository URL&lt;/strong&gt; to:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] &lt;strong&gt;If you are on Jellyfin version 10.11&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/n00bcodr/jellyfin-plugins/main/10.11/manifest.json
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you are on 10.10.7&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/n00bcodr/jellyfin-plugins/main/10.10/manifest.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Go to the &lt;strong&gt;Catalog&lt;/strong&gt; tab, find &lt;strong&gt;Jellyfin Enhanced&lt;/strong&gt; in the list, and click &lt;strong&gt;Install&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Restart&lt;/strong&gt; your Jellyfin server to complete the installation.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] It is highly recommended to have &lt;a href="https://github.com/IAmParadox27/jellyfin-plugin-file-transformation"&gt;file-transformation&lt;/a&gt; at least v2.2.1.0 installed. It helps avoid permission issues while modifying index.html on any kind of installation!&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Only if you do not have file-transformation plugin installed - proceed with the below workaround!&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;a id="docker-installation"&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary style="font-size: 1.25em;"&gt;🐳 Docker Installation Workaround&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;!&lt;/p&gt; 
  &lt;p&gt;If you have &lt;a href="https://github.com/IAmParadox27/jellyfin-plugin-file-transformation"&gt;file-transformation&lt;/a&gt; plugin installed, DO NOT proceed.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;If you're running Jellyfin through Docker, the plugin may not have permission to modify jellyfin-web to inject the script. If you see permission errors such as &lt;code&gt;'System.UnauthorizedAccessException: Access to the path '/jellyfin/jellyfin-web/index.html ' is denied.&lt;/code&gt; in your logs, you will need to map the &lt;code&gt;index.html&lt;/code&gt; file manually:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Copy the index.html file from your container:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;docker cp jellyfin:/jellyfin/jellyfin-web/index.html /path/to/your/jellyfin/config/index.html
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Add a volume mapping to your Docker run command:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;-v /path/to/your/jellyfin/config/index.html:/jellyfin/jellyfin-web/index.html
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Or for Docker Compose, add this to your volumes section:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;services:
  jellyfin:
    # ... other config
    volumes:
      - /path/to/your/jellyfin/config:/config
      - /path/to/your/jellyfin/config/index.html:/jellyfin/jellyfin-web/index.html
      # ... other volumes
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;This gives the plugin the necessary permissions to inject JavaScript into the web interface.&lt;/p&gt; 
&lt;/details&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;⌨️ Advanced Keyboard Shortcuts:&lt;/strong&gt; A comprehensive set of hotkeys for navigation, playback control, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📝 Customizable Subtitles:&lt;/strong&gt; Fine-tune the appearance of subtitles with presets for style, size, and font.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⏯️ Smart Playback:&lt;/strong&gt; Auto-pause when you switch tabs and auto-resume when you return.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;↪️ Auto-Skip Intros/Outros:&lt;/strong&gt; Binge-watch seamlessly without interruption (requires Intro Skipper plugin).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🎲 Random Item Button:&lt;/strong&gt; Discover something new in your library with a single click.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;👁️ Remove from Continue Watching:&lt;/strong&gt; Easily clean up your home screen.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔍 Streaming Provider Lookup:&lt;/strong&gt; See where else your media is available to stream across multiple regions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✒️ Show Reviews from TMDB:&lt;/strong&gt; Option to show TMDB reviews of an item in Jellyfin.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🖼️ Auto Picture-in-Picture:&lt;/strong&gt; Automatically enter Picture-in-Picture mode when switching to another tab.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📁 Show File Sizes:&lt;/strong&gt; Display the total file size of media on its detail page.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🗣️ Show Audio Languages:&lt;/strong&gt; See available audio languages with country flags on the item detail page.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🎬 Custom Pause Screen:&lt;/strong&gt; A beautifully designed, informative overlay when you pause a video. This feature is a modified version of the original script by &lt;a href="https://github.com/BobHasNoSoul/Jellyfin-PauseScreen"&gt;BobHasNoSoul&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🏷️ Quality Tags:&lt;/strong&gt; See media quality (4K, HDR, Atmos) at a glance directly on the posters. This is a modified and rewritten version of the original script by &lt;a href="https://github.com/BobHasNoSoul/Jellyfin-Qualitytags/"&gt;BobHasNoSoul&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🎭 Genre Tags:&lt;/strong&gt; Identify genres instantly with themed icons on posters.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🌐 Language Tags:&lt;/strong&gt; Displays available audio languages as flags on posters.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔗 .arr Links Integration:&lt;/strong&gt; For administrators, quickly jump to the Sonarr, Radarr, or Bazarr page for any item.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔖 Watchlist&lt;/strong&gt; Watchlist any item and access your watchlist using a &lt;a href="https://github.com/IAmParadox27/jellyfin-plugin-custom-tabs/tree/main/src"&gt;CustomTab&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🌍 Multi-language Support:&lt;/strong&gt; The interface is available in multiple languages, with more on the way.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🖼️ Custom Splash Screen:&lt;/strong&gt; A configurable splash screen that appears while Jellyfin is loading.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;h2&gt;Jellyseerr Search Integration &lt;a name="jellyseerr-search-integration"&gt;&lt;/a&gt; &lt;img src="https://cdn.jsdelivr.net/gh/selfhst/icons/svg/jellyseerr.svg?sanitize=true" width="40" height="50" align="center" /&gt;&lt;/h2&gt; 
&lt;p&gt;The Jellyfin Enhanced plugin can integrate with your Jellyseerr instance, allowing users to search for and request media directly from the Jellyfin search interface.&lt;/p&gt; 
&lt;h4&gt;Setup&lt;/h4&gt; 
&lt;p&gt;To enable the Jellyseerr integration, you must first configure it in the plugin settings:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Navigate to &lt;strong&gt;Dashboard &amp;gt; Plugins &amp;gt; Jellyfin Enhanced&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Go to the &lt;strong&gt;Jellyseerr Settings&lt;/strong&gt; tab.&lt;/li&gt; 
 &lt;li&gt;Check the &lt;strong&gt;Show Jellyseerr Results in Search&lt;/strong&gt; box to enable the feature.&lt;/li&gt; 
 &lt;li&gt;Enter your &lt;strong&gt;Jellyseerr URL(s)&lt;/strong&gt;, one per line. The plugin will use the first one that connects successfully. Should be the same Jellyseerr Instance. Intended for providing internal and external urls, ideally just internal URL should work.&lt;/li&gt; 
 &lt;li&gt;Enter your &lt;strong&gt;Jellyseerr API Key&lt;/strong&gt;. You can find this in Jellyseerr under &lt;strong&gt;Settings &amp;gt; General &amp;gt; API Key&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;You can use the test button to see if your Jellyseerr instance is reachable.&lt;/li&gt; 
 &lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/images/jellyseerr.png" width="600" style="border-radius:25px;" /&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] For the integration to work, you must also enable &lt;strong&gt;"Enable Jellyfin Sign-In"&lt;/strong&gt; in your Jellyseerr User Settings (&lt;code&gt;/settings/users&lt;/code&gt;). &lt;br /&gt; &lt;img src="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/images/jellyfin-signin.png" width="500" style="border-radius:25px;" /&gt; &lt;br /&gt; &lt;br /&gt; All users who need access to request content must be imported into Jellyseerr as Jellyfin users.&lt;/p&gt; 
 &lt;table align="center"&gt; 
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;th style="text-align:center"&gt;Users that have access&lt;/th&gt;
    &lt;th style="text-align:center"&gt;Users that don't have access (import them)&lt;/th&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/images/users-with-access.png" width="300" /&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/images/users-no-access.png" width="300" /&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Icon States&lt;/h4&gt; 
&lt;p&gt;When on the search page, a Jellyseerr icon will appear to indicate the connection status. This is the first thing to check when troubleshooting issues.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;&lt;strong&gt;Icon&lt;/strong&gt;&lt;/th&gt; 
   &lt;th align="left"&gt;&lt;strong&gt;State&lt;/strong&gt;&lt;/th&gt; 
   &lt;th align="left"&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;img width="32" alt="active" src="https://github.com/user-attachments/assets/09124764-5132-4474-83e7-c09399630b13" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;Active&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Jellyseerr is successfully connected, and the current Jellyfin user is correctly linked to a Jellyseerr user. &lt;br /&gt; Results from Jellyseerr will load along with Jellyfin and requests can be made.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;img width="32" alt="noaccess" src="https://github.com/user-attachments/assets/0db72189-04fc-4ec1-bdf1-50dd5e36d2ef" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;User Not Found&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Jellyseerr is successfully connected, but the current Jellyfin user is not linked to a Jellyseerr account. &lt;br /&gt;Ensure the user has been imported into Jellyseerr from Jellyfin. Results will not load.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;img width="32" alt="offline" src="https://github.com/user-attachments/assets/0e109ec3-038c-4471-97c1-9cc38bcd26c5" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;Offline&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;The plugin could not connect to any of the configured Jellyseerr URLs. &lt;br /&gt; Check your plugin settings and ensure Jellyseerr is running and accessible. Results will not load.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;br /&gt; 
&lt;h4&gt;How It Works?&lt;/h4&gt; 
&lt;p&gt;To ensure security and prevent browser-related Cross-Origin Resource Sharing (CORS) errors, the Jellyfin Enhanced plugin does not communicate directly with the Jellyseerr API from your browser. Instead, it uses the Jellyfin server as a proxy. This method keeps your Jellyseerr API key safe on the server and avoids security issues.&lt;/p&gt; 
&lt;p&gt;In doing so, the plugin exposes a few proxy endpoints for its own use and for troubleshooting.&lt;/p&gt; 
&lt;br /&gt; 
&lt;details&gt; 
 &lt;summary style="font-size: 1.2em; font-weight: 600;"&gt;🔌 Jellyseerr API Endpoints&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;You can use these &lt;code&gt;curl&lt;/code&gt; commands to directly interact with the plugin's API for troubleshooting. You will need to replace the placeholder values with your own.&lt;/p&gt; 
 &lt;h4&gt;Get Plugin Version&lt;/h4&gt; 
 &lt;p&gt;This endpoint checks the installed version of the Jellyfin Enhanced plugin.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl -X GET\
  "&amp;lt;JELLYFIN_ADDRESS&amp;gt;/JellyfinEnhanced/version"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br /&gt; 
 &lt;h4&gt;Get Jellyseerr Connection Status&lt;/h4&gt; 
 &lt;p&gt;Checks if the plugin can connect to any of the configured Jellyseerr URLs using the provided API key.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl -X GET\
  -H "X-Emby-Token: &amp;lt;JELLYFIN_API_KEY&amp;gt;"\
  "&amp;lt;JELLYFIN_ADDRESS&amp;gt;/JellyfinEnhanced/jellyseerr/status"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br /&gt; 
 &lt;h4&gt;Get Jellyseerr User Status&lt;/h4&gt; 
 &lt;p&gt;Verifies that the currently logged-in Jellyfin user is successfully linked to a Jellyseerr user account.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl -X GET\
  -H "X-Emby-Token: &amp;lt;JELLYFIN_API_KEY&amp;gt;"\
  -H "X-Jellyfin-User-Id: &amp;lt;JELLYFIN_USER_ID&amp;gt;"\
  "&amp;lt;JELLYFIN_ADDRESS&amp;gt;/JellyfinEnhanced/jellyseerr/user-status"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br /&gt; 
 &lt;h4&gt;Perform a Jellyseerr Search&lt;/h4&gt; 
 &lt;p&gt;Executes a search query through the Jellyseerr instance for the specified user.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl -X GET\
  -H "X-Emby-Token: &amp;lt;JELLYFIN_API_KEY&amp;gt;"\
  -H "X-Jellyfin-User-Id: &amp;lt;JELLYFIN_USER_ID&amp;gt;"\
  "&amp;lt;JELLYFIN_ADDRESS&amp;gt;/JellyfinEnhanced/jellyseerr/search?query=Inception"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br /&gt; 
 &lt;h4&gt;Make a Request on Jellyseerr&lt;/h4&gt; 
 &lt;p&gt;Submits a media request to Jellyseerr on behalf of the specified user. &lt;br /&gt; mediaType can be &lt;code&gt;tv&lt;/code&gt; or &lt;code&gt;movie&lt;/code&gt; &lt;br /&gt; mediaId is the TMDB ID of the item&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl -X POST\
  -H "X-Emby-Token: &amp;lt;JELLYFIN_API_KEY&amp;gt;"\
  -H "X-Jellyfin-User-Id: &amp;lt;JELLYFIN_USER_ID&amp;gt;"\
  -H "Content-Type: application/json"\
  -d '{"mediaType": "movie", "mediaId": 27205}'\
  "&amp;lt;JELLYFIN_ADDRESS&amp;gt;/JellyfinEnhanced/jellyseerr/request"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;🔧 Customization &amp;amp; Advanced Use&lt;/h2&gt; 
&lt;h3&gt;🌐 Internationalization &amp;amp; Translations&lt;/h3&gt; 
&lt;p&gt;The plugin detects the Jellyfin user profile language automatically. List of currently supported languages &lt;a href="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/Jellyfin.Plugin.JellyfinEnhanced%5Cjs%5Clocales"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Is your language missing or incorrect? You can help translate Jellyfin Enhanced for the community!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find the Translation Files: Navigate to the &lt;code&gt;Jellyfin.Plugin.JellyfinEnhanced/js/locales/&lt;/code&gt; directory in this repository.&lt;/li&gt; 
 &lt;li&gt;Make a copy of &lt;code&gt;en.json&lt;/code&gt; and rename it to your language's two-letter ISO 639-1 code (e.g., &lt;code&gt;es.json&lt;/code&gt; for Spanish, &lt;code&gt;pl.json&lt;/code&gt; for Polish).&lt;/li&gt; 
 &lt;li&gt;Translate: Open your new file and translate the English text on the right side of the colons (:).&lt;/li&gt; 
 &lt;li&gt;Submit a Pull Request: Once you're done, submit a pull request with your new translation file.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;h3&gt;🎨 Custom Styling&lt;/h3&gt; 
&lt;h3&gt;&lt;a id="pause-screen-css"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary style="font-size: 1.2em;"&gt;Pause Screen&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;If you do not want an element in the pause screen, you can customize by hiding them to your liking.&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Element&lt;/th&gt; 
    &lt;th&gt;CSS Selector&lt;/th&gt; 
    &lt;th&gt;Example CSS to Hide&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Logo&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-logo&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-logo { display: none; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Details&lt;/strong&gt; (Year, Rating, Runtime)&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-details&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-details { display: none; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Plot/Description&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-plot&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-plot { display: none; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Entire Progress Bar&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-progress-wrap&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-progress-wrap { display: none; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Spinning Disc&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-disc&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-disc { display: none; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Blurred Backdrop&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-backdrop&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;#pause-screen-backdrop { display: none; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Time Display&lt;/strong&gt; (Current / Total)&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.progress-time&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.progress-time { display: none; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;"Ends At" Time&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.progress-ends-at&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.progress-ends-at { display: none; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Percentage Watched&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.progress-percentage&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.progress-percentage { display: none; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;a id="quality-tags-css"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary style="font-size: 1.2em;"&gt;Quality Tags&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;Quality tags are injected into each card/poster with this structure:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div class="cardImageContainer" style="position: relative;"&amp;gt;
    &amp;lt;div class="quality-overlay-container"&amp;gt;
        &amp;lt;div class="quality-overlay-label resolution" data-quality="4K"&amp;gt;4K&amp;lt;/div&amp;gt;
        &amp;lt;div class="quality-overlay-label video-codec" data-quality="HDR"&amp;gt;HDR&amp;lt;/div&amp;gt;
        &amp;lt;div class="quality-overlay-label audio-codec" data-quality="ATMOS"&amp;gt;ATMOS&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Classes &amp;amp; Attributes&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;.quality-overlay-container&lt;/code&gt;&lt;/strong&gt; → Wrapper for all tags (positioned top-left by default).&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;.quality-overlay-label&lt;/code&gt;&lt;/strong&gt; → Base class for each tag.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Category classes&lt;/strong&gt;: 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;.resolution&lt;/code&gt; – resolution tags (&lt;code&gt;8K&lt;/code&gt;, &lt;code&gt;4K&lt;/code&gt;, &lt;code&gt;1080p&lt;/code&gt;, &lt;code&gt;LOW-RES&lt;/code&gt;, etc.)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;.video-codec&lt;/code&gt; – video features (&lt;code&gt;HDR&lt;/code&gt;, &lt;code&gt;Dolby Vision&lt;/code&gt;, etc.)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;.audio-codec&lt;/code&gt; – audio formats/channels (&lt;code&gt;ATMOS&lt;/code&gt;, &lt;code&gt;DTS&lt;/code&gt;, &lt;code&gt;5.1&lt;/code&gt;, etc.)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;data-quality="..."&lt;/code&gt;&lt;/strong&gt; → Exact tag text (e.g. &lt;code&gt;data-quality="HDR10+"&lt;/code&gt;).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;br /&gt; 
 &lt;h2&gt;&lt;strong&gt;Customization Examples&lt;/strong&gt;&lt;/h2&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Element&lt;/th&gt; 
    &lt;th&gt;CSS Selector&lt;/th&gt; 
    &lt;th&gt;Example CSS&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;All Tags&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-label&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-label { font-size: 0.8rem !important; padding: 3px 10px !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Tag Container Position&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-container&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-container { left: auto !important; right: 6px !important; align-items: flex-end !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Specific Tag (e.g., 4K)&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-label[data-quality="4K"]&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-label[data-quality="4K"] { background-color: purple !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;HDR Tag&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-label[data-quality="HDR"]&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-label[data-quality="HDR"] { border: 2px solid gold !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Low Resolution Tag&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-label[data-quality="LOW-RES"]&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-label[data-quality="LOW-RES"] { opacity: 0.7 !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Stack Tags Horizontally&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-container&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.quality-overlay-container { flex-direction: row !important; flex-wrap: wrap !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;br /&gt; 
 &lt;h2&gt;&lt;strong&gt;CSS Examples&lt;/strong&gt;&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Style all tags&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.quality-overlay-label {
    font-size: 0.8rem !important;
    border-radius: 4px !important;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Target a category&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.quality-overlay-label.resolution { background: blue !important; }
.quality-overlay-label.audio-codec { background: green !important; }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Target a specific tag&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.quality-overlay-label[data-quality="HDR"] {
    border: 2px solid gold !important;
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.quality-overlay-label[data-quality="4K"] {
    background: linear-gradient(45deg, #c0392b, #e74c3c) !important;
    color: white !important;
    order: -1; /* Appear first */
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hide unwanted tags&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;/* Hide all low-res */
.quality-overlay-label[data-quality="LOW-RES"] { display: none !important; }

  /* Only show resolution tags */
.quality-overlay-label.video-codec,
.quality-overlay-label.audio-codec{ display: none !important; }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Always use &lt;code&gt;!important&lt;/code&gt; to ensure your custom styles override the defaults.&lt;/li&gt; 
   &lt;li&gt;Only the &lt;strong&gt;best resolution&lt;/strong&gt; tag per item is shown (e.g. you won’t see both 4K and 1080p).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;LOW-RES&lt;/code&gt; is the fallback for anything below 480p.&lt;/li&gt; 
   &lt;li&gt;Tags are sorted automatically with resolution first, then video features, then audio.&lt;/li&gt; 
   &lt;li&gt;Position can be controlled via the Enhanced Panel settings under.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;a id="genre-tags-css"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary style="font-size: 1.2em;"&gt;Genre Tags&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;Genre tags appear on the top right of posters. By default, they are circular icons that expand on hover to show the genre name.&lt;/p&gt; 
 &lt;p&gt;The HTML structure for the tags is as follows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div class="cardImageContainer"&amp;gt;
    &amp;lt;div class="genre-overlay-container"&amp;gt;
        &amp;lt;div class="genre-tag" title="Action"&amp;gt;
            &amp;lt;span class="material-icons"&amp;gt;local_fire_department&amp;lt;/span&amp;gt;
            &amp;lt;span class="genre-text"&amp;gt;Action&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;.genre-overlay-container&lt;/code&gt;&lt;/strong&gt;: The main container for all genre tags on a card.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;.genre-tag&lt;/code&gt;&lt;/strong&gt;: The individual tag for a single genre.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;.genre-text&lt;/code&gt;&lt;/strong&gt;: The text part of the tag, which is hidden by default.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;.card:hover .genre-tag&lt;/code&gt;&lt;/strong&gt;: This selector is used to define the expanded style when a user hovers over the card.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;br /&gt; 
 &lt;h2&gt;&lt;strong&gt;Customization Examples&lt;/strong&gt;&lt;/h2&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Element&lt;/th&gt; 
    &lt;th&gt;CSS Selector&lt;/th&gt; 
    &lt;th&gt;Example CSS&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;All Tags&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-tag&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-tag { background-color: #007bff !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Icon Size&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-tag .material-icons&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-tag .material-icons { font-size: 22px !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Text Style&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-tag .genre-text&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-tag .genre-text { font-weight: bold !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Remove Hover Animation&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.card:hover .genre-tag&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.card:hover .genre-tag { width: 30px !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Always Show Text&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-tag .genre-text&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-tag .genre-text { display: inline !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Stack Horizontally&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-overlay-container&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.genre-overlay-container { flex-direction: row !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;br /&gt; 
 &lt;h2&gt;&lt;strong&gt;CSS Examples&lt;/strong&gt;&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Make Tags Square Instead of Circular&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.genre-tag {
    border-radius: 4px !important;
}
.card:hover .genre-tag {
    border-radius: 4px !important;
}

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Always Show Text (No Hover Animation)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.genre-tag {
    width: auto !important;
    border-radius: 14px !important;
    padding: 0 8px !important;
}
.genre-tag .genre-text {
    display: inline !important;
}

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Change the Background Color&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.genre-tag {
    background-color: rgba(100, 100, 255, 0.8) !important;
    color: #fff !important;
}

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Remember to use &lt;code&gt;!important&lt;/code&gt; in your custom CSS to override the default styles from the plugin.&lt;/li&gt; 
   &lt;li&gt;The plugin will show a maximum of three genre tags per item.&lt;/li&gt; 
   &lt;li&gt;Position can be controlled via the Enhanced Panel settings under.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;a id="language-tags-css"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary style="font-size: 1.2em;"&gt;Language Tags&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;Language tags appear as country flag icons on posters to indicate available audio languages. By default, they are positioned in the bottom-left corner and show up to 3 unique language flags per item.&lt;/p&gt; 
 &lt;p&gt;The HTML structure for language tags is as follows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div class="cardImageContainer"&amp;gt;
    &amp;lt;div class="language-overlay-container"&amp;gt;
        &amp;lt;img src="https://flagcdn.com/w20/gb.png" class="language-flag" alt="English" loading="lazy"&amp;gt;
        &amp;lt;img src="https://flagcdn.com/w20/fr.png" class="language-flag" alt="French" loading="lazy"&amp;gt;
        &amp;lt;img src="https://flagcdn.com/w20/es.png" class="language-flag" alt="Spanish" loading="lazy"&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;.language-overlay-container&lt;/code&gt;&lt;/strong&gt;: The main container for all language flag icons on a card.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;.language-flag&lt;/code&gt;&lt;/strong&gt;: The individual flag image for each language.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;br /&gt; 
 &lt;h2&gt;&lt;strong&gt;Customization Examples&lt;/strong&gt;&lt;/h2&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Element&lt;/th&gt; 
    &lt;th&gt;CSS Selector&lt;/th&gt; 
    &lt;th&gt;Example CSS&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;All Flag Icons&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-flag&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-flag { width: 20px !important; height: 15px !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Container Position&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-overlay-container&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-overlay-container { bottom: 10px !important; left: 10px !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Flag Spacing&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-overlay-container&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-overlay-container { gap: 2px !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Hide Language Tags&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-overlay-container&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-overlay-container { display: none !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Stack Horizontally&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-overlay-container&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;.language-overlay-container { flex-direction: row !important; }&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;br /&gt; 
 &lt;h2&gt;&lt;strong&gt;CSS Examples&lt;/strong&gt;&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Change Flag Size&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.language-flag {
    width: 30px !important;
    height: auto !important;
    border-radius: 3px !important;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add Border and Shadow to Flags&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.language-flag {
    border: 1px solid rgba(255, 255, 255, 0.3) !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stack Flags Horizontally in a Row&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;.language-overlay-container {
    flex-direction: row !important;
    gap: 4px !important;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Always use &lt;code&gt;!important&lt;/code&gt; to ensure your custom styles override the defaults.&lt;/li&gt; 
   &lt;li&gt;Language tags use flag icons from &lt;a href="https://flagcdn.com"&gt;flagcdn.com&lt;/a&gt; service.&lt;/li&gt; 
   &lt;li&gt;The plugin shows a maximum of 3 unique language flags per item.&lt;/li&gt; 
   &lt;li&gt;Position can be controlled via the Enhanced Panel settings under.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;a id="panel-css"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary style="font-size: 1.25em; font-weight: 600;"&gt;Enhanced Panel&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;The Enhanced Panel automatically adapts its styling to match your current Jellyfin theme. It detects popular themes like Jellyfish and ElegantFin and uses their color schemes for seamless integration.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Supported Themes:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Jellyfish&lt;/strong&gt;: Uses theme's accent colors and blur effects&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;ElegantFin&lt;/strong&gt;: Matches the theme's header and accent colors&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Default&lt;/strong&gt;: Clean, universal styling for unrecognized themes&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;Automatic Theme Detection:&lt;/strong&gt; The panel detects your active theme using unique CSS variables and applies appropriate styling without any configuration needed.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Custom Styling:&lt;/strong&gt; If you want to override the automatic theming or customize the panel appearance further, you can use the CSS selectors below.&lt;/p&gt; 
 &lt;p&gt;Sample custom styling:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-css"&gt;
    /*
    * ===================================================================
    * Universal Style Override for the Jellyfin Enhanced Panel
    * ===================================================================
    */

    /* --- Main Panel &amp;amp; Backdrop --- */
    #jellyfin-enhanced-panel {
        background: rgba(25, 35, 45, 0.85) !important;
        border: 1px solid rgba(125, 150, 175, 0.3) !important;
        backdrop-filter: blur(20px) !important;
        color: #e6e6e6 !important;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5) !important;
    }

    /* --- Panel Header --- */
    #jellyfin-enhanced-panel &amp;gt; div:first-child {
        background: rgba(0, 0, 0, 0.25) !important;
        border-bottom: 1px solid rgba(125, 150, 175, 0.3) !important;
    }

    /* --- Main Title ("Jellyfin Enhanced") --- */
    #jellyfin-enhanced-panel div[style*="-webkit-background-clip: text"] {
        background: linear-gradient(135deg, #00a4dc, #aa5cc3) !important;
        -webkit-background-clip: text !important;
        -webkit-text-fill-color: transparent !important;
    }

    /* --- Tab Buttons --- */
    #jellyfin-enhanced-panel .tab-button {
        background: rgba(0, 0, 0, 0.2) !important;
        color: rgba(255, 255, 255, 0.6) !important;
        border-bottom: 3px solid transparent !important;
    }

    #jellyfin-enhanced-panel .tab-button:hover {
        background: rgba(0, 0, 0, 0.4) !important;
        color: #ffffff !important;
    }

    #jellyfin-enhanced-panel .tab-button.active {
        color: #ffffff !important;
        border-bottom-color: #00a4dc !important;
        background: rgba(0, 0, 0, 0.3) !important;
    }

    /* --- Section Headers &amp;amp; &amp;lt;details&amp;gt; Summary --- */
    #jellyfin-enhanced-panel h3,
    #jellyfin-enhanced-panel details summary {
        color: #00a4dc !important;
    }

    /* --- Collapsible &amp;lt;details&amp;gt; Sections --- */
    #jellyfin-enhanced-panel details {
        background-color: rgba(0, 0, 0, 0.2) !important;
        border: 1px solid rgba(125, 150, 175, 0.2) !important;
    }

    /* --- Keyboard Key Styling (&amp;lt;kbd&amp;gt;) --- */
    #jellyfin-enhanced-panel kbd,
    .shortcut-key {
        background: #34495e !important;
        color: #ecf0f1 !important;
        border: 1px solid #2c3e50 !important;
        box-shadow: 0 2px 0 #2c3e50;
    }

    /* --- Toggles &amp;amp; Checkboxes --- */
    #jellyfin-enhanced-panel input[type="checkbox"] {
        accent-color: #aa5cc3 !important;
    }

    /* --- Panel Footer --- */
    #jellyfin-enhanced-panel .panel-footer {
        background: rgba(0, 0, 0, 0.25) !important;
        border-top: 1px solid rgba(125, 150, 175, 0.3) !important;
    }

    /* --- Buttons in Footer --- */
    #jellyfin-enhanced-panel .footer-buttons a,
    #jellyfin-enhanced-panel .footer-buttons button {
        background-color: rgba(255, 255, 255, 0.08) !important;
        transition: background-color 0.2s ease;
    }

    #jellyfin-enhanced-panel .footer-buttons a:hover,
    #jellyfin-enhanced-panel .footer-buttons button:hover {
        background-color: rgba(255, 255, 255, 0.15) !important;
    }

    /* --- Style for Toast Notifications --- */
    .jellyfin-enhanced-toast {
        background: linear-gradient(135deg, #00a4dc, #aa5cc3) !important;
        color: white !important;
        border: none !important;
        backdrop-filter: blur(10px) !important;
    }

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;h2&gt;🫚 Project Structure&lt;/h2&gt; 
&lt;p&gt;The original monolithic &lt;code&gt;plugin.js&lt;/code&gt; has been refactored into a modular, component-based structure to improve maintainability, readability, and scalability. The new architecture uses a single entry point (&lt;code&gt;plugin.js&lt;/code&gt;) that dynamically loads all other feature components.&lt;/p&gt; 
&lt;h3&gt;File Structure&lt;/h3&gt; 
&lt;p&gt;All client-side scripts are now located in the &lt;code&gt;Jellyfin.Plugin.JellyfinEnhanced/js/&lt;/code&gt; directory.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
Jellyfin.Plugin.JellyfinEnhanced/
└── js/
    ├── locales/
    │ ├── &amp;lt;language1&amp;gt;.json
    │ ├── &amp;lt;language2&amp;gt;.json
    │ ├── &amp;lt;language3&amp;gt;.json
    │ ├── ...
    ├── enhanced/
    │   ├── config.js
    │   ├── events.js
    │   ├── features.js
    │   ├── playback.js
    │   ├── subtitles.js
    │   └── ui.js
    ├── jellyseerr/
    │   ├── api.js
    │   ├── jellyseerr.js
    │   ├── modal.js
    │   └── ui.js
    ├── watchlist/
    │   └── watchlist.js
    ├── migrate.js
    ├── reviews.js
    ├── splashscreen.js
    ├── arr-links.js
    ├── elsewhere.js
    ├── pausescreen.js
    ├── qualitytags.js
    ├── genretags.js
    ├── languagetags.js
    └── plugin.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Component Breakdown&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;plugin.js&lt;/code&gt;&lt;/strong&gt;: The main entry point. It loads the plugin configuration and translations, then dynamically injects all other component scripts.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;/enhanced/&lt;/code&gt;&lt;/strong&gt;: Contains the core components of the "Jellyfin Enhanced" feature set.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;config.js&lt;/code&gt;&lt;/strong&gt;: Manages all settings, both from the plugin backend and the user's local storage. It initializes and holds shared variables and configurations that other components access.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;subtitles.js&lt;/code&gt;&lt;/strong&gt;: Isolates all logic related to subtitle styling, including presets and the function that applies styles to the video player.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;ui.js&lt;/code&gt;&lt;/strong&gt;: Responsible for creating, injecting, and managing all visual elements like the main settings panel, toast notifications, and various buttons.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;playback.js&lt;/code&gt;&lt;/strong&gt;: Centralizes all functions that directly control the video player, such as changing speed, seeking, cycling through tracks, and auto-skip logic.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;features.js&lt;/code&gt;&lt;/strong&gt;: Contains the logic for non-playback enhancements like the random item button, file size display, audio language display, and "Remove from Continue Watching".&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;events.js&lt;/code&gt;&lt;/strong&gt;: The active hub of the plugin. It listens for user input (keyboard/mouse), browser events (tab switching), and DOM changes to trigger the appropriate functions from other components.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;/jellyseerr/&lt;/code&gt;&lt;/strong&gt;: This directory contains all components related to the Jellyseerr integration.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;api.js&lt;/code&gt;&lt;/strong&gt;: Handles all direct communication with the Jellyseerr proxy endpoints on the Jellyfin server.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;modal.js&lt;/code&gt;&lt;/strong&gt;: A dedicated component for creating and managing the advanced request modals.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;ui.js&lt;/code&gt;&lt;/strong&gt;: Manages all visual elements of the integration, like result cards, request buttons, and status icons.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;jellyseerr.js&lt;/code&gt;&lt;/strong&gt;: The main controller for the integration, orchestrating the other components and managing state.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;/watchlist/&lt;/code&gt;&lt;/strong&gt;: This directory contains the watchlist functionality.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;watchlist.js&lt;/code&gt;&lt;/strong&gt;: A loader script that dynamically fetches watchlist functionality from &lt;a href="https://github.com/ranaldsgift/kefintweaks"&gt;KefinTweaks&lt;/a&gt;. It loads the necessary scripts and CSS from the configured version (or master by default), including &lt;code&gt;utils.js&lt;/code&gt;, &lt;code&gt;localStorageCache.js&lt;/code&gt;, &lt;code&gt;modal.js&lt;/code&gt;, &lt;code&gt;cardBuilder.js&lt;/code&gt;, and the main &lt;code&gt;watchlist.js&lt;/code&gt; implementation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;migrate.js&lt;/code&gt;&lt;/strong&gt;: Handles one-time migration of user settings from browser localStorage to server-side storage. This allows users who upgraded from earlier versions to seamlessly migrate their settings, shortcuts, elsewhere preferences, and bookmarks to the new server-based configuration system.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;reviews.js&lt;/code&gt;&lt;/strong&gt;: Adds a section for TMDB user reviews on item detail pages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;splashscreen.js&lt;/code&gt;&lt;/strong&gt;: Manages the custom splash screen that appears when the application is loading.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;arr-links.js&lt;/code&gt;&lt;/strong&gt;: Adds convenient links to Sonarr, Radarr, and Bazarr on item detail pages only for administrators.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;elsewhere.js&lt;/code&gt;&lt;/strong&gt;: Powers the "Jellyfin Elsewhere" feature for finding media on other streaming services.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;pausescreen.js&lt;/code&gt;&lt;/strong&gt;: Displays a custom, informative overlay when a video is paused.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;qualitytags.js&lt;/code&gt;&lt;/strong&gt;: Manages the display of media quality information (like 4K, HDR, and Atmos) as tags directly on the posters.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;genretags.js&lt;/code&gt;&lt;/strong&gt;: Manages the display of media genre information as tags directly on the posters.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;languagetags.js&lt;/code&gt;&lt;/strong&gt;: Manages the display of audio language information as flag icons directly on the posters.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;🧪 Compatibility&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Official Jellyfin Web UI&lt;/li&gt; 
 &lt;li&gt;Official Jellyfin Android and iOS Apps&lt;/li&gt; 
 &lt;li&gt;Official Jellyfin Desktop Apps (Not tested, but ideally should work)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Functionality does not work on anything that does not use Jellyfin Embedded web UI, such as 3rd party apps, Android TV App etc.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;💡 FAQ &amp;amp; Troubleshooting&lt;/h2&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Can I customize the keyboard shortcuts?&lt;/strong&gt;&lt;/summary&gt; Yes, you can! Open the Jellyfin Enhanced panel by clicking the menu item in the sidebar or pressing `?`. In the "Shortcuts" tab, you can click on any key to set a new custom shortcut. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Does this plugin work on the Jellyfin mobile app?&lt;/strong&gt;&lt;/summary&gt; Yes, the plugin is compatible with the official Jellyfin Android and iOS apps, as well as the desktop and web UIs. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Does this plugin work on Android TV or other TVs?&lt;/strong&gt;&lt;/summary&gt; No, this plugin does not work on the native Jellyfin app for Android TV, or other similar TV platforms. The plugin taps into the Jellyfin web interface, so it only functions on clients that use the embedded web UI, such as the official Web, Desktop, and mobile apps. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Why is the "Remove from Continue Watching" feature destructive?&lt;/strong&gt;&lt;/summary&gt; This feature works by resetting the playback progress of an item to zero. While this removes it from the "Continue Watching" list, it also means the user's watch history for that item is lost. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Where is the userscript?&lt;/strong&gt;&lt;/summary&gt; With the plugin functionality growing and diverging from the userscript, I had to remove it to avoid confusion. But if you just want the keyboard shortcuts and other functionality, the last updated version is [**here**](https://github.com/n00bcodr/Jellyfin-Enhanced/raw/05dd5b54802f149e45c76102dabf6235aaf7a5fb/jf_enhanced.user.js). 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;How do I change the plugin's language?&lt;/strong&gt;&lt;/summary&gt; The plugin automatically uses the language set in your Jellyfin user profile. If your language isn't available, it will default to English. See the "Internationalization" section above to learn how you can contribute a translation! 
&lt;/details&gt; 
&lt;h3&gt;Troubleshooting&lt;/h3&gt; 
&lt;h2&gt;Gathering Logs for Troubleshooting Jellyfin Enhanced&lt;/h2&gt; 
&lt;p&gt;When reporting a bug or issue with the Jellyfin Enhanced plugin, providing logs is crucial for diagnosing the problem. There are three main types of logs that might be needed based on the issue:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Console Logs (Browser):&lt;/strong&gt; These logs capture messages, errors, and warnings generated by the plugins scripts when running or trying to run in your browser.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;When are they needed:&lt;/strong&gt; Best for script not loading at all, issue with a feature, errors when clicking buttons, visual glitches, etc,&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;What to look for:&lt;/strong&gt; Filter the console with &lt;code&gt;"🪼Jellyfin Enhanced"&lt;/code&gt; or for watchlist &lt;code&gt;"[Watchlist]"&lt;/code&gt; and look for any errors.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Network Logs (Browser):&lt;/strong&gt; These logs record all the network requests made by your browser tab. This includes requests made by Jellyfin Enhanced to the Jellyfin server. These record all the proxy calls to TMDB, Jellyseerr, Watchlist Homescreen section and also settings being updated and read from server storage.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;When needed:&lt;/strong&gt; Best for issues related to data not loading, features failing to communicate with the server (like Jellyseerr search/requests, saving settings, Elsewhere lookups), or slow performance potentially caused by network problems.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;What to look for:&lt;/strong&gt; Filter the log with &lt;code&gt;"JellyfinEnhanced"&lt;/code&gt; or for watchlist &lt;code&gt;"Watchlist"&lt;/code&gt; and look for any errors in status codes.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server Logs (&lt;code&gt;Jellyfin Admin Dashboard &amp;gt; Logs&lt;/code&gt;):&lt;/strong&gt; These logs are generated by the Jellyfin server itself and capture backend activity, including plugin operations, API requests, and potential server-side errors.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;When needed:&lt;/strong&gt; Best for issues related to plugin installation, server-side configuration problems (like Jellyseerr connection failures reported by the plugin settings page test button), permission errors (like failing to modify &lt;code&gt;index.html&lt;/code&gt;), or crashes.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;What to look for:&lt;/strong&gt; Look for errors mentioning &lt;code&gt;"JellyfinEnhanced"&lt;/code&gt; or &lt;code&gt;"Jellyfin Enhanced"&lt;/code&gt; also look for errors int he log files by Jellyfin Enhanced (e.g. &lt;code&gt;JellyfinEnhanced_yyyy-mm-dd.log&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] If you do not know how to access your Browser's Developer Tools to collect the logs, you should really use the power of internet to figure that out. or follow this &lt;a href="https://www.google.com/search?q=How+to+access+my+browser%27s+developer+tools%3F"&gt;link&lt;/a&gt;&amp;gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Common Errors&lt;/h3&gt; 
&lt;p&gt;Here is a list of common errors you might see in your Jellyfin server logs or your browser's developer console, and way forward.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Error&lt;/th&gt; 
   &lt;th&gt;Way forward&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Access to the path '/jellyfin/jellyfin-web/index.html ' is denied.&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Meaning:&lt;/strong&gt; The plugin was unable to edit the &lt;code&gt;index.html&lt;/code&gt; file to inject its script. &lt;br /&gt; &lt;strong&gt;Solution:&lt;/strong&gt; This is common in Docker installs. Follow the &lt;strong&gt;Docker Installation Notes&lt;/strong&gt; in the README to correctly map the &lt;code&gt;index.html&lt;/code&gt; file or use file-transformation plugin.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt; Access to the path 'C:\Program Files\Jellyfin\Server\jellyfin-web\index.html' is denied.&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Meaning:&lt;/strong&gt; The plugin was unable to edit the &lt;code&gt;index.html&lt;/code&gt; file to inject its script on windows installation &lt;br /&gt; &lt;strong&gt;Solution:&lt;/strong&gt; Grant &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; permissions for the Jellyfin folder for "NETWORK SERVICE". Refer &lt;a href="https://github.com/n00bcodr/Jellyfin-Enhanced/issues/79"&gt;#79&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Plugin is installed fine, but the scrips do not load&lt;/td&gt; 
   &lt;td&gt;If it is not the above two, and if you are on Jellyfin Version &lt;strong&gt;10.11&lt;/strong&gt; &lt;br /&gt; There seems to be an issue with how startup tasks are migrated from 10.10.7 to 10.11, Please check for &lt;code&gt;Jellyfin Enhanced Startup&lt;/code&gt; task in your Scheduled Tasks in your Admin Dashboard and see if it is run. If not run it. &lt;br /&gt;&lt;br /&gt; Also check if you have "Task Trigger" to run &lt;strong&gt;On application startup&lt;/strong&gt; if you do not, please add a new trigger with that trigger type.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Reviews, Elsewhere, Elsewhere Icons on Jellyseerr are not working&lt;/td&gt; 
   &lt;td&gt;TMDB API might not be accessible in your region. &lt;br /&gt;Checkout the official Jellyseerr Troubleshooting guide &lt;a href="https://docs.seerr.dev/troubleshooting#tmdb-failed-to-retrievefetch-xxx"&gt;here&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;📸 Screenshots&lt;/h2&gt; 
&lt;table align="center"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th style="text-align:center"&gt;Shortcuts&lt;/th&gt; 
   &lt;th style="text-align:center"&gt;Settings&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/images/shortcuts.png" width="1000" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/images/settings.png" width="1000" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th style="text-align:center"&gt;Pausescreen&lt;/th&gt; 
   &lt;th style="text-align:center"&gt;Elsewhere&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/images/pausescreen.png" width="1000" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/n00bcodr/Jellyfin-Enhanced/main/images/elsewhere.png" width="1000" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;📄 License&lt;/h2&gt; 
&lt;p&gt;MIT License&lt;/p&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;strong&gt;Made with 💜 for Jellyfin and the community&lt;/strong&gt;&lt;/p&gt; 
 &lt;h3&gt;Enjoying Jellyfin Enhanced?&lt;/h3&gt; 
 &lt;p&gt;Checkout my other repos!&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/n00bcodr/Jellyfin-Enhanced"&gt;Jellyfin-Enhanced&lt;/a&gt; (javascript/plugin) • &lt;a href="https://github.com/n00bcodr/Jellyfin-Elsewhere"&gt;Jellyfin-Elsewhere&lt;/a&gt; (javascript) • &lt;a href="https://github.com/n00bcodr/JellyfinTweaks"&gt;Jellyfin-Tweaks&lt;/a&gt; (plugin) • &lt;a href="https://github.com/n00bcodr/Jellyfin-JavaScript-Injector"&gt;Jellyfin-JavaScript-Injector&lt;/a&gt; (plugin) • &lt;a href="https://github.com/n00bcodr/Jellyfish/"&gt;Jellyfish&lt;/a&gt; (theme)&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; -------------------------------------------------- &lt;/p&gt; 
&lt;br /&gt;</description>
    </item>
    
    <item>
      <title>sudheerj/javascript-interview-questions</title>
      <link>https://github.com/sudheerj/javascript-interview-questions</link>
      <description>&lt;p&gt;List of 1000 JavaScript Interview Questions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Interview Questions &amp;amp; Answers&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Click &lt;span&gt;⭐&lt;/span&gt;if you like the project and follow &lt;a href="https://twitter.com/SudheerJonna"&gt;@SudheerJonna&lt;/a&gt; for more updates. Coding questions available &lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#coding-exercise"&gt;here&lt;/a&gt;. Check &lt;a href="https://github.com/sudheerj/datastructures-algorithms"&gt;DataStructures and Algorithms&lt;/a&gt; for DSA related questions and &lt;a href="https://github.com/sudheerj/ECMAScript-features"&gt;ECMAScript&lt;/a&gt; for all ES features.).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;div&gt; 
 &lt;p align="center"&gt; &lt;a href="https://www.greatfrontend.com/questions/formats/javascript-functions?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=sudheerj-js&amp;amp;fpr=sudheerj&amp;amp;gnrs=sudheerj"&gt; &lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/collab/greatfrontend-js.gif" alt="GreatFrontEnd JavaScript Interview Questions" width="100%" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Practice 280+ JavaScript coding interview questions in-browser. Built by ex-FAANG interviewers. No AI-generated fluff. No fake reviews. &lt;a href="https://www.greatfrontend.com/questions/formats/javascript-functions?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=sudheerj-js&amp;amp;fpr=sudheerj&amp;amp;gnrs=sudheerj"&gt;Try GreatFrontEnd →&lt;/a&gt; 💡&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://zerotomastery.io/?utm_source=github&amp;amp;utm_medium=sponsor&amp;amp;utm_campaign=javascript-interview-questions"&gt; &lt;img src="https://process.fs.teachablecdn.com/ADNupMnWyR7kCWRvm76Laz/resize=height:70/https://www.filepicker.io/api/file/AKYtjj5SSGyJuyZrkAB2" alt="ZTM Logo" width="100" height="50" /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;p align="center"&gt; &lt;/p&gt;
&lt;ol&gt; 
 &lt;li&gt;Take this &lt;a href="https://links.zerotomastery.io/jsp_sudheer"&gt;JavaScript Projects&lt;/a&gt; course to go from a JS beginner to confidently building your own projects&lt;/li&gt; 
 &lt;li&gt;Take this &lt;a href="https://links.zerotomastery.io/mci_sudheer2"&gt;coding interview bootcamp&lt;/a&gt; if you’re serious about getting hired and don’t have a CS degree&lt;/li&gt; 
 &lt;li&gt;Take this &lt;a href="https://links.zerotomastery.io/ajs_sudheer"&gt;Advanced JavaScript Course&lt;/a&gt; to learn advanced JS concepts and become a top JS developer&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;!-- TOC_START --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;No.&lt;/th&gt; 
   &lt;th&gt;Questions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-possible-ways-to-create-objects-in-javascript"&gt;What are the possible ways to create objects in JavaScript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-prototype-chain"&gt;What is a prototype chain&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-call-apply-and-bind"&gt;What is the Difference Between &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, and &lt;code&gt;bind&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-json-and-its-common-operations"&gt;What is JSON and its common operations&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-array-slice-method"&gt;What is the purpose of the array slice method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-array-splice-method"&gt;What is the purpose of the array splice method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;7&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-slice-and-splice"&gt;What is the difference between slice and splice&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;8&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-compare-object-and-map"&gt;How do you compare Object and Map&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;9&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between--and--operators"&gt;What is the difference between == and === operators&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-lambda-expressions-or-arrow-functions"&gt;What are lambda expressions or arrow functions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-first-class-function"&gt;What is a first class function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;12&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-first-order-function"&gt;What is a first order function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;13&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-higher-order-function"&gt;What is a higher order function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;14&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-unary-function"&gt;What is a unary function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;15&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-currying-function"&gt;What is the currying function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;16&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-pure-function"&gt;What is a pure function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;17&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-benefits-of-pure-functions"&gt;What are the benefits of pure functions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;18&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-let-keyword"&gt;What is the purpose of the let keyword&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;19&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-let-and-var"&gt;What is the difference between let and var&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;20&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-reason-to-choose-the-name-let-as-a-keyword"&gt;What is the reason to choose the name let as a keyword&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;21&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-redeclare-variables-in-a-switch-block-without-an-error"&gt;How do you redeclare variables in a switch block without an error&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;22&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-temporal-dead-zone"&gt;What is the Temporal Dead Zone&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-iife-immediately-invoked-function-expression"&gt;What is an IIFE (Immediately Invoked Function Expression)&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;24&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-decode-or-encode-a-url-in-javascript"&gt;How do you decode or encode a URL in JavaScript?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-memoization"&gt;What is memoization&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;26&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-hoisting"&gt;What is Hoisting&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;27&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-classes-in-es6"&gt;What are classes in ES6&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;28&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-closures"&gt;What are closures&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;29&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-modules"&gt;What are modules&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-modules"&gt;Why do you need modules&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;31&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-scope-in-javascript"&gt;What is scope in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;32&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-service-worker"&gt;What is a service worker&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;33&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-manipulate-dom-using-a-service-worker"&gt;How do you manipulate DOM using a service worker&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;34&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-reuse-information-across-service-worker-restarts"&gt;How do you reuse information across service worker restarts&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;35&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-indexeddb"&gt;What is IndexedDB&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;36&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-web-storage"&gt;What is web storage&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;37&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-post-message"&gt;What is a post message&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;38&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-cookie"&gt;What is a Cookie&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;39&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-a-cookie"&gt;Why do you need a Cookie&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;40&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-options-in-a-cookie"&gt;What are the options in a cookie&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;41&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-delete-a-cookie"&gt;How do you delete a cookie&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;42&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-cookie-local-storage-and-session-storage"&gt;What are the differences between cookie, local storage and session storage&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;43&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-main-difference-between-localstorage-and-sessionstorage"&gt;What is the main difference between localStorage and sessionStorage&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;44&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-access-web-storage"&gt;How do you access web storage&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;45&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-methods-available-on-session-storage"&gt;What are the methods available on session storage&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;46&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-storage-event-and-its-event-handler"&gt;What is a storage event and its event handler&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;47&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-web-storage"&gt;Why do you need web storage&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;48&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-web-storage-browser-support"&gt;How do you check web storage browser support&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;49&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-web-workers-browser-support"&gt;How do you check web workers browser support&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;50&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#give-an-example-of-a-web-worker"&gt;Give an example of a web worker&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;51&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-restrictions-of-web-workers-on-dom"&gt;What are the restrictions of web workers on DOM&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;52&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-promise"&gt;What is a promise&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;53&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-a-promise"&gt;Why do you need a promise&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;54&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#explain-the-three-states-of-promise"&gt;Explain the three states of promise&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;55&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-callback-function"&gt;What is a callback function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;56&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-we-need-callbacks"&gt;Why do we need callbacks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;57&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-callback-hell"&gt;What is a callback hell&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;58&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-server-sent-events"&gt;What are server-sent events&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;59&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-receive-server-sent-event-notifications"&gt;How do you receive server-sent event notifications&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;60&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-browser-support-for-server-sent-events"&gt;How do you check browser support for server-sent events&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;61&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-events-available-for-server-sent-events"&gt;What are the events available for server sent events&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;62&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-main-rules-of-promise"&gt;What are the main rules of promise&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;63&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-callback-in-callback"&gt;What is callback in callback&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-promise-chaining"&gt;What is promise chaining&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;65&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-promiseall"&gt;What is promise.all&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;66&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-race-method-in-promise"&gt;What is the purpose of the race method in promise&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;67&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-strict-mode-in-javascript"&gt;What is a strict mode in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;68&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-strict-mode"&gt;Why do you need strict mode&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;69&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-declare-strict-mode"&gt;How do you declare strict mode&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;70&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-double-exclamation"&gt;What is the purpose of double exclamation&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;71&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-delete-operator"&gt;What is the purpose of the delete operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;72&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-typeof-operator"&gt;What is typeof operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;73&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-undefined-property"&gt;What is undefined property&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;74&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-null-value"&gt;What is null value&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;75&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-null-and-undefined"&gt;What is the difference between null and undefined&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;76&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-eval"&gt;What is eval&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;77&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-window-and-document"&gt;What is the difference between window and document&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;78&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-access-history-in-javascript"&gt;How do you access history in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;79&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-caps-lock-key-turned-on-or-not"&gt;How do you detect caps lock key turned on or not&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;80&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-isnan"&gt;What is isNaN&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;81&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-undeclared-and-undefined-variables"&gt;What are the differences between undeclared and undefined variables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;82&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-global-variables"&gt;What are global variables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;83&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-problems-with-global-variables"&gt;What are the problems with global variables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;84&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-nan-property"&gt;What is NaN property&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;85&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-isfinite-function"&gt;What is the purpose of isFinite function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;86&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-flow"&gt;What is an event flow&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;87&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-event-capturing"&gt;What is event capturing&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;88&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-event-bubbling"&gt;What is event bubbling&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;89&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-submit-a-form-using-javascript"&gt;How do you submit a form using JavaScript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;90&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-find-operating-system-details"&gt;How do you find operating system details&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;91&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-document-load-and-domcontentloaded-events"&gt;What is the difference between document load and DOMContentLoaded events&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;92&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-native-host-and-user-objects"&gt;What is the difference between native, host and user objects&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;93&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-tools-or-techniques-used-for-debugging-javascript-code"&gt;What are the tools or techniques used for debugging JavaScript code&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;94&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-pros-and-cons-of-promises-over-callbacks"&gt;What are the pros and cons of promises over callbacks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;95&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-an-attribute-and-a-property"&gt;What is the difference between an attribute and a property&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;96&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-same-origin-policy"&gt;What is same-origin policy&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;97&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-void-0"&gt;What is the purpose of void 0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;98&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-a-compiled-or-interpreted-language"&gt;Is JavaScript a compiled or interpreted language&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;99&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-a-case-sensitive-language"&gt;Is JavaScript a case-sensitive language&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;100&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-there-any-relation-between-java-and-javascript"&gt;Is there any relation between Java and JavaScript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;101&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-events"&gt;What are events&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;102&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#who-created-javascript"&gt;Who created javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;103&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-preventdefault-method"&gt;What is the use of preventDefault method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;104&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-stoppropagation-method"&gt;What is the use of stopPropagation method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;105&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-steps-involved-in-return-false-usage"&gt;What are the steps involved in return false usage&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;106&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-bom"&gt;What is BOM&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;107&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-settimeout"&gt;What is the use of setTimeout&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;108&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-setinterval"&gt;What is the use of setInterval&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;109&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-is-javascript-treated-as-single-threaded"&gt;Why is JavaScript treated as Single threaded&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;110&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-delegation"&gt;What is an event delegation&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;111&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-ecmascript"&gt;What is ECMAScript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;112&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-json"&gt;What is JSON&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;113&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-syntax-rules-of-json"&gt;What are the syntax rules of JSON&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;114&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-json-stringify"&gt;What is the purpose JSON stringify&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;115&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-parse-json-string"&gt;How do you parse JSON string&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;116&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-json"&gt;Why do you need JSON&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;117&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-pwas"&gt;What are PWAs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;118&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-cleartimeout-method"&gt;What is the purpose of clearTimeout method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;119&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-clearinterval-method"&gt;What is the purpose of clearInterval method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;120&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-redirect-new-page-in-javascript"&gt;How do you redirect new page in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;121&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-whether-a-string-contains-a-substring"&gt;How do you check whether a string contains a substring&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;122&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-validate-an-email-in-javascript"&gt;How do you validate an email in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;123&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-current-url-with-javascript"&gt;How do you get the current url with javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;124&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-various-url-properties-of-location-object"&gt;What are the various url properties of location object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;125&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-get-query-string-values-in-javascript"&gt;How do get query string values in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;126&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-if-a-key-exists-in-an-object"&gt;How do you check if a key exists in an object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;127&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-loop-through-or-enumerate-javascript-object"&gt;How do you loop through or enumerate javascript object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;128&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-test-for-an-empty-object"&gt;How do you test for an empty object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;129&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-arguments-object"&gt;What is an arguments object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;130&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-first-letter-of-the-string-in-an-uppercase"&gt;How do you make first letter of the string in an uppercase&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;131&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-pros-and-cons-of-for-loops"&gt;What are the pros and cons of for loops&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;132&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-display-the-current-date-in-javascript"&gt;How do you display the current date in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;133&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-compare-two-date-objects"&gt;How do you compare two date objects&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;134&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-if-a-string-starts-with-another-string"&gt;How do you check if a string starts with another string&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;135&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-trim-a-string-in-javascript"&gt;How do you trim a string in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;136&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-add-a-key-value-pair-in-javascript"&gt;How do you add a key value pair in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;137&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-the----notation-represents-a-special-operator"&gt;Is the !-- notation represents a special operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;138&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-assign-default-values-to-variables"&gt;How do you assign default values to variables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;139&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-multiline-strings"&gt;How do you define multiline strings&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;140&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-app-shell-model"&gt;What is an app shell model&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;141&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-we-define-properties-for-functions"&gt;Can we define properties for functions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;142&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-way-to-find-the-number-of-parameters-expected-by-a-function"&gt;What is the way to find the number of parameters expected by a function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;143&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-polyfill"&gt;What is a polyfill&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;144&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-break-and-continue-statements"&gt;What are break and continue statements&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;145&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-js-labels"&gt;What are js labels&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;146&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-benefits-of-keeping-declarations-at-the-top"&gt;What are the benefits of keeping declarations at the top&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;147&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-benefits-of-initializing-variables"&gt;What are the benefits of initializing variables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;148&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-recommendations-to-create-new-object"&gt;What are the recommendations to create new object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;149&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-json-arrays"&gt;How do you define JSON arrays&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;150&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-generate-random-integers"&gt;How do you generate random integers&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;151&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-you-write-a-random-integers-function-to-print-integers-within-a-range"&gt;Can you write a random integers function to print integers within a range&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;152&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-tree-shaking"&gt;What is tree shaking&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;153&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-need-of-tree-shaking"&gt;What is the need of tree shaking&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;154&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-it-recommended-to-use-eval"&gt;Is it recommended to use eval&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;155&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-regular-expression"&gt;What is a Regular Expression&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;156&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-string-methods-that-accept-regular-expression"&gt;What are the string methods that accept Regular expression&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;157&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-modifiers-in-regular-expression"&gt;What are modifiers in regular expression&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;158&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-regular-expression-patterns"&gt;What are regular expression patterns&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;159&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-regexp-object"&gt;What is a RegExp object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;160&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-search-a-string-for-a-pattern"&gt;How do you search a string for a pattern&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;161&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-exec-method"&gt;What is the purpose of exec method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;162&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-change-the-style-of-a-html-element"&gt;How do you change the style of a HTML element&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;163&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-would-be-the-result-of-123"&gt;What would be the result of 1+2+'3'&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;164&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-debugger-statement"&gt;What is a debugger statement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;165&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-breakpoints-in-debugging"&gt;What is the purpose of breakpoints in debugging&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;166&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-use-reserved-words-as-identifiers"&gt;Can I use reserved words as identifiers&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;167&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-a-mobile-browser"&gt;How do you detect a mobile browser&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;168&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-a-mobile-browser-without-regexp"&gt;How do you detect a mobile browser without regexp&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;169&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-image-width-and-height-using-js"&gt;How do you get the image width and height using JS&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;170&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-synchronous-http-request"&gt;How do you make synchronous HTTP request&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;171&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-asynchronous-http-request"&gt;How do you make asynchronous HTTP request&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;172&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-convert-date-to-another-timezone-in-javascript"&gt;How do you convert date to another timezone in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;173&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-properties-used-to-get-size-of-window"&gt;What are the properties used to get size of window&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;174&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-conditional-operator-in-javascript"&gt;What is a conditional operator in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;175&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-you-apply-chaining-on-conditional-operator"&gt;Can you apply chaining on conditional operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;176&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-ways-to-execute-javascript-after-a-page-load"&gt;What are the ways to execute javascript after a page load&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;177&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-proto-and-prototype"&gt;What is the difference between proto and prototype&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;178&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-you-give-an-example-of-when-you-really-need-a-semicolon"&gt;Can you give an example of when you really need a semicolon&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;179&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-freeze-method"&gt;What is the freeze method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;180&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-freeze-method"&gt;What is the purpose of the freeze method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;181&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-i-need-to-use-the-freeze-method"&gt;Why do I need to use the freeze method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;182&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-a-browser-language-preference"&gt;How do you detect a browser language preference&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;183&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-convert-a-string-to-title-case-with-javascript"&gt;How to convert a string to title case with javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;184&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-if-javascript-is-disabled-on-the-page"&gt;How do you detect if javascript is disabled on the page&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;185&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-various-operators-supported-by-javascript"&gt;What are various operators supported by javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;186&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-rest-parameter"&gt;What is a rest parameter&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;187&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-you-do-not-use-rest-parameter-as-a-last-argument"&gt;What happens if you do not use rest parameter as a last argument&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;188&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-bitwise-operators-available-in-javascript"&gt;What are the bitwise operators available in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;189&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-spread-operator"&gt;What is a spread operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;190&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-determine-whether-object-is-frozen-or-not"&gt;How do you determine whether object is frozen or not&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;191&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-determine-two-values-same-or-not-using-object"&gt;How do you determine two values same or not using object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;192&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-using-object-is-method"&gt;What is the purpose of using object is method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;193&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-copy-properties-from-one-object-to-other"&gt;How do you copy properties from one object to other&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;194&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-applications-of-the-assign-method"&gt;What are the applications of the assign method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;195&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-proxy-object"&gt;What is a proxy object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;196&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-seal-method"&gt;What is the purpose of the seal method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;197&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-applications-of-the-seal-method"&gt;What are the applications of the seal method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;198&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-the-freeze-and-seal-methods"&gt;What are the differences between the freeze and seal methods&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;199&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-determine-if-an-object-is-sealed-or-not"&gt;How do you determine if an object is sealed or not&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;200&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-enumerable-key-and-value-pairs"&gt;How do you get enumerable key and value pairs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;201&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-main-difference-between-objectvalues-and-objectentries-method"&gt;What is the main difference between Object.values and Object.entries method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;202&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-can-you-get-the-list-of-keys-of-any-object"&gt;How can you get the list of keys of any object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;203&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-an-object-with-a-prototype"&gt;How do you create an object with a prototype&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;204&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-weakset"&gt;What is a WeakSet&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;205&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-weakset-and-set"&gt;What are the differences between WeakSet and Set&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;206&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#list-down-the-collection-of-methods-available-on-weakset"&gt;List down the collection of methods available on WeakSet&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;207&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-weakmap"&gt;What is a WeakMap&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;208&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-weakmap-and-map"&gt;What are the differences between WeakMap and Map&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;209&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#list-down-the-collection-of-methods-available-on-weakmap"&gt;List down the collection of methods available on WeakMap&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;210&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-uneval"&gt;What is the purpose of uneval&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;211&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-encode-an-url"&gt;How do you encode an URL&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;212&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-decode-an-url"&gt;How do you decode an URL&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;213&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-print-the-contents-of-web-page"&gt;How do you print the contents of web page&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;214&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-uneval-and-eval"&gt;What is the difference between uneval and eval&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;215&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-anonymous-function"&gt;What is an anonymous function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;216&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-precedence-order-between-local-and-global-variables"&gt;What is the precedence order between local and global variables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;217&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-javascript-accessors"&gt;What are javascript accessors&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;218&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-property-on-object-constructor"&gt;How do you define property on Object constructor&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;219&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-get-and-defineproperty"&gt;What is the difference between get and defineProperty&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;220&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-getters-and-setters"&gt;What are the advantages of Getters and Setters&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;221&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-add-getters-and-setters-using-defineproperty-method"&gt;Can I add getters and setters using defineProperty method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;222&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-switch-case"&gt;What is the purpose of switch-case&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;223&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-conventions-to-be-followed-for-the-usage-of-switch-case"&gt;What are the conventions to be followed for the usage of switch case&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;224&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-primitive-data-types"&gt;What are primitive data types&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;225&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-access-object-properties"&gt;What are the different ways to access object properties&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;226&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-function-parameter-rules"&gt;What are the function parameter rules&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;227&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-error-object"&gt;What is an error object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;228&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#when-do-you-get-a-syntax-error"&gt;When do you get a syntax error&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;229&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-error-names-from-error-object"&gt;What are the different error names from error object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;230&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-various-statements-in-error-handling"&gt;What are the various statements in error handling&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;231&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-two-types-of-loops-in-javascript"&gt;What are the two types of loops in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;232&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-nodejs"&gt;What is nodejs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;233&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-intl-object"&gt;What is the Intl object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;234&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-perform-language-specific-date-and-time-formatting"&gt;How do you perform language specific date and time formatting&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;235&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-iterator"&gt;What is an Iterator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;236&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-does-synchronous-iteration-works"&gt;How does synchronous iteration works&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;237&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-event-loop"&gt;What is the event loop&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;238&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-call-stack"&gt;What is the call stack&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;239&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-event-queue"&gt;What is the event queue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;240&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-decorator"&gt;What is a decorator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;241&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-properties-of-the-intl-object"&gt;What are the properties of the Intl object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;242&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-unary-operator"&gt;What is an Unary operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;243&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-sort-elements-in-an-array"&gt;How do you sort elements in an array&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;244&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-comparefunction-while-sorting-arrays"&gt;What is the purpose of compareFunction while sorting arrays&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;245&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-reverse-an-array"&gt;How do you reverse an array&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;246&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-find-the-min-and-max-values-in-an-array"&gt;How do you find the min and max values in an array&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;247&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-find-the-min-and-max-values-without-math-functions"&gt;How do you find the min and max values without Math functions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;248&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-empty-statement-and-purpose-of-it"&gt;What is an empty statement and purpose of it&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;249&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-metadata-of-a-module"&gt;How do you get the metadata of a module&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;250&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-comma-operator"&gt;What is the comma operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;251&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-advantage-of-the-comma-operator"&gt;What is the advantage of the comma operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;252&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-typescript"&gt;What is typescript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;253&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-javascript-and-typescript"&gt;What are the differences between javascript and typescript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;254&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-typescript-over-javascript"&gt;What are the advantages of typescript over javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;255&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-object-initializer"&gt;What is an object initializer&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;256&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-constructor-method"&gt;What is a constructor method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;257&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-you-write-constructor-more-than-once-in-a-class"&gt;What happens if you write constructor more than once in a class&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;258&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-call-the-constructor-of-a-parent-class"&gt;How do you call the constructor of a parent class&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;259&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-prototype-of-an-object"&gt;How do you get the prototype of an object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;260&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-i-pass-string-type-for-getprototype-method"&gt;What happens If I pass string type for getPrototype method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;261&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-set-the-prototype-of-one-object-to-another"&gt;How do you set the prototype of one object to another&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;262&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-whether-an-object-can-be-extended-or-not"&gt;How do you check whether an object can be extended or not&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;263&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-prevent-an-object-from-being-extend"&gt;How do you prevent an object from being extend&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;264&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-make-an-object-non-extensible"&gt;What are the different ways to make an object non-extensible&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;265&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-multiple-properties-on-an-object"&gt;How do you define multiple properties on an object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;266&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-mean-stack"&gt;What is the MEAN stack&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;267&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-obfuscation-in-javascript"&gt;What is obfuscation in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;268&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-obfuscation"&gt;Why do you need Obfuscation&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;269&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-minification"&gt;What is Minification&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;270&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-minification"&gt;What are the advantages of minification&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;271&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-obfuscation-and-encryption"&gt;What are the differences between obfuscation and Encryption&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;272&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-common-tools-used-for-minification"&gt;What are the common tools used for minification&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;273&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-perform-form-validation-using-javascript"&gt;How do you perform form validation using javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;274&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-perform-form-validation-without-javascript"&gt;How do you perform form validation without javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;275&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-dom-methods-available-for-constraint-validation"&gt;What are the DOM methods available for constraint validation&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;276&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-available-constraint-validation-dom-properties"&gt;What are the available constraint validation DOM properties&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;277&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-validity-properties"&gt;What are the validity properties&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;278&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#give-an-example-usage-of-the-rangeoverflow-property"&gt;Give an example usage of the rangeOverflow property&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;279&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#are-enums-available-in-javascript"&gt;Are enums available in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;280&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-enum"&gt;What is an enum&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;281&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-list-all-properties-of-an-object"&gt;How do you list all properties of an object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;282&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-property-descriptors-of-an-object"&gt;How do you get property descriptors of an object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;283&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-attributes-provided-by-a-property-descriptor"&gt;What are the attributes provided by a property descriptor&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;284&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-extend-classes"&gt;How do you extend classes&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;285&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-i-modify-the-url-without-reloading-the-page"&gt;How do I modify the url without reloading the page&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;286&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-whether-or-not-an-array-includes-a-particular-value"&gt;How do you check whether or not an array includes a particular value&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;287&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-compare-scalar-arrays"&gt;How do you compare scalar arrays&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;288&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-get-the-value-from-get-parameters"&gt;How to get the value from get parameters&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;289&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-print-numbers-with-commas-as-thousand-separators"&gt;How do you print numbers with commas as thousand separators&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;290&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-java-and-javascript"&gt;What is the difference between java and javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;291&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#does-javascript-support-namespaces"&gt;Does JavaScript support namespaces&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;292&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-declare-a-namespace"&gt;How do you declare a namespace&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;293&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-invoke-javascript-code-in-an-iframe-from-the-parent-page"&gt;How do you invoke javascript code in an iframe from the parent page&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;294&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-timezone-offset-of-a-date-object"&gt;How do you get the timezone offset of a date object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;295&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-load-css-and-js-files-dynamically"&gt;How do you load CSS and JS files dynamically&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;296&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-methods-to-find-html-elements-in-dom"&gt;What are the different methods to find HTML elements in DOM&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;297&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-jquery"&gt;What is jQuery&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;298&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-v8-javascript-engine"&gt;What is V8 JavaScript engine&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;299&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-we-call-javascript-as-dynamic-language"&gt;Why do we call javascript as dynamic language&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;300&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-void-operator"&gt;What is a void operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;301&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-set-the-cursor-to-wait"&gt;How to set the cursor to wait&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;302&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-an-infinite-loop"&gt;How do you create an infinite loop&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;303&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-to-avoid-with-statement"&gt;Why do you need to avoid with statement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;304&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-the-following-for-loops"&gt;What is the output of the following for loops&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;305&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#list-down-some-of-the-features-of-es6"&gt;List down some of the features of ES6&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;306&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-es6"&gt;What is ES6&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;307&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-redeclare-let-and-const-variables"&gt;Can I redeclare let and const variables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;308&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#does-the-const-variable-make-the-value-immutable"&gt;Does the &lt;code&gt;const&lt;/code&gt; variable make the value immutable&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;309&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-default-parameters"&gt;What are default parameters&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;310&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-template-literals"&gt;What are template literals&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;311&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-write-multi-line-strings-in-template-literals"&gt;How do you write multi-line strings in template literals&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;312&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-nesting-templates"&gt;What are nesting templates&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;313&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-tagged-templates"&gt;What are tagged templates&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;314&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-raw-strings"&gt;What are raw strings&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;315&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-destructuring-assignment"&gt;What is destructuring assignment&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;316&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-default-values-in-destructuring-assignment"&gt;What are default values in destructuring assignment&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;317&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-swap-variables-in-destructuring-assignment"&gt;How do you swap variables in destructuring assignment&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;318&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-enhanced-object-literals"&gt;What are enhanced object literals&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;319&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-dynamic-imports"&gt;What are dynamic imports&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;320&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-use-cases-for-dynamic-imports"&gt;What are the use cases for dynamic imports&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;321&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-typed-arrays"&gt;What are typed arrays&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;322&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-module-loaders"&gt;What are the advantages of module loaders&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;323&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-collation"&gt;What is collation&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;324&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-forof-statement"&gt;What is for...of statement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;325&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-spread-operator-array"&gt;What is the output of below spread operator array&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;326&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-postmessage-secure"&gt;Is PostMessage secure&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;327&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-problems-with-postmessage-target-origin-as-wildcard"&gt;What are the problems with postmessage target origin as wildcard&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;328&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-avoid-receiving-postmessages-from-attackers"&gt;How do you avoid receiving postMessages from attackers&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;329&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-avoid-using-postmessages-completely"&gt;Can I avoid using postMessages completely&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;330&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-postmessages-synchronous"&gt;Is postMessages synchronous&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;331&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-paradigm-is-javascript"&gt;What paradigm is Javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;332&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-internal-and-external-javascript"&gt;What is the difference between internal and external javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;333&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-faster-than-server-side-script"&gt;Is JavaScript faster than server side script&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;334&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-status-of-a-checkbox"&gt;How do you get the status of a checkbox&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;335&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-double-tilde-operator"&gt;What is the purpose of double tilde operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;336&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-convert-character-to-ascii-code"&gt;How do you convert character to ASCII code&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;337&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-arraybuffer"&gt;What is ArrayBuffer&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;338&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-string-expression"&gt;What is the output of below string expression&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;339&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-error-object"&gt;What is the purpose of Error object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;340&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-evalerror-object"&gt;What is the purpose of EvalError object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;341&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-list-of-cases-error-thrown-from-non-strict-mode-to-strict-mode"&gt;What are the list of cases error thrown from non-strict mode to strict mode&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;342&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#do-all-objects-have-prototypes"&gt;Do all objects have prototypes&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;343&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-a-parameter-and-an-argument"&gt;What is the difference between a parameter and an argument&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;344&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-some-method-in-arrays"&gt;What is the purpose of some method in arrays&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;345&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-combine-two-or-more-arrays"&gt;How do you combine two or more arrays&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;346&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-shallow-and-deep-copy"&gt;What is the difference between Shallow and Deep copy&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;347&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-specific-number-of-copies-of-a-string"&gt;How do you create specific number of copies of a string&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;348&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-return-all-matching-strings-against-a-regular-expression"&gt;How do you return all matching strings against a regular expression&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;349&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-trim-a-string-at-the-beginning-or-ending"&gt;How do you trim a string at the beginning or ending&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;350&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-console-statement-with-unary-operator"&gt;What is the output of below console statement with unary operator&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;351&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#does-javascript-uses-mixins"&gt;Does javascript uses mixins&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;352&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#mixin-example-using-object-composition"&gt;Mixin Example using Object composition&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;353&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#benefits"&gt;Benefits&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;354&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-thunk-function"&gt;What is a thunk function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;355&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-asynchronous-thunks"&gt;What are asynchronous thunks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;356&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-function-calls"&gt;What is the output of below function calls&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;357&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-remove-all-line-breaks-from-a-string"&gt;How to remove all line breaks from a string&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;358&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-reflow-and-repaint"&gt;What is the difference between reflow and repaint&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;359&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-with-negating-an-array"&gt;What happens with negating an array&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;360&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-we-add-two-arrays"&gt;What happens if we add two arrays&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;361&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-prepend-additive-operator-on-falsy-values"&gt;What is the output of prepend additive operator on falsy values&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;362&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-self-string-using-special-characters"&gt;How do you create self string using special characters&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;363&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-remove-falsy-values-from-an-array"&gt;How do you remove falsy values from an array&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;364&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-unique-values-of-an-array"&gt;How do you get unique values of an array&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;365&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-destructuring-aliases"&gt;What is destructuring aliases&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;366&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-map-the-array-values-without-using-map-method"&gt;How do you map the array values without using map method&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;367&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-empty-an-array"&gt;How do you empty an array&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;368&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-round-numbers-to-certain-decimals"&gt;How do you round numbers to certain decimals&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;369&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-way-to-convert-an-array-to-an-object"&gt;What is the easiest way to convert an array to an object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;370&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-an-array-with-some-data"&gt;How do you create an array with some data&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;371&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-placeholders-from-console-object"&gt;What are the placeholders from console object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;372&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-it-possible-to-add-css-to-console-messages"&gt;Is it possible to add CSS to console messages&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;373&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-dir-method-of-console-object"&gt;What is the purpose of dir method of console object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;374&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-it-possible-to-debug-html-elements-in-console"&gt;Is it possible to debug HTML elements in console&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;375&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-display-data-in-a-tabular-format-using-console-object"&gt;How do you display data in a tabular format using console object&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;376&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-verify-that-an-argument-is-a-number-or-not"&gt;How do you verify that an argument is a Number or not&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;377&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-copy-to-clipboard-button"&gt;How do you create copy to clipboard button&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;378&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-shortcut-to-get-timestamp"&gt;What is the shortcut to get timestamp&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;379&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-flattening-multi-dimensional-arrays"&gt;How do you flattening multi dimensional arrays&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;380&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-multi-condition-checking"&gt;What is the easiest multi condition checking&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;381&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-capture-browser-back-button"&gt;How do you capture browser back button&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;382&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-disable-right-click-in-the-web-page"&gt;How do you disable right click in the web page&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;383&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-wrapper-objects"&gt;What are wrapper objects&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;384&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-ajax"&gt;What is AJAX&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;385&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-deal-with-asynchronous-code"&gt;What are the different ways to deal with Asynchronous Code&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;386&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-cancel-a-fetch-request"&gt;How to cancel a fetch request&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;387&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-web-speech-api"&gt;What is web speech API&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;388&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-minimum-timeout-throttling"&gt;What is minimum timeout throttling&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;389&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-implement-zero-timeout-in-modern-browsers"&gt;How do you implement zero timeout in modern browsers&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;390&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-tasks-in-event-loop"&gt;What are tasks in event loop&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;391&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-microtask"&gt;What is microtask&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;392&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-different-event-loops"&gt;What are different event loops&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;393&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-queuemicrotask"&gt;What is the purpose of queueMicrotask&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;394&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-use-javascript-libraries-in-typescript-file"&gt;How do you use javascript libraries in typescript file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;395&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-promises-and-observables"&gt;What are the differences between promises and observables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;396&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-heap"&gt;What is heap&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;397&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-table"&gt;What is an event table&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;398&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-microtask-queue"&gt;What is a microTask queue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;399&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-shim-and-polyfill"&gt;What is the difference between shim and polyfill&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;400&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-primitive-or-non-primitive-value-type"&gt;How do you detect primitive or non primitive value type&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;401&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-babel"&gt;What is babel&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;402&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-nodejs-completely-single-threaded"&gt;Is Node.js completely single threaded&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;403&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-common-use-cases-of-observables"&gt;What are the common use cases of observables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;404&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-rxjs"&gt;What is RxJS&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;405&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-function-constructor-and-function-declaration"&gt;What is the difference between Function constructor and function declaration&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;406&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-short-circuit-condition"&gt;What is a Short circuit condition&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;407&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-way-to-resize-an-array"&gt;What is the easiest way to resize an array&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;408&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-observable"&gt;What is an observable&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;409&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-function-and-class-declarations"&gt;What is the difference between function and class declarations&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;410&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-async-function"&gt;What is an async function&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;411&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-prevent-promises-swallowing-errors"&gt;How do you prevent promises swallowing errors&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;412&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-deno"&gt;What is deno&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;413&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-an-object-iterable-in-javascript"&gt;How do you make an object iterable in javascript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;414&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-proper-tail-call"&gt;What is a Proper Tail Call&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;415&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-an-object-is-a-promise-or-not"&gt;How do you check an object is a promise or not&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;416&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-detect-if-a-function-is-called-as-constructor"&gt;How to detect if a function is called as constructor&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;417&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-arguments-object-and-rest-parameter"&gt;What are the differences between arguments object and rest parameter&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;418&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-spread-operator-and-rest-parameter"&gt;What are the differences between spread operator and rest parameter&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;419&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-kinds-of-generators"&gt;What are the different kinds of generators&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;420&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-built-in-iterables"&gt;What are the built-in iterables&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;421&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-forof-and-forin-statements"&gt;What are the differences between for...of and for...in statements&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;422&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-instance-and-non-instance-properties"&gt;How do you define instance and non-instance properties&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;423&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-isnan-and-numberisnan"&gt;What is the difference between isNaN and Number.isNaN?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;424&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-invoke-an-iife-without-any-extra-brackets"&gt;How to invoke an IIFE without any extra brackets?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;425&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-that-possible-to-use-expressions-in-switch-cases"&gt;Is that possible to use expressions in switch cases?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;426&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-way-to-ignore-promise-errors"&gt;What is the easiest way to ignore promise errors?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;427&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-style-the-console-output-using-css"&gt;How do style the console output using CSS?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;428&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-nullish-coalescing-operator-"&gt;What is nullish coalescing operator (??)?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;429&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-group-and-nest-console-output"&gt;How do you group and nest console output?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;430&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-dense-and-sparse-arrays"&gt;What is the difference between dense and sparse arrays?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;431&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-create-sparse-arrays"&gt;What are the different ways to create sparse arrays?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;432&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-settimeout-setimmediate-and-processnexttick"&gt;What is the difference between setTimeout, setImmediate and process.nextTick?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;433&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-reverse-an-array-without-modifying-original-array"&gt;How do you reverse an array without modifying original array?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;434&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-custom-html-element"&gt;How do you create custom HTML element?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;435&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-global-execution-context"&gt;What is global execution context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;436&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-function-execution-context"&gt;What is function execution context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;437&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-debouncing"&gt;What is debouncing?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;438&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-throttling"&gt;What is throttling?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;439&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-optional-chaining"&gt;What is optional chaining?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;440&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-environment-record"&gt;What is an environment record?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;441&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-verify-if-a-variable-is-an-array"&gt;How to verify if a variable is an array?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;442&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-pass-by-value-and-pass-by-reference"&gt;What is pass by value and pass by reference?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;443&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-primitives-and-non-primitives"&gt;What are the differences between primitives and non-primitives?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;444&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-your-own-bind-method-using-either-call-or-apply-method"&gt;How do you create your own bind method using either call or apply method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;445&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-pure-and-impure-functions"&gt;What are the differences between pure and impure functions?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;446&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-referential-transparency"&gt;What is referential transparency?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-possible-side-effects-in-javascript"&gt;What are the possible side-effects in javascript?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;448&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-compose-and-pipe-functions"&gt;What are compose and pipe functions?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;449&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-module-pattern"&gt;What is module pattern?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;450&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-function-composition"&gt;What is Function Composition?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;451&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-use-await-outside-of-async-function-prior-to-es2022"&gt;How to use await outside of async function prior to ES2022?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;452&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-this-keyword-in-javascript"&gt;What is the purpose of the this keyword in JavaScript?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;453&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-uses-of-closures"&gt;What are the uses of closures?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;454&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-phases-of-execution-context"&gt;What are the phases of execution context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;455&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-possible-reasons-for-memory-leaks"&gt;What are the possible reasons for memory leaks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;456&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-optimization-techniques-of-v8-engine"&gt;What are the optimization techniques of V8 engine?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;457&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-examples-of-built-in-higher-order-functions"&gt;What are the examples of built-in higher order functions?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;458&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-benefits-higher-order-functions"&gt;What are the benefits higher order functions?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;459&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-polyfills-for-map-filter-and-reduce-methods"&gt;How do you create polyfills for map, filter and reduce methods?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;460&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-map-and-foreach-functions"&gt;What is the difference between map and forEach functions?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;461&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#give-an-example-of-statements-affected-by-automatic-semicolon-insertion"&gt;Give an example of statements affected by automatic semicolon insertion?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;462&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-event-phases-of-a-browser"&gt;What are the event phases of a browser?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;463&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-real-world-use-cases-of-proxy"&gt;What are the real world use cases of proxy?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;464&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-hidden-classes"&gt;What are hidden classes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;465&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-inline-caching"&gt;What is inline caching?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;466&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-execute-external-scripts"&gt;What are the different ways to execute external scripts?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;467&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-lexical-scope"&gt;What is Lexical Scope?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;468&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-detect-system-dark-mode-in-javascript"&gt;How to detect system dark mode in javascript?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;469&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-requestanimationframe-method"&gt;What is the purpose of requestAnimationFrame method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;470&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-substring-and-substr-methods"&gt;What is the difference between substring and substr methods?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;471&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-find-the-number-of-parameters-expected-by-a-function"&gt;How to find the number of parameters expected by a function?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;472&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-globalthis-and-what-is-the-importance-of-it"&gt;What is globalThis, and what is the importance of it?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;473&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-array-mutation-methods"&gt;What are the array mutation methods?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;474&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-module-scope-in-javascript"&gt;What is module scope in JavaScript?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;475&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-shadowing-and-illegal-shadowing"&gt;What are shadowing and illegal shadowing?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;476&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-is-it-important-to-remove-event-listeners-after-use"&gt;Why is it important to remove event listeners after use?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- TOC_END --&gt; 
&lt;!-- QUESTIONS_START --&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible ways to create objects in JavaScript&lt;/h3&gt; &lt;p&gt;There are many ways to create objects in javascript as mentioned below:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object literal syntax:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The object literal syntax (or object initializer), is a comma-separated set of name-value pairs wrapped in curly braces.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var object = {
  name: "Sudheer",
  age: 34,
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Object literal property values can be of any data type, including array, function, and nested object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is one of the easiest ways to create an object and it's most commonly used for creating simple, ad-hoc objects.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object constructor:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The simplest way to create an empty object is using the &lt;code&gt;Object&lt;/code&gt; constructor. Currently this approach is not recommended.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var object = new Object();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;Object()&lt;/code&gt; is a built-in constructor function so "new" keyword is not required for creating plain objects. The above code snippet can be re-written as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var object = Object();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, &lt;code&gt;Object()&lt;/code&gt; can be used to either create a plain object or convert a given value into its corresponding object wrapper, whereas &lt;code&gt;new Object()&lt;/code&gt; is specifically used to explicitly create a new object instance.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object's create method:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create&lt;/code&gt; method of Object is used to create a new object by passing the specified prototype object and properties as arguments, i.e., this pattern is helpful to create new objects based on existing objects. In other words, this is useful for setting up &lt;strong&gt;prototypal inheritance&lt;/strong&gt;. The second argument is optional and it is used to create properties on a newly created object.&lt;/p&gt; &lt;p&gt;The following code creates a new empty object whose prototype is null.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var object = Object.create(null);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following example creates an object along with additional new properties.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let vehicle = {
  wheels: "4",
  fuelType: "Gasoline",
  color: "Green",
};
let carProps = {
  type: {
    value: "Volkswagen",
  },
  model: {
    value: "Golf",
  },
};

var car = Object.create(vehicle, carProps);
console.log(car);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function constructor:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, create any function and apply the new operator to create object instances. This was the main way to do constructor-based OOP before ES6 classes.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Person(name) {
  this.name = name;
  this.age = 21;
}
var object = new Person("Sudheer");
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function constructor with prototype:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This is similar to function constructor but it uses prototype for their properties and methods. Using prototype means you're sharing methods/properties across instances, which saves memory and improve performance.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Person() {}
Person.prototype.name = "Sudheer";
var object = new Person();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is equivalent to creating an instance with &lt;code&gt;Object.create&lt;/code&gt; method with a function prototype and then calling that function with an instance and parameters as arguments.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function func(x, y, z) {
 this.x = x;
 this.y = y;
 this.z = z;
}

var instance = new func(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;(OR)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function func(x, y, z) {
   this.x = x;
   this.y = y;
   this.z = z;
}
// Create a new instance using function prototype.
var newInstance = Object.create(func.prototype)

// Call the function
var result = func.call(newInstance, 1, 2, 3),

// If the result is a non-null object then use it otherwise just use the new instance.
console.log(result &amp;amp;&amp;amp; typeof result === 'object' ? result : newInstance);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object's assign method:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;Object.assign&lt;/code&gt; method is used to copy all the properties from one or more source objects and stores them into a target object. This is mainly used for cloning and merging&lt;/p&gt; &lt;p&gt;The following code creates a new staff object by copying properties of his working company and the car he owns.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const orgObject = { company: "XYZ Corp" };
const carObject = { name: "Toyota" };
const staff = Object.assign({}, orgObject, carObject);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;ES6 Class syntax:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;ES6 introduces class feature to create objects. This is syntactic sugar over the prototype-based system.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Person {
  constructor(name) {
    this.name = name;
  }
}

var object = new Person("Sudheer");
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Singleton pattern:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance. This way one can ensure that they don't accidentally create multiple instances.&lt;/p&gt; &lt;h5&gt;Singleton with Closure (Classic JS Pattern)&lt;/h5&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const Singleton = (function () {
let instance;

function createInstance() {
  return { name: "Sudheer" };
}

return {
  getInstance: function () {
    if (!instance) {
      instance = createInstance();
    }
    return instance;
  }
};
})();

// Usage
const obj1 = Singleton.getInstance();
const obj2 = Singleton.getInstance();

console.log(obj1 === obj2); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In modern JavaScript applications, singletons are commonly implemented using ES6 modules for their built-in caching behavior, or closures for encapsulated state management.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a prototype chain&lt;/h3&gt; &lt;p&gt;The prototype chain is a core concept in JavaScript’s inheritance model. It allows objects to inherit properties and methods from other objects. When you try to access a property or method on an object, JavaScript first looks for it on that object itself. If it’s not found, the engine looks up the object's internal &lt;code&gt;[[Prototype]]&lt;/code&gt; reference (accessible via &lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt; or the deprecated &lt;code&gt;__proto__&lt;/code&gt; property) and continues searching up the chain until it finds the property or reaches the end (usually &lt;code&gt;null&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;For objects created via constructor functions, the prototype chain starts with the instance, then refers to the constructor’s &lt;code&gt;.prototype&lt;/code&gt; object, and continues from there. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Person() {}
const person1 = new Person();

console.log(Object.getPrototypeOf(person1) === Person.prototype); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This mechanism allows for property and method sharing among objects, enabling code reuse and a form of inheritance.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The prototype chain enables inheritance in JavaScript.&lt;/li&gt; 
   &lt;li&gt;If a property isn’t found on an object, JavaScript looks up its prototype chain.&lt;/li&gt; 
   &lt;li&gt;The prototype of an object instance can be accessed with &lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt; or &lt;code&gt;__proto__&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;The prototype of a constructor function is available via &lt;code&gt;Constructor.prototype&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;The chain ends when the prototype is &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The prototype chain among objects appears as below,&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/prototype_chain.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the Difference Between &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, and &lt;code&gt;bind&lt;/code&gt;&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;In JavaScript, &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, and &lt;code&gt;bind&lt;/code&gt; are methods that allow you to control the context (&lt;code&gt;this&lt;/code&gt; value) in which a function is executed. While their purposes are similar, they differ in how they handle arguments and when the function is invoked.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h4&gt;&lt;code&gt;call&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;br /&gt; The &lt;code&gt;call()&lt;/code&gt; method invokes a function immediately, allowing you to specify the value of &lt;code&gt;this&lt;/code&gt; and pass arguments individually (comma-separated).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;func.call(thisArg, arg1, arg2, ...)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;var employee1 = { firstName: "John", lastName: "Rodson" };
var employee2 = { firstName: "Jimmy", lastName: "Baily" };

function invite(greeting1, greeting2) {
  console.log(
    greeting1 + " " + this.firstName + " " + this.lastName + ", " + greeting2
  );
}

invite.call(employee1, "Hello", "How are you?"); // Hello John Rodson, How are you?
invite.call(employee2, "Hello", "How are you?"); // Hello Jimmy Baily, How are you?
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h4&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;br /&gt; The &lt;code&gt;apply()&lt;/code&gt; method is similar to &lt;code&gt;call()&lt;/code&gt;, but it takes the function arguments as an array (or array-like object) instead of individual arguments.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;func.apply(thisArg, [argsArray])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;var employee1 = { firstName: "John", lastName: "Rodson" };
var employee2 = { firstName: "Jimmy", lastName: "Baily" };

function invite(greeting1, greeting2) {
  console.log(
    greeting1 + " " + this.firstName + " " + this.lastName + ", " + greeting2
  );
}

invite.apply(employee1, ["Hello", "How are you?"]); // Hello John Rodson, How are you?
invite.apply(employee2, ["Hello", "How are you?"]); // Hello Jimmy Baily, How are you?
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h4&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;br /&gt; The &lt;code&gt;bind()&lt;/code&gt; method creates a new function with a specific &lt;code&gt;this&lt;/code&gt; value and, optionally, preset initial arguments. Unlike &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; immediately invoke the function; instead, it returns a new function that you can call later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;var boundFunc = func.bind(thisArg[, arg1[, arg2[, ...]]])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;var employee1 = { firstName: "John", lastName: "Rodson" };
var employee2 = { firstName: "Jimmy", lastName: "Baily" };

function invite(greeting1, greeting2) {
  console.log(
    greeting1 + " " + this.firstName + " " + this.lastName + ", " + greeting2
  );
}

var inviteEmployee1 = invite.bind(employee1);
var inviteEmployee2 = invite.bind(employee2);

inviteEmployee1("Hello", "How are you?"); // Hello John Rodson, How are you?
inviteEmployee2("Hello", "How are you?"); // Hello Jimmy Baily, How are you?
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h4&gt;Summary&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Method&lt;/th&gt; 
   &lt;th&gt;Invokes Function Immediately?&lt;/th&gt; 
   &lt;th&gt;How Arguments Are Passed&lt;/th&gt; 
   &lt;th&gt;Returns&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;call&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Comma-separated list&lt;/td&gt; 
   &lt;td&gt;Function's result&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes&lt;/td&gt; 
   &lt;td&gt;Array or array-like object&lt;/td&gt; 
   &lt;td&gt;Function's result&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;(Optional) preset, then rest&lt;/td&gt; 
   &lt;td&gt;New function&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Key Points&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;call&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/strong&gt; are almost interchangeable; both invoke the function immediately, but differ in how arguments are passed.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;em&gt;Tip:&lt;/em&gt; "Call is for Comma-separated, Apply is for Array."&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/strong&gt; does not execute the function immediately. Instead, it creates a new function with the specified &lt;code&gt;this&lt;/code&gt; value and optional arguments, which can be called later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; when you want to immediately invoke a function with a specific &lt;code&gt;this&lt;/code&gt; context. Use &lt;code&gt;bind&lt;/code&gt; when you want to create a new function with a specific &lt;code&gt;this&lt;/code&gt; context to be invoked later.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSON and its common operations&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;JSON (JavaScript Object Notation)&lt;/strong&gt; is a lightweight, text-based data format that uses JavaScript object syntax for structuring data. It was popularized by Douglas Crockford and is widely used for transmitting data between a server and a client in web applications. JSON files typically have a &lt;code&gt;.json&lt;/code&gt; extension and use the MIME type &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt; &lt;h4&gt;Common Operations with JSON&lt;/h4&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Parsing&lt;/strong&gt;: Transforming a JSON-formatted string into a native JavaScript object.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const obj = JSON.parse(jsonString);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Example: &lt;pre&gt;&lt;code class="language-js"&gt;const jsonString = '{"name":"John","age":30}';
const obj = JSON.parse(jsonString);  // { name: "John", age: 30 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Stringification&lt;/strong&gt;: Converting a JavaScript object into a JSON-formatted string, commonly used for data transmission or storage.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const jsonString = JSON.stringify(object);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Example: &lt;pre&gt;&lt;code class="language-js"&gt;const obj = { name: "Jane", age: 25 };
const jsonString = JSON.stringify(obj);  // '{"name":"Jane","age":25}'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the array slice method&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;slice()&lt;/code&gt; method in JavaScript is used to extract a section of an array, returning a new array containing the selected elements. It does not modify the original array. The method takes two arguments:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;: The index at which extraction begins (inclusive).&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;end&lt;/strong&gt; (optional): The index before which to end extraction (exclusive). If omitted, extraction continues to the end of the array.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can also use negative indices, which count from the end of the array.&lt;/p&gt; &lt;h4&gt;Examples:&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-js"&gt;let arrayIntegers = [1, 2, 3, 4, 5];

let arrayIntegers1 = arrayIntegers.slice(0, 2);    // [1, 2]
let arrayIntegers2 = arrayIntegers.slice(2, 3);    // [3]
let arrayIntegers3 = arrayIntegers.slice(4);       // [5]
let arrayIntegers4 = arrayIntegers.slice(-3, -1);  // [3, 4]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br /&gt; The &lt;code&gt;slice()&lt;/code&gt; method does &lt;strong&gt;not&lt;/strong&gt; mutate (change) the original array; instead, it returns a new array containing the extracted elements.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the array splice method&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;splice()&lt;/code&gt; method in JavaScript is used to add, remove, or replace elements within an array. Unlike &lt;code&gt;slice()&lt;/code&gt;, which creates a shallow copy and does not alter the original array, &lt;code&gt;splice()&lt;/code&gt; &lt;strong&gt;modifies the original array in place&lt;/strong&gt; and returns an array containing the removed elements.&lt;/p&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;array.splice(start, deleteCount, item1, item2, ...)
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt; The index at which to start changing the array.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;deleteCount:&lt;/strong&gt; (Optional) The number of elements to remove from the array. If omitted, all elements from the start index to the end of the array will be removed.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;item1, item2, ...:&lt;/strong&gt; (Optional) Elements to add to the array, starting at the start position.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;Examples&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];
let arrayIntegersOriginal2 = [1, 2, 3, 4, 5];
let arrayIntegersOriginal3 = [1, 2, 3, 4, 5];

// Remove the first two elements
let arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); 
// arrayIntegers1: [1, 2]
// arrayIntegersOriginal1 (after): [3, 4, 5]

// Remove all elements from index 3 onwards
let arrayIntegers2 = arrayIntegersOriginal2.splice(3);     
// arrayIntegers2: [4, 5]
// arrayIntegersOriginal2 (after): [1, 2, 3]

// Remove 1 element at index 3, then insert "a", "b", "c" at that position
let arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, "a", "b", "c"); 
// arrayIntegers3: [4]
// arrayIntegersOriginal3 (after): [1, 2, 3, "a", "b", "c", 5]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;code&gt;splice()&lt;/code&gt; method &lt;strong&gt;modifies the original array&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;It returns an array containing the elements that were removed (if any).&lt;/li&gt; 
   &lt;li&gt;You can use it both to remove and insert elements in a single operation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between slice and splice&lt;/h3&gt; &lt;p&gt;Here are the key differences between &lt;code&gt;slice()&lt;/code&gt; and &lt;code&gt;splice()&lt;/code&gt; methods in JavaScript arrays:&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/th&gt; 
     &lt;th&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Does &lt;strong&gt;not&lt;/strong&gt; modify the original array (immutable)&lt;/td&gt; 
     &lt;td&gt;Modifies the original array (mutable)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Returns a &lt;strong&gt;shallow copy&lt;/strong&gt; (subset) of selected elements&lt;/td&gt; 
     &lt;td&gt;Returns an array of the &lt;strong&gt;removed&lt;/strong&gt; elements&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Used to &lt;strong&gt;extract&lt;/strong&gt; elements from an array&lt;/td&gt; 
     &lt;td&gt;Used to &lt;strong&gt;add&lt;/strong&gt;, &lt;strong&gt;remove&lt;/strong&gt;, or &lt;strong&gt;replace&lt;/strong&gt; elements in an array&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Syntax: &lt;code&gt;array.slice(start, end)&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;Syntax: &lt;code&gt;array.splice(start, deleteCount, ...items)&lt;/code&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Use &lt;code&gt;slice()&lt;/code&gt; when you want to copy or extract elements without altering the original array.&lt;/li&gt; 
   &lt;li&gt;Use &lt;code&gt;splice()&lt;/code&gt; when you need to add, remove, or replace elements and want to change the original array.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you compare Object and Map&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt; and &lt;strong&gt;Maps&lt;/strong&gt; both allow you to associate keys with values, retrieve those values, delete keys, and check if a key exists. Historically, Objects have been used as Maps, but there are several key differences that make &lt;code&gt;Map&lt;/code&gt; a better choice in certain scenarios:&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Feature&lt;/th&gt; 
     &lt;th&gt;Object&lt;/th&gt; 
     &lt;th&gt;Map&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Key Types&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Only strings and symbols are valid keys&lt;/td&gt; 
     &lt;td&gt;Any value can be used as a key (objects, functions, primitives)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Key Order&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Keys are unordered (in practice, insertion order is mostly preserved for string keys, but not guaranteed)&lt;/td&gt; 
     &lt;td&gt;Keys are ordered by insertion; iteration follows insertion order&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Size Property&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;No built-in way to get the number of keys; must use &lt;code&gt;Object.keys(obj).length&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;Use the &lt;code&gt;.size&lt;/code&gt; property for the number of entries&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Iterability&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Not directly iterable; must use &lt;code&gt;Object.keys&lt;/code&gt;, &lt;code&gt;Object.values&lt;/code&gt;, or &lt;code&gt;Object.entries&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;Directly iterable with &lt;code&gt;for...of&lt;/code&gt;, &lt;code&gt;.keys()&lt;/code&gt;, &lt;code&gt;.values()&lt;/code&gt;, &lt;code&gt;.entries()&lt;/code&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Prototype&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Has a prototype chain; may have default properties that can collide with custom keys (can be avoided with &lt;code&gt;Object.create(null)&lt;/code&gt;)&lt;/td&gt; 
     &lt;td&gt;Does not have a prototype, so there are no default keys&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;May be less efficient for frequent additions/removals&lt;/td&gt; 
     &lt;td&gt;Optimized for frequent additions and deletions&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Serialization&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Can be easily serialized to JSON&lt;/td&gt; 
     &lt;td&gt;Cannot be directly serialized to JSON&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between == and === operators&lt;/h3&gt; &lt;p&gt;JavaScript provides two types of equality operators:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Loose equality (&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;)&lt;/strong&gt;: Performs type conversion if the types differ, comparing values after converting them to a common type.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Strict equality (&lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;)&lt;/strong&gt;: Compares both value and type, without any type conversion.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;Strict Equality (&lt;code&gt;===&lt;/code&gt;)&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Two strings are strictly equal if they have exactly the same sequence of characters and length.&lt;/li&gt; 
   &lt;li&gt;Two numbers are strictly equal if they have the same numeric value. 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;Special cases:&lt;/strong&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;code&gt;NaN === NaN&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;+0 === -0&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Two booleans are strictly equal if both are &lt;code&gt;true&lt;/code&gt; or both are &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Two objects are strictly equal if they refer to the &lt;strong&gt;same object&lt;/strong&gt; in memory.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are &lt;strong&gt;not&lt;/strong&gt; strictly equal.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;Loose Equality (&lt;code&gt;==&lt;/code&gt;)&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Converts operands to the same type before making the comparison.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;null == undefined&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;"1" == 1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; because the string is converted to a number.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;0 == false&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; because &lt;code&gt;false&lt;/code&gt; is converted to &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;Examples:&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;0 == false            // true      (loose equality, type coercion)
0 === false           // false     (strict equality, different types)
1 == "1"              // true      (string converted to number)
1 === "1"             // false     (different types)
null == undefined     // true      (special case)
null === undefined    // false     (different types)
'0' == false          // true      ('0' is converted to 0)
'0' === false         // false     (different types)
NaN == NaN            // false     (NaN is never equal to itself)
NaN === NaN           // false
[] == []              // false     (different array objects)
[] === []             // false
{} == {}              // false     (different object references)
{} === {}             // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are lambda expressions or arrow functions&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Arrow functions&lt;/strong&gt; (also known as "lambda expressions") provide a concise syntax for writing function expressions in JavaScript. Introduced in ES6, arrow functions are often shorter and more readable, especially for simple operations or callbacks.&lt;/p&gt; &lt;h4&gt;Key Features:&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Arrow functions do &lt;strong&gt;not&lt;/strong&gt; have their own &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;arguments&lt;/code&gt;, &lt;code&gt;super&lt;/code&gt;, or &lt;code&gt;new.target&lt;/code&gt; bindings. They inherit these from their surrounding (lexical) context.&lt;/li&gt; 
   &lt;li&gt;They are best suited for non-method functions, such as callbacks or simple computations.&lt;/li&gt; 
   &lt;li&gt;Arrow functions &lt;strong&gt;cannot&lt;/strong&gt; be used as constructors and do not have a &lt;code&gt;prototype&lt;/code&gt; property.&lt;/li&gt; 
   &lt;li&gt;They also cannot be used with &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;yield&lt;/code&gt;, or as generator functions.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;Syntax Examples:&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const arrowFunc1 = (a, b) =&amp;gt; a + b;    // Multiple parameters, returns a + b
const arrowFunc2 = a =&amp;gt; a * 10;        // Single parameter (parentheses optional), returns a * 10
const arrowFunc3 = () =&amp;gt; {};           // No parameters, returns undefined
const arrowFunc4 = (a, b) =&amp;gt; {
  // Multiple statements require curly braces and explicit return
  const sum = a + b;
  return sum * 2;
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a first class function&lt;/h3&gt; &lt;p&gt;In JavaScript, &lt;strong&gt;first-class functions(first-class citizens)&lt;/strong&gt; mean that functions are treated like any other variable. That means:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;You can assign a function to a variable.&lt;/li&gt; 
   &lt;li&gt;You can pass a function as an argument to another function.&lt;/li&gt; 
   &lt;li&gt;You can return a function from another function.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;This capability enables powerful patterns like callbacks, higher-order functions, event handling, and functional programming in JavaScript.&lt;/p&gt; &lt;p&gt;For example, the handler function below is assigned to a variable and then passed as an argument to the &lt;code&gt;addEventListener&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const handler = () =&amp;gt; console.log("This is a click handler function");
document.addEventListener("click", handler);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a first order function&lt;/h3&gt; &lt;p&gt;A first-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value. i.e, It's a regular function that works with primitive or non-function values.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const firstOrder = () =&amp;gt; console.log("I am a first order function!");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a higher order function&lt;/h3&gt; &lt;p&gt;A higher-order function is a function that either accepts another function as an argument, returns a function as its result, or both. This concept is a core part of JavaScript's functional programming capabilities and is widely used for creating modular, reusable, and expressive code.&lt;/p&gt; &lt;p&gt;The syntactic structure of higher order function will be explained with an example as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// First-order function (does not accept or return another function)
const firstOrderFunc = () =&amp;gt; 
  console.log("Hello, I am a first-order function");

// Higher-order function (accepts a function as an argument)
const higherOrder = (callback) =&amp;gt; callback();

// Passing the first-order function to the higher-order function
higherOrder(firstOrderFunc);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this example:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;firstOrderFunc&lt;/code&gt; is a regular (first-order) function.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;higherOrder&lt;/code&gt; is a higher-order function because it takes another function as an argument.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;firstOrderFunc&lt;/code&gt; is also called a &lt;strong&gt;callback function&lt;/strong&gt; because it is passed to and executed by another function.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a unary function&lt;/h3&gt; &lt;p&gt;A unary function (also known as a &lt;strong&gt;monadic&lt;/strong&gt; function) is a function that &lt;strong&gt;accepts exactly one argument&lt;/strong&gt;. The term "unary" simply refers to the function's arity—the number of arguments it takes.&lt;/p&gt; &lt;p&gt;Let us take an example of unary function,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const unaryFunction = (a) =&amp;gt; console.log(a + 10); // This will add 10 to the input and log the result
unaryFunction(5); // Output: 15
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this example:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;unaryFunction&lt;/code&gt; takes a single parameter &lt;code&gt;a&lt;/code&gt;, making it a unary function.&lt;/li&gt; 
   &lt;li&gt;It performs a simple operation: adding 10 to the input and printing the result.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the currying function&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Currying&lt;/strong&gt; is the process of transforming a function with &lt;strong&gt;multiple arguments&lt;/strong&gt; into a sequence of &lt;strong&gt;nested functions&lt;/strong&gt;, each accepting &lt;strong&gt;only one argument&lt;/strong&gt; at a time.&lt;/p&gt; &lt;p&gt;This concept is named after mathematician &lt;strong&gt;Haskell Curry&lt;/strong&gt;, and is commonly used in functional programming to enhance modularity and reuse.&lt;/p&gt; &lt;h2&gt;Before Currying (Normal n-ary Function)&lt;/h2&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const multiArgFunction = (a, b, c) =&amp;gt; a + b + c;

console.log(multiArgFunction(1, 2, 3)); // Output: 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is a standard function that takes three arguments at once.&lt;/p&gt; &lt;h2&gt;After Currying (Unary Function Chain)&lt;/h2&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const curryUnaryFunction = (a) =&amp;gt; (b) =&amp;gt; (c) =&amp;gt; a + b + c;

console.log(curryUnaryFunction(1));       // Returns: function (b) =&amp;gt; ...
console.log(curryUnaryFunction(1)(2));    // Returns: function (c) =&amp;gt; ...
console.log(curryUnaryFunction(1)(2)(3)); // Output: 6

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each function in the chain accepts one argument and returns the next function, until all arguments are provided and the final result is computed.&lt;/p&gt; &lt;h2&gt;Benefits of Currying&lt;/h2&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Improves code reusability → You can partially apply functions with known arguments.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Enhances functional composition → Easier to compose small, pure functions.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Encourages clean, modular code → You can split logic into smaller single-responsibility functions.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a pure function&lt;/h3&gt; &lt;p&gt;A &lt;strong&gt;pure function&lt;/strong&gt; is a function whose output depends only on its input arguments and produces no side effects. This means that given the same inputs, a pure function will always return the same output, and it does not modify any external state or data.&lt;/p&gt; &lt;p&gt;Let's take an example to see the difference between pure and impure functions,&lt;/p&gt; &lt;h4&gt;Example: Pure vs. Impure Functions&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// Impure Function
let numberArray = [];
const impureAddNumber = (number) =&amp;gt; numberArray.push(number);

// Pure Function
const pureAddNumber = (number) =&amp;gt; (inputArray) =&amp;gt;
  inputArray.concat([number]);

// Usage
console.log(impureAddNumber(6)); // returns 1
console.log(numberArray);        // returns [6]

console.log(pureAddNumber(7)(numberArray)); // returns [6, 7]
console.log(numberArray);                   // remains [6]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;impureAddNumber&lt;/code&gt; changes the external variable numberArray and returns the new length of the array, making it impure.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;pureAddNumber&lt;/code&gt; creates a new array with the added number and does not modify the original array, making it pure.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of pure functions&lt;/h3&gt; &lt;p&gt;Some of the major benefits of pure functions are listed below,&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Easier testing:&lt;/strong&gt; Since output depends only on input, pure functions are simple to test.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Predictability:&lt;/strong&gt; No hidden side effects make behavior easier to reason about.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Immutability:&lt;/strong&gt; Pure functions align with ES6 best practices, such as preferring const over let, supporting safer and more maintainable code.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;No side effects:&lt;/strong&gt; Reduces bugs related to shared state or mutation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the let keyword&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;let&lt;/code&gt; keyword in JavaScript is used to declare a &lt;strong&gt;block-scoped local variable&lt;/strong&gt;. This means that variables declared with &lt;code&gt;let&lt;/code&gt; are only accessible within the block, statement, or expression where they are defined. This is a significant improvement over the older &lt;code&gt;var&lt;/code&gt; keyword, which is function-scoped (or globally-scoped if declared outside a function), and does not respect block-level scoping.&lt;/p&gt; &lt;h4&gt;Key Features of &lt;code&gt;let&lt;/code&gt;:&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Block Scope:&lt;/strong&gt; The variable exists only within the nearest enclosing block (e.g., inside an &lt;code&gt;{}&lt;/code&gt; pair).&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;No Hoisting Issues:&lt;/strong&gt; While &lt;code&gt;let&lt;/code&gt; declarations are hoisted, they are not initialized until the code defining them is executed. Accessing them before declaration results in a ReferenceError (temporal dead zone).&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;No Redeclaration:&lt;/strong&gt; The same variable cannot be declared twice in the same scope with &lt;code&gt;let&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;Example:&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let counter = 30;
if (counter === 30) {
  let counter = 31;
  console.log(counter); // Output: 31 (block-scoped variable inside if-block)
}
console.log(counter); // Output: 30 (outer variable, unaffected by inner block)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this example, the &lt;code&gt;counter&lt;/code&gt; inside the &lt;code&gt;if&lt;/code&gt; block is a separate variable from the one outside. The &lt;code&gt;let&lt;/code&gt; keyword ensures that both have their own distinct scope.&lt;/p&gt; &lt;p&gt;In summary, you need to use &lt;code&gt;let&lt;/code&gt; when you want variables to be limited to the block in which they are defined, preventing accidental overwrites and bugs related to variable scope.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between let and var&lt;/h3&gt; &lt;p&gt;You can list out the differences in a tabular format&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;var&lt;/th&gt; 
     &lt;th&gt;let&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It has been available from the beginning of JavaScript&lt;/td&gt; 
     &lt;td&gt;Introduced as part of ES6&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It has function scope&lt;/td&gt; 
     &lt;td&gt;It has block scope&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Variable declaration will be hoisted, initialized as undefined&lt;/td&gt; 
     &lt;td&gt;Hoisted but not initialized&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It is possible to re-declare the variable in the same scope&lt;/td&gt; 
     &lt;td&gt;It is not possible to re-declare the variable&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;Let's take an example to see the difference,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function userDetails(username) {
  if (username) {
    console.log(salary); // undefined due to hoisting
    console.log(age); // ReferenceError: Cannot access 'age' before initialization
    let age = 30;
    var salary = 10000;
  }
  console.log(salary); //10000 (accessible due to function scope)
  console.log(age); //error: age is not defined(due to block scope)
}
userDetails("John");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the reason to choose the name let as a keyword&lt;/h3&gt; &lt;p&gt;The keyword &lt;code&gt;let&lt;/code&gt; was chosen because it originates from mathematical notation, where "let" is used to introduce new variables (for example, "let x = 5"). This term was adopted by several early programming languages such as Scheme and BASIC, establishing a tradition in computer science. JavaScript follows this convention by using &lt;code&gt;let&lt;/code&gt; to declare variables with block scope, providing a modern alternative to &lt;code&gt;var&lt;/code&gt;. The choice helps make the language more familiar to programmers coming from other languages and aligns with the mathematical practice of variable assignment.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you redeclare variables in a switch block without an error&lt;/h3&gt; &lt;p&gt;When you try to redeclare variables using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; in multiple &lt;code&gt;case&lt;/code&gt; clauses of a &lt;code&gt;switch&lt;/code&gt; statement, you will get a SyntaxError. This happens because, in JavaScript, all &lt;code&gt;case&lt;/code&gt; clauses within a &lt;code&gt;switch&lt;/code&gt; statement share the same block scope. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let counter = 1;
switch (x) {
  case 0:
    let name;
    break;
  case 1:
    let name; // SyntaxError: Identifier 'name' has already been declared
    break;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To avoid this error, you can create a new block scope within each &lt;code&gt;case&lt;/code&gt; clause by wrapping the code in curly braces &lt;code&gt;{}&lt;/code&gt;. This way, each &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; declaration is scoped only to that block, and redeclaration errors are avoided:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let counter = 1;
switch (x) {
  case 0: {
    let name;
    // code for case 0
    break;
  }
  case 1: {
    let name; // No SyntaxError
    // code for case 1
    break;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That means, to safely redeclare variables in different cases of a switch statement, wrap each case’s code in its own block using curly braces. This ensures each variable declaration is scoped to its specific case block.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the Temporal Dead Zone&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;Temporal Dead Zone (TDZ)&lt;/strong&gt; refers to the period between the start of a block and the point where a variable declared with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; is initialized. During this time, the variable exists in scope but &lt;strong&gt;cannot be accessed&lt;/strong&gt;, and attempting to do so results in a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This behavior is part of &lt;strong&gt;JavaScript's ES6 (ECMAScript 2015)&lt;/strong&gt; specification and applies &lt;strong&gt;only to variables declared with &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;&lt;/strong&gt;, not &lt;code&gt;var&lt;/code&gt;. Variables declared with &lt;code&gt;var&lt;/code&gt; are &lt;strong&gt;hoisted&lt;/strong&gt; and initialized with &lt;code&gt;undefined&lt;/code&gt;, so accessing them before the declaration does not throw an error, though it can lead to unexpected results.&lt;/p&gt; &lt;h4&gt;Example&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function someMethod() {
    console.log(counter1); // Output: undefined (due to var hoisting)
    console.log(counter2); // Throws ReferenceError (TDZ for let)

    var counter1 = 1;
    let counter2 = 2;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an IIFE (Immediately Invoked Function Expression)&lt;/h3&gt; &lt;p&gt;IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;(function () {
  // logic here
})();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables from the IIFE then it throws an error as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;(function () {
  var message = "IIFE";
  console.log(message);
})();
console.log(message); //Error: message is not defined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you decode or encode a URL in JavaScript?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;encodeURI()&lt;/code&gt; function is used to encode an URL. This function requires a URL string as a parameter and return that encoded string. &lt;code&gt;decodeURI()&lt;/code&gt; function is used to decode an URL. This function requires an encoded URL string as parameter and return that decoded string.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to encode characters such as &lt;code&gt;/ ? : @ &amp;amp; = + $ #&lt;/code&gt; then you need to use &lt;code&gt;encodeURIComponent()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let uri = "employeeDetails?name=john&amp;amp;occupation=manager";
let encoded_uri = encodeURI(uri);
let decoded_uri = decodeURI(encoded_uri);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is memoization&lt;/h3&gt; &lt;p&gt;Memoization is a functional programming technique which attempts to increase a function’s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache. Let's take an example of adding function with memoization,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const memoizeAddition = () =&amp;gt; {
  let cache = {};
  return (value) =&amp;gt; {
    if (value in cache) {
      console.log("Fetching from cache");
      return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.
    } else {
      console.log("Calculating result");
      let result = value + 20;
      cache[value] = result;
      return result;
    }
  };
};
// returned function from memoizeAddition
const addition = memoizeAddition();
console.log(addition(20)); //output: 40 calculated
console.log(addition(20)); //output: 40 cached
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Hoisting&lt;/h3&gt; &lt;p&gt;Hoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation. Let's take a simple example of variable hoisting,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(message); //output : undefined
var message = "The variable Has been hoisted";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code looks like as below to the interpreter,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var message;
console.log(message);
message = "The variable Has been hoisted";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the same fashion, function declarations are hoisted too&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;message("Good morning"); //Good morning

function message(name) {
  console.log(name);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This hoisting makes functions to be safely used in code before they are declared.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are classes in ES6&lt;/h3&gt; &lt;p&gt;In ES6, Javascript classes are primarily syntactic sugar over JavaScript’s existing prototype-based inheritance. For example, the prototype based inheritance written in function expression as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Bike(model, color) {
  this.model = model;
  this.color = color;
}

Bike.prototype.getDetails = function () {
  return this.model + " bike has" + this.color + " color";
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas ES6 classes can be defined as an alternative&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Bike {
  constructor(color, model) {
    this.color = color;
    this.model = model;
  }

  getDetails() {
    return this.model + " bike has" + this.color + " color";
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are closures&lt;/h3&gt; &lt;p&gt;A closure is the combination of a function bundled(enclosed) together with its lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function’s variables, functions and other data even after the outer function has finished its execution. The closure has three scope chains.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Own scope where variables defined between its curly brackets&lt;/li&gt; 
   &lt;li&gt;Outer function's variables&lt;/li&gt; 
   &lt;li&gt;Global variables&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let's take an example of closure concept,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Welcome(name) {
  var greetingInfo = function (message) {
    console.log(message + " " + name);
  };
  return greetingInfo;
}
var myFunction = Welcome("John");
myFunction("Welcome "); //Output: Welcome John
myFunction("Hello Mr."); //output: Hello Mr. John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As per the above code, the inner function(i.e, greetingInfo) has access to the variables in the outer function scope(i.e, Welcome) even after the outer function has returned.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are modules&lt;/h3&gt; &lt;p&gt;Modules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design patterns. Most of the JavaScript modules export an object literal, a function, or a constructor&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need modules&lt;/h3&gt; &lt;p&gt;Below are the list of benefits using modules in javascript ecosystem&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Maintainability&lt;/li&gt; 
   &lt;li&gt;Reusability&lt;/li&gt; 
   &lt;li&gt;Namespacing&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is scope in javascript&lt;/h3&gt; &lt;p&gt;Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a service worker&lt;/h3&gt; &lt;p&gt;A Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don't need a web page or user interaction. Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, push notifications, intercept and handle network requests and programmatically managing a cache of responses.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you manipulate DOM using a service worker&lt;/h3&gt; &lt;p&gt;Service worker can't access the DOM directly. But it can communicate with the pages it controls by responding to messages sent via the &lt;code&gt;postMessage&lt;/code&gt; interface, and those pages can manipulate the DOM.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you reuse information across service worker restarts&lt;/h3&gt; &lt;p&gt;The problem with service worker is that it gets terminated when not in use, and restarted when it's next needed, so you cannot rely on global state within a service worker's &lt;code&gt;onfetch&lt;/code&gt; and &lt;code&gt;onmessage&lt;/code&gt; handlers. In this case, service workers will have access to IndexedDB API in order to persist and reuse across restarts.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is IndexedDB&lt;/h3&gt; &lt;p&gt;IndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is web storage&lt;/h3&gt; &lt;p&gt;Web storage is an API that provides a mechanism by which browsers can store key/value pairs locally within the user's browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for storing data on the client.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Local storage:&lt;/strong&gt; It stores data for current origin with no expiration date.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Session storage:&lt;/strong&gt; It stores data for one session and the data is lost when the browser tab is closed.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a post message&lt;/h3&gt; &lt;p&gt;Post message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a pop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages are allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same protocol, port number, and host).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Cookie&lt;/h3&gt; &lt;p&gt;A cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as key/value pairs. For example, you can create a cookie named username as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document.cookie = "username=John";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/cookie.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need a Cookie&lt;/h3&gt; &lt;p&gt;Cookies are used to remember information about the user profile(such as username). It basically involves two steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;When a user visits a web page, the user profile can be stored in a cookie.&lt;/li&gt; 
   &lt;li&gt;Next time the user visits the page, the cookie remembers the user profile.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the options in a cookie&lt;/h3&gt; &lt;p&gt;There are few below options available for a cookie,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;By default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry date (in UTC time).&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document.cookie = "username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC";
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;By default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to using a path parameter.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document.cookie = "username=John; path=/services";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you delete a cookie&lt;/h3&gt; &lt;p&gt;You can delete a cookie by setting the expiry date as a passed date. You don't need to specify a cookie value in this case. For example, you can delete a username cookie in the current page as below.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document.cookie =
  "username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn't allow to delete a cookie unless you specify a path parameter.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between cookie, local storage and session storage&lt;/h3&gt; &lt;p&gt;Below are some of the differences between cookie, local storage and session storage,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Feature&lt;/th&gt; 
     &lt;th&gt;Cookie&lt;/th&gt; 
     &lt;th&gt;Local storage&lt;/th&gt; 
     &lt;th&gt;Session storage&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Accessed on client or server side&lt;/td&gt; 
     &lt;td&gt;Both server-side &amp;amp; client-side. The &lt;code&gt;set-cookie&lt;/code&gt; HTTP response header is used by server inorder to send it to user.&lt;/td&gt; 
     &lt;td&gt;client-side only&lt;/td&gt; 
     &lt;td&gt;client-side only&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Expiry&lt;/td&gt; 
     &lt;td&gt;Manually configured using Expires option&lt;/td&gt; 
     &lt;td&gt;Forever until deleted&lt;/td&gt; 
     &lt;td&gt;until tab is closed&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;SSL support&lt;/td&gt; 
     &lt;td&gt;Supported&lt;/td&gt; 
     &lt;td&gt;Not supported&lt;/td&gt; 
     &lt;td&gt;Not supported&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Maximum data size&lt;/td&gt; 
     &lt;td&gt;4KB&lt;/td&gt; 
     &lt;td&gt;5 MB&lt;/td&gt; 
     &lt;td&gt;5MB&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Accessible from&lt;/td&gt; 
     &lt;td&gt;Any window&lt;/td&gt; 
     &lt;td&gt;Any window&lt;/td&gt; 
     &lt;td&gt;Same tab&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Sent with requests&lt;/td&gt; 
     &lt;td&gt;Yes&lt;/td&gt; 
     &lt;td&gt;No&lt;/td&gt; 
     &lt;td&gt;No&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main difference between localStorage and sessionStorage&lt;/h3&gt; &lt;p&gt;LocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e it has no expiration time) whereas in sessionStorage data gets cleared when the page session ends.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access web storage&lt;/h3&gt; &lt;p&gt;The Window object implements the &lt;code&gt;WindowLocalStorage&lt;/code&gt; and &lt;code&gt;WindowSessionStorage&lt;/code&gt; objects which has &lt;code&gt;localStorage&lt;/code&gt;(window.localStorage) and &lt;code&gt;sessionStorage&lt;/code&gt;(window.sessionStorage) properties respectively. These properties create an instance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and storage type (session or local). For example, you can read and write on local storage objects as below&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;localStorage.setItem("logo", document.getElementById("logo").value);
localStorage.getItem("logo");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the methods available on session storage&lt;/h3&gt; &lt;p&gt;The session storage provided methods for reading, writing and clearing the session data&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// Save data to sessionStorage
sessionStorage.setItem("key", "value");

// Get saved data from sessionStorage
let data = sessionStorage.getItem("key");

// Remove saved data from sessionStorage
sessionStorage.removeItem("key");

// Remove all saved data from sessionStorage
sessionStorage.clear();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a storage event and its event handler&lt;/h3&gt; &lt;p&gt;The StorageEvent is an event that fires when a storage area has been changed in the context of another document. Whereas onstorage property is an EventHandler for processing storage events. The syntax would be as below&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;window.onstorage = functionRef;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's take the example usage of onstorage event handler which logs the storage key and it's values&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;window.onstorage = function (e) {
  console.log(
    "The " +
      e.key +
      " key has been changed from " +
      e.oldValue +
      " to " +
      e.newValue +
      "."
  );
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need web storage&lt;/h3&gt; &lt;p&gt;Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Also, the information is never transferred to the server. Hence this is a more recommended approach than Cookies.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check web storage browser support&lt;/h3&gt; &lt;p&gt;You need to check browser support for localStorage and sessionStorage before using web storage,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (typeof Storage !== "undefined") {
  // Code for localStorage/sessionStorage.
} else {
  // Sorry! No Web Storage support..
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check web workers browser support&lt;/h3&gt; &lt;p&gt;You need to check browser support for web workers before using it&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (typeof Worker !== "undefined") {
  // code for Web worker support.
} else {
  // Sorry! No Web Worker support..
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example of a web worker&lt;/h3&gt; &lt;p&gt;You need to follow below steps to start using web workers for counting example&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Create a Web Worker File: You need to write a script to increment the count value. Let's name it as counter.js&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let i = 0;

function timedCount() {
  i = i + 1;
  postMessage(i);
  setTimeout("timedCount()", 500);
}

timedCount();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here postMessage() method is used to post a message back to the HTML page&lt;/p&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;Create a Web Worker Object: You can create a web worker object by checking for browser support. Let's name this file as web_worker_example.js&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (typeof w == "undefined") {
  w = new Worker("counter.js");
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and we can receive messages from web worker&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;w.onmessage = function (event) {
  document.getElementById("message").innerHTML = event.data;
};
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="3"&gt; 
   &lt;li&gt;Terminate a Web Worker: Web workers will continue to listen for messages (even after the external script is finished) until it is terminated. You can use the terminate() method to terminate listening to the messages.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;w.terminate();
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="4"&gt; 
   &lt;li&gt;Reuse the Web Worker: If you set the worker variable to undefined you can reuse the code&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;w = undefined;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the restrictions of web workers on DOM&lt;/h3&gt; &lt;p&gt;WebWorkers don't have access to below javascript objects since they are defined in an external files&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Window object&lt;/li&gt; 
   &lt;li&gt;Document object&lt;/li&gt; 
   &lt;li&gt;Parent object&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a promise&lt;/h3&gt; &lt;p&gt;A &lt;strong&gt;Promise&lt;/strong&gt; is a JavaScript object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It acts as a placeholder for a value that may not be available yet but will be resolved in the future.&lt;/p&gt; &lt;p&gt;A Promise can be in one of &lt;strong&gt;three states&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;pending&lt;/code&gt;: Initial state, neither fulfilled nor rejected.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;fulfilled&lt;/code&gt;: The operation completed successfully.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;rejected&lt;/code&gt;: The operation failed (e.g., due to a network error).&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;Promise Syntax&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const promise = new Promise(function (resolve, reject) {
  // Perform async operation
});
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;Example: Creating and Using a Promise&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const promise = new Promise((resolve, reject) =&amp;gt; {
  setTimeout(() =&amp;gt; {
    resolve("I'm a Promise!");
  }, 5000);
});

promise
  .then((value) =&amp;gt; console.log(value)); // Logs after 5 seconds: "I'm a Promise!"
  .catch((error) =&amp;gt; console.error(error))  // Handles any rejection
  .finally(() =&amp;gt; console.log("Done"));     // Runs regardless of success or failure
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A &lt;code&gt;Promise&lt;/code&gt; is created to handle an asynchronous operation with &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; callbacks.&lt;/li&gt; 
   &lt;li&gt;The &lt;code&gt;setTimeout&lt;/code&gt; resolves the promise with a value after 5 seconds.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;.then()&lt;/code&gt;, &lt;code&gt;.catch()&lt;/code&gt;, and &lt;code&gt;.finally()&lt;/code&gt; are used to handle success, errors, and cleanup respectively.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The action flow of a promise will be as below,&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/promises.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need a promise&lt;/h3&gt; &lt;p&gt;Promises are &lt;strong&gt;used to handle asynchronous operations&lt;/strong&gt;, especially in languages like JavaScript, which often work with non-blocking operations such as network requests, file I/O, and timers. When an operation is asynchronous, it doesn't immediately return a result; instead, it works in the background and provides the result later. Handling this in a clean, organized way can be difficult without a structured approach.&lt;/p&gt; &lt;p&gt;Promises are used to:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Handle asynchronous operations&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Provide a cleaner alternative to callbacks&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Avoid callback hell&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Make code more readable and maintainable&lt;/strong&gt;.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Explain the three states of promise&lt;/h3&gt; &lt;p&gt;Promises have three states:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Pending:&lt;/strong&gt; This is an initial state of the Promise before an operation begins&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Fulfilled:&lt;/strong&gt; This state indicates that the specified operation was completed.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Rejected:&lt;/strong&gt; This state indicates that the operation did not complete. In this case an error value will be thrown.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a callback function&lt;/h3&gt; &lt;p&gt;A callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action. Let's take a simple example of how to use callback function&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function callbackFunction(name) {
  console.log("Hello " + name);
}

function outerFunction(callback) {
  let name = prompt("Please enter your name.");
  callback(name);
}

outerFunction(callbackFunction);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we need callbacks&lt;/h3&gt; &lt;p&gt;The callbacks are needed because javascript is an event driven language. That means instead of waiting for a response, javascript will keep executing while listening for other events. Let's take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function firstFunction() {
  // Simulate a code delay
  setTimeout(function () {
    console.log("First function called");
  }, 1000);
}
function secondFunction() {
  console.log("Second function called");
}
firstFunction();
secondFunction();

// Output:
// Second function called
// First function called
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As observed from the output, javascript didn't wait for the response of the first function and the remaining code block got executed. So callbacks are used in a way to make sure that certain code doesn’t execute until the other code finishes execution.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a callback hell&lt;/h3&gt; &lt;p&gt;Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;async1(function(){
    async2(function(){
        async3(function(){
            async4(function(){
                ....
            });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are server-sent events&lt;/h3&gt; &lt;p&gt;Server-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel - events flow from server to client only. This has been used in Facebook/Twitter/X updates, stock price updates, news feeds etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you receive server-sent event notifications&lt;/h3&gt; &lt;p&gt;The EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (typeof EventSource !== "undefined") {
  var source = new EventSource("sse_generator.js");
  source.onmessage = function (event) {
    document.getElementById("output").innerHTML += event.data + "&amp;lt;br&amp;gt;";
  };
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check browser support for server-sent events&lt;/h3&gt; &lt;p&gt;You can perform browser support for server-sent events before using it as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (typeof EventSource !== "undefined") {
  // Server-sent events supported. Let's have some code here!
} else {
  // No server-sent events supported
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the events available for server sent events&lt;/h3&gt; &lt;p&gt;Below are the list of events available for server sent events&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Event&lt;/th&gt; 
     &lt;th&gt;Description&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;onopen&lt;/td&gt; 
     &lt;td&gt;It is used when a connection to the server is opened&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;onmessage&lt;/td&gt; 
     &lt;td&gt;This event is used when a message is received&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;onerror&lt;/td&gt; 
     &lt;td&gt;It happens when an error occurs&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main rules of promise&lt;/h3&gt; &lt;p&gt;A promise must follow a specific set of rules:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;A promise is an object that supplies a standard-compliant &lt;code&gt;.then()&lt;/code&gt; method&lt;/li&gt; 
   &lt;li&gt;A pending promise may transition into either fulfilled or rejected state&lt;/li&gt; 
   &lt;li&gt;A fulfilled or rejected promise is settled and it must not transition into any other state.&lt;/li&gt; 
   &lt;li&gt;Once a promise is settled, the value must not change.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is callback in callback&lt;/h3&gt; &lt;p&gt;You can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks. Beware, too many levels of nesting lead to &lt;a href="https://github.com/sudheerj/javascript-interview-questions?tab=readme-ov-file#what-is-a-callback-hell"&gt;Callback hell&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;loadScript("/script1.js", function (script) {
  console.log("first script is loaded");

  loadScript("/script2.js", function (script) {
    console.log("second script is loaded");

    loadScript("/script3.js", function (script) {
      console.log("third script is loaded");
      // after all scripts are loaded
    });
  });
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is promise chaining&lt;/h3&gt; &lt;p&gt;The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let's take an example of promise chaining for calculating the final result,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;new Promise(function (resolve, reject) {
  setTimeout(() =&amp;gt; resolve(1), 1000);
})
  .then(function (result) {
    console.log(result); // 1
    return result * 2;
  })
  .then(function (result) {
    console.log(result); // 2
    return result * 3;
  })
  .then(function (result) {
    console.log(result); // 6
    return result * 4;
  });
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The initial promise resolves in 1 second,&lt;/li&gt; 
   &lt;li&gt;After that &lt;code&gt;.then&lt;/code&gt; handler is called by logging the result(1) and then return a promise with the value of result * 2.&lt;/li&gt; 
   &lt;li&gt;After that the value passed to the next &lt;code&gt;.then&lt;/code&gt; handler by logging the result(2) and return a promise with result * 3.&lt;/li&gt; 
   &lt;li&gt;Finally the value passed to the last &lt;code&gt;.then&lt;/code&gt; handler by logging the result(6) and return a promise with result * 4.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is promise.all&lt;/h3&gt; &lt;p&gt;Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Promise.all([Promise1, Promise2, Promise3]) .then(result) =&amp;gt; {   console.log(result) }) .catch(error =&amp;gt; console.log(`Error in promises ${error}`))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember that the order of the promises(output the result) is maintained as per input order.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the race method in promise&lt;/h3&gt; &lt;p&gt;Promise.race() method will return the promise instance which is firstly resolved or rejected. Let's take an example of race() method where promise2 is resolved first&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var promise1 = new Promise(function (resolve, reject) {
  setTimeout(resolve, 500, "one");
});
var promise2 = new Promise(function (resolve, reject) {
  setTimeout(resolve, 100, "two");
});

Promise.race([promise1, promise2]).then(function (value) {
  console.log(value); // "two" // Both promises will resolve, but promise2 is faster
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a strict mode in javascript&lt;/h3&gt; &lt;p&gt;JavaScript’s "use strict" directive is used to opt into a stricter parsing and error-handling mode for your scripts or functions. It helps catch common bugs, makes your code more secure, and prepares it for future versions of JavaScript.&lt;/p&gt; &lt;p&gt;Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression &lt;code&gt;"use strict";&lt;/code&gt; instructs the browser to use the javascript code in the Strict mode. This also enables block-scoped variables.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need strict mode&lt;/h3&gt; &lt;p&gt;Strict mode is useful to write "secure" JavaScript by notifying "bad syntax" into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you declare strict mode&lt;/h3&gt; &lt;p&gt;The strict mode is declared by adding "use strict"; to the beginning of a script or a function. If declared at the beginning of a script, it has global scope.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;"use strict";
x = 3.14; // This will cause an error because x is not declared
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and if you declare inside a function, it has local scope&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;x = 3.14; // This will not cause an error.
myFunction();

function myFunction() {
  "use strict";
  y = 3.14; // This will cause an error
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of double exclamation&lt;/h3&gt; &lt;p&gt;The double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null, undefined, etc.), it will be false, otherwise, it will be true. For example, you can test IE version using this expression as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let isIE8 = false;
isIE8 = !!navigator.userAgent.match(/MSIE 8.0/);
console.log(isIE8); // returns true or false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don't use this expression then it returns the original value.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(navigator.userAgent.match(/MSIE 8.0/)); // returns either an Array or null
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The expression !! is not an operator, but it is just twice of ! operator.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the delete operator&lt;/h3&gt; &lt;p&gt;The delete operator is used to delete the property as well as its value.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var user = { firstName: "John", lastName: "Doe", age: 20 };
delete user.age;

console.log(user); // {firstName: "John", lastName:"Doe"}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is typeof operator&lt;/h3&gt; &lt;p&gt;You can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a variable or an expression.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;typeof "John Abraham"; // Returns "string"
typeof (1 + 2); // Returns "number"
typeof [1, 2, 3]; // Returns "object" because all arrays are also objects
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is undefined property&lt;/h3&gt; &lt;p&gt;The undefined property indicates that a variable has not been assigned a value, or declared but not initialized at all. The type of undefined value is undefined too.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var user; // Value is undefined, type is undefined
console.log(typeof user); //undefined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Any variable can be emptied by setting the value to undefined.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;user = undefined;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is null value&lt;/h3&gt; &lt;p&gt;The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values. The type of null value is object. You can empty the variable by setting the value to null.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var user = null;
console.log(typeof user); //object
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between null and undefined&lt;/h3&gt; &lt;p&gt;Below are the main differences between null and undefined,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Null&lt;/th&gt; 
     &lt;th&gt;Undefined&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It is an assignment value which indicates that variable points to no object.&lt;/td&gt; 
     &lt;td&gt;It is not an assignment value where a variable has been declared but has not yet been assigned a value.&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Type of null is object&lt;/td&gt; 
     &lt;td&gt;Type of undefined is undefined&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;The null value is a primitive value that represents the null, empty, or non-existent reference.&lt;/td&gt; 
     &lt;td&gt;The undefined value is a primitive value used when a variable has not been assigned a value.&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Indicates the absence of a value for a variable&lt;/td&gt; 
     &lt;td&gt;Indicates absence of variable itself&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Converted to zero (0) while performing primitive operations&lt;/td&gt; 
     &lt;td&gt;Converted to NaN while performing primitive operations&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is eval&lt;/h3&gt; &lt;p&gt;The eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, variable, statement, or sequence of statements.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(eval("1 + 2")); //  3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between window and document&lt;/h3&gt; &lt;p&gt;Below are the main differences between window and document,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Window&lt;/th&gt; 
     &lt;th&gt;Document&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It is the root level element in any web page&lt;/td&gt; 
     &lt;td&gt;It is the direct child of the window object. This is also known as Document Object Model (DOM)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;By default window object is available implicitly in the page&lt;/td&gt; 
     &lt;td&gt;You can access it via window.document or document.&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It has methods like alert(), confirm() and properties like document, location&lt;/td&gt; 
     &lt;td&gt;It provides methods like getElementById, getElementsByTagName, createElement etc&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access history in javascript&lt;/h3&gt; &lt;p&gt;The window.history object contains the browser's history. You can load previous and next URLs in the history using back() and next() methods.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function goBack() {
  window.history.back();
}
function goForward() {
  window.history.forward();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also access history without window prefix.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect caps lock key turned on or not&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;mouseEvent getModifierState()&lt;/code&gt; is used to return a boolean value that indicates whether the specified modifier key is activated or not. The modifiers such as CapsLock, ScrollLock and NumLock are activated when they are clicked, and deactivated when they are clicked again.&lt;/p&gt; &lt;p&gt;Let's take an input element to detect the CapsLock on/off behavior with an example:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;input type="password" onmousedown="enterInput(event)" /&amp;gt;

&amp;lt;p id="feedback"&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;script&amp;gt;
  function enterInput(e) {
    var flag = e.getModifierState("CapsLock");
    if (flag) {
      document.getElementById("feedback").innerHTML = "CapsLock activated";
    } else {
      document.getElementById("feedback").innerHTML =
        "CapsLock not activated";
    }
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is isNaN&lt;/h3&gt; &lt;p&gt;The isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;isNaN("Hello"); //true
isNaN("100"); //false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between undeclared and undefined variables&lt;/h3&gt; &lt;p&gt;Below are the major differences between undeclared(not defined) and undefined variables,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;undeclared&lt;/th&gt; 
     &lt;th&gt;undefined&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;These variables do not exist in a program and are not declared&lt;/td&gt; 
     &lt;td&gt;These variables declared in the program but have not assigned any value&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;If you try to read the value of an undeclared variable, then a runtime error is encountered&lt;/td&gt; 
     &lt;td&gt;If you try to read the value of an undefined variable, an undefined value is returned.&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var a;
a; // yields undefined

b; // Throws runtime error like "Uncaught ReferenceError: b is not defined"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This can be confusing, because it says &lt;code&gt;not defined&lt;/code&gt; instead of &lt;code&gt;not declared&lt;/code&gt; (Chrome)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are global variables&lt;/h3&gt; &lt;p&gt;Global variables are those that are available throughout the length of the code without any scope. The var keyword is used to declare a local variable but if you omit it then it will become global variable&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;msg = "Hello"; // var is missing, it becomes global variable
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems with global variables&lt;/h3&gt; &lt;p&gt;The problem with global variables is the conflict of variable names of local and global scope. It is also difficult to debug and test the code that relies on global variables.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is NaN property&lt;/h3&gt; &lt;p&gt;The NaN property is a global property that represents "Not-a-Number" value. i.e, It indicates that a value is not a legal number. It is very rare to use NaN in a program but it can be used as return value for few cases&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Math.sqrt(-1);
parseInt("Hello");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of isFinite function&lt;/h3&gt; &lt;p&gt;The isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;isFinite(Infinity); // false
isFinite(NaN); // false
isFinite(-Infinity); // false

isFinite(100); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event flow&lt;/h3&gt; &lt;p&gt;Event flow refers to the order in which events are handled in the browser when a user interacts with elements on a webpage like clicking, typing, hovering, etc.&lt;/p&gt; &lt;p&gt;When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object.&lt;/p&gt; &lt;p&gt;Hence, there are three phases in JavaScript’s event flow:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Event Capturing(Top to Bottom): The event starts from the window/document and moves down the DOM tree toward the target element.&lt;/li&gt; 
   &lt;li&gt;Target phase: The event reaches the target element — the element that was actually interacted with.&lt;/li&gt; 
   &lt;li&gt;Event Bubbling(Bottom to Top): The event then bubbles back up from the target element to the root.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is event capturing&lt;/h3&gt; &lt;p&gt;Event capturing is a phase of event propagation in which an event is first intercepted by the outermost ancestor element, then travels downward through the DOM hierarchy until it reaches the target (innermost) element.&lt;/p&gt; &lt;p&gt;To handle events during the capturing phase, you need to pass &lt;code&gt;true&lt;/code&gt; as the third argument to the &lt;code&gt;addEventListener&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt; &amp;lt;div&amp;gt;
   &amp;lt;button class="child"&amp;gt;Hello&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;script&amp;gt;
   const parent = document.querySelector("div");
   const child = document.querySelector(".child");

   // Capturing phase: parent listener (runs first)
   parent.addEventListener("click", function () {
     console.log("Parent (capturing)");
   }, true); // `true` enables capturing

   // Bubbling phase: child listener (runs after)
   child.addEventListener("click", function () {
     console.log("Child (bubbling)");
   });
 &amp;lt;/script&amp;gt;
 // Parent (capturing)
 // Child (bubbling)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is event bubbling&lt;/h3&gt; &lt;p&gt;Event bubbling is a type of event propagation in which an event first triggers on the innermost target element (the one the user interacted with), and then bubbles up through its ancestors in the DOM hierarchy — eventually reaching the outermost elements, like the document or window.&lt;/p&gt; &lt;p&gt;By default, event listeners in JavaScript are triggered during the bubbling phase, unless specified otherwise.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;div&amp;gt;
  &amp;lt;button class="child"&amp;gt;Hello&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
  const parent = document.querySelector("div");
  const child = document.querySelector(".child");

  // Bubbling phase (default)
  parent.addEventListener("click", function () {
    console.log("Parent");
  });

  child.addEventListener("click", function () {
    console.log("Child");
  });
&amp;lt;/script&amp;gt;
//Child
//Parent
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here, at first, the event triggers on the child button. Thereafter it bubbles up and triggers the parent div's event handler.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you submit a form using JavaScript&lt;/h3&gt; &lt;p&gt;You can submit a form using &lt;code&gt;document.forms[0].submit()&lt;/code&gt;. All the form input's information is submitted using onsubmit event handler&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function submit() {
  document.forms[0].submit();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you find operating system details&lt;/h3&gt; &lt;p&gt;The window.navigator object contains information about the visitor's browser OS details. Some of the OS properties are available under platform property,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(navigator.platform);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between document load and DOMContentLoaded events&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;DOMContentLoaded&lt;/code&gt; event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between native, host and user objects&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Native objects&lt;/code&gt; are objects that are part of the JavaScript language defined by the ECMAScript specification. For example, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec. &lt;code&gt;Host objects&lt;/code&gt; are objects provided by the browser or runtime environment (Node).&lt;/p&gt; &lt;p&gt;For example, window, XmlHttpRequest, DOM nodes etc are considered as host objects. &lt;code&gt;User objects&lt;/code&gt; are objects defined in the javascript code. For example, User objects created for profile information.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the tools or techniques used for debugging JavaScript code&lt;/h3&gt; &lt;p&gt;You can use below tools or techniques for debugging javascript&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Chrome Devtools&lt;/li&gt; 
   &lt;li&gt;debugger statement&lt;/li&gt; 
   &lt;li&gt;Good old console.log statement&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the pros and cons of promises over callbacks&lt;/h3&gt; &lt;p&gt;Below are the list of pros and cons of promises over callbacks,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It avoids callback hell which is unreadable&lt;/li&gt; 
   &lt;li&gt;Easy to write sequential asynchronous code with .then()&lt;/li&gt; 
   &lt;li&gt;Easy to write parallel asynchronous code with Promise.all()&lt;/li&gt; 
   &lt;li&gt;Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol start="5"&gt; 
   &lt;li&gt;It makes little complex code&lt;/li&gt; 
   &lt;li&gt;You need to load a polyfill if ES6 is not supported&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between an attribute and a property&lt;/h3&gt; &lt;p&gt;Attributes are defined on the HTML markup whereas properties are defined on the DOM. For example, the below HTML element has 2 attributes: &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;input type="text" value="Name:"&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can retrieve the attribute value as below, for example after typing "Good morning" into the input field:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const input = document.querySelector("input");
console.log(input.getAttribute("value")); // Good morning
console.log(input.value); // Good morning
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And after you change the value of the text field to "Good evening", it becomes like&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(input.getAttribute("value")); // Good evening
console.log(input.value); // Good evening
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is same-origin policy&lt;/h3&gt; &lt;p&gt;The same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a malicious script on one page from obtaining access to sensitive data on another web page using Document Object Model(DOM).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of void 0&lt;/h3&gt; &lt;p&gt;Void(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect, because it will return the undefined primitive value. It is commonly used for HTML documents that use href="JavaScript:Void(0);" within an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element. i.e, when you click a link, the browser loads a new page or refreshes the same page. But this behavior will be prevented using this expression. For example, the below link notify the message without reloading the page&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;a href="JavaScript:void(0);" onclick="alert('Well done!')"&amp;gt;
  Click Me!
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is JavaScript a compiled or interpreted language&lt;/h3&gt; &lt;p&gt;JavaScript is an interpreted language, not a compiled language. An interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as Just-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is JavaScript a case-sensitive language&lt;/h3&gt; &lt;p&gt;Yes, JavaScript is a case sensitive language. The language keywords, variables, function &amp;amp; object names, and any other identifiers must always be typed with a consistent capitalization of letters.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is there any relation between Java and JavaScript&lt;/h3&gt; &lt;p&gt;No, they are entirely two different programming languages and have nothing to do with each other. But both of them are Object Oriented Programming languages and like many other languages, they follow similar syntax for basic features(if, else, for, switch, break, continue etc).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are events&lt;/h3&gt; &lt;p&gt;Events are "things" that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can &lt;code&gt;react&lt;/code&gt; on these events. Some of the examples of HTML events are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Web page has finished loading&lt;/li&gt; 
   &lt;li&gt;Input field was changed&lt;/li&gt; 
   &lt;li&gt;Button was clicked&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let's describe the behavior of click event for button element,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
 &amp;lt;head&amp;gt;
   &amp;lt;script&amp;gt;
     function greeting() {
       alert('Hello! Good morning');
     }
   &amp;lt;/script&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
   &amp;lt;button type="button" onclick="greeting()"&amp;gt;Click me&amp;lt;/button&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Who created javascript&lt;/h3&gt; &lt;p&gt;JavaScript was created by Brendan Eich in 1995 during his time at Netscape Communications. Initially it was developed under the name &lt;code&gt;Mocha&lt;/code&gt;, but later the language was officially called &lt;code&gt;LiveScript&lt;/code&gt; when it first shipped in beta releases of Netscape.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of preventDefault method&lt;/h3&gt; &lt;p&gt;The preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document
  .getElementById("link")
  .addEventListener("click", function (event) {
    event.preventDefault();
  });
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember that not all events are cancelable.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of stopPropagation method&lt;/h3&gt; &lt;p&gt;The stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below nested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1)&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;p&amp;gt;Click DIV1 Element&amp;lt;/p&amp;gt;
&amp;lt;div onclick="secondFunc()"&amp;gt;DIV 2
  &amp;lt;div onclick="firstFunc(event)"&amp;gt;DIV 1&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
function firstFunc(event) {
  alert("DIV 1");
  event.stopPropagation();
}

function secondFunc() {
  alert("DIV 2");
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the steps involved in return false usage&lt;/h3&gt; &lt;p&gt;The return false statement in event handlers performs the below steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;First it stops the browser's default action or behaviour.&lt;/li&gt; 
   &lt;li&gt;It prevents the event from propagating the DOM&lt;/li&gt; 
   &lt;li&gt;Stops callback execution and returns immediately when called.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is BOM&lt;/h3&gt; &lt;p&gt;The Browser Object Model (BOM) allows JavaScript to "talk to" the browser. It consists of the objects navigator, history, screen, location and document which are children of the window. The Browser Object Model is not standardized and can change based on different browsers.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/bom.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of setTimeout&lt;/h3&gt; &lt;p&gt;The setTimeout() method is used to call a function or evaluate an expression after a specified number of milliseconds. For example, let's log a message after 2 seconds using setTimeout method,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;setTimeout(function () {
  console.log("Good morning");
}, 2000);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of setInterval&lt;/h3&gt; &lt;p&gt;The setInterval() method is used to call a function or evaluate an expression at specified intervals (in milliseconds). For example, let's log a message after 2 seconds using setInterval method,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;setInterval(function () {
  console.log("Good morning");
}, 2000);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why is JavaScript treated as Single threaded&lt;/h3&gt; &lt;p&gt;JavaScript is a single-threaded language. Because the language specification does not allow the programmer to write code so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages like java, go, C++ can make multi-threaded and multi-process programs.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event delegation&lt;/h3&gt; &lt;p&gt;Event delegation is a technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.&lt;/p&gt; &lt;p&gt;For example, if you wanted to detect field changes inside a specific form, you can use event delegation technique,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var form = document.querySelector("#registration-form");

// Listen for changes to fields inside the form
form.addEventListener(
  "input",
  function (event) {
    // Log the field that was changed
    console.log(event.target);
  },
  false
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ECMAScript&lt;/h3&gt; &lt;p&gt;ECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA International standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript was released in 1997.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSON&lt;/h3&gt; &lt;p&gt;JSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language in the way objects are built in JavaScript.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the syntax rules of JSON&lt;/h3&gt; &lt;p&gt;Below are the list of syntax rules of JSON&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The data is in name/value pairs&lt;/li&gt; 
   &lt;li&gt;The data is separated by commas&lt;/li&gt; 
   &lt;li&gt;Curly braces hold objects&lt;/li&gt; 
   &lt;li&gt;Square brackets hold arrays&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose JSON stringify&lt;/h3&gt; &lt;p&gt;When sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var userJSON = { name: "John", age: 31 };
var userString = JSON.stringify(userJSON);
console.log(userString); //"{"name":"John","age":31}"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you parse JSON string&lt;/h3&gt; &lt;p&gt;When receiving the data from a web server, the data is always in a string format. But you can convert this string value to a javascript object using parse() method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var userString = '{"name":"John","age":31}';
var userJSON = JSON.parse(userString);
console.log(userJSON); // {name: "John", age: 31}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need JSON&lt;/h3&gt; &lt;p&gt;When exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can easily be sent to and from a server, and used as a data format by any programming language.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are PWAs&lt;/h3&gt; &lt;p&gt;Progressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and indexed by search engines.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of clearTimeout method&lt;/h3&gt; &lt;p&gt;The clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function before that. i.e, The return value of setTimeout() function is stored in a variable and it’s passed into the clearTimeout() function to clear the timer.&lt;/p&gt; &lt;p&gt;For example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be cleared by the clearTimeout() method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;script&amp;gt;
     var msg;
     function greeting() {
        alert('Good morning');
     }
     function start() {
       msg =setTimeout(greeting, 3000);

     }

     function stop() {
         clearTimeout(msg);
     }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of clearInterval method&lt;/h3&gt; &lt;p&gt;The clearInterval() function is used in javascript to clear the interval which has been set by setInterval() function. i.e, The return value returned by setInterval() function is stored in a variable and it’s passed into the clearInterval() function to clear the interval.&lt;/p&gt; &lt;p&gt;For example, the below setInterval method is used to display the message for every 3 seconds. This interval can be cleared by the clearInterval() method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;script&amp;gt;
     var msg;
     function greeting() {
        alert('Good morning');
     }
     function start() {
       msg = setInterval(greeting, 3000);

     }

     function stop() {
         clearInterval(msg);
     }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you redirect new page in javascript&lt;/h3&gt; &lt;p&gt;In vanilla javascript, you can redirect to a new page using the &lt;code&gt;location&lt;/code&gt; property of window object. The syntax would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function redirect() {
  window.location.href = "newPage.html";
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check whether a string contains a substring&lt;/h3&gt; &lt;p&gt;There are 3 possible ways to check whether a string contains a substring or not,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using includes:&lt;/strong&gt; ES6 provided &lt;code&gt;String.prototype.includes&lt;/code&gt; method to test a string contains a substring&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var mainString = "hello",
  subString = "hell";
mainString.includes(subString);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Using indexOf:&lt;/strong&gt; In an ES5 or older environment, you can use &lt;code&gt;String.prototype.indexOf&lt;/code&gt; which returns the index of a substring. If the index value is not equal to -1 then it means the substring exists in the main string.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var mainString = "hello",
  subString = "hell";
mainString.indexOf(subString) !== -1;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="3"&gt; 
   &lt;li&gt;&lt;strong&gt;Using RegEx:&lt;/strong&gt; The advanced solution is using Regular expression's test method(&lt;code&gt;RegExp.test&lt;/code&gt;), which allows for testing for against regular expressions&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var mainString = "hello",
  regex = /hell/;
regex.test(mainString);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you validate an email in javascript&lt;/h3&gt; &lt;p&gt;You can validate an email in javascript using regular expressions. It is recommended to do validations on the server side instead of the client side. Because the javascript can be disabled on the client side.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function validateEmail(email) {
  var re =
    /^(([^&amp;lt;&amp;gt;()\[\]\\.,;:\s@"]+(\.[^&amp;lt;&amp;gt;()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(String(email).toLowerCase());
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The above regular expression accepts unicode characters.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the current url with javascript&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;window.location.href&lt;/code&gt; expression to get the current url path and you can use the same expression for updating the URL too. You can also use &lt;code&gt;document.URL&lt;/code&gt; for read-only purposes but this solution has issues in FF.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log("location.href", window.location.href); // Returns full URL
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the various url properties of location object&lt;/h3&gt; &lt;p&gt;The below &lt;code&gt;Location&lt;/code&gt; object properties can be used to access URL components of the page,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;href - The entire URL&lt;/li&gt; 
   &lt;li&gt;protocol - The protocol of the URL&lt;/li&gt; 
   &lt;li&gt;host - The hostname and port of the URL&lt;/li&gt; 
   &lt;li&gt;hostname - The hostname of the URL&lt;/li&gt; 
   &lt;li&gt;port - The port number in the URL&lt;/li&gt; 
   &lt;li&gt;pathname - The path name of the URL&lt;/li&gt; 
   &lt;li&gt;search - The query portion of the URL&lt;/li&gt; 
   &lt;li&gt;hash - The anchor portion of the URL&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do get query string values in javascript&lt;/h3&gt; &lt;p&gt;You can use URLSearchParams to get query string values in javascript. Let's see an example to get the client code value from URL query string,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const urlParams = new URLSearchParams(window.location.search);
const clientCode = urlParams.get("clientCode");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check if a key exists in an object&lt;/h3&gt; &lt;p&gt;You can check whether a key exists in an object or not using three approaches,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using in operator:&lt;/strong&gt; You can use the in operator whether a key exists in an object or not&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;"key" in obj;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and If you want to check if a key doesn't exist, remember to use parenthesis,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;!("key" in obj);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using hasOwnProperty method:&lt;/strong&gt; You can use &lt;code&gt;hasOwnProperty&lt;/code&gt; to particularly test for properties of the object instance (and not inherited properties)&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;obj.hasOwnProperty("key"); // true
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using undefined comparison:&lt;/strong&gt; If you access a non-existing property from an object, the result is undefined. Let’s compare the properties against undefined to determine the existence of the property.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
  name: "John",
};

console.log(user.name !== undefined); // true
console.log(user.nickName !== undefined); // false
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you loop through or enumerate javascript object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;for-in&lt;/code&gt; loop to loop through javascript object. You can also make sure that the key you get is an actual property of an object, and doesn't come from the prototype using &lt;code&gt;hasOwnProperty&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var object = {
  k1: "value1",
  k2: "value2",
  k3: "value3",
};

for (var key in object) {
  if (object.hasOwnProperty(key)) {
    console.log(key + " -&amp;gt; " + object[key]); // k1 -&amp;gt; value1 ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you test for an empty object&lt;/h3&gt; &lt;p&gt;There are different solutions based on ECMAScript versions&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using Object entries(ECMA 7+):&lt;/strong&gt; You can use object entries length along with constructor type.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Object.entries(obj).length === 0 &amp;amp;&amp;amp; obj.constructor === Object; // Since date object length is 0, you need to check constructor check as well
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Using Object keys(ECMA 5+):&lt;/strong&gt; You can use object keys length along with constructor type.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Object.keys(obj).length === 0 &amp;amp;&amp;amp; obj.constructor === Object; // Since date object length is 0, you need to check constructor check as well
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="3"&gt; 
   &lt;li&gt;&lt;strong&gt;Using for-in with hasOwnProperty(Pre-ECMA 5):&lt;/strong&gt; You can use a for-in loop along with hasOwnProperty.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function isEmpty(obj) {
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      return false;
    }
  }

  return JSON.stringify(obj) === JSON.stringify({});
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an arguments object&lt;/h3&gt; &lt;p&gt;The arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function. For example, let's see how to use arguments object inside sum function,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function sum() {
  var total = 0;
  for (var i = 0, len = arguments.length; i &amp;lt; len; ++i) {
    total += arguments[i];
  }
  return total;
}

sum(1, 2, 3); // returns 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can't apply array methods on arguments object. But you can convert into a regular array as below.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var argsArray = Array.prototype.slice.call(arguments);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make first letter of the string in an uppercase&lt;/h3&gt; &lt;p&gt;You can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to generate a string with the first letter in uppercase.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the pros and cons of for loops&lt;/h3&gt; &lt;p&gt;The for-loop is a commonly used iteration syntax in javascript. It has both pros and cons&lt;/p&gt; &lt;h4&gt;Pros&lt;/h4&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Works on every environment&lt;/li&gt; 
   &lt;li&gt;You can use break and continue flow control statements&lt;/li&gt; 
  &lt;/ol&gt; &lt;h4&gt;Cons&lt;/h4&gt; 
  &lt;ol start="3"&gt; 
   &lt;li&gt;Too verbose&lt;/li&gt; 
   &lt;li&gt;Imperative&lt;/li&gt; 
   &lt;li&gt;You might face off-by-one errors.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you display the current date in javascript&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;new Date()&lt;/code&gt; to generate a new Date object containing the current date and time. For example, let's display the current date in mm/dd/yyyy&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var today = new Date();
var dd = String(today.getDate()).padStart(2, "0");
var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
var yyyy = today.getFullYear();

today = mm + "/" + dd + "/" + yyyy;
document.write(today);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you compare two date objects&lt;/h3&gt; &lt;p&gt;You need to use date.getTime() method in order to compare unix timestamp values&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var d1 = new Date();
var d2 = new Date(d1);
console.log(d1.getTime() === d2.getTime()); //True
console.log(d1 === d2); // False
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check if a string starts with another string&lt;/h3&gt; &lt;p&gt;You can use ECMAScript 6's &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; method to check if a string starts with another string or not. But it is not yet supported in all browsers. Let's see an example to see this usage,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;"Good morning".startsWith("Good"); // true
"Good morning".startsWith("morning"); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you trim a string in javascript&lt;/h3&gt; &lt;p&gt;JavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the string.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;"  Hello World   ".trim(); //Hello World
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your browser(&amp;lt;IE9) doesn't support this method then you can use below polyfill.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (!String.prototype.trim) {
  (function () {
    // Make sure we trim BOM and NBSP
    var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    String.prototype.trim = function () {
      return this.replace(rtrim, "");
    };
  })();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you add a key value pair in javascript&lt;/h3&gt; &lt;p&gt;There are two possible solutions to add new properties to an object.&lt;/p&gt; &lt;p&gt;Let's take a simple object to explain these solutions.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var object = {
  key1: value1,
  key2: value2,
};
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using dot notation:&lt;/strong&gt; This solution is useful when you know the name of the property&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;object.key3 = "value3";
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Using square bracket notation:&lt;/strong&gt; This solution is useful when the name of the property is dynamically determined or the key's name is non-JS like "user-name"&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;obj["key3"] = "value3";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is the !-- notation represents a special operator&lt;/h3&gt; &lt;p&gt;No,that's not a special operator. But it is a combination of 2 standard operators one after the other,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;A logical not (!)&lt;/li&gt; 
   &lt;li&gt;A prefix decrement (--)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;At first, the value decremented by one and then tested to see if it is equal to zero or not for determining the truthy/falsy value.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you assign default values to variables&lt;/h3&gt; &lt;p&gt;You can use the logical or operator &lt;code&gt;||&lt;/code&gt; in an assignment expression to provide a default value. The syntax looks like as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var a = b || c;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As per the above expression, variable 'a 'will get the value of 'c' only if 'b' is falsy (if is null, false, undefined, 0, empty string, or NaN), otherwise 'a' will get the value of 'b'.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define multiline strings&lt;/h3&gt; &lt;p&gt;You can define multiline string literals using the '\n' character followed by line terminator('').&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var str = "This is a \n very lengthy \n sentence!";
console.log(str);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But if you have a space after the '\n' character, there will be indentation inconsistencies.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an app shell model&lt;/h3&gt; &lt;p&gt;An application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and instantly loads on your users' screens, similar to what you see in native applications. It is useful for getting some initial HTML to the screen fast without a network.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can we define properties for functions&lt;/h3&gt; &lt;p&gt;Yes, we can define properties for functions because functions are also objects.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;fn = function (x) {
  //Function code goes here
};

fn.name = "John";

fn.profile = function (y) {
  //Profile code goes here
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the way to find the number of parameters expected by a function&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;function.length&lt;/code&gt; syntax to find the number of parameters expected by a function. Let's take an example of &lt;code&gt;sum&lt;/code&gt; function to calculate the sum of numbers,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function sum(num1, num2, num3, num4) {
  return num1 + num2 + num3 + num4;
}
sum.length; // 4 is the number of parameters expected.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a polyfill&lt;/h3&gt; &lt;p&gt;A polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas element on Microsoft Internet Explorer 7.&lt;/p&gt; &lt;p&gt;There are two main polyfill libraries available,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Core.js&lt;/strong&gt;: It is a modular javascript library used for cutting-edge ECMAScript features.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Polyfill.io:&lt;/strong&gt; It provides polyfills that are required for browser needs.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are break and continue statements&lt;/h3&gt; &lt;p&gt;The break statement is used to "jump out" of a loop. i.e, It breaks the loop and continues executing the code after the loop.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;for (i = 0; i &amp;lt; 10; i++) {
  if (i === 5) {
    break;
  }
  text += "Number: " + i + "&amp;lt;br&amp;gt;";
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The continue statement is used to "jump over" one iteration in the loop. i.e, It breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;for (i = 0; i &amp;lt; 10; i++) {
  if (i === 5) {
    continue;
  }
  text += "Number: " + i + "&amp;lt;br&amp;gt;";
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are js labels&lt;/h3&gt; &lt;p&gt;The label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to the code later. For example, the below code with labels avoids printing the numbers when they are same,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var i, j;

loop1: for (i = 0; i &amp;lt; 3; i++) {
  loop2: for (j = 0; j &amp;lt; 3; j++) {
    if (i === j) {
      continue loop1;
    }
    console.log("i = " + i + ", j = " + j);
  }
}

// Output is:
//   "i = 1, j = 0"
//   "i = 2, j = 0"
//   "i = 2, j = 1"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of keeping declarations at the top&lt;/h3&gt; &lt;p&gt;It is recommended to keep all declarations at the top of each script or function. The benefits of doing this are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Gives cleaner code&lt;/li&gt; 
   &lt;li&gt;It provides a single place to look for local variables&lt;/li&gt; 
   &lt;li&gt;Easy to avoid unwanted global variables&lt;/li&gt; 
   &lt;li&gt;It reduces the possibility of unwanted re-declarations&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of initializing variables&lt;/h3&gt; &lt;p&gt;It is recommended to initialize variables because of the below benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It gives cleaner code&lt;/li&gt; 
   &lt;li&gt;It provides a single place to initialize variables&lt;/li&gt; 
   &lt;li&gt;Avoid undefined values in the code&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the recommendations to create new object&lt;/h3&gt; &lt;p&gt;It is recommended to avoid creating new objects using &lt;code&gt;new Object()&lt;/code&gt;. Instead you can initialize values based on it's type to create the objects.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Assign {} instead of new Object()&lt;/li&gt; 
   &lt;li&gt;Assign "" instead of new String()&lt;/li&gt; 
   &lt;li&gt;Assign 0 instead of new Number()&lt;/li&gt; 
   &lt;li&gt;Assign false instead of new Boolean()&lt;/li&gt; 
   &lt;li&gt;Assign [] instead of new Array()&lt;/li&gt; 
   &lt;li&gt;Assign /()/ instead of new RegExp()&lt;/li&gt; 
   &lt;li&gt;Assign function (){} instead of new Function()&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;You can define them as an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var v1 = {};
var v2 = "";
var v3 = 0;
var v4 = false;
var v5 = [];
var v6 = /()/;
var v7 = function () {};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define JSON arrays&lt;/h3&gt; &lt;p&gt;JSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array of users would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;"users":[
  {"firstName":"John", "lastName":"Abrahm"},
  {"firstName":"Anna", "lastName":"Smith"},
  {"firstName":"Shane", "lastName":"Warn"}
]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you generate random integers&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;Math.random()&lt;/code&gt; with &lt;code&gt;Math.floor()&lt;/code&gt; to return random integers. For example, if you want generate random integers between 1 to 10, the multiplication factor should be 10,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Math.floor(Math.random() * 10) + 1; // returns a random integer from 1 to 10
Math.floor(Math.random() * 100) + 1; // returns a random integer from 1 to 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;Math.random()&lt;/code&gt; returns a random number between 0 (inclusive), and 1 (exclusive)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can you write a random integers function to print integers within a range&lt;/h3&gt; &lt;p&gt;Yes, you can create a proper random function to return a random number between min and max (both included)&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function randomInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
randomInteger(1, 100); // returns a random integer from 1 to 100
randomInteger(1, 1000); // returns a random integer from 1 to 1000
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is tree shaking&lt;/h3&gt; &lt;p&gt;Tree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and export). Initially this has been popularized by the ES2015 module bundler &lt;code&gt;rollup&lt;/code&gt;, these days practically all bundlers use this technique.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the need of tree shaking&lt;/h3&gt; &lt;p&gt;Tree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire the more performant the application will be. For example, if we just want to create a “Hello World” Application using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it recommended to use eval&lt;/h3&gt; &lt;p&gt;No, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used to run text as code. In most of the cases, it should not be necessary to use it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Regular Expression&lt;/h3&gt; &lt;p&gt;A regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations. Let's see the syntax format now,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;/pattern/modifiers;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For example, the regular expression or search pattern with case-insensitive username would be,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;/John/i;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the string methods that accept Regular expression&lt;/h3&gt; &lt;p&gt;There are six string methods: &lt;code&gt;search()&lt;/code&gt;, &lt;code&gt;replace()&lt;/code&gt;, &lt;code&gt;replaceAll()&lt;/code&gt;, &lt;code&gt;match()&lt;/code&gt;, &lt;code&gt;matchAll()&lt;/code&gt;, and &lt;code&gt;split()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;search()&lt;/code&gt; method uses an expression to search for a match, and returns the position of the match.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var msg = "Hello John";
var n = msg.search(/John/i); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;replace()&lt;/code&gt; and &lt;code&gt;replaceAll()&lt;/code&gt; methods are used to return a modified string where the pattern is replaced.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var msg = "ball bat";
var n1 = msg.replace(/b/i, "c"); // call bat
var n2 = msg.replaceAll(/b/i, "c"); // call cat
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;match()&lt;/code&gt; and &lt;code&gt;matchAll()&lt;/code&gt; methods are used to return the matches when matching a string against a regular expression.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var msg = "Hello John";
var n1 = msg.match(/[A-Z]/g); // ["H", "J"]
var n2 = msg.matchAll(/[A-Z]/g); // this returns an iterator
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;split()&lt;/code&gt; method is used to split a string into an array of substrings, and returns the new array.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var msg = "Hello John";
var n = msg.split(/\s/); // ["Hello", "John"]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are modifiers in regular expression&lt;/h3&gt; &lt;p&gt;Modifiers can be used to perform case-insensitive and global searches. Let's list some of the modifiers,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Modifier&lt;/th&gt; 
     &lt;th&gt;Description&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;i&lt;/td&gt; 
     &lt;td&gt;Perform case-insensitive matching&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;g&lt;/td&gt; 
     &lt;td&gt;Perform a global match rather than stops at first match&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;m&lt;/td&gt; 
     &lt;td&gt;Perform multiline matching&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;Let's take an example of global modifier,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var text = "Learn JS one by one";
var pattern = /one/g;
var result = text.match(pattern); // one,one
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are regular expression patterns&lt;/h3&gt; &lt;p&gt;Regular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3 types,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Brackets:&lt;/strong&gt; These are used to find a range of characters. For example, below are some use cases, 
    &lt;ol&gt; 
     &lt;li&gt;[abc]: Used to find any of the characters between the brackets(a,b,c)&lt;/li&gt; 
     &lt;li&gt;[0-9]: Used to find any of the digits between the brackets&lt;/li&gt; 
     &lt;li&gt;(a|b): Used to find any of the alternatives separated with |&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Metacharacters:&lt;/strong&gt; These are characters with a special meaning. For example, below are some use cases, 
    &lt;ol&gt; 
     &lt;li&gt;\d: Used to find a digit&lt;/li&gt; 
     &lt;li&gt;\s: Used to find a whitespace character&lt;/li&gt; 
     &lt;li&gt;\b: Used to find a match at the beginning or ending of a word&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Quantifiers:&lt;/strong&gt; These are useful to define quantities. For example, below are some use cases, 
    &lt;ol&gt; 
     &lt;li&gt;n+: Used to find matches for any string that contains at least one n&lt;/li&gt; 
     &lt;li&gt;n*: Used to find matches for any string that contains zero or more occurrences of n&lt;/li&gt; 
     &lt;li&gt;n?: Used to find matches for any string that contains zero or one occurrences of n&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a RegExp object&lt;/h3&gt; &lt;p&gt;RegExp object is a regular expression object with predefined properties and methods. Let's see the simple usage of RegExp object,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var regexp = new RegExp("\\w+");
console.log(regexp);
// expected output: /\w+/
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you search a string for a pattern&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;test()&lt;/code&gt; method of regular expression in order to search a string for a pattern, and return true or false depending on the result.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var pattern = /you/;
console.log(pattern.test("How are you?")); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of exec method&lt;/h3&gt; &lt;p&gt;The purpose of exec method is similar to test method but it executes a search for a match in a specified string and returns a result array, or null instead of returning true/false.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var pattern = /you/;
console.log(pattern.exec("How are you?")); //["you", index: 8, input: "How are you?", groups: undefined]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you change the style of a HTML element&lt;/h3&gt; &lt;p&gt;You can change inline style or classname of a HTML element using javascript DOM-manipulation&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using style property:&lt;/strong&gt; You can modify inline style using style property&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document.getElementById("title").style.fontSize = "30px";
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Using ClassName property:&lt;/strong&gt; It is easy to modify element class using className property&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document.getElementById("title").className = "custom-title";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What would be the result of 1+2+'3'&lt;/h3&gt; &lt;p&gt;The output is going to be &lt;code&gt;33&lt;/code&gt;. Since &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are numeric values, the result of the first two digits is going to be a numeric value &lt;code&gt;3&lt;/code&gt;. The next digit is a string type value because of that the addition of numeric value &lt;code&gt;3&lt;/code&gt; and string type value &lt;code&gt;3&lt;/code&gt; is just going to be a concatenation value &lt;code&gt;33&lt;/code&gt;. Other operationrs like &lt;code&gt;3 * '3'&lt;/code&gt; do yield correct results because the string is coerced into a number.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a debugger statement&lt;/h3&gt; &lt;p&gt;The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect. For example, in the below function a debugger statement has been inserted. So execution is paused at the debugger statement just like a breakpoint in the script source.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function getProfile() {
  // code goes here
  debugger;
  // code goes here
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of breakpoints in debugging&lt;/h3&gt; &lt;p&gt;You can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops up. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining values, you can resume the execution of code using the play button.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use reserved words as identifiers&lt;/h3&gt; &lt;p&gt;No, you cannot use the reserved words as variables, labels, object or function names. Let's see one simple example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var else = "hello"; // Uncaught SyntaxError: Unexpected token else
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect a mobile browser&lt;/h3&gt; &lt;p&gt;You can use regex which returns a true or false value depending on whether or not the user is browsing with a mobile.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;window.mobilecheck = function () {
  var mobileCheck = false;
  (function (a) {
    if (
      /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
        a
      ) ||
      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
        a.substr(0, 4)
      )
    )
      mobileCheck = true;
  })(navigator.userAgent || navigator.vendor || window.opera);
  return mobileCheck;
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect a mobile browser without regexp&lt;/h3&gt; &lt;p&gt;You can detect mobile browsers by simply running through a list of devices and checking if the useragent matches anything. This is an alternative solution for RegExp usage,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function detectmob() {
  if (
    navigator.userAgent.match(/Android/i) ||
    navigator.userAgent.match(/webOS/i) ||
    navigator.userAgent.match(/iPhone/i) ||
    navigator.userAgent.match(/iPad/i) ||
    navigator.userAgent.match(/iPod/i) ||
    navigator.userAgent.match(/BlackBerry/i) ||
    navigator.userAgent.match(/Windows Phone/i)
  ) {
    return true;
  } else {
    return false;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the image width and height using JS&lt;/h3&gt; &lt;p&gt;You can programmatically get the image and check the dimensions(width and height) using Javascript.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var img = new Image();
img.onload = function () {
  console.log(this.width + "x" + this.height);
};
img.src = "http://www.google.com/intl/en_ALL/images/logo.gif";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make synchronous HTTP request&lt;/h3&gt; &lt;p&gt;Browsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScript.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function httpGet(theUrl) {
  var xmlHttpReq = new XMLHttpRequest();
  xmlHttpReq.open("GET", theUrl, false); // false for synchronous request
  xmlHttpReq.send(null);
  return xmlHttpReq.responseText;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make asynchronous HTTP request&lt;/h3&gt; &lt;p&gt;Browsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing the 3rd parameter as true.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function httpGetAsync(theUrl, callback) {
  var xmlHttpReq = new XMLHttpRequest();
  xmlHttpReq.onreadystatechange = function () {
    if (xmlHttpReq.readyState == 4 &amp;amp;&amp;amp; xmlHttpReq.status == 200)
      callback(xmlHttpReq.responseText);
  };
  xmlHttpReq.open("GET", theUrl, true); // true for asynchronous
  xmlHttpReq.send(null);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Today this is considered deprecated, because an async &lt;code&gt;fetch&lt;/code&gt; call (in browsers later than 2016) is simpler and more robust.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you convert date to another timezone in javascript&lt;/h3&gt; &lt;p&gt;You can use the toLocaleString() method to convert dates in one timezone to another. For example, let's convert current date to British English timezone as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(new Date().toLocaleString("en-GB", { timeZone: "UTC" })); //29/06/2019, 09:56:00
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the properties used to get size of window&lt;/h3&gt; &lt;p&gt;You can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document body objects to find the size of a window. Let's use them combination of these properties to calculate the size of a window or document,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var width =
  window.innerWidth ||
  document.documentElement.clientWidth ||
  document.body.clientWidth;

var height =
  window.innerHeight ||
  document.documentElement.clientHeight ||
  document.body.clientHeight;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a conditional operator in javascript&lt;/h3&gt; &lt;p&gt;The conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a shortcut for &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var isAuthenticated = false;
console.log(
  isAuthenticated ? "Hello, welcome" : "Sorry, you are not authenticated"
); // Sorry, you are not authenticated
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can you apply chaining on conditional operator&lt;/h3&gt; &lt;p&gt;Yes, you can apply chaining on conditional operators similar to &lt;strong&gt;&lt;code&gt;if … else if … else if … else&lt;/code&gt;&lt;/strong&gt; chain. The syntax is going to be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function traceValue(someParam) {
  return condition1
    ? value1
    : condition2
    ? value2
    : condition3
    ? value3
    : value4;
}

// The above conditional operator is equivalent to:

function traceValue(someParam) {
  if (condition1) {
    return value1;
  } else if (condition2) {
    return value2;
  } else if (condition3) {
    return value3;
  } else {
    return value4;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the ways to execute javascript after a page load&lt;/h3&gt; &lt;p&gt;You can execute javascript after page load in many different ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;window.onload:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;window.onload = function ...
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;document.onload:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document.onload = function ...
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="3"&gt; 
   &lt;li&gt;&lt;strong&gt;body onload:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;body onload="script();"&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between proto and prototype&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;__proto__&lt;/code&gt; object is the actual object that is used in the lookup chain to resolve methods, etc. Whereas &lt;code&gt;prototype&lt;/code&gt; is the object that is used to build &lt;code&gt;__proto__&lt;/code&gt; when you create an object with the &lt;code&gt;new&lt;/code&gt; operator (a special variant of a function call).&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;new Employee().__proto__ === Employee.prototype;
new Employee().prototype === undefined;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There are few more differences,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;feature&lt;/th&gt; 
     &lt;th&gt;Prototype&lt;/th&gt; 
     &lt;th&gt;proto&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Access&lt;/td&gt; 
     &lt;td&gt;All function constructors have prototype properties.&lt;/td&gt; 
     &lt;td&gt;All objects have __proto__ property&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Purpose&lt;/td&gt; 
     &lt;td&gt;Used to reduce memory wastage with a single copy of function&lt;/td&gt; 
     &lt;td&gt;Used in lookup chain to resolve methods, constructors etc.&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;ECMAScript&lt;/td&gt; 
     &lt;td&gt;Introduced in ES6&lt;/td&gt; 
     &lt;td&gt;Introduced in ES5&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Usage&lt;/td&gt; 
     &lt;td&gt;Frequently used&lt;/td&gt; 
     &lt;td&gt;Rarely used&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can you give an example of when you really need a semicolon&lt;/h3&gt; &lt;p&gt;It is recommended to use semicolons after every statement in JavaScript. For example, in the below case (that is an IIFE = Immediately Invoked Function Expression) it throws an error ".. is not a function" at runtime due to missing semicolon.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// define a function
var fn = (function () {
  //...
})(
  // semicolon missing at this line

  // then execute some code inside a closure
  function () {
    //...
  }
)();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and it will be interpreted as&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var fn = (function () {
  //...
})(function () {
  //...
})();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this case, we are passing the second function as an argument to the first function and then trying to call the result of the first function call as a function. Hence, the second function will fail with a "... is not a function" error at runtime.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the freeze method&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;&lt;code&gt;freeze()&lt;/code&gt;&lt;/strong&gt; method is used to freeze an object. Freezing an object does not allow adding new properties to an object, prevents removing, and prevents changing the enumerability, configurability, or writability of existing properties. i.e. It returns the passed object and does not create a frozen copy.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const obj = {
  prop: 100,
};

Object.freeze(obj);
obj.prop = 200; // Throws an error in strict mode

console.log(obj.prop); //100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember freezing is only applied to the top-level properties in objects but not for nested objects. For example, let's try to freeze user object which has employment details as nested object and observe that details have been changed.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
  name: "John",
  employment: {
    department: "IT",
  },
};

Object.freeze(user);
user.employment.department = "HR";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It causes a TypeError if the argument passed is not an object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the freeze method&lt;/h3&gt; &lt;p&gt;Below are the main benefits of using freeze method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for freezing objects and arrays.&lt;/li&gt; 
   &lt;li&gt;It is used to make an object immutable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do I need to use the freeze method&lt;/h3&gt; &lt;p&gt;In the Object-oriented paradigm, an existing API contains certain elements that are not intended to be extended, modified, or re-used outside of their current context. Hence it works as the &lt;code&gt;final&lt;/code&gt; keyword which is used in various languages.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect a browser language preference&lt;/h3&gt; &lt;p&gt;You can use the navigator object to detect a browser language preference as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var language =
  (navigator.languages &amp;amp;&amp;amp; navigator.languages[0]) || // Chrome / Firefox
  navigator.language || // All browsers
  navigator.userLanguage; // IE &amp;lt;= 10

console.log(language);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to convert a string to title case with javascript&lt;/h3&gt; &lt;p&gt;Title case means that the first letter of each word is capitalized. You can convert a string to title case using the below function,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function toTitleCase(str) {
  return str.replace(/\w\S*/g, function (txt) {
    return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();
  });
}
toTitleCase("good morning john"); // Good Morning John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect if javascript is disabled on the page&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag to detect javascript disabled or not. The code block inside &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; gets executed when JavaScript is disabled, and is typically used to display alternative content when the page generated in JavaScript.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;script type="javascript"&amp;gt;
    // JS related code goes here
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;
    &amp;lt;a href="next_page.html?noJS=true"&amp;gt;JavaScript is disabled in the page. Please click Next Page&amp;lt;/a&amp;gt;
&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are various operators supported by javascript&lt;/h3&gt; &lt;p&gt;An operator is capable of manipulating(mathematical and logical computations) a certain value or operand. There are various operators supported by JavaScript as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Arithmetic Operators:&lt;/strong&gt; Includes + (Addition), – (Subtraction), * (Multiplication), / (Division), % (Modulus), ++ (Increment) and – – (Decrement)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Comparison Operators:&lt;/strong&gt; Includes == (Equal), != (Not Equal), === (Equal with type), &amp;gt; (Greater than), &amp;gt;= (Greater than or Equal to), &amp;lt; (Less than), &amp;lt;= (Less than or Equal to)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Logical Operators:&lt;/strong&gt; Includes &amp;amp;&amp;amp; (Logical AND), || (Logical OR), ! (Logical NOT)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Assignment Operators:&lt;/strong&gt; Includes = (Assignment Operator), += (Add and Assignment Operator), –= (Subtract and Assignment Operator), *= (Multiply and Assignment), /= (Divide and Assignment), %= (Modules and Assignment)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Ternary Operators:&lt;/strong&gt; It includes conditional(: ?) Operator&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;typeof Operator:&lt;/strong&gt; It uses to find type of variable. The syntax looks like &lt;code&gt;typeof variable&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a rest parameter&lt;/h3&gt; &lt;p&gt;Rest parameter is an improved way to handle function parameters which allows us to represent an indefinite number of arguments as an array. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function f(a, b, ...theArgs) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For example, let's take a sum example to calculate on dynamic number of parameters,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function sum(...args) {
  let total = 0;
  for (const i of args) {
    total += i;
  }
  return total;
}

console.log(sum(1, 2)); //3
console.log(sum(1, 2, 3)); //6
console.log(sum(1, 2, 3, 4)); //10
console.log(sum(1, 2, 3, 4, 5)); //15
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Rest parameter is added in ES2015 or ES6&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if you do not use rest parameter as a last argument&lt;/h3&gt; &lt;p&gt;The rest parameter should be the last argument, as its job is to collect all the remaining arguments into an array. For example, if you define a function like below it doesn’t make any sense and will throw an error.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function someFunc(a,…b,c){
//You code goes here
return;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the bitwise operators available in javascript&lt;/h3&gt; &lt;p&gt;Below are the list of bitwise logical operators used in JavaScript&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Bitwise AND ( &amp;amp; )&lt;/li&gt; 
   &lt;li&gt;Bitwise OR ( | )&lt;/li&gt; 
   &lt;li&gt;Bitwise XOR ( ^ )&lt;/li&gt; 
   &lt;li&gt;Bitwise NOT ( ~ )&lt;/li&gt; 
   &lt;li&gt;Left Shift ( &amp;lt;&amp;lt; )&lt;/li&gt; 
   &lt;li&gt;Sign Propagating Right Shift ( &amp;gt;&amp;gt; )&lt;/li&gt; 
   &lt;li&gt;Zero fill Right Shift ( &amp;gt;&amp;gt;&amp;gt; )&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a spread operator&lt;/h3&gt; &lt;p&gt;Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. Let's take an example to see this behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function calculateSum(x, y, z) {
  return x + y + z;
}

const numbers = [1, 2, 3];

console.log(calculateSum(...numbers)); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you determine whether object is frozen or not&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Object.isFrozen()&lt;/code&gt; method is used to determine if an object is frozen or not.An object is frozen if all of the below conditions hold true,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If it is not extensible.&lt;/li&gt; 
   &lt;li&gt;If all of its properties are non-configurable.&lt;/li&gt; 
   &lt;li&gt;If all its data properties are non-writable. The usage is going to be as follows,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const object = {
  property: "Welcome JS world",
};
Object.freeze(object);
console.log(Object.isFrozen(object));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you determine two values same or not using object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.is()&lt;/code&gt; method determines whether two values are the same value. For example, the usage with different types of values would be,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Object.is("hello", "hello"); // true
Object.is(window, window); // true
Object.is([], []); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Two values are considered identical if one of the following holds:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;both undefined&lt;/li&gt; 
   &lt;li&gt;both null&lt;/li&gt; 
   &lt;li&gt;both true or both false&lt;/li&gt; 
   &lt;li&gt;both strings of the same length with the same characters in the same order&lt;/li&gt; 
   &lt;li&gt;both the same object (means both object have same reference)&lt;/li&gt; 
   &lt;li&gt;both numbers and both +0 both -0 both NaN both non-zero and both not NaN and both have the same value.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of using object is method&lt;/h3&gt; &lt;p&gt;Some of the applications of Object's &lt;code&gt;is&lt;/code&gt; method are follows,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for comparison of two strings.&lt;/li&gt; 
   &lt;li&gt;It is used for comparison of two numbers.&lt;/li&gt; 
   &lt;li&gt;It is used for comparing the polarity of two numbers.&lt;/li&gt; 
   &lt;li&gt;It is used for comparison of two objects.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you copy properties from one object to other&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.assign()&lt;/code&gt; method which is used to copy the values and properties from one or more source objects to a target object. It returns the target object which has properties and values copied from the source objects. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Object.assign(target, ...sources);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's take example with one source and one target object,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const target = { a: 1, b: 2 };
const source = { b: 3, c: 4 };

const returnedTarget = Object.assign(target, source);

console.log(target); // { a: 1, b: 3, c: 4 }

console.log(returnedTarget); // { a: 1, b: 3, c: 4 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As observed in the above code, there is a common property(&lt;code&gt;b&lt;/code&gt;) from source to target so it's value has been overwritten.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the applications of the assign method&lt;/h3&gt; &lt;p&gt;Below are the some of main applications of &lt;code&gt;Object.assign()&lt;/code&gt; method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for cloning an object.&lt;/li&gt; 
   &lt;li&gt;It is used to merge objects with the same properties.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a proxy object&lt;/h3&gt; &lt;p&gt;The Proxy object is used to define custom behavior for fundamental operations such as property lookup, assignment, enumeration, function invocation, etc.&lt;/p&gt; &lt;p&gt;A proxy is created with two parameters: a target object which you want to proxy and a handler object which contains methods to intercept fundamental operations. The syntax would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var p = new Proxy(target, handler);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's take a look at below examples of proxy object and how the get method which customize the lookup behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//Example1:

const person = {
  name: "Sudheer Jonna",
  age: 35,
};

const handler = {
  get(target, prop) {
    if (prop === "name") {
      return "Mr. " + target[prop];
    }
    return target[prop];
  },
};

const proxy = new Proxy(person, handler);

//Example2:

var handler1 = {
  get: function (obj, prop) {
    return prop in obj ? obj[prop] : 100;
  },
};

var p = new Proxy({}, handler1);
p.a = 10;
p.b = null;

console.log(p.a, p.b); // 10, null
console.log("c" in p, p.c); // false, 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, it uses &lt;code&gt;get&lt;/code&gt; handler which define the behavior of the proxy when an operation is performed on it. These proxies are mainly used for some of the below cross-cutting concerns.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Logging&lt;/li&gt; 
   &lt;li&gt;Authentication or Authorization&lt;/li&gt; 
   &lt;li&gt;Data binding and observables&lt;/li&gt; 
   &lt;li&gt;Function parameter validation&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This feature was introduced with ES6.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the seal method&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.seal()&lt;/code&gt; method is used to seal an object, by preventing new properties from being added to it and marking all existing properties as non-configurable. But &lt;strong&gt;values of present properties can still be changed as long as they are writable&lt;/strong&gt;. The next level of immutability would be the &lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-freeze-method"&gt;&lt;code&gt;Object.freeze()&lt;/code&gt;&lt;/a&gt; method. Let's see the below example to understand more about &lt;code&gt;seal()&lt;/code&gt; method&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const object = {
  property: "Welcome JS world",
};
Object.seal(object);
object.property = "Welcome to object world";
console.log(Object.isSealed(object)); // true
delete object.property; // You cannot delete when sealed
console.log(object.property); //Welcome to object world
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the applications of the seal method&lt;/h3&gt; &lt;p&gt;Below are the main applications of &lt;code&gt;Object.seal()&lt;/code&gt; method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for sealing objects and arrays.&lt;/li&gt; 
   &lt;li&gt;It is used to make properties of an object non-configurable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between the freeze and seal methods&lt;/h3&gt; &lt;p&gt;If an object is frozen using the &lt;code&gt;Object.freeze()&lt;/code&gt; method then its properties become immutable and no changes can be made in them whereas if an object is sealed using the &lt;code&gt;Object.seal()&lt;/code&gt; method then the changes can be made in the existing properties of the object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you determine if an object is sealed or not&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.isSealed()&lt;/code&gt; method is used to determine if an object is sealed or not. An object is sealed if all of the below conditions hold true&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If it is not extensible.&lt;/li&gt; 
   &lt;li&gt;If all of its properties are non-configurable.&lt;/li&gt; 
   &lt;li&gt;If it is not removable (but not necessarily non-writable). Let's see it in the action&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const object = {
  property: "Hello, Good morning",
};

Object.seal(object); // Using seal() method to seal the object

console.log(Object.isSealed(object)); // checking whether the object is sealed or not
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get enumerable key and value pairs&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.entries()&lt;/code&gt; method is used to return an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a &lt;code&gt;for...in&lt;/code&gt; loop. Let's see the functionality of &lt;code&gt;object.entries()&lt;/code&gt; method in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const object = {
  a: "Good morning",
  b: 100,
};

for (let [key, value] of Object.entries(object)) {
  console.log(`${key}: ${value}`); // a: 'Good morning'
  // b: 100
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The order is not guaranteed as object defined.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main difference between Object.values and Object.entries method&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.values()&lt;/code&gt; method's behavior is similar to &lt;code&gt;Object.entries()&lt;/code&gt; method but it returns an array of values instead [key,value] pairs.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const object = {
  a: "Good morning",
  b: 100,
};

for (let value of Object.values(object)) {
  console.log(`${value}`); // 'Good morning \n100'
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How can you get the list of keys of any object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.keys()&lt;/code&gt; method which is used to return an array of a given object's own property names, in the same order as we get with a normal loop. For example, you can get the keys of a user object,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
  name: "John",
  gender: "male",
  age: 40,
};

console.log(Object.keys(user)); //['name', 'gender', 'age']
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create an object with a prototype&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.create()&lt;/code&gt; method is used to create a new object with the specified prototype object and properties. i.e, It uses an existing object as the prototype of the newly created object. It returns a new object with the specified prototype object and properties.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
  name: "John",
  printInfo: function () {
    console.log(`My name is ${this.name}.`);
  },
};

const admin = Object.create(user);

admin.name = "Nick"; // Remember that "name" is a property set on "admin" but not on "user" object

admin.printInfo(); // My name is Nick
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a WeakSet&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;WeakSet&lt;/code&gt; is used to store a collection of weakly(weak references) held objects. The syntax would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;new WeakSet([iterable]);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's see the below example to explain it's behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var ws = new WeakSet();
var user = {};
ws.add(user);
ws.has(user); // true
ws.delete(user); // removes user from the set
ws.has(user); // false, user has been removed
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between WeakSet and Set&lt;/h3&gt; &lt;p&gt;The main difference is that references to objects in &lt;code&gt;Set&lt;/code&gt; are strong while references to objects in &lt;code&gt;WeakSet&lt;/code&gt; are weak. i.e, An object in &lt;code&gt;WeakSet&lt;/code&gt; can be garbage collected if there is no other reference to it. Other differences are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;Set&lt;/code&gt; can store any value whereas &lt;code&gt;WeakSet&lt;/code&gt; can store only collections of objects&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;WeakSet&lt;/code&gt; does not have size property unlike &lt;code&gt;Set&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;WeakSet&lt;/code&gt; does not have methods such as clear, keys, values, entries, forEach.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;WeakSet&lt;/code&gt; is not iterable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;List down the collection of methods available on WeakSet&lt;/h3&gt; &lt;p&gt;Below are the list of methods available on &lt;code&gt;WeakSet&lt;/code&gt;,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;add(value)&lt;/code&gt;: A new object is appended with the given value&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;delete(value)&lt;/code&gt;: Deletes the value from the collection.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;has(value)&lt;/code&gt;: It returns true if the value is present in the collection, otherwise it returns false.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let's see the functionality of all the above methods in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var weakSetObject = new WeakSet();
var firstObject = {};
var secondObject = {};
// add(value)
weakSetObject.add(firstObject);
weakSetObject.add(secondObject);
console.log(weakSetObject.has(firstObject)); //true
weakSetObject.delete(secondObject);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a WeakMap&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;WeakMap&lt;/code&gt; object is a collection of key/value pairs in which the keys are weakly referenced. In this case, keys must be objects and the values can be arbitrary values. The syntax looks like the following:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;new WeakMap([iterable]);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's see the below example to explain it's behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var ws = new WeakMap();
var user = {};
ws.set(user);
ws.has(user); // true
ws.delete(user); // removes user from the map
ws.has(user); // false, user has been removed
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between WeakMap and Map&lt;/h3&gt; &lt;p&gt;The main difference is that references to key objects in &lt;code&gt;Map&lt;/code&gt; are strong while references to key objects in &lt;code&gt;WeakMap&lt;/code&gt; are weak. i.e, A key object in &lt;code&gt;WeakMap&lt;/code&gt; can be garbage collected if there is no other reference to it. Other differences are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;Map&lt;/code&gt; can store any key type whereas &lt;code&gt;WeakMap&lt;/code&gt; can store only collections of key objects&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;WeakMap&lt;/code&gt; does not have size property unlike &lt;code&gt;Map&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;WeakMap&lt;/code&gt; does not have methods such as clear, keys, values, entries, forEach.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;WeakMap&lt;/code&gt; is not iterable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;List down the collection of methods available on WeakMap&lt;/h3&gt; &lt;p&gt;Below are the list of methods available on &lt;code&gt;WeakMap&lt;/code&gt;,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;set(key, value)&lt;/code&gt;: Sets the value for the key in the &lt;code&gt;WeakMap&lt;/code&gt; object. Returns the &lt;code&gt;WeakMap&lt;/code&gt; object.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;delete(key)&lt;/code&gt;: Removes any value associated to the key.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;has(key)&lt;/code&gt;: Returns a Boolean asserting whether a value has been associated to the key in the &lt;code&gt;WeakMap&lt;/code&gt; object or not.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;get(key)&lt;/code&gt;: Returns the value associated to the key, or undefined if there is none. Let's see the functionality of all the above methods in an example,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var weakMapObject = new WeakMap();
var firstObject = {};
var secondObject = {};
// set(key, value)
weakMapObject.set(firstObject, "John");
weakMapObject.set(secondObject, 100);
console.log(weakMapObject.has(firstObject)); //true
console.log(weakMapObject.get(firstObject)); // John
weakMapObject.delete(secondObject);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of uneval&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;uneval()&lt;/code&gt; is an builtin function which is used to create a string representation of the source code of an Object. It is a top-level function and is not associated with any object. Let's see the below example to know more about it's functionality,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var a = 1;
uneval(a); // returns a String containing 1
uneval(function user() {}); // returns "(function user(){})"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;uneval()&lt;/code&gt; function has been deprecated. It is recommended to use &lt;code&gt;toString()&lt;/code&gt; for functions and &lt;code&gt;JSON.stringify()&lt;/code&gt; for other cases.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function user() {}
console.log(user.toString()); // returns "(function user(){})"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you encode an URL&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;encodeURI()&lt;/code&gt; function is used to encode complete URI which has special characters except (, / ? : @ &amp;amp; = + $ #) characters.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var uri = "https://mozilla.org/?x=шеллы";
var encoded = encodeURI(uri);
console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you decode an URL&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;decodeURI()&lt;/code&gt; function is used to decode a Uniform Resource Identifier (URI) previously created by &lt;code&gt;encodeURI()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var uri = "https://mozilla.org/?x=шеллы";
var encoded = encodeURI(uri);
console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B
try {
  console.log(decodeURI(encoded)); // "https://mozilla.org/?x=шеллы"
} catch (e) {
  // catches a malformed URI
  console.error(e);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print the contents of web page&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;window&lt;/code&gt; object provides a &lt;code&gt;print()&lt;/code&gt; method which is used to print the contents of the current window. It opens a Print dialog box which lets you choose between various printing options. Let's see the usage of print method in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;input type="button" value="Print" onclick="window.print()" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In most browsers, it will block while the print dialog is open.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between uneval and eval&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;uneval&lt;/code&gt; function returns the source of a given object; whereas the &lt;code&gt;eval&lt;/code&gt; function does the opposite, by evaluating that source code in a different memory area. Let's see an example to clarify the difference,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var msg = uneval(function greeting() {
  return "Hello, Good morning";
});
var greeting = eval(msg);
greeting(); // returns "Hello, Good morning"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an anonymous function&lt;/h3&gt; &lt;p&gt;An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function (optionalParameters) {
  //do something
}

const myFunction = function(){ //Anonymous function assigned to a variable
  //do something
};

[1, 2, 3].map(function(element){ //Anonymous function used as a callback function
  //do something
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's see the above anonymous function in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var x = function (a, b) {
  return a * b;
};
var z = x(5, 10);
console.log(z); // 50
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the precedence order between local and global variables&lt;/h3&gt; &lt;p&gt;A local variable takes precedence over a global variable with the same name. Let's see this behavior in an example.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var msg = "Good morning";
function greeting() {
  msg = "Good Evening";
  console.log(msg); // Good Evening
}
greeting();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are javascript accessors&lt;/h3&gt; &lt;p&gt;ECMAScript 5 introduced javascript object accessors or computed properties through getters and setters. Getters uses the &lt;code&gt;get&lt;/code&gt; keyword whereas Setters uses the &lt;code&gt;set&lt;/code&gt; keyword.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var user = {
  firstName: "John",
  lastName: "Abraham",
  language: "en",
  get lang() {
    return this.language;
  },
  set lang(lang) {
    this.language = lang;
  },
};
console.log(user.lang); // getter access lang as en
user.lang = "fr";
console.log(user.lang); // setter used to set lang as fr
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define property on Object constructor&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.defineProperty()&lt;/code&gt; static method is used to define a new property directly on an object, or modify an existing property on an object, and returns the object. Let's see an example to know how to define property,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const newObject = {};

Object.defineProperty(newObject, "newProperty", {
  value: 100,
  writable: false,
});

console.log(newObject.newProperty); // 100

newObject.newProperty = 200; // It throws an error in strict mode due to writable setting
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between get and defineProperty&lt;/h3&gt; &lt;p&gt;Both have similar results unless you use classes. If you use &lt;code&gt;get&lt;/code&gt; the property will be defined on the prototype of the object whereas using &lt;code&gt;Object.defineProperty()&lt;/code&gt; the property will be defined on the instance it is applied to.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of Getters and Setters&lt;/h3&gt; &lt;p&gt;Below are the list of benefits of Getters and Setters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;They provide simpler syntax&lt;/li&gt; 
   &lt;li&gt;They are used for defining computed properties, or accessors in JS.&lt;/li&gt; 
   &lt;li&gt;Useful to provide equivalence relation between properties and methods&lt;/li&gt; 
   &lt;li&gt;They can provide better data quality&lt;/li&gt; 
   &lt;li&gt;Useful for doing things behind the scenes with the encapsulated logic.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I add getters and setters using defineProperty method&lt;/h3&gt; &lt;p&gt;Yes, You can use the &lt;code&gt;Object.defineProperty()&lt;/code&gt; method to add Getters and Setters. For example, the below counter object uses increment, decrement, add and subtract properties,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var obj = { counter: 0 };

// Define getters
Object.defineProperty(obj, "increment", {
  get: function () {
    this.counter++;
    return this.counter;
  },
});
Object.defineProperty(obj, "decrement", {
  get: function () {
    this.counter--;
    return this.counter;
  },
});

// Define setters
Object.defineProperty(obj, "add", {
  set: function (value) {
    this.counter += value;
  },
});
Object.defineProperty(obj, "subtract", {
  set: function (value) {
    this.counter -= value;
  },
});

obj.add = 10;
obj.subtract = 5;
console.log(obj.increment); //6
console.log(obj.decrement); //5
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of switch-case&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;switch case&lt;/code&gt; statement in JavaScript is used for decision making purposes. In a few cases, using the &lt;code&gt;switch case&lt;/code&gt; statement is going to be more convenient than &lt;code&gt;if-else&lt;/code&gt; statements. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;switch (expression)
{
    case value1:
        statement1;
        break;
    case value2:
        statement2;
        break;
    .
    .
    case valueN:
        statementN;
        break;
    default:
        statementDefault;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above multi-way branch statement provides an easy way to dispatch execution to different parts of code based on the value of the expression.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the conventions to be followed for the usage of switch case&lt;/h3&gt; &lt;p&gt;Below are the list of conventions should be taken care,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The expression can be of type either number or string.&lt;/li&gt; 
   &lt;li&gt;Duplicate values are not allowed for the expression.&lt;/li&gt; 
   &lt;li&gt;The default statement is optional. If the expression passed to switch does not match with any case value then the statement within default case will be executed.&lt;/li&gt; 
   &lt;li&gt;The break statement is used inside the switch to terminate a statement sequence.&lt;/li&gt; 
   &lt;li&gt;The break statement is optional. But if it is omitted, the execution will continue on into the next case.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are primitive data types&lt;/h3&gt; &lt;p&gt;A primitive data type is data that has a primitive value (which has no properties or methods). There are 7 types of primitive data types.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;string&lt;/li&gt; 
   &lt;li&gt;number&lt;/li&gt; 
   &lt;li&gt;boolean&lt;/li&gt; 
   &lt;li&gt;null&lt;/li&gt; 
   &lt;li&gt;undefined&lt;/li&gt; 
   &lt;li&gt;bigint&lt;/li&gt; 
   &lt;li&gt;symbol&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to access object properties&lt;/h3&gt; &lt;p&gt;There are 3 possible ways for accessing the property of an object.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Dot notation:&lt;/strong&gt; It uses dot for accessing the properties&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;objectName.property;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Square brackets notation:&lt;/strong&gt; It uses square brackets for property access&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;objectName["property"];
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="3"&gt; 
   &lt;li&gt;&lt;strong&gt;Expression notation:&lt;/strong&gt; It uses expression in the square brackets&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;objectName[expression];
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the function parameter rules&lt;/h3&gt; &lt;p&gt;JavaScript functions follow below rules for parameters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The function definitions do not specify data types for parameters.&lt;/li&gt; 
   &lt;li&gt;Do not perform type checking on the passed arguments.&lt;/li&gt; 
   &lt;li&gt;Do not check the number of arguments received. i.e, The below function follows the above rules,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function functionName(parameter1, parameter2, parameter3) {
  console.log(parameter1); // 1
}
functionName(1);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an error object&lt;/h3&gt; &lt;p&gt;An error object is a built in error object that provides error information when an error occurs. It has two properties: name and message. For example, the below function logs error details,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;try {
  greeting("Welcome");
} catch (err) {
  console.log(err.name + "&amp;lt;br&amp;gt;" + err.message);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;When do you get a syntax error&lt;/h3&gt; &lt;p&gt;A SyntaxError is thrown if you try to evaluate code with a syntax error. For example, the below missing quote for the function parameter throws a syntax error&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;try {
  eval("greeting('welcome)"); // Missing ' will produce an error
} catch (err) {
  console.log(err.name);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different error names from error object&lt;/h3&gt; &lt;p&gt;There are 7 different types of error names returned from error object,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Error Name&lt;/th&gt; 
     &lt;th&gt;Description&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;code&gt;AggregateError&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;An error indicating that multiple errors occurred&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;An error has occurred in the eval() function&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;An error has occurred with a number "out of range"&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;An error due to an illegal reference&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;An error due to a syntax error&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;An error due to a type error&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;An error due to encodeURI()&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the various statements in error handling&lt;/h3&gt; &lt;p&gt;Below are the list of statements used in an error handling,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;try:&lt;/strong&gt; This statement is used to test a block of code for errors&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;catch:&lt;/strong&gt; This statement is used to handle the error&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;throw:&lt;/strong&gt; This statement is used to create custom errors.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;finally:&lt;/strong&gt; This statement is used to execute code after try and catch regardless of the result.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the two types of loops in javascript&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Entry Controlled loops:&lt;/strong&gt; In this kind of loop type, the test condition is tested before entering the loop body. For example, For Loop and While Loop comes under this category.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Exit Controlled Loops:&lt;/strong&gt; In this kind of loop type, the test condition is tested or evaluated at the end of the loop body. i.e, the loop body will execute at least once irrespective of test condition true or false. For example, do-while loop comes under this category.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is nodejs&lt;/h3&gt; &lt;p&gt;Node.js is a server-side platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. It is an event-based, non-blocking, asynchronous I/O runtime that uses Google's V8 JavaScript engine and libuv library.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the Intl object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Intl&lt;/code&gt; object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. It provides access to several constructors and language sensitive functions.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you perform language specific date and time formatting&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; object which is a constructor for objects that enable language-sensitive date and time formatting. Let's see this behavior with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var date = new Date(Date.UTC(2019, 07, 07, 3, 0, 0));
console.log(new Intl.DateTimeFormat("en-GB").format(date)); // 07/08/2019
console.log(new Intl.DateTimeFormat("en-AU").format(date)); // 07/08/2019
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an Iterator&lt;/h3&gt; &lt;p&gt;An iterator is an object which defines a sequence and a return value upon its termination. It implements the Iterator protocol with a &lt;code&gt;next()&lt;/code&gt; method which returns an object with two properties: &lt;code&gt;value&lt;/code&gt; (the next value in the sequence) and &lt;code&gt;done&lt;/code&gt; (which is true if the last value in the sequence has been consumed).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How does synchronous iteration works&lt;/h3&gt; &lt;p&gt;Synchronous iteration was introduced in ES6 and it works with below set of components,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Iterable:&lt;/strong&gt; It is an object which can be iterated over via a method whose key is Symbol.iterator.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Iterator:&lt;/strong&gt; It is an object returned by invoking &lt;code&gt;[Symbol.iterator]()&lt;/code&gt; on an iterable. This iterator object wraps each iterated element in an object and returns it via &lt;code&gt;next()&lt;/code&gt; method one by one.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;IteratorResult:&lt;/strong&gt; It is an object returned by &lt;code&gt;next()&lt;/code&gt; method. The object contains two properties; the &lt;code&gt;value&lt;/code&gt; property contains an iterated element and the &lt;code&gt;done&lt;/code&gt; property determines whether the element is the last element or not.&lt;/p&gt; &lt;p&gt;Let's demonstrate synchronous iteration with an array as below&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const iterable = ["one", "two", "three"];
const iterator = iterable[Symbol.iterator]();
console.log(iterator.next()); // { value: 'one', done: false }
console.log(iterator.next()); // { value: 'two', done: false }
console.log(iterator.next()); // { value: 'three', done: false }
console.log(iterator.next()); // { value: 'undefined, done: true }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the event loop&lt;/h3&gt; &lt;p&gt;The event loop is a process that continuously monitors both the call stack and the event queue and checks whether or not the call stack is empty. If the call stack is empty and there are pending events in the event queue, the event loop dequeues the event from the event queue and pushes it to the call stack. The call stack executes the event, and any additional events generated during the execution are added to the end of the event queue.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The event loop allows Node.js to perform non-blocking I/O operations, even though JavaScript is single-threaded, by offloading operations to the system kernel whenever possible. Since most modern kernels are multi-threaded, they can handle multiple operations executing in the background.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the call stack&lt;/h3&gt; &lt;p&gt;Call Stack is a data structure for javascript interpreters to keep track of function calls(creates execution context) in the program. It has two major actions,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Whenever you call a function for its execution, you are pushing it to the stack.&lt;/li&gt; 
   &lt;li&gt;Whenever the execution is completed, the function is popped out of the stack.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let's take an example and it's state representation in a diagram format&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function hungry() {
  eatFruits();
}
function eatFruits() {
  return "I'm eating fruits";
}

// Invoke the `hungry` function
hungry();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code processed in a call stack as below,&lt;/p&gt; 
  &lt;ol start="3"&gt; 
   &lt;li&gt;Add the &lt;code&gt;hungry()&lt;/code&gt; function to the call stack list and execute the code.&lt;/li&gt; 
   &lt;li&gt;Add the &lt;code&gt;eatFruits()&lt;/code&gt; function to the call stack list and execute the code.&lt;/li&gt; 
   &lt;li&gt;Delete the &lt;code&gt;eatFruits()&lt;/code&gt; function from our call stack list.&lt;/li&gt; 
   &lt;li&gt;Delete the &lt;code&gt;hungry()&lt;/code&gt; function from the call stack list since there are no items anymore.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/call-stack.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the event queue&lt;/h3&gt; &lt;p&gt;The event queue follows the queue data structure. It stores async callbacks to be added to the call stack. It is also known as the Callback Queue or Macrotask Queue.&lt;/p&gt; &lt;p&gt;Whenever the call stack receives an async function, it is moved into the Web API. Based on the function, Web API executes it and awaits the result. Once it is finished, it moves the callback into the event queue (the callback of a promise is moved into the microtask queue).&lt;/p&gt; &lt;p&gt;The event loop constantly checks whether or not the call stack is empty. Once the call stack is empty and there is a callback in the event queue, the event loop moves the callback into the call stack. But if there is a callback in the microtask queue as well, it is moved first. The microtask queue has a higher priority than the event queue.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a decorator&lt;/h3&gt; &lt;p&gt;A decorator is an expression that evaluates to a function and that takes the target, name, and decorator descriptor as arguments. Also, it optionally returns a decorator descriptor to install on the target object. Let's define admin decorator for user class at design time,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function admin(isAdmin) {
   return function(target) {
       target.isAdmin = isAdmin;
   }
}

@admin(true)
class User() {
}
console.log(User.isAdmin); //true

 @admin(false)
 class User() {
 }
 console.log(User.isAdmin); //false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the properties of the Intl object&lt;/h3&gt; &lt;p&gt;Below are the list of properties available on the &lt;code&gt;Intl&lt;/code&gt; object,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Collator:&lt;/strong&gt; These are the objects that enable language-sensitive string comparison.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;DateTimeFormat:&lt;/strong&gt; These are the objects that enable language-sensitive date and time formatting.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;ListFormat:&lt;/strong&gt; These are the objects that enable language-sensitive list formatting.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;NumberFormat:&lt;/strong&gt; Objects that enable language-sensitive number formatting.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;PluralRules:&lt;/strong&gt; Objects that enable plural-sensitive formatting and language-specific rules for plurals.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;RelativeTimeFormat:&lt;/strong&gt; Objects that enable language-sensitive relative time formatting.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an Unary operator&lt;/h3&gt; &lt;p&gt;The unary(+) operator is used to convert a variable to a number.If the variable cannot be converted, it will still become a number but with the value NaN. Let's see this behavior in an action.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var x = "100";
var y = +x;
console.log(typeof x, typeof y); // string, number

var a = "Hello";
var b = +a;
console.log(typeof a, typeof b, b); // string, number, NaN
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you sort elements in an array&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;sort()&lt;/code&gt; method is used to sort the elements of an array in place and returns the sorted array. The default sort order is ascending, based on the string Unicode order. The example usage would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var months = ["Aug", "Sep", "Jan", "June"];
months.sort();
console.log(months); //  ["Aug", "Jan", "June", "Sep"]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Beware:&lt;/strong&gt; &lt;code&gt;sort()&lt;/code&gt; is changing the original array.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of compareFunction while sorting arrays&lt;/h3&gt; &lt;p&gt;The compareFunction is used to define the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value.&lt;/p&gt; &lt;p&gt;Let's take an example to see the usage of compareFunction,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let numbers = [1, 2, 5, 3, 4];
numbers.sort((a, b) =&amp;gt; b - a);
console.log(numbers); // [5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you reverse an array&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;reverse()&lt;/code&gt; method to reverse the elements in an array. This method is useful to sort an array in descending order. Let's see the usage of &lt;code&gt;reverse()&lt;/code&gt; method in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let numbers = [1, 2, 5, 3, 4];
numbers.sort((a, b) =&amp;gt; b - a);
numbers.reverse();
console.log(numbers); // [1, 2, 3, 4 ,5]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you find the min and max values in an array&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;Math.min&lt;/code&gt; and &lt;code&gt;Math.max&lt;/code&gt; methods on array variables to find the minimum and maximum elements within an array. Let's create two functions to find the min and max value with in an array,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var marks = [50, 20, 70, 60, 45, 30];
function findMin(arr) {
  return Math.min.apply(null, arr);
}
function findMax(arr) {
  return Math.max.apply(null, arr);
}

console.log(findMin(marks));
console.log(findMax(marks));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you find the min and max values without Math functions&lt;/h3&gt; &lt;p&gt;You can write functions which loop through an array comparing each value with the lowest value or highest value to find the min and max values. Let's create those functions to find min and max values,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var marks = [50, 20, 70, 60, 45, 30];
function findMin(arr) {
  var length = arr.length;
  var min = Infinity;
  while (length--) {
    if (arr[length] &amp;lt; min) {
      min = arr[length];
    }
  }
  return min;
}

function findMax(arr) {
  var length = arr.length;
  var max = -Infinity;
  while (length--) {
    if (arr[length] &amp;gt; max) {
      max = arr[length];
    }
  }
  return max;
}

console.log(findMin(marks));
console.log(findMax(marks));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an empty statement and purpose of it&lt;/h3&gt; &lt;p&gt;The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. Since there is no action with an empty statement you might think that it's usage is quite less, but the empty statement is occasionally useful when you want to create a loop that has an empty body. For example, you can initialize an array with zero values as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// Initialize an array a
for (let i = 0; i &amp;lt; a.length; a[i++] = 0);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the metadata of a module&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;import.meta&lt;/code&gt; object which is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the current module, such as the module's URL. In browsers, you might get different meta data than NodeJS.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;script type="module" src="welcome-module.js"&amp;gt;&amp;lt;/script&amp;gt;;
console.log(import.meta); // { url: "file:///home/user/welcome-module.js" }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the comma operator&lt;/h3&gt; &lt;p&gt;The comma operator is used to evaluate each of its operands from left to right and returns the value of the last operand. This is totally different from comma usage within arrays, objects, and function arguments and parameters. For example, the usage for numeric expressions would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var x = 1;
x = (x++, x);

console.log(x); // 2
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the advantage of the comma operator&lt;/h3&gt; &lt;p&gt;It is normally used to include multiple expressions in a location that requires a single expression. One of the common usages of this comma operator is to supply multiple parameters in a &lt;code&gt;for&lt;/code&gt; loop. For example, the below for loop uses multiple expressions in a single location using comma operator,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;for (var a = 0, b =10; a &amp;lt;= 10; a++, b--)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use the comma operator in a return statement where it processes before returning.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function myFunction() {
  var a = 1;
  return (a += 10), a; // 11
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is typescript&lt;/h3&gt; &lt;p&gt;TypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes and many other features, and compiles to plain JavaScript. Angular is built entirely in TypeScript and it is used as the primary language there. You can install it globally as&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;npm install -g typescript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's see a simple example of TypeScript usage,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-typescript"&gt;function greeting(name: string): string {
  return "Hello, " + name;
}

let user = "Sudheer";

console.log(greeting(user));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The greeting method allows only string type as argument.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between javascript and typescript&lt;/h3&gt; &lt;p&gt;Below are the list of differences between javascript and typescript,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;feature&lt;/th&gt; 
     &lt;th&gt;typescript&lt;/th&gt; 
     &lt;th&gt;javascript&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Language paradigm&lt;/td&gt; 
     &lt;td&gt;Object oriented programming language&lt;/td&gt; 
     &lt;td&gt;Multi-paradigm language&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Typing support&lt;/td&gt; 
     &lt;td&gt;Supports static typing&lt;/td&gt; 
     &lt;td&gt;Dynamic typing&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Modules&lt;/td&gt; 
     &lt;td&gt;Supported&lt;/td&gt; 
     &lt;td&gt;Not supported&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Interface&lt;/td&gt; 
     &lt;td&gt;It has interfaces concept&lt;/td&gt; 
     &lt;td&gt;Doesn't support interfaces&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Optional parameters&lt;/td&gt; 
     &lt;td&gt;Functions support optional parameters&lt;/td&gt; 
     &lt;td&gt;No support of optional parameters for functions&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of typescript over javascript&lt;/h3&gt; &lt;p&gt;Below are some of the advantages of typescript over javascript,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;TypeScript is able to find compile time errors at the development time only and it makes sures less runtime errors. Whereas javascript is an interpreted language.&lt;/li&gt; 
   &lt;li&gt;TypeScript is strongly-typed or supports static typing which allows for checking type correctness at compile time. This is not available in javascript.&lt;/li&gt; 
   &lt;li&gt;TypeScript compiler can compile the .ts files into ES3,ES4 and ES5 unlike ES6 features of javascript which may not be supported in some browsers.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an object initializer&lt;/h3&gt; &lt;p&gt;An object initializer is an expression that describes the initialization of an Object. The syntax for this expression is represented as a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). This is also known as literal notation. It is one of the ways to create an object.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var initObject = { a: "John", b: 50, c: {} };

console.log(initObject.a); // John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a constructor method&lt;/h3&gt; &lt;p&gt;The constructor method is a special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used. The example usage of constructor would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Employee {
  constructor() {
    this.name = "John";
  }
}

var employeeObject = new Employee();

console.log(employeeObject.name); // John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if you write constructor more than once in a class&lt;/h3&gt; &lt;p&gt;The "constructor" in a class is a special method and it should be defined only once in a class. i.e, If you write a constructor method more than once in a class it will throw a &lt;code&gt;SyntaxError&lt;/code&gt; error.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt; class Employee {
   constructor() {
     this.name = "John";
   }
   constructor() {   //  Uncaught SyntaxError: A class may only have one constructor
     this.age = 30;
   }
 }

 var employeeObject = new Employee();

 console.log(employeeObject.name);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This constructor is called by using the special function call &lt;code&gt;new&lt;/code&gt; (see example above).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you call the constructor of a parent class&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;super&lt;/code&gt; keyword to call the constructor of a parent class. Remember that &lt;code&gt;super()&lt;/code&gt; must be called before using &lt;code&gt;this&lt;/code&gt; reference. Otherwise it will cause a reference error. Let's the usage of it,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Square extends Rectangle {
  constructor(length) {
    super(length, length);
    this.name = "Square";
  }

  get area() {
    return this.width * this.height;
  }

  set area(value) {
    this.area = value;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the prototype of an object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt; method to return the prototype of the specified object. i.e. The value of the internal &lt;code&gt;prototype&lt;/code&gt; property. If there are no inherited properties then &lt;code&gt;null&lt;/code&gt; value is returned.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const newPrototype = {};
const newObject = Object.create(newPrototype);

console.log(Object.getPrototypeOf(newObject) === newPrototype); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens If I pass string type for getPrototype method&lt;/h3&gt; &lt;p&gt;In ES5, it will throw a TypeError exception if the obj parameter isn't an object. Whereas in ES2015, the parameter will be coerced to an &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// ES5
Object.getPrototypeOf("James"); // TypeError: "James" is not an object
// ES2015
Object.getPrototypeOf("James"); // String.prototype
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you set the prototype of one object to another&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; method that sets the prototype (i.e., the internal &lt;code&gt;Prototype&lt;/code&gt; property) of a specified object to another object or null. For example, if you want to set prototype of a square object to rectangle object would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Object.setPrototypeOf(Square.prototype, Rectangle.prototype);
Object.setPrototypeOf({}, null);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check whether an object can be extended or not&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.isExtensible()&lt;/code&gt; method is used to determine if an object is extendable or not. i.e, Whether it can have new properties added to it or not.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const newObject = {};
console.log(Object.isExtensible(newObject)); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; By default, all the objects are extendable. i.e, The new properties can be added or modified.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you prevent an object from being extend&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.preventExtensions()&lt;/code&gt; method is used to prevent new properties from ever being added to an object. In other words, it prevents future extensions to the object. Let's see the usage of this property,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const newObject = {};
Object.preventExtensions(newObject); // NOT extendable

try {
  Object.defineProperty(newObject, "newProperty", {
    // Adding new property
    value: 100,
  });
} catch (e) {
  console.log(e); // TypeError: Cannot define property newProperty, object is not extensible
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to make an object non-extensible&lt;/h3&gt; &lt;p&gt;You can mark an object non-extensible in 3 ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;Object.preventExtensions&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Object.seal&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Object.freeze&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var newObject = {};

Object.preventExtensions(newObject); // Prevent objects are non-extensible
Object.isExtensible(newObject); // false

var sealedObject = Object.seal({}); // Sealed objects are non-extensible
Object.isExtensible(sealedObject); // false

var frozenObject = Object.freeze({}); // Frozen objects are non-extensible
Object.isExtensible(frozenObject); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define multiple properties on an object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.defineProperties()&lt;/code&gt; method is used to define new or modify existing properties directly on an object and returning the object. Let's define multiple properties on an empty object,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const newObject = {};

Object.defineProperties(newObject, {
  newProperty1: {
    value: "John",
    writable: true,
  },
  newProperty2: {},
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the MEAN stack&lt;/h3&gt; &lt;p&gt;The MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech stack available for building dynamic web apps where you can write both the server-side and client-side halves of the web project entirely in JavaScript.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is obfuscation in javascript&lt;/h3&gt; &lt;p&gt;Obfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is difficult for humans to understand. It is something similar to encryption, but a machine can understand the code and execute it. Let's see the below function before Obfuscation,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function greeting() {
  console.log("Hello, welcome to JS world");
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And after the code Obfuscation, it would be appeared as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;eval(
  (function (p, a, c, k, e, d) {
    e = function (c) {
      return c;
    };
    if (!"".replace(/^/, String)) {
      while (c--) {
        d[c] = k[c] || c;
      }
      k = [
        function (e) {
          return d[e];
        },
      ];
      e = function () {
        return "\\w+";
      };
      c = 1;
    }
    while (c--) {
      if (k[c]) {
        p = p.replace(new RegExp("\\b" + e(c) + "\\b", "g"), k[c]);
      }
    }
    return p;
  })(
    "2 1(){0.3('4, 7 6 5 8')}",
    9,
    9,
    "console|greeting|function|log|Hello|JS|to|welcome|world".split("|"),
    0,
    {}
  )
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need Obfuscation&lt;/h3&gt; &lt;p&gt;Below are the few reasons for Obfuscation,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The Code size will be reduced. So data transfers between server and client will be fast.&lt;/li&gt; 
   &lt;li&gt;It hides the business logic from outside world and protects the code from others&lt;/li&gt; 
   &lt;li&gt;Reverse engineering is highly difficult&lt;/li&gt; 
   &lt;li&gt;The download time will be reduced&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Minification&lt;/h3&gt; &lt;p&gt;Minification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be renamed without changing it's functionality. It is also a type of obfuscation .&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of minification&lt;/h3&gt; &lt;p&gt;Normally it is recommended to use minification for heavy traffic and intensive requirements of resources. It reduces file sizes with below benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Decreases loading times of a web page&lt;/li&gt; 
   &lt;li&gt;Saves bandwidth usages&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between obfuscation and Encryption&lt;/h3&gt; &lt;p&gt;Below are the main differences between obfuscation and encryption,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Feature&lt;/th&gt; 
     &lt;th&gt;Obfuscation&lt;/th&gt; 
     &lt;th&gt;Encryption&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Definition&lt;/td&gt; 
     &lt;td&gt;Changing the form of any data in any other form&lt;/td&gt; 
     &lt;td&gt;Changing the form of information to an unreadable format by using a key&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;A key to decode&lt;/td&gt; 
     &lt;td&gt;It can be decoded without any key&lt;/td&gt; 
     &lt;td&gt;It is required&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Target data format&lt;/td&gt; 
     &lt;td&gt;It will be converted to a complex form&lt;/td&gt; 
     &lt;td&gt;Converted into an unreadable format&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common tools used for minification&lt;/h3&gt; &lt;p&gt;There are many online/offline tools to minify the javascript files,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Google's Closure Compiler&lt;/li&gt; 
   &lt;li&gt;UglifyJS2&lt;/li&gt; 
   &lt;li&gt;jsmin&lt;/li&gt; 
   &lt;li&gt;javascript-minifier.com/&lt;/li&gt; 
   &lt;li&gt;prettydiff.com&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you perform form validation using javascript&lt;/h3&gt; &lt;p&gt;JavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs to notify, and return false, to prevent the form being submitted. Lets' perform user login in an html form,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;form name="myForm" onsubmit="return validateForm()" method="post"&amp;gt;
  User name:
  &amp;lt;input type="text" name="uname" /&amp;gt;
  &amp;lt;input type="submit" value="Submit" /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And the validation on user login is below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function validateForm() {
  var x = document.forms["myForm"]["uname"].value;
  if (x == "") {
    alert("The username shouldn't be empty");
    return false;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you perform form validation without javascript&lt;/h3&gt; &lt;p&gt;You can perform HTML form validation automatically without using javascript. The validation enabled by applying the &lt;code&gt;required&lt;/code&gt; attribute to prevent form submission when the input is empty.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;form method="post"&amp;gt;
  &amp;lt;input type="text" name="uname" required /&amp;gt;
  &amp;lt;input type="submit" value="Submit" /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Automatic form validation does not work in Internet Explorer 9 or earlier.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the DOM methods available for constraint validation&lt;/h3&gt; &lt;p&gt;The below DOM methods are available for constraint validation on an invalid input,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;checkValidity()&lt;/code&gt;: It returns true if an input element contains valid data.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;setCustomValidity()&lt;/code&gt;: It is used to set the &lt;code&gt;validationMessage&lt;/code&gt; property of an input element. Let's take an user login form with DOM validations&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function myFunction() {
  var userName = document.getElementById("uname");
  if (!userName.checkValidity()) {
    document.getElementById("message").innerHTML =
      userName.validationMessage;
  } else {
    document.getElementById("message").innerHTML =
      "Entered a valid username";
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the available constraint validation DOM properties&lt;/h3&gt; &lt;p&gt;Below are the list of some of the constraint validation DOM properties available,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;validity&lt;/code&gt;: It provides a list of boolean properties related to the validity of an input element.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;validationMessage&lt;/code&gt;: It displays the message when the validity is false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;willValidate&lt;/code&gt;: It indicates if an input element will be validated or not.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the validity properties&lt;/h3&gt; &lt;p&gt;The validity property of an input element provides a set of properties related to the validity of data.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;customError&lt;/code&gt;: It returns true, if a custom validity message is set.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;patternMismatch&lt;/code&gt;: It returns true, if an element's value does not match its pattern attribute.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;rangeOverflow&lt;/code&gt;: It returns true, if an element's value is greater than its max attribute.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;rangeUnderflow&lt;/code&gt;: It returns true, if an element's value is less than its min attribute.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;stepMismatch&lt;/code&gt;: It returns true, if an element's value is invalid according to step attribute.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;tooLong&lt;/code&gt;: It returns true, if an element's value exceeds its maxLength attribute.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;typeMismatch&lt;/code&gt;: It returns true, if an element's value is invalid according to type attribute.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;valueMissing&lt;/code&gt;: It returns true, if an element with a required attribute has no value.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;valid&lt;/code&gt;: It returns true, if an element's value is valid.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example usage of the rangeOverflow property&lt;/h3&gt; &lt;p&gt;If an element's value is greater than its max attribute then the &lt;code&gt;rangeOverflow&lt;/code&gt; property is true. For example, the below form submission throws an error if the value is more than 100,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;input id="age" type="number" max="100" /&amp;gt;
&amp;lt;button onclick="myOverflowFunction()"&amp;gt;OK&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function myOverflowFunction() {
  if (document.getElementById("age").validity.rangeOverflow) {
    alert("The mentioned age is not allowed");
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Are enums available in javascript&lt;/h3&gt; &lt;p&gt;No, javascript does not natively support enums. But there are different kinds of solutions to simulate them even though they may not provide exact equivalents. For example, you can use freeze or seal on object,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var DaysEnum = Object.freeze({"monday":1, "tuesday":2, "wednesday":3, ...})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an enum&lt;/h3&gt; &lt;p&gt;An enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums but typescript provides built-in enum support.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;enum Color {
 RED, GREEN, BLUE
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you list all properties of an object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; method which returns an array of all properties found directly in a given object. Let's see the usage of this in an example below:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const newObject = {
  a: 1,
  b: 2,
  c: 3,
};

console.log(Object.getOwnPropertyNames(newObject));
["a", "b", "c"];
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get property descriptors of an object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.getOwnPropertyDescriptors()&lt;/code&gt; method which returns all own property descriptors of a given object. The example usage of this method is below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const newObject = {
  a: 1,
  b: 2,
  c: 3,
};
const descriptorsObject = Object.getOwnPropertyDescriptors(newObject);
console.log(descriptorsObject.a.writable); //true
console.log(descriptorsObject.a.configurable); //true
console.log(descriptorsObject.a.enumerable); //true
console.log(descriptorsObject.a.value); // 1
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the attributes provided by a property descriptor&lt;/h3&gt; &lt;p&gt;A property descriptor is a record which has the following attributes&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;value&lt;/code&gt;: The value associated with the property&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;writable&lt;/code&gt;: Determines whether the value associated with the property can be changed or not&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;configurable&lt;/code&gt;: Returns true if the type of this property descriptor can be changed and if the property can be deleted from the corresponding object.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;enumerable&lt;/code&gt;: Determines whether the property appears during enumeration of the properties on the corresponding object or not.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;set&lt;/code&gt;: A function which serves as a setter for the property&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;get&lt;/code&gt;: A function which serves as a getter for the property&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you extend classes&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;extends&lt;/code&gt; keyword is used in class declarations/expressions to create a class which is a child of another class. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class ChildClass extends ParentClass { ... }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's take an example of Square subclass from Polygon parent class,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Square extends Rectangle {
  constructor(length) {
    super(length, length);
    this.name = "Square";
  }

  get area() {
    return this.width * this.height;
  }

  set area(value) {
    this.area = value;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do I modify the url without reloading the page&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;window.location.href&lt;/code&gt; property will be helpful to modify the url but it reloads the page. HTML5 introduced the &lt;code&gt;history.pushState()&lt;/code&gt; and &lt;code&gt;history.replaceState()&lt;/code&gt; methods, which allow you to add and modify history entries, respectively. For example, you can use pushState as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;window.history.pushState("page2", "Title", "/page2.html");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This mechanism is used by routing libraries of frameworks like React and Angular in order to simulate the behaviour of a multi-page-website, even though they are only SPA (Single Page Applications).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check whether or not an array includes a particular value&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Array#includes()&lt;/code&gt; method is used to determine whether an array includes a particular value among its entries by returning either true or false. Let's see an example to find an element(numeric and string) within an array.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var numericArray = [1, 2, 3, 4];
console.log(numericArray.includes(3)); // true

var stringArray = ["green", "yellow", "blue"];
console.log(stringArray.includes("blue")); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you compare scalar arrays&lt;/h3&gt; &lt;p&gt;You can use length and every method of arrays to compare two scalars (compared directly using &lt;code&gt;===&lt;/code&gt;) arrays. The combination of these expressions can give the expected result,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const arrayFirst = [1, 2, 3, 4, 5];
const arraySecond = [1, 2, 3, 4, 5];
console.log(
  arrayFirst.length === arraySecond.length &amp;amp;&amp;amp;
    arrayFirst.every((value, index) =&amp;gt; value === arraySecond[index])
); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you would like to compare arrays irrespective of order then you should sort them before,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const arrayFirst = [2, 3, 1, 4, 5];
const arraySecond = [1, 2, 3, 4, 5];
console.log(
  arrayFirst.length === arraySecond.length &amp;amp;&amp;amp;
    arrayFirst
      .sort()
      .every((value, index) =&amp;gt; value === arraySecond[index])
); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to get the value from get parameters&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;new URL()&lt;/code&gt; object accepts the url string and &lt;code&gt;searchParams&lt;/code&gt; property of this object can be used to access the get parameters.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let urlString = "http://www.some-domain.com/about.html?x=1&amp;amp;y=2&amp;amp;z=3"; //window.location.href
let url = new URL(urlString);
let parameterZ = url.searchParams.get("z");
console.log(parameterZ); // 3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print numbers with commas as thousand separators&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt; method which returns a string with a language-sensitive representation such as thousand separator, currency etc. of this number.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function convertToThousandFormat(x) {
  return x.toLocaleString(); // 12,345.679
}

console.log(convertToThousandFormat(12345.6789));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between java and javascript&lt;/h3&gt; &lt;p&gt;Both are totally unrelated programming languages and no relation between them. Java is statically typed, compiled, runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs environments. Let's see the major differences in a tabular format,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Feature&lt;/th&gt; 
     &lt;th&gt;Java&lt;/th&gt; 
     &lt;th&gt;JavaScript&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Typed&lt;/td&gt; 
     &lt;td&gt;It's a strongly typed language&lt;/td&gt; 
     &lt;td&gt;It's a dynamic typed language&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Paradigm&lt;/td&gt; 
     &lt;td&gt;Object oriented programming&lt;/td&gt; 
     &lt;td&gt;Prototype based programming&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Scoping&lt;/td&gt; 
     &lt;td&gt;Block scoped&lt;/td&gt; 
     &lt;td&gt;Function-scoped, block scoped since ES6&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Concurrency&lt;/td&gt; 
     &lt;td&gt;Thread based&lt;/td&gt; 
     &lt;td&gt;event based&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Does JavaScript support namespaces&lt;/h3&gt; &lt;p&gt;JavaScript doesn’t support namespaces by default. So if you create any element (function, method, object, variable) then it becomes global and pollutes the global namespace. Let's take an example of defining two functions without any namespace,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function func1() {
  console.log("This is a first definition");
}
function func1() {
  console.log("This is a second definition");
}
func1(); // This is a second definition
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It always calls the second function definition. In this case, namespaces will solve the name collision problem.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you declare a namespace&lt;/h3&gt; &lt;p&gt;Even though JavaScript lacks namespaces, we can use Objects, an IIFE (Immediately Invoked Function Expression) or &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt; to create namespaces.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Object Literal Notation:&lt;/strong&gt; Let's wrap variables and functions inside an Object literal which acts as a namespace. After that you can access them using object notation&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var namespaceOne = {
    function func1() {
        console.log("This is a first definition");
    }
}
var namespaceTwo = {
      function func1() {
          console.log("This is a second definition");
      }
  }
namespaceOne.func1(); // This is a first definition
namespaceTwo.func1(); // This is a second definition
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using IIFE (Immediately invoked function expression):&lt;/strong&gt; The outer pair of parentheses of IIFE creates a local scope for all the code inside of it and makes the anonymous function a function expression. Due to that, you can create the same function in two different function expressions to act as a namespace.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;(function () {
  function fun1() {
    console.log("This is a first definition");
  }
  fun1();
})();

(function () {
  function fun1() {
    console.log("This is a second definition");
  }
  fun1();
})();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using a block and a let/const declaration:&lt;/strong&gt; In ECMAScript 6, you can simply use a block and a let declaration to restrict the scope of a variable to a block.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;{
  let myFunction = function fun1() {
    console.log("This is a first definition");
  };
  myFunction();
}
//myFunction(): ReferenceError: myFunction is not defined.

{
  let myFunction = function fun1() {
    console.log("This is a second definition");
  };
  myFunction();
}
//myFunction(): ReferenceError: myFunction is not defined.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you invoke javascript code in an iframe from the parent page&lt;/h3&gt; &lt;p&gt;Initially iFrame needs to be accessed using either &lt;code&gt;document.getElementBy&lt;/code&gt; or &lt;code&gt;window.frames&lt;/code&gt;. After that &lt;code&gt;contentWindow&lt;/code&gt; property of iFrame gives the access for targetFunction&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document.getElementById("targetFrame").contentWindow.targetFunction();
window.frames[0].frameElement.contentWindow.targetFunction(); // Accessing iframe this way may not work in latest versions chrome and firefox
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the timezone offset of a date object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;getTimezoneOffset&lt;/code&gt; method of the date object. This method returns the time zone difference, in minutes, from current locale (host system settings) to UTC&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var offset = new Date().getTimezoneOffset();
console.log(offset); // -480
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you load CSS and JS files dynamically&lt;/h3&gt; &lt;p&gt;You can create both link and script elements in the DOM and append them as child to head tag. Let's create a function to add script and style resources as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function loadAssets(filename, filetype) {
  if (filetype == "css") {
    // External CSS file
    var fileReference = document.createElement("link");
    fileReference.setAttribute("rel", "stylesheet");
    fileReference.setAttribute("type", "text/css");
    fileReference.setAttribute("href", filename);
  } else if (filetype == "js") {
    // External JavaScript file
    var fileReference = document.createElement("script");
    fileReference.setAttribute("type", "text/javascript");
    fileReference.setAttribute("src", filename);
  }
  if (typeof fileReference != "undefined")
    document.getElementsByTagName("head")[0].appendChild(fileReference);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different methods to find HTML elements in DOM&lt;/h3&gt; &lt;p&gt;If you want to access any element in an HTML page, you need to start with accessing the document object. Later you can use any of the below methods to find the HTML element,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;document.getElementById(id)&lt;/code&gt;: It finds an element by Id&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;document.getElementsByTagName(name)&lt;/code&gt;: It finds an element by tag name (returns an node list)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;document.getElementsByClassName(name)&lt;/code&gt;: It finds an element by class name (returns an node list)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;document.querySelector(cssSelector)&lt;/code&gt;: It finds an element by css selector&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;document.querySelectorAll(cssSelector)&lt;/code&gt;: It finds all elements by css selector (returns a node list)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is jQuery&lt;/h3&gt; &lt;p&gt;jQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous with its philosophy of “Write less, do more”. For example, you can display welcome message on the page load using jQuery as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;$(document).ready(function () {
  // It selects the document and apply the function on page load
  alert("Welcome to jQuery world");
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can download it from jquery's official site or install it from CDNs, like google.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is V8 JavaScript engine&lt;/h3&gt; &lt;p&gt;V8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is also being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors. &lt;strong&gt;Note:&lt;/strong&gt; It can run standalone, or can be embedded into any C++ application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we call javascript as dynamic language&lt;/h3&gt; &lt;p&gt;JavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let age = 50; // age is a number now
age = "old"; // age is a string now
age = true; // age is a boolean
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a void operator&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;void&lt;/code&gt; operator evaluates the given expression and then returns &lt;code&gt;undefined&lt;/code&gt; (i.e, without returning value). The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;void expression;
void expression;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's display a message without any redirection or reload&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;a href="javascript:void(alert('Welcome to JS world'))"&amp;gt;
  Click here to see a message
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This operator is often used to obtain the undefined primitive value, using &lt;code&gt;void(0)&lt;/code&gt;. Also it can be used to call asynchronous functions without waiting for the result.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to set the cursor to wait&lt;/h3&gt; &lt;p&gt;The cursor can be set to wait in JavaScript by using the property &lt;code&gt;cursor&lt;/code&gt;. Let's perform this behavior on page load using the below function.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function myFunction() {
  window.document.body.style.cursor = "wait";
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and this function invoked on page load&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;body onload="myFunction()"&amp;gt;&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create an infinite loop&lt;/h3&gt; &lt;p&gt;You can create infinite loops using for and while loops without using any expressions. The for loop construct or syntax is better approach in terms of ESLint and code optimizer tools,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;for (;;) {}
while (true) {}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need to avoid with statement&lt;/h3&gt; &lt;p&gt;JavaScript's with statement was intended to provide a shorthand for writing recurring accesses to objects. So it can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. Let's take an example where it is used to avoid redundancy when accessing an object several times.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;a.b.c.greeting = "welcome";
a.b.c.age = 32;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;code&gt;with&lt;/code&gt; it turns this into:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;with (a.b.c) {
  greeting = "welcome";
  age = 32;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But this &lt;code&gt;with&lt;/code&gt; statement creates performance problems since one cannot predict whether an argument will refer to a real variable or to a property inside the with argument.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of the following for loops&lt;/h3&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;for (var i = 0; i &amp;lt; 4; i++) {
  // global scope
  setTimeout(() =&amp;gt; console.log(i));
}

for (let i = 0; i &amp;lt; 4; i++) {
  // block scope
  setTimeout(() =&amp;gt; console.log(i));
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the above for loops is 4 4 4 4 and 0 1 2 3&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Due to the event queue/loop of javascript, the &lt;code&gt;setTimeout&lt;/code&gt; callback function is called after the loop has been executed. Since the variable i is declared with the &lt;code&gt;var&lt;/code&gt; keyword it became a global variable and the value was equal to 4 using iteration when the time &lt;code&gt;setTimeout&lt;/code&gt; function is invoked. Hence, the output of the second loop is &lt;code&gt;4 4 4 4&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Whereas in the second loop, the variable i is declared as the &lt;code&gt;let&lt;/code&gt; keyword it becomes a block scoped variable and it holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the first loop is &lt;code&gt;0 1 2 3&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;List down some of the features of ES6&lt;/h3&gt; &lt;p&gt;Below are the list of some new features of ES6,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Support for constants or immutable variables&lt;/li&gt; 
   &lt;li&gt;Block-scope support for variables, constants and functions&lt;/li&gt; 
   &lt;li&gt;Arrow functions&lt;/li&gt; 
   &lt;li&gt;Default parameters&lt;/li&gt; 
   &lt;li&gt;Rest and Spread Parameters&lt;/li&gt; 
   &lt;li&gt;Template Literals&lt;/li&gt; 
   &lt;li&gt;Multi-line Strings&lt;/li&gt; 
   &lt;li&gt;Destructuring Assignment&lt;/li&gt; 
   &lt;li&gt;Enhanced Object Literals&lt;/li&gt; 
   &lt;li&gt;Promises&lt;/li&gt; 
   &lt;li&gt;Classes&lt;/li&gt; 
   &lt;li&gt;Modules&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ES6&lt;/h3&gt; &lt;p&gt;ES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as ECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old browsers there are many transpilers, like Babel.js etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I redeclare let and const variables&lt;/h3&gt; &lt;p&gt;No, you cannot redeclare let and const variables. If you do, it throws below error&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;Uncaught SyntaxError: Identifier 'someVariable' has already been declared
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The variable declaration with &lt;code&gt;var&lt;/code&gt; keyword refers to a function scope and the variable is treated as if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations contributing to the same hoisted variable without any error. Let's take an example of re-declaring variables in the same scope for both var and let/const variables.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var name = "John";
function myFunc() {
  var name = "Nick";
  var name = "Abraham"; // Re-assigned in the same function block
  alert(name); // Abraham
}
myFunc();
alert(name); // John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The block-scoped multi-declaration throws syntax error,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let name = "John";
function myFunc() {
  let name = "Nick";
  let name = "Abraham"; // Uncaught SyntaxError: Identifier 'name' has already been declared
  alert(name);
}

myFunc();
alert(name);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Does the &lt;code&gt;const&lt;/code&gt; variable make the value immutable&lt;/h3&gt; &lt;p&gt;No, the &lt;code&gt;const&lt;/code&gt; variable doesn't make the value immutable. But it disallows subsequent assignments(i.e, You can declare with assignment but can't assign another value later)&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const userList = [];
userList.push("John"); // Can mutate even though it can't re-assign
console.log(userList); // ['John']
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are default parameters&lt;/h3&gt; &lt;p&gt;In ES5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let's compare the behavior with an examples,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//ES5
var calculateArea = function (height, width) {
  height = height || 50;
  width = width || 60;

  return width * height;
};
console.log(calculateArea()); //300
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The default parameters makes the initialization more simpler,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//ES6
var calculateArea = function (height = 50, width = 60) {
  return width * height;
};

console.log(calculateArea()); //300
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are template literals&lt;/h3&gt; &lt;p&gt;Template literals or template strings are string literals allowing embedded expressions. These are enclosed by the back-tick (`) character instead of double or single quotes. In ES6, this feature enables using dynamic expressions as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In ES5, you need break string like below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var greeting = 'Welcome to JS World, Mr. ' + firstName + ' ' + lastName.`
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can use multi-line strings and string interpolation features with template literals.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you write multi-line strings in template literals&lt;/h3&gt; &lt;p&gt;In ES5, you would have to use newline escape characters('\n') and concatenation symbols(+) in order to get multi-line strings.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log("This is string sentence 1\n" + "This is string sentence 2");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in ES6, You don't need to mention any newline sequence character,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(`This is string sentence
'This is string sentence 2`);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are nesting templates&lt;/h3&gt; &lt;p&gt;The nesting template is a feature supported within template literals syntax to allow inner backticks inside a placeholder ${ } within the template. For example, the below nesting template is used to display the icons based on user permissions whereas outer template checks for platform type,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const iconStyles = `icon ${
  isMobilePlatform()
    ? ""
    : `icon-${user.isAuthorized ? "submit" : "disabled"}`
}`;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can write the above use case without nesting template features as well. However, the nesting template feature is more compact and readable.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//Without nesting templates
const iconStyles = `icon ${
  isMobilePlatform()
    ? ""
    : user.isAuthorized
    ? "icon-submit"
    : "icon-disabled"
}`;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are tagged templates&lt;/h3&gt; &lt;p&gt;Tagged templates are the advanced form of templates in which tags allow you to parse template literals with a function. The tag function accepts the first parameter as an array of strings and remaining parameters as expressions. This function can also return manipulated strings based on parameters. Let's see the usage of this tagged template behavior of an IT professional skill set in an organization,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var user1 = "John";
var skill1 = "JavaScript";
var experience1 = 15;

var user2 = "Kane";
var skill2 = "JavaScript";
var experience2 = 5;

function myInfoTag(strings, userExp, experienceExp, skillExp) {
  var str0 = strings[0]; // "Mr/Ms. "
  var str1 = strings[1]; // " is a/an "
  var str2 = strings[2]; // "in"

  var expertiseStr;
  if (experienceExp &amp;gt; 10) {
    expertiseStr = "expert developer";
  } else if (skillExp &amp;gt; 5 &amp;amp;&amp;amp; skillExp &amp;lt;= 10) {
    expertiseStr = "senior developer";
  } else {
    expertiseStr = "junior developer";
  }

  return `${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp}`;
}

var output1 = myInfoTag`Mr/Ms. ${user1} is a/an ${experience1} in ${skill1}`;
var output2 = myInfoTag`Mr/Ms. ${user2} is a/an ${experience2} in ${skill2}`;

console.log(output1); // Mr/Ms. John is a/an expert developer in JavaScript
console.log(output2); // Mr/Ms. Kane is a/an junior developer in JavaScript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are raw strings&lt;/h3&gt; &lt;p&gt;ES6 provides a raw strings feature using the &lt;code&gt;String.raw()&lt;/code&gt; method which is used to get the raw string form of template strings. This feature allows you to access the raw strings as they were entered, without processing escape sequences. For example, the usage would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var calculationString = String.raw`The sum of numbers is \n${
  1 + 2 + 3 + 4
}!`;
console.log(calculationString); // The sum of numbers is \n10!
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don't use raw strings, the newline character sequence will be processed by displaying the output in multiple lines&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var calculationString = `The sum of numbers is \n${1 + 2 + 3 + 4}!`;
console.log(calculationString);
// The sum of numbers is
// 10!
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Also, the raw property is available on the first argument to the tag function&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function tag(strings) {
  console.log(strings.raw[0]);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is destructuring assignment&lt;/h3&gt; &lt;p&gt;The destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables. Let's get the month values from an array using destructuring assignment&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var [one, two, three] = ["JAN", "FEB", "MARCH"];

console.log(one); // "JAN"
console.log(two); // "FEB"
console.log(three); // "MARCH"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and you can get user properties of an object using destructuring assignment,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var { name, age } = { name: "John", age: 32 };

console.log(name); // John
console.log(age); // 32
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are default values in destructuring assignment&lt;/h3&gt; &lt;p&gt;A variable can be assigned a default value when the value unpacked from the array or object is undefined during destructuring assignment. It helps to avoid setting default values separately for each assignment. Let's take an example for both arrays and object use cases,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Arrays destructuring:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var x, y, z;

[x = 2, y = 4, z = 6] = [10];
console.log(x); // 10
console.log(y); // 4
console.log(z); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Objects destructuring:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var { x = 2, y = 4, z = 6 } = { x: 10 };

console.log(x); // 10
console.log(y); // 4
console.log(z); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you swap variables in destructuring assignment&lt;/h3&gt; &lt;p&gt;If you don't use destructuring assignment, swapping two values requires a temporary variable. Whereas using a destructuring feature, two variable values can be swapped in one destructuring expression. Let's swap two number variables in array destructuring assignment,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var x = 10,
  y = 20;

[x, y] = [y, x];
console.log(x); // 20
console.log(y); // 10
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are enhanced object literals&lt;/h3&gt; &lt;p&gt;Object literals make it easy to quickly create objects with properties inside the curly braces. For example, it provides shorter syntax for common object property definition as below.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//ES6
var x = 10,
  y = 20;
obj = { x, y };
console.log(obj); // {x: 10, y:20}
//ES5
var x = 10,
  y = 20;
obj = { x: x, y: y };
console.log(obj); // {x: 10, y:20}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are dynamic imports&lt;/h3&gt; &lt;p&gt;The dynamic imports using &lt;code&gt;import()&lt;/code&gt; function syntax allows us to load modules on demand by using promises or the async/await syntax. Currently this feature is in &lt;a href="https://github.com/tc39/proposal-dynamic-import"&gt;stage4 proposal&lt;/a&gt;. The main advantage of dynamic imports is reduction of our bundle's sizes, the size/payload response of our requests and overall improvements in the user experience. The syntax of dynamic imports would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import("./Module").then((Module) =&amp;gt; Module.method());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the use cases for dynamic imports&lt;/h3&gt; &lt;p&gt;Below are some of the use cases of using dynamic imports over static imports,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Import a module on-demand or conditionally. For example, if you want to load a polyfill on legacy browser&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (isLegacyBrowser()) {
    import(···)
    .then(···);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Compute the module specifier at runtime. For example, you can use it for internationalization.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import(`messages_${getLocale()}.js`).then(···);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Import a module from within a regular script instead a module.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are typed arrays&lt;/h3&gt; &lt;p&gt;Typed arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 12 Typed array types,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Int8Array: An array of 8-bit signed integers&lt;/li&gt; 
   &lt;li&gt;Uint8Array: An array of 8-bit unsigned integers&lt;/li&gt; 
   &lt;li&gt;Uint8ClampedArray: An array of 8-bit unsigned integers clamped to 0-255&lt;/li&gt; 
   &lt;li&gt;Int16Array: An array of 16-bit signed integers&lt;/li&gt; 
   &lt;li&gt;Uint16Array: An array of 16-bit unsigned integers&lt;/li&gt; 
   &lt;li&gt;Int32Array: An array of 32-bit signed integers&lt;/li&gt; 
   &lt;li&gt;Uint32Array: An array of 32-bit unsigned integers&lt;/li&gt; 
   &lt;li&gt;BigInt64Array: An array of 64-bit signed BigInts&lt;/li&gt; 
   &lt;li&gt;BigUint64Array: An array of 64-bit unsigned BigInts&lt;/li&gt; 
   &lt;li&gt;Float16Array: An array of 16-bit floating point numbers&lt;/li&gt; 
   &lt;li&gt;Float32Array: An array of 32-bit floating point numbers&lt;/li&gt; 
   &lt;li&gt;Float64Array: An array of 64-bit floating point numbers&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, you can create an array of 8-bit signed integers as below&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const a = new Int8Array();
// You can pre-allocate n bytes
const bytes = 1024;
const a = new Int8Array(bytes);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of module loaders&lt;/h3&gt; &lt;p&gt;The module loaders provides the below features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Dynamic loading&lt;/li&gt; 
   &lt;li&gt;State isolation&lt;/li&gt; 
   &lt;li&gt;Global namespace isolation&lt;/li&gt; 
   &lt;li&gt;Compilation hooks&lt;/li&gt; 
   &lt;li&gt;Nested virtualization&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is collation&lt;/h3&gt; &lt;p&gt;Collation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale and aware of Unicode. Let's take comparison and sorting features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Comparison:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var list = ["ä", "a", "z"]; // In German,  "ä" sorts with "a" Whereas in Swedish, "ä" sorts after "z"
var l10nDE = new Intl.Collator("de");
var l10nSV = new Intl.Collator("sv");
console.log(l10nDE.compare("ä", "z") === -1); // true
console.log(l10nSV.compare("ä", "z") === +1); // true
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Sorting:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var list = ["ä", "a", "z"]; // In German,  "ä" sorts with "a" Whereas in Swedish, "ä" sorts after "z"
var l10nDE = new Intl.Collator("de");
var l10nSV = new Intl.Collator("sv");
console.log(list.sort(l10nDE.compare)); // [ "a", "ä", "z" ]
console.log(list.sort(l10nSV.compare)); // [ "a", "z", "ä" ]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is for...of statement&lt;/h3&gt; &lt;p&gt;The for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array, Array-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage of for...of statement on arrays would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let arrayIterable = [10, 20, 30, 40, 50];

for (let value of arrayIterable) {
  value++;
  console.log(value); // 11 21 31 41 51
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below spread operator array&lt;/h3&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;[..."John Resig"];
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the array is ['J', 'o', 'h', 'n', ' ', 'R', 'e', 's', 'i', 'g']&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The string is an iterable type and the spread operator within an array maps every character of an iterable to one element. Hence, each character of a string becomes an element within an Array.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is PostMessage secure&lt;/h3&gt; &lt;p&gt;Yes, postMessages can be considered very secure as long as the programmer/developer is careful about checking the origin and source of an arriving message. But if you try to send/receive a message without verifying its source will create cross-site scripting attacks.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems with postmessage target origin as wildcard&lt;/h3&gt; &lt;p&gt;The second argument of postMessage method specifies which origin is allowed to receive the message. If you use the wildcard “*” as an argument then any origin is allowed to receive the message. In this case, there is no way for the sender window to know if the target window is at the target origin when sending the message. If the target window has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS vulnerabilities.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;targetWindow.postMessage(message, "*");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you avoid receiving postMessages from attackers&lt;/h3&gt; &lt;p&gt;Since the listener listens for any message, an attacker can trick the application by sending a message from the attacker’s origin, which gives an impression that the receiver received the message from the actual sender’s window. You can avoid this issue by validating the origin of the message on the receiver's end using the “message.origin” attribute.&lt;/p&gt; &lt;p&gt;For example, let's check the sender's origin &lt;a href="http://www.some-sender.com"&gt;http://www.some-sender.com&lt;/a&gt; on receiver side &lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/www.some-receiver.com"&gt;www.some-receiver.com&lt;/a&gt;,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//Listener on http://www.some-receiver.com/
window.addEventListener("message", function(message){
    if(/^http://www\.some-sender\.com$/.test(message.origin)){
         console.log('You received the data from valid sender', message.data);
   }
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I avoid using postMessages completely&lt;/h3&gt; &lt;p&gt;You cannot avoid using postMessages completely(or 100%). Even though your application doesn’t use postMessage considering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So your application might be using postMessage without your knowledge.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is postMessages synchronous&lt;/h3&gt; &lt;p&gt;The postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (i.e, IE9+, Firefox, Chrome, Safari).Due to this asynchronous behaviour, we use a callback mechanism when the postMessage is returned.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What paradigm is Javascript&lt;/h3&gt; &lt;p&gt;JavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between internal and external javascript&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Internal JavaScript:&lt;/strong&gt; It is the source code within the script tag. &lt;strong&gt;External JavaScript:&lt;/strong&gt; The source code is stored in an external file(stored with .js extension) and referred with in the tag.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is JavaScript faster than server side script&lt;/h3&gt; &lt;p&gt;Yes, JavaScript is faster than server side scripts. Because JavaScript is a client-side script it does not require any web server’s help for its computation or calculation. So JavaScript is always faster than any server-side script like ASP, PHP, etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the status of a checkbox&lt;/h3&gt; &lt;p&gt;You can apply the &lt;code&gt;checked&lt;/code&gt; property on the selected checkbox in the DOM. If the value is &lt;code&gt;true&lt;/code&gt; it means the checkbox is checked, otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript as below:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;input type="checkbox" id="checkboxname" value="Agree" /&amp;gt;
Agree the conditions
&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(document.getElementById(‘checkboxname’).checked); // true or false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of double tilde operator&lt;/h3&gt; &lt;p&gt;The double tilde operator(~~) is known as double NOT bitwise operator. This operator is a slightly quicker substitute for Math.floor().&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you convert character to ASCII code&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;String.prototype.charCodeAt()&lt;/code&gt; method to convert string characters to ASCII numbers. For example, let's find ASCII code for the first letter of 'ABC' string,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;"ABC".charCodeAt(0); // returns 65
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas &lt;code&gt;String.fromCharCode()&lt;/code&gt; method converts numbers to equal ASCII characters.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;String.fromCharCode(65, 66, 67); // returns 'ABC'
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ArrayBuffer&lt;/h3&gt; &lt;p&gt;An ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let buffer = new ArrayBuffer(16); // create a buffer of length 16
alert(buffer.byteLength); // 16
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To manipulate an ArrayBuffer, we need to use a “view” object.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//Create a DataView referring to the buffer
let view = new DataView(buffer);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below string expression&lt;/h3&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log("Welcome to JS world"[0]);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the above expression is "W". &lt;strong&gt;Explanation:&lt;/strong&gt; The bracket notation with specific index on a string returns the character at a specific location. Hence, it returns the character "W" of the string. Since this is not supported in IE7 and below versions, you may need to use the .charAt() method to get the desired result.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of Error object&lt;/h3&gt; &lt;p&gt;The Error constructor creates an error object and the instances of error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;new Error([message[, fileName[, lineNumber]]])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can throw user defined exceptions or errors using Error object in try...catch block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;try {
  if (withdraw &amp;gt; balance)
    throw new Error("Oops! You don't have enough balance");
} catch (e) {
  console.log(e.name + ": " + e.message);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of EvalError object&lt;/h3&gt; &lt;p&gt;The EvalError object indicates an error regarding the global &lt;code&gt;eval()&lt;/code&gt; function. Even though this exception is not thrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;new EvalError([message[, fileName[, lineNumber]]])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can throw EvalError with in try...catch block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;try {
  throw new EvalError('Eval function error', 'someFile.js', 100);
} catch (e) {
  console.log(e.message, e.name, e.fileName);              // "Eval function error", "EvalError", "someFile.js"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the list of cases error thrown from non-strict mode to strict mode&lt;/h3&gt; &lt;p&gt;When you apply 'use strict'; syntax, some of the below cases will throw a SyntaxError before executing the script&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;When you use Octal syntax&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var n = 022;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;Using &lt;code&gt;with&lt;/code&gt; statement&lt;/li&gt; 
   &lt;li&gt;When you use delete operator on a variable name&lt;/li&gt; 
   &lt;li&gt;Using eval or arguments as variable or function argument name&lt;/li&gt; 
   &lt;li&gt;When you use newly reserved keywords&lt;/li&gt; 
   &lt;li&gt;When you declare a function in a block and access it from outside of the block&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (someCondition) {
  function f() {}
}
f(); // ReferenceError: f is not defined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Hence, the errors from above cases are helpful to avoid errors in development/production environments.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Do all objects have prototypes&lt;/h3&gt; &lt;p&gt;No. All objects have prototypes except two exceptions:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Object.prototype&lt;/strong&gt; itself — This is the base object in the prototype chain, and &lt;strong&gt;its prototype is&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Objects created with&lt;/strong&gt; &lt;code&gt;**Object.create(null)**&lt;/code&gt; — These are deliberately created with &lt;strong&gt;no prototype&lt;/strong&gt;, so they don’t inherit from &lt;code&gt;Object.prototype&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;All other standard objects do have a prototype.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between a parameter and an argument&lt;/h3&gt; &lt;p&gt;Parameter is the variable name of a function definition whereas an argument represents the value given to a function when it is invoked. Let's explain this with a simple function&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function myFunction(parameter1, parameter2, parameter3) {
  console.log(arguments[0]); // "argument1"
  console.log(arguments[1]); // "argument2"
  console.log(arguments[2]); // "argument3"
}
myFunction("argument1", "argument2", "argument3");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of some method in arrays&lt;/h3&gt; &lt;p&gt;The some() method is used to test whether at least one element in the array passes the test implemented by the provided function. The method returns a boolean value. Let's take an example to test for any odd elements,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

var odd = (element) =&amp;gt; element % 2 !== 0;

console.log(array.some(odd)); // true (the odd element exists)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you combine two or more arrays&lt;/h3&gt; &lt;p&gt;The concat() method is used to join two or more arrays by returning a new array containing all the elements. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;array1.concat(array2, array3, ..., arrayX)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's take an example of array's concatenation with veggies and fruits arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var veggies = ["Tomato", "Carrot", "Cabbage"];
var fruits = ["Apple", "Orange", "Pears"];
var veggiesAndFruits = veggies.concat(fruits);
console.log(veggiesAndFruits); // Tomato, Carrot, Cabbage, Apple, Orange, Pears
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Shallow and Deep copy&lt;/h3&gt; &lt;p&gt;There are two ways to copy an object,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Shallow Copy:&lt;/strong&gt; Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var empDetails = {
  name: "John",
  age: 25,
  expertise: "Software Developer",
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to create a duplicate&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var empDetailsShallowCopy = empDetails; //Shallow copying!
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;if we change some property value in the duplicate one like this:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;empDetailsShallowCopy.name = "Johnson";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above statement will also change the name of &lt;code&gt;empDetails&lt;/code&gt;, since we have a shallow copy. That means we're losing the original data as well.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Deep copy:&lt;/strong&gt; A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var empDetails = {
  name: "John",
  age: 25,
  expertise: "Software Developer",
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Create a deep copy by using the properties from the original object into new variable&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var empDetailsDeepCopy = {
  name: empDetails.name,
  age: empDetails.age,
  expertise: empDetails.expertise,
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now if you change &lt;code&gt;empDetailsDeepCopy.name&lt;/code&gt;, it will only affect &lt;code&gt;empDetailsDeepCopy&lt;/code&gt; &amp;amp; not &lt;code&gt;empDetails&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create specific number of copies of a string&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;repeat()&lt;/code&gt; method is used to construct and return a new string which contains the specified number of copies of the string on which it was called, concatenated together. Remember that this method has been added to the ECMAScript 2015 specification. Let's take an example of Hello string to repeat it 4 times,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;"Hello".repeat(4); // 'HelloHelloHelloHello'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you return all matching strings against a regular expression&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;matchAll()&lt;/code&gt; method can be used to return an iterator of all results matching a string against a regular expression. For example, the below example returns an array of matching string results against a regular expression,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let regexp = /Hello(\d?)/g;
let greeting = "Hello1Hello2Hello3";

let greetingList = [...greeting.matchAll(regexp)];

console.log(greetingList[0][0]); //Hello1
console.log(greetingList[1][0]); //Hello2
console.log(greetingList[2][0]); //Hello3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you trim a string at the beginning or ending&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;trim&lt;/code&gt; method of string prototype is used to trim on both sides of a string. But if you want to trim especially at the beginning or ending of the string then you can use &lt;code&gt;trimStart/trimLeft&lt;/code&gt; and &lt;code&gt;trimEnd/trimRight&lt;/code&gt; methods. Let's see an example of these methods on a greeting message,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var greeting = "   Hello, Goodmorning!   ";

console.log(greeting); // "   Hello, Goodmorning!   "
console.log(greeting.trimStart()); // "Hello, Goodmorning!   "
console.log(greeting.trimLeft()); // "Hello, Goodmorning!   "

console.log(greeting.trimEnd()); // "   Hello, Goodmorning!"
console.log(greeting.trimRight()); // "   Hello, Goodmorning!"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below console statement with unary operator&lt;/h3&gt; &lt;p&gt;Let's take console statement with unary operator as given below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(+"Hello"); // NaN
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the above console log statement returns NaN. Because the element is prefixed by the unary operator and the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the value of the statement results in NaN value.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Does javascript uses mixins&lt;/h3&gt; &lt;p&gt;JavaScript does not have built-in support for mixins as a formal language feature. However, developers commonly implement mixins using various patterns to enable code reuse and composition.&lt;/p&gt; &lt;p&gt;A mixin is a way to add reusable functionality from one or more objects into a class or another object, without using classical inheritance. It promotes object composition by combining behaviors or properties from different sources into a single destination.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Mixin Example using Object composition&lt;/h3&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// Define a mixin
const canEat = {
  eat() {
    console.log("Eating...");
  }
};

const canWalk = {
  walk() {
    console.log("Walking...");
  }
};

const canRead = {
  read() {
    console.log("Reading...");
  }
};

// Create a class
class Person {
  constructor(name) {
    this.name = name;
  }
}

// Apply mixins
Object.assign(Person.prototype, canEat, canWalk, canRead);

// Use it
const person = new Person("Sudheer");
person.eat();  // Output: Eating...
person.walk(); // Output: Walking...
person.read(); // Output: Reading...
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Benefits&lt;/h3&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Avoids deep inheritance hierarchies&lt;/li&gt; 
   &lt;li&gt;Encourages composition over inheritance&lt;/li&gt; 
   &lt;li&gt;Promotes reusable and modular code&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Modern JavaScript favors mixin alternatives like composition, delegation, higher-order functions, and class mixins to promote reusable and modular code. Libraries like Lodash offer utilities for object composition, while frameworks like Vue.js provide built-in mixin features to promote reusable and modular code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a thunk function&lt;/h3&gt; &lt;p&gt;A thunk is just a function which delays the evaluation of the value. It doesn’t take any arguments but gives the value whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future. Let's take a synchronous example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const add = (x, y) =&amp;gt; x + y;

const thunk = () =&amp;gt; add(2, 3);

thunk(); // 5
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are asynchronous thunks&lt;/h3&gt; &lt;p&gt;The asynchronous thunks are useful to make network requests. Let's see an example of network requests,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function fetchData(fn) {
  fetch("https://jsonplaceholder.typicode.com/todos/1")
    .then((response) =&amp;gt; response.json())
    .then((json) =&amp;gt; fn(json));
}

const asyncThunk = function () {
  return fetchData(function getData(data) {
    console.log(data);
  });
};

asyncThunk();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;getData&lt;/code&gt; function won't be called immediately but it will be invoked only when the data is available from API endpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux state management library which uses the asynchronous thunks to delay the actions to dispatch.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below function calls&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Code snippet:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const circle = {
  radius: 20,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () =&amp;gt; 2 * Math.PI * this.radius,
};
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(circle.diameter());
console.log(circle.perimeter());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The output is 40 and NaN. Remember that diameter is a regular function, whereas the value of perimeter is an arrow function. The &lt;code&gt;this&lt;/code&gt; keyword of a regular function(i.e, diameter) refers to the surrounding scope which is a class(i.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window object. Since there is no radius property on window objects it returns an undefined value and the multiple of number value returns NaN value.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to remove all line breaks from a string&lt;/h3&gt; &lt;p&gt;The easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we use replace function along with string to replace with, which in our case is an empty string.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function remove_linebreaks( var message ) {
    return message.replace( /[\r\n]+/gm, "" );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above expression, g and m are for global and multiline flags.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between reflow and repaint&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;repaint&lt;/em&gt; occurs when changes are made which affect the visibility of an element, but not its layout. Examples of this include outline, visibility, or background color. A &lt;em&gt;reflow&lt;/em&gt; involves changes that affect the layout of a portion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as user typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM, and changing an element's classes are a few of the things that can trigger reflow. Reflow of an element causes the subsequent reflow of all child and ancestor elements as well as any elements following it in the DOM.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens with negating an array&lt;/h3&gt; &lt;p&gt;Negating an array with &lt;code&gt;!&lt;/code&gt; character will coerce the array into a boolean. Since Arrays are considered to be truthy So negating it will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(![]); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if we add two arrays&lt;/h3&gt; &lt;p&gt;If you add two arrays together, it will convert them both to strings and concatenate them. For example, the result of adding arrays would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(["a"] + ["b"]); // "ab"
console.log([] + []); // ""
console.log(![] + []); // "false", because ![] returns false.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of prepend additive operator on falsy values&lt;/h3&gt; &lt;p&gt;If you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, ""), the falsy value converts to a number value zero. Let's display them on browser console as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(+null); // 0
console.log(+undefined); // NaN
console.log(+false); // 0
console.log(+NaN); // NaN
console.log(+""); // 0
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create self string using special characters&lt;/h3&gt; &lt;p&gt;The self string can be formed with the combination of &lt;code&gt;[]()!+&lt;/code&gt; characters. You need to remember the below conventions to achieve this pattern.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Since Arrays are truthful values, negating the arrays will produce false: ![] === false&lt;/li&gt; 
   &lt;li&gt;As per JavaScript coercion rules, the addition of arrays together will toString them: [] + [] === ""&lt;/li&gt; 
   &lt;li&gt;Prepend an array with + operator will convert an array to false, the negation will make it true and finally converting the result will produce value '1': +(!(+[])) === 1&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;By applying the above rules, we can derive below conditions&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;(![] + [] === "false" + !+[]) === 1;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now the character pattern would be created as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;      s               e               l               f
 ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^

 (![] + [])[3] + (![] + [])[4] + (![] + [])[2] + (![] + [])[0]
 ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^
(![] + [])[+!+[]+!+[]+!+[]] +
(![] + [])[+!+[]+!+[]+!+[]+!+[]] +
(![] + [])[+!+[]+!+[]] +
(![] + [])[+[]]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
(![]+[])[+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]]+(![]+[])[+[]]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you remove falsy values from an array&lt;/h3&gt; &lt;p&gt;You can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy values(0, undefined, null, false and "") from the array.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const myArray = [false, null, 1, 5, undefined];
myArray.filter(Boolean); // [1, 5] // is same as myArray.filter(x =&amp;gt; x);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get unique values of an array&lt;/h3&gt; &lt;p&gt;You can get unique values of an array with the combination of &lt;code&gt;Set&lt;/code&gt; and rest expression/spread(...) syntax.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is destructuring aliases&lt;/h3&gt; &lt;p&gt;Sometimes you would like to have a destructured variable with a different name than the property name. In that case, you'll use a &lt;code&gt;: newName&lt;/code&gt; to specify a name for the variable. This process is called destructuring aliases.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const obj = { x: 1 };
// Grabs obj.x as as { otherName }
const { x: otherName } = obj;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you map the array values without using map method&lt;/h3&gt; &lt;p&gt;You can map the array values without using the &lt;code&gt;map&lt;/code&gt; method by just using the &lt;code&gt;from&lt;/code&gt; method of Array. Let's map city names from Countries array,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const countries = [
  { name: "India", capital: "Delhi" },
  { name: "US", capital: "Washington" },
  { name: "Russia", capital: "Moscow" },
  { name: "Singapore", capital: "Singapore" },
  { name: "China", capital: "Beijing" },
  { name: "France", capital: "Paris" },
];

const cityNames = Array.from(countries, ({ capital }) =&amp;gt; capital);
console.log(cityNames); // ['Delhi, 'Washington', 'Moscow', 'Singapore', 'Beijing', 'Paris']
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you empty an array&lt;/h3&gt; &lt;p&gt;You can empty an array quickly by setting the array length to zero.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let cities = ["Singapore", "Delhi", "London"];
cities.length = 0; // cities becomes []
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you round numbers to certain decimals&lt;/h3&gt; &lt;p&gt;You can round numbers to a certain number of decimals using &lt;code&gt;toFixed&lt;/code&gt; method from native javascript.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let pie = 3.141592653;
pie = pie.toFixed(3); // 3.142
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest way to convert an array to an object&lt;/h3&gt; &lt;p&gt;You can convert an array to an object with the same data using spread(...) operator.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var fruits = ["banana", "apple", "orange", "watermelon"];
var fruitsObject = { ...fruits };
console.log(fruitsObject); // {0: "banana", 1: "apple", 2: "orange", 3: "watermelon"}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create an array with some data&lt;/h3&gt; &lt;p&gt;You can create an array with some data or an array with the same values using &lt;code&gt;fill&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var newArray = new Array(5).fill("0");
console.log(newArray); // ["0", "0", "0", "0", "0"]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the placeholders from console object&lt;/h3&gt; &lt;p&gt;Below are the list of placeholders available from console object,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;%o — It takes an object,&lt;/li&gt; 
   &lt;li&gt;%s — It takes a string,&lt;/li&gt; 
   &lt;li&gt;%d — It is used for a decimal or integer These placeholders can be represented in the console.log as below&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = { name: "John", id: 1, city: "Delhi" };
console.log(
  "Hello %s, your details %o are available in the object form",
  "John",
  user
); // Hello John, your details {name: "John", id: 1, city: "Delhi"} are available in object
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to add CSS to console messages&lt;/h3&gt; &lt;p&gt;Yes, you can apply CSS styles to console messages similar to html text on the web page.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(
  "%c The text has blue color, with large font and red background",
  "color: blue; font-size: x-large; background: red"
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The text will be displayed as below, &lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-css.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All CSS styles can be applied to console messages.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of dir method of console object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;console.dir()&lt;/code&gt; is used to display an interactive list of the properties of the specified JavaScript object as JSON.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = { name: "John", id: 1, city: "Delhi" };
console.dir(user);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The user object displayed in JSON representation &lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-dir.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to debug HTML elements in console&lt;/h3&gt; &lt;p&gt;Yes, it is possible to get and debug HTML elements in the console just like inspecting elements.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const element = document.getElementsByTagName("body")[0];
console.log(element);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It prints the HTML element in the console,&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-html.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you display data in a tabular format using console object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;console.table()&lt;/code&gt; is used to display data in the console in a tabular format to visualize complex arrays or objects.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const users = [
  { name: "John", id: 1, city: "Delhi" },
  { name: "Max", id: 2, city: "London" },
  { name: "Rod", id: 3, city: "Paris" },
];
console.table(users);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The data visualized in a table format,&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-table.png" alt="Screenshot" /&gt; &lt;strong&gt;Not:&lt;/strong&gt; Remember that &lt;code&gt;console.table()&lt;/code&gt; is not supported in IE.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you verify that an argument is a Number or not&lt;/h3&gt; &lt;p&gt;The combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function isNumber(n) {
  return !isNaN(parseFloat(n)) &amp;amp;&amp;amp; isFinite(n);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create copy to clipboard button&lt;/h3&gt; &lt;p&gt;You need to select the content(using .select() method) of the input element and execute the copy command with execCommand (i.e, execCommand('copy')). You can also execute other system commands like cut and paste.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;document.querySelector("#copy-button").onclick = function () {
  // Select the content
  document.querySelector("#copy-input").select();
  // Copy to the clipboard
  document.execCommand("copy");
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the shortcut to get timestamp&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;new Date().getTime()&lt;/code&gt; to get the current timestamp. There is an alternative shortcut to get the value.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(+new Date());
console.log(Date.now());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you flattening multi dimensional arrays&lt;/h3&gt; &lt;p&gt;Flattening bi-dimensional arrays is trivial with Spread operator.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];
const flattenArr = [].concat(...biDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can make it work with multi-dimensional arrays by recursive calls,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function flattenMultiArray(arr) {
  const flattened = [].concat(...arr);
  return flattened.some((item) =&amp;gt; Array.isArray(item))
    ? flattenMultiArray(flattened)
    : flattened;
}
const multiDimensionalArr = [
  11,
  [22, 33],
  [44, [55, 66, [77, [88]], 99]],
];
const flatArr = flattenMultiArray(multiDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Also you can use the &lt;code&gt;flat&lt;/code&gt; method of Array.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const arr = [1, [2, 3], 4, 5, [6, 7]];
const fllattenArr = arr.flat(); // [1, 2, 3, 4, 5, 6, 7]

// And for multiDimensional arrays
const multiDimensionalArr = [
  11,
  [22, 33],
  [44, [55, 66, [77, [88]], 99]],
];
const oneStepFlat = multiDimensionalArr.flat(1); // [11, 22, 33, 44, [55, 66, [77, [88]], 99]]
const towStep = multiDimensionalArr.flat(2); // [11, 22, 33, 44, 55, 66, [77, [88]], 99]
const fullyFlatArray = multiDimensionalArr.flat(Infinity); // [11, 22, 33, 44, 55, 66, 77, 88, 99]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest multi condition checking&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;indexOf&lt;/code&gt; to compare input with multiple values instead of checking each value as one condition.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// Verbose approach
if (
  input === "first" ||
  input === 1 ||
  input === "second" ||
  input === 2
) {
  someFunction();
}
// Shortcut
if (["first", 1, "second", 2].indexOf(input) !== -1) {
  someFunction();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you capture browser back button&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;beforeunload&lt;/code&gt; event is triggered when the window, the document and its resources are about to be unloaded. This event is helpful to warn users about losing the current data and detect back button event.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;window.addEventListener("beforeunload", () =&amp;gt; {
  console.log("Clicked browser back button");
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use &lt;code&gt;popstate&lt;/code&gt; event to detect the browser back button. &lt;strong&gt;Note:&lt;/strong&gt; The history entry has been activated using &lt;code&gt;history.pushState&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;window.addEventListener("popstate", () =&amp;gt; {
  console.log("Clicked browser back button");
  box.style.backgroundColor = "white";
});

const box = document.getElementById("div");

box.addEventListener("click", () =&amp;gt; {
  box.style.backgroundColor = "blue";
  window.history.pushState({}, null, null);
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;In the preceeding code, When the box element clicked, its background color appears in blue color and changed to while color upon clicking the browser back button using `popstate` event handler. The `state` property of `popstate` contains the copy of history entry's state object.

 **[⬆ Back to Top](#table-of-contents)**
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="382"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you disable right click in the web page&lt;/h3&gt; &lt;p&gt;The right click on the page can be disabled by returning false from the &lt;code&gt;oncontextmenu&lt;/code&gt; attribute on the body element.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;body oncontextmenu="return false;"&amp;gt;&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are wrapper objects&lt;/h3&gt; &lt;p&gt;Primitive Values like string,number and boolean don't have properties and methods but they are temporarily converted or coerced to an object(Wrapper object) when you try to perform actions on them. For example, if you apply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the string.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let name = "john";

console.log(name.toUpperCase()); // Behind the scenes treated as console.log(new String(name).toUpperCase());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;i.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are String,Number,Boolean,Symbol and BigInt.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is AJAX&lt;/h3&gt; &lt;p&gt;AJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies(HTML, CSS, JavaScript, XMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from the server without reloading the web page.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to deal with Asynchronous Code&lt;/h3&gt; &lt;p&gt;Below are the list of different ways to deal with Asynchronous code.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Callbacks&lt;/li&gt; 
   &lt;li&gt;Promises&lt;/li&gt; 
   &lt;li&gt;Async/await&lt;/li&gt; 
   &lt;li&gt;Third-party libraries such as async.js,bluebird etc&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to cancel a fetch request&lt;/h3&gt; &lt;p&gt;Until a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the new &lt;code&gt;AbortController&lt;/code&gt; from js specification allows you to use a signal to abort one or multiple fetch calls. The basic flow of cancelling a fetch request would be as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Create an &lt;code&gt;AbortController&lt;/code&gt; instance&lt;/li&gt; 
   &lt;li&gt;Get the signal property of an instance and pass the signal as a fetch option for signal&lt;/li&gt; 
   &lt;li&gt;Call the AbortController's abort property to cancel all fetches that use that signal For example, passing the same signal to multiple fetch calls will cancel all requests with that signal,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const controller = new AbortController();
const { signal } = controller;

fetch("http://localhost:8000", { signal })
  .then((response) =&amp;gt; {
    console.log(`Request 1 is complete!`);
  })
  .catch((e) =&amp;gt; {
    if (e.name === "AbortError") {
      // We know it's been canceled!
    }
  });

fetch("http://localhost:8000", { signal })
  .then((response) =&amp;gt; {
    console.log(`Request 2 is complete!`);
  })
  .catch((e) =&amp;gt; {
    if (e.name === "AbortError") {
      // We know it's been canceled!
    }
  });

// Wait 2 seconds to abort both requests
setTimeout(() =&amp;gt; controller.abort(), 2000);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is web speech API&lt;/h3&gt; &lt;p&gt;Web speech API is used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps). This API was introduced by W3C Community in the year 2012. It has two main parts:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;SpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text):&lt;/strong&gt; It provides the ability to recognize voice context from an audio input and respond accordingly. This is accessed by the &lt;code&gt;SpeechRecognition&lt;/code&gt; interface. The example below shows how to use this API to get text from speech,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;window.SpeechRecognition =
  window.webkitSpeechRecognition || window.SpeechRecognition; // webkitSpeechRecognition for Chrome and SpeechRecognition for FF
const recognition = new window.SpeechRecognition();
recognition.onresult = (event) =&amp;gt; {
  // SpeechRecognitionEvent type
  const speechToText = event.results[0][0].transcript;
  console.log(speechToText);
};
recognition.start();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this API, browser is going to ask you for permission to use your microphone&lt;/p&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;SpeechSynthesis (Text-to-Speech):&lt;/strong&gt; It provides the ability to recognize voice context from an audio input and respond. This is accessed by the &lt;code&gt;SpeechSynthesis&lt;/code&gt; interface. For example, the below code is used to get voice/speech from text,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if ("speechSynthesis" in window) {
  var speech = new SpeechSynthesisUtterance("Hello World!");
  speech.lang = "en-US";
  window.speechSynthesis.speak(speech);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above examples can be tested on chrome(33+) browser's developer console. &lt;strong&gt;Note:&lt;/strong&gt; This API is still a working draft and only available in Chrome and Firefox browsers(ofcourse Chrome only implemented the specification)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is minimum timeout throttling&lt;/h3&gt; &lt;p&gt;Both browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means even though setting a delay of 0ms will not happen instantaneously. &lt;strong&gt;Browsers:&lt;/strong&gt; They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to callback nesting(certain depth) or after a certain number of successive intervals. Note: The older browsers have a minimum delay of 10ms. &lt;strong&gt;Nodejs:&lt;/strong&gt; They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or less than 1. The best example to explain this timeout throttling behavior is the order of below code snippet.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function runMeFirst() {
  console.log("My script is initialized");
}
setTimeout(runMeFirst, 0);
console.log("Script loaded");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and the output would be in&lt;/p&gt; &lt;pre&gt;&lt;code class="language-cmd"&gt;Script loaded
My script is initialized
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don't use &lt;code&gt;setTimeout&lt;/code&gt;, the order of logs will be sequential.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function runMeFirst() {
  console.log("My script is initialized");
}
runMeFirst();
console.log("Script loaded");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and the output is,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-cmd"&gt;My script is initialized
Script loaded
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you implement zero timeout in modern browsers&lt;/h3&gt; &lt;p&gt;You can't use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you can use window.postMessage() to achieve this behavior.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are tasks in event loop&lt;/h3&gt; &lt;p&gt;A task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are scheduled on a task queue. Below are the list of use cases to add tasks to the task queue,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;When a new javascript program is executed directly from console or running by the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element, the task will be added to the task queue.&lt;/li&gt; 
   &lt;li&gt;When an event fires, the event callback added to task queue&lt;/li&gt; 
   &lt;li&gt;When a setTimeout or setInterval is reached, the corresponding callback added to task queue&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is microtask&lt;/h3&gt; &lt;p&gt;A microtask is a type of JavaScript callback that is scheduled to run immediately after the currently executing script and before the next event loop tick. Microtasks are executed after the current task completes and before any new tasks (macrotasks) are run. This ensures a fast and predictable update cycle.&lt;/p&gt; &lt;p&gt;Common sources of microtasks stored in the microtask queue include:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Promises:&lt;/strong&gt; When a Promise is resolved or rejected, its &lt;code&gt;.then()&lt;/code&gt;, &lt;code&gt;.catch()&lt;/code&gt;, and &lt;code&gt;.finally()&lt;/code&gt; callbacks are placed in the microtask queue.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Promise.resolve().then(() =&amp;gt; {
 console.log('Microtask from a Promise');
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;queueMicrotask():&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;A method that explicitly schedules a function to be run in the microtask queue.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt; queueMicrotask(() =&amp;gt; {
    console.log('Microtask from  queueMicrotask');
  });
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;MutationObserver callbacks:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Observers changes in the DOM and triggers a callback as a microtask.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;   const observer = new MutationObserver(() =&amp;gt; {
     console.log('Microtask from MutationObserver');
   })
   observer.observe(document.body, {childList: true});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;await:&lt;/strong&gt;&lt;br /&gt; Await internally uses Promises, so the code after &lt;code&gt;await&lt;/code&gt; is scheduled as a microtask.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt; async function asyncFunction() {
   await null;
   console.log('Microtask from Await'); // Schedule this code as microtask
 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All of these microtasks are processed in the same turn of the event loop.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are different event loops&lt;/h3&gt; &lt;p&gt;In JavaScript, there are multiple event loops that can be used depending on the context of your application. The most common event loops are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The Browser Event Loop&lt;/li&gt; 
   &lt;li&gt;The Node.js Event Loop&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Browser Event Loop: The Browser Event Loop is used in client-side JavaScript applications and is responsible for handling events that occur within the browser environment, such as user interactions (clicks, keypresses, etc.), HTTP requests, and other asynchronous actions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The Node.js Event Loop is used in server-side JavaScript applications and is responsible for handling events that occur within the Node.js runtime environment, such as file I/O, network I/O, and other asynchronous actions.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="393"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of queueMicrotask&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;queueMicrotask&lt;/code&gt; function is used to schedule a microtask, which is a function that will be executed asynchronously in the microtask queue. The purpose of &lt;code&gt;queueMicrotask&lt;/code&gt; is to ensure that a function is executed after the current task has finished, but before the browser performs any rendering or handles user events.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log("Start"); //1

queueMicrotask(() =&amp;gt; {
  console.log("Inside microtask"); // 3
});

console.log("End"); //2
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By using queueMicrotask, you can ensure that certain tasks or callbacks are executed at the earliest opportunity during the JavaScript event loop, making it useful for performing work that needs to be done asynchronously but with higher priority than regular &lt;code&gt;setTimeout&lt;/code&gt; or &lt;code&gt;setInterval&lt;/code&gt; callbacks.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you use javascript libraries in typescript file&lt;/h3&gt; &lt;p&gt;It is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still want to use libraries or frameworks in your TypeScript files without getting compilation errors, the only solution is &lt;code&gt;declare&lt;/code&gt; keyword along with a variable declaration. For example, let's imagine you have a library called &lt;code&gt;customLibrary&lt;/code&gt; that doesn’t have a TypeScript declaration and have a namespace called &lt;code&gt;customLibrary&lt;/code&gt; in the global namespace. You can use this library in typescript code as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;declare var customLibrary;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the runtime, typescript will provide the type to the &lt;code&gt;customLibrary&lt;/code&gt; variable as &lt;code&gt;any&lt;/code&gt; type. The another alternative without using declare keyword is below&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var customLibrary: any;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between promises and observables&lt;/h3&gt; &lt;p&gt;Some of the major difference in a tabular form&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Promises&lt;/th&gt; 
     &lt;th&gt;Observables&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Emits only a single value at a time&lt;/td&gt; 
     &lt;td&gt;Emits multiple values over a period of time(stream of values ranging from 0 to multiple)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Eager in nature; they are going to be called immediately&lt;/td&gt; 
     &lt;td&gt;Lazy in nature; they require subscription to be invoked&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Promise is always asynchronous even though it resolved immediately&lt;/td&gt; 
     &lt;td&gt;Observable can be either synchronous or asynchronous&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Doesn't provide any operators&lt;/td&gt; 
     &lt;td&gt;Provides operators such as map, forEach, filter, reduce, retry, and retryWhen etc&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Cannot be canceled&lt;/td&gt; 
     &lt;td&gt;Canceled by using unsubscribe() method&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is heap&lt;/h3&gt; &lt;p&gt;Heap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of JS runtime. Whenever runtime comes across variables and function declarations in the code it stores them in the Heap.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/heap.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event table&lt;/h3&gt; &lt;p&gt;Event Table is a data structure that stores and keeps track of all the events which will be executed asynchronously like after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout function or invoke async operation, it is added to the Event Table. It doesn't not execute functions on it’s own. The main purpose of the event table is to keep track of events and send them to the Event Queue as shown in the below diagram.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/event-table.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a microTask queue&lt;/h3&gt; &lt;p&gt;Microtask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback queue. The microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running for a long time then it leads to visual degradation.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between shim and polyfill&lt;/h3&gt; &lt;p&gt;A shim is a library that brings a new API to an older environment, using only the means of that environment. It isn't necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on older browsers (mainly pre IE9). Whereas polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. In a simple sentence, a polyfill is a shim for a browser API.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect primitive or non primitive value type&lt;/h3&gt; &lt;p&gt;In JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas non-primitive types include the Objects. But you can easily identify them with the below function,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var myPrimitive = 30;
var myNonPrimitive = {};
function isPrimitive(val) {
  return Object(val) !== val;
}

isPrimitive(myPrimitive);
isPrimitive(myNonPrimitive);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If the value is a non-primitive data type (an object), the Object constructor will give the same object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is babel&lt;/h3&gt; &lt;p&gt;Babel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Some of the main features are listed below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Transform syntax&lt;/li&gt; 
   &lt;li&gt;Polyfill features that are missing in your target environment (using @babel/polyfill)&lt;/li&gt; 
   &lt;li&gt;Source code transformations (or codemods)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is Node.js completely single threaded&lt;/h3&gt; &lt;p&gt;Node is a single thread, but some of the functions included in the Node.js standard library(e.g, fs module functions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed and performance of a program.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common use cases of observables&lt;/h3&gt; &lt;p&gt;Some of the most common use cases of observables are web sockets with push notifications, user input changes, repeating intervals, etc&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is RxJS&lt;/h3&gt; &lt;p&gt;RxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that makes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and working with observables.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Function constructor and function declaration&lt;/h3&gt; &lt;p&gt;The functions which are created with &lt;code&gt;Function constructor&lt;/code&gt; do not create closures to their creation contexts but they are always created in the global scope. i.e, the function can access its own local variables and global scope variables only. Whereas function declarations can access outer function variables(closures) too.&lt;/p&gt; &lt;p&gt;Let's see this difference with an example,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Function Constructor:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var a = 100;
function createFunction() {
  var a = 200;
  return new Function("return a;");
}
console.log(createFunction()()); // 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Function declaration:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var a = 100;
function createFunction() {
  var a = 200;
  return function func() {
    return a;
  };
}
console.log(createFunction()()); // 200
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Short circuit condition&lt;/h3&gt; &lt;p&gt;Short circuit conditions are meant for condensed way of writing simple if statements. Let's demonstrate the scenario using an example. If you would like to login to a portal with an authentication condition, the expression would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (authenticate) {
  loginToPorta();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since the javascript logical operators evaluated from left to right, the above expression can be simplified using &amp;amp;&amp;amp; logical operator&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;authenticate &amp;amp;&amp;amp; loginToPorta();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest way to resize an array&lt;/h3&gt; &lt;p&gt;The length property of an array is useful to resize or empty an array quickly. Let's apply length property on number array to resize the number of elements from 5 to 2,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var array = [1, 2, 3, 4, 5];
console.log(array.length); // 5

array.length = 2;
console.log(array.length); // 2
console.log(array); // [1,2]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and the array can be emptied too&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var array = [1, 2, 3, 4, 5];
array.length = 0;
console.log(array.length); // 0
console.log(array); // []
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an observable&lt;/h3&gt; &lt;p&gt;An Observable is basically a function that can return a stream of values either synchronously or asynchronously to an observer over time. The consumer can get the value by calling &lt;code&gt;subscribe()&lt;/code&gt; method. Let's look at a simple example of an Observable&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { Observable } from "rxjs";

const observable = new Observable((observer) =&amp;gt; {
  setTimeout(() =&amp;gt; {
    observer.next("Message from a Observable!");
  }, 3000);
});

observable.subscribe((value) =&amp;gt; console.log(value));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/observables.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Observables are not part of the JavaScript language yet but they are being proposed to be added to the language&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between function and class declarations&lt;/h3&gt; &lt;p&gt;The main difference between function declarations and class declarations is &lt;code&gt;hoisting&lt;/code&gt;. The function declarations are hoisted but not class declarations.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Classes:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = new User(); // ReferenceError

class User {}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Constructor Function:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = new User(); // No error

function User() {}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an async function&lt;/h3&gt; &lt;p&gt;An async function is a function declared with the &lt;code&gt;async&lt;/code&gt; keyword which enables asynchronous, promise-based behavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or more &lt;code&gt;await&lt;/code&gt; expressions.&lt;/p&gt; &lt;p&gt;Let's take a below async function example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;async function logger() {
  let data = await fetch("http://someapi.com/users"); // pause until fetch returns
  console.log(data);
}
logger();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is basically syntax sugar over ES2015 promises and generators.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you prevent promises swallowing errors&lt;/h3&gt; &lt;p&gt;While using asynchronous code, JavaScript’s ES6 promises can make your life a lot easier without having callback pyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing errors by default.&lt;/p&gt; &lt;p&gt;Let's say you expect to print an error to the console for all the below cases,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Promise.resolve("promised value").then(function () {
  throw new Error("error");
});

Promise.reject("error value").catch(function () {
  throw new Error("error");
});

new Promise(function (resolve, reject) {
  throw new Error("error");
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But there are many modern JavaScript environments that won't print any errors. You can fix this problem in different ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add catch block at the end of each chain:&lt;/strong&gt; You can add catch block to the end of each of your promise chains&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Promise.resolve("promised value")
  .then(function () {
    throw new Error("error");
  })
  .catch(function (error) {
    console.error(error.stack);
  });
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But it is quite difficult to type for each promise chain and verbose too.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add done method:&lt;/strong&gt; You can replace first solution's then and catch blocks with done method&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Promise.resolve("promised value").done(function () {
  throw new Error("error");
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's say you want to fetch data using HTTP and later perform processing on the resulting data asynchronously. You can write &lt;code&gt;done&lt;/code&gt; block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;getDataFromHttp()
  .then(function (result) {
    return processDataAsync(result);
  })
  .done(function (processed) {
    displayData(processed);
  });
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In future, if the processing library API changed to synchronous then you can remove &lt;code&gt;done&lt;/code&gt; block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;getDataFromHttp().then(function (result) {
  return displayData(processDataAsync(result));
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and then you forgot to add &lt;code&gt;done&lt;/code&gt; block to &lt;code&gt;then&lt;/code&gt; block leads to silent errors.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extend ES6 Promises by Bluebird:&lt;/strong&gt; Bluebird extends the ES6 Promises API to avoid the issue in the second solution. This library has a “default” onRejection handler which will print all errors from rejected Promises to stderr. After installation, you can process unhandled rejections&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Promise.onPossiblyUnhandledRejection(function (error) {
  throw error;
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and discard a rejection, just handle it with an empty catch&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Promise.reject("error value").catch(function () {});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is deno&lt;/h3&gt; &lt;p&gt;Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the Rust programming language. It solves the inherent problems of Node.Js and has been officially released in May 2018. Unlike Node.JS, by default Deno executes the code in a sandbox, which means that runtime has no access to below areas:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The file system&lt;/li&gt; 
   &lt;li&gt;The network&lt;/li&gt; 
   &lt;li&gt;Execution of other scripts&lt;/li&gt; 
   &lt;li&gt;The environment variables&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make an object iterable in javascript&lt;/h3&gt; &lt;p&gt;By default, plain objects are not iterable. But you can make the object iterable by defining a &lt;code&gt;Symbol.iterator&lt;/code&gt; property on it.&lt;/p&gt; &lt;p&gt;Let's demonstrate this with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const collection = {
  one: 1,
  two: 2,
  three: 3,
  [Symbol.iterator]() {
    const values = Object.keys(this);
    let i = 0;
    return {
      next: () =&amp;gt; {
        return {
          value: this[values[i++]],
          done: i &amp;gt; values.length,
        };
      },
    };
  },
};

const iterator = collection[Symbol.iterator]();

console.log(iterator.next()); // → {value: 1, done: false}
console.log(iterator.next()); // → {value: 2, done: false}
console.log(iterator.next()); // → {value: 3, done: false}
console.log(iterator.next()); // → {value: undefined, done: true}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above process can be simplified using a generator function,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const collection = {
  one: 1,
  two: 2,
  three: 3,
  [Symbol.iterator]: function* () {
    for (let key in this) {
      yield this[key];
    }
  },
};
const iterator = collection[Symbol.iterator]();
console.log(iterator.next()); // {value: 1, done: false}
console.log(iterator.next()); // {value: 2, done: false}
console.log(iterator.next()); // {value: 3, done: false}
console.log(iterator.next()); // {value: undefined, done: true}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Proper Tail Call&lt;/h3&gt; &lt;p&gt;First, we should know about tail call before talking about "Proper Tail Call". A tail call is a subroutine or function call performed as the final action of a calling function. Whereas &lt;strong&gt;Proper tail call(PTC)&lt;/strong&gt; is a technique where the program or code will not create additional stack frames for a recursion when the function call is a tail call.&lt;/p&gt; &lt;p&gt;For example, the below classic or head recursion of factorial function relies on stack for each step. Each step need to be processed upto &lt;code&gt;n * factorial(n - 1)&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function factorial(n) {
  if (n === 0) {
    return 1;
  }
  return n * factorial(n - 1);
}
console.log(factorial(5)); //120
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion without relying on the stack.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function factorial(n, acc = 1) {
  if (n === 0) {
    return acc;
  }
  return factorial(n - 1, n * acc);
}
console.log(factorial(5)); //120
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument without using stack memory on recursive calls.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check an object is a promise or not&lt;/h3&gt; &lt;p&gt;If you don't know if a value is a promise or not, wrapping the value as &lt;code&gt;Promise.resolve(value)&lt;/code&gt; which returns a promise&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function isPromise(object) {
  if (Promise &amp;amp;&amp;amp; Promise.resolve) {
    return Promise.resolve(object) == object;
  } else {
    throw "Promise not supported in your environment";
  }
}

var i = 1;
var promise = new Promise(function (resolve, reject) {
  resolve();
});

console.log(isPromise(i)); // false
console.log(isPromise(promise)); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Another way is to check for &lt;code&gt;.then()&lt;/code&gt; handler type&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function isPromise(value) {
  return Boolean(value &amp;amp;&amp;amp; typeof value.then === "function");
}
var i = 1;
var promise = new Promise(function (resolve, reject) {
  resolve();
});

console.log(isPromise(i)); // false
console.log(isPromise(promise)); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to detect if a function is called as constructor&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;new.target&lt;/code&gt; pseudo-property to detect whether a function was called as a constructor(using the new operator) or as a regular function call.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If a constructor or function invoked using the new operator, new.target returns a reference to the constructor or function.&lt;/li&gt; 
   &lt;li&gt;For function calls, new.target is undefined.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Myfunc() {
  if (new.target) {
    console.log("called with new");
  } else {
    console.log("not called with new");
  }
}

new Myfunc(); // called with new
Myfunc(); // not called with new
Myfunc.call({}); // not called with new
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between arguments object and rest parameter&lt;/h3&gt; &lt;p&gt;There are three main differences between arguments object and rest parameters&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The arguments object is an array-like but not an array. Whereas the rest parameters are array instances.&lt;/li&gt; 
   &lt;li&gt;The arguments object does not support methods such as sort, map, forEach, or pop. Whereas these methods can be used in rest parameters.&lt;/li&gt; 
   &lt;li&gt;The rest parameters are only the ones that haven’t been given a separate name, while the arguments object contains all arguments passed to the function&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between spread operator and rest parameter&lt;/h3&gt; &lt;p&gt;Rest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. i.e, Rest parameter is opposite to the spread operator.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different kinds of generators&lt;/h3&gt; &lt;p&gt;There are five kinds of generators,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator function declaration:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function* myGenFunc() {
  yield 1;
  yield 2;
  yield 3;
}
const genObj = myGenFunc();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator function expressions:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const myGenFunc = function* () {
  yield 1;
  yield 2;
  yield 3;
};
const genObj = myGenFunc();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator method definitions in object literals:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const myObj = {
  *myGeneratorMethod() {
    yield 1;
    yield 2;
    yield 3;
  },
};
const genObj = myObj.myGeneratorMethod();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator method definitions in class:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyClass {
  *myGeneratorMethod() {
    yield 1;
    yield 2;
    yield 3;
  }
}
const myObject = new MyClass();
const genObj = myObject.myGeneratorMethod();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator as a computed property:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const SomeObj = {
  *[Symbol.iterator]() {
    yield 1;
    yield 2;
    yield 3;
  },
};

console.log(Array.from(SomeObj)); // [ 1, 2, 3 ]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the built-in iterables&lt;/h3&gt; &lt;p&gt;Below are the list of built-in iterables in javascript,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Arrays and TypedArrays&lt;/li&gt; 
   &lt;li&gt;Strings: Iterate over each character or Unicode code-points&lt;/li&gt; 
   &lt;li&gt;Maps: iterate over its key-value pairs&lt;/li&gt; 
   &lt;li&gt;Sets: iterates over their elements&lt;/li&gt; 
   &lt;li&gt;arguments: An array-like special variable in functions&lt;/li&gt; 
   &lt;li&gt;DOM collection such as NodeList&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between for...of and for...in statements&lt;/h3&gt; &lt;p&gt;Both for...in and for...of statements iterate over js data structures. The only difference is over what they iterate:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;for..in iterates over all enumerable property keys of an object&lt;/li&gt; 
   &lt;li&gt;for..of iterates over the values of an iterable object.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let's explain this difference with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let arr = ["a", "b", "c"];

arr.newProp = "newVlue";

// key are the property keys
for (let key in arr) {
  console.log(key); // 0, 1, 2 &amp;amp; newProp
}

// value are the property values
for (let value of arr) {
  console.log(value); // a, b, c
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since for..in loop iterates over the keys of the object, the first loop logs 0, 1, 2 and newProp while iterating over the array object. The for..of loop iterates over the values of a arr data structure and logs a, b, c in the console.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define instance and non-instance properties&lt;/h3&gt; &lt;p&gt;The Instance properties must be defined inside of class methods. For example, name and age properties defined inside constructor as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But Static(class) and prototype data properties must be defined outside of the ClassBody declaration. Let's assign the age value for Person class as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Person.staticAge = 30;
Person.prototype.prototypeAge = 40;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between isNaN and Number.isNaN?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;isNaN&lt;/strong&gt;: The global function &lt;code&gt;isNaN&lt;/code&gt; converts the argument to a Number and returns true if the resulting value is NaN.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Number.isNaN&lt;/strong&gt;: This method does not convert the argument. But it returns true when the type is a Number and value is NaN.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let's see the difference with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;isNaN(‘hello’);   // true
Number.isNaN('hello'); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to invoke an IIFE without any extra brackets?&lt;/h3&gt; &lt;p&gt;Immediately Invoked Function Expressions(IIFE) requires a pair of parenthesis to wrap the function which contains set of statements.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;(function (dt) {
  console.log(dt.toLocaleTimeString());
})(new Date());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since both IIFE and void operator discard the result of an expression, you can avoid the extra brackets using &lt;code&gt;void operator&lt;/code&gt; for IIFE as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;void (function (dt) {
  console.log(dt.toLocaleTimeString());
})(new Date());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is that possible to use expressions in switch cases?&lt;/h3&gt; &lt;p&gt;You might have seen expressions used in switch condition but it is also possible to use for switch cases by assigning true value for the switch condition. Let's see the weather condition based on temperature as an example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const weather = (function getWeather(temp) {
  switch (true) {
    case temp &amp;lt; 0:
      return "freezing";
    case temp &amp;lt; 10:
      return "cold";
    case temp &amp;lt; 24:
      return "cool";
    default:
      return "unknown";
  }
})(10);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest way to ignore promise errors?&lt;/h3&gt; &lt;p&gt;The easiest and safest way to ignore promise errors is void that error. This approach is ESLint friendly too.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;await promise.catch((e) =&amp;gt; void e);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do style the console output using CSS?&lt;/h3&gt; &lt;p&gt;You can add CSS styling to the console output using the CSS format content specifier %c. The console string message can be appended after the specifier and CSS style in another argument. Let's print the red color text using console.log and CSS specifier as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;console.log("%cThis is a red text", "color:red");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is also possible to add more styles for the content. For example, the font-size can be modified for the above text&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;console.log(
  "%cThis is a red text with bigger font",
  "color:red; font-size:20px"
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is nullish coalescing operator (??)?&lt;/h3&gt; &lt;p&gt;It is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand. This can be contrasted with the logical OR (||) operator, which returns the right-hand side operand if the left operand is any falsy value, not only null or undefined.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;console.log(null ?? true); // true
console.log(false ?? true); // false
console.log(undefined ?? true); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you group and nest console output?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;console.group()&lt;/code&gt; can be used to group related log messages to be able to easily read the logs and use console.groupEnd()to close the group. Along with this, you can also nest groups which allows to output message in hierarchical manner.&lt;/p&gt; &lt;p&gt;For example, if you’re logging a user’s details:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;console.group("User Details");
console.log("name: Sudheer Jonna");
console.log("job: Software Developer");

// Nested Group
console.group("Address");
console.log("Street: Commonwealth");
console.log("City: Los Angeles");
console.log("State: California");

// Close nested group
console.groupEnd();

// Close outer group
console.groupEnd();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use &lt;code&gt;console.groupCollapsed()&lt;/code&gt; instead of &lt;code&gt;console.group()&lt;/code&gt; if you want the groups to be collapsed by default.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between dense and sparse arrays?&lt;/h3&gt; &lt;p&gt;An array contains items at each index starting from first(0) to last(array.length - 1) is called as Dense array. Whereas if at least one item is missing at any index, the array is called as sparse.&lt;/p&gt; &lt;p&gt;Let's see the below two kind of arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const avengers = ["Ironman", "Hulk", "CaptainAmerica"];
console.log(avengers[0]); // 'Ironman'
console.log(avengers[1]); // 'Hulk'
console.log(avengers[2]); // 'CaptainAmerica'
console.log(avengers.length); // 3

const justiceLeague = ["Superman", "Aquaman", , "Batman"];
console.log(justiceLeague[0]); // 'Superman'
console.log(justiceLeague[1]); // 'Aquaman'
console.log(justiceLeague[2]); // undefined
console.log(justiceLeague[3]); // 'Batman'
console.log(justiceLeague.length); // 4
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to create sparse arrays?&lt;/h3&gt; &lt;p&gt;There are 4 different ways to create sparse arrays in JavaScript&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Array literal:&lt;/strong&gt; Omit a value when using the array literal &lt;pre&gt;&lt;code class="language-js"&gt;const justiceLeague = ["Superman", "Aquaman", , "Batman"];
console.log(justiceLeague); // ['Superman', 'Aquaman', empty ,'Batman']
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Array() constructor:&lt;/strong&gt; Invoking Array(length) or new Array(length) &lt;pre&gt;&lt;code class="language-js"&gt;const array = Array(3);
console.log(array); // [empty, empty ,empty]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Delete operator:&lt;/strong&gt; Using delete array[index] operator on the array &lt;pre&gt;&lt;code class="language-js"&gt;const justiceLeague = ["Superman", "Aquaman", "Batman"];
delete justiceLeague[1];
console.log(justiceLeague); // ['Superman', empty, ,'Batman']
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Increase length property:&lt;/strong&gt; Increasing length property of an array &lt;pre&gt;&lt;code class="language-js"&gt;const justiceLeague = ["Superman", "Aquaman", "Batman"];
justiceLeague.length = 5;
console.log(justiceLeague); // ['Superman', 'Aquaman', 'Batman', empty, empty]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between setTimeout, setImmediate and process.nextTick?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Set Timeout:&lt;/strong&gt; setTimeout() is to schedule execution of a one-time callback after delay milliseconds.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Set Immediate:&lt;/strong&gt; The setImmediate function is used to execute a function right after the current event loop finishes.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Process NextTick:&lt;/strong&gt; If process.nextTick() is called in a given phase, all the callbacks passed to process.nextTick() will be resolved before the event loop continues. This will block the event loop and create I/O Starvation if process.nextTick() is called recursively.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you reverse an array without modifying original array?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;reverse()&lt;/code&gt; method reverses the order of the elements in an array but it mutates the original array. Let's take a simple example to demonistrate this case,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const originalArray = [1, 2, 3, 4, 5];
const newArray = originalArray.reverse();

console.log(newArray); // [ 5, 4, 3, 2, 1]
console.log(originalArray); // [ 5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There are few solutions that won't mutate the original array. Let's take a look.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using slice and reverse methods:&lt;/strong&gt; In this case, just invoke the &lt;code&gt;slice()&lt;/code&gt; method on the array to create a shallow copy followed by &lt;code&gt;reverse()&lt;/code&gt; method call on the copy.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const originalArray = [1, 2, 3, 4, 5];
const newArray = originalArray.slice().reverse(); //Slice an array gives a new copy

console.log(originalArray); // [1, 2, 3, 4, 5]
console.log(newArray); // [ 5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using spread and reverse methods:&lt;/strong&gt; In this case, let's use the spread syntax (...) to create a copy of the array followed by &lt;code&gt;reverse()&lt;/code&gt; method call on the copy.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const originalArray = [1, 2, 3, 4, 5];
const newArray = [...originalArray].reverse();

console.log(originalArray); // [1, 2, 3, 4, 5]
console.log(newArray); // [ 5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using reduce and spread methods:&lt;/strong&gt; Here execute a reducer function on an array elements and append the accumulated array on right side using spread syntax&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const originalArray = [1, 2, 3, 4, 5];
const newArray = originalArray.reduce((accumulator, value) =&amp;gt; {
  return [value, ...accumulator];
}, []);

console.log(originalArray); // [1, 2, 3, 4, 5]
console.log(newArray); // [ 5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using reduceRight and spread methods:&lt;/strong&gt; Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and append the accumulated array on left side using spread syntax&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const originalArray = [1, 2, 3, 4, 5];
const newArray = originalArray.reduceRight((accumulator, value) =&amp;gt; {
  return [...accumulator, value];
}, []);

console.log(originalArray); // [1, 2, 3, 4, 5]
console.log(newArray); // [ 5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using reduceRight and push methods:&lt;/strong&gt; Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and push the iterated value to the accumulator&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const originalArray = [1, 2, 3, 4, 5];
const newArray = originalArray.reduceRight((accumulator, value) =&amp;gt; {
  accumulator.push(value);
  return accumulator;
}, []);

console.log(originalArray); // [1, 2, 3, 4, 5]
console.log(newArray); // [ 5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create custom HTML element?&lt;/h3&gt; &lt;p&gt;The creation of custom HTML elements involves two main steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Define your custom HTML element:&lt;/strong&gt; First you need to define some custom class by extending HTMLElement class. After that define your component properties (styles,text etc) using &lt;code&gt;connectedCallback&lt;/code&gt; method. &lt;strong&gt;Note:&lt;/strong&gt; The browser exposes a function called &lt;code&gt;customElements.define&lt;/code&gt; inorder to reuse the element. &lt;pre&gt;&lt;code class="language-javascript"&gt;class CustomElement extends HTMLElement {
  connectedCallback() {
    this.innerHTML = "This is a custom element";
  }
}
customElements.define("custom-element", CustomElement);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Use custom element just like other HTML element:&lt;/strong&gt; Declare your custom element as a HTML tag.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;   &amp;lt;body&amp;gt;
        &amp;lt;custom-element&amp;gt;
   &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is global execution context?&lt;/h3&gt; &lt;p&gt;The global execution context is the default or first execution context that is created by the JavaScript engine before any code is executed(i.e, when the file first loads in the browser). All the global code that is not inside a function or object will be executed inside this global execution context. Since JS engine is single threaded there will be only one global environment and there will be only one global execution context.&lt;/p&gt; &lt;p&gt;For example, the below code other than code inside any function or object is executed inside the global execution context.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var x = 10;

function A() {
  console.log("Start function A");

  function B() {
    console.log("In function B");
  }

  B();
}

A();

console.log("GlobalContext");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is function execution context?&lt;/h3&gt; &lt;p&gt;Whenever a function is invoked, the JavaScript engine creates a different type of Execution Context known as a Function Execution Context (FEC) within the Global Execution Context (GEC) to evaluate and execute the code within that function.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is debouncing?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;Debouncing is a programming technique used to limit how often a function is executed. Specifically, it ensures that a function is only triggered after a certain amount of time has passed since it was last invoked. This prevents unnecessary or excessive function calls, which can help optimize performance and reduce unnecessary CPU usage or API requests.

For example, when a user types in a search box, you typically want to wait until they’ve finished typing before fetching suggestions. Without debouncing, an API call would be triggered on every keystroke, potentially causing performance issues. With debouncing, the function call is postponed until the user stops typing for a specified period (e.g., 300ms). If the user types again before this time elapses, the timer resets.

**Typical use cases for debouncing include:**

*   Search box suggestions (wait until typing pauses before fetching results)
*   Auto-saving text fields (save only after the user stops typing)
*   Preventing double-clicks on buttons
*   Handling window resize or scroll events efficiently

**Example Debounce Function:**

JavaScript

```css
function debounce(func, timeout = 500) {
  let timer;
  return function (...args) {
    clearTimeout(timer);
    timer = setTimeout(() =&amp;gt; {
      func.apply(this, args);
    }, timeout);
  };
}
```

**Usage Example:**

JavaScript

```css
function fetchResults() {
  console.log("Fetching input suggestions");
}
const processChange = debounce(fetchResults, 300);

// Attach to input element
&amp;lt;input type="text" onkeyup="processChange()" /&amp;gt;

// Attach to button
&amp;lt;button onclick="processChange()"&amp;gt;Click me&amp;lt;/button&amp;gt;

// Attach to window event
window.addEventListener("scroll", processChange);
```

**How it works:**  
When `processChange` is invoked (e.g., by typing or clicking), any pending execution is canceled, and the function is scheduled to run after the specified delay. If another event occurs before the delay is up, the timer resets, and the function will only run after events have stopped for the delay duration.

Debouncing is an essential tool for improving user experience and application performance, especially when dealing with events that can fire rapidly and repeatedly.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="438"&gt; 
 &lt;li&gt; &lt;h3&gt;What is throttling?&lt;/h3&gt; &lt;p&gt;Throttling is a programming technique used to control the rate at which a function is executed. When an event is triggered continuously—such as during window resizing, scrolling, or mouse movement—throttling ensures that the associated event handler is not called more often than a specified interval. This helps improve performance by reducing the number of expensive function calls and preventing performance bottlenecks.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Common use cases:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Window resize events&lt;/li&gt; 
   &lt;li&gt;Scroll events&lt;/li&gt; 
   &lt;li&gt;Mouse movement or drag events&lt;/li&gt; 
   &lt;li&gt;API rate limiting&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;How does throttling work?&lt;/strong&gt;&lt;br /&gt; Throttling will execute the function at most once every specified time interval, ignoring additional calls until the interval has passed.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Throttle Implementation and Usage&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;JavaScript&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;// Simple throttle function: allows 'func' to run at most once every 'limit' ms
function throttle(func, limit) {
  let inThrottle = false;
  return function(...args) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() =&amp;gt; (inThrottle = false), limit);
    }
  };
}

// Usage: throttling a scroll event handler
function handleScrollAnimation() {
  console.log('Scroll event triggered');
}

window.addEventListener(
  "scroll",
  throttle(handleScrollAnimation, 100) // Will run at most once every 100ms
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is optional chaining?&lt;/h3&gt; &lt;p&gt;According to MDN official docs, the optional chaining operator (?.) permits reading the value of a property located deep within a chain of connected objects without having to expressly validate that each reference in the chain is valid.&lt;/p&gt; &lt;p&gt;The ?. operator is like the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined. When used with function calls, it returns undefined if the given function does not exist.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const adventurer = {
  name: "Alice",
  cat: {
    name: "Dinah",
  },
};

const dogName = adventurer.dog?.name;
console.log(dogName);
// expected output: undefined

console.log(adventurer.someNonExistentMethod?.());
// expected output: undefined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an environment record?&lt;/h3&gt; &lt;p&gt;According to ECMAScript specification 262 (9.1):&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;a href="https://262.ecma-international.org/12.0/#sec-environment-records"&gt;Environment Record&lt;/a&gt; is a specification type used to define the association of Identifiers to specific variables and functions, based upon the lexical nesting structure of ECMAScript code.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;p&gt;Usually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a FunctionDeclaration, a BlockStatement, or a Catch clause of a TryStatement.&lt;/p&gt; &lt;p&gt;Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are created by that code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to verify if a variable is an array?&lt;/h3&gt; &lt;p&gt;It is possible to check if a variable is an array instance using 3 different ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Array.isArray() method:&lt;/p&gt; &lt;p&gt;The &lt;code&gt;Array.isArray(value)&lt;/code&gt; utility function is used to determine whether value is an array or not. This function returns a true boolean value if the variable is an array and a false value if it is not.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const numbers = [1, 2, 3];
const user = { name: "John" };
Array.isArray(numbers); // true
Array.isArray(user); //false
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;instanceof operator:&lt;/p&gt; &lt;p&gt;The instanceof operator is used to check the type of an array at run time. It returns true if the type of a variable is an Array other false for other type.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const numbers = [1, 2, 3];
const user = { name: "John" };
console.log(numbers instanceof Array); // true
console.log(user instanceof Array); // false
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Checking constructor type:&lt;/p&gt; &lt;p&gt;The constructor property of the variable is used to determine whether the variable Array type or not.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const numbers = [1, 2, 3];
const user = { name: "John" };
console.log(numbers.constructor === Array); // true
console.log(user.constructor === Array); // false
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is pass by value and pass by reference?&lt;/h3&gt; &lt;p&gt;Pass-by-value creates a new space in memory and makes a copy of a value. Primitives such as string, number, boolean etc will actually create a new copy. Hence, updating one value doesn't impact the other value. i.e, The values are independent of each other.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let a = 5;
let b = a;

b++;
console.log(a, b); //5, 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code snippet, the value of &lt;code&gt;a&lt;/code&gt; is assigned to &lt;code&gt;b&lt;/code&gt; and the variable &lt;code&gt;b&lt;/code&gt; has been incremented. Since there is a new space created for variable &lt;code&gt;b&lt;/code&gt;, any update on this variable doesn't impact the variable &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Pass by reference doesn't create a new space in memory but the new variable adopts a memory address of an initial variable. Non-primitives such as objects, arrays and functions gets the reference of the initiable variable. i.e, updating one value will impact the other variable.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let user1 = {
  name: "John",
  age: 27,
};
let user2 = user1;
user2.age = 30;

console.log(user1.age, user2.age); // 30, 30
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code snippet, updating the &lt;code&gt;age&lt;/code&gt; property of one object will impact the other property due to the same reference.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between primitives and non-primitives?&lt;/h3&gt; &lt;p&gt;JavaScript language has both primitives and non-primitives but there are few differences between them as below,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Primitives&lt;/th&gt; 
     &lt;th&gt;Non-primitives&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;These types are predefined&lt;/td&gt; 
     &lt;td&gt;Created by developer&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;These are immutable&lt;/td&gt; 
     &lt;td&gt;Mutable&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Compare by value&lt;/td&gt; 
     &lt;td&gt;Compare by reference&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Stored in Stack&lt;/td&gt; 
     &lt;td&gt;Stored in heap&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Contain certain value&lt;/td&gt; 
     &lt;td&gt;Can contain NULL too&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create your own bind method using either call or apply method?&lt;/h3&gt; &lt;p&gt;The custom bind function needs to be created on Function prototype inorder to use it as other builtin functions. This custom function should return a function similar to original bind method and the implementation of inner function needs to use apply method call.&lt;/p&gt; &lt;p&gt;The function which is going to bind using custom &lt;code&gt;myOwnBind&lt;/code&gt; method act as the attached function(&lt;code&gt;boundTargetFunction&lt;/code&gt;) and argument as the object for &lt;code&gt;apply&lt;/code&gt; method call.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;Function.prototype.myOwnBind = function (whoIsCallingMe) {
  if (typeof this !== "function") {
    throw new Error(this + "cannot be bound as it's not callable");
  }
  const boundTargetFunction = this;
  return function () {
    boundTargetFunction.apply(whoIsCallingMe, arguments);
  };
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between pure and impure functions?&lt;/h3&gt; &lt;p&gt;Some of the major differences between pure and impure function are as below,&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Pure function&lt;/th&gt; 
   &lt;th&gt;Impure function&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;It has no side effects&lt;/td&gt; 
   &lt;td&gt;It causes side effects&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;It is always return the same result&lt;/td&gt; 
   &lt;td&gt;It returns different result on each call&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Easy to read and debug&lt;/td&gt; 
   &lt;td&gt;Difficult to read and debug because they are affected by external code&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="446"&gt; 
 &lt;li&gt; &lt;h3&gt;What is referential transparency?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;An expression in javascript that can be replaced by its value without affecting the behaviour of the program is called referential transparency. Pure functions are referentially transparent.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const add = (x, y) =&amp;gt; x + y;
const multiplyBy2 = (x) =&amp;gt; x * 2;

//Now add (2, 3) can be replaced by 5.

multiplyBy2(add(2, 3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="447"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible side-effects in javascript?&lt;/h3&gt; &lt;p&gt;A side effect is the modification of the state through the invocation of a function or expression. These side effects make our function impure by default. Below are some side effects which make function impure,&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Making an HTTP request. Asynchronous functions such as fetch and promise are impure.&lt;/li&gt; 
 &lt;li&gt;DOM manipulations&lt;/li&gt; 
 &lt;li&gt;Mutating the input data&lt;/li&gt; 
 &lt;li&gt;Printing to a screen or console: For example, console.log() and alert()&lt;/li&gt; 
 &lt;li&gt;Fetching the current time&lt;/li&gt; 
 &lt;li&gt;Math.random() calls: Modifies the internal state of Math object&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="448"&gt; 
 &lt;li&gt; &lt;h3&gt;What are compose and pipe functions?&lt;/h3&gt; &lt;p&gt;The "compose" and "pipe" are two techniques commonly used in functional programming to simplify complex operations and make code more readable. They are not native to JavaScript and higher-order functions. the &lt;code&gt;compose()&lt;/code&gt; applies right to left any number of functions to the output of the previous function.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is module pattern?&lt;/h3&gt; &lt;p&gt;Module pattern is a designed pattern used to wrap a set of variables and functions together in a single scope returned as an object. JavaScript doesn't have access specifiers similar to other languages(Java, Python, etc) to provide private scope. It uses IIFE (Immediately invoked function expression) to allow for private scopes. i.e., a closure that protect variables and methods.&lt;/p&gt; &lt;p&gt;The module pattern looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;(function () {
  // Private variables or functions goes here.

  return {
    // Return public variables or functions here.
  };
})();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's see an example of a module pattern for an employee with private and public access,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const createEmployee = (function () {
  // Private
  const name = "John";
  const department = "Sales";
  const getEmployeeName = () =&amp;gt; name;
  const getDepartmentName = () =&amp;gt; department;

  // Public
  return {
    name,
    department,
    getName: () =&amp;gt; getEmployeeName(),
    getDepartment: () =&amp;gt; getDepartmentName(),
  };
})();

console.log(createEmployee.name);
console.log(createEmployee.department);
console.log(createEmployee.getName());
console.log(createEmployee.getDepartment());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It mimic the concepts of classes with private variables and methods.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Function Composition?&lt;/h3&gt; &lt;p&gt;It is an approach where the result of one function is passed on to the next function, which is passed to another until the final function is executed for the final result.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//example
const double = (x) =&amp;gt; x * 2;
const square = (x) =&amp;gt; x * x;

var output1 = double(2);
var output2 = square(output1);
console.log(output2);

var output_final = square(double(2));
console.log(output_final);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to use await outside of async function prior to ES2022?&lt;/h3&gt; &lt;p&gt;Prior to ES2022, if you attempted to use an await outside of an async function resulted in a SyntaxError.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;await Promise.resolve(console.log("Hello await")); // SyntaxError: await is only valid in async function
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can fix this issue with an alternative IIFE (Immediately Invoked Function Expression) to get access to the feature.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;(async function () {
  await Promise.resolve(console.log("Hello await")); // Hello await
})();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In ES2022, you can write top-level await without writing any hacks.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;await Promise.resolve(console.log("Hello await")); //Hello await
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="452"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the this keyword in JavaScript?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword in JavaScript refers to &lt;strong&gt;the object that is executing the current function&lt;/strong&gt;. Its value is determined by &lt;strong&gt;how a function is called&lt;/strong&gt;, not where it is defined. &lt;code&gt;this&lt;/code&gt; is essential for writing object-oriented and event-driven code, as it allows methods to interact with the data of the object they belong to.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example 1: this in a Global Context&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(this);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;In a global context, this refers to the global object (e.g., window in a browser).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Example 2: this in a Function&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function displayThis() {
  console.log(this);
}

displayThis();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;In a regular function, this refers to the global object(window in browser and global in nodejs) for non-strict mode. In strict mode, it's value is undefined.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Example 3: this in a Method&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = {
  name: "John",
  greet: function () {
    console.log("Hello, " + this.name);
  },
};

person.greet();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;In a method, this refers to the object that owns the method (person in the case).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Example 4: this in an Event Handler&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt; document.getElementById("myButton").addEventListener("click", function () {
          console.log(this);
 });
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;In an event handler, this refers to the element that triggered the event (the button in this case).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Example 5: &lt;code&gt;this&lt;/code&gt; with Arrow Functions&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;      const obj = {
        age: 42,
        regular: function() { console.log(this.age); },
        arrow: () =&amp;gt; { console.log(this.age); }
      };
      obj.regular(); // 42 (this refers to obj)
      obj.arrow();   // undefined (this refers to the outer scope, not obj)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Arrow functions do not have their own &lt;code&gt;this&lt;/code&gt; binding; they inherit it from their surrounding (lexical) context.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Example 6: this in Constructor Functions / Classes&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;  function Person(name) {
    this.name = name;
  }
  
  const p1 = new Person('Sudheer');
  console.log(p1.name); // Sudheer
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;When used with new, this refers to the newly created object.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="453"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the uses of closures?&lt;/h3&gt; Closures are a powerful feature in programming languages like JavaScript. They allow functions to retain access to variables from their containing (enclosing) scope even after the outer function has finished executing. This means that a function defined within another function can access variables from the outer function, even if the outer function has already returned. Here are some common use cases of closures:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Data Privacy: Closures can be used to create private variables and methods. By defining variables within a function's scope and returning inner functions that have access to those variables, you can create a form of encapsulation, limiting access to certain data or functionality.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Function Factories: Closures are often used to create functions with pre-set parameters. This is useful when you need to create multiple functions with similar behavior but different configurations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Callback Functions: Closures are frequently used in asynchronous programming, such as handling event listeners or AJAX requests. The inner function captures variables from the outer scope and can access them when the callback is invoked.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Memoization: Closures can be used for memoization, a technique to optimize performance by caching the results of expensive function calls. The inner function can remember the results of previous calls and return the cached result if the same input is provided again.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;iterators and Generators: Closures can be used to create iterators and generators, which are essential for working with collections of data in modern JavaScript.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="454"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the phases of execution context?&lt;/h3&gt; The execution context in JavaScript is a data structure that stores the information necessary for executing a piece of code. It includes the code itself, the values of the variables used in the code, and the scope chain. The scope chain is a list of objects that are used to resolve variable names.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The execution context has two phases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Creation phase: In this phase, the JavaScript engine creates the execution context and sets up the script's environment. This includes creating the variable object and the scope chain.&lt;/li&gt; 
 &lt;li&gt;Execution phase: In this phase, the JavaScript engine executes the code in the execution context. This includes evaluating expressions, assigning values to variables, and calling functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The execution context is created when a function is called. The function's code is then executed in the execution context. When the function returns, the execution context is destroyed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="455"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible reasons for memory leaks?&lt;/h3&gt; &lt;p&gt;Memory leaks can lead to poor performance, slow loading times and even crashes in web applications. Some of the common causes of memory leaks are listed below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The execessive usage of global variables or omitting the &lt;code&gt;var&lt;/code&gt; keyword in local scope.&lt;/li&gt; 
   &lt;li&gt;Forgetting to clear the timers set up by &lt;code&gt;setTimeout&lt;/code&gt; or &lt;code&gt;setInterval&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Closures retain references to variables from their parent scope, which leads to variables might not garbage collected even they are no longer used.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the optimization techniques of V8 engine?&lt;/h3&gt; &lt;p&gt;V8 engine uses the below optimization techniques.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Inline expansion:&lt;/strong&gt; It is a compiler optimization by replacing the function calls with the corresponding function blocks.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Copy elision:&lt;/strong&gt; This is a compiler optimization method to prevent expensive extra objects from being duplicated or copied.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Inline caching:&lt;/strong&gt; It is a runtime optimization technique where it caches the execution of older tasks those can be lookup while executing the same task in the future.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the examples of built-in higher order functions?&lt;/h3&gt; &lt;p&gt;There are several built-in higher order functions exists on arrays, strings, DOM and promise methods in javascript. These higher order functions provides significant level of abstraction. The list of functions on these categories are listed below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;arrays:&lt;/strong&gt; map, filter, reduce, sort, forEach, some etc.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;DOM&lt;/strong&gt;: The DOM method &lt;code&gt;element.addEventListener(type, handler)&lt;/code&gt; also accepts the function handler as a second argument.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Strings:&lt;/strong&gt; replace() method.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits higher order functions?&lt;/h3&gt; &lt;p&gt;The main benefits of higher order functions are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Abstraction&lt;/li&gt; 
   &lt;li&gt;Reusability&lt;/li&gt; 
   &lt;li&gt;Immutability&lt;/li&gt; 
   &lt;li&gt;Modularity&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="459"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create polyfills for map, filter and reduce methods?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The polyfills for array methods such as map, filter and reduce methods can be created using array prototype.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;map:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The built-in &lt;code&gt;Array.map&lt;/code&gt; method syntax will be helpful to write polyfill. The map method takes the callback function as an argument and that callback function can have below three arguments passed into it.&lt;/p&gt; &lt;p&gt;i. Current value ii. Index of current value(optional) iii. array(optional)&lt;/p&gt; &lt;p&gt;The syntax would like below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;let newArray = arr.map(callback(currentValue[, index, arr) {
   // return new array after executing the code
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's build our map polyfill based on the above syntax,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;Array.prototype.myMap = function (cb) {
  let newArr = [];
  for (let i = 0; i &amp;lt; this.length; i++) {
    newArr.push(cb(this[i], i, this));
  }
  return newArr;
};

const nums = [1, 2, 3, 4, 5];
const multiplyByTwo = nums.myMap((x) =&amp;gt; x * 2);
console.log(multiplyByTwo); // [2, 4, 6, 8, 10]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, custom method name 'myMap' has been used to avoid conflicts with built-in method.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;filter:&lt;/strong&gt; Similar to map method, &lt;code&gt;Array.filter&lt;/code&gt; method takes callback function as an argument and the callback function can have three agurguments passed into it.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;i. Current value
ii. Index of current value(optional)
iii. array(optional)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The syntax looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;let newArray = arr.filter(callback(currentValue[, index, arr) {
  // return new array whose elements satisfy the callback conditions
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's build our filter polyfill based on the above syntax,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;Array.prototype.myFilter = function (cb) {
  let newArr = [];
  for (let i = 0; i &amp;lt; this.length; i++) {
    if (cb(this[i], i, this)) {
      newArr.push(this[i]);
    }
  }
  return newArr;
};

const nums = [1, 2, 3, 4, 5, 6];
const evenNums = nums.myFilter((x) =&amp;gt; x % 2);
console.log(evenNums); // [2, 4, 6]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;reduce:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  The built-in `Array.reduce` method syntax will be helpful to write our own polyfill. The reduce method takes the callback function as first argument and the initial value as second argument.

  The callback function can have four arguments passed into it.
  i. Accumulator
  ii. Current value
  iii. Index of current value(optional)
  iv. array(optional)

The syntax would like below,

```js
arr.reduce(callback((acc, curr, i, arr) =&amp;gt; {}), initValue);
```
Let's build our reduce polyfill based on the above syntax,

```js
Array.prototype.myReduce = function(cb, initialValue) {
    let accumulator = initialValue;
    for(let i=0; i&amp;lt; this.length; i++) {
        accumulator = accumulator ? cb(accumulator, this[i], i, this) : this[i];
    }
    return accumulator;
}
  const nums = [1, 2, 3, 4, 5, 6];
  const sum = nums.myReduce((acc, curr, i, arr) =&amp;gt; {
    return acc += curr
  }, 0);
  console.log(sum); // 21
```
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between map and forEach functions?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;Both map and forEach functions are used to iterate over an arrays but there are some differences in their functionality.

1. **Returning values:** The `map` method returns a new array with transformed elements whereas `forEach` method returns `undefined` eventhough both of them are doing the same job.

```javascript
  const arr = [1, 2, 3, 4, 5];
  arr.map(x =&amp;gt; x * x); // [1, 4, 9, 16, 25]
  arr.forEach(x =&amp;gt; x * x); //

  The `forEach()` method in JavaScript always returns undefined. This is because forEach() is used to iterate over arrays and perform side effects on each element, rather than returning a `new array or transforming the original array`
```

2. **Chaining methods:** The `map` method is chainable. i.e, It can be attached with `reduce`, `filter`, `sort` and other methods as well. Whereas `forEach` cannot be attached with any other methods because it returns `undefined` value.

```javascript
const arr = [1, 2, 3, 4, 5];
arr.map((x) =&amp;gt; x * x).reduce((total, cur) =&amp;gt; total + cur); // 55
arr.forEach((x) =&amp;gt; x * x).reduce((total, cur) =&amp;gt; total + cur); //Uncaught TypeError: Cannot read properties of undefine(reading 'reduce')
```

3. **Mutation:** The `map` method doesn't mutate the original array by returning new array. Whereas `forEach` method also doesn't mutate the original array but it's callback is allowed to mutate the original array.

**Note:** Both these methods existed since ES5 onwards.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="461"&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example of statements affected by automatic semicolon insertion?&lt;/h3&gt; &lt;p&gt;The javascript parser will automatically add a semicolon while parsing the source code. For example, the below common statements affected by Automatic Semicolon Insertion(ASI).&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;An empty statement&lt;/li&gt; 
   &lt;li&gt;var statement&lt;/li&gt; 
   &lt;li&gt;An expression statement&lt;/li&gt; 
   &lt;li&gt;do-while statement&lt;/li&gt; 
   &lt;li&gt;continue statement&lt;/li&gt; 
   &lt;li&gt;break statement&lt;/li&gt; 
   &lt;li&gt;return statement&lt;/li&gt; 
   &lt;li&gt;throw statement&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="462"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the event phases of a browser?&lt;/h3&gt; &lt;p&gt;There are 3 phases in the lifecycle of an event propagation in JavaScript,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Capturing phase:&lt;/strong&gt; This phase goes down gradually from the top of the DOM tree to the target element when a nested element clicked. Before the click event reaching the final destination element, the click event of each parent's element must be triggered.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Target phase:&lt;/strong&gt; This is the phase where the event originally occurred reached the target element .&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bubbling phase:&lt;/strong&gt; This is reverse of the capturing phase. In this pase, the event bubbles up from the target element through it's parent element, an ancestor and goes all the way to the global window object.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The pictorial representation of these 3 event phases in DOM looks like below,&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/event-flow.png" alt="Screenshot" /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="463"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the real world use cases of proxy?&lt;/h3&gt; &lt;p&gt;Proxies are not used in regular day to day JavaScript work but they enabled many exciting programming patterns. Some of the real world use cases are listed below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Vue3 used proxy concept to implement reactive state&lt;/li&gt; 
   &lt;li&gt;SolidJS implemented reactive stores&lt;/li&gt; 
   &lt;li&gt;Immerjs built upon proxy to track updates to immutable updates&lt;/li&gt; 
   &lt;li&gt;ZenStack improved Prisma ORM for access control layer&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="464"&gt; 
 &lt;li&gt; &lt;h3&gt;What are hidden classes?&lt;/h3&gt; &lt;p&gt;Since JavaScript is a dynamic programming language, you can add or remove properties and methods from objects on the fly at runtime. This nature of JavaScript increases the dynamic dictionary lookups(because objects implemented as HashTables in memory) for retrieving a property on an object.&lt;/p&gt; &lt;p&gt;Let's consider the following example to see how the additional properties &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;gender&lt;/code&gt; added at runtime.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Person(name) {
  this.name = name;
}

var person1 = new Person("John");
var person2 = new Person("Randy");

person1.age = 40;
person1.gender = "Male";

person2.gender = "Female";
person2.age = 50;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As a result, this behavior leads to lower JavaScript performance compared to the contiguous buffer method used in non-dynamic languages. The V8 engine provided a solution named &lt;strong&gt;hidden classes&lt;/strong&gt; to optimize the access time when retrieving a property on an object. This optimization is achieved by sharing hidden classes among objects created in a similar fashion. These hidden classes are attached to each and every object to track its shape.&lt;/p&gt; &lt;p&gt;When V8 engine sees the constructor function(e.g, Person) is declared, it creates a hidden class (let's say Class01) without any offsets. Once the first property assignment statement (&lt;code&gt;this.name = name&lt;/code&gt;) is executed, V8 engine will create a new hidden class (let's say Class02), inheriting all properties from the previous hidden class (Class01), and assign the property to offset 0. This process enables compiler to skip dictionary lookup when you try to retrieve the same property(i.e, name). Instead, V8 will directly point to Class02. The same procedure happens when you add new properties to the object.&lt;/p&gt; &lt;p&gt;For example, adding &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;gender&lt;/code&gt; properties to &lt;code&gt;Person&lt;/code&gt; constructor leads to transition of hidden classes(Class02 -&amp;gt; Class03 -&amp;gt; Class04). If you create a second object(Person2) based on the same Person object, both Class01 and Class02 hidden classes are going to be shared. However, the hidden classes Class03 and Class04 cannot be shared because second object has been modified with a different order of properties assignment.&lt;/p&gt; &lt;p&gt;Since both the objects(person1 and person2) do not share the hidden classes, now V8 engine cannot use &lt;strong&gt;Inline Caching&lt;/strong&gt; technique for the faster access of properties.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="465"&gt; 
 &lt;li&gt; &lt;h3&gt;What is inline caching?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Inline caching is an optimization technique based on the observation that repeated calls to same function tends to occur on same type of objects. The V8 compiler stores a cache of the type of objects that were passed as a parameter in recent method calls. Upon next time when same function is called, compiler can directly search for the type in cache.&lt;/p&gt; 
&lt;p&gt;Let's consider an example where the compiler stores the shape type in cache for repeated calls in the loop.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;let shape = { width: 30, height: 20 }; // Compiler store the type in cache as { width: &amp;lt;int&amp;gt;, height: &amp;lt;int&amp;gt;} after repeated calls

function area(obj) {
  //Calculate area
}
for (let i = 0; i &amp;lt; 100; i++) {
  area(shape);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After few successful calls of the same area method to its same hidden class, V8 engine omits the hidden class lookup and simply adds the offset of the property to the object pointer itself. As a result, it increases the execution speed.&lt;/p&gt; 
&lt;p&gt;There are mainly 3 types of inline caching possible:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Monomorphic: This is a optimized caching technique in which there can be always same type of objects passed.&lt;/li&gt; 
 &lt;li&gt;Polymorphic: This ia slightly optimized caching technique in which limited number of different types of objects can be passed.&lt;/li&gt; 
 &lt;li&gt;Megamorphic: It is an unoptimized caching in which any number of different objects can be passed.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="466"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to execute external scripts?&lt;/h3&gt; &lt;p&gt;There are three different ways to execute external scripts,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;async: The script is downloaded in parallel to parsing the page, and executed as soon as it is available even before parsing completes. The parsing of the page is going to be interuppted once the script is downloaded completely and then the script is executed. Thereafter, the parsing of the remaining page will continue.&lt;/p&gt; &lt;p&gt;The syntax for async usage is as shown below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src="demo.js" async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;defer: The script is downloaded in parallel to parsing the page, and executed after the page has finished parsing.&lt;/p&gt; &lt;p&gt;The syntax for defer usage is as shown below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src="demo.js" defer&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Neither async or defer: The script is downloaded and executed immediately by blocking parsing of the page until the script execution is completed.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You should only use either async or defer attribute if the &lt;code&gt;src&lt;/code&gt; attribute is present.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Lexical Scope?&lt;/h3&gt; &lt;p&gt;Lexical scope is the ability for a function scope to access variables from the parent scope.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;&amp;lt;script&amp;gt;
        function x(){
          var a=10;
          function y(){
              console.log(a); // will print a , because of lexical scope, it will first look 'a' in
          //its local memory space and then in its parent functions memory space
          }
          y();
      }
      x();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to detect system dark mode in javascript?&lt;/h3&gt; &lt;p&gt;The combination of &lt;code&gt;Window.matchMedia()&lt;/code&gt; utility method along with media query is used to check if the user has selected a dark color scheme in their operating system settings or not. The CSS media query &lt;code&gt;prefers-color-scheme&lt;/code&gt; needs to be passed to identify system color theme.&lt;/p&gt; &lt;p&gt;The following javascript code describes the usage,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const hasDarkColorScheme = () =&amp;gt;
  window.matchMedia &amp;amp;&amp;amp;
  window.matchMedia("(prefers-color-scheme: dark)").matches;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also watch changes to system color scheme using &lt;code&gt;addEventListener&lt;/code&gt;,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;window
  .matchMedia("(prefers-color-scheme: dark)")
  .addEventListener("change", (event) =&amp;gt; {
    const theme = event.matches ? "dark" : "light";
  });
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The matchMedia method returns &lt;strong&gt;MediaQueryList&lt;/strong&gt; object stores information from a media query.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of requestAnimationFrame method?&lt;/h3&gt; &lt;p&gt;The requestAnimationFrame() method in JavaScript is used to schedule a function to be called before the next repaint of the browser window, allowing you to create smooth, efficient animations. It's primarily used for animations and visual updates, making it an essential tool for improving performance when you're animating elements on the web.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const element = document.getElementById("myElement");
function animate() {
  let currentPosition = parseInt(window.getComputedStyle(element).left, 10);

  // Move the element 2px per frame
  currentPosition += 2;
  element.style.left = currentPosition + "px";
  // If the element hasn't moved off-screen, request the next frame
  if (currentPosition &amp;lt; window.innerWidth) {
    requestAnimationFrame(animate);
  }
}
// Start the animation
requestAnimationFrame(animate);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="470"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between substring and substr methods?&lt;/h3&gt; &lt;p&gt;Both &lt;code&gt;substring&lt;/code&gt; and &lt;code&gt;substr&lt;/code&gt; are used to extract parts of a string, but there are subtle differences between the substring() and substr() methods in terms of &lt;strong&gt;syntax&lt;/strong&gt; and &lt;strong&gt;behavior&lt;/strong&gt;.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;substring(start, end)&lt;/code&gt;&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;code&gt;start&lt;/code&gt;: The index to start extracting (inclusive).&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;end&lt;/code&gt;: The index to stop extracting (exclusive).&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Behavior:&lt;/strong&gt; 
      &lt;ul&gt; 
       &lt;li&gt;If &lt;code&gt;start &amp;gt; end&lt;/code&gt;, it &lt;strong&gt;swaps the arguments&lt;/strong&gt;.&lt;/li&gt; 
       &lt;li&gt;Negative values are treated as &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt; let str = "Hello World";
 console.log(str.substring(0, 5));   // "Hello"
 console.log(str.substring(5, 0));   // "Hello" (swapped)
 console.log(str.substring(-3, 4));  // "Hell" (negative = 0)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;substr(start, length)&lt;/code&gt; &lt;em&gt;(Deprecated)&lt;/em&gt;&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;code&gt;start&lt;/code&gt;: The index to start extracting.&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;length&lt;/code&gt;: The number of characters to extract.&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Behavior:&lt;/strong&gt; 
      &lt;ul&gt; 
       &lt;li&gt;If &lt;code&gt;start&lt;/code&gt; is negative, it counts from the &lt;strong&gt;end&lt;/strong&gt; of the string.&lt;/li&gt; 
       &lt;li&gt;If &lt;code&gt;length&lt;/code&gt; is omitted, it extracts to the end of the string.&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let str = "Hello World"; console.log(str.substr(0, 5)); // "Hello" 
console.log(str.substr(-5, 3)); // "Wor" (starts from 'W')`
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; substr() is considered a legacy feature in ECMAScript, so it is best to avoid using it if possible.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="471"&gt; 
 &lt;li&gt; &lt;h3&gt;How to find the number of parameters expected by a function?&lt;/h3&gt; The function's object has a &lt;strong&gt;length&lt;/strong&gt; property which tells you how many formal parameters expected by a function. This is a static value defined by the function, not the number of arguments the function is called with(&lt;strong&gt;arguments.length&lt;/strong&gt;). The basic usage of length propery is,&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function multiply(x, y) {
  return x * y;
}

function sum(a, b, c) {
  return a + b + c;
}

console.log(multiply.length); //2
console.log(sum.length); //3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But there are few important rules which needs to be noted while using length property.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Default values:&lt;/strong&gt; Only the parameters which exists before a default value are considered.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function sum(a, b = 2, c = 3) {
  return a + b + c;
}
console.log(sum.length); // 1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rest params:&lt;/strong&gt; The rest parameters are excluded with in length property.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function sum(a, b, ...moreArgs) {
  let total = a + b;
  for (const arg of moreArgs) {
    total += arg;
  }
  return total;
}
console.log(sum.length); // 2
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Destructuring patterns:&lt;/strong&gt; Each destructuring pattern counted as a single parameter.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function func([a, b], { x, y }) {
  console.log(a + b, x, y);
}

console.log(func.length); // 2
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Function constructor is itself a function object and it has a length property of 1.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="472"&gt; 
 &lt;li&gt; &lt;h3&gt;What is globalThis, and what is the importance of it?&lt;/h3&gt; &lt;p&gt;Nowadays JavaScript language is used in a wide variety of environments and each environment has its own object model. Due to this fact, there are different ways(syntax) to access the global object.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;In web browser, the global object is accessible via &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt;, or &lt;code&gt;frames&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;In Node environment, you have to use &lt;code&gt;global&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;In Web workers, the global object is available through &lt;code&gt;self&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The &lt;code&gt;globalThis&lt;/code&gt; property provides a standard way of accessing the global object without writing various code snippet to support multiple environments. For example, the global object retuned from multiple environments as shown below,&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;//1. browser environment
console.log(globalThis); // =&amp;gt; Window {...}

//2. node.js environment
console.log(globalThis); // =&amp;gt; Object [global] {...}

//3. web worker environment
console.log(globalThis); // =&amp;gt; DedicatedWorkerGlobalScope {...}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="473"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the array mutation methods?&lt;/h3&gt; JavaScript array methods can be categorized into two groups:&lt;/li&gt; 
 &lt;li&gt;Mutating methods: These are the methods that directly modify the original array.&lt;/li&gt; 
 &lt;li&gt;Non-mutating methods: These methods return a new array without altering the original one.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;There are 9 methods in total that mutate the arrays,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;push:&lt;/strong&gt; Adds one or more elements to the end of the array and returns the new length.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;pop:&lt;/strong&gt; Removes the last element from the array and returns that element.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;unshift:&lt;/strong&gt; Adds one or more elements to the beginning of the array and returns the new length..&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;shift:&lt;/strong&gt; Removes the first element from the array and returns that element.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;splice:&lt;/strong&gt; Adds or removes elements from the array at a specific index position.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;sort:&lt;/strong&gt; Sorts the elements of the array in-place based on a given sorting criteria.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;reverse:&lt;/strong&gt; Reverses the order of elements in the given array.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;fill:&lt;/strong&gt; Fills all elements of the array with a specific value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;copyWithIn:&lt;/strong&gt; Copies a sequence of elements within the array to a specified target index in the same array.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="474"&gt; 
 &lt;li&gt; &lt;h3&gt;What is module scope in JavaScript?&lt;/h3&gt; Module scope is a feature introduced with ES6 (ES2015) modules that creates a scope specific to a module file, isolating variables and functions declared within it from the global scope and other modules. Variables and functions declared in a module are private by default and can only be accessed by other modules if they are explicitly exported.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Key characteristics of module scope:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Variables declared in a module are scoped to that module only.&lt;/li&gt; 
 &lt;li&gt;Each module has its own top-level scope&lt;/li&gt; 
 &lt;li&gt;Variables and functions need to be explicitly exported to be used in other modules&lt;/li&gt; 
 &lt;li&gt;The global scope cannot access module variables unless they are explicitly exported and imported&lt;/li&gt; 
 &lt;li&gt;Modules are always executed in strict mode&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// moduleA.js

// This variable is PRIVATE to moduleA. It's like a tool inside a closed box.
const privateVariable = "I am private";

// This variable is PUBLIC because it's exported. Others can use it when they import moduleA.
export const publicVariable = "I am public";

// PUBLIC function because it's exported. But it can still access privateVariable inside moduleA.
export function publicFunction() {
  console.log(privateVariable); // ✅ This works because we're inside the same module.
  return "Hello from publicFunction!";
}

// moduleB.js

// Importing PUBLIC items from moduleA.
import { publicVariable, publicFunction } from "./moduleA.js";

console.log(publicVariable); // ✅ "I am public" - Works because it's exported.
console.log(publicFunction()); // ✅ "Hello from publicFunction!" - Works as well.

// ❌ This will cause an ERROR because privateVariable was NOT exported from moduleA.
// console.log(privateVariable);   // ❌ ReferenceError: privateVariable is not defined
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Common use cases and benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Encapsulation of module-specific code&lt;/li&gt; 
 &lt;li&gt;Prevention of global scope pollution&lt;/li&gt; 
 &lt;li&gt;Better code organization and maintenance&lt;/li&gt; 
 &lt;li&gt;Explicit dependency management&lt;/li&gt; 
 &lt;li&gt;Protection of private implementation details&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="475"&gt; 
 &lt;li&gt; &lt;h3&gt;What are shadowing and illegal shadowing?&lt;/h3&gt; &lt;p&gt;Both &lt;strong&gt;shadowing&lt;/strong&gt; and &lt;strong&gt;illegal shadowing&lt;/strong&gt; refer to how variable names can "hide" or override others within nested scopes.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Shadowing&lt;/strong&gt; occurs when a variable declared within a certain scope (like a function or block) has the same name as a variable declared in an outer scope. The inner variable shadows the outer one — meaning, the inner variable takes precedence in its own scope.&lt;/p&gt; &lt;p&gt;Let's take an example where the inner &lt;code&gt;a&lt;/code&gt; inside &lt;code&gt;func()&lt;/code&gt; shadows the outer variable &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let a = 10;

function func() {
  let a = 20; // Shadows the outer 'a'
  console.log(a); // 20
}

func();
console.log(a); // 10
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Illegal shadowing&lt;/strong&gt; in JavaScript refers to a syntax error that happens when you try to declare a block-scoped variable (&lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;) with the same name as a variable declared using &lt;code&gt;var&lt;/code&gt; in the same or an overlapping scope.&lt;/p&gt; &lt;p&gt;For example, if you declare both block-scoped variable and function scoped variable using the same name inside a function causes an illegal shadowing.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function test() {
  var a = 10;
  let a = 20; // SyntaxError: Identifier 'a' has already been declared
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As an another example, if you declare a variable with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; in an outer scope, and then try to redeclare it with &lt;code&gt;var&lt;/code&gt; inside a nested block, JavaScript throws an error — even though &lt;code&gt;var&lt;/code&gt; is supposed to be function-scoped. Since the var appears in a block, it ends up trying to overwrite the &lt;code&gt;let&lt;/code&gt; in the outer scope, which causes a conflict.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;let a = 10;
{
  var a = 20; // SyntaxError: Identifier 'a' has already been declared
  console.log(a);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="476"&gt; 
 &lt;li&gt; &lt;h3&gt;Why is it important to remove event listeners after use?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;In JavaScript, you need to be mindful of removing event listeners to avoid memory leaks — especially in long-lived apps like single-page applications (SPAs) or when working with frameworks/libraries. Eventhough JavaScript has automatic garbage collection, memory leaks can still happen if:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;A DOM element is removed, but a listener still references it.&lt;/li&gt; 
 &lt;li&gt;A callback (event listener) holds a reference to a large object or closure that can't be cleaned up.&lt;/li&gt; 
 &lt;li&gt;Global objects like window, document etc retain listeners indefinitely unless manually removed.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;So if you add any event listeners to DOM element, it is a good practice to remove it after its usage as shown below,&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;   const button = document.getElementById("btn");

    function handleClick() {
      console.log("Clicked!");
    }

    button.addEventListener("click", handleClick);

    // Always remove when done
    button.removeEventListener("click", handleClick);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;!-- QUESTIONS_END --&gt; 
&lt;h3&gt;Coding Exercise&lt;/h3&gt; 
&lt;h4&gt;1. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var car = new Vehicle("Honda", "white", "2010", "UK");
console.log(car);

function Vehicle(model, color, year, country) {
  this.model = model;
  this.color = color;
  this.year = year;
  this.country = country;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Undefined&lt;/li&gt; 
 &lt;li&gt;2: ReferenceError&lt;/li&gt; 
 &lt;li&gt;3: null&lt;/li&gt; 
 &lt;li&gt;4: {model: "Honda", color: "white", year: "2010", country: "UK"}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The function declarations are hoisted similar to any variables. So the placement for &lt;code&gt;Vehicle&lt;/code&gt; function declaration doesn't make any difference.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;2. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function foo() {
  let x = (y = 0);
  x++;
  y++;
  return x;
}

console.log(foo(), typeof x, typeof y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, undefined and undefined&lt;/li&gt; 
 &lt;li&gt;2: ReferenceError: X is not defined&lt;/li&gt; 
 &lt;li&gt;3: 1, undefined and number&lt;/li&gt; 
 &lt;li&gt;4: 1, number and number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;Of course the return value of &lt;code&gt;foo()&lt;/code&gt; is 1 due to the increment operator. But the statement &lt;code&gt;let x = y = 0&lt;/code&gt; declares a local variable x. Whereas y declared as a global variable accidentally. This statement is equivalent to,&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;let x;
window.y = 0;
x = window.y;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the global variable &lt;code&gt;y&lt;/code&gt; is available outside the function, the value is 0 and type is number.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;3. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function main() {
  console.log("A");
  setTimeout(function print() {
    console.log("B");
  }, 0);
  console.log("C");
}
main();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: A, B and C&lt;/li&gt; 
 &lt;li&gt;2: B, A and C&lt;/li&gt; 
 &lt;li&gt;3: A and C&lt;/li&gt; 
 &lt;li&gt;4: A, C and B&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The statements order is based on the event loop mechanism. The order of statements follows the below order,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;At first, the main function is pushed to the stack.&lt;/li&gt; 
  &lt;li&gt;Then the browser pushes the first statement of the main function( i.e, A's console.log) to the stack, executing and popping out immediately.&lt;/li&gt; 
  &lt;li&gt;But &lt;code&gt;setTimeout&lt;/code&gt; statement moved to Browser API to apply the delay for callback.&lt;/li&gt; 
  &lt;li&gt;In the meantime, C's console.log added to stack, executed and popped out.&lt;/li&gt; 
  &lt;li&gt;The callback of &lt;code&gt;setTimeout&lt;/code&gt; moved from Browser API to message queue.&lt;/li&gt; 
  &lt;li&gt;The &lt;code&gt;main&lt;/code&gt; function popped out from stack because there are no statements to execute&lt;/li&gt; 
  &lt;li&gt;The callback moved from message queue to the stack since the stack is empty.&lt;/li&gt; 
  &lt;li&gt;The &lt;code&gt;console.log&lt;/code&gt; for B is added to the stack and display on the console.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;4. What is the output of below equality check&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(0.1 + 0.2 === 0.3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: false&lt;/li&gt; 
 &lt;li&gt;2: true&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;This is due to the float point math problem. Since the floating point numbers are encoded in binary format, the addition operations on them lead to rounding errors. Hence, the comparison of floating points doesn't give expected results. You can find more details about the explanation here &lt;a href="https://0.30000000000000004.com/"&gt;0.30000000000000004.com/&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;5. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var y = 1;
if (function f() {}) {
  y += typeof f;
}
console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1function&lt;/li&gt; 
 &lt;li&gt;2: 1object&lt;/li&gt; 
 &lt;li&gt;3: ReferenceError&lt;/li&gt; 
 &lt;li&gt;4: 1undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The main points in the above code snippets are,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;You can see function expression instead function declaration inside if statement. So it always returns true.&lt;/li&gt; 
  &lt;li&gt;Since it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;In other words, it is same as&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;var y = 1;
if ("foo") {
  y += typeof f;
}
console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It returns 1object for MS Edge browser&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;6. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function foo() {
  return;
  {
    message: "Hello World";
  }
}
console.log(foo());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Hello World&lt;/li&gt; 
 &lt;li&gt;2: Object {message: "Hello World"}&lt;/li&gt; 
 &lt;li&gt;3: Undefined&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;This is a semicolon issue. Normally semicolons are optional in JavaScript. So if there are any statements(in this case, return) missing semicolon, it is automatically inserted immediately. Hence, the function returned as undefined.&lt;/p&gt; 
 &lt;p&gt;Whereas if the opening curly brace is along with the return keyword then the function is going to be returned as expected.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;function foo() {
  return {
    message: "Hello World",
  };
}
console.log(foo()); // {message: "Hello World"}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;7. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var myChars = ["a", "b", "c", "d"];
delete myChars[0];
console.log(myChars);
console.log(myChars[0]);
console.log(myChars.length);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [empty, 'b', 'c', 'd'], empty, 3&lt;/li&gt; 
 &lt;li&gt;2: [null, 'b', 'c', 'd'], empty, 3&lt;/li&gt; 
 &lt;li&gt;3: [empty, 'b', 'c', 'd'], undefined, 4&lt;/li&gt; 
 &lt;li&gt;4: [null, 'b', 'c', 'd'], undefined, 4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;The &lt;code&gt;delete&lt;/code&gt; operator will delete the object property but it will not reindex the array or change its length. So the number or elements or length of the array won't be changed. If you try to print myChars then you can observe that it doesn't set an undefined value, rather the property is removed from the array. The newer versions of Chrome use &lt;code&gt;empty&lt;/code&gt; instead of &lt;code&gt;undefined&lt;/code&gt; to make the difference a bit clearer.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;8. What is the output of below code in latest Chrome&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var array1 = new Array(3);
console.log(array1);

var array2 = [];
array2[2] = 100;
console.log(array2);

var array3 = [, , ,];
console.log(array3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [undefined × 3], [undefined × 2, 100], [undefined × 3]&lt;/li&gt; 
 &lt;li&gt;2: [empty × 3], [empty × 2, 100], [empty × 3]&lt;/li&gt; 
 &lt;li&gt;3: [null × 3], [null × 2, 100], [null × 3]&lt;/li&gt; 
 &lt;li&gt;4: [], [100], []&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;The latest chrome versions display &lt;code&gt;sparse array&lt;/code&gt;(they are filled with holes) using this empty x n notation. Whereas the older versions have undefined x n notation. &lt;strong&gt;Note:&lt;/strong&gt; The latest version of FF displays &lt;code&gt;n empty slots&lt;/code&gt; notation.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;9. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const obj = {
  prop1: function () {
    return 0;
  },
  prop2() {
    return 1;
  },
  ["prop" + 3]() {
    return 2;
  },
};

console.log(obj.prop1());
console.log(obj.prop2());
console.log(obj.prop3());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 0, 1, 2&lt;/li&gt; 
 &lt;li&gt;2: 0, { return 1 }, 2&lt;/li&gt; 
 &lt;li&gt;3: 0, { return 1 }, { return 2 }&lt;/li&gt; 
 &lt;li&gt;4: 0, 1, undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;ES6 provides method definitions and property shorthands for objects. So both prop2 and prop3 are treated as regular function values.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;10. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(1 &amp;lt; 2 &amp;lt; 3);
console.log(3 &amp;gt; 2 &amp;gt; 1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: true, true&lt;/li&gt; 
 &lt;li&gt;2: true, false&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError, SyntaxError,&lt;/li&gt; 
 &lt;li&gt;4: false, false&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;The important point is that if the statement contains the same operators(e.g, &amp;lt; or &amp;gt;) then it can be evaluated from left to right. The first statement follows the below order,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;console.log(1 &amp;lt; 2 &amp;lt; 3);&lt;/li&gt; 
  &lt;li&gt;console.log(true &amp;lt; 3);&lt;/li&gt; 
  &lt;li&gt;console.log(1 &amp;lt; 3); // True converted as &lt;code&gt;1&lt;/code&gt; during comparison&lt;/li&gt; 
  &lt;li&gt;True&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Whereas the second statement follows the below order,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;console.log(3 &amp;gt; 2 &amp;gt; 1);&lt;/li&gt; 
  &lt;li&gt;console.log(true &amp;gt; 1);&lt;/li&gt; 
  &lt;li&gt;console.log(1 &amp;gt; 1); // False converted as &lt;code&gt;0&lt;/code&gt; during comparison&lt;/li&gt; 
  &lt;li&gt;False&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;11. What is the output of below code in non-strict mode&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function printNumbers(first, second, first) {
  console.log(first, second, first);
}
printNumbers(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, 2, 3&lt;/li&gt; 
 &lt;li&gt;2: 3, 2, 3&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError: Duplicate parameter name not allowed in this context&lt;/li&gt; 
 &lt;li&gt;4: 1, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has duplicate parameters on 1st and 3rd parameters. The value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd argument overrides the first parameter.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In strict mode, duplicate parameters will throw a Syntax Error.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;12. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const printNumbersArrow = (first, second, first) =&amp;gt; {
  console.log(first, second, first);
};
printNumbersArrow(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, 2, 3&lt;/li&gt; 
 &lt;li&gt;2: 3, 2, 3&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError: Duplicate parameter name not allowed in this context&lt;/li&gt; 
 &lt;li&gt;4: 1, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;Unlike regular functions, the arrow functions doesn't not allow duplicate parameters in either strict or non-strict mode. So you can see &lt;code&gt;SyntaxError&lt;/code&gt; in the console.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;13. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const arrowFunc = () =&amp;gt; arguments.length;
console.log(arrowFunc(1, 2, 3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ReferenceError: arguments is not defined&lt;/li&gt; 
 &lt;li&gt;2: 3&lt;/li&gt; 
 &lt;li&gt;3: undefined&lt;/li&gt; 
 &lt;li&gt;4: null&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;Arrow functions do not have an &lt;code&gt;arguments, super, this, or new.target&lt;/code&gt; bindings. So any reference to &lt;code&gt;arguments&lt;/code&gt; variable tries to resolve to a binding in a lexically enclosing environment. In this case, the arguments variable is not defined outside of the arrow function. Hence, you will receive a reference error.&lt;/p&gt; 
 &lt;p&gt;Where as the normal function provides the number of arguments passed to the function&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const func = function () {
  return arguments.length;
};
console.log(func(1, 2, 3));
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;But If you still want to use an arrow function then rest operator on arguments provides the expected arguments&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const arrowFunc = (...args) =&amp;gt; args.length;
console.log(arrowFunc(1, 2, 3));
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;14. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(String.prototype.trimLeft.name === "trimLeft");
console.log(String.prototype.trimLeft.name === "trimStart");
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True, False&lt;/li&gt; 
 &lt;li&gt;2: False, True&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;In order to be consistent with functions like &lt;code&gt;String.prototype.padStart&lt;/code&gt;, the standard method name for trimming the whitespaces is considered as &lt;code&gt;trimStart&lt;/code&gt;. Due to web web compatibility reasons, the old method name 'trimLeft' still acts as an alias for 'trimStart'. Hence, the prototype for 'trimLeft' is always 'trimStart'&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;15. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(Math.max());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: undefined&lt;/li&gt; 
 &lt;li&gt;2: Infinity&lt;/li&gt; 
 &lt;li&gt;3: 0&lt;/li&gt; 
 &lt;li&gt;4: -Infinity&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;-Infinity is the initial comparant because almost every other value is bigger. So when no arguments are provided, -Infinity is going to be returned. &lt;strong&gt;Note:&lt;/strong&gt; Zero number of arguments is a valid case.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;16. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(10 == [10]);
console.log(10 == [[[[[[[10]]]]]]]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True, True&lt;/li&gt; 
 &lt;li&gt;2: True, False&lt;/li&gt; 
 &lt;li&gt;3: False, False&lt;/li&gt; 
 &lt;li&gt;4: False, True&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as below&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;10 === Number([10].valueOf().toString()); // 10
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So it doesn't matter about number brackets([]) around the number, it is always converted to a number in the expression.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;17. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(10 + "10");
console.log(10 - "10");
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 20, 0&lt;/li&gt; 
 &lt;li&gt;2: 1010, 0&lt;/li&gt; 
 &lt;li&gt;3: 1010, 10-10&lt;/li&gt; 
 &lt;li&gt;4: NaN, NaN&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both operands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;18. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log([0] == false);
if ([0]) {
  console.log("I'm True");
} else {
  console.log("I'm False");
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True, I'm True&lt;/li&gt; 
 &lt;li&gt;2: True, I'm False&lt;/li&gt; 
 &lt;li&gt;3: False, I'm True&lt;/li&gt; 
 &lt;li&gt;4: False, I'm False&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;In comparison operators, the expression &lt;code&gt;[0]&lt;/code&gt; converted to Number([0].valueOf().toString()) which is resolved to false. Whereas &lt;code&gt;[0]&lt;/code&gt; just becomes a truthy value without any conversion because there is no comparison operator.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;19. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log([1, 2] + [3, 4]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [1,2,3,4]&lt;/li&gt; 
 &lt;li&gt;2: [1,2][3,4]&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: 1,23,4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;20. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const numbers = new Set([1, 1, 2, 3, 4]);
console.log(numbers);

const browser = new Set("Firefox");
console.log(browser);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: {1, 2, 3, 4}, {"F", "i", "r", "e", "f", "o", "x"}&lt;/li&gt; 
 &lt;li&gt;2: {1, 2, 3, 4}, {"F", "i", "r", "e", "o", "x"}&lt;/li&gt; 
 &lt;li&gt;3: [1, 2, 3, 4], ["F", "i", "r", "e", "o", "x"]&lt;/li&gt; 
 &lt;li&gt;4: {1, 1, 2, 3, 4}, {"F", "i", "r", "e", "f", "o", "x"}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;Since &lt;code&gt;Set&lt;/code&gt; object is a collection of unique values, it won't allow duplicate values in the collection. At the same time, it is case sensitive data structure.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;21. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(NaN === NaN);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True&lt;/li&gt; 
 &lt;li&gt;2: False&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;JavaScript follows IEEE 754 spec standards. As per this spec, NaNs are never equal for floating-point numbers.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;22. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let numbers = [1, 2, 3, 4, NaN];
console.log(numbers.indexOf(NaN));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 4&lt;/li&gt; 
 &lt;li&gt;2: NaN&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: -1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The &lt;code&gt;indexOf&lt;/code&gt; uses strict equality operator(===) internally and &lt;code&gt;NaN === NaN&lt;/code&gt; evaluates to false. Since indexOf won't be able to find NaN inside an array, it returns -1 always. But you can use &lt;code&gt;Array.prototype.findIndex&lt;/code&gt; method to find out the index of NaN in an array or You can use &lt;code&gt;Array.prototype.includes&lt;/code&gt; to check if NaN is present in an array or not.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;let numbers = [1, 2, 3, 4, NaN];
console.log(numbers.findIndex(Number.isNaN)); // 4

console.log(numbers.includes(NaN)); // true
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;23. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let [a, ...b, c] = [1, 2, 3, 4, 5];
console.log(a, b, c);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, [2, 3, 4, 5]&lt;/li&gt; 
 &lt;li&gt;2: 1, {2, 3, 4, 5}&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: 1, [2, 3, 4]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;When using rest parameters, trailing commas are not allowed and will throw a SyntaxError. If you remove the trailing comma and last element then it displays 1st answer&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;let [a, ...b] = [1, 2, 3, 4, 5];
console.log(a, b); // 1, [2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;25. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;async function func() {
  return 10;
}
console.log(func());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Promise {&amp;lt;fulfilled&amp;gt;: 10}&lt;/li&gt; 
 &lt;li&gt;2: 10&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: Promise {&amp;lt;rejected&amp;gt;: 10}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;Async functions always return a promise. But even if the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise. The above async function is equivalent to below expression,&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;function func() {
  return Promise.resolve(10);
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;26. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;async function func() {
  await 10;
}
console.log(func());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Promise {&amp;lt;fulfilled&amp;gt;: 10}&lt;/li&gt; 
 &lt;li&gt;2: 10&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: Promise {&amp;lt;resolved&amp;gt;: undefined}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The await expression returns value 10 with promise resolution and the code after each await expression can be treated as existing in a &lt;code&gt;.then&lt;/code&gt; callback. In this case, there is no return expression at the end of the function. Hence, the default return value of &lt;code&gt;undefined&lt;/code&gt; is returned as the resolution of the promise. The above async function is equivalent to below expression,&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;function func() {
  return Promise.resolve(10).then(() =&amp;gt; undefined);
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;27. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function delay() {
  return new Promise(resolve =&amp;gt; setTimeout(resolve, 2000));
}

async function delayedLog(item) {
  await delay();
  console.log(item);
}

async function processArray(array) {
  array.forEach(item =&amp;gt; {
    await delayedLog(item);
  })
}

processArray([1, 2, 3, 4]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: 1, 2, 3, 4&lt;/li&gt; 
 &lt;li&gt;3: 4, 4, 4, 4&lt;/li&gt; 
 &lt;li&gt;4: 4, 3, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;Even though “processArray” is an async function, the anonymous function that we use for &lt;code&gt;forEach&lt;/code&gt; is synchronous. If you use await inside a synchronous function then it throws a syntax error.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;28. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function delay() {
  return new Promise((resolve) =&amp;gt; setTimeout(resolve, 2000));
}

async function delayedLog(item) {
  await delay();
  console.log(item);
}

async function process(array) {
  array.forEach(async (item) =&amp;gt; {
    await delayedLog(item);
  });
  console.log("Process completed!");
}
process([1, 2, 3, 5]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1 2 3 5 and Process completed!&lt;/li&gt; 
 &lt;li&gt;2: 5 5 5 5 and Process completed!&lt;/li&gt; 
 &lt;li&gt;3: Process completed! and 5 5 5 5&lt;/li&gt; 
 &lt;li&gt;4: Process completed! and 1 2 3 5&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The forEach method will not wait until all items are finished but it just runs the tasks and goes next. Hence, the last statement is displayed first followed by a sequence of promise resolutions.&lt;/p&gt; 
 &lt;p&gt;But you control the array sequence using for..of loop,&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;async function processArray(array) {
  for (const item of array) {
    await delayedLog(item);
  }
  console.log("Process completed!");
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;29. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var set = new Set();
set.add("+0").add("-0").add(NaN).add(undefined).add(NaN);
console.log(set);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Set(4) {"+0", "-0", NaN, undefined}&lt;/li&gt; 
 &lt;li&gt;2: Set(3) {"+0", NaN, undefined}&lt;/li&gt; 
 &lt;li&gt;3: Set(5) {"+0", "-0", NaN, undefined, NaN}&lt;/li&gt; 
 &lt;li&gt;4: Set(4) {"+0", NaN, undefined, NaN}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;Set has few exceptions from equality check,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;All NaN values are equal&lt;/li&gt; 
  &lt;li&gt;Both +0 and -0 considered as different values&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;30. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const sym1 = Symbol("one");
const sym2 = Symbol("one");

const sym3 = Symbol.for("two");
const sym4 = Symbol.for("two");

console.log(sym1 === sym2, sym3 === sym4);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: true, true&lt;/li&gt; 
 &lt;li&gt;2: true, false&lt;/li&gt; 
 &lt;li&gt;3: false, true&lt;/li&gt; 
 &lt;li&gt;4: false, false&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;Symbol follows below conventions,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Every symbol value returned from Symbol() is unique irrespective of the optional string.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;Symbol.for()&lt;/code&gt; function creates a symbol in a global symbol registry list. But it doesn't necessarily create a new symbol on every call, it checks first if a symbol with the given key is already present in the registry and returns the symbol if it is found. Otherwise a new symbol created in the registry.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The symbol description is just useful for debugging purposes.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;31. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const sym1 = new Symbol("one");
console.log(sym1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: one&lt;/li&gt; 
 &lt;li&gt;3: Symbol('one')&lt;/li&gt; 
 &lt;li&gt;4: Symbol&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;&lt;code&gt;Symbol&lt;/code&gt; is a just a standard function and not an object constructor(unlike other primitives new Boolean, new String and new Number). So if you try to call it with the new operator will result in a TypeError&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;32. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let myNumber = 100;
let myString = "100";

if (!typeof myNumber === "string") {
  console.log("It is not a string!");
} else {
  console.log("It is a string!");
}

if (!typeof myString === "number") {
  console.log("It is not a number!");
} else {
  console.log("It is a number!");
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: It is not a string!, It is not a number!&lt;/li&gt; 
 &lt;li&gt;3: It is not a string!, It is a number!&lt;/li&gt; 
 &lt;li&gt;4: It is a string!, It is a number!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The return value of &lt;code&gt;typeof myNumber&lt;/code&gt; or &lt;code&gt;typeof myString&lt;/code&gt; is always a truthy value (either "number" or "string"). The ! operator operates on either &lt;code&gt;typeof myNumber&lt;/code&gt; or &lt;code&gt;typeof myString&lt;/code&gt;, converting them to boolean values. Since the value of both &lt;code&gt;!typeof myNumber&lt;/code&gt; and &lt;code&gt;!typeof myString&lt;/code&gt; is false, the if condition fails, and control goes to else block.&lt;/p&gt; 
 &lt;p&gt;To make the ! operator operate on the equality expression, one needs to add parentheses:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;if (!(typeof myNumber === "string"))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Or simply use the inequality operator:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;if (typeof myNumber !== "string")
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;33. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(
  JSON.stringify({ myArray: ["one", undefined, function () {}, Symbol("")] })
);
console.log(
  JSON.stringify({ [Symbol.for("one")]: "one" }, [Symbol.for("one")])
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: {"myArray":['one', undefined, {}, Symbol]}, {}&lt;/li&gt; 
 &lt;li&gt;2: {"myArray":['one', null,null,null]}, {}&lt;/li&gt; 
 &lt;li&gt;3: {"myArray":['one', null,null,null]}, "{ [Symbol.for('one')]: 'one' }, [Symbol.for('one')]"&lt;/li&gt; 
 &lt;li&gt;4: {"myArray":['one', undefined, function(){}, Symbol('')]}, {}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;The symbols has below constraints,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;The undefined, Functions, and Symbols are not valid JSON values. So those values are either omitted (in an object) or changed to null (in an array). Hence, it returns null values for the value array.&lt;/li&gt; 
  &lt;li&gt;All Symbol-keyed properties will be completely ignored. Hence it returns an empty object({}).&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;34. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class A {
  constructor() {
    console.log(new.target.name);
  }
}

class B extends A {
  constructor() {
    super();
  }
}

new A();
new B();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: A, A&lt;/li&gt; 
 &lt;li&gt;2: A, B&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;Using constructors, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor (points to the class definition of class which is initialized) that was directly invoked by new. This also applies to the case if the constructor is in a parent class and was delegated from a child constructor.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;35. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const [x, ...y, z] = [1, 2, 3, 4];
console.log(x, y, z);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, [2, 3], 4&lt;/li&gt; 
 &lt;li&gt;2: 1, [2, 3, 4], undefined&lt;/li&gt; 
 &lt;li&gt;3: 1, [2], 3&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;It throws a syntax error because the rest element should not have a trailing comma. You should always consider using a rest operator as the last element.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;36. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const { a: x = 10, b: y = 20 } = { a: 30 };

console.log(x);
console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 30, 20&lt;/li&gt; 
 &lt;li&gt;2: 10, 20&lt;/li&gt; 
 &lt;li&gt;3: 10, undefined&lt;/li&gt; 
 &lt;li&gt;4: 30, undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;The object property follows below rules,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;The object properties can be retrieved and assigned to a variable with a different name&lt;/li&gt; 
  &lt;li&gt;The property assigned a default value when the retrieved value is &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;37. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function area({ length = 10, width = 20 }) {
  console.log(length * width);
}

area();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 200&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: undefined&lt;/li&gt; 
 &lt;li&gt;4: 0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;If you leave out the right-hand side assignment for the destructuring object, the function will look for at least one argument to be supplied when invoked. Otherwise you will receive an error &lt;code&gt;Error: Cannot read property 'length' of undefined&lt;/code&gt; as mentioned above.&lt;/p&gt; 
 &lt;p&gt;You can avoid the error with either of the below changes,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;Pass at least an empty object:&lt;/strong&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;function area({ length = 10, width = 20 }) {
  console.log(length * width);
}

area({});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="2"&gt; 
  &lt;li&gt;&lt;strong&gt;Assign default empty object:&lt;/strong&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;function area({ length = 10, width = 20 } = {}) {
  console.log(length * width);
}

area();
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;38. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const props = [
  { id: 1, name: "John" },
  { id: 2, name: "Jack" },
  { id: 3, name: "Tom" },
];

const [, , { name }] = props;
console.log(name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Tom&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: undefined&lt;/li&gt; 
 &lt;li&gt;4: John&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;It is possible to combine Array and Object destructuring. In this case, the third element in the array props accessed first followed by name property in the object.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;39. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function checkType(num = 1) {
  console.log(typeof num);
}

checkType();
checkType(undefined);
checkType("");
checkType(null);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: number, undefined, string, object&lt;/li&gt; 
 &lt;li&gt;2: undefined, undefined, string, object&lt;/li&gt; 
 &lt;li&gt;3: number, number, string, object&lt;/li&gt; 
 &lt;li&gt;4: number, number, number, number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;If the function argument is set implicitly(not passing argument) or explicitly to undefined, the value of the argument is the default parameter. Whereas for other falsy values('' or null), the value of the argument is passed as a parameter.&lt;/p&gt; 
 &lt;p&gt;Hence, the result of function calls categorized as below,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;The first two function calls logs number type since the type of default value is number&lt;/li&gt; 
  &lt;li&gt;The type of '' and null values are string and object type respectively.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;40. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function add(item, items = []) {
  items.push(item);
  return items;
}

console.log(add("Orange"));
console.log(add("Apple"));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ['Orange'], ['Orange', 'Apple']&lt;/li&gt; 
 &lt;li&gt;2: ['Orange'], ['Apple']&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;Since the default argument is evaluated at call time, a new object is created each time the function is called. So in this case, the new array is created and an element pushed to the default empty array.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;41. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function greet(greeting, name, message = greeting + " " + name) {
  console.log([greeting, name, message]);
}

greet("Hello", "John");
greet("Hello", "John", "Good morning!");
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: ['Hello', 'John', 'Hello John'], ['Hello', 'John', 'Good morning!']&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;Since parameters defined earlier are available to later default parameters, this code snippet doesn't throw any error.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;42. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function outer(f = inner()) {
  function inner() {
    return "Inner";
  }
}
outer();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ReferenceError&lt;/li&gt; 
 &lt;li&gt;2: Inner&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;The functions and variables declared in the function body cannot be referred from default value parameter initializers. If you still try to access, it throws a run-time ReferenceError(i.e, &lt;code&gt;inner&lt;/code&gt; is not defined).&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;43. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function myFun(x, y, ...manyMoreArgs) {
  console.log(manyMoreArgs);
}

myFun(1, 2, 3, 4, 5);
myFun(1, 2);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [3, 4, 5], undefined&lt;/li&gt; 
 &lt;li&gt;2: SyntaxError&lt;/li&gt; 
 &lt;li&gt;3: [3, 4, 5], []&lt;/li&gt; 
 &lt;li&gt;4: [3, 4, 5], [undefined]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;The rest parameter is used to hold the remaining parameters of a function and it becomes an empty array if the argument is not provided.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;44. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const obj = { key: "value" };
const array = [...obj];
console.log(array);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ['key', 'value']&lt;/li&gt; 
 &lt;li&gt;2: TypeError&lt;/li&gt; 
 &lt;li&gt;3: []&lt;/li&gt; 
 &lt;li&gt;4: ['key']&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;Spread syntax can be applied only to iterable objects. By default, Objects are not iterable, but they become iterable when used in an Array, or with iterating functions such as &lt;code&gt;map(), reduce(), and assign()&lt;/code&gt;. If you still try to do it, it still throws &lt;code&gt;TypeError: obj is not iterable&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;45. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function* myGenFunc() {
  yield 1;
  yield 2;
  yield 3;
}
var myGenObj = new myGenFunc();
console.log(myGenObj.next().value);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1&lt;/li&gt; 
 &lt;li&gt;2: undefined&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: TypeError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;Generators are not constructible type. But if you still proceed to do, there will be an error saying "TypeError: myGenFunc is not a constructor"&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;46. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function* yieldAndReturn() {
  yield 1;
  return 2;
  yield 3;
}

var myGenObj = yieldAndReturn();
console.log(myGenObj.next());
console.log(myGenObj.next());
console.log(myGenObj.next());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: { value: 1, done: false }, { value: 2, done: true }, { value: undefined, done: true }&lt;/li&gt; 
 &lt;li&gt;2: { value: 1, done: false }, { value: 2, done: false }, { value: undefined, done: true }&lt;/li&gt; 
 &lt;li&gt;3: { value: 1, done: false }, { value: 2, done: true }, { value: 3, done: true }&lt;/li&gt; 
 &lt;li&gt;4: { value: 1, done: false }, { value: 2, done: false }, { value: 3, done: true }&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;A return statement in a generator function will make the generator finish. If a value is returned, it will be set as the value property of the object and done property to true. When a generator is finished, subsequent next() calls return an object of this form: &lt;code&gt;{value: undefined, done: true}&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;47. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const myGenerator = (function* () {
  yield 1;
  yield 2;
  yield 3;
})();
for (const value of myGenerator) {
  console.log(value);
  break;
}

for (const value of myGenerator) {
  console.log(value);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1,2,3 and 1,2,3&lt;/li&gt; 
 &lt;li&gt;2: 1,2,3 and 4,5,6&lt;/li&gt; 
 &lt;li&gt;3: 1 and 1&lt;/li&gt; 
 &lt;li&gt;4: 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The generator should not be re-used once the iterator is closed. i.e, Upon exiting a loop(on completion or using break &amp;amp; return), the generator is closed and trying to iterate over it again does not yield any more results. Hence, the second loop doesn't print any value.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;48. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const num = 0o38;
console.log(num);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: 38&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;If you use an invalid number(outside of 0-7 range) in the octal literal, JavaScript will throw a SyntaxError. In ES5, it treats the octal literal as a decimal number.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;49. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const squareObj = new Square(10);
console.log(squareObj.area);

class Square {
  constructor(length) {
    this.length = length;
  }

  get area() {
    return this.length * this.length;
  }

  set area(value) {
    this.area = value;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 100&lt;/li&gt; 
 &lt;li&gt;2: ReferenceError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;Unlike function declarations, class declarations are not hoisted. i.e, First You need to declare your class and then access it, otherwise it will throw a ReferenceError "Uncaught ReferenceError: Square is not defined".&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Class expressions also applies to the same hoisting restrictions of class declarations.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;50. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function Person() {}

Person.prototype.walk = function () {
  return this;
};

Person.run = function () {
  return this;
};

let user = new Person();
let walk = user.walk;
console.log(walk());

let run = Person.run;
console.log(run());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: undefined, undefined&lt;/li&gt; 
 &lt;li&gt;2: Person, Person&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: Window, Window&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;When a regular or prototype method is called without a value for &lt;strong&gt;this&lt;/strong&gt;, the methods return an initial this value if the value is not undefined. Otherwise global window object will be returned. In our case, the initial &lt;code&gt;this&lt;/code&gt; value is undefined so both methods return window objects.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;51. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Vehicle {
  constructor(name) {
    this.name = name;
  }

  start() {
    console.log(`${this.name} vehicle started`);
  }
}

class Car extends Vehicle {
  start() {
    console.log(`${this.name} car started`);
    super.start();
  }
}

const car = new Car("BMW");
console.log(car.start());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: BMW vehicle started, BMW car started&lt;/li&gt; 
 &lt;li&gt;3: BMW car started, BMW vehicle started&lt;/li&gt; 
 &lt;li&gt;4: BMW car started, BMW car started&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;The super keyword is used to call methods of a superclass. Unlike other languages the super invocation doesn't need to be a first statement. i.e, The statements will be executed in the same order of code.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;52. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const USER = { age: 30 };
USER.age = 25;
console.log(USER.age);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 30&lt;/li&gt; 
 &lt;li&gt;2: 25&lt;/li&gt; 
 &lt;li&gt;3: Uncaught TypeError&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;Even though we used constant variables, the content of it is an object and the object's contents (e.g properties) can be altered. Hence, the change is going to be valid in this case.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;53. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log("🙂" === "🙂");
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: false&lt;/li&gt; 
 &lt;li&gt;2: true&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;Emojis are unicodes and the unicode for smile symbol is "U+1F642". The unicode comparison of same emojies is equivalent to string comparison. Hence, the output is always true.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;54. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(typeof typeof typeof true);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: string&lt;/li&gt; 
 &lt;li&gt;2: boolean&lt;/li&gt; 
 &lt;li&gt;3: NaN&lt;/li&gt; 
 &lt;li&gt;4: number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;The typeof operator on any primitive returns a string value. So even if you apply the chain of typeof operators on the return value, it is always string.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;55. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let zero = new Number(0);

if (zero) {
  console.log("If");
} else {
  console.log("Else");
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: If&lt;/li&gt; 
 &lt;li&gt;2: Else&lt;/li&gt; 
 &lt;li&gt;3: NaN&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;ol&gt; 
  &lt;li&gt;The type of operator on new Number always returns object. i.e, typeof new Number(0) --&amp;gt; object.&lt;/li&gt; 
  &lt;li&gt;Objects are always truthy in if block&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Hence the above code block always goes to if section.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;55. What is the output of below code in non strict mode?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let msg = "Good morning!!";

msg.name = "John";

console.log(msg.name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ""&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: John&lt;/li&gt; 
 &lt;li&gt;4: Undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;It returns undefined for non-strict mode and returns Error for strict mode. In non-strict mode, the wrapper object is going to be created and get the mentioned property. But the object get disappeared after accessing the property in next line.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;56. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let count = 10;

(function innerFunc() {
  if (count === 10) {
    let count = 11;
    console.log(count);
  }
  console.log(count);
})();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 11, 10&lt;/li&gt; 
 &lt;li&gt;2: 11, 11&lt;/li&gt; 
 &lt;li&gt;3: 10, 11&lt;/li&gt; 
 &lt;li&gt;4: 10, 10&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;11 and 10 is logged to the console.&lt;/p&gt; 
 &lt;p&gt;The innerFunc is a closure which captures the count variable from the outerscope. i.e, 10. But the conditional has another local variable &lt;code&gt;count&lt;/code&gt; which overwrites the ourter &lt;code&gt;count&lt;/code&gt; variable. So the first console.log displays value 11. Whereas the second console.log logs 10 by capturing the count variable from outerscope.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;57. What is the output of below code ?&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: console.log(true &amp;amp;&amp;amp; 'hi');&lt;/li&gt; 
 &lt;li&gt;2: console.log(true &amp;amp;&amp;amp; 'hi' &amp;amp;&amp;amp; 1);&lt;/li&gt; 
 &lt;li&gt;3: console.log(true &amp;amp;&amp;amp; '' &amp;amp;&amp;amp; 0);&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;1: hi&lt;/li&gt; 
  &lt;li&gt;2: 1&lt;/li&gt; 
  &lt;li&gt;3: ''&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Reason : The operator returns the value of the first falsy operand encountered when evaluating from left to right, or the value of the last operand if they are all truthy.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Below these values are consider as falsy value&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;1: 0&lt;/li&gt; 
  &lt;li&gt;2: ''&lt;/li&gt; 
  &lt;li&gt;3: null&lt;/li&gt; 
  &lt;li&gt;4: undefined&lt;/li&gt; 
  &lt;li&gt;5: NAN&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;58. What is the output of below code ?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let arr = [1, 2, 3];
let str = "1,2,3";

console.log(arr == str);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: false&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: true&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;Arrays have their own implementation of &lt;code&gt;toString&lt;/code&gt; method that returns a comma-separated list of elements. So the above code snippet returns true. In order to avoid conversion of array type, we should use === for comparison.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;59. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;getMessage();

var getMessage = () =&amp;gt; {
  console.log("Good morning");
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Good morning&lt;/li&gt; 
 &lt;li&gt;2: getMessage is not a function&lt;/li&gt; 
 &lt;li&gt;3: getMessage is not defined&lt;/li&gt; 
 &lt;li&gt;4: Undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;Hoisting will move variables and functions to be the top of scope. Even though getMessage is an arrow function the above function will considered as a variable due to it's variable declaration or assignment. So the variables will have undefined value in memory phase and throws an error '&lt;code&gt;getMessage&lt;/code&gt; is not a function' at the code execution phase.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;60. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let quickPromise = Promise.resolve();

quickPromise.then(() =&amp;gt; console.log("promise finished"));

console.log("program finished");
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: program finished&lt;/li&gt; 
 &lt;li&gt;2: Cannot predict the order&lt;/li&gt; 
 &lt;li&gt;3: program finished, promise finished&lt;/li&gt; 
 &lt;li&gt;4: promise finished, program finished&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;Even though a promise is resolved immediately, it won't be executed immediately because its &lt;strong&gt;.then/catch/finally&lt;/strong&gt; handlers or callbacks(aka task) are pushed into the queue. Whenever the JavaScript engine becomes free from the current program, it pulls a task from the queue and executes it. This is the reason why last statement is printed first before the log of promise handler.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We call the above queue as "MicroTask Queue"&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;61. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console
  .log("First line")
  [("a", "b", "c")].forEach((element) =&amp;gt; console.log(element));
console.log("Third line");
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: &lt;code&gt;First line&lt;/code&gt;, then print &lt;code&gt;a, b, c&lt;/code&gt; in a new line, and finally print &lt;code&gt;Third line&lt;/code&gt; as next line&lt;/li&gt; 
 &lt;li&gt;2: &lt;code&gt;First line&lt;/code&gt;, then print &lt;code&gt;a, b, c&lt;/code&gt; in a first line, and print &lt;code&gt;Third line&lt;/code&gt; as next line&lt;/li&gt; 
 &lt;li&gt;3: Missing semi-colon error&lt;/li&gt; 
 &lt;li&gt;4: Cannot read properties of undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;When JavaScript encounters a line break without a semicolon, the JavaScript parser will automatically add a semicolon based on a set of rules called &lt;code&gt;Automatic Semicolon Insertion&lt;/code&gt; which determines whether line break as end of statement or not to insert semicolon. But it does not assume a semicolon before square brackets [...]. So the first two lines considered as a single statement as below.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;console
  .log("First line")
  [("a", "b", "c")].forEach((element) =&amp;gt; console.log(element));
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Hence, there will be &lt;strong&gt;cannot read properties of undefined&lt;/strong&gt; error while applying the array square bracket on log function.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;62. Write a function that returns a random HEX color&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Solution 1 (Iterative generation)&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const HEX_ALPHABET = [
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
];
const HEX_PREFIX = "#";
const HEX_LENGTH = 6;

function generateRandomHex() {
  let randomHex = "";

  for (let i = 0; i &amp;lt; HEX_LENGTH; i++) {
    const randomIndex = Math.floor(Math.random() * HEX_ALPHABET.length);
    randomHex += HEX_ALPHABET[randomIndex];
  }

  return HEX_PREFIX + randomHex;
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Solution 2 (One-liner)&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const HEX_PREFIX = "#";
const HEX_RADIX = 16;
const HEX_LENGTH = 6;

function generateRandomHex() {
  return (
    HEX_PREFIX +
    Math.floor(Math.random() * 0xffffff)
      .toString(HEX_RADIX)
      .padStart(HEX_LENGTH, "0")
  );
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;63. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var of = ["of"];
for (var of of of) {
  console.log(of);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: of&lt;/li&gt; 
 &lt;li&gt;2: SyntaxError: Unexpected token of&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError: Identifier 'of' has already been declared&lt;/li&gt; 
 &lt;li&gt;4: ReferenceError: of is not defined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;In JavaScript, &lt;code&gt;of&lt;/code&gt; is not considered as a reserved keyword. So the variable declaration with &lt;code&gt;of&lt;/code&gt; is accepted and prints the array value &lt;code&gt;of&lt;/code&gt; using for..of loop.&lt;/p&gt; 
 &lt;p&gt;But if you use reserved keyword such as &lt;code&gt;in&lt;/code&gt; then there will be a syntax error saying &lt;code&gt;SyntaxError: Unexpected token in&lt;/code&gt;,&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;var in = ['in'];
for(var in in in) {
  console.log(in[in]);
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;64. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const numbers = [11, 25, 31, 23, 33, 18, 200];
numbers.sort();
console.log(numbers);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [11, 18, 23, 25, 31, 33, 200]&lt;/li&gt; 
 &lt;li&gt;2: [11, 18, 200, 23, 25, 31, 33]&lt;/li&gt; 
 &lt;li&gt;3: [11, 25, 31, 23, 33, 18, 200]&lt;/li&gt; 
 &lt;li&gt;4: Cannot sort numbers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;By default, the sort method sorts elements alphabetically. This is because elemented converted to strings and strings compared in UTF-16 code units order. Hence, you will see the above numbers not sorted as expected. In order to sort numerically just supply a comparator function which handles numeric sorts.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const numbers = [11, 25, 31, 23, 33, 18, 200];
numbers.sort((a, b) =&amp;gt; a - b);
console.log(numbers);
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sort() method changes the original array.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;65. What is the output order of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;setTimeout(() =&amp;gt; {
  console.log("1");
}, 0);
Promise.resolve("hello").then(() =&amp;gt; console.log("2"));
console.log("3");
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, 2, 3&lt;/li&gt; 
 &lt;li&gt;2: 1, 3, 2&lt;/li&gt; 
 &lt;li&gt;3: 3, 1, 2&lt;/li&gt; 
 &lt;li&gt;4: 3, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;When the JavaScript engine parses the above code, the first two statements are asynchronous which will be executed later and third statement is synchronous statement which will be moved to callstack, executed and prints the number 3 in the console. Next, Promise is native in ES6 and it will be moved to Job queue which has high priority than callback queue in the execution order. At last, since setTimeout is part of WebAPI the callback function moved to callback queue and executed. Hence, you will see number 2 printed first followed by 1.&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;66. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(name);
console.log(message());
var name = "John";
(function message() {
  console.log("Hello John: Welcome");
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: John, Hello John: Welcome&lt;/li&gt; 
 &lt;li&gt;2: undefined, Hello John, Welcome&lt;/li&gt; 
 &lt;li&gt;3: Reference error: name is not defined, Reference error: message is not defined&lt;/li&gt; 
 &lt;li&gt;4: undefined, Reference error: message is not defined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;IIFE(Immediately Invoked Function Expression) is just like any other function expression which won't be hoisted. Hence, there will be a reference error for message call. The behavior would be the same with below function expression of message1,&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(name);
console.log(message());
var name = 'John';
var message = function () {
   console.log('Hello John: Welcome');
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;67. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;message();

function message() {
  console.log("Hello");
}
function message() {
  console.log("Bye");
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Reference error: message is not defined&lt;/li&gt; 
 &lt;li&gt;2: Hello&lt;/li&gt; 
 &lt;li&gt;3: Bye&lt;/li&gt; 
 &lt;li&gt;4: Compile time error&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;As part of hoisting, initially JavaScript Engine or compiler will store first function in heap memory but later rewrite or replaces with redefined function content.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;68. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var currentCity = "NewYork";

var changeCurrentCity = function () {
  console.log("Current City:", currentCity);
  var currentCity = "Singapore";
  console.log("Current City:", currentCity);
};

changeCurrentCity();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: NewYork, Singapore&lt;/li&gt; 
 &lt;li&gt;2: NewYork, NewYork&lt;/li&gt; 
 &lt;li&gt;3: undefined, Singapore&lt;/li&gt; 
 &lt;li&gt;4: Singapore, Singapore&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;Due to hositing feature, the variables declared with &lt;code&gt;var&lt;/code&gt; will have &lt;code&gt;undefined&lt;/code&gt; value in the creation phase so the outer variable &lt;code&gt;currentCity&lt;/code&gt; will get same &lt;code&gt;undefined&lt;/code&gt; value. But after few lines of code JavaScript engine found a new function call(&lt;code&gt;changeCurrentCity()&lt;/code&gt;) to update the current city with &lt;code&gt;var&lt;/code&gt; re-declaration. Since each function call will create a new execution context, the same variable will have &lt;code&gt;undefined&lt;/code&gt; value before the declaration and new value(&lt;code&gt;Singapore&lt;/code&gt;) after the declaration. Hence, the value &lt;code&gt;undefined&lt;/code&gt; print first followed by new value &lt;code&gt;Singapore&lt;/code&gt; in the execution phase.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;69. What is the output of below code in an order?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function second() {
  var message;
  console.log(message);
}

function first() {
  var message = "first";
  second();
  console.log(message);
}

var message = "default";
first();
console.log(message);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: undefined, first, default&lt;/li&gt; 
 &lt;li&gt;2: default, default, default&lt;/li&gt; 
 &lt;li&gt;3: first, first, default&lt;/li&gt; 
 &lt;li&gt;4: undefined, undefined, undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;Each context(global or functional) has it's own variable environment and the callstack of variables in a LIFO order. So you can see the message variable value from second, first functions in an order followed by global context message variable value at the end.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;70. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var expressionOne = function functionOne() {
  console.log("functionOne");
};
functionOne();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: functionOne is not defined&lt;/li&gt; 
 &lt;li&gt;2: functionOne&lt;/li&gt; 
 &lt;li&gt;3: console.log("functionOne")&lt;/li&gt; 
 &lt;li&gt;4: undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;The function call &lt;code&gt;functionOne&lt;/code&gt; is not going to be part of scope chain and it has it's own execution context with the enclosed variable environment. i.e, It won't be accessed from global context. Hence, there will be an error while invoking the function as &lt;code&gt;functionOne is not defined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;71. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
  name: "John",
  eat() {
    console.log(this);
    var eatFruit = function () {
      console.log(this);
    };
    eatFruit();
  },
};
user.eat();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: {name: "John", eat: f}, {name: "John", eat: f}&lt;/li&gt; 
 &lt;li&gt;2: Window {...}, Window {...}&lt;/li&gt; 
 &lt;li&gt;3: {name: "John", eat: f}, undefined&lt;/li&gt; 
 &lt;li&gt;4: {name: "John", eat: f}, Window {...}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;&lt;code&gt;this&lt;/code&gt; keyword is dynamic scoped but not lexically scoped . In other words, it doesn't matter where &lt;code&gt;this&lt;/code&gt; has been written but how it has been invoked really matter. In the above code snippet, the &lt;code&gt;user&lt;/code&gt; object invokes &lt;code&gt;eat&lt;/code&gt; function so &lt;code&gt;this&lt;/code&gt; keyword refers to &lt;code&gt;user&lt;/code&gt; object but &lt;code&gt;eatFruit&lt;/code&gt; has been invoked by &lt;code&gt;eat&lt;/code&gt; function and &lt;code&gt;this&lt;/code&gt; will have default &lt;code&gt;Window&lt;/code&gt; object.&lt;/p&gt; 
 &lt;p&gt;The above pit fall fixed by three ways,&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;In ES6, the arrow function will make &lt;code&gt;this&lt;/code&gt; keyword as lexically scoped. Since the surrounding object of &lt;code&gt;this&lt;/code&gt; object is &lt;code&gt;user&lt;/code&gt; object, the &lt;code&gt;eatFruit&lt;/code&gt; function will contain &lt;code&gt;user&lt;/code&gt; object for &lt;code&gt;this&lt;/code&gt; object.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
  name: "John",
  eat() {
    console.log(this);
    var eatFruit = () =&amp;gt; {
      console.log(this);
    };
    eatFruit();
  },
};
user.eat();
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The next two solutions have been used before ES6 introduced.&lt;/p&gt; 
 &lt;ol start="2"&gt; 
  &lt;li&gt;It is possible create a reference of &lt;code&gt;this&lt;/code&gt; into a separate variable and use that new variable inplace of &lt;code&gt;this&lt;/code&gt; keyword inside &lt;code&gt;eatFruit&lt;/code&gt; function. This is a common practice in jQuery and AngularJS before ES6 introduced.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
  name: "John",
  eat() {
    console.log(this);
    var self = this;
    var eatFruit = () =&amp;gt; {
      console.log(self);
    };
    eatFruit();
  },
};
user.eat();
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="3"&gt; 
  &lt;li&gt;The &lt;code&gt;eatFruit&lt;/code&gt; function can bind explicitly with &lt;code&gt;this&lt;/code&gt; keyword where it refers &lt;code&gt;Window&lt;/code&gt; object.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
  name: "John",
  eat() {
    console.log(this);
    var eatFruit = function () {
      console.log(this);
    };
    return eatFruit.bind(this);
  },
};
user.eat()();
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;72. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let message = "Hello World!";
message[0] = "J";
console.log(message);

let name = "John";
name = name + " Smith";
console.log(name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Jello World!, John Smith&lt;/li&gt; 
 &lt;li&gt;2: Jello World!, John&lt;/li&gt; 
 &lt;li&gt;3: Hello World!, John Smith&lt;/li&gt; 
 &lt;li&gt;4: Hello World!, John&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;In JavaScript, primitives are immutable i.e. there is no way to change a primitive value once it gets created. So when you try to update the string's first character, there is no change in the string value and prints the same initial value &lt;code&gt;Hello World!&lt;/code&gt;. Whereas in the later example, the concatenated value is re-assigned to the same variable which will result into creation of new memory block with the reference pointing to &lt;code&gt;John Smith&lt;/code&gt; value and the old memory block value(&lt;code&gt;John&lt;/code&gt;) will be garbage collected.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;73. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let user1 = {
  name: "Jacob",
  age: 28,
};

let user2 = {
  name: "Jacob",
  age: 28,
};

console.log(user1 === user2);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True&lt;/li&gt; 
 &lt;li&gt;2: False&lt;/li&gt; 
 &lt;li&gt;3: Compile time error&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;In JavaScript, the variables such as objects, arrays and functions comes under pass by reference. When you try to compare two objects with same content, it is going to compare memory address or reference of those variables. These variables always create separate memory blocks hence the comparison is always going to return false value.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;74. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function greeting() {
  setTimeout(function () {
    console.log(message);
  }, 5000);
  const message = "Hello, Good morning";
}
greeting();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Undefined&lt;/li&gt; 
 &lt;li&gt;2: Reference error:&lt;/li&gt; 
 &lt;li&gt;3: Hello, Good morning&lt;/li&gt; 
 &lt;li&gt;4: null&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;The variable &lt;code&gt;message&lt;/code&gt; is still treated as closure(since it has been used in inner function) eventhough it has been declared after setTimeout function. The function with in setTimeout function will be sent to WebAPI and the variable declaration executed with in 5 seconds with the assigned value. Hence, the text declared for the variable will be displayed.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;75. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const a = new Number(10);
const b = 10;
console.log(a === b);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: False&lt;/li&gt; 
 &lt;li&gt;2: True&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;Eventhough both variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; refer a number value, the first declaration is based on constructor function and the type of the variable is going to be &lt;code&gt;object&lt;/code&gt; type. Whereas the second declaration is primitive assignment with a number and the type is &lt;code&gt;number&lt;/code&gt; type. Hence, the equality operator &lt;code&gt;===&lt;/code&gt; will output &lt;code&gt;false&lt;/code&gt; value.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;76. What is the type of below function?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function add(a, b) {
  console.log("The input arguments are: ", a, b);
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Pure function&lt;/li&gt; 
 &lt;li&gt;2: Impure function&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;Eventhough the above function returns the same result for the same arguments(input) that are passed in the function, the &lt;code&gt;console.log()&lt;/code&gt; statement causes a function to have side effects because it affects the state of an external code. i.e, the &lt;code&gt;console&lt;/code&gt; object's state and depends on it to perform the job. Hence, the above function considered as impure function.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;77. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const promiseOne = new Promise((resolve, reject) =&amp;gt; setTimeout(resolve, 4000));
const promiseTwo = new Promise((resolve, reject) =&amp;gt; setTimeout(reject, 4000));

Promise.all([promiseOne, promiseTwo]).then((data) =&amp;gt; console.log(data));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [{status: "fulfilled", value: undefined}, {status: "rejected", reason: undefined}]&lt;/li&gt; 
 &lt;li&gt;2: [{status: "fulfilled", value: undefined}, Uncaught(in promise)]&lt;/li&gt; 
 &lt;li&gt;3: Uncaught (in promise)&lt;/li&gt; 
 &lt;li&gt;4: [Uncaught(in promise), Uncaught(in promise)]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;The above promises settled at the same time but one of them resolved and other one rejected. When you use &lt;code&gt;.all&lt;/code&gt; method on these promises, the result will be short circuted by throwing an error due to rejection in second promise. But If you use &lt;code&gt;.allSettled&lt;/code&gt; method then result of both the promises will be returned irrespective of resolved or rejected promise status without throwing any error.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;Promise.allSettled([promiseOne, promiseTwo]).then((data) =&amp;gt; console.log(data));
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;78. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;try {
  setTimeout(() =&amp;gt; {
    console.log("try block");
    throw new Error(`An exception is thrown`);
  }, 1000);
} catch (err) {
  console.log("Error: ", err);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: try block, Error: An exception is thrown&lt;/li&gt; 
 &lt;li&gt;2: Error: An exception is thrown&lt;/li&gt; 
 &lt;li&gt;3: try block, Uncaught Error: Exception is thrown&lt;/li&gt; 
 &lt;li&gt;4: Uncaught Error: Exception is thrown&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;If you put &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; methods inside the try clause and an exception is thrown, the catch clause will not catch any of them. This is because the try...catch statement works synchronously, and the function in the above code is executed asynchronously after a certain period of time. Hence, you will see runtime exception without catching the error. To resolve this issue, you have to put the try...catch block inside the function as below,&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;setTimeout(() =&amp;gt; {
  try {
    console.log("try block");
    throw new Error(`An exception is thrown`);
  } catch (err) {
    console.log("Error: ", err);
  }
}, 1000);
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can use &lt;code&gt;.catch()&lt;/code&gt; function in promises to avoid these issues with asynchronous code.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;79. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let a = 10;
if (true) {
  let a = 20;
  console.log(a, "inside");
}
console.log(a, "outside");
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 20, "inside" and 20, "outside"&lt;/li&gt; 
 &lt;li&gt;2: 20, "inside" and 10, "outside"&lt;/li&gt; 
 &lt;li&gt;3: 10, "inside" and 10, "outside"&lt;/li&gt; 
 &lt;li&gt;4: 10, "inside" and 20, "outside"&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 2&lt;/h5&gt; 
 &lt;p&gt;The variable "a" declared inside "if" has block scope and does not affect the value of the outer "a" variable.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;80. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let arr = [1, 2, 3, 4, 5, -6, 7];
arr.length = 0;
console.log(arr);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 0&lt;/li&gt; 
 &lt;li&gt;2: Undefined&lt;/li&gt; 
 &lt;li&gt;3: null&lt;/li&gt; 
 &lt;li&gt;4: [ ]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The length of the array 'arr' has been set to 0, so the array becomes empty.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; --- 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;81. How do you verify two strings are anagrams or not?&lt;/h4&gt; 
&lt;p&gt;An anagram is a word or phrase formed by rearranging all the letters of a different word or phrase exactly once. For example, the anagrams of "eat" word are "tea" and "ate".&lt;/p&gt; 
&lt;p&gt;You can split each word into characters, followed by sort action and later join them back. After that you can compare those two words to verify whether those two words are anagrams or not.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function verifyAnagrams(word1, word2) {
  return word1.split("").sort().join("") === word2.split("").sort().join("");
}
console.log(verifyAnagrams("eat", "ate"));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;82. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;printHello();

printMessage();

function printHello() {
  console.log("Hello");

  function printMessage() {
    console.log("Good day");
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Hello, Good day&lt;/li&gt; 
 &lt;li&gt;2: Reference Error: printHello is not defined, Reference Error: printMessage is not defined&lt;/li&gt; 
 &lt;li&gt;3: Reference Error: printHello is not defined, Good day&lt;/li&gt; 
 &lt;li&gt;4: Hello, Reference Error: printMessage is not defined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 4&lt;/h5&gt; 
 &lt;p&gt;The function &lt;code&gt;printHello&lt;/code&gt; is hoisted to the top of the global scope and prints "Hello" to the console. Even &lt;code&gt;printMessage&lt;/code&gt; function is hoisted, but it is lifted to the local scope(in "printHello") it was declared in. That is the reason you will endup with reference error for second function call.&lt;/p&gt; 
 &lt;p&gt;But if the second function is invoked in the first function itself, there won't be any reference error.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;printHello();

function printHello() {
  printMessage();
  console.log("Hello");

  function printMessage() {
    console.log("Good day");
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; --- 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;83. What is the time taken to execute below timeout callback?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log("Start code");

setTimeout(function () {
  console.log("Callback code");
}, 5000);

console.log("After callback");

let startTime = new Date().getTime();
let endTime = startTime;

while (endTime &amp;lt;= startTime + 10000) {
  endTime = new Date().getTime();
}

console.log("End code");
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: &amp;gt; 10 sec&lt;/li&gt; 
 &lt;li&gt;2: Immediately&lt;/li&gt; 
 &lt;li&gt;3: &amp;lt; 10 sec&lt;/li&gt; 
 &lt;li&gt;4: &amp;lt;= 5sec&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;Even though there is a timer of 5 seconds supplied to &lt;code&gt;setTimeout&lt;/code&gt; callback, it won't get executed until the main thread is free and finished executing the remaining part of the code. In this example, the remaining code(while loop) takes 10seconds to finish it's execution. In the mean time, the callback will be stored in callback queue upon completion of its 5 seconds timer. After 10 seconds, the callback will be moved to callstack because the callstack is empty by poping out global execution context.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;84. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let arr = ["wöchentlich", "Woche", "wäre", "Wann"];
console.log(arr.sort());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ['wöchentlich','Woche', 'wäre', 'Wann']&lt;/li&gt; 
 &lt;li&gt;2: ['Wann', 'wäre', 'Woche', 'wöchentlich']&lt;/li&gt; 
 &lt;li&gt;3: ['Wann', 'Woche', 'wäre', 'wöchentlich']&lt;/li&gt; 
 &lt;li&gt;4: ['wäre', 'Wann', 'wöchentlich','Woche']&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 3&lt;/h5&gt; 
 &lt;p&gt;Javascript has a native method sort that allows sorting an array of elements in-place. It will treat each element as a string and sort it alphabetically. But if you try to sort an array of strings which has non-ASCII characters, you will receive a strange result. This is because characters with an accent have higher character codes.&lt;/p&gt; 
 &lt;p&gt;In this case, the sort order of an array is ['Wann', 'Woche', 'wäre', 'wöchentlich'].&lt;/p&gt; 
 &lt;p&gt;If you want to sort an array of string values which has non-ASCII characters in an ascending order, there are two possible options like &lt;strong&gt;localeCompare&lt;/strong&gt; and &lt;strong&gt;Intl.Collator&lt;/strong&gt; provided by ECMAScript Internationalization API.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;localeCompare:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;let arr = ["wöchentlich", "Woche", "wäre", "Wann"];
console.log(arr.sort((a, b) =&amp;gt; a.localeCompare(b))); //['Wann', 'wäre', 'Woche', 'wöchentlich']
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Intl.Collator:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;let arr = ["wöchentlich", "Woche", "wäre", "Wann"];
console.log(arr.sort(Intl.Collator().compare)); //['Wann', 'wäre', 'Woche', 'wöchentlich']
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;85. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function func(a, b = 2) {
  console.log(arguments.length);
}

func(undefined);
func();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, 0&lt;/li&gt; 
 &lt;li&gt;2: 0, 0&lt;/li&gt; 
 &lt;li&gt;3: 0, 1&lt;/li&gt; 
 &lt;li&gt;4: 1, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;If a function is called with &lt;code&gt;undefined&lt;/code&gt;, the &lt;code&gt;undefined&lt;/code&gt; value is treated as a parameter. But if the function is not passed with any parameters, the &lt;code&gt;arguments&lt;/code&gt; object doesn't include any argument eventhough the function has default function parameter. Hence, the function invocation with &lt;code&gt;undefined&lt;/code&gt; has one argument and function call without any arguments has 0 arguments.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;86. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function func(a, b = 2) {
  console.log(arguments.length);
}

func(undefined);
func();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, 0&lt;/li&gt; 
 &lt;li&gt;2: 0, 0&lt;/li&gt; 
 &lt;li&gt;3: 0, 1&lt;/li&gt; 
 &lt;li&gt;4: 1, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h5&gt;Answer: 1&lt;/h5&gt; 
 &lt;p&gt;If a function is called with &lt;code&gt;undefined&lt;/code&gt;, the &lt;code&gt;undefined&lt;/code&gt; value is treated as a parameter. But if the function is not passed with any parameters, the &lt;code&gt;arguments&lt;/code&gt; object doesn't include any argument eventhough the function has default function parameter. Hence, the function invocation with &lt;code&gt;undefined&lt;/code&gt; has one argument and function call without any arguments has 0 arguments.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents"&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;The questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask — do not get discouraged if you don't know the answer to all of them ⁠— that is ok!&lt;/p&gt; 
&lt;p&gt;Good luck with your interview 😊&lt;/p&gt; 
&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>axios/axios</title>
      <link>https://github.com/axios/axios</link>
      <description>&lt;p&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt;&lt;hr&gt;&lt;h3 align="center"&gt; 🥇 Gold sponsors &lt;br /&gt; &lt;/h3&gt; 
&lt;table align="center" width="100%"&gt;
 &lt;tbody&gt;
  &lt;tr width="33.333333333333336%"&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://stytch.com/?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_content=website-link&amp;amp;utm_campaign=axios-http" style="padding: 10px; display: inline-block" target="_blank"&gt; 
     &lt;picture&gt; 
      &lt;source width="200px" height="38px" media="(prefers-color-scheme: dark)" srcset="https://axios-http.com/assets/sponsors/stytch_white.png" /&gt; 
      &lt;img width="200px" height="38px" src="https://axios-http.com/assets/sponsors/stytch.png" alt="Stytch" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;p align="center" title="API-first authentication, authorization, and fraud prevention"&gt;API-first authentication, authorization, and fraud prevention&lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://stytch.com/?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_content=website-link&amp;amp;utm_campaign=axios-http" target="_blank"&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://stytch.com/docs?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_content=docs-link&amp;amp;utm_campaign=axios-http" target="_blank"&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://github.com/stytchauth/stytch-node?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_content=node-sdk&amp;amp;utm_campaign=axios-http" target="_blank"&gt;&lt;b&gt;Node.js&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://www.principal.com/about-us?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship" style="padding: 10px; display: inline-block" target="_blank"&gt; &lt;img width="133px" height="43px" src="https://axios-http.com/assets/sponsors/principal.svg?sanitize=true" alt="Principal Financial Group" /&gt; &lt;/a&gt; &lt;p align="center" title="We’re bound by one common purpose: to give you the financial tools, resources and information you need to live your best life."&gt;We’re bound by one common purpose: to give you the financial tools, resources and information you ne...&lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://www.principal.com/about-us?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship" target="_blank"&gt;&lt;b&gt;www.principal.com&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://twicsy.com/buy-instagram-followers?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship" style="padding: 10px; display: inline-block" target="_blank"&gt; &lt;img width="85px" height="70px" src="https://axios-http.com/assets/sponsors/opencollective/dfa9670ad5e66eea17315332453c7f4e3a3b5905.png" alt="Buy Instagram Followers Twicsy" /&gt; &lt;/a&gt; &lt;p align="center" title="Buy real Instagram followers from Twicsy starting at only $2.97. Twicsy has been voted the best site to buy followers from the likes of US Magazine."&gt;Buy real Instagram followers from Twicsy starting at only $2.97. Twicsy has been voted the best site...&lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://twicsy.com/buy-instagram-followers?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship" target="_blank"&gt;&lt;b&gt;twicsy.com&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr width="33.333333333333336%"&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://www.descope.com/?utm_source=axios&amp;amp;utm_medium=referral&amp;amp;utm_campaign=axios-oss-sponsorship" style="padding: 10px; display: inline-block" target="_blank"&gt; 
     &lt;picture&gt; 
      &lt;source width="200px" height="52px" media="(prefers-color-scheme: dark)" srcset="https://axios-http.com/assets/sponsors/descope_white.png" /&gt; 
      &lt;img width="200px" height="52px" src="https://axios-http.com/assets/sponsors/descope.png" alt="Descope" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;p align="center" title="Hi, we're Descope! We are building something in the authentication space for app developers and can’t wait to place it in your hands."&gt;Hi, we're Descope! We are building something in the authentication space for app developers and...&lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://www.descope.com/?utm_source=axios&amp;amp;utm_medium=referral&amp;amp;utm_campaign=axios-oss-sponsorship" target="_blank"&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://docs.descope.com/?utm_source=axios&amp;amp;utm_medium=referral&amp;amp;utm_campaign=axios-oss-sponsorship" target="_blank"&gt;&lt;b&gt;Docs&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://www.descope.com/community?utm_source=axios&amp;amp;utm_medium=referral&amp;amp;utm_campaign=axios-oss-sponsorship" target="_blank"&gt;&lt;b&gt;Community&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://route4me.com/?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship" style="padding: 10px; display: inline-block" target="_blank"&gt; 
     &lt;picture&gt; 
      &lt;source width="200px" height="51px" media="(prefers-color-scheme: dark)" srcset="https://axios-http.com/assets/sponsors/route4me_white.png" /&gt; 
      &lt;img width="200px" height="51px" src="https://axios-http.com/assets/sponsors/route4me.png" alt="Route4Me" /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;p align="center" title="Best Route Planning And Route Optimization Software"&gt;Best Route Planning And Route Optimization Software&lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://route4me.com/platform/route-optimization-software?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship" target="_blank"&gt;&lt;b&gt;Explore&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://route4me.com/platform/marketplace/pricing?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship" target="_blank"&gt;&lt;b&gt;Free Trial&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://route4me.com/contact?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship" target="_blank"&gt;&lt;b&gt;Contact&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://buzzoid.com/buy-instagram-followers/?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship" style="padding: 10px; display: inline-block" target="_blank"&gt; &lt;img width="62px" height="70px" src="https://axios-http.com/assets/sponsors/opencollective/e1625cb54e10ee40180c99d1495a462e9d6664a4.png" alt="Buzzoid - Buy Instagram Followers" /&gt; &lt;/a&gt; &lt;p align="center" title="At Buzzoid, you can buy Instagram followers quickly, safely, and easily with just a few clicks. Rated world's #1 IG service since 2012."&gt;At Buzzoid, you can buy Instagram followers quickly, safely, and easily with just a few clicks. Rate...&lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://buzzoid.com/buy-instagram-followers/?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship" target="_blank"&gt;&lt;b&gt;buzzoid.com&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr width="33.333333333333336%"&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://www.famety.net/?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship" style="padding: 10px; display: inline-block" target="_blank"&gt; &lt;img width="70px" height="70px" src="https://axios-http.com/assets/sponsors/opencollective/56645c65d4bad0ab84265e02430d19d64afde927.png" alt="Famety - Buy Instagram Followers" /&gt; &lt;/a&gt; &lt;p align="center" title="At Famety, you can grow your social media following quickly, safely, and easily with just a few clicks. Rated the world’s #1 social media service since 2013."&gt;At Famety, you can grow your social media following quickly, safely, and easily with just a few clic...&lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://www.famety.net/?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship" target="_blank"&gt;&lt;b&gt;www.famety.net&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://poprey.com/?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship" style="padding: 10px; display: inline-block" target="_blank"&gt; &lt;img width="70px" height="70px" src="https://axios-http.com/assets/sponsors/opencollective/e699ec99f7df3a203ddbc49d3c7712a907e628ea.png" alt="Poprey - Buy Instagram Likes" /&gt; &lt;/a&gt; &lt;p align="center" title="Buy Instagram Likes"&gt;Buy Instagram Likes&lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://poprey.com/?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship" target="_blank"&gt;&lt;b&gt;poprey.com&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://requestly.com/?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship" style="padding: 10px; display: inline-block" target="_blank"&gt; &lt;img width="71px" height="70px" src="https://axios-http.com/assets/sponsors/opencollective/16450b4dc0deb9dab5a511bf2bc8b8b4ac33412f.png" alt="Requestly" /&gt; &lt;/a&gt; &lt;p align="center" title="A lightweight open-source API Development, Testing &amp;amp; Mocking platform"&gt;A lightweight open-source API Development, Testing &amp;amp; Mocking platform&lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://requestly.com/?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship" target="_blank"&gt;&lt;b&gt;requestly.com&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr width="33.333333333333336%"&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://opencollective.com/axios/contribute" target="_blank"&gt;💜 Become a sponsor&lt;/a&gt; &lt;/td&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://opencollective.com/axios/contribute" target="_blank"&gt;💜 Become a sponsor&lt;/a&gt; &lt;/td&gt;
   &lt;td align="center" width="33.333333333333336%"&gt; &lt;a href="https://opencollective.com/axios/contribute" target="_blank"&gt;💜 Become a sponsor&lt;/a&gt; &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!--&lt;div&gt;marker&lt;/div&gt;--&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://axios-http.com"&gt;&lt;img src="https://axios-http.com/assets/logo.svg?sanitize=true" alt="Axios" /&gt;&lt;/a&gt;
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://axios-http.com/"&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; • &lt;a href="https://axios-http.com/docs/intro"&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://www.npmjs.org/package/axios"&gt;&lt;img src="https://img.shields.io/npm/v/axios.svg?style=flat-square" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/axios"&gt;&lt;img src="https://img.shields.io/cdnjs/v/axios.svg?style=flat-square" alt="CDNJS" /&gt;&lt;/a&gt; &lt;a href="https://github.com/axios/axios/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/axios/axios/ci.yml?branch=v1.x&amp;amp;label=CI&amp;amp;logo=github&amp;amp;style=flat-square" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/axios/axios"&gt;&lt;img src="https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&amp;amp;style=flat-square" alt="Gitpod Ready-to-Code" /&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/r/mzabriskie/axios"&gt;&lt;img src="https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square" alt="code coverage" /&gt;&lt;/a&gt; &lt;a href="https://packagephobia.now.sh/result?p=axios"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?url=https://packagephobia.com/v2/api.json?p=axios&amp;amp;query=$.install.pretty&amp;amp;label=install%20size&amp;amp;style=flat-square" alt="install size" /&gt;&lt;/a&gt; &lt;a href="https://bundlephobia.com/package/axios@latest"&gt;&lt;img src="https://img.shields.io/bundlephobia/minzip/axios?style=flat-square" alt="npm bundle size" /&gt;&lt;/a&gt; &lt;a href="https://npm-stat.com/charts.html?package=axios"&gt;&lt;img src="https://img.shields.io/npm/dm/axios.svg?style=flat-square" alt="npm downloads" /&gt;&lt;/a&gt; &lt;a href="https://gitter.im/mzabriskie/axios"&gt;&lt;img src="https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square" alt="gitter chat" /&gt;&lt;/a&gt; &lt;a href="https://www.codetriage.com/axios/axios"&gt;&lt;img src="https://www.codetriage.com/axios/axios/badges/users.svg?sanitize=true" alt="code helpers" /&gt;&lt;/a&gt; &lt;a href="https://snyk.io/test/npm/axios"&gt;&lt;img src="https://snyk.io/test/npm/axios/badge.svg?sanitize=true" alt="Known Vulnerabilities" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/CONTRIBUTORS.md"&gt;&lt;img src="https://img.shields.io/github/contributors/axios/axios.svg?style=flat-square" alt="Contributors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#browser-support"&gt;Browser Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#installing"&gt;Installing&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#package-manager"&gt;Package manager&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#cdn"&gt;CDN&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#example"&gt;Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#axios-api"&gt;Axios API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#request-method-aliases"&gt;Request method aliases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#concurrency-deprecated"&gt;Concurrency 👎&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#creating-an-instance"&gt;Creating an instance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#instance-methods"&gt;Instance methods&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#request-config"&gt;Request Config&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#response-schema"&gt;Response Schema&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#config-defaults"&gt;Config Defaults&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#global-axios-defaults"&gt;Global axios defaults&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#custom-instance-defaults"&gt;Custom instance defaults&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#config-order-of-precedence"&gt;Config order of precedence&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#interceptors"&gt;Interceptors&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#multiple-interceptors"&gt;Multiple Interceptors&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#handling-errors"&gt;Handling Errors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#cancellation"&gt;Cancellation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#abortcontroller"&gt;AbortController&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#canceltoken-deprecated"&gt;CancelToken 👎&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#using-applicationx-www-form-urlencoded-format"&gt;Using application/x-www-form-urlencoded format&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#urlsearchparams"&gt;URLSearchParams&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#query-string-older-browsers"&gt;Query string&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-automatic-serialization-to-urlsearchparams"&gt;🆕 Automatic serialization&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#using-multipartform-data-format"&gt;Using multipart/form-data format&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#formdata"&gt;FormData&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-automatic-serialization-to-formdata"&gt;🆕 Automatic serialization&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#files-posting"&gt;Files Posting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-html-form-posting-browser"&gt;HTML Form Posting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-progress-capturing"&gt;🆕 Progress capturing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-rate-limiting"&gt;🆕 Rate limiting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-axiosheaders"&gt;🆕 AxiosHeaders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-fetch-adapter"&gt;🔥 Fetch adapter&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-custom-fetch"&gt;🔥 Custom fetch&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-using-with-tauri"&gt;🔥 Using with Tauri&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-using-with-sveltekit-"&gt;🔥 Using with SvelteKit&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#-http2"&gt;🔥 HTTP2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#semver"&gt;Semver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#promises"&gt;Promises&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#typescript"&gt;TypeScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Browser Requests:&lt;/strong&gt; Make &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequests&lt;/a&gt; directly from the browser.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js Requests:&lt;/strong&gt; Make &lt;a href="https://nodejs.org/api/http.html"&gt;http&lt;/a&gt; requests from Node.js environments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Promise-based:&lt;/strong&gt; Fully supports the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise&lt;/a&gt; API for easier asynchronous code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Interceptors:&lt;/strong&gt; Intercept requests and responses to add custom logic or transform data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Transformation:&lt;/strong&gt; Transform request and response data automatically.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Request Cancellation:&lt;/strong&gt; Cancel requests using built-in mechanisms.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automatic JSON Handling:&lt;/strong&gt; Automatically serializes and parses &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Form Serialization:&lt;/strong&gt; 🆕 Automatically serializes data objects to &lt;code&gt;multipart/form-data&lt;/code&gt; or &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; formats.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;XSRF Protection:&lt;/strong&gt; Client-side support to protect against &lt;a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery"&gt;Cross-Site Request Forgery&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Browser Support&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Chrome&lt;/th&gt; 
   &lt;th align="center"&gt;Firefox&lt;/th&gt; 
   &lt;th align="center"&gt;Safari&lt;/th&gt; 
   &lt;th align="center"&gt;Opera&lt;/th&gt; 
   &lt;th align="center"&gt;Edge&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_48x48.png" alt="Chrome browser logo" /&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_48x48.png" alt="Firefox browser logo" /&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/alrra/browser-logos/main/src/safari/safari_48x48.png" alt="Safari browser logo" /&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/alrra/browser-logos/main/src/opera/opera_48x48.png" alt="Opera browser logo" /&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_48x48.png" alt="Edge browser logo" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Latest ✔&lt;/td&gt; 
   &lt;td align="center"&gt;Latest ✔&lt;/td&gt; 
   &lt;td align="center"&gt;Latest ✔&lt;/td&gt; 
   &lt;td align="center"&gt;Latest ✔&lt;/td&gt; 
   &lt;td align="center"&gt;Latest ✔&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;a href="https://saucelabs.com/u/axios"&gt;&lt;img src="https://saucelabs.com/open_sauce/build_matrix/axios.svg?sanitize=true" alt="Browser Matrix" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;h3&gt;Package manager&lt;/h3&gt; 
&lt;p&gt;Using npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ npm install axios
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using bower:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ bower install axios
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using yarn:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ yarn add axios
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using pnpm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ pnpm add axios
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using bun:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ bun add axios
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the package is installed, you can import the library using &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; approach:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import axios, {isCancel, AxiosError} from 'axios';
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use the default export, since the named export is just a re-export from the Axios factory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import axios from 'axios';

console.log(axios.isCancel('something'));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you use &lt;code&gt;require&lt;/code&gt; for importing, &lt;strong&gt;only default export is available&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const axios = require('axios');

console.log(axios.isCancel('something'));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For some bundlers and some ES6 linters you may need to do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import { default as axios } from 'axios';
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For cases where something went wrong when trying to import a module into a custom or legacy environment, you can try importing the module package directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const axios = require('axios/dist/browser/axios.cjs'); // browser commonJS bundle (ES2017)
// const axios = require('axios/dist/node/axios.cjs'); // node commonJS bundle (ES2017)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CDN&lt;/h3&gt; 
&lt;p&gt;Using jsDelivr CDN (ES5 UMD browser module):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/axios@1.6.7/dist/axios.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using unpkg CDN:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src="https://unpkg.com/axios@1.6.7/dist/axios.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: CommonJS usage In order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with &lt;code&gt;require()&lt;/code&gt;, use the following approach:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import axios from 'axios';
//const axios = require('axios'); // legacy way

// Make a request for a user with a given ID
axios.get('/user?ID=12345')
  .then(function (response) {
    // handle success
    console.log(response);
  })
  .catch(function (error) {
    // handle error
    console.log(error);
  })
  .finally(function () {
    // always executed
  });

// Optionally the request above could also be done as
axios.get('/user', {
    params: {
      ID: 12345
    }
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  })
  .finally(function () {
    // always executed
  });

// Want to use async/await? Add the `async` keyword to your outer function/method.
async function getUser() {
  try {
    const response = await axios.get('/user?ID=12345');
    console.log(response);
  } catch (error) {
    console.error(error);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;async/await&lt;/code&gt; is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Performing a &lt;code&gt;POST&lt;/code&gt; request&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;axios.post('/user', {
    firstName: 'Fred',
    lastName: 'Flintstone'
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Performing multiple concurrent requests&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;function getUserAccount() {
  return axios.get('/user/12345');
}

function getUserPermissions() {
  return axios.get('/user/12345/permissions');
}

Promise.all([getUserAccount(), getUserPermissions()])
  .then(function (results) {
    const acct = results[0];
    const perm = results[1];
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;axios API&lt;/h2&gt; 
&lt;p&gt;Requests can be made by passing the relevant config to &lt;code&gt;axios&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;axios(config)&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// Send a POST request
axios({
  method: 'post',
  url: '/user/12345',
  data: {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// GET request for remote image in node.js
axios({
  method: 'get',
  url: 'https://bit.ly/2mTM3nY',
  responseType: 'stream'
})
  .then(function (response) {
    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;axios(url[, config])&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// Send a GET request (default method)
axios('/user/12345');
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Request method aliases&lt;/h3&gt; 
&lt;p&gt;For convenience, aliases have been provided for all common request methods.&lt;/p&gt; 
&lt;h5&gt;axios.request(config)&lt;/h5&gt; 
&lt;h5&gt;axios.get(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios.delete(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios.head(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios.options(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios.post(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios.put(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios.patch(url[, data[, config]])&lt;/h5&gt; 
&lt;h6&gt;NOTE&lt;/h6&gt; 
&lt;p&gt;When using the alias methods &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; properties don't need to be specified in config.&lt;/p&gt; 
&lt;h3&gt;Concurrency (Deprecated)&lt;/h3&gt; 
&lt;p&gt;Please use &lt;code&gt;Promise.all&lt;/code&gt; to replace the below functions.&lt;/p&gt; 
&lt;p&gt;Helper functions for dealing with concurrent requests.&lt;/p&gt; 
&lt;p&gt;axios.all(iterable) axios.spread(callback)&lt;/p&gt; 
&lt;h3&gt;Creating an instance&lt;/h3&gt; 
&lt;p&gt;You can create a new instance of axios with a custom config.&lt;/p&gt; 
&lt;h5&gt;axios.create([config])&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const instance = axios.create({
  baseURL: 'https://some-domain.com/api/',
  timeout: 1000,
  headers: {'X-Custom-Header': 'foobar'}
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Instance methods&lt;/h3&gt; 
&lt;p&gt;The available instance methods are listed below. The specified config will be merged with the instance config.&lt;/p&gt; 
&lt;h5&gt;axios#request(config)&lt;/h5&gt; 
&lt;h5&gt;axios#get(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios#delete(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios#head(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios#options(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios#post(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios#put(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios#patch(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios#getUri([config])&lt;/h5&gt; 
&lt;h2&gt;Request Config&lt;/h2&gt; 
&lt;p&gt;These are the available config options for making requests. Only the &lt;code&gt;url&lt;/code&gt; is required. Requests will default to &lt;code&gt;GET&lt;/code&gt; if &lt;code&gt;method&lt;/code&gt; is not specified.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;{
  // `url` is the server URL that will be used for the request
  url: '/user',

  // `method` is the request method to be used when making the request
  method: 'get', // default

  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.
  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs
  // to methods of that instance.
  baseURL: 'https://some-domain.com/api/',

  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.
  // When set to true (default), absolute values for `url` will override `baseUrl`.
  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.
  allowAbsoluteUrls: true,

  // `transformRequest` allows changes to the request data before it is sent to the server
  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'
  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,
  // FormData or Stream
  // You may modify the headers object.
  transformRequest: [function (data, headers) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `transformResponse` allows changes to the response data to be made before
  // it is passed to then/catch
  transformResponse: [function (data) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `headers` are custom headers to be sent
  headers: {'X-Requested-With': 'XMLHttpRequest'},

  // `params` are the URL parameters to be sent with the request
  // Must be a plain object or a URLSearchParams object
  params: {
    ID: 12345
  },

  // `paramsSerializer` is an optional config that allows you to customize serializing `params`.
  paramsSerializer: {

    // Custom encoder function which sends key/value pairs in an iterative fashion.
    encode?: (param: string): string =&amp;gt; { /* Do custom operations here and return transformed string */ },

    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.
    serialize?: (params: Record&amp;lt;string, any&amp;gt;, options?: ParamsSerializerOptions ),

    // Configuration for formatting array indexes in the params.
    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).
  },

  // `data` is the data to be sent as the request body
  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'
  // When no `transformRequest` is set, must be of one of the following types:
  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
  // - Browser only: FormData, File, Blob
  // - Node only: Stream, Buffer, FormData (form-data package)
  data: {
    firstName: 'Fred'
  },

  // syntax alternative to send data into the body
  // method post
  // only the value is sent, not the key
  data: 'Country=Brasil&amp;amp;City=Belo Horizonte',

  // `timeout` specifies the number of milliseconds before the request times out.
  // If the request takes longer than `timeout`, the request will be aborted.
  timeout: 1000, // default is `0` (no timeout)

  // `withCredentials` indicates whether or not cross-site Access-Control requests
  // should be made using credentials
  withCredentials: false, // default

  // `adapter` allows custom handling of requests which makes testing easier.
  // Return a promise and supply a valid response (see lib/adapters/README.md)
  adapter: function (config) {
    /* ... */
  },
  // Also, you can set the name of the built-in adapter, or provide an array with their names
  // to choose the first available in the environment
  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']

  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.
  // This will set an `Authorization` header, overwriting any existing
  // `Authorization` custom headers you have set using `headers`.
  // Please note that only HTTP Basic auth is configurable through this parameter.
  // For Bearer tokens and such, use `Authorization` custom headers instead.
  auth: {
    username: 'janedoe',
    password: 's00pers3cret'
  },

  // `responseType` indicates the type of data that the server will respond with
  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'
  //   browser only: 'blob'
  responseType: 'json', // default

  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)
  // Note: Ignored for `responseType` of 'stream' or client-side requests
  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',
  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',
  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'
  responseEncoding: 'utf8', // default

  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token
  xsrfCookieName: 'XSRF-TOKEN', // default

  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value
  xsrfHeaderName: 'X-XSRF-TOKEN', // default

  // `undefined` (default) - set XSRF header only for the same origin requests
  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) =&amp;gt; boolean | undefined),

  // `onUploadProgress` allows handling of progress events for uploads
  // browser &amp;amp; node.js
  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {
    // Do whatever you want with the Axios progress event
  },

  // `onDownloadProgress` allows handling of progress events for downloads
  // browser &amp;amp; node.js
  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {
    // Do whatever you want with the Axios progress event
  },

  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js
  maxContentLength: 2000,

  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed
  maxBodyLength: 2000,

  // `validateStatus` defines whether to resolve or reject the promise for a given
  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`
  // or `undefined`), the promise will be resolved; otherwise, the promise will be
  // rejected.
  validateStatus: function (status) {
    return status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300; // default
  },

  // `maxRedirects` defines the maximum number of redirects to follow in node.js.
  // If set to 0, no redirects will be followed.
  maxRedirects: 21, // default

  // `beforeRedirect` defines a function that will be called before redirect.
  // Use this to adjust the request options upon redirecting,
  // to inspect the latest response headers,
  // or to cancel the request by throwing an error
  // If maxRedirects is set to 0, `beforeRedirect` is not used.
  beforeRedirect: (options, { headers }) =&amp;gt; {
    if (options.hostname === "example.com") {
      options.auth = "user:password";
    }
  },

  // `socketPath` defines a UNIX Socket to be used in node.js.
  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.
  // Only either `socketPath` or `proxy` can be specified.
  // If both are specified, `socketPath` is used.
  socketPath: null, // default

  // `transport` determines the transport method that will be used to make the request.
  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,
  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.
  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,
  // which can handle redirects.
  transport: undefined, // default

  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http
  // and https requests, respectively, in node.js. This allows options to be added like
  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js
  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because
  // `http.globalAgent` has `keepAlive` enabled by default.
  httpAgent: new http.Agent({ keepAlive: true }),
  httpsAgent: new https.Agent({ keepAlive: true }),

  // `proxy` defines the hostname, port, and protocol of the proxy server.
  // You can also define your proxy using the conventional `http_proxy` and
  // `https_proxy` environment variables. If you are using environment variables
  // for your proxy configuration, you can also define a `no_proxy` environment
  // variable as a comma-separated list of domains that should not be proxied.
  // Use `false` to disable proxies, ignoring environment variables.
  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and
  // supplies credentials.
  // This will set an `Proxy-Authorization` header, overwriting any existing
  // `Proxy-Authorization` custom headers you have set using `headers`.
  // If the proxy server uses HTTPS, then you must set the protocol to `https`.
  proxy: {
    protocol: 'https',
    host: '127.0.0.1',
    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined
    port: 9000,
    auth: {
      username: 'mikeymike',
      password: 'rapunz3l'
    }
  },

  // `cancelToken` specifies a cancel token that can be used to cancel the request
  // (see Cancellation section below for details)
  cancelToken: new CancelToken(function (cancel) {
  }),

  // an alternative way to cancel Axios requests using AbortController
  signal: new AbortController().signal,

  // `decompress` indicates whether or not the response body should be decompressed
  // automatically. If set to `true` will also remove the 'content-encoding' header
  // from the responses objects of all decompressed responses
  // - Node only (XHR cannot turn off decompression)
  decompress: true, // default

  // `insecureHTTPParser` boolean.
  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.
  // This may allow interoperability with non-conformant HTTP implementations.
  // Using the insecure parser should be avoided.
  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback
  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none
  insecureHTTPParser: undefined, // default

  // transitional options for backward compatibility that may be removed in the newer versions
  transitional: {
    // silent JSON parsing mode
    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)
    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')
    silentJSONParsing: true, // default value for the current Axios version

    // try to parse the response string as JSON even if `responseType` is not 'json'
    forcedJSONParsing: true,

    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts
    clarifyTimeoutError: false,
  },

  env: {
    // The FormData class to be used to automatically serialize the payload into a FormData object
    FormData: window?.FormData || global?.FormData
  },

  formSerializer: {
      visitor: (value, key, path, helpers) =&amp;gt; {}; // custom visitor function to serialize form values
      dots: boolean; // use dots instead of brackets format
      metaTokens: boolean; // keep special endings like {} in parameter key
      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes
  },

  // http adapter only (node.js)
  maxRate: [
    100 * 1024, // 100KB/s upload limit,
    100 * 1024  // 100KB/s download limit
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Response Schema&lt;/h2&gt; 
&lt;p&gt;The response for a request contains the following information.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;{
  // `data` is the response that was provided by the server
  data: {},

  // `status` is the HTTP status code from the server response
  status: 200,

  // `statusText` is the HTTP status message from the server response
  statusText: 'OK',

  // `headers` the HTTP headers that the server responded with
  // All header names are lowercase and can be accessed using the bracket notation.
  // Example: `response.headers['content-type']`
  headers: {},

  // `config` is the config that was provided to `axios` for the request
  config: {},

  // `request` is the request that generated this response
  // It is the last ClientRequest instance in node.js (in redirects)
  // and an XMLHttpRequest instance in the browser
  request: {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using &lt;code&gt;then&lt;/code&gt;, you will receive the response as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;axios.get('/user/12345')
  .then(function (response) {
    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using &lt;code&gt;catch&lt;/code&gt;, or passing a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"&gt;rejection callback&lt;/a&gt; as second parameter of &lt;code&gt;then&lt;/code&gt;, the response will be available through the &lt;code&gt;error&lt;/code&gt; object as explained in the &lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/#handling-errors"&gt;Handling Errors&lt;/a&gt; section.&lt;/p&gt; 
&lt;h2&gt;Config Defaults&lt;/h2&gt; 
&lt;p&gt;You can specify config defaults that will be applied to every request.&lt;/p&gt; 
&lt;h3&gt;Global axios defaults&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;axios.defaults.baseURL = 'https://api.example.com';

// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.
// See below for an example using Custom instance defaults instead.
axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;

axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom instance defaults&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// Set config defaults when creating the instance
const instance = axios.create({
  baseURL: 'https://api.example.com'
});

// Alter defaults after instance has been created
instance.defaults.headers.common['Authorization'] = AUTH_TOKEN;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config order of precedence&lt;/h3&gt; 
&lt;p&gt;Config will be merged with an order of precedence. The order is library defaults found in &lt;a href="https://github.com/axios/axios/raw/main/lib/defaults/index.js#L49"&gt;lib/defaults/index.js&lt;/a&gt;, then &lt;code&gt;defaults&lt;/code&gt; property of the instance, and finally &lt;code&gt;config&lt;/code&gt; argument for the request. The latter will take precedence over the former. Here's an example.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// Create an instance using the config defaults provided by the library
// At this point the timeout config value is `0` as is the default for the library
const instance = axios.create();

// Override timeout default for the library
// Now all requests using this instance will wait 2.5 seconds before timing out
instance.defaults.timeout = 2500;

// Override timeout for this request as it's known to take a long time
instance.get('/longRequest', {
  timeout: 5000
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Interceptors&lt;/h2&gt; 
&lt;p&gt;You can intercept requests or responses before they are handled by &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;
const instance = axios.create();

// Add a request interceptor
instance.interceptors.request.use(function (config) {
    // Do something before request is sent
    return config;
  }, function (error) {
    // Do something with request error
    return Promise.reject(error);
  });

// Add a response interceptor
instance.interceptors.response.use(function (response) {
    // Any status code that lie within the range of 2xx cause this function to trigger
    // Do something with response data
    return response;
  }, function (error) {
    // Any status codes that falls outside the range of 2xx cause this function to trigger
    // Do something with response error
    return Promise.reject(error);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need to remove an interceptor later you can.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const instance = axios.create();
const myInterceptor = instance.interceptors.request.use(function () {/*...*/});
axios.interceptors.request.eject(myInterceptor);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also clear all interceptors for requests or responses.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const instance = axios.create();
instance.interceptors.request.use(function () {/*...*/});
instance.interceptors.request.clear(); // Removes interceptors from requests
instance.interceptors.response.use(function () {/*...*/});
instance.interceptors.response.clear(); // Removes interceptors from responses
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can add interceptors to a custom instance of axios.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const instance = axios.create();
instance.interceptors.request.use(function () {/*...*/});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay in the execution of your axios request when the main thread is blocked (a promise is created under the hood for the interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag to the options object that will tell axios to run the code synchronously and avoid any delays in request execution.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;axios.interceptors.request.use(function (config) {
  config.headers.test = 'I am only a header!';
  return config;
}, null, { synchronous: true });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to execute a particular interceptor based on a runtime check, you can add a &lt;code&gt;runWhen&lt;/code&gt; function to the options object. The request interceptor will not be executed &lt;strong&gt;if and only if&lt;/strong&gt; the return of &lt;code&gt;runWhen&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The function will be called with the config object (don't forget that you can bind your own arguments to it as well.) This can be handy when you have an asynchronous request interceptor that only needs to run at certain times.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;function onGetCall(config) {
  return config.method === 'get';
}
axios.interceptors.request.use(function (config) {
  config.headers.test = 'special get headers';
  return config;
}, null, { runWhen: onGetCall });
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; options parameter(having &lt;code&gt;synchronous&lt;/code&gt; and &lt;code&gt;runWhen&lt;/code&gt; properties) is only supported for request interceptors at the moment.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Multiple Interceptors&lt;/h3&gt; 
&lt;p&gt;Given you add multiple response interceptors and when the response was fulfilled&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;then each interceptor is executed&lt;/li&gt; 
 &lt;li&gt;then they are executed in the order they were added&lt;/li&gt; 
 &lt;li&gt;then only the last interceptor's result is returned&lt;/li&gt; 
 &lt;li&gt;then every interceptor receives the result of its predecessor&lt;/li&gt; 
 &lt;li&gt;and when the fulfillment-interceptor throws 
  &lt;ul&gt; 
   &lt;li&gt;then the following fulfillment-interceptor is not called&lt;/li&gt; 
   &lt;li&gt;then the following rejection-interceptor is called&lt;/li&gt; 
   &lt;li&gt;once caught, another following fulfill-interceptor is called again (just like in a promise chain).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read &lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/test/specs/interceptors.spec.js"&gt;the interceptor tests&lt;/a&gt; for seeing all this in code.&lt;/p&gt; 
&lt;h2&gt;Error Types&lt;/h2&gt; 
&lt;p&gt;There are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.&lt;/p&gt; 
&lt;p&gt;The general structure of axios errors is as follows:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Property&lt;/th&gt; 
   &lt;th&gt;Definition&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;message&lt;/td&gt; 
   &lt;td&gt;A quick summary of the error message and the status it failed with.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;name&lt;/td&gt; 
   &lt;td&gt;This defines where the error originated from. For axios, it will always be an 'AxiosError'.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;stack&lt;/td&gt; 
   &lt;td&gt;Provides the stack trace of the error.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;config&lt;/td&gt; 
   &lt;td&gt;An axios config object with specific instance configurations defined by the user from when the request was made&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;code&lt;/td&gt; 
   &lt;td&gt;Represents an axios identified error. The table below lists out specific definitions for internal axios error.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;status&lt;/td&gt; 
   &lt;td&gt;HTTP response status code. See &lt;a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;here&lt;/a&gt; for common HTTP response status code meanings.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Below is a list of potential axios identified error:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Code&lt;/th&gt; 
   &lt;th&gt;Definition&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_BAD_OPTION_VALUE&lt;/td&gt; 
   &lt;td&gt;Invalid value provided in axios configuration.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_BAD_OPTION&lt;/td&gt; 
   &lt;td&gt;Invalid option provided in axios configuration.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_NOT_SUPPORT&lt;/td&gt; 
   &lt;td&gt;Feature or method not supported in the current axios environment.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_DEPRECATED&lt;/td&gt; 
   &lt;td&gt;Deprecated feature or method used in axios.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_INVALID_URL&lt;/td&gt; 
   &lt;td&gt;Invalid URL provided for axios request.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ECONNABORTED&lt;/td&gt; 
   &lt;td&gt;Typically indicates that the request has been timed out (unless &lt;code&gt;transitional.clarifyTimeoutError&lt;/code&gt; is set) or aborted by the browser or its plugin.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_CANCELED&lt;/td&gt; 
   &lt;td&gt;Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ETIMEDOUT&lt;/td&gt; 
   &lt;td&gt;Request timed out due to exceeding default axios timelimit. &lt;code&gt;transitional.clarifyTimeoutError&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt;, otherwise a generic &lt;code&gt;ECONNABORTED&lt;/code&gt; error will be thrown instead.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_NETWORK&lt;/td&gt; 
   &lt;td&gt;Network-related issue. In the browser, this error can also be caused by a &lt;a href="https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS"&gt;CORS&lt;/a&gt; or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content"&gt;Mixed Content&lt;/a&gt; policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_FR_TOO_MANY_REDIRECTS&lt;/td&gt; 
   &lt;td&gt;Request is redirected too many times; exceeds max redirects specified in axios configuration.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_BAD_RESPONSE&lt;/td&gt; 
   &lt;td&gt;Response cannot be parsed properly or is in an unexpected format. Usually related to a response with &lt;code&gt;5xx&lt;/code&gt; status code.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ERR_BAD_REQUEST&lt;/td&gt; 
   &lt;td&gt;The request has an unexpected format or is missing required parameters. Usually related to a response with &lt;code&gt;4xx&lt;/code&gt; status code.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Handling Errors&lt;/h2&gt; 
&lt;p&gt;the default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;axios.get('/user/12345')
  .catch(function (error) {
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log('Error', error.message);
    }
    console.log(error.config);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using the &lt;code&gt;validateStatus&lt;/code&gt; config option, you can override the default condition (status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300) and define HTTP code(s) that should throw an error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;axios.get('/user/12345', {
  validateStatus: function (status) {
    return status &amp;lt; 500; // Resolve only if the status code is less than 500
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;code&gt;toJSON&lt;/code&gt; you get an object with more information about the HTTP error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;axios.get('/user/12345')
  .catch(function (error) {
    console.log(error.toJSON());
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Cancellation&lt;/h2&gt; 
&lt;h3&gt;AbortController&lt;/h3&gt; 
&lt;p&gt;Starting from &lt;code&gt;v0.22.0&lt;/code&gt; Axios supports AbortController to cancel requests in fetch API way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const controller = new AbortController();

axios.get('/foo/bar', {
   signal: controller.signal
}).then(function(response) {
   //...
});
// cancel the request
controller.abort()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CancelToken &lt;code&gt;👎deprecated&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;You can also cancel a request using a &lt;em&gt;CancelToken&lt;/em&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The axios cancel token API is based on the withdrawn &lt;a href="https://github.com/tc39/proposal-cancelable-promises"&gt;cancellable promises proposal&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This API is deprecated since v0.22.0 and shouldn't be used in new projects&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can create a cancel token using the &lt;code&gt;CancelToken.source&lt;/code&gt; factory as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get('/user/12345', {
  cancelToken: source.token
}).catch(function (thrown) {
  if (axios.isCancel(thrown)) {
    console.log('Request canceled', thrown.message);
  } else {
    // handle error
  }
});

axios.post('/user/12345', {
  name: 'new name'
}, {
  cancelToken: source.token
})

// cancel the request (the message parameter is optional)
source.cancel('Operation canceled by the user.');
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also create a cancel token by passing an executor function to the &lt;code&gt;CancelToken&lt;/code&gt; constructor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const CancelToken = axios.CancelToken;
let cancel;

axios.get('/user/12345', {
  cancelToken: new CancelToken(function executor(c) {
    // An executor function receives a cancel function as a parameter
    cancel = c;
  })
});

// cancel the request
cancel();
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can cancel several requests with the same cancel token/abort controller. If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;During the transition period, you can use both cancellation APIs, even for the same request:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Using &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format&lt;/h2&gt; 
&lt;h3&gt;URLSearchParams&lt;/h3&gt; 
&lt;p&gt;By default, axios serializes JavaScript objects to &lt;code&gt;JSON&lt;/code&gt;. To send data in the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST"&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format&lt;/a&gt; instead, you can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; API, which is &lt;a href="http://www.caniuse.com/#feat=urlsearchparams"&gt;supported&lt;/a&gt; in the vast majority of browsers,and &lt;a href="https://nodejs.org/api/url.html#url_class_urlsearchparams"&gt; Node&lt;/a&gt; starting with v10 (released in 2018).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const params = new URLSearchParams({ foo: 'bar' });
params.append('extraparam', 'value');
axios.post('/foo', params);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Query string (Older browsers)&lt;/h3&gt; 
&lt;p&gt;For compatibility with very old browsers, there is a &lt;a href="https://github.com/WebReflection/url-search-params"&gt;polyfill&lt;/a&gt; available (make sure to polyfill the global environment).&lt;/p&gt; 
&lt;p&gt;Alternatively, you can encode data using the &lt;a href="https://github.com/ljharb/qs"&gt;&lt;code&gt;qs&lt;/code&gt;&lt;/a&gt; library:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const qs = require('qs');
axios.post('/foo', qs.stringify({ 'bar': 123 }));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or in another way (ES6),&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import qs from 'qs';
const data = { 'bar': 123 };
const options = {
  method: 'POST',
  headers: { 'content-type': 'application/x-www-form-urlencoded' },
  data: qs.stringify(data),
  url,
};
axios(options);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Older Node.js versions&lt;/h3&gt; 
&lt;p&gt;For older Node.js engines, you can use the &lt;a href="https://nodejs.org/api/querystring.html"&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const querystring = require('querystring');
axios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use the &lt;a href="https://github.com/ljharb/qs"&gt;&lt;code&gt;qs&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;qs&lt;/code&gt; library is preferable if you need to stringify nested objects, as the &lt;code&gt;querystring&lt;/code&gt; method has &lt;a href="https://github.com/nodejs/node-v0.x-archive/issues/1665"&gt;known issues&lt;/a&gt; with that use case.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;🆕 Automatic serialization to URLSearchParams&lt;/h3&gt; 
&lt;p&gt;Axios will automatically serialize the data object to urlencoded format if the content-type header is set to "application/x-www-form-urlencoded".&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const data = {
  x: 1,
  arr: [1, 2, 3],
  arr2: [1, [2], 3],
  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],
};

await axios.postForm('https://postman-echo.com/post', data,
  {headers: {'content-type': 'application/x-www-form-urlencoded'}}
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The server will handle it as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;  {
    x: '1',
    'arr[]': [ '1', '2', '3' ],
    'arr2[0]': '1',
    'arr2[1][0]': '2',
    'arr2[2]': '3',
    'arr3[]': [ '1', '2', '3' ],
    'users[0][name]': 'Peter',
    'users[0][surname]': 'griffin',
    'users[1][name]': 'Thomas',
    'users[1][surname]': 'Anderson'
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your backend body-parser (like &lt;code&gt;body-parser&lt;/code&gt; of &lt;code&gt;express.js&lt;/code&gt;) supports nested objects decoding, you will get the same object on the server-side automatically&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;  var app = express();

  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies

  app.post('/', function (req, res, next) {
     // echo body as JSON
     res.send(JSON.stringify(req.body));
  });

  server = app.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Using &lt;code&gt;multipart/form-data&lt;/code&gt; format&lt;/h2&gt; 
&lt;h3&gt;FormData&lt;/h3&gt; 
&lt;p&gt;To send the data as a &lt;code&gt;multipart/formdata&lt;/code&gt; you need to pass a formData instance as a payload. Setting the &lt;code&gt;Content-Type&lt;/code&gt; header is not required as Axios guesses it based on the payload type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const formData = new FormData();
formData.append('foo', 'bar');

axios.post('https://httpbin.org/post', formData);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In node.js, you can use the &lt;a href="https://github.com/form-data/form-data"&gt;&lt;code&gt;form-data&lt;/code&gt;&lt;/a&gt; library as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const FormData = require('form-data');

const form = new FormData();
form.append('my_field', 'my value');
form.append('my_buffer', new Buffer(10));
form.append('my_file', fs.createReadStream('/foo/bar.jpg'));

axios.post('https://example.com', form)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;🆕 Automatic serialization to FormData&lt;/h3&gt; 
&lt;p&gt;Starting from &lt;code&gt;v0.27.0&lt;/code&gt;, Axios supports automatic object serialization to a FormData object if the request &lt;code&gt;Content-Type&lt;/code&gt; header is set to &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The following request will submit the data in a FormData format (Browser &amp;amp; Node.js):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import axios from 'axios';

axios.post('https://httpbin.org/post', {x: 1}, {
  headers: {
    'Content-Type': 'multipart/form-data'
  }
}).then(({data}) =&amp;gt; console.log(data));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the &lt;code&gt;node.js&lt;/code&gt; build, the (&lt;a href="https://github.com/form-data/form-data"&gt;&lt;code&gt;form-data&lt;/code&gt;&lt;/a&gt;) polyfill is used by default.&lt;/p&gt; 
&lt;p&gt;You can overload the FormData class by setting the &lt;code&gt;env.FormData&lt;/code&gt; config variable, but you probably won't need it in most cases:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const axios = require('axios');
var FormData = require('form-data');

axios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {
  headers: {
    'Content-Type': 'multipart/form-data'
  }
}).then(({data}) =&amp;gt; console.log(data));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Axios FormData serializer supports some special endings to perform the following operations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;{}&lt;/code&gt; - serialize the value with JSON.stringify&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[]&lt;/code&gt; - unwrap the array-like object as separate fields with the same key&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: unwrap/expand operation will be used by default on arrays and FileList objects&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;FormData serializer supports additional options via &lt;code&gt;config.formSerializer: object&lt;/code&gt; property to handle rare cases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;visitor: Function&lt;/code&gt; - user-defined visitor function that will be called recursively to serialize the data object to a &lt;code&gt;FormData&lt;/code&gt; object by following custom rules.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dots: boolean = false&lt;/code&gt; - use dot notation instead of brackets to serialize arrays and objects;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;metaTokens: boolean = true&lt;/code&gt; - add the special ending (e.g &lt;code&gt;user{}: '{"name": "John"}'&lt;/code&gt;) in the FormData key. The back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;indexes: null|false|true = false&lt;/code&gt; - controls how indexes will be added to unwrapped keys of &lt;code&gt;flat&lt;/code&gt; array-like objects.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;null&lt;/code&gt; - don't add brackets (&lt;code&gt;arr: 1&lt;/code&gt;, &lt;code&gt;arr: 2&lt;/code&gt;, &lt;code&gt;arr: 3&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;false&lt;/code&gt;(default) - add empty brackets (&lt;code&gt;arr[]: 1&lt;/code&gt;, &lt;code&gt;arr[]: 2&lt;/code&gt;, &lt;code&gt;arr[]: 3&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;true&lt;/code&gt; - add brackets with indexes (&lt;code&gt;arr[0]: 1&lt;/code&gt;, &lt;code&gt;arr[1]: 2&lt;/code&gt;, &lt;code&gt;arr[2]: 3&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Let's say we have an object like this one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const obj = {
  x: 1,
  arr: [1, 2, 3],
  arr2: [1, [2], 3],
  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],
  'obj2{}': [{x:1}]
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following steps will be executed by the Axios serializer internally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const formData = new FormData();
formData.append('x', '1');
formData.append('arr[]', '1');
formData.append('arr[]', '2');
formData.append('arr[]', '3');
formData.append('arr2[0]', '1');
formData.append('arr2[1][0]', '2');
formData.append('arr2[2]', '3');
formData.append('users[0][name]', 'Peter');
formData.append('users[0][surname]', 'Griffin');
formData.append('users[1][name]', 'Thomas');
formData.append('users[1][surname]', 'Anderson');
formData.append('obj2{}', '[{"x":1}]');
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Axios supports the following shortcut methods: &lt;code&gt;postForm&lt;/code&gt;, &lt;code&gt;putForm&lt;/code&gt;, &lt;code&gt;patchForm&lt;/code&gt; which are just the corresponding http methods with the &lt;code&gt;Content-Type&lt;/code&gt; header preset to &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Files Posting&lt;/h2&gt; 
&lt;p&gt;You can easily submit a single file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;await axios.postForm('https://httpbin.org/post', {
  'myVar' : 'foo',
  'file': document.querySelector('#fileInput').files[0]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or multiple files as &lt;code&gt;multipart/form-data&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;await axios.postForm('https://httpbin.org/post', {
  'files[]': document.querySelector('#fileInput').files
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;FileList&lt;/code&gt; object can be passed directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;await axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All files will be sent with the same field names: &lt;code&gt;files[]&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;🆕 HTML Form Posting (browser)&lt;/h2&gt; 
&lt;p&gt;Pass HTML Form element as a payload to submit it as &lt;code&gt;multipart/form-data&lt;/code&gt; content.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;await axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;FormData&lt;/code&gt; and &lt;code&gt;HTMLForm&lt;/code&gt; objects can also be posted as &lt;code&gt;JSON&lt;/code&gt; by explicitly setting the &lt;code&gt;Content-Type&lt;/code&gt; header to &lt;code&gt;application/json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;await axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {
  headers: {
    'Content-Type': 'application/json'
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, the Form&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;form id="form"&amp;gt;
  &amp;lt;input type="text" name="foo" value="1"&amp;gt;
  &amp;lt;input type="text" name="deep.prop" value="2"&amp;gt;
  &amp;lt;input type="text" name="deep prop spaced" value="3"&amp;gt;
  &amp;lt;input type="text" name="baz" value="4"&amp;gt;
  &amp;lt;input type="text" name="baz" value="5"&amp;gt;

  &amp;lt;select name="user.age"&amp;gt;
    &amp;lt;option value="value1"&amp;gt;Value 1&amp;lt;/option&amp;gt;
    &amp;lt;option value="value2" selected&amp;gt;Value 2&amp;lt;/option&amp;gt;
    &amp;lt;option value="value3"&amp;gt;Value 3&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;

  &amp;lt;input type="submit" value="Save"&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will be submitted as the following JSON object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;{
  "foo": "1",
  "deep": {
    "prop": {
      "spaced": "3"
    }
  },
  "baz": [
    "4",
    "5"
  ],
  "user": {
    "age": "value2"
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Sending &lt;code&gt;Blobs&lt;/code&gt;/&lt;code&gt;Files&lt;/code&gt; as JSON (&lt;code&gt;base64&lt;/code&gt;) is not currently supported.&lt;/p&gt; 
&lt;h2&gt;🆕 Progress capturing&lt;/h2&gt; 
&lt;p&gt;Axios supports both browser and node environments to capture request upload/download progress. The frequency of progress events is forced to be limited to &lt;code&gt;3&lt;/code&gt; times per second.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;await axios.post(url, data, {
  onUploadProgress: function (axiosProgressEvent) {
    /*{
      loaded: number;
      total?: number;
      progress?: number; // in range [0..1]
      bytes: number; // how many bytes have been transferred since the last trigger (delta)
      estimated?: number; // estimated time in seconds
      rate?: number; // upload speed in bytes
      upload: true; // upload sign
    }*/
  },

  onDownloadProgress: function (axiosProgressEvent) {
    /*{
      loaded: number;
      total?: number;
      progress?: number;
      bytes: number;
      estimated?: number;
      rate?: number; // download speed in bytes
      download: true; // download sign
    }*/
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also track stream upload/download progress in node.js:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const {data} = await axios.post(SERVER_URL, readableStream, {
   onUploadProgress: ({progress}) =&amp;gt; {
     console.log((progress * 100).toFixed(2));
   },

   headers: {
    'Content-Length': contentLength
   },

   maxRedirects: 0 // avoid buffering the entire stream
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Capturing FormData upload progress is not currently supported in node.js environments.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;⚠️ Warning&lt;/strong&gt; It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the &lt;strong&gt;node.js&lt;/strong&gt; environment, as follow-redirects package will buffer the entire stream in RAM without following the "backpressure" algorithm.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;🆕 Rate limiting&lt;/h2&gt; 
&lt;p&gt;Download and upload rate limits can only be set for the http adapter (node.js):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {
  onUploadProgress: ({progress, rate}) =&amp;gt; {
    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)
  },

  maxRate: [100 * 1024], // 100KB/s limit
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🆕 AxiosHeaders&lt;/h2&gt; 
&lt;p&gt;Axios has its own &lt;code&gt;AxiosHeaders&lt;/code&gt; class to manipulate headers using a Map-like API that guarantees caseless work. Although HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons and for a workaround when servers mistakenly consider the header's case. The old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.&lt;/p&gt; 
&lt;h3&gt;Working with headers&lt;/h3&gt; 
&lt;p&gt;An AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic. The final headers object with string values is obtained by Axios by calling the &lt;code&gt;toJSON&lt;/code&gt; method.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The header value can be one of the following types:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;string&lt;/code&gt; - normal string value that will be sent to the server&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;null&lt;/code&gt; - skip header when rendering to JSON&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;false&lt;/code&gt; - skip header when rendering to JSON, additionally indicates that &lt;code&gt;set&lt;/code&gt; method must be called with &lt;code&gt;rewrite&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt; to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like &lt;code&gt;User-Agent&lt;/code&gt; or &lt;code&gt;Content-Type&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; - value is not set&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: The header value is considered set if it is not equal to undefined.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The headers object is always initialized inside interceptors and transformers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;  axios.interceptors.request.use((request: InternalAxiosRequestConfig) =&amp;gt; {
      request.headers.set('My-header', 'value');

      request.headers.set({
        "My-set-header1": "my-set-value1",
        "My-set-header2": "my-set-value2"
      });

      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios

      request.headers.setContentType('text/plain');

      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated

      return request;
    }
  );
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can iterate over an &lt;code&gt;AxiosHeaders&lt;/code&gt; instance using a &lt;code&gt;for...of&lt;/code&gt; statement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const headers = new AxiosHeaders({
  foo: '1',
  bar: '2',
  baz: '3'
});

for(const [header, value] of headers) {
  console.log(header, value);
}

// foo 1
// bar 2
// baz 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;new AxiosHeaders(headers?)&lt;/h3&gt; 
&lt;p&gt;Constructs a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;constructor(headers?: RawAxiosHeaders | AxiosHeaders | string);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the headers object is a string, it will be parsed as RAW HTTP headers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const headers = new AxiosHeaders(`
Host: www.bing.com
User-Agent: curl/7.54.0
Accept: */*`);

console.log(headers);

// Object [AxiosHeaders] {
//   host: 'www.bing.com',
//   'user-agent': 'curl/7.54.0',
//   accept: '*/*'
// }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;AxiosHeaders#set&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;set(headerName, value: Axios, rewrite?: boolean);
set(headerName, value, rewrite?: (this: AxiosHeaders, value: string, name: string, headers: RawAxiosHeaders) =&amp;gt; boolean);
set(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;rewrite&lt;/code&gt; argument controls the overwriting behavior:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;false&lt;/code&gt; - do not overwrite if header's value is set (is not &lt;code&gt;undefined&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; (default) - overwrite the header unless its value is set to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;true&lt;/code&gt; - rewrite anyway&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The option can also accept a user-defined function that determines whether the value should be overwritten or not.&lt;/p&gt; 
&lt;p&gt;Returns &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;AxiosHeaders#get(header)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;  get(headerName: string, matcher?: true | AxiosHeaderMatcher): AxiosHeaderValue;
  get(headerName: string, parser: RegExp): RegExpExecArray | null;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns the internal value of the header. It can take an extra argument to parse the header's value with &lt;code&gt;RegExp.exec&lt;/code&gt;, matcher function or internal key-value parser.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;const headers = new AxiosHeaders({
  'Content-Type': 'multipart/form-data; boundary=Asrf456BGe4h'
});

console.log(headers.get('Content-Type'));
// multipart/form-data; boundary=Asrf456BGe4h

console.log(headers.get('Content-Type', true)); // parse key-value pairs from a string separated with \s,;= delimiters:
// [Object: null prototype] {
//   'multipart/form-data': undefined,
//    boundary: 'Asrf456BGe4h'
// }


console.log(headers.get('Content-Type', (value, name, headers) =&amp;gt; {
  return String(value).replace(/a/g, 'ZZZ');
}));
// multipZZZrt/form-dZZZtZZZ; boundZZZry=Asrf456BGe4h

console.log(headers.get('Content-Type', /boundary=(\w+)/)?.[0]);
// boundary=Asrf456BGe4h

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns the value of the header.&lt;/p&gt; 
&lt;h3&gt;AxiosHeaders#has(header, matcher?)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;has(header: string, matcher?: AxiosHeaderMatcher): boolean;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the header is set (has no &lt;code&gt;undefined&lt;/code&gt; value).&lt;/p&gt; 
&lt;h3&gt;AxiosHeaders#delete(header, matcher?)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;delete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if at least one header has been removed.&lt;/p&gt; 
&lt;h3&gt;AxiosHeaders#clear(matcher?)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;clear(matcher?: AxiosHeaderMatcher): boolean;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Removes all headers. Unlike the &lt;code&gt;delete&lt;/code&gt; method matcher, this optional matcher will be used to match against the header name rather than the value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;const headers = new AxiosHeaders({
  'foo': '1',
  'x-foo': '2',
  'x-bar': '3',
});

console.log(headers.clear(/^x-/)); // true

console.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if at least one header has been cleared.&lt;/p&gt; 
&lt;h3&gt;AxiosHeaders#normalize(format);&lt;/h3&gt; 
&lt;p&gt;If the headers object was changed directly, it can have duplicates with the same name but in different cases. This method normalizes the headers object by combining duplicate keys into one. Axios uses this method internally after calling each interceptor. Set &lt;code&gt;format&lt;/code&gt; to true for converting headers name to lowercase and capitalize the initial letters (&lt;code&gt;cOntEnt-type&lt;/code&gt; =&amp;gt; &lt;code&gt;Content-Type&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const headers = new AxiosHeaders({
  'foo': '1',
});

headers.Foo = '2';
headers.FOO = '3';

console.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }
console.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }
console.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;AxiosHeaders#concat(...targets)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;concat(...targets: Array&amp;lt;AxiosHeaders | RawAxiosHeaders | string | undefined | null&amp;gt;): AxiosHeaders;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Merges the instance with targets into a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance. If the target is a string, it will be parsed as RAW HTTP headers.&lt;/p&gt; 
&lt;p&gt;Returns a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance.&lt;/p&gt; 
&lt;h3&gt;AxiosHeaders#toJSON(asStrings?)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;toJSON(asStrings?: boolean): RawAxiosHeaders;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Resolve all internal headers values into a new null prototype object. Set &lt;code&gt;asStrings&lt;/code&gt; to true to resolve arrays as a string containing all elements, separated by commas.&lt;/p&gt; 
&lt;h3&gt;AxiosHeaders.from(thing?)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;from(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance created from the raw headers passed in, or simply returns the given headers object if it's an &lt;code&gt;AxiosHeaders&lt;/code&gt; instance.&lt;/p&gt; 
&lt;h3&gt;AxiosHeaders.concat(...targets)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;concat(...targets: Array&amp;lt;AxiosHeaders | RawAxiosHeaders | string | undefined | null&amp;gt;): AxiosHeaders;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance created by merging the target objects.&lt;/p&gt; 
&lt;h3&gt;Shortcuts&lt;/h3&gt; 
&lt;p&gt;The following shortcuts are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;setContentType&lt;/code&gt;, &lt;code&gt;getContentType&lt;/code&gt;, &lt;code&gt;hasContentType&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;setContentLength&lt;/code&gt;, &lt;code&gt;getContentLength&lt;/code&gt;, &lt;code&gt;hasContentLength&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;setAccept&lt;/code&gt;, &lt;code&gt;getAccept&lt;/code&gt;, &lt;code&gt;hasAccept&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;setUserAgent&lt;/code&gt;, &lt;code&gt;getUserAgent&lt;/code&gt;, &lt;code&gt;hasUserAgent&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;setContentEncoding&lt;/code&gt;, &lt;code&gt;getContentEncoding&lt;/code&gt;, &lt;code&gt;hasContentEncoding&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🔥 Fetch adapter&lt;/h2&gt; 
&lt;p&gt;Fetch adapter was introduced in &lt;code&gt;v1.7.0&lt;/code&gt;. By default, it will be used if &lt;code&gt;xhr&lt;/code&gt; and &lt;code&gt;http&lt;/code&gt; adapters are not available in the build, or not supported by the environment. To use it by default, it must be selected explicitly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const {data} = axios.get(url, {
  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can create a separate instance for this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const fetchAxios = axios.create({
  adapter: 'fetch'
});

const {data} = fetchAxios.get(url);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The adapter supports the same functionality as &lt;code&gt;xhr&lt;/code&gt; adapter, &lt;strong&gt;including upload and download progress capturing&lt;/strong&gt;. Also, it supports additional response types such as &lt;code&gt;stream&lt;/code&gt; and &lt;code&gt;formdata&lt;/code&gt; (if supported by the environment).&lt;/p&gt; 
&lt;h3&gt;🔥 Custom fetch&lt;/h3&gt; 
&lt;p&gt;Starting from &lt;code&gt;v1.12.0&lt;/code&gt;, you can customize the fetch adapter to use a custom fetch API instead of environment globals. You can pass a custom &lt;code&gt;fetch&lt;/code&gt; function, &lt;code&gt;Request&lt;/code&gt;, and &lt;code&gt;Response&lt;/code&gt; constructors via env config. This can be helpful in case of custom environments &amp;amp; app frameworks.&lt;/p&gt; 
&lt;p&gt;Also, when using a custom fetch, you may need to set custom Request and Response too. If you don't set them, global objects will be used. If your custom fetch api does not have these objects, and the globals are incompatible with a custom fetch, you must disable their use inside the fetch adapter by passing null.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Setting &lt;code&gt;Request&lt;/code&gt; &amp;amp; &lt;code&gt;Response&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; will make it impossible for the fetch adapter to capture the upload &amp;amp; download progress.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Basic example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import customFetchFunction from 'customFetchModule';

const instance = axios.create({
  adapter: 'fetch',
  onDownloadProgress(e) {
    console.log('downloadProgress', e);
  },
  env: {
    fetch: customFetchFunction,
    Request: null, // undefined -&amp;gt; use the global constructor
    Response: null
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;🔥 Using with Tauri&lt;/h4&gt; 
&lt;p&gt;A minimal example of setting up Axios for use in a &lt;a href="https://tauri.app/plugin/http-client/"&gt;Tauri&lt;/a&gt; app with a platform fetch function that ignores CORS policy for requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import { fetch } from "@tauri-apps/plugin-http";
import axios from "axios";

const instance = axios.create({
  adapter: 'fetch',
  onDownloadProgress(e) {
    console.log('downloadProgress', e);
  },
  env: {
    fetch
  }
});

 const {data} = await instance.get("https://google.com");
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;🔥 Using with SvelteKit&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://svelte.dev/docs/kit/web-standards#Fetch-APIs"&gt;SvelteKit&lt;/a&gt; framework has a custom implementation of the fetch function for server rendering (so called &lt;code&gt;load&lt;/code&gt; functions), and also uses relative paths, which makes it incompatible with the standard URL API. So, Axios must be configured to use the custom fetch API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;export async function load({ fetch }) {
  const {data: post} = await axios.get('https://jsonplaceholder.typicode.com/posts/1', {
    adapter: 'fetch',
    env: {
      fetch,
      Request: null,
      Response: null
    }
  });

  return { post };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🔥 HTTP2&lt;/h2&gt; 
&lt;p&gt;In version &lt;code&gt;1.13.0&lt;/code&gt;, experimental &lt;code&gt;HTTP2&lt;/code&gt; support was added to the &lt;code&gt;http&lt;/code&gt; adapter. The &lt;code&gt;httpVersion&lt;/code&gt; option is now available to select the protocol version used. Additional native options for the internal &lt;code&gt;session.request()&lt;/code&gt; call can be passed via the &lt;code&gt;http2Options&lt;/code&gt; config. This config also includes the custom &lt;code&gt;sessionTimeout&lt;/code&gt; parameter, which defaults to &lt;code&gt;1000ms&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const form = new FormData();

    form.append('foo', '123');

    const {data, headers, status} = await axios.post('https://httpbin.org/post', form, {
      httpVersion: 2,
      http2Options: {
        // rejectUnauthorized: false,
        // sessionTimeout: 1000
      },
      onUploadProgress(e) {
        console.log('upload progress', e);
      },
      onDownloadProgress(e) {
        console.log('download progress', e);
      },
      responseType: 'arraybuffer'
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Semver&lt;/h2&gt; 
&lt;p&gt;Since Axios has reached a &lt;code&gt;v.1.0.0&lt;/code&gt; we will fully embrace semver as per the spec &lt;a href="https://semver.org/"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Promises&lt;/h2&gt; 
&lt;p&gt;axios depends on a native ES6 Promise implementation to be &lt;a href="https://caniuse.com/promises"&gt;supported&lt;/a&gt;. If your environment doesn't support ES6 Promises, you can &lt;a href="https://github.com/jakearchibald/es6-promise"&gt;polyfill&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;TypeScript&lt;/h2&gt; 
&lt;p&gt;axios includes &lt;a href="https://typescriptlang.org"&gt;TypeScript&lt;/a&gt; definitions and a type guard for axios errors.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;let user: User = null;
try {
  const { data } = await axios.get('/user?ID=12345');
  user = data.userDetails;
} catch (error) {
  if (axios.isAxiosError(error)) {
    handleAxiosError(error);
  } else {
    handleUnexpectedError(error);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because axios dual publishes with an ESM default export and a CJS &lt;code&gt;module.exports&lt;/code&gt;, there are some caveats. The recommended setting is to use &lt;code&gt;"moduleResolution": "node16"&lt;/code&gt; (this is implied by &lt;code&gt;"module": "node16"&lt;/code&gt;). Note that this requires TypeScript 4.7 or greater. If use ESM, your settings should be fine. If you compile TypeScript to CJS and you can’t use &lt;code&gt;"moduleResolution": "node 16"&lt;/code&gt;, you have to enable &lt;code&gt;esModuleInterop&lt;/code&gt;. If you use TypeScript to type check CJS JavaScript code, your only option is to use &lt;code&gt;"moduleResolution": "node16"&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Online one-click setup&lt;/h2&gt; 
&lt;p&gt;You can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://gitpod.io/#https://github.com/axios/axios/raw/main/examples/server.js"&gt;&lt;img src="https://gitpod.io/button/open-in-gitpod.svg?sanitize=true" alt="Open in Gitpod" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/axios/axios/raw/v1.x/CHANGELOG.md"&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/axios/axios/raw/v1.x/ECOSYSTEM.md"&gt;Ecosystem&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/axios/axios/raw/v1.x/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/axios/axios/raw/v1.x/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;axios is heavily inspired by the &lt;a href="https://docs.angularjs.org/api/ng/service/$http"&gt;$http service&lt;/a&gt; provided in &lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt;. Ultimately axios is an effort to provide a standalone &lt;code&gt;$http&lt;/code&gt;-like service for use outside of AngularJS.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/axios/axios/v1.x/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true" alt="License: MIT" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>