<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Sat, 25 Oct 2025 01:38:45 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>abenz1267/walker</title>
      <link>https://github.com/abenz1267/walker</link>
      <description>&lt;p&gt;Multi-Purpose Launcher with a lot of features. Highly Customizable and fast.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Walker - A Modern Application Launcher&lt;/h1&gt; 
&lt;p&gt;A fast, customizable application launcher built with GTK4 and Rust, designed for Linux desktop environments. Walker provides a clean, modern interface for launching applications, running commands, performing calculations, and more.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://benz.gitbook.io/walker/"&gt;GitBook Documentation/Wiki&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/mGQWBQHASt"&gt;&lt;img src="https://img.shields.io/discord/1402235361463242964?logo=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://www.gnu.org/licenses/gpl-3.0"&gt;&lt;img src="https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true" alt="License: GPL v3" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/abenz1267/walker/refs/heads/master/resources/screenshot.png" alt="screenshot" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The following Elephant providers are implemented by default:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Desktop Applications&lt;/strong&gt;: Launch installed GUI applications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Calculator&lt;/strong&gt;: Perform mathematical calculations with &lt;code&gt;=&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;File Browser&lt;/strong&gt;: Navigate and open files with &lt;code&gt;/&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Command Runner&lt;/strong&gt;: Execute shell commands&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Websearch&lt;/strong&gt;: Search the web with custom-defined engines&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Clipboard History&lt;/strong&gt;: Access clipboard history with &lt;code&gt;:&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Symbol Picker&lt;/strong&gt;: Insert special symbols with &lt;code&gt;.&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Provider List&lt;/strong&gt;: Switch between providers with &lt;code&gt;;&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Menu Integration&lt;/strong&gt;: Create custom menus with elephant and let walker display them&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dmenu&lt;/strong&gt;: Your good old dmenu ... with seamless menus!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Arch Linux Packages&lt;/strong&gt;: Search through available packages (official and aur), install or delete a target! List all exlusively installed packages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Todo List&lt;/strong&gt;: create simple todo items with basic time tracking, scheduling and notifications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bluetooth&lt;/strong&gt;: basic bluetooth management&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Build from Source&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone the repository
git clone https://github.com/abenz1267/walker.git
cd walker

# Build with Cargo
cargo build --release

# Run Walker
./target/release/walker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;GTK4 (version 4.6+)&lt;/li&gt; 
 &lt;li&gt;gtk4-layer-shell&lt;/li&gt; 
 &lt;li&gt;Protocol Buffers compiler&lt;/li&gt; 
 &lt;li&gt;cairo&lt;/li&gt; 
 &lt;li&gt;poppler-glib&lt;/li&gt; 
 &lt;li&gt;make sure &lt;a href="https://github.com/abenz1267/elephant"&gt;elephant&lt;/a&gt; is running before starting Walker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;h3&gt; Install using Nix &lt;/h3&gt; &lt;/summary&gt; 
 &lt;h4&gt;1. Add flake inputs&lt;/h4&gt; 
 &lt;p&gt;Add walker and elephant to the inputs of your configs &lt;code&gt;flake.nix&lt;/code&gt; and set walker to follow elephant&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;elephant.url = "github:abenz1267/elephant";

walker = {
  url = "github:abenz1267/walker";
  inputs.elephant.follows = "elephant";
};
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;2. Install walker&lt;/h4&gt; 
 &lt;p&gt;You have 3 options for installing walker.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Option A&lt;/strong&gt; (Home Manager Module): Import the home-manager module to your home-manager config and enable walker.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;imports = [inputs.walker.homeManagerModules.default];

programs.walker.enable = true;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Option B&lt;/strong&gt; (NixOS Module): Import the nixos module in your NixOS config and enable walker&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;imports = [inputs.walker.nixosModules.default];

programs.walker.enable = true;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Note: this option doesn't support the &lt;code&gt;runAsService&lt;/code&gt; option; It is recommended that you launch the elephant and walker services using your desktop instead.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Option C&lt;/strong&gt; (Package): Add &lt;code&gt;inputs.walker.packages.&amp;lt;system&amp;gt;.default&lt;/code&gt; to your system packages or home-manager packages. replace &lt;code&gt;&amp;lt;system&amp;gt;&lt;/code&gt; with your system architecture. Note: This option doesn't support configuration using nix.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;home.packages = [inputs.walker.packages.&amp;lt;system&amp;gt;.default];
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;environment.systemPackages = [inputs.walker.packages.&amp;lt;system&amp;gt;.default];
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;3. Configure walker&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;programs.walker = {
  enable = true;
  runAsService = true; # Note: this option isn't supported in the NixOS module only in the home-manager module

  # All options from the config.toml can be used here https://github.com/abenz1267/walker/blob/master/resources/config.toml
  config = {
    theme = "your theme name";
    placeholders."default" = { input = "Search"; list = "Example"; };
    providers.prefixes = [
      {provider = "websearch"; prefix = "+";}
      {provider = "providerlist"; prefix = "_";}
    ];
    keybinds.quick_activate = ["F1" "F2" "F3"];
  };
  
  # Set `programs.walker.config.theme="your theme name"` to choose the default theme
  themes = {
    "your theme name" = {
      # Check out the default css theme as an example https://github.com/abenz1267/walker/blob/master/resources/themes/default/style.css
      style = " /* css */ ";

      # Check out the default layouts for examples https://github.com/abenz1267/walker/tree/master/resources/themes/default
      layouts = {
        "layout" = " &amp;lt;!-- xml --&amp;gt; ";
        "item_calc" = " &amp;lt;!-- xml --&amp;gt; ";
        # other provider layouts
      };
    };
    "other theme name" = {
        # ...
    };
    # more themes
  };
};
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Optionally, there is 2 binary caches which can be used by adding the following to you config:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;nix.settings = {
  extra-substituters = ["https://walker.cachix.org" "https://walker-git.cachix.org"];
  extra-trusted-public-keys = ["walker.cachix.org-1:fG8q+uAaMqhsMxWjwvk0IMb4mFPFLqHjuvfwQxE4oJM=" "walker-git.cachix.org-1:vmC0ocfPWh0S/vRAQGtChuiZBTAe4wiKDeyyXM0/7pM="];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Basic Usage&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Make sure &lt;code&gt;elephant&lt;/code&gt; is running and you have providers installed. &lt;code&gt;elephant-providerlist&lt;/code&gt; and f.e. &lt;code&gt;elephant-desktopapplications&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Launch Walker with &lt;code&gt;walker&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In order to improve startup performance, run a Walker service with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;walker --gapplication-service
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the service is running, you can either open Walker with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;walker
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or for an even faster launch make a socket call, f.e. with &lt;code&gt;openbsd-netcat&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nc -U /run/user/1000/walker/walker.sock
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The downside of the socket call is that it does not handle any commandline options, so it's just a faster alternative to a simple &lt;code&gt;walker&lt;/code&gt; call.&lt;/p&gt; 
&lt;h2&gt;Keybinds&lt;/h2&gt; 
&lt;p&gt;The following modifier keys are valid: &lt;code&gt;ctrl&lt;/code&gt;, &lt;code&gt;alt&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To get a full list of possible key values, look here: &lt;a href="https://github.com/gtk-rs/gtk4-rs/raw/0.9/gdk4/sys/src/lib.rs#L302"&gt;GDK key-values&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;F.e. &lt;code&gt;pub const GDK_KEY_semicolon: c_int = 59;&lt;/code&gt; means that &lt;code&gt;ctrl semicolon&lt;/code&gt; would be a valid keybind.&lt;/p&gt; 
&lt;h2&gt;Config&lt;/h2&gt; 
&lt;p&gt;Configuration should be done in &lt;code&gt;~/.config/walker&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://raw.githubusercontent.com/abenz1267/walker/refs/heads/master/resources/config.toml"&gt;default config&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Theming&lt;/h2&gt; 
&lt;p&gt;You can customize Walker's appearance by creating a custom theme. Checkout &lt;code&gt;resources/themes/default&lt;/code&gt; for the default theme. Themes inherit the default theme by default, so if you just want to change the CSS, you can just create &lt;code&gt;themes/yours/style.css&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can customize rendering of list items for each provider individually, f.e. "item_files.xml" will define the layout for items sourced from the &lt;code&gt;files&lt;/code&gt; provider.&lt;/p&gt; 
&lt;p&gt;Please refer to &lt;a href="https://docs.gtk.org/gtk4/"&gt;the GTK4 docs&lt;/a&gt; to checkout how to write &lt;code&gt;*.xml&lt;/code&gt; files for GTK4.&lt;/p&gt; 
&lt;p&gt;You can set the default theme in your &lt;code&gt;config.toml&lt;/code&gt; f.e. &lt;code&gt;theme = "yours"&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please do not make PRs to fix single typos. Fix all or nothing.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the GNU General Public License v3.0 - see the &lt;a href="https://raw.githubusercontent.com/abenz1267/walker/master/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>clockworklabs/SpacetimeDB</title>
      <link>https://github.com/clockworklabs/SpacetimeDB</link>
      <description>&lt;p&gt;Multiplayer at the speed of light&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://spacetimedb.com#gh-dark-mode-only" target="_blank"&gt; &lt;img width="320" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/dark/logo.svg?sanitize=true" alt="SpacetimeDB Logo" /&gt; &lt;/a&gt; &lt;a href="https://spacetimedb.com#gh-light-mode-only" target="_blank"&gt; &lt;img width="320" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/light/logo.svg?sanitize=true" alt="SpacetimeDB Logo" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://spacetimedb.com#gh-dark-mode-only" target="_blank"&gt; &lt;img width="250" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/dark/logo-text.svg?sanitize=true" alt="SpacetimeDB" /&gt; &lt;/a&gt; &lt;a href="https://spacetimedb.com#gh-light-mode-only" target="_blank"&gt; &lt;img width="250" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/light/logo-text.svg?sanitize=true" alt="SpacetimeDB" /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;h3 align="center"&gt; Multiplayer at the speed of light. &lt;/h3&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/clockworklabs/spacetimedb"&gt;&lt;img src="https://img.shields.io/github/v/release/clockworklabs/spacetimedb?color=%23ff00a0&amp;amp;include_prereleases&amp;amp;label=version&amp;amp;sort=semver&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/clockworklabs/spacetimedb"&gt;&lt;img src="https://img.shields.io/badge/built_with-Rust-dca282.svg?style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/clockworklabs/spacetimedb/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/clockworklabs/spacetimedb/ci.yml?style=flat-square&amp;amp;branch=master" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://status.spacetimedb.com"&gt;&lt;img src="https://img.shields.io/uptimerobot/ratio/7/m784409192-e472ca350bb615372ededed7?label=cloud%20uptime&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://hub.docker.com/r/clockworklabs/spacetimedb"&gt;&lt;img src="https://img.shields.io/docker/pulls/clockworklabs/spacetimedb?style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/clockworklabs/spacetimedb/raw/master/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/badge/license-BSL_1.1-00bfff.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://crates.io/crates/spacetimedb"&gt;&lt;img src="https://img.shields.io/crates/d/spacetimedb?color=e45928&amp;amp;label=Rust%20Crate&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.nuget.org/packages/SpacetimeDB.Runtime"&gt;&lt;img src="https://img.shields.io/nuget/dt/spacetimedb.runtime?color=0b6cff&amp;amp;label=NuGet%20Package&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.gg/spacetimedb"&gt;&lt;img src="https://img.shields.io/discord/1037340874172014652?label=discord&amp;amp;style=flat-square&amp;amp;color=5a66f6" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/spacetime_db"&gt;&lt;img src="https://img.shields.io/badge/twitter-Follow_us-1d9bf0.svg?style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://clockworklabs.io/join"&gt;&lt;img src="https://img.shields.io/badge/careers-Join_us-86f7b7.svg?style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.linkedin.com/company/clockworklabs/"&gt;&lt;img src="https://img.shields.io/badge/linkedin-Connect_with_us-0a66c2.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.gg/spacetimedb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/discord.svg?sanitize=true" alt="Discord" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/spacetime_db"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/twitter.svg?sanitize=true" alt="Twitter" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/clockworklabs/spacetimedb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/github.svg?sanitize=true" alt="GitHub" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitch.tv/SpacetimeDB"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/twitch.svg?sanitize=true" alt="Twitch" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://youtube.com/@SpacetimeDB"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/youtube.svg?sanitize=true" alt="YouTube" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.linkedin.com/company/clockwork-labs/"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/linkedin.svg?sanitize=true" alt="LinkedIn" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://stackoverflow.com/questions/tagged/spacetimedb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/stackoverflow.svg?sanitize=true" alt="StackOverflow" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;What is &lt;a href="https://spacetimedb.com"&gt;SpacetimeDB&lt;/a&gt;?&lt;/h2&gt; 
&lt;p&gt;You can think of SpacetimeDB as both a database and server combined into one.&lt;/p&gt; 
&lt;p&gt;It is a relational database system that lets you upload your application logic directly into the database by way of fancy stored procedures called "modules."&lt;/p&gt; 
&lt;p&gt;Instead of deploying a web or game server that sits in between your clients and your database, your clients connect directly to the database and execute your application logic inside the database itself. You can write all of your permission and authorization logic right inside your module just as you would in a normal server.&lt;/p&gt; 
&lt;p&gt;This means that you can write your entire application in a single language, Rust, and deploy it as a single binary. No more microservices, no more containers, no more Kubernetes, no more Docker, no more VMs, no more DevOps, no more infrastructure, no more ops, no more servers.&lt;/p&gt; 
&lt;figure&gt; 
 &lt;img src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/basic-architecture-diagram.png" alt="SpacetimeDB Architecture" style="width:100%" /&gt; 
 &lt;figcaption align="center"&gt; 
  &lt;p align="center"&gt;&lt;b&gt;SpacetimeDB application architecture&lt;/b&gt;&lt;br /&gt;&lt;sup&gt;&lt;sub&gt;(elements in white are provided by SpacetimeDB)&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt; 
 &lt;/figcaption&gt; 
&lt;/figure&gt; 
&lt;p&gt;It's actually similar to the idea of smart contracts, except that SpacetimeDB is a database, has nothing to do with blockchain, and is orders of magnitude faster than any smart contract system.&lt;/p&gt; 
&lt;p&gt;So fast, in fact, that the entire backend of our MMORPG &lt;a href="https://bitcraftonline.com"&gt;BitCraft Online&lt;/a&gt; is just a SpacetimeDB module. We don't have any other servers or services running, which means that everything in the game, all of the chat messages, items, resources, terrain, and even the locations of the players are stored and processed by the database before being synchronized out to all of the clients in real-time.&lt;/p&gt; 
&lt;p&gt;SpacetimeDB is optimized for maximum speed and minimum latency rather than batch processing or OLAP workloads. It is designed to be used for real-time applications like games, chat, and collaboration tools.&lt;/p&gt; 
&lt;p&gt;This speed and latency is achieved by holding all of application state in memory, while persisting the data in a write-ahead-log (WAL) which is used to recover application state.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can run SpacetimeDB as a standalone database server via the &lt;code&gt;spacetime&lt;/code&gt; CLI tool. Install instructions for supported platforms are outlined below. The same install instructions can be found on our website at &lt;a href="https://spacetimedb.com/install"&gt;https://spacetimedb.com/install&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Install on macOS&lt;/h4&gt; 
&lt;p&gt;Installing on macOS is as simple as running our install script. After that you can use the spacetime command to manage versions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSf https://install.spacetimedb.com | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Install on Linux&lt;/h4&gt; 
&lt;p&gt;Installing on Linux is as simple as running our install script. After that you can use the spacetime command to manage versions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSf https://install.spacetimedb.com | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Install on Windows&lt;/h4&gt; 
&lt;p&gt;Installing on Windows is as simple as pasting the above snippet into PowerShell. If you would like to use WSL instead, please follow the Linux install instructions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ps1"&gt;iwr https://windows.spacetimedb.com -useb | iex
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installing from Source&lt;/h4&gt; 
&lt;p&gt;A quick note on installing from source: we recommend that you don't install from source unless there is a feature that is available in &lt;code&gt;master&lt;/code&gt; that hasn't been released yet, otherwise follow the official installation instructions.&lt;/p&gt; 
&lt;h5&gt;MacOS + Linux&lt;/h5&gt; 
&lt;p&gt;Installing on macOS + Linux is pretty straightforward. First we are going to build all of the binaries that we need:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install rustup, you can skip this step if you have cargo and the wasm32-unknown-unknown target already installed.
curl https://sh.rustup.rs -sSf | sh
# Clone SpacetimeDB
git clone https://github.com/clockworklabs/SpacetimeDB
# Build and install the CLI
cd SpacetimeDB
cargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli

# Create directories
mkdir -p ~/.local/bin
export STDB_VERSION="$(./target/release/spacetimedb-cli --version | sed -n 's/.*spacetimedb tool version \([0-9.]*\);.*/\1/p')"
mkdir -p ~/.local/share/spacetime/bin/$STDB_VERSION

# Install the update binary
cp target/release/spacetimedb-update ~/.local/bin/spacetime
cp target/release/spacetimedb-cli ~/.local/share/spacetime/bin/$STDB_VERSION
cp target/release/spacetimedb-standalone ~/.local/share/spacetime/bin/$STDB_VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At this stage you'll need to add ~/.local/bin to your path if you haven't already.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Please add the following line to your shell configuration and open a new shell session:
export PATH="$HOME/.local/bin:$PATH"

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then finally set your SpacetimeDB version:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
# Then, in a new shell, set the current version:
spacetime version use $STDB_VERSION

# If STDB_VERSION is not set anymore then you can use the following command to list your versions:
spacetime version list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify that the correct version has been installed via &lt;code&gt;spacetime --version&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Windows&lt;/h5&gt; 
&lt;p&gt;Building on windows is a bit more complicated. You'll need a slightly different version of perl compared to what comes pre-bundled in most Windows terminals. We recommend &lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;. You may also need access to an &lt;code&gt;openssl&lt;/code&gt; binary which actually comes pre-installed with &lt;a href="https://git-scm.com/downloads/win"&gt;Git for Windows&lt;/a&gt;. Also, you'll need to install &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt; for Windows.&lt;/p&gt; 
&lt;p&gt;In a Git for Windows shell you should have something that looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ which perl
/c/Strawberry/perl/bin/perl
$ which openssl
/mingw64/bin/openssl
$ which cargo 
/c/Users/&amp;lt;user&amp;gt;/.cargo/bin/cargo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If that looks correct then you're ready to proceed!&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;# Clone SpacetimeDB
git clone https://github.com/clockworklabs/SpacetimeDB

# Build and install the CLI
cd SpacetimeDB
cargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli

# Create directories
$stdbDir = "$HOME\AppData\Local\SpacetimeDB"
$stdbVersion = &amp;amp; ".\target\release\spacetimedb-cli" --version | Select-String -Pattern 'spacetimedb tool version ([0-9.]+);' | ForEach-Object { $_.Matches.Groups[1].Value }
New-Item -ItemType Directory -Path "$stdbDir\bin\$stdbVersion" -Force | Out-Null

# Install the update binary
Copy-Item "target\release\spacetimedb-update.exe" "$stdbDir\spacetime.exe"
Copy-Item "target\release\spacetimedb-cli.exe" "$stdbDir\bin\$stdbVersion\"
Copy-Item "target\release\spacetimedb-standalone.exe" "$stdbDir\bin\$stdbVersion\"

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now add the directory we just created to your path. We recommend adding it to the system path because then it will be available to all of your applications (including Unity3D). After you do this, restart your shell!&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;%USERPROFILE%\AppData\Local\SpacetimeDB
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then finally, open a new shell and use the installed SpacetimeDB version:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;spacetime version use $stdbVersion

# If stdbVersion is no longer set, list versions using the following command:
spacetime version list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify that the correct version has been installed via &lt;code&gt;spacetime --version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you're using Git for Windows you can follow these instructions instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone SpacetimeDB
git clone https://github.com/clockworklabs/SpacetimeDB
# Build and install the CLI
cd SpacetimeDB
# Build the CLI binaries - this takes a while on windows so go grab a coffee :)
cargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli

# Create directories
export STDB_VERSION="$(./target/release/spacetimedb-cli --version | sed -n 's/.*spacetimedb tool version \([0-9.]*\);.*/\1/p')"
mkdir -p ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION

# Install the update binary
cp target/release/spacetimedb-update ~/AppData/Local/SpacetimeDB/spacetime
cp target/release/spacetimedb-cli ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION
cp target/release/spacetimedb-standalone ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION

# Now add the directory we just created to your path. We recommend adding it to the system path because then it will be available to all of your applications (including Unity3D). After you do this, restart your shell!
# %USERPROFILE%\AppData\Local\SpacetimeDB

# Set the current version
spacetime version use $STDB_VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify that the correct version has been installed via &lt;code&gt;spacetime --version&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Running with Docker&lt;/h4&gt; 
&lt;p&gt;If you prefer to run Spacetime in a container, you can use the following command to start a new instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm --pull always -p 3000:3000 clockworklabs/spacetime start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For more information about SpacetimeDB, getting started guides, game development guides, and reference material please see our &lt;a href="https://spacetimedb.com/docs"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We've prepared several getting started guides in each of our supported languages to help you get up and running with SpacetimeDB as quickly as possible. You can find them on our &lt;a href="https://spacetimedb.com/docs"&gt;docs page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In summary there are only 4 steps to getting started with SpacetimeDB.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the &lt;code&gt;spacetime&lt;/code&gt; CLI tool.&lt;/li&gt; 
 &lt;li&gt;Start a SpacetimeDB standalone node with &lt;code&gt;spacetime start&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Write and upload a module in one of our supported module languages.&lt;/li&gt; 
 &lt;li&gt;Connect to the database with one of our client libraries.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can see a summary of the supported languages below with a link to the getting started guide for each.&lt;/p&gt; 
&lt;h2&gt;Language Support&lt;/h2&gt; 
&lt;p&gt;You can write SpacetimeDB modules in several popular languages, with more to come in the future!&lt;/p&gt; 
&lt;h4&gt;Serverside Libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/modules/rust/quickstart"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/modules/c-sharp/quickstart"&gt;C#&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Client Libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/sdks/rust/quickstart"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/sdks/c-sharp/quickstart"&gt;C#&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/sdks/typescript/quickstart"&gt;Typescript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;SpacetimeDB is licensed under the BSL 1.1 license. This is not an open source or free software license, however, it converts to the AGPL v3.0 license with a linking exception after a few years.&lt;/p&gt; 
&lt;p&gt;Note that the AGPL v3.0 does not typically include a linking exception. We have added a custom linking exception to the AGPL license for SpacetimeDB. Our motivation for choosing a free software license is to ensure that contributions made to SpacetimeDB are propagated back to the community. We are expressly not interested in forcing users of SpacetimeDB to open source their own code if they link with SpacetimeDB, so we needed to include a linking exception.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stalwartlabs/stalwart</title>
      <link>https://github.com/stalwartlabs/stalwart</link>
      <description>&lt;p&gt;All-in-one Mail &amp; Collaboration server. Secure, scalable and fluent in every protocol (IMAP, JMAP, SMTP, CalDAV, CardDAV, WebDAV).&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://stalw.art"&gt; &lt;img src="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/img/logo-red.svg?sanitize=true" height="150" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt; Secure, scalable mail &amp;amp; collaboration server with comprehensive protocol support 🛡️ &lt;br /&gt;(IMAP, JMAP, SMTP, CalDAV, CardDAV, WebDAV) &lt;/h3&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/stalwartlabs/stalwart/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/stalwartlabs/stalwart/ci.yml?style=flat-square" alt="continuous integration" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.gnu.org/licenses/agpl-3.0"&gt;&lt;img src="https://img.shields.io/badge/License-AGPL_v3-blue.svg?label=license&amp;amp;style=flat-square" alt="License: AGPL v3" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://stalw.art/docs/install/get-started"&gt;&lt;img src="https://img.shields.io/badge/read_the-docs-red?style=flat-square" alt="Documentation" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://mastodon.social/@stalwartlabs"&gt;&lt;img src="https://img.shields.io/mastodon/follow/109929667531941122?style=flat-square&amp;amp;logo=mastodon&amp;amp;color=%236364ff&amp;amp;label=Follow%20on%20Mastodon" alt="Mastodon" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/stalwartlabs"&gt;&lt;img src="https://img.shields.io/twitter/follow/stalwartlabs?style=flat-square&amp;amp;logo=x&amp;amp;label=Follow%20on%20Twitter" alt="Twitter" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.com/servers/stalwart-923615863037390889"&gt;&lt;img src="https://img.shields.io/discord/923615863037390889?label=Join%20Discord&amp;amp;logo=discord&amp;amp;style=flat-square" alt="Discord" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.reddit.com/r/stalwartlabs/"&gt;&lt;img src="https://img.shields.io/reddit/subreddit-subscribers/stalwartlabs?label=Join%20%2Fr%2Fstalwartlabs&amp;amp;logo=reddit&amp;amp;style=flat-square" alt="Reddit" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Stalwart&lt;/strong&gt; is an open-source mail &amp;amp; collaboration server with JMAP, IMAP4, POP3, SMTP, CalDAV, CardDAV and WebDAV support and a wide range of modern features. It is written in Rust and designed to be secure, fast, robust and scalable.&lt;/p&gt; 
&lt;p&gt;Key features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt; server with complete protocol support: 
  &lt;ul&gt; 
   &lt;li&gt;JMAP: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8621"&gt;JMAP for Mail&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://www.ietf.org/archive/id/draft-ietf-jmap-sieve-22.html"&gt;JMAP for Sieve Scripts&lt;/a&gt;.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8887"&gt;WebSocket&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc9404.html"&gt;Blob Management&lt;/a&gt; and &lt;a href="https://www.rfc-editor.org/rfc/rfc9425.html"&gt;Quotas&lt;/a&gt; extensions.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;IMAP: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc9051"&gt;IMAP4rev2&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc3501"&gt;IMAP4rev1&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc5804"&gt;ManageSieve&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;Numerous &lt;a href="https://stalw.art/docs/development/rfcs#imap4-and-extensions"&gt;extensions&lt;/a&gt; supported.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;POP3: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc1939"&gt;POP3&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc2595"&gt;STLS&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc5034"&gt;SASL&lt;/a&gt; support as well as other &lt;a href="https://datatracker.ietf.org/doc/html/rfc2449"&gt;extensions&lt;/a&gt;.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;SMTP: 
    &lt;ul&gt; 
     &lt;li&gt;SMTP server with built-in &lt;a href="https://datatracker.ietf.org/doc/html/rfc7489"&gt;DMARC&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6376"&gt;DKIM&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc7208"&gt;SPF&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc8617"&gt;ARC&lt;/a&gt; support for message authentication.&lt;/li&gt; 
     &lt;li&gt;Strong transport security through &lt;a href="https://datatracker.ietf.org/doc/html/rfc6698"&gt;DANE&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc8461"&gt;MTA-STS&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc8460"&gt;SMTP TLS&lt;/a&gt; reporting.&lt;/li&gt; 
     &lt;li&gt;Inbound throttling and filtering with granular configuration rules, sieve scripting, MTA hooks and milter integration.&lt;/li&gt; 
     &lt;li&gt;Distributed virtual queues with delayed delivery, priority delivery, quotas, routing rules and throttling support.&lt;/li&gt; 
     &lt;li&gt;Envelope rewriting and message modification.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt; server: 
  &lt;ul&gt; 
   &lt;li&gt;Calendaring and scheduling: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc4791"&gt;CalDAV&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc6638"&gt;CalDAV Scheduling&lt;/a&gt; support.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/draft-ietf-jmap-calendars-24"&gt;JMAP for Calendars&lt;/a&gt; support.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Contact management: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc6352"&gt;CardDAV&lt;/a&gt; support.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc9610"&gt;JMAP for Contacts&lt;/a&gt; support.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;File storage: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc4918"&gt;WebDAV&lt;/a&gt; support.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/draft-ietf-jmap-filenode-03"&gt;JMAP for File Storage&lt;/a&gt; support.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Sharing with fine-grained access controls: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc3744"&gt;WebDAV ACL&lt;/a&gt; support.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc9670"&gt;JMAP Sharing&lt;/a&gt; support.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Spam&lt;/strong&gt; and &lt;strong&gt;Phishing&lt;/strong&gt; built-in filter: 
  &lt;ul&gt; 
   &lt;li&gt;Comprehensive set of filtering &lt;strong&gt;rules&lt;/strong&gt; on par with popular solutions.&lt;/li&gt; 
   &lt;li&gt;LLM-driven spam filtering and message analysis.&lt;/li&gt; 
   &lt;li&gt;Statistical &lt;strong&gt;spam classifier&lt;/strong&gt; with automatic training capabilities and address book integration.&lt;/li&gt; 
   &lt;li&gt;DNS Blocklists (&lt;strong&gt;DNSBLs&lt;/strong&gt;) checking of IP addresses, domains, and hashes.&lt;/li&gt; 
   &lt;li&gt;Collaborative digest-based spam filtering with &lt;strong&gt;Pyzor&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Phishing&lt;/strong&gt; protection against homographic URL attacks, sender spoofing and other techniques.&lt;/li&gt; 
   &lt;li&gt;Trusted &lt;strong&gt;reply&lt;/strong&gt; tracking to recognize and prioritize genuine e-mail replies.&lt;/li&gt; 
   &lt;li&gt;Sender &lt;strong&gt;reputation&lt;/strong&gt; monitoring by IP address, ASN, domain and email address.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Greylisting&lt;/strong&gt; to temporarily defer unknown senders.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Spam traps&lt;/strong&gt; to set up decoy email addresses that catch and analyze spam.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Pluggable storage backends with &lt;strong&gt;RocksDB&lt;/strong&gt;, &lt;strong&gt;FoundationDB&lt;/strong&gt;, &lt;strong&gt;PostgreSQL&lt;/strong&gt;, &lt;strong&gt;mySQL&lt;/strong&gt;, &lt;strong&gt;SQLite&lt;/strong&gt;, &lt;strong&gt;S3-Compatible&lt;/strong&gt;, &lt;strong&gt;Azure&lt;/strong&gt;, &lt;strong&gt;Redis&lt;/strong&gt; and &lt;strong&gt;ElasticSearch&lt;/strong&gt; support.&lt;/li&gt; 
   &lt;li&gt;Full-text search available in 17 languages.&lt;/li&gt; 
   &lt;li&gt;Sieve scripting language with support for all &lt;a href="https://www.iana.org/assignments/sieve-extensions/sieve-extensions.xhtml"&gt;registered extensions&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Email aliases, mailing lists, subaddressing and catch-all addresses support.&lt;/li&gt; 
   &lt;li&gt;Automatic account configuration and discovery with &lt;a href="https://www.ietf.org/id/draft-bucksch-autoconfig-02.html"&gt;autoconfig&lt;/a&gt; and &lt;a href="https://learn.microsoft.com/en-us/exchange/architecture/client-access/autodiscover?view=exchserver-2019"&gt;autodiscover&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Multi-tenancy support with domain and tenant isolation.&lt;/li&gt; 
   &lt;li&gt;Disk quotas per user and tenant.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure and robust&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Encryption at rest with &lt;strong&gt;S/MIME&lt;/strong&gt; or &lt;strong&gt;OpenPGP&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Automatic TLS certificate provisioning with &lt;a href="https://datatracker.ietf.org/doc/html/rfc8555"&gt;ACME&lt;/a&gt; using &lt;code&gt;TLS-ALPN-01&lt;/code&gt;, &lt;code&gt;DNS-01&lt;/code&gt; or &lt;code&gt;HTTP-01&lt;/code&gt; challenges.&lt;/li&gt; 
   &lt;li&gt;Automated blocking of IP addresses that attack, abuse or scan the server for exploits.&lt;/li&gt; 
   &lt;li&gt;Rate limiting.&lt;/li&gt; 
   &lt;li&gt;Security audited (read the &lt;a href="https://stalw.art/blog/security-audit"&gt;report&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;Memory safe (thanks to Rust).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scalable and fault-tolerant&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Designed to handle growth seamlessly, from small setups to large-scale deployments of thousands of nodes.&lt;/li&gt; 
   &lt;li&gt;Built with &lt;strong&gt;fault tolerance&lt;/strong&gt; and &lt;strong&gt;high availability&lt;/strong&gt; in mind, recovers from hardware or software failures with minimal operational impact.&lt;/li&gt; 
   &lt;li&gt;Peer-to-peer cluster coordination or with &lt;strong&gt;Kafka&lt;/strong&gt;, &lt;strong&gt;Redpanda&lt;/strong&gt;, &lt;strong&gt;NATS&lt;/strong&gt; or &lt;strong&gt;Redis&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;, &lt;strong&gt;Apache Mesos&lt;/strong&gt; and &lt;strong&gt;Docker Swarm&lt;/strong&gt; support for automated scaling and container orchestration.&lt;/li&gt; 
   &lt;li&gt;Read replicas, sharded blob storage and in-memory data stores for high performance and low latency.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Authentication and Authorization&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;OpenID Connect&lt;/strong&gt; authentication.&lt;/li&gt; 
   &lt;li&gt;OAuth 2.0 authorization with &lt;a href="https://www.rfc-editor.org/rfc/rfc8628"&gt;authorization code&lt;/a&gt; and &lt;a href="https://www.rfc-editor.org/rfc/rfc8628"&gt;device authorization&lt;/a&gt; flows.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;LDAP&lt;/strong&gt;, &lt;strong&gt;OIDC&lt;/strong&gt;, &lt;strong&gt;SQL&lt;/strong&gt; or built-in authentication backend support.&lt;/li&gt; 
   &lt;li&gt;Two-factor authentication with Time-based One-Time Passwords (&lt;code&gt;2FA-TOTP&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Application passwords (App Passwords).&lt;/li&gt; 
   &lt;li&gt;Roles and permissions.&lt;/li&gt; 
   &lt;li&gt;Access Control Lists (ACLs).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Logging and tracing with &lt;strong&gt;OpenTelemetry&lt;/strong&gt;, journald, log files and console support.&lt;/li&gt; 
   &lt;li&gt;Metrics with &lt;strong&gt;OpenTelemetry&lt;/strong&gt; and &lt;strong&gt;Prometheus&lt;/strong&gt; integration.&lt;/li&gt; 
   &lt;li&gt;Webhooks for event-driven automation.&lt;/li&gt; 
   &lt;li&gt;Alerts with email and webhook notifications.&lt;/li&gt; 
   &lt;li&gt;Live tracing and metrics.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web-based administration&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Dashboard with real-time statistics and monitoring.&lt;/li&gt; 
   &lt;li&gt;Account, domain, group and mailing list management.&lt;/li&gt; 
   &lt;li&gt;SMTP queue management for messages and outbound DMARC and TLS reports.&lt;/li&gt; 
   &lt;li&gt;Report visualization interface for received DMARC, TLS-RPT and Failure (ARF) reports.&lt;/li&gt; 
   &lt;li&gt;Configuration of every aspect of the mail server.&lt;/li&gt; 
   &lt;li&gt;Log viewer with search and filtering capabilities.&lt;/li&gt; 
   &lt;li&gt;Self-service portal for password reset and encryption-at-rest key management.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/img/screencast-setup.gif" /&gt; 
&lt;h2&gt;Presentation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Want a deeper dive?&lt;/strong&gt; Need to explain to your boss why Stalwart is the perfect fit? Whether you're evaluating options, making a case to your team, or simply curious about how it all works under the hood, these slides walk you through the key features, architecture, and benefits of Stalwart. Browse the &lt;a href="https://stalw.art/slides"&gt;slides&lt;/a&gt; to see what makes it stand out.&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;Install Stalwart on your server by following the instructions for your platform:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/linux"&gt;Linux / MacOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/windows"&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/docker"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All documentation is available at &lt;a href="https://stalw.art/docs/install/get-started"&gt;stalw.art/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you are having problems running Stalwart, you found a bug or just have a question, do not hesitate to reach us on &lt;a href="https://github.com/stalwartlabs/stalwart/discussions"&gt;GitHub Discussions&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/stalwartlabs"&gt;Reddit&lt;/a&gt; or &lt;a href="https://discord.com/servers/stalwart-923615863037390889"&gt;Discord&lt;/a&gt;. Additionally you may purchase an &lt;a href="https://stalw.art/enterprise"&gt;Enterprise License&lt;/a&gt; to obtain priority support from Stalwart Labs LLC.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Stalwart has reached an exciting point in its journey, it’s now &lt;strong&gt;feature complete&lt;/strong&gt;. All the core functionality and open standard email and collaboration protocols that we set out to support are in place. In other words, Stalwart already does everything you’d expect from a modern, standards-compliant mail and collaboration platform.&lt;/p&gt; 
&lt;p&gt;The next major milestone is all about refinement: finalizing the database schema and focusing on performance optimizations to ensure everything runs as efficiently and reliably as possible. Once that’s done, we’ll be ready to roll out version &lt;strong&gt;1.0&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Of course, development doesn’t stop there. The community has contributed hundreds of great ideas for improvements and new features, everything from subtle usability tweaks to entirely new integrations. You can see the full list of proposals over on our &lt;a href="https://github.com/stalwartlabs/stalwart/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3Aenhancement"&gt;GitHub issues&lt;/a&gt;. If there’s something you’d like to see prioritized, just give it a thumbs up as we plan to implement enhancements based on the community’s votes.&lt;/p&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;p&gt;Your support is crucial in helping us continue to improve the project, add new features, and maintain the highest level of quality. By &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;, you help fund the development and future of Stalwart. As a thank-you, sponsors who contribute $5 per month or more will automatically receive a &lt;a href="https://stalw.art/enterprise/"&gt;Enterprise edition&lt;/a&gt; license. And, sponsors who contribute $30 per month or more, also have access to &lt;a href="https://stalw.art/support"&gt;Premium Support&lt;/a&gt; from Stalwart Labs.&lt;/p&gt; 
&lt;p&gt;These are some of our open-source sponsors:&lt;/p&gt; 
&lt;!-- sponsors --&gt;
&lt;a href="https://github.com/kbjr"&gt;&lt;img src="https://github.com/kbjr.png" width="60px" alt="User avatar: James Brumond" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/MailRoute"&gt;&lt;img src="https://github.com/MailRoute.png" width="60px" alt="User avatar: MailRoute, Inc." /&gt;&lt;/a&gt;
&lt;a href="https://github.com/starsong-consulting"&gt;&lt;img src="https://github.com/starsong-consulting.png" width="60px" alt="User avatar: Starsong GmbH" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/mingfu-design"&gt;&lt;img src="https://github.com/mingfu-design.png" width="60px" alt="User avatar: Ming Fu Design Ltd. 明孚設計有限公司" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/tamwuff"&gt;&lt;img src="https://github.com/tamwuff.png" width="60px" alt="User avatar: Tamino" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/panascais"&gt;&lt;img src="https://github.com/panascais.png" width="60px" alt="User avatar: panascais" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/ToxicMushroom"&gt;&lt;img src="https://github.com/ToxicMushroom.png" width="60px" alt="User avatar: Merlijn" /&gt;&lt;/a&gt;
&lt;!-- sponsors --&gt; 
&lt;p&gt;&lt;br /&gt;If you would like to support our work, please consider &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Funding&lt;/h2&gt; 
&lt;p&gt;Part of the development of this project was funded through:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nlnet.nl/entrust"&gt;NGI0 Entrust Fund&lt;/a&gt;, a fund established by &lt;a href="https://nlnet.nl/"&gt;NLnet&lt;/a&gt; with financial support from the European Commission's &lt;a href="https://ngi.eu/"&gt;Next Generation Internet&lt;/a&gt; programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 101069594.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nlnet.nl/NGI0/"&gt;NGI Zero Core&lt;/a&gt;, a fund established by &lt;a href="https://nlnet.nl/"&gt;NLnet&lt;/a&gt; with financial support from the European Commission's programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 101092990.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you find the project useful you can help by &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;. Thank you!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is dual-licensed under the &lt;strong&gt;GNU Affero General Public License v3.0&lt;/strong&gt; (AGPL-3.0; as published by the Free Software Foundation) and the &lt;strong&gt;Stalwart Enterprise License v1 (SELv1)&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/AGPL-3.0-only.txt"&gt;GNU Affero General Public License v3.0&lt;/a&gt; is a free software license that ensures your freedom to use, modify, and distribute the software, with the condition that any modified versions of the software must also be distributed under the same license.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/LicenseRef-SEL.txt"&gt;Stalwart Enterprise License v1 (SELv1)&lt;/a&gt; is a proprietary license designed for commercial use. It offers additional features and greater flexibility for businesses that do not wish to comply with the AGPL-3.0 license requirements.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each file in this project contains a license notice at the top, indicating the applicable license(s). The license notice follows the &lt;a href="https://reuse.software/"&gt;REUSE guidelines&lt;/a&gt; to ensure clarity and consistency. The full text of each license is available in the &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/"&gt;LICENSES&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2020, Stalwart Labs LLC&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rustfs/rustfs</title>
      <link>https://github.com/rustfs/rustfs</link>
      <description>&lt;p&gt;🚀 RustFS is an open-source, S3-compatible high-performance object storage system supporting migration and coexistence with other S3-compatible platforms such as MinIO and Ceph.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://rustfs.com"&gt;&lt;img src="https://rustfs.com/images/rustfs-github.png" alt="RustFS" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt;RustFS is a high-performance distributed object storage software built using Rust&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/rustfs/rustfs/actions/workflows/ci.yml"&gt;&lt;img alt="CI" src="https://github.com/rustfs/rustfs/actions/workflows/ci.yml/badge.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rustfs/rustfs/actions/workflows/docker.yml"&gt;&lt;img alt="Build and Push Docker Images" src="https://github.com/rustfs/rustfs/actions/workflows/docker.yml/badge.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;img alt="GitHub commit activity" src="https://img.shields.io/github/commit-activity/m/rustfs/rustfs" /&gt; &lt;img alt="Github Last Commit" src="https://img.shields.io/github/last-commit/rustfs/rustfs" /&gt; &lt;a href="https://hellogithub.com/repository/rustfs/rustfs" target="_blank"&gt;&lt;img src="https://abroad.hellogithub.com/v1/widgets/recommend.svg?rid=b95bcb72bdc340b68f16fdf6790b7d5b&amp;amp;claim_uid=MsbvjYeLDKAH457&amp;amp;theme=small" alt="Featured｜HelloGitHub" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://docs.rustfs.com/introduction.html"&gt;Getting Started&lt;/a&gt; · &lt;a href="https://docs.rustfs.com/"&gt;Docs&lt;/a&gt; · &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;Bug reports&lt;/a&gt; · &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;Discussions&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; English | &lt;a href="https://github.com/rustfs/rustfs/raw/main/README_ZH.md"&gt;简体中文&lt;/a&gt; | 
 &lt;!-- Keep these links. Translations will automatically update with the README. --&gt; &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=de"&gt;Deutsch&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=es"&gt;Español&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=fr"&gt;français&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ja"&gt;日本語&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ko"&gt;한국어&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=pt"&gt;Português&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ru"&gt;Русский&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;RustFS is a high-performance distributed object storage software built using Rust, one of the most popular languages worldwide. Along with MinIO, it shares a range of advantages such as simplicity, S3 compatibility, open-source nature, support for data lakes, AI, and big data. Furthermore, it has a better and more user-friendly open-source license in comparison to other storage systems, being constructed under the Apache license. As Rust serves as its foundation, RustFS provides faster speed and safer distributed features for high-performance object storage.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;⚠️ &lt;strong&gt;RustFS is under rapid development. Do NOT use in production environments!&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: Built with Rust, ensuring speed and efficiency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Distributed Architecture&lt;/strong&gt;: Scalable and fault-tolerant design for large-scale deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;S3 Compatibility&lt;/strong&gt;: Seamless integration with existing S3-compatible applications.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Lake Support&lt;/strong&gt;: Optimized for big data and AI workloads.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open Source&lt;/strong&gt;: Licensed under Apache 2.0, encouraging community contributions and transparency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User-Friendly&lt;/strong&gt;: Designed with simplicity in mind, making it easy to deploy and manage.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RustFS vs MinIO&lt;/h2&gt; 
&lt;p&gt;Stress test server parameters&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;parameter&lt;/th&gt; 
   &lt;th&gt;Remark&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CPU&lt;/td&gt; 
   &lt;td&gt;2 Core&lt;/td&gt; 
   &lt;td&gt;Intel Xeon(Sapphire Rapids) Platinum 8475B , 2.7/3.2 GHz&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Memory&lt;/td&gt; 
   &lt;td&gt;4GB&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Network&lt;/td&gt; 
   &lt;td&gt;15Gbp&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Driver&lt;/td&gt; 
   &lt;td&gt;40GB x 4&lt;/td&gt; 
   &lt;td&gt;IOPS 3800 / Driver&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/2e4979b5-260c-4f2c-ac12-c87fd558072a"&gt;https://github.com/user-attachments/assets/2e4979b5-260c-4f2c-ac12-c87fd558072a&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;RustFS vs Other object storage&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;RustFS&lt;/th&gt; 
   &lt;th&gt;Other object storage&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Powerful Console&lt;/td&gt; 
   &lt;td&gt;Simple and useless Console&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Developed based on Rust language, memory is safer&lt;/td&gt; 
   &lt;td&gt;Developed in Go or C, with potential issues like memory GC/leaks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Does not report logs to third-party countries&lt;/td&gt; 
   &lt;td&gt;Reporting logs to other third countries may violate national security laws&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Licensed under Apache, more business-friendly&lt;/td&gt; 
   &lt;td&gt;AGPL V3 License and other License, polluted open source and License traps, infringement of intellectual property rights&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Comprehensive S3 support, works with domestic and international cloud providers&lt;/td&gt; 
   &lt;td&gt;Full support for S3, but no local cloud vendor support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rust-based development, strong support for secure and innovative devices&lt;/td&gt; 
   &lt;td&gt;Poor support for edge gateways and secure innovative devices&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stable commercial prices, free community support&lt;/td&gt; 
   &lt;td&gt;High pricing, with costs up to $250,000 for 1PiB&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;No risk&lt;/td&gt; 
   &lt;td&gt;Intellectual property risks and risks of prohibited uses&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To get started with RustFS, follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;One-click installation script (Option 1)​​&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -O  https://rustfs.com/install_rustfs.sh &amp;amp;&amp;amp; bash install_rustfs.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;&lt;strong&gt;Docker Quick Start (Option 2)​​&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; # create data and logs directories
 mkdir -p data logs

 # using latest alpha version
 docker run -d -p 9000:9000 -v $(pwd)/data:/data -v $(pwd)/logs:/logs rustfs/rustfs:alpha

 # Specific version
 docker run -d -p 9000:9000 -v $(pwd)/data:/data -v $(pwd)/logs:/logs rustfs/rustfs:1.0.0.alpha.45
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For docker installation, you can also run the container with docker compose. With the &lt;code&gt;docker-compose.yml&lt;/code&gt; file under root directory, running the command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker compose --profile observability up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You should be better to have a look for &lt;code&gt;docker-compose.yaml&lt;/code&gt; file. Because, several services contains in the file. Grafan,prometheus,jaeger containers will be launched using docker compose file, which is helpful for rustfs observability. If you want to start redis as well as nginx container, you can specify the corresponding profiles.&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build from Source (Option 3) - Advanced Users&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For developers who want to build RustFS Docker images from source with multi-architecture support:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Build multi-architecture images locally
./docker-buildx.sh --build-arg RELEASE=latest

# Build and push to registry
./docker-buildx.sh --push

# Build specific version
./docker-buildx.sh --release v1.0.0 --push

# Build for custom registry
./docker-buildx.sh --registry your-registry.com --namespace yourname --push
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;docker-buildx.sh&lt;/code&gt; script supports:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Multi-architecture builds&lt;/strong&gt;: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Automatic version detection&lt;/strong&gt;: Uses git tags or commit hashes&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Registry flexibility&lt;/strong&gt;: Supports Docker Hub, GitHub Container Registry, etc.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Build optimization&lt;/strong&gt;: Includes caching and parallel builds&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can also use Make targets for convenience:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;make docker-buildx                    # Build locally
make docker-buildx-push               # Build and push
make docker-buildx-version VERSION=v1.0.0  # Build specific version
make help-docker                      # Show all Docker-related commands
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Access the Console&lt;/strong&gt;: Open your web browser and navigate to &lt;code&gt;http://localhost:9000&lt;/code&gt; to access the RustFS console, default username and password is &lt;code&gt;rustfsadmin&lt;/code&gt; .&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Bucket&lt;/strong&gt;: Use the console to create a new bucket for your objects.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Upload Objects&lt;/strong&gt;: You can upload files directly through the console or use S3-compatible APIs to interact with your RustFS instance.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you want to access RustFS instance with &lt;code&gt;https&lt;/code&gt;, you can refer to &lt;a href="https://docs.rustfs.com/integration/tls-configured.html"&gt;TLS configuration docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For detailed documentation, including configuration options, API references, and advanced usage, please visit our &lt;a href="https://docs.rustfs.com"&gt;Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you have any questions or need assistance, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check the &lt;a href="https://github.com/rustfs/rustfs/discussions/categories/q-a"&gt;FAQ&lt;/a&gt; for common issues and solutions.&lt;/li&gt; 
 &lt;li&gt;Join our &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt; to ask questions and share your experiences.&lt;/li&gt; 
 &lt;li&gt;Open an issue on our &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;GitHub Issues&lt;/a&gt; page for bug reports or feature requests.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.rustfs.com"&gt;Documentation&lt;/a&gt; - The manual you should read&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustfs/rustfs/releases"&gt;Changelog&lt;/a&gt; - What we broke and fixed&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt; - Where the community lives&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Bugs&lt;/strong&gt;: &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Business&lt;/strong&gt;: &lt;a href="mailto:hello@rustfs.com"&gt;hello@rustfs.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jobs&lt;/strong&gt;: &lt;a href="mailto:jobs@rustfs.com"&gt;jobs@rustfs.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;General Discussion&lt;/strong&gt;: &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/rustfs/rustfs/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;RustFS is a community-driven project, and we appreciate all contributions. Check out the &lt;a href="https://github.com/rustfs/rustfs/graphs/contributors"&gt;Contributors&lt;/a&gt; page to see the amazing people who have helped make RustFS better.&lt;/p&gt; 
&lt;a href="https://github.com/rustfs/rustfs/graphs/contributors"&gt; &lt;img src="https://opencollective.com/rustfs/contributors.svg?width=890&amp;amp;limit=500&amp;amp;button=false" alt="Contributors" /&gt; &lt;/a&gt; 
&lt;h2&gt;Github Trending Top&lt;/h2&gt; 
&lt;p&gt;🚀 RustFS is beloved by open-source enthusiasts and enterprise users worldwide, often appearing on the GitHub Trending top charts.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://trendshift.io/repositories/14181" target="_blank"&gt;&lt;img src="https://raw.githubusercontent.com/rustfs/rustfs/refs/heads/main/docs/rustfs-trending.jpg" alt="rustfs%2Frustfs | Trendshift" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#rustfs/rustfs&amp;amp;type=date&amp;amp;legend=top-left"&gt;&lt;img src="https://api.star-history.com/svg?repos=rustfs/rustfs&amp;amp;type=date&amp;amp;legend=top-left" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;RustFS&lt;/strong&gt; is a trademark of RustFS, Inc. All other trademarks are the property of their respective owners.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>0x192/universal-android-debloater</title>
      <link>https://github.com/0x192/universal-android-debloater</link>
      <description>&lt;p&gt;Cross-platform GUI written in Rust using ADB to debloat non-rooted android devices. Improve your privacy, the security and battery life of your device.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Universal Android Debloater GUI&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: Use at your own risk. I am not responsible for anything that could happen to your phone.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/0x192/universal-android-debloater/main/resources/screenshots/v0.5.0.png" width="850" alt="uad_screenshot" /&gt; 
&lt;p&gt;&lt;strong&gt;This software is still in an early stage of development. Check out the issues, and feel free to contribute!&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Summary&lt;/h2&gt; 
&lt;p&gt;This is a complete rewrite in Rust of the &lt;a href="https://gitlab.com/W1nst0n/universal-android-debloater"&gt;UAD project&lt;/a&gt;, which aims to improve privacy and battery performance by removing unnecessary and obscure system apps. This can also contribute to improve security by reducing &lt;a href="https://en.wikipedia.org/wiki/Attack_surface"&gt;the attack surface&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Packages are as well documented as possible in order to provide a better understanding of what you can delete or not. The worst issue that could happen is removing an essential system package needed during boot causing then an unfortunate bootloop. After about 5 failed system boots, the phone will automatically reboot in recovery mode, and you'll have to perform a FACTORY RESET. Make a backup first!&lt;/p&gt; 
&lt;p&gt;In any case, you &lt;strong&gt;CANNOT&lt;/strong&gt; brick your device with this software! That's the main point, right?&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Uninstall/Disable and Restore/Enable system packages&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Multi-user support (e.g. apps in work profiles)&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Export/Import your selection in &lt;code&gt;uad_exported_selection.txt&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Multi-device support: you can connect multiple phones at the same time&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; All your actions are logged, so you never forget what you've done&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;NB : System apps cannot truly be uninstalled without root (see the &lt;a href="https://github.com/0x192/universal-android-debloater/wiki/FAQ"&gt;FAQ&lt;/a&gt;)&lt;/p&gt; 
&lt;h2&gt;Universal Debloat Lists&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; GFAM (Google/Facebook/Amazon/Microsoft)&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; AOSP&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Manufacturers (OEM)&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Mobile carriers&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Qualcomm / Mediatek / Miscellaneous&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Manufacturers debloat lists&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Archos&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Asus&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Blackberry&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Gionee&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; LG&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Google&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; iQOO&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Fairphone&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; HTC&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Huawei&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Motorola&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Nokia&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; OnePlus&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Oppo&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Realme&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Samsung&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Sony&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Tecno&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; TCL&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Unihertz&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Vivo/iQOO&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Wiko&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Xiaomi&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; ZTE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Mobile carriers debloat lists&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Country&lt;/th&gt; 
   &lt;th&gt;Carriers&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;France&lt;/td&gt; 
   &lt;td&gt;Orange, SFR, Free, Bouygues&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;USA&lt;/td&gt; 
   &lt;td&gt;T-Mobile, Verizon, Sprint, AT&amp;amp;T&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Germany&lt;/td&gt; 
   &lt;td&gt;Telekom&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;UK&lt;/td&gt; 
   &lt;td&gt;EE&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;How to use it&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Read the &lt;a href="https://github.com/0x192/universal-android-debloater/wiki/FAQ"&gt;FAQ&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Do a proper backup of your data! You can never be too careful!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable &lt;em&gt;Developer Options&lt;/em&gt; on your smartphone.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Turn on &lt;em&gt;USB Debugging&lt;/em&gt; from the developer panel.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;From the settings, disconnect from any OEM accounts (when you delete an OEM account package it could lock you on the lockscreen because the phone can't associate your identity anymore)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install ADB (see the intructions by clicking on your OS below):&lt;/p&gt; &lt;p&gt; &lt;/p&gt;
  &lt;details&gt; 
   &lt;summary&gt;LINUX&lt;/summary&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Install &lt;em&gt;Android platform tools&lt;/em&gt; on your PC :&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p&gt;Debian Base:&lt;/p&gt; 
   &lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt install android-sdk-platform-tools
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;Arch-Linux Base:&lt;/p&gt; 
   &lt;pre&gt;&lt;code class="language-bash"&gt;sudo pacman -S android-tools
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;Red Hat Base:&lt;/p&gt; 
   &lt;pre&gt;&lt;code class="language-bash"&gt;sudo yum install android-tools
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;OpenSUSE Base:&lt;/p&gt; 
   &lt;pre&gt;&lt;code class="language-bash"&gt;sudo zypper install android-tools
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt; &lt;/p&gt;
  &lt;details&gt; 
   &lt;summary&gt;MAC OS&lt;/summary&gt; 
   &lt;ul&gt; 
    &lt;li&gt; &lt;p&gt;Install &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
    &lt;li&gt; &lt;p&gt;Install &lt;em&gt;Android platform tools&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;brew install android-platform-tools
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/details&gt; &lt;p&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt; &lt;/p&gt;
&lt;details&gt; 
 &lt;summary&gt;WINDOWS&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Download &lt;a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip"&gt;android platform tools&lt;/a&gt; and unzip it somewhere.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href="https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/"&gt;Add the android platform tools to your PATH&lt;/a&gt; &lt;strong&gt;OR&lt;/strong&gt; make sure to launch UAD from the same directory.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href="https://developer.android.com/studio/run/oem-usb#Drivers"&gt;Install USB drivers for your device&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Check your device is detected:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt; adb devices
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt;
 &lt;/ul&gt;
&lt;/details&gt; 
&lt;p&gt;&lt;/p&gt;    
&lt;li&gt; &lt;p&gt;Download the latest release of UAD GUI for your Operating System &lt;a href="https://github.com/0x192/universal-android-debloater/releases"&gt;here&lt;/a&gt;. Take the &lt;code&gt;opengl&lt;/code&gt; version only if the default version (with a Vulkan backend) doesn't launch.&lt;/p&gt; &lt;/li&gt;  
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Chinese phones users may need to use the AOSP list for removing some stock apps because those Chinese manufacturers (especially Xiaomi and Huawei) have been using the name of AOSP packages for their own (modified &amp;amp; closed-source) apps.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE:&lt;/strong&gt; You will have to run this software whenever your OEM pushes an update to your phone as some &lt;em&gt;uninstalled&lt;/em&gt; system apps could be reinstalled.&lt;/p&gt; 
&lt;h2&gt;How to contribute&lt;/h2&gt; 
&lt;p&gt;Hey-hey-hey! Don't go away so fast! This is a community project. That means I need you! I'm sure you want to make this project better anyway.&lt;/p&gt; 
&lt;p&gt;==&amp;gt; &lt;a href="https://github.com/0x192/universal-android-debloater/wiki"&gt;How to contribute&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Special thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mawilms"&gt;@mawilms&lt;/a&gt; for his LotRO plugin manager (&lt;a href="https://github.com/mawilms/lembas"&gt;Lembas&lt;/a&gt;) which helped me a lot to understand how to use the &lt;a href="https://github.com/hecrj/iced"&gt;Iced&lt;/a&gt; GUI library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/casperstorm"&gt;@casperstorm&lt;/a&gt; for the UI/UX inspiration.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ai-dynamo/dynamo</title>
      <link>https://github.com/ai-dynamo/dynamo</link>
      <description>&lt;p&gt;A Datacenter Scale Distributed Inference Serving Framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/images/frontpage-banner.png" alt="Dynamo banner" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ai-dynamo/dynamo/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/ai-dynamo/dynamo" alt="GitHub Release" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/D92uqZRjCZ"&gt;&lt;img src="https://dcbadge.limes.pink/api/server/D92uqZRjCZ?style=flat" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/ai-dynamo/dynamo"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;| &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/dynamo/issues/2486"&gt;Roadmap&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/dynamo/raw/main/docs/reference/support-matrix.md"&gt;Support matrix&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://docs.nvidia.com/dynamo/latest/index.html"&gt;Documentation&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/dynamo/tree/main/examples"&gt;Examples&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://catalog.ngc.nvidia.com/orgs/nvidia/teams/ai-dynamo/collections/ai-dynamo"&gt;Prebuilt containers&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/enhancements"&gt;Design Proposals&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://developer.nvidia.com/blog/tag/nvidia-dynamo"&gt;Blogs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;NVIDIA Dynamo&lt;/h1&gt; 
&lt;p&gt;High-throughput, low-latency inference framework designed for serving generative AI and reasoning models in multi-node distributed environments.&lt;/p&gt; 
&lt;h2&gt;Latest News&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;[08/05] Deploy &lt;code&gt;openai/gpt-oss-120b&lt;/code&gt; with disaggregated serving on NVIDIA Blackwell GPUs using Dynamo &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/backends/trtllm/gpt-oss.md"&gt;➡️ link&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The Era of Multi-GPU, Multi-Node&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/images/frontpage-gpu-vertical.png" alt="Multi Node Multi-GPU topology" width="600" /&gt; &lt;/p&gt; 
&lt;p&gt;Large language models are quickly outgrowing the memory and compute budget of any single GPU. Tensor-parallelism solves the capacity problem by spreading each layer across many GPUs—and sometimes many servers—but it creates a new one: how do you coordinate those shards, route requests, and share KV cache fast enough to feel like one accelerator? This orchestration gap is exactly what NVIDIA Dynamo is built to close.&lt;/p&gt; 
&lt;p&gt;Dynamo is designed to be inference engine agnostic (supports TRT-LLM, vLLM, SGLang or others) and captures LLM-specific capabilities such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Disaggregated prefill &amp;amp; decode inference&lt;/strong&gt; – Maximizes GPU throughput and facilitates trade off between throughput and latency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic GPU scheduling&lt;/strong&gt; – Optimizes performance based on fluctuating demand&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LLM-aware request routing&lt;/strong&gt; – Eliminates unnecessary KV cache re-computation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Accelerated data transfer&lt;/strong&gt; – Reduces inference response time using NIXL.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;KV cache offloading&lt;/strong&gt; – Leverages multiple memory hierarchies for higher system throughput&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/images/frontpage-architecture.png" alt="Dynamo architecture" width="600" /&gt; &lt;/p&gt; 
&lt;h2&gt;Framework Support Matrix&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;vLLM&lt;/th&gt; 
   &lt;th&gt;SGLang&lt;/th&gt; 
   &lt;th&gt;TensorRT-LLM&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/design_docs/disagg_serving.md"&gt;&lt;strong&gt;Disaggregated Serving&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/design_docs/disagg_serving.md#conditional-disaggregation"&gt;&lt;strong&gt;Conditional Disaggregation&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/router/kv_cache_routing.md"&gt;&lt;strong&gt;KV-Aware Routing&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/planner/load_planner.md"&gt;&lt;strong&gt;Load Based Planner&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/planner/sla_planner.md"&gt;&lt;strong&gt;SLA-Based Planner&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/kvbm/kvbm_architecture.md"&gt;&lt;strong&gt;KVBM&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To learn more about each framework and their capabilities, check out each framework's README!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/backends/vllm/README.md"&gt;vLLM&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/backends/sglang/README.md"&gt;SGLang&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/backends/trtllm/README.md"&gt;TensorRT-LLM&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Built in Rust for performance and in Python for extensibility, Dynamo is fully open-source and driven by a transparent, OSS (Open Source Software) first development approach.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;The following examples require a few system level packages. Recommended to use Ubuntu 24.04 with a x86_64 CPU. See &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/reference/support-matrix.md"&gt;docs/reference/support-matrix.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;1. Initial setup&lt;/h2&gt; 
&lt;p&gt;The Dynamo team recommends the &lt;code&gt;uv&lt;/code&gt; Python package manager, although any way works. Install uv:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install Python development headers&lt;/h3&gt; 
&lt;p&gt;Backend engines require Python development headers for JIT compilation. Install them with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt install python3-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install etcd and NATS (required)&lt;/h3&gt; 
&lt;p&gt;To coordinate across a data center, Dynamo relies on etcd and NATS. To run Dynamo locally, these need to be available.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://etcd.io/"&gt;etcd&lt;/a&gt; can be run directly as &lt;code&gt;./etcd&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nats.io/"&gt;nats&lt;/a&gt; needs jetstream enabled: &lt;code&gt;nats-server -js&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To quickly setup etcd &amp;amp; NATS, you can also run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# At the root of the repository:
# Edit deploy/docker-compose.yml to comment out "runtime: nvidia" of the dcgm-exporter service if the nvidia container runtime isn't deployed or to be used.
docker compose -f deploy/docker-compose.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;2. Select an engine&lt;/h2&gt; 
&lt;p&gt;We publish Python wheels specialized for each of our supported engines: vllm, sglang, and trtllm. The examples that follow use SGLang; continue reading for other engines.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;uv venv venv
source venv/bin/activate
uv pip install pip

# Choose one
uv pip install "ai-dynamo[sglang]"  #replace with [vllm], [trtllm], etc.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3. Run Dynamo&lt;/h2&gt; 
&lt;h3&gt;Sanity check (optional)&lt;/h3&gt; 
&lt;p&gt;Before trying out Dynamo, you can verify your system configuration and dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./deploy/sanity_check.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a quick check for system resources, development tools, LLM frameworks, and Dynamo components.&lt;/p&gt; 
&lt;h3&gt;Running an LLM API server&lt;/h3&gt; 
&lt;p&gt;Dynamo provides a simple way to spin up a local set of inference components including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;OpenAI Compatible Frontend&lt;/strong&gt; – High performance OpenAI compatible http api server written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Basic and Kv Aware Router&lt;/strong&gt; – Route and load balance traffic to a set of workers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Workers&lt;/strong&gt; – Set of pre-configured LLM serving engines.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;# Start an OpenAI compatible HTTP server, a pre-processor (prompt templating and tokenization) and a router.
# Pass the TLS certificate and key paths to use HTTPS instead of HTTP.
python -m dynamo.frontend --http-port 8000 [--tls-cert-path cert.pem] [--tls-key-path key.pem]

# Start the SGLang engine, connecting to NATS and etcd to receive requests. You can run several of these,
# both for the same model and for multiple models. The frontend node will discover them.
python -m dynamo.sglang --model deepseek-ai/DeepSeek-R1-Distill-Llama-8B
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Send a Request&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl localhost:8000/v1/chat/completions   -H "Content-Type: application/json"   -d '{
    "model": "deepseek-ai/DeepSeek-R1-Distill-Llama-8B",
    "messages": [
    {
        "role": "user",
        "content": "Hello, how are you?"
    }
    ],
    "stream":false,
    "max_tokens": 300
  }' | jq
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Rerun with &lt;code&gt;curl -N&lt;/code&gt; and change &lt;code&gt;stream&lt;/code&gt; in the request to &lt;code&gt;true&lt;/code&gt; to get the responses as soon as the engine issues them.&lt;/p&gt; 
&lt;h3&gt;Deploying Dynamo&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow the &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/kubernetes/README.md"&gt;Quickstart Guide&lt;/a&gt; to deploy on Kubernetes.&lt;/li&gt; 
 &lt;li&gt;Check out &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends"&gt;Backends&lt;/a&gt; to deploy various workflow configurations (e.g. SGLang with router, vLLM with disaggregated serving, etc.)&lt;/li&gt; 
 &lt;li&gt;Run some &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/examples"&gt;Examples&lt;/a&gt; to learn about building components in Dynamo and exploring various integrations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Benchmarking Dynamo&lt;/h3&gt; 
&lt;p&gt;Dynamo provides comprehensive benchmarking tools to evaluate and optimize your deployments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/benchmarks/benchmarking.md"&gt;Benchmarking Guide&lt;/a&gt;&lt;/strong&gt; – Compare deployment topologies (aggregated vs. disaggregated vs. vanilla vLLM) using AIPerf&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/benchmarks/pre_deployment_profiling.md"&gt;Pre-Deployment Profiling&lt;/a&gt;&lt;/strong&gt; – Optimize configurations before deployment to meet SLA requirements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Engines&lt;/h1&gt; 
&lt;p&gt;Dynamo is designed to be inference engine agnostic. To use any engine with Dynamo, NATS and etcd need to be installed, along with a Dynamo frontend (&lt;code&gt;python -m dynamo.frontend [--interactive]&lt;/code&gt;).&lt;/p&gt; 
&lt;h2&gt;vLLM&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;uv pip install ai-dynamo[vllm]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the backend/worker like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m dynamo.vllm --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;vLLM attempts to allocate enough KV cache for the full context length at startup. If that does not fit in your available memory pass &lt;code&gt;--context-length &amp;lt;value&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To specify which GPUs to use set environment variable &lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;SGLang&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;# Install libnuma
apt install -y libnuma-dev

uv pip install ai-dynamo[sglang]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the backend/worker like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m dynamo.sglang --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can pass any sglang flags directly to this worker, see &lt;a href="https://docs.sglang.ai/advanced_features/server_arguments.html"&gt;https://docs.sglang.ai/advanced_features/server_arguments.html&lt;/a&gt; . See there to use multiple GPUs.&lt;/p&gt; 
&lt;h2&gt;TensorRT-LLM&lt;/h2&gt; 
&lt;p&gt;It is recommended to use &lt;a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch"&gt;NGC PyTorch Container&lt;/a&gt; for running the TensorRT-LLM engine.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] Ensure that you select a PyTorch container image version that matches the version of TensorRT-LLM you are using. For example, if you are using &lt;code&gt;tensorrt-llm==1.1.0rc5&lt;/code&gt;, use the PyTorch container image version &lt;code&gt;25.06&lt;/code&gt;. To find the correct PyTorch container version for your desired &lt;code&gt;tensorrt-llm&lt;/code&gt; release, visit the &lt;a href="https://github.com/NVIDIA/TensorRT-LLM/raw/main/docker/Dockerfile.multi"&gt;TensorRT-LLM Dockerfile.multi&lt;/a&gt; on GitHub. Switch to the branch that matches your &lt;code&gt;tensorrt-llm&lt;/code&gt; version, and look for the &lt;code&gt;BASE_TAG&lt;/code&gt; line to identify the recommended PyTorch container tag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Important] Launch container with the following additional settings &lt;code&gt;--shm-size=1g --ulimit memlock=-1&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install prerequisites&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Optional step: Only required for Blackwell and Grace Hopper
uv pip install torch==2.7.1 torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128

# Required until the trtllm version is bumped to include this pinned dependency itself
uv pip install "cuda-python&amp;gt;=12,&amp;lt;13"

sudo apt-get -y install libopenmpi-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Tip] You can learn more about these prequisites and known issues with TensorRT-LLM pip based installation &lt;a href="https://nvidia.github.io/TensorRT-LLM/installation/linux.html"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;After installing the pre-requisites above, install Dynamo&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;uv pip install ai-dynamo[trtllm]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the backend/worker like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m dynamo.trtllm --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To specify which GPUs to use set environment variable &lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Developing Locally&lt;/h1&gt; 
&lt;h2&gt;1. Install libraries&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt install -y build-essential libhwloc-dev libudev-dev pkg-config libclang-dev protobuf-compiler python3-dev cmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;macOS:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;# if brew is not installed on your system, install it
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://developer.apple.com/xcode/"&gt;Xcode&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;brew install cmake protobuf

## Check that Metal is accessible
xcrun -sdk macosx metal
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If Metal is accessible, you should see an error like &lt;code&gt;metal: error: no input files&lt;/code&gt;, which confirms it is installed correctly.&lt;/p&gt; 
&lt;h2&gt;2. Install Rust&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3. Create a Python virtual env:&lt;/h2&gt; 
&lt;p&gt;Follow the instructions in &lt;a href="https://docs.astral.sh/uv/#installation"&gt;uv installation&lt;/a&gt; guide to install uv if you don't have &lt;code&gt;uv&lt;/code&gt; installed. Once uv is installed, create a virtual environment and activate it.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install uv&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create a virtual environment&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv venv dynamo
source dynamo/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;4. Install build tools&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;uv pip install pip maturin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/PyO3/maturin"&gt;Maturin&lt;/a&gt; is the Rust&amp;lt;-&amp;gt;Python bindings build tool.&lt;/p&gt; 
&lt;h2&gt;5. Build the Rust bindings&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;cd lib/bindings/python
maturin develop --uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;6. Install the wheel&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;cd $PROJECT_ROOT
uv pip install -e .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should now be able to run &lt;code&gt;python -m dynamo.frontend&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Remember that nats and etcd must be running (see earlier).&lt;/p&gt; 
&lt;p&gt;Set the environment variable &lt;code&gt;DYN_LOG&lt;/code&gt; to adjust the logging level; for example, &lt;code&gt;export DYN_LOG=debug&lt;/code&gt;. It has the same syntax as &lt;code&gt;RUST_LOG&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you use vscode or cursor, we have a .devcontainer folder built on &lt;a href="https://code.visualstudio.com/docs/devcontainers/containers"&gt;Microsofts Extension&lt;/a&gt;. For instructions see the &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/.devcontainer/README.md"&gt;ReadMe&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>astral-sh/uv</title>
      <link>https://github.com/astral-sh/uv</link>
      <description>&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uv&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json" alt="uv" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/v/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/l/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://github.com/astral-sh/uv/actions"&gt;&lt;img src="https://github.com/astral-sh/uv/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Actions status" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/astral-sh"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d" /&gt; 
  &lt;img alt="Shows a bar chart with benchmark results." src="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt;Installing &lt;a href="https://trio.readthedocs.io/"&gt;Trio&lt;/a&gt;'s dependencies with a warm cache.&lt;/i&gt; &lt;/p&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 A single tool to replace &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, &lt;code&gt;pipx&lt;/code&gt;, &lt;code&gt;poetry&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;twine&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and more.&lt;/li&gt; 
 &lt;li&gt;⚡️ &lt;a href="https://github.com/astral-sh/uv/raw/main/BENCHMARKS.md"&gt;10-100x faster&lt;/a&gt; than &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🗂️ Provides &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#projects"&gt;comprehensive project management&lt;/a&gt;, with a &lt;a href="https://docs.astral.sh/uv/concepts/projects/layout#the-lockfile"&gt;universal lockfile&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;❇️ &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#scripts"&gt;Runs scripts&lt;/a&gt;, with support for &lt;a href="https://docs.astral.sh/uv/guides/scripts#declaring-script-dependencies"&gt;inline dependency metadata&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;🐍 &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#python-versions"&gt;Installs and manages&lt;/a&gt; Python versions.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#tools"&gt;Runs and installs&lt;/a&gt; tools published as Python packages.&lt;/li&gt; 
 &lt;li&gt;🔩 Includes a &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#the-pip-interface"&gt;pip-compatible interface&lt;/a&gt; for a performance boost with a familiar CLI.&lt;/li&gt; 
 &lt;li&gt;🏢 Supports Cargo-style &lt;a href="https://docs.astral.sh/uv/concepts/projects/workspaces"&gt;workspaces&lt;/a&gt; for scalable projects.&lt;/li&gt; 
 &lt;li&gt;💾 Disk-space efficient, with a &lt;a href="https://docs.astral.sh/uv/concepts/cache"&gt;global cache&lt;/a&gt; for dependency deduplication.&lt;/li&gt; 
 &lt;li&gt;⏬ Installable without Rust or Python via &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🖥️ Supports macOS, Linux, and Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uv is backed by &lt;a href="https://astral.sh"&gt;Astral&lt;/a&gt;, the creators of &lt;a href="https://github.com/astral-sh/ruff"&gt;Ruff&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install uv with our standalone installers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# On macOS and Linux.
curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# On Windows.
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, from &lt;a href="https://pypi.org/project/uv/"&gt;PyPI&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With pip.
pip install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Or pipx.
pipx install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If installed via the standalone installer, uv can update itself to the latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv self update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/getting-started/installation/"&gt;installation documentation&lt;/a&gt; for details and alternative installation methods.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;uv's documentation is available at &lt;a href="https://docs.astral.sh/uv"&gt;docs.astral.sh/uv&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, the command line reference documentation can be viewed with &lt;code&gt;uv help&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Projects&lt;/h3&gt; 
&lt;p&gt;uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to &lt;code&gt;rye&lt;/code&gt; or &lt;code&gt;poetry&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv init example
Initialized project `example` at `/home/user/example`

$ cd example

$ uv add ruff
Creating virtual environment at: .venv
Resolved 2 packages in 170ms
   Built example @ file:///home/user/example
Prepared 2 packages in 627ms
Installed 2 packages in 1ms
 + example==0.1.0 (from file:///home/user/example)
 + ruff==0.5.0

$ uv run ruff check
All checks passed!

$ uv lock
Resolved 2 packages in 0.33ms

$ uv sync
Resolved 2 packages in 0.70ms
Audited 1 package in 0.02ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/projects/"&gt;project documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;uv also supports building and publishing projects, even if they're not managed with uv. See the &lt;a href="https://docs.astral.sh/uv/guides/publish/"&gt;publish guide&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h3&gt;Scripts&lt;/h3&gt; 
&lt;p&gt;uv manages dependencies and environments for single-file scripts.&lt;/p&gt; 
&lt;p&gt;Create a new script and add inline metadata declaring its dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ echo 'import requests; print(requests.get("https://astral.sh"))' &amp;gt; example.py

$ uv add --script example.py requests
Updated `example.py`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run the script in an isolated virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv run example.py
Reading inline script metadata from: example.py
Installed 5 packages in 12ms
&amp;lt;Response [200]&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/scripts/"&gt;scripts documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;uv executes and installs command-line tools provided by Python packages, similar to &lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Run a tool in an ephemeral environment using &lt;code&gt;uvx&lt;/code&gt; (an alias for &lt;code&gt;uv tool run&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uvx pycowsay 'hello world!'
Resolved 1 package in 167ms
Installed 1 package in 9ms
 + pycowsay==0.0.0.2
  """

  ------------
&amp;lt; hello world! &amp;gt;
  ------------
   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install a tool with &lt;code&gt;uv tool install&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv tool install ruff
Resolved 1 package in 6ms
Installed 1 package in 2ms
 + ruff==0.5.0
Installed 1 executable: ruff

$ ruff --version
ruff 0.5.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/tools/"&gt;tools documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Python versions&lt;/h3&gt; 
&lt;p&gt;uv installs Python and allows quickly switching between versions.&lt;/p&gt; 
&lt;p&gt;Install multiple Python versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv python install 3.10 3.11 3.12
Searching for Python versions matching: Python 3.10
Searching for Python versions matching: Python 3.11
Searching for Python versions matching: Python 3.12
Installed 3 versions in 3.42s
 + cpython-3.10.14-macos-aarch64-none
 + cpython-3.11.9-macos-aarch64-none
 + cpython-3.12.4-macos-aarch64-none
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Download Python versions as needed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv venv --python 3.12.0
Using Python 3.12.0
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate

$ uv run --python pypy@3.8 -- python --version
Python 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)
[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use a specific Python version in the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv python pin 3.11
Pinned `.python-version` to `3.11`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/install-python/"&gt;Python installation documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;The pip interface&lt;/h3&gt; 
&lt;p&gt;uv provides a drop-in replacement for common &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more.&lt;/p&gt; 
&lt;p&gt;Migrate to uv without changing your existing workflows — and experience a 10-100x speedup — with the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;Compile requirements into a platform-independent requirements file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv pip compile docs/requirements.in \
   --universal \
   --output-file docs/requirements.txt
Resolved 43 packages in 12ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv venv
Using Python 3.12.3
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install the locked requirements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv pip sync docs/requirements.txt
Resolved 43 packages in 11ms
Installed 43 packages in 208ms
 + babel==2.15.0
 + black==24.4.2
 + certifi==2024.7.4
 ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/pip/index/"&gt;pip interface documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;See uv's &lt;a href="https://docs.astral.sh/uv/reference/platforms/"&gt;platform support&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Versioning policy&lt;/h2&gt; 
&lt;p&gt;See uv's &lt;a href="https://docs.astral.sh/uv/reference/versioning/"&gt;versioning policy&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the &lt;a href="https://github.com/astral-sh/uv/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h4&gt;How do you pronounce uv?&lt;/h4&gt; 
&lt;p&gt;It's pronounced as "you - vee" (&lt;a href="https://en.wikipedia.org/wiki/Help:IPA/English#Key"&gt;&lt;code&gt;/juː viː/&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt; 
&lt;h4&gt;How should I stylize uv?&lt;/h4&gt; 
&lt;p&gt;Just "uv", please. See the &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/STYLE.md#styling-uv"&gt;style guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;uv's dependency resolver uses &lt;a href="https://github.com/pubgrub-rs/pubgrub"&gt;PubGrub&lt;/a&gt; under the hood. We're grateful to the PubGrub maintainers, especially &lt;a href="https://github.com/Eh2406"&gt;Jacob Finkelman&lt;/a&gt;, for their support.&lt;/p&gt; 
&lt;p&gt;uv's Git implementation is based on &lt;a href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Some of uv's optimizations are inspired by the great work we've seen in &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt;, &lt;a href="https://github.com/orogene/orogene"&gt;Orogene&lt;/a&gt;, and &lt;a href="https://github.com/oven-sh/bun"&gt;Bun&lt;/a&gt;. We've also learned a lot from Nathaniel J. Smith's &lt;a href="https://github.com/njsmith/posy"&gt;Posy&lt;/a&gt; and adapted its &lt;a href="https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline"&gt;trampoline&lt;/a&gt; for Windows support.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uv is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="https://opensource.org/licenses/MIT"&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a target="_blank" href="https://astral.sh" style="background:none"&gt; &lt;img src="https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg?sanitize=true" alt="Made by Astral" /&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>denoland/deno</title>
      <link>https://github.com/denoland/deno</link>
      <description>&lt;p&gt;A modern runtime for JavaScript and TypeScript.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deno&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/deno"&gt;&lt;img src="https://img.shields.io/crates/v/deno.svg?sanitize=true" alt="" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=deno_land"&gt;&lt;img src="https://img.shields.io/twitter/follow/deno_land.svg?style=social&amp;amp;label=Follow" alt="Twitter badge" /&gt;&lt;/a&gt; &lt;a href="https://bsky.app/profile/deno.land"&gt;&lt;img src="https://img.shields.io/badge/Follow-whitesmoke?logo=bluesky" alt="Bluesky badge" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/deno"&gt;&lt;img src="https://img.shields.io/discord/684898665143206084?logo=discord&amp;amp;style=social" alt="Discord badge" /&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/@deno_land"&gt;&lt;img src="https://img.shields.io/youtube/channel/subscribers/UCqC2G2M-rg4fzg1esKFLFIw?style=social" alt="YouTube badge" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img align="right" src="https://deno.land/logo.svg?sanitize=true" height="150px" alt="the deno mascot dinosaur standing in the rain" /&gt; 
&lt;p&gt;&lt;a href="https://deno.com"&gt;Deno&lt;/a&gt; (&lt;a href="https://ipa-reader.com/?text=%CB%88di%CB%90no%CA%8A"&gt;/ˈdiːnoʊ/&lt;/a&gt;, pronounced &lt;code&gt;dee-no&lt;/code&gt;) is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults and a great developer experience. It's built on &lt;a href="https://v8.dev/"&gt;V8&lt;/a&gt;, &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;, and &lt;a href="https://tokio.rs/"&gt;Tokio&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Learn more about the Deno runtime &lt;a href="https://docs.deno.com/runtime/manual"&gt;in the documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install the Deno runtime on your system using one of the commands below. Note that there are a number of ways to install Deno - a comprehensive list of installation options can be found &lt;a href="https://docs.deno.com/runtime/manual/getting_started/installation"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Shell (Mac, Linux):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl -fsSL https://deno.land/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;PowerShell (Windows):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;irm https://deno.land/install.ps1 | iex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://formulae.brew.sh/formula/deno"&gt;Homebrew&lt;/a&gt; (Mac):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install deno
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://chocolatey.org/packages/deno"&gt;Chocolatey&lt;/a&gt; (Windows):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;choco install deno
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://winstall.app/apps/DenoLand.Deno"&gt;WinGet&lt;/a&gt; (Windows):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;winget install --id=DenoLand.Deno
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build and install from source&lt;/h3&gt; 
&lt;p&gt;Complete instructions for building Deno from source can be found &lt;a href="https://github.com/denoland/deno/raw/main/.github/CONTRIBUTING.md#building-from-source"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Your first Deno program&lt;/h2&gt; 
&lt;p&gt;Deno can be used for many different applications, but is most commonly used to build web servers. Create a file called &lt;code&gt;server.ts&lt;/code&gt; and include the following TypeScript code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;Deno.serve((_req: Request) =&amp;gt; {
  return new Response("Hello, world!");
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run your server with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;deno run --allow-net server.ts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This should start a local web server on &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Learn more about writing and running Deno programs &lt;a href="https://docs.deno.com/runtime/manual"&gt;in the docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Additional resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.deno.com"&gt;Deno Docs&lt;/a&gt;&lt;/strong&gt;: official guides and reference docs for the Deno runtime, &lt;a href="https://deno.com/deploy"&gt;Deno Deploy&lt;/a&gt;, and beyond.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://jsr.io/@std"&gt;Deno Standard Library&lt;/a&gt;&lt;/strong&gt;: officially supported common utilities for Deno programs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://jsr.io/"&gt;JSR&lt;/a&gt;&lt;/strong&gt;: The open-source package registry for modern JavaScript and TypeScript&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://deno.com/blog"&gt;Developer Blog&lt;/a&gt;&lt;/strong&gt;: Product updates, tutorials, and more from the Deno team.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We appreciate your help! To contribute, please read our &lt;a href="https://raw.githubusercontent.com/denoland/deno/main/.github/CONTRIBUTING.md"&gt;contributing instructions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jj-vcs/jj</title>
      <link>https://github.com/jj-vcs/jj</link>
      <description>&lt;p&gt;A Git-compatible VCS that is both simple and powerful&lt;/p&gt;&lt;hr&gt;&lt;div class="title-block" style="text-align: center;" align="center"&gt; 
 &lt;h1&gt;Jujutsu—a version control system&lt;/h1&gt; 
 &lt;p&gt;&lt;img title="jj logo" src="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/jj-logo.svg?sanitize=true" width="320" height="320" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/martinvonz/jj" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/release-date/martinvonz/jj" alt="Release date" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/jj-vcs/jj/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/martinvonz/jj" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;img src="https://img.shields.io/badge/irc-%23jujutsu-blue.svg?sanitize=true" alt="IRC" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj"&gt;Homepage&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;Installation&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/roadmap"&gt;Development Roadmap&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Jujutsu is a powerful &lt;a href="https://en.wikipedia.org/wiki/Version_control"&gt;version control system&lt;/a&gt; for software projects. You use it to get a copy of your code, track changes to the code, and finally publish those changes for others to see and use. It is designed from the ground up to be easy to use—whether you're new or experienced, working on brand new projects alone, or large scale software projects with large histories and teams.&lt;/p&gt; 
&lt;p&gt;Jujutsu is unlike most other systems, because internally it abstracts the user interface and version control algorithms from the &lt;em&gt;storage systems&lt;/em&gt; used to serve your content. This allows it to serve as a VCS with many possible physical backends, that may have their own data or networking models—like &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt; or &lt;a href="https://www.breezy-vcs.org/"&gt;Breezy&lt;/a&gt;, or hybrid systems like Google's cloud-based design, &lt;a href="https://youtu.be/W71BTkUbdqE?t=645"&gt;Piper/CitC&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Today, we use Git repositories as a storage layer to serve and track content, making it &lt;strong&gt;compatible with many of your favorite Git-based tools, right now!&lt;/strong&gt; All core developers use Jujutsu to develop Jujutsu, right here on GitHub. But it should hopefully work with your favorite Git forges, too.&lt;/p&gt; 
&lt;p&gt;We combine many distinct design choices and concepts from other version control systems into a single tool. Some of those sources of inspiration include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;: We make an effort to &lt;a href="https://github.com/jj-vcs/jj/discussions/49"&gt;be fast&lt;/a&gt;—with a snappy UX, efficient algorithms, correct data structures, and good-old-fashioned attention to detail. The default storage backend uses Git repositories for "physical storage", for wide interoperability and ease of onboarding.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mercurial &amp;amp; Sapling&lt;/strong&gt;: There are many Mercurial-inspired features, such as the &lt;a href="https://jj-vcs.github.io/jj/latest/revsets/"&gt;revset&lt;/a&gt; language to select commits. There is &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison/#the-index"&gt;no explicit index&lt;/a&gt; or staging area. Branches are "anonymous" like Mercurial, so you don't need to make up a name for each small change. Primitives for rewriting history are powerful and simple. Formatting output is done with a robust template language that can be configured by the user.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Darcs&lt;/strong&gt;: Jujutsu keeps track of conflicts as &lt;a href="https://jj-vcs.github.io/jj/latest/conflicts/"&gt;first-class objects&lt;/a&gt; in its model; they are first-class in the same way commits are, while alternatives like Git simply think of conflicts as textual diffs. While not as rigorous as systems like Darcs (which is based on a formalized theory of patches, as opposed to snapshots), the effect is that many forms of conflict resolution can be performed and propagated automatically.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And it adds several innovative, useful features of its own:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Working-copy-as-a-commit&lt;/strong&gt;: Changes to files are &lt;a href="https://jj-vcs.github.io/jj/latest/working-copy/"&gt;recorded automatically&lt;/a&gt; as normal commits, and amended on every subsequent change. This "snapshot" design simplifies the user-facing data model (commits are the only visible object), simplifies internal algorithms, and completely subsumes features like Git's stashes or the index/staging-area.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Operation log &amp;amp; undo&lt;/strong&gt;: Jujutsu records every operation that is performed on the repository, from commits, to pulls, to pushes. This makes debugging problems like "what just happened?" or "how did I end up here?" easier, &lt;em&gt;especially&lt;/em&gt; when you're helping your coworker answer those questions about their repository! And because everything is recorded, you can undo that mistake you just made with ease. Version control has finally entered &lt;a href="https://en.wikipedia.org/wiki/Undo#History"&gt;the 1960s&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic rebase and conflict resolution&lt;/strong&gt;: When you modify a commit, every descendent is automatically rebased on top of the freshly-modified one. This makes "patch-based" workflows a breeze. If you resolve a conflict in a commit, the &lt;em&gt;resolution&lt;/em&gt; of that conflict is also propagated through descendants as well. In effect, this is a completely transparent version of &lt;code&gt;git rebase --update-refs&lt;/code&gt; combined with &lt;code&gt;git rerere&lt;/code&gt;, supported by design.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The following features are available for use, but experimental; they may have bugs, backwards incompatible storage changes, and user-interface changes!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Safe, concurrent replication&lt;/strong&gt;: Have you ever wanted to store your version controlled repositories inside a Dropbox folder? Or continuously backup repositories to S3? No? Well, now you can!&lt;/p&gt; &lt;p&gt;The fundamental problem with using filesystems like Dropbox and backup tools like &lt;code&gt;rsync&lt;/code&gt; on your typical Git/Mercurial repositories is that they rely on &lt;em&gt;local filesystem operations&lt;/em&gt; being atomic, serialized, and non-concurrent with respect to other reads and writes—which is &lt;em&gt;not&lt;/em&gt; true when operating on distributed file systems, or when operations like concurrent file copies (for backup) happen while lock files are being held.&lt;/p&gt; &lt;p&gt;Jujutsu is instead designed to be &lt;a href="https://jj-vcs.github.io/jj/latest/technical/concurrency/"&gt;safe under concurrent scenarios&lt;/a&gt;; simply using rsync or Dropbox and then using that resulting repository should never result in a repository in a &lt;em&gt;corrupt state&lt;/em&gt;. The worst that &lt;em&gt;should&lt;/em&gt; happen is that it will expose conflicts between the local and remote state, leaving you to resolve them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The command-line tool is called &lt;code&gt;jj&lt;/code&gt; for now because it's easy to type and easy to replace (rare in English). The project is called "Jujutsu" because it matches "jj".&lt;/p&gt; 
&lt;p&gt;Jujutsu is relatively young, with lots of work to still be done. If you have any questions, or want to talk about future plans, please join us on Discord &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt;, start a &lt;a href="https://github.com/jj-vcs/jj/discussions"&gt;GitHub Discussion&lt;/a&gt;, or send an IRC message to &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;code&gt;#jujutsu&lt;/code&gt; on Libera Chat&lt;/a&gt;. The developers monitor all of these channels[^bridge].&lt;/p&gt; 
&lt;p&gt;[^bridge]: To be more precise, the &lt;code&gt;#jujutsu&lt;/code&gt; Libera IRC channel is bridged to one of the channels on jj's Discord. Some of the developers stay on Discord and use the bridge to follow IRC.&lt;/p&gt; 
&lt;h3&gt;News and Updates 📣&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;December 2024&lt;/strong&gt;: The &lt;code&gt;jj&lt;/code&gt; Repository has moved to the &lt;code&gt;jj-vcs&lt;/code&gt; GitHub organization.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;November 2024&lt;/strong&gt;: Version 0.24 is released which adds &lt;code&gt;jj file annotate&lt;/code&gt;, which is equivalent to &lt;code&gt;git blame&lt;/code&gt; or &lt;code&gt;hg annotate&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;September 2024&lt;/strong&gt;: Martin gave a &lt;a href="https://www.youtube.com/watch?v=LV0JzI8IcCY"&gt;presentation about Jujutsu&lt;/a&gt; at Git Merge 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Version 0.14 is released, which deprecates &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/CHANGELOG.md#0140---2024-02-07"&gt;"jj checkout" and "jj merge"&lt;/a&gt;, as well as &lt;code&gt;jj init --git&lt;/code&gt;, which is now just called &lt;code&gt;jj git init&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Oct 2023&lt;/strong&gt;: Version 0.10.0 is released! Now includes a bundled merge and diff editor for all platforms, "immutable revsets" to avoid accidentally &lt;code&gt;edit&lt;/code&gt;-ing the wrong revisions, and lots of polish.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin gave a presentation about Google's plans for Jujutsu at Git Merge 2022! See the &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt; or the &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;recording&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Related Media&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mar 2024&lt;/strong&gt;: Chris Krycho started &lt;a href="https://www.youtube.com/playlist?list=PLelyiwKWHHAq01Pvmpf6x7J0y-yQpmtxp"&gt;a YouTube series about Jujutsu&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Chris Krycho published an article about Jujutsu called &lt;a href="https://v5.chriskrycho.com/essays/jj-init/"&gt;jj init&lt;/a&gt; and Steve Klabnik followed up with the &lt;a href="https://steveklabnik.github.io/jujutsu-tutorial/"&gt;Jujutsu Tutorial&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2024&lt;/strong&gt;: Jujutsu was featured in an LWN.net article called &lt;a href="https://lwn.net/Articles/958468/"&gt;Jujutsu: a new, Git-compatible version control system&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin's Talk about Jujutsu at Git Merge 2022, &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;video&lt;/a&gt; and the associated &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The wiki also contains a more extensive list of &lt;a href="https://github.com/jj-vcs/jj/wiki/Media"&gt;media references&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Jujutsu is an &lt;strong&gt;experimental version control system&lt;/strong&gt;. While Git compatibility is stable, and most developers use it daily for all their needs, there may still be work-in-progress features, suboptimal UX, and workflow gaps that make it unusable for your particular use.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Follow the &lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;installation instructions&lt;/a&gt; to obtain and configure &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The best way to get started is probably to go through &lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;the tutorial&lt;/a&gt;. Also see the &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison"&gt;Git comparison&lt;/a&gt;, which includes a table of &lt;code&gt;jj&lt;/code&gt; vs. &lt;code&gt;git&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;As you become more familiar with Jujutsu, the following resources may be helpful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/FAQ"&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/glossary"&gt;Glossary&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help&lt;/code&gt; command (e.g. &lt;code&gt;jj help rebase&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help -k &amp;lt;keyword&amp;gt;&lt;/code&gt; command (e.g. &lt;code&gt;jj help -k config&lt;/code&gt;). Use &lt;code&gt;jj help --help&lt;/code&gt; to see what keywords are available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are using a &lt;strong&gt;prerelease&lt;/strong&gt; version of &lt;code&gt;jj&lt;/code&gt;, you would want to consult &lt;a href="https://jj-vcs.github.io/jj/prerelease/"&gt;the docs for the prerelease (main branch) version&lt;/a&gt;. You can also get there from the docs for the latest release by using the website's version switcher. The version switcher is visible in the header of the website when you scroll to the top of any page.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Compatible with Git&lt;/h3&gt; 
&lt;p&gt;Jujutsu is designed so that the underlying data and storage model is abstract. Today, only the Git backend is production-ready. The Git backend uses the &lt;a href="https://github.com/Byron/gitoxide"&gt;gitoxide&lt;/a&gt; Rust library.&lt;/p&gt; 
&lt;p&gt;The Git backend is fully featured and maintained, and allows you to use Jujutsu with any Git remote. The commits you create will look like regular Git commits. You can fetch branches from a regular Git remote and push branches to the remote. You can always switch back to Git.&lt;/p&gt; 
&lt;p&gt;Here is how you can explore a GitHub repository with &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/git_compat.png" /&gt; 
&lt;p&gt;You can even have a &lt;a href="https://jj-vcs.github.io/jj/latest/git-compatibility#colocated-jujutsugit-repos"&gt;colocated local repository&lt;/a&gt; where you can use both &lt;code&gt;jj&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; commands interchangeably.&lt;/p&gt; 
&lt;h3&gt;The working copy is automatically committed&lt;/h3&gt; 
&lt;p&gt;Jujutsu uses a real commit to represent the working copy. Checking out a commit results a new working-copy commit on top of the target commit. Almost all commands automatically amend the working-copy commit.&lt;/p&gt; 
&lt;p&gt;The working-copy being a commit means that commands never fail because the working copy is dirty (no "error: Your local changes to the following files..."), and there is no need for &lt;code&gt;git stash&lt;/code&gt;. Also, because the working copy is a commit, commands work the same way on the working-copy commit as on any other commit, so you can set the commit message before you're done with the changes.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/working_copy.png" /&gt; 
&lt;h3&gt;The repo is the source of truth&lt;/h3&gt; 
&lt;p&gt;With Jujutsu, the working copy plays a smaller role than with Git. Commands snapshot the working copy before they start, then they update the repo, and then the working copy is updated (if the working-copy commit was modified). Almost all commands (even checkout!) operate on the commits in the repo, leaving the common functionality of snapshotting and updating of the working copy to centralized code. For example, &lt;code&gt;jj restore&lt;/code&gt; (similar to &lt;code&gt;git restore&lt;/code&gt;) can restore from any commit and into any commit, and &lt;code&gt;jj describe&lt;/code&gt; can set the commit message of any commit (defaults to the working-copy commit).&lt;/p&gt; 
&lt;h3&gt;Entire repo is under version control&lt;/h3&gt; 
&lt;p&gt;All operations you perform in the repo are recorded, along with a snapshot of the repo state after the operation. This means that you can easily restore to an earlier repo state, simply undo your operations one-by-one or even &lt;em&gt;revert&lt;/em&gt; a particular operation which does not have to be the most recent one.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/operation_log.png" /&gt; 
&lt;h3&gt;Conflicts can be recorded in commits&lt;/h3&gt; 
&lt;p&gt;If an operation results in &lt;a href="https://jj-vcs.github.io/jj/latest/glossary#conflict"&gt;conflicts&lt;/a&gt;, information about those conflicts will be recorded in the commit(s). The operation will succeed. You can then resolve the conflicts later. One consequence of this design is that there's no need to continue interrupted operations. Instead, you get a single workflow for resolving conflicts, regardless of which command caused them. This design also lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).&lt;/p&gt; 
&lt;p&gt;Basic conflict resolution:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/resolve_conflicts.png" /&gt; 
&lt;p&gt;Juggling conflicts:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/juggle_conflicts.png" /&gt; 
&lt;h3&gt;Automatic rebase&lt;/h3&gt; 
&lt;p&gt;Whenever you modify a commit, any descendants of the old commit will be rebased onto the new commit. Thanks to the conflict design described above, that can be done even if there are conflicts. Bookmarks pointing to rebased commits will be updated. So will the working copy if it points to a rebased commit.&lt;/p&gt; 
&lt;h3&gt;Comprehensive support for rewriting history&lt;/h3&gt; 
&lt;p&gt;Besides the usual rebase command, there's &lt;code&gt;jj describe&lt;/code&gt; for editing the description (commit message) of an arbitrary commit. There's also &lt;code&gt;jj diffedit&lt;/code&gt;, which lets you edit the changes in a commit without checking it out. To split a commit into two, use &lt;code&gt;jj split&lt;/code&gt;. You can even move part of the changes in a commit to any other commit using &lt;code&gt;jj squash -i --from X --into Y&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;The tool is fairly feature-complete, but some important features like support for Git submodules are not yet completed. There are also several performance bugs. It's likely that workflows and setups different from what the core developers use are not well supported, e.g. there is no native support for email-based workflows.&lt;/p&gt; 
&lt;p&gt;Today, all core developers use &lt;code&gt;jj&lt;/code&gt; to work on &lt;code&gt;jj&lt;/code&gt;. I (Martin von Zweigbergk) have almost exclusively used &lt;code&gt;jj&lt;/code&gt; to develop the project itself since early January 2021. I haven't had to re-clone from source (I don't think I've even had to restore from backup).&lt;/p&gt; 
&lt;p&gt;There &lt;em&gt;will&lt;/em&gt; be changes to workflows and backward-incompatible changes to the on-disk formats before version 1.0.0. For any format changes, we'll try to implement transparent upgrades (as we've done with recent changes), or provide upgrade commands or scripts if requested.&lt;/p&gt; 
&lt;h2&gt;Related work&lt;/h2&gt; 
&lt;p&gt;There are several tools trying to solve similar problems as Jujutsu. See &lt;a href="https://jj-vcs.github.io/jj/latest/related-work"&gt;related work&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome outside contributions, and there's plenty of things to do, so don't be shy. Please ask if you want a pointer on something you can help with, and hopefully we can all figure something out.&lt;/p&gt; 
&lt;p&gt;We do have &lt;a href="https://jj-vcs.github.io/jj/prerelease/contributing/"&gt;a few policies and suggestions&lt;/a&gt; for contributors. The broad TL;DR:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug reports are very welcome!&lt;/li&gt; 
 &lt;li&gt;Every commit that lands in the &lt;code&gt;main&lt;/code&gt; branch is code reviewed.&lt;/li&gt; 
 &lt;li&gt;Please behave yourself, and obey the Community Guidelines.&lt;/li&gt; 
 &lt;li&gt;There &lt;strong&gt;is&lt;/strong&gt; a mandatory CLA you must agree to. Importantly, it &lt;strong&gt;does not&lt;/strong&gt; transfer copyright ownership to Google or anyone else; it simply gives us the right to safely redistribute and use your changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mandatory Google Disclaimer&lt;/h3&gt; 
&lt;p&gt;I (Martin von Zweigbergk, &lt;a href="mailto:martinvonz@google.com"&gt;martinvonz@google.com&lt;/a&gt;) started Jujutsu as a hobby project in late 2019, and it has evolved into my full-time project at Google, with several other Googlers (now) assisting development in various capacities. That said, &lt;strong&gt;this is not a Google product&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Jujutsu is available as Open Source Software, under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details about copyright and redistribution.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;jj&lt;/code&gt; logo was contributed by J. Jennings and is licensed under a Creative Commons License, see &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/LICENSE"&gt;&lt;code&gt;docs/images/LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>meilisearch/meilisearch</title>
      <link>https://github.com/meilisearch/meilisearch</link>
      <description>&lt;p&gt;A lightning-fast search engine API bringing AI-powered hybrid search to your sites and applications.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-light.svg?sanitize=true#gh-light-mode-only" /&gt; &lt;/a&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-dark.svg?sanitize=true#gh-dark-mode-only" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h4 align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Website&lt;/a&gt; | &lt;a href="https://roadmap.meilisearch.com/tabs/1-under-consideration"&gt;Roadmap&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/pricing?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Meilisearch Cloud&lt;/a&gt; | &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Blog&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Documentation&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs/faq?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;FAQ&lt;/a&gt; | &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Discord&lt;/a&gt; &lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://deps.rs/repo/github/meilisearch/meilisearch"&gt;&lt;img src="https://deps.rs/repo/github/meilisearch/meilisearch/status.svg?sanitize=true" alt="Dependency status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-informational" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/queue"&gt;&lt;img alt="Merge Queues enabled" src="https://img.shields.io/badge/Merge_Queues-enabled-%2357cf60?logo=github" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;⚡ A lightning-fast search engine that fits effortlessly into your apps, websites, and workflow 🔍&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=intro"&gt;Meilisearch&lt;/a&gt; helps you shape a delightful search experience in a snap, offering features that work out of the box to speed up your workflow.&lt;/p&gt; 
&lt;p align="center" name="demo"&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-light.gif#gh-light-mode-only" alt="A bright colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-dark.gif#gh-dark-mode-only" alt="A dark colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;🖥 Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=organization"&gt;&lt;strong&gt;Movies&lt;/strong&gt;&lt;/a&gt; — An application to help you find streaming platforms to watch movies using &lt;a href="https://www.meilisearch.com/solutions/hybrid-search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;hybrid search&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ecommerce.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Ecommerce&lt;/strong&gt;&lt;/a&gt; — Ecommerce website using disjunctive &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;facets&lt;/a&gt;, range and rating filtering, and pagination.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://music.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Songs&lt;/strong&gt;&lt;/a&gt; — Search through 47 million of songs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://saas.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;SaaS&lt;/strong&gt;&lt;/a&gt; — Search for contacts, deals, and companies in this &lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;multi-tenant&lt;/a&gt; CRM application.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the list of all our example apps in our &lt;a href="https://github.com/meilisearch/demos"&gt;demos repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hybrid search:&lt;/strong&gt; Combine the best of both &lt;a href="https://www.meilisearch.com/docs/learn/experimental/vector_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;semantic&lt;/a&gt; &amp;amp; full-text search to get the most relevant results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Search-as-you-type:&lt;/strong&gt; Find &amp;amp; display results in less than 50 milliseconds to provide an intuitive experience&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/typo_tolerance_settings?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Typo tolerance&lt;/a&gt;:&lt;/strong&gt; get relevant matches even when queries contain typos and misspellings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Filtering&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;faceted search&lt;/a&gt;:&lt;/strong&gt; enhance your users' search experience with custom filters and build a faceted search interface in a few lines of code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Sorting&lt;/a&gt;:&lt;/strong&gt; sort results based on price, date, or pretty much anything else your users need&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/synonyms?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Synonym support&lt;/a&gt;:&lt;/strong&gt; configure synonyms to include more relevant content in your search results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Geosearch&lt;/a&gt;:&lt;/strong&gt; filter and sort documents based on geographic data&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/language?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Extensive language support&lt;/a&gt;:&lt;/strong&gt; search datasets in any language, with optimized support for Chinese, Japanese, Hebrew, and languages using the Latin alphabet&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Security management&lt;/a&gt;:&lt;/strong&gt; control which users can access what data with API keys that allow fine-grained permissions handling&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Multi-Tenancy&lt;/a&gt;:&lt;/strong&gt; personalize search results for any number of application tenants&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly Customizable:&lt;/strong&gt; customize Meilisearch to your specific needs or use our out-of-the-box and hassle-free presets&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;RESTful API&lt;/a&gt;:&lt;/strong&gt; integrate Meilisearch in your technical stack with our plugins and SDKs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI-ready:&lt;/strong&gt; works out of the box with &lt;a href="https://www.meilisearch.com/with/langchain"&gt;langchain&lt;/a&gt; and the &lt;a href="https://github.com/meilisearch/meilisearch-mcp"&gt;model context protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy to install, deploy, and maintain&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;You can consult Meilisearch's documentation at &lt;a href="https://www.meilisearch.com/docs/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=docs"&gt;meilisearch.com/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🚀 Getting started&lt;/h2&gt; 
&lt;p&gt;For basic instructions on how to set up Meilisearch, add documents to an index, and search for documents, take a look at our &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=get-started"&gt;documentation&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;🌍 Supercharge your Meilisearch experience&lt;/h2&gt; 
&lt;p&gt;Say goodbye to server deployment and manual updates with &lt;a href="https://www.meilisearch.com/cloud?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch"&gt;Meilisearch Cloud&lt;/a&gt;. Additional features include analytics &amp;amp; monitoring in many regions around the world. No credit card is required.&lt;/p&gt; 
&lt;h2&gt;🧰 SDKs &amp;amp; integration tools&lt;/h2&gt; 
&lt;p&gt;Install one of our SDKs in your project for seamless integration between Meilisearch and your favorite language or framework!&lt;/p&gt; 
&lt;p&gt;Take a look at the complete &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-link"&gt;Meilisearch integration list&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-logos"&gt;&lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/integrations.png" alt="Logos belonging to different languages and frameworks supported by Meilisearch, including React, Ruby on Rails, Go, Rust, and PHP" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;⚙️ Advanced usage&lt;/h2&gt; 
&lt;p&gt;Experienced users will want to keep our &lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API Reference&lt;/a&gt; close at hand.&lt;/p&gt; 
&lt;p&gt;We also offer a wide range of dedicated guides to all Meilisearch features, such as &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;filtering&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;sorting&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;geosearch&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API keys&lt;/a&gt;, and &lt;a href="https://www.meilisearch.com/docs/learn/security/tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;tenant tokens&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, for more in-depth information, refer to our articles explaining fundamental Meilisearch concepts such as &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/documents?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;documents&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/indexes?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;indexes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🧾 Editions &amp;amp; Licensing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is available in two editions:&lt;/p&gt; 
&lt;h3&gt;🧪 Community Edition (CE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fully open source under the &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE"&gt;MIT license&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Core search engine with fast and relevant full-text, semantic or hybrid search&lt;/li&gt; 
 &lt;li&gt;Free to use for anyone, including commercial usage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🏢 Enterprise Edition (EE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Includes advanced features such as: 
  &lt;ul&gt; 
   &lt;li&gt;Sharding&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Governed by a &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE-EE"&gt;commercial license&lt;/a&gt; or the &lt;a href="https://mariadb.com/bsl11"&gt;Business Source License 1.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Not allowed in production without a commercial agreement with Meilisearch. 
  &lt;ul&gt; 
   &lt;li&gt;You may use, modify, and distribute the Licensed Work for non-production purposes only, such as testing, development, or evaluation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Want access to Enterprise features? → Contact us at &lt;a href="maito:sales@meilisearch.com"&gt;sales@meilisearch.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📊 Telemetry&lt;/h2&gt; 
&lt;p&gt;Meilisearch collects &lt;strong&gt;anonymized&lt;/strong&gt; user data to help us improve our product. You can &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;deactivate this&lt;/a&gt; whenever you want.&lt;/p&gt; 
&lt;p&gt;To request deletion of collected data, please write to us at &lt;a href="mailto:privacy@meilisearch.com"&gt;privacy@meilisearch.com&lt;/a&gt;. Remember to include your &lt;code&gt;Instance UID&lt;/code&gt; in the message, as this helps us quickly find and delete your data.&lt;/p&gt; 
&lt;p&gt;If you want to know more about the kind of data we collect and what we use it for, check the &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;telemetry section&lt;/a&gt; of our documentation.&lt;/p&gt; 
&lt;h2&gt;📫 Get in touch!&lt;/h2&gt; 
&lt;p&gt;Meilisearch is a search engine created by &lt;a href="https://www.meilisearch.com/careers"&gt;Meili&lt;/a&gt;, a software development company headquartered in France and with team members all over the world. Want to know more about us? &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Check out our blog!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🗞 &lt;a href="https://share-eu1.hsforms.com/1LN5N0x_GQgq7ss7tXmSykwfg3aq"&gt;Subscribe to our newsletter&lt;/a&gt; if you don't want to miss any updates! We promise we won't clutter your mailbox: we only send one edition every two months.&lt;/p&gt; 
&lt;p&gt;💌 Want to make a suggestion or give feedback? Here are some of the channels where you can reach us:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For feature requests, please visit our &lt;a href="https://github.com/meilisearch/product/discussions"&gt;product repository&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Found a bug? Open an &lt;a href="https://github.com/meilisearch/meilisearch/issues"&gt;issue&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Want to be part of our Discord community? &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Join us!&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you for your support!&lt;/p&gt; 
&lt;h2&gt;👩‍💻 Contributing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is, and will always be, open-source! If you want to contribute to the project, please look at &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/CONTRIBUTING.md"&gt;our contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📦 Versioning&lt;/h2&gt; 
&lt;p&gt;Meilisearch releases and their associated binaries are available on the project's &lt;a href="https://github.com/meilisearch/meilisearch/releases"&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The binaries are versioned following &lt;a href="https://semver.org/"&gt;SemVer conventions&lt;/a&gt;. To know more, read our &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/documentation/versioning-policy.md"&gt;versioning policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Differently from the binaries, crates in this repository are not currently available on &lt;a href="https://crates.io/"&gt;crates.io&lt;/a&gt; and do not follow &lt;a href="https://semver.org"&gt;SemVer conventions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apache/datafusion</title>
      <link>https://github.com/apache/datafusion</link>
      <description>&lt;p&gt;Apache DataFusion SQL Query Engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache DataFusion&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/datafusion"&gt;&lt;img src="https://img.shields.io/crates/v/datafusion.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/apache/datafusion/raw/main/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%20v2-blue.svg?sanitize=true" alt="Apache licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/apache/datafusion/actions?query=branch%3Amain"&gt;&lt;img src="https://github.com/apache/datafusion/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/commit-activity/m/apache/datafusion" alt="Commit Activity" /&gt; &lt;a href="https://github.com/apache/datafusion/issues"&gt;&lt;img src="https://img.shields.io/github/issues-raw/apache/datafusion" alt="Open Issues" /&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/Qw5gKqHxUM"&gt;&lt;img src="https://img.shields.io/badge/Chat-Discord-purple" alt="Discord chat" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/apache-datafusion/"&gt;&lt;img src="https://img.shields.io/badge/Follow-Linkedin-blue" alt="Linkedin" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/msrv/datafusion?label=Min%20Rust%20Version" alt="Crates.io MSRV" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://datafusion.apache.org/"&gt;Website&lt;/a&gt; | &lt;a href="https://docs.rs/datafusion/latest/datafusion/"&gt;API Docs&lt;/a&gt; | &lt;a href="https://discord.com/channels/885562378132000778/885562378132000781"&gt;Chat&lt;/a&gt;&lt;/p&gt; 
&lt;a href="https://datafusion.apache.org/"&gt; &lt;img src="https://github.com/apache/datafusion/raw/HEAD/docs/source/_static/images/2x_bgwhite_original.png" width="512" alt="logo" /&gt; &lt;/a&gt; 
&lt;p&gt;DataFusion is an extensible query engine written in &lt;a href="http://rustlang.org"&gt;Rust&lt;/a&gt; that uses &lt;a href="https://arrow.apache.org"&gt;Apache Arrow&lt;/a&gt; as its in-memory format.&lt;/p&gt; 
&lt;p&gt;This crate provides libraries and binaries for developers building fast and feature rich database and analytic systems, customized to particular workloads. See &lt;a href="https://datafusion.apache.org/user-guide/introduction.html#use-cases"&gt;use cases&lt;/a&gt; for examples. The following related subprojects target end users:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion-python/"&gt;DataFusion Python&lt;/a&gt; offers a Python interface for SQL and DataFrame queries.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion-comet/"&gt;DataFusion Comet&lt;/a&gt; is an accelerator for Apache Spark based on DataFusion.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;"Out of the box," DataFusion offers [SQL] and [&lt;code&gt;Dataframe&lt;/code&gt;] APIs, excellent &lt;a href="https://benchmark.clickhouse.com/"&gt;performance&lt;/a&gt;, built-in support for CSV, Parquet, JSON, and Avro, extensive customization, and a great community.&lt;/p&gt; 
&lt;p&gt;DataFusion features a full query planner, a columnar, streaming, multi-threaded, vectorized execution engine, and partitioned data sources. You can customize DataFusion at almost all points including additional data sources, query languages, functions, custom operators and more. See the &lt;a href="https://datafusion.apache.org/contributor-guide/architecture.html"&gt;Architecture&lt;/a&gt; section for more details.&lt;/p&gt; 
&lt;p&gt;Here are links to some important information&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/"&gt;Project Site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/cli/installation.html"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/example-usage.html"&gt;Rust Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/dataframe.html"&gt;Rust DataFrame API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/datafusion/latest/datafusion"&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion/tree/main/datafusion-examples"&gt;Rust Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://arrow.apache.org/datafusion-python/"&gt;Python DataFrame API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/datafusion/latest/datafusion/index.html#architecture"&gt;Architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What can you do with this crate?&lt;/h2&gt; 
&lt;p&gt;DataFusion is great for building projects such as domain specific query engines, new database platforms and data pipelines, query languages and more. It lets you start quickly from a fully working engine, and then customize those features specific to your use. &lt;a href="https://datafusion.apache.org/user-guide/introduction.html#known-users"&gt;Click Here&lt;/a&gt; to see a list known users.&lt;/p&gt; 
&lt;h2&gt;Contributing to DataFusion&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://datafusion.apache.org/contributor-guide"&gt;contributor guide&lt;/a&gt; and &lt;a href="https://datafusion.apache.org/contributor-guide/communication.html"&gt;communication&lt;/a&gt; pages for more information.&lt;/p&gt; 
&lt;h2&gt;Crate features&lt;/h2&gt; 
&lt;p&gt;This crate has several &lt;a href="https://doc.rust-lang.org/cargo/reference/features.html"&gt;features&lt;/a&gt; which can be specified in your &lt;code&gt;Cargo.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Default features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nested_expressions&lt;/code&gt;: functions for working with nested type function such as &lt;code&gt;array_to_string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;compression&lt;/code&gt;: reading files compressed with &lt;code&gt;xz2&lt;/code&gt;, &lt;code&gt;bzip2&lt;/code&gt;, &lt;code&gt;flate2&lt;/code&gt;, and &lt;code&gt;zstd&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;crypto_expressions&lt;/code&gt;: cryptographic functions such as &lt;code&gt;md5&lt;/code&gt; and &lt;code&gt;sha256&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datetime_expressions&lt;/code&gt;: date and time functions such as &lt;code&gt;to_timestamp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encoding_expressions&lt;/code&gt;: &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt; functions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parquet&lt;/code&gt;: support for reading the &lt;a href="https://parquet.apache.org/"&gt;Apache Parquet&lt;/a&gt; format&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sql&lt;/code&gt;: Support for sql parsing / planning&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;regex_expressions&lt;/code&gt;: regular expression functions, such as &lt;code&gt;regexp_match&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unicode_expressions&lt;/code&gt;: Include unicode aware functions such as &lt;code&gt;character_length&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unparser&lt;/code&gt;: enables support to reverse LogicalPlans back into SQL&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;recursive_protection&lt;/code&gt;: uses &lt;a href="https://docs.rs/recursive/latest/recursive/"&gt;recursive&lt;/a&gt; for stack overflow protection.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;avro&lt;/code&gt;: support for reading the &lt;a href="https://avro.apache.org/"&gt;Apache Avro&lt;/a&gt; format&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;backtrace&lt;/code&gt;: include backtrace information in error messages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parquet_encryption&lt;/code&gt;: support for using &lt;a href="https://parquet.apache.org/docs/file-format/data-pages/encryption/"&gt;Parquet Modular Encryption&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pyarrow&lt;/code&gt;: conversions between PyArrow and DataFusion types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;serde&lt;/code&gt;: enable arrow-schema's &lt;code&gt;serde&lt;/code&gt; feature&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;DataFusion API Evolution and Deprecation Guidelines&lt;/h2&gt; 
&lt;p&gt;Public methods in Apache DataFusion evolve over time: while we try to maintain a stable API, we also improve the API over time. As a result, we typically deprecate methods before removing them, according to the &lt;a href="https://datafusion.apache.org/contributor-guide/api-health.html"&gt;deprecation guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Dependencies and &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Following the &lt;a href="https://blog.rust-lang.org/2023/08/29/committing-lockfiles.html"&gt;guidance&lt;/a&gt; on committing &lt;code&gt;Cargo.lock&lt;/code&gt; files, this project commits its &lt;code&gt;Cargo.lock&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;CI uses the committed &lt;code&gt;Cargo.lock&lt;/code&gt; file, and dependencies are updated regularly using &lt;a href="https://docs.github.com/en/code-security/dependabot/working-with-dependabot"&gt;Dependabot&lt;/a&gt; PRs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BoundaryML/baml</title>
      <link>https://github.com/BoundaryML/baml</link>
      <description>&lt;p&gt;The AI framework that adds the engineering to prompt engineering (Python/TS/Ruby/Java/C#/Rust/Go compatible)&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://boundaryml.com?utm_source=github" target="_blank" rel="noopener noreferrer"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="fern/assets/baml-lamb-white.png" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/BoundaryML/baml/canary/fern/assets/baml-lamb-white.png" height="64" id="top" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://pypi.org/project/baml-py/"&gt;&lt;img src="https://img.shields.io/pypi/v/baml-py?color=006dad&amp;amp;label=BAML%20Version" alt="BAML Version" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h2&gt;BAML: Basically a Made-up Language&lt;/h2&gt; 
 &lt;h4&gt; &lt;p&gt;&lt;a href="https://www.boundaryml.com/"&gt;Homepage&lt;/a&gt; | &lt;a href="https://docs.boundaryml.com"&gt;Docs&lt;/a&gt; | &lt;a href="https://www.boundaryml.com/chat"&gt;BAML AI Chat&lt;/a&gt; | &lt;a href="https://discord.gg/BTNBeXGuaS"&gt;Discord&lt;/a&gt;&lt;/p&gt; &lt;/h4&gt; 
&lt;/div&gt; 
&lt;p&gt;BAML is a simple prompting language for building reliable &lt;strong&gt;AI workflows and agents&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;BAML makes prompt engineering easy by turning it into &lt;em&gt;schema engineering&lt;/em&gt; -- where you mostly focus on the models of your prompt -- to get more reliable outputs. You don't need to write your whole app in BAML, only the prompts! You can wire-up your LLM Functions in any language of your choice! See our quickstarts for &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;Go, and more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;BAML comes with all batteries included -- with full typesafety, streaming, retries, wide model support, even when they don't support native &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#enable-reliable-tool-calling-with-any-model"&gt;tool-calling APIs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Try BAML&lt;/strong&gt;: &lt;a href="https://www.promptfiddle.com"&gt;Prompt Fiddle&lt;/a&gt; • &lt;a href="https://baml-examples.vercel.app/"&gt;Interactive App Examples&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;The core BAML principle: LLM Prompts are functions&lt;/h2&gt; 
&lt;p&gt;The fundamental building block in BAML is a function. Every prompt is a function that takes in parameters and returns a type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every function additionally defines which models it uses and what its prompt is.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; StopTool | ReplyTool {
    client "openai/gpt-4o-mini"

    prompt #"
        Be a {{ tone }} bot.

        {{ ctx.output_format }}

        {% for m in message %}
        {{ _.role(m.role) }}
        {{ m.content }}
        {% endfor %}
    "#
}

class Message {
    role string
    content string
}

class ReplyTool {
  response string
}

class StopTool {
  action "stop" @description(#"
    when it might be a good time to end the conversation
  "#)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;BAML Functions can be called from any language&lt;/h2&gt; 
&lt;p&gt;Below we call the ChatAgent function we defined in BAML through Python. BAML's Rust compiler generates a "baml_client" to access and call them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from baml_client import b
from baml_client.types import Message, StopTool

messages = [Message(role="assistant", content="How can I help?")]

while True:
  print(messages[-1].content)
  user_reply = input()
  messages.append(Message(role="user", content=user_reply))
  tool = b.ChatAgent(messages, "happy")
  if isinstance(tool, StopTool):
    print("Goodbye!")
    break
  else:
    messages.append(Message(role="assistant", content=tool.response))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can write any kind of agent or workflow using chained BAML functions. An agent is a while loop that calls a Chat BAML Function with some state.&lt;/p&gt; 
&lt;p&gt;And if you need to stream, add a couple more lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;stream = b.stream.ChatAgent(messages, "happy")
# partial is a Partial type with all Optional fields
for tool in stream:
    if isinstance(tool, StopTool):
      ...
    
final = stream.get_final_response()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And get fully type-safe outputs for each chunk in the stream.&lt;/p&gt; 
&lt;h2&gt;Test prompts 10x faster, right in your IDE&lt;/h2&gt; 
&lt;p&gt;BAML comes with native tooling for VSCode (jetbrains + neovim coming soon).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Visualize full prompt (including any multi-modal assets), and the API request&lt;/strong&gt;. BAML gives you full transparency and control of the prompt.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/c0b34db9-80cd-45a7-a356-6b5ab4a9c5b7" alt="raw-curl" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using AI is all about iteration speed.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If testing your pipeline takes 2 minutes, you can only test 10 ideas in 20 minutes.&lt;/p&gt; 
&lt;p&gt;If you reduce it to 5 seconds, you can test 240 ideas in the same amount of time. &lt;img src="https://github.com/user-attachments/assets/6fc6b8a6-ffed-4cfc-80b8-78bc8a3d66a6" alt="resume-attempt2-smaller2" /&gt;&lt;/p&gt; 
&lt;p&gt;The playground also allows you to run tests in parallel -- for even faster iteration speeds 🚀.&lt;/p&gt; 
&lt;p&gt;No need to login to websites, and no need to manually define json schemas.&lt;/p&gt; 
&lt;h2&gt;Enable reliable tool-calling with any model&lt;/h2&gt; 
&lt;p&gt;BAML works even when the models don't support native tool-calling APIs. We created the SAP (schema-aligned parsing) algorithm to support the flexible outputs LLMs can provide, like markdown within a JSON blob or chain-of-thought prior to answering. &lt;a href="https://www.boundaryml.com/blog/schema-aligned-parsing"&gt;Read more about SAP&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;With BAML, your structured outputs work in Day-1 of a model release. No need to figure out whether a model supports parallel tool calls, or whether it supports recursive schemas, or &lt;code&gt;anyOf&lt;/code&gt; or &lt;code&gt;oneOf&lt;/code&gt; etc.&lt;/p&gt; 
&lt;p&gt;See it in action with: &lt;strong&gt;&lt;a href="https://www.boundaryml.com/blog/deepseek-r1-function-calling"&gt;Deepseek-R1&lt;/a&gt;&lt;/strong&gt; and &lt;a href="https://www.boundaryml.com/blog/openai-o1"&gt;OpenAI O1&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Switch from 100s of models in a couple lines&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;function Extract() -&amp;gt; Resume {
+  client openai/o3-mini
  prompt #"
    ....
  "#
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/retry-policy"&gt;Retry policies&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/fallback"&gt;fallbacks&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/round-robin"&gt;model rotations&lt;/a&gt;. All statically defined. &lt;img src="https://www.boundaryml.com/blog/2025-01-24-ai-agents-need-a-new-syntax/06-fallback-retry.gif" alt="Fallback Retry" /&gt; Want to do pick models at runtime? Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-advanced/llm-client-registry"&gt;Client Registry&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We support: &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai"&gt;OpenAI&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/anthropic"&gt;Anthropic&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-ai-gemini"&gt;Gemini&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-vertex"&gt;Vertex&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/aws-bedrock"&gt;Bedrock&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai-from-azure"&gt;Azure OpenAI&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic"&gt;Anything OpenAI Compatible&lt;/a&gt; (&lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-ollama"&gt;Ollama&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-open-router"&gt;OpenRouter&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-v-llm"&gt;VLLM&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-lm-studio"&gt;LMStudio&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-together-ai"&gt;TogetherAI&lt;/a&gt;, and more)&lt;/p&gt; 
&lt;h2&gt;Build beautiful streaming UIs&lt;/h2&gt; 
&lt;p&gt;BAML generates a ton of utilities for NextJS, Python (and any language) to make streaming UIs easy. &lt;img src="https://github.com/user-attachments/assets/cf82495b-21fc-40bf-ae98-93eef923d620" alt="recipe-generator" /&gt;&lt;/p&gt; 
&lt;p&gt;BAML's streaming interfaces are fully type-safe. Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-basics/streaming"&gt;Streaming Docs&lt;/a&gt;, and our &lt;a href="https://docs.boundaryml.com/guide/framework-integration/react-next-js/quick-start"&gt;React hooks&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Fully Open-Source, and offline&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% open-source (Apache 2)&lt;/li&gt; 
 &lt;li&gt;100% private. AGI will not require an internet connection, neither will BAML 
  &lt;ul&gt; 
   &lt;li&gt;No network requests beyond model calls you explicitly set&lt;/li&gt; 
   &lt;li&gt;Not stored or used for any training data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;BAML files can be saved locally on your machine and checked into Github for easy diffs.&lt;/li&gt; 
 &lt;li&gt;Built in Rust. So fast, you can't even tell it's there.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;BAML's Design Philosophy&lt;/h2&gt; 
&lt;p&gt;Everything is fair game when making new syntax. If you can code it, it can be yours. This is our design philosophy to help restrict ideas:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;1:&lt;/strong&gt; Avoid invention when possible 
  &lt;ul&gt; 
   &lt;li&gt;Yes, prompts need versioning — we have a great versioning tool: git&lt;/li&gt; 
   &lt;li&gt;Yes, you need to save prompts — we have a great storage tool: filesystems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;2:&lt;/strong&gt; Any file editor and any terminal should be enough to use it&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;3:&lt;/strong&gt; Be fast&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;4:&lt;/strong&gt; A first year university student should be able to understand it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why a new programming language&lt;/h2&gt; 
&lt;p&gt;We used to write websites like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;def home():
    return "&amp;lt;button onclick=\"() =&amp;gt; alert(\\\"hello!\\\")\"&amp;gt;Click&amp;lt;/button&amp;gt;"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And now we do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;function Home() {
  return &amp;lt;button onClick={() =&amp;gt; setCount(prev =&amp;gt; prev + 1)}&amp;gt;
          {count} clicks!
         &amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;New syntax can be incredible at expressing new ideas. Plus the idea of maintaining hundreds of f-strings for prompts kind of disgusts us 🤮. Strings are bad for maintainable codebases. We prefer structured strings.&lt;/p&gt; 
&lt;p&gt;The goal of BAML is to give you the expressiveness of English, but the structure of code.&lt;/p&gt; 
&lt;p&gt;Full &lt;a href="https://www.boundaryml.com/blog/ai-agents-need-new-syntax"&gt;blog post&lt;/a&gt; by us.&lt;/p&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;As models get better, we'll continue expecting even more out of them. But what will never change is that we'll want a way to write maintainable code that uses those models. The current way we all just assemble strings is very reminiscent of the early days PHP/HTML soup in web development. We hope some of the ideas we shared today can make a tiny dent in helping us all shape the way we all code tomorrow.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Do I need to write my whole app in BAML?&lt;/td&gt; 
   &lt;td&gt;Nope, only the prompts! BAML translates definitions into the language of your choice! &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;more&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Is BAML stable?&lt;/td&gt; 
   &lt;td&gt;Yes, many companies use it in production! We ship updates weekly!&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Why a new language?&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#why-a-new-programming-language"&gt;Jump to section&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Checkout our &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/CONTRIBUTING.md"&gt;guide on getting started&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;You can cite the BAML repo as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bibtex"&gt;@software{baml,
  author = {Boundary ML},
  title = {BAML},
  url = {https://github.com/boundaryml/baml},
  year = {2024}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ❤️ by Boundary&lt;/p&gt; 
&lt;p&gt;HQ in Seattle, WA&lt;/p&gt; 
&lt;p&gt;P.S. We're hiring for software engineers that love rust. &lt;a href="mailto:founders@boundaryml.com"&gt;Email us&lt;/a&gt; or reach out on &lt;a href="https://discord.gg/ENtBB6kkXH"&gt;discord&lt;/a&gt;!&lt;/p&gt; 
&lt;div align="left" style="align-items: left;"&gt; 
 &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#top"&gt; &lt;img src="https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white" alt="Back to Top" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;img src="https://imgs.xkcd.com/comics/standards.png" alt_text="hi" /&gt;</description>
    </item>
    
    <item>
      <title>ksdme/ut</title>
      <link>https://github.com/ksdme/ut</link>
      <description>&lt;p&gt;A Rust based utilty toolbox for developers. Inspired from https://it-tools.tech&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;ut&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;A fast, lightweight CLI &lt;strong&gt;utility toolkit&lt;/strong&gt; for developers and IT professionals. &lt;code&gt;ut&lt;/code&gt; provides a comprehensive set of commonly-used tools in a single binary, eliminating the need to install and remember multiple utilities or search for random websites to perform simple tasks.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;details open&gt; 
 &lt;summary&gt;Install on &lt;b&gt;macOS&lt;/b&gt; or Linux via homebrew&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;brew install ksdme/tap/ut
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details open&gt; 
 &lt;summary&gt;Install on &lt;b&gt;Linux&lt;/b&gt; or macOS via shell script&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl --proto '=https' --tlsv1.2 -LsSf https://github.com/ksdme/ut/releases/latest/download/ut-installer.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details open&gt; 
 &lt;summary&gt;Install prebuilt binaries on &lt;b&gt;Windows&lt;/b&gt; via powershell&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-powershell"&gt;powershell -ExecutionPolicy Bypass -c "irm https://github.com/ksdme/ut/releases/latest/download/ut-installer.ps1 | iex"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Install from source&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo install --git https://github.com/ksdme/ut.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;You can also download prebuilt binaries directly from the &lt;a href="https://github.com/ksdme/ut/releases/"&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Shell Completions&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;ut&lt;/code&gt; supports shell completions for bash, zsh, fish, nushell, elvish, and PowerShell. To enable tab completion:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Zsh&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Generate and save completions to your fpath
ut completions zsh &amp;gt; ~/.zsh/completions/_ut

# Or add directly to .zshrc (requires reload for each ut update)
echo 'eval "$(ut completions zsh)"' &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Bash&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;ut completions bash &amp;gt; ~/.local/share/bash-completion/completions/ut
# Or add to .bashrc
echo 'eval "$(ut completions bash)"' &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Fish&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;ut completions fish &amp;gt; ~/.config/fish/completions/ut.fish
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Nushell&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;ut completions nushell &amp;gt; ~/.config/nushell/completions/ut.nu
# Or use the short alias
ut completions nu &amp;gt; ~/.config/nushell/completions/ut.nu
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;PowerShell&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-powershell"&gt;ut completions powershell | Out-File -FilePath $PROFILE -Append
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;After setting up completions, restart your shell or source your configuration file.&lt;/p&gt; 
&lt;h2&gt;Available Tools&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;├── Encoding
│   ├── base64      - Base64 encode/decode
│   │   ├── encode
│   │   └── decode
│   └── url         - URL encode/decode
│       ├── encode
│       └── decode
├── Hashing &amp;amp; Security
│   ├── hash        - Cryptographic hash digests
│   │   ├── md5
│   │   ├── sha1
│   │   ├── sha224
│   │   ├── sha256
│   │   ├── sha384
│   │   └── sha512
│   └── bcrypt      - Password hashing and verification
│       ├── hash
│       └── verify
├── Data Generation
│   ├── uuid        - Generate UUIDs
│   │   ├── v1
│   │   ├── v3
│   │   ├── v4
│   │   ├── v5
│   │   └── v7
│   ├── ulid        - Generate and manipulate ULIDs
│   │   ├── generate
│   │   ├── parse
│   │   ├── validate
│   │   ├── to-uuid
│   │   └── from-uuid
│   ├── token (secret) - Generate secure random tokens
│   ├── lorem       - Generate lorem ipsum text
│   └── random      - Generate random numbers
├── Text Processing
│   ├── case        - Convert text case formats
│   │   ├── lower
│   │   ├── upper
│   │   ├── camel
│   │   ├── title
│   │   ├── constant
│   │   ├── header
│   │   ├── sentence
│   │   ├── snake
│   │   └── kebab
│   ├── pretty-print (pp) - Unescape newlines and tabs
│   └── diff        - Compare text with visual output
├── Development Tools
│   ├── calc (cal)  - Expression calculator
│   ├── json        - JSON builder and utilities
│   │   └── builder
│   ├── regex       - Interactive regex tester
│   ├── crontab     - Cron utilities
│   │   └── schedule
│   └── datetime (dt) - Parse and convert datetimes
├── Web &amp;amp; Network
│   ├── http        - HTTP utilities
│   │   └── status
│   ├── serve       - Local HTTP file server
│   └── qr          - Generate QR codes
├── Color &amp;amp; Design
│   └── color       - Color utilities
│       └── convert
└── Reference
    └── unicode     - Unicode symbol reference
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Encoding&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;base64&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Encode and decode data using Base64 encoding.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports both standard and URL-safe character sets&lt;/li&gt; 
 &lt;li&gt;Can read from files or stdin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut base64 encode "hello world"
ut base64 decode "aGVsbG8gd29ybGQ="
ut base64 encode --urlsafe "hello world"
echo -n "hello world" | ut base64 encode -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;url&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;URL encode and decode text.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut url encode "hello world"
ut url decode "hello%20world"
printf "hello world" | ut url encode -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Hashing &amp;amp; Security&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Generate cryptographic hash digests using various algorithms.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports MD5, SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512&lt;/li&gt; 
 &lt;li&gt;Can read from files or stdin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut hash sha256 "hello world"
ut hash md5 - &amp;lt; file.txt
echo -n "password" | ut hash sha256 -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;bcrypt&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Hash and verify passwords using the bcrypt algorithm.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Secure password hashing with configurable cost factor&lt;/li&gt; 
 &lt;li&gt;Built-in salt generation for each hash&lt;/li&gt; 
 &lt;li&gt;Verification returns "valid" or "invalid"&lt;/li&gt; 
 &lt;li&gt;Cost factor range: 4-31 (default: 12, higher = more secure but slower)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Hash a password with default cost (12)
ut bcrypt hash "mypassword"
echo -n "mypassword" | ut bcrypt hash -

# Wrong password verification
ut bcrypt verify "wrongpassword" '$2b$12$...'
# Output: invalid
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Data Generation&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Generate UUIDs in various versions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;v1: Timestamp-based&lt;/li&gt; 
 &lt;li&gt;v3: Namespace + MD5 hash&lt;/li&gt; 
 &lt;li&gt;v4: Random&lt;/li&gt; 
 &lt;li&gt;v5: Namespace + SHA-1 hash&lt;/li&gt; 
 &lt;li&gt;v7: Timestamp-based, sortable&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut uuid v4
ut uuid v4 --count 5
ut uuid v5 --namespace DNS --name example.com
ut uuid v7
ut uuid v7 --count 5
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;ulid&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Generate and manipulate ULIDs (Universally Unique Lexicographically Sortable Identifiers).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lexicographically sortable by creation time&lt;/li&gt; 
 &lt;li&gt;26-character Crockford Base32 encoding (vs UUID's 36 characters)&lt;/li&gt; 
 &lt;li&gt;128-bit compatibility with UUIDs&lt;/li&gt; 
 &lt;li&gt;Parse to extract timestamp and components&lt;/li&gt; 
 &lt;li&gt;Validate ULID strings&lt;/li&gt; 
 &lt;li&gt;Convert between ULID and UUID formats&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut ulid                    # Generate 1 ULID
ut ulid -c 5               # Generate 5 ULIDs
ut ulid parse 01K7FW2PG44QTQZZR09SZCNAEF  # Show timestamp and details
ut ulid validate 01K7FW2PG44QTQZZR09SZCNAEF  # Check if valid
ut ulid to-uuid 01K7FW2PG44QTQZZR09SZCNAEF   # Convert to UUID
ut ulid from-uuid 550e8400-e29b-41d4-a716-446655440000  # UUID to ULID
echo -n 01K843W3XDX258EG219FWM5565 | ut ulid to-uuid -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;token&lt;/code&gt; (alias: &lt;code&gt;secret&lt;/code&gt;)&lt;/h4&gt; 
&lt;p&gt;Generate cryptographically secure random tokens.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Customizable length and character sets&lt;/li&gt; 
 &lt;li&gt;Uses OS-level secure randomness&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut token --length 32
ut secret --no-symbols --length 64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;lorem&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Generate lorem ipsum placeholder text.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Customizable paragraph count and sentence structure&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut lorem --paragraphs 5
ut lorem --min-sentences 2 --max-sentences 6
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;random&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Generate random numbers within a specified range.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports decimal precision with step parameter&lt;/li&gt; 
 &lt;li&gt;Can generate multiple values at once&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut random --min 1 --max 100
ut random --min 0 --max 1 --step 0.01 --count 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Text Processing&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;case&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Convert text between different case formats.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;lowercase, UPPERCASE, camelCase, snake_case, kebab-case, Title Case, CONSTANT_CASE, Header-Case, Sentence case&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut case lower "Hello World"
ut case camel "hello_world"
ut case snake "HelloWorld"
ut case kebab "HelloWorld"
echo -n "Hello :)" | ut case lower -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;pretty-print&lt;/code&gt; (alias: &lt;code&gt;pp&lt;/code&gt;)&lt;/h4&gt; 
&lt;p&gt;Resolve escaped newlines and tab characters in text.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut pretty-print "hello\nworld\ttab"
ut pp "hello\nworld\ttab"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;diff&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Compare text contents with visual diff output.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports file comparison or interactive editing&lt;/li&gt; 
 &lt;li&gt;Color-coded character-level differences&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut diff -a file1.txt -b file2.txt
ut diff  # Opens editor for both inputs
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development Tools&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;calc&lt;/code&gt; (alias: &lt;code&gt;cal&lt;/code&gt;)&lt;/h4&gt; 
&lt;p&gt;Expression calculator with support for multiple number formats and mathematical functions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports arithmetic operations, exponentiation, functions (sin, cos, tan, log, exp, sqrt, abs, floor, ceil, round)&lt;/li&gt; 
 &lt;li&gt;Binary (0b), hexadecimal (0x), and decimal number formats&lt;/li&gt; 
 &lt;li&gt;Mathematical constants (pi, e)&lt;/li&gt; 
 &lt;li&gt;Results displayed in decimal, hex, and binary&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut calc "2 + 2 * 3"
ut cal "sin(pi / 2)"
ut calc "0xFF + 0b1010"
ut calc "sqrt(16) ^ 2"
echo -n "2 + 2" | ut calc -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;json&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;JSON utilities including a powerful JSON builder.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Build complex JSON structures using dot notation&lt;/li&gt; 
 &lt;li&gt;Supports nested objects and arrays&lt;/li&gt; 
 &lt;li&gt;Array indexing and append operations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut json builder a.b.c=hello a.b.d=world
ut json builder "user.name=John" "user.age=30" "user.tags[]=dev" "user.tags[]=rust"
ut json builder "items[0].id=1" "items[0].name=first" "items[1].id=2"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Interactive regex tester with live highlighting.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Real-time pattern matching visualization&lt;/li&gt; 
 &lt;li&gt;Multi-color highlighting for capture groups&lt;/li&gt; 
 &lt;li&gt;Load test strings from files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut regex
ut regex --test sample.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;crontab&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Parse crontab expressions and show upcoming firing times.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for traditional 5-field cron expressions&lt;/li&gt; 
 &lt;li&gt;Support for extended 6-field cron expressions (with seconds)&lt;/li&gt; 
 &lt;li&gt;Configurable number of results with -n / --count&lt;/li&gt; 
 &lt;li&gt;Configurable start time with -a / --after&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut crontab schedule "0 9 * * 1-5"
ut crontab schedule "0 0 * * *" --count 3
ut crontab schedule "0 9 * * 1-5" --after "2024-01-01T00:00:00Z"
echo -n "0 9 * * 1-5" | ut crontab schedule -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;datetime&lt;/code&gt; (alias: &lt;code&gt;dt&lt;/code&gt;)&lt;/h4&gt; 
&lt;p&gt;Parse and convert datetimes between timezones.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for ISO 8601 and custom format strings&lt;/li&gt; 
 &lt;li&gt;Convert between timezones&lt;/li&gt; 
 &lt;li&gt;"now" keyword for current time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut datetime now
ut dt "2025-10-04T15:30:00Z" --target-timezone "Asia/Tokyo"
ut datetime "October 04, 2025 03:30 PM" --source-timezone UTC --parse-format "MonthName Day2, Year4 Hour12:Minute2 AMPM"
echo -n "2025-10-04T15:30:00Z" | ut datetime -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Web &amp;amp; Network&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;http&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;HTTP utilities including status code lookup.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut http status 404
ut http status  # List all status codes
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;serve&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Start a local HTTP file server.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Customizable host and port&lt;/li&gt; 
 &lt;li&gt;Directory listing support&lt;/li&gt; 
 &lt;li&gt;Optional HTTP Basic authentication&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut serve --port 8080
ut serve --directory ./public --auth username:password
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;qr&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Generate QR codes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Terminal display or save to PNG file&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut qr "https://example.com"
ut qr "Hello World" --output qrcode.png
echo -n "Hello World" | ut qr -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Color &amp;amp; Design&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;color&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Color utilities for working with different color formats.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports hex, rgb, rgba, hsl, hwb, lab, lch, oklab, oklch&lt;/li&gt; 
 &lt;li&gt;Parses any CSS-compatible color format&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut color convert "#FF5733"
ut color convert "rgb(255, 87, 51)"
ut color convert "hsl(9, 100%, 60%)"
printf "#FF5733" | ut color convert -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Reference&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;unicode&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Display Unicode symbol reference table.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ut unicode
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Nice to have&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;crontab explainer&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run the project
cargo run -- &amp;lt;tool&amp;gt; [args]

# Format code
cargo fmt

# Run tests
cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Built with Claude Code&lt;/h2&gt; 
&lt;p&gt;Parts of this project were built using &lt;a href="https://claude.com/claude-code"&gt;Claude Code&lt;/a&gt;, an AI-powered coding assistant, with human oversight and collaboration.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>meta-pytorch/monarch</title>
      <link>https://github.com/meta-pytorch/monarch</link>
      <description>&lt;p&gt;PyTorch Single Controller&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Monarch 🦋&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Monarch&lt;/strong&gt; is a distributed programming framework for PyTorch based on scalable actor messaging. It provides:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Remote actors with scalable messaging: Actors are grouped into collections called meshes and messages can be broadcast to all members.&lt;/li&gt; 
 &lt;li&gt;Fault tolerance through supervision trees: Actors and processes form a tree and failures propagate up the tree, providing good default error behavior and enabling fine-grained fault recovery.&lt;/li&gt; 
 &lt;li&gt;Point-to-point RDMA transfers: cheap registration of any GPU or CPU memory in a process, with the one-sided transfers based on libibverbs&lt;/li&gt; 
 &lt;li&gt;Distributed tensors: actors can work with tensor objects sharded across processes&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Monarch code imperatively describes how to create processes and actors using a simple python API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from monarch.actor import Actor, endpoint, this_host

# spawn 8 trainer processes one for each gpu
training_procs = this_host().spawn_procs({"gpus": 8})


# define the actor to run on each process
class Trainer(Actor):
    @endpoint
    def train(self, step: int): ...


# create the trainers
trainers = training_procs.spawn("trainers", Trainer)

# tell all the trainers to take a step
fut = trainers.train.call(step=0)

# wait for all trainers to complete
fut.get()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href="https://meta-pytorch.org/monarch/generated/examples/getting_started.html"&gt;introduction to monarch concepts&lt;/a&gt; provides an introduction to using these features.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;⚠️ &lt;strong&gt;Early Development Warning&lt;/strong&gt; Monarch is currently in an experimental stage. You should expect bugs, incomplete features, and APIs that may change in future versions. The project welcomes bugfixes, but to make sure things are well coordinated you should discuss any significant change before starting the work. It's recommended that you signal your intention to contribute in the issue tracker, either by filing a new issue or by claiming an existing one.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;View Monarch's hosted documentation &lt;a href="https://meta-pytorch.org/monarch/"&gt;at this link&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Note for running distributed tensors and RDMA, the local torch version must match the version that monarch was built with. Stable and nightly distributions require libmxl and libibverbs (runtime).&lt;/p&gt; 
&lt;h2&gt;Fedora&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;sudo dnf install -y libibverbs rdma-core libmlx5 libibverbs-devel rdma-core-devel&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Ubuntu&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;sudo apt install -y rdma-core libibverbs1 libmlx5-1 libibverbs-dev rdma-core-dev&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Stable&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;pip install torchmonarch&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;torchmonarch stable is built with the latest stable torch.&lt;/p&gt; 
&lt;h3&gt;Nightly&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;pip install torchmonarch-nightly&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;torchmonarch-nightly is built with torch nightly.&lt;/p&gt; 
&lt;h3&gt;Build and Install from Source&lt;/h3&gt; 
&lt;h4&gt;On Fedora distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;
# Create and activate the conda environment
conda create -n monarchenv python=3.10 -y
conda activate monarchenv

# Install nightly rust toolchain
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
rustup toolchain install nightly
rustup default nightly

# Install non-python dependencies
conda install libunwind -y

# Install the correct cuda and cuda-toolkit versions for your machine
sudo dnf install cuda-toolkit-12-0 cuda-12-0

# Install clang-dev and nccl-dev
sudo dnf install clang-devel libnccl-devel
# Or, in some environments, the following may be necessary instead
conda install -c conda-forge clangdev nccl
conda update -n monarchenv --all -c conda-forge -y

# If you are building with RDMA support, build monarch with `USE_TENSOR_ENGINE=1 pip install --no-build-isolation .` and dnf install the following packages
sudo dnf install -y libibverbs rdma-core libmlx5 libibverbs-devel rdma-core-devel

# Install build dependencies
pip install -r build-requirements.txt
# Install test dependencies
pip install -r python/tests/requirements.txt

# Build and install Monarch
pip install --no-build-isolation .
# or setup for development
pip install --no-build-isolation -e .

# Verify installation
pip list | grep monarch
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;On Ubuntu distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Clone the repository and navigate to it
git clone https://github.com/meta-pytorch/monarch.git
cd monarch

# Install nightly rust toolchain
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
rustup toolchain install nightly
rustup default nightly

# Install Ubuntu-specific system dependencies
sudo apt install -y ninja-build
sudo apt install -y libunwind-dev
sudo apt install -y clang

# Set clang as the default C/C++ compiler
export CC=clang
export CXX=clang++

# Install build dependencies
pip install -r build-requirements.txt
# Install test dependencies
pip install -r python/tests/requirements.txt

# Build and install Monarch (with tensor engine support)
pip install --no-build-isolation .

# or
# Build and install Monarch (without tensor engine support)
USE_TENSOR_ENGINE=0 pip install --no-build-isolation .

# or setup for development
pip install --no-build-isolation -e .

# Verify installation
pip list | grep monarch
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;On MacOS&lt;/h4&gt; 
&lt;p&gt;You can also build Monarch to run locally on a MacOS system.&lt;/p&gt; 
&lt;p&gt;Note that this does not support tensor engine, which is tied to CUDA and RDMA (via ibverbs).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;
# Create and activate the conda environment
conda create -n monarchenv python=3.10 -y
conda activate monarchenv

# Install nightly rust toolchain
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
rustup toolchain install nightly
rustup default nightly

# Install build dependencies
pip install -r build-requirements.txt
# Install test dependencies
pip install -r python/tests/requirements.txt

# Build and install Monarch
USE_TENSOR_ENGINE=0 pip install --no-build-isolation .
# or setup for development
USE_TENSOR_ENGINE=0 pip install --no-build-isolation -e .

# Verify installation
pip list | grep monarch
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Running examples&lt;/h2&gt; 
&lt;p&gt;Check out the &lt;code&gt;examples/&lt;/code&gt; directory for demonstrations of how to use Monarch's APIs.&lt;/p&gt; 
&lt;p&gt;We'll be adding more examples as we stabilize and polish functionality!&lt;/p&gt; 
&lt;h2&gt;Running tests&lt;/h2&gt; 
&lt;p&gt;We have both Rust and Python unit tests. Rust tests are run with &lt;code&gt;cargo-nextest&lt;/code&gt; and Python tests are run with &lt;code&gt;pytest&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Rust tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# We use cargo-nextest to run our tests, as they can provide strong process isolation
# between every test.
# Here we install it from source, but you can instead use a pre-built binary described
# here: https://nexte.st/docs/installation/pre-built-binaries/
cargo install cargo-nextest --locked
cargo nextest run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;cargo-nextest supports all of the filtering flags of "cargo test".&lt;/p&gt; 
&lt;p&gt;Python tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Make sure to install test dependencies first
pip install -r python/tests/requirements.txt
# Run unit tests. consider -s for more verbose output
pytest python/tests/ -v -m "not oss_skip"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Monarch is BSD-3 licensed, as found in the &lt;a href="https://raw.githubusercontent.com/meta-pytorch/monarch/main/LICENSE"&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>deuxfleurs-org/garage</title>
      <link>https://github.com/deuxfleurs-org/garage</link>
      <description>&lt;p&gt;(Mirror) S3-compatible object store for small self-hosted geo-distributed deployments. Main repo: https://git.deuxfleurs.fr/Deuxfleurs/garage&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Garage &lt;a href="https://woodpecker.deuxfleurs.fr/repos/1"&gt;&lt;img src="https://woodpecker.deuxfleurs.fr/api/badges/1/status.svg?sanitize=true" alt="status-badge" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p align="center" style="text-align:center;"&gt; &lt;a href="https://garagehq.deuxfleurs.fr"&gt; &lt;img alt="Garage logo" src="https://garagehq.deuxfleurs.fr/img/logo.svg?sanitize=true" height="200" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center" style="text-align:center;"&gt; [ &lt;strong&gt;&lt;a href="https://garagehq.deuxfleurs.fr/"&gt;Website and documentation&lt;/a&gt;&lt;/strong&gt; | &lt;a href="https://garagehq.deuxfleurs.fr/_releases.html"&gt;Binary releases&lt;/a&gt; | &lt;a href="https://git.deuxfleurs.fr/Deuxfleurs/garage"&gt;Git repository&lt;/a&gt; | &lt;a href="https://matrix.to/#/%23garage:deuxfleurs.fr"&gt;Matrix channel&lt;/a&gt; ] &lt;/p&gt; 
&lt;p&gt;Garage is an S3-compatible distributed object storage service designed for self-hosting at a small-to-medium scale.&lt;/p&gt; 
&lt;p&gt;Garage is designed for storage clusters composed of nodes running at different physical locations, in order to easily provide a storage service that replicates data at these different locations and stays available even when some servers are unreachable. Garage also focuses on being lightweight, easy to operate, and highly resilient to machine failures.&lt;/p&gt; 
&lt;p&gt;Garage is built by &lt;a href="https://deuxfleurs.fr"&gt;Deuxfleurs&lt;/a&gt;, an experimental small-scale self hosted service provider, which has been using it in production since its first release in 2020.&lt;/p&gt; 
&lt;p&gt;Learn more on our dedicated documentation pages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://garagehq.deuxfleurs.fr/documentation/design/goals/"&gt;Goals and use cases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://garagehq.deuxfleurs.fr/documentation/reference-manual/features/"&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://garagehq.deuxfleurs.fr/documentation/quick-start/"&gt;Quick start&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Garage is entirely free software released under the terms of the AGPLv3.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tracel-ai/burn</title>
      <link>https://github.com/tracel-ai/burn</link>
      <description>&lt;p&gt;Burn is a next generation tensor library and Deep Learning Framework that doesn't compromise on flexibility, efficiency and portability.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/logo-burn-neutral.webp" width="350px" /&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/uPEBbYYDB6"&gt;&lt;img src="https://img.shields.io/discord/1038839012602941528.svg?color=7289da&amp;amp;&amp;amp;logo=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/burn"&gt;&lt;img src="https://img.shields.io/crates/v/burn.svg?sanitize=true" alt="Current Crates.io Version" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/burn"&gt;&lt;img src="https://img.shields.io/crates/msrv/burn" alt="Minimum Supported Rust Version" /&gt;&lt;/a&gt; &lt;a href="https://burn.dev/docs/burn"&gt;&lt;img src="https://img.shields.io/badge/docs-latest-blue" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tracel-ai/burn/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/tracel-ai/burn/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Test Status" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/#license"&gt;&lt;img src="https://shields.io/badge/license-MIT%2FApache--2.0-blue" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/tracel-ai/burn"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://www.runblaze.dev"&gt;&lt;img src="https://www.runblaze.dev/ci-blaze-powered.png" width="125px" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;Burn is a next generation Tensor Library and Deep Learning Framework that doesn't compromise on &lt;br /&gt; flexibility, efficiency and portability.&lt;/strong&gt;&lt;/p&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div align="left"&gt; 
 &lt;p&gt;Burn is both a tensor library and a deep learning framework optimized for numerical computing, model inference and model training. Burn leverages Rust to perform optimizations normally only available in static-graph frameworks, offering optimal speed without impacting flexibility.&lt;/p&gt; 
 &lt;h2&gt;Backend&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/backend-chip.png" height="96px" /&gt; 
  &lt;p&gt;Burn strives to be as fast as possible on as many hardwares as possible, with robust implementations. We believe this flexibility is crucial for modern needs where you may train your models in the cloud, then deploy on customer hardwares, which vary from user to user.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;Supported Backends&lt;/h3&gt; 
 &lt;p&gt;Most backends support all operating systems, so we don't mention them in the tables below.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;GPU Backends:&lt;/strong&gt;&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;&lt;/th&gt; 
    &lt;th&gt;CUDA&lt;/th&gt; 
    &lt;th&gt;ROCm&lt;/th&gt; 
    &lt;th&gt;Metal&lt;/th&gt; 
    &lt;th&gt;Vulkan&lt;/th&gt; 
    &lt;th&gt;WebGPU&lt;/th&gt; 
    &lt;th&gt;Candle&lt;/th&gt; 
    &lt;th&gt;LibTorch&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Nvidia&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;AMD&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Apple&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Intel&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Qualcom&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Wasm&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;strong&gt;CPU Backends:&lt;/strong&gt;&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;&lt;/th&gt; 
    &lt;th&gt;Cpu (CubeCL)&lt;/th&gt; 
    &lt;th&gt;NdArray&lt;/th&gt; 
    &lt;th&gt;Candle&lt;/th&gt; 
    &lt;th&gt;LibTorch&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;X86&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Arm&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Wasm&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;no-std&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;☑️&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;br /&gt; 
 &lt;p&gt;Compared to other frameworks, Burn has a very different approach to supporting many backends. By design, most code is generic over the Backend trait, which allows us to build Burn with swappable backends. This makes composing backend possible, augmenting them with additional functionalities such as autodifferentiation and automatic kernel fusion.&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Autodiff: Backend decorator that brings backpropagation to any backend 🔄 &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Contrary to the aforementioned backends, Autodiff is actually a backend &lt;em&gt;decorator&lt;/em&gt;. This means that it cannot exist by itself; it must encapsulate another backend.&lt;/p&gt; 
  &lt;p&gt;The simple act of wrapping a base backend with Autodiff transparently equips it with autodifferentiation support, making it possible to call backward on your model.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::backend::{Autodiff, Wgpu};
use burn::tensor::{Distribution, Tensor};

fn main() {
    type Backend = Autodiff&amp;lt;Wgpu&amp;gt;;

    let device = Default::default();

    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default, &amp;amp;device);
    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default, &amp;amp;device).require_grad();

    let tmp = x.clone() + y.clone();
    let tmp = tmp.matmul(x);
    let tmp = tmp.exp();

    let grads = tmp.backward();
    let y_grad = y.grad(&amp;amp;grads).unwrap();
    println!("{y_grad}");
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, it is impossible to make the mistake of calling backward on a model that runs on a backend that does not support autodiff (for inference), as this method is only offered by an Autodiff backend.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-autodiff/README.md"&gt;Autodiff Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Fusion: Backend decorator that brings kernel fusion to all first-party backends &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;This backend decorator enhances a backend with kernel fusion, provided that the inner backend supports it. Note that you can compose this backend with other backend decorators such as Autodiff. All first-party accelerated backends (like WGPU and CUDA) use Fusion by default (&lt;code&gt;burn/fusion&lt;/code&gt; feature flag), so you typically don't need to apply it manually.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;#[cfg(not(feature = "fusion"))]
pub type Cuda&amp;lt;F = f32, I = i32&amp;gt; = CubeBackend&amp;lt;CudaRuntime, F, I, u8&amp;gt;;

#[cfg(feature = "fusion")]
pub type Cuda&amp;lt;F = f32, I = i32&amp;gt; = burn_fusion::Fusion&amp;lt;CubeBackend&amp;lt;CudaRuntime, F, I, u8&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, we plan to implement automatic gradient checkpointing based on compute bound and memory bound operations, which will work gracefully with the fusion backend to make your code run even faster during training, see &lt;a href="https://github.com/tracel-ai/burn/issues/936"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-fusion/README.md"&gt;Fusion Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Router (Beta): Backend decorator that composes multiple backends into a single one &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;That backend simplifies hardware operability, if for instance you want to execute some operations on the CPU and other operations on the GPU.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::tensor::{Distribution, Tensor};
use burn::backend::{
    NdArray, Router, Wgpu, ndarray::NdArrayDevice, router::duo::MultiDevice, wgpu::WgpuDevice,
};

fn main() {
    type Backend = Router&amp;lt;(Wgpu, NdArray)&amp;gt;;

    let device_0 = MultiDevice::B1(WgpuDevice::DiscreteGpu(0));
    let device_1 = MultiDevice::B2(NdArrayDevice::Cpu);

    let tensor_gpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], burn::tensor::Distribution::Default, &amp;amp;device_0);
    let tensor_cpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], burn::tensor::Distribution::Default, &amp;amp;device_1);
}

&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Remote (Beta): Backend decorator for remote backend execution, useful for distributed computations &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;That backend has two parts, one client and one server. The client sends tensor operations over the network to a remote compute backend. You can use any first-party backend as server in a single line of code:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;fn main_server() {
    // Start a server on port 3000.
    burn::server::start::&amp;lt;burn::backend::Cuda&amp;gt;(Default::default(), 3000);
}

fn main_client() {
    // Create a client that communicate with the server on port 3000.
    use burn::backend::{Autodiff, RemoteBackend};

    type Backend = Autodiff&amp;lt;RemoteDevice&amp;gt;;

    let device = RemoteDevice::new("ws://localhost:3000");
    let tensor_gpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], Distribution::Default, &amp;amp;device);
}

&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;br /&gt; 
 &lt;h2&gt;Training &amp;amp; Inference&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-wall.png" height="96px" /&gt; 
  &lt;p&gt;The whole deep learning workflow is made easy with Burn, as you can monitor your training progress with an ergonomic dashboard, and run inference everywhere from embedded devices to large GPU clusters.&lt;/p&gt; 
  &lt;p&gt;Burn was built from the ground up with training and inference in mind. It's also worth noting how Burn, in comparison to frameworks like PyTorch, simplifies the transition from training to deployment, eliminating the need for code changes.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div align="center"&gt; 
  &lt;br /&gt; 
  &lt;a href="https://www.youtube.com/watch?v=N9RM5CQbNQc" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/burn-train-tui.png" alt="Burn Train TUI" width="75%" /&gt; &lt;/a&gt; 
 &lt;/div&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;strong&gt;Click on the following sections to expand 👇&lt;/strong&gt;&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Training Dashboard 📈 &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;As you can see in the previous video (click on the picture!), a new terminal UI dashboard based on the &lt;a href="https://github.com/ratatui-org/ratatui"&gt;Ratatui&lt;/a&gt; crate allows users to follow their training with ease without having to connect to any external application.&lt;/p&gt; 
  &lt;p&gt;You can visualize your training and validation metrics updating in real-time and analyze the lifelong progression or recent history of any registered metrics using only the arrow keys. Break from the training loop without crashing, allowing potential checkpoints to be fully written or important pieces of code to complete without interruption 🛡&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; ONNX Support 🐫 &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Burn supports importing ONNX (Open Neural Network Exchange) models, allowing you to easily port models from TensorFlow or PyTorch to Burn. The ONNX model is converted into Rust code that uses Burn's native APIs, enabling the imported model to run on any Burn backend (CPU, GPU, WebAssembly) and benefit from all of Burn's optimizations like automatic kernel fusion.&lt;/p&gt; 
  &lt;p&gt;Our ONNX support is further described in &lt;a href="https://burn.dev/books/burn/import/onnx-model.html"&gt;this section of the Burn Book 🔥&lt;/a&gt;.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This crate is in active development and currently supports a &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-import/SUPPORTED-ONNX-OPS.md"&gt;limited set of ONNX operators&lt;/a&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Importing PyTorch or Safetensors Models 🚚 &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;You can load weights from PyTorch or Safetensors formats directly into your Burn-defined models. This makes it easy to reuse existing models while benefiting from Burn's performance and deployment features.&lt;/p&gt; 
  &lt;p&gt;Learn more:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://burn.dev/books/burn/import/pytorch-model.html"&gt;Import pre-trained PyTorch models into Burn&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://burn.dev/books/burn/import/safetensors-model.html"&gt;Load models from Safetensors format&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Inference in the Browser 🌐 &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Several of our backends can run in WebAssembly environments: Candle and NdArray for CPU execution, and WGPU for GPU acceleration via WebGPU. This means that you can run inference directly within a browser. We provide several examples of this:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web"&gt;MNIST&lt;/a&gt; where you can draw digits and a small convnet tries to find which one it is! 2️⃣ 7️⃣ 😰&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web"&gt;Image Classification&lt;/a&gt; where you can upload images and classify them! 🌄&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Embedded: &lt;i&gt;no_std&lt;/i&gt; support ⚙️ &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Burn's core components support &lt;a href="https://docs.rust-embedded.org/book/intro/no-std.html"&gt;no_std&lt;/a&gt;. This means it can run in bare metal environment such as embedded devices without an operating system.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;As of now, only the NdArray backend can be used in a &lt;em&gt;no_std&lt;/em&gt; environment.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;br /&gt; 
 &lt;h3&gt;Benchmarks&lt;/h3&gt; 
 &lt;p&gt;To evaluate performance across different backends and track improvements over time, we provide a dedicated benchmarking suite.&lt;/p&gt; 
 &lt;p&gt;Run and compare benchmarks using &lt;a href="https://github.com/tracel-ai/burn-bench"&gt;burn-bench&lt;/a&gt;.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;⚠️ &lt;strong&gt;Warning&lt;/strong&gt; When using one of the &lt;code&gt;wgpu&lt;/code&gt; backends, you may encounter compilation errors related to recursive type evaluation. This is due to complex type nesting within the &lt;code&gt;wgpu&lt;/code&gt; dependency chain. To resolve this issue, add the following line at the top of your &lt;code&gt;main.rs&lt;/code&gt; or &lt;code&gt;lib.rs&lt;/code&gt; file:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;#![recursion_limit = "256"]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;The default recursion limit (128) is often just below the required depth (typically 130-150) due to deeply nested associated types and trait bounds.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h2&gt;Getting Started&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-walking.png" height="96px" /&gt; 
  &lt;p&gt;Just heard of Burn? You are at the right place! Just continue reading this section and we hope you can get on board really quickly.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;details&gt; 
  &lt;summary&gt; The Burn Book 🔥 &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;To begin working effectively with Burn, it is crucial to understand its key components and philosophy. This is why we highly recommend new users to read the first sections of &lt;a href="https://burn.dev/books/burn/"&gt;The Burn Book 🔥&lt;/a&gt;. It provides detailed examples and explanations covering every facet of the framework, including building blocks like tensors, modules, and optimizers, all the way to advanced usage, like coding your own GPU kernels.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;The project is constantly evolving, and we try as much as possible to keep the book up to date with new additions. However, we might miss some details sometimes, so if you see something weird, let us know! We also gladly accept Pull Requests 😄&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Examples 🙏 &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Let's start with a code snippet that shows how intuitive the framework is to use! In the following, we declare a neural network module with some parameters along with its forward pass.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::nn;
use burn::module::Module;
use burn::tensor::backend::Backend;

#[derive(Module, Debug)]
pub struct PositionWiseFeedForward&amp;lt;B: Backend&amp;gt; {
    linear_inner: nn::Linear&amp;lt;B&amp;gt;,
    linear_outer: nn::Linear&amp;lt;B&amp;gt;,
    dropout: nn::Dropout,
    gelu: nn::Gelu,
}

impl&amp;lt;B: Backend&amp;gt; PositionWiseFeedForward&amp;lt;B&amp;gt; {
    pub fn forward&amp;lt;const D: usize&amp;gt;(&amp;amp;self, input: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {
        let x = self.linear_inner.forward(input);
        let x = self.gelu.forward(x);
        let x = self.dropout.forward(x);

        self.linear_outer.forward(x)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;We have a somewhat large amount of &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples"&gt;examples&lt;/a&gt; in the repository that shows how to use the framework in different scenarios.&lt;/p&gt; 
  &lt;p&gt;Following &lt;a href="https://burn.dev/books/burn/"&gt;the book&lt;/a&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/guide"&gt;Basic Workflow&lt;/a&gt; : Creates a custom CNN &lt;code&gt;Module&lt;/code&gt; to train on the MNIST dataset and use for inference.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-training-loop"&gt;Custom Training Loop&lt;/a&gt; : Implements a basic training loop instead of using the &lt;code&gt;Learner&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-wgpu-kernel"&gt;Custom WGPU Kernel&lt;/a&gt; : Learn how to create your own custom operation with the WGPU backend.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;Additional examples:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-csv-dataset"&gt;Custom CSV Dataset&lt;/a&gt; : Implements a dataset to parse CSV data for a regression task.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/simple-regression"&gt;Regression&lt;/a&gt; : Trains a simple MLP on the California Housing dataset to predict the median house value for a district.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-image-dataset"&gt;Custom Image Dataset&lt;/a&gt; : Trains a simple CNN on custom image dataset following a simple folder structure.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-renderer"&gt;Custom Renderer&lt;/a&gt; : Implements a custom renderer to display the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/building-blocks/learner.md"&gt;&lt;code&gt;Learner&lt;/code&gt;&lt;/a&gt; progress.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web"&gt;Image Classification Web&lt;/a&gt; : Image classification web browser demo using Burn, WGPU and WebAssembly.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web"&gt;MNIST Inference on Web&lt;/a&gt; : An interactive MNIST inference demo in the browser. The demo is available &lt;a href="https://burn.dev/demo/"&gt;online&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist"&gt;MNIST Training&lt;/a&gt; : Demonstrates how to train a custom &lt;code&gt;Module&lt;/code&gt; (MLP) with the &lt;code&gt;Learner&lt;/code&gt; configured to log metrics and keep training checkpoints.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/named-tensor"&gt;Named Tensor&lt;/a&gt; : Performs operations with the experimental &lt;code&gt;NamedTensor&lt;/code&gt; feature.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/onnx-inference"&gt;ONNX Import Inference&lt;/a&gt; : Imports an ONNX model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/import-model-weights"&gt;PyTorch Import Inference&lt;/a&gt; : Imports a PyTorch model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-classification"&gt;Text Classification&lt;/a&gt; : Trains a text classification transformer model on the AG News or DbPedia dataset. The trained model can then be used to classify a text sample.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-generation"&gt;Text Generation&lt;/a&gt; : Trains a text generation transformer model on the DbPedia dataset.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/wgan"&gt;Wasserstein GAN MNIST&lt;/a&gt; : Trains a WGAN model to generate new handwritten digits based on MNIST.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;For more practical insights, you can clone the repository and run any of them directly on your computer!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Pre-trained Models 🤖 &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;We keep an updated and curated list of models and examples built with Burn, see the &lt;a href="https://github.com/tracel-ai/models"&gt;tracel-ai/models repository&lt;/a&gt; for more details.&lt;/p&gt; 
  &lt;p&gt;Don't see the model you want? Don't hesitate to open an issue, and we may prioritize it. Built a model using Burn and want to share it? You can also open a Pull Request and add your model under the community section!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Why use Rust for Deep Learning? 🦀 &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Deep Learning is a special form of software where you need very high level abstractions as well as extremely fast execution time. Rust is the perfect candidate for that use case since it provides zero-cost abstractions to easily create neural network modules, and fine-grained control over memory to optimize every detail.&lt;/p&gt; 
  &lt;p&gt;It's important that a framework be easy to use at a high level so that its users can focus on innovating in the AI field. However, since running models relies so heavily on computations, performance can't be neglected.&lt;/p&gt; 
  &lt;p&gt;To this day, the mainstream solution to this problem has been to offer APIs in Python, but rely on bindings to low-level languages such as C/C++. This reduces portability, increases complexity and creates frictions between researchers and engineers. We feel like Rust's approach to abstractions makes it versatile enough to tackle this two languages dichotomy.&lt;/p&gt; 
  &lt;p&gt;Rust also comes with the Cargo package manager, which makes it incredibly easy to build, test, and deploy from any environment, which is usually a pain in Python.&lt;/p&gt; 
  &lt;p&gt;Although Rust has the reputation of being a difficult language at first, we strongly believe it leads to more reliable, bug-free solutions built faster (after some practice 😅)!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;br /&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Deprecation Note&lt;/strong&gt;&lt;br /&gt;Since &lt;code&gt;0.14.0&lt;/code&gt;, the internal structure for tensor data has changed. The previous &lt;code&gt;Data&lt;/code&gt; struct was deprecated and officially removed since &lt;code&gt;0.17.0&lt;/code&gt; in favor of the new &lt;code&gt;TensorData&lt;/code&gt; struct, which allows for more flexibility by storing the underlying data as bytes and keeping the data type as a field. If you are using &lt;code&gt;Data&lt;/code&gt; in your code, make sure to switch to &lt;code&gt;TensorData&lt;/code&gt;.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;!-- &gt;
&gt; In the event that you are trying to load a model record saved in a previous version, make sure to
&gt; enable the `record-backward-compat` feature using a previous version of burn (&lt;=0.16.0). Otherwise,
&gt; the record won't be deserialized correctly and you will get an error message (which will also point
&gt; you to the backward compatible feature flag). The backward compatibility was maintained for
&gt; deserialization (loading), so as soon as you have saved the record again it will be saved according
&gt; to the new structure and you will be able to upgrade to this version. Please note that binary formats
&gt; are not backward compatible. Thus, you will need to load your record in a previous version and save it
&gt; to another of the self-describing record formats before using a compatible version (as described) with the
&gt; `record-backward-compat` feature flag. --&gt; 
 &lt;details id="deprecation"&gt; 
  &lt;summary&gt; Loading Model Records From Previous Versions ⚠️ &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;In the event that you are trying to load a model record saved in a version older than &lt;code&gt;0.14.0&lt;/code&gt;, make sure to use a compatible version (&lt;code&gt;0.14&lt;/code&gt;, &lt;code&gt;0.15&lt;/code&gt; or &lt;code&gt;0.16&lt;/code&gt;) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
  &lt;pre&gt;&lt;code&gt;features = [..., "record-backward-compat"]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Otherwise, the record won't be deserialized correctly and you will get an error message. This error will also point you to the backward compatible feature flag.&lt;/p&gt; 
  &lt;p&gt;The backward compatibility was maintained for deserialization when loading records. Therefore, as soon as you have saved the record again it will be saved according to the new structure and you can upgrade back to the current version&lt;/p&gt; 
  &lt;p&gt;Please note that binary formats are not backward compatible. Thus, you will need to load your record in a previous version and save it in any of the other self-describing record format (e.g., using the &lt;code&gt;NamedMpkFileRecorder&lt;/code&gt;) before using a compatible version (as described) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;h2&gt;Community&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-community.png" height="96px" /&gt; 
  &lt;p&gt;If you are excited about the project, don't hesitate to join our &lt;a href="https://discord.gg/uPEBbYYDB6"&gt;Discord&lt;/a&gt;! We try to be as welcoming as possible to everybody from any background. You can ask your questions and share what you built with the community!&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Before contributing, please take a moment to review our &lt;a href="https://github.com/tracel-ai/burn/tree/main/CODE-OF-CONDUCT.md"&gt;code of conduct&lt;/a&gt;. It's also highly recommended to read the &lt;a href="https://github.com/tracel-ai/burn/tree/main/contributor-book/src/project-architecture"&gt;architecture overview&lt;/a&gt;, which explains some of our architectural decisions. Refer to our &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;h2&gt;Status&lt;/h2&gt; 
 &lt;p&gt;Burn is currently in active development, and there will be breaking changes. While any resulting issues are likely to be easy to fix, there are no guarantees at this stage.&lt;/p&gt; 
 &lt;h2&gt;License&lt;/h2&gt; 
 &lt;p&gt;Burn is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; for details. Opening a pull request is assumed to signal agreement with these licensing terms.&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>tauri-apps/tauri</title>
      <link>https://github.com/tauri-apps/tauri</link>
      <description>&lt;p&gt;Build smaller, faster, and more secure desktop and mobile applications with a web frontend.&lt;/p&gt;&lt;hr&gt;&lt;img src="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/splash.png" alt="Tauri" /&gt; 
&lt;p&gt;&lt;a href="https://github.com/tauri-apps/tauri/tree/dev"&gt;&lt;img src="https://img.shields.io/badge/status-stable-blue.svg?sanitize=true" alt="status" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tauri"&gt;&lt;img src="https://img.shields.io/badge/License-MIT%20or%20Apache%202-green.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tauri-apps/tauri/actions/workflows/test-core.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/tauri-apps/tauri/test-core.yml?label=test%20core&amp;amp;logo=github" alt="test core" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/tauri"&gt;&lt;img src="https://img.shields.io/badge/chat-discord-7289da.svg?sanitize=true" alt="Chat Server" /&gt;&lt;/a&gt; &lt;a href="https://tauri.app"&gt;&lt;img src="https://img.shields.io/badge/website-tauri.app-purple.svg?sanitize=true" alt="website" /&gt;&lt;/a&gt; &lt;a href="https://good-labs.github.io/greater-good-affirmation"&gt;&lt;img src="https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg?sanitize=true" alt="https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tauri"&gt;&lt;img src="https://img.shields.io/badge/sponsor-Open%20Collective-blue.svg?sanitize=true" alt="support" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Tauri is a framework for building tiny, blazingly fast binaries for all major desktop platforms. Developers can integrate any front-end framework that compiles to HTML, JS and CSS for building their user interface. The backend of the application is a rust-sourced binary with an API that the front-end can interact with.&lt;/p&gt; 
&lt;p&gt;The user interface in Tauri apps currently leverages &lt;a href="https://docs.rs/tao"&gt;&lt;code&gt;tao&lt;/code&gt;&lt;/a&gt; as a window handling library on macOS, Windows, Linux, Android and iOS. To render your application, Tauri uses &lt;a href="https://github.com/tauri-apps/wry"&gt;WRY&lt;/a&gt;, a library which provides a unified interface to the system webview, leveraging WKWebView on macOS &amp;amp; iOS, WebView2 on Windows, WebKitGTK on Linux and Android System WebView on Android.&lt;/p&gt; 
&lt;p&gt;To learn more about the details of how all of these pieces fit together, please consult this &lt;a href="https://github.com/tauri-apps/tauri/raw/dev/ARCHITECTURE.md"&gt;ARCHITECTURE.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;If you are interested in making a tauri app, please visit the &lt;a href="https://tauri.app"&gt;documentation website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The quickest way to get started is to install the &lt;a href="https://v2.tauri.app/start/prerequisites/"&gt;prerequisites&lt;/a&gt; for your system and create a new project with &lt;a href="https://github.com/tauri-apps/create-tauri-app/#usage"&gt;&lt;code&gt;create-tauri-app&lt;/code&gt;&lt;/a&gt;. For example with &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm create tauri-app@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The list of Tauri's features includes, but is not limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in app bundler to create app bundles in formats like &lt;code&gt;.app&lt;/code&gt;, &lt;code&gt;.dmg&lt;/code&gt;, &lt;code&gt;.deb&lt;/code&gt;, &lt;code&gt;.rpm&lt;/code&gt;, &lt;code&gt;.AppImage&lt;/code&gt; and Windows installers like &lt;code&gt;.exe&lt;/code&gt; (via NSIS) and &lt;code&gt;.msi&lt;/code&gt; (via WiX).&lt;/li&gt; 
 &lt;li&gt;Built-in self updater (desktop only)&lt;/li&gt; 
 &lt;li&gt;System tray icons&lt;/li&gt; 
 &lt;li&gt;Native notifications&lt;/li&gt; 
 &lt;li&gt;Native WebView Protocol (tauri doesn't create a localhost http(s) server to serve the WebView contents)&lt;/li&gt; 
 &lt;li&gt;GitHub action for streamlined CI&lt;/li&gt; 
 &lt;li&gt;VS Code extension&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Platforms&lt;/h3&gt; 
&lt;p&gt;Tauri currently supports development and distribution on the following platforms:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Versions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Windows&lt;/td&gt; 
   &lt;td align="left"&gt;7 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;macOS&lt;/td&gt; 
   &lt;td align="left"&gt;10.15 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Linux&lt;/td&gt; 
   &lt;td align="left"&gt;webkit2gtk 4.0 for Tauri v1 (for example Ubuntu 18.04). webkit2gtk 4.1 for Tauri v2 (for example Ubuntu 22.04).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;iOS/iPadOS&lt;/td&gt; 
   &lt;td align="left"&gt;9 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Android&lt;/td&gt; 
   &lt;td align="left"&gt;7 and above (currently 8 and above)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before you start working on something, it's best to check if there is an existing issue first. It's also a good idea to stop by the Discord server and confirm with the team if it makes sense or if someone else is already working on it.&lt;/p&gt; 
&lt;p&gt;Please make sure to read the &lt;a href="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; 
&lt;p&gt;Thank you to everyone contributing to Tauri!&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;Documentation in a polyglot system is a tricky proposition. To this end, we prefer to use inline documentation in the Rust &amp;amp; JS source code as much as possible. Check out the hosting repository for the documentation site for further information: &lt;a href="https://github.com/tauri-apps/tauri-docs"&gt;https://github.com/tauri-apps/tauri-docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="middle"&gt; &lt;a href="https://crabnebula.dev" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/sponsors/crabnebula.svg?sanitize=true" alt="CrabNebula" width="283" /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For the complete list of sponsors please visit our &lt;a href="https://tauri.app#sponsors"&gt;website&lt;/a&gt; and &lt;a href="https://opencollective.com/tauri"&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Organization&lt;/h2&gt; 
&lt;p&gt;Tauri aims to be a sustainable collective based on principles that guide sustainable free and open software communities. To this end it has become a Programme within the &lt;a href="https://commonsconservancy.org/"&gt;Commons Conservancy&lt;/a&gt;, and you can contribute financially via &lt;a href="https://opencollective.com/tauri"&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;Code: (c) 2015 - Present - The Tauri Programme within The Commons Conservancy.&lt;/p&gt; 
&lt;p&gt;MIT or MIT/Apache 2.0 where applicable.&lt;/p&gt; 
&lt;p&gt;Logo: CC-BY-NC-ND&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Original Tauri Logo Designs by &lt;a href="https://alve.io/"&gt;Alve Larsson&lt;/a&gt;, &lt;a href="https://github.com/nothingismagick"&gt;Daniel Thompson-Yvetot&lt;/a&gt; and &lt;a href="https://github.com/akryum"&gt;Guillaume Chau&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_large"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qdrant/qdrant</title>
      <link>https://github.com/qdrant/qdrant</link>
      <description>&lt;p&gt;Qdrant - High-performance, massive-scale Vector Database and Vector Search Engine for the next generation of AI. Also available in the cloud https://cloud.qdrant.io/&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/qdrant/qdrant/raw/master/docs/logo-dark.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/qdrant/qdrant/raw/master/docs/logo-light.svg" /&gt; 
  &lt;img height="100" alt="Qdrant" src="https://github.com/qdrant/qdrant/raw/master/docs/logo.svg?sanitize=true" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;b&gt;Vector Search Engine for the next generation of AI applications&lt;/b&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/qdrant/qdrant/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/qdrant/qdrant/rust.yml?style=flat-square" alt="Tests status" /&gt;&lt;/a&gt; &lt;a href="https://api.qdrant.tech/"&gt;&lt;img src="https://img.shields.io/badge/Docs-OpenAPI%203.0-success?style=flat-square" alt="OpenAPI Docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qdrant/qdrant/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/qdrant/qdrant?style=flat-square" alt="Apache 2.0 License" /&gt;&lt;/a&gt; &lt;a href="https://qdrant.to/discord"&gt;&lt;img src="https://img.shields.io/discord/907569970500743200?logo=Discord&amp;amp;style=flat-square&amp;amp;color=7289da" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://qdrant.to/roadmap"&gt;&lt;img src="https://img.shields.io/badge/Roadmap-2025-bc1439.svg?style=flat-square" alt="Roadmap 2025" /&gt;&lt;/a&gt; &lt;a href="https://cloud.qdrant.io/"&gt;&lt;img src="https://img.shields.io/badge/Qdrant-Cloud-24386C.svg?logo=cloud&amp;amp;style=flat-square" alt="Qdrant Cloud" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Qdrant&lt;/strong&gt; (read: &lt;em&gt;quadrant&lt;/em&gt;) is a vector similarity search engine and vector database. It provides a production-ready service with a convenient API to store, search, and manage points—vectors with an additional payload Qdrant is tailored to extended filtering support. It makes it useful for all sorts of neural-network or semantic-based matching, faceted search, and other applications.&lt;/p&gt; 
&lt;p&gt;Qdrant is written in Rust 🦀, which makes it fast and reliable even under high load. See &lt;a href="https://qdrant.tech/benchmarks/"&gt;benchmarks&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more!&lt;/p&gt; 
&lt;p&gt;Qdrant is also available as a fully managed &lt;strong&gt;&lt;a href="https://cloud.qdrant.io/"&gt;Qdrant Cloud&lt;/a&gt;&lt;/strong&gt; ⛅ including a &lt;strong&gt;free tier&lt;/strong&gt;.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md"&gt;Quick Start&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#clients"&gt;Client Libraries&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#demo-projects"&gt;Demo Projects&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#integrations"&gt;Integrations&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#contacts"&gt;Contact&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;pip install qdrant-client
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The python client offers a convenient way to start with Qdrant locally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from qdrant_client import QdrantClient
qdrant = QdrantClient(":memory:") # Create in-memory Qdrant instance, for testing, CI/CD
# OR
client = QdrantClient(path="path/to/db")  # Persists changes to disk, fast prototyping
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Client-Server&lt;/h3&gt; 
&lt;p&gt;To experience the full power of Qdrant locally, run the container with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -p 6333:6333 qdrant/qdrant
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can connect to this with any client, including Python:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;qdrant = QdrantClient("http://localhost:6333") # Connect to existing Qdrant instance
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Before deploying Qdrant to production, be sure to read our &lt;a href="https://qdrant.tech/documentation/guides/installation/"&gt;installation&lt;/a&gt; and &lt;a href="https://qdrant.tech/documentation/guides/security/"&gt;security&lt;/a&gt; guides.&lt;/p&gt; 
&lt;h3&gt;Clients&lt;/h3&gt; 
&lt;p&gt;Qdrant offers the following client libraries to help you integrate it into your application stack with ease:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Official: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/go-client"&gt;Go client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/rust-client"&gt;Rust client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-js"&gt;JavaScript/TypeScript client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-client"&gt;Python client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-dotnet"&gt;.NET/C# client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/java-client"&gt;Java client&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Community: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://hexdocs.pm/qdrant/readme.html"&gt;Elixir&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hkulekci/qdrant-php"&gt;PHP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/andreibondarev/qdrant-ruby"&gt;Ruby&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/metaloom/qdrant-java-client"&gt;Java&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Where do I go from here?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md"&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;End to End &lt;a href="https://colab.research.google.com/drive/1Bz8RSVHwnNDaNtDwotfPj0w7AYzsdXZ-?usp=sharing"&gt;Colab Notebook&lt;/a&gt; demo with SentenceBERT and Qdrant&lt;/li&gt; 
 &lt;li&gt;Detailed &lt;a href="https://qdrant.tech/documentation/"&gt;Documentation&lt;/a&gt; are great starting points&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://qdrant.to/qdrant-tutorial"&gt;Step-by-Step Tutorial&lt;/a&gt; to create your first neural network project with Qdrant&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo Projects&lt;a href="https://replit.com/@qdrant"&gt;&lt;img align="right" src="https://replit.com/badge/github/qdrant/qdrant" alt="Run on Repl.it" /&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Discover Semantic Text Search 🔍&lt;/h3&gt; 
&lt;p&gt;Unlock the power of semantic embeddings with Qdrant, transcending keyword-based search to find meaningful connections in short texts. Deploy a neural search in minutes using a pre-trained neural network, and experience the future of text search. &lt;a href="https://qdrant.to/semantic-search-demo"&gt;Try it online!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Explore Similar Image Search - Food Discovery 🍕&lt;/h3&gt; 
&lt;p&gt;There's more to discovery than text search, especially when it comes to food. People often choose meals based on appearance rather than descriptions and ingredients. Let Qdrant help your users find their next delicious meal using visual search, even if they don't know the dish's name. &lt;a href="https://qdrant.to/food-discovery"&gt;Check it out!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Master Extreme Classification - E-commerce Product Categorization 📺&lt;/h3&gt; 
&lt;p&gt;Enter the cutting-edge realm of extreme classification, an emerging machine learning field tackling multi-class and multi-label problems with millions of labels. Harness the potential of similarity learning models, and see how a pre-trained transformer model and Qdrant can revolutionize e-commerce product categorization. &lt;a href="https://qdrant.to/extreme-classification-demo"&gt;Play with it online!&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt; More solutions &lt;/summary&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/text_search.png" /&gt; &lt;/td&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/image_search.png" /&gt; &lt;/td&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/recommendations.png" /&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Semantic Text Search &lt;/td&gt; 
    &lt;td&gt; Similar Image Search &lt;/td&gt; 
    &lt;td&gt; Recommendations &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/chat_bots.png" /&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/matching_engines.png" /&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/anomalies_detection.png" /&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Chat Bots &lt;/td&gt; 
    &lt;td&gt; Matching Engines &lt;/td&gt; 
    &lt;td&gt; Anomaly Detection &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;h3&gt;REST&lt;/h3&gt; 
&lt;p&gt;Online OpenAPI 3.0 documentation is available &lt;a href="https://api.qdrant.tech/"&gt;here&lt;/a&gt;. OpenAPI makes it easy to generate a client for virtually any framework or programming language.&lt;/p&gt; 
&lt;p&gt;You can also download raw OpenAPI &lt;a href="https://github.com/qdrant/qdrant/raw/master/docs/redoc/master/openapi.json"&gt;definitions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;gRPC&lt;/h3&gt; 
&lt;p&gt;For faster production-tier searches, Qdrant also provides a gRPC interface. You can find gRPC documentation &lt;a href="https://qdrant.tech/documentation/interfaces/#grpc-interface"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Filtering and Payload&lt;/h3&gt; 
&lt;p&gt;Qdrant can attach any JSON payloads to vectors, allowing for both the storage and filtering of data based on the values in these payloads. Payload supports a wide range of data types and query conditions, including keyword matching, full-text filtering, numerical ranges, geo-locations, and more.&lt;/p&gt; 
&lt;p&gt;Filtering conditions can be combined in various ways, including &lt;code&gt;should&lt;/code&gt;, &lt;code&gt;must&lt;/code&gt;, and &lt;code&gt;must_not&lt;/code&gt; clauses, ensuring that you can implement any desired business logic on top of similarity matching.&lt;/p&gt; 
&lt;h3&gt;Hybrid Search with Sparse Vectors&lt;/h3&gt; 
&lt;p&gt;To address the limitations of vector embeddings when searching for specific keywords, Qdrant introduces support for sparse vectors in addition to the regular dense ones.&lt;/p&gt; 
&lt;p&gt;Sparse vectors can be viewed as an generalization of BM25 or TF-IDF ranking. They enable you to harness the capabilities of transformer-based neural networks to weigh individual tokens effectively.&lt;/p&gt; 
&lt;h3&gt;Vector Quantization and On-Disk Storage&lt;/h3&gt; 
&lt;p&gt;Qdrant provides multiple options to make vector search cheaper and more resource-efficient. Built-in vector quantization reduces RAM usage by up to 97% and dynamically manages the trade-off between search speed and precision.&lt;/p&gt; 
&lt;h3&gt;Distributed Deployment&lt;/h3&gt; 
&lt;p&gt;Qdrant offers comprehensive horizontal scaling support through two key mechanisms:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Size expansion via sharding and throughput enhancement via replication&lt;/li&gt; 
 &lt;li&gt;Zero-downtime rolling updates and seamless dynamic scaling of the collections&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Highlighted Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Query Planning and Payload Indexes&lt;/strong&gt; - leverages stored payload information to optimize query execution strategy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SIMD Hardware Acceleration&lt;/strong&gt; - utilizes modern CPU x86-x64 and Neon architectures to deliver better performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Async I/O&lt;/strong&gt; - uses &lt;code&gt;io_uring&lt;/code&gt; to maximize disk throughput utilization even on a network-attached storage.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Write-Ahead Logging&lt;/strong&gt; - ensures data persistence with update confirmation, even during power outages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Integrations&lt;/h1&gt; 
&lt;p&gt;Examples and/or documentation of Qdrant integrations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.cohere.com/docs/qdrant-and-cohere"&gt;Cohere&lt;/a&gt; (&lt;a href="https://qdrant.tech/articles/qa-with-cohere-and-qdrant/"&gt;blogpost on building a QA app with Cohere and Qdrant&lt;/a&gt;) - Use Cohere embeddings with Qdrant&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docarray.org/user_guide/storing/index_qdrant/"&gt;DocArray&lt;/a&gt; - Use Qdrant as a document store in DocArray&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://haystack.deepset.ai/integrations/qdrant-document-store"&gt;Haystack&lt;/a&gt; - Use Qdrant as a document store with Haystack (&lt;a href="https://haystack.deepset.ai/blog/qdrant-integration"&gt;blogpost&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://python.langchain.com/docs/integrations/providers/qdrant/"&gt;LangChain&lt;/a&gt; (&lt;a href="https://qdrant.tech/articles/langchain-integration/"&gt;blogpost&lt;/a&gt;) - Use Qdrant as a memory backend for LangChain.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gpt-index.readthedocs.io/en/latest/examples/vector_stores/QdrantIndexDemo.html"&gt;LlamaIndex&lt;/a&gt; - Use Qdrant as a Vector Store with LlamaIndex.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openai/chatgpt-retrieval-plugin/raw/main/docs/providers/qdrant/setup.md"&gt;OpenAI - ChatGPT retrieval plugin&lt;/a&gt; - Use Qdrant as a memory backend for ChatGPT&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devblogs.microsoft.com/semantic-kernel/the-power-of-persistent-memory-with-semantic-kernel-and-qdrant-vector-database/"&gt;Microsoft Semantic Kernel&lt;/a&gt; - Use Qdrant as persistent memory with Semantic Kernel&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contacts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Have questions? Join our &lt;a href="https://qdrant.to/discord"&gt;Discord channel&lt;/a&gt; or mention &lt;a href="https://qdrant.to/twitter"&gt;@qdrant_engine on Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Want to stay in touch with latest releases? Subscribe to our &lt;a href="https://qdrant.tech/subscribe/"&gt;Newsletters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Looking for a managed cloud? Check &lt;a href="https://qdrant.tech/pricing/"&gt;pricing&lt;/a&gt;, need something personalised? We're at &lt;a href="mailto:info@qdrant.tech"&gt;info@qdrant.tech&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Qdrant is licensed under the Apache License, Version 2.0. View a copy of the &lt;a href="https://github.com/qdrant/qdrant/raw/master/LICENSE"&gt;License file&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zackriya-Solutions/meeting-minutes</title>
      <link>https://github.com/Zackriya-Solutions/meeting-minutes</link>
      <description>&lt;p&gt;A free and open source, self hosted Ai based live meeting note taker and minutes summary generator that can completely run in your Local device (Mac OS and windows OS Support added. Working on adding linux support soon) https://meetily.zackriya.com/ is meetly ai&lt;/p&gt;&lt;hr&gt;&lt;div align="center" style="border-bottom: none"&gt; 
 &lt;h1&gt; &lt;img src="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/Meetily-6.png" style="border-radius: 10px;" /&gt; &lt;br /&gt; Privacy-First AI Meeting Assistant &lt;/h1&gt; 
 &lt;a href="https://trendshift.io/repositories/13272" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/13272" alt="Zackriya-Solutions%2Fmeeting-minutes | Trendshift" style="width: 250px; height: 55px;" width="250" height="55" /&gt;&lt;/a&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://github.com/Zackriya-Solutions/meeting-minutes/releases/"&gt;&lt;img src="https://img.shields.io/badge/Pre_Release-Link-brightgreen" alt="Pre-Release" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/Zackriya-Solutions/meeting-minutes/releases"&gt;&lt;img alt="GitHub Repo stars" src="https://img.shields.io/github/stars/zackriya-solutions/meeting-minutes?style=flat" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/Zackriya-Solutions/meeting-minutes/releases"&gt; &lt;img alt="GitHub Downloads (all assets, all releases)" src="https://img.shields.io/github/downloads/zackriya-solutions/meeting-minutes/total?style=plastic" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/Zackriya-Solutions/meeting-minutes/releases"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-blue" alt="License" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/Zackriya-Solutions/meeting-minutes/releases"&gt;&lt;img src="https://img.shields.io/badge/Supported_OS-macOS,_Windows-white" alt="Supported OS" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/Zackriya-Solutions/meeting-minutes/releases"&gt;&lt;img alt="GitHub Tag" src="https://img.shields.io/github/v/tag/zackriya-solutions/meeting-minutes?include_prereleases&amp;amp;color=yellow" /&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;h3&gt; &lt;br /&gt; Open Source • Privacy-First • Enterprise-Ready &lt;/h3&gt; 
 &lt;p align="center"&gt; Get latest &lt;a href="https://www.zackriya.com/meetily-subscribe/"&gt;&lt;b&gt;Product updates&lt;/b&gt;&lt;/a&gt; &lt;br /&gt;&lt;br /&gt; &lt;a href="https://meetily.zackriya.com"&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; • &lt;a href="https://www.linkedin.com/company/106363062/"&gt;&lt;b&gt;LinkedIn&lt;/b&gt;&lt;/a&gt; • &lt;a href="https://discord.gg/crRymMQBFH"&gt;&lt;b&gt;Meetily Discord&lt;/b&gt;&lt;/a&gt; • &lt;a href="https://discord.com/invite/vCFJvN4BwJ"&gt;&lt;b&gt;Privacy-First AI&lt;/b&gt;&lt;/a&gt; • &lt;a href="https://www.reddit.com/r/meetily/"&gt;&lt;b&gt;Reddit&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; 
 &lt;p align="center"&gt; &lt;/p&gt;
 &lt;p&gt;A privacy-first AI meeting assistant that captures, transcribes, and summarizes meetings entirely on your infrastructure. Built by expert AI engineers passionate about data sovereignty and open source solutions. Perfect for enterprises that need advanced meeting intelligence without compromising on privacy, compliance, or control.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/meetily_demo.gif" width="650" alt="Meetily Demo" /&gt; &lt;br /&gt; &lt;a href="https://youtu.be/6FnhSC_eSz8"&gt;View full Demo Video&lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;details&gt; 
 &lt;summary&gt;Table of Contents&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#why-meetily"&gt;Why Meetily?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#key-features-in-action"&gt;Key Features in Action&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#system-architecture"&gt;System Architecture&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#for-developers"&gt;For Developers&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#enterprise-solutions"&gt;Enterprise Solutions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Meetily is a privacy-first AI meeting assistant that runs entirely on your local machine. It captures your meetings, transcribes them in real-time, and generates summaries, all without sending any data to the cloud. This makes it the perfect solution for professionals and enterprises who need to maintain complete control over their sensitive information.&lt;/p&gt; 
&lt;h2&gt;Why Meetily?&lt;/h2&gt; 
&lt;p&gt;While there are many meeting transcription tools available, this solution stands out by offering:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Privacy First:&lt;/strong&gt; All processing happens locally on your device.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cost-Effective:&lt;/strong&gt; Uses open-source AI models instead of expensive APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible:&lt;/strong&gt; Works offline and supports multiple meeting platforms.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable:&lt;/strong&gt; Self-host and modify for your specific needs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;The Privacy Problem&lt;/summary&gt; 
 &lt;p&gt;Meeting AI tools create significant privacy and compliance risks across all sectors:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;$4.4M average cost per data breach&lt;/strong&gt; (IBM 2024)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;€5.88 billion in GDPR fines&lt;/strong&gt; issued by 2025&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;400+ unlawful recording cases&lt;/strong&gt; filed in California this year&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Whether you're a defense consultant, enterprise executive, legal professional, or healthcare provider, your sensitive discussions shouldn't live on servers you don't control. Cloud meeting tools promise convenience but deliver privacy nightmares with unclear data storage practices and potential unauthorized access.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Meetily solves this:&lt;/strong&gt; Complete data sovereignty on your infrastructure, zero vendor lock-in, and full control over your sensitive conversations.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Local First:&lt;/strong&gt; All processing is done on your machine. No data ever leaves your computer.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Real-time Transcription:&lt;/strong&gt; Get a live transcript of your meeting as it happens.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI-Powered Summaries:&lt;/strong&gt; Generate summaries of your meetings using powerful language models.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-Platform:&lt;/strong&gt; Works on macOS, Windows, and Linux.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open Source:&lt;/strong&gt; Meetily is open source and free to use.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;🪟 &lt;strong&gt;Windows&lt;/strong&gt;&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the latest &lt;code&gt;x64-setup.exe&lt;/code&gt; from &lt;a href="https://github.com/Zackriya-Solutions/meeting-minutes/releases/latest"&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Right-click the downloaded file → &lt;strong&gt;Properties&lt;/strong&gt; → Check &lt;strong&gt;Unblock&lt;/strong&gt; → Click &lt;strong&gt;OK&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Run the installer (if Windows shows a security warning: Click &lt;strong&gt;More info&lt;/strong&gt; → &lt;strong&gt;Run anyway&lt;/strong&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;🍎 &lt;strong&gt;macOS&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Install via Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install Meetily (single application - everything included!)
brew tap zackriya-solutions/meetily
brew install --cask meetily
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Upgrading from v0.0.5?&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew update
brew upgrade --cask meetily
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open &lt;strong&gt;Meetily&lt;/strong&gt; from Applications folder.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;⚠️ Data Migration:&lt;/strong&gt; The application will ask whether to import your old database through a popup window on first launch.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;🐧 &lt;strong&gt;Linux&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Build from source following our detailed guides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/building_in_linux.md"&gt;Building on Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/BUILDING.md"&gt;General Build Instructions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Quick start:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/Zackriya-Solutions/meeting-minutes
cd meeting-minutes/frontend
pnpm install
pnpm run tauri:build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Key Features in Action&lt;/h2&gt; 
&lt;h3&gt;🎯 Local Transcription&lt;/h3&gt; 
&lt;p&gt;Transcribe meetings entirely on your device using &lt;strong&gt;Whisper&lt;/strong&gt; or &lt;strong&gt;Parakeet&lt;/strong&gt; models. No cloud required.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/home.png" width="650" style="border-radius: 10px;" alt="Meetily Demo" /&gt; &lt;/p&gt; 
&lt;h3&gt;🤖 AI-Powered Summaries&lt;/h3&gt; 
&lt;p&gt;Generate meeting summaries with your choice of AI provider. &lt;strong&gt;Ollama&lt;/strong&gt; (local) is recommended, with support for Claude, Groq, OpenRouter, and OpenAI.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/summary.png" width="650" style="border-radius: 10px;" alt="Summary generation" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/editor1.png" width="650" style="border-radius: 10px;" alt="Editor Summary generation" /&gt; &lt;/p&gt; 
&lt;h3&gt;🔒 Privacy-First Design&lt;/h3&gt; 
&lt;p&gt;All data stays on your machine. Transcription models, recordings, and transcripts are stored locally.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/settings.png" width="650" style="border-radius: 10px;" alt="Local Transcription and storage" /&gt; &lt;/p&gt; 
&lt;h3&gt;🎙️ Professional Audio Mixing&lt;/h3&gt; 
&lt;p&gt;Capture microphone and system audio simultaneously with intelligent ducking and clipping prevention.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/audio.png" width="650" style="border-radius: 10px;" alt="Device selection" /&gt; &lt;/p&gt; 
&lt;h3&gt;⚡ GPU Acceleration&lt;/h3&gt; 
&lt;p&gt;Built-in support for hardware acceleration across platforms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: Apple Silicon (Metal) + CoreML&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows/Linux&lt;/strong&gt;: NVIDIA (CUDA), AMD/Intel (Vulkan)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Automatically enabled at build time - no configuration needed.&lt;/p&gt; 
&lt;h2&gt;System Architecture&lt;/h2&gt; 
&lt;p&gt;Meetily is a single, self-contained application built with &lt;a href="https://tauri.app/"&gt;Tauri&lt;/a&gt;. It uses a Rust-based backend to handle all the core logic, and a Next.js frontend for the user interface.&lt;/p&gt; 
&lt;p&gt;For more details, see the &lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/architecture.md"&gt;Architecture documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;For Developers&lt;/h2&gt; 
&lt;p&gt;If you want to contribute to Meetily or build it from source, you'll need to have Rust and Node.js installed. For detailed build instructions, please see the &lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/docs/BUILDING.md"&gt;Building from Source guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Enterprise Solutions&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Meetily Enterprise&lt;/strong&gt; is available for on-premise deployment, giving organizations complete control over their meeting intelligence infrastructure. This enterprise version includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;100% On-Premise Deployment&lt;/strong&gt;: Your data never leaves your infrastructure&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Centralized Management&lt;/strong&gt;: Support for 100+ users with administrative controls&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Zero Vendor Lock-in&lt;/strong&gt;: Open source MIT license ensures complete ownership&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Compliance Ready&lt;/strong&gt;: Meet GDPR, SOX, HIPAA, and industry-specific requirements&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom Integration&lt;/strong&gt;: APIs and webhooks for enterprise systems&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For enterprise solutions: &lt;a href="https://meetily.zackriya.com"&gt;https://meetily.zackriya.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions from the community! If you have any questions or suggestions, please open an issue or submit a pull request. Please follow the established project structure and guidelines. For more details, refer to the &lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License - Feel free to use this project for your own purposes.&lt;/p&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Thanks for all the contributions. Our community is what makes this project possible. Below is the list of contributors:&lt;/p&gt; 
&lt;a href="https://github.com/zackriya-solutions/meeting-minutes/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=zackriya-solutions/meeting-minutes" /&gt; &lt;/a&gt; 
&lt;p&gt;We welcome contributions from the community! If you have any questions or suggestions, please open an issue or submit a pull request. Please follow the established project structure and guidelines. For more details, refer to the &lt;a href="https://raw.githubusercontent.com/Zackriya-Solutions/meeting-minutes/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;We borrowed some code from &lt;a href="https://github.com/ggerganov/whisper.cpp"&gt;Whisper.cpp&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;We borrowed some code from &lt;a href="https://github.com/mediar-ai/screenpipe"&gt;Screenpipe&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;We borrowed some code from &lt;a href="https://crates.io/crates/transcribe-rs"&gt;transcribe-rs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Thanks to &lt;strong&gt;NVIDIA&lt;/strong&gt; for developing the &lt;strong&gt;Parakeet&lt;/strong&gt; model.&lt;/li&gt; 
 &lt;li&gt;Thanks to &lt;a href="https://huggingface.co/istupakov/parakeet-tdt-0.6b-v3-onnx"&gt;istupakov&lt;/a&gt; for providing the &lt;strong&gt;ONNX conversion&lt;/strong&gt; of the Parakeet model.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://star-history.com/#Zackriya-Solutions/meeting-minutes&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=Zackriya-Solutions/meeting-minutes&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust-analyzer</title>
      <link>https://github.com/rust-lang/rust-analyzer</link>
      <description>&lt;p&gt;A Rust compiler front-end for IDEs&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rust-lang/rust-analyzer/master/assets/logo-wide.svg?sanitize=true" alt="rust-analyzer logo" /&gt; &lt;/p&gt; 
&lt;p&gt;rust-analyzer is a language server that provides IDE functionality for writing Rust programs. You can use it with any editor that supports the &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt; (VS Code, Vim, Emacs, Zed, etc).&lt;/p&gt; 
&lt;p&gt;rust-analyzer features include go-to-definition, find-all-references, refactorings and code completion. rust-analyzer also supports integrated formatting (with rustfmt) and integrated diagnostics (with rustc and clippy).&lt;/p&gt; 
&lt;p&gt;Internally, rust-analyzer is structured as a set of libraries for analyzing Rust code. See &lt;a href="https://rust-analyzer.github.io/book/contributing/architecture.html"&gt;Architecture&lt;/a&gt; in the manual.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://rust-analyzer.github.io/book/installation.html"&gt;https://rust-analyzer.github.io/book/installation.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;If you want to &lt;strong&gt;contribute&lt;/strong&gt; to rust-analyzer check out the &lt;a href="https://raw.githubusercontent.com/rust-lang/rust-analyzer/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; or if you are just curious about how things work under the hood, see the &lt;a href="https://rust-analyzer.github.io/book/contributing"&gt;Contributing&lt;/a&gt; section of the manual.&lt;/p&gt; 
&lt;p&gt;If you want to &lt;strong&gt;use&lt;/strong&gt; rust-analyzer's language server with your editor of choice, check &lt;a href="https://rust-analyzer.github.io/book/"&gt;the manual&lt;/a&gt;. It also contains some tips &amp;amp; tricks to help you be more productive when using rust-analyzer.&lt;/p&gt; 
&lt;h2&gt;Security and Privacy&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://rust-analyzer.github.io/book/security.html"&gt;security&lt;/a&gt; and &lt;a href="https://rust-analyzer.github.io/book/privacy.html"&gt;privacy&lt;/a&gt; sections of the manual.&lt;/p&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;p&gt;For usage and troubleshooting requests, please use "IDEs and Editors" category of the Rust forum:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://users.rust-lang.org/c/ide/14"&gt;https://users.rust-lang.org/c/ide/14&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For questions about development and implementation, join rust-analyzer working group on Zulip:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer"&gt;https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Quick Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href="https://rust-analyzer.github.io/"&gt;https://rust-analyzer.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Metrics: &lt;a href="https://rust-analyzer.github.io/metrics/"&gt;https://rust-analyzer.github.io/metrics/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;API docs: &lt;a href="https://rust-lang.github.io/rust-analyzer/ide/"&gt;https://rust-lang.github.io/rust-analyzer/ide/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Changelog: &lt;a href="https://rust-analyzer.github.io/thisweek"&gt;https://rust-analyzer.github.io/thisweek&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;rust-analyzer is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/rust-analyzer/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/rust-lang/rust-analyzer/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cube-js/cube</title>
      <link>https://github.com/cube-js/cube</link>
      <description>&lt;p&gt;📊 Cube Core is open-source semantic layer and LookML alternative for AI, BI and embedded analytics&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="" alt="" /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://cube.registration.goldcast.io/events/a6a3b4b8-a99f-489a-b740-060182dbce7b"&gt;&lt;img src="https://lgo0ecceic.ucarecd.net/cd698180-3d96-4644-9c9e-daf299ecf3ea/" alt="Agentic Analytics Summit" width="100%" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://cube.dev?ref=github-readme"&gt;&lt;img src="https://raw.githubusercontent.com/cube-js/cube/master/docs/content/cube-logo-with-bg.png" alt="Cube — Semantic Layer for Data Applications" width="300px" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;a href="https://cube.dev?ref=github-readme"&gt;Website&lt;/a&gt; • &lt;a href="https://cube.dev/docs/getting-started?ref=github-readme"&gt;Getting Started&lt;/a&gt; • &lt;a href="https://cube.dev/docs?ref=github-readme"&gt;Docs&lt;/a&gt; • &lt;a href="https://cube.dev/docs/examples?ref=github-readme"&gt;Examples&lt;/a&gt; • &lt;a href="https://cube.dev/blog?ref=github-readme"&gt;Blog&lt;/a&gt; • &lt;a href="https://slack.cube.dev?ref=github-readme"&gt;Slack&lt;/a&gt; • &lt;a href="https://twitter.com/the_cube_dev"&gt;X&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://badge.fury.io/js/%40cubejs-backend%2Fserver"&gt;&lt;img src="https://badge.fury.io/js/%40cubejs-backend%2Fserver.svg?sanitize=true" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cube-js/cube/actions?query=workflow%3ABuild+branch%3Amaster"&gt;&lt;img src="https://github.com/cube-js/cube/workflows/Build/badge.svg?sanitize=true" alt="GitHub Actions" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js?ref=badge_shield"&gt;&lt;img src="https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Cube Core is an open-source semantic layer and LookML alternative.&lt;/strong&gt; It can be used by data professionals to access data from modern data stores, organize it into consistent definitions, and deliver it to every application. Cube Core is headless and comes with multiple APIs for embedded analytics and BI: REST, GraphQL and SQL. If you are looking for a fully integrated platform, similar to Looker, check out our commercial product - &lt;a href="https://cube.dev"&gt;Cube&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://ucarecdn.com/8d945f29-e9eb-4e7f-9e9e-29ae7074e195/" style="border: none" width="100%" /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt;Learn more about connecting Cube to &lt;a href="https://cube.dev/docs/config/databases?ref=github-readme" target="_blank"&gt;data sources&lt;/a&gt; and &lt;a href="https://cube.dev/docs/config/downstream?ref=github-readme" target="_blank"&gt;analytics &amp;amp; visualization tools&lt;/a&gt;.&lt;/i&gt; &lt;/p&gt; 
&lt;p&gt;Cube was designed to work with all SQL-enabled data sources, including cloud data warehouses like Snowflake or Google BigQuery, query engines like Presto or Amazon Athena, and application databases like Postgres. Cube has a built-in relational caching engine to provide sub-second latency and high concurrency for API requests.&lt;/p&gt; 
&lt;p&gt;For more details, see the &lt;a href="https://cube.dev/docs/cubejs-introduction?ref=github-readme"&gt;introduction&lt;/a&gt; page in our documentation.&lt;/p&gt; 
&lt;h2&gt;Why Cube?&lt;/h2&gt; 
&lt;p&gt;As data infrastructure evolved from traditional relational databases to cloud data platforms, OLAP capabilities that once lived in specialized servers like SQL Server Analysis Services and Oracle Essbase were left behind. Today's organizations face several challenges:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Analytics Modeling and Multidimensionality.&lt;/strong&gt; Modern cloud data platforms excel at processing large volumes of data but lack native support for multidimensional analysis and modeling. Cube brings OLAP-style analytics to these platforms, enabling consistent metric definitions and multidimensional analysis.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance Optimization.&lt;/strong&gt; While cloud data warehouses have improved query performance through column-oriented storage and distributed processing, they still struggle with complex analytical workloads. Cube provides intelligent caching and pre-aggregation strategies that dramatically improve query response times.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Access Control and Governance.&lt;/strong&gt; Securing and governing access to data across all consuming applications remains critical. Cube offers robust access control to ensure consistent security across your entire data ecosystem.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;API Flexibility.&lt;/strong&gt; Legacy OLAP tools were limited in how they exposed data. Cube provides modern REST, GraphQL, and SQL APIs along with support for traditional MDX and DAX interfaces, making it a truly universal semantic layer.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Cube is the missing OLAP engine for the cloud data platform era that provides the necessary infrastructure and features to implement efficient data modeling, access control, and performance optimizations without duplicating analytics modeling, data, or security permissions across different tools.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cube-js/cube.js/master/docs/content/old-was-vs-cubejs-way.png" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started 🚀&lt;/h2&gt; 
&lt;h3&gt;Cube Cloud&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://cube.dev/cloud?ref=github-readme"&gt;Cube Cloud&lt;/a&gt; is the fastest way to get started with Cube. It provides managed infrastructure as well as an instant and free access for development projects and proofs of concept.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://cubecloud.dev/auth/signup?ref=github-readme"&gt;&lt;img src="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f1f1eac0-0b44-4c47-936e-33b5c06eedf0.png" alt="Get started now" width="200px" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For a step-by-step guide on Cube Cloud, &lt;a href="https://cube.dev/docs/getting-started/cloud/overview?ref=github-readme"&gt;see the docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can get started with Cube locally or self-host it with &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once Docker is installed, in a new folder for your project, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -p 4000:4000 \
  -p 15432:15432 \
  -v ${PWD}:/cube/conf \
  -e CUBEJS_DEV_MODE=true \
  cubejs/cube
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, open &lt;a href="http://localhost:4000"&gt;http://localhost:4000&lt;/a&gt; in your browser to continue setup.&lt;/p&gt; 
&lt;p&gt;For a step-by-step guide on Docker, &lt;a href="https://cube.dev/docs/getting-started-docker?ref=github-readme"&gt;see the docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://cube.dev/docs?ref=github-readme"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cube.dev/docs/getting-started?ref=github-readme"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cube.dev/docs/examples?ref=github-readme"&gt;Examples &amp;amp; Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cube.dev/docs/product/introduction#four-layers-of-semantic-layer"&gt;Architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;There are many ways you can contribute to Cube! Here are a few possibilities:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Star this repo and follow us on &lt;a href="https://twitter.com/the_cube_dev"&gt;X&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Add Cube to your stack on &lt;a href="https://stackshare.io/cube-js"&gt;Stackshare&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Upvote issues with 👍 reaction so we know what's the demand for particular issue to prioritize it within road map.&lt;/li&gt; 
 &lt;li&gt;Create issues every time you feel something is missing or goes wrong.&lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/cube.js"&gt;Stack Overflow with cube.js tag&lt;/a&gt; if others can have these questions as well.&lt;/li&gt; 
 &lt;li&gt;Provide pull requests for all open issues and especially for those with &lt;a href="https://github.com/cube-js/cube/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt; and &lt;a href="https://github.com/cube-js/cube/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;good first issue&lt;/a&gt; labels.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All sort of contributions are &lt;strong&gt;welcome and extremely helpful&lt;/strong&gt; 🙌 Please refer to &lt;a href="https://github.com/cube-js/cube/raw/master/CONTRIBUTING.md"&gt;the contribution guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Cube Client is &lt;a href="https://raw.githubusercontent.com/cube-js/cube/master/packages/cubejs-client-core/LICENSE"&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Cube Backend is &lt;a href="https://raw.githubusercontent.com/cube-js/cube/master/packages/cubejs-server/LICENSE"&gt;Apache 2.0 licensed&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js?ref=badge_large"&gt;&lt;img src="https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>moghtech/komodo</title>
      <link>https://github.com/moghtech/komodo</link>
      <description>&lt;p&gt;🦎 a tool to build and deploy software on many servers 🦎&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Komodo 🦎&lt;/h1&gt; 
&lt;p&gt;A tool to build and deploy software across many servers.&lt;/p&gt; 
&lt;p&gt;🦎 &lt;a href="https://komo.do"&gt;See the docs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🦎 &lt;a href="https://demo.komo.do"&gt;Try the Demo&lt;/a&gt; - Login: &lt;code&gt;demo&lt;/code&gt; : &lt;code&gt;demo&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;🦎 &lt;a href="https://build.komo.do"&gt;See the Build Server&lt;/a&gt; - Login: &lt;code&gt;komodo&lt;/code&gt; : &lt;code&gt;komodo&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;🦎 &lt;a href="https://discord.gg/DRqE8Fvg5c"&gt;Join the Discord&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;The Komodo dragon is the largest living member of the &lt;a href="https://en.wikipedia.org/wiki/Monitor_lizard"&gt;&lt;em&gt;Monitor&lt;/em&gt; family of lizards&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There is no limit to the number of servers you can connect, and there will never be. There is no limit to what API you can use for automation, and there never will be. No "business edition" here.&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;Warning. This is open source software (GPL-V3), and while we make a best effort to ensure releases are stable and bug-free, there are no warranties. Use at your own risk.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/moghtech/komodo/raw/main/scripts/readme.md"&gt;periphery setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/moghtech/komodo/raw/main/roadmap.md"&gt;roadmap&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;h3&gt;Light Theme&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Dashboard.png" alt="Dashboard" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Stack.png" alt="Stack" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Compose.png" alt="Compose" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Env.png" alt="Env" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Sync.png" alt="Sync" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Update.png" alt="Update" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Stats.png" alt="Stats" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Export.png" alt="Export" /&gt;&lt;/p&gt; 
&lt;h3&gt;Dark Theme&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Dashboard.png" alt="Dashboard" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Stack.png" alt="Stack" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Compose.png" alt="Compose" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Env.png" alt="Env" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Sync.png" alt="Sync" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Update.png" alt="Update" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Stats.png" alt="Stats" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Export.png" alt="Export" /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenDevicePartnership/patina</title>
      <link>https://github.com/OpenDevicePartnership/patina</link>
      <description>&lt;p&gt;Patina Firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Patina&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/OpenDevicePartnership/patina/releases/latest"&gt;&lt;img src="https://img.shields.io/crates/v/patina" alt="release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/OpenDevicePartnership/patina/commits/main/"&gt;&lt;img src="https://img.shields.io/github/commits-since/OpenDevicePartnership/patina/latest/main?include_prereleases" alt="commit" /&gt;&lt;/a&gt; &lt;a href="https://github.com/OpenDevicePartnership/patina/actions/workflows/ci-workflow.yml"&gt;&lt;img src="https://github.com/OpenDevicePartnership/patina/actions/workflows/ci-workflow.yml/badge.svg?branch=main&amp;amp;event=push" alt="ci" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/OpenDevicePartnership/patina"&gt;&lt;img src="https://codecov.io/gh/OpenDevicePartnership/patina/graph/badge.svg?token=CWHWOUUGY6" alt="cov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository hosts the Patina project - a Rust implementation of UEFI firmware.&lt;/p&gt; 
&lt;p&gt;The goal of this project is to serve as a replacement for core UEFI firmware components so they are written in Pure Rust as opposed to Rust wrappers around core implementation still written in C.&lt;/p&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;p&gt;There have been various &lt;a href="https://www.microsoft.com/en-us/msrc/blog/2019/11/using-rust-in-windows"&gt;instances of advocacy&lt;/a&gt; for building system level software in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This repository contains a Rust &lt;a href="https://uefi.org/"&gt;UEFI&lt;/a&gt; firmware implementation called Patina. We plan to enable an incremental migration of today's firmware components largely written in C to Rust starting with the core. The primary objective for this effort is to improve the security and stability of system firmware by leveraging the memory safety offered by Rust while retaining similar boot performance.&lt;/p&gt; 
&lt;h2&gt;Important Notes&lt;/h2&gt; 
&lt;p&gt;This repository is still considered to be in a "beta" stage at this time. Platform testing and integration feedback is very welcome.&lt;/p&gt; 
&lt;p&gt;Before making pull requests at a minimum, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make all
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Performing a Release&lt;/h2&gt; 
&lt;p&gt;Below is the information required to perform a release that publishes to the registry feed:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Review the current draft release on the github repo: &lt;a href="https://github.com/OpenDevicePartnership/patina/releases"&gt;Releases&lt;/a&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If something is incorrect, update it in the draft release&lt;/li&gt; 
   &lt;li&gt;If you need to manually change the version, make sure you update the associated git tag value in the draft release&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;Publish the release&lt;/li&gt; 
 &lt;li&gt;Monitor the publish release workflow that is automatically triggered on the release being published: &lt;a href="https://github.com/OpenDevicePartnership/patina/actions/workflows/publish-release.yml"&gt;Publish Release Workflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Once completed successfully, click on the "Notify Branch Creation Step" and click the provided link to create the PR to update all versions in all Cargo.toml files across the repository.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;We have "Getting Started" documentation located in this repository at &lt;code&gt;docs/*&lt;/code&gt;. The latest documentation can be found at &lt;a href="https://OpenDevicePartnership.github.io/patina/"&gt;https://OpenDevicePartnership.github.io/patina/&lt;/a&gt;, however this documentation can also be self-hosted via (&lt;a href="https://github.com/rust-lang/mdBook"&gt;mdbook&lt;/a&gt;). Once you all dependencies installed as specified below, you can run &lt;code&gt;mdbook serve docs&lt;/code&gt; to self host the getting started book.&lt;/p&gt; 
&lt;p&gt;You can also generate API documentation for the project using &lt;code&gt;cargo make doc&lt;/code&gt;. This will eventually be hosted on docs.rs once we begin uploading to crates.io. You can have the documentation opened in your browser by running &lt;code&gt;cargo make doc-open&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;First-Time Tool Setup Instructions&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Follow the steps outlined by &lt;a href="https://www.rust-lang.org/learn/get-started"&gt;Getting Started - Rust Programming Language (rust-lang.org)&lt;/a&gt; to install, update (if needed), and test cargo/rust.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;[toolchain]&lt;/code&gt; section of the &lt;a href="https://github.com/OpenDevicePartnership/patina/raw/HEAD/rust-toolchain.toml"&gt;rust-toolchain.toml&lt;/a&gt; file contains the tools necessary to compile and can be installed through rustup.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;rustup toolchain install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;[tools]&lt;/code&gt; section of the &lt;a href="https://github.com/OpenDevicePartnership/patina/raw/HEAD/rust-toolchain.toml"&gt;rust-toolchain.toml&lt;/a&gt; file contains tools to support commands such as &lt;code&gt;cargo make coverage&lt;/code&gt; and must be installed manually. A local build does not need them all, but at a minimum, cargo-make and cargo-llvm-cov should be installed.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install cargo-make
cargo install cargo-llvm-cov
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Another optional tool that has proven useful for speeding up the build process is 'cargo-binstall', located on &lt;a href="https://github.com/cargo-bins/cargo-binstall"&gt;GitHub&lt;/a&gt;. See the readme.md file in that repository for installation and usage instructions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;All of the Patina crates can be compiled in one of 3 supported targets; aarch64, x64, or native.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make build-aarch64
   - or -
cargo make build-x64
   - or -
cargo make build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, the make compiles a developer build, but development or release can be indicated by using the "-p" flag&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make -p development build-aarch64
   - or -
cargo make -p release build-aarch64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Test&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run all unit tests in the workspace:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run tests in an individual package:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make test -p patina
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build on-platform tests in the workspace:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make patina-test
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Build on-platform tests in an individual package:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make patina-test -p patina
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Rust Version Updates&lt;/h2&gt; 
&lt;p&gt;Rust is released on a regular six week cadence. The Rust project maintains a site with &lt;a href="https://forge.rust-lang.org/"&gt;dates for upcoming releases&lt;/a&gt;. While there is no hard requirement to update the Rust version used by Patina in a given timeframe, it is recommended to do so at least once per quarter. Updates to the latest stable version should not happen immediately after the stable version release as Patina consumers may need time to update their internal toolchains to migrate to the latest stable version.&lt;/p&gt; 
&lt;p&gt;A pull request that updates the Rust version should always be created against the &lt;code&gt;main&lt;/code&gt; branch. The pull request should include the &lt;code&gt;OpenDevicePartnership/patina-contributors&lt;/code&gt; team as reviewers and remain open for at least three full business days to ensure that stakeholders have an opportunity to review and provide feedback.&lt;/p&gt; 
&lt;h3&gt;Updating the Minimum Supported Rust Version&lt;/h3&gt; 
&lt;p&gt;The Rust toolchain used in this repo is specified in &lt;code&gt;rust-toolchain.toml&lt;/code&gt;. The minimum supported Rust version for the crates in the workspace is specified in the &lt;code&gt;rust-version&lt;/code&gt; field of each crate's &lt;code&gt;Cargo.toml&lt;/code&gt; file. When updating the Rust toolchain version, the minimum supported Rust version should be evaluated to determine if it also needs to be updated.&lt;/p&gt; 
&lt;p&gt;A non-exhaustive list of reasons the minimum version might need to change includes:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;An unstable feature has been stabilized and the corresponding &lt;code&gt;#![feature(...)]&lt;/code&gt; has been removed&lt;/li&gt; 
 &lt;li&gt;A feature introduced in the release is immediately being used in the repository&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If the minimum supported Rust version does need to change, please add a comment explaining wny. Note that formatting and linting changes to satisfy tools like rustfmt or clippy do not alone necessitate a minimum Rust version change.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;A quick way to check if the minimum supported Rust version needs to change is to keep the changes made for the new release in your workspace and then revert the Rust toolchain to the previous version. If the project fails to build, then the minimum supported Rust version needs to be updated.&lt;/p&gt; 
&lt;h2&gt;Coverage&lt;/h2&gt; 
&lt;p&gt;The coverage command will generate test coverage data for all crates in the project. To target a single crate, the name can be added to the command line.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make coverage
   - or -
cargo make coverage dxe_core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;Various crates have benchmarks setup that can be executed using the &lt;code&gt;cargo make bench&lt;/code&gt; command. Any arguments provided will be passed along to the bench command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cmd"&gt;cargo make bench -p patina
cargo make bench -p patina --bench bench_component
cargo make bench -p patina --bench bench_component -- with_component
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Benchmarks utilize the &lt;a href="https://crates.io/crates/criterion"&gt;criterion&lt;/a&gt; benchmarking library, so if new benchmarks are to be added, they should follow that documentation. Benchmarks can be added to any crate to test performance by following the same layout as existing benchmarks, and adding the benchmark to the appropriate crate's Cargo.toml file.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;This project uses a makefile that sets the "RUSTC_BOOTSTRAP=1" environment variable due to internal requirements which puts us in parity with the nightly features that exist on the toolchain targeted. The "nightly" toolchain may be used in place of this.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;High-Level Patina Roadmap&lt;/h2&gt; 
&lt;p&gt;Patina's upcoming work falls into three main categories:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Stabilization&lt;/strong&gt; - Bug fixes, performance improvements, and feature completion for existing functionality. This work is focused on ensuring that everything in Patina's main branch is stable and ready for production use. This is the primary focus for the next several months.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Expansion&lt;/strong&gt; - Expansion of Patina's capabilities and this falls into two sub-categories: 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Component Growth&lt;/strong&gt; - Adding new components to Patina to replace equivalent C-based UEFI components. As new components are made available, it is expected that platforms adopting Patina will incrementally remove their C-based UEFI components as the equivalent Rust-based functionality is now available in their Patina build.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;MM Core Support&lt;/strong&gt; - Similar to the DXE Core support in Patina today, adding a Patina Standalone MM Core such that the Management Mode (MM) core environment is written in Rust and a larger portion of MM drivers can be ported to Patina MM components.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ecosystem Integration&lt;/strong&gt; - This is broken down into two sub-categories: 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Firmware Ecosystem&lt;/strong&gt; - Patina adopters working together to ensure Patina works in their platforms and use cases. This includes things like platform bring-up, integration with existing firmware components, and validation against various hardware configurations.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Rust Ecosystem&lt;/strong&gt; - Engaging with the broader Rust community to ensure Patina aligns with Rust's best practices and leverages the latest Rust features. This includes things like contributing to Rust libraries, participating in Rust forums, and collaborating with other Rust projects.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Stabilization&lt;/strong&gt; - In Progress&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Expansion&lt;/strong&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Component Growth&lt;/strong&gt; - In Progress&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;MM Core Support&lt;/strong&gt; - Planned&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ecosystem Integration&lt;/strong&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Firmware Ecosystem&lt;/strong&gt; - In Progress&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Rust Ecosystem&lt;/strong&gt; - In Progress&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Patina welcomes and encourages community contributions to help accelerate progress in these focus areas. We also value your ideas and feedback on additional priorities that matter to the community.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review Rust Documentation in the &lt;a href="https://github.com/OpenDevicePartnership/patina/raw/HEAD/docs/src/introduction.md"&gt;/docs&lt;/a&gt; directory.&lt;/li&gt; 
 &lt;li&gt;Run unit tests and ensure all pass.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>atuinsh/atuin</title>
      <link>https://github.com/atuinsh/atuin</link>
      <description>&lt;p&gt;✨ Magical shell history&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/atuinsh/atuin/assets/53315310/13216a1d-1ac0-4c99-b0eb-d88290fe0efd" /&gt; 
  &lt;img alt="Text changing depending on mode. Light: 'So light!' Dark: 'So dark!'" src="https://github.com/atuinsh/atuin/assets/53315310/08bc86d4-a781-4aaa-8d7e-478ae6bcd129" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;em&gt;magical shell history&lt;/em&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/atuinsh/atuin/actions?query=workflow%3ARust"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/atuinsh/atuin/rust.yml?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/atuin"&gt;&lt;img src="https://img.shields.io/crates/v/atuin.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/atuin"&gt;&lt;img src="https://img.shields.io/crates/d/atuin.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/atuinsh/atuin/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/atuin.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/Fq8bJSKPHh"&gt;&lt;img src="https://img.shields.io/discord/954121165239115808" /&gt;&lt;/a&gt; &lt;a rel="me" href="https://hachyderm.io/@atuin"&gt;&lt;img src="https://img.shields.io/mastodon/follow/109944632283122560?domain=https%3A%2F%2Fhachyderm.io&amp;amp;style=social" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/atuinsh"&gt;&lt;img src="https://img.shields.io/twitter/follow/atuinsh?style=social" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/atuinsh/atuin/main/README.md"&gt;English&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/atuinsh/atuin/main/docs/zh-CN/README.md"&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Atuin replaces your existing shell history with a SQLite database, and records additional context for your commands. Additionally, it provides optional and &lt;em&gt;fully encrypted&lt;/em&gt; synchronisation of your history between machines, via an Atuin server.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/atuinsh/atuin/main/demo.gif" alt="animated" width="80%" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;em&gt;exit code, duration, time and command shown&lt;/em&gt; &lt;/p&gt; 
&lt;p&gt;As well as the search UI, it can do things like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# search for all successful `make` commands, recorded after 3pm yesterday
atuin search --exit 0 --after "yesterday 3pm" make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may use either the server I host, or host your own! Or just don't use sync at all. As all history sync is encrypted, I couldn't access your data even if I wanted to. And I &lt;strong&gt;really&lt;/strong&gt; don't want to.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;rebind &lt;code&gt;ctrl-r&lt;/code&gt; and &lt;code&gt;up&lt;/code&gt; (configurable) to a full screen history search UI&lt;/li&gt; 
 &lt;li&gt;store shell history in a sqlite database&lt;/li&gt; 
 &lt;li&gt;back up and sync &lt;strong&gt;encrypted&lt;/strong&gt; shell history&lt;/li&gt; 
 &lt;li&gt;the same history across terminals, across sessions, and across machines&lt;/li&gt; 
 &lt;li&gt;log exit code, cwd, hostname, session, command duration, etc&lt;/li&gt; 
 &lt;li&gt;calculate statistics such as "most used command"&lt;/li&gt; 
 &lt;li&gt;old history file is not replaced&lt;/li&gt; 
 &lt;li&gt;quick-jump to previous items with &lt;kbd&gt;Alt-&amp;lt;num&amp;gt;&lt;/kbd&gt;&lt;/li&gt; 
 &lt;li&gt;switch filter modes via ctrl-r; search history just from the current session, directory, or globally&lt;/li&gt; 
 &lt;li&gt;enter to execute a command, tab to edit&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/atuinsh/atuin/main/#quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/installation/"&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/sync/"&gt;Setting up sync&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/import/"&gt;Import history&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/basic-usage/"&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Shells&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;zsh&lt;/li&gt; 
 &lt;li&gt;bash&lt;/li&gt; 
 &lt;li&gt;fish&lt;/li&gt; 
 &lt;li&gt;nushell&lt;/li&gt; 
 &lt;li&gt;xonsh&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;h3&gt;Forum&lt;/h3&gt; 
&lt;p&gt;Atuin has a community forum, please ask here for help and support: &lt;a href="https://forum.atuin.sh/"&gt;https://forum.atuin.sh/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Discord&lt;/h3&gt; 
&lt;p&gt;Atuin also has a community Discord, available &lt;a href="https://discord.gg/jR3tfchVvW"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Quickstart&lt;/h1&gt; 
&lt;p&gt;This will sign you up for the Atuin Cloud sync server. Everything is end-to-end encrypted, so your secrets are safe!&lt;/p&gt; 
&lt;p&gt;Read more in the &lt;a href="https://docs.atuin.sh"&gt;docs&lt;/a&gt; for an offline setup, self hosted server, and more.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh

atuin register -u &amp;lt;USERNAME&amp;gt; -e &amp;lt;EMAIL&amp;gt;
atuin import auto
atuin sync
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then restart your shell!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;For Bash users&lt;/strong&gt;: The above sets up &lt;code&gt;bash-preexec&lt;/code&gt; for necessary hooks, but &lt;code&gt;bash-preexec&lt;/code&gt; has limitations. For details, please see the &lt;a href="https://docs.atuin.sh/guide/installation/#installing-the-shell-plugin"&gt;Bash&lt;/a&gt; section of the shell plugin documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Security&lt;/h1&gt; 
&lt;p&gt;If you find any security issues, we'd appreciate it if you could alert &lt;a href="mailto:ellie@atuin.sh"&gt;ellie@atuin.sh&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;a href="https://github.com/atuinsh/atuin/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=atuinsh/atuin&amp;amp;max=300" /&gt; &lt;/a&gt; 
&lt;p&gt;Made with &lt;a href="https://contrib.rocks"&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>web-infra-dev/rspack</title>
      <link>https://github.com/web-infra-dev/rspack</link>
      <description>&lt;p&gt;The fast Rust-based JavaScript bundler with webpack-compatible API 🦀️&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;img alt="Rspack Banner" src="https://assets.rspack.rs/rspack/rspack-banner.png" /&gt; 
&lt;/picture&gt; 
&lt;h1&gt;Rspack&lt;/h1&gt; 
&lt;p&gt; &lt;a href="https://discord.gg/79ZZ66GH9E"&gt;&lt;img src="https://img.shields.io/badge/chat-discord-blue?style=flat-square&amp;amp;logo=discord&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="discord channel" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@rspack/core?activeTab=readme"&gt;&lt;img src="https://img.shields.io/npm/v/@rspack/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/rspack_core"&gt;&lt;img src="https://img.shields.io/crates/v/rspack_core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="crates version" /&gt;&lt;/a&gt; &lt;a href="https://npmcharts.com/compare/@rspack/core?minimal=true"&gt;&lt;img src="https://img.shields.io/npm/dm/@rspack/core.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="downloads" /&gt;&lt;/a&gt; &lt;a href="https://nodejs.org/en/about/previous-releases"&gt;&lt;img src="https://img.shields.io/node/v/@rspack/core.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="node version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/web-infra-dev/rspack/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/web-infra-dev/rspack"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fcodspeed.io%2Fbadge.json&amp;amp;style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="codspeed" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;English | &lt;a href="https://raw.githubusercontent.com/web-infra-dev/rspack/main/README.zh-CN.md"&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Rspack is a high performance JavaScript bundler written in Rust. It offers strong compatibility with the webpack ecosystem, allowing for seamless replacement of webpack, and provides lightning fast build speeds.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Fast Startup&lt;/strong&gt;: Based on Rust, the build speed is extremely fast, bringing you the ultimate development experience.&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Lightning HMR&lt;/strong&gt;: With a built-in incremental compilation mechanism, HMR is extremely fast and fully capable of developing large-scale projects.&lt;/li&gt; 
 &lt;li&gt;📦 &lt;strong&gt;Webpack Compatible&lt;/strong&gt;: Compatible with plugins and loaders in the webpack ecosystem, seamlessly integrating excellent libraries built by the community.&lt;/li&gt; 
 &lt;li&gt;🎨 &lt;strong&gt;Module Federation&lt;/strong&gt;: Provide first-class support for Module Federation to facilitate the development of large-scale web applications.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Production Optimization&lt;/strong&gt;: Various optimization strategies are built in by default, such as tree shaking, minification, etc.&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Framework Agnostic&lt;/strong&gt;: Not bound to any frontend framework, ensuring enough flexibility.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read &lt;a href="https://rspack.rs/guide/start/introduction"&gt;Introduction&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;🦀 Rstack&lt;/h2&gt; 
&lt;p&gt;Rstack is a unified JavaScript toolchain centered on Rspack, with high performance and consistent architecture.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspack"&gt;Rspack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Bundler&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rspack/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rspack/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rsbuild"&gt;Rsbuild&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Build tool&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rsbuild/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rsbuild/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rslib"&gt;Rslib&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Library development tool&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rslib/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rslib/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspress"&gt;Rspress&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Static site generator&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rspress/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rspress/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rsdoctor"&gt;Rsdoctor&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Build analyzer&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rsdoctor/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rsdoctor/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rstest"&gt;Rstest&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Testing framework&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rstest/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rstest/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rslint"&gt;Rslint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Linter&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rslint/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rslint/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt; &lt;a target="_blank" href="https://stackblitz.com/fork/github/rspack-contrib/rspack-stackblitz-example"&gt; &lt;img alt="Open in StackBlitz" src="https://developer.stackblitz.com/img/open_in_stackblitz.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://rspack.rs/guide/start/quick-start"&gt;Quick start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Please read the &lt;a href="https://raw.githubusercontent.com/web-infra-dev/rspack/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; and let's build Rspack together.&lt;/p&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;This repo has adopted the ByteDance Open Source Code of Conduct. Please check &lt;a href="https://raw.githubusercontent.com/web-infra-dev/rspack/main/CODE_OF_CONDUCT.md"&gt;Code of conduct&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Come chat with us on &lt;a href="https://discord.gg/79ZZ66GH9E"&gt;Discord&lt;/a&gt;! Rspack team and Rspack users are active there, and we're always looking for contributions.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/awesome-rspack"&gt;awesome-rspack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A curated list of awesome things related to Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://rspack.rs/"&gt;Rspack 1.x documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation for Rspack 1.x (latest)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://v0.rspack.rs/"&gt;Rspack 0.x documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation for Rspack 0.x version&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspack-dev-server"&gt;rspack-dev-server&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Dev server for Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/rspack-contrib/rstack-examples"&gt;rstack-examples&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Examples showcasing Rstack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspack-sources"&gt;rspack-sources&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Rust port of &lt;a href="https://www.npmjs.com/package/webpack-sources"&gt;webpack-sources&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/rspack-contrib/rstack-design-resources"&gt;rstack-design-resources&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Design resources for Rstack&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/web-infra-dev/rspack/graphs/contributors"&gt;&lt;img src="https://opencollective.com/rspack/contributors.svg?width=890&amp;amp;button=false" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://ecosystem-benchmark.rspack.rs/"&gt;Benchmark&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://webpack.js.org/"&gt;The webpack team and community&lt;/a&gt; for creating a great bundler and ecosystem from which we draw a lot of inspiration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sokra"&gt;@sokra&lt;/a&gt; for the great work on the &lt;a href="https://github.com/webpack/webpack"&gt;webpack&lt;/a&gt; project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ScriptedAlchemy"&gt;@ScriptedAlchemy&lt;/a&gt; for creating Module Federation and helping Rspack connect with the community.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/swc-project/swc"&gt;SWC&lt;/a&gt; project created by &lt;a href="https://github.com/kdy1"&gt;@kdy1&lt;/a&gt;, which powers Rspack's code parsing, transformation and minification.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/evanw/esbuild"&gt;esbuild&lt;/a&gt; project created by &lt;a href="https://github.com/evanw"&gt;@evanw&lt;/a&gt;, which inspired the concurrent architecture of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/napi-rs/napi-rs"&gt;NAPI-RS&lt;/a&gt; project created by &lt;a href="https://github.com/Brooooooklyn"&gt;@Brooooooklyn&lt;/a&gt;, which powers Rspack's node-binding implementation.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/parcel-bundler/parcel"&gt;Parcel&lt;/a&gt; project created by &lt;a href="https://github.com/devongovett"&gt;@devongovett&lt;/a&gt; which is the pioneer of rust bundler and inspired Rspack's incremental rebuild design.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/vitejs/vite"&gt;Vite&lt;/a&gt; project created by &lt;a href="https://github.com/yyx990803"&gt;Evan You&lt;/a&gt; which inspired Rspack's compatibility design of webpack's ecosystem.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;rolldown-legacy&lt;/code&gt; project created by old Rolldown team, It's the predecessor of the &lt;a href="https://github.com/rolldown"&gt;rolldown&lt;/a&gt; project, which explores the possibility of making a performant bundler in Rust with Rollup-compatible API. It inspires the design principles of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/jantimon/html-webpack-plugin"&gt;html-webpack-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/jantimon"&gt;@jantimon&lt;/a&gt;, &lt;code&gt;@rspack/html-plugin&lt;/code&gt; is a fork of &lt;a href="https://github.com/jantimon/html-webpack-plugin"&gt;html-webpack-plugin&lt;/a&gt; to avoid some webpack API usage not supported in Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/vercel/turbo"&gt;Turbopack&lt;/a&gt; project which inspired the AST path logic of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/pmmmwh/react-refresh-webpack-plugin"&gt;react-refresh-webpack-plugin&lt;/a&gt; created by &lt;a href="https://github.com/pmmmwh"&gt;@pmmmwh&lt;/a&gt;, which inspires implement &lt;a href="https://github.com/rspack-contrib/rspack-plugin-react-refresh"&gt;react refresh rspack plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/preactjs/prefresh"&gt;prefresh&lt;/a&gt; created by &lt;a href="https://github.com/JoviDeCroock"&gt;@Jovi De Croock&lt;/a&gt;, which inspires implement &lt;a href="https://github.com/rspack-contrib/rspack-plugin-preact-refresh"&gt;preact refresh rspack plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/webpack-contrib/mini-css-extract-plugin"&gt;mini-css-extract-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/sokra"&gt;@sokra&lt;/a&gt; which inspired implement css extract plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/webpack-contrib/copy-webpack-plugin"&gt;copy-webpack-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/kevlened"&gt;@kevlened&lt;/a&gt; which inspired implement copy rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/waysact/webpack-subresource-integrity"&gt;webpack-subresource-integrity&lt;/a&gt; project created by &lt;a href="https://github.com/jscheid"&gt;@jscheid&lt;/a&gt;, which inspires implement subresource integrity rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/aackerman/circular-dependency-plugin"&gt;circular-dependency-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/aackerman"&gt;@aackerman&lt;/a&gt;, which inspres implement circular dependency rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/thoren-d/tracing-chrome"&gt;tracing-chrome&lt;/a&gt; project created by &lt;a href="https://github.com/thoren-d"&gt;thoren-d&lt;/a&gt;, which inspires the implementation of Rspack tracing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rspack is &lt;a href="https://github.com/web-infra-dev/rspack/raw/main/LICENSE"&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>