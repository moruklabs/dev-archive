<rss version="2.0">
  <channel>
    <title>GitHub Go Daily Trending</title>
    <description>Daily Trending of Go in GitHub</description>
    <pubDate>Thu, 16 Oct 2025 01:33:29 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>kubernetes-sigs/kustomize</title>
      <link>https://github.com/kubernetes-sigs/kustomize</link>
      <description>&lt;p&gt;Customization of kubernetes YAML configurations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kustomize&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;kustomize&lt;/code&gt; lets you customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;kustomize&lt;/code&gt; targets kubernetes; it understands and can patch &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#kubernetes-style-object"&gt;kubernetes style&lt;/a&gt; API objects. It's like &lt;a href="https://www.gnu.org/software/make"&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;, in that what it does is declared in a file, and it's like &lt;a href="https://www.gnu.org/software/sed"&gt;&lt;code&gt;sed&lt;/code&gt;&lt;/a&gt;, in that it emits edited text.&lt;/p&gt; 
&lt;p&gt;This tool is sponsored by &lt;a href="https://github.com/kubernetes/community/raw/master/sig-cli/README.md"&gt;sig-cli&lt;/a&gt; (&lt;a href="https://github.com/kubernetes/enhancements/raw/master/keps/sig-cli/2377-Kustomize/README.md"&gt;KEP&lt;/a&gt;).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://kubectl.docs.kubernetes.io/installation/kustomize/"&gt;Installation instructions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/"&gt;General documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://prow.k8s.io/job-history/kubernetes-jenkins/pr-logs/directory/kustomize-presubmit-master"&gt;&lt;img src="https://prow.k8s.io/badge.svg?jobs=kustomize-presubmit-master" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/kubernetes-sigs/kustomize"&gt;&lt;img src="https://goreportcard.com/badge/github.com/kubernetes-sigs/kustomize" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;kubectl integration&lt;/h2&gt; 
&lt;p&gt;To find the kustomize version embedded in recent versions of kubectl, run &lt;code&gt;kubectl version&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;&amp;gt; kubectl version --client
Client Version: v1.31.0
Kustomize Version: v5.4.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The kustomize build flow at &lt;a href="https://github.com/kubernetes-sigs/kustomize/releases/tag/v2.0.3"&gt;v2.0.3&lt;/a&gt; was added to &lt;a href="https://kubernetes.io/blog/2019/03/25/kubernetes-1-14-release-announcement"&gt;kubectl v1.14&lt;/a&gt;. The kustomize flow in kubectl remained frozen at v2.0.3 until kubectl v1.21, which &lt;a href="https://github.com/kubernetes/kubernetes/raw/4d75a6238a6e330337526e0513e67d02b1940b63/CHANGELOG/CHANGELOG-1.21.md#kustomize-updates-in-kubectl"&gt;updated it to v4.0.5&lt;/a&gt;. It will be updated on a regular basis going forward, and such updates will be reflected in the Kubernetes release notes.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Kubectl version&lt;/th&gt; 
   &lt;th&gt;Kustomize version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt; v1.14&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v1.14-v1.20&lt;/td&gt; 
   &lt;td&gt;v2.0.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v1.21&lt;/td&gt; 
   &lt;td&gt;v4.0.5&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v1.22&lt;/td&gt; 
   &lt;td&gt;v4.2.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v1.23&lt;/td&gt; 
   &lt;td&gt;v4.4.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v1.24&lt;/td&gt; 
   &lt;td&gt;v4.5.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v1.25&lt;/td&gt; 
   &lt;td&gt;v4.5.7&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v1.26&lt;/td&gt; 
   &lt;td&gt;v4.5.7&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v1.27&lt;/td&gt; 
   &lt;td&gt;v5.0.1&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For examples and guides for using the kubectl integration please see the &lt;a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/"&gt;kubernetes documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;1) Make a &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#kustomization"&gt;kustomization&lt;/a&gt; file&lt;/h3&gt; 
&lt;p&gt;In some directory containing your YAML &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#resource"&gt;resource&lt;/a&gt; files (deployments, services, configmaps, etc.), create a &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#kustomization"&gt;kustomization&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;This file should declare those resources, and any customization to apply to them, e.g. &lt;em&gt;add a common label&lt;/em&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
base: kustomization + resources

kustomization.yaml                                      deployment.yaml                                                 service.yaml
+---------------------------------------------+         +-------------------------------------------------------+       +-----------------------------------+
| apiVersion: kustomize.config.k8s.io/v1beta1 |         | apiVersion: apps/v1                                   |       | apiVersion: v1                    |
| kind: Kustomization                         |         | kind: Deployment                                      |       | kind: Service                     |
| labels:                                     |         | metadata:                                             |       | metadata:                         |
| - includeSelectors: true                    |         |   name: myapp                                         |       |   name: myapp                     |
|   pairs:                                    |         | spec:                                                 |       | spec:                             |
|     app: myapp                              |         |   selector:                                           |       |   selector:                       |
| resources:                                  |         |     matchLabels:                                      |       |     app: myapp                    |
|   - deployment.yaml                         |         |       app: myapp                                      |       |   ports:                          |
|   - service.yaml                            |         |   template:                                           |       |     - port: 6060                  |
| configMapGenerator:                         |         |     metadata:                                         |       |       targetPort: 6060            |
|   - name: myapp-map                         |         |       labels:                                         |       +-----------------------------------+
|     literals:                               |         |         app: myapp                                    |
|       - KEY=value                           |         |     spec:                                             |
+---------------------------------------------+         |       containers:                                     |
                                                        |         - name: myapp                                 |
                                                        |           image: myapp                                |
                                                        |           resources:                                  |
                                                        |             limits:                                   |
                                                        |               memory: "128Mi"                         |
                                                        |               cpu: "500m"                             |
                                                        |           ports:                                      |
                                                        |             - containerPort: 6060                     |
                                                        +-------------------------------------------------------+

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;File structure:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;~/someApp
├── deployment.yaml
├── kustomization.yaml
└── service.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The resources in this directory could be a fork of someone else's configuration. If so, you can easily rebase from the source material to capture improvements, because you don't modify the resources directly.&lt;/p&gt; 
&lt;p&gt;Generate customized YAML with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;kustomize build ~/someApp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The YAML can be directly &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#apply"&gt;applied&lt;/a&gt; to a cluster:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;kustomize build ~/someApp | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;2) Create &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#variant"&gt;variants&lt;/a&gt; using &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#overlay"&gt;overlays&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Manage traditional &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#variant"&gt;variants&lt;/a&gt; of a configuration - like &lt;em&gt;development&lt;/em&gt;, &lt;em&gt;staging&lt;/em&gt; and &lt;em&gt;production&lt;/em&gt; - using &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#overlay"&gt;overlays&lt;/a&gt; that modify a common &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#base"&gt;base&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
overlay: kustomization + patches

kustomization.yaml                                      replica_count.yaml                      cpu_count.yaml
+-----------------------------------------------+       +-------------------------------+       +------------------------------------------+
| apiVersion: kustomize.config.k8s.io/v1beta1   |       | apiVersion: apps/v1           |       | apiVersion: apps/v1                      |
| kind: Kustomization                           |       | kind: Deployment              |       | kind: Deployment                         |
| labels:                                       |       | metadata:                     |       | metadata:                                |
|  - includeSelectors: true                     |       |   name: myapp                 |       |   name: myapp                            |
|    pairs:                                     |       | spec:                         |       | spec:                                    |
|      variant: prod                            |       |   replicas: 80                |       |  template:                               |
| resources:                                    |       +-------------------------------+       |     spec:                                |
|   - ../../base                                |                                               |       containers:                        |
| patches:                                      |                                               |         - name: myapp                    |
|   - path: replica_count.yaml                  |                                               |           resources:                     |
|   - path: cpu_count.yaml                      |                                               |             limits:                      |
+-----------------------------------------------+                                               |               memory: "128Mi"            |
                                                                                                |               cpu: "7000m"               |
                                                                                                +------------------------------------------+
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;File structure:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;~/someApp
├── base
│   ├── deployment.yaml
│   ├── kustomization.yaml
│   └── service.yaml
└── overlays
    ├── development
    │   ├── cpu_count.yaml
    │   ├── kustomization.yaml
    │   └── replica_count.yaml
    └── production
        ├── cpu_count.yaml
        ├── kustomization.yaml
        └── replica_count.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Take the work from step (1) above, move it into a &lt;code&gt;someApp&lt;/code&gt; subdirectory called &lt;code&gt;base&lt;/code&gt;, then place overlays in a sibling directory.&lt;/p&gt; 
&lt;p&gt;An overlay is just another kustomization, referring to the base, and referring to patches to apply to that base.&lt;/p&gt; 
&lt;p&gt;This arrangement makes it easy to manage your configuration with &lt;code&gt;git&lt;/code&gt;. The base could have files from an upstream repository managed by someone else. The overlays could be in a repository you own. Arranging the repo clones as siblings on disk avoids the need for git submodules (though that works fine, if you are a submodule fan).&lt;/p&gt; 
&lt;p&gt;Generate YAML with&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;kustomize build ~/someApp/overlays/production
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The YAML can be directly &lt;a href="https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#apply"&gt;applied&lt;/a&gt; to a cluster:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;kustomize build ~/someApp/overlays/production | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://kubectl.docs.kubernetes.io/contributing/kustomize/bugs/"&gt;file a bug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubectl.docs.kubernetes.io/contributing/kustomize/features/"&gt;contribute a feature&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubernetes-sigs/kustomize/tree/master/proposals"&gt;propose a larger enhancement&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;Participation in the Kubernetes community is governed by the &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/code-of-conduct.md"&gt;Kubernetes Code of Conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hashicorp/terraform-provider-aws</title>
      <link>https://github.com/hashicorp/terraform-provider-aws</link>
      <description>&lt;p&gt;The AWS Provider enables Terraform to manage AWS resources.&lt;/p&gt;&lt;hr&gt;&lt;a href="https://terraform.io"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset=".github/terraform_logo_dark.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset=".github/terraform_logo_light.svg" /&gt; 
  &lt;img src="https://raw.githubusercontent.com/hashicorp/terraform-provider-aws/main/.github/terraform_logo_light.svg?sanitize=true" alt="Terraform logo" title="Terraform" align="right" height="50" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h1&gt;Terraform AWS Provider&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://discuss.hashicorp.com/c/terraform-providers/tf-aws/"&gt;&lt;img src="https://img.shields.io/badge/discuss-terraform--aws-623CE4.svg?style=flat" alt="Forums" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs"&gt;AWS Provider&lt;/a&gt; enables &lt;a href="https://terraform.io"&gt;Terraform&lt;/a&gt; to manage &lt;a href="https://aws.amazon.com"&gt;AWS&lt;/a&gt; resources.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://hashicorp.github.io/terraform-provider-aws/"&gt;Contributing guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hashicorp/terraform-provider-aws/main/ROADMAP.md"&gt;Quarterly development roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hashicorp.github.io/terraform-provider-aws/faq/"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.hashicorp.com/collections/terraform/aws-get-started"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discuss.hashicorp.com/c/terraform-providers/tf-aws/"&gt;discuss.hashicorp.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Please note:&lt;/strong&gt; We take Terraform's security and our users' trust very seriously. If you believe you have found a security issue in the Terraform AWS Provider, please responsibly disclose it by contacting us at &lt;a href="mailto:security@hashicorp.com"&gt;security@hashicorp.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spf13/cobra</title>
      <link>https://github.com/spf13/cobra</link>
      <description>&lt;p&gt;A Commander for modern Go CLI interactions&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://cobra.dev"&gt; &lt;img width="512" height="535" alt="cobra-logo" src="https://github.com/user-attachments/assets/c8bf9aad-b5ae-41d3-8899-d83baec10af8" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Cobra is a library for creating powerful modern CLI applications.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://cobra.dev"&gt;Visit Cobra.dev for extensive documentation&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Cobra is used in many Go projects such as &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://gohugo.io"&gt;Hugo&lt;/a&gt;, and &lt;a href="https://github.com/cli/cli"&gt;GitHub CLI&lt;/a&gt; to name a few. &lt;a href="https://raw.githubusercontent.com/spf13/cobra/main/site/content/projects_using_cobra.md"&gt;This list&lt;/a&gt; contains a more extensive list of projects using Cobra.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/spf13/cobra/actions?query=workflow%3ATest"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/spf13/cobra/test.yml?branch=main&amp;amp;longCache=true&amp;amp;label=Test&amp;amp;logo=github%20actions&amp;amp;logoColor=fff" alt="" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/spf13/cobra"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/spf13/cobra.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/spf13/cobra"&gt;&lt;img src="https://goreportcard.com/badge/github.com/spf13/cobra" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://gophers.slack.com/archives/CD3LP1199"&gt;&lt;img src="https://img.shields.io/badge/Slack-cobra-brightgreen" alt="Slack" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align="center" markdown="1"&gt; 
 &lt;sup&gt;Supported by:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.warp.dev/cobra"&gt; &lt;img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae" /&gt; &lt;/a&gt; 
 &lt;h3&gt;&lt;a href="https://www.warp.dev/cobra"&gt;Warp, the AI terminal for devs&lt;/a&gt;&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://www.warp.dev/cobra"&gt;Try Cobra in Warp today&lt;/a&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;Cobra is a library providing a simple interface to create powerful modern CLI interfaces similar to git &amp;amp; go tools.&lt;/p&gt; 
&lt;p&gt;Cobra provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Easy subcommand-based CLIs: &lt;code&gt;app server&lt;/code&gt;, &lt;code&gt;app fetch&lt;/code&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;Fully POSIX-compliant flags (including short &amp;amp; long versions)&lt;/li&gt; 
 &lt;li&gt;Nested subcommands&lt;/li&gt; 
 &lt;li&gt;Global, local and cascading flags&lt;/li&gt; 
 &lt;li&gt;Intelligent suggestions (&lt;code&gt;app srver&lt;/code&gt;... did you mean &lt;code&gt;app server&lt;/code&gt;?)&lt;/li&gt; 
 &lt;li&gt;Automatic help generation for commands and flags&lt;/li&gt; 
 &lt;li&gt;Grouping help for subcommands&lt;/li&gt; 
 &lt;li&gt;Automatic help flag recognition of &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;Automatically generated shell autocomplete for your application (bash, zsh, fish, powershell)&lt;/li&gt; 
 &lt;li&gt;Automatically generated man pages for your application&lt;/li&gt; 
 &lt;li&gt;Command aliases so you can change things without breaking them&lt;/li&gt; 
 &lt;li&gt;The flexibility to define your own help, usage, etc.&lt;/li&gt; 
 &lt;li&gt;Optional seamless integration with &lt;a href="https://github.com/spf13/viper"&gt;viper&lt;/a&gt; for 12-factor apps&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Concepts&lt;/h1&gt; 
&lt;p&gt;Cobra is built on a structure of commands, arguments &amp;amp; flags.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Commands&lt;/strong&gt; represent actions, &lt;strong&gt;Args&lt;/strong&gt; are things and &lt;strong&gt;Flags&lt;/strong&gt; are modifiers for those actions.&lt;/p&gt; 
&lt;p&gt;The best applications read like sentences when used, and as a result, users intuitively know how to interact with them.&lt;/p&gt; 
&lt;p&gt;The pattern to follow is &lt;code&gt;APPNAME VERB NOUN --ADJECTIVE&lt;/code&gt; or &lt;code&gt;APPNAME COMMAND ARG --FLAG&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;A few good real world examples may better illustrate this point.&lt;/p&gt; 
&lt;p&gt;In the following example, 'server' is a command, and 'port' is a flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;hugo server --port=1313
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this command we are telling Git to clone the url bare.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone URL --bare
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;p&gt;Command is the central point of the application. Each interaction that the application supports will be contained in a Command. A command can have children commands and optionally run an action.&lt;/p&gt; 
&lt;p&gt;In the example above, 'server' is the command.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/spf13/cobra#Command"&gt;More about cobra.Command&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Flags&lt;/h2&gt; 
&lt;p&gt;A flag is a way to modify the behavior of a command. Cobra supports fully POSIX-compliant flags as well as the Go &lt;a href="https://golang.org/pkg/flag/"&gt;flag package&lt;/a&gt;. A Cobra command can define flags that persist through to children commands and flags that are only available to that command.&lt;/p&gt; 
&lt;p&gt;In the example above, 'port' is the flag.&lt;/p&gt; 
&lt;p&gt;Flag functionality is provided by the &lt;a href="https://github.com/spf13/pflag"&gt;pflag library&lt;/a&gt;, a fork of the flag standard library which maintains the same interface while adding POSIX compliance.&lt;/p&gt; 
&lt;h1&gt;Installing&lt;/h1&gt; 
&lt;p&gt;Using Cobra is easy. First, use &lt;code&gt;go get&lt;/code&gt; to install the latest version of the library.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go get -u github.com/spf13/cobra@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, include Cobra in your application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/spf13/cobra"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;cobra-cli&lt;/code&gt; is a command line program to generate cobra applications and command files. It will bootstrap your application scaffolding to rapidly develop a Cobra-based application. It is the easiest way to incorporate Cobra into your application.&lt;/p&gt; 
&lt;p&gt;It can be installed by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go install github.com/spf13/cobra-cli@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For complete details on using the Cobra-CLI generator, please read &lt;a href="https://github.com/spf13/cobra-cli/raw/main/README.md"&gt;The Cobra Generator README&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For complete details on using the Cobra library, please read &lt;a href="https://raw.githubusercontent.com/spf13/cobra/main/site/content/user_guide.md"&gt;The Cobra User Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Cobra is released under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/spf13/cobra/main/LICENSE.txt"&gt;LICENSE.txt&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sjzar/chatlog</title>
      <link>https://github.com/sjzar/chatlog</link>
      <description>&lt;p&gt;chat log tool, easily use your own chat data. 聊天记录工具，轻松使用自己的聊天数据&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/e085d3a2-e009-4463-b2fd-8bd7df2b50c3" alt="chatlog" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;聊天记录工具，帮助大家轻松使用自己的聊天数据&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://imgmcp.com"&gt;&lt;img src="https://cdn.imgmcp.com/imgmcp-logo-small.png" alt="ImgMCP" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/sjzar/chatlog"&gt;&lt;img src="https://goreportcard.com/badge/github.com/sjzar/chatlog" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/sjzar/chatlog"&gt;&lt;img src="https://godoc.org/github.com/sjzar/chatlog?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sjzar/chatlog/releases"&gt;&lt;img src="https://img.shields.io/github/release/sjzar/chatlog.svg?sanitize=true" alt="GitHub release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sjzar/chatlog/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/sjzar/chatlog.svg?sanitize=true" alt="GitHub license" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Feature&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;从本地数据库文件中获取聊天数据&lt;/li&gt; 
 &lt;li&gt;支持 Windows / macOS 系统，兼容微信 3.x / 4.x 版本&lt;/li&gt; 
 &lt;li&gt;支持获取数据与图片密钥 (Windows &amp;lt; 4.0.3.36 / macOS &amp;lt; 4.0.3.80)&lt;/li&gt; 
 &lt;li&gt;支持图片、语音等多媒体数据解密，支持 wxgf 格式解析&lt;/li&gt; 
 &lt;li&gt;支持自动解密数据库，并提供新消息 Webhook 回调&lt;/li&gt; 
 &lt;li&gt;提供 Terminal UI 界面，同时支持命令行工具和 Docker 镜像部署&lt;/li&gt; 
 &lt;li&gt;提供 HTTP API 服务，可轻松查询聊天记录、联系人、群聊、最近会话等信息&lt;/li&gt; 
 &lt;li&gt;支持 MCP Streamable HTTP 协议，可与 AI 助手无缝集成&lt;/li&gt; 
 &lt;li&gt;支持多账号管理，可在不同账号间切换&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;基本步骤&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;安装 Chatlog&lt;/strong&gt;：&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#%E4%B8%8B%E8%BD%BD%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC"&gt;下载预编译版本&lt;/a&gt; 或 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#%E4%BB%8E%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85"&gt;使用 Go 安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;运行程序&lt;/strong&gt;：执行 &lt;code&gt;chatlog&lt;/code&gt; 启动 Terminal UI 界面&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;解密数据&lt;/strong&gt;：选择 &lt;code&gt;解密数据&lt;/code&gt; 菜单项&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;开启 HTTP 服务&lt;/strong&gt;：选择 &lt;code&gt;开启 HTTP 服务&lt;/code&gt; 菜单项&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;访问数据&lt;/strong&gt;：通过 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#http-api"&gt;HTTP API&lt;/a&gt; 或 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#mcp-%E9%9B%86%E6%88%90"&gt;MCP 集成&lt;/a&gt; 访问聊天记录&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;: 如果电脑端微信聊天记录不全，可以&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#%E4%BB%8E%E6%89%8B%E6%9C%BA%E8%BF%81%E7%A7%BB%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95"&gt;从手机端迁移数据&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;常见问题快速解决&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS 用户&lt;/strong&gt;：获取密钥前需&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#macos-%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E"&gt;临时关闭 SIP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows 用户&lt;/strong&gt;：遇到界面显示问题请&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#windows-%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E"&gt;使用 Windows Terminal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;集成 AI 助手&lt;/strong&gt;：查看 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#mcp-%E9%9B%86%E6%88%90"&gt;MCP 集成指南&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;无法获取密钥&lt;/strong&gt;：查看 &lt;a href="https://github.com/sjzar/chatlog/issues/197"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;安装指南&lt;/h2&gt; 
&lt;h3&gt;从源码安装&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go install github.com/sjzar/chatlog@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;: 部分功能有 cgo 依赖，编译前需确认本地有 C 编译环境。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;下载预编译版本&lt;/h3&gt; 
&lt;p&gt;访问 &lt;a href="https://github.com/sjzar/chatlog/releases"&gt;Releases&lt;/a&gt; 页面下载适合您系统的预编译版本。&lt;/p&gt; 
&lt;h2&gt;使用指南&lt;/h2&gt; 
&lt;h3&gt;Terminal UI 模式&lt;/h3&gt; 
&lt;p&gt;最简单的使用方式是通过 Terminal UI 界面操作：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;chatlog
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;操作方法：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用 &lt;code&gt;↑&lt;/code&gt; &lt;code&gt;↓&lt;/code&gt; 键选择菜单项&lt;/li&gt; 
 &lt;li&gt;按 &lt;code&gt;Enter&lt;/code&gt; 确认选择&lt;/li&gt; 
 &lt;li&gt;按 &lt;code&gt;Esc&lt;/code&gt; 返回上级菜单&lt;/li&gt; 
 &lt;li&gt;按 &lt;code&gt;Ctrl+C&lt;/code&gt; 退出程序&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;命令行模式&lt;/h3&gt; 
&lt;p&gt;对于熟悉命令行的用户，可以直接使用以下命令：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 获取微信数据密钥
chatlog key

# 解密数据库文件
chatlog decrypt

# 启动 HTTP 服务
chatlog server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker 部署&lt;/h3&gt; 
&lt;p&gt;由于 Docker 部署时，程序运行环境与宿主机隔离，所以不支持获取密钥等操作，需要提前获取密钥数据。&lt;/p&gt; 
&lt;p&gt;一般用于 NAS 等设备部署，详细指南可参考 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/docs/docker.md"&gt;Docker 部署指南&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0. 获取密钥信息&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# 从本机运行 chatlog 获取密钥信息
$ chatlog key
Data Key: [c0163e***ac3dc6]
Image Key: [38636***653361]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;1. 拉取镜像&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;chatlog 提供了两个镜像源：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker pull sjzar/chatlog:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;GitHub Container Registry (ghcr)&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker pull ghcr.io/sjzar/chatlog:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;镜像地址&lt;/strong&gt;:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Docker Hub: &lt;a href="https://hub.docker.com/r/sjzar/chatlog"&gt;https://hub.docker.com/r/sjzar/chatlog&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;GitHub Container Registry: &lt;a href="https://ghcr.io/sjzar/chatlog"&gt;https://ghcr.io/sjzar/chatlog&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;2. 运行容器&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ docker run -d \
  --name chatlog \
  -p 5030:5030 \
  -v /path/to/your/wechat/data:/app/data \
  sjzar/chatlog:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;从手机迁移聊天记录&lt;/h3&gt; 
&lt;p&gt;如果电脑端微信聊天记录不全，可以从手机端迁移数据：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;打开手机微信，进入 &lt;code&gt;我 - 设置 - 通用 - 聊天记录迁移与备份&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;选择 &lt;code&gt;迁移 - 迁移到电脑&lt;/code&gt;，按照提示操作&lt;/li&gt; 
 &lt;li&gt;完成迁移后，重新运行 &lt;code&gt;chatlog&lt;/code&gt; 获取密钥并解密数据&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;此操作不会影响手机上的聊天记录，只是将数据复制到电脑端&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;平台特定说明&lt;/h2&gt; 
&lt;h3&gt;Windows 版本说明&lt;/h3&gt; 
&lt;p&gt;如遇到界面显示异常（如花屏、乱码等），请使用 &lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt; 运行程序&lt;/p&gt; 
&lt;h3&gt;macOS 版本说明&lt;/h3&gt; 
&lt;p&gt;macOS 用户在获取密钥前需要临时关闭 SIP（系统完整性保护）：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;关闭 SIP&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;# 进入恢复模式
# Intel Mac: 重启时按住 Command + R
# Apple Silicon: 重启时长按电源键

# 在恢复模式中打开终端并执行
csrutil disable

# 重启系统
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;安装必要工具&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;# 安装 Xcode Command Line Tools
xcode-select --install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;获取密钥后&lt;/strong&gt;：可以重新启用 SIP（&lt;code&gt;csrutil enable&lt;/code&gt;），不影响后续使用&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Apple Silicon 用户注意：确保微信、chatlog 和终端都不在 Rosetta 模式下运行&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;HTTP API&lt;/h2&gt; 
&lt;p&gt;启动 HTTP 服务后（默认地址 &lt;code&gt;http://127.0.0.1:5030&lt;/code&gt;），可通过以下 API 访问数据：&lt;/p&gt; 
&lt;h3&gt;聊天记录查询&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;GET /api/v1/chatlog?time=2023-01-01&amp;amp;talker=wxid_xxx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;参数说明：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;time&lt;/code&gt;: 时间范围，格式为 &lt;code&gt;YYYY-MM-DD&lt;/code&gt; 或 &lt;code&gt;YYYY-MM-DD~YYYY-MM-DD&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;talker&lt;/code&gt;: 聊天对象标识（支持 wxid、群聊 ID、备注名、昵称等）&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;limit&lt;/code&gt;: 返回记录数量&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;offset&lt;/code&gt;: 分页偏移量&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;format&lt;/code&gt;: 输出格式，支持 &lt;code&gt;json&lt;/code&gt;、&lt;code&gt;csv&lt;/code&gt; 或纯文本&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;其他 API 接口&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;联系人列表&lt;/strong&gt;：&lt;code&gt;GET /api/v1/contact&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;群聊列表&lt;/strong&gt;：&lt;code&gt;GET /api/v1/chatroom&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;会话列表&lt;/strong&gt;：&lt;code&gt;GET /api/v1/session&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;多媒体内容&lt;/h3&gt; 
&lt;p&gt;聊天记录中的多媒体内容会通过 HTTP 服务进行提供，可通过以下路径访问：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;图片内容&lt;/strong&gt;：&lt;code&gt;GET /image/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;视频内容&lt;/strong&gt;：&lt;code&gt;GET /video/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;文件内容&lt;/strong&gt;：&lt;code&gt;GET /file/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;语音内容&lt;/strong&gt;：&lt;code&gt;GET /voice/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;多媒体内容&lt;/strong&gt;：&lt;code&gt;GET /data/&amp;lt;data dir relative path&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;当请求图片、视频、文件内容时，将返回 302 跳转到多媒体内容 URL。&lt;br /&gt; 当请求语音内容时，将直接返回语音内容，并对原始 SILK 语音做了实时转码 MP3 处理。&lt;br /&gt; 多媒体内容 URL 地址为基于&lt;code&gt;数据目录&lt;/code&gt;的相对地址，请求多媒体内容将直接返回对应文件，并针对加密图片做了实时解密处理。&lt;/p&gt; 
&lt;h2&gt;Webhook&lt;/h2&gt; 
&lt;p&gt;需开启自动解密功能，当收到特定新消息时，可以通过 HTTP POST 请求将消息推送到指定的 URL。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;延迟测试: 本地服务消息回调延迟约 13 秒; 远程同步消息回调延迟约 45 秒。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;0. 回调配置&lt;/h4&gt; 
&lt;p&gt;使用 TUI 模式的话，在 &lt;code&gt;$HOME/.chatlog/chatlog.json&lt;/code&gt; 配置文件中，新增 &lt;code&gt;webhook&lt;/code&gt; 配置。&lt;br /&gt; （Windows 用户的配置文件在 &lt;code&gt;%USERPROFILE%/.chatlog/chatlog.json&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "history": [],
  "last_account": "wxuser_x",
  "webhook": {
    "host": "localhost:5030",                   # 消息中的图片、文件等 URL host
    "items": [
      {
        "url": "http://localhost:8080/webhook", # 必填，webhook 请求的URL，可配置为 n8n 等 webhook 入口 
        "talker": "wxid_123",                   # 必填，需要监控的私聊、群聊名称
        "sender": "",                           # 选填，消息发送者
        "keyword": ""                           # 选填，关键词
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;使用 server 模式的话，可以通过 &lt;code&gt;CHATLOG_WEBHOOK&lt;/code&gt; 环境变量进行设置。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# 方案 1
CHATLOG_WEBHOOK='{"host":"localhost:5030","items":[{"url":"http://localhost:8080/proxy","talker":"wxid_123","sender":"","keyword":""}]}'

# 方案 2（任选一种）
CHATLOG_WEBHOOK_HOST="localhost:5030"
CHATLOG_WEBHOOK_ITEMS='[{"url":"http://localhost:8080/proxy","talker":"wxid_123","sender":"","keyword":""}]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1. 测试效果&lt;/h4&gt; 
&lt;p&gt;启动 chatlog 并开启自动解密功能，测试回调效果&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;POST /webhook HTTP/1.1
Host: localhost:8080
Accept-Encoding: gzip
Content-Length: 386
Content-Type: application/json
User-Agent: Go-http-client/1.1

Body:
{
  "keyword": "",
  "lastTime": "2025-08-27 00:00:00",
  "length": 1,
  "messages": [
    {
      "seq": 1756225000000,
      "time": "2025-08-27T00:00:00+08:00",
      "talker": "wxid_123",
      "talkerName": "",
      "isChatRoom": false,
      "sender": "wxid_123",
      "senderName": "Name",
      "isSelf": false,
      "type": 1,
      "subType": 0,
      "content": "测试消息",
      "contents": {
        "host": "localhost:5030"
      }
    }
  ],
  "sender": "",
  "talker": "wxid_123"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;MCP 集成&lt;/h2&gt; 
&lt;p&gt;Chatlog 支持 MCP (Model Context Protocol) 协议，可与支持 MCP 的 AI 助手无缝集成。&lt;br /&gt; 启动 HTTP 服务后，通过 Streamable HTTP Endpoint 访问服务：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;GET /mcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;快速集成&lt;/h3&gt; 
&lt;p&gt;Chatlog 可以与多种支持 MCP 的 AI 助手集成，包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ChatWise&lt;/strong&gt;: 直接支持 Streamable HTTP，在工具设置中添加 &lt;code&gt;http://127.0.0.1:5030/mcp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cherry Studio&lt;/strong&gt;: 直接支持 Streamable HTTP，在 MCP 服务器设置中添加 &lt;code&gt;http://127.0.0.1:5030/mcp&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;对于不直接支持 Streamable HTTP 的客户端，可以使用 &lt;a href="https://github.com/sparfenyuk/mcp-proxy"&gt;mcp-proxy&lt;/a&gt; 工具转发请求：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Claude Desktop&lt;/strong&gt;: 通过 mcp-proxy 支持，需要配置 &lt;code&gt;claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Monica Code&lt;/strong&gt;: 通过 mcp-proxy 支持，需要配置 VSCode 插件设置&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;详细集成指南&lt;/h3&gt; 
&lt;p&gt;查看 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/docs/mcp.md"&gt;MCP 集成指南&lt;/a&gt; 获取各平台的详细配置步骤和注意事项。&lt;/p&gt; 
&lt;h2&gt;Prompt 示例&lt;/h2&gt; 
&lt;p&gt;为了帮助大家更好地利用 Chatlog 与 AI 助手，我们整理了一些 prompt 示例。希望这些 prompt 可以启发大家更有效地查询和分析聊天记录，获取更精准的信息。&lt;/p&gt; 
&lt;p&gt;查看 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/docs/prompt.md"&gt;Prompt 指南&lt;/a&gt; 获取详细示例。&lt;/p&gt; 
&lt;p&gt;同时欢迎大家分享使用经验和 prompt！如果您有好的 prompt 示例或使用技巧，请通过 &lt;a href="https://github.com/sjzar/chatlog/discussions"&gt;Discussions&lt;/a&gt; 进行分享，共同进步。&lt;/p&gt; 
&lt;h2&gt;免责声明&lt;/h2&gt; 
&lt;p&gt;⚠️ &lt;strong&gt;重要提示：使用本项目前，请务必阅读并理解完整的 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/DISCLAIMER.md"&gt;免责声明&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本项目仅供学习、研究和个人合法使用，禁止用于任何非法目的或未授权访问他人数据。下载、安装或使用本工具即表示您同意遵守免责声明中的所有条款，并自行承担使用过程中的全部风险和法律责任。&lt;/p&gt; 
&lt;h3&gt;摘要（请阅读完整免责声明）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;仅限处理您自己合法拥有的聊天数据或已获授权的数据&lt;/li&gt; 
 &lt;li&gt;严禁用于未经授权获取、查看或分析他人聊天记录&lt;/li&gt; 
 &lt;li&gt;开发者不对使用本工具可能导致的任何损失承担责任&lt;/li&gt; 
 &lt;li&gt;使用第三方 LLM 服务时，您应遵守这些服务的使用条款和隐私政策&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;本项目完全免费开源，任何以本项目名义收费的行为均与本项目无关。&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;本项目基于 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/LICENSE"&gt;Apache-2.0 许可证&lt;/a&gt; 开源。&lt;/p&gt; 
&lt;h2&gt;隐私政策&lt;/h2&gt; 
&lt;p&gt;本项目不收集任何用户数据。所有数据处理均在用户本地设备上进行。使用第三方服务时，请参阅相应服务的隐私政策。&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xlane"&gt;@0xlane&lt;/a&gt; 的 &lt;a href="https://github.com/0xlane/wechat-dump-rs"&gt;wechat-dump-rs&lt;/a&gt; 项目&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xaoyaoo"&gt;@xaoyaoo&lt;/a&gt; 的 &lt;a href="https://github.com/xaoyaoo/PyWxDump"&gt;PyWxDump&lt;/a&gt; 项目&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/git-jiadong"&gt;@git-jiadong&lt;/a&gt; 的 &lt;a href="https://github.com/git-jiadong/go-lame"&gt;go-lame&lt;/a&gt; 和 &lt;a href="https://github.com/git-jiadong/go-silk"&gt;go-silk&lt;/a&gt; 项目&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.anthropic.com/"&gt;Anthropic&lt;/a&gt; 的 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/(https://github.com/modelcontextprotocol)"&gt;MCP&lt;/a&gt; 协议&lt;/li&gt; 
 &lt;li&gt;各个 Go 开源库的贡献者们&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rancher/rancher</title>
      <link>https://github.com/rancher/rancher</link>
      <description>&lt;p&gt;Complete container management platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rancher&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://store.docker.com/community/images/rancher/rancher"&gt;&lt;img src="https://img.shields.io/docker/pulls/rancher/rancher.svg?sanitize=true" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/rancher/rancher"&gt;&lt;img src="https://goreportcard.com/badge/github.com/rancher/rancher" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Rancher is an open source container management platform built for organizations that deploy containers in production. Rancher makes it easy to run Kubernetes everywhere, meet IT requirements, and empower DevOps teams.&lt;/p&gt; 
&lt;h2&gt;Stable Release&lt;/h2&gt; 
&lt;!-- stable v2.12.2 DO NOT REMOVE THIS LINE --&gt; 
&lt;ul&gt; 
 &lt;li&gt;v2.12 
  &lt;ul&gt; 
   &lt;li&gt;Stable - v2.12.2 - &lt;code&gt;rancher/rancher:v2.12.2&lt;/code&gt; / &lt;code&gt;rancher/rancher:stable&lt;/code&gt; - Read the full release &lt;a href="https://github.com/rancher/rancher/releases/tag/v2.12.2"&gt;notes&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;v2.11 
  &lt;ul&gt; 
   &lt;li&gt;Stable - v2.11.3 - &lt;code&gt;rancher/rancher:v2.11.3&lt;/code&gt; - Read the full release &lt;a href="https://github.com/rancher/rancher/releases/tag/v2.11.3"&gt;notes&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;v2.10 
  &lt;ul&gt; 
   &lt;li&gt;Stable - v2.10.3 - &lt;code&gt;rancher/rancher:v2.10.3&lt;/code&gt; - Read the full release &lt;a href="https://github.com/rancher/rancher/releases/tag/v2.10.3"&gt;notes&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To get automated notifications of our latest release, you can watch the announcements category in our &lt;a href="http://forums.rancher.com/c/announcements"&gt;forums&lt;/a&gt;, or subscribe to the RSS feed &lt;code&gt;https://forums.rancher.com/c/announcements.rss&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open your browser to &lt;a href="https://localhost"&gt;https://localhost&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://ranchermanager.docs.rancher.com/v2.8/pages-for-subheaders/installation-and-upgrade"&gt;Installing/Upgrading Rancher&lt;/a&gt; for all installation options.&lt;/p&gt; 
&lt;h3&gt;Minimum Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Operating Systems 
  &lt;ul&gt; 
   &lt;li&gt;Please see &lt;a href="https://rancher.com/support-matrix/"&gt;Support Matrix&lt;/a&gt; for specific OS versions for each Rancher version. Note that the link will default to the support matrix for the latest version of Rancher. Use the left navigation menu to select a different Rancher version.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Hardware &amp;amp; Software 
  &lt;ul&gt; 
   &lt;li&gt;Please see &lt;a href="https://ranchermanager.docs.rancher.com/v2.8/pages-for-subheaders/installation-requirements"&gt;Installation Requirements&lt;/a&gt; for hardware and software requirements.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Using Rancher&lt;/h3&gt; 
&lt;p&gt;To learn more about using Rancher, please refer to our &lt;a href="https://ranchermanager.docs.rancher.com/v2.8"&gt;Rancher Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Source Code&lt;/h2&gt; 
&lt;p&gt;This repo is a meta-repo used for packaging and contains the majority of Rancher codebase. For other Rancher projects and modules, &lt;a href="https://github.com/rancher/rancher/raw/release/v2.8/go.mod"&gt;see go.mod&lt;/a&gt; for the full list.&lt;/p&gt; 
&lt;p&gt;Rancher also includes other open source libraries and projects, &lt;a href="https://github.com/rancher/rancher/raw/release/v2.8/go.mod"&gt;see go.mod&lt;/a&gt; for the full list.&lt;/p&gt; 
&lt;h2&gt;Build configuration&lt;/h2&gt; 
&lt;p&gt;Refer to the &lt;a href="https://raw.githubusercontent.com/rancher/rancher/main/docs/build.md"&gt;build docs&lt;/a&gt; on how to customize the building and packaging of Rancher.&lt;/p&gt; 
&lt;h2&gt;Support, Discussion, and Community&lt;/h2&gt; 
&lt;p&gt;If you need any help with Rancher, please join us at either our &lt;a href="http://forums.rancher.com/"&gt;Rancher forums&lt;/a&gt; or &lt;a href="https://slack.rancher.io/"&gt;Slack&lt;/a&gt; where most of our team hangs out at.&lt;/p&gt; 
&lt;p&gt;Please submit any Rancher bugs, issues, and feature requests to &lt;a href="https://github.com/rancher/rancher/issues"&gt;rancher/rancher&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For security issues, please first check our &lt;a href="https://github.com/rancher/rancher/security"&gt;security policy&lt;/a&gt; and email &lt;a href="mailto:security-rancher@suse.com"&gt;security-rancher@suse.com&lt;/a&gt; instead of posting a public issue in GitHub. You may (but are not required to) use the GPG key located on &lt;a href="https://keybase.io/rancher"&gt;Keybase&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 2014-2025 &lt;a href="http://rancher.com"&gt;SUSE&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iam-veeramalla/observability-zero-to-hero</title>
      <link>https://github.com/iam-veeramalla/observability-zero-to-hero</link>
      <description>&lt;p&gt;Repo for learning observability&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;📚 7-Day Observability Tutorial Series&lt;/h1&gt; 
&lt;p&gt;Welcome to the 7-Day Observability Tutorial Series! This repository contains the code and detailed explanations for setting up and understanding observability in Kubernetes using Prometheus, Grafana, Elasticsearch Fluentbit, Kibana, Jaeger, groundcover(eBPF), opentelemetry e.t.c.,.&lt;/p&gt; 
&lt;h2&gt;📅 Overview of Each Day&lt;/h2&gt; 
&lt;h3&gt;Day 1: Introduction to Observability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to Observability, Monitoring, Logging, and Tracing.&lt;/li&gt; 
   &lt;li&gt;The difference between Monitoring and Observability.&lt;/li&gt; 
   &lt;li&gt;Tools available for Monitoring and Observability.&lt;/li&gt; 
   &lt;li&gt;Comparison between monitoring and observing in Bare-Metal Servers vs. Kubernetes.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Understand the fundamental concepts of observability.&lt;/li&gt; 
   &lt;li&gt;Learn why monitoring and observability are crucial in modern IT environments.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 2: Prometheus - Setting Up Monitoring&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to Prometheus and its architecture.&lt;/li&gt; 
   &lt;li&gt;Setup and configuration of Prometheus in an EKS cluster.&lt;/li&gt; 
   &lt;li&gt;Installation of kube-prometheus-stack with Helm and integrating it with Grafana.&lt;/li&gt; 
   &lt;li&gt;Basic queries and setup for monitoring with Prometheus and Grafana.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Get hands-on experience with Prometheus and Grafana.&lt;/li&gt; 
   &lt;li&gt;Learn to install and configure Prometheus on Kubernetes.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 3: Metrics and PromQL in Prometheus&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to PromQL and basic querying techniques.&lt;/li&gt; 
   &lt;li&gt;Aggregation and functions in PromQL to analyze metrics data.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Master the Prometheus Query Language (PromQL) for querying and analyzing metrics.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 4: Instrumentation and Custom Metrics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Instrumentation for adding monitoring capabilities to applications.&lt;/li&gt; 
   &lt;li&gt;Understanding different types of metrics in Prometheus: Counter, Gauge, Histogram, and Summary.&lt;/li&gt; 
   &lt;li&gt;Writing custom metrics in a Node.js application using the &lt;code&gt;prom-client&lt;/code&gt; library.&lt;/li&gt; 
   &lt;li&gt;Dockerizing the application and deploying it on Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Setting up Alertmanager for alerting based on custom metrics.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Learn how to instrument applications to expose custom metrics.&lt;/li&gt; 
   &lt;li&gt;Configure alerts in Alertmanager to monitor application performance.&lt;/li&gt; 
   &lt;li&gt;Understand how to work with different types of metrics in Prometheus.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 5: Logging with EFK Stack&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to logging in distributed systems and Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Setting up the EFK stack (Elasticsearch, Fluentbit, Kibana) on Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Detailed setup and configuration for collecting and visualizing logs.&lt;/li&gt; 
   &lt;li&gt;Cleaning up the Kubernetes cluster and resources.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Understand the importance of logging and how to set up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 6: Distributed Tracing with Jaeger&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to Jaeger and its architecture for distributed tracing.&lt;/li&gt; 
   &lt;li&gt;Setting up Jaeger in a Kubernetes cluster using Helm.&lt;/li&gt; 
   &lt;li&gt;Instrumenting services using OpenTelemetry to enable tracing.&lt;/li&gt; 
   &lt;li&gt;Viewing and analyzing traces in the Jaeger UI.&lt;/li&gt; 
   &lt;li&gt;Cleaning up the environment after setting up Jaeger.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Gain insights into distributed tracing and how it helps in debugging and performance optimization.&lt;/li&gt; 
   &lt;li&gt;Learn how to set up and configure Jaeger for tracing in a microservices architecture.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 7: OpenTelemetry – Setting Up Unified Observability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to OpenTelemetry, a unified framework for observability.&lt;/li&gt; 
   &lt;li&gt;Understanding how OpenTelemetry integrates tracing, metrics, and logging.&lt;/li&gt; 
   &lt;li&gt;Comparison of OpenTelemetry with prior observability tools like Jaeger, Prometheus&lt;/li&gt; 
   &lt;li&gt;Supported programming languages and multi-language support in OpenTelemetry.&lt;/li&gt; 
   &lt;li&gt;Step-by-step setup of OpenTelemetry in Kubernetes.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Learn how OpenTelemetry simplifies the process of collecting and exporting telemetry data.&lt;/li&gt; 
   &lt;li&gt;Understand the benefits of a unified observability approach using OpenTelemetry.&lt;/li&gt; 
   &lt;li&gt;Gain hands-on experience with setting up OpenTelemetry Collector, Prometheus, Jaeger, and Elasticsearch to monitor a Golang microservice application.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>tulir/whatsmeow</title>
      <link>https://github.com/tulir/whatsmeow</link>
      <description>&lt;p&gt;Go library for the WhatsApp web multidevice API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;whatsmeow&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow"&gt;&lt;img src="https://pkg.go.dev/badge/go.mau.fi/whatsmeow.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;whatsmeow is a Go library for the WhatsApp web multidevice API.&lt;/p&gt; 
&lt;h2&gt;Discussion&lt;/h2&gt; 
&lt;p&gt;Matrix room: &lt;a href="https://matrix.to/#/#whatsmeow:maunium.net"&gt;#whatsmeow:maunium.net&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For questions about the WhatsApp protocol (like how to send a specific type of message), you can also use the &lt;a href="https://github.com/tulir/whatsmeow/discussions/categories/whatsapp-protocol-q-a"&gt;WhatsApp protocol Q&amp;amp;A&lt;/a&gt; section on GitHub discussions.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow"&gt;godoc&lt;/a&gt; includes docs for all methods and event types. There's also a &lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow#example-package"&gt;simple example&lt;/a&gt; at the top.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Most core features are already present:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sending messages to private chats and groups (both text and media)&lt;/li&gt; 
 &lt;li&gt;Receiving all messages&lt;/li&gt; 
 &lt;li&gt;Managing groups and receiving group change events&lt;/li&gt; 
 &lt;li&gt;Joining via invite messages, using and creating invite links&lt;/li&gt; 
 &lt;li&gt;Sending and receiving typing notifications&lt;/li&gt; 
 &lt;li&gt;Sending and receiving delivery and read receipts&lt;/li&gt; 
 &lt;li&gt;Reading and writing app state (contact list, chat pin/mute status, etc)&lt;/li&gt; 
 &lt;li&gt;Sending and handling retry receipts if message decryption fails&lt;/li&gt; 
 &lt;li&gt;Sending status messages (experimental, may not work for large contact lists)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Things that are not yet implemented:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sending broadcast list messages (this is not supported on WhatsApp web either)&lt;/li&gt; 
 &lt;li&gt;Calls&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>kubernetes-sigs/kind</title>
      <link>https://github.com/kubernetes-sigs/kind</link>
      <description>&lt;p&gt;Kubernetes IN Docker - local clusters for testing Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt;&lt;img alt="kind" src="https://raw.githubusercontent.com/kubernetes-sigs/kind/main/logo/logo.png" width="300px" /&gt;&lt;/p&gt; 
&lt;h1&gt;Please see &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/"&gt;Our Documentation&lt;/a&gt; for more in-depth installation etc.&lt;/h1&gt; 
&lt;p&gt;kind is a tool for running local Kubernetes clusters using Docker container "nodes". kind was primarily designed for testing Kubernetes itself, but may be used for local development or CI.&lt;/p&gt; 
&lt;p&gt;If you have &lt;a href="https://golang.org/"&gt;go&lt;/a&gt; 1.16+ and &lt;a href="https://www.docker.com/"&gt;docker&lt;/a&gt;, &lt;a href="https://podman.io/"&gt;podman&lt;/a&gt; or &lt;a href="https://github.com/containerd/nerdctl"&gt;nerdctl&lt;/a&gt; installed &lt;code&gt;go install sigs.k8s.io/kind@v0.30.0 &amp;amp;&amp;amp; kind create cluster&lt;/code&gt; is all you need!&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/kubernetes-sigs/kind/main/site/static/images/kind-create-cluster.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;kind consists of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kind/main/pkg"&gt;packages&lt;/a&gt; implementing &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kind/main/pkg/cluster"&gt;cluster creation&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kind/main/pkg/build"&gt;image build&lt;/a&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;A command line interface (&lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kind/main/main.go"&gt;&lt;code&gt;kind&lt;/code&gt;&lt;/a&gt;) built on these packages.&lt;/li&gt; 
 &lt;li&gt;Docker &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kind/main/images"&gt;image(s)&lt;/a&gt; written to run systemd, Kubernetes, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubernetes/test-infra/tree/master/kubetest"&gt;&lt;code&gt;kubetest&lt;/code&gt;&lt;/a&gt; integration also built on these packages (WIP)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;kind bootstraps each "node" with &lt;a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/"&gt;kubeadm&lt;/a&gt;. For more details see &lt;a href="https://kind.sigs.k8s.io/docs/design/initial"&gt;the design documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: kind is still a work in progress, see the &lt;a href="https://kind.sigs.k8s.io/docs/contributing/1.0-roadmap"&gt;1.0 roadmap&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation and usage&lt;/h2&gt; 
&lt;p&gt;For a complete &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation"&gt;install guide&lt;/a&gt; see &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation"&gt;the documentation here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can install kind with &lt;code&gt;go install sigs.k8s.io/kind@v0.30.0&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: please use the latest go to do this. KIND is developed with the latest stable go, see &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kind/main/.go-version"&gt;&lt;code&gt;.go-version&lt;/code&gt;&lt;/a&gt; for the exact version we're using.&lt;/p&gt; 
&lt;p&gt;This will put &lt;code&gt;kind&lt;/code&gt; in &lt;code&gt;$(go env GOPATH)/bin&lt;/code&gt;. If you encounter the error &lt;code&gt;kind: command not found&lt;/code&gt; after installation then you may need to either add that directory to your &lt;code&gt;$PATH&lt;/code&gt; as shown &lt;a href="https://golang.org/doc/code.html#GOPATH"&gt;here&lt;/a&gt; or do a manual installation by cloning the repo and run &lt;code&gt;make build&lt;/code&gt; from the repository.&lt;/p&gt; 
&lt;p&gt;Without installing go, kind can be built reproducibly with docker using &lt;code&gt;make build&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Stable binaries are also available on the &lt;a href="https://github.com/kubernetes-sigs/kind/releases"&gt;releases&lt;/a&gt; page. Stable releases are generally recommended for CI usage in particular. To install, download the binary for your platform from "Assets" and place this into your &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt; 
&lt;p&gt;On Linux:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;# For AMD64 / x86_64
[ $(uname -m) = x86_64 ] &amp;amp;&amp;amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.30.0/kind-$(uname)-amd64
# For ARM64
[ $(uname -m) = aarch64 ] &amp;amp;&amp;amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.30.0/kind-$(uname)-arm64
chmod +x ./kind
sudo mv ./kind /usr/local/bin/kind
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On macOS via Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;brew install kind
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On macOS via MacPorts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;sudo port selfupdate &amp;amp;&amp;amp; sudo port install kind
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On macOS via Bash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;# For Intel Macs
[ $(uname -m) = x86_64 ] &amp;amp;&amp;amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.30.0/kind-darwin-amd64
# For M1 / ARM Macs
[ $(uname -m) = arm64 ] &amp;amp;&amp;amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.30.0/kind-darwin-arm64
chmod +x ./kind
mv ./kind /some-dir-in-your-PATH/kind
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Windows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;curl.exe -Lo kind-windows-amd64.exe https://kind.sigs.k8s.io/dl/v0.30.0/kind-windows-amd64
Move-Item .\kind-windows-amd64.exe c:\some-dir-in-your-PATH\kind.exe

# OR via Chocolatey (https://chocolatey.org/packages/kind)
choco install kind
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use kind, you will need to &lt;a href="https://docs.docker.com/install/"&gt;install docker&lt;/a&gt;. Once you have docker running you can create a cluster with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;kind create cluster
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To delete your cluster use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;kind delete cluster
&lt;/code&gt;&lt;/pre&gt; 
&lt;!--TODO(bentheelder): improve this part of the guide--&gt; 
&lt;p&gt;To create a cluster from Kubernetes source:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ensure that Kubernetes is cloned in &lt;code&gt;$(go env GOPATH)/src/k8s.io/kubernetes&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;build a node image and create a cluster with:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;kind build node-image
kind create cluster --image kindest/node:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Multi-node clusters and other advanced features may be configured with a config file, for more usage see &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start"&gt;the docs&lt;/a&gt; or run &lt;code&gt;kind [command] --help&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Please reach out for bugs, feature requests, and other issues! The maintainers of this project are reachable via:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="http://slack.k8s.io/"&gt;Kubernetes Slack&lt;/a&gt; in the &lt;a href="https://kubernetes.slack.com/messages/CEKK1KTN2/"&gt;#kind&lt;/a&gt; channel&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubernetes-sigs/kind/issues/new"&gt;filing an issue&lt;/a&gt; against this repo&lt;/li&gt; 
 &lt;li&gt;The Kubernetes &lt;a href="https://groups.google.com/forum/#!forum/kubernetes-sig-testing"&gt;SIG-Testing Mailing List&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Current maintainers are &lt;a href="https://github.com/aojea"&gt;@aojea&lt;/a&gt;, &lt;a href="https://github.com/BenTheElder"&gt;@BenTheElder&lt;/a&gt;, and &lt;a href="https://github.com/stmcginnis"&gt;@stmcginnis&lt;/a&gt; - feel free to reach out if you have any questions!&lt;/p&gt; 
&lt;p&gt;Pull Requests are very welcome! If you're planning a new feature, please file an issue to discuss first.&lt;/p&gt; 
&lt;p&gt;Check the &lt;a href="https://github.com/kubernetes-sigs/kind/issues"&gt;issue tracker&lt;/a&gt; for &lt;code&gt;help wanted&lt;/code&gt; issues if you're unsure where to start, or feel free to reach out to discuss. 🙂&lt;/p&gt; 
&lt;p&gt;See also: our own &lt;a href="https://kind.sigs.k8s.io/docs/contributing/getting-started"&gt;contributor guide&lt;/a&gt; and the Kubernetes &lt;a href="https://kubernetes.io/community/"&gt;community page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Why kind?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;kind supports multi-node (including HA) clusters&lt;/li&gt; 
 &lt;li&gt;kind supports building Kubernetes release builds from source 
  &lt;ul&gt; 
   &lt;li&gt;support for make / bash or docker, in addition to pre-published builds&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;kind supports Linux, macOS and Windows&lt;/li&gt; 
 &lt;li&gt;kind is a &lt;a href="https://landscape.cncf.io/?selected=kind"&gt;CNCF certified conformant Kubernetes installer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;Participation in the Kubernetes community is governed by the &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kind/main/code-of-conduct.md"&gt;Kubernetes Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;!--links--&gt;</description>
    </item>
    
    <item>
      <title>hashicorp/terraform</title>
      <link>https://github.com/hashicorp/terraform</link>
      <description>&lt;p&gt;Terraform enables you to safely and predictably create, change, and improve infrastructure. It is a source-available tool that codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Terraform&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href="https://developer.hashicorp.com/terraform"&gt;https://developer.hashicorp.com/terraform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Forums: &lt;a href="https://discuss.hashicorp.com/c/terraform-core"&gt;HashiCorp Discuss&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Documentation: &lt;a href="https://developer.hashicorp.com/terraform/docs"&gt;https://developer.hashicorp.com/terraform/docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tutorials: &lt;a href="https://developer.hashicorp.com/terraform/tutorials"&gt;HashiCorp's Learn Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Certification Exam: &lt;a href="https://www.hashicorp.com/certification/#hashicorp-certified-terraform-associate"&gt;HashiCorp Certified: Terraform Associate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img alt="Terraform" src="https://www.datocms-assets.com/2885/1731373310-terraform_white.svg?sanitize=true" width="600px" /&gt; 
&lt;p&gt;Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.&lt;/p&gt; 
&lt;p&gt;The key features of Terraform are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infrastructure as Code&lt;/strong&gt;: Infrastructure is described using a high-level configuration syntax. This allows a blueprint of your datacenter to be versioned and treated as you would any other code. Additionally, infrastructure can be shared and re-used.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Execution Plans&lt;/strong&gt;: Terraform has a "planning" step where it generates an execution plan. The execution plan shows what Terraform will do when you call apply. This lets you avoid any surprises when Terraform manipulates infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Graph&lt;/strong&gt;: Terraform builds a graph of all your resources, and parallelizes the creation and modification of any non-dependent resources. Because of this, Terraform builds infrastructure as efficiently as possible, and operators get insight into dependencies in their infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Change Automation&lt;/strong&gt;: Complex changesets can be applied to your infrastructure with minimal human interaction. With the previously mentioned execution plan and resource graph, you know exactly what Terraform will change and in what order, avoiding many possible human errors.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information, refer to the &lt;a href="https://www.terraform.io/intro"&gt;What is Terraform?&lt;/a&gt; page on the Terraform website.&lt;/p&gt; 
&lt;h2&gt;Getting Started &amp;amp; Documentation&lt;/h2&gt; 
&lt;p&gt;Documentation is available on the &lt;a href="https://developer.hashicorp.com/terraform"&gt;Terraform website&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://developer.hashicorp.com/terraform/intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.hashicorp.com/terraform/docs"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you're new to Terraform and want to get started creating infrastructure, please check out our &lt;a href="https://learn.hashicorp.com/terraform#getting-started"&gt;Getting Started guides&lt;/a&gt; on HashiCorp's learning platform. There are also &lt;a href="https://learn.hashicorp.com/terraform#operations-and-development"&gt;additional guides&lt;/a&gt; to continue your learning.&lt;/p&gt; 
&lt;p&gt;Show off your Terraform knowledge by passing a certification exam. Visit the &lt;a href="https://www.hashicorp.com/certification/"&gt;certification page&lt;/a&gt; for information about exams and find &lt;a href="https://learn.hashicorp.com/terraform/certification/terraform-associate"&gt;study materials&lt;/a&gt; on HashiCorp's learning platform.&lt;/p&gt; 
&lt;h2&gt;Developing Terraform&lt;/h2&gt; 
&lt;p&gt;This repository contains only Terraform core, which includes the command line interface and the main graph engine. Providers are implemented as plugins, and Terraform can automatically download providers that are published on &lt;a href="https://registry.terraform.io"&gt;the Terraform Registry&lt;/a&gt;. HashiCorp develops some providers, and others are developed by other organizations. For more information, refer to &lt;a href="https://developer.hashicorp.com/terraform/plugin"&gt;Plugin development&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;To learn more about compiling Terraform and contributing suggested changes, refer to &lt;a href="https://raw.githubusercontent.com/hashicorp/terraform/main/.github/CONTRIBUTING.md"&gt;the contributing guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To learn more about how we handle bug reports, refer to the &lt;a href="https://raw.githubusercontent.com/hashicorp/terraform/main/BUGPROCESS.md"&gt;bug triage guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To learn how to contribute to the Terraform documentation, refer to the &lt;a href="https://github.com/hashicorp/web-unified-docs"&gt;Web Unified Docs repository&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/hashicorp/terraform/raw/main/LICENSE"&gt;Business Source License 1.1&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stretchr/testify</title>
      <link>https://github.com/stretchr/testify</link>
      <description>&lt;p&gt;A toolkit with common assertions and mocks that plays nicely with the standard library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Testify - Thou Shalt Write Tests&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Testify is being maintained at v1, no breaking changes will be accepted in this repo.&lt;br /&gt; &lt;a href="https://github.com/stretchr/testify/discussions/1560"&gt;See discussion about v2&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/stretchr/testify/actions/workflows/main.yml"&gt;&lt;img src="https://github.com/stretchr/testify/actions/workflows/main.yml/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/stretchr/testify"&gt;&lt;img src="https://goreportcard.com/badge/github.com/stretchr/testify" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/stretchr/testify"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/stretchr/testify" alt="PkgGoDev" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Go code (golang) set of packages that provide many tools for testifying that your code will behave as you intend.&lt;/p&gt; 
&lt;p&gt;Features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/stretchr/testify/master/#assert-package"&gt;Easy assertions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/stretchr/testify/master/#mock-package"&gt;Mocking&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/stretchr/testify/master/#suite-package"&gt;Testing suite interfaces and functions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Get started:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install testify with &lt;a href="https://raw.githubusercontent.com/stretchr/testify/master/#installation"&gt;one line of code&lt;/a&gt;, or &lt;a href="https://raw.githubusercontent.com/stretchr/testify/master/#staying-up-to-date"&gt;update it with another&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For an introduction to writing test code in Go, see &lt;a href="https://go.dev/doc/code#Testing"&gt;https://go.dev/doc/code#Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Check out the API Documentation &lt;a href="https://pkg.go.dev/github.com/stretchr/testify"&gt;https://pkg.go.dev/github.com/stretchr/testify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Use &lt;a href="https://github.com/Antonboom/testifylint"&gt;testifylint&lt;/a&gt; (via &lt;a href="https://golangci-lint.run/"&gt;golangci-lint&lt;/a&gt;) to avoid common mistakes&lt;/li&gt; 
 &lt;li&gt;A little about &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;Test-Driven Development (TDD)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://pkg.go.dev/github.com/stretchr/testify/assert" title="API documentation"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;assert&lt;/code&gt; package provides some helpful methods that allow you to write better test code in Go.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Prints friendly, easy to read failure descriptions&lt;/li&gt; 
 &lt;li&gt;Allows for very readable code&lt;/li&gt; 
 &lt;li&gt;Optionally annotate each assertion with a message&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See it in action:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package yours

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSomething(t *testing.T) {
	// assert equality
	assert.Equal(t, 123, 123, "they should be equal")

	// assert inequality
	assert.NotEqual(t, 123, 456, "they should not be equal")

	// assert for nil (good for errors)
	assert.Nil(t, object)

	// assert for not nil (good when you expect something)
	if assert.NotNil(t, object) {
		// now we know that object isn't nil, we are safe to make
		// further assertions without causing any errors
		assert.Equal(t, "Something", object.Value)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Every assert func takes the &lt;code&gt;testing.T&lt;/code&gt; object as the first argument. This is how it writes the errors out through the normal &lt;code&gt;go test&lt;/code&gt; capabilities.&lt;/li&gt; 
 &lt;li&gt;Every assert func returns a bool indicating whether the assertion was successful or not, this is useful for if you want to go on making further assertions under certain conditions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;if you assert many times, use the below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package yours

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSomething(t *testing.T) {
	assert := assert.New(t)

	// assert equality
	assert.Equal(123, 123, "they should be equal")

	// assert inequality
	assert.NotEqual(123, 456, "they should not be equal")

	// assert for nil (good for errors)
	assert.Nil(object)

	// assert for not nil (good when you expect something)
	if assert.NotNil(object) {
		// now we know that object isn't nil, we are safe to make
		// further assertions without causing any errors
		assert.Equal("Something", object.Value)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a href="https://pkg.go.dev/github.com/stretchr/testify/require" title="API documentation"&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;require&lt;/code&gt; package provides same global functions as the &lt;code&gt;assert&lt;/code&gt; package, but instead of returning a boolean result they terminate current test. These functions must be called from the goroutine running the test or benchmark function, not from other goroutines created during the test. Otherwise race conditions may occur.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://pkg.go.dev/testing#T.FailNow"&gt;t.FailNow&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://pkg.go.dev/github.com/stretchr/testify/mock" title="API documentation"&gt;&lt;code&gt;mock&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;mock&lt;/code&gt; package provides a mechanism for easily writing mock objects that can be used in place of real objects when writing test code.&lt;/p&gt; 
&lt;p&gt;An example test function that tests a piece of code that relies on an external object &lt;code&gt;testObj&lt;/code&gt;, can set up expectations (testify) and assert that they indeed happened:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package yours

import (
	"testing"

	"github.com/stretchr/testify/mock"
)

/*
  Test objects
*/

// MyMockedObject is a mocked object that implements an interface
// that describes an object that the code I am testing relies on.
type MyMockedObject struct {
	mock.Mock
}

// DoSomething is a method on MyMockedObject that implements some interface
// and just records the activity, and returns what the Mock object tells it to.
//
// In the real object, this method would do something useful, but since this
// is a mocked object - we're just going to stub it out.
//
// NOTE: This method is not being tested here, code that uses this object is.
func (m *MyMockedObject) DoSomething(number int) (bool, error) {
	args := m.Called(number)
	return args.Bool(0), args.Error(1)
}

/*
  Actual test functions
*/

// TestSomething is an example of how to use our test object to
// make assertions about some target code we are testing.
func TestSomething(t *testing.T) {
	// create an instance of our test object
	testObj := new(MyMockedObject)

	// set up expectations
	testObj.On("DoSomething", 123).Return(true, nil)

	// call the code we are testing
	targetFuncThatDoesSomethingWithObj(testObj)

	// assert that the expectations were met
	testObj.AssertExpectations(t)
}

// TestSomethingWithPlaceholder is a second example of how to use our test object to
// make assertions about some target code we are testing.
// This time using a placeholder. Placeholders might be used when the
// data being passed in is normally dynamically generated and cannot be
// predicted beforehand (eg. containing hashes that are time sensitive)
func TestSomethingWithPlaceholder(t *testing.T) {
	// create an instance of our test object
	testObj := new(MyMockedObject)

	// set up expectations with a placeholder in the argument list
	testObj.On("DoSomething", mock.Anything).Return(true, nil)

	// call the code we are testing
	targetFuncThatDoesSomethingWithObj(testObj)

	// assert that the expectations were met
	testObj.AssertExpectations(t)

}

// TestSomethingElse2 is a third example that shows how you can use
// the Unset method to cleanup handlers and then add new ones.
func TestSomethingElse2(t *testing.T) {
	// create an instance of our test object
	testObj := new(MyMockedObject)

	// set up expectations with a placeholder in the argument list
	mockCall := testObj.On("DoSomething", mock.Anything).Return(true, nil)

	// call the code we are testing
	targetFuncThatDoesSomethingWithObj(testObj)

	// assert that the expectations were met
	testObj.AssertExpectations(t)

	// remove the handler now so we can add another one that takes precedence
	mockCall.Unset()

	// return false now instead of true
	testObj.On("DoSomething", mock.Anything).Return(false, nil)

	testObj.AssertExpectations(t)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on how to write mock code, check out the &lt;a href="https://pkg.go.dev/github.com/stretchr/testify/mock"&gt;API documentation for the &lt;code&gt;mock&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;a href="https://vektra.github.io/mockery/latest/"&gt;mockery tool&lt;/a&gt; to autogenerate the mock code against an interface as well, making using mocks much quicker.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://pkg.go.dev/github.com/stretchr/testify/suite" title="API documentation"&gt;&lt;code&gt;suite&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The suite package does not support parallel tests. See &lt;a href="https://github.com/stretchr/testify/issues/934"&gt;#934&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;code&gt;suite&lt;/code&gt; package provides functionality that you might be used to from more common object-oriented languages. With it, you can build a testing suite as a struct, build setup/teardown methods and testing methods on your struct, and run them with 'go test' as per normal.&lt;/p&gt; 
&lt;p&gt;An example suite is shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Basic imports
import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

// Define the suite, and absorb the built-in basic suite
// functionality from testify - including a T() method which
// returns the current testing context
type ExampleTestSuite struct {
	suite.Suite
	VariableThatShouldStartAtFive int
}

// Make sure that VariableThatShouldStartAtFive is set to five
// before each test
func (suite *ExampleTestSuite) SetupTest() {
	suite.VariableThatShouldStartAtFive = 5
}

// All methods that begin with "Test" are run as tests within a
// suite.
func (suite *ExampleTestSuite) TestExample() {
	assert.Equal(suite.T(), 5, suite.VariableThatShouldStartAtFive)
}

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestExampleTestSuite(t *testing.T) {
	suite.Run(t, new(ExampleTestSuite))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a more complete example, using all of the functionality provided by the suite package, look at our &lt;a href="https://github.com/stretchr/testify/raw/master/suite/suite_test.go"&gt;example testing suite&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For more information on writing suites, check out the &lt;a href="https://pkg.go.dev/github.com/stretchr/testify/suite"&gt;API documentation for the &lt;code&gt;suite&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Suite&lt;/code&gt; object has assertion methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Basic imports
import (
	"testing"

	"github.com/stretchr/testify/suite"
)

// Define the suite, and absorb the built-in basic suite
// functionality from testify - including assertion methods.
type ExampleTestSuite struct {
	suite.Suite
	VariableThatShouldStartAtFive int
}

// Make sure that VariableThatShouldStartAtFive is set to five
// before each test
func (suite *ExampleTestSuite) SetupTest() {
	suite.VariableThatShouldStartAtFive = 5
}

// All methods that begin with "Test" are run as tests within a
// suite.
func (suite *ExampleTestSuite) TestExample() {
	suite.Equal(suite.VariableThatShouldStartAtFive, 5)
}

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestExampleTestSuite(t *testing.T) {
	suite.Run(t, new(ExampleTestSuite))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;To install Testify, use &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go get github.com/stretchr/testify
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will then make the following packages available to you:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github.com/stretchr/testify/assert
github.com/stretchr/testify/require
github.com/stretchr/testify/mock
github.com/stretchr/testify/suite
github.com/stretchr/testify/http (deprecated)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Import the &lt;code&gt;testify/assert&lt;/code&gt; package into your code using this template:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package yours

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSomething(t *testing.T) {
	assert.True(t, true, "True is true!")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Staying up to date&lt;/h1&gt; 
&lt;p&gt;To update Testify to the latest version, use &lt;code&gt;go get -u github.com/stretchr/testify&lt;/code&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Supported go versions&lt;/h1&gt; 
&lt;p&gt;We currently support the most recent major Go versions from 1.19 onward.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;Please feel free to submit issues, fork the repository and send pull requests!&lt;/p&gt; 
&lt;p&gt;When submitting an issue, we ask that you please include a complete test function that demonstrates the issue. Extra credit for those using Testify to write the test code that demonstrates it.&lt;/p&gt; 
&lt;p&gt;Code generation is used. &lt;a href="https://github.com/search?q=repo%3Astretchr%2Ftestify%20%22Code%20generated%20with%22&amp;amp;type=code"&gt;Look for &lt;code&gt;Code generated with&lt;/code&gt;&lt;/a&gt; at the top of some files. Run &lt;code&gt;go generate ./...&lt;/code&gt; to update generated files.&lt;/p&gt; 
&lt;p&gt;We also chat on the &lt;a href="https://gophers.slack.com"&gt;Gophers Slack&lt;/a&gt; group in the &lt;code&gt;#testify&lt;/code&gt; and &lt;code&gt;#testify-dev&lt;/code&gt; channels.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudnative-pg/cloudnative-pg</title>
      <link>https://github.com/cloudnative-pg/cloudnative-pg</link>
      <description>&lt;p&gt;CloudNativePG is a comprehensive platform designed to seamlessly manage PostgreSQL databases within Kubernetes environments, covering the entire operational lifecycle from initial deployment to ongoing maintenance&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://landscape.cncf.io/?item=app-definition-and-development--database--cloudnativepg"&gt;&lt;img src="https://img.shields.io/badge/CNCF%20Landscape-5699C6" alt="CNCF Landscape" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudnative-pg/cloudnative-pg/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/cloudnative-pg/cloudnative-pg.svg?sanitize=true" alt="Latest Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudnative-pg/cloudnative-pg?tab=Apache-2.0-1-ov-file#readme"&gt;&lt;img src="https://img.shields.io/github/license/cloudnative-pg/cloudnative-pg" alt="GitHub License" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/9933"&gt;&lt;img src="https://www.bestpractices.dev/projects/9933/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/cloudnative-pg/cloudnative-pg"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/cloudnative-pg/cloudnative-pg/badge" alt="OpenSSF Scorecard Badge" /&gt;&lt;/a&gt; &lt;a href="https://cloudnative-pg.io/documentation/current/"&gt;&lt;img src="https://img.shields.io/badge/Documentation-white?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAGN0lEQVR4nJRXXWwcVxU%2B8%2F%2BzP%2BPZtR2v7dqy07jUJUALNaiK6lZyUVVKWgGKaIv8QCMekBAVQlQICcEzVZFQVYFKQhASEBHlISJPCRJEshTFChgrIYHEiYMh69jetffHM7Mzc%2B9Bs7vjnTs7yZpZWbt37s%2F5zne%2Bc861CD0eXRkbHc3NfjeffvxNAGEAgULD2756v35%2B3qe1Nc4fnQVEXlA2LnOcXlCF8S%2B6vvVgq%2FL3M65X3e51PvfQCU4WJgZe%2B8GQ8fS7AKgjBB8KEHwjDXZSjkf0CREAaXM2eI9c65siqWxWl360Xl74ANHz%2Fy8AitxnTBfmz%2BhyYS4wGhwObQCIHSA0AigOMBzvOsXzd4pnjyL6NMmWEH8hi2b28Og3%2FqRJA0ewfQy0v1vGO2NovwPo%2FEU%2FwVgSU1PI%2BSu79v3lJAB8HM%2BTI%2FO%2FUUXzM4xHIe0xI4DdRqOAwnF%2F38ePPyzaDIDh%2FMxcWh462m08aojuGY97C0nrAEHg9BlF0fmeAPr0J15vbaKsp0BZQzEDEAlP9B209UIIVXUta%2FQEQHwxgxFjTc%2BRskAwrgVWmHtg22vMPJwLDqGUNJIAMHVAkGu3WdpZz6NAkgSXpINSycluV28er1a3rJ4M3F2%2F9AtCvXKycRrTQttrjINjxxxIL9jevxdaDHU%2FTBr6pL5ruzuLZubgUQBOY2hPij3GBUe7tBCMBRE2KrXVSz0BBI%2FtPVgtV%2F%2FxkZ5WSjI%2F%2BFIXC3sHJwgT4yFqrZFFTSlVrp3sGYLwcfxSmXCbS00j2Ms4K7qkOsFx6qdTuiHtG4AimfmM8NyvOvR2G48qXtZ2fsfrN7%2BqpcRyUp0glKiimDm4TwAcHBp%2B9WeA4ki0GMWNR9OVF8BZvn7xtI%2FF09H8jzLEgz6yLwCDuelnFXHkTZZOytCOEdqDOtGwsm%2BNj00fXt%2B6%2Bj4vcA7bwNrZwENmXwAKuZnvsNRThs5ozMPfPiHyoDF7xiduHcXb70A8dRFheHjiySQATBZk0nl9MHPkBEWUoEtYjyrPFNwGzfdlD37Zdu98KCv%2BMmD2BYpUCvcST39e0%2BS1Wr249FAAg7mPzWrS5NstEbE0xrsiA6QN1PfRFLnhr%2BspxVJTlY8Mw1DqNXeyCQFREEXz9cHB0QOev73QaNhOF4B%2B45PHFHFgDhJTqjuubJFqX1KQco7NTTuW8kq95k2G4eLEGzM7lfItnjNeTKcOfV%2FT8hOuV77A9IK0XjgMpCO0ZiuV3L%2F6njCFAOmucGB3OII5XgCXEJTDdZLElVbu3Vz0fWexvL30k0B6ggBACOmIUBAEUKX0dDTvW7RCYcdZPq6n%2FSsQnUO2RuyBRgQ9Rc5mMvJ6CNIj1nXfd9qWAsCkaZzJAk1L8UjVqY737dSjfCGrPHWqXL32Q0mB%2F2BXnke00WaEYv2aTzAbnuV5pcWkDGAAGJmhSafh6hjr%2BW2SVYHrP7bb%2BOdPW%2FUgflGlTM2gaK%2Ft7tp6%2BN6yixdN89DcIwGktIFPABfNbwoQqQWEUnDJzg1g0jDeK5p7Kp7nensXFI7uyAr%2FLyM7fYLnpa6LYScE8vDnot5hrKlslm%2BfE3nVxJgO4o3KcYu%2FF8XM8yFQ27n%2F65Te%2FzKl3Jhpjj6TCIDneRD5%2FItxr1vdkALw7p1qfeWPpjHxMtsXaPxu6FLc%2BrnbSB1r7fcrlr36nqwMzQfnplJDryQCGOh%2FbLjhcM%2FEvQ4Pdund9xRV5m1LfTXaF%2BK9gsLGB9nsgddcz8thM%2FarPzYM8%2FFazf9sMFaU%2Fi%2FwvNANwEhPvUGR8ozn7d%2BiDKXixtKpbHp81nV9E7puRy31ixKUbOe%2Fv3Ud891ghhDrL5Z975eaOvV%2BCNRp0Gfz%2BcJjDABdTwlpdfKbId0t5XYAcHz5D5ZVtWUp9%2Flog2L7PgVJqZx0HOE5Cqghemv1%2Bt%2FeGBmZ%2BdB2yNN72UEpnzXG32YADA186i3bIpPxMhuKrFK%2Fd77JUnbkKbYvRJlC8DzKSZK76Lq1he2dKy%2BZuSfesSz5a2xHDbLJ%2BJaqdv5H4EUY%2BzbG2m9HgN7mg81bfw4W1uu7AjvHaqDhqF%2FZ3Fq5XFy%2FcESSDsx5fvZ7wLEsNfXk%2BjlVHfpSCOB%2FAQAA%2F%2F8zd8orZc2N9AAAAABJRU5ErkJggg%3D%3D" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/tagged/cloudnative-pg"&gt;&lt;img src="https://img.shields.io/badge/stackoverflow-cloudnative--pg-blue?logo=stackoverflow&amp;amp;logoColor=%23F48024&amp;amp;link=https%3A%2F%2Fstackoverflow.com%2Fquestions%2Ftagged%2Fcloudnative-pg" alt="Stack Overflow" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fcloudnative-pg%2Fcloudnative-pg?ref=badge_small"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fcloudnative-pg%2Fcloudnative-pg.svg?type=small" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Welcome to the CloudNativePG Project!&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;CloudNativePG (CNPG)&lt;/strong&gt; is an open-source platform designed to seamlessly manage &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; databases in Kubernetes environments. It covers the entire operational lifecycle—from deployment to ongoing maintenance—through its core component, the CloudNativePG operator.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudnative-pg/governance/raw/main/GOVERNANCE.md"&gt;Governance Policies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/ADOPTERS.md"&gt;Adopters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnative-pg.io/support/"&gt;Commercial Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/LICENSE"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;The best way to get started is the &lt;a href="https://cloudnative-pg.io/documentation/current/quickstart/"&gt;Quickstart Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Scope&lt;/h2&gt; 
&lt;h3&gt;Mission&lt;/h3&gt; 
&lt;p&gt;CloudNativePG aims to increase PostgreSQL adoption within Kubernetes by making it an integral part of the development process and GitOps-driven CI/CD automation.&lt;/p&gt; 
&lt;h3&gt;Core Principles &amp;amp; Features&lt;/h3&gt; 
&lt;p&gt;Designed by PostgreSQL experts for Kubernetes administrators, CloudNativePG follows a Kubernetes-native approach to PostgreSQL primary/standby cluster management. Instead of relying on external high-availability tools (like Patroni, repmgr, or Stolon), it integrates directly with the Kubernetes API to automate database operations that a skilled DBA would perform manually.&lt;/p&gt; 
&lt;p&gt;Key design decisions include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Direct integration with Kubernetes API: The PostgreSQL cluster’s status is available directly in the &lt;code&gt;Cluster&lt;/code&gt; resource, allowing users to inspect it via the Kubernetes API.&lt;/li&gt; 
 &lt;li&gt;Operator pattern: The operator ensures that the desired PostgreSQL state is reconciled automatically, following Kubernetes best practices.&lt;/li&gt; 
 &lt;li&gt;Immutable application containers: Updates follow an immutable infrastructure model, as explained in &lt;a href="https://www.enterprisedb.com/blog/why-edb-chose-immutable-application-containers"&gt;"Why EDB Chose Immutable Application Containers"&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How CloudNativePG Works&lt;/h3&gt; 
&lt;p&gt;The operator continuously monitors and updates the PostgreSQL cluster state. Examples of automated actions include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Failover management: If the primary instance fails, the operator elects a new primary, updates the cluster status, and orchestrates the transition.&lt;/li&gt; 
 &lt;li&gt;Scaling read replicas: When the number of desired replicas changes, the operator provisions or removes resources such as persistent volumes, secrets, and config maps while managing streaming replication.&lt;/li&gt; 
 &lt;li&gt;Service updates: Kubernetes remains the single source of truth, ensuring that PostgreSQL service endpoints are always up to date.&lt;/li&gt; 
 &lt;li&gt;Rolling updates: When an image is updated, the operator follows a rolling strategy—first updating replica pods before performing a controlled switchover for the primary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;CloudNativePG manages additional Kubernetes resources to enhance PostgreSQL management, including: &lt;code&gt;Backup&lt;/code&gt;, &lt;code&gt;ClusterImageCatalog&lt;/code&gt;, &lt;code&gt;Database&lt;/code&gt;, &lt;code&gt;ImageCatalog&lt;/code&gt;, &lt;code&gt;Pooler&lt;/code&gt;, &lt;code&gt;Publication&lt;/code&gt;, &lt;code&gt;ScheduledBackup&lt;/code&gt;, and &lt;code&gt;Subscription&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Out of Scope&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Kubernetes only:&lt;/strong&gt; CloudNativePG is dedicated to vanilla Kubernetes maintained by the &lt;a href="https://kubernetes.io/"&gt;Cloud Native Computing Foundation (CNCF)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PostgreSQL only:&lt;/strong&gt; CloudNativePG is dedicated to vanilla PostgreSQL maintained by the &lt;a href="https://www.postgresql.org/about/"&gt;PostgreSQL Global Development Group (PGDG)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No support for forks:&lt;/strong&gt; Features from PostgreSQL forks will only be considered if they can be integrated as extensions or pluggable frameworks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Not a general-purpose database operator:&lt;/strong&gt; CloudNativePG does not support other databases (e.g., MariaDB).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;CloudNativePG can be extended via the &lt;a href="https://github.com/cloudnative-pg/cnpg-i"&gt;CNPG-I plugin interface&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Communications&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudnative-pg/cloudnative-pg/discussions"&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud-native.slack.com/archives/C08MAUJ7NPM"&gt;Slack&lt;/a&gt; (join the &lt;a href="https://communityinviter.com/apps/cloud-native/cncf"&gt;CNCF Slack Workspace&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/CloudNativePg"&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mastodon.social/@CloudNativePG"&gt;Mastodon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bsky.app/profile/cloudnativepg.bsky.social"&gt;Bluesky&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orgs/cloudnative-pg/projects/1"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnative-pg.io"&gt;Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/faq.md"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnative-pg.io/blog/"&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudnative-pg/cnpg-i"&gt;CloudNativePG plugin Interface (CNPG-I)&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;A list of publicly known users of the CloudNativePG operator is in &lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/ADOPTERS.md"&gt;ADOPTERS.md&lt;/a&gt;. Help us grow our community and CloudNativePG by adding yourself and your organization to this list!&lt;/p&gt; 
&lt;h3&gt;CloudNativePG at KubeCon&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;April 4 2025, KubeCon Europe in London: &lt;a href="https://sched.co/1tx8g"&gt;"Consistent Volume Group Snapshots, Unraveling the Magic"&lt;/a&gt; - Leonardo Cecchi (EDB) and Xing Yang (VMware)&lt;/li&gt; 
 &lt;li&gt;November 11 2024, Cloud Native Rejekts NA 2024: &lt;a href="https://www.youtube.com/watch?v=uBzl_stoxoc&amp;amp;ab_channel=CloudNativeRejekts"&gt;"Maximising Microservice Databases with Kubernetes, Postgres, and CloudNativePG"&lt;/a&gt; - Gabriele Bartolini (EDB) and Leonardo Cecchi (EDB)&lt;/li&gt; 
 &lt;li&gt;March 21 2024, KubeCon Europe 2024 in Paris: &lt;a href="https://kccnceu2024.sched.com/event/1YeM4/scaling-heights-mastering-postgres-database-vertical-scalability-with-kubernetes-storage-magic-gabriele-bartolini-edb-gari-singh-google"&gt;"Scaling Heights: Mastering Postgres Database Vertical Scalability with Kubernetes Storage Magic"&lt;/a&gt; - Gari Singh, Google &amp;amp; Gabriele Bartolini, EDB&lt;/li&gt; 
 &lt;li&gt;March 19 2024, Data on Kubernetes Day at KubeCon Europe 2024 in Paris: &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFha/from-zero-to-hero-scaling-postgres-in-kubernetes-using-the-power-of-cloudnativepg-gabriele-bartolini-edb"&gt;"From Zero to Hero: Scaling Postgres in Kubernetes Using the Power of CloudNativePG"&lt;/a&gt; - Gabriele Bartolini, EDB&lt;/li&gt; 
 &lt;li&gt;7 November 2023, KubeCon North America 2023 in Chicago: &lt;a href="https://kccncna2023.sched.com/event/1R2ml/disaster-recovery-with-very-large-postgres-databases-gabriele-bartolini-edb-michelle-au-google"&gt;"Disaster Recovery with Very Large Postgres Databases (in Kubernetes)"&lt;/a&gt; - Michelle Au, Google &amp;amp; Gabriele Bartolini, EDB&lt;/li&gt; 
 &lt;li&gt;27 October 2022, KubeCon North America 2022 in Detroit: &lt;a href="https://kccncna2022.sched.com/event/182GB/data-on-kubernetes-deploying-and-running-postgresql-and-patterns-for-databases-in-a-kubernetes-cluster-chris-milsted-ondat-gabriele-bartolini-edb"&gt;"Data On Kubernetes, Deploying And Running PostgreSQL And Patterns For Databases In a Kubernetes Cluster"&lt;/a&gt; - Chris Milsted, Ondat &amp;amp; Gabriele Bartolini, EDB&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Useful links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dok.community/"&gt;Data on Kubernetes (DoK) Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cncf.io/blog/2024/11/20/cloud-neutral-postgres-databases-with-kubernetes-and-cloudnativepg/"&gt;"Cloud Neutral Postgres Databases with Kubernetes and CloudNativePG" by Gabriele Bartolini&lt;/a&gt; (November 2024)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gabrielebartolini.it/articles/2024/03/cloudnativepg-recipe-5-how-to-migrate-your-postgresql-database-in-kubernetes-with-~0-downtime-from-anywhere/"&gt;"How to migrate your PostgreSQL database in Kubernetes with ~0 downtime from anywhere" by Gabriele Bartolini&lt;/a&gt; (March 2024)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gabrielebartolini.it/articles/2024/02/maximizing-microservice-databases-with-kubernetes-postgres-and-cloudnativepg/"&gt;"Maximizing Microservice Databases with Kubernetes, Postgres, and CloudNativePG" by Gabriele Bartolini&lt;/a&gt; (February 2024)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cncf.io/blog/2023/09/29/recommended-architectures-for-postgresql-in-kubernetes/"&gt;"Recommended Architectures for PostgreSQL in Kubernetes" by Gabriele Bartolini&lt;/a&gt; (September 2023)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.enterprisedb.com/blog/current-state-major-postgresql-upgrades-cloudnativepg-kubernetes"&gt;"The Current State of Major PostgreSQL Upgrades with CloudNativePG" by Gabriele Bartolini&lt;/a&gt; (August 2023)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://thenewstack.io/the-rise-of-the-kubernetes-native-database/"&gt;"The Rise of the Kubernetes Native Database" by Jeff Carpenter&lt;/a&gt; (December 2022)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnativenow.com/kubecon-cnc-eu-2022/why-run-postgres-in-kubernetes/"&gt;"Why Run Postgres in Kubernetes?" by Gabriele Bartolini&lt;/a&gt; (May 2022)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tfir.io/shift-left-security-the-path-to-postgresql-on-kubernetes/"&gt;"Shift-Left Security: The Path To PostgreSQL On Kubernetes" by Gabriele Bartolini&lt;/a&gt; (April 2021)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.2ndquadrant.com/en/blog/local-persistent-volumes-and-postgresql-usage-in-kubernetes/"&gt;"Local Persistent Volumes and PostgreSQL usage in Kubernetes" by Gabriele Bartolini&lt;/a&gt; (June 2020)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; We are a &lt;a href="https://www.cncf.io/sandbox-projects/"&gt;Cloud Native Computing Foundation Sandbox project&lt;/a&gt;. &lt;/p&gt; 
&lt;p style="text-align:center;" align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/cncf/artwork/blob/main/other/cncf/horizontal/white/cncf-white.svg?raw=true" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/cncf/artwork/blob/main/other/cncf/horizontal/color/cncf-color.svg?raw=true" /&gt; 
  &lt;img align="center" src="https://github.com/cncf/artwork/raw/main/other/cncf/horizontal/color/cncf-color.svg?raw=true" alt="CNCF logo" width="50%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; CloudNativePG was originally built and sponsored by &lt;a href="https://www.enterprisedb.com"&gt;EDB&lt;/a&gt;. &lt;/p&gt; 
&lt;p style="text-align:center;" align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/cloudnative-pg/.github/main/logo/edb_landscape_color_white.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/cloudnative-pg/.github/main/logo/edb_landscape_color_grey.svg" /&gt; 
  &lt;img align="center" src="https://raw.githubusercontent.com/cloudnative-pg/.github/main/logo/edb_landscape_color_grey.svg?sanitize=true" alt="EDB logo" width="25%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.postgresql.org/about/policies/trademarks/"&gt;Postgres, PostgreSQL, and the Slonik Logo&lt;/a&gt; are trademarks or registered trademarks of the PostgreSQL Community Association of Canada, and used with their permission. &lt;/p&gt; 
&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>Project-HAMi/HAMi</title>
      <link>https://github.com/Project-HAMi/HAMi</link>
      <description>&lt;p&gt;Heterogeneous AI Computing Virtualization Middleware(Project under CNCF)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English version | &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/README_cn.md"&gt;中文版&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/hami-horizontal-colordark.png" width="600px" /&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/Project-HAMi/HAMi.svg?sanitize=true" alt="LICENSE" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Project-HAMi/HAMi/actions/workflows/ci.yaml"&gt;&lt;img src="https://github.com/Project-HAMi/HAMi/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Project-HAMi/HAMi/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/Project-HAMi/HAMi" alt="Releases" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/en/projects/9416"&gt;&lt;img src="https://www.bestpractices.dev/projects/9416/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/Project-HAMi/HAMi"&gt;&lt;img src="https://goreportcard.com/badge/github.com/Project-HAMi/HAMi" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/Project-HAMi/HAMi"&gt;&lt;img src="https://codecov.io/gh/Project-HAMi/HAMi/branch/master/graph/badge.svg?token=ROM8CMPXZ6" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2FProject-HAMi%2FHAMi?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2FProject-HAMi%2FHAMi.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/projecthami/hami"&gt;&lt;img src="https://img.shields.io/docker/pulls/projecthami/hami.svg?sanitize=true" alt="docker pulls" /&gt;&lt;/a&gt; &lt;a href="https://cloud-native.slack.com/archives/C07T10BU4R2"&gt;&lt;img src="https://img.shields.io/badge/Slack-Join%20Slack-blue" alt="slack" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Project-HAMi/HAMi/discussions"&gt;&lt;img src="https://img.shields.io/badge/Discuss-Ask%20Questions-blue" alt="discuss" /&gt;&lt;/a&gt; &lt;a href="http://project-hami.io"&gt;&lt;img src="https://img.shields.io/badge/website-blue" alt="website" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Project-HAMi/HAMi#contact"&gt;&lt;img src="https://img.shields.io/badge/Contact%20Me-blue" alt="Contact Me" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Project-HAMi: Heterogeneous AI Computing Virtualization Middleware&lt;/h2&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;HAMi, formerly known as 'k8s-vGPU-scheduler', is a Heterogeneous device management middleware for Kubernetes. It can manage different types of heterogeneous devices (like GPU, NPU, etc.), share heterogeneous devices among pods, make better scheduling decisions based on topology of devices and scheduling policies.&lt;/p&gt; 
&lt;p&gt;It aims to remove the gap between different Heterogeneous devices, and provide a unified interface for users to manage with no changes to their applications. As of December 2024, HAMi has been widely used not only in Internet, public cloud and private cloud, but also broadly adopted in various vertical industries including finance, securities, energy, telecommunications, education, and manufacturing. More than 50 companies or institutions are not only end users but also active contributors.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/cncf-logo.png" alt="cncf_logo" /&gt;&lt;/p&gt; 
&lt;p&gt;HAMi is a sandbox and &lt;a href="https://landscape.cncf.io/?item=orchestration-management--scheduling-orchestration--hami"&gt;landscape&lt;/a&gt; project of&lt;br /&gt; &lt;a href="https://cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt;(CNCF), &lt;a href="https://landscape.cncf.io/?group=cnai&amp;amp;item=cnai--general-orchestration--hami"&gt;CNAI Landscape project&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Device virtualization&lt;/h2&gt; 
&lt;p&gt;HAMi provides device virtualization for several heterogeneous devices including GPU, by supporting device sharing and device resource isolation. For the list of devices supporting device virtualization, see &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/#supported-devices"&gt;supported devices&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Device sharing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Allows partial device allocation by specifying device core usage.&lt;/li&gt; 
 &lt;li&gt;Allows partial device allocation by specifying device memory.&lt;/li&gt; 
 &lt;li&gt;Imposes a hard limit on streaming multiprocessors.&lt;/li&gt; 
 &lt;li&gt;Requires zero changes to existing programs.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/dynamic-mig-support.md"&gt;dynamic-mig&lt;/a&gt; feature, &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/examples/nvidia/dynamic_mig_example.yaml"&gt;example&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/example.png" width="500" /&gt; 
&lt;h3&gt;Device Resources Isolation&lt;/h3&gt; 
&lt;p&gt;A simple demonstration of device isolation: A task with the following resources will see 3000M device memory inside container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;      resources:
        limits:
          nvidia.com/gpu: 1 # declare how many physical GPUs the pod needs
          nvidia.com/gpumem: 3000 # identifies 3G GPU memory each physical GPU allocates to the pod
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/hard_limit.jpg" alt="img" /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;After installing HAMi, the value of &lt;code&gt;nvidia.com/gpu&lt;/code&gt; registered on the node defaults to the number of vGPUs.&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;When requesting resources in a pod, &lt;code&gt;nvidia.com/gpu&lt;/code&gt; refers to the number of physical GPUs required by the current pod.&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Supported devices&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/Project-HAMi/HAMi#preparing-your-gpu-nodes"&gt;NVIDIA GPU&lt;/a&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/cambricon-mlu-support.md"&gt;Cambricon MLU&lt;/a&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/hygon-dcu-support.md"&gt;HYGON DCU&lt;/a&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/iluvatar-gpu-support.md"&gt;Iluvatar CoreX GPU&lt;/a&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/mthreads-support.md"&gt;Moore Threads GPU&lt;/a&gt;&lt;br /&gt; &lt;a href="https://github.com/Project-HAMi/ascend-device-plugin/raw/main/README.md"&gt;HUAWEI Ascend NPU&lt;/a&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/metax-support.md"&gt;MetaX GPU&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Architect&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/hami-arch.png" width="600" /&gt; 
&lt;p&gt;HAMi consists of several components, including a unified mutatingwebhook, a unified scheduler extender, different device-plugins and different in-container virtualization technics for each heterogeneous AI devices.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;Choose your orchestrator&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/#prerequisites"&gt;&lt;img src="https://img.shields.io/badge/kube-scheduler-blue" alt="kube-scheduler" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/how-to-use-volcano-vgpu.md"&gt;&lt;img src="https://img.shields.io/badge/volcano-scheduler-orange" alt="volcano-scheduler" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;The list of prerequisites for running the NVIDIA device plugin is described below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NVIDIA drivers &amp;gt;= 440&lt;/li&gt; 
 &lt;li&gt;nvidia-docker version &amp;gt; 2.0&lt;/li&gt; 
 &lt;li&gt;default runtime configured as nvidia for containerd/docker/cri-o container runtime&lt;/li&gt; 
 &lt;li&gt;Kubernetes version &amp;gt;= 1.18&lt;/li&gt; 
 &lt;li&gt;glibc &amp;gt;= 2.17 &amp;amp; glibc &amp;lt; 2.30&lt;/li&gt; 
 &lt;li&gt;kernel version &amp;gt;= 3.10&lt;/li&gt; 
 &lt;li&gt;helm &amp;gt; 3.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;p&gt;First, Label your GPU nodes for scheduling with HAMi by adding the label "gpu=on". Without this label, the nodes cannot be managed by our scheduler.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;kubectl label nodes {nodeid} gpu=on
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add our repo in helm&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;helm repo add hami-charts https://project-hami.github.io/HAMi/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use the following command for deployment:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;helm install hami hami-charts/hami -n kube-system
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Customize your installation by adjusting the &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/config.md"&gt;configs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Verify your installation using the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;kubectl get pods -n kube-system
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If both &lt;code&gt;hami-device-plugin&lt;/code&gt; (formerly known as &lt;code&gt;vgpu-device-plugin&lt;/code&gt;) and &lt;code&gt;hami-scheduler&lt;/code&gt; (formerly known as &lt;code&gt;vgpu-scheduler&lt;/code&gt;) pods are in the &lt;em&gt;Running&lt;/em&gt; state, your installation is successful. You can try examples &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/examples/nvidia/default_use.yaml"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;WebUI&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/Project-HAMi/HAMi-WebUI"&gt;HAMi-WebUI&lt;/a&gt; is available after HAMi v2.4&lt;/p&gt; 
&lt;p&gt;For installation guide, click &lt;a href="https://github.com/Project-HAMi/HAMi-WebUI/raw/main/docs/installation/helm/index.md"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Monitor&lt;/h3&gt; 
&lt;p&gt;Monitoring is automatically enabled after installation. Obtain an overview of cluster information by visiting the following URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://{scheduler ip}:{monitorPort}/metrics
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The default monitorPort is 31993; other values can be set using &lt;code&gt;--set devicePlugin.service.httpPort&lt;/code&gt; during installation.&lt;/p&gt; 
&lt;p&gt;Grafana dashboard &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/dashboard.md"&gt;example&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The status of a node won't be collected before you submit a task&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you don't request vGPUs when using the device plugin with NVIDIA images all the GPUs on the machine may be exposed inside your container&lt;/li&gt; 
 &lt;li&gt;Currently, A100 MIG can be supported in only "none" and "mixed" modes.&lt;/li&gt; 
 &lt;li&gt;Tasks with the "nodeName" field cannot be scheduled at the moment; please use "nodeSelector" instead.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RoadMap, Governance &amp;amp; Contributing&lt;/h2&gt; 
&lt;p&gt;The project is governed by a group of &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/MAINTAINERS.md"&gt;Maintainers&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/AUTHORS.md"&gt;Contributors&lt;/a&gt;. How they are selected and govern is outlined in our &lt;a href="https://github.com/Project-HAMi/community/raw/main/governance.md"&gt;Governance Document&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you're interested in being a contributor and want to get involved in developing the HAMi code, please see &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/develop/roadmap.md"&gt;RoadMap&lt;/a&gt; to see anything you interested.&lt;/p&gt; 
&lt;h2&gt;Meeting &amp;amp; Contact&lt;/h2&gt; 
&lt;p&gt;The HAMi community is committed to fostering an open and welcoming environment, with several ways to engage with other users and developers.&lt;/p&gt; 
&lt;p&gt;If you have any questions, please feel free to reach out to us through the following channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Regular Community Meeting: Friday at 16:00 UTC+8 (Chinese)(weekly). &lt;a href="https://www.thetimezoneconverter.com/?t=14%3A30&amp;amp;tz=GMT%2B8&amp;amp;"&gt;Convert to your timezone&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://docs.google.com/document/d/1YC6hco03_oXbF9IOUPJ29VWEddmITIKIfSmBX8JtGBw/edit#heading=h.g61sgp7w0d0c"&gt;Meeting Notes and Agenda&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://meeting.tencent.com/dm/Ntiwq1BICD1P"&gt;Meeting Link&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Email: refer to the &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/MAINTAINERS.md"&gt;MAINTAINERS.md&lt;/a&gt; to find the email addresses of all maintainers. Feel free to contact them via email to report any issues or ask questions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/hami-project"&gt;mailing list&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud-native.slack.com/archives/C07T10BU4R2"&gt;slack&lt;/a&gt; | &lt;a href="https://slack.cncf.io/"&gt;Join&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Talks and References&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;Link&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CHINA CLOUD COMPUTING INFRASTRUCTURE DEVELOPER CONFERENCE (Beijing 2024)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://live.csdn.net/room/csdnnews/3zwDP09S"&gt;Unlocking heterogeneous AI infrastructure on k8s clusters&lt;/a&gt; Starting from 03:06:15&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeDay(Japan 2024)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=owoaSb4nZwg"&gt;Unlocking Heterogeneous AI Infrastructure K8s Cluster:Leveraging the Power of HAMi&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeCon &amp;amp; AI_dev Open Source GenAI &amp;amp; ML Summit(China 2024)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=ApkyK3zLF5Q"&gt;Is Your GPU Really Working Efficiently in the Data Center?N Ways to Improve GPU Usage&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeCon &amp;amp; AI_dev Open Source GenAI &amp;amp; ML Summit(China 2024)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=kcGXnp_QShs"&gt;Unlocking Heterogeneous AI Infrastructure K8s Cluster&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeCon(EU 2024)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://youtu.be/fVYKk6xSOsw"&gt;Cloud Native Batch Computing with Volcano: Updates and Future&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;HAMi is under the Apache 2.0 license. See the &lt;a href="https://raw.githubusercontent.com/Project-HAMi/HAMi/master/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://star-history.com/#Project-HAMi/HAMi&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=Project-HAMi/HAMi&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>asternic/wuzapi</title>
      <link>https://github.com/asternic/wuzapi</link>
      <description>&lt;p&gt;Simple RESTful API for WhatsApp in Golang (using the Whatsmeow multi device library)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WUZAPI&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/asternic/wuzapi/main/static/favicon.ico" width="30" /&gt; WuzAPI is an implementation of the &lt;a href="https://github.com/tulir/whatsmeow"&gt;@tulir/whatsmeow&lt;/a&gt; library as a simple RESTful API service with multiple device support and concurrent sessions.&lt;/p&gt; 
&lt;p&gt;Whatsmeow does not use Puppeteer on headless Chrome, nor an Android emulator. It communicates directly with WhatsApp’s WebSocket servers, making it significantly faster and much less demanding on memory and CPU than those solutions. The drawback is that any changes to the WhatsApp protocol could break connections, requiring a library update.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;⚠&lt;/span&gt; Warning&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Using this software in violation of WhatsApp’s Terms of Service can get your number banned&lt;/strong&gt;:&lt;br /&gt; Be very careful—do not use this to send SPAM or anything similar. Use at your own risk. If you need to develop something for commercial purposes, contact a WhatsApp global solution provider and sign up for the WhatsApp Business API service instead.&lt;/p&gt; 
&lt;h2&gt;Available endpoints&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Session:&lt;/strong&gt; Connect, disconnect, and log out from WhatsApp. Retrieve connection status and QR codes for scanning.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Messages:&lt;/strong&gt; Send text, image, audio, document, template, video, sticker, location, contact, and poll messages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Users:&lt;/strong&gt; Check if phone numbers have WhatsApp, get user information and avatars, and retrieve the full contact list.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Chat:&lt;/strong&gt; Set presence (typing/paused, recording media), mark messages as read, download images from messages, send reactions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Groups:&lt;/strong&gt; Create, delete and list groups, get info, get invite links, set participants, change group photos and names.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Webhooks:&lt;/strong&gt; Set and get webhooks that will be called whenever events or messages are received.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Required:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go (Go Programming Language)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker (for containerization)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Updating dependencies&lt;/h2&gt; 
&lt;p&gt;This project uses the whatsmeow library to communicate with WhatsApp. To update the library to the latest version, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get -u go.mau.fi/whatsmeow@latest
go mod tidy
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Run&lt;/h2&gt; 
&lt;p&gt;By default it will start a REST service in port 8080. These are the parameters you can use to alter behaviour&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;-admintoken : sets authentication token for admin endpoints. If not specified it will be read from .env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;-address : sets the IP address to bind the server to (default 0.0.0.0)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;-port : sets the port number (default 8080)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;-logtype : format for logs, either console (default) or json&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;-color : enable colored output for console logs&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;-osname : Connection OS Name in Whatsapp&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;-skipmedia : Skip downloading media from messages&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;-wadebug : enable whatsmeow debug, either INFO or DEBUG levels are suported&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;-sslcertificate : SSL Certificate File&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;-sslprivatekey : SSL Private Key File&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;p&gt;To have colored logs:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./wuzapi -logtype=console -color=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For JSON logs:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./wuzapi -logtype json 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With time zone:&lt;/p&gt; 
&lt;p&gt;Set &lt;code&gt;TZ=America/New_York ./wuzapi ...&lt;/code&gt; in your shell or in your .env file or Docker Compose environment: &lt;code&gt;TZ=America/New_York&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;WuzAPI uses a &lt;code&gt;.env&lt;/code&gt; file for configuration. You can use the provided &lt;code&gt;.env.sample&lt;/code&gt; as a template:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cp .env.sample .env
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Environment Variables&lt;/h3&gt; 
&lt;h4&gt;Required Settings&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;WUZAPI_ADMIN_TOKEN=your_admin_token_here
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Database Configuration&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;For PostgreSQL:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;DB_USER=wuzapi
DB_PASSWORD=wuzapi
DB_NAME=wuzapi
DB_HOST=db  # Use 'db' when running with Docker Compose, or 'localhost' for native execution
DB_PORT=5432
DB_SSLMODE=false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;For SQLite (default):&lt;/strong&gt; No database configuration needed - SQLite is used by default if no PostgreSQL settings are provided.&lt;/p&gt; 
&lt;h4&gt;Optional Settings&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;TZ=America/New_York
WEBHOOK_FORMAT=json  # or "form" for the default
SESSION_DEVICE_NAME=WuzAPI
WUZAPI_PORT=8080     # Port for the WuzAPI server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RabbitMQ Integration&lt;/h3&gt; 
&lt;p&gt;WuzAPI supports sending WhatsApp events to a RabbitMQ queue for global event distribution. When enabled, all WhatsApp events will be published to the specified queue regardless of individual user webhook configurations.&lt;/p&gt; 
&lt;p&gt;Set these environment variables to enable RabbitMQ integration:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;RABBITMQ_URL=amqp://guest:guest@localhost:5672
RABBITMQ_QUEUE=whatsapp  # Optional (default: whatsapp_events)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When enabled:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All WhatsApp events (messages, presence updates, etc.) will be published to the configured queue regardless of event subscritions for regular webhooks&lt;/li&gt; 
 &lt;li&gt;Events will include the userId and instanceName&lt;/li&gt; 
 &lt;li&gt;This works alongside webhook configurations - events will be sent to both RabbitMQ and any configured webhooks&lt;/li&gt; 
 &lt;li&gt;The integration is global and affects all instances&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Key configuration options:&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;WUZAPI_ADMIN_TOKEN: Required - Authentication token for admin endpoints&lt;/li&gt; 
 &lt;li&gt;TZ: Optional - Timezone for server operations (default: UTC)&lt;/li&gt; 
 &lt;li&gt;PostgreSQL-specific options: Only required when using PostgreSQL backend&lt;/li&gt; 
 &lt;li&gt;RabbitMQ options: Optional, only required if you want to publish events to RabbitMQ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Docker Configuration&lt;/h3&gt; 
&lt;p&gt;When using Docker Compose, &lt;code&gt;docker-compose.yml&lt;/code&gt; automatically loads environment variables from a &lt;code&gt;.env&lt;/code&gt; file when available. However, &lt;code&gt;docker-compose-swarm.yaml&lt;/code&gt; uses &lt;code&gt;docker stack deploy&lt;/code&gt;, which does not automatically load from &lt;code&gt;.env&lt;/code&gt; files. Variables in the swarm file will only be substituted if they are exported in the shell environment where the deploy command is run. For managing secrets in Swarm, consider using Docker secrets.&lt;/p&gt; 
&lt;p&gt;The Docker configuration will:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;First load variables from the &lt;code&gt;.env&lt;/code&gt; file (if present and supported)&lt;/li&gt; 
 &lt;li&gt;Use default values as fallback if variables are not defined&lt;/li&gt; 
 &lt;li&gt;Override with any variables explicitly set in the &lt;code&gt;environment&lt;/code&gt; section of the compose file&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Key differences for Docker deployment:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set &lt;code&gt;DB_HOST=db&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt; to connect to the PostgreSQL container&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;WUZAPI_PORT&lt;/code&gt; variable controls the external port mapping in &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;In swarm mode, &lt;code&gt;WUZAPI_PORT&lt;/code&gt; configures the Traefik load balancer port&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;.env&lt;/code&gt; file is already included in &lt;code&gt;.gitignore&lt;/code&gt; to avoid committing sensitive information to your repository.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To interact with the API, you must include the &lt;code&gt;Authorization&lt;/code&gt; header in HTTP requests, containing the user's authentication token. You can have multiple users (different WhatsApp numbers) on the same server.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A Swagger API reference at &lt;a href="https://raw.githubusercontent.com/asternic/wuzapi/main/api"&gt;/api&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;A sample web page to connect and scan QR codes at &lt;a href="https://raw.githubusercontent.com/asternic/wuzapi/main/login"&gt;/login&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;A fully featured Dashboard to create, manage and test instances at &lt;a href="https://raw.githubusercontent.com/asternic/wuzapi/main/dashboard"&gt;/dashboard&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ADMIN Actions&lt;/h2&gt; 
&lt;p&gt;You can list, add and remove users using the admin endpoints. For that you must use the WUZAPI_ADMIN_TOKEN in the Authorization header&lt;/p&gt; 
&lt;p&gt;Then you can use the /admin/users endpoint with the Authorization header containing the token to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GET /admin/users&lt;/code&gt; - List all users&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POST /admin/users&lt;/code&gt; - Create a new user&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DELETE /admin/users/{id}&lt;/code&gt; - Remove a user&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The JSON body for creating a new user must contain:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; [string] : User's name&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;token&lt;/code&gt; [string] : Security token to authorize/authenticate this user&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;webhook&lt;/code&gt; [string] : URL to send events via POST (optional)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;events&lt;/code&gt; [string] : Comma-separated list of events to receive (required) - Valid events are: "Message", "ReadReceipt", "Presence", "HistorySync", "ChatPresence", "All"&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;expiration&lt;/code&gt; [int] : Expiration timestamp (optional, not enforced by the system)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;User Creation with Optional Proxy and S3 Configuration&lt;/h2&gt; 
&lt;p&gt;You can create a user with optional proxy and S3 storage configuration. All fields are optional and backward compatible. If you do not provide these fields, the user will be created with default settings.&lt;/p&gt; 
&lt;h3&gt;Example Payload&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": "test_user",
  "token": "user_token",
  "proxyConfig": {
    "enabled": true,
    "proxyURL": "socks5://user:pass@host:port"
  },
  "s3Config": {
    "enabled": true,
    "endpoint": "https://s3.amazonaws.com",
    "region": "us-east-1",
    "bucket": "my-bucket",
    "accessKey": "AKIAIOSFODNN7EXAMPLE",
    "secretKey": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
    "pathStyle": false,
    "publicURL": "https://cdn.yoursite.com",
    "mediaDelivery": "both",
    "retentionDays": 30
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;proxyConfig&lt;/code&gt; (object, optional): 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt; (boolean): Enable proxy for this user.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;proxyURL&lt;/code&gt; (string): Proxy URL (e.g., &lt;code&gt;socks5://user:pass@host:port&lt;/code&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;s3Config&lt;/code&gt; (object, optional): 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt; (boolean): Enable S3 storage for this user.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt; (string): S3 endpoint URL.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;region&lt;/code&gt; (string): S3 region.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;bucket&lt;/code&gt; (string): S3 bucket name.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;accessKey&lt;/code&gt; (string): S3 access key.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;secretKey&lt;/code&gt; (string): S3 secret key.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;pathStyle&lt;/code&gt; (boolean): Use path style addressing.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;publicURL&lt;/code&gt; (string): Public URL for accessing files.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mediaDelivery&lt;/code&gt; (string): Media delivery type (&lt;code&gt;base64&lt;/code&gt;, &lt;code&gt;s3&lt;/code&gt;, or &lt;code&gt;both&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;retentionDays&lt;/code&gt; (integer): Number of days to retain files.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you omit &lt;code&gt;proxyConfig&lt;/code&gt; or &lt;code&gt;s3Config&lt;/code&gt;, the user will be created without proxy or S3 integration, maintaining full backward compatibility.&lt;/p&gt; 
&lt;h2&gt;API reference&lt;/h2&gt; 
&lt;p&gt;API calls should be made with content type json, and parameters sent into the request body, always passing the Token header for authenticating the request.&lt;/p&gt; 
&lt;p&gt;Check the &lt;a href="https://github.com/asternic/wuzapi/raw/main/API.md"&gt;API Reference&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/asternic"&gt; &lt;img src="https://avatars.githubusercontent.com/u/25182694?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Nicolas/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Nicolas&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/guilhermejansen"&gt; &lt;img src="https://avatars.githubusercontent.com/u/52773109?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Guilherme" Jansen /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Guilherme Jansen&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/netrixken"&gt; &lt;img src="https://avatars.githubusercontent.com/u/9066682?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Netrix" Ken /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Netrix Ken&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/pedroafonso18"&gt; &lt;img src="https://avatars.githubusercontent.com/u/157052926?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Pedro" Afonso /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Pedro Afonso&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/RuanAyram"&gt; &lt;img src="https://avatars.githubusercontent.com/u/16547662?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Ruan" Kaylo /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Ruan Kaylo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/luizrgf2"&gt; &lt;img src="https://avatars.githubusercontent.com/u/71092163?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Luiz" Ricardo Gonçalves Felipe /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Luiz Ricardo Gonçalves Felipe&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/chrsmendes"&gt; &lt;img src="https://avatars.githubusercontent.com/u/77082167?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Christopher" Mendes /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Christopher Mendes&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/andreydruz"&gt; &lt;img src="https://avatars.githubusercontent.com/u/976438?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="andreydruz/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;andreydruz&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/ramon-victor"&gt; &lt;img src="https://avatars.githubusercontent.com/u/13617054?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="ramon-victor/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;ramon-victor&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/luiis716"&gt; &lt;img src="https://avatars.githubusercontent.com/u/97978347?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="luiis716/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;luiis716&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/joaosouz4dev"&gt; &lt;img src="https://avatars.githubusercontent.com/u/47183663?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="João" Victor Souza /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;João Victor Souza&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/gusnips"&gt; &lt;img src="https://avatars.githubusercontent.com/u/981265?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Gustavo" Salomé /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Gustavo Salomé &lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/anilgulecha"&gt; &lt;img src="https://avatars.githubusercontent.com/u/1016984?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Anil" Gulecha /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Anil Gulecha&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/AlanMartines"&gt; &lt;img src="https://avatars.githubusercontent.com/u/10979090?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Alan" Martines /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Alan Martines&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/DwiRizqiH"&gt; &lt;img src="https://avatars.githubusercontent.com/u/69355492?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Ahmad" Dwi Rizqi Hidayatulloh /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Ahmad Dwi Rizqi Hidayatulloh&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/elohmeier"&gt; &lt;img src="https://avatars.githubusercontent.com/u/2536303?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="elohmeier/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;elohmeier&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/fadlee"&gt; &lt;img src="https://avatars.githubusercontent.com/u/334797?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Fadlul" Alim /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Fadlul Alim&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/JobasFernandes"&gt; &lt;img src="https://avatars.githubusercontent.com/u/26033148?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Joseph" Fernandes /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Joseph Fernandes&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/renancesarti-cyber"&gt; &lt;img src="https://avatars.githubusercontent.com/u/235291917?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="renancesarti-cyber/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;renancesarti-cyber&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/ruben18salazar3"&gt; &lt;img src="https://avatars.githubusercontent.com/u/86245508?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Rubén" Salazar /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Rubén Salazar&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/ryanachdiadsyah"&gt; &lt;img src="https://avatars.githubusercontent.com/u/165612793?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Ryan" Achdiadsyah /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Ryan Achdiadsyah&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/ViFigueiredo"&gt; &lt;img src="https://avatars.githubusercontent.com/u/67883343?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="ViFigueiredo/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;ViFigueiredo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/cadao7"&gt; &lt;img src="https://avatars.githubusercontent.com/u/306330?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Ricardo" Maminhak /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Ricardo Maminhak&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/zennnez"&gt; &lt;img src="https://avatars.githubusercontent.com/u/3524740?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="zen/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;zen&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Clients&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gusnips/wuzapi-node"&gt;wuzapi TypeScript / Node Client&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#asternic/wuzapi&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=asternic/wuzapi&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright © 2025 Nicolás Gudiño and contributors&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://choosealicense.com/licenses/mit/"&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; 
&lt;h2&gt;Icon Attribution&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.flaticon.com/free-icons/communication"&gt;Communication icons created by Vectors Market - Flaticon&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Legal&lt;/h2&gt; 
&lt;p&gt;This code is in no way affiliated with, authorized, maintained, sponsored or endorsed by WhatsApp or any of its affiliates or subsidiaries. This is an independent and unofficial software. Use at your own risk.&lt;/p&gt; 
&lt;h2&gt;Cryptography Notice&lt;/h2&gt; 
&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href="http://www.wassenaar.org/"&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grpc/grpc-go</title>
      <link>https://github.com/grpc/grpc-go</link>
      <description>&lt;p&gt;The Go language implementation of gRPC. HTTP/2 based RPC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPC-Go&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/google.golang.org/grpc"&gt;&lt;img src="https://pkg.go.dev/badge/google.golang.org/grpc" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/grpc/grpc-go"&gt;&lt;img src="https://goreportcard.com/badge/grpc/grpc-go" alt="GoReportCard" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/grpc/grpc-go"&gt;&lt;img src="https://codecov.io/gh/grpc/grpc-go/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://golang.org"&gt;Go&lt;/a&gt; implementation of &lt;a href="https://grpc.io"&gt;gRPC&lt;/a&gt;: A high performance, open source, general RPC framework that puts mobile and HTTP/2 first. For more information see the &lt;a href="https://grpc.io/docs/languages/go"&gt;Go gRPC docs&lt;/a&gt;, or jump directly into the &lt;a href="https://grpc.io/docs/languages/go/quickstart"&gt;quick start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://golang.org"&gt;Go&lt;/a&gt;&lt;/strong&gt;: any one of the &lt;strong&gt;two latest major&lt;/strong&gt; &lt;a href="https://golang.org/doc/devel/release.html"&gt;releases&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Simply add the following import to your code, and then &lt;code&gt;go [build|run|test]&lt;/code&gt; will automatically fetch the necessary dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "google.golang.org/grpc"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are trying to access &lt;code&gt;grpc-go&lt;/code&gt; from &lt;strong&gt;China&lt;/strong&gt;, see the &lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/#FAQ"&gt;FAQ&lt;/a&gt; below.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Learn more&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grpc.io/docs/languages/go"&gt;Go gRPC docs&lt;/a&gt;, which include a &lt;a href="https://grpc.io/docs/languages/go/quickstart"&gt;quick start&lt;/a&gt; and &lt;a href="https://pkg.go.dev/google.golang.org/grpc"&gt;API reference&lt;/a&gt; among other resources&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/Documentation"&gt;Low-level technical docs&lt;/a&gt; from this repository&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5180705743044608"&gt;Performance benchmark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/CONTRIBUTING.md"&gt;Contribution guidelines&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;I/O Timeout Errors&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;golang.org&lt;/code&gt; domain may be blocked from some countries. &lt;code&gt;go get&lt;/code&gt; usually produces an error like the following when this happens:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ go get -u google.golang.org/grpc
package google.golang.org/grpc: unrecognized import path "google.golang.org/grpc" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build Go code, there are several options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Set up a VPN and access google.golang.org through that.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;With Go module support: it is possible to use the &lt;code&gt;replace&lt;/code&gt; feature of &lt;code&gt;go mod&lt;/code&gt; to create aliases for golang.org packages. In your project's directory:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;go mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest
go mod tidy
go mod vendor
go build -mod=vendor
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, this will need to be done for all transitive dependencies hosted on golang.org as well. For details, refer to &lt;a href="https://github.com/golang/go/issues/28652"&gt;golang/go issue #28652&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compiling error, undefined: grpc.SupportPackageIsVersion&lt;/h3&gt; 
&lt;p&gt;Please update to the latest version of gRPC-Go using &lt;code&gt;go get google.golang.org/grpc&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;How to turn on logging&lt;/h3&gt; 
&lt;p&gt;The default logger is controlled by environment variables. Turn everything on like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99
$ export GRPC_GO_LOG_SEVERITY_LEVEL=info
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The RPC failed with error &lt;code&gt;"code = Unavailable desc = transport is closing"&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This error means the connection the RPC is using was closed, and there are many possible reasons, including:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;mis-configured transport credentials, connection failed on handshaking&lt;/li&gt; 
 &lt;li&gt;bytes disrupted, possibly by a proxy in between&lt;/li&gt; 
 &lt;li&gt;server shutdown&lt;/li&gt; 
 &lt;li&gt;Keepalive parameters caused connection shutdown, for example if you have configured your server to terminate connections regularly to &lt;a href="https://github.com/grpc/grpc-go/issues/3170#issuecomment-552517779"&gt;trigger DNS lookups&lt;/a&gt;. If this is the case, you may want to increase your &lt;a href="https://pkg.go.dev/google.golang.org/grpc/keepalive?tab=doc#ServerParameters"&gt;MaxConnectionAgeGrace&lt;/a&gt;, to allow longer RPC calls to finish.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;It can be tricky to debug this because the error happens on the client side but the root cause of the connection being closed is on the server side. Turn on logging on &lt;strong&gt;both client and server&lt;/strong&gt;, and see if there are any transport errors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker/model-runner</title>
      <link>https://github.com/docker/model-runner</link>
      <description>&lt;p&gt;Docker Model Runner&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker Model Runner&lt;/h1&gt; 
&lt;p&gt;Docker Model Runner (DMR) makes it easy to manage, run, and deploy AI models using Docker. Designed for developers, Docker Model Runner streamlines the process of pulling, running, and serving large language models (LLMs) and other AI models directly from Docker Hub or any OCI-compliant registry.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This package supports the Docker Model Runner in Docker Desktop and Docker Engine.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;For macOS and Windows, install Docker Desktop:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.docker.com/desktop/"&gt;https://docs.docker.com/desktop/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For Linux, install Docker Engine:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -fsSL https://get.docker.com | sudo bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Docker Model Runner is included in the above tools.&lt;/p&gt; 
&lt;p&gt;For more details refer to:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.docker.com/ai/model-runner/get-started/"&gt;https://docs.docker.com/ai/model-runner/get-started/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;Before building from source, ensure you have the following installed:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Go 1.24+&lt;/strong&gt; - Required for building both model-runner and model-cli&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; - For cloning repositories&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Make&lt;/strong&gt; - For using the provided Makefiles&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt; (optional) - For building and running containerized versions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CGO dependencies&lt;/strong&gt; - Required for model-runner's GPU support: 
  &lt;ul&gt; 
   &lt;li&gt;On macOS: Xcode Command Line Tools (&lt;code&gt;xcode-select --install&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;On Linux: gcc/g++ and development headers&lt;/li&gt; 
   &lt;li&gt;On Windows: MinGW-w64 or Visual Studio Build Tools&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building the Complete Stack&lt;/h3&gt; 
&lt;h4&gt;Step 1: Clone and Build model-runner (Server/Daemon)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone the model-runner repository
git clone https://github.com/docker/model-runner.git
cd model-runner

# Build the model-runner binary
make build

# Or build with specific backend arguments
make run LLAMA_ARGS="--verbose --jinja -ngl 999 --ctx-size 2048"

# Run tests to verify the build
make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;model-runner&lt;/code&gt; binary will be created in the current directory. This is the backend server that manages models.&lt;/p&gt; 
&lt;h4&gt;Step 2: Build model-cli (Client)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# From the root directory, navigate to the model-cli directory
cd cmd/cli

# Build the CLI binary
make build

# The binary will be named 'model-cli'
# Optionally, install it as a Docker CLI plugin
make install  # This will link it to ~/.docker/cli-plugins/docker-model
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing the Complete Stack End-to-End&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We use port 13434 in these examples to avoid conflicts with Docker Desktop's built-in Model Runner, which typically runs on port 12434.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Option 1: Local Development (Recommended for Contributors)&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Start model-runner in one terminal:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd model-runner
MODEL_RUNNER_PORT=13434 ./model-runner
# The server will start on port 13434
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;&lt;strong&gt;Use model-cli in another terminal:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd cmd/cli
# List available models (connecting to port 13434)
MODEL_RUNNER_HOST=http://localhost:13434 ./model-cli list

# Pull and run a model
MODEL_RUNNER_HOST=http://localhost:13434 ./model-cli run ai/smollm2 "Hello, how are you?" 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Option 2: Using Docker&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Build and run model-runner in Docker:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd model-runner
make docker-build
make docker-run PORT=13434 MODELS_PATH=/path/to/models
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;&lt;strong&gt;Connect with model-cli:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd cmd/cli
MODEL_RUNNER_HOST=http://localhost:13434 ./model-cli list
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Additional Resources&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/desktop/features/model-runner/"&gt;Model Runner Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/docker/model-runner/main/cmd/cli/README.md"&gt;Model CLI README&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/docker/model-spec/raw/main/spec.md"&gt;Model Specification&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://app.slack.com/client/T0JK1PCN6/C09H9P5E57B"&gt;Community Slack Channel&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Using the Makefile&lt;/h2&gt; 
&lt;p&gt;This project includes a Makefile to simplify common development tasks. It requires Docker Desktop &amp;gt;= 4.41.0 The Makefile provides the following targets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;build&lt;/code&gt; - Build the Go application&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;run&lt;/code&gt; - Run the application locally&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;clean&lt;/code&gt; - Clean build artifacts&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;test&lt;/code&gt; - Run tests&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;docker-build&lt;/code&gt; - Build the Docker image&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;docker-run&lt;/code&gt; - Run the application in a Docker container with TCP port access and mounted model storage&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;help&lt;/code&gt; - Show available targets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Running in Docker&lt;/h3&gt; 
&lt;p&gt;The application can be run in Docker with the following features enabled by default:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;TCP port access (default port 8080)&lt;/li&gt; 
 &lt;li&gt;Persistent model storage in a local &lt;code&gt;models&lt;/code&gt; directory&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Run with default settings
make docker-run

# Customize port and model storage location
make docker-run PORT=3000 MODELS_PATH=/path/to/your/models
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create a &lt;code&gt;models&lt;/code&gt; directory in your current working directory (or use the specified path)&lt;/li&gt; 
 &lt;li&gt;Mount this directory into the container&lt;/li&gt; 
 &lt;li&gt;Start the service on port 8080 (or the specified port)&lt;/li&gt; 
 &lt;li&gt;All models downloaded will be stored in the host's &lt;code&gt;models&lt;/code&gt; directory and will persist between container runs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;llama.cpp integration&lt;/h3&gt; 
&lt;p&gt;The Docker image includes the llama.cpp server binary from the &lt;code&gt;docker/docker-model-backend-llamacpp&lt;/code&gt; image. You can specify the version of the image to use by setting the &lt;code&gt;LLAMA_SERVER_VERSION&lt;/code&gt; variable. Additionally, you can configure the target OS, architecture, and acceleration type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Build with a specific llama.cpp server version
make docker-build LLAMA_SERVER_VERSION=v0.0.4

# Specify all parameters
make docker-build LLAMA_SERVER_VERSION=v0.0.4 LLAMA_SERVER_VARIANT=cpu
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Default values:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;LLAMA_SERVER_VERSION&lt;/code&gt;: latest&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;LLAMA_SERVER_VARIANT&lt;/code&gt;: cpu&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The binary path in the image follows this pattern: &lt;code&gt;/com.docker.llama-server.native.linux.${LLAMA_SERVER_VARIANT}.${TARGETARCH}&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;API Examples&lt;/h2&gt; 
&lt;p&gt;The Model Runner exposes a REST API that can be accessed via TCP port. You can interact with it using curl commands.&lt;/p&gt; 
&lt;h3&gt;Using the API&lt;/h3&gt; 
&lt;p&gt;When running with &lt;code&gt;docker-run&lt;/code&gt;, you can use regular HTTP requests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# List all available models
curl http://localhost:8080/models

# Create a new model
curl http://localhost:8080/models/create -X POST -d '{"from": "ai/smollm2"}'

# Get information about a specific model
curl http://localhost:8080/models/ai/smollm2

# Chat with a model
curl http://localhost:8080/engines/llama.cpp/v1/chat/completions -X POST -d '{
  "model": "ai/smollm2",
  "messages": [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Hello, how are you?"}
  ]
}'

# Delete a model
curl http://localhost:8080/models/ai/smollm2 -X DELETE

# Get metrics
curl http://localhost:8080/metrics
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The response will contain the model's reply:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "id": "chat-12345",
  "object": "chat.completion",
  "created": 1682456789,
  "model": "ai/smollm2",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "I'm doing well, thank you for asking! How can I assist you today?"
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 24,
    "completion_tokens": 16,
    "total_tokens": 40
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Metrics&lt;/h2&gt; 
&lt;p&gt;The Model Runner exposes &lt;a href="https://github.com/ggml-org/llama.cpp/tree/master/tools/server#get-metrics-prometheus-compatible-metrics-exporter"&gt;the metrics endpoint&lt;/a&gt; of llama.cpp server at the &lt;code&gt;/metrics&lt;/code&gt; endpoint. This allows you to monitor model performance, request statistics, and resource usage.&lt;/p&gt; 
&lt;h3&gt;Accessing Metrics&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Get metrics in Prometheus format
curl http://localhost:8080/metrics
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Enable metrics (default)&lt;/strong&gt;: Metrics are enabled by default&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Disable metrics&lt;/strong&gt;: Set &lt;code&gt;DISABLE_METRICS=1&lt;/code&gt; environment variable&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Monitoring integration&lt;/strong&gt;: Add the endpoint to your Prometheus configuration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check &lt;a href="https://raw.githubusercontent.com/docker/model-runner/main/METRICS.md"&gt;METRICS.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Kubernetes&lt;/h2&gt; 
&lt;p&gt;Experimental support for running in Kubernetes is available in the form of &lt;a href="https://raw.githubusercontent.com/docker/model-runner/main/charts/docker-model-runner/README.md"&gt;a Helm chart and static YAML&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are interested in a specific Kubernetes use-case, please start a discussion on the issue tracker.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;For general questions and discussion, please use &lt;a href="https://app.slack.com/client/T0JK1PCN6/C09H9P5E57B"&gt;Docker Model Runner's Slack channel&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For discussions about issues/bugs and features, you can use GitHub Issues and Pull requests.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spf13/viper</title>
      <link>https://github.com/spf13/viper</link>
      <description>&lt;p&gt;Go configuration with fangs&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;h2&gt;Viper v2 Feedback&lt;/h2&gt; 
 &lt;p&gt;Viper is heading towards v2 and we would love to hear what &lt;em&gt;&lt;strong&gt;you&lt;/strong&gt;&lt;/em&gt; would like to see in it. Share your thoughts here: &lt;a href="https://forms.gle/R6faU74qPRPAzchZ9"&gt;https://forms.gle/R6faU74qPRPAzchZ9&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/acae9193-2974-41f3-808d-2d433f5ada5e" alt="viper logo" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/avelino/awesome-go#configuration"&gt;&lt;img src="https://awesome.re/mentioned-badge-flat.svg?sanitize=true" alt="Mentioned in Awesome Go" /&gt;&lt;/a&gt; &lt;a href="https://repl.it/@sagikazarmark/Viper-example#main.go"&gt;&lt;img src="https://repl.it/badge/github/sagikazarmark/Viper-example" alt="run on repl.it" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/spf13/viper/actions?query=workflow%3ACI"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/spf13/viper/ci.yaml?branch=master&amp;amp;style=flat-square" alt="GitHub Workflow Status" /&gt;&lt;/a&gt; &lt;a href="https://gitter.im/spf13/viper?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/Join%20Chat.svg?sanitize=true" alt="Join the chat at https://gitter.im/spf13/viper" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/spf13/viper"&gt;&lt;img src="https://goreportcard.com/badge/github.com/spf13/viper?style=flat-square" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/go%20version-%3E=1.23-61CFDD.svg?style=flat-square" alt="Go Version" /&gt; &lt;a href="https://pkg.go.dev/mod/github.com/spf13/viper"&gt;&lt;img src="https://pkg.go.dev/badge/mod/github.com/spf13/viper" alt="PkgGoDev" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Go configuration with fangs!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Many Go projects are built using Viper including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="http://gohugo.io"&gt;Hugo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://rexray.readthedocs.org/en/stable/"&gt;EMC RexRay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Imgur/incus"&gt;Imgur’s Incus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nanobox-io/nanobox"&gt;Nanobox&lt;/a&gt;/&lt;a href="https://github.com/nanopack"&gt;Nanopack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/docker/Notary"&gt;Docker Notary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.bloomapi.com/"&gt;BloomApi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/digitalocean/doctl"&gt;doctl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jgsqware/clairctl"&gt;Clairctl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mercure.rocks"&gt;Mercure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meshery/meshery"&gt;Meshery&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bearer/bearer"&gt;Bearer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/coder/coder"&gt;Coder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://vitess.io/"&gt;Vitess&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;go get github.com/spf13/viper
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Viper uses &lt;a href="https://go.dev/wiki/Modules"&gt;Go Modules&lt;/a&gt; to manage dependencies.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Why use Viper?&lt;/h2&gt; 
&lt;p&gt;Viper is a complete configuration solution for Go applications including &lt;a href="https://12factor.net/#the_twelve_factors"&gt;12-Factor apps&lt;/a&gt;. It is designed to work within any application, and can handle all types of configuration needs and formats. It supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;setting defaults&lt;/li&gt; 
 &lt;li&gt;setting explicit values&lt;/li&gt; 
 &lt;li&gt;reading config files&lt;/li&gt; 
 &lt;li&gt;dynamic discovery of config files across multiple locations&lt;/li&gt; 
 &lt;li&gt;reading from environment variables&lt;/li&gt; 
 &lt;li&gt;reading from remote systems (e.g. Etcd or Consul)&lt;/li&gt; 
 &lt;li&gt;reading from command line flags&lt;/li&gt; 
 &lt;li&gt;reading from buffers&lt;/li&gt; 
 &lt;li&gt;live watching and updating configuration&lt;/li&gt; 
 &lt;li&gt;aliasing configuration keys for easy refactoring&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Viper can be thought of as a registry for all of your applications' configuration needs.&lt;/p&gt; 
&lt;h2&gt;Putting Values in Viper&lt;/h2&gt; 
&lt;p&gt;Viper can read from multiple configuration sources and merges them together into one set of configuration keys and values.&lt;/p&gt; 
&lt;p&gt;Viper uses the following precedence for merging:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;explicit call to &lt;code&gt;Set&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;flags&lt;/li&gt; 
 &lt;li&gt;environment variables&lt;/li&gt; 
 &lt;li&gt;config files&lt;/li&gt; 
 &lt;li&gt;external key/value stores&lt;/li&gt; 
 &lt;li&gt;defaults&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Viper configuration keys are case insensitive.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Reading Config Files&lt;/h3&gt; 
&lt;p&gt;Viper requires minimal configuration to load config files. Viper currently supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;JSON&lt;/li&gt; 
 &lt;li&gt;TOML&lt;/li&gt; 
 &lt;li&gt;YAML&lt;/li&gt; 
 &lt;li&gt;INI&lt;/li&gt; 
 &lt;li&gt;envfile&lt;/li&gt; 
 &lt;li&gt;Java Propeties&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A single Viper instance only supports a single configuration file, but multiple paths may be searched for one.&lt;/p&gt; 
&lt;p&gt;Here is an example of how to use Viper to search for and read a configuration file. At least one path should be provided where a configuration file is expected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Name of the config file without an extension (Viper will intuit the type
// from an extension on the actual file)
viper.SetConfigName("config")

// Add search paths to find the file
viper.AddConfigPath("/etc/appname/")
viper.AddConfigPath("$HOME/.appname")
viper.AddConfigPath(".")

// Find and read the config file
err := viper.ReadInConfig()

// Handle errors
if err != nil {
	panic(fmt.Errorf("fatal error config file: %w", err))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can handle the specific case where no config file is found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var fileLookupError viper.FileLookupError
if err := viper.ReadInConfig(); err != nil {
    if errors.As(err, &amp;amp;fileLookupError) {
        // Indicates an explicitly set config file is not found (such as with
        // using `viper.SetConfigFile`) or that no config file was found in
        // any search path (such as when using `viper.AddConfigPath`)
    } else {
        // Config file was found but another error was produced
    }
}

// Config file found and successfully parsed
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE (since 1.6)&lt;/strong&gt; You can also have a file without an extension and specify the format programmatically, which is useful for files that naturally have no extension (e.g., &lt;code&gt;.bashrc&lt;/code&gt;).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Writing Config Files&lt;/h3&gt; 
&lt;p&gt;At times you may want to store all configuration modifications made during run time.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Writes current config to the path set by `AddConfigPath` and `SetConfigName`
viper.WriteConfig()
viper.SafeWriteConfig() // Like the above, but will error if the config file exists

// Writes current config to a specific place
viper.WriteConfigAs("/path/to/my/.config")

// Will error since it has already been written
viper.SafeWriteConfigAs("/path/to/my/.config")

viper.SafeWriteConfigAs("/path/to/my/.other_config")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a rule of the thumb, methods prefixed with &lt;code&gt;Safe&lt;/code&gt; won't overwrite any existing file, while other methods will.&lt;/p&gt; 
&lt;h3&gt;Watching and Re-reading Config Files&lt;/h3&gt; 
&lt;p&gt;Gone are the days of needing to restart a server to have a config take effect--Viper powered applications can read an update to a config file while running and not miss a beat.&lt;/p&gt; 
&lt;p&gt;It's also possible to provide a function for Viper to run each time a change occurs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// All config paths must be defined prior to calling `WatchConfig()`
viper.AddConfigPath("$HOME/.appname")

viper.OnConfigChange(func(e fsnotify.Event) {
	fmt.Println("Config file changed:", e.Name)
})

viper.WatchConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Reading Config from &lt;code&gt;io.Reader&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Viper predefines many configuration sources but you can also implement your own required configuration source.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.SetConfigType("yaml")

var yamlExample = []byte(`
hacker: true
hobbies:
- skateboarding
- snowboarding
- go
name: steve
`)

viper.ReadConfig(bytes.NewBuffer(yamlExample))

viper.Get("name") // "steve"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Setting Defaults&lt;/h3&gt; 
&lt;p&gt;A good configuration system will support default values, which are used if a key hasn't been set in some other way.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.SetDefault("ContentDir", "content")
viper.SetDefault("LayoutDir", "layouts")
viper.SetDefault("Taxonomies", map[string]string{"tag": "tags", "category": "categories"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Setting Overrides&lt;/h3&gt; 
&lt;p&gt;Viper allows explict setting of configuration, such as from your own application logic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.Set("verbose", true)
viper.Set("host.port", 5899) // Set an embedded key
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Registering and Using Aliases&lt;/h3&gt; 
&lt;p&gt;Aliases permit a single value to be referenced by multiple keys&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.RegisterAlias("loud", "Verbose")

viper.Set("verbose", true) // Same result as next line
viper.Set("loud", true)    // Same result as prior line

viper.GetBool("loud")    // true
viper.GetBool("verbose") // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Working with Environment Variables&lt;/h3&gt; 
&lt;p&gt;Viper has full support for environment variables.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Unlike other configuration sources, environment variables are case sensitive.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Tells Viper to use this prefix when reading environment variables
viper.SetEnvPrefix("spf")

// Viper will look for "SPF_ID", automatically uppercasing the prefix and key
viper.BindEnv("id")

// Alternatively, we can search for any environment variable prefixed and load
// them in
viper.AutomaticEnv()

os.Setenv("SPF_ID", "13")

id := viper.Get("id") // 13
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;By default, empty environment variables are considered unset and will fall back to the next configuration source, unless &lt;code&gt;AllowEmptyEnv&lt;/code&gt; is used.&lt;/li&gt; 
 &lt;li&gt;Viper does not "cache" environment variables--the value will be read each time it is accessed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SetEnvKeyReplacer&lt;/code&gt; and &lt;code&gt;EnvKeyReplacer&lt;/code&gt; allow you to rewrite environment variable keys, which is useful to merge SCREAMING_SNAKE_CASE environment variables with kebab-cased configuration values from other sources.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Working with Flags&lt;/h3&gt; 
&lt;p&gt;Viper has the ability to bind to flags. Specifically, Viper supports &lt;a href="https://github.com/spf13/pflag/"&gt;pflag&lt;/a&gt; as used in the &lt;a href="https://github.com/spf13/cobra"&gt;Cobra&lt;/a&gt; library.&lt;/p&gt; 
&lt;p&gt;Like environment variables, the value is not set when the binding method is called, but when it is accessed.&lt;/p&gt; 
&lt;p&gt;For individual flags, the &lt;code&gt;BindPFlag&lt;/code&gt; method provides this functionality.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;serverCmd.Flags().Int("port", 1138, "Port to run Application server on")

viper.BindPFlag("port", serverCmd.Flags().Lookup("port"))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also bind an existing set of pflags.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;pflag.Int("flagname", 1234, "help message for flagname")
pflag.Parse()

viper.BindPFlags(pflag.CommandLine)

i := viper.GetInt("flagname") // Retrieve values from viper instead of pflag
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The standard library &lt;a href="https://golang.org/pkg/flag/"&gt;flag&lt;/a&gt; package is not directly supported, but may be parsed through pflag.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"flag"

	"github.com/spf13/pflag"
)

func main() {
	// Using standard library "flag" package
	flag.Int("flagname", 1234, "help message for flagname")

    // Pass standard library flags to pflag
	pflag.CommandLine.AddGoFlagSet(flag.CommandLine)
	pflag.Parse()

    // Viper takes over
	viper.BindPFlags(pflag.CommandLine)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use of pflag may be avoided entirely by implementing the &lt;code&gt;FlagValue&lt;/code&gt; and &lt;code&gt;FlagValueSet&lt;/code&gt; interfaces.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Implementing FlagValue

type myFlag struct {}
func (f myFlag) HasChanged() bool { return false }
func (f myFlag) Name() string { return "my-flag-name" }
func (f myFlag) ValueString() string { return "my-flag-value" }
func (f myFlag) ValueType() string { return "string" }

viper.BindFlagValue("my-flag-name", myFlag{})

// Implementing FlagValueSet

type myFlagSet struct {
	flags []myFlag
}
func (f myFlagSet) VisitAll(fn func(FlagValue)) {
	for _, flag := range flags {
		fn(flag)
	}
}

fSet := myFlagSet{
	flags: []myFlag{myFlag{}, myFlag{}},
}
viper.BindFlagValues("my-flags", fSet)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remote Key/Value Store Support&lt;/h3&gt; 
&lt;p&gt;To enable remote support in Viper, do a blank import of the &lt;code&gt;viper/remote&lt;/code&gt; package.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import _ "github.com/spf13/viper/remote"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Viper supports the following remote key/value stores. Examples for each are provided below.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Etcd and Etcd3&lt;/li&gt; 
 &lt;li&gt;Consul&lt;/li&gt; 
 &lt;li&gt;Firestore&lt;/li&gt; 
 &lt;li&gt;NATS&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Viper will read a config string retrieved from a path in a key/value store.&lt;/p&gt; 
&lt;p&gt;Viper supports multiple hosts separated by &lt;code&gt;;&lt;/code&gt;. For example: &lt;code&gt;http://127.0.0.1:4001;http://127.0.0.1:4002&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Encryption&lt;/h4&gt; 
&lt;p&gt;Viper uses &lt;a href="https://github.com/sagikazarmark/crypt"&gt;crypt&lt;/a&gt; to retrieve configuration from the key/value store, which means that you can store your configuration values encrypted and have them automatically decrypted if you have the correct GPG keyring. Encryption is optional.&lt;/p&gt; 
&lt;p&gt;Crypt has a command-line helper that you can use to put configurations in your key/value store.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ go get github.com/sagikazarmark/crypt/bin/crypt
$ crypt set -plaintext /config/hugo.json /Users/hugo/settings/config.json
$ crypt get -plaintext /config/hugo.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the Crypt documentation for examples of how to set encrypted values, or how to use Consul.&lt;/p&gt; 
&lt;h3&gt;Remote Key/Value Store Examples (Unencrypted)&lt;/h3&gt; 
&lt;h4&gt;etcd&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("etcd", "http://127.0.0.1:4001","/config/hugo.json")
viper.SetConfigType("json") // because there is no file extension in a stream of bytes, supported extensions are "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;etcd3&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("etcd3", "http://127.0.0.1:4001","/config/hugo.json")
viper.SetConfigType("json") // because there is no file extension in a stream of bytes, supported extensions are "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Consul&lt;/h4&gt; 
&lt;p&gt;Given a Consul key &lt;code&gt;MY_CONSUL_KEY&lt;/code&gt; with the value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "port": 8080,
    "hostname": "myhostname.com"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("consul", "localhost:8500", "MY_CONSUL_KEY")
viper.SetConfigType("json") // Need to explicitly set this to json
err := viper.ReadRemoteConfig()

fmt.Println(viper.Get("port")) // 8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Firestore&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("firestore", "google-cloud-project-id", "collection/document")
viper.SetConfigType("json") // Config's format: "json", "toml", "yaml", "yml"
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, you're allowed to use &lt;code&gt;SecureRemoteProvider&lt;/code&gt; also.&lt;/p&gt; 
&lt;h4&gt;NATS&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("nats", "nats://127.0.0.1:4222", "myapp.config")
viper.SetConfigType("json")
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remote Key/Value Store Examples (Encrypted)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddSecureRemoteProvider("etcd","http://127.0.0.1:4001","/config/hugo.json","/etc/secrets/mykeyring.gpg")
viper.SetConfigType("json") // because there is no file extension in a stream of bytes,  supported extensions are "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Watching Key/Value Store Changes&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Alternatively, you can create a new viper instance
var runtime_viper = viper.New()

runtime_viper.AddRemoteProvider("etcd", "http://127.0.0.1:4001", "/config/hugo.yml")
runtime_viper.SetConfigType("yaml") // because there is no file extension in a stream of bytes, supported extensions are "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"

// Read from remote config the first time
err := runtime_viper.ReadRemoteConfig()

// Unmarshal config
runtime_viper.Unmarshal(&amp;amp;runtime_conf)

// Open a goroutine to watch remote changes forever
go func(){
	for {
		time.Sleep(time.Second * 5) // delay after each request

		// Currently, only tested with Etcd support
		err := runtime_viper.WatchRemoteConfig()
		if err != nil {
			log.Errorf("unable to read remote config: %v", err)
			continue
		}

		// Unmarshal new config into our runtime config struct
		runtime_viper.Unmarshal(&amp;amp;runtime_conf)
	}
}()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Values From Viper&lt;/h2&gt; 
&lt;p&gt;The simplest way to retrieve configuration values from Viper is to use &lt;code&gt;Get*&lt;/code&gt; functions. &lt;code&gt;Get&lt;/code&gt; will return an any type, but specific types may be retrieved with &lt;code&gt;Get&amp;lt;Type&amp;gt;&lt;/code&gt; functions.&lt;/p&gt; 
&lt;p&gt;Note that each &lt;code&gt;Get*&lt;/code&gt; function will return a zero value if it’s key is not found. To check if a key exists, use the &lt;code&gt;IsSet&lt;/code&gt; method.&lt;/p&gt; 
&lt;p&gt;Nested keys use &lt;code&gt;.&lt;/code&gt; as a delimiter and numbers for array indexes. Given the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsonc"&gt;{
    "datastore": {
        "metric": {
            "host": "127.0.0.1",
            "ports": [
                5799,
                6029
            ]
        }
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;GetString("datastore.metric.host") // "127.0.0.1"
GetInt("host.ports.1") // 6029
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Viper &lt;em&gt;does not&lt;/em&gt; deep merge configuration values. Complex values that are overridden will be entirely replaced.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If there exists a key that matches the delimited key path, its value will be returned instead.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsonc"&gt;{
    "datastore.metric.host": "0.0.0.0",
    "datastore": {
        "metric": {
            "host": "127.0.0.1"
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;GetString("datastore.metric.host") // "0.0.0.0"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration Subsets&lt;/h3&gt; 
&lt;p&gt;It's often useful to extract a subset of configuration (e.g., when developing a reusable module which should accept specific sections of configuration).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;cache:
  cache1:
    item-size: 64
    max-items: 100
  cache2:
    item-size: 80
    max-items: 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func NewCache(v *Viper) *Cache {
	return &amp;amp;Cache{
		ItemSize: v.GetInt("item-size"),
		MaxItems: v.GetInt("max-items"),
	}
}

cache1Config := viper.Sub("cache.cache1")

if cache1Config == nil {
    // Sub returns nil if the key cannot be found
	panic("cache configuration not found")
}

cache1 := NewCache(cache1Config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Unmarshaling&lt;/h3&gt; 
&lt;p&gt;You also have the option of unmarshaling configuration to a struct, map, etc., using &lt;code&gt;Unmarshal*&lt;/code&gt; methods.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type config struct {
	Port int
	Name string
	PathMap string `mapstructure:"path_map"`
}

var C config

err := viper.Unmarshal(&amp;amp;C)
if err != nil {
	t.Fatalf("unable to decode into struct, %v", err)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to unmarshal configuration where the keys themselves contain &lt;code&gt;.&lt;/code&gt; (the default key delimiter), you can change the delimiter.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;v := viper.NewWithOptions(viper.KeyDelimiter("::"))

v.SetDefault("chart::values", map[string]any{
	"ingress": map[string]any{
		"annotations": map[string]any{
			"traefik.frontend.rule.type":                 "PathPrefix",
			"traefik.ingress.kubernetes.io/ssl-redirect": "true",
		},
	},
})

type config struct {
	Chart struct{
		Values map[string]any
	}
}

var C config

v.Unmarshal(&amp;amp;C)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Viper also supports unmarshaling into embedded structs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;/*
Example config:

module:
    enabled: true
    token: 89h3f98hbwf987h3f98wenf89ehf
*/
type config struct {
	Module struct {
		Enabled bool

		moduleConfig `mapstructure:",squash"`
	}
}

type moduleConfig struct {
	Token string
}

var C config

err := viper.Unmarshal(&amp;amp;C)
if err != nil {
	t.Fatalf("unable to decode into struct, %v", err)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Viper uses &lt;a href="https://github.com/go-viper/mapstructure"&gt;github.com/go-viper/mapstructure&lt;/a&gt; under the hood for unmarshaling values which uses &lt;code&gt;mapstructure&lt;/code&gt; tags, by default.&lt;/p&gt; 
&lt;h3&gt;Marshalling to String&lt;/h3&gt; 
&lt;p&gt;You may need to marshal all the settings held in Viper into a string. You can use your favorite format's marshaller with the config returned by &lt;code&gt;AllSettings&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	yaml "go.yaml.in/yaml/v3"
)

func yamlStringSettings() string {
	c := viper.AllSettings()
	bs, err := yaml.Marshal(c)
	if err != nil {
		log.Fatalf("unable to marshal config to YAML: %v", err)
	}
	return string(bs)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Decoding Custom Formats&lt;/h3&gt; 
&lt;p&gt;A frequently requested feature is adding more value formats and decoders (for example; parsing character delimited strings into slices. This is already available in Viper using mapstructure decode hooks.&lt;/p&gt; 
&lt;p&gt;Read more in &lt;a href="https://sagikazarmark.hu/blog/decoding-custom-formats-with-viper/"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Why is it called “Viper”?&lt;/h3&gt; 
&lt;p&gt;Viper is designed to be a &lt;a href="http://en.wikipedia.org/wiki/Viper_(G.I._Joe)"&gt;companion&lt;/a&gt; to &lt;a href="https://github.com/spf13/cobra"&gt;Cobra&lt;/a&gt;. While both can operate completely independently, together they make a powerful pair to handle much of your application foundation needs.&lt;/p&gt; 
&lt;h3&gt;I found a bug or want a feature, should I file an issue or a PR?&lt;/h3&gt; 
&lt;p&gt;Yes, but there are two things to be aware of.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The Viper project is currently prioritizing backwards compatibility and stability over features.&lt;/li&gt; 
 &lt;li&gt;Features may be deferred until Viper 2 forms.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Can multiple Viper instances be used?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; Yes.&lt;/p&gt; 
&lt;p&gt;Each will have its own unique configuration and can read from a different configuration source. All of the functions that the Viper package supports are mirrored as methods on a Viper instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;x := viper.New()
y := viper.New()

x.SetDefault("ContentDir", "content")
y.SetDefault("ContentDir", "foobar")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Should Viper be a global singleton or passed around?&lt;/h3&gt; 
&lt;p&gt;The best practice is to initialize a Viper instance and pass that around when necessary.&lt;/p&gt; 
&lt;p&gt;Viper comes with a global instance (singleton) out of the box. Although it makes setting up configuration easy, using it is generally discouraged as it makes testing harder and can lead to unexpected behavior.&lt;/p&gt; 
&lt;p&gt;The global instance may be deprecated in the future. See &lt;a href="https://github.com/spf13/viper/issues/1855"&gt;#1855&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;Does Viper support case sensitive keys?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; No.&lt;/p&gt; 
&lt;p&gt;Viper merges configuration from various sources, many of which are either case insensitive or use different casing than other sources (e.g., env vars). In order to provide the best experience when using multiple sources, all keys are made case insensitive.&lt;/p&gt; 
&lt;p&gt;There has been several attempts to implement case sensitivity, but unfortunately it's not trivial. We might take a stab at implementing it in &lt;a href="https://github.com/spf13/viper/issues/772"&gt;Viper v2&lt;/a&gt;, but despite the initial noise, it does not seem to be requested that much.&lt;/p&gt; 
&lt;p&gt;You can vote for case sensitivity by filling out this feedback form: &lt;a href="https://forms.gle/R6faU74qPRPAzchZ9"&gt;https://forms.gle/R6faU74qPRPAzchZ9&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Is it safe to concurrently read and write to a Viper instance?&lt;/h3&gt; 
&lt;p&gt;No, you will need to synchronize access to Viper yourself (for example by using the &lt;code&gt;sync&lt;/code&gt; package). Concurrent reads and writes can cause a panic.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/spf13/viper/master/TROUBLESHOOTING.md"&gt;TROUBLESHOOTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;For an optimal developer experience, it is recommended to install &lt;a href="https://nixos.org/download.html"&gt;Nix&lt;/a&gt; and &lt;a href="https://direnv.net/docs/installation.html"&gt;direnv&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Alternatively, install &lt;a href="https://go.dev/dl/"&gt;Go&lt;/a&gt; on your computer then run &lt;code&gt;make deps&lt;/code&gt; to install the rest of the dependencies.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Run the test suite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run linters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make lint # pass -j option to run them in parallel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some linter violations can automatically be fixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make fmt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The project is licensed under the &lt;a href="https://raw.githubusercontent.com/spf13/viper/master/LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>opentofu/opentofu</title>
      <link>https://github.com/opentofu/opentofu</link>
      <description>&lt;p&gt;OpenTofu lets you declaratively manage your cloud infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTofu&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://opentofu.org/"&gt;HomePage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://opentofu.org/docs/intro/install"&gt;How to install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://opentofu.org/slack"&gt;Join our Slack community!&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/opentofu/brand-artifacts/main/full/transparent/SVG/on-dark.svg#gh-dark-mode-only" alt="" /&gt; &lt;img src="https://raw.githubusercontent.com/opentofu/brand-artifacts/main/full/transparent/SVG/on-light.svg#gh-light-mode-only" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.bestpractices.dev/projects/10508"&gt;&lt;img src="https://www.bestpractices.dev/projects/10508/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenTofu is an OSS tool for building, changing, and versioning infrastructure safely and efficiently. OpenTofu can manage existing and popular service providers as well as custom in-house solutions.&lt;/p&gt; 
&lt;p&gt;The key features of OpenTofu are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infrastructure as Code&lt;/strong&gt;: Infrastructure is described using a high-level configuration syntax. This allows a blueprint of your datacenter to be versioned and treated as you would any other code. Additionally, infrastructure can be shared and re-used.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Execution Plans&lt;/strong&gt;: OpenTofu has a "planning" step where it generates an execution plan. The execution plan shows what OpenTofu will do when you call apply. This lets you avoid any surprises when OpenTofu manipulates infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Graph&lt;/strong&gt;: OpenTofu builds a graph of all your resources, and parallelizes the creation and modification of any non-dependent resources. Because of this, OpenTofu builds infrastructure as efficiently as possible, and operators get insight into dependencies in their infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Change Automation&lt;/strong&gt;: Complex changesets can be applied to your infrastructure with minimal human interaction. With the previously mentioned execution plan and resource graph, you know exactly what OpenTofu will change and in what order, avoiding many possible human errors.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting help and contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Have a question? 
  &lt;ul&gt; 
   &lt;li&gt;Post it in &lt;a href="https://github.com/orgs/opentofu/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Open a &lt;a href="https://github.com/opentofu/opentofu/issues/new/choose"&gt;GitHub issue&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Join the &lt;a href="https://opentofu.org/slack/"&gt;OpenTofu Slack&lt;/a&gt;!&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Want to contribute? 
  &lt;ul&gt; 
   &lt;li&gt;Please read the &lt;a href="https://raw.githubusercontent.com/opentofu/opentofu/main/CONTRIBUTING.md"&gt;Contribution Guide&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Recurring Events 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://meet.google.com/xfm-cgms-has"&gt;Community Meetings&lt;/a&gt; on Wednesdays at 12:30 UTC at this link: &lt;a href="https://meet.google.com/xfm-cgms-has"&gt;https://meet.google.com/xfm-cgms-has&lt;/a&gt; (&lt;a href="https://calendar.google.com/calendar/event?eid=NDg0aWl2Y3U1aHFva3N0bGhyMHBhNzdpZmsgY18zZjJkZDNjMWZlMGVmNGU5M2VmM2ZjNDU2Y2EyZGQyMTlhMmU4ZmQ4NWY2YjQwNzUwYWYxNmMzZGYzNzBiZjkzQGc"&gt;📅 calendar link&lt;/a&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://meet.google.com/cry-houa-qbk"&gt;Technical Steering Committee Meetings&lt;/a&gt; every other Tuesday at 4pm UTC at this link: &lt;a href="https://meet.google.com/cry-houa-qbk"&gt;https://meet.google.com/cry-houa-qbk&lt;/a&gt; (&lt;a href="https://calendar.google.com/calendar/u/0/event?eid=M3JyMWtuYWptdXI0Zms4ZnJpNmppcDczb3RfMjAyNTA1MjdUMTYwMDAwWiBjXzNmMmRkM2MxZmUwZWY0ZTkzZWYzZmM0NTZjYTJkZDIxOWEyZThmZDg1ZjZiNDA3NTBhZjE2YzNkZjM3MGJmOTNAZw"&gt;📅 calendar link&lt;/a&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] For more OpenTofu events, subscribe to the &lt;a href="https://calendar.google.com/calendar/embed?src=c_3f2dd3c1fe0ef4e93ef3fc456ca2dd219a2e8fd85f6b40750af16c3df370bf93%40group.calendar.google.com"&gt;OpenTofu Events Calendar&lt;/a&gt;!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Reporting security vulnerabilities&lt;/h2&gt; 
&lt;p&gt;If you've found a vulnerability or a potential vulnerability in OpenTofu please follow &lt;a href="https://github.com/opentofu/opentofu/security/policy"&gt;Security Policy&lt;/a&gt;. We'll send a confirmation email to acknowledge your report, and we'll send an additional email when we've identified the issue positively or negatively.&lt;/p&gt; 
&lt;h2&gt;Reporting possible copyright issues&lt;/h2&gt; 
&lt;p&gt;If you believe you have found any possible copyright or intellectual property issues, please contact &lt;a href="mailto:liaison@opentofu.org"&gt;liaison@opentofu.org&lt;/a&gt;. We'll send a confirmation email to acknowledge your report.&lt;/p&gt; 
&lt;h2&gt;Registry Access&lt;/h2&gt; 
&lt;p&gt;In an effort to comply with applicable sanctions, we block access from specific countries of origin.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/opentofu/opentofu/raw/main/LICENSE"&gt;Mozilla Public License v2.0&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nats-io/nats-server</title>
      <link>https://github.com/nats-io/nats-server</link>
      <description>&lt;p&gt;High-Performance server for NATS.io, the cloud and edge native messaging system.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/nats-io/nats-server/main/logos/nats-horizontal-color.png" width="300" alt="NATS Logo" /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://nats.io"&gt;NATS&lt;/a&gt; is a simple, secure and performant communications system for digital systems, services and devices. NATS is part of the Cloud Native Computing Foundation (&lt;a href="https://cncf.io"&gt;CNCF&lt;/a&gt;). NATS has over &lt;a href="https://nats.io/download/"&gt;40 client language implementations&lt;/a&gt;, and its server can run on-premise, in the cloud, at the edge, and even on a Raspberry Pi. NATS can secure and simplify design and operation of modern distributed systems.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache2-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nats-io/nats-server/actions/workflows/tests.yaml"&gt;&lt;img src="https://github.com/nats-io/nats-server/actions/workflows/tests.yaml/badge.svg?branch=main" alt="Build" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nats-io/nats-server/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/nats-io/nats-server" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://slack.nats.io"&gt;&lt;img src="https://img.shields.io/badge/chat-on%20slack-green" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/r/nats-io/nats-server?branch=main"&gt;&lt;img src="https://coveralls.io/repos/github/nats-io/nats-server/badge.svg?branch=main" alt="Coverage" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/_/nats"&gt;&lt;img src="https://img.shields.io/docker/pulls/_/nats.svg?sanitize=true" alt="Docker Downloads" /&gt;&lt;/a&gt; &lt;a href="https://somsubhra.github.io/github-release-stats/?username=nats-io&amp;amp;repository=nats-server"&gt;&lt;img src="https://img.shields.io/github/downloads/nats-io/nats-server/total.svg?logo=github" alt="GitHub Downloads" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/1895"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/1895/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/nats/nats"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/nats" alt="Artifact Hub" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nats.io"&gt;Official Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nats.io"&gt;Official Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nats.io/reference/faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href="https://rethink.synadia.com/episodes/1/"&gt;a video overview&lt;/a&gt; of NATS.&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href="https://www.youtube.com/watch?v=sm63oAVPqAM"&gt;this video from SCALE 13x&lt;/a&gt; to learn more about its origin story and design philosophy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/nats_io"&gt;Twitter&lt;/a&gt;: Follow us on Twitter!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/natsio"&gt;Google Groups&lt;/a&gt;: Where you can ask questions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://natsio.slack.com"&gt;Slack&lt;/a&gt;: Click &lt;a href="https://slack.nats.io"&gt;here&lt;/a&gt; to join. You can ask questions to our maintainers and to the rich and active community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you are interested in contributing to NATS, read about our...&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nats-io/nats-server/main/CONTRIBUTING.md"&gt;Contributing guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nats-io"&gt;Report issues or propose Pull Requests&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The NATS product roadmap can be found &lt;a href="https://nats.io/about/#roadmap"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;Who uses NATS? See our &lt;a href="https://nats.io/#who-uses-nats"&gt;list of users&lt;/a&gt; on &lt;a href="https://nats.io"&gt;https://nats.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;h3&gt;Security Audit&lt;/h3&gt; 
&lt;p&gt;A third party security audit was performed by Trail of Bits following engagement by the Open Source Technology Improvement Fund (OSTIF). You can see the &lt;a href="https://github.com/trailofbits/publications/raw/master/reviews/2025-04-ostif-nats-securityreview.pdf"&gt;full report from April 2025 here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Reporting Security Vulnerabilities&lt;/h3&gt; 
&lt;p&gt;If you've found a vulnerability or a potential vulnerability in the NATS server, please let us know at &lt;a href="mailto:security@nats.io"&gt;nats-security&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless otherwise noted, the NATS source files are distributed under the Apache Version 2.0 license found in the LICENSE file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ollama/ollama</title>
      <link>https://github.com/ollama/ollama</link>
      <description>&lt;p&gt;Get up and running with OpenAI gpt-oss, DeepSeek-R1, Gemma 3 and other models.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt;
  &amp;nbsp; 
 &lt;a href="https://ollama.com"&gt; &lt;img alt="ollama" width="240" src="https://github.com/ollama/ollama/assets/3325447/0d0b44e2-8f4a-4e99-9b52-a5c1c741c8f7" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h1&gt;Ollama&lt;/h1&gt; 
&lt;p&gt;Get up and running with large language models.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://ollama.com/download/Ollama.dmg"&gt;Download&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://ollama.com/download/OllamaSetup.exe"&gt;Download&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl -fsSL https://ollama.com/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/ollama/ollama/raw/main/docs/linux.md"&gt;Manual install instructions&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;The official &lt;a href="https://hub.docker.com/r/ollama/ollama"&gt;Ollama Docker image&lt;/a&gt; &lt;code&gt;ollama/ollama&lt;/code&gt; is available on Docker Hub.&lt;/p&gt; 
&lt;h3&gt;Libraries&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama/ollama-python"&gt;ollama-python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama/ollama-js"&gt;ollama-js&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/ollama"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://reddit.com/r/ollama"&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To run and chat with &lt;a href="https://ollama.com/library/gemma3"&gt;Gemma 3&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama run gemma3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Model library&lt;/h2&gt; 
&lt;p&gt;Ollama supports a list of models available on &lt;a href="https://ollama.com/library" title="ollama model library"&gt;ollama.com/library&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Here are some example models that can be downloaded:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Model&lt;/th&gt; 
   &lt;th&gt;Parameters&lt;/th&gt; 
   &lt;th&gt;Size&lt;/th&gt; 
   &lt;th&gt;Download&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;1B&lt;/td&gt; 
   &lt;td&gt;815MB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3:1b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;4B&lt;/td&gt; 
   &lt;td&gt;3.3GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;12B&lt;/td&gt; 
   &lt;td&gt;8.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3:12b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;27B&lt;/td&gt; 
   &lt;td&gt;17GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3:27b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;QwQ&lt;/td&gt; 
   &lt;td&gt;32B&lt;/td&gt; 
   &lt;td&gt;20GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run qwq&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepSeek-R1&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.7GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run deepseek-r1&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepSeek-R1&lt;/td&gt; 
   &lt;td&gt;671B&lt;/td&gt; 
   &lt;td&gt;404GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run deepseek-r1:671b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 4&lt;/td&gt; 
   &lt;td&gt;109B&lt;/td&gt; 
   &lt;td&gt;67GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama4:scout&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 4&lt;/td&gt; 
   &lt;td&gt;400B&lt;/td&gt; 
   &lt;td&gt;245GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama4:maverick&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.3&lt;/td&gt; 
   &lt;td&gt;70B&lt;/td&gt; 
   &lt;td&gt;43GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2&lt;/td&gt; 
   &lt;td&gt;3B&lt;/td&gt; 
   &lt;td&gt;2.0GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2&lt;/td&gt; 
   &lt;td&gt;1B&lt;/td&gt; 
   &lt;td&gt;1.3GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2:1b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2 Vision&lt;/td&gt; 
   &lt;td&gt;11B&lt;/td&gt; 
   &lt;td&gt;7.9GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2-vision&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2 Vision&lt;/td&gt; 
   &lt;td&gt;90B&lt;/td&gt; 
   &lt;td&gt;55GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2-vision:90b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.1&lt;/td&gt; 
   &lt;td&gt;8B&lt;/td&gt; 
   &lt;td&gt;4.7GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.1&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.1&lt;/td&gt; 
   &lt;td&gt;405B&lt;/td&gt; 
   &lt;td&gt;231GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.1:405b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Phi 4&lt;/td&gt; 
   &lt;td&gt;14B&lt;/td&gt; 
   &lt;td&gt;9.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run phi4&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Phi 4 Mini&lt;/td&gt; 
   &lt;td&gt;3.8B&lt;/td&gt; 
   &lt;td&gt;2.5GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run phi4-mini&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mistral&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run mistral&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Moondream 2&lt;/td&gt; 
   &lt;td&gt;1.4B&lt;/td&gt; 
   &lt;td&gt;829MB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run moondream&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Neural Chat&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run neural-chat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Starling&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run starling-lm&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Code Llama&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;3.8GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run codellama&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 2 Uncensored&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;3.8GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama2-uncensored&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;LLaVA&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.5GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llava&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Granite-3.3&lt;/td&gt; 
   &lt;td&gt;8B&lt;/td&gt; 
   &lt;td&gt;4.9GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run granite3.3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You should have at least 8 GB of RAM available to run the 7B models, 16 GB to run the 13B models, and 32 GB to run the 33B models.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Customize a model&lt;/h2&gt; 
&lt;h3&gt;Import from GGUF&lt;/h3&gt; 
&lt;p&gt;Ollama supports importing GGUF models in the Modelfile:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create a file named &lt;code&gt;Modelfile&lt;/code&gt;, with a &lt;code&gt;FROM&lt;/code&gt; instruction with the local filepath to the model you want to import.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;FROM ./vicuna-33b.Q4_0.gguf
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create the model in Ollama&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;ollama create example -f Modelfile
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the model&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;ollama run example
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Import from Safetensors&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/ollama/ollama/main/docs/import.md"&gt;guide&lt;/a&gt; on importing models for more information.&lt;/p&gt; 
&lt;h3&gt;Customize a prompt&lt;/h3&gt; 
&lt;p&gt;Models from the Ollama library can be customized with a prompt. For example, to customize the &lt;code&gt;llama3.2&lt;/code&gt; model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama pull llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a &lt;code&gt;Modelfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;FROM llama3.2

# set the temperature to 1 [higher is more creative, lower is more coherent]
PARAMETER temperature 1

# set the system message
SYSTEM """
You are Mario from Super Mario Bros. Answer as Mario, the assistant, only.
"""
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, create and run the model:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ollama create mario -f ./Modelfile
ollama run mario
&amp;gt;&amp;gt;&amp;gt; hi
Hello! It's your friend Mario.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on working with a Modelfile, see the &lt;a href="https://raw.githubusercontent.com/ollama/ollama/main/docs/modelfile.md"&gt;Modelfile&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;h2&gt;CLI Reference&lt;/h2&gt; 
&lt;h3&gt;Create a model&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;ollama create&lt;/code&gt; is used to create a model from a Modelfile.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama create mymodel -f ./Modelfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pull a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama pull llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This command can also be used to update a local model. Only the diff will be pulled.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Remove a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama rm llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Copy a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama cp llama3.2 my-model
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Multiline input&lt;/h3&gt; 
&lt;p&gt;For multiline input, you can wrap text with &lt;code&gt;"""&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; """Hello,
... world!
... """
I'm a basic program that prints the famous "Hello, world!" message to the console.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Multimodal models&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;ollama run llava "What's in this image? /Users/jmorgan/Desktop/smile.png"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;: The image features a yellow smiley face, which is likely the central focus of the picture.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Pass the prompt as an argument&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama run llama3.2 "Summarize this file: $(cat README.md)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;: Ollama is a lightweight, extensible framework for building and running language models on the local machine. It provides a simple API for creating, running, and managing models, as well as a library of pre-built models that can be easily used in a variety of applications.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Show model information&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama show llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;List models on your computer&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama list
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;List which models are currently loaded&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama ps
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Stop a model which is currently running&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama stop llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Start Ollama&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;ollama serve&lt;/code&gt; is used when you want to start ollama without running the desktop application.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/ollama/ollama/raw/main/docs/development.md"&gt;developer guide&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Running local builds&lt;/h3&gt; 
&lt;p&gt;Next, start the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;./ollama serve
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, in a separate shell, run a model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;./ollama run llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;REST API&lt;/h2&gt; 
&lt;p&gt;Ollama has a REST API for running and managing models.&lt;/p&gt; 
&lt;h3&gt;Generate a response&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl http://localhost:11434/api/generate -d '{
  "model": "llama3.2",
  "prompt":"Why is the sky blue?"
}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chat with a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl http://localhost:11434/api/chat -d '{
  "model": "llama3.2",
  "messages": [
    { "role": "user", "content": "why is the sky blue?" }
  ]
}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/ollama/ollama/main/docs/api.md"&gt;API documentation&lt;/a&gt; for all endpoints.&lt;/p&gt; 
&lt;h2&gt;Community Integrations&lt;/h2&gt; 
&lt;h3&gt;Web &amp;amp; Desktop&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/open-webui/open-webui"&gt;Open WebUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aws-samples/swift-chat"&gt;SwiftChat (macOS with ReactNative)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AugustDev/enchanted"&gt;Enchanted (macOS native)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fmaclen/hollama"&gt;Hollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ParisNeo/lollms-webui"&gt;Lollms-Webui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danny-avila/LibreChat"&gt;LibreChat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bionic-gpt/bionic-gpt"&gt;Bionic GPT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rtcfirefly/ollama-ui"&gt;HTML UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jikkuatwork/saddle"&gt;Saddle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tagspaces.org"&gt;TagSpaces&lt;/a&gt; (A platform for file-based apps, &lt;a href="https://docs.tagspaces.org/ai/"&gt;utilizing Ollama&lt;/a&gt; for the generation of tags and descriptions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivanfioravanti/chatbot-ollama"&gt;Chatbot UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mckaywrigley/chatbot-ui"&gt;Chatbot UI v2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama-interface/Ollama-Gui?tab=readme-ov-file"&gt;Typescript UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/richawo/minimal-llm-ui"&gt;Minimalistic React UI for Ollama Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kevinhermawan/Ollamac"&gt;Ollamac&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/enricoros/big-AGI"&gt;big-AGI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cheshire-cat-ai/core"&gt;Cheshire Cat assistant framework&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/semperai/amica"&gt;Amica&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BruceMacD/chatd"&gt;chatd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kghandour/Ollama-SwiftUI"&gt;Ollama-SwiftUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/langgenius/dify"&gt;Dify.AI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mindmac.app"&gt;MindMac&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jakobhoeg/nextjs-ollama-llm-ui"&gt;NextJS Web Interface for Ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://msty.app"&gt;Msty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Bin-Huang/Chatbox"&gt;Chatbox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tgraupmann/WinForm_Ollama_Copilot"&gt;WinForm Ollama Copilot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web"&gt;NextChat&lt;/a&gt; with &lt;a href="https://docs.nextchat.dev/models/ollama"&gt;Get Started Doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mmo80/alpaca-webui"&gt;Alpaca WebUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/enoch1118/ollamaGUI"&gt;OllamaGUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/InternLM/OpenAOE"&gt;OpenAOE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/leonid20000/OdinRunes"&gt;Odin Runes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mrdjohnson/llm-x"&gt;LLM-X&lt;/a&gt; (Progressive Web App)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Mintplex-Labs/anything-llm"&gt;AnythingLLM (Docker + MacOs/Windows/Linux native app)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama_basic_chat"&gt;Ollama Basic Chat: Uses HyperDiv Reactive UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/drazdra/ollama-chats"&gt;Ollama-chats RPG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://intellibar.app/"&gt;IntelliBar&lt;/a&gt; (AI-powered assistant for macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AliAhmedNada/jirapt"&gt;Jirapt&lt;/a&gt; (Jira Integration to generate issues, tasks, epics)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AliAhmedNada/ojira"&gt;ojira&lt;/a&gt; (Jira chrome plugin to easily generate descriptions for tasks)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reid41/QA-Pilot"&gt;QA-Pilot&lt;/a&gt; (Interactive chat tool that can leverage Ollama models for rapid understanding and navigation of GitHub code repositories)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sugarforever/chat-ollama"&gt;ChatOllama&lt;/a&gt; (Open Source Chatbot based on Ollama with Knowledge Bases)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Nagi-ovo/CRAG-Ollama-Chat"&gt;CRAG Ollama Chat&lt;/a&gt; (Simple Web Search with Corrective RAG)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/infiniflow/ragflow"&gt;RAGFlow&lt;/a&gt; (Open-source Retrieval-Augmented Generation engine based on deep document understanding)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StreamDeploy-DevRel/streamdeploy-llm-app-scaffold"&gt;StreamDeploy&lt;/a&gt; (LLM Application Scaffold)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swuecho/chat"&gt;chat&lt;/a&gt; (chat web app for teams)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lobehub/lobe-chat"&gt;Lobe Chat&lt;/a&gt; with &lt;a href="https://lobehub.com/docs/self-hosting/examples/ollama"&gt;Integrating Doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/datvodinh/rag-chatbot.git"&gt;Ollama RAG Chatbot&lt;/a&gt; (Local Chat with multiple PDFs using Ollama and RAG)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.nurgo-software.com/products/brainsoup"&gt;BrainSoup&lt;/a&gt; (Flexible native client with RAG &amp;amp; multi-agent automation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Renset/macai"&gt;macai&lt;/a&gt; (macOS client for Ollama, ChatGPT, and other compatible API back-ends)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/josStorer/RWKV-Runner"&gt;RWKV-Runner&lt;/a&gt; (RWKV offline LLM deployment tool, also usable as a client for ChatGPT and Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dezoito/ollama-grid-search"&gt;Ollama Grid Search&lt;/a&gt; (app to evaluate and compare models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Otacon/olpaka"&gt;Olpaka&lt;/a&gt; (User-friendly Flutter Web App for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://casibase.org"&gt;Casibase&lt;/a&gt; (An open source AI knowledge base and dialogue system combining the latest RAG, SSO, ollama support, and multiple large language models.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CrazyNeil/OllamaSpring"&gt;OllamaSpring&lt;/a&gt; (Ollama Client for macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kartikm7/llocal"&gt;LLocal.in&lt;/a&gt; (Easy to use Electron Desktop Client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dcSpark/shinkai-apps"&gt;Shinkai Desktop&lt;/a&gt; (Two click install Local AI using Ollama + Files + RAG)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zeyoyt/ailama"&gt;AiLama&lt;/a&gt; (A Discord User App that allows you to interact with Ollama anywhere in Discord)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama_mesop/"&gt;Ollama with Google Mesop&lt;/a&gt; (Mesop Chat Client implementation with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SciPhi-AI/R2R"&gt;R2R&lt;/a&gt; (Open-source RAG engine)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/elearningshow/ollama-kis"&gt;Ollama-Kis&lt;/a&gt; (A simple easy-to-use GUI with sample custom LLM for Drivers Education)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://opengpa.org"&gt;OpenGPA&lt;/a&gt; (Open-source offline-first Enterprise Agentic Application)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mateuszmigas/painting-droid"&gt;Painting Droid&lt;/a&gt; (Painting app with AI integrations)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.kerlig.com/"&gt;Kerlig AI&lt;/a&gt; (AI writing assistant for macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MindWorkAI/AI-Studio"&gt;AI Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gyopak/sidellama"&gt;Sidellama&lt;/a&gt; (browser-based LLM client)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trypromptly/LLMStack"&gt;LLMStack&lt;/a&gt; (No-code multi-agent framework to build LLM agents and workflows)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://boltai.com"&gt;BoltAI for Mac&lt;/a&gt; (AI Chat Client for Mac)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/av/harbor"&gt;Harbor&lt;/a&gt; (Containerized LLM Toolkit with Ollama as default backend)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/szczyglis-dev/py-gpt"&gt;PyGPT&lt;/a&gt; (AI desktop assistant for Linux, Windows, and Mac)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Jeffser/Alpaca"&gt;Alpaca&lt;/a&gt; (An Ollama client application for Linux and macOS made with GTK4 and Adwaita)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Significant-Gravitas/AutoGPT/raw/master/docs/content/platform/ollama.md"&gt;AutoGPT&lt;/a&gt; (AutoGPT Ollama integration)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.jonathanhecl.com/go-crew/"&gt;Go-CREW&lt;/a&gt; (Powerful Offline RAG in Golang)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openvmp/partcad/"&gt;PartCAD&lt;/a&gt; (CAD model generation with OpenSCAD and CadQuery)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama4j/ollama4j-web-ui"&gt;Ollama4j Web UI&lt;/a&gt; - Java-based Web UI for Ollama built with Vaadin, Spring Boot, and Ollama4j&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kspviswa/pyOllaMx"&gt;PyOllaMx&lt;/a&gt; - macOS application capable of chatting with both Ollama and Apple MLX models.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cline/cline"&gt;Cline&lt;/a&gt; - Formerly known as Claude Dev is a VSCode extension for multi-file/whole-repo coding&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kangfenmao/cherry-studio"&gt;Cherry Studio&lt;/a&gt; (Desktop client with Ollama support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1runeberg/confichat"&gt;ConfiChat&lt;/a&gt; (Lightweight, standalone, multi-platform, and privacy-focused LLM chat interface with optional encryption)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nickthecook/archyve"&gt;Archyve&lt;/a&gt; (RAG-enabling document library)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama-crew-mesop"&gt;crewAI with Mesop&lt;/a&gt; (Mesop Web Interface to run crewAI with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chyok/ollama-gui"&gt;Tkinter-based client&lt;/a&gt; (Python tkinter-based Client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trendy-design/llmchat"&gt;LLMChat&lt;/a&gt; (Privacy focused, 100% local, intuitive all-in-one chat interface)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Leon-Sander/Local-Multimodal-AI-Chat"&gt;Local Multimodal AI Chat&lt;/a&gt; (Ollama-based LLM Chat with support for multiple features, including PDF RAG, voice chat, image-based interactions, and integration with OpenAI.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xark-argo/argo"&gt;ARGO&lt;/a&gt; (Locally download and run Ollama and Huggingface models with RAG and deep research on Mac/Windows/Linux)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EliasPereirah/OrionChat"&gt;OrionChat&lt;/a&gt; - OrionChat is a web interface for chatting with different AI providers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bklieger-groq/g1"&gt;G1&lt;/a&gt; (Prototype of using prompting strategies to improve the LLM's reasoning through o1-like reasoning chains.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lemonit-eric-mao/ollama-web-management"&gt;Web management&lt;/a&gt; (Web management page)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/promptery/promptery"&gt;Promptery&lt;/a&gt; (desktop client for Ollama.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JHubi1/ollama-app"&gt;Ollama App&lt;/a&gt; (Modern and easy-to-use multi-platform client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/annilq/chat-ollama"&gt;chat-ollama&lt;/a&gt; (a React Native client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tcsenpai/spacellama"&gt;SpaceLlama&lt;/a&gt; (Firefox and Chrome extension to quickly summarize web pages with ollama in a sidebar)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tcsenpai/youlama"&gt;YouLama&lt;/a&gt; (Webapp to quickly summarize any YouTube video, supporting Invidious as well)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tcsenpai/dualmind"&gt;DualMind&lt;/a&gt; (Experimental app allowing two models to talk to each other in the terminal or in a web interface)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/h1ddenpr0cess20/ollamarama-matrix"&gt;ollamarama-matrix&lt;/a&gt; (Ollama chatbot for the Matrix chat protocol)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anan1213095357/ollama-chat-app"&gt;ollama-chat-app&lt;/a&gt; (Flutter-based chat app)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.perfectmemory.ai/"&gt;Perfect Memory AI&lt;/a&gt; (Productivity AI assists personalized by what you have seen on your screen, heard, and said in the meetings)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hexastack/hexabot"&gt;Hexabot&lt;/a&gt; (A conversational AI builder)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/reddit_analyzer"&gt;Reddit Rate&lt;/a&gt; (Search and Rate Reddit topics with a weighted summation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/adarshM84/OpenTalkGpt"&gt;OpenTalkGpt&lt;/a&gt; (Chrome Extension to manage open-source models supported by Ollama, create custom models, and chat with models from a user-friendly UI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vinhnx/vt.ai"&gt;VT&lt;/a&gt; (A minimal multimodal AI chat app, with dynamic conversation routing. Supports local models via Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nosia-ai/nosia"&gt;Nosia&lt;/a&gt; (Easy to install and use RAG platform based on Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nbonamy/witsy"&gt;Witsy&lt;/a&gt; (An AI Desktop application available for Mac/Windows/Linux)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/US-Artificial-Intelligence/abbey"&gt;Abbey&lt;/a&gt; (A configurable AI interface server with notebooks, document storage, and YouTube support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmayboroda/minima"&gt;Minima&lt;/a&gt; (RAG with on-premises or fully local workflow)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AidfulAI/aidful-ollama-model-delete"&gt;aidful-ollama-model-delete&lt;/a&gt; (User interface for simplified model cleanup)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ItzCrazyKns/Perplexica"&gt;Perplexica&lt;/a&gt; (An AI-powered search engine &amp;amp; an open-source alternative to Perplexity AI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oslook/ollama-webui"&gt;Ollama Chat WebUI for Docker &lt;/a&gt; (Support for local docker deployment, lightweight ollama webui)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aka.ms/ai-tooklit/ollama-docs"&gt;AI Toolkit for Visual Studio Code&lt;/a&gt; (Microsoft-official VSCode extension to chat, test, evaluate models with Ollama support, and use them in your AI applications.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anilkay/MinimalNextOllamaChat"&gt;MinimalNextOllamaChat&lt;/a&gt; (Minimal Web UI for Chat and Model Control)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TilmanGriesel/chipper"&gt;Chipper&lt;/a&gt; AI interface for tinkerers (Ollama, Haystack RAG, Python)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CosmicEventHorizon/ChibiChat"&gt;ChibiChat&lt;/a&gt; (Kotlin-based Android app to chat with Ollama and Koboldcpp API endpoints)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qusaismael/localllm"&gt;LocalLLM&lt;/a&gt; (Minimal Web-App to run ollama models on it with a GUI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/buiducnhat/ollamazing"&gt;Ollamazing&lt;/a&gt; (Web extension to run Ollama models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/benhaotang/OpenDeepResearcher-via-searxng"&gt;OpenDeepResearcher-via-searxng&lt;/a&gt; (A Deep Research equivalent endpoint with Ollama support for running locally)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AIDotNet/AntSK"&gt;AntSK&lt;/a&gt; (Out-of-the-box &amp;amp; Adaptable RAG Chatbot)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1Panel-dev/MaxKB/"&gt;MaxKB&lt;/a&gt; (Ready-to-use &amp;amp; flexible RAG Chatbot)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danielekp/yla"&gt;yla&lt;/a&gt; (Web interface to freely interact with your customized models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RockChinQ/LangBot"&gt;LangBot&lt;/a&gt; (LLM-based instant messaging bots platform, with Agents, RAG features, supports multiple platforms)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1Panel-dev/1Panel/"&gt;1Panel&lt;/a&gt; (Web-based Linux Server Management Tool)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Soulter/AstrBot/"&gt;AstrBot&lt;/a&gt; (User-friendly LLM-based multi-platform chatbot with a WebUI, supporting RAG, LLM agents, and plugins integration)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ibrahimcetin/reins"&gt;Reins&lt;/a&gt; (Easily tweak parameters, customize system prompts per chat, and enhance your AI experiments with reasoning model support.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aharon-Bensadoun/Flufy"&gt;Flufy&lt;/a&gt; (A beautiful chat interface for interacting with Ollama's API. Built with React, TypeScript, and Material-UI.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zeozeozeo/ellama"&gt;Ellama&lt;/a&gt; (Friendly native app to chat with an Ollama instance)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mediar-ai/screenpipe"&gt;screenpipe&lt;/a&gt; Build agents powered by your screen history&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hengkysteen/ollamb"&gt;Ollamb&lt;/a&gt; (Simple yet rich in features, cross-platform built with Flutter and designed for Ollama. Try the &lt;a href="https://hengkysteen.github.io/demo/ollamb/"&gt;web demo&lt;/a&gt;.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Writeopia/Writeopia"&gt;Writeopia&lt;/a&gt; (Text editor with integration with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AppFlowy-IO/AppFlowy"&gt;AppFlowy&lt;/a&gt; (AI collaborative workspace with Ollama, cross-platform and self-hostable)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cushydigit/lumina.git"&gt;Lumina&lt;/a&gt; (A lightweight, minimal React.js frontend for interacting with Ollama servers)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/tiny-notepad"&gt;Tiny Notepad&lt;/a&gt; (A lightweight, notepad-like interface to chat with ollama available on PyPI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hellotunamayo/macLlama"&gt;macLlama (macOS native)&lt;/a&gt; (A native macOS GUI application for interacting with Ollama models, featuring a chat interface.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/philberndt/GPTranslate"&gt;GPTranslate&lt;/a&gt; (A fast and lightweight, AI powered desktop translation application written with Rust and Tauri. Features real-time translation with OpenAI/Azure/Ollama.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NGC13009/ollama-launcher"&gt;ollama launcher&lt;/a&gt; (A launcher for Ollama, aiming to provide users with convenient functions such as ollama server launching, management, or configuration.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aj-Seven/ai-hub"&gt;ai-hub&lt;/a&gt; (AI Hub supports multiple models via API keys and Chat support via Ollama API.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/mayan-edms/mayan-edms"&gt;Mayan EDMS&lt;/a&gt; (Open source document management system to organize, tag, search, and automate your files with powerful Ollama driven workflows.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/doolijb/serene-pub"&gt;Serene Pub&lt;/a&gt; (Beginner friendly, open source AI Roleplaying App for Windows, Mac OS and Linux. Search, download and use models with Ollama all inside the app.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aqerd/andes"&gt;Andes&lt;/a&gt; (A Visual Studio Code extension that provides a local UI interface for Ollama models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KashyapTan/clueless"&gt;Clueless&lt;/a&gt; (Open Source &amp;amp; Local Cluely: A desktop application LLM assistant to help you talk to anything on your screen using locally served Ollama models. Also undetectable to screenshare)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/carbonatedWaterOrg/ollama-co2"&gt;ollama-co2&lt;/a&gt; (FastAPI web interface for monitoring and managing local and remote Ollama servers with real-time model monitoring and concurrent downloads)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Cloud&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://cloud.google.com/run/docs/tutorials/gpu-gemma2-with-ollama"&gt;Google Cloud&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://fly.io/docs/python/do-more/add-ollama/"&gt;Fly.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.koyeb.com/deploy/ollama"&gt;Koyeb&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Terminal&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ggozad/oterm"&gt;oterm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/s-kostyaev/ellama"&gt;Ellama Emacs client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zweifisch/ollama"&gt;Emacs client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradoxical-dev/neollama"&gt;neollama&lt;/a&gt; UI client for interacting with models from within Neovim&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/David-Kunz/gen.nvim"&gt;gen.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nomnivore/ollama.nvim"&gt;ollama.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marco-souza/ollero.nvim"&gt;ollero.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gerazov/ollama-chat.nvim"&gt;ollama-chat.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huynle/ogpt.nvim"&gt;ogpt.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/karthink/gptel"&gt;gptel Emacs client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dustinblackman/oatmeal"&gt;Oatmeal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pgibler/cmdh"&gt;cmdh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/npahlfer/ooo"&gt;ooo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reid41/shell-pilot"&gt;shell-pilot&lt;/a&gt;(Interact with models via pure shell scripts on Linux or macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pythops/tenere"&gt;tenere&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/taketwo/llm-ollama"&gt;llm-ollama&lt;/a&gt; for &lt;a href="https://llm.datasette.io/en/stable/"&gt;Datasette's LLM CLI&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anaisbetts/typechat-cli"&gt;typechat-cli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/djcopley/ShellOracle"&gt;ShellOracle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yusufcanb/tlm"&gt;tlm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ericcurtin/podman-ollama"&gt;podman-ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sammcj/gollama"&gt;gollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paulrobello/parllama"&gt;ParLlama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cognitivetech/ollama-ebook-summary/"&gt;Ollama eBook Summary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama_moe"&gt;Ollama Mixture of Experts (MOE) in 50 lines of code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pepo-ec/vim-intelligence-bridge"&gt;vim-intelligence-bridge&lt;/a&gt; Simple interaction of "Ollama" with the Vim editor&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x-cmd.com/mod/ollama"&gt;x-cmd ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/drunkwcodes/bb7"&gt;bb7&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcusziade/Swollama"&gt;SwollamaCLI&lt;/a&gt; bundled with the Swollama Swift package. &lt;a href="https://github.com/marcusziade/Swollama?tab=readme-ov-file#cli-usage"&gt;Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigoden/aichat"&gt;aichat&lt;/a&gt; All-in-one LLM CLI tool featuring Shell Assistant, Chat-REPL, RAG, AI tools &amp;amp; agents, with access to OpenAI, Claude, Gemini, Ollama, Groq, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rrg92/powershai"&gt;PowershAI&lt;/a&gt; PowerShell module that brings AI to terminal on Windows, including support for Ollama&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Abyss-c0re/deepshell"&gt;DeepShell&lt;/a&gt; Your self-hosted AI assistant. Interactive Shell, Files and Folders analysis.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xyproto/orbiton"&gt;orbiton&lt;/a&gt; Configuration-free text editor and IDE with support for tab completion with Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/molbal/orca-cli"&gt;orca-cli&lt;/a&gt; Ollama Registry CLI Application - Browse, pull, and download models from Ollama Registry in your terminal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jonathanhecl/gguf-to-ollama"&gt;GGUF-to-Ollama&lt;/a&gt; - Importing GGUF to Ollama made easy (multiplatform)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama_strands"&gt;AWS-Strands-With-Ollama&lt;/a&gt; - AWS Strands Agents with Ollama Examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/attogram/ollama-multirun"&gt;ollama-multirun&lt;/a&gt; - A bash shell script to run a single prompt against any or all of your locally installed ollama models, saving the output and performance statistics as easily navigable web pages. (&lt;a href="https://attogram.github.io/ai_test_zone/"&gt;Demo&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/attogram/ollama-bash-toolshed"&gt;ollama-bash-toolshed&lt;/a&gt; - Bash scripts to chat with tool using models. Add new tools to your shed with ease. Runs on Ollama.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Apple Vision Pro&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aws-samples/swift-chat"&gt;SwiftChat&lt;/a&gt; (Cross-platform AI chat app supporting Apple Vision Pro via "Designed for iPad")&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AugustDev/enchanted"&gt;Enchanted&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/timescale/pgai"&gt;pgai&lt;/a&gt; - PostgreSQL as a vector database (Create and search embeddings from Ollama models using pgvector) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/timescale/pgai/raw/main/docs/vectorizer-quick-start.md"&gt;Get started guide&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mindsdb/mindsdb/raw/staging/mindsdb/integrations/handlers/ollama_handler/README.md"&gt;MindsDB&lt;/a&gt; (Connects Ollama models with nearly 200 data platforms and apps)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/philippgille/chromem-go/raw/v0.5.0/embed_ollama.go"&gt;chromem-go&lt;/a&gt; with &lt;a href="https://github.com/philippgille/chromem-go/tree/v0.5.0/examples/rag-wikipedia-ollama"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dbkangaroo/kangaroo"&gt;Kangaroo&lt;/a&gt; (AI-powered SQL client and admin tool for popular databases)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Package managers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/ollama/"&gt;Pacman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gentoo/guru/tree/master/app-misc/ollama"&gt;Gentoo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://formulae.brew.sh/formula/ollama"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://artifacthub.io/packages/helm/ollama-helm/ollama"&gt;Helm Chart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://codeberg.org/tusharhero/ollama-guix"&gt;Guix channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://search.nixos.org/packages?show=ollama&amp;amp;from=0&amp;amp;size=50&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=ollama"&gt;Nix package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://flox.dev/blog/ollama-part-one"&gt;Flox&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Libraries&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://python.langchain.com/docs/integrations/chat/ollama/"&gt;LangChain&lt;/a&gt; and &lt;a href="https://js.langchain.com/docs/integrations/chat/ollama/"&gt;LangChain.js&lt;/a&gt; with &lt;a href="https://js.langchain.com/docs/tutorials/local_rag/"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://firebase.google.com/docs/genkit/plugins/ollama"&gt;Firebase Genkit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/crewAIInc/crewAI"&gt;crewAI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://remembersoftwares.github.io/yacana/"&gt;Yacana&lt;/a&gt; (User-friendly multi-agent framework for brainstorming and executing predetermined flows with built-in tool integration)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-ai"&gt;Spring AI&lt;/a&gt; with &lt;a href="https://docs.spring.io/spring-ai/reference/api/chat/ollama-chat.html"&gt;reference&lt;/a&gt; and &lt;a href="https://github.com/tzolov/ollama-tools"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tmc/langchaingo/"&gt;LangChainGo&lt;/a&gt; with &lt;a href="https://github.com/tmc/langchaingo/tree/main/examples/ollama-completion-example"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/langchain4j/langchain4j"&gt;LangChain4j&lt;/a&gt; with &lt;a href="https://github.com/langchain4j/langchain4j-examples/tree/main/ollama-examples/src/main/java"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Abraxas-365/langchain-rust"&gt;LangChainRust&lt;/a&gt; with &lt;a href="https://github.com/Abraxas-365/langchain-rust/raw/main/examples/llm_ollama.rs"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tryAGI/LangChain"&gt;LangChain for .NET&lt;/a&gt; with &lt;a href="https://github.com/tryAGI/LangChain/raw/main/examples/LangChain.Samples.OpenAI/Program.cs"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/theodo-group/LLPhant?tab=readme-ov-file#ollama"&gt;LLPhant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.llamaindex.ai/en/stable/examples/llm/ollama/"&gt;LlamaIndex&lt;/a&gt; and &lt;a href="https://ts.llamaindex.ai/modules/llms/available_llms/ollama"&gt;LlamaIndexTS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BerriAI/litellm"&gt;LiteLLM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/presbrey/ollamafarm"&gt;OllamaFarm for Go&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/awaescher/OllamaSharp"&gt;OllamaSharp for .NET&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gbaptista/ollama-ai"&gt;Ollama for Ruby&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pepperoni21/ollama-rs"&gt;Ollama-rs for Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jmont-dev/ollama-hpp"&gt;Ollama-hpp for C++&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama4j/ollama4j"&gt;Ollama4j for Java&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://modelfusion.dev/integration/model-provider/ollama"&gt;ModelFusion Typescript Library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kevinhermawan/OllamaKit"&gt;OllamaKit for Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/breitburg/dart-ollama"&gt;Ollama for Dart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudstudio/ollama-laravel"&gt;Ollama for Laravel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/davidmigloz/langchain_dart"&gt;LangChainDart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/semantic-kernel/tree/main/python/semantic_kernel/connectors/ai/ollama"&gt;Semantic Kernel - Python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deepset-ai/haystack-integrations/raw/main/integrations/ollama.md"&gt;Haystack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brainlid/langchain"&gt;Elixir LangChain&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JBGruber/rollama"&gt;Ollama for R - rollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hauselin/ollama-r"&gt;Ollama for R - ollama-r&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lebrunel/ollama-ex"&gt;Ollama-ex for Elixir&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/b-tocs/abap_btocs_ollama"&gt;Ollama Connector for SAP ABAP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://testcontainers.com/modules/ollama/"&gt;Testcontainers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://portkey.ai/docs/welcome/integration-guides/ollama"&gt;Portkey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/svilupp/PromptingTools.jl"&gt;PromptingTools.jl&lt;/a&gt; with an &lt;a href="https://svilupp.github.io/PromptingTools.jl/dev/examples/working_with_ollama"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Project-Llama/llamascript"&gt;LlamaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emirsahin1/llm-axe"&gt;llm-axe&lt;/a&gt; (Python Toolkit for Building LLM Powered Apps)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.gollm.co/examples/ollama-example"&gt;Gollm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jonathanhecl/gollama"&gt;Gollama for Golang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xyproto/ollamaclient"&gt;Ollamaclient for Golang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/tozd/go/fun"&gt;High-level function abstraction in Go&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ArdaGnsrn/ollama-php"&gt;Ollama PHP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/agents-flex/agents-flex"&gt;Agents-Flex for Java&lt;/a&gt; with &lt;a href="https://github.com/agents-flex/agents-flex/tree/main/agents-flex-llm/agents-flex-llm-ollama/src/test/java/com/agentsflex/llm/ollama"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/parakeet-nest/parakeet"&gt;Parakeet&lt;/a&gt; is a GoLang library, made to simplify the development of small generative AI applications with Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andygill/haverscript"&gt;Haverscript&lt;/a&gt; with &lt;a href="https://github.com/andygill/haverscript/tree/main/examples"&gt;examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mattt/ollama-swift"&gt;Ollama for Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcusziade/Swollama"&gt;Swollama for Swift&lt;/a&gt; with &lt;a href="https://marcusziade.github.io/Swollama/documentation/swollama/"&gt;DocC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/prasad89/golamify"&gt;GoLamify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tusharad/ollama-haskell"&gt;Ollama for Haskell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nbonamy/multi-llm-ts"&gt;multi-llm-ts&lt;/a&gt; (A Typescript/JavaScript library allowing access to different LLM in a unified API)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lofcz/llmtornado"&gt;LlmTornado&lt;/a&gt; (C# library providing a unified interface for major FOSS &amp;amp; Commercial inference APIs)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dravenk/ollama-zig"&gt;Ollama for Zig&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lunary-ai/abso"&gt;Abso&lt;/a&gt; (OpenAI-compatible TypeScript SDK for any LLM provider)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/goodreasonai/nichey"&gt;Nichey&lt;/a&gt; is a Python package for generating custom wikis for your research topic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kassane/ollama-d"&gt;Ollama for D&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HardCodeDev777/OllamaPlusPlus"&gt;OllamaPlusPlus&lt;/a&gt; (Very simple C++ library for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mozilla-ai/any-llm"&gt;any-llm&lt;/a&gt; (A single interface to use different llm providers by &lt;a href="https://www.mozilla.ai/"&gt;mozilla.ai&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mozilla-ai/any-agent"&gt;any-agent&lt;/a&gt; (A single interface to use and evaluate different agent frameworks by &lt;a href="https://www.mozilla.ai/"&gt;mozilla.ai&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cognizant-ai-lab/neuro-san-studio"&gt;Neuro SAN&lt;/a&gt; (Data-driven multi-agent orchestration framework) with &lt;a href="https://github.com/cognizant-ai-lab/neuro-san-studio/raw/main/docs/user_guide.md#ollama"&gt;example&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mobile&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aws-samples/swift-chat"&gt;SwiftChat&lt;/a&gt; (Lightning-fast Cross-platform AI chat app with native UI for Android, iOS, and iPad)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AugustDev/enchanted"&gt;Enchanted&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Mobile-Artificial-Intelligence/maid"&gt;Maid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JHubi1/ollama-app"&gt;Ollama App&lt;/a&gt; (Modern and easy-to-use multi-platform client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1runeberg/confichat"&gt;ConfiChat&lt;/a&gt; (Lightweight, standalone, multi-platform, and privacy-focused LLM chat interface with optional encryption)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sunshine0523/OllamaServer"&gt;Ollama Android Chat&lt;/a&gt; (No need for Termux, start the Ollama service with one click on an Android device)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ibrahimcetin/reins"&gt;Reins&lt;/a&gt; (Easily tweak parameters, customize system prompts per chat, and enhance your AI experiments with reasoning model support.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Extensions &amp;amp; Plugins&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MassimilianoPasquini97/raycast_ollama"&gt;Raycast extension&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mxyng/discollama"&gt;Discollama&lt;/a&gt; (Discord bot inside the Ollama discord channel)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/continuedev/continue"&gt;Continue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thewh1teagle/vibe"&gt;Vibe&lt;/a&gt; (Transcribe and analyze meetings with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hinterdupfinger/obsidian-ollama"&gt;Obsidian Ollama plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/omagdy7/ollama-logseq"&gt;Logseq Ollama plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andersrex/notesollama"&gt;NotesOllama&lt;/a&gt; (Apple Notes Ollama plugin)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samalba/dagger-chatbot"&gt;Dagger Chatbot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mekb-turtle/discord-ai-bot"&gt;Discord AI Bot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ruecat/ollama-telegram"&gt;Ollama Telegram Bot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ej52/hass-ollama-conversation"&gt;Hass Ollama Conversation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/abrenneke/rivet-plugin-ollama"&gt;Rivet plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/longy2k/obsidian-bmo-chatbot"&gt;Obsidian BMO Chatbot plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/herval/cliobot"&gt;Cliobot&lt;/a&gt; (Telegram bot with Ollama support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/logancyang/obsidian-copilot"&gt;Copilot for Obsidian plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pfrankov/obsidian-local-gpt"&gt;Obsidian Local GPT plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.openinterpreter.com/language-model-setup/local-models/ollama"&gt;Open Interpreter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ex3ndr/llama-coder"&gt;Llama Coder&lt;/a&gt; (Copilot alternative using Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bernardo-bruning/ollama-copilot"&gt;Ollama Copilot&lt;/a&gt; (Proxy that allows you to use Ollama as a copilot like GitHub Copilot)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rjmacarthy/twinny"&gt;twinny&lt;/a&gt; (Copilot and Copilot chat alternative using Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RussellCanfield/wingman-ai"&gt;Wingman-AI&lt;/a&gt; (Copilot code and chat alternative using Ollama and Hugging Face)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n4ze3m/page-assist"&gt;Page Assist&lt;/a&gt; (Chrome Extension)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imoize/plasmoid-ollamacontrol"&gt;Plasmoid Ollama Control&lt;/a&gt; (KDE Plasma extension that allows you to quickly manage/control Ollama model)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tusharhero/aitelegrambot"&gt;AI Telegram Bot&lt;/a&gt; (Telegram bot using Ollama in backend)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yaroslavyaroslav/OpenAI-sublime-text"&gt;AI ST Completion&lt;/a&gt; (Sublime Text 4 AI assistant plugin with Ollama support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kevinthedang/discord-ollama"&gt;Discord-Ollama Chat Bot&lt;/a&gt; (Generalized TypeScript Discord Bot w/ Tuning Documentation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/josStorer/chatGPTBox"&gt;ChatGPTBox: All in one browser extension&lt;/a&gt; with &lt;a href="https://github.com/josStorer/chatGPTBox/issues/616#issuecomment-1975186467"&gt;Integrating Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapmd73/Companion"&gt;Discord AI chat/moderation bot&lt;/a&gt; Chat/moderation bot written in python. Uses Ollama to create personalities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nischalj10/headless-ollama"&gt;Headless Ollama&lt;/a&gt; (Scripts to automatically install ollama client &amp;amp; models on any OS for apps that depend on ollama server)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xuyangbocn/terraform-aws-self-host-llm"&gt;Terraform AWS Ollama &amp;amp; Open WebUI&lt;/a&gt; (A Terraform module to deploy on AWS a ready-to-use Ollama service, together with its front-end Open WebUI service.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jakubburkiewicz/node-red-contrib-ollama"&gt;node-red-contrib-ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivostoykov/localAI"&gt;Local AI Helper&lt;/a&gt; (Chrome and Firefox extensions that enable interactions with the active tab and customisable API endpoints. Includes secure storage for user prompts.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jake83741/vnc-lm"&gt;vnc-lm&lt;/a&gt; (Discord bot for messaging with LLMs through Ollama and LiteLLM. Seamlessly move between local and flagship models.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SilasMarvin/lsp-ai"&gt;LSP-AI&lt;/a&gt; (Open-source language server for AI-powered functionality)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Palm1r/QodeAssist"&gt;QodeAssist&lt;/a&gt; (AI-powered coding assistant plugin for Qt Creator)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ECuiDev/obsidian-quiz-generator"&gt;Obsidian Quiz Generator plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/philffm/ai-summary-helper"&gt;AI Summmary Helper plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/suncloudsmoon/TextCraft"&gt;TextCraft&lt;/a&gt; (Copilot in Word alternative using Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zeitlings/alfred-ollama"&gt;Alfred Ollama&lt;/a&gt; (Alfred Workflow)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/adarshM84/TextLLaMA"&gt;TextLLaMA&lt;/a&gt; A Chrome Extension that helps you write emails, correct grammar, and translate into any language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zyphixor/simple-discord-ai"&gt;Simple-Discord-AI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/innightwolfsleep/llm_telegram_bot"&gt;LLM Telegram Bot&lt;/a&gt; (telegram bot, primary for RP. Oobabooga-like buttons, &lt;a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui"&gt;A1111&lt;/a&gt; API integration e.t.c)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sammcj/mcp-llm"&gt;mcp-llm&lt;/a&gt; (MCP Server to allow LLMs to call other LLMs)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HardCodeDev777/SimpleOllamaUnity"&gt;SimpleOllamaUnity&lt;/a&gt; (Unity Engine extension for communicating with Ollama in a few lines of code. Also works at runtime)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HardCodeDev777/UnityCodeLama"&gt;UnityCodeLama&lt;/a&gt; (Unity Edtior tool to analyze scripts via Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NativeMindBrowser/NativeMindExtension"&gt;NativeMind&lt;/a&gt; (Private, on-device AI Assistant, no cloud dependencies)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gmai.premex.se/"&gt;GMAI - Gradle Managed AI&lt;/a&gt; (Gradle plugin for automated Ollama lifecycle management during build phases)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nomyo-ai/nomyo-router"&gt;NOMYO Router&lt;/a&gt; (A transparent Ollama proxy with model deployment aware routing which auto-manages multiple Ollama instances in a given network)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported backends&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ggml-org/llama.cpp"&gt;llama.cpp&lt;/a&gt; project founded by Georgi Gerganov.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Observability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.comet.com/docs/opik/cookbook/ollama"&gt;Opik&lt;/a&gt; is an open-source platform to debug, evaluate, and monitor your LLM applications, RAG systems, and agentic workflows with comprehensive tracing, automated evaluations, and production-ready dashboards. Opik supports native intergration to Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://lunary.ai/docs/integrations/ollama"&gt;Lunary&lt;/a&gt; is the leading open-source LLM observability platform. It provides a variety of enterprise-grade features such as real-time analytics, prompt templates management, PII masking, and comprehensive agent tracing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openlit/openlit"&gt;OpenLIT&lt;/a&gt; is an OpenTelemetry-native tool for monitoring Ollama Applications &amp;amp; GPUs using traces and metrics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.honeyhive.ai/integrations/ollama"&gt;HoneyHive&lt;/a&gt; is an AI observability and evaluation platform for AI agents. Use HoneyHive to evaluate agent performance, interrogate failures, and monitor quality in production.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://langfuse.com/docs/integrations/ollama"&gt;Langfuse&lt;/a&gt; is an open source LLM observability platform that enables teams to collaboratively monitor, evaluate and debug AI applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mlflow.org/docs/latest/llms/tracing/index.html#automatic-tracing"&gt;MLflow Tracing&lt;/a&gt; is an open source LLM observability tool with a convenient API to log and visualize traces, making it easy to debug and evaluate GenAI applications.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>argoproj/argo-workflows</title>
      <link>https://github.com/argoproj/argo-workflows</link>
      <description>&lt;p&gt;Workflow Engine for Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/argoproj/argo-workflows/actions/workflows/snyk.yml?query=branch%3Amain"&gt;&lt;img src="https://github.com/argoproj/argo-workflows/actions/workflows/snyk.yml/badge.svg?branch=main" alt="Security Status" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/3830"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/3830/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://api.securityscorecards.dev/projects/github.com/argoproj/argo-workflows"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/argoproj/argo-workflows/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fargoproj%2Fargo-workflows?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fargoproj%2Fargo-workflows.svg?type=shield" alt="FOSSA License Status" /&gt;&lt;/a&gt; &lt;a href="https://argoproj.github.io/community/join-slack"&gt;&lt;img src="https://img.shields.io/badge/slack-argoproj-brightgreen.svg?logo=slack" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://x.com/argoproj"&gt;&lt;img src="https://img.shields.io/twitter/follow/argoproj?style=social" alt="X Follow" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/argoproj/"&gt;&lt;img src="https://img.shields.io/badge/LinkedIn-argoproj-blue.svg?logo=linkedin" alt="LinkedIn" /&gt;&lt;/a&gt; &lt;a href="https://github.com/argoproj/argo-workflows/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/argoproj/argo-workflows?label=argo-workflows" alt="Release Version" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/argo/argo-workflows"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/argo-workflows" alt="Artifact HUB" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Argo Workflows?&lt;/h2&gt; 
&lt;p&gt;Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. Argo Workflows is implemented as a Kubernetes CRD (Custom Resource Definition).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Define workflows where each step is a container.&lt;/li&gt; 
 &lt;li&gt;Model multi-step workflows as a sequence of tasks or capture the dependencies between tasks using a directed acyclic graph (DAG).&lt;/li&gt; 
 &lt;li&gt;Easily run compute intensive jobs for machine learning or data processing in a fraction of the time using Argo Workflows on Kubernetes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Argo is a &lt;a href="https://cncf.io/"&gt;Cloud Native Computing Foundation (CNCF)&lt;/a&gt; graduated project.&lt;/p&gt; 
&lt;h2&gt;Use Cases&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://argo-workflows.readthedocs.io/en/latest/use-cases/machine-learning/"&gt;Machine Learning pipelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://argo-workflows.readthedocs.io/en/latest/use-cases/data-processing/"&gt;Data and batch processing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://argo-workflows.readthedocs.io/en/latest/use-cases/infrastructure-automation/"&gt;Infrastructure automation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://argo-workflows.readthedocs.io/en/latest/use-cases/ci-cd/"&gt;CI/CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://argo-workflows.readthedocs.io/en/latest/use-cases/other/"&gt;Other use cases&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why Argo Workflows?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Argo Workflows is the most popular workflow execution engine for Kubernetes.&lt;/li&gt; 
 &lt;li&gt;Light-weight, scalable, and easier to use. 
  &lt;ul&gt; 
   &lt;li&gt;Including for Python users through &lt;a href="https://hera.readthedocs.io/en/stable/"&gt;the Hera Python SDK for Argo Workflows&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Designed from the ground up for containers without the overhead and limitations of legacy VM and server-based environments.&lt;/li&gt; 
 &lt;li&gt;Cloud agnostic and can run on any Kubernetes cluster.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://blog.argoproj.io/argo-workflows-events-2023-user-survey-results-82c53bc30543"&gt;Read what people said in our latest survey&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Try Argo Workflows&lt;/h2&gt; 
&lt;p&gt;You can try Argo Workflows via one of the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://killercoda.com/argoproj/course/argo-workflows/"&gt;Interactive Training Material&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://workflows.apps.argoproj.io/workflows/argo"&gt;Access the demo environment&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/argoproj/argo-workflows/main/docs/assets/screenshot.png" alt="Screenshot" /&gt;&lt;/p&gt; 
&lt;h2&gt;Who uses Argo Workflows?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/argoproj/argo-workflows/main/USERS.md"&gt;About 200+ organizations are officially using Argo Workflows&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;p&gt;Just some of the projects that use or rely on Argo Workflows (complete list &lt;a href="https://github.com/akuity/awesome-argo#ecosystem-projects"&gt;here&lt;/a&gt;):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/argoproj/argo-events"&gt;Argo Events&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/couler-proj/couler"&gt;Couler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/argoproj-labs/hera-workflows"&gt;Hera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubeflow/katib"&gt;Katib&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kedro.readthedocs.io/en/stable/"&gt;Kedro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubeflow/pipelines"&gt;Kubeflow Pipelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://metaflow.org"&gt;Netflix Metaflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/onepanelio/onepanel"&gt;Onepanel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orchest/orchest/"&gt;Orchest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quickube/piper"&gt;Piper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ploomber/ploomber"&gt;Ploomber&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SeldonIO/seldon-core"&gt;Seldon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sql-machine-learning/sqlflow"&gt;SQLFlow&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Client Libraries&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href="https://raw.githubusercontent.com/argoproj/argo-workflows/main/docs/client-libraries.md"&gt;Java, Golang and Python clients&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://argo-workflows.readthedocs.io/en/latest/quick-start/"&gt;Get started here&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://argo-workflows.readthedocs.io/en/latest/walk-through/"&gt;Walk-through examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://argo-workflows.readthedocs.io/en/latest/"&gt;View the docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;An incomplete list of features Argo Workflows provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;UI to visualize and manage Workflows&lt;/li&gt; 
 &lt;li&gt;Artifact support (S3, Artifactory, Alibaba Cloud OSS, Azure Blob Storage, HTTP, Git, GCS, raw)&lt;/li&gt; 
 &lt;li&gt;Workflow templating to store commonly used Workflows in the cluster&lt;/li&gt; 
 &lt;li&gt;Archiving Workflows after executing for later access&lt;/li&gt; 
 &lt;li&gt;Scheduled workflows using cron&lt;/li&gt; 
 &lt;li&gt;Server interface with REST API (HTTP and GRPC)&lt;/li&gt; 
 &lt;li&gt;DAG or Steps based declaration of workflows&lt;/li&gt; 
 &lt;li&gt;Step level input &amp;amp; outputs (artifacts/parameters)&lt;/li&gt; 
 &lt;li&gt;Loops&lt;/li&gt; 
 &lt;li&gt;Parameterization&lt;/li&gt; 
 &lt;li&gt;Conditionals&lt;/li&gt; 
 &lt;li&gt;Timeouts (step &amp;amp; workflow level)&lt;/li&gt; 
 &lt;li&gt;Retry (step &amp;amp; workflow level)&lt;/li&gt; 
 &lt;li&gt;Resubmit (memoized)&lt;/li&gt; 
 &lt;li&gt;Suspend &amp;amp; Resume&lt;/li&gt; 
 &lt;li&gt;Cancellation&lt;/li&gt; 
 &lt;li&gt;K8s resource orchestration&lt;/li&gt; 
 &lt;li&gt;Exit Hooks (notifications, cleanup)&lt;/li&gt; 
 &lt;li&gt;Garbage collection of completed workflow&lt;/li&gt; 
 &lt;li&gt;Scheduling (affinity/tolerations/node selectors)&lt;/li&gt; 
 &lt;li&gt;Volumes (ephemeral/existing)&lt;/li&gt; 
 &lt;li&gt;Parallelism limits&lt;/li&gt; 
 &lt;li&gt;Daemoned steps&lt;/li&gt; 
 &lt;li&gt;DinD (docker-in-docker)&lt;/li&gt; 
 &lt;li&gt;Script steps&lt;/li&gt; 
 &lt;li&gt;Event emission&lt;/li&gt; 
 &lt;li&gt;Prometheus metrics&lt;/li&gt; 
 &lt;li&gt;Multiple executors&lt;/li&gt; 
 &lt;li&gt;Multiple pod and workflow garbage collection strategies&lt;/li&gt; 
 &lt;li&gt;Automatically calculated resource usage per step&lt;/li&gt; 
 &lt;li&gt;Java/Golang/Python SDKs&lt;/li&gt; 
 &lt;li&gt;Pod Disruption Budget support&lt;/li&gt; 
 &lt;li&gt;Single-sign on (OAuth2/OIDC)&lt;/li&gt; 
 &lt;li&gt;Webhook triggering&lt;/li&gt; 
 &lt;li&gt;CLI&lt;/li&gt; 
 &lt;li&gt;Out-of-the box and custom Prometheus metrics&lt;/li&gt; 
 &lt;li&gt;Windows container support&lt;/li&gt; 
 &lt;li&gt;Embedded widgets&lt;/li&gt; 
 &lt;li&gt;Multiplex log viewer&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community Meetings&lt;/h2&gt; 
&lt;p&gt;We host monthly community meetings where we and the community showcase demos and discuss the current and future state of the project. Feel free to join us! For Community Meeting information, minutes and recordings, please &lt;a href="https://bit.ly/argo-wf-cmty-mtng"&gt;see here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Participation in Argo Workflows is governed by the &lt;a href="https://github.com/cncf/foundation/raw/master/code-of-conduct.md"&gt;CNCF Code of Conduct&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community Blogs and Presentations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/terrytangyuan/awesome-argo"&gt;Awesome-Argo: A Curated List of Awesome Projects and Resources Related to Argo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/XNXJtxkUKeY"&gt;Automation of Everything - How To Combine Argo Events, Workflows &amp;amp; Pipelines, CD, and Rollouts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/UMaivwrAyTA"&gt;Argo Workflows and Pipelines - CI/CD, Machine Learning, and Other Kubernetes Workflows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/@marekermk/provisioning-argo-on-openshift-with-ansible-and-kustomize-340a1fda8b50"&gt;Argo Ansible role: Provisioning Argo Workflows on OpenShift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://bit.ly/30YNIvT"&gt;Argo Workflows vs Apache Airflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/terrytangyuan/public-talks/tree/main/talks/kubecon-na-2023-metaflow-argo"&gt;Beyond Prototypes: Production-Ready ML Systems with Metaflow and Argo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/@bouwe.ceunen/ci-cd-with-argo-on-kubernetes-28c1a99616a9"&gt;CI/CD with Argo on Kubernetes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://haque-zubair.medium.com/define-your-ci-cd-pipeline-with-argo-workflows-25aefb02fa63"&gt;Define Your CI/CD Pipeline with Argo Workflows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/terrytangyuan/distributed-ml-patterns"&gt;Distributed Machine Learning Patterns from Manning Publication&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/terrytangyuan/public-talks/tree/main/talks/platform-con-2024-engineering-cloud-native-ai-platform"&gt;Engineering Cloud Native AI Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/terrytangyuan/public-talks/raw/main/talks/argocon-automl-experiments-2022"&gt;Managing Thousands of Automatic Machine Learning Experiments with Argo and Katib&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=BYVf7GhfiRg"&gt;Revolutionizing Scientific Simulations with Argo Workflows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://admiralty.io/blog/running-argo-workflows-across-multiple-kubernetes-clusters/"&gt;Running Argo Workflows Across Multiple Kubernetes Clusters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KqEKRPjy4aE"&gt;Scaling Kubernetes: Best Practices for Managing Large-Scale Batch Jobs with Spark and Argo Workflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.anaconda.com/blog/developer-blog/open-source-model-management-roundup-polyaxon-argo-and-seldon/"&gt;Open Source Model Management Roundup: Polyaxon, Argo, and Seldon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.interline.io/blog/scaling-openstreetmap-data-workflows/"&gt;Producing 200 OpenStreetMap extracts in 35 minutes using a scalable data workflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/terrytangyuan/public-talks/tree/main/talks/kubecon-europe-2024-production-ai-platform-on-k8s"&gt;Production-Ready AI Platform on Kubernetes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://dev.matt.hillsdon.net/2018/03/24/argo-integration-review.html"&gt;Argo integration review&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;TGI Kubernetes with Joe Beda: &lt;a href="https://www.youtube.com/watch?v=M_rxPPLG8pU&amp;amp;start=859"&gt;Argo workflow system&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/argoproj"&gt;Argo Project GitHub organization&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://argoproj.github.io/"&gt;Argo Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://argoproj.github.io/community/join-slack"&gt;Argo Slack&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/argoproj/argo-workflows/main/SECURITY.md"&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github/github-mcp-server</title>
      <link>https://github.com/github/github-mcp-server</link>
      <description>&lt;p&gt;GitHub's official MCP Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub MCP Server&lt;/h1&gt; 
&lt;p&gt;The GitHub MCP Server connects AI tools directly to GitHub's platform. This gives AI agents, assistants, and chatbots the ability to read repositories and code files, manage issues and PRs, analyze code, and automate workflows. All through natural language interactions.&lt;/p&gt; 
&lt;h3&gt;Use Cases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Repository Management: Browse and query code, search files, analyze commits, and understand project structure across any repository you have access to.&lt;/li&gt; 
 &lt;li&gt;Issue &amp;amp; PR Automation: Create, update, and manage issues and pull requests. Let AI help triage bugs, review code changes, and maintain project boards.&lt;/li&gt; 
 &lt;li&gt;CI/CD &amp;amp; Workflow Intelligence: Monitor GitHub Actions workflow runs, analyze build failures, manage releases, and get insights into your development pipeline.&lt;/li&gt; 
 &lt;li&gt;Code Analysis: Examine security findings, review Dependabot alerts, understand code patterns, and get comprehensive insights into your codebase.&lt;/li&gt; 
 &lt;li&gt;Team Collaboration: Access discussions, manage notifications, analyze team activity, and streamline processes for your team.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Built for developers who want to connect their AI tools to GitHub context and capabilities, from simple natural language queries to complex multi-step agent workflows.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Remote GitHub MCP Server&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;config=%7B%22type%22%3A%20%22http%22%2C%22url%22%3A%20%22https%3A%2F%2Fapi.githubcopilot.com%2Fmcp%2F%22%7D"&gt;&lt;img src="https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white" alt="Install in VS Code" /&gt;&lt;/a&gt; &lt;a href="https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;config=%7B%22type%22%3A%20%22http%22%2C%22url%22%3A%20%22https%3A%2F%2Fapi.githubcopilot.com%2Fmcp%2F%22%7D&amp;amp;quality=insiders"&gt;&lt;img src="https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white" alt="Install in VS Code Insiders" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The remote GitHub MCP Server is hosted by GitHub and provides the easiest method for getting up and running. If your MCP host does not support remote MCP servers, don't worry! You can use the &lt;a href="https://github.com/github/github-mcp-server?tab=readme-ov-file#local-github-mcp-server"&gt;local version of the GitHub MCP Server&lt;/a&gt; instead.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;A compatible MCP host with remote server support (VS Code 1.101+, Claude Desktop, Cursor, Windsurf, etc.)&lt;/li&gt; 
 &lt;li&gt;Any applicable &lt;a href="https://github.com/github/github-mcp-server/raw/main/docs/policies-and-governance.md"&gt;policies enabled&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Install in VS Code&lt;/h3&gt; 
&lt;p&gt;For quick installation, use one of the one-click install buttons above. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start. Make sure you're using &lt;a href="https://code.visualstudio.com/updates/v1_101"&gt;VS Code 1.101&lt;/a&gt; or &lt;a href="https://code.visualstudio.com/updates"&gt;later&lt;/a&gt; for remote MCP and OAuth support.&lt;/p&gt; 
&lt;p&gt;Alternatively, to manually configure VS Code, choose the appropriate JSON block from the examples below and add it to your host configuration:&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;th&gt;Using OAuth&lt;/th&gt;
   &lt;th&gt;Using a GitHub PAT&lt;/th&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;th align="left" colspan="2"&gt;VS Code (version 1.101 or greater)&lt;/th&gt;
  &lt;/tr&gt; 
  &lt;tr valign="top"&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
  "servers": {
    "github": {
      "type": "http",
      "url": "https://api.githubcopilot.com/mcp/"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
  "servers": {
    "github": {
      "type": "http",
      "url": "https://api.githubcopilot.com/mcp/",
      "headers": {
        "Authorization": "Bearer ${input:github_mcp_pat}"
      }
    }
  },
  "inputs": [
    {
      "type": "promptString",
      "id": "github_mcp_pat",
      "description": "GitHub Personal Access Token",
      "password": true
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Install in other MCP hosts&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-other-copilot-ides.md"&gt;GitHub Copilot in other IDEs&lt;/a&gt;&lt;/strong&gt; - Installation for JetBrains, Visual Studio, Eclipse, and Xcode with GitHub Copilot&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-claude.md"&gt;Claude Applications&lt;/a&gt;&lt;/strong&gt; - Installation guide for Claude Web, Claude Desktop and Claude Code CLI&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-cursor.md"&gt;Cursor&lt;/a&gt;&lt;/strong&gt; - Installation guide for Cursor IDE&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-windsurf.md"&gt;Windsurf&lt;/a&gt;&lt;/strong&gt; - Installation guide for Windsurf IDE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each MCP host application needs to configure a GitHub App or OAuth App to support remote access via OAuth. Any host application that supports remote MCP servers should support the remote GitHub server with PAT authentication. Configuration details and support levels vary by host. Make sure to refer to the host application's documentation for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;h4&gt;Toolset configuration&lt;/h4&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/remote-server.md"&gt;Remote Server Documentation&lt;/a&gt; for full details on remote server configuration, toolsets, headers, and advanced usage. This file provides comprehensive instructions and examples for connecting, customizing, and installing the remote GitHub MCP Server in VS Code and other MCP hosts.&lt;/p&gt; 
&lt;p&gt;When no toolsets are specified, &lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/#default-toolset"&gt;default toolsets&lt;/a&gt; are used.&lt;/p&gt; 
&lt;h4&gt;Enterprise Cloud with data residency (ghe.com)&lt;/h4&gt; 
&lt;p&gt;GitHub Enterprise Cloud can also make use of the remote server.&lt;/p&gt; 
&lt;p&gt;Example for &lt;code&gt;https://octocorp.ghe.com&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    ...
    "proxima-github": {
      "type": "http",
      "url": "https://copilot-api.octocorp.ghe.com/mcp",
      "headers": {
        "Authorization": "Bearer ${input:github_mcp_pat}"
      }
    },
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GitHub Enterprise Server does not support remote server hosting. Please refer to &lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/#github-enterprise-server-and-enterprise-cloud-with-data-residency-ghecom"&gt;GitHub Enterprise Server and Enterprise Cloud with data residency (ghe.com)&lt;/a&gt; from the local server configuration.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Local GitHub MCP Server&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&amp;amp;config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D"&gt;&lt;img src="https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white" alt="Install with Docker in VS Code" /&gt;&lt;/a&gt; &lt;a href="https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&amp;amp;config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&amp;amp;quality=insiders"&gt;&lt;img src="https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white" alt="Install with Docker in VS Code Insiders" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;To run the server in a container, you will need to have &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; installed.&lt;/li&gt; 
 &lt;li&gt;Once Docker is installed, you will also need to ensure Docker is running. The image is public; if you get errors on pull, you may have an expired token and need to &lt;code&gt;docker logout ghcr.io&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Lastly you will need to &lt;a href="https://github.com/settings/personal-access-tokens/new"&gt;Create a GitHub Personal Access Token&lt;/a&gt;. The MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens"&gt;documentation&lt;/a&gt;).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Handling PATs Securely&lt;/b&gt;&lt;/summary&gt; 
 &lt;h3&gt;Environment Variables (Recommended)&lt;/h3&gt; 
 &lt;p&gt;To keep your GitHub PAT secure and reusable across different MCP hosts:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Store your PAT in environment variables&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;export GITHUB_PAT=your_token_here
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or create a &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-env"&gt;GITHUB_PAT=your_token_here
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Protect your &lt;code&gt;.env&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Add to .gitignore to prevent accidental commits
echo ".env" &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reference the token in configurations&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# CLI usage
claude mcp update github -e GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_PAT

# In config files (where supported)
"env": {
  "GITHUB_PERSONAL_ACCESS_TOKEN": "$GITHUB_PAT"
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Environment variable support varies by host app and IDE. Some applications (like Windsurf) require hardcoded tokens in config files.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h3&gt;Token Security Best Practices&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Minimum scopes&lt;/strong&gt;: Only grant necessary permissions 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt; - Repository operations&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;read:packages&lt;/code&gt; - Docker image access&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;read:org&lt;/code&gt; - Organization team access&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Separate tokens&lt;/strong&gt;: Use different PATs for different projects/environments&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Regular rotation&lt;/strong&gt;: Update tokens periodically&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Never commit&lt;/strong&gt;: Keep tokens out of version control&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;File permissions&lt;/strong&gt;: Restrict access to config files containing tokens &lt;pre&gt;&lt;code class="language-bash"&gt;chmod 600 ~/.your-app/config.json
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;GitHub Enterprise Server and Enterprise Cloud with data residency (ghe.com)&lt;/h3&gt; 
&lt;p&gt;The flag &lt;code&gt;--gh-host&lt;/code&gt; and the environment variable &lt;code&gt;GITHUB_HOST&lt;/code&gt; can be used to set the hostname for GitHub Enterprise Server or GitHub Enterprise Cloud with data residency.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For GitHub Enterprise Server, prefix the hostname with the &lt;code&gt;https://&lt;/code&gt; URI scheme, as it otherwise defaults to &lt;code&gt;http://&lt;/code&gt;, which GitHub Enterprise Server does not support.&lt;/li&gt; 
 &lt;li&gt;For GitHub Enterprise Cloud with data residency, use &lt;code&gt;https://YOURSUBDOMAIN.ghe.com&lt;/code&gt; as the hostname.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;"github": {
    "command": "docker",
    "args": [
    "run",
    "-i",
    "--rm",
    "-e",
    "GITHUB_PERSONAL_ACCESS_TOKEN",
    "-e",
    "GITHUB_HOST",
    "ghcr.io/github/github-mcp-server"
    ],
    "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${input:github_token}",
        "GITHUB_HOST": "https://&amp;lt;your GHES or ghe.com domain name&amp;gt;"
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install in GitHub Copilot on VS Code&lt;/h3&gt; 
&lt;p&gt;For quick installation, use one of the one-click install buttons above. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start.&lt;/p&gt; 
&lt;p&gt;More about using MCP server tools in VS Code's &lt;a href="https://code.visualstudio.com/docs/copilot/chat/mcp-servers"&gt;agent mode documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Install in GitHub Copilot on other IDEs (JetBrains, Visual Studio, Eclipse, etc.)&lt;/p&gt; 
&lt;p&gt;Add the following JSON block to your IDE's MCP settings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcp": {
    "inputs": [
      {
        "type": "promptString",
        "id": "github_token",
        "description": "GitHub Personal Access Token",
        "password": true
      }
    ],
    "servers": {
      "github": {
        "command": "docker",
        "args": [
          "run",
          "-i",
          "--rm",
          "-e",
          "GITHUB_PERSONAL_ACCESS_TOKEN",
          "ghcr.io/github/github-mcp-server"
        ],
        "env": {
          "GITHUB_PERSONAL_ACCESS_TOKEN": "${input:github_token}"
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Optionally, you can add a similar example (i.e. without the mcp key) to a file called &lt;code&gt;.vscode/mcp.json&lt;/code&gt; in your workspace. This will allow you to share the configuration with other host applications that accept the same format.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Example JSON block without the MCP key included&lt;/b&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "inputs": [
    {
      "type": "promptString",
      "id": "github_token",
      "description": "GitHub Personal Access Token",
      "password": true
    }
  ],
  "servers": {
    "github": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GITHUB_PERSONAL_ACCESS_TOKEN",
        "ghcr.io/github/github-mcp-server"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${input:github_token}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Install in Other MCP Hosts&lt;/h3&gt; 
&lt;p&gt;For other MCP host applications, please refer to our installation guides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-other-copilot-ides.md"&gt;GitHub Copilot in other IDEs&lt;/a&gt;&lt;/strong&gt; - Installation for JetBrains, Visual Studio, Eclipse, and Xcode with GitHub Copilot&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-claude.md"&gt;Claude Code &amp;amp; Claude Desktop&lt;/a&gt;&lt;/strong&gt; - Installation guide for Claude Code and Claude Desktop&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-cursor.md"&gt;Cursor&lt;/a&gt;&lt;/strong&gt; - Installation guide for Cursor IDE&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-gemini-cli.md"&gt;Google Gemini CLI&lt;/a&gt;&lt;/strong&gt; - Installation guide for Google Gemini CLI&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-windsurf.md"&gt;Windsurf&lt;/a&gt;&lt;/strong&gt; - Installation guide for Windsurf IDE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a complete overview of all installation options, see our &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides"&gt;Installation Guides Index&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Any host application that supports local MCP servers should be able to access the local GitHub MCP server. However, the specific configuration process, syntax and stability of the integration will vary by host application. While many may follow a similar format to the examples above, this is not guaranteed. Please refer to your host application's documentation for the correct MCP configuration syntax and setup process.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Build from source&lt;/h3&gt; 
&lt;p&gt;If you don't have Docker, you can use &lt;code&gt;go build&lt;/code&gt; to build the binary in the &lt;code&gt;cmd/github-mcp-server&lt;/code&gt; directory, and use the &lt;code&gt;github-mcp-server stdio&lt;/code&gt; command with the &lt;code&gt;GITHUB_PERSONAL_ACCESS_TOKEN&lt;/code&gt; environment variable set to your token. To specify the output location of the build, use the &lt;code&gt;-o&lt;/code&gt; flag. You should configure your server to use the built executable as its &lt;code&gt;command&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-JSON"&gt;{
  "mcp": {
    "servers": {
      "github": {
        "command": "/path/to/github-mcp-server",
        "args": ["stdio"],
        "env": {
          "GITHUB_PERSONAL_ACCESS_TOKEN": "&amp;lt;YOUR_TOKEN&amp;gt;"
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tool Configuration&lt;/h2&gt; 
&lt;p&gt;The GitHub MCP Server supports enabling or disabling specific groups of functionalities via the &lt;code&gt;--toolsets&lt;/code&gt; flag. This allows you to control which GitHub API capabilities are available to your AI tools. Enabling only the toolsets that you need can help the LLM with tool choice and reduce the context size.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Toolsets are not limited to Tools. Relevant MCP Resources and Prompts are also included where applicable.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;When no toolsets are specified, &lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/#default-toolset"&gt;default toolsets&lt;/a&gt; are used.&lt;/p&gt; 
&lt;h4&gt;Specifying Toolsets&lt;/h4&gt; 
&lt;p&gt;To specify toolsets you want available to the LLM, you can pass an allow-list in two ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Command Line Argument&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;github-mcp-server --toolsets repos,issues,pull_requests,actions,code_security
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Environment Variable&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;GITHUB_TOOLSETS="repos,issues,pull_requests,actions,code_security" ./github-mcp-server
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The environment variable &lt;code&gt;GITHUB_TOOLSETS&lt;/code&gt; takes precedence over the command line argument if both are provided.&lt;/p&gt; 
&lt;h3&gt;Using Toolsets With Docker&lt;/h3&gt; 
&lt;p&gt;When using Docker, you can pass the toolsets as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -i --rm \
  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \
  -e GITHUB_TOOLSETS="repos,issues,pull_requests,actions,code_security,experiments" \
  ghcr.io/github/github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Special toolsets&lt;/h3&gt; 
&lt;h4&gt;"all" toolset&lt;/h4&gt; 
&lt;p&gt;The special toolset &lt;code&gt;all&lt;/code&gt; can be provided to enable all available toolsets regardless of any other configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./github-mcp-server --toolsets all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or using the environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;GITHUB_TOOLSETS="all" ./github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;"default" toolset&lt;/h4&gt; 
&lt;p&gt;The default toolset &lt;code&gt;default&lt;/code&gt; is the configuration that gets passed to the server if no toolsets are specified.&lt;/p&gt; 
&lt;p&gt;The default configuration is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;context&lt;/li&gt; 
 &lt;li&gt;repos&lt;/li&gt; 
 &lt;li&gt;issues&lt;/li&gt; 
 &lt;li&gt;pull_requests&lt;/li&gt; 
 &lt;li&gt;users&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To keep the default configuration and add additional toolsets:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;GITHUB_TOOLSETS="default,stargazers" ./github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Available Toolsets&lt;/h3&gt; 
&lt;p&gt;The following sets of tools are available:&lt;/p&gt; 
&lt;!-- START AUTOMATED TOOLSETS --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Toolset&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;context&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Strongly recommended&lt;/strong&gt;: Tools that provide context about the current user and GitHub context you are operating in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;actions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Actions workflows and CI/CD operations&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;code_security&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Code security related tools, such as GitHub Code Scanning&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dependabot&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Dependabot tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;discussions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Discussions related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;experiments&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Experimental features that are not considered stable yet&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gists&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Gist related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;issues&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Issues related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Labels related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;notifications&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Notifications related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;orgs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Organization related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;projects&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Projects related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;pull_requests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Pull Request related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;repos&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Repository related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;secret_protection&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Secret protection related tools, such as GitHub Secret Scanning&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;security_advisories&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Security advisories related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;stargazers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Stargazers related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;users&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub User related tools&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- END AUTOMATED TOOLSETS --&gt; 
&lt;h3&gt;Additional Toolsets in Remote Github MCP Server&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Toolset&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;copilot&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Copilot related tools (e.g. Copilot Coding Agent)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;copilot_spaces&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Copilot Spaces related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;github_support_docs_search&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Search docs to answer GitHub product and support questions&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;!-- START AUTOMATED TOOLS --&gt; 
&lt;details&gt; 
 &lt;summary&gt;Actions&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;cancel_workflow_run&lt;/strong&gt; - Cancel workflow run&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_workflow_run_logs&lt;/strong&gt; - Delete workflow logs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;download_workflow_run_artifact&lt;/strong&gt; - Download workflow artifact&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;artifact_id&lt;/code&gt;: The unique identifier of the artifact (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_job_logs&lt;/strong&gt; - Get job logs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;failed_only&lt;/code&gt;: When true, gets logs for all failed jobs in run_id (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;job_id&lt;/code&gt;: The unique identifier of the workflow job (required for single job logs) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;return_content&lt;/code&gt;: Returns actual log content instead of URLs (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (required when using failed_only) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tail_lines&lt;/code&gt;: Number of lines to return from the end of the log (number, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run&lt;/strong&gt; - Get workflow run&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run_logs&lt;/strong&gt; - Get workflow run logs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run_usage&lt;/strong&gt; - Get workflow usage&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_jobs&lt;/strong&gt; - List workflow jobs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: Filters jobs by their completed_at timestamp (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_run_artifacts&lt;/strong&gt; - List workflow artifacts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_runs&lt;/strong&gt; - List workflow runs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;actor&lt;/code&gt;: Returns someone's workflow runs. Use the login for the user who created the workflow run. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Returns workflow runs associated with a branch. Use the name of the branch. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: Returns workflow runs for a specific event type (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;status&lt;/code&gt;: Returns workflow runs with the check run status (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;workflow_id&lt;/code&gt;: The workflow ID or workflow file name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflows&lt;/strong&gt; - List workflows&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;rerun_failed_jobs&lt;/strong&gt; - Rerun failed jobs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;rerun_workflow_run&lt;/strong&gt; - Rerun workflow run&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;run_workflow&lt;/strong&gt; - Run workflow&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;inputs&lt;/code&gt;: Inputs the workflow accepts (object, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: The git reference for the workflow. The reference can be a branch or tag name. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;workflow_id&lt;/code&gt;: The workflow ID (numeric) or workflow file name (e.g., main.yml, ci.yaml) (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Code Security&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_code_scanning_alert&lt;/strong&gt; - Get code scanning alert&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: The number of the alert. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_code_scanning_alerts&lt;/strong&gt; - List code scanning alerts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: The Git reference for the results you want to list. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: Filter code scanning alerts by severity (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter code scanning alerts by state. Defaults to open (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tool_name&lt;/code&gt;: The name of the tool used for code scanning. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Context&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_me&lt;/strong&gt; - Get my user profile&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;No parameters required&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_team_members&lt;/strong&gt; - Get team members&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;org&lt;/code&gt;: Organization login (owner) that contains the team. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;team_slug&lt;/code&gt;: Team slug (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_teams&lt;/strong&gt; - Get teams&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;user&lt;/code&gt;: Username to get teams for. If not provided, uses the authenticated user. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Dependabot&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_dependabot_alert&lt;/strong&gt; - Get dependabot alert&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: The number of the alert. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_dependabot_alerts&lt;/strong&gt; - List dependabot alerts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: Filter dependabot alerts by severity (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter dependabot alerts by state. Defaults to open (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Discussions&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_discussion&lt;/strong&gt; - Get discussion&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;discussionNumber&lt;/code&gt;: Discussion Number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_discussion_comments&lt;/strong&gt; - Get discussion comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after&lt;/code&gt;: Cursor for pagination. Use the endCursor from the previous page's PageInfo for GraphQL APIs. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;discussionNumber&lt;/code&gt;: Discussion Number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_discussion_categories&lt;/strong&gt; - List discussion categories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name. If not provided, discussion categories will be queried at the organisation level. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_discussions&lt;/strong&gt; - List discussions&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after&lt;/code&gt;: Cursor for pagination. Use the endCursor from the previous page's PageInfo for GraphQL APIs. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;category&lt;/code&gt;: Optional filter by discussion category ID. If provided, only discussions with this category are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Order direction. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;orderBy&lt;/code&gt;: Order discussions by field. If provided, the 'direction' also needs to be provided. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name. If not provided, discussions will be queried at the organisation level. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Gists&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_gist&lt;/strong&gt; - Create Gist&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Content for simple single-file gist creation (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Description of the gist (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: Filename for simple single-file gist creation (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;public&lt;/code&gt;: Whether the gist is public (boolean, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_gists&lt;/strong&gt; - List Gists&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Only gists updated after this time (ISO 8601 timestamp) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;username&lt;/code&gt;: GitHub username (omit for authenticated user's gists) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_gist&lt;/strong&gt; - Update Gist&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Content for the file (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Updated description of the gist (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: Filename to update or create (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;gist_id&lt;/code&gt;: ID of the gist to update (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Issues&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_issue_comment&lt;/strong&gt; - Add comment to issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Comment content (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number to comment on (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_sub_issue&lt;/strong&gt; - Add sub-issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the parent issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;replace_parent&lt;/code&gt;: When true, replaces the sub-issue's current parent issue (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sub_issue_id&lt;/code&gt;: The ID of the sub-issue to add. ID is not the same as issue number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;assign_copilot_to_issue&lt;/strong&gt; - Assign Copilot to issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issueNumber&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_issue&lt;/strong&gt; - Open new issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;assignees&lt;/code&gt;: Usernames to assign to this issue (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Issue body content (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: Labels to apply to this issue (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;milestone&lt;/code&gt;: Milestone number (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: Issue title (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: Type of this issue (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_issue&lt;/strong&gt; - Get issue details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_issue_comments&lt;/strong&gt; - Get issue comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_label&lt;/strong&gt; - Get a specific label from a repository.&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Label name. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization name) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_issue_types&lt;/strong&gt; - List available issue types&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The organization owner of the repository (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_issues&lt;/strong&gt; - List issues&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after&lt;/code&gt;: Cursor for pagination. Use the endCursor from the previous page's PageInfo for GraphQL APIs. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Order direction. If provided, the 'orderBy' also needs to be provided. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: Filter by labels (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;orderBy&lt;/code&gt;: Order issues by field. If provided, the 'direction' also needs to be provided. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Filter by date (ISO 8601 timestamp) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state, by default both open and closed issues are returned when not provided (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_label&lt;/strong&gt; - List labels from a repository or an issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number - if provided, lists labels on the specific issue (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization name) - required for all operations (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name - required for all operations (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_sub_issues&lt;/strong&gt; - List sub-issues&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (default: 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;per_page&lt;/code&gt;: Number of results per page (max 100, default: 30) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;remove_sub_issue&lt;/strong&gt; - Remove sub-issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the parent issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sub_issue_id&lt;/code&gt;: The ID of the sub-issue to remove. ID is not the same as issue number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;reprioritize_sub_issue&lt;/strong&gt; - Reprioritize sub-issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after_id&lt;/code&gt;: The ID of the sub-issue to be prioritized after (either after_id OR before_id should be specified) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;before_id&lt;/code&gt;: The ID of the sub-issue to be prioritized before (either after_id OR before_id should be specified) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the parent issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sub_issue_id&lt;/code&gt;: The ID of the sub-issue to reprioritize. ID is not the same as issue number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_issues&lt;/strong&gt; - Search issues&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only issues for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query using GitHub issues search syntax (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only issues for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field by number of matches of categories, defaults to best match (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_issue&lt;/strong&gt; - Edit issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;assignees&lt;/code&gt;: New assignees (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: New description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;duplicate_of&lt;/code&gt;: Issue number that this issue is a duplicate of. Only used when state_reason is 'duplicate'. (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number to update (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: New labels (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;milestone&lt;/code&gt;: New milestone number (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: New state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state_reason&lt;/code&gt;: Reason for the state change. Ignored unless state is changed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: New title (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: New issue type (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Labels&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_label&lt;/strong&gt; - Get a specific label from a repository.&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Label name. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization name) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;label_write&lt;/strong&gt; - Write operations on repository labels.&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;color&lt;/code&gt;: Label color as 6-character hex code without '#' prefix (e.g., 'f29513'). Required for 'create', optional for 'update'. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Label description text. Optional for 'create' and 'update'. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;method&lt;/code&gt;: Operation to perform: 'create', 'update', or 'delete' (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Label name - required for all operations (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;new_name&lt;/code&gt;: New name for the label (used only with 'update' method to rename) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization name) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_label&lt;/strong&gt; - List labels from a repository or an issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number - if provided, lists labels on the specific issue (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization name) - required for all operations (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name - required for all operations (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Notifications&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;dismiss_notification&lt;/strong&gt; - Dismiss notification&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: The new state of the notification (read/done) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;threadID&lt;/code&gt;: The ID of the notification thread (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_notification_details&lt;/strong&gt; - Get notification details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;notificationID&lt;/code&gt;: The ID of the notification (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_notifications&lt;/strong&gt; - List notifications&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;before&lt;/code&gt;: Only show notifications updated before the given time (ISO 8601 format) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: Filter notifications to, use default unless specified. Read notifications are ones that have already been acknowledged by the user. Participating notifications are those that the user is directly involved in, such as issues or pull requests they have commented on or created. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only notifications for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only notifications for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Only show notifications updated after the given time (ISO 8601 format) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;manage_notification_subscription&lt;/strong&gt; - Manage notification subscription&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Action to perform: ignore, watch, or delete the notification subscription. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;notificationID&lt;/code&gt;: The ID of the notification thread. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;manage_repository_notification_subscription&lt;/strong&gt; - Manage repository notification subscription&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Action to perform: ignore, watch, or delete the repository notification subscription. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The account owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;mark_all_notifications_read&lt;/strong&gt; - Mark all notifications as read&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;lastReadAt&lt;/code&gt;: Describes the last point that notifications were checked (optional). Default: Now (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only notifications for this repository are marked as read. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only notifications for this repository are marked as read. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Organizations&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;search_orgs&lt;/strong&gt; - Search organizations 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Organization search query. Examples: 'microsoft', 'location:california', 'created:&amp;gt;=2025-01-01'. Search is automatically scoped to type:org. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field by category (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Projects&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_project_item&lt;/strong&gt; - Add project item&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;item_id&lt;/code&gt;: The numeric ID of the issue or pull request to add to the project. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;item_type&lt;/code&gt;: The item's type, either issue or pull_request. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: If owner_type == user it is the handle for the GitHub user account. If owner_type == org it is the name of the organization. The name is not case sensitive. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner_type&lt;/code&gt;: Owner type (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;project_number&lt;/code&gt;: The project's number. (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_project_item&lt;/strong&gt; - Delete project item&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;item_id&lt;/code&gt;: The internal project item ID to delete from the project (not the issue or pull request ID). (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: If owner_type == user it is the handle for the GitHub user account. If owner_type == org it is the name of the organization. The name is not case sensitive. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner_type&lt;/code&gt;: Owner type (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;project_number&lt;/code&gt;: The project's number. (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_project&lt;/strong&gt; - Get project&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: If owner_type == user it is the handle for the GitHub user account. If owner_type == org it is the name of the organization. The name is not case sensitive. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner_type&lt;/code&gt;: Owner type (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;project_number&lt;/code&gt;: The project's number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_project_field&lt;/strong&gt; - Get project field&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;field_id&lt;/code&gt;: The field's id. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: If owner_type == user it is the handle for the GitHub user account. If owner_type == org it is the name of the organization. The name is not case sensitive. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner_type&lt;/code&gt;: Owner type (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;project_number&lt;/code&gt;: The project's number. (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_project_item&lt;/strong&gt; - Get project item&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;item_id&lt;/code&gt;: The item's ID. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: If owner_type == user it is the handle for the GitHub user account. If owner_type == org it is the name of the organization. The name is not case sensitive. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner_type&lt;/code&gt;: Owner type (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;project_number&lt;/code&gt;: The project's number. (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_project_fields&lt;/strong&gt; - List project fields&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: If owner_type == user it is the handle for the GitHub user account. If owner_type == org it is the name of the organization. The name is not case sensitive. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner_type&lt;/code&gt;: Owner type (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;per_page&lt;/code&gt;: Number of results per page (max 100, default: 30) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;project_number&lt;/code&gt;: The project's number. (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_project_items&lt;/strong&gt; - List project items&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: If owner_type == user it is the handle for the GitHub user account. If owner_type == org it is the name of the organization. The name is not case sensitive. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner_type&lt;/code&gt;: Owner type (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;per_page&lt;/code&gt;: Number of results per page (max 100, default: 30) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;project_number&lt;/code&gt;: The project's number. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query to filter items (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_projects&lt;/strong&gt; - List projects&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: If owner_type == user it is the handle for the GitHub user account. If owner_type == org it is the name of the organization. The name is not case sensitive. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner_type&lt;/code&gt;: Owner type (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;per_page&lt;/code&gt;: Number of results per page (max 100, default: 30) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Filter projects by a search query (matches title and description) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_project_item&lt;/strong&gt; - Update project item&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;item_id&lt;/code&gt;: The unique identifier of the project item. This is not the issue or pull request ID. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: If owner_type == user it is the handle for the GitHub user account. If owner_type == org it is the name of the organization. The name is not case sensitive. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner_type&lt;/code&gt;: Owner type (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;project_number&lt;/code&gt;: The project's number. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;updated_field&lt;/code&gt;: Object consisting of the ID of the project field to update and the new value for the field. To clear the field, set "value" to null. Example: {"id": 123456, "value": "New Value"} (object, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Pull Requests&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_comment_to_pending_review&lt;/strong&gt; - Add review comment to the requester's latest pending pull request review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: The text of the review comment (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;line&lt;/code&gt;: The line of the blob in the pull request diff that the comment applies to. For multi-line comments, the last line of the range (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: The relative path to the file that necessitates a comment (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;side&lt;/code&gt;: The side of the diff to comment on. LEFT indicates the previous state, RIGHT indicates the new state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;startLine&lt;/code&gt;: For multi-line comments, the first line of the range that the comment applies to (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;startSide&lt;/code&gt;: For multi-line comments, the starting side of the diff that the comment applies to. LEFT indicates the previous state, RIGHT indicates the new state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;subjectType&lt;/code&gt;: The level at which the comment is targeted (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_pull_request&lt;/strong&gt; - Open new pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: Branch to merge into (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: PR description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: Create as draft PR (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;head&lt;/code&gt;: Branch containing changes (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;maintainer_can_modify&lt;/code&gt;: Allow maintainer edits (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: PR title (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_pull_requests&lt;/strong&gt; - List pull requests&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: Filter by base branch (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Sort direction (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;head&lt;/code&gt;: Filter by head user/org and branch (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort by (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;merge_pull_request&lt;/strong&gt; - Merge pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;commit_message&lt;/code&gt;: Extra detail for merge commit (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;commit_title&lt;/code&gt;: Title for merge commit (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;merge_method&lt;/code&gt;: Merge method (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;pull_request_read&lt;/strong&gt; - Get details for a single pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;method&lt;/code&gt;: Action to specify what pull request data needs to be retrieved from GitHub. Possible options:&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;ol&gt; 
  &lt;li&gt;get - Get details of a specific pull request.&lt;/li&gt; 
  &lt;li&gt;get_diff - Get the diff of a pull request.&lt;/li&gt; 
  &lt;li&gt;get_status - Get status of a head commit in a pull request. This reflects status of builds and checks.&lt;/li&gt; 
  &lt;li&gt;get_files - Get the list of files changed in a pull request. Use with pagination parameters to control the number of results returned.&lt;/li&gt; 
  &lt;li&gt;get_review_comments - Get the review comments on a pull request. Use with pagination parameters to control the number of results returned.&lt;/li&gt; 
  &lt;li&gt;get_reviews - Get the reviews on a pull request. When asked for review comments, use get_review_comments method. (string, required)&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;pull_request_review_write&lt;/strong&gt; - Write operations (create, submit, delete) on pull request reviews.&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Review comment text (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;commitID&lt;/code&gt;: SHA of commit to review (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: Review action to perform. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;method&lt;/code&gt;: The write operation to perform on pull request review. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;request_copilot_review&lt;/strong&gt; - Request Copilot review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_pull_requests&lt;/strong&gt; - Search pull requests&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only pull requests for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query using GitHub pull request search syntax (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only pull requests for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field by number of matches of categories, defaults to best match (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_pull_request&lt;/strong&gt; - Edit pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: New base branch name (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: New description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: Mark pull request as draft (true) or ready for review (false) (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;maintainer_can_modify&lt;/code&gt;: Allow maintainer edits (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number to update (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;reviewers&lt;/code&gt;: GitHub usernames to request reviews from (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: New state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: New title (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_pull_request_branch&lt;/strong&gt; - Update pull request branch&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;expectedHeadSha&lt;/code&gt;: The expected SHA of the pull request's HEAD ref (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Repositories&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_branch&lt;/strong&gt; - Create branch&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Name for new branch (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;from_branch&lt;/code&gt;: Source branch (defaults to repo default) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_or_update_file&lt;/strong&gt; - Create or update file&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to create/update the file in (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Content of the file (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path where to create/update the file (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Required if updating an existing file. The blob SHA of the file being replaced. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_repository&lt;/strong&gt; - Create repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;autoInit&lt;/code&gt;: Initialize with README (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Repository description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;organization&lt;/code&gt;: Organization to create the repository in (omit to create in your personal account) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;private&lt;/code&gt;: Whether repo should be private (boolean, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_file&lt;/strong&gt; - Delete file&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to delete the file from (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path to the file to delete (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;fork_repository&lt;/strong&gt; - Fork repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;organization&lt;/code&gt;: Organization to fork to (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_commit&lt;/strong&gt; - Get commit details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;include_diff&lt;/code&gt;: Whether to include file diffs and stats in the response. Default is true. (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Commit SHA, branch name, or tag name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_file_contents&lt;/strong&gt; - Get file or directory contents&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path to file/directory (directories must end with a slash '/') (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: Accepts optional git refs such as &lt;code&gt;refs/tags/{tag}&lt;/code&gt;, &lt;code&gt;refs/heads/{branch}&lt;/code&gt; or &lt;code&gt;refs/pull/{pr_number}/head&lt;/code&gt; (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Accepts optional commit SHA. If specified, it will be used instead of ref (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_latest_release&lt;/strong&gt; - Get latest release&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_release_by_tag&lt;/strong&gt; - Get a release by tag name&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tag&lt;/code&gt;: Tag name (e.g., 'v1.0.0') (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_tag&lt;/strong&gt; - Get tag details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tag&lt;/code&gt;: Tag name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_branches&lt;/strong&gt; - List branches&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_commits&lt;/strong&gt; - List commits&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;author&lt;/code&gt;: Author username or email address to filter commits by (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Commit SHA, branch or tag name to list commits of. If not provided, uses the default branch of the repository. If a commit SHA is provided, will list commits up to that SHA. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_releases&lt;/strong&gt; - List releases&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_tags&lt;/strong&gt; - List tags&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;push_files&lt;/strong&gt; - Push files to repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to push to (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;files&lt;/code&gt;: Array of file objects to push, each object with path (string) and content (string) (object[], required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_code&lt;/strong&gt; - Search code&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order for results (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query using GitHub's powerful code search syntax. Examples: 'content:Skill language:Java org:github', 'NOT is:archived language:Python OR language:go', 'repo:github/github-mcp-server'. Supports exact matching, language filters, path filters, and more. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field ('indexed' only) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_repositories&lt;/strong&gt; - Search repositories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;minimal_output&lt;/code&gt;: Return minimal repository information (default: true). When false, returns full GitHub API repository objects. (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Repository search query. Examples: 'machine learning in:name stars:&amp;gt;1000 language:python', 'topic:react', 'user:facebook'. Supports advanced search syntax for precise filtering. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort repositories by field, defaults to best match (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Secret Protection&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_secret_scanning_alert&lt;/strong&gt; - Get secret scanning alert&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: The number of the alert. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_secret_scanning_alerts&lt;/strong&gt; - List secret scanning alerts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;resolution&lt;/code&gt;: Filter by resolution (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;secret_type&lt;/code&gt;: A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Security Advisories&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_global_security_advisory&lt;/strong&gt; - Get a global security advisory&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;ghsaId&lt;/code&gt;: GitHub Security Advisory ID (format: GHSA-xxxx-xxxx-xxxx). (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_global_security_advisories&lt;/strong&gt; - List global security advisories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;affects&lt;/code&gt;: Filter advisories by affected package or version (e.g. "package1,package2@1.0.0"). (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;cveId&lt;/code&gt;: Filter by CVE ID. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;cwes&lt;/code&gt;: Filter by Common Weakness Enumeration IDs (e.g. ["79", "284", "22"]). (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ecosystem&lt;/code&gt;: Filter by package ecosystem. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ghsaId&lt;/code&gt;: Filter by GitHub Security Advisory ID (format: GHSA-xxxx-xxxx-xxxx). (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;isWithdrawn&lt;/code&gt;: Whether to only return withdrawn advisories. (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;modified&lt;/code&gt;: Filter by publish or update date or date range (ISO 8601 date or range). (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;published&lt;/code&gt;: Filter by publish date or date range (ISO 8601 date or range). (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: Filter by severity. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: Advisory type. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;updated&lt;/code&gt;: Filter by update date or date range (ISO 8601 date or range). (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_org_repository_security_advisories&lt;/strong&gt; - List org repository security advisories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Sort direction. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;org&lt;/code&gt;: The organization login. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by advisory state. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_repository_security_advisories&lt;/strong&gt; - List repository security advisories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Sort direction. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by advisory state. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Stargazers&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_starred_repositories&lt;/strong&gt; - List starred repositories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: The direction to sort the results by. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: How to sort the results. Can be either 'created' (when the repository was starred) or 'updated' (when the repository was last pushed to). (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;username&lt;/code&gt;: Username to list starred repositories for. Defaults to the authenticated user. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;star_repository&lt;/strong&gt; - Star repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;unstar_repository&lt;/strong&gt; - Unstar repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Users&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;search_users&lt;/strong&gt; - Search users 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: User search query. Examples: 'john smith', 'location:seattle', 'followers:&amp;gt;100'. Search is automatically scoped to type:user. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort users by number of followers or repositories, or when the person joined GitHub. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;!-- END AUTOMATED TOOLS --&gt; 
&lt;h3&gt;Additional Tools in Remote Github MCP Server&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Copilot&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;create_pull_request_with_copilot&lt;/strong&gt; - Perform task with GitHub Copilot coding agent 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner. You can guess the owner, but confirm it with the user before proceeding. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name. You can guess the repository name, but confirm it with the user before proceeding. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;problem_statement&lt;/code&gt;: Detailed description of the task to be performed (e.g., 'Implement a feature that does X', 'Fix bug Y', etc.) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: Title for the pull request that will be created (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;base_ref&lt;/code&gt;: Git reference (e.g., branch) that the agent will start its work from. If not specified, defaults to the repository's default branch (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Copilot Spaces&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_copilot_space&lt;/strong&gt; - Get Copilot Space&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the space. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The name of the space. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_copilot_spaces&lt;/strong&gt; - List Copilot Spaces&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GitHub Support Docs Search&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;github_support_docs_search&lt;/strong&gt; - Retrieve documentation relevant to answer GitHub product and support questions. Support topics include: GitHub Actions Workflows, Authentication, GitHub Support Inquiries, Pull Request Practices, Repository Maintenance, GitHub Pages, GitHub Packages, GitHub Discussions, Copilot Spaces 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Input from the user about the question they need answered. This is the latest raw unedited user message. You should ALWAYS leave the user message as it is, you should never modify it. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Dynamic Tool Discovery&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This feature is currently in beta and may not be available in all environments. Please test it out and let us know if you encounter any issues.&lt;/p&gt; 
&lt;p&gt;Instead of starting with all tools enabled, you can turn on dynamic toolset discovery. Dynamic toolsets allow the MCP host to list and enable toolsets in response to a user prompt. This should help to avoid situations where the model gets confused by the sheer number of tools available.&lt;/p&gt; 
&lt;h3&gt;Using Dynamic Tool Discovery&lt;/h3&gt; 
&lt;p&gt;When using the binary, you can pass the &lt;code&gt;--dynamic-toolsets&lt;/code&gt; flag.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./github-mcp-server --dynamic-toolsets
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using Docker, you can pass the toolsets as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -i --rm \
  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \
  -e GITHUB_DYNAMIC_TOOLSETS=1 \
  ghcr.io/github/github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Read-Only Mode&lt;/h2&gt; 
&lt;p&gt;To run the server in read-only mode, you can use the &lt;code&gt;--read-only&lt;/code&gt; flag. This will only offer read-only tools, preventing any modifications to repositories, issues, pull requests, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./github-mcp-server --read-only
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using Docker, you can pass the read-only mode as an environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -i --rm \
  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \
  -e GITHUB_READ_ONLY=1 \
  ghcr.io/github/github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;i18n / Overriding Descriptions&lt;/h2&gt; 
&lt;p&gt;The descriptions of the tools can be overridden by creating a &lt;code&gt;github-mcp-server-config.json&lt;/code&gt; file in the same directory as the binary.&lt;/p&gt; 
&lt;p&gt;The file should contain a JSON object with the tool names as keys and the new descriptions as values. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "TOOL_ADD_ISSUE_COMMENT_DESCRIPTION": "an alternative description",
  "TOOL_CREATE_BRANCH_DESCRIPTION": "Create a new branch in a GitHub repository"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can create an export of the current translations by running the binary with the &lt;code&gt;--export-translations&lt;/code&gt; flag.&lt;/p&gt; 
&lt;p&gt;This flag will preserve any translations/overrides you have made, while adding any new translations that have been added to the binary since the last time you exported.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./github-mcp-server --export-translations
cat github-mcp-server-config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use ENV vars to override the descriptions. The environment variable names are the same as the keys in the JSON file, prefixed with &lt;code&gt;GITHUB_MCP_&lt;/code&gt; and all uppercase.&lt;/p&gt; 
&lt;p&gt;For example, to override the &lt;code&gt;TOOL_ADD_ISSUE_COMMENT_DESCRIPTION&lt;/code&gt; tool, you can set the following environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;export GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION="an alternative description"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Library Usage&lt;/h2&gt; 
&lt;p&gt;The exported Go API of this module should currently be considered unstable, and subject to breaking changes. In the future, we may offer stability; please file an issue if there is a use case where this would be valuable.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT open source license. Please refer to &lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/LICENSE"&gt;MIT&lt;/a&gt; for the full terms.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>francoismichel/ssh3</title>
      <link>https://github.com/francoismichel/ssh3</link>
      <description>&lt;p&gt;SSH3: faster and rich secure shell using HTTP/3, checkout our article here: https://arxiv.org/abs/2312.08396 and our Internet-Draft: https://datatracker.ietf.org/doc/draft-michel-ssh3/&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/francoismichel/ssh3/main/resources/figures/ssh3.png" style="display: block; width: 60%" /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] SSH3 is probably going to change its name. It is still the SSH Connection Protocol (RFC4254) running on top of HTTP/3 Extended connect, but the required changes are heavy and too distant from the philosophy of popular SSH implementations to be considered for integration. The &lt;a href="https://datatracker.ietf.org/doc/draft-michel-remote-terminal-http3/"&gt;specification draft&lt;/a&gt; has already been renamed ("Remote Terminals over HTTP/3"), but we need some time to come up with a nice permanent name.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;SSH3: faster and rich secure shell using HTTP/3&lt;/h1&gt; 
&lt;p&gt;SSH3 is a complete revisit of the SSH protocol, mapping its semantics on top of the HTTP mechanisms. It comes from our research work and we (researchers) recently proposed it as an &lt;a href="https://www.ietf.org/how/ids/"&gt;Internet-Draft&lt;/a&gt; (&lt;a href="https://datatracker.ietf.org/doc/draft-michel-remote-terminal-http3/"&gt;draft-michel-remote-terminal-http3-00&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;In a nutshell, SSH3 uses &lt;a href="https://datatracker.ietf.org/doc/html/rfc9000"&gt;QUIC&lt;/a&gt;+&lt;a href="https://datatracker.ietf.org/doc/html/rfc8446"&gt;TLS1.3&lt;/a&gt; for secure channel establishment and the &lt;a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-authorization"&gt;HTTP Authorization&lt;/a&gt; mechanisms for user authentication. Among others, SSH3 allows the following improvements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Significantly faster session establishment&lt;/li&gt; 
 &lt;li&gt;New HTTP authentication methods such as &lt;a href="https://datatracker.ietf.org/doc/html/rfc6749"&gt;OAuth 2.0&lt;/a&gt; and &lt;a href="https://openid.net/specs/openid-connect-core-1_0.html"&gt;OpenID Connect&lt;/a&gt; in addition to classical SSH authentication&lt;/li&gt; 
 &lt;li&gt;Robustness to port scanning attacks: your SSH3 server can be made &lt;strong&gt;invisible&lt;/strong&gt; to other Internet users&lt;/li&gt; 
 &lt;li&gt;UDP port forwarding in addition to classical TCP port forwarding&lt;/li&gt; 
 &lt;li&gt;All the features allowed by the modern QUIC protocol: including connection migration (soon) and multipath connections&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Quickly want to get started ? Checkout how to &lt;a href="https://raw.githubusercontent.com/francoismichel/ssh3/main/#installing-ssh3"&gt;install SSH3&lt;/a&gt;. You will learn to &lt;a href="https://raw.githubusercontent.com/francoismichel/ssh3/main/#deploying-an-ssh3-server"&gt;setup an SSH3 server&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/francoismichel/ssh3/main/#using-the-ssh3-client"&gt;use the SSH3 client&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;⚡ SSH3 is faster&lt;/h2&gt; 
&lt;p&gt;Faster for session establishment, not throughput ! SSH3 offers a significantly faster session establishment than SSHv2. Establishing a new session with SSHv2 can take 5 to 7 network round-trip times, which can easily be noticed by the user. SSH3 only needs 3 round-trip times. The keystroke latency in a running session is unchanged.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/francoismichel/ssh3/main/resources/figures/ssh3_100ms_rtt.gif" /&gt; &lt;i&gt;SSH3 (top) VS SSHv2 (bottom) session establishement with a 100ms ping towards the server.&lt;/i&gt; &lt;/p&gt; 
&lt;h2&gt;🔒 SSH3 security&lt;/h2&gt; 
&lt;p&gt;While SSHv2 defines its own protocols for user authentication and secure channel establishment, SSH3 relies on the robust and time-tested mechanisms of TLS 1.3, QUIC and HTTP. These protocols are already extensively used to secure security-critical applications on the Internet such as e-commerce and Internet banking.&lt;/p&gt; 
&lt;p&gt;SSH3 already implements the common password-based and public-key (RSA and EdDSA/ed25519) authentication methods. It also supports new authentication methods such as OAuth 2.0 and allows logging in to your servers using your Google/Microsoft/Github accounts.&lt;/p&gt; 
&lt;h3&gt;🧪 SSH3 is still experimental&lt;/h3&gt; 
&lt;p&gt;While SSH3 shows promise for faster session establishment, it is still at an early proof-of-concept stage. As with any new complex protocol, &lt;strong&gt;expert cryptographic review over an extended timeframe is required before reasonable security conclusions can be made&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;We are developing SSH3 as an open source project to facilitate community feedback and analysis. However, we &lt;strong&gt;cannot yet endorse its appropriateness for production systems&lt;/strong&gt; without further peer review. Please collaborate with us if you have relevant expertise!&lt;/p&gt; 
&lt;h3&gt;🥷 Do not deploy the SSH3 server on your production servers for now&lt;/h3&gt; 
&lt;p&gt;Given the current prototype state, we advise &lt;em&gt;testing SSH3 in sandboxed environments or private networks&lt;/em&gt;. Be aware that making experimental servers directly Internet-accessible could introduce risk before thorough security vetting.&lt;/p&gt; 
&lt;p&gt;While &lt;a href="https://raw.githubusercontent.com/francoismichel/ssh3/main/#-your-ssh3-public-server-can-be-hidden"&gt;hiding&lt;/a&gt; servers behind secret paths has potential benefits, it does not negate the need for rigorous vulnerability analysis before entering production. We are excited by SSH3's future possibilities but encourage additional scrutiny first.&lt;/p&gt; 
&lt;h2&gt;🥷 Your SSH3 public server can be hidden&lt;/h2&gt; 
&lt;p&gt;Using SSH3, you can avoid the usual stress of scanning and dictionary attacks against your SSH server. Similarly to your secret Google Drive documents, your SSH3 server can be hidden behind a secret link and only answer to authentication attempts that made an HTTP request to this specific link, like the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ssh3-server -bind 192.0.2.0:443 -url-path &amp;lt;my-long-secret&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By replacing &lt;code&gt;&amp;lt;my-long-secret&amp;gt;&lt;/code&gt; by, let's say, the random value &lt;code&gt;M3MzkxYWMxMjYxMjc5YzJkODZiMTAyMjU&lt;/code&gt;, your SSH3 server will only answer to SSH3 connection attempts made to the URL &lt;code&gt;https://192.0.2.0:443/M3MzkxYWMxMjYxMjc5YzJkODZiMTAyMjU&lt;/code&gt; and it will respond a &lt;code&gt;404 Not Found&lt;/code&gt; to other requests. Attackers and crawlers on the Internet can therefore not detect the presence of your SSH3 server. They will only see a simple web server answering 404 status codes to every request.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE WELL&lt;/strong&gt;: placing your SSH3 server behind a secret URL may reduce the impact of scanning attacks but will and must &lt;em&gt;never&lt;/em&gt; replace classical authentication mechanisms. The secret link should only be used to avoid your host to be discovered. Knowing the secret URL should not grant someone access to your server. Use the classical authentication mechanisms described above to protect your server.&lt;/p&gt; 
&lt;h2&gt;💐 SSH3 is already feature-rich&lt;/h2&gt; 
&lt;p&gt;SSH3 provides new feature that could not be provided by the SSHv2 protocol.&lt;/p&gt; 
&lt;h3&gt;Brand new features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;UDP port forwarding&lt;/strong&gt;: you can now access your QUIC, DNS, RTP or any UDP-based server that are only reachable from your SSH3 host. UDP packets are forwarded using QUIC datagrams.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;X.509 certificates&lt;/strong&gt;: you can now use your classical HTTPS certificates to authenticate your SSH3 server. This mechanism is more secure than the classical SSHv2 host key mechanism. Certificates can be obtained easily using LetsEncrypt for instance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hiding&lt;/strong&gt; your server behind a secret link.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Keyless&lt;/strong&gt; secure user authentication using &lt;strong&gt;OpenID Connect&lt;/strong&gt;. You can connect to your SSH3 server using the SSO of your company or your Google/Github account, and you don't need to copy the public keys of your users anymore.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Famous OpenSSH features implemented&lt;/h3&gt; 
&lt;p&gt;This SSH3 implementation already provides many of the popular features of OpenSSH, so if you are used to OpenSSH, the process of adopting SSH3 will be smooth. Here is a list of some OpenSSH features that SSH3 also implements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Parses &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; on the server&lt;/li&gt; 
 &lt;li&gt;Certificate-based server authentication&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;known_hosts&lt;/code&gt; mechanism when X.509 certificates are not used.&lt;/li&gt; 
 &lt;li&gt;Automatically using the &lt;code&gt;ssh-agent&lt;/code&gt; for public key authentication&lt;/li&gt; 
 &lt;li&gt;SSH agent forwarding to use your local keys on your remote server&lt;/li&gt; 
 &lt;li&gt;Direct TCP port forwarding (reverse port forwarding will be implemented in the future)&lt;/li&gt; 
 &lt;li&gt;Proxy jump (see the &lt;code&gt;-proxy-jump&lt;/code&gt; parameter). If A is an SSH3 client and B and C are both SSH3 servers, you can connect from A to C using B as a gateway/proxy. The proxy uses UDP forwarding to forward the QUIC packets from A to C, so B cannot decrypt the traffic A&amp;lt;-&amp;gt;C SSH3 traffic.&lt;/li&gt; 
 &lt;li&gt;Parses &lt;code&gt;~/.ssh/config&lt;/code&gt; on the client and handles the &lt;code&gt;Hostname&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt;, &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;IdentityFile&lt;/code&gt; config options (the other options are currently ignored). Also parses a new &lt;code&gt;UDPProxyJump&lt;/code&gt; that behaves similarly to OpenSSH's &lt;code&gt;ProxyJump&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🙏 Community support&lt;/h2&gt; 
&lt;p&gt;Help us progress SSH3 responsibly! We welcome capable security researchers to review our codebase and provide feedback. Please also connect us with relevant standards bodies to potentially advance SSH3 through the formal IETF/IRTF processes over time.&lt;/p&gt; 
&lt;p&gt;With collaborative assistance, we hope to iteratively improve SSH3 towards safe production readiness. But we cannot credibly make definitive security claims without evidence of extensive expert cryptographic review and adoption by respected security authorities. Let's work together to realize SSH3's possibilities!&lt;/p&gt; 
&lt;h2&gt;Installing SSH3&lt;/h2&gt; 
&lt;p&gt;You can either download the last &lt;a href="https://github.com/francoismichel/ssh3/releases"&gt;release binaries&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/francoismichel/ssh3/main/#installing-ssh3-and-ssh3-server-using-go-install"&gt;install it using &lt;code&gt;go install&lt;/code&gt;&lt;/a&gt; or generate these binaries yourself by compiling the code from source.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] SSH3 is still experimental and is the fruit of a research work. If you are afraid of deploying publicly a new SSH3 server, you can use the &lt;a href="https://raw.githubusercontent.com/francoismichel/ssh3/main/#-your-ssh3-public-server-can-be-hidden"&gt;secret path&lt;/a&gt; feature of SSH3 to hide it behing a secret URL.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Installing ssh3 and ssh3-server using Go install&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go install github.com/francoismichel/ssh3/cmd/...@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Compiling SSH3 from source&lt;/h3&gt; 
&lt;p&gt;You need a recent &lt;a href="https://go.dev/dl/"&gt;Golang&lt;/a&gt; version to do this. Downloading the source code and compiling the binaries can be done with the following steps:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/francoismichel/ssh3    # clone the repo
cd ssh3
go build -o ssh3 cmd/ssh3/main.go                        # build the client
CGO_ENABLED=1 go build -o ssh3-server cmd/ssh3-server/main.go   # build the server, requires having gcc installed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you have root/sudo privileges and you want to make ssh3 accessible to all you users, you can then directly copy the binaries to &lt;code&gt;/usr/bin&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cp ssh3 /usr/bin/ &amp;amp;&amp;amp; cp ssh3-server /usr/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Otherwise, you can simply add the executables to your &lt;code&gt;PATH&lt;/code&gt; environment variable by adding the following line at the end of your &lt;code&gt;.bashrc&lt;/code&gt; or equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export PATH=$PATH:/path/to/the/ssh3/directory
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Deploying an SSH3 server&lt;/h3&gt; 
&lt;p&gt;Before connecting to your host, you need to deploy an SSH3 server on it. There is currently no SSH3 daemon, so right now, you will have to run the &lt;code&gt;ssh3-server&lt;/code&gt; executable in background using &lt;code&gt;screen&lt;/code&gt; or a similar utility.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] As SSH3 runs on top of HTTP/3, a server needs an X.509 certificate and its corresponding private key. Public certificates can be generated automatically for your public domain name through Let's Encrypt using the &lt;code&gt;-generate-public-cert&lt;/code&gt; command-line argument on the server. If you do not want to generate a certificate signed by a real certificate authority or if you don't have any public domain name, you can generate a self-signed one using the &lt;code&gt;-generate-selfsigned-cert&lt;/code&gt; command-line argument. Self-signed certificates provide you with similar security guarantees to SSHv2's host keys mechanism, with the same security issue: you may be vulnerable to machine-in-the-middle attacks during your first connection to your server. Using real certificates signed by public certificate authorities such as Let's Encrypt avoids this issue.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Here is the usage of the &lt;code&gt;ssh3-server&lt;/code&gt; executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage of ./ssh3-server:
  -bind string
        the address:port pair to listen to, e.g. 0.0.0.0:443 (default "[::]:443")
  -cert string
        the filename of the server certificate (or fullchain) (default "./cert.pem")
  -key string
        the filename of the certificate private key (default "./priv.key")
  -enable-password-login
        if set, enable password authentication (disabled by default)
  -generate-public-cert value
        Automatically produce and use a valid public certificate usingLet's Encrypt for the provided domain name. The flag can be used several times to generate several certificates.If certificates have already been generated previously using this flag, they will simply be reused without being regenerated. The public certificates are automatically renewed as long as the server is running. Automatically-generated IP public certificates are not available yet.
  -generate-selfsigned-cert
        if set, generates a self-self-signed cerificate and key that will be stored at the paths indicated by the -cert and -key args (they must not already exist)
  -url-path string
        the secret URL path on which the ssh3 server listens (default "/ssh3-term")
  -v    verbose mode, if set
  -version
        if set, displays the software version on standard output and exit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following command starts a public SSH3 server on port 443 with a valid Let's Encrypt public certificate for domain &lt;code&gt;my-domain.example.org&lt;/code&gt; and answers to new sessions requests querying the &lt;code&gt;/ssh3&lt;/code&gt; URL path:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ssh3-server -generate-public-cert my-domain.example.org -url-path /ssh3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you don't have a public domain name (i.e. only an IP address), you can either use an existing certificate for your IP address using the &lt;code&gt;-cert&lt;/code&gt; and &lt;code&gt;-key&lt;/code&gt; arguments or generate a self-signed certificate using the &lt;code&gt;-generate-selfsigned-cert&lt;/code&gt; argument.&lt;/p&gt; 
&lt;p&gt;If you have existing certificates and keys, you can run the server as follows to use them=&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ssh3-server -cert /path/to/cert/or/fullchain -key /path/to/cert/private/key -url-path /ssh3
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Similarly to OpenSSH, the server must be run with root priviledges to log in as other users.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Authorized keys and authorized identities&lt;/h4&gt; 
&lt;p&gt;By default, the SSH3 server will look for identities in the &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; and &lt;code&gt;~/.ssh3/authorized_identities&lt;/code&gt; files for each user. &lt;code&gt;~/.ssh3/authorized_identities&lt;/code&gt; allows new identities such as OpenID Connect (&lt;code&gt;oidc&lt;/code&gt;) discussed &lt;a href="https://raw.githubusercontent.com/francoismichel/ssh3/main/#openid-connect-authentication-still-experimental"&gt;below&lt;/a&gt;. Popular key types such as &lt;code&gt;rsa&lt;/code&gt;, &lt;code&gt;ed25519&lt;/code&gt; and keys in the OpenSSH format can be used.&lt;/p&gt; 
&lt;h3&gt;Using the SSH3 client&lt;/h3&gt; 
&lt;p&gt;Once you have an SSH3 server running, you can connect to it using the SSH3 client similarly to what you did with your classical SSHv2 tool.&lt;/p&gt; 
&lt;p&gt;Here is the usage of the &lt;code&gt;ssh3&lt;/code&gt; executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage of ssh3:
  -pubkey-for-agent string
        if set, use an agent key whose public key matches the one in the specified path
  -privkey string
        private key file
  -use-password
        if set, do classical password authentication
  -forward-agent
        if set, forwards ssh agent to be used with sshv2 connections on the remote host
  -forward-tcp string
        if set, take a localport/remoteip@remoteport forwarding localhost@localport towards remoteip@remoteport
  -forward-udp string
        if set, take a localport/remoteip@remoteport forwarding localhost@localport towards remoteip@remoteport
  -proxy-jump string
    	if set, performs a proxy jump using the specified remote host as proxy
  -insecure
        if set, skip server certificate verification
  -keylog string
        Write QUIC TLS keys and master secret in the specified keylog file: only for debugging purpose
  -use-oidc string
        if set, force the use of OpenID Connect with the specified issuer url as parameter
  -oidc-config string
        OpenID Connect json config file containing the "client_id" and "client_secret" fields needed for most identity providers
  -do-pkce
        if set, perform PKCE challenge-response with oidc
  -v    if set, enable verbose mode
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Private-key authentication&lt;/h4&gt; 
&lt;p&gt;You can connect to your SSH3 server at my-server.example.org listening on &lt;code&gt;/my-secret-path&lt;/code&gt; using the private key located in &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  ssh3 -privkey ~/.ssh/id_rsa username@my-server.example.org/my-secret-path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Agent-based private key authentication&lt;/h4&gt; 
&lt;p&gt;The SSH3 client works with the OpenSSH agent and uses the classical &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; environment variable to communicate with this agent. Similarly to OpenSSH, SSH3 will list the keys provided by the SSH agent and connect using the first key listen by the agent by default. If you want to specify a specific key to use with the agent, you can either specify the private key directly with the &lt;code&gt;-privkey&lt;/code&gt; argument like above, or specify the corresponding public key using the &lt;code&gt;-pubkey-for-agent&lt;/code&gt; argument. This allows you to authenticate in situations where only the agent has a direct access to the private key but you only have access to the public key.&lt;/p&gt; 
&lt;h4&gt;Password-based authentication&lt;/h4&gt; 
&lt;p&gt;While discouraged, you can connect to your server using passwords (if explicitly enabled on the &lt;code&gt;ssh3-server&lt;/code&gt;) with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  ssh3 -use-password username@my-server.example.org/my-secret-path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Config-based session establishment&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;ssh3&lt;/code&gt; parses your OpenSSH config. Currently, it only handles the &lt;code&gt;Hostname&lt;/code&gt;; &lt;code&gt;User&lt;/code&gt;, &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;IdentityFile&lt;/code&gt; OpenSSH options. It also adds new option only used by SSH3, such as &lt;code&gt;URLPath&lt;/code&gt; or &lt;code&gt;UDPProxyJump&lt;/code&gt;. &lt;code&gt;URLPath&lt;/code&gt; allows you to omit the secret URL path in your SSH3 command. &lt;code&gt;UDPProxyJump&lt;/code&gt; allows you to perform SSH3 (#proxy-jump)[Proxy Jump] and has the same meaning as the &lt;code&gt;-proxy-jump&lt;/code&gt; command-line argument. Let's say you have the following lines in your OpenSSH config located in &lt;code&gt;~/.ssh/config&lt;/code&gt; :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IgnoreUnknown URLPath
Host my-server
  HostName 192.0.2.0
  User username
  IdentityFile ~/.ssh/id_rsa
  URLPath /my-secret-path
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Similarly to what OpenSSH does, the following &lt;code&gt;ssh3&lt;/code&gt; command will connect you to the SSH3 server running on 192.0.2.0 on UDP port 443 using public key authentication with the private key located in &lt;code&gt;.ssh/id_rsa&lt;/code&gt; :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  ssh3 my-server/my-secret-path
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not want a config-based utilization of SSH3, you can read the sections below to see how to use the CLI parameters of &lt;code&gt;ssh3&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;OpenID Connect authentication (still experimental)&lt;/h4&gt; 
&lt;p&gt;This feature allows you to connect using an external identity provider such as the one of your company or any other provider that implements the OpenID Connect standard, such as Google Identity, Github or Microsoft Entra. The authentication flow is illustrated in the GIF below.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/francoismichel/ssh3/main/resources/figures/ssh3_oidc.gif" width="75%" /&gt; 
 &lt;p&gt;&lt;em&gt;Secure connection without private key using a Google account.&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;The way it connects to your identity provider is configured in a file named &lt;code&gt;~/.ssh3/oidc_config.json&lt;/code&gt;. Below is an example &lt;code&gt;config.json&lt;/code&gt; file for use with a Google account. This configuration file is an array and can contain several identity providers configurations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;[
    {
        "issuer_url": "https://accounts.google.com",
        "client_id": "&amp;lt;your_client_id&amp;gt;",
        "client_secret": "&amp;lt;your_client_secret&amp;gt;"
    }
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This might change in the future, but currently, to make this feature work with your Google account, you will need to setup a new experimental application in your Google Cloud console and add your email as authorized users. This will provide you with a &lt;code&gt;client_id&lt;/code&gt; and a &lt;code&gt;client_secret&lt;/code&gt; that you can then set in your &lt;code&gt;~/.ssh3/oidc_config.json&lt;/code&gt;. On the server side, you just have to add the following line in your &lt;code&gt;~/.ssh3/authorized_identities&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;oidc &amp;lt;client_id&amp;gt; https://accounts.google.com &amp;lt;email&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We currently consider removing the need of setting the client_id in the &lt;code&gt;authorized_identities&lt;/code&gt; file in the future.&lt;/p&gt; 
&lt;h4&gt;Proxy jump&lt;/h4&gt; 
&lt;p&gt;It is often the case that some SSH hosts can only be accessed through a gateway. SSH3 allows you to perform a Proxy Jump similarly to what is proposed by OpenSSH. You can connect from A to C using B as a gateway/proxy. B and C must both be running a valid SSH3 server. This works by establishing UDP port forwarding on B to forward QUIC packets from A to C. The connection from A to C is therefore fully end-to-end and B cannot decrypt or alter the SSH3 traffic between A and C.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vxcontrol/pentagi</title>
      <link>https://github.com/vxcontrol/pentagi</link>
      <description>&lt;p&gt;✨ Fully autonomous AI Agents system capable of performing complex penetration testing tasks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PentAGI&lt;/h1&gt; 
&lt;div align="center" style="font-size: 1.5em; margin: 20px 0;"&gt; 
 &lt;strong&gt;P&lt;/strong&gt;enetration testing 
 &lt;strong&gt;A&lt;/strong&gt;rtificial 
 &lt;strong&gt;G&lt;/strong&gt;eneral 
 &lt;strong&gt;I&lt;/strong&gt;ntelligence 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;🚀 &lt;strong&gt;Join the Community!&lt;/strong&gt; Connect with security researchers, AI enthusiasts, and fellow ethical hackers. Get support, share insights, and stay updated with the latest PentAGI developments.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/2xrMh7qX6m"&gt;&lt;img src="https://img.shields.io/badge/Discord-7289DA?logo=discord&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt;⠀&lt;a href="https://t.me/+Ka9i6CNwe71hMWQy"&gt;&lt;img src="https://img.shields.io/badge/Telegram-2CA5E0?logo=telegram&amp;amp;logoColor=white" alt="Telegram" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;📖 Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-overview"&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-quick-start"&gt;Quick Start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-advanced-setup"&gt;Advanced Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-development"&gt;Development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-testing-llm-agents"&gt;Testing LLM Agents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-embedding-configuration-and-testing"&gt;Embedding Configuration and Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-function-testing-with-ftester"&gt;Function Testing with ftester&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#%EF%B8%8F-building"&gt;Building&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-credits"&gt;Credits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/#-license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎯 Overview&lt;/h2&gt; 
&lt;p&gt;PentAGI is an innovative tool for automated security testing that leverages cutting-edge artificial intelligence technologies. The project is designed for information security professionals, researchers, and enthusiasts who need a powerful and flexible solution for conducting penetration tests.&lt;/p&gt; 
&lt;p&gt;You can watch the video &lt;strong&gt;PentAGI overview&lt;/strong&gt;: &lt;a href="https://youtu.be/R70x5Ddzs1o"&gt;&lt;img src="https://github.com/user-attachments/assets/0828dc3e-15f1-4a1d-858e-9696a146e478" alt="PentAGI Overview Video" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🛡️ Secure &amp;amp; Isolated. All operations are performed in a sandboxed Docker environment with complete isolation.&lt;/li&gt; 
 &lt;li&gt;🤖 Fully Autonomous. AI-powered agent that automatically determines and executes penetration testing steps.&lt;/li&gt; 
 &lt;li&gt;🔬 Professional Pentesting Tools. Built-in suite of 20+ professional security tools including nmap, metasploit, sqlmap, and more.&lt;/li&gt; 
 &lt;li&gt;🧠 Smart Memory System. Long-term storage of research results and successful approaches for future use.&lt;/li&gt; 
 &lt;li&gt;🔍 Web Intelligence. Built-in browser via &lt;a href="https://hub.docker.com/r/vxcontrol/scraper"&gt;scraper&lt;/a&gt; for gathering latest information from web sources.&lt;/li&gt; 
 &lt;li&gt;🔎 External Search Systems. Integration with advanced search APIs including &lt;a href="https://tavily.com"&gt;Tavily&lt;/a&gt;, &lt;a href="https://traversaal.ai"&gt;Traversaal&lt;/a&gt;, &lt;a href="https://www.perplexity.ai"&gt;Perplexity&lt;/a&gt;, &lt;a href="https://duckduckgo.com/"&gt;DuckDuckGo&lt;/a&gt;, &lt;a href="https://programmablesearchengine.google.com/"&gt;Google Custom Search&lt;/a&gt;, and &lt;a href="https://searxng.org"&gt;Searxng&lt;/a&gt; for comprehensive information gathering.&lt;/li&gt; 
 &lt;li&gt;👥 Team of Specialists. Delegation system with specialized AI agents for research, development, and infrastructure tasks.&lt;/li&gt; 
 &lt;li&gt;📊 Comprehensive Monitoring. Detailed logging and integration with Grafana/Prometheus for real-time system observation.&lt;/li&gt; 
 &lt;li&gt;📝 Detailed Reporting. Generation of thorough vulnerability reports with exploitation guides.&lt;/li&gt; 
 &lt;li&gt;📦 Smart Container Management. Automatic Docker image selection based on specific task requirements.&lt;/li&gt; 
 &lt;li&gt;📱 Modern Interface. Clean and intuitive web UI for system management and monitoring.&lt;/li&gt; 
 &lt;li&gt;🔌 API Integration. Support for REST and GraphQL APIs for seamless external system integration.&lt;/li&gt; 
 &lt;li&gt;💾 Persistent Storage. All commands and outputs are stored in PostgreSQL with &lt;a href="https://hub.docker.com/r/vxcontrol/pgvector"&gt;pgvector&lt;/a&gt; extension.&lt;/li&gt; 
 &lt;li&gt;🎯 Scalable Architecture. Microservices-based design supporting horizontal scaling.&lt;/li&gt; 
 &lt;li&gt;🏠 Self-Hosted Solution. Complete control over your deployment and data.&lt;/li&gt; 
 &lt;li&gt;🔑 Flexible Authentication. Support for various LLM providers (&lt;a href="https://platform.openai.com/"&gt;OpenAI&lt;/a&gt;, &lt;a href="https://www.anthropic.com/"&gt;Anthropic&lt;/a&gt;, &lt;a href="https://ollama.com/"&gt;Ollama&lt;/a&gt;, &lt;a href="https://aws.amazon.com/bedrock/"&gt;AWS Bedrock&lt;/a&gt;, &lt;a href="https://ai.google.dev/"&gt;Google AI/Gemini&lt;/a&gt;, &lt;a href="https://deepinfra.com/"&gt;Deep Infra&lt;/a&gt;, &lt;a href="https://openrouter.ai/"&gt;OpenRouter&lt;/a&gt;, &lt;a href="https://www.deepseek.com/en"&gt;DeepSeek&lt;/a&gt;) and custom configurations.&lt;/li&gt; 
 &lt;li&gt;⚡ Quick Deployment. Easy setup through &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; with comprehensive environment configuration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🏗️ Architecture&lt;/h2&gt; 
&lt;h3&gt;System Context&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart TB
    classDef person fill:#08427B,stroke:#073B6F,color:#fff
    classDef system fill:#1168BD,stroke:#0B4884,color:#fff
    classDef external fill:#666666,stroke:#0B4884,color:#fff

    pentester["👤 Security Engineer
    (User of the system)"]

    pentagi["✨ PentAGI
    (Autonomous penetration testing system)"]

    target["🎯 target-system
    (System under test)"]
    llm["🧠 llm-provider
    (OpenAI/Anthropic/Ollama/Bedrock/Gemini/Custom)"]
    search["🔍 search-systems
    (Google/DuckDuckGo/Tavily/Traversaal/Perplexity/Searxng)"]
    langfuse["📊 langfuse-ui
    (LLM Observability Dashboard)"]
    grafana["📈 grafana
    (System Monitoring Dashboard)"]

    pentester --&amp;gt; |Uses HTTPS| pentagi
    pentester --&amp;gt; |Monitors AI HTTPS| langfuse
    pentester --&amp;gt; |Monitors System HTTPS| grafana
    pentagi --&amp;gt; |Tests Various protocols| target
    pentagi --&amp;gt; |Queries HTTPS| llm
    pentagi --&amp;gt; |Searches HTTPS| search
    pentagi --&amp;gt; |Reports HTTPS| langfuse
    pentagi --&amp;gt; |Reports HTTPS| grafana

    class pentester person
    class pentagi system
    class target,llm,search,langfuse,grafana external

    linkStyle default stroke:#ffffff,color:#ffffff
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🔄 Container Architecture&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-mermaid"&gt;graph TB
    subgraph Core Services
        UI[Frontend UI&amp;lt;br/&amp;gt;React + TypeScript]
        API[Backend API&amp;lt;br/&amp;gt;Go + GraphQL]
        DB[(Vector Store&amp;lt;br/&amp;gt;PostgreSQL + pgvector)]
        MQ[Task Queue&amp;lt;br/&amp;gt;Async Processing]
        Agent[AI Agents&amp;lt;br/&amp;gt;Multi-Agent System]
    end

    subgraph Monitoring
        Grafana[Grafana&amp;lt;br/&amp;gt;Dashboards]
        VictoriaMetrics[VictoriaMetrics&amp;lt;br/&amp;gt;Time-series DB]
        Jaeger[Jaeger&amp;lt;br/&amp;gt;Distributed Tracing]
        Loki[Loki&amp;lt;br/&amp;gt;Log Aggregation]
        OTEL[OpenTelemetry&amp;lt;br/&amp;gt;Data Collection]
    end

    subgraph Analytics
        Langfuse[Langfuse&amp;lt;br/&amp;gt;LLM Analytics]
        ClickHouse[ClickHouse&amp;lt;br/&amp;gt;Analytics DB]
        Redis[Redis&amp;lt;br/&amp;gt;Cache + Rate Limiter]
        MinIO[MinIO&amp;lt;br/&amp;gt;S3 Storage]
    end

    subgraph Security Tools
        Scraper[Web Scraper&amp;lt;br/&amp;gt;Isolated Browser]
        PenTest[Security Tools&amp;lt;br/&amp;gt;20+ Pro Tools&amp;lt;br/&amp;gt;Sandboxed Execution]
    end

    UI --&amp;gt; |HTTP/WS| API
    API --&amp;gt; |SQL| DB
    API --&amp;gt; |Events| MQ
    MQ --&amp;gt; |Tasks| Agent
    Agent --&amp;gt; |Commands| Tools
    Agent --&amp;gt; |Queries| DB

    API --&amp;gt; |Telemetry| OTEL
    OTEL --&amp;gt; |Metrics| VictoriaMetrics
    OTEL --&amp;gt; |Traces| Jaeger
    OTEL --&amp;gt; |Logs| Loki

    Grafana --&amp;gt; |Query| VictoriaMetrics
    Grafana --&amp;gt; |Query| Jaeger
    Grafana --&amp;gt; |Query| Loki

    API --&amp;gt; |Analytics| Langfuse
    Langfuse --&amp;gt; |Store| ClickHouse
    Langfuse --&amp;gt; |Cache| Redis
    Langfuse --&amp;gt; |Files| MinIO

    classDef core fill:#f9f,stroke:#333,stroke-width:2px,color:#000
    classDef monitoring fill:#bbf,stroke:#333,stroke-width:2px,color:#000
    classDef analytics fill:#bfb,stroke:#333,stroke-width:2px,color:#000
    classDef tools fill:#fbb,stroke:#333,stroke-width:2px,color:#000

    class UI,API,DB,MQ,Agent core
    class Grafana,VictoriaMetrics,Jaeger,Loki,OTEL monitoring
    class Langfuse,ClickHouse,Redis,MinIO analytics
    class Scraper,PenTest tools
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;📊 Entity Relationship&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-mermaid"&gt;erDiagram
    Flow ||--o{ Task : contains
    Task ||--o{ SubTask : contains
    SubTask ||--o{ Action : contains
    Action ||--o{ Artifact : produces
    Action ||--o{ Memory : stores

    Flow {
        string id PK
        string name "Flow name"
        string description "Flow description"
        string status "active/completed/failed"
        json parameters "Flow parameters"
        timestamp created_at
        timestamp updated_at
    }

    Task {
        string id PK
        string flow_id FK
        string name "Task name"
        string description "Task description"
        string status "pending/running/done/failed"
        json result "Task results"
        timestamp created_at
        timestamp updated_at
    }

    SubTask {
        string id PK
        string task_id FK
        string name "Subtask name"
        string description "Subtask description"
        string status "queued/running/completed/failed"
        string agent_type "researcher/developer/executor"
        json context "Agent context"
        timestamp created_at
        timestamp updated_at
    }

    Action {
        string id PK
        string subtask_id FK
        string type "command/search/analyze/etc"
        string status "success/failure"
        json parameters "Action parameters"
        json result "Action results"
        timestamp created_at
    }

    Artifact {
        string id PK
        string action_id FK
        string type "file/report/log"
        string path "Storage path"
        json metadata "Additional info"
        timestamp created_at
    }

    Memory {
        string id PK
        string action_id FK
        string type "observation/conclusion"
        vector embedding "Vector representation"
        text content "Memory content"
        timestamp created_at
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🤖 Agent Interaction&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-mermaid"&gt;sequenceDiagram
    participant O as Orchestrator
    participant R as Researcher
    participant D as Developer
    participant E as Executor
    participant VS as Vector Store
    participant KB as Knowledge Base

    Note over O,KB: Flow Initialization
    O-&amp;gt;&amp;gt;VS: Query similar tasks
    VS--&amp;gt;&amp;gt;O: Return experiences
    O-&amp;gt;&amp;gt;KB: Load relevant knowledge
    KB--&amp;gt;&amp;gt;O: Return context

    Note over O,R: Research Phase
    O-&amp;gt;&amp;gt;R: Analyze target
    R-&amp;gt;&amp;gt;VS: Search similar cases
    VS--&amp;gt;&amp;gt;R: Return patterns
    R-&amp;gt;&amp;gt;KB: Query vulnerabilities
    KB--&amp;gt;&amp;gt;R: Return known issues
    R-&amp;gt;&amp;gt;VS: Store findings
    R--&amp;gt;&amp;gt;O: Research results

    Note over O,D: Planning Phase
    O-&amp;gt;&amp;gt;D: Plan attack
    D-&amp;gt;&amp;gt;VS: Query exploits
    VS--&amp;gt;&amp;gt;D: Return techniques
    D-&amp;gt;&amp;gt;KB: Load tools info
    KB--&amp;gt;&amp;gt;D: Return capabilities
    D--&amp;gt;&amp;gt;O: Attack plan

    Note over O,E: Execution Phase
    O-&amp;gt;&amp;gt;E: Execute plan
    E-&amp;gt;&amp;gt;KB: Load tool guides
    KB--&amp;gt;&amp;gt;E: Return procedures
    E-&amp;gt;&amp;gt;VS: Store results
    E--&amp;gt;&amp;gt;O: Execution status
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🧠 Memory System&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-mermaid"&gt;graph TB
    subgraph "Long-term Memory"
        VS[(Vector Store&amp;lt;br/&amp;gt;Embeddings DB)]
        KB[Knowledge Base&amp;lt;br/&amp;gt;Domain Expertise]
        Tools[Tools Knowledge&amp;lt;br/&amp;gt;Usage Patterns]
    end

    subgraph "Working Memory"
        Context[Current Context&amp;lt;br/&amp;gt;Task State]
        Goals[Active Goals&amp;lt;br/&amp;gt;Objectives]
        State[System State&amp;lt;br/&amp;gt;Resources]
    end

    subgraph "Episodic Memory"
        Actions[Past Actions&amp;lt;br/&amp;gt;Commands History]
        Results[Action Results&amp;lt;br/&amp;gt;Outcomes]
        Patterns[Success Patterns&amp;lt;br/&amp;gt;Best Practices]
    end

    Context --&amp;gt; |Query| VS
    VS --&amp;gt; |Retrieve| Context

    Goals --&amp;gt; |Consult| KB
    KB --&amp;gt; |Guide| Goals

    State --&amp;gt; |Record| Actions
    Actions --&amp;gt; |Learn| Patterns
    Patterns --&amp;gt; |Store| VS

    Tools --&amp;gt; |Inform| State
    Results --&amp;gt; |Update| Tools

    VS --&amp;gt; |Enhance| KB
    KB --&amp;gt; |Index| VS

    classDef ltm fill:#f9f,stroke:#333,stroke-width:2px,color:#000
    classDef wm fill:#bbf,stroke:#333,stroke-width:2px,color:#000
    classDef em fill:#bfb,stroke:#333,stroke-width:2px,color:#000

    class VS,KB,Tools ltm
    class Context,Goals,State wm
    class Actions,Results,Patterns em
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🔄 Chain Summarization&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;p&gt;The chain summarization system manages conversation context growth by selectively summarizing older messages. This is critical for preventing token limits from being exceeded while maintaining conversation coherence.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart TD
    A[Input Chain] --&amp;gt; B{Needs Summarization?}
    B --&amp;gt;|No| C[Return Original Chain]
    B --&amp;gt;|Yes| D[Convert to ChainAST]
    D --&amp;gt; E[Apply Section Summarization]
    E --&amp;gt; F[Process Oversized Pairs]
    F --&amp;gt; G[Manage Last Section Size]
    G --&amp;gt; H[Apply QA Summarization]
    H --&amp;gt; I[Rebuild Chain with Summaries]
    I --&amp;gt; J{Is New Chain Smaller?}
    J --&amp;gt;|Yes| K[Return Optimized Chain]
    J --&amp;gt;|No| C

    classDef process fill:#bbf,stroke:#333,stroke-width:2px,color:#000
    classDef decision fill:#bfb,stroke:#333,stroke-width:2px,color:#000
    classDef output fill:#fbb,stroke:#333,stroke-width:2px,color:#000

    class A,D,E,F,G,H,I process
    class B,J decision
    class C,K output
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The algorithm operates on a structured representation of conversation chains (ChainAST) that preserves message types including tool calls and their responses. All summarization operations maintain critical conversation flow while reducing context size.&lt;/p&gt; 
 &lt;h3&gt;Global Summarizer Configuration Options&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Parameter&lt;/th&gt; 
    &lt;th&gt;Environment Variable&lt;/th&gt; 
    &lt;th&gt;Default&lt;/th&gt; 
    &lt;th&gt;Description&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Preserve Last&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;SUMMARIZER_PRESERVE_LAST&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Whether to keep all messages in the last section intact&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Use QA Pairs&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;SUMMARIZER_USE_QA&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Whether to use QA pair summarization strategy&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Summarize Human in QA&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;SUMMARIZER_SUM_MSG_HUMAN_IN_QA&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Whether to summarize human messages in QA pairs&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Last Section Size&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;SUMMARIZER_LAST_SEC_BYTES&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;51200&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Maximum byte size for last section (50KB)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Max Body Pair Size&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;SUMMARIZER_MAX_BP_BYTES&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;16384&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Maximum byte size for a single body pair (16KB)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Max QA Sections&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;SUMMARIZER_MAX_QA_SECTIONS&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Maximum QA pair sections to preserve&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Max QA Size&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;SUMMARIZER_MAX_QA_BYTES&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;65536&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Maximum byte size for QA pair sections (64KB)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Keep QA Sections&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;SUMMARIZER_KEEP_QA_SECTIONS&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Number of recent QA sections to keep without summarization&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;h3&gt;Assistant Summarizer Configuration Options&lt;/h3&gt; 
 &lt;p&gt;Assistant instances can use customized summarization settings to fine-tune context management behavior:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Parameter&lt;/th&gt; 
    &lt;th&gt;Environment Variable&lt;/th&gt; 
    &lt;th&gt;Default&lt;/th&gt; 
    &lt;th&gt;Description&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Preserve Last&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;ASSISTANT_SUMMARIZER_PRESERVE_LAST&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Whether to preserve all messages in the assistant's last section&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Last Section Size&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;ASSISTANT_SUMMARIZER_LAST_SEC_BYTES&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;76800&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Maximum byte size for assistant's last section (75KB)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Max Body Pair Size&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;ASSISTANT_SUMMARIZER_MAX_BP_BYTES&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;16384&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Maximum byte size for a single body pair in assistant context (16KB)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Max QA Sections&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;ASSISTANT_SUMMARIZER_MAX_QA_SECTIONS&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;7&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Maximum QA sections to preserve in assistant context&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Max QA Size&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;ASSISTANT_SUMMARIZER_MAX_QA_BYTES&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;76800&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Maximum byte size for assistant's QA sections (75KB)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Keep QA Sections&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;ASSISTANT_SUMMARIZER_KEEP_QA_SECTIONS&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Number of recent QA sections to preserve without summarization&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;The assistant summarizer configuration provides more memory for context retention compared to the global settings, preserving more recent conversation history while still ensuring efficient token usage.&lt;/p&gt; 
 &lt;h3&gt;Summarizer Environment Configuration&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Default values for global summarizer logic
SUMMARIZER_PRESERVE_LAST=true
SUMMARIZER_USE_QA=true
SUMMARIZER_SUM_MSG_HUMAN_IN_QA=false
SUMMARIZER_LAST_SEC_BYTES=51200
SUMMARIZER_MAX_BP_BYTES=16384
SUMMARIZER_MAX_QA_SECTIONS=10
SUMMARIZER_MAX_QA_BYTES=65536
SUMMARIZER_KEEP_QA_SECTIONS=1

# Default values for assistant summarizer logic
ASSISTANT_SUMMARIZER_PRESERVE_LAST=true
ASSISTANT_SUMMARIZER_LAST_SEC_BYTES=76800
ASSISTANT_SUMMARIZER_MAX_BP_BYTES=16384
ASSISTANT_SUMMARIZER_MAX_QA_SECTIONS=7
ASSISTANT_SUMMARIZER_MAX_QA_BYTES=76800
ASSISTANT_SUMMARIZER_KEEP_QA_SECTIONS=3
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;The architecture of PentAGI is designed to be modular, scalable, and secure. Here are the key components:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Core Services&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Frontend UI: React-based web interface with TypeScript for type safety&lt;/li&gt; 
   &lt;li&gt;Backend API: Go-based REST and GraphQL APIs for flexible integration&lt;/li&gt; 
   &lt;li&gt;Vector Store: PostgreSQL with pgvector for semantic search and memory storage&lt;/li&gt; 
   &lt;li&gt;Task Queue: Async task processing system for reliable operation&lt;/li&gt; 
   &lt;li&gt;AI Agent: Multi-agent system with specialized roles for efficient testing&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Monitoring Stack&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;OpenTelemetry: Unified observability data collection and correlation&lt;/li&gt; 
   &lt;li&gt;Grafana: Real-time visualization and alerting dashboards&lt;/li&gt; 
   &lt;li&gt;VictoriaMetrics: High-performance time-series metrics storage&lt;/li&gt; 
   &lt;li&gt;Jaeger: End-to-end distributed tracing for debugging&lt;/li&gt; 
   &lt;li&gt;Loki: Scalable log aggregation and analysis&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Analytics Platform&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Langfuse: Advanced LLM observability and performance analytics&lt;/li&gt; 
   &lt;li&gt;ClickHouse: Column-oriented analytics data warehouse&lt;/li&gt; 
   &lt;li&gt;Redis: High-speed caching and rate limiting&lt;/li&gt; 
   &lt;li&gt;MinIO: S3-compatible object storage for artifacts&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security Tools&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Web Scraper: Isolated browser environment for safe web interaction&lt;/li&gt; 
   &lt;li&gt;Pentesting Tools: Comprehensive suite of 20+ professional security tools&lt;/li&gt; 
   &lt;li&gt;Sandboxed Execution: All operations run in isolated containers&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Memory Systems&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Long-term Memory: Persistent storage of knowledge and experiences&lt;/li&gt; 
   &lt;li&gt;Working Memory: Active context and goals for current operations&lt;/li&gt; 
   &lt;li&gt;Episodic Memory: Historical actions and success patterns&lt;/li&gt; 
   &lt;li&gt;Knowledge Base: Structured domain expertise and tool capabilities&lt;/li&gt; 
   &lt;li&gt;Context Management: Intelligently manages growing LLM context windows using chain summarization&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The system uses Docker containers for isolation and easy deployment, with separate networks for core services, monitoring, and analytics to ensure proper security boundaries. Each component is designed to scale horizontally and can be configured for high availability in production environments.&lt;/p&gt; 
&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; 
&lt;h3&gt;System Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker and Docker Compose&lt;/li&gt; 
 &lt;li&gt;Minimum 4GB RAM&lt;/li&gt; 
 &lt;li&gt;10GB free disk space&lt;/li&gt; 
 &lt;li&gt;Internet access for downloading images and updates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Using Installer (Recommended)&lt;/h3&gt; 
&lt;p&gt;PentAGI provides an interactive installer with a terminal-based UI for streamlined configuration and deployment. The installer guides you through system checks, LLM provider setup, search engine configuration, and security hardening.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Supported Platforms:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: amd64 (&lt;a href="https://pentagi.com/downloads/linux/amd64/installer-latest.zip"&gt;download&lt;/a&gt;) | arm64 (&lt;a href="https://pentagi.com/downloads/linux/arm64/installer-latest.zip"&gt;download&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: amd64&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: amd64 (Intel) | arm64 (M-series)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Quick Installation (Linux amd64):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create installation directory
mkdir -p pentagi &amp;amp;&amp;amp; cd pentagi

# Download installer
wget -O installer.zip https://pentagi.com/downloads/linux/amd64/installer-latest.zip

# Extract
unzip installer.zip

# Run interactive installer
./installer
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The installer will:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;System Checks&lt;/strong&gt;: Verify Docker, network connectivity, and system requirements&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Environment Setup&lt;/strong&gt;: Create and configure &lt;code&gt;.env&lt;/code&gt; file with optimal defaults&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Provider Configuration&lt;/strong&gt;: Set up LLM providers (OpenAI, Anthropic, Gemini, Bedrock, Ollama, Custom)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Search Engines&lt;/strong&gt;: Configure DuckDuckGo, Google, Tavily, Traversaal, Perplexity, Searxng&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security Hardening&lt;/strong&gt;: Generate secure credentials and configure SSL certificates&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt;: Start PentAGI with docker-compose&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;For Production &amp;amp; Enhanced Security:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;For production deployments or security-sensitive environments, we &lt;strong&gt;strongly recommend&lt;/strong&gt; using a distributed two-node architecture where worker operations are isolated on a separate server. This prevents untrusted code execution and network access issues on your main system.&lt;/p&gt; 
&lt;p&gt;👉 &lt;strong&gt;See detailed guide&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/examples/guides/worker_node.md"&gt;Worker Node Setup&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The two-node setup provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Isolated Execution&lt;/strong&gt;: Worker containers run on dedicated hardware&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Network Isolation&lt;/strong&gt;: Separate network boundaries for penetration testing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security Boundaries&lt;/strong&gt;: Docker-in-Docker with TLS authentication&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OOB Attack Support&lt;/strong&gt;: Dedicated port ranges for out-of-band techniques&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Manual Installation&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a working directory or clone the repository:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir pentagi &amp;amp;&amp;amp; cd pentagi
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; or download it:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -o .env https://raw.githubusercontent.com/vxcontrol/pentagi/master/.env.example
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Fill in the required API keys in &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Required: At least one of these LLM providers
OPEN_AI_KEY=your_openai_key
ANTHROPIC_API_KEY=your_anthropic_key
GEMINI_API_KEY=your_gemini_key

# Optional: AWS Bedrock provider (enterprise-grade models)
BEDROCK_REGION=us-east-1
BEDROCK_ACCESS_KEY_ID=your_aws_access_key
BEDROCK_SECRET_ACCESS_KEY=your_aws_secret_key

# Optional: Local LLM provider (zero-cost inference)
OLLAMA_SERVER_URL=http://localhost:11434

# Optional: Additional search capabilities
DUCKDUCKGO_ENABLED=true
GOOGLE_API_KEY=your_google_key
GOOGLE_CX_KEY=your_google_cx
TAVILY_API_KEY=your_tavily_key
TRAVERSAAL_API_KEY=your_traversaal_key
PERPLEXITY_API_KEY=your_perplexity_key
PERPLEXITY_MODEL=sonar-pro
PERPLEXITY_CONTEXT_SIZE=medium

# Searxng meta search engine (aggregates results from multiple sources)
SEARXNG_URL=http://your-searxng-instance:8080
SEARXNG_CATEGORIES=general
SEARXNG_LANGUAGE=
SEARXNG_SAFESEARCH=0
SEARXNG_TIME_RANGE=

# Assistant configuration
ASSISTANT_USE_AGENTS=false         # Default value for agent usage when creating new assistants
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Change all security related environment variables in &lt;code&gt;.env&lt;/code&gt; file to improve security.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;details&gt; 
 &lt;summary&gt;Security related environment variables&lt;/summary&gt; 
 &lt;h3&gt;Main Security Settings&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;COOKIE_SIGNING_SALT&lt;/code&gt; - Salt for cookie signing, change to random value&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;PUBLIC_URL&lt;/code&gt; - Public URL of your server (eg. &lt;code&gt;https://pentagi.example.com&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;SERVER_SSL_CRT&lt;/code&gt; and &lt;code&gt;SERVER_SSL_KEY&lt;/code&gt; - Custom paths to your existing SSL certificate and key for HTTPS (these paths should be used in the docker-compose.yml file to mount as volumes)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Scraper Access&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;SCRAPER_PUBLIC_URL&lt;/code&gt; - Public URL for scraper if you want to use different scraper server for public URLs&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;SCRAPER_PRIVATE_URL&lt;/code&gt; - Private URL for scraper (local scraper server in docker-compose.yml file to access it to local URLs)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Access Credentials&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;PENTAGI_POSTGRES_USER&lt;/code&gt; and &lt;code&gt;PENTAGI_POSTGRES_PASSWORD&lt;/code&gt; - PostgreSQL credentials&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;ol start="5"&gt; 
 &lt;li&gt;Remove all inline comments from &lt;code&gt;.env&lt;/code&gt; file if you want to use it in VSCode or other IDEs as a envFile option:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -i -pe 's/\s+#.*$//' .env
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="6"&gt; 
 &lt;li&gt;Run the PentAGI stack:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -O https://raw.githubusercontent.com/vxcontrol/pentagi/master/docker-compose.yml
docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Visit &lt;a href="https://localhost:8443"&gt;localhost:8443&lt;/a&gt; to access PentAGI Web UI (default is &lt;code&gt;admin@pentagi.com&lt;/code&gt; / &lt;code&gt;admin&lt;/code&gt;)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you caught an error about &lt;code&gt;pentagi-network&lt;/code&gt; or &lt;code&gt;observability-network&lt;/code&gt; or &lt;code&gt;langfuse-network&lt;/code&gt; you need to run &lt;code&gt;docker-compose.yml&lt;/code&gt; firstly to create these networks and after that run &lt;code&gt;docker-compose-langfuse.yml&lt;/code&gt; and &lt;code&gt;docker-compose-observability.yml&lt;/code&gt; to use Langfuse and Observability services.&lt;/p&gt; 
 &lt;p&gt;You have to set at least one Language Model provider (OpenAI, Anthropic, Gemini, AWS Bedrock, or Ollama) to use PentAGI. AWS Bedrock provides enterprise-grade access to multiple foundation models from leading AI companies, while Ollama provides zero-cost local inference if you have sufficient computational resources. Additional API keys for search engines are optional but recommended for better results.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;LLM_SERVER_*&lt;/code&gt; environment variables are experimental feature and will be changed in the future. Right now you can use them to specify custom LLM server URL and one model for all agent types.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;PROXY_URL&lt;/code&gt; is a global proxy URL for all LLM providers and external search systems. You can use it for isolation from external networks.&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; file runs the PentAGI service as root user because it needs access to docker.sock for container management. If you're using TCP/IP network connection to Docker instead of socket file, you can remove root privileges and use the default &lt;code&gt;pentagi&lt;/code&gt; user for better security.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Assistant Configuration&lt;/h3&gt; 
&lt;p&gt;PentAGI allows you to configure default behavior for assistants:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ASSISTANT_USE_AGENTS&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Controls the default value for agent usage when creating new assistants&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The &lt;code&gt;ASSISTANT_USE_AGENTS&lt;/code&gt; setting affects the initial state of the "Use Agents" toggle when creating a new assistant in the UI:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;false&lt;/code&gt; (default): New assistants are created with agent delegation disabled by default&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: New assistants are created with agent delegation enabled by default&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that users can always override this setting by toggling the "Use Agents" button in the UI when creating or editing an assistant. This environment variable only controls the initial default state.&lt;/p&gt; 
&lt;h3&gt;Custom LLM Provider Configuration&lt;/h3&gt; 
&lt;p&gt;When using custom LLM providers with the &lt;code&gt;LLM_SERVER_*&lt;/code&gt; variables, you can fine-tune the reasoning format used in requests:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LLM_SERVER_URL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Base URL for the custom LLM API endpoint&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LLM_SERVER_KEY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;API key for the custom LLM provider&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LLM_SERVER_MODEL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Default model to use (can be overridden in provider config)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LLM_SERVER_CONFIG_PATH&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Path to the YAML configuration file for agent-specific models&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LLM_SERVER_LEGACY_REASONING&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Controls reasoning format in API requests&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The &lt;code&gt;LLM_SERVER_LEGACY_REASONING&lt;/code&gt; setting affects how reasoning parameters are sent to the LLM:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;false&lt;/code&gt; (default): Uses modern format where reasoning is sent as a structured object with &lt;code&gt;max_tokens&lt;/code&gt; parameter&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: Uses legacy format with string-based &lt;code&gt;reasoning_effort&lt;/code&gt; parameter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This setting is important when working with different LLM providers as they may expect different reasoning formats in their API requests. If you encounter reasoning-related errors with custom providers, try changing this setting.&lt;/p&gt; 
&lt;h3&gt;Local LLM Provider Configuration&lt;/h3&gt; 
&lt;p&gt;PentAGI supports Ollama for local LLM inference, providing zero-cost operation and enhanced privacy:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;OLLAMA_SERVER_URL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;URL of your Ollama server&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;OLLAMA_SERVER_CONFIG_PATH&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Path to custom agent configuration file&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Configuration examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Basic Ollama setup
OLLAMA_SERVER_URL=http://localhost:11434

# Remote Ollama server
OLLAMA_SERVER_URL=http://ollama-server:11434

# Custom configuration with agent-specific models
OLLAMA_SERVER_CONFIG_PATH=/path/to/ollama-config.yml

# Default configuration file inside the docker container (just for example)
OLLAMA_SERVER_CONFIG_PATH=/opt/pentagi/conf/ollama-llama318b.provider.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The system automatically discovers available models from your Ollama server and provides zero-cost inference for penetration testing workflows.&lt;/p&gt; 
&lt;h4&gt;Creating Custom Ollama Models with Extended Context&lt;/h4&gt; 
&lt;p&gt;PentAGI requires models with larger context windows than the default Ollama configurations. You need to create custom models with increased &lt;code&gt;num_ctx&lt;/code&gt; parameter through Modelfiles. While typical agent workflows consume around 64K tokens, PentAGI uses 110K context size for safety margin and handling complex penetration testing scenarios.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The &lt;code&gt;num_ctx&lt;/code&gt; parameter can only be set during model creation via Modelfile - it cannot be changed after model creation or overridden at runtime.&lt;/p&gt; 
&lt;h5&gt;Example: Qwen3 32B FP16 with Extended Context&lt;/h5&gt; 
&lt;p&gt;Create a Modelfile named &lt;code&gt;Modelfile_qwen3_32b_fp16_tc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-dockerfile"&gt;FROM qwen3:32b-fp16
PARAMETER num_ctx 110000
PARAMETER temperature 0.3
PARAMETER top_p 0.8
PARAMETER min_p 0.0
PARAMETER top_k 20
PARAMETER repeat_penalty 1.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build the custom model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ollama create qwen3:32b-fp16-tc -f Modelfile_qwen3_32b_fp16_tc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Example: QwQ 32B FP16 with Extended Context&lt;/h5&gt; 
&lt;p&gt;Create a Modelfile named &lt;code&gt;Modelfile_qwq_32b_fp16_tc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-dockerfile"&gt;FROM qwq:32b-fp16
PARAMETER num_ctx 110000
PARAMETER temperature 0.2
PARAMETER top_p 0.7
PARAMETER min_p 0.0
PARAMETER top_k 40
PARAMETER repeat_penalty 1.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build the custom model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ollama create qwq:32b-fp16-tc -f Modelfile_qwq_32b_fp16_tc
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The QwQ 32B FP16 model requires approximately &lt;strong&gt;71.3 GB VRAM&lt;/strong&gt; for inference. Ensure your system has sufficient GPU memory before attempting to use this model.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;These custom models are referenced in the pre-built provider configuration files (&lt;code&gt;ollama-qwen332b-fp16-tc.provider.yml&lt;/code&gt; and &lt;code&gt;ollama-qwq32b-fp16-tc.provider.yml&lt;/code&gt;) that are included in the Docker image at &lt;code&gt;/opt/pentagi/conf/&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;OpenAI Provider Configuration&lt;/h3&gt; 
&lt;p&gt;PentAGI supports OpenAI's advanced language models, including the latest reasoning-capable o-series models designed for complex analytical tasks:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;OPEN_AI_KEY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;API key for OpenAI services&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;OPEN_AI_SERVER_URL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;https://api.openai.com/v1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;OpenAI API endpoint&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Configuration examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Basic OpenAI setup
OPEN_AI_KEY=your_openai_api_key
OPEN_AI_SERVER_URL=https://api.openai.com/v1

# Using with proxy for enhanced security
OPEN_AI_KEY=your_openai_api_key
PROXY_URL=http://your-proxy:8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The OpenAI provider offers cutting-edge capabilities including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Reasoning Models&lt;/strong&gt;: Advanced o-series models (o1, o3, o4-mini) with step-by-step analytical thinking&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Latest GPT-4.1 Series&lt;/strong&gt;: Flagship models optimized for complex security research and exploit development&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cost-Effective Options&lt;/strong&gt;: From nano models for high-volume scanning to powerful reasoning models for deep analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Versatile Performance&lt;/strong&gt;: Fast, intelligent models perfect for multi-step security analysis and penetration testing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Proven Reliability&lt;/strong&gt;: Industry-leading models with consistent performance across diverse security scenarios&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The system automatically selects appropriate OpenAI models based on task complexity, optimizing for both performance and cost-effectiveness.&lt;/p&gt; 
&lt;h3&gt;Anthropic Provider Configuration&lt;/h3&gt; 
&lt;p&gt;PentAGI integrates with Anthropic's Claude models, known for their exceptional safety, reasoning capabilities, and sophisticated understanding of complex security contexts:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;API key for Anthropic services&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ANTHROPIC_SERVER_URL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;https://api.anthropic.com/v1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Anthropic API endpoint&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Configuration examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Basic Anthropic setup
ANTHROPIC_API_KEY=your_anthropic_api_key
ANTHROPIC_SERVER_URL=https://api.anthropic.com/v1

# Using with proxy for secure environments
ANTHROPIC_API_KEY=your_anthropic_api_key
PROXY_URL=http://your-proxy:8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Anthropic provider delivers superior capabilities including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced Reasoning&lt;/strong&gt;: Claude 4 series with exceptional reasoning for sophisticated penetration testing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extended Thinking&lt;/strong&gt;: Claude 3.7 with step-by-step thinking capabilities for methodical security research&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High-Speed Performance&lt;/strong&gt;: Claude 3.5 Haiku for blazing-fast vulnerability scans and real-time monitoring&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Comprehensive Analysis&lt;/strong&gt;: Claude Sonnet models for complex security analysis and threat hunting&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Safety-First Design&lt;/strong&gt;: Built-in safety mechanisms ensuring responsible security testing practices&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The system leverages Claude's advanced understanding of security contexts to provide thorough and responsible penetration testing guidance.&lt;/p&gt; 
&lt;h3&gt;Google AI (Gemini) Provider Configuration&lt;/h3&gt; 
&lt;p&gt;PentAGI supports Google's Gemini models through the Google AI API, offering state-of-the-art reasoning capabilities and multimodal features:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;GEMINI_API_KEY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;API key for Google AI services&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;GEMINI_SERVER_URL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;https://generativelanguage.googleapis.com&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Google AI API endpoint&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Configuration examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Basic Gemini setup
GEMINI_API_KEY=your_gemini_api_key
GEMINI_SERVER_URL=https://generativelanguage.googleapis.com

# Using with proxy
GEMINI_API_KEY=your_gemini_api_key
PROXY_URL=http://your-proxy:8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Gemini provider offers advanced features including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Thinking Capabilities&lt;/strong&gt;: Advanced reasoning models (Gemini 2.5 series) with step-by-step analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multimodal Support&lt;/strong&gt;: Text and image processing for comprehensive security assessments&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Large Context Windows&lt;/strong&gt;: Up to 2M tokens for analyzing extensive codebases and documentation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cost-Effective Options&lt;/strong&gt;: From high-performance pro models to economical flash variants&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security-Focused Models&lt;/strong&gt;: Specialized configurations optimized for penetration testing workflows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The system automatically selects appropriate Gemini models based on agent requirements, balancing performance, capabilities, and cost-effectiveness.&lt;/p&gt; 
&lt;h3&gt;AWS Bedrock Provider Configuration&lt;/h3&gt; 
&lt;p&gt;PentAGI integrates with Amazon Bedrock, offering access to a wide range of foundation models from leading AI companies including Anthropic, AI21, Cohere, Meta, and Amazon's own models:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BEDROCK_REGION&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;us-east-1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;AWS region for Bedrock service&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BEDROCK_ACCESS_KEY_ID&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;AWS access key ID for authentication&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BEDROCK_SECRET_ACCESS_KEY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;AWS secret access key for authentication&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BEDROCK_SERVER_URL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Optional custom Bedrock endpoint URL&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Configuration examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Basic AWS Bedrock setup with credentials
BEDROCK_REGION=us-east-1
BEDROCK_ACCESS_KEY_ID=your_aws_access_key
BEDROCK_SECRET_ACCESS_KEY=your_aws_secret_key

# Using with proxy for enhanced security
BEDROCK_REGION=us-east-1
BEDROCK_ACCESS_KEY_ID=your_aws_access_key
BEDROCK_SECRET_ACCESS_KEY=your_aws_secret_key
PROXY_URL=http://your-proxy:8080

# Using custom endpoint (for VPC endpoints or testing)
BEDROCK_REGION=us-east-1
BEDROCK_ACCESS_KEY_ID=your_aws_access_key
BEDROCK_SECRET_ACCESS_KEY=your_aws_secret_key
BEDROCK_SERVER_URL=https://bedrock-runtime.us-east-1.amazonaws.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] &lt;strong&gt;AWS Bedrock Rate Limits Warning&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;The default PentAGI configuration for AWS Bedrock uses two primary models:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;us.anthropic.claude-sonnet-4-20250514-v1:0&lt;/code&gt; (for most agents) - &lt;strong&gt;2 requests per minute&lt;/strong&gt; for new AWS accounts&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;us.anthropic.claude-3-5-haiku-20241022-v1:0&lt;/code&gt; (for simple tasks) - &lt;strong&gt;20 requests per minute&lt;/strong&gt; for new AWS accounts&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;These default rate limits are &lt;strong&gt;extremely restrictive&lt;/strong&gt; for comfortable penetration testing scenarios and will significantly impact your workflow. We &lt;strong&gt;strongly recommend&lt;/strong&gt;:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;Request quota increases&lt;/strong&gt; for your AWS Bedrock models through the AWS Service Quotas console&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Use provisioned throughput models&lt;/strong&gt; with hourly billing for higher throughput requirements&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Switch to alternative models&lt;/strong&gt; with higher default quotas (e.g., Amazon Nova series, Meta Llama models)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Consider using a different LLM provider&lt;/strong&gt; (OpenAI, Anthropic, Gemini) if you need immediate high-throughput access&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Without adequate rate limits, you may experience frequent delays, timeouts, and degraded testing performance.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The AWS Bedrock provider delivers comprehensive capabilities including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-Provider Access&lt;/strong&gt;: Access to models from Anthropic (Claude), AI21 (Jamba), Cohere (Command), Meta (Llama), Amazon (Nova, Titan), and DeepSeek (R1) through a single interface&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced Reasoning&lt;/strong&gt;: Support for Claude 4 and other reasoning-capable models with step-by-step thinking&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multimodal Models&lt;/strong&gt;: Amazon Nova series supporting text, image, and video processing for comprehensive security analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise Security&lt;/strong&gt;: AWS-native security controls, VPC integration, and compliance certifications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cost Optimization&lt;/strong&gt;: Wide range of model sizes and capabilities for cost-effective penetration testing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Regional Availability&lt;/strong&gt;: Deploy models in your preferred AWS region for data residency and performance&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: Low-latency inference through AWS's global infrastructure&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The system automatically selects appropriate Bedrock models based on task complexity and requirements, leveraging the full spectrum of available foundation models for optimal security testing results.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] &lt;strong&gt;Converse API Requirements&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;PentAGI uses the &lt;strong&gt;Amazon Bedrock Converse API&lt;/strong&gt; for model interactions, which requires models to support the following features:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;✅ &lt;strong&gt;Converse&lt;/strong&gt; - Basic conversation API support&lt;/li&gt; 
  &lt;li&gt;✅ &lt;strong&gt;ConverseStream&lt;/strong&gt; - Streaming response support&lt;/li&gt; 
  &lt;li&gt;✅ &lt;strong&gt;Tool use&lt;/strong&gt; - Function calling capabilities for penetration testing tools&lt;/li&gt; 
  &lt;li&gt;✅ &lt;strong&gt;Streaming tool use&lt;/strong&gt; - Real-time tool execution feedback&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;Before selecting models&lt;/strong&gt;, verify their feature support at: &lt;a href="https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference-supported-models-features.html"&gt;Supported models and model features&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;⚠️ &lt;strong&gt;Important&lt;/strong&gt;: Some models like AI21 Jurassic-2 and Cohere Command (Text) have &lt;strong&gt;limited chat support&lt;/strong&gt; and may not work properly with PentAGI's multi-turn conversation workflows.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: AWS credentials can also be provided through IAM roles, environment variables, or AWS credential files following standard AWS SDK authentication patterns. Ensure your AWS account has appropriate permissions for Amazon Bedrock service access.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For advanced configuration options and detailed setup instructions, please visit our &lt;a href="https://docs.pentagi.com"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🔧 Advanced Setup&lt;/h2&gt; 
&lt;h3&gt;Langfuse Integration&lt;/h3&gt; 
&lt;p&gt;Langfuse provides advanced capabilities for monitoring and analyzing AI agent operations.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Configure Langfuse environment variables in existing &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;details&gt; 
 &lt;summary&gt;Langfuse valuable environment variables&lt;/summary&gt; 
 &lt;h3&gt;Database Credentials&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_POSTGRES_USER&lt;/code&gt; and &lt;code&gt;LANGFUSE_POSTGRES_PASSWORD&lt;/code&gt; - Langfuse PostgreSQL credentials&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_CLICKHOUSE_USER&lt;/code&gt; and &lt;code&gt;LANGFUSE_CLICKHOUSE_PASSWORD&lt;/code&gt; - ClickHouse credentials&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_REDIS_AUTH&lt;/code&gt; - Redis password&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Encryption and Security Keys&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_SALT&lt;/code&gt; - Salt for hashing in Langfuse Web UI&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_ENCRYPTION_KEY&lt;/code&gt; - Encryption key (32 bytes in hex)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_NEXTAUTH_SECRET&lt;/code&gt; - Secret key for NextAuth&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Admin Credentials&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_INIT_USER_EMAIL&lt;/code&gt; - Admin email&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_INIT_USER_PASSWORD&lt;/code&gt; - Admin password&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_INIT_USER_NAME&lt;/code&gt; - Admin username&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;API Keys and Tokens&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_INIT_PROJECT_PUBLIC_KEY&lt;/code&gt; - Project public key (used from PentAGI side too)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_INIT_PROJECT_SECRET_KEY&lt;/code&gt; - Project secret key (used from PentAGI side too)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;S3 Storage&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_S3_ACCESS_KEY_ID&lt;/code&gt; - S3 access key ID&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;LANGFUSE_S3_SECRET_ACCESS_KEY&lt;/code&gt; - S3 secret access key&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Enable integration with Langfuse for PentAGI service in &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;LANGFUSE_BASE_URL=http://langfuse-web:3000
LANGFUSE_PROJECT_ID= # default: value from ${LANGFUSE_INIT_PROJECT_ID}
LANGFUSE_PUBLIC_KEY= # default: value from ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY}
LANGFUSE_SECRET_KEY= # default: value from ${LANGFUSE_INIT_PROJECT_SECRET_KEY}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Run the Langfuse stack:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -O https://raw.githubusercontent.com/vxcontrol/pentagi/master/docker-compose-langfuse.yml
docker compose -f docker-compose.yml -f docker-compose-langfuse.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Visit &lt;a href="http://localhost:4000"&gt;localhost:4000&lt;/a&gt; to access Langfuse Web UI with credentials from &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;LANGFUSE_INIT_USER_EMAIL&lt;/code&gt; - Admin email&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;LANGFUSE_INIT_USER_PASSWORD&lt;/code&gt; - Admin password&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Monitoring and Observability&lt;/h3&gt; 
&lt;p&gt;For detailed system operation tracking, integration with monitoring tools is available.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Enable integration with OpenTelemetry and all observability services for PentAGI in &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;OTEL_HOST=otelcol:8148
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Run the observability stack:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -O https://raw.githubusercontent.com/vxcontrol/pentagi/master/docker-compose-observability.yml
docker compose -f docker-compose.yml -f docker-compose-observability.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Visit &lt;a href="http://localhost:3000"&gt;localhost:3000&lt;/a&gt; to access Grafana Web UI.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you want to use Observability stack with Langfuse, you need to enable integration in &lt;code&gt;.env&lt;/code&gt; file to set &lt;code&gt;LANGFUSE_OTEL_EXPORTER_OTLP_ENDPOINT&lt;/code&gt; to &lt;code&gt;http://otelcol:4318&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;And you need to run both stacks &lt;code&gt;docker compose -f docker-compose.yml -f docker-compose-langfuse.yml -f docker-compose-observability.yml up -d&lt;/code&gt; to have all services running.&lt;/p&gt; 
 &lt;p&gt;Also you can register aliases for these commands in your shell to run it faster:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;alias pentagi="docker compose -f docker-compose.yml -f docker-compose-langfuse.yml -f docker-compose-observability.yml"
alias pentagi-up="docker compose -f docker-compose.yml -f docker-compose-langfuse.yml -f docker-compose-observability.yml up -d"
alias pentagi-down="docker compose -f docker-compose.yml -f docker-compose-langfuse.yml -f docker-compose-observability.yml down"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;GitHub and Google OAuth Integration&lt;/h3&gt; 
&lt;p&gt;OAuth integration with GitHub and Google allows users to authenticate using their existing accounts on these platforms. This provides several benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simplified login process without need to create separate credentials&lt;/li&gt; 
 &lt;li&gt;Enhanced security through trusted identity providers&lt;/li&gt; 
 &lt;li&gt;Access to user profile information from GitHub/Google accounts&lt;/li&gt; 
 &lt;li&gt;Seamless integration with existing development workflows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For using GitHub OAuth you need to create a new OAuth application in your GitHub account and set the &lt;code&gt;GITHUB_CLIENT_ID&lt;/code&gt; and &lt;code&gt;GITHUB_CLIENT_SECRET&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;For using Google OAuth you need to create a new OAuth application in your Google account and set the &lt;code&gt;GOOGLE_CLIENT_ID&lt;/code&gt; and &lt;code&gt;GOOGLE_CLIENT_SECRET&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; 
&lt;h3&gt;Docker Image Configuration&lt;/h3&gt; 
&lt;p&gt;PentAGI allows you to configure Docker image selection for executing various tasks. The system automatically chooses the most appropriate image based on the task type, but you can constrain this selection by specifying your preferred images:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;DOCKER_DEFAULT_IMAGE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;debian:latest&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Default Docker image for general tasks and ambiguous cases&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;DOCKER_DEFAULT_IMAGE_FOR_PENTEST&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;vxcontrol/kali-linux&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Default Docker image for security/penetration testing tasks&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;When these environment variables are set, AI agents will be limited to the image choices you specify. This is particularly useful for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Security Enforcement&lt;/strong&gt;: Restricting usage to only verified and trusted images&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Environment Standardization&lt;/strong&gt;: Using corporate or customized images across all operations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance Optimization&lt;/strong&gt;: Utilizing pre-built images with necessary tools already installed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Configuration examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Using a custom image for general tasks
DOCKER_DEFAULT_IMAGE=mycompany/custom-debian:latest

# Using a specialized image for penetration testing
DOCKER_DEFAULT_IMAGE_FOR_PENTEST=mycompany/pentest-tools:v2.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If a user explicitly specifies a particular Docker image in their task, the system will try to use that exact image, ignoring these settings. These variables only affect the system's automatic image selection process.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;💻 Development&lt;/h2&gt; 
&lt;h3&gt;Development Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;golang&lt;/li&gt; 
 &lt;li&gt;nodejs&lt;/li&gt; 
 &lt;li&gt;docker&lt;/li&gt; 
 &lt;li&gt;postgres&lt;/li&gt; 
 &lt;li&gt;commitlint&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Environment Setup&lt;/h3&gt; 
&lt;h4&gt;Backend Setup&lt;/h4&gt; 
&lt;p&gt;Run once &lt;code&gt;cd backend &amp;amp;&amp;amp; go mod download&lt;/code&gt; to install needed packages.&lt;/p&gt; 
&lt;p&gt;For generating swagger files have to run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;swag init -g ../../pkg/server/router.go -o pkg/server/docs/ --parseDependency --parseInternal --parseDepth 2 -d cmd/pentagi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;before installing &lt;code&gt;swag&lt;/code&gt; package via&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go install github.com/swaggo/swag/cmd/swag@v1.8.7
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For generating graphql resolver files have to run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go run github.com/99designs/gqlgen --config ./gqlgen/gqlgen.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;after that you can see the generated files in &lt;code&gt;pkg/graph&lt;/code&gt; folder.&lt;/p&gt; 
&lt;p&gt;For generating ORM methods (database package) from sqlc configuration&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -v $(pwd):/src -w /src --network pentagi-network -e DATABASE_URL="{URL}" sqlc/sqlc generate -f sqlc/sqlc.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For generating Langfuse SDK from OpenAPI specification&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fern generate --local
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and to install fern-cli&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install -g fern-api
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Testing&lt;/h4&gt; 
&lt;p&gt;For running tests &lt;code&gt;cd backend &amp;amp;&amp;amp; go test -v ./...&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Frontend Setup&lt;/h4&gt; 
&lt;p&gt;Run once &lt;code&gt;cd frontend &amp;amp;&amp;amp; npm install&lt;/code&gt; to install needed packages.&lt;/p&gt; 
&lt;p&gt;For generating graphql files have to run &lt;code&gt;npm run graphql:generate&lt;/code&gt; which using &lt;code&gt;graphql-codegen.ts&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;Be sure that you have &lt;code&gt;graphql-codegen&lt;/code&gt; installed globally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install -g graphql-codegen
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After that you can run:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;npm run prettier&lt;/code&gt; to check if your code is formatted correctly&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm run prettier:fix&lt;/code&gt; to fix it&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm run lint&lt;/code&gt; to check if your code is linted correctly&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm run lint:fix&lt;/code&gt; to fix it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For generating SSL certificates you need to run &lt;code&gt;npm run ssl:generate&lt;/code&gt; which using &lt;code&gt;generate-ssl.ts&lt;/code&gt; file or it will be generated automatically when you run &lt;code&gt;npm run dev&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Backend Configuration&lt;/h4&gt; 
&lt;p&gt;Edit the configuration for &lt;code&gt;backend&lt;/code&gt; in &lt;code&gt;.vscode/launch.json&lt;/code&gt; file:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;DATABASE_URL&lt;/code&gt; - PostgreSQL database URL (eg. &lt;code&gt;postgres://postgres:postgres@localhost:5432/pentagidb?sslmode=disable&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DOCKER_HOST&lt;/code&gt; - Docker SDK API (eg. for macOS &lt;code&gt;DOCKER_HOST=unix:///Users/&amp;lt;my-user&amp;gt;/Library/Containers/com.docker.docker/Data/docker.raw.sock&lt;/code&gt;) &lt;a href="https://stackoverflow.com/a/62757128/5922857"&gt;more info&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;SERVER_PORT&lt;/code&gt; - Port to run the server (default: &lt;code&gt;8443&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SERVER_USE_SSL&lt;/code&gt; - Enable SSL for the server (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Frontend Configuration&lt;/h4&gt; 
&lt;p&gt;Edit the configuration for &lt;code&gt;frontend&lt;/code&gt; in &lt;code&gt;.vscode/launch.json&lt;/code&gt; file:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;VITE_API_URL&lt;/code&gt; - Backend API URL. &lt;em&gt;Omit&lt;/em&gt; the URL scheme (e.g., &lt;code&gt;localhost:8080&lt;/code&gt; &lt;em&gt;NOT&lt;/em&gt; &lt;code&gt;http://localhost:8080&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;VITE_USE_HTTPS&lt;/code&gt; - Enable SSL for the server (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;VITE_PORT&lt;/code&gt; - Port to run the server (default: &lt;code&gt;8000&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;VITE_HOST&lt;/code&gt; - Host to run the server (default: &lt;code&gt;0.0.0.0&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Running the Application&lt;/h3&gt; 
&lt;h4&gt;Backend&lt;/h4&gt; 
&lt;p&gt;Run the command(s) in &lt;code&gt;backend&lt;/code&gt; folder:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use &lt;code&gt;.env&lt;/code&gt; file to set environment variables like a &lt;code&gt;source .env&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;go run cmd/pentagi/main.go&lt;/code&gt; to start the server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The first run can take a while as dependencies and docker images need to be downloaded to setup the backend environment.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Frontend&lt;/h4&gt; 
&lt;p&gt;Run the command(s) in &lt;code&gt;frontend&lt;/code&gt; folder:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install the dependencies&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;npm run dev&lt;/code&gt; to run the web app&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;npm run build&lt;/code&gt; to build the web app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Open your browser and visit the web app URL.&lt;/p&gt; 
&lt;h2&gt;🧪 Testing LLM Agents&lt;/h2&gt; 
&lt;p&gt;PentAGI includes a powerful utility called &lt;code&gt;ctester&lt;/code&gt; for testing and validating LLM agent capabilities. This tool helps ensure your LLM provider configurations work correctly with different agent types, allowing you to optimize model selection for each specific agent role.&lt;/p&gt; 
&lt;p&gt;The utility features parallel testing of multiple agents, detailed reporting, and flexible configuration options.&lt;/p&gt; 
&lt;h3&gt;Key Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parallel Testing&lt;/strong&gt;: Tests multiple agents simultaneously for faster results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Comprehensive Test Suite&lt;/strong&gt;: Evaluates basic completion, JSON responses, function calling, and penetration testing knowledge&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Detailed Reporting&lt;/strong&gt;: Generates markdown reports with success rates and performance metrics&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible Configuration&lt;/strong&gt;: Test specific agents or test groups as needed&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Specialized Test Groups&lt;/strong&gt;: Includes domain-specific tests for cybersecurity and penetration testing scenarios&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Usage Scenarios&lt;/h3&gt; 
&lt;h4&gt;For Developers (with local Go environment)&lt;/h4&gt; 
&lt;p&gt;If you've cloned the repository and have Go installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Default configuration with .env file
cd backend
go run cmd/ctester/*.go -verbose

# Custom provider configuration
go run cmd/ctester/*.go -config ../examples/configs/openrouter.provider.yml -verbose

# Generate a report file
go run cmd/ctester/*.go -config ../examples/configs/deepinfra.provider.yml -report ../test-report.md

# Test specific agent types only
go run cmd/ctester/*.go -agents simple,simple_json,primary_agent -verbose

# Test specific test groups only
go run cmd/ctester/*.go -groups basic,advanced -verbose
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;For Users (using Docker image)&lt;/h4&gt; 
&lt;p&gt;If you prefer to use the pre-built Docker image without setting up a development environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Using Docker to test with default environment
docker run --rm -v $(pwd)/.env:/opt/pentagi/.env vxcontrol/pentagi /opt/pentagi/bin/ctester -verbose

# Test with your custom provider configuration
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  -v $(pwd)/my-config.yml:/opt/pentagi/config.yml \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -config /opt/pentagi/config.yml -agents simple,primary_agent,coder -verbose

# Generate a detailed report
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  -v $(pwd):/opt/pentagi/output \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -report /opt/pentagi/output/report.md
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using Pre-configured Providers&lt;/h4&gt; 
&lt;p&gt;The Docker image comes with built-in support for major providers (OpenAI, Anthropic, Gemini, Ollama) and pre-configured provider files for additional services (OpenRouter, DeepInfra, DeepSeek):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Test with OpenRouter configuration
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -config /opt/pentagi/conf/openrouter.provider.yml

# Test with DeepInfra configuration
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -config /opt/pentagi/conf/deepinfra.provider.yml

# Test with DeepSeek configuration
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -config /opt/pentagi/conf/deepseek.provider.yml

# Test with OpenAI configuration
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -type openai

# Test with Anthropic configuration
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -type anthropic

# Test with Gemini configuration
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -type gemini

# Test with AWS Bedrock configuration
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -type bedrock

# Test with Custom OpenAI configuration
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -config /opt/pentagi/conf/custom-openai.provider.yml

# Test with Ollama configuration (local inference)
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -config /opt/pentagi/conf/ollama-llama318b.provider.yml

# Test with Ollama Qwen3 32B configuration (requires custom model creation)
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -config /opt/pentagi/conf/ollama-qwen332b-fp16-tc.provider.yml

# Test with Ollama QwQ 32B configuration (requires custom model creation and 71.3GB VRAM)
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -config /opt/pentagi/conf/ollama-qwq32b-fp16-tc.provider.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use these configurations, your &lt;code&gt;.env&lt;/code&gt; file only needs to contain:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;LLM_SERVER_URL=https://openrouter.ai/api/v1      # or https://api.deepinfra.com/v1/openai or https://api.deepseek.com or https://api.openai.com/v1
LLM_SERVER_KEY=your_api_key
LLM_SERVER_MODEL=                                # Leave empty, as models are specified in the config
LLM_SERVER_CONFIG_PATH=/opt/pentagi/conf/openrouter.provider.yml  # or deepinfra.provider.yml or deepseek.provider.yml or custom-openai.provider.yml
LLM_SERVER_LEGACY_REASONING=false                # Controls reasoning format, for OpenAI must be true (default: false)

# For OpenAI (official API)
OPEN_AI_KEY=your_openai_api_key                  # Your OpenAI API key
OPEN_AI_SERVER_URL=https://api.openai.com/v1     # OpenAI API endpoint

# For Anthropic (Claude models)
ANTHROPIC_API_KEY=your_anthropic_api_key         # Your Anthropic API key
ANTHROPIC_SERVER_URL=https://api.anthropic.com/v1  # Anthropic API endpoint

# For Gemini (Google AI)
GEMINI_API_KEY=your_gemini_api_key               # Your Google AI API key
GEMINI_SERVER_URL=https://generativelanguage.googleapis.com  # Google AI API endpoint

# For AWS Bedrock (enterprise foundation models)
BEDROCK_REGION=us-east-1                         # AWS region for Bedrock service
BEDROCK_ACCESS_KEY_ID=your_aws_access_key        # AWS access key ID
BEDROCK_SECRET_ACCESS_KEY=your_aws_secret_key    # AWS secret access key
BEDROCK_SERVER_URL=                              # Optional custom Bedrock endpoint

# For Ollama (local inference)
OLLAMA_SERVER_URL=http://localhost:11434         # Your Ollama server URL (only for test run)
OLLAMA_SERVER_CONFIG_PATH=/opt/pentagi/conf/ollama-llama318b.provider.yml  # or ollama-qwen332b-fp16-tc.provider.yml or ollama-qwq32b-fp16-tc.provider.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using OpenAI with Unverified Organizations&lt;/h4&gt; 
&lt;p&gt;For OpenAI accounts with unverified organizations that don't have access to the latest reasoning models (o1, o3, o4-mini), you need to use a custom configuration.&lt;/p&gt; 
&lt;p&gt;To use OpenAI with unverified organization accounts, configure your &lt;code&gt;.env&lt;/code&gt; file as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;LLM_SERVER_URL=https://api.openai.com/v1
LLM_SERVER_KEY=your_openai_api_key
LLM_SERVER_MODEL=                                # Leave empty, models are specified in config
LLM_SERVER_CONFIG_PATH=/opt/pentagi/conf/custom-openai.provider.yml
LLM_SERVER_LEGACY_REASONING=true                 # Required for OpenAI reasoning format
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This configuration uses the pre-built &lt;code&gt;custom-openai.provider.yml&lt;/code&gt; file that maps all agent types to models available for unverified organizations, using &lt;code&gt;o3-mini&lt;/code&gt; instead of models like &lt;code&gt;o1&lt;/code&gt;, &lt;code&gt;o3&lt;/code&gt;, and &lt;code&gt;o4-mini&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can test this configuration using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Test with custom OpenAI configuration for unverified accounts
docker run --rm \
  -v $(pwd)/.env:/opt/pentagi/.env \
  vxcontrol/pentagi /opt/pentagi/bin/ctester -config /opt/pentagi/conf/custom-openai.provider.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The &lt;code&gt;LLM_SERVER_LEGACY_REASONING=true&lt;/code&gt; setting is crucial for OpenAI compatibility as it ensures reasoning parameters are sent in the format expected by OpenAI's API.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Running Tests in a Production Environment&lt;/h4&gt; 
&lt;p&gt;If you already have a running PentAGI container and want to test the current configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run ctester in an existing container using current environment variables
docker exec -it pentagi /opt/pentagi/bin/ctester -verbose

# Test specific agent types with deterministic ordering
docker exec -it pentagi /opt/pentagi/bin/ctester -agents simple,primary_agent,pentester -groups basic,knowledge -verbose

# Generate a report file inside the container
docker exec -it pentagi /opt/pentagi/bin/ctester -report /opt/pentagi/data/agent-test-report.md

# Access the report from the host
docker cp pentagi:/opt/pentagi/data/agent-test-report.md ./
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Command-line Options&lt;/h3&gt; 
&lt;p&gt;The utility accepts several options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-env &amp;lt;path&amp;gt;&lt;/code&gt; - Path to environment file (default: &lt;code&gt;.env&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-type &amp;lt;provider&amp;gt;&lt;/code&gt; - Provider type: &lt;code&gt;custom&lt;/code&gt;, &lt;code&gt;openai&lt;/code&gt;, &lt;code&gt;anthropic&lt;/code&gt;, &lt;code&gt;ollama&lt;/code&gt;, &lt;code&gt;bedrock&lt;/code&gt;, &lt;code&gt;gemini&lt;/code&gt; (default: &lt;code&gt;custom&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-config &amp;lt;path&amp;gt;&lt;/code&gt; - Path to custom provider config (default: from &lt;code&gt;LLM_SERVER_CONFIG_PATH&lt;/code&gt; env variable)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-tests &amp;lt;path&amp;gt;&lt;/code&gt; - Path to custom tests YAML file (optional)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-report &amp;lt;path&amp;gt;&lt;/code&gt; - Path to write the report file (optional)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-agents &amp;lt;list&amp;gt;&lt;/code&gt; - Comma-separated list of agent types to test (default: &lt;code&gt;all&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-groups &amp;lt;list&amp;gt;&lt;/code&gt; - Comma-separated list of test groups to run (default: &lt;code&gt;all&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-verbose&lt;/code&gt; - Enable verbose output with detailed test results for each agent&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Available Agent Types&lt;/h3&gt; 
&lt;p&gt;Agents are tested in the following deterministic order:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;simple&lt;/strong&gt; - Basic completion tasks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;simple_json&lt;/strong&gt; - JSON-structured responses&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;primary_agent&lt;/strong&gt; - Main reasoning agent&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;assistant&lt;/strong&gt; - Interactive assistant mode&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;generator&lt;/strong&gt; - Content generation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;refiner&lt;/strong&gt; - Content refinement and improvement&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;adviser&lt;/strong&gt; - Expert advice and consultation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;reflector&lt;/strong&gt; - Self-reflection and analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;searcher&lt;/strong&gt; - Information gathering and search&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;enricher&lt;/strong&gt; - Data enrichment and expansion&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;coder&lt;/strong&gt; - Code generation and analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;installer&lt;/strong&gt; - Installation and setup tasks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;pentester&lt;/strong&gt; - Penetration testing and security assessment&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Available Test Groups&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;basic&lt;/strong&gt; - Fundamental completion and prompt response tests&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;advanced&lt;/strong&gt; - Complex reasoning and function calling tests&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;json&lt;/strong&gt; - JSON format validation and structure tests (specifically designed for &lt;code&gt;simple_json&lt;/code&gt; agent)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;knowledge&lt;/strong&gt; - Domain-specific cybersecurity and penetration testing knowledge tests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;json&lt;/code&gt; test group is specifically designed for the &lt;code&gt;simple_json&lt;/code&gt; agent type, while all other agents are tested with &lt;code&gt;basic&lt;/code&gt;, &lt;code&gt;advanced&lt;/code&gt;, and &lt;code&gt;knowledge&lt;/code&gt; groups. This specialization ensures optimal testing coverage for each agent's intended purpose.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Example Provider Configuration&lt;/h3&gt; 
&lt;p&gt;Provider configuration defines which models to use for different agent types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;simple:
  model: "provider/model-name"
  temperature: 0.7
  top_p: 0.95
  n: 1
  max_tokens: 4000

simple_json:
  model: "provider/model-name"
  temperature: 0.7
  top_p: 1.0
  n: 1
  max_tokens: 4000
  json: true

# ... other agent types ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Optimization Workflow&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Create a baseline&lt;/strong&gt;: Run tests with default configuration to establish benchmark performance&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Analyze agent-specific performance&lt;/strong&gt;: Review the deterministic agent ordering to identify underperforming agents&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Test specialized configurations&lt;/strong&gt;: Experiment with different models for each agent type using provider-specific configs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Focus on domain knowledge&lt;/strong&gt;: Pay special attention to knowledge group tests for cybersecurity expertise&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Validate function calling&lt;/strong&gt;: Ensure tool-based tests pass consistently for critical agent types&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Compare results&lt;/strong&gt;: Look for the best success rate and performance across all test groups&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Deploy optimal configuration&lt;/strong&gt;: Use in production with your optimized setup&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This tool helps ensure your AI agents are using the most effective models for their specific tasks, improving reliability while optimizing costs.&lt;/p&gt; 
&lt;h2&gt;🧮 Embedding Configuration and Testing&lt;/h2&gt; 
&lt;p&gt;PentAGI uses vector embeddings for semantic search, knowledge storage, and memory management. The system supports multiple embedding providers that can be configured according to your needs and preferences.&lt;/p&gt; 
&lt;h3&gt;Supported Embedding Providers&lt;/h3&gt; 
&lt;p&gt;PentAGI supports the following embedding providers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;OpenAI&lt;/strong&gt; (default): Uses OpenAI's text embedding models&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ollama&lt;/strong&gt;: Local embedding model through Ollama&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mistral&lt;/strong&gt;: Mistral AI's embedding models&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jina&lt;/strong&gt;: Jina AI's embedding service&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HuggingFace&lt;/strong&gt;: Models from HuggingFace&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GoogleAI&lt;/strong&gt;: Google's embedding models&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;VoyageAI&lt;/strong&gt;: VoyageAI's embedding models&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Embedding Provider Configuration&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;h3&gt;Environment Variables&lt;/h3&gt; 
 &lt;p&gt;To configure the embedding provider, set the following environment variables in your &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Primary embedding configuration
EMBEDDING_PROVIDER=openai       # Provider type (openai, ollama, mistral, jina, huggingface, googleai, voyageai)
EMBEDDING_MODEL=text-embedding-3-small  # Model name to use
EMBEDDING_URL=                  # Optional custom API endpoint
EMBEDDING_KEY=                  # API key for the provider (if required)
EMBEDDING_BATCH_SIZE=100        # Number of documents to process in a batch
EMBEDDING_STRIP_NEW_LINES=true  # Whether to remove new lines from text before embedding

# Advanced settings
PROXY_URL=                      # Optional proxy for all API calls
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Provider-Specific Limitations&lt;/h3&gt; 
 &lt;p&gt;Each provider has specific limitations and supported features:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;: Supports all configuration options&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Ollama&lt;/strong&gt;: Does not support &lt;code&gt;EMBEDDING_KEY&lt;/code&gt; as it uses local models&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Mistral&lt;/strong&gt;: Does not support &lt;code&gt;EMBEDDING_MODEL&lt;/code&gt; or custom HTTP client&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Jina&lt;/strong&gt;: Does not support custom HTTP client&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;HuggingFace&lt;/strong&gt;: Requires &lt;code&gt;EMBEDDING_KEY&lt;/code&gt; and supports all other options&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;GoogleAI&lt;/strong&gt;: Does not support &lt;code&gt;EMBEDDING_URL&lt;/code&gt;, requires &lt;code&gt;EMBEDDING_KEY&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;VoyageAI&lt;/strong&gt;: Supports all configuration options&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;If &lt;code&gt;EMBEDDING_URL&lt;/code&gt; and &lt;code&gt;EMBEDDING_KEY&lt;/code&gt; are not specified, the system will attempt to use the corresponding LLM provider settings (e.g., &lt;code&gt;OPEN_AI_KEY&lt;/code&gt; when &lt;code&gt;EMBEDDING_PROVIDER=openai&lt;/code&gt;).&lt;/p&gt; 
 &lt;h3&gt;Why Consistent Embedding Providers Matter&lt;/h3&gt; 
 &lt;p&gt;It's crucial to use the same embedding provider consistently because:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;Vector Compatibility&lt;/strong&gt;: Different providers produce vectors with different dimensions and mathematical properties&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Semantic Consistency&lt;/strong&gt;: Changing providers can break semantic similarity between previously embedded documents&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Memory Corruption&lt;/strong&gt;: Mixed embeddings can lead to poor search results and broken knowledge base functionality&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;If you change your embedding provider, you should flush and reindex your entire knowledge base (see &lt;code&gt;etester&lt;/code&gt; utility below).&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Embedding Tester Utility (etester)&lt;/h3&gt; 
&lt;p&gt;PentAGI includes a specialized &lt;code&gt;etester&lt;/code&gt; utility for testing, managing, and debugging embedding functionality. This tool is essential for diagnosing and resolving issues related to vector embeddings and knowledge storage.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Etester Commands&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Test embedding provider and database connection
cd backend
go run cmd/etester/main.go test -verbose

# Show statistics about the embedding database
go run cmd/etester/main.go info

# Delete all documents from the embedding database (use with caution!)
go run cmd/etester/main.go flush

# Recalculate embeddings for all documents (after changing provider)
go run cmd/etester/main.go reindex

# Search for documents in the embedding database
go run cmd/etester/main.go search -query "How to install PostgreSQL" -limit 5
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Using Docker&lt;/h3&gt; 
 &lt;p&gt;If you're running PentAGI in Docker, you can use etester from within the container:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Test embedding provider
docker exec -it pentagi /opt/pentagi/bin/etester test

# Show detailed database information
docker exec -it pentagi /opt/pentagi/bin/etester info -verbose
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Advanced Search Options&lt;/h3&gt; 
 &lt;p&gt;The &lt;code&gt;search&lt;/code&gt; command supports various filters to narrow down results:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Filter by document type
docker exec -it pentagi /opt/pentagi/bin/etester search -query "Security vulnerability" -doc_type guide -threshold 0.8

# Filter by flow ID
docker exec -it pentagi /opt/pentagi/bin/etester search -query "Code examples" -doc_type code -flow_id 42

# All available search options
docker exec -it pentagi /opt/pentagi/bin/etester search -help
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Available search parameters:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;-query STRING&lt;/code&gt;: Search query text (required)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;-doc_type STRING&lt;/code&gt;: Filter by document type (answer, memory, guide, code)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;-flow_id NUMBER&lt;/code&gt;: Filter by flow ID (positive number)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;-answer_type STRING&lt;/code&gt;: Filter by answer type (guide, vulnerability, code, tool, other)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;-guide_type STRING&lt;/code&gt;: Filter by guide type (install, configure, use, pentest, development, other)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;-limit NUMBER&lt;/code&gt;: Maximum number of results (default: 3)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;-threshold NUMBER&lt;/code&gt;: Similarity threshold (0.0-1.0, default: 0.7)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Common Troubleshooting Scenarios&lt;/h3&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;After changing embedding provider&lt;/strong&gt;: Always run &lt;code&gt;flush&lt;/code&gt; or &lt;code&gt;reindex&lt;/code&gt; to ensure consistency&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Poor search results&lt;/strong&gt;: Try adjusting the similarity threshold or check if embeddings are correctly generated&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Database connection issues&lt;/strong&gt;: Verify PostgreSQL is running with pgvector extension installed&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Missing API keys&lt;/strong&gt;: Check environment variables for your chosen embedding provider&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h2&gt;🔍 Function Testing with ftester&lt;/h2&gt; 
&lt;p&gt;PentAGI includes a versatile utility called &lt;code&gt;ftester&lt;/code&gt; for debugging, testing, and developing specific functions and AI agent behaviors. While &lt;code&gt;ctester&lt;/code&gt; focuses on testing LLM model capabilities, &lt;code&gt;ftester&lt;/code&gt; allows you to directly invoke individual system functions and AI agent components with precise control over execution context.&lt;/p&gt; 
&lt;h3&gt;Key Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Direct Function Access&lt;/strong&gt;: Test individual functions without running the entire system&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mock Mode&lt;/strong&gt;: Test functions without a live PentAGI deployment using built-in mocks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Interactive Input&lt;/strong&gt;: Fill function arguments interactively for exploratory testing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Detailed Output&lt;/strong&gt;: Color-coded terminal output with formatted responses and errors&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Context-Aware Testing&lt;/strong&gt;: Debug AI agents within the context of specific flows, tasks, and subtasks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Observability Integration&lt;/strong&gt;: All function calls are logged to Langfuse and Observability stack&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Usage Modes&lt;/h3&gt; 
&lt;h4&gt;Command Line Arguments&lt;/h4&gt; 
&lt;p&gt;Run ftester with specific function and arguments directly from the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Basic usage with mock mode
cd backend
go run cmd/ftester/main.go [function_name] -[arg1] [value1] -[arg2] [value2]

# Example: Test terminal command in mock mode
go run cmd/ftester/main.go terminal -command "ls -la" -message "List files"

# Using a real flow context
go run cmd/ftester/main.go -flow 123 terminal -command "whoami" -message "Check user"

# Testing AI agent in specific task/subtask context
go run cmd/ftester/main.go -flow 123 -task 456 -subtask 789 pentester -message "Find vulnerabilities"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Interactive Mode&lt;/h4&gt; 
&lt;p&gt;Run ftester without arguments for a guided interactive experience:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start interactive mode
go run cmd/ftester/main.go [function_name]

# For example, to interactively fill browser tool arguments
go run cmd/ftester/main.go browser
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Available Functions&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;h3&gt;Environment Functions&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;terminal&lt;/strong&gt;: Execute commands in a container and return the output&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;file&lt;/strong&gt;: Perform file operations (read, write, list) in a container&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Search Functions&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;browser&lt;/strong&gt;: Access websites and capture screenshots&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;google&lt;/strong&gt;: Search the web using Google Custom Search&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;duckduckgo&lt;/strong&gt;: Search the web using DuckDuckGo&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;tavily&lt;/strong&gt;: Search using Tavily AI search engine&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;traversaal&lt;/strong&gt;: Search using Traversaal AI search engine&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;perplexity&lt;/strong&gt;: Search using Perplexity AI&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;searxng&lt;/strong&gt;: Search using Searxng meta search engine (aggregates results from multiple engines)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Vector Database Functions&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;search_in_memory&lt;/strong&gt;: Search for information in vector database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;search_guide&lt;/strong&gt;: Find guidance documents in vector database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;search_answer&lt;/strong&gt;: Find answers to questions in vector database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;search_code&lt;/strong&gt;: Find code examples in vector database&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;AI Agent Functions&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;advice&lt;/strong&gt;: Get expert advice from an AI agent&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;coder&lt;/strong&gt;: Request code generation or modification&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;maintenance&lt;/strong&gt;: Run system maintenance tasks&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;memorist&lt;/strong&gt;: Store and organize information in vector database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;pentester&lt;/strong&gt;: Perform security tests and vulnerability analysis&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;search&lt;/strong&gt;: Complex search across multiple sources&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Utility Functions&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;describe&lt;/strong&gt;: Show information about flows, tasks, and subtasks&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Debugging Flow Context&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;p&gt;The &lt;code&gt;describe&lt;/code&gt; function provides detailed information about tasks and subtasks within a flow. This is particularly useful for diagnosing issues when PentAGI encounters problems or gets stuck.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# List all flows in the system
go run cmd/ftester/main.go describe

# Show all tasks and subtasks for a specific flow
go run cmd/ftester/main.go -flow 123 describe

# Show detailed information for a specific task
go run cmd/ftester/main.go -flow 123 -task 456 describe

# Show detailed information for a specific subtask
go run cmd/ftester/main.go -flow 123 -task 456 -subtask 789 describe

# Show verbose output with full descriptions and results
go run cmd/ftester/main.go -flow 123 describe -verbose
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This function allows you to identify the exact point where a flow might be stuck and resume processing by directly invoking the appropriate agent function.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Function Help and Discovery&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;p&gt;Each function has a help mode that shows available parameters:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Get help for a specific function
go run cmd/ftester/main.go [function_name] -help

# Examples:
go run cmd/ftester/main.go terminal -help
go run cmd/ftester/main.go browser -help
go run cmd/ftester/main.go describe -help
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can also run ftester without arguments to see a list of all available functions:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;go run cmd/ftester/main.go
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Output Format&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;p&gt;The &lt;code&gt;ftester&lt;/code&gt; utility uses color-coded output to make interpretation easier:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Blue headers&lt;/strong&gt;: Section titles and key names&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Cyan [INFO]&lt;/strong&gt;: General information messages&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Green [SUCCESS]&lt;/strong&gt;: Successful operations&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Red [ERROR]&lt;/strong&gt;: Error messages&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Yellow [WARNING]&lt;/strong&gt;: Warning messages&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Yellow [MOCK]&lt;/strong&gt;: Indicates mock mode operation&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Magenta values&lt;/strong&gt;: Function arguments and results&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;JSON and Markdown responses are automatically formatted for readability.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Advanced Usage Scenarios&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;h3&gt;Debugging Stuck AI Flows&lt;/h3&gt; 
 &lt;p&gt;When PentAGI gets stuck in a flow:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Pause the flow through the UI&lt;/li&gt; 
  &lt;li&gt;Use &lt;code&gt;describe&lt;/code&gt; to identify the current task and subtask&lt;/li&gt; 
  &lt;li&gt;Directly invoke the agent function with the same task/subtask IDs&lt;/li&gt; 
  &lt;li&gt;Examine the detailed output to identify the issue&lt;/li&gt; 
  &lt;li&gt;Resume the flow or manually intervene as needed&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h3&gt;Testing Environment Variables&lt;/h3&gt; 
 &lt;p&gt;Verify that API keys and external services are configured correctly:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Test Google search API configuration
go run cmd/ftester/main.go google -query "pentesting tools"

# Test browser access to external websites
go run cmd/ftester/main.go browser -url "https://example.com"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Developing New AI Agent Behaviors&lt;/h3&gt; 
 &lt;p&gt;When developing new prompt templates or agent behaviors:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a test flow in the UI&lt;/li&gt; 
  &lt;li&gt;Use ftester to directly invoke the agent with different prompts&lt;/li&gt; 
  &lt;li&gt;Observe responses and adjust prompts accordingly&lt;/li&gt; 
  &lt;li&gt;Check Langfuse for detailed traces of all function calls&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h3&gt;Verifying Docker Container Setup&lt;/h3&gt; 
 &lt;p&gt;Ensure containers are properly configured:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;go run cmd/ftester/main.go -flow 123 terminal -command "env | grep -i proxy" -message "Check proxy settings"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Docker Container Usage&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;p&gt;If you have PentAGI running in Docker, you can use ftester from within the container:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Run ftester inside the running PentAGI container
docker exec -it pentagi /opt/pentagi/bin/ftester [arguments]

# Examples:
docker exec -it pentagi /opt/pentagi/bin/ftester -flow 123 describe
docker exec -it pentagi /opt/pentagi/bin/ftester -flow 123 terminal -command "ps aux" -message "List processes"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This is particularly useful for production deployments where you don't have a local development environment.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Integration with Observability Tools&lt;/b&gt; (click to expand)&lt;/summary&gt; 
 &lt;p&gt;All function calls made through ftester are logged to:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;Langfuse&lt;/strong&gt;: Captures the entire AI agent interaction chain, including prompts, responses, and function calls&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;: Records metrics, traces, and logs for system performance analysis&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Terminal Output&lt;/strong&gt;: Provides immediate feedback on function execution&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;To access detailed logs:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check Langfuse UI for AI agent traces (typically at &lt;code&gt;http://localhost:4000&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;Use Grafana dashboards for system metrics (typically at &lt;code&gt;http://localhost:3000&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;Examine terminal output for immediate function results and errors&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;Command-line Options&lt;/h3&gt; 
&lt;p&gt;The main utility accepts several options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-env &amp;lt;path&amp;gt;&lt;/code&gt; - Path to environment file (optional, default: &lt;code&gt;.env&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-provider &amp;lt;type&amp;gt;&lt;/code&gt; - Provider type to use (default: &lt;code&gt;custom&lt;/code&gt;, options: &lt;code&gt;openai&lt;/code&gt;, &lt;code&gt;anthropic&lt;/code&gt;, &lt;code&gt;ollama&lt;/code&gt;, &lt;code&gt;bedrock&lt;/code&gt;, &lt;code&gt;gemini&lt;/code&gt;, &lt;code&gt;custom&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-flow &amp;lt;id&amp;gt;&lt;/code&gt; - Flow ID for testing (0 means using mocks, default: &lt;code&gt;0&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-task &amp;lt;id&amp;gt;&lt;/code&gt; - Task ID for agent context (optional)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-subtask &amp;lt;id&amp;gt;&lt;/code&gt; - Subtask ID for agent context (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Function-specific arguments are passed after the function name using &lt;code&gt;-name value&lt;/code&gt; format.&lt;/p&gt; 
&lt;h2&gt;🏗️ Building&lt;/h2&gt; 
&lt;h3&gt;Building Docker Image&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker build -t local/pentagi:latest .
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You can use &lt;code&gt;docker buildx&lt;/code&gt; to build the image for different platforms like a &lt;code&gt;docker buildx build --platform linux/amd64 -t local/pentagi:latest .&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;You need to change image name in docker-compose.yml file to &lt;code&gt;local/pentagi:latest&lt;/code&gt; and run &lt;code&gt;docker compose up -d&lt;/code&gt; to start the server or use &lt;code&gt;build&lt;/code&gt; key option in &lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt; file.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;👏 Credits&lt;/h2&gt; 
&lt;p&gt;This project is made possible thanks to the following research and developments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://lilianweng.github.io/posts/2023-06-23-agent"&gt;Emerging Architectures for LLM Applications&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://arxiv.org/abs/2403.08299"&gt;A Survey of Autonomous LLM Agents&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📄 License&lt;/h2&gt; 
&lt;h3&gt;PentAGI Core License&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;PentAGI Core&lt;/strong&gt;: Licensed under &lt;a href="https://raw.githubusercontent.com/vxcontrol/pentagi/master/LICENSE"&gt;MIT License&lt;/a&gt;&lt;br /&gt; Copyright (c) 2025 PentAGI Development Team&lt;/p&gt; 
&lt;h3&gt;VXControl Cloud SDK Integration&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;VXControl Cloud SDK Integration&lt;/strong&gt;: This repository integrates &lt;a href="https://github.com/vxcontrol/cloud"&gt;VXControl Cloud SDK&lt;/a&gt; under a &lt;strong&gt;special licensing exception&lt;/strong&gt; that applies &lt;strong&gt;ONLY&lt;/strong&gt; to the official PentAGI project.&lt;/p&gt; 
&lt;h4&gt;✅ Official PentAGI Project&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;This official repository: &lt;code&gt;https://github.com/vxcontrol/pentagi&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Official releases distributed by VXControl LLC&lt;/li&gt; 
 &lt;li&gt;Code used under direct authorization from VXControl LLC&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;⚠️ Important for Forks and Third-Party Use&lt;/h4&gt; 
&lt;p&gt;If you fork this project or create derivative works, the VXControl SDK components are subject to &lt;strong&gt;AGPL-3.0&lt;/strong&gt; license terms. You must either:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Remove VXControl SDK integration&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open source your entire application&lt;/strong&gt; (comply with AGPL-3.0 copyleft terms)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Obtain a commercial license&lt;/strong&gt; from VXControl LLC&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Commercial Licensing&lt;/h4&gt; 
&lt;p&gt;For commercial use of VXControl Cloud SDK in proprietary applications, contact:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt;: &lt;a href="mailto:info@vxcontrol.com"&gt;info@vxcontrol.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Subject&lt;/strong&gt;: "VXControl Cloud SDK Commercial License"&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>