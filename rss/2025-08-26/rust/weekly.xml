<rss version="2.0">
  <channel>
    <title>GitHub Rust Weekly Trending</title>
    <description>Weekly Trending of Rust in GitHub</description>
    <pubDate>Mon, 25 Aug 2025 01:48:37 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>BurntSushi/ripgrep</title>
      <link>https://github.com/BurntSushi/ripgrep</link>
      <description>&lt;p&gt;ripgrep recursively searches directories for a regex pattern while respecting your gitignore&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ripgrep (rg)&lt;/h2&gt; 
&lt;p&gt;ripgrep is a line-oriented search tool that recursively searches the current directory for a regex pattern. By default, ripgrep will respect gitignore rules and automatically skip hidden files/directories and binary files. (To disable all automatic filtering by default, use &lt;code&gt;rg -uuu&lt;/code&gt;.) ripgrep has first class support on Windows, macOS and Linux, with binary downloads available for &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;every release&lt;/a&gt;. ripgrep is similar to other popular search tools like The Silver Searcher, ack and grep.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/actions"&gt;&lt;img src="https://github.com/BurntSushi/ripgrep/workflows/ci/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/ripgrep"&gt;&lt;img src="https://img.shields.io/crates/v/ripgrep.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://repology.org/project/ripgrep/badges"&gt;&lt;img src="https://repology.org/badge/tiny-repos/ripgrep.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Dual-licensed under MIT or the &lt;a href="https://unlicense.org"&gt;UNLICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CHANGELOG&lt;/h3&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt; for a release history.&lt;/p&gt; 
&lt;h3&gt;Documentation quick links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md"&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/regex/1/regex/#syntax"&gt;Regex syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;Configuration files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#complete"&gt;Shell completions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#building"&gt;Building&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#translations"&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Screenshot of search results&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://burntsushi.net/stuff/ripgrep1.png"&gt;&lt;img src="https://burntsushi.net/stuff/ripgrep1.png" alt="A screenshot of a sample search with ripgrep" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Quick examples comparing tools&lt;/h3&gt; 
&lt;p&gt;This example searches the entire &lt;a href="https://github.com/BurntSushi/linux"&gt;Linux kernel source tree&lt;/a&gt; (after running &lt;code&gt;make defconfig &amp;amp;&amp;amp; make -j8&lt;/code&gt;) for &lt;code&gt;[A-Z]+_SUSPEND&lt;/code&gt;, where all matches must be words. Timings were collected on a system with an Intel i9-12900K 5.2 GHz.&lt;/p&gt; 
&lt;p&gt;Please remember that a single benchmark is never enough! See my &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;blog post on ripgrep&lt;/a&gt; for a very detailed comparison with more benchmarks and analysis.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.082s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/p-ranav/hypergrep"&gt;hypergrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hgrep -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.167s (2.04x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;git grep -P -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.273s (3.34x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;The Silver Searcher&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ag -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;534&lt;/td&gt; 
   &lt;td&gt;0.443s (5.43x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r --ignore-files --no-hidden -I -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.639s (7.82x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.727s (8.91x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;2.670s (32.70x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/beyondgrep/ack3"&gt;ack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ack -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;2677&lt;/td&gt; 
   &lt;td&gt;2.935s (35.94x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Here's another benchmark on the same corpus as above that disregards gitignore files and searches with a whitelist instead. The corpus is the same as in the previous benchmark, and the flags passed to each command ensure that they are doing equivalent work:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -uuu -tc -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.063s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.607s (9.62x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grep -E -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.674s (10.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Now we'll move to searching on single large file. Here is a straight-up comparison between ripgrep, ugrep and GNU grep on a file cached in memory (~13GB, &lt;a href="http://opus.nlpl.eu/download.php?f=OpenSubtitles/v2018/mono/OpenSubtitles.raw.en.gz"&gt;&lt;code&gt;OpenSubtitles.raw.en.gz&lt;/code&gt;&lt;/a&gt;, decompressed):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.042s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;1.339s (1.28x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 egrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;6.577s (6.31x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;In the above benchmark, passing the &lt;code&gt;-n&lt;/code&gt; flag (for showing line numbers) increases the times to &lt;code&gt;1.664s&lt;/code&gt; for ripgrep and &lt;code&gt;9.484s&lt;/code&gt; for GNU grep. ugrep times are unaffected by the presence or absence of &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Beware of performance cliffs though:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.053s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;6.234s (5.92x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;28.973s (27.51x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;And performance can drop precipitously across the board when searching big files for patterns without any opportunities for literal optimizations:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;15.569s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;21.857s (1.40x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;32.409s (2.08x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6795&lt;/td&gt; 
   &lt;td&gt;8m30s (32.74x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Finally, high match counts also tend to both tank performance and smooth out the differences between tools (because performance is dominated by how quickly one can handle a match and not the algorithm used to detect the match, generally speaking):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;6.948s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;11.721s (1.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;15.217s (2.19x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Why should I use ripgrep?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;It can replace many use cases served by other search tools because it contains most of their features and is generally faster. (See &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#posix4ever"&gt;the FAQ&lt;/a&gt; for more details on whether ripgrep can truly replace grep.)&lt;/li&gt; 
 &lt;li&gt;Like other tools specialized to code search, ripgrep defaults to &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#recursive-search"&gt;recursive search&lt;/a&gt; and does &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#automatic-filtering"&gt;automatic filtering&lt;/a&gt;. Namely, ripgrep won't search files ignored by your &lt;code&gt;.gitignore&lt;/code&gt;/&lt;code&gt;.ignore&lt;/code&gt;/&lt;code&gt;.rgignore&lt;/code&gt; files, it won't search hidden files and it won't search binary files. Automatic filtering can be disabled with &lt;code&gt;rg -uuu&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;ripgrep can &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#manual-filtering-file-types"&gt;search specific types of files&lt;/a&gt;. For example, &lt;code&gt;rg -tpy foo&lt;/code&gt; limits your search to Python files and &lt;code&gt;rg -Tjs foo&lt;/code&gt; excludes JavaScript files from your search. ripgrep can be taught about new file types with custom matching rules.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports many features found in &lt;code&gt;grep&lt;/code&gt;, such as showing the context of search results, searching multiple patterns, highlighting matches with color and full Unicode support. Unlike GNU grep, ripgrep stays fast while supporting Unicode (which is always on).&lt;/li&gt; 
 &lt;li&gt;ripgrep has optional support for switching its regex engine to use PCRE2. Among other things, this makes it possible to use look-around and backreferences in your patterns, which are not supported in ripgrep's default regex engine. PCRE2 support can be enabled with &lt;code&gt;-P/--pcre2&lt;/code&gt; (use PCRE2 always) or &lt;code&gt;--auto-hybrid-regex&lt;/code&gt; (use PCRE2 only if needed). An alternative syntax is provided via the &lt;code&gt;--engine (default|pcre2|auto)&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;ripgrep has &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#replacements"&gt;rudimentary support for replacements&lt;/a&gt;, which permit rewriting output based on what was matched.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#file-encoding"&gt;searching files in text encodings&lt;/a&gt; other than UTF-8, such as UTF-16, latin-1, GBK, EUC-JP, Shift_JIS and more. (Some support for automatically detecting UTF-16 is provided. Other text encodings must be specifically specified with the &lt;code&gt;-E/--encoding&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;ripgrep supports searching files compressed in a common format (brotli, bzip2, gzip, lz4, lzma, xz, or zstandard) with the &lt;code&gt;-z/--search-zip&lt;/code&gt; flag.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#preprocessor"&gt;arbitrary input preprocessing filters&lt;/a&gt; which could be PDF text extraction, less supported decompression, decrypting, automatic encoding detection and so on.&lt;/li&gt; 
 &lt;li&gt;ripgrep can be configured via a &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;configuration file&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In other words, use ripgrep if you like speed, filtering by default, fewer bugs and Unicode support.&lt;/p&gt; 
&lt;h3&gt;Why shouldn't I use ripgrep?&lt;/h3&gt; 
&lt;p&gt;Despite initially not wanting to add every feature under the sun to ripgrep, over time, ripgrep has grown support for most features found in other file searching tools. This includes searching for results spanning across multiple lines, and opt-in support for PCRE2, which provides look-around and backreference support.&lt;/p&gt; 
&lt;p&gt;At this point, the primary reasons not to use ripgrep probably consist of one or more of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need a portable and ubiquitous tool. While ripgrep works on Windows, macOS and Linux, it is not ubiquitous and it does not conform to any standard such as POSIX. The best tool for this job is good old grep.&lt;/li&gt; 
 &lt;li&gt;There still exists some other feature (or bug) not listed in this README that you rely on that's in another tool that isn't in ripgrep.&lt;/li&gt; 
 &lt;li&gt;There is a performance edge case where ripgrep doesn't do well where another tool does do well. (Please file a bug report!)&lt;/li&gt; 
 &lt;li&gt;ripgrep isn't possible to install on your machine or isn't available for your platform. (Please file a bug report!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Is it really faster than everything else?&lt;/h3&gt; 
&lt;p&gt;Generally, yes. A large number of benchmarks with detailed analysis for each is &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;available on my blog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Summarizing, ripgrep is fast because:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is built on top of &lt;a href="https://github.com/rust-lang/regex"&gt;Rust's regex engine&lt;/a&gt;. Rust's regex engine uses finite automata, SIMD and aggressive literal optimizations to make searching very fast. (PCRE2 support can be opted into with the &lt;code&gt;-P/--pcre2&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;Rust's regex library maintains performance with full Unicode support by building UTF-8 decoding directly into its deterministic finite automaton engine.&lt;/li&gt; 
 &lt;li&gt;It supports searching with either memory maps or by searching incrementally with an intermediate buffer. The former is better for single files and the latter is better for large directories. ripgrep chooses the best searching strategy for you automatically.&lt;/li&gt; 
 &lt;li&gt;Applies your ignore patterns in &lt;code&gt;.gitignore&lt;/code&gt; files using a &lt;a href="https://docs.rs/regex/1/regex/struct.RegexSet.html"&gt;&lt;code&gt;RegexSet&lt;/code&gt;&lt;/a&gt;. That means a single file path can be matched against multiple glob patterns simultaneously.&lt;/li&gt; 
 &lt;li&gt;It uses a lock-free parallel recursive directory iterator, courtesy of &lt;a href="https://docs.rs/crossbeam"&gt;&lt;code&gt;crossbeam&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.rs/ignore"&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature comparison&lt;/h3&gt; 
&lt;p&gt;Andy Lester, author of &lt;a href="https://beyondgrep.com/"&gt;ack&lt;/a&gt;, has published an excellent table comparing the features of ack, ag, git-grep, GNU grep and ripgrep: &lt;a href="https://beyondgrep.com/feature-comparison/"&gt;https://beyondgrep.com/feature-comparison/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Note that ripgrep has grown a few significant new features recently that are not yet present in Andy's table. This includes, but is not limited to, configuration files, passthru, support for searching compressed files, multiline search and opt-in fancy regex support via PCRE2.&lt;/p&gt; 
&lt;h3&gt;Playground&lt;/h3&gt; 
&lt;p&gt;If you'd like to try ripgrep before installing, there's an unofficial &lt;a href="https://codapi.org/ripgrep/"&gt;playground&lt;/a&gt; and an &lt;a href="https://codapi.org/try/ripgrep/"&gt;interactive tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have any questions about these, please open an issue in the &lt;a href="https://github.com/nalgeon/tryxinyminutes"&gt;tutorial repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;The binary name for ripgrep is &lt;code&gt;rg&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;Archives of precompiled binaries for ripgrep are available for Windows, macOS and Linux.&lt;/a&gt;&lt;/strong&gt; Linux and Windows binaries are static executables. Users of platforms not explicitly mentioned below are advised to download one of these archives.&lt;/p&gt; 
&lt;p&gt;If you're a &lt;strong&gt;macOS Homebrew&lt;/strong&gt; or a &lt;strong&gt;Linuxbrew&lt;/strong&gt; user, then you can install ripgrep from homebrew-core:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;MacPorts&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.macports.org/ports.php?by=name&amp;amp;substr=ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo port install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Chocolatey&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://chocolatey.org/packages/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ choco install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Scoop&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/ripgrep.json"&gt;official bucket&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Winget&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/b/BurntSushi/ripgrep"&gt;winget-pkgs&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ winget install BurntSushi.ripgrep.MSVC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Arch Linux&lt;/strong&gt; user, then you can install ripgrep from the official repos:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -S ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Gentoo&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.gentoo.org/packages/sys-apps/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo emerge sys-apps/ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Fedora&lt;/strong&gt; user, you can install ripgrep from official repositories.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;openSUSE&lt;/strong&gt; user, ripgrep is included in &lt;strong&gt;openSUSE Tumbleweed&lt;/strong&gt; and &lt;strong&gt;openSUSE Leap&lt;/strong&gt; since 15.1.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo zypper install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;RHEL/CentOS 7/8&lt;/strong&gt; user, you can install ripgrep from &lt;a href="https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/"&gt;copr&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo yum install -y yum-utils
$ sudo yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo
$ sudo yum install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Nix&lt;/strong&gt; user, you can install ripgrep from &lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/text/ripgrep/default.nix"&gt;nixpkgs&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ nix-env --install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Flox&lt;/strong&gt; user, you can install ripgrep as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ flox install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Guix&lt;/strong&gt; user, you can install ripgrep from the official package collection:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ guix install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Debian&lt;/strong&gt; user (or a user of a Debian derivative like &lt;strong&gt;Ubuntu&lt;/strong&gt;), then ripgrep can be installed using a binary &lt;code&gt;.deb&lt;/code&gt; file provided in each &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;ripgrep release&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ curl -LO https://github.com/BurntSushi/ripgrep/releases/download/14.1.0/ripgrep_14.1.1-1_amd64.deb
$ sudo dpkg -i ripgrep_14.1.1-1_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you run Debian stable, ripgrep is &lt;a href="https://tracker.debian.org/pkg/rust-ripgrep"&gt;officially maintained by Debian&lt;/a&gt;, although its version may be older than the &lt;code&gt;deb&lt;/code&gt; package available in the previous step.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Ubuntu Cosmic (18.10)&lt;/strong&gt; (or newer) user, ripgrep is &lt;a href="https://launchpad.net/ubuntu/+source/rust-ripgrep"&gt;available&lt;/a&gt; using the same packaging as Debian:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(N.B. Various snaps for ripgrep on Ubuntu are also available, but none of them seem to work right and generate a number of very strange bug reports that I don't know how to fix and don't have the time to fix. Therefore, it is no longer a recommended installation option.)&lt;/p&gt; 
&lt;p&gt;If you're an &lt;strong&gt;ALT&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.altlinux.org/en/search?name=ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;FreeBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.freshports.org/textproc/ripgrep/"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkg install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;OpenBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://openports.se/textproc/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ doas pkg_add ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;NetBSD&lt;/strong&gt; user, then you can install ripgrep from &lt;a href="https://pkgsrc.se/textproc/ripgrep"&gt;pkgsrc&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgin install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_64&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/haikuports/haikuports/tree/master/sys-apps/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_gcc2&lt;/strong&gt; user, then you can install ripgrep from the same port as Haiku x86_64 using the x86 secondary architecture build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep_x86
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Void Linux&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://voidlinux.org/packages/?arch=x86_64&amp;amp;q=ripgrep"&gt;official repository&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo xbps-install -Syv ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Rust programmer&lt;/strong&gt;, ripgrep can be installed with &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Note that the minimum supported version of Rust for ripgrep is &lt;strong&gt;1.88.0&lt;/strong&gt;, although ripgrep may work with older versions.&lt;/li&gt; 
 &lt;li&gt;Note that the binary may be bigger than expected because it contains debug symbols. This is intentional. To remove debug symbols and therefore reduce the file size, run &lt;code&gt;strip&lt;/code&gt; on the binary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, one can use &lt;a href="https://github.com/cargo-bins/cargo-binstall"&gt;&lt;code&gt;cargo binstall&lt;/code&gt;&lt;/a&gt; to install a ripgrep binary directly from GitHub:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo binstall ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;ripgrep is written in Rust, so you'll need to grab a &lt;a href="https://www.rust-lang.org/"&gt;Rust installation&lt;/a&gt; in order to compile it. ripgrep compiles with Rust 1.88.0 (stable) or newer. In general, ripgrep tracks the latest stable release of the Rust compiler.&lt;/p&gt; 
&lt;p&gt;To build ripgrep:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/BurntSushi/ripgrep
$ cd ripgrep
$ cargo build --release
$ ./target/release/rg --version
0.1.3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the past, ripgrep supported a &lt;code&gt;simd-accel&lt;/code&gt; Cargo feature when using a Rust nightly compiler. This only benefited UTF-16 transcoding. Since it required unstable features, this build mode was prone to breakage. Because of that, support for it has been removed. If you want SIMD optimizations for UTF-16 transcoding, then you'll have to petition the &lt;a href="https://github.com/hsivonen/encoding_rs"&gt;&lt;code&gt;encoding_rs&lt;/code&gt;&lt;/a&gt; project to use stable APIs.&lt;/p&gt; 
&lt;p&gt;Finally, optional PCRE2 support can be built with ripgrep by enabling the &lt;code&gt;pcre2&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo build --release --features 'pcre2'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enabling the PCRE2 feature works with a stable Rust compiler and will attempt to automatically find and link with your system's PCRE2 library via &lt;code&gt;pkg-config&lt;/code&gt;. If one doesn't exist, then ripgrep will build PCRE2 from source using your system's C compiler and then statically link it into the final executable. Static linking can be forced even when there is an available PCRE2 system library by either building ripgrep with the MUSL target or by setting &lt;code&gt;PCRE2_SYS_STATIC=1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;ripgrep can be built with the MUSL target on Linux by first installing the MUSL library on your system (consult your friendly neighborhood package manager). Then you just need to add MUSL support to your Rust toolchain and rebuild ripgrep, which yields a fully static executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ rustup target add x86_64-unknown-linux-musl
$ cargo build --release --target x86_64-unknown-linux-musl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Applying the &lt;code&gt;--features&lt;/code&gt; flag from above works as expected. If you want to build a static executable with MUSL and with PCRE2, then you will need to have &lt;code&gt;musl-gcc&lt;/code&gt; installed, which might be in a separate package from the actual MUSL library, depending on your Linux distribution.&lt;/p&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;p&gt;ripgrep is relatively well-tested, including both unit tests and integration tests. To run the full test suite, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo test --all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;from the repository root.&lt;/p&gt; 
&lt;h3&gt;Related tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dandavison/delta"&gt;delta&lt;/a&gt; is a syntax highlighting pager that supports the &lt;code&gt;rg --json&lt;/code&gt; output format. So all you need to do to make it work is &lt;code&gt;rg --json pattern | delta&lt;/code&gt;. See &lt;a href="https://dandavison.github.io/delta/grep.html"&gt;delta's manual section on grep&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Vulnerability reporting&lt;/h3&gt; 
&lt;p&gt;For reporting a security vulnerability, please &lt;a href="https://blog.burntsushi.net/about/"&gt;contact Andrew Gallant&lt;/a&gt;. The contact page has my email address and PGP public key if you wish to send an encrypted message.&lt;/p&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;p&gt;The following is a list of known translations of ripgrep's documentation. These are unofficially maintained and may not be up to date.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chinanf-boy/ripgrep-zh#%E6%9B%B4%E6%96%B0-"&gt;Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/UltiRequiem/traducciones/tree/master/ripgrep"&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>librespot-org/librespot</title>
      <link>https://github.com/librespot-org/librespot</link>
      <description>&lt;p&gt;Open Source Spotify client library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/librespot-org/librespot/actions"&gt;&lt;img src="https://github.com/librespot-org/librespot/workflows/build/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;&lt;img src="https://badges.gitter.im/librespot-org/librespot.png" alt="Gitter chat" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/librespot"&gt;&lt;img src="https://img.shields.io/crates/v/librespot.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Current maintainers are &lt;a href="https://github.com/orgs/librespot-org/people"&gt;listed on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;librespot&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;librespot&lt;/em&gt; is an open source client library for Spotify. It enables applications to use Spotify's service to control and play music via various backends, and to act as a Spotify Connect receiver. It is an alternative to the official and &lt;a href="https://pyspotify.mopidy.com/en/latest/#libspotify-s-deprecation"&gt;now deprecated&lt;/a&gt; closed-source &lt;code&gt;libspotify&lt;/code&gt;. Additionally, it will provide extra features which are not available in the official library.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note: librespot only works with Spotify Premium. This will remain the case. We will not support any features to make librespot compatible with free accounts, such as limited skips and adverts.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;We're available on &lt;a href="https://crates.io/crates/librespot"&gt;crates.io&lt;/a&gt; as the &lt;em&gt;librespot&lt;/em&gt; package. Simply run &lt;code&gt;cargo install librespot&lt;/code&gt; to install librespot on your system. Check the wiki for more info and possible &lt;a href="https://github.com/librespot-org/librespot/wiki/Options"&gt;usage options&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;After installation, you can run librespot from the CLI using a command such as &lt;code&gt;librespot -n "Librespot Speaker" -b 160&lt;/code&gt; to create a speaker called &lt;em&gt;Librespot Speaker&lt;/em&gt; serving 160 kbps audio.&lt;/p&gt; 
&lt;h2&gt;This fork&lt;/h2&gt; 
&lt;p&gt;As the origin by &lt;a href="https://github.com/plietar/"&gt;plietar&lt;/a&gt; is no longer actively maintained, this organisation and repository have been set up so that the project may be maintained and upgraded in the future.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Documentation is currently a work in progress, contributions are welcome!&lt;/p&gt; 
&lt;p&gt;There is some brief documentation on how the protocol works in the &lt;a href="https://github.com/librespot-org/librespot/tree/master/docs"&gt;docs&lt;/a&gt; folder.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/librespot-org/librespot/raw/master/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; contains detailed instructions on setting up a development environment, and compiling librespot. More general usage and compilation information is available on the &lt;a href="https://github.com/librespot-org/librespot/wiki"&gt;wiki&lt;/a&gt;. &lt;a href="https://github.com/librespot-org/librespot/raw/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; also contains our contributing guidelines.&lt;/p&gt; 
&lt;p&gt;If you wish to learn more about how librespot works overall, the best way is to simply read the code, and ask any questions you have in our &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;Gitter Room&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Issues &amp;amp; Discussions&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;We have recently started using Github discussions for general questions and feature requests, as they are a more natural medium for such cases, and allow for upvoting to prioritize feature development. Check them out &lt;a href="https://github.com/librespot-org/librespot/discussions"&gt;here&lt;/a&gt;. Bugs and issues with the underlying library should still be reported as issues.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you run into a bug when using librespot, please search the existing issues before opening a new one. Chances are, we've encountered it before, and have provided a resolution. If not, please open a new one, and where possible, include the backtrace librespot generates on crashing, along with anything we can use to reproduce the issue, e.g. the Spotify URI of the song that caused the crash.&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;p&gt;A quick walkthrough of the build process is outlined below, while a detailed compilation guide can be found &lt;a href="https://github.com/librespot-org/librespot/raw/master/COMPILING.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Additional Dependencies&lt;/h2&gt; 
&lt;p&gt;We recently switched to using &lt;a href="https://github.com/tomaka/rodio"&gt;Rodio&lt;/a&gt; for audio playback by default, hence for macOS and Windows, you should just be able to clone and build librespot (with the command below). For Linux, you will need to run the additional commands below, depending on your distro.&lt;/p&gt; 
&lt;p&gt;On Debian/Ubuntu, the following command will install these dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo apt-get install build-essential libasound2-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora systems, the following command will install these dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo dnf install alsa-lib-devel make gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;librespot currently offers the following selection of &lt;a href="https://github.com/librespot-org/librespot/wiki/Audio-Backends"&gt;audio backends&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Rodio (default)
ALSA
GStreamer
PortAudio
PulseAudio
JACK
JACK over Rodio
SDL
Pipe
Subprocess
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please check &lt;a href="https://raw.githubusercontent.com/librespot-org/librespot/dev/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; for detailed information on TLS, audio, and discovery backend dependencies, or the &lt;a href="https://github.com/librespot-org/librespot/wiki/Compiling#general-dependencies"&gt;Compiling&lt;/a&gt; entry on the wiki for additional backend specific dependencies.&lt;/p&gt; 
&lt;p&gt;Once you've installed the dependencies and cloned this repository you can build &lt;em&gt;librespot&lt;/em&gt; with the default features using Cargo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, this builds with native-tls (system TLS), rodio audio backend, and libmdns discovery. See &lt;a href="https://raw.githubusercontent.com/librespot-org/librespot/dev/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; for information on selecting different TLS, audio, and discovery backends.&lt;/p&gt; 
&lt;h1&gt;Packages&lt;/h1&gt; 
&lt;p&gt;librespot is also available via official package system on various operating systems such as Linux, FreeBSD, NetBSD. &lt;a href="https://repology.org/project/librespot/versions"&gt;Repology&lt;/a&gt; offers a good overview.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/librespot/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/librespot.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;A sample program implementing a headless Spotify Connect receiver is provided. Once you've built &lt;em&gt;librespot&lt;/em&gt;, run it using :&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;target/release/librespot --name DEVICENAME
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above is a minimal example. Here is a more fully fledged one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;target/release/librespot -n "Librespot" -b 320 -c ./cache --enable-volume-normalisation --initial-volume 75 --device-type avr
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above command will create a receiver named &lt;code&gt;Librespot&lt;/code&gt;, with bitrate set to 320 kbps, initial volume at 75%, with volume normalisation enabled, and the device displayed in the app as an Audio/Video Receiver. A folder named &lt;code&gt;cache&lt;/code&gt; will be created/used in the current directory, and be used to cache audio data and credentials.&lt;/p&gt; 
&lt;p&gt;A full list of runtime options is available &lt;a href="https://github.com/librespot-org/librespot/wiki/Options"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Please Note: When using the cache feature, an authentication blob is stored for your account in the cache directory. For security purposes, we recommend that you set directory permissions on the cache directory to &lt;code&gt;700&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Come and hang out on gitter if you need help or want to offer some: &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;https://gitter.im/librespot-org/spotify-connect-resources&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;Using this code to connect to Spotify's API is probably forbidden by them. Use at your own risk.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Everything in this repository is licensed under the MIT license.&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;This is a non exhaustive list of projects that either use or have modified librespot. If you'd like to include yours, submit a PR.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/librespot-org/librespot-golang"&gt;librespot-golang&lt;/a&gt; - A golang port of librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcelveldt/plugin.audio.spotify"&gt;plugin.audio.spotify&lt;/a&gt; - A Kodi plugin for Spotify.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dtcooper/raspotify"&gt;raspotify&lt;/a&gt; - A Spotify Connect client that mostly Just Works™&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Spotifyd/spotifyd"&gt;Spotifyd&lt;/a&gt; - A stripped down librespot UNIX daemon.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nicokaiser/rpi-audio-receiver"&gt;rpi-audio-receiver&lt;/a&gt; - easy Raspbian install scripts for Spotifyd, Bluetooth, Shairport and other audio receivers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/badfortrains/spotcontrol"&gt;Spotcontrol&lt;/a&gt; - A golang implementation of a Spotify Connect controller. No Playback functionality.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/devgianlu/librespot-java"&gt;librespot-java&lt;/a&gt; - A Java port of librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hrkfdn/ncspot"&gt;ncspot&lt;/a&gt; - Cross-platform ncurses Spotify client.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xMordax/ansible-role-librespot/tree/master"&gt;ansible-role-librespot&lt;/a&gt; - Ansible role that will build, install and configure Librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xou816/spot"&gt;Spot&lt;/a&gt; - Gtk/Rust native Spotify client for the GNOME desktop.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/badaix/snapcast"&gt;Snapcast&lt;/a&gt; - synchronised multi-room audio player that uses librespot as its source for Spotify content&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mupibox.de/"&gt;MuPiBox&lt;/a&gt; - Portable music box for Spotify and local media based on Raspberry Pi. Operated via touchscreen. Suitable for children and older people.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust-analyzer</title>
      <link>https://github.com/rust-lang/rust-analyzer</link>
      <description>&lt;p&gt;A Rust compiler front-end for IDEs&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rust-lang/rust-analyzer/master/assets/logo-wide.svg?sanitize=true" alt="rust-analyzer logo" /&gt; &lt;/p&gt; 
&lt;p&gt;rust-analyzer is a modular compiler frontend for the Rust language. It is a part of a larger rls-2.0 effort to create excellent IDE support for Rust.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://rust-analyzer.github.io/book/installation.html"&gt;https://rust-analyzer.github.io/book/installation.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;If you want to &lt;strong&gt;contribute&lt;/strong&gt; to rust-analyzer check out the &lt;a href="https://raw.githubusercontent.com/rust-lang/rust-analyzer/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; or if you are just curious about how things work under the hood, see the &lt;a href="https://rust-analyzer.github.io/book/contributing"&gt;Contributing&lt;/a&gt; section of the manual.&lt;/p&gt; 
&lt;p&gt;If you want to &lt;strong&gt;use&lt;/strong&gt; rust-analyzer's language server with your editor of choice, check &lt;a href="https://rust-analyzer.github.io/book/"&gt;the manual&lt;/a&gt;. It also contains some tips &amp;amp; tricks to help you be more productive when using rust-analyzer.&lt;/p&gt; 
&lt;h2&gt;Security and Privacy&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://rust-analyzer.github.io/book/security.html"&gt;security&lt;/a&gt; and &lt;a href="https://rust-analyzer.github.io/book/privacy.html"&gt;privacy&lt;/a&gt; sections of the manual.&lt;/p&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;p&gt;For usage and troubleshooting requests, please use "IDEs and Editors" category of the Rust forum:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://users.rust-lang.org/c/ide/14"&gt;https://users.rust-lang.org/c/ide/14&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For questions about development and implementation, join rust-analyzer working group on Zulip:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer"&gt;https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Quick Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href="https://rust-analyzer.github.io/"&gt;https://rust-analyzer.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Metrics: &lt;a href="https://rust-analyzer.github.io/metrics/"&gt;https://rust-analyzer.github.io/metrics/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;API docs: &lt;a href="https://rust-lang.github.io/rust-analyzer/ide/"&gt;https://rust-lang.github.io/rust-analyzer/ide/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Changelog: &lt;a href="https://rust-analyzer.github.io/thisweek"&gt;https://rust-analyzer.github.io/thisweek&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;rust-analyzer is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; 
&lt;p&gt;See LICENSE-APACHE and LICENSE-MIT for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>0xPlaygrounds/rig</title>
      <link>https://github.com/0xPlaygrounds/rig</link>
      <description>&lt;p&gt;⚙️🦀 Build modular and scalable LLM Applications in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="img/rig-playgrounds-dark.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="img/rig-playgrounds-light.svg" /&gt; 
  &lt;img src="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/img/rig-playgrounds-light.svg?sanitize=true" style="width: 40%; height: 40%;" alt="Rig logo" /&gt; 
 &lt;/picture&gt; &lt;br /&gt; &lt;a href="https://docs.rig.rs"&gt;&lt;img src="https://img.shields.io/badge/📖 docs-rig.rs-dca282.svg" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://docs.rs/rig-core/latest/rig/"&gt;&lt;img src="https://img.shields.io/badge/docs-API Reference-dca282.svg" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://crates.io/crates/rig-core"&gt;&lt;img src="https://img.shields.io/crates/v/rig-core.svg?color=dca282" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://crates.io/crates/rig-core"&gt;&lt;img src="https://img.shields.io/crates/d/rig-core.svg?color=dca282" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://discord.gg/playgrounds"&gt;&lt;img src="https://img.shields.io/discord/511303648119226382?color=%236d82cc&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/0xPlaygrounds/rig"&gt;&lt;img src="https://img.shields.io/github/stars/0xPlaygrounds/rig?style=social" alt="stars - rig" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href=""&gt;&lt;img src="https://img.shields.io/badge/built_with-Rust-dca282.svg?logo=rust" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/Playgrounds0x"&gt;&lt;img src="https://img.shields.io/twitter/follow/Playgrounds0x" /&gt;&lt;/a&gt; &amp;nbsp; &lt;br /&gt; &lt;/p&gt; &amp;nbsp; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://docs.rig.rs"&gt;📑 Docs&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href="https://rig.rs"&gt;🌐 Website&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href="https://github.com/0xPlaygrounds/rig/issues/new"&gt;🤝 Contribute&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href="https://docs.rig.rs/guides"&gt;✍🏽 Blogs&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;✨ If you would like to help spread the word about Rig, please consider starring the repo!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Here be dragons! As we plan to ship a torrent of features in the following months, future updates &lt;strong&gt;will&lt;/strong&gt; contain &lt;strong&gt;breaking changes&lt;/strong&gt;. With Rig evolving, we'll annotate changes and highlight migration paths as we encounter them.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#table-of-contents"&gt;Table of contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#what-is-rig"&gt;What is Rig?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#high-level-features"&gt;High-level features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#who-is-using-rig-in-production"&gt;Who's using Rig in production?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#get-started"&gt;Get Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#simple-example"&gt;Simple example:&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#integrations"&gt;Integrations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is Rig?&lt;/h2&gt; 
&lt;p&gt;Rig is a Rust library for building scalable, modular, and ergonomic &lt;strong&gt;LLM-powered&lt;/strong&gt; applications.&lt;/p&gt; 
&lt;p&gt;More information about this crate can be found in the &lt;a href="https://docs.rig.rs"&gt;official&lt;/a&gt; &amp;amp; &lt;a href="https://docs.rs/rig-core/latest/rig/"&gt;crate&lt;/a&gt; (API Reference) documentations.&lt;/p&gt; 
&lt;h2&gt;High-level features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full support for LLM completion and embedding workflows&lt;/li&gt; 
 &lt;li&gt;Simple but powerful common abstractions over LLM providers (e.g. OpenAI, Cohere) and vector stores (e.g. MongoDB, SQlite, in-memory)&lt;/li&gt; 
 &lt;li&gt;Integrate LLMs in your app with minimal boilerplate&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who is using Rig in production?&lt;/h2&gt; 
&lt;p&gt;Below is a non-exhaustive list of companies and people who are using Rig in production:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/firstbatchxyz/dkn-compute-node"&gt;Dria Compute Node&lt;/a&gt; - a node that serves computation results within the Dria Knowledge Network&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/rust-sdk"&gt;The MCP Rust SDK&lt;/a&gt; - the official Model Context Protocol Rust SDK. Has an example for usage with Rig.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/buger/probe"&gt;Probe&lt;/a&gt; - an AI-friendly, fully local semantic code search tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NethermindEth/nine"&gt;NINE&lt;/a&gt; - Neural Interconnected Nodes Engine, by &lt;a href="https://www.nethermind.io/"&gt;Nethermind.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xPlaygrounds/rig-onchain-kit"&gt;rig-onchain-kit&lt;/a&gt; - the Rig Onchain Kit. Intended to make interactions between Solana/EVM and Rig much easier to implement.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linera-io/linera-protocol"&gt;Linera Protocol&lt;/a&gt; - Decentralized blockchain infrastructure designed for highly scalable, secure, low-latency Web3 applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/piotrostr/listen"&gt;Listen&lt;/a&gt; - A framework aiming to become the go-to framework for AI portfolio management agents. Powers &lt;a href="https://app.listen-rs.com/"&gt;the Listen app.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Are you also using Rig in production? &lt;a href="https://www.github.com/0xPlaygrounds/rig/issues"&gt;Open an issue&lt;/a&gt; to have your name added!&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo add rig-core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Simple example:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use rig::{completion::Prompt, providers::openai};

#[tokio::main]
async fn main() {
    // Create OpenAI client and model
    // This requires the `OPENAI_API_KEY` environment variable to be set.
    let openai_client = openai::Client::from_env();

    let gpt4 = openai_client.agent("gpt-4").build();

    // Prompt the model and print its response
    let response = gpt4
        .prompt("Who are you?")
        .await
        .expect("Failed to prompt GPT-4");

    println!("GPT-4: {response}");
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note using &lt;code&gt;#[tokio::main]&lt;/code&gt; requires you enable tokio's &lt;code&gt;macros&lt;/code&gt; and &lt;code&gt;rt-multi-thread&lt;/code&gt; features or just &lt;code&gt;full&lt;/code&gt; to enable all features (&lt;code&gt;cargo add tokio --features macros,rt-multi-thread&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;You can find more examples each crate's &lt;code&gt;examples&lt;/code&gt; (ie. &lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/rig-core/examples"&gt;&lt;code&gt;rig-core/examples&lt;/code&gt;&lt;/a&gt;) directory. More detailed use cases walkthroughs are regularly published on our &lt;a href="https://dev.to/0thtachi"&gt;Dev.to Blog&lt;/a&gt; and added to Rig's official documentation &lt;a href="http://docs.rig.rs"&gt;(docs.rig.rs)&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Integrations&lt;/h2&gt; 
&lt;p&gt;Vector stores are available as separate companion-crates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MongoDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-mongodb"&gt;&lt;code&gt;rig-mongodb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;LanceDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-lancedb"&gt;&lt;code&gt;rig-lancedb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Neo4j: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-neo4j"&gt;&lt;code&gt;rig-neo4j&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Qdrant: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-qdrant"&gt;&lt;code&gt;rig-qdrant&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SQLite: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-sqlite"&gt;&lt;code&gt;rig-sqlite&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SurrealDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-surrealdb"&gt;&lt;code&gt;rig-surrealdb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Milvus: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-milvus"&gt;&lt;code&gt;rig-milvus&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ScyllaDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-scylladb"&gt;&lt;code&gt;rig-scylladb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;AWS S3Vectors: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-s3vectors"&gt;&lt;code&gt;rig-s3vectors&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following providers are available as separate companion-crates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fastembed: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-fastembed"&gt;&lt;code&gt;rig-fastembed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Eternal AI: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-eternalai"&gt;&lt;code&gt;rig-eternalai&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="center"&gt; &lt;br /&gt; &lt;br /&gt; &lt;img src="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/img/built-by-playgrounds.svg?sanitize=true" alt="Build by Playgrounds" width="30%" /&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>paradedb/paradedb</title>
      <link>https://github.com/paradedb/paradedb</link>
      <description>&lt;p&gt;ParadeDB is a modern Elasticsearch alternative built on Postgres. Built for real-time, update-heavy workloads.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://paradedb.com"&gt;&lt;img src="https://raw.githubusercontent.com/paradedb/paradedb/main/docs/logo/readme.svg?sanitize=true" alt="ParadeDB" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;/h1&gt; 
&lt;p align="center"&gt; &lt;b&gt;Postgres for Search and Analytics&lt;/b&gt;&lt;br /&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt; &lt;a href="https://paradedb.com"&gt;Website&lt;/a&gt; • &lt;a href="https://docs.paradedb.com"&gt;Docs&lt;/a&gt; • &lt;a href="https://join.slack.com/t/paradedbcommunity/shared_invite/zt-32abtyjg4-yoYoi~RPh9MSW8tDbl0BQw"&gt;Community&lt;/a&gt; • &lt;a href="https://paradedb.com/blog/"&gt;Blog&lt;/a&gt; • &lt;a href="https://docs.paradedb.com/changelog/"&gt;Changelog&lt;/a&gt; &lt;/h3&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href="https://artifacthub.io/packages/search?repo=paradedb"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/paradedb" alt="Artifact Hub" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/paradedb/paradedb"&gt;&lt;img src="https://img.shields.io/docker/pulls/paradedb/paradedb" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://github.com/paradedb/paradedb?tab=AGPL-3.0-1-ov-file#readme"&gt;&lt;img src="https://img.shields.io/github/license/paradedb/paradedb?color=blue" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://join.slack.com/t/paradedbcommunity/shared_invite/zt-32abtyjg4-yoYoi~RPh9MSW8tDbl0BQw"&gt;&lt;img src="https://img.shields.io/badge/Join%20Slack-purple?logo=slack&amp;amp;link=https%3A%2F%2Fjoin.slack.com%2Ft%2Fparadedbcommunity%2Fshared_invite%2Fzt-32abtyjg4-yoYoi~RPh9MSW8tDbl0BQw" alt="Slack URL" /&gt;&lt;/a&gt; &lt;a href="https://x.com/paradedb"&gt;&lt;img src="https://img.shields.io/twitter/url?url=https%3A%2F%2Ftwitter.com%2Fparadedb&amp;amp;label=Follow%20%40paradedb" alt="X URL" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://paradedb.com"&gt;ParadeDB&lt;/a&gt; is a modern Elasticsearch alternative built on Postgres. Built for real-time, update-heavy workloads.&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;Please see our &lt;a href="https://docs.paradedb.com"&gt;documentation&lt;/a&gt; to get started. You'll also find our &lt;a href="https://docs.paradedb.com/welcome/architecture"&gt;architecture&lt;/a&gt; docs and &lt;a href="https://docs.paradedb.com/welcome/roadmap"&gt;public roadmap&lt;/a&gt; there.&lt;/p&gt; 
&lt;h2&gt;Deploying ParadeDB&lt;/h2&gt; 
&lt;p&gt;ParadeDB and its extensions can be deployed in one of two ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker image based on &lt;a href="https://hub.docker.com/_/postgres"&gt;Postgres&lt;/a&gt; (&lt;a href="https://docs.paradedb.com/deploy/aws"&gt;see deployment instructions&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Kubernetes Helm chart based on &lt;a href="https://artifacthub.io/packages/helm/cloudnative-pg/cloudnative-pg"&gt;CloudNativePG&lt;/a&gt; (&lt;a href="https://docs.paradedb.com/deploy/helm"&gt;see deployment instructions&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information, including enterprise features and support, please &lt;a href="mailto:sales@paradedb.com"&gt;contact us by email&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Extensions&lt;/h3&gt; 
&lt;p&gt;You can find prebuilt binaries for the ParadeDB Postgres extensions on Debian 11, 12, Ubuntu 22.04 and 24.04, Red Hat Enterprise Linux 8 and 9, and macOS 14 (Sonoma) and 15 (Sequoia) for Postgres 14+ in the &lt;a href="https://github.com/paradedb/paradedb/releases/latest"&gt;GitHub Releases&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;ParadeDB supports all versions supported by the PostgreSQL Global Development Group, which includes PostgreSQL 14+, and you can compile the extensions for other versions of Postgres by following the instructions in the respective extension's README.&lt;/p&gt; 
&lt;h3&gt;Docker Image&lt;/h3&gt; 
&lt;p&gt;To quickly get a ParadeDB instance up and running, simply pull and run the latest Docker image:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --name paradedb -e POSTGRES_PASSWORD=password paradedb/paradedb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will start a ParadeDB instance with default user &lt;code&gt;postgres&lt;/code&gt; and password &lt;code&gt;password&lt;/code&gt;. You can then connect to the database using &lt;code&gt;psql&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker exec -it paradedb psql -U postgres
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install ParadeDB locally or on-premise, we recommend using our &lt;code&gt;docker-compose.yml&lt;/code&gt; file. Alternatively, you can pass the appropriate environment variables to the &lt;code&gt;docker run&lt;/code&gt; command, replacing the &amp;lt;&amp;gt; with your desired values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run \
  --name paradedb \
  -e POSTGRES_USER=&amp;lt;user&amp;gt; \
  -e POSTGRES_PASSWORD=&amp;lt;password&amp;gt; \
  -e POSTGRES_DB=&amp;lt;dbname&amp;gt; \
  -v paradedb_data:/var/lib/postgresql/data/ \
  -p 5432:5432 \
  -d \
  paradedb/paradedb:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will start a ParadeDB instance with non-root user &lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt; and password &lt;code&gt;&amp;lt;password&amp;gt;&lt;/code&gt;. The &lt;code&gt;-v&lt;/code&gt; flag enables your ParadeDB data to persist across restarts in a Docker volume named &lt;code&gt;paradedb_data&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can then connect to the database using &lt;code&gt;psql&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker exec -it paradedb psql -U &amp;lt;user&amp;gt; -d &amp;lt;dbname&amp;gt; -p 5432 -W
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Helm Chart&lt;/h3&gt; 
&lt;p&gt;ParadeDB is also available for Kubernetes via our Helm chart. You can find our Helm chart in the &lt;a href="https://github.com/paradedb/charts"&gt;ParadeDB Helm Chart GitHub repository&lt;/a&gt; or download it directly from &lt;a href="https://artifacthub.io/packages/helm/paradedb/paradedb"&gt;Artifact Hub&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;ParadeDB Cloud&lt;/h3&gt; 
&lt;p&gt;At the moment, ParadeDB is not available as a managed cloud service. If you are interested in a ParadeDB Cloud service, please let us know by joining our &lt;a href="https://form.typeform.com/to/jHkLmIzx"&gt;waitlist&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you're missing a feature or have found a bug, please open a &lt;a href="https://github.com/paradedb/paradedb/issues/new/choose"&gt;GitHub Issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To get community support, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Post a question in the &lt;a href="https://join.slack.com/t/paradedbcommunity/shared_invite/zt-32abtyjg4-yoYoi~RPh9MSW8tDbl0BQw"&gt;ParadeDB Slack Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ask for help on our &lt;a href="https://github.com/paradedb/paradedb/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you need commercial support, please &lt;a href="mailto:sales@paradedb.com"&gt;contact the ParadeDB team&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome community contributions, big or small, and are here to guide you along the way. To get started contributing, check our &lt;a href="https://github.com/paradedb/paradedb/labels/good%20first%20issue"&gt;first timer issues&lt;/a&gt; or message us in the &lt;a href="https://join.slack.com/t/paradedbcommunity/shared_invite/zt-32abtyjg4-yoYoi~RPh9MSW8tDbl0BQw"&gt;ParadeDB Community Slack&lt;/a&gt;. Once you contribute, ping us in Slack and we'll send you some ParadeDB swag!&lt;/p&gt; 
&lt;p&gt;For more information on how to contribute, please see our &lt;a href="https://raw.githubusercontent.com/paradedb/paradedb/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project is released with a &lt;a href="https://raw.githubusercontent.com/paradedb/paradedb/main/CODE_OF_CONDUCT.md"&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project, you agree to follow its terms.&lt;/p&gt; 
&lt;p&gt;Thank you for helping us make ParadeDB better for everyone &lt;span&gt;❤️&lt;/span&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;ParadeDB is licensed under the &lt;a href="https://raw.githubusercontent.com/paradedb/paradedb/main/LICENSE"&gt;GNU Affero General Public License v3.0&lt;/a&gt; and as commercial software. For commercial licensing, please contact us at &lt;a href="mailto:sales@paradedb.com"&gt;sales@paradedb.com&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sharkdp/fd</title>
      <link>https://github.com/sharkdp/fd</link>
      <description>&lt;p&gt;A simple, fast and user-friendly alternative to 'find'&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fd&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/sharkdp/fd/actions/workflows/CICD.yml"&gt;&lt;img src="https://github.com/sharkdp/fd/actions/workflows/CICD.yml/badge.svg?sanitize=true" alt="CICD" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/fd-find"&gt;&lt;img src="https://img.shields.io/crates/v/fd-find.svg?sanitize=true" alt="Version info" /&gt;&lt;/a&gt; [&lt;a href="https://github.com/cha0ran/fd-zh"&gt;中文&lt;/a&gt;] [&lt;a href="https://github.com/spearkkk/fd-kor"&gt;한국어&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; is a program to find entries in your filesystem. It is a simple, fast and user-friendly alternative to &lt;a href="https://www.gnu.org/software/findutils/"&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;. While it does not aim to support all of &lt;code&gt;find&lt;/code&gt;'s powerful functionality, it provides sensible (opinionated) defaults for a majority of use cases.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/sharkdp/fd/master/#installation"&gt;Installation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/fd/master/#how-to-use"&gt;How to use&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/fd/master/#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Intuitive syntax: &lt;code&gt;fd PATTERN&lt;/code&gt; instead of &lt;code&gt;find -iname '*PATTERN*'&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Regular expression (default) and glob-based patterns.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sharkdp/fd/master/#benchmark"&gt;Very fast&lt;/a&gt; due to parallelized directory traversal.&lt;/li&gt; 
 &lt;li&gt;Uses colors to highlight different file types (same as &lt;code&gt;ls&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;Supports &lt;a href="https://raw.githubusercontent.com/sharkdp/fd/master/#command-execution"&gt;parallel command execution&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Smart case: the search is case-insensitive by default. It switches to case-sensitive if the pattern contains an uppercase character&lt;a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'smartcase'"&gt;*&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Ignores hidden directories and files, by default.&lt;/li&gt; 
 &lt;li&gt;Ignores patterns from your &lt;code&gt;.gitignore&lt;/code&gt;, by default.&lt;/li&gt; 
 &lt;li&gt;The command name is &lt;em&gt;50%&lt;/em&gt; shorter&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;*&lt;/a&gt; than &lt;code&gt;find&lt;/code&gt; :-).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sharkdp/fd/master/doc/screencast.svg?sanitize=true" alt="Demo" /&gt;&lt;/p&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;p&gt;First, to get an overview of all available command line options, you can either run &lt;a href="https://raw.githubusercontent.com/sharkdp/fd/master/#command-line-options"&gt;&lt;code&gt;fd -h&lt;/code&gt;&lt;/a&gt; for a concise help message or &lt;code&gt;fd --help&lt;/code&gt; for a more detailed version.&lt;/p&gt; 
&lt;h3&gt;Simple search&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;fd&lt;/em&gt; is designed to find entries in your filesystem. The most basic search you can perform is to run &lt;em&gt;fd&lt;/em&gt; with a single argument: the search pattern. For example, assume that you want to find an old script of yours (the name included &lt;code&gt;netflix&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd netfl
Software/python/imdb-ratings/netflix-details.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If called with just a single argument like this, &lt;em&gt;fd&lt;/em&gt; searches the current directory recursively for any entries that &lt;em&gt;contain&lt;/em&gt; the pattern &lt;code&gt;netfl&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Regular expression search&lt;/h3&gt; 
&lt;p&gt;The search pattern is treated as a regular expression. Here, we search for entries that start with &lt;code&gt;x&lt;/code&gt; and end with &lt;code&gt;rc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; cd /etc
&amp;gt; fd '^x.*rc$'
X11/xinit/xinitrc
X11/xinit/xserverrc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The regular expression syntax used by &lt;code&gt;fd&lt;/code&gt; is &lt;a href="https://docs.rs/regex/latest/regex/#syntax"&gt;documented here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Specifying the root directory&lt;/h3&gt; 
&lt;p&gt;If we want to search a specific directory, it can be given as a second argument to &lt;em&gt;fd&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd passwd /etc
/etc/default/passwd
/etc/pam.d/passwd
/etc/passwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;List all files, recursively&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;fd&lt;/em&gt; can be called with no arguments. This is very useful to get a quick overview of all entries in the current directory, recursively (similar to &lt;code&gt;ls -R&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; cd fd/tests
&amp;gt; fd
testenv
testenv/mod.rs
tests.rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to use this functionality to list all files in a given directory, you have to use a catch-all pattern such as &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;^&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd . fd/tests/
testenv
testenv/mod.rs
tests.rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Searching for a particular file extension&lt;/h3&gt; 
&lt;p&gt;Often, we are interested in all files of a particular type. This can be done with the &lt;code&gt;-e&lt;/code&gt; (or &lt;code&gt;--extension&lt;/code&gt;) option. Here, we search for all Markdown files in the fd repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; cd fd
&amp;gt; fd -e md
CONTRIBUTING.md
README.md
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;-e&lt;/code&gt; option can be used in combination with a search pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -e rs mod
src/fshelper/mod.rs
src/lscolors/mod.rs
tests/testenv/mod.rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Searching for a particular file name&lt;/h3&gt; 
&lt;p&gt;To find files with exactly the provided search pattern, use the &lt;code&gt;-g&lt;/code&gt; (or &lt;code&gt;--glob&lt;/code&gt;) option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -g libc.so /usr
/usr/lib32/libc.so
/usr/lib/libc.so
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Hidden and ignored files&lt;/h3&gt; 
&lt;p&gt;By default, &lt;em&gt;fd&lt;/em&gt; does not search hidden directories and does not show hidden files in the search results. To disable this behavior, we can use the &lt;code&gt;-H&lt;/code&gt; (or &lt;code&gt;--hidden&lt;/code&gt;) option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd pre-commit
&amp;gt; fd -H pre-commit
.git/hooks/pre-commit.sample
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If we work in a directory that is a Git repository (or includes Git repositories), &lt;em&gt;fd&lt;/em&gt; does not search folders (and does not show files) that match one of the &lt;code&gt;.gitignore&lt;/code&gt; patterns. To disable this behavior, we can use the &lt;code&gt;-I&lt;/code&gt; (or &lt;code&gt;--no-ignore&lt;/code&gt;) option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd num_cpu
&amp;gt; fd -I num_cpu
target/debug/deps/libnum_cpus-f5ce7ef99006aa05.rlib
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To really search &lt;em&gt;all&lt;/em&gt; files and directories, simply combine the hidden and ignore features to show everything (&lt;code&gt;-HI&lt;/code&gt;) or use &lt;code&gt;-u&lt;/code&gt;/&lt;code&gt;--unrestricted&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Matching the full path&lt;/h3&gt; 
&lt;p&gt;By default, &lt;em&gt;fd&lt;/em&gt; only matches the filename of each file. However, using the &lt;code&gt;--full-path&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; option, you can match against the full path.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -p -g '**/.git/config'
&amp;gt; fd -p '.*/lesson-\d+/[a-z]+.(jpg|png)'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Command execution&lt;/h3&gt; 
&lt;p&gt;Instead of just showing the search results, you often want to &lt;em&gt;do something&lt;/em&gt; with them. &lt;code&gt;fd&lt;/code&gt; provides two ways to execute external commands for each of your search results:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;-x&lt;/code&gt;/&lt;code&gt;--exec&lt;/code&gt; option runs an external command &lt;em&gt;for each of the search results&lt;/em&gt; (in parallel).&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--exec-batch&lt;/code&gt; option launches the external command once, with &lt;em&gt;all search results as arguments&lt;/em&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Examples&lt;/h4&gt; 
&lt;p&gt;Recursively find all zip archives and unpack them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fd -e zip -x unzip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If there are two such files, &lt;code&gt;file1.zip&lt;/code&gt; and &lt;code&gt;backup/file2.zip&lt;/code&gt;, this would execute &lt;code&gt;unzip file1.zip&lt;/code&gt; and &lt;code&gt;unzip backup/file2.zip&lt;/code&gt;. The two &lt;code&gt;unzip&lt;/code&gt; processes run in parallel (if the files are found fast enough).&lt;/p&gt; 
&lt;p&gt;Find all &lt;code&gt;*.h&lt;/code&gt; and &lt;code&gt;*.cpp&lt;/code&gt; files and auto-format them inplace with &lt;code&gt;clang-format -i&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fd -e h -e cpp -x clang-format -i
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note how the &lt;code&gt;-i&lt;/code&gt; option to &lt;code&gt;clang-format&lt;/code&gt; can be passed as a separate argument. This is why we put the &lt;code&gt;-x&lt;/code&gt; option last.&lt;/p&gt; 
&lt;p&gt;Find all &lt;code&gt;test_*.py&lt;/code&gt; files and open them in your favorite editor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fd -g 'test_*.py' -X vim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that we use capital &lt;code&gt;-X&lt;/code&gt; here to open a single &lt;code&gt;vim&lt;/code&gt; instance. If there are two such files, &lt;code&gt;test_basic.py&lt;/code&gt; and &lt;code&gt;lib/test_advanced.py&lt;/code&gt;, this will run &lt;code&gt;vim test_basic.py lib/test_advanced.py&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To see details like file permissions, owners, file sizes etc., you can tell &lt;code&gt;fd&lt;/code&gt; to show them by running &lt;code&gt;ls&lt;/code&gt; for each result:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fd … -X ls -lhd --color=always
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This pattern is so useful that &lt;code&gt;fd&lt;/code&gt; provides a shortcut. You can use the &lt;code&gt;-l&lt;/code&gt;/&lt;code&gt;--list-details&lt;/code&gt; option to execute &lt;code&gt;ls&lt;/code&gt; in this way: &lt;code&gt;fd … -l&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;-X&lt;/code&gt; option is also useful when combining &lt;code&gt;fd&lt;/code&gt; with &lt;a href="https://github.com/BurntSushi/ripgrep/"&gt;ripgrep&lt;/a&gt; (&lt;code&gt;rg&lt;/code&gt;) in order to search within a certain class of files, like all C++ source files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fd -e cpp -e cxx -e h -e hpp -X rg 'std::cout'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Convert all &lt;code&gt;*.jpg&lt;/code&gt; files to &lt;code&gt;*.png&lt;/code&gt; files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fd -e jpg -x convert {} {.}.png
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here, &lt;code&gt;{}&lt;/code&gt; is a placeholder for the search result. &lt;code&gt;{.}&lt;/code&gt; is the same, without the file extension. See below for more details on the placeholder syntax.&lt;/p&gt; 
&lt;p&gt;The terminal output of commands run from parallel threads using &lt;code&gt;-x&lt;/code&gt; will not be interlaced or garbled, so &lt;code&gt;fd -x&lt;/code&gt; can be used to rudimentarily parallelize a task run over many files. An example of this is calculating the checksum of each individual file within a directory.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;fd -tf -x md5sum &amp;gt; file_checksums.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Placeholder syntax&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;-x&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt; options take a &lt;em&gt;command template&lt;/em&gt; as a series of arguments (instead of a single string). If you want to add additional options to &lt;code&gt;fd&lt;/code&gt; after the command template, you can terminate it with a &lt;code&gt;\;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The syntax for generating commands is similar to that of &lt;a href="https://www.gnu.org/software/parallel/"&gt;GNU Parallel&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;{}&lt;/code&gt;: A placeholder token that will be replaced with the path of the search result (&lt;code&gt;documents/images/party.jpg&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{.}&lt;/code&gt;: Like &lt;code&gt;{}&lt;/code&gt;, but without the file extension (&lt;code&gt;documents/images/party&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{/}&lt;/code&gt;: A placeholder that will be replaced by the basename of the search result (&lt;code&gt;party.jpg&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{//}&lt;/code&gt;: The parent of the discovered path (&lt;code&gt;documents/images&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{/.}&lt;/code&gt;: The basename, with the extension removed (&lt;code&gt;party&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you do not include a placeholder, &lt;em&gt;fd&lt;/em&gt; automatically adds a &lt;code&gt;{}&lt;/code&gt; at the end.&lt;/p&gt; 
&lt;h4&gt;Parallel vs. serial execution&lt;/h4&gt; 
&lt;p&gt;For &lt;code&gt;-x&lt;/code&gt;/&lt;code&gt;--exec&lt;/code&gt;, you can control the number of parallel jobs by using the &lt;code&gt;-j&lt;/code&gt;/&lt;code&gt;--threads&lt;/code&gt; option. Use &lt;code&gt;--threads=1&lt;/code&gt; for serial execution.&lt;/p&gt; 
&lt;h3&gt;Excluding specific files or directories&lt;/h3&gt; 
&lt;p&gt;Sometimes we want to ignore search results from a specific subdirectory. For example, we might want to search all hidden files and directories (&lt;code&gt;-H&lt;/code&gt;) but exclude all matches from &lt;code&gt;.git&lt;/code&gt; directories. We can use the &lt;code&gt;-E&lt;/code&gt; (or &lt;code&gt;--exclude&lt;/code&gt;) option for this. It takes an arbitrary glob pattern as an argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -H -E .git …
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also use this to skip mounted directories:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -E /mnt/external-drive …
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;.. or to skip certain file types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -E '*.bak' …
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To make exclude-patterns like these permanent, you can create a &lt;code&gt;.fdignore&lt;/code&gt; file. They work like &lt;code&gt;.gitignore&lt;/code&gt; files, but are specific to &lt;code&gt;fd&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; cat ~/.fdignore
/mnt/external-drive
*.bak
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;code&gt;fd&lt;/code&gt; also supports &lt;code&gt;.ignore&lt;/code&gt; files that are used by other programs such as &lt;code&gt;rg&lt;/code&gt; or &lt;code&gt;ag&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you want &lt;code&gt;fd&lt;/code&gt; to ignore these patterns globally, you can put them in &lt;code&gt;fd&lt;/code&gt;'s global ignore file. This is usually located in &lt;code&gt;~/.config/fd/ignore&lt;/code&gt; in macOS or Linux, and &lt;code&gt;%APPDATA%\fd\ignore&lt;/code&gt; in Windows.&lt;/p&gt; 
&lt;p&gt;You may wish to include &lt;code&gt;.git/&lt;/code&gt; in your &lt;code&gt;fd/ignore&lt;/code&gt; file so that &lt;code&gt;.git&lt;/code&gt; directories, and their contents are not included in output if you use the &lt;code&gt;--hidden&lt;/code&gt; option.&lt;/p&gt; 
&lt;h3&gt;Deleting files&lt;/h3&gt; 
&lt;p&gt;You can use &lt;code&gt;fd&lt;/code&gt; to remove all files and directories that are matched by your search pattern. If you only want to remove files, you can use the &lt;code&gt;--exec-batch&lt;/code&gt;/&lt;code&gt;-X&lt;/code&gt; option to call &lt;code&gt;rm&lt;/code&gt;. For example, to recursively remove all &lt;code&gt;.DS_Store&lt;/code&gt; files, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -H '^\.DS_Store$' -tf -X rm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are unsure, always call &lt;code&gt;fd&lt;/code&gt; without &lt;code&gt;-X rm&lt;/code&gt; first. Alternatively, use &lt;code&gt;rm&lt;/code&gt;s "interactive" option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -H '^\.DS_Store$' -tf -X rm -i
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you also want to remove a certain class of directories, you can use the same technique. You will have to use &lt;code&gt;rm&lt;/code&gt;s &lt;code&gt;--recursive&lt;/code&gt;/&lt;code&gt;-r&lt;/code&gt; flag to remove directories.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] There are scenarios where using &lt;code&gt;fd … -X rm -r&lt;/code&gt; can cause race conditions: if you have a path like &lt;code&gt;…/foo/bar/foo/…&lt;/code&gt; and want to remove all directories named &lt;code&gt;foo&lt;/code&gt;, you can end up in a situation where the outer &lt;code&gt;foo&lt;/code&gt; directory is removed first, leading to (harmless) &lt;em&gt;"'foo/bar/foo': No such file or directory"&lt;/em&gt; errors in the &lt;code&gt;rm&lt;/code&gt; call.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Command-line options&lt;/h3&gt; 
&lt;p&gt;This is the output of &lt;code&gt;fd -h&lt;/code&gt;. To see the full set of command-line options, use &lt;code&gt;fd --help&lt;/code&gt; which also includes a much more detailed help text.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: fd [OPTIONS] [pattern [path...]]

Arguments:
  [pattern]  the search pattern (a regular expression, unless '--glob' is used; optional)
  [path]...  the root directories for the filesystem search (optional)

Options:
  -H, --hidden                     Search hidden files and directories
  -I, --no-ignore                  Do not respect .(git|fd)ignore files
  -s, --case-sensitive             Case-sensitive search (default: smart case)
  -i, --ignore-case                Case-insensitive search (default: smart case)
  -g, --glob                       Glob-based search (default: regular expression)
  -a, --absolute-path              Show absolute instead of relative paths
  -l, --list-details               Use a long listing format with file metadata
  -L, --follow                     Follow symbolic links
  -p, --full-path                  Search full abs. path (default: filename only)
  -d, --max-depth &amp;lt;depth&amp;gt;          Set maximum search depth (default: none)
  -E, --exclude &amp;lt;pattern&amp;gt;          Exclude entries that match the given glob pattern
  -t, --type &amp;lt;filetype&amp;gt;            Filter by type: file (f), directory (d/dir), symlink (l),
                                   executable (x), empty (e), socket (s), pipe (p), char-device
                                   (c), block-device (b)
  -e, --extension &amp;lt;ext&amp;gt;            Filter by file extension
  -S, --size &amp;lt;size&amp;gt;                Limit results based on the size of files
      --changed-within &amp;lt;date|dur&amp;gt;  Filter by file modification time (newer than)
      --changed-before &amp;lt;date|dur&amp;gt;  Filter by file modification time (older than)
  -o, --owner &amp;lt;user:group&amp;gt;         Filter by owning user and/or group
      --format &amp;lt;fmt&amp;gt;               Print results according to template
  -x, --exec &amp;lt;cmd&amp;gt;...              Execute a command for each search result
  -X, --exec-batch &amp;lt;cmd&amp;gt;...        Execute a command with all search results at once
  -c, --color &amp;lt;when&amp;gt;               When to use colors [default: auto] [possible values: auto,
                                   always, never]
      --hyperlink[=&amp;lt;when&amp;gt;]         Add hyperlinks to output paths [default: never] [possible
                                   values: auto, always, never]
  -h, --help                       Print help (see more with '--help')
  -V, --version                    Print version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that options can be given after the pattern and/or path as well.&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Let's search my home folder for files that end in &lt;code&gt;[0-9].jpg&lt;/code&gt;. It contains ~750.000 subdirectories and about a 4 million files. For averaging and statistical analysis, I'm using &lt;a href="https://github.com/sharkdp/hyperfine"&gt;hyperfine&lt;/a&gt;. The following benchmarks are performed with a "warm"/pre-filled disk-cache (results for a "cold" disk-cache show the same trends).&lt;/p&gt; 
&lt;p&gt;Let's start with &lt;code&gt;find&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Benchmark 1: find ~ -iregex '.*[0-9]\.jpg$'
  Time (mean ± σ):     19.922 s ±  0.109 s
  Range (min … max):   19.765 s … 20.065 s
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; is much faster if it does not need to perform a regular-expression search:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Benchmark 2: find ~ -iname '*[0-9].jpg'
  Time (mean ± σ):     11.226 s ±  0.104 s
  Range (min … max):   11.119 s … 11.466 s
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let's try the same for &lt;code&gt;fd&lt;/code&gt;. Note that &lt;code&gt;fd&lt;/code&gt; performs a regular expression search by default. The options &lt;code&gt;-u&lt;/code&gt;/&lt;code&gt;--unrestricted&lt;/code&gt; option is needed here for a fair comparison. Otherwise &lt;code&gt;fd&lt;/code&gt; does not have to traverse hidden folders and ignored paths (see below):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Benchmark 3: fd -u '[0-9]\.jpg$' ~
  Time (mean ± σ):     854.8 ms ±  10.0 ms
  Range (min … max):   839.2 ms … 868.9 ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For this particular example, &lt;code&gt;fd&lt;/code&gt; is approximately &lt;strong&gt;23 times faster&lt;/strong&gt; than &lt;code&gt;find -iregex&lt;/code&gt; and about &lt;strong&gt;13 times faster&lt;/strong&gt; than &lt;code&gt;find -iname&lt;/code&gt;. By the way, both tools found the exact same 546 files &lt;span&gt;😄&lt;/span&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is &lt;em&gt;one particular&lt;/em&gt; benchmark on &lt;em&gt;one particular&lt;/em&gt; machine. While we have performed a lot of different tests (and found consistent results), things might be different for you! We encourage everyone to try it out on their own. See &lt;a href="https://github.com/sharkdp/fd-benchmarks"&gt;this repository&lt;/a&gt; for all necessary scripts.&lt;/p&gt; 
&lt;p&gt;Concerning &lt;em&gt;fd&lt;/em&gt;'s speed, a lot of credit goes to the &lt;code&gt;regex&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; crates that are also used in &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt; (check it out!).&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;fd&lt;/code&gt; does not find my file!&lt;/h3&gt; 
&lt;p&gt;Remember that &lt;code&gt;fd&lt;/code&gt; ignores hidden directories and files by default. It also ignores patterns from &lt;code&gt;.gitignore&lt;/code&gt; files. If you want to make sure to find absolutely every possible file, always use the options &lt;code&gt;-u&lt;/code&gt;/&lt;code&gt;--unrestricted&lt;/code&gt; option (or &lt;code&gt;-HI&lt;/code&gt; to enable hidden and ignored files):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -u …
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also remember that by default, &lt;code&gt;fd&lt;/code&gt; only searches based on the filename and doesn't compare the pattern to the full path. If you want to search based on the full path (similar to the &lt;code&gt;-path&lt;/code&gt; option of &lt;code&gt;find&lt;/code&gt;) you need to use the &lt;code&gt;--full-path&lt;/code&gt; (or &lt;code&gt;-p&lt;/code&gt;) option.&lt;/p&gt; 
&lt;h3&gt;Colorized output&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; can colorize files by extension, just like &lt;code&gt;ls&lt;/code&gt;. In order for this to work, the environment variable &lt;a href="https://linux.die.net/man/5/dir_colors"&gt;&lt;code&gt;LS_COLORS&lt;/code&gt;&lt;/a&gt; has to be set. Typically, the value of this variable is set by the &lt;code&gt;dircolors&lt;/code&gt; command which provides a convenient configuration format to define colors for different file formats. On most distributions, &lt;code&gt;LS_COLORS&lt;/code&gt; should be set already. If you are on Windows or if you are looking for alternative, more complete (or more colorful) variants, see &lt;a href="https://github.com/sharkdp/vivid"&gt;here&lt;/a&gt;, &lt;a href="https://github.com/seebi/dircolors-solarized"&gt;here&lt;/a&gt; or &lt;a href="https://github.com/trapd00r/LS_COLORS"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; also honors the &lt;a href="https://no-color.org/"&gt;&lt;code&gt;NO_COLOR&lt;/code&gt;&lt;/a&gt; environment variable.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;fd&lt;/code&gt; doesn't seem to interpret my regex pattern correctly&lt;/h3&gt; 
&lt;p&gt;A lot of special regex characters (like &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, ..) are also special characters in your shell. If in doubt, always make sure to put single quotes around the regex pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd '^[A-Z][0-9]+$'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your pattern starts with a dash, you have to add &lt;code&gt;--&lt;/code&gt; to signal the end of command line options. Otherwise, the pattern will be interpreted as a command-line option. Alternatively, use a character class with a single hyphen character:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -- '-pattern'
&amp;gt; fd '[-]pattern'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;"Command not found" for &lt;code&gt;alias&lt;/code&gt;es or shell functions&lt;/h3&gt; 
&lt;p&gt;Shell &lt;code&gt;alias&lt;/code&gt;es and shell functions can not be used for command execution via &lt;code&gt;fd -x&lt;/code&gt; or &lt;code&gt;fd -X&lt;/code&gt;. In &lt;code&gt;zsh&lt;/code&gt;, you can make the alias global via &lt;code&gt;alias -g myalias="…"&lt;/code&gt;. In &lt;code&gt;bash&lt;/code&gt;, you can use &lt;code&gt;export -f my_function&lt;/code&gt; to make available to child processes. You would still need to call &lt;code&gt;fd -x bash -c 'my_function "$1"' bash&lt;/code&gt;. For other use cases or shells, use a (temporary) shell script.&lt;/p&gt; 
&lt;h2&gt;Integration with other programs&lt;/h2&gt; 
&lt;h3&gt;Using fd with &lt;code&gt;fzf&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;You can use &lt;em&gt;fd&lt;/em&gt; to generate input for the command-line fuzzy finder &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export FZF_DEFAULT_COMMAND='fd --type file'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, you can type &lt;code&gt;vim &amp;lt;Ctrl-T&amp;gt;&lt;/code&gt; on your terminal to open fzf and search through the fd-results.&lt;/p&gt; 
&lt;p&gt;Alternatively, you might like to follow symbolic links and include hidden files (but exclude &lt;code&gt;.git&lt;/code&gt; folders):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export FZF_DEFAULT_COMMAND='fd --type file --follow --hidden --exclude .git'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can even use fd's colored output inside fzf by setting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export FZF_DEFAULT_COMMAND="fd --type file --color=always"
export FZF_DEFAULT_OPTS="--ansi"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more details, see the &lt;a href="https://github.com/junegunn/fzf#tips"&gt;Tips section&lt;/a&gt; of the fzf README.&lt;/p&gt; 
&lt;h3&gt;Using fd with &lt;code&gt;rofi&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/davatorium/rofi"&gt;&lt;em&gt;rofi&lt;/em&gt;&lt;/a&gt; is a graphical launch menu application that is able to create menus by reading from &lt;em&gt;stdin&lt;/em&gt;. Piping &lt;code&gt;fd&lt;/code&gt; output into &lt;code&gt;rofi&lt;/code&gt;s &lt;code&gt;-dmenu&lt;/code&gt; mode creates fuzzy-searchable lists of files and directories.&lt;/p&gt; 
&lt;h4&gt;Example&lt;/h4&gt; 
&lt;p&gt;Create a case-insensitive searchable multi-select list of &lt;em&gt;PDF&lt;/em&gt; files under your &lt;code&gt;$HOME&lt;/code&gt; directory and open the selection with your configured PDF viewer. To list all file types, drop the &lt;code&gt;-e pdf&lt;/code&gt; argument.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fd --type f -e pdf . $HOME | rofi -keep-right -dmenu -i -p FILES -multi-select | xargs -I {} xdg-open {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To modify the list that is presented by rofi, add arguments to the &lt;code&gt;fd&lt;/code&gt; command. To modify the search behaviour of rofi, add arguments to the &lt;code&gt;rofi&lt;/code&gt; command.&lt;/p&gt; 
&lt;h3&gt;Using fd with &lt;code&gt;emacs&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The emacs package &lt;a href="https://github.com/technomancy/find-file-in-project"&gt;find-file-in-project&lt;/a&gt; can use &lt;em&gt;fd&lt;/em&gt; to find files.&lt;/p&gt; 
&lt;p&gt;After installing &lt;code&gt;find-file-in-project&lt;/code&gt;, add the line &lt;code&gt;(setq ffip-use-rust-fd t)&lt;/code&gt; to your &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;In emacs, run &lt;code&gt;M-x find-file-in-project-by-selected&lt;/code&gt; to find matching files. Alternatively, run &lt;code&gt;M-x find-file-in-project&lt;/code&gt; to list all available files in the project.&lt;/p&gt; 
&lt;h3&gt;Printing the output as a tree&lt;/h3&gt; 
&lt;p&gt;To format the output of &lt;code&gt;fd&lt;/code&gt; as a file-tree you can use the &lt;code&gt;tree&lt;/code&gt; command with &lt;code&gt;--fromfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;❯ fd | tree --fromfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can be more useful than running &lt;code&gt;tree&lt;/code&gt; by itself because &lt;code&gt;tree&lt;/code&gt; does not ignore any files by default, nor does it support as rich a set of options as &lt;code&gt;fd&lt;/code&gt; does to control what to print:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;❯ fd --extension rs | tree --fromfile
.
├── build.rs
└── src
    ├── app.rs
    └── error.rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On bash and similar you can simply create an alias:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;❯ alias as-tree='tree --fromfile'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using fd with &lt;code&gt;xargs&lt;/code&gt; or &lt;code&gt;parallel&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Note that &lt;code&gt;fd&lt;/code&gt; has a builtin feature for &lt;a href="https://raw.githubusercontent.com/sharkdp/fd/master/#command-execution"&gt;command execution&lt;/a&gt; with its &lt;code&gt;-x&lt;/code&gt;/&lt;code&gt;--exec&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--exec-batch&lt;/code&gt; options. If you prefer, you can still use it in combination with &lt;code&gt;xargs&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; fd -0 -e rs | xargs -0 wc -l
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here, the &lt;code&gt;-0&lt;/code&gt; option tells &lt;em&gt;fd&lt;/em&gt; to separate search results by the NULL character (instead of newlines). In the same way, the &lt;code&gt;-0&lt;/code&gt; option of &lt;code&gt;xargs&lt;/code&gt; tells it to read the input in this way.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/fd-find/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/fd-find.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;On Ubuntu&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;... and other Debian-based Linux distributions.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;If you run Ubuntu 19.04 (Disco Dingo) or newer, you can install the &lt;a href="https://packages.ubuntu.com/fd-find"&gt;officially maintained package&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;apt install fd-find
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the binary is called &lt;code&gt;fdfind&lt;/code&gt; as the binary name &lt;code&gt;fd&lt;/code&gt; is already used by another package. It is recommended that after installation, you add a link to &lt;code&gt;fd&lt;/code&gt; by executing command &lt;code&gt;ln -s $(which fdfind) ~/.local/bin/fd&lt;/code&gt;, in order to use &lt;code&gt;fd&lt;/code&gt; in the same way as in this documentation. Make sure that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you use an older version of Ubuntu, you can download the latest &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href="https://github.com/sharkdp/fd/releases"&gt;release page&lt;/a&gt; and install it via:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dpkg -i fd_9.0.0_amd64.deb # adapt version number and architecture
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the .deb packages on the release page for this project still name the executable &lt;code&gt;fd&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;On Debian&lt;/h3&gt; 
&lt;p&gt;If you run Debian Buster or newer, you can install the &lt;a href="https://tracker.debian.org/pkg/rust-fd-find"&gt;officially maintained Debian package&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;apt-get install fd-find
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the binary is called &lt;code&gt;fdfind&lt;/code&gt; as the binary name &lt;code&gt;fd&lt;/code&gt; is already used by another package. It is recommended that after installation, you add a link to &lt;code&gt;fd&lt;/code&gt; by executing command &lt;code&gt;ln -s $(which fdfind) ~/.local/bin/fd&lt;/code&gt;, in order to use &lt;code&gt;fd&lt;/code&gt; in the same way as in this documentation. Make sure that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note that the .deb packages on the release page for this project still name the executable &lt;code&gt;fd&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;On Fedora&lt;/h3&gt; 
&lt;p&gt;Starting with Fedora 28, you can install &lt;code&gt;fd&lt;/code&gt; from the official package sources:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dnf install fd-find
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Alpine Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://pkgs.alpinelinux.org/packages?name=fd"&gt;the fd package&lt;/a&gt; from the official sources, provided you have the appropriate repository enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;apk add fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Arch Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://www.archlinux.org/packages/extra/x86_64/fd/"&gt;the fd package&lt;/a&gt; from the official repos:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pacman -S fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also install fd &lt;a href="https://aur.archlinux.org/packages/fd-git"&gt;from the AUR&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;On Gentoo Linux&lt;/h3&gt; 
&lt;p&gt;You can use &lt;a href="https://packages.gentoo.org/packages/sys-apps/fd"&gt;the fd ebuild&lt;/a&gt; from the official repo:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;emerge -av fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On openSUSE Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://software.opensuse.org/package/fd"&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;zypper in fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Void Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;fd&lt;/code&gt; via xbps-install:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;xbps-install -S fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On ALT Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://packages.altlinux.org/en/sisyphus/srpms/fd/"&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;apt-get install fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Solus&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://github.com/getsolus/packages/tree/main/packages/f/fd"&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;eopkg install fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On RedHat Enterprise Linux (RHEL) 8/9/10, Almalinux 8/9/10, EuroLinux 8/9 or Rocky Linux 8/9/10&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://copr.fedorainfracloud.org/coprs/tkbcopr/fd/"&gt;the &lt;code&gt;fd&lt;/code&gt; package&lt;/a&gt; from Fedora Copr.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dnf copr enable tkbcopr/fd
dnf install fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A different version using the &lt;a href="https://github.com/sharkdp/fd/pull/481#issuecomment-534494592"&gt;slower&lt;/a&gt; malloc &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=2216193#c1"&gt;instead of jemalloc&lt;/a&gt; is also available from the EPEL8/9 repo as the package &lt;code&gt;fd-find&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;On macOS&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;fd&lt;/code&gt; with &lt;a href="https://formulae.brew.sh/formula/fd"&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;… or with MacPorts:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;port install fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Windows&lt;/h3&gt; 
&lt;p&gt;You can download pre-built binaries from the &lt;a href="https://github.com/sharkdp/fd/releases"&gt;release page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can install &lt;code&gt;fd&lt;/code&gt; via &lt;a href="http://scoop.sh"&gt;Scoop&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;scoop install fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or via &lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;choco install fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or via &lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/"&gt;Winget&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;winget install sharkdp.fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On GuixOS&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://guix.gnu.org/en/packages/fd-8.1.1/"&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;guix install fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On NixOS / via Nix&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;a href="https://nixos.org/nix/"&gt;Nix package manager&lt;/a&gt; to install &lt;code&gt;fd&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nix-env -i fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Via Flox&lt;/h3&gt; 
&lt;p&gt;You can use &lt;a href="https://flox.dev"&gt;Flox&lt;/a&gt; to install &lt;code&gt;fd&lt;/code&gt; into a Flox environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;flox install fd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On FreeBSD&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://www.freshports.org/sysutils/fd"&gt;the fd-find package&lt;/a&gt; from the official repo:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pkg install fd-find
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From npm&lt;/h3&gt; 
&lt;p&gt;On Linux and macOS, you can install the &lt;a href="https://npm.im/fd-find"&gt;fd-find&lt;/a&gt; package:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install -g fd-find
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From source&lt;/h3&gt; 
&lt;p&gt;With Rust's package manager &lt;a href="https://github.com/rust-lang/cargo"&gt;cargo&lt;/a&gt;, you can install &lt;em&gt;fd&lt;/em&gt; via:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo install fd-find
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that rust version &lt;em&gt;1.77.2&lt;/em&gt; or later is required.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; is also needed for the build.&lt;/p&gt; 
&lt;h3&gt;From binaries&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://github.com/sharkdp/fd/releases"&gt;release page&lt;/a&gt; includes precompiled binaries for Linux, macOS and Windows. Statically-linked binaries are also available: look for archives with &lt;code&gt;musl&lt;/code&gt; in the file name.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/sharkdp/fd

# Build
cd fd
cargo build

# Run unit tests and integration tests
cargo test

# Install
cargo install --path .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sharkdp"&gt;sharkdp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tmccombs"&gt;tmccombs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tavianator"&gt;tavianator&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; is distributed under the terms of both the MIT License and the Apache License 2.0.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/sharkdp/fd/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/sharkdp/fd/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; files for license details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>meilisearch/meilisearch</title>
      <link>https://github.com/meilisearch/meilisearch</link>
      <description>&lt;p&gt;A lightning-fast search engine API bringing AI-powered hybrid search to your sites and applications.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-light.svg?sanitize=true#gh-light-mode-only" /&gt; &lt;/a&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-dark.svg?sanitize=true#gh-dark-mode-only" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h4 align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Website&lt;/a&gt; | &lt;a href="https://roadmap.meilisearch.com/tabs/1-under-consideration"&gt;Roadmap&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/pricing?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Meilisearch Cloud&lt;/a&gt; | &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Blog&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Documentation&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs/faq?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;FAQ&lt;/a&gt; | &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Discord&lt;/a&gt; &lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://deps.rs/repo/github/meilisearch/meilisearch"&gt;&lt;img src="https://deps.rs/repo/github/meilisearch/meilisearch/status.svg?sanitize=true" alt="Dependency status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-informational" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/queue"&gt;&lt;img alt="Merge Queues enabled" src="https://img.shields.io/badge/Merge_Queues-enabled-%2357cf60?logo=github" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;⚡ A lightning-fast search engine that fits effortlessly into your apps, websites, and workflow 🔍&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=intro"&gt;Meilisearch&lt;/a&gt; helps you shape a delightful search experience in a snap, offering features that work out of the box to speed up your workflow.&lt;/p&gt; 
&lt;p align="center" name="demo"&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-light.gif#gh-light-mode-only" alt="A bright colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-dark.gif#gh-dark-mode-only" alt="A dark colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;🖥 Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=organization"&gt;&lt;strong&gt;Movies&lt;/strong&gt;&lt;/a&gt; — An application to help you find streaming platforms to watch movies using &lt;a href="https://www.meilisearch.com/solutions/hybrid-search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;hybrid search&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ecommerce.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Ecommerce&lt;/strong&gt;&lt;/a&gt; — Ecommerce website using disjunctive &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;facets&lt;/a&gt;, range and rating filtering, and pagination.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://music.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Songs&lt;/strong&gt;&lt;/a&gt; — Search through 47 million of songs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://saas.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;SaaS&lt;/strong&gt;&lt;/a&gt; — Search for contacts, deals, and companies in this &lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;multi-tenant&lt;/a&gt; CRM application.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the list of all our example apps in our &lt;a href="https://github.com/meilisearch/demos"&gt;demos repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hybrid search:&lt;/strong&gt; Combine the best of both &lt;a href="https://www.meilisearch.com/docs/learn/experimental/vector_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;semantic&lt;/a&gt; &amp;amp; full-text search to get the most relevant results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Search-as-you-type:&lt;/strong&gt; Find &amp;amp; display results in less than 50 milliseconds to provide an intuitive experience&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/typo_tolerance_settings?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Typo tolerance&lt;/a&gt;:&lt;/strong&gt; get relevant matches even when queries contain typos and misspellings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Filtering&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;faceted search&lt;/a&gt;:&lt;/strong&gt; enhance your users' search experience with custom filters and build a faceted search interface in a few lines of code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Sorting&lt;/a&gt;:&lt;/strong&gt; sort results based on price, date, or pretty much anything else your users need&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/synonyms?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Synonym support&lt;/a&gt;:&lt;/strong&gt; configure synonyms to include more relevant content in your search results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Geosearch&lt;/a&gt;:&lt;/strong&gt; filter and sort documents based on geographic data&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/language?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Extensive language support&lt;/a&gt;:&lt;/strong&gt; search datasets in any language, with optimized support for Chinese, Japanese, Hebrew, and languages using the Latin alphabet&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Security management&lt;/a&gt;:&lt;/strong&gt; control which users can access what data with API keys that allow fine-grained permissions handling&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Multi-Tenancy&lt;/a&gt;:&lt;/strong&gt; personalize search results for any number of application tenants&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly Customizable:&lt;/strong&gt; customize Meilisearch to your specific needs or use our out-of-the-box and hassle-free presets&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;RESTful API&lt;/a&gt;:&lt;/strong&gt; integrate Meilisearch in your technical stack with our plugins and SDKs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI-ready:&lt;/strong&gt; works out of the box with &lt;a href="https://www.meilisearch.com/with/langchain"&gt;langchain&lt;/a&gt; and the &lt;a href="https://github.com/meilisearch/meilisearch-mcp"&gt;model context protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy to install, deploy, and maintain&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;You can consult Meilisearch's documentation at &lt;a href="https://www.meilisearch.com/docs/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=docs"&gt;meilisearch.com/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🚀 Getting started&lt;/h2&gt; 
&lt;p&gt;For basic instructions on how to set up Meilisearch, add documents to an index, and search for documents, take a look at our &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=get-started"&gt;documentation&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;🌍 Supercharge your Meilisearch experience&lt;/h2&gt; 
&lt;p&gt;Say goodbye to server deployment and manual updates with &lt;a href="https://www.meilisearch.com/cloud?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch"&gt;Meilisearch Cloud&lt;/a&gt;. Additional features include analytics &amp;amp; monitoring in many regions around the world. No credit card is required.&lt;/p&gt; 
&lt;h2&gt;🧰 SDKs &amp;amp; integration tools&lt;/h2&gt; 
&lt;p&gt;Install one of our SDKs in your project for seamless integration between Meilisearch and your favorite language or framework!&lt;/p&gt; 
&lt;p&gt;Take a look at the complete &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-link"&gt;Meilisearch integration list&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-logos"&gt;&lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/integrations.png" alt="Logos belonging to different languages and frameworks supported by Meilisearch, including React, Ruby on Rails, Go, Rust, and PHP" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;⚙️ Advanced usage&lt;/h2&gt; 
&lt;p&gt;Experienced users will want to keep our &lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API Reference&lt;/a&gt; close at hand.&lt;/p&gt; 
&lt;p&gt;We also offer a wide range of dedicated guides to all Meilisearch features, such as &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;filtering&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;sorting&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;geosearch&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API keys&lt;/a&gt;, and &lt;a href="https://www.meilisearch.com/docs/learn/security/tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;tenant tokens&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, for more in-depth information, refer to our articles explaining fundamental Meilisearch concepts such as &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/documents?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;documents&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/indexes?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;indexes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🧾 Editions &amp;amp; Licensing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is available in two editions:&lt;/p&gt; 
&lt;h3&gt;🧪 Community Edition (CE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fully open source under the &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE"&gt;MIT license&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Core search engine with fast and relevant full-text, semantic or hybrid search&lt;/li&gt; 
 &lt;li&gt;Free to use for anyone, including commercial usage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🏢 Enterprise Edition (EE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Includes advanced features such as: 
  &lt;ul&gt; 
   &lt;li&gt;Sharding&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Governed by a &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE-EE"&gt;commercial license&lt;/a&gt; or the &lt;a href="https://mariadb.com/bsl11"&gt;Business Source License 1.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Not allowed in production without a commercial agreement with Meilisearch. 
  &lt;ul&gt; 
   &lt;li&gt;You may use, modify, and distribute the Licensed Work for non-production purposes only, such as testing, development, or evaluation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Want access to Enterprise features? → Contact us at &lt;a href="maito:sales@meilisearch.com"&gt;sales@meilisearch.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📊 Telemetry&lt;/h2&gt; 
&lt;p&gt;Meilisearch collects &lt;strong&gt;anonymized&lt;/strong&gt; user data to help us improve our product. You can &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;deactivate this&lt;/a&gt; whenever you want.&lt;/p&gt; 
&lt;p&gt;To request deletion of collected data, please write to us at &lt;a href="mailto:privacy@meilisearch.com"&gt;privacy@meilisearch.com&lt;/a&gt;. Remember to include your &lt;code&gt;Instance UID&lt;/code&gt; in the message, as this helps us quickly find and delete your data.&lt;/p&gt; 
&lt;p&gt;If you want to know more about the kind of data we collect and what we use it for, check the &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;telemetry section&lt;/a&gt; of our documentation.&lt;/p&gt; 
&lt;h2&gt;📫 Get in touch!&lt;/h2&gt; 
&lt;p&gt;Meilisearch is a search engine created by &lt;a href="https://www.meilisearch.com/careers"&gt;Meili&lt;/a&gt;, a software development company headquartered in France and with team members all over the world. Want to know more about us? &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Check out our blog!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🗞 &lt;a href="https://meilisearch.us2.list-manage.com/subscribe?u=27870f7b71c908a8b359599fb&amp;amp;id=79582d828e"&gt;Subscribe to our newsletter&lt;/a&gt; if you don't want to miss any updates! We promise we won't clutter your mailbox: we only send one edition every two months.&lt;/p&gt; 
&lt;p&gt;💌 Want to make a suggestion or give feedback? Here are some of the channels where you can reach us:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For feature requests, please visit our &lt;a href="https://github.com/meilisearch/product/discussions"&gt;product repository&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Found a bug? Open an &lt;a href="https://github.com/meilisearch/meilisearch/issues"&gt;issue&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Want to be part of our Discord community? &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Join us!&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you for your support!&lt;/p&gt; 
&lt;h2&gt;👩‍💻 Contributing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is, and will always be, open-source! If you want to contribute to the project, please look at &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/CONTRIBUTING.md"&gt;our contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📦 Versioning&lt;/h2&gt; 
&lt;p&gt;Meilisearch releases and their associated binaries are available on the project's &lt;a href="https://github.com/meilisearch/meilisearch/releases"&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The binaries are versioned following &lt;a href="https://semver.org/"&gt;SemVer conventions&lt;/a&gt;. To know more, read our &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/documentation/versioning-policy.md"&gt;versioning policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Differently from the binaries, crates in this repository are not currently available on &lt;a href="https://crates.io/"&gt;crates.io&lt;/a&gt; and do not follow &lt;a href="https://semver.org"&gt;SemVer conventions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jj-vcs/jj</title>
      <link>https://github.com/jj-vcs/jj</link>
      <description>&lt;p&gt;A Git-compatible VCS that is both simple and powerful&lt;/p&gt;&lt;hr&gt;&lt;div class="title-block" style="text-align: center;" align="center"&gt; 
 &lt;h1&gt;Jujutsu—a version control system&lt;/h1&gt; 
 &lt;p&gt;&lt;img title="jj logo" src="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/jj-logo.svg?sanitize=true" width="320" height="320" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/martinvonz/jj" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/release-date/martinvonz/jj" alt="Release date" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/jj-vcs/jj/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/martinvonz/jj" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;img src="https://img.shields.io/badge/irc-%23jujutsu-blue.svg?sanitize=true" alt="IRC" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj"&gt;Homepage&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;Installation&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/roadmap"&gt;Development Roadmap&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Jujutsu is a powerful &lt;a href="https://en.wikipedia.org/wiki/Version_control"&gt;version control system&lt;/a&gt; for software projects. You use it to get a copy of your code, track changes to the code, and finally publish those changes for others to see and use. It is designed from the ground up to be easy to use—whether you're new or experienced, working on brand new projects alone, or large scale software projects with large histories and teams.&lt;/p&gt; 
&lt;p&gt;Jujutsu is unlike most other systems, because internally it abstracts the user interface and version control algorithms from the &lt;em&gt;storage systems&lt;/em&gt; used to serve your content. This allows it to serve as a VCS with many possible physical backends, that may have their own data or networking models—like &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt; or &lt;a href="https://www.breezy-vcs.org/"&gt;Breezy&lt;/a&gt;, or hybrid systems like Google's cloud-based design, &lt;a href="https://youtu.be/W71BTkUbdqE?t=645"&gt;Piper/CitC&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Today, we use Git repositories as a storage layer to serve and track content, making it &lt;strong&gt;compatible with many of your favorite Git-based tools, right now!&lt;/strong&gt; All core developers use Jujutsu to develop Jujutsu, right here on GitHub. But it should hopefully work with your favorite Git forges, too.&lt;/p&gt; 
&lt;p&gt;We combine many distinct design choices and concepts from other version control systems into a single tool. Some of those sources of inspiration include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;: We make an effort to &lt;a href="https://github.com/jj-vcs/jj/discussions/49"&gt;be fast&lt;/a&gt;—with a snappy UX, efficient algorithms, correct data structures, and good-old-fashioned attention to detail. The default storage backend uses Git repositories for "physical storage", for wide interoperability and ease of onboarding.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mercurial &amp;amp; Sapling&lt;/strong&gt;: There are many Mercurial-inspired features, such as the &lt;a href="https://jj-vcs.github.io/jj/latest/revsets/"&gt;revset&lt;/a&gt; language to select commits. There is &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison/#the-index"&gt;no explicit index&lt;/a&gt; or staging area. Branches are "anonymous" like Mercurial, so you don't need to make up a name for each small change. Primitives for rewriting history are powerful and simple. Formatting output is done with a robust template language that can be configured by the user.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Darcs&lt;/strong&gt;: Jujutsu keeps track of conflicts as &lt;a href="https://jj-vcs.github.io/jj/latest/conflicts/"&gt;first-class objects&lt;/a&gt; in its model; they are first-class in the same way commits are, while alternatives like Git simply think of conflicts as textual diffs. While not as rigorous as systems like Darcs (which is based on a formalized theory of patches, as opposed to snapshots), the effect is that many forms of conflict resolution can be performed and propagated automatically.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And it adds several innovative, useful features of its own:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Working-copy-as-a-commit&lt;/strong&gt;: Changes to files are &lt;a href="https://jj-vcs.github.io/jj/latest/working-copy/"&gt;recorded automatically&lt;/a&gt; as normal commits, and amended on every subsequent change. This "snapshot" design simplifies the user-facing data model (commits are the only visible object), simplifies internal algorithms, and completely subsumes features like Git's stashes or the index/staging-area.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Operation log &amp;amp; undo&lt;/strong&gt;: Jujutsu records every operation that is performed on the repository, from commits, to pulls, to pushes. This makes debugging problems like "what just happened?" or "how did I end up here?" easier, &lt;em&gt;especially&lt;/em&gt; when you're helping your coworker answer those questions about their repository! And because everything is recorded, you can undo that mistake you just made with ease. Version control has finally entered &lt;a href="https://en.wikipedia.org/wiki/Undo#History"&gt;the 1960s&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic rebase and conflict resolution&lt;/strong&gt;: When you modify a commit, every descendent is automatically rebased on top of the freshly-modified one. This makes "patch-based" workflows a breeze. If you resolve a conflict in a commit, the &lt;em&gt;resolution&lt;/em&gt; of that conflict is also propagated through descendants as well. In effect, this is a completely transparent version of &lt;code&gt;git rebase --update-refs&lt;/code&gt; combined with &lt;code&gt;git rerere&lt;/code&gt;, supported by design.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The following features are available for use, but experimental; they may have bugs, backwards incompatible storage changes, and user-interface changes!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Safe, concurrent replication&lt;/strong&gt;: Have you ever wanted to store your version controlled repositories inside a Dropbox folder? Or continuously backup repositories to S3? No? Well, now you can!&lt;/p&gt; &lt;p&gt;The fundamental problem with using filesystems like Dropbox and backup tools like &lt;code&gt;rsync&lt;/code&gt; on your typical Git/Mercurial repositories is that they rely on &lt;em&gt;local filesystem operations&lt;/em&gt; being atomic, serialized, and non-concurrent with respect to other reads and writes—which is &lt;em&gt;not&lt;/em&gt; true when operating on distributed file systems, or when operations like concurrent file copies (for backup) happen while lock files are being held.&lt;/p&gt; &lt;p&gt;Jujutsu is instead designed to be &lt;a href="https://jj-vcs.github.io/jj/latest/technical/concurrency/"&gt;safe under concurrent scenarios&lt;/a&gt;; simply using rsync or Dropbox and then using that resulting repository should never result in a repository in a &lt;em&gt;corrupt state&lt;/em&gt;. The worst that &lt;em&gt;should&lt;/em&gt; happen is that it will expose conflicts between the local and remote state, leaving you to resolve them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The command-line tool is called &lt;code&gt;jj&lt;/code&gt; for now because it's easy to type and easy to replace (rare in English). The project is called "Jujutsu" because it matches "jj".&lt;/p&gt; 
&lt;p&gt;Jujutsu is relatively young, with lots of work to still be done. If you have any questions, or want to talk about future plans, please join us on Discord &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt;, start a &lt;a href="https://github.com/jj-vcs/jj/discussions"&gt;GitHub Discussion&lt;/a&gt;, or send an IRC message to &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;code&gt;#jujutsu&lt;/code&gt; on Libera Chat&lt;/a&gt;. The developers monitor all of these channels[^bridge].&lt;/p&gt; 
&lt;p&gt;[^bridge]: To be more precise, the &lt;code&gt;#jujutsu&lt;/code&gt; Libera IRC channel is bridged to one of the channels on jj's Discord. Some of the developers stay on Discord and use the bridge to follow IRC.&lt;/p&gt; 
&lt;h3&gt;News and Updates 📣&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;December 2024&lt;/strong&gt;: The &lt;code&gt;jj&lt;/code&gt; Repository has moved to the &lt;code&gt;jj-vcs&lt;/code&gt; GitHub organisation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;November 2024&lt;/strong&gt;: Version 0.24 is released which adds &lt;code&gt;jj file annotate&lt;/code&gt;, which is equivalent to &lt;code&gt;git blame&lt;/code&gt; or &lt;code&gt;hg annotate&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;September 2024&lt;/strong&gt;: Martin gave a &lt;a href="https://www.youtube.com/watch?v=LV0JzI8IcCY"&gt;presentation about Jujutsu&lt;/a&gt; at Git Merge 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Version 0.14 is released, which deprecates &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/CHANGELOG.md#0140---2024-02-07"&gt;"jj checkout" and "jj merge"&lt;/a&gt;, as well as &lt;code&gt;jj init --git&lt;/code&gt;, which is now just called &lt;code&gt;jj git init&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Oct 2023&lt;/strong&gt;: Version 0.10.0 is released! Now includes a bundled merge and diff editor for all platforms, "immutable revsets" to avoid accidentally &lt;code&gt;edit&lt;/code&gt;-ing the wrong revisions, and lots of polish.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin gave a presentation about Google's plans for Jujutsu at Git Merge 2022! See the &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt; or the &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;recording&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Related Media&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mar 2024&lt;/strong&gt;: Chris Krycho started &lt;a href="https://www.youtube.com/playlist?list=PLelyiwKWHHAq01Pvmpf6x7J0y-yQpmtxp"&gt;a YouTube series about Jujutsu&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Chris Krycho published an article about Jujutsu called &lt;a href="https://v5.chriskrycho.com/essays/jj-init/"&gt;jj init&lt;/a&gt; and Steve Klabnik followed up with the &lt;a href="https://steveklabnik.github.io/jujutsu-tutorial/"&gt;Jujutsu Tutorial&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2024&lt;/strong&gt;: Jujutsu was featured in an LWN.net article called &lt;a href="https://lwn.net/Articles/958468/"&gt;Jujutsu: a new, Git-compatible version control system&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin's Talk about Jujutsu at Git Merge 2022, &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;video&lt;/a&gt; and the associated &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The wiki also contains a more extensive list of &lt;a href="https://github.com/jj-vcs/jj/wiki/Media"&gt;media references&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Jujutsu is an &lt;strong&gt;experimental version control system&lt;/strong&gt;. While Git compatibility is stable, and most developers use it daily for all their needs, there may still be work-in-progress features, suboptimal UX, and workflow gaps that make it unusable for your particular use.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Follow the &lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;installation instructions&lt;/a&gt; to obtain and configure &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The best way to get started is probably to go through &lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;the tutorial&lt;/a&gt;. Also see the &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison"&gt;Git comparison&lt;/a&gt;, which includes a table of &lt;code&gt;jj&lt;/code&gt; vs. &lt;code&gt;git&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;As you become more familiar with Jujutsu, the following resources may be helpful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/FAQ"&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/glossary"&gt;Glossary&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help&lt;/code&gt; command (e.g. &lt;code&gt;jj help rebase&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help -k &amp;lt;keyword&amp;gt;&lt;/code&gt; command (e.g. &lt;code&gt;jj help -k config&lt;/code&gt;). Use &lt;code&gt;jj help --help&lt;/code&gt; to see what keywords are available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are using a &lt;strong&gt;prerelease&lt;/strong&gt; version of &lt;code&gt;jj&lt;/code&gt;, you would want to consult &lt;a href="https://jj-vcs.github.io/jj/prerelease/"&gt;the docs for the prerelease (main branch) version&lt;/a&gt;. You can also get there from the docs for the latest release by using the website's version switcher. The version switcher is visible in the header of the website when you scroll to the top of any page.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Compatible with Git&lt;/h3&gt; 
&lt;p&gt;Jujutsu is designed so that the underlying data and storage model is abstract. Today, only the Git backend is production-ready. The Git backend uses the &lt;a href="https://github.com/Byron/gitoxide"&gt;gitoxide&lt;/a&gt; Rust library.&lt;/p&gt; 
&lt;p&gt;The Git backend is fully featured and maintained, and allows you to use Jujutsu with any Git remote. The commits you create will look like regular Git commits. You can fetch branches from a regular Git remote and push branches to the remote. You can always switch back to Git.&lt;/p&gt; 
&lt;p&gt;Here is how you can explore a GitHub repository with &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/git_compat.png" /&gt; 
&lt;p&gt;You can even have a &lt;a href="https://jj-vcs.github.io/jj/latest/git-compatibility#co-located-jujutsugit-repos"&gt;"co-located" local repository&lt;/a&gt; where you can use both &lt;code&gt;jj&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; commands interchangeably.&lt;/p&gt; 
&lt;h3&gt;The working copy is automatically committed&lt;/h3&gt; 
&lt;p&gt;Jujutsu uses a real commit to represent the working copy. Checking out a commit results a new working-copy commit on top of the target commit. Almost all commands automatically amend the working-copy commit.&lt;/p&gt; 
&lt;p&gt;The working-copy being a commit means that commands never fail because the working copy is dirty (no "error: Your local changes to the following files..."), and there is no need for &lt;code&gt;git stash&lt;/code&gt;. Also, because the working copy is a commit, commands work the same way on the working-copy commit as on any other commit, so you can set the commit message before you're done with the changes.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/working_copy.png" /&gt; 
&lt;h3&gt;The repo is the source of truth&lt;/h3&gt; 
&lt;p&gt;With Jujutsu, the working copy plays a smaller role than with Git. Commands snapshot the working copy before they start, then they update the repo, and then the working copy is updated (if the working-copy commit was modified). Almost all commands (even checkout!) operate on the commits in the repo, leaving the common functionality of snapshotting and updating of the working copy to centralized code. For example, &lt;code&gt;jj restore&lt;/code&gt; (similar to &lt;code&gt;git restore&lt;/code&gt;) can restore from any commit and into any commit, and &lt;code&gt;jj describe&lt;/code&gt; can set the commit message of any commit (defaults to the working-copy commit).&lt;/p&gt; 
&lt;h3&gt;Entire repo is under version control&lt;/h3&gt; 
&lt;p&gt;All operations you perform in the repo are recorded, along with a snapshot of the repo state after the operation. This means that you can easily restore to an earlier repo state, simply undo your operations one-by-one or even &lt;em&gt;revert&lt;/em&gt; a particular operation which does not have to be the most recent one.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/operation_log.png" /&gt; 
&lt;h3&gt;Conflicts can be recorded in commits&lt;/h3&gt; 
&lt;p&gt;If an operation results in &lt;a href="https://jj-vcs.github.io/jj/latest/glossary#conflict"&gt;conflicts&lt;/a&gt;, information about those conflicts will be recorded in the commit(s). The operation will succeed. You can then resolve the conflicts later. One consequence of this design is that there's no need to continue interrupted operations. Instead, you get a single workflow for resolving conflicts, regardless of which command caused them. This design also lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).&lt;/p&gt; 
&lt;p&gt;Basic conflict resolution:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/resolve_conflicts.png" /&gt; 
&lt;p&gt;Juggling conflicts:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/juggle_conflicts.png" /&gt; 
&lt;h3&gt;Automatic rebase&lt;/h3&gt; 
&lt;p&gt;Whenever you modify a commit, any descendants of the old commit will be rebased onto the new commit. Thanks to the conflict design described above, that can be done even if there are conflicts. Bookmarks pointing to rebased commits will be updated. So will the working copy if it points to a rebased commit.&lt;/p&gt; 
&lt;h3&gt;Comprehensive support for rewriting history&lt;/h3&gt; 
&lt;p&gt;Besides the usual rebase command, there's &lt;code&gt;jj describe&lt;/code&gt; for editing the description (commit message) of an arbitrary commit. There's also &lt;code&gt;jj diffedit&lt;/code&gt;, which lets you edit the changes in a commit without checking it out. To split a commit into two, use &lt;code&gt;jj split&lt;/code&gt;. You can even move part of the changes in a commit to any other commit using &lt;code&gt;jj squash -i --from X --into Y&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;The tool is fairly feature-complete, but some important features like support for Git submodules are not yet completed. There are also several performance bugs. It's likely that workflows and setups different from what the core developers use are not well supported, e.g. there is no native support for email-based workflows.&lt;/p&gt; 
&lt;p&gt;Today, all core developers use &lt;code&gt;jj&lt;/code&gt; to work on &lt;code&gt;jj&lt;/code&gt;. I (Martin von Zweigbergk) have almost exclusively used &lt;code&gt;jj&lt;/code&gt; to develop the project itself since early January 2021. I haven't had to re-clone from source (I don't think I've even had to restore from backup).&lt;/p&gt; 
&lt;p&gt;There &lt;em&gt;will&lt;/em&gt; be changes to workflows and backward-incompatible changes to the on-disk formats before version 1.0.0. For any format changes, we'll try to implement transparent upgrades (as we've done with recent changes), or provide upgrade commands or scripts if requested.&lt;/p&gt; 
&lt;h2&gt;Related work&lt;/h2&gt; 
&lt;p&gt;There are several tools trying to solve similar problems as Jujutsu. See &lt;a href="https://jj-vcs.github.io/jj/latest/related-work"&gt;related work&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome outside contributions, and there's plenty of things to do, so don't be shy. Please ask if you want a pointer on something you can help with, and hopefully we can all figure something out.&lt;/p&gt; 
&lt;p&gt;We do have &lt;a href="https://jj-vcs.github.io/jj/prerelease/contributing/"&gt;a few policies and suggestions&lt;/a&gt; for contributors. The broad TL;DR:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug reports are very welcome!&lt;/li&gt; 
 &lt;li&gt;Every commit that lands in the &lt;code&gt;main&lt;/code&gt; branch is code reviewed.&lt;/li&gt; 
 &lt;li&gt;Please behave yourself, and obey the Community Guidelines.&lt;/li&gt; 
 &lt;li&gt;There &lt;strong&gt;is&lt;/strong&gt; a mandatory CLA you must agree to. Importantly, it &lt;strong&gt;does not&lt;/strong&gt; transfer copyright ownership to Google or anyone else; it simply gives us the right to safely redistribute and use your changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mandatory Google Disclaimer&lt;/h3&gt; 
&lt;p&gt;I (Martin von Zweigbergk, &lt;a href="mailto:martinvonz@google.com"&gt;martinvonz@google.com&lt;/a&gt;) started Jujutsu as a hobby project in late 2019, and it has evolved into my full-time project at Google, with several other Googlers (now) assisting development in various capacities. That said, &lt;strong&gt;this is not a Google product&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Jujutsu is available as Open Source Software, under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details about copyright and redistribution.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;jj&lt;/code&gt; logo was contributed by J. Jennings and is licensed under a Creative Commons License, see &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/LICENSE"&gt;&lt;code&gt;docs/images/LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>chroma-core/chroma</title>
      <link>https://github.com/chroma-core/chroma</link>
      <description>&lt;p&gt;Open-source search and retrieval database for AI applications.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://trychroma.com"&gt;&lt;img src="https://user-images.githubusercontent.com/891664/227103090-6624bf7d-9524-4e05-9d2c-c28d5d451481.png" alt="Chroma logo" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;b&gt;Chroma - the open-source embedding database&lt;/b&gt;. &lt;br /&gt; The fastest way to build Python or JavaScript LLM apps with memory! &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.gg/MMeYNTmh3x" target="_blank"&gt; &lt;img src="https://img.shields.io/discord/1073293645303795742?cacheSeconds=3600" alt="Discord" /&gt; &lt;/a&gt; | &lt;a href="https://github.com/chroma-core/chroma/raw/master/LICENSE" target="_blank"&gt; &lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" alt="License" /&gt; &lt;/a&gt; | &lt;a href="https://docs.trychroma.com/" target="_blank"&gt; Docs &lt;/a&gt; | &lt;a href="https://www.trychroma.com/" target="_blank"&gt; Homepage &lt;/a&gt; &lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install chromadb # python client
# for javascript, npm install chromadb!
# for client-server mode, chroma run --path /chroma_db_path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Chroma Cloud&lt;/h2&gt; 
&lt;p&gt;Our hosted service, Chroma Cloud, powers serverless vector and full-text search. It's extremely fast, cost-effective, scalable and painless. Create a DB and try it out in under 30 seconds with $5 of free credits.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://trychroma.com/signup"&gt;Get started with Chroma Cloud&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;The core API is only 4 functions (run our &lt;a href="https://colab.research.google.com/drive/1QEzFyqnoFxq7LUGyP1vzR4iLt9PpCDXv?usp=sharing"&gt;💡 Google Colab&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import chromadb
# setup Chroma in-memory, for easy prototyping. Can add persistence easily!
client = chromadb.Client()

# Create collection. get_collection, get_or_create_collection, delete_collection also available!
collection = client.create_collection("all-my-documents")

# Add docs to the collection. Can also update and delete. Row-based API coming soon!
collection.add(
    documents=["This is document1", "This is document2"], # we handle tokenization, embedding, and indexing automatically. You can skip that and add your own embeddings as well
    metadatas=[{"source": "notion"}, {"source": "google-docs"}], # filter on these!
    ids=["doc1", "doc2"], # unique for each doc
)

# Query/search 2 most similar results. You can also .get by id
results = collection.query(
    query_texts=["This is a query document"],
    n_results=2,
    # where={"metadata_field": "is_equal_to_this"}, # optional filter
    # where_document={"$contains":"search_string"}  # optional filter
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn about all features on our &lt;a href="https://docs.trychroma.com"&gt;Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Fully-typed, fully-tested, fully-documented == happiness&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: &lt;a href="https://blog.langchain.dev/langchain-chroma/"&gt;&lt;code&gt;🦜️🔗 LangChain&lt;/code&gt;&lt;/a&gt; (python and js), &lt;a href="https://twitter.com/atroyn/status/1628557389762007040"&gt;&lt;code&gt;🦙 LlamaIndex&lt;/code&gt;&lt;/a&gt; and more soon&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dev, Test, Prod&lt;/strong&gt;: the same API that runs in your python notebook, scales to your cluster&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feature-rich&lt;/strong&gt;: Queries, filtering, regex and more&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free &amp;amp; Open Source&lt;/strong&gt;: Apache 2.0 Licensed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Use case: ChatGPT for ______&lt;/h2&gt; 
&lt;p&gt;For example, the &lt;code&gt;"Chat your data"&lt;/code&gt; use case:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add documents to your database. You can pass in your own embeddings, embedding function, or let Chroma embed them for you.&lt;/li&gt; 
 &lt;li&gt;Query relevant documents with natural language.&lt;/li&gt; 
 &lt;li&gt;Compose documents into the context window of an LLM like &lt;code&gt;GPT4&lt;/code&gt; for additional summarization or analysis.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Embeddings?&lt;/h2&gt; 
&lt;p&gt;What are embeddings?&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://platform.openai.com/docs/guides/embeddings/what-are-embeddings"&gt;Read the guide from OpenAI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Literal&lt;/strong&gt;: Embedding something turns it from image/text/audio into a list of numbers. 🖼️ or 📄 =&amp;gt; &lt;code&gt;[1.2, 2.1, ....]&lt;/code&gt;. This process makes documents "understandable" to a machine learning model.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;By analogy&lt;/strong&gt;: An embedding represents the essence of a document. This enables documents and queries with the same essence to be "near" each other and therefore easy to find.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Technical&lt;/strong&gt;: An embedding is the latent-space position of a document at a layer of a deep neural network. For models trained specifically to embed data, this is the last layer.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;A small example&lt;/strong&gt;: If you search your photos for "famous bridge in San Francisco". By embedding this query and comparing it to the embeddings of your photos and their metadata - it should return photos of the Golden Gate Bridge.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Embeddings databases (also known as &lt;strong&gt;vector databases&lt;/strong&gt;) store embeddings and allow you to search by nearest neighbors rather than by substrings like a traditional database. By default, Chroma uses &lt;a href="https://docs.trychroma.com/guides/embeddings#default:-all-minilm-l6-v2"&gt;Sentence Transformers&lt;/a&gt; to embed for you but you can also use OpenAI embeddings, Cohere (multilingual) embeddings, or your own.&lt;/p&gt; 
&lt;h2&gt;Get involved&lt;/h2&gt; 
&lt;p&gt;Chroma is a rapidly developing project. We welcome PR contributors and ideas for how to improve the project.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/MMeYNTmh3x"&gt;Join the conversation on Discord&lt;/a&gt; - &lt;code&gt;#contributing&lt;/code&gt; channel&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.trychroma.com/roadmap"&gt;Review the 🛣️ Roadmap and contribute your ideas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chroma-core/chroma/issues"&gt;Grab an issue and open a PR&lt;/a&gt; - &lt;a href="https://github.com/chroma-core/chroma/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;&lt;code&gt;Good first issue tag&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.trychroma.com/contributing"&gt;Read our contributing guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Release Cadence&lt;/strong&gt; We currently release new tagged versions of the &lt;code&gt;pypi&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; packages on Mondays. Hotfixes go out at any time during the week.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/chroma-core/chroma/main/LICENSE"&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://zed.dev"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/zed-industries/zed/main/assets/badge/v0.json" alt="Zed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zed-industries/zed/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href="https://github.com/atom/atom"&gt;Atom&lt;/a&gt; and &lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;On macOS and Linux you can &lt;a href="https://zed.dev/download"&gt;download Zed directly&lt;/a&gt; or &lt;a href="https://zed.dev/docs/linux#installing-via-a-package-manager"&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (&lt;a href="https://github.com/zed-industries/zed/issues/5394"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Web (&lt;a href="https://github.com/zed-industries/zed/issues/5396"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md"&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md"&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md"&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md"&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we're hiring! Check out our &lt;a href="https://zed.dev/jobs"&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href="https://github.com/EmbarkStudios/cargo-about"&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you've created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate's Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license's requirements. If you're unsure, ask a lawyer. Once you've verified that this system is acceptable add the license's SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href="https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration"&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Priler/jarvis</title>
      <link>https://github.com/Priler/jarvis</link>
      <description>&lt;p&gt;Voice assistant made as an experiment using neural networks for things like STT/TTS/Wake Word/NLU etc.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JARVIS Voice Assistant&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Priler/jarvis/master/poster.jpg" alt="We are NOT limited by the technology of our time!" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Jarvis&lt;/code&gt; - is a voice assistant made as an experiment using neural networks for things like &lt;strong&gt;STT/TTS/Wake Word/NLU&lt;/strong&gt; etc.&lt;/p&gt; 
&lt;p&gt;The main project challenges we try to achieve is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% offline &lt;em&gt;(no cloud)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Open source &lt;em&gt;(full transparency)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;No data collection &lt;em&gt;(we respect your privacy)&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Our backend stack is 🦀 &lt;strong&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;&lt;/strong&gt; with ❤️ &lt;strong&gt;&lt;a href="https://tauri.app/"&gt;Tauri&lt;/a&gt;&lt;/strong&gt;.&lt;br /&gt; For the frontend we use ⚡️ &lt;strong&gt;&lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt;&lt;/strong&gt; + 🛠️ &lt;strong&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Other libraries, tools and packages can be found in source code.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Neural Networks&lt;/h2&gt; 
&lt;p&gt;This are the neural networks we are currently using:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Speech-To-Text 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alphacep/vosk-api"&gt;Vosk Speech Recognition Toolkit&lt;/a&gt; via &lt;a href="https://github.com/Bear-03/vosk-rs"&gt;Vosk-rs&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Text-To-Speech 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/snakers4/silero-models"&gt;&lt;del&gt;Silero TTS&lt;/del&gt;&lt;/a&gt; &lt;em&gt;(currently not used)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/coqui-ai/TTS"&gt;&lt;del&gt;Coqui TTS&lt;/del&gt;&lt;/a&gt; &lt;em&gt;(currently not used)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ndarilek/tts-rs"&gt;&lt;del&gt;WinRT&lt;/del&gt;&lt;/a&gt; &lt;em&gt;(currently not used)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nightlyistaken/tts_rust"&gt;&lt;del&gt;gTTS&lt;/del&gt;&lt;/a&gt; &lt;em&gt;(currently not used)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/s-macke/SAM"&gt;&lt;del&gt;SAM&lt;/del&gt;&lt;/a&gt; &lt;em&gt;(currently not used)&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Wake Word 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GiviMAD/rustpotter"&gt;Rustpotter&lt;/a&gt; &lt;em&gt;(Partially implemented, still WIP)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Picovoice/porcupine"&gt;Picovoice Porcupine&lt;/a&gt; via &lt;a href="https://github.com/Picovoice/porcupine#rust"&gt;official SDK&lt;/a&gt; &lt;em&gt;(requires API key)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alphacep/vosk-api"&gt;Vosk Speech Recognition Toolkit&lt;/a&gt; via &lt;a href="https://github.com/Bear-03/vosk-rs"&gt;Vosk-rs&lt;/a&gt; &lt;em&gt;(very slow)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;[&lt;del&gt;Snowboy&lt;/del&gt;] &lt;em&gt;(currently not used)&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NLU 
  &lt;ul&gt; 
   &lt;li&gt;Nothing yet.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Chat 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://chat.openai.com/"&gt;&lt;del&gt;ChatGPT&lt;/del&gt;&lt;/a&gt; (coming soon)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Languages&lt;/h2&gt; 
&lt;p&gt;Currently, only Russian language is supported.&lt;br /&gt; But soon, Ukranian and English will be added for the interface, wake-word detection and speech recognition.&lt;/p&gt; 
&lt;h2&gt;How to build?&lt;/h2&gt; 
&lt;p&gt;Nothing special was used to build this project.&lt;br /&gt; You need only Rust and NodeJS installed on your system.&lt;br /&gt; Other than that, all you need is to install all the dependencies and then compile the code with &lt;code&gt;cargo tauri build&lt;/code&gt; command.&lt;br /&gt; Or run dev with &lt;code&gt;cargo tauri dev&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt; &lt;em&gt;Thought you might need some of the platform specific libraries for &lt;a href="https://github.com/Picovoice/pvrecorder"&gt;PvRecorder&lt;/a&gt; and &lt;a href="https://github.com/alphacep/vosk-api"&gt;Vosk&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;p&gt;Abraham Tugalov&lt;/p&gt; 
&lt;h2&gt;Python version?&lt;/h2&gt; 
&lt;p&gt;Old version of Jarvis was built with Python.&lt;br /&gt; The last Python version commit can be found &lt;a href="https://github.com/Priler/jarvis/tree/943efbfbdb8aeb5889fa5e2dc7348ca4ea0b81df"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;Attribution-NonCommercial-ShareAlike 4.0 International&lt;/a&gt;&lt;br /&gt; See LICENSE.txt file for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>leptos-rs/leptos</title>
      <link>https://github.com/leptos-rs/leptos</link>
      <description>&lt;p&gt;Build fast web applications with Rust.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source srcset="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_pref_dark_RGB.svg" media="(prefers-color-scheme: dark)" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_RGB.svg?sanitize=true" alt="Leptos Logo" /&gt; 
&lt;/picture&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/leptos"&gt;&lt;img src="https://img.shields.io/crates/v/leptos.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/leptos"&gt;&lt;img src="https://docs.rs/leptos/badge.svg?sanitize=true" alt="docs.rs" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/msrv/leptos" alt="Crates.io MSRV" /&gt; &lt;a href="https://discord.gg/YdRAhS7eQB"&gt;&lt;img src="https://img.shields.io/discord/1031524867910148188?color=%237289DA&amp;amp;label=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/#leptos:matrix.org"&gt;&lt;img src="https://img.shields.io/badge/Matrix-leptos-grey?logo=matrix&amp;amp;labelColor=white&amp;amp;logoColor=black" alt="Matrix" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://leptos.dev"&gt;Website&lt;/a&gt; | &lt;a href="https://leptos-rs.github.io/leptos/"&gt;Book&lt;/a&gt; | &lt;a href="https://docs.rs/leptos/latest/leptos/"&gt;Docs.rs&lt;/a&gt; | &lt;a href="https://codesandbox.io/p/sandbox/leptos-rtfggt?file=%2Fsrc%2Fmain.rs%3A1%2C1"&gt;Playground&lt;/a&gt; | &lt;a href="https://discord.gg/YdRAhS7eQB"&gt;Discord&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can find a list of useful libraries and example projects at &lt;a href="https://github.com/leptos-rs/awesome-leptos"&gt;&lt;code&gt;awesome-leptos&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Leptos&lt;/h1&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use leptos::*;

#[component]
pub fn SimpleCounter(initial_value: i32) -&amp;gt; impl IntoView {
    // create a reactive signal with the initial value
    let (value, set_value) = signal(initial_value);

    // create event handlers for our buttons
    // note that `value` and `set_value` are `Copy`, so it's super easy to move them into closures
    let clear = move |_| set_value(0);
    let decrement = move |_| set_value.update(|value| *value -= 1);
    let increment = move |_| set_value.update(|value| *value += 1);

    // create user interfaces with the declarative `view!` macro
    view! {
        &amp;lt;div&amp;gt;
            &amp;lt;button on:click=clear&amp;gt;Clear&amp;lt;/button&amp;gt;
            &amp;lt;button on:click=decrement&amp;gt;-1&amp;lt;/button&amp;gt;
            // text nodes can be quoted or unquoted
            &amp;lt;span&amp;gt;"Value: " {value} "!"&amp;lt;/span&amp;gt;
            &amp;lt;button on:click=increment&amp;gt;+1&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    }
}

// we also support a builder syntax rather than the JSX-like `view` macro
#[component]
pub fn SimpleCounterWithBuilder(initial_value: i32) -&amp;gt; impl IntoView {
    use leptos::html::*;

    let (value, set_value) = signal(initial_value);
    let clear = move |_| set_value(0);
    let decrement = move |_| set_value.update(|value| *value -= 1);
    let increment = move |_| set_value.update(|value| *value += 1);

    // the `view` macro above expands to this builder syntax
    div().child((
        button().on(ev::click, clear).child("Clear"),
        button().on(ev::click, decrement).child("-1"),
        span().child(("Value: ", value, "!")),
        button().on(ev::click, increment).child("+1")
    ))
}

// Easy to use with Trunk (trunkrs.dev) or with a simple wasm-bindgen setup
pub fn main() {
    mount_to_body(|| view! {
        &amp;lt;SimpleCounter initial_value=3 /&amp;gt;
    })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;About the Framework&lt;/h2&gt; 
&lt;p&gt;Leptos is a full-stack, isomorphic Rust web framework leveraging fine-grained reactivity to build declarative user interfaces.&lt;/p&gt; 
&lt;h2&gt;What does that mean?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Full-stack&lt;/strong&gt;: Leptos can be used to build apps that run in the browser (client-side rendering), on the server (server-side rendering), or by rendering HTML on the server and then adding interactivity in the browser (server-side rendering with hydration). This includes support for HTTP streaming of both data (&lt;a href="https://docs.rs/leptos/latest/leptos/struct.Resource.html"&gt;&lt;code&gt;Resource&lt;/code&gt;s&lt;/a&gt;) and HTML (out-of-order or in-order streaming of &lt;a href="https://docs.rs/leptos/latest/leptos/fn.Suspense.html"&gt;&lt;code&gt;&amp;lt;Suspense/&amp;gt;&lt;/code&gt;&lt;/a&gt; components.)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Isomorphic&lt;/strong&gt;: Leptos provides primitives to write isomorphic &lt;a href="https://docs.rs/leptos_server/0.2.5/leptos_server/index.html"&gt;server functions&lt;/a&gt;, i.e., functions that can be called with the “same shape” on the client or server, but only run on the server. This means you can write your server-only logic (database requests, authentication etc.) alongside the client-side components that will consume it, and call server functions as if they were running in the browser, without needing to create and maintain a separate REST or other API.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;: Leptos is built on the Web platform and Web standards. The &lt;a href="https://docs.rs/leptos_router/latest/leptos_router/"&gt;router&lt;/a&gt; is designed to use Web fundamentals (like links and forms) and build on top of them rather than trying to replace them.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Framework&lt;/strong&gt;: Leptos provides most of what you need to build a modern web app: a reactive system, templating library, and a router that works on both the server and client side.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fine-grained reactivity&lt;/strong&gt;: The entire framework is built from reactive primitives. This allows for extremely performant code with minimal overhead: when a reactive signal’s value changes, it can update a single text node, toggle a single class, or remove an element from the DOM without any other code running. (So, no virtual DOM overhead!)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Declarative&lt;/strong&gt;: Tell Leptos how you want the page to look, and let the framework tell the browser how to do it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn more&lt;/h2&gt; 
&lt;p&gt;Here are some resources for learning more about Leptos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://leptos-rs.github.io/leptos/"&gt;Book&lt;/a&gt; (work in progress)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/leptos-rs/leptos/tree/main/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/leptos/latest/leptos/"&gt;API Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/leptos-rs/leptos/tree/main/docs/COMMON_BUGS.md"&gt;Common Bugs&lt;/a&gt; (and how to fix them!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;code&gt;cargo-leptos&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/leptos-rs/cargo-leptos"&gt;&lt;code&gt;cargo-leptos&lt;/code&gt;&lt;/a&gt; is a build tool that's designed to make it easy to build apps that run on both the client and the server, with seamless integration. The best way to get started with a real Leptos project right now is to use &lt;code&gt;cargo-leptos&lt;/code&gt; and our starter templates for &lt;a href="https://github.com/leptos-rs/start"&gt;Actix&lt;/a&gt; or &lt;a href="https://github.com/leptos-rs/start-axum"&gt;Axum&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install cargo-leptos
cargo leptos new --git https://github.com/leptos-rs/start-axum
cd [your project name]
cargo leptos watch
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open browser to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;FAQs&lt;/h2&gt; 
&lt;h3&gt;What’s up with the name?&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Leptos&lt;/em&gt; (λεπτός) is an ancient Greek word meaning “thin, light, refined, fine-grained.” To me, a classicist and not a dog owner, it evokes the lightweight reactive system that powers the framework. I've since learned the same word is at the root of the medical term “leptospirosis,” a blood infection that affects humans and animals... My bad. No dogs were harmed in the creation of this framework.&lt;/p&gt; 
&lt;h3&gt;Is it production ready?&lt;/h3&gt; 
&lt;p&gt;People usually mean one of three things by this question.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Are the APIs stable?&lt;/strong&gt; i.e., will I have to rewrite my whole app from Leptos 0.1 to 0.2 to 0.3 to 0.4, or can I write it now and benefit from new features and updates as new versions come?&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The APIs are basically settled. We’re adding new features, but we’re very happy with where the type system and patterns have landed. I would not expect major breaking changes to your code to adapt to future releases, in terms of architecture.&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;&lt;strong&gt;Are there bugs?&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Yes, I’m sure there are. You can see from the state of our issue tracker over time that there aren’t that &lt;em&gt;many&lt;/em&gt; bugs and they’re usually resolved pretty quickly. But for sure, there may be moments where you encounter something that requires a fix at the framework level, which may not be immediately resolved.&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;&lt;strong&gt;Am I a consumer or a contributor?&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This may be the big one: “production ready” implies a certain orientation to a library: that you can basically use it, without any special knowledge of its internals or ability to contribute. Everyone has this at some level in their stack: for example I (@gbj) don’t have the capacity or knowledge to contribute to something like &lt;code&gt;wasm-bindgen&lt;/code&gt; at this point: I simply rely on it to work.&lt;/p&gt; 
&lt;p&gt;There are several people in the community using Leptos right now for many websites at work, who have also become significant contributors. There may be missing features that you need, and you may end up building them! But, if you're willing to contribute a few missing pieces along the way, the framework is most definitely usable for production applications, especially given the ecosystem of libraries that have sprung up around it.&lt;/p&gt; 
&lt;h3&gt;Can I use this for native GUI?&lt;/h3&gt; 
&lt;p&gt;Sure! Obviously the &lt;code&gt;view&lt;/code&gt; macro is for generating DOM nodes but you can use the reactive system to drive any native GUI toolkit that uses the same kind of object-oriented, event-callback-based framework as the DOM pretty easily. The principles are the same:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use signals, derived signals, and memos to create your reactive system&lt;/li&gt; 
 &lt;li&gt;Create GUI widgets&lt;/li&gt; 
 &lt;li&gt;Use event listeners to update signals&lt;/li&gt; 
 &lt;li&gt;Create effects to update the UI&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The 0.7 update originally set out to create a "generic rendering" approach that would allow us to reuse most of the same view logic to do all of the above. Unfortunately, this has had to be shelved for now due to difficulties encountered by the Rust compiler when building larger-scale applications with the number of generics spread throughout the codebase that this required. It's an approach I'm looking forward to exploring again in the future; feel free to reach out if you're interested in this kind of work.&lt;/p&gt; 
&lt;h3&gt;How is this different from Yew?&lt;/h3&gt; 
&lt;p&gt;Yew is the most-used library for Rust web UI development, but there are several differences between Yew and Leptos, in philosophy, approach, and performance.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;VDOM vs. fine-grained:&lt;/strong&gt; Yew is built on the virtual DOM (VDOM) model: state changes cause components to re-render, generating a new virtual DOM tree. Yew diffs this against the previous VDOM, and applies those patches to the actual DOM. Component functions rerun whenever state changes. Leptos takes an entirely different approach. Components run once, creating (and returning) actual DOM nodes and setting up a reactive system to update those DOM nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; This has huge performance implications: Leptos is simply much faster at both creating and updating the UI than Yew is.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Server integration:&lt;/strong&gt; Yew was created in an era in which browser-rendered single-page apps (SPAs) were the dominant paradigm. While Leptos supports client-side rendering, it also focuses on integrating with the server side of your application via server functions and multiple modes of serving HTML, including out-of-order streaming.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How is this different from Dioxus?&lt;/h3&gt; 
&lt;p&gt;Like Leptos, Dioxus is a framework for building UIs using web technologies. However, there are significant differences in approach and features.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;VDOM vs. fine-grained:&lt;/strong&gt; While Dioxus has a performant virtual DOM (VDOM), it still uses coarse-grained/component-scoped reactivity: changing a stateful value reruns the component function and diffs the old UI against the new one. Leptos components use a different mental model, creating (and returning) actual DOM nodes and setting up a reactive system to update those DOM nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web vs. desktop priorities:&lt;/strong&gt; Dioxus uses Leptos server functions in its fullstack mode, but does not have the same &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt;-based support for things like streaming HTML rendering, or share the same focus on holistic web performance. Leptos tends to prioritize holistic web performance (streaming HTML rendering, smaller WASM binary sizes, etc.), whereas Dioxus has an unparalleled experience when building desktop apps, because your application logic runs as a native Rust binary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How is this different from Sycamore?&lt;/h3&gt; 
&lt;p&gt;Sycamore and Leptos are both heavily influenced by SolidJS. At this point, Leptos has a larger community and ecosystem and is more actively developed. Other differences:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Templating DSLs:&lt;/strong&gt; Sycamore uses a custom templating language for its views, while Leptos uses a JSX-like template format.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;'static&lt;/code&gt; signals:&lt;/strong&gt; One of Leptos’s main innovations was the creation of &lt;code&gt;Copy + 'static&lt;/code&gt; signals, which have excellent ergonomics. Sycamore is in the process of adopting the same pattern, but this is not yet released.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Perseus vs. server functions:&lt;/strong&gt; The Perseus metaframework provides an opinionated way to build Sycamore apps that include server functionality. Leptos instead provides primitives like server functions in the core of the framework.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>moghtech/komodo</title>
      <link>https://github.com/moghtech/komodo</link>
      <description>&lt;p&gt;🦎 a tool to build and deploy software on many servers 🦎&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Komodo 🦎&lt;/h1&gt; 
&lt;p&gt;A tool to build and deploy software across many servers.&lt;/p&gt; 
&lt;p&gt;🦎 &lt;a href="https://komo.do"&gt;See the docs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🦎 &lt;a href="https://demo.komo.do"&gt;Try the Demo&lt;/a&gt; - Login: &lt;code&gt;demo&lt;/code&gt; : &lt;code&gt;demo&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;🦎 &lt;a href="https://build.komo.do"&gt;See the Build Server&lt;/a&gt; - Login: &lt;code&gt;komodo&lt;/code&gt; : &lt;code&gt;komodo&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;🦎 &lt;a href="https://discord.gg/DRqE8Fvg5c"&gt;Join the Discord&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;The Komodo dragon is the largest living member of the &lt;a href="https://en.wikipedia.org/wiki/Monitor_lizard"&gt;&lt;em&gt;Monitor&lt;/em&gt; family of lizards&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There is no limit to the number of servers you can connect, and there will never be. There is no limit to what API you can use for automation, and there never will be. No "business edition" here.&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;Warning. This is open source software (GPL-V3), and while we make a best effort to ensure releases are stable and bug-free, there are no warranties. Use at your own risk.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/moghtech/komodo/raw/main/scripts/readme.md"&gt;periphery setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/moghtech/komodo/raw/main/roadmap.md"&gt;roadmap&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;h3&gt;Light Theme&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Dashboard.png" alt="Dashboard" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Stack.png" alt="Stack" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Compose.png" alt="Compose" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Env.png" alt="Env" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Sync.png" alt="Sync" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Update.png" alt="Update" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Stats.png" alt="Stats" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Light-Export.png" alt="Export" /&gt;&lt;/p&gt; 
&lt;h3&gt;Dark Theme&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Dashboard.png" alt="Dashboard" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Stack.png" alt="Stack" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Compose.png" alt="Compose" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Env.png" alt="Env" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Sync.png" alt="Sync" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Update.png" alt="Update" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Stats.png" alt="Stats" /&gt; &lt;img src="https://raw.githubusercontent.com/moghtech/komodo/main/screenshots/Dark-Export.png" alt="Export" /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EasyTier/EasyTier</title>
      <link>https://github.com/EasyTier/EasyTier</link>
      <description>&lt;p&gt;A simple, decentralized mesh VPN with WireGuard support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EasyTier&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/EasyTier/EasyTier/releases"&gt;&lt;img src="https://img.shields.io/github/v/tag/EasyTier/EasyTier" alt="Github release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/EasyTier/EasyTier" alt="GitHub" /&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/commits/main"&gt;&lt;img src="https://img.shields.io/github/last-commit/EasyTier/EasyTier" alt="GitHub last commit" /&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/issues"&gt;&lt;img src="https://img.shields.io/github/issues/EasyTier/EasyTier" alt="GitHub issues" /&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/actions/workflows/core.yml"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/core.yml/badge.svg?sanitize=true" alt="GitHub Core Actions" /&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/actions/workflows/gui.yml"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/gui.yml/badge.svg?sanitize=true" alt="GitHub GUI Actions" /&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/test.yml/badge.svg?sanitize=true" alt="GitHub Test Actions" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/EasyTier/EasyTier"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/EasyTier/EasyTier/main/README_CN.md"&gt;简体中文&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/EasyTier/EasyTier/main/README.md"&gt;English&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;✨ A simple, secure, decentralized virtual private network solution powered by Rust and Tokio&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/config-page.png" width="300" alt="config page" /&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/running-page.png" width="300" alt="running page" /&gt; &lt;/p&gt; 
&lt;p&gt;📚 &lt;strong&gt;&lt;a href="https://easytier.cn/en/"&gt;Full Documentation&lt;/a&gt;&lt;/strong&gt; | 🖥️ &lt;strong&gt;&lt;a href="https://easytier.cn/web"&gt;Web Console&lt;/a&gt;&lt;/strong&gt; | 📝 &lt;strong&gt;&lt;a href="https://github.com/EasyTier/EasyTier/releases"&gt;Download Releases&lt;/a&gt;&lt;/strong&gt; | 🧩 &lt;strong&gt;&lt;a href="https://easytier.cn/en/guide/installation_gui.html#third-party-graphical-interfaces"&gt;Third Party Tools&lt;/a&gt;&lt;/strong&gt; | ❤️ &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/EasyTier/EasyTier/main/#sponsor"&gt;Sponsor&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Core Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;Decentralized&lt;/strong&gt;: Nodes are equal and independent, no centralized services required&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Easy to Use&lt;/strong&gt;: Multiple operation methods via web, client, and command line&lt;/li&gt; 
 &lt;li&gt;🌍 &lt;strong&gt;Cross-Platform&lt;/strong&gt;: Supports Win/MacOS/Linux/FreeBSD/Android and X86/ARM/MIPS architectures&lt;/li&gt; 
 &lt;li&gt;🔐 &lt;strong&gt;Secure&lt;/strong&gt;: AES-GCM or WireGuard encryption, prevents man-in-the-middle attacks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Advanced Capabilities&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔌 &lt;strong&gt;Efficient NAT Traversal&lt;/strong&gt;: Supports UDP and IPv6 traversal, works with NAT4-NAT4 networks&lt;/li&gt; 
 &lt;li&gt;🌐 &lt;strong&gt;Subnet Proxy&lt;/strong&gt;: Nodes can share subnets for other nodes to access&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Intelligent Routing&lt;/strong&gt;: Latency priority and automatic route selection for best network experience&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;High Performance&lt;/strong&gt;: Zero-copy throughout the entire link, supports TCP/UDP/WSS/WG protocols&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Network Optimization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📊 &lt;strong&gt;UDP Loss Resistance&lt;/strong&gt;: KCP/QUIC proxy optimizes latency and bandwidth in high packet loss environments&lt;/li&gt; 
 &lt;li&gt;🔧 &lt;strong&gt;Web Management&lt;/strong&gt;: Easy configuration and monitoring through web interface&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Zero Config&lt;/strong&gt;: Simple deployment with statically linked executables&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;📥 Installation&lt;/h3&gt; 
&lt;p&gt;Choose the installation method that best suits your needs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1. Download pre-built binary (Recommended, All platforms supported)
# Visit https://github.com/EasyTier/EasyTier/releases

# 2. Install via cargo (Latest development version)
cargo install --git https://github.com/EasyTier/EasyTier.git easytier

# 3. Install via Docker
# See https://easytier.cn/en/guide/installation.html#installation-methods

# 4. Linux Quick Install
wget -O- https://raw.githubusercontent.com/EasyTier/EasyTier/main/script/install.sh | sudo bash

# 5. MacOS via Homebrew
brew tap brewforge/chinese
brew install --cask easytier-gui

# 6. OpenWrt Luci Web UI
# Visit https://github.com/EasyTier/luci-app-easytier

# 7. (Optional) Install shell completions:
easytier-core --gen-autocomplete fish &amp;gt; ~/.config/fish/completions/easytier-core.fish
easytier-cli gen-autocomplete fish &amp;gt; ~/.config/fish/completions/easytier-cli.fish

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;🚀 Basic Usage&lt;/h3&gt; 
&lt;h4&gt;Quick Networking with Shared Nodes&lt;/h4&gt; 
&lt;p&gt;EasyTier supports quick networking using shared public nodes. When you don't have a public IP, you can use the free shared nodes provided by the EasyTier community. Nodes will automatically attempt NAT traversal and establish P2P connections. When P2P fails, data will be relayed through shared nodes.&lt;/p&gt; 
&lt;p&gt;The currently deployed shared public node is &lt;code&gt;tcp://public.easytier.cn:11010&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When using shared nodes, each node entering the network needs to provide the same &lt;code&gt;--network-name&lt;/code&gt; and &lt;code&gt;--network-secret&lt;/code&gt; parameters as the unique identifier of the network.&lt;/p&gt; 
&lt;p&gt;Taking two nodes as an example (Please use more complex network name to avoid conflicts):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run on Node A:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run with administrator privileges
sudo easytier-core -d --network-name abc --network-secret abc -p tcp://public.easytier.cn:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Run on Node B:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run with administrator privileges
sudo easytier-core -d --network-name abc --network-secret abc -p tcp://public.easytier.cn:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After successful execution, you can check the network status using &lt;code&gt;easytier-cli&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;| ipv4         | hostname       | cost  | lat_ms | loss_rate | rx_bytes | tx_bytes | tunnel_proto | nat_type | id         | version         |
| ------------ | -------------- | ----- | ------ | --------- | -------- | -------- | ------------ | -------- | ---------- | --------------- |
| 10.126.126.1 | abc-1          | Local | *      | *         | *        | *        | udp          | FullCone | 439804259  | 2.4.2-70e69a38~ |
| 10.126.126.2 | abc-2          | p2p   | 3.452  | 0         | 17.33 kB | 20.42 kB | udp          | FullCone | 390879727  | 2.4.2-70e69a38~ |
|              | PublicServer_a | p2p   | 27.796 | 0.000     | 50.01 kB | 67.46 kB | tcp          | Unknown  | 3771642457 | 2.4.2-70e69a38~ |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can test connectivity between nodes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Test connectivity
ping 10.126.126.1
ping 10.126.126.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: If you cannot ping through, it may be that the firewall is blocking incoming traffic. Please turn off the firewall or add allow rules.&lt;/p&gt; 
&lt;p&gt;To improve availability, you can connect to multiple shared nodes simultaneously:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Connect to multiple shared nodes
sudo easytier-core -d --network-name abc --network-secret abc -p tcp://public.easytier.cn:11010 -p udp://public.easytier.cn:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once your network is set up successfully, you can easily configure it to start automatically on system boot. Refer to the &lt;a href="https://easytier.cn/en/guide/network/oneclick-install-as-service.html"&gt;One-Click Register Service guide&lt;/a&gt; for step-by-step instructions on registering EasyTier as a system service.&lt;/p&gt; 
&lt;h4&gt;Decentralized Networking&lt;/h4&gt; 
&lt;p&gt;EasyTier is fundamentally decentralized, with no distinction between server and client. As long as one device can communicate with any node in the virtual network, it can join the virtual network. Here's how to set up a decentralized network:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Start First Node (Node A):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start the first node
sudo easytier-core -i 10.144.144.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After startup, this node will listen on the following ports by default:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;TCP: 11010&lt;/li&gt; 
 &lt;li&gt;UDP: 11010&lt;/li&gt; 
 &lt;li&gt;WebSocket: 11011&lt;/li&gt; 
 &lt;li&gt;WebSocket SSL: 11012&lt;/li&gt; 
 &lt;li&gt;WireGuard: 11013&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Connect Second Node (Node B):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Connect to the first node using its public IP
sudo easytier-core -i 10.144.144.2 -p udp://FIRST_NODE_PUBLIC_IP:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Verify Connection:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Test connectivity
ping 10.144.144.2

# View connected peers
easytier-cli peer

# View routing information
easytier-cli route

# View local node information
easytier-cli node
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more nodes to join the network, they can connect to any existing node in the network using the &lt;code&gt;-p&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Connect to any existing node using its public IP
sudo easytier-core -i 10.144.144.3 -p udp://ANY_EXISTING_NODE_PUBLIC_IP:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;🔍 Advanced Features&lt;/h3&gt; 
&lt;h4&gt;Subnet Proxy&lt;/h4&gt; 
&lt;p&gt;Assuming the network topology is as follows, Node B wants to share its accessible subnet 10.1.1.0/24 with other nodes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart LR

subgraph Node A Public IP 22.1.1.1
nodea[EasyTier&amp;lt;br/&amp;gt;10.144.144.1]
end

subgraph Node B
nodeb[EasyTier&amp;lt;br/&amp;gt;10.144.144.2]
end

id1[[10.1.1.0/24]]

nodea &amp;lt;--&amp;gt; nodeb &amp;lt;-.-&amp;gt; id1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To share a subnet, add the &lt;code&gt;-n&lt;/code&gt; parameter when starting EasyTier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Share subnet 10.1.1.0/24 with other nodes
sudo easytier-core -i 10.144.144.2 -n 10.1.1.0/24
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Subnet proxy information will automatically sync to each node in the virtual network, and each node will automatically configure the corresponding route. You can verify the subnet proxy setup:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check if the routing information has been synchronized (the proxy_cidrs column shows the proxied subnets):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# View routing information
easytier-cli route
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/image-3.png" alt="Routing Information" /&gt;&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Test if you can access nodes in the proxied subnet:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Test connectivity to proxied subnet
ping 10.1.1.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;WireGuard Integration&lt;/h4&gt; 
&lt;p&gt;EasyTier can act as a WireGuard server, allowing any device with a WireGuard client (including iOS and Android) to access the EasyTier network. Here's an example setup:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart LR

ios[[iPhone&amp;lt;br/&amp;gt;WireGuard Installed]]

subgraph Node A Public IP 22.1.1.1
nodea[EasyTier&amp;lt;br/&amp;gt;10.144.144.1]
end

subgraph Node B
nodeb[EasyTier&amp;lt;br/&amp;gt;10.144.144.2]
end

id1[[10.1.1.0/24]]

ios &amp;lt;-.-&amp;gt; nodea &amp;lt;--&amp;gt; nodeb &amp;lt;-.-&amp;gt; id1
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt;Start EasyTier with WireGuard portal enabled:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Listen on 0.0.0.0:11013 and use 10.14.14.0/24 subnet for WireGuard clients
sudo easytier-core -i 10.144.144.1 --vpn-portal wg://0.0.0.0:11013/10.14.14.0/24
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Get WireGuard client configuration:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get WireGuard client configuration
easytier-cli vpn-portal
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;In the output configuration: 
  &lt;ul&gt; 
   &lt;li&gt;Set &lt;code&gt;Interface.Address&lt;/code&gt; to an available IP from the WireGuard subnet&lt;/li&gt; 
   &lt;li&gt;Set &lt;code&gt;Peer.Endpoint&lt;/code&gt; to the public IP/domain of your EasyTier node&lt;/li&gt; 
   &lt;li&gt;Import the modified configuration into your WireGuard client&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Self-Hosted Public Shared Node&lt;/h4&gt; 
&lt;p&gt;You can run your own public shared node to help other nodes discover each other. A public shared node is just a regular EasyTier network (with same network name and secret) that other networks can connect to.&lt;/p&gt; 
&lt;p&gt;To run a public shared node:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# No need to specify IPv4 address for public shared nodes
sudo easytier-core --network-name mysharednode --network-secret mysharednode
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.zerotier.com/"&gt;ZeroTier&lt;/a&gt;: A global virtual network for connecting devices.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tailscale.com/"&gt;TailScale&lt;/a&gt;: A VPN solution aimed at simplifying network configuration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dswd/vpncloud"&gt;vpncloud&lt;/a&gt;: A P2P Mesh VPN&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lanthora/candy"&gt;Candy&lt;/a&gt;: A reliable, low-latency, and anti-censorship virtual private network&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contact Us&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;💬 &lt;strong&gt;&lt;a href="https://t.me/easytier"&gt;Telegram Group&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;👥 &lt;strong&gt;[QQ Group]&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;No.1 &lt;a href="https://qm.qq.com/q/wFoTUChqZW"&gt;949700262&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;No.2 &lt;a href="https://qm.qq.com/q/4V33DrfgHe"&gt;837676408&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;No.3 &lt;a href="https://qm.qq.com/q/YNyTQjwlai"&gt;957189589&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;EasyTier is released under the &lt;a href="https://github.com/EasyTier/EasyTier/raw/main/LICENSE"&gt;LGPL-3.0&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsor&lt;/h2&gt; 
&lt;p&gt;CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://edgeone.ai/?from=github" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/edgeone.png" width="200" alt="EdgeOne Logo" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Special thanks to &lt;a href="https://langlangy.cn/?i26c5a5"&gt;Langlang Cloud&lt;/a&gt; and &lt;a href="https://www.rainyun.com/NjM0NzQ1_"&gt;RainCloud&lt;/a&gt; for sponsoring our public servers.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://langlangy.cn/?i26c5a5" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/langlang.png" width="200" /&gt; &lt;/a&gt; &lt;a href="https://langlangy.cn/?i26c5a5" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/raincloud.png" width="200" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;If you find EasyTier helpful, please consider sponsoring us. Software development and maintenance require a lot of time and effort, and your sponsorship will help us better maintain and improve EasyTier.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/wechat.png" width="200" /&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/alipay.png" width="200" /&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Universal-Debloater-Alliance/universal-android-debloater-next-generation</title>
      <link>https://github.com/Universal-Debloater-Alliance/universal-android-debloater-next-generation</link>
      <description>&lt;p&gt;Cross-platform GUI written in Rust using ADB to debloat non-rooted Android devices. Improve your privacy, the security and battery life of your device.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Universal Android Debloater Next Generation&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!warning] &lt;strong&gt;DISCLAIMER&lt;/strong&gt;: Use at your own risk. We're not responsible for anything that could happen to your devices.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;img src="https://raw.githubusercontent.com/Universal-Debloater-Alliance/universal-android-debloater-next-generation/main/resources/screenshots/v1.0.2.png" width="850" alt="uad_screenshot" /&gt; 
&lt;p&gt;&lt;strong&gt;Check out the issues, and &lt;a href="https://github.com/Universal-Debloater-Alliance/universal-android-debloater-next-generation/wiki/How-to-contribute"&gt;feel free to contribute!&lt;/a&gt;&lt;/strong&gt;. We're in &lt;strong&gt;HIGH NEED&lt;/strong&gt; of &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt; developers for fixing critical issues, see &lt;a href="https://github.com/Universal-Debloater-Alliance/universal-android-debloater-next-generation/discussions/731"&gt;this announcement&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;For real-time communication, consider joining our Discord server:&lt;/strong&gt;&lt;/p&gt; 
&lt;a href="https://discord.gg/CzwbMCPEZa"&gt; &lt;img src="https://raw.githubusercontent.com/Universal-Debloater-Alliance/universal-android-debloater-next-generation/main/resources/images/icon_clyde_blurple_RGB.png" alt="Icon" width="75" /&gt; &lt;/a&gt; 
&lt;p&gt;&lt;strong&gt;In case you prefer using Matrix (using a Matrix bridge to Discord):&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://matrix.to/#/#uad-ng:matrix.org"&gt;&lt;img src="https://matrix.org/images/matrix-logo.svg?sanitize=true" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Summary&lt;/h2&gt; 
&lt;p&gt;This is a detached fork of the &lt;a href="https://github.com/0x192/universal-android-debloater"&gt;UAD project&lt;/a&gt;, which aims to improve privacy and battery performance by removing unnecessary and obscure system apps. This can also contribute to improving security by reducing (but not eliminating) &lt;a href="https://en.wikipedia.org/wiki/Attack_surface"&gt;the attack surface&lt;/a&gt;. Read the &lt;a href="https://github.com/Universal-Debloater-Alliance/universal-android-debloater-next-generation/wiki"&gt;wiki&lt;/a&gt; for more details on getting started. Whilst UAD-ng can remove system apps, it cannot detect or remove potentially malicious system services or drivers baked into the firmware of your device by various vendors; some vendor-specific apps are only UI front-ends to vendor-provided system services, and as such disabling/uninstalling those apps will not stop a service from running. Additional information can be found in package descriptions inside the Universal Android Debloater Next Generation application.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For documentation regarding how to use UAD-ng, the FAQ, building from source and how to decompile/extract APKs, see &lt;a href="https://github.com/Universal-Debloater-Alliance/universal-android-debloater-next-generation/wiki"&gt;our Wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Special thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x192"&gt;@0x192&lt;/a&gt; who created the original UAD project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mawilms"&gt;@mawilms&lt;/a&gt; for his LotRO plugin manager (&lt;a href="https://github.com/mawilms/lembas"&gt;Lembas&lt;/a&gt;) which helped a lot to understand how to use the &lt;a href="https://github.com/hecrj/iced"&gt;Iced&lt;/a&gt; GUI library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/casperstorm"&gt;@casperstorm&lt;/a&gt; for the UI/UX inspiration.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>qarmin/czkawka</title>
      <link>https://github.com/qarmin/czkawka</link>
      <description>&lt;p&gt;Multi functional app to find duplicates, empty folders, similar images etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/41945903/102616149-66490400-4137-11eb-9cd6-813b2b070834.png" alt="com github qarmin czkawka" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Czkawka&lt;/strong&gt; (&lt;em&gt;tch•kav•ka&lt;/em&gt; (IPA: [ˈʧ̑kafka]), "hiccup" in Polish) is a simple, fast and free app to remove unnecessary files from your computer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Krokiet&lt;/strong&gt; ((IPA: [ˈkrɔcɛt]), "croquet" in Polish) same as above, but uses Slint frontend.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Written in memory-safe Rust - almost 100% unsafe code free&lt;/li&gt; 
 &lt;li&gt;Amazingly fast - due to using more or less advanced algorithms and multithreading&lt;/li&gt; 
 &lt;li&gt;Free, Open Source without ads&lt;/li&gt; 
 &lt;li&gt;Multiplatform - works on Linux, Windows, macOS, FreeBSD and many more&lt;/li&gt; 
 &lt;li&gt;Cache support - second and further scans should be much faster than the first one&lt;/li&gt; 
 &lt;li&gt;CLI frontend - for easy automation&lt;/li&gt; 
 &lt;li&gt;GUI frontend - uses GTK 4 or Slint frameworks&lt;/li&gt; 
 &lt;li&gt;No spying - Czkawka does not have access to the Internet, nor does it collect any user information or statistics&lt;/li&gt; 
 &lt;li&gt;Multilingual - support multiple languages like Polish, English or Italian&lt;/li&gt; 
 &lt;li&gt;Multiple tools to use: 
  &lt;ul&gt; 
   &lt;li&gt;Duplicates - Finds duplicates based on file name, size or hash&lt;/li&gt; 
   &lt;li&gt;Empty Folders - Finds empty folders with the help of an advanced algorithm&lt;/li&gt; 
   &lt;li&gt;Big Files - Finds the provided number of the biggest files in given location&lt;/li&gt; 
   &lt;li&gt;Empty Files - Looks for empty files across the drive&lt;/li&gt; 
   &lt;li&gt;Temporary Files - Finds temporary files&lt;/li&gt; 
   &lt;li&gt;Similar Images - Finds images which are not exactly the same (different resolution, watermarks)&lt;/li&gt; 
   &lt;li&gt;Similar Videos - Looks for visually similar videos&lt;/li&gt; 
   &lt;li&gt;Same Music - Searches for similar music by tags or by reading content and comparing it&lt;/li&gt; 
   &lt;li&gt;Invalid Symbolic Links - Shows symbolic links which point to non-existent files/directories&lt;/li&gt; 
   &lt;li&gt;Broken Files - Finds files that are invalid or corrupted&lt;/li&gt; 
   &lt;li&gt;Bad Extensions - Lists files whose content not match with their extension&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/b0409515-1bec-4e13-8fac-7bdfa15f5848" alt="Czkawka" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/720e98c3-598a-41aa-a04b-0c0c1d8a28e6" alt="Krokiet" /&gt;&lt;/p&gt; 
&lt;p&gt;Changelog about each version can be found in &lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/Changelog.md"&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;New releases can be found in &lt;a href="https://github.com/qarmin/czkawka/releases"&gt;Github releases&lt;/a&gt; and nightly builds also in &lt;a href="https://github.com/qarmin/czkawka/releases/tag/Nightly"&gt;Nightly releases&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage, installation, compilation, requirements, license&lt;/h2&gt; 
&lt;p&gt;Each tool uses different technologies, so you can find instructions for each of them in the appropriate file:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/czkawka_gui/README.md"&gt;Czkawka GUI (GTK frontend)&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/czkawka_cli/README.md"&gt;Czkawka CLI&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/czkawka_core/README.md"&gt;Czkawka Core&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/krokiet/README.md"&gt;Krokiet GUI (Slint frontend)&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Comparison to other tools&lt;/h2&gt; 
&lt;p&gt;Bleachbit is a master at finding and removing temporary files, while Czkawka only finds the most basic ones. So these two apps shouldn't be compared directly or be considered as an alternative to one another.&lt;/p&gt; 
&lt;p&gt;In this comparison remember, that even if app have same features they may work different(e.g. one app may have more options to choose than other).&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;Czkawka&lt;/th&gt; 
   &lt;th align="center"&gt;Krokiet&lt;/th&gt; 
   &lt;th align="center"&gt;FSlint&lt;/th&gt; 
   &lt;th align="center"&gt;DupeGuru&lt;/th&gt; 
   &lt;th align="center"&gt;Bleachbit&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Language&lt;/td&gt; 
   &lt;td align="center"&gt;Rust&lt;/td&gt; 
   &lt;td align="center"&gt;Rust&lt;/td&gt; 
   &lt;td align="center"&gt;Python&lt;/td&gt; 
   &lt;td align="center"&gt;Python/Obj-C&lt;/td&gt; 
   &lt;td align="center"&gt;Python&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Framework base language&lt;/td&gt; 
   &lt;td align="center"&gt;C&lt;/td&gt; 
   &lt;td align="center"&gt;Rust&lt;/td&gt; 
   &lt;td align="center"&gt;C&lt;/td&gt; 
   &lt;td align="center"&gt;C/C++/Obj-C/Swift&lt;/td&gt; 
   &lt;td align="center"&gt;C&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Framework&lt;/td&gt; 
   &lt;td align="center"&gt;GTK 4&lt;/td&gt; 
   &lt;td align="center"&gt;Slint&lt;/td&gt; 
   &lt;td align="center"&gt;PyGTK2&lt;/td&gt; 
   &lt;td align="center"&gt;Qt 5 (PyQt)/Cocoa&lt;/td&gt; 
   &lt;td align="center"&gt;PyGTK3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;OS&lt;/td&gt; 
   &lt;td align="center"&gt;Lin,Mac,Win&lt;/td&gt; 
   &lt;td align="center"&gt;Lin,Mac,Win&lt;/td&gt; 
   &lt;td align="center"&gt;Lin&lt;/td&gt; 
   &lt;td align="center"&gt;Lin,Mac,Win&lt;/td&gt; 
   &lt;td align="center"&gt;Lin,Mac,Win&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Duplicate finder&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Empty files&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Empty folders&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Temporary files&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Big files&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Similar images&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Similar videos&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Music duplicates(tags)&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Music duplicates(content)&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Invalid symlinks&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Broken files&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Invalid names/extensions&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Names conflict&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Installed packages&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Bad ID&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Non stripped binaries&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Redundant whitespace&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Overwriting files&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Multiple languages&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Cache support&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;In active development&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="center"&gt;No*&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;Last commit in 2024 and last version released in 2023&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other apps&lt;/h2&gt; 
&lt;p&gt;There are many similar applications to Czkawka on the Internet, which do some things better and some things worse:&lt;/p&gt; 
&lt;h3&gt;GUI&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arsenetar/dupeguru"&gt;DupeGuru&lt;/a&gt; - Many options to customize; great photo compare tool&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pixelb/fslint"&gt;FSlint&lt;/a&gt; - A little outdated, but still have some tools not available in Czkawka&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ermig1979/AntiDupl"&gt;AntiDupl.NET&lt;/a&gt; - Shows a lot of metadata of compared images&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x90d/videoduplicatefinder"&gt;Video Duplicate Finder&lt;/a&gt; - Finds similar videos(surprising, isn't it), supports video thumbnails&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CLI&lt;/h3&gt; 
&lt;p&gt;Due to limited time, the biggest emphasis is on the GUI version so if you are looking for really good and feature-packed console apps, then take a look at these:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pkolaczk/fclones"&gt;Fclones&lt;/a&gt; - One of the fastest tools to find duplicates; it is written also in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sahib/rmlint"&gt;Rmlint&lt;/a&gt; - Nice console interface and also is feature packed&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pauldreik/rdfind"&gt;RdFind&lt;/a&gt; - Fast, but written in C++ ¯\_(ツ)_/¯&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Big thanks to Pádraig Brady, creator of fantastic FSlint, because without his work I wouldn't create this tool.&lt;/p&gt; 
&lt;p&gt;Thanks also to all the people who create patches for this program, make it available on other systems, create videos, articles about it etc.&lt;/p&gt; 
&lt;p&gt;Also, I really appreciate work of people that create crates on which Czkawka is based and for that I try to report bugs to make it even better.&lt;/p&gt; 
&lt;h2&gt;Officially Supported Projects&lt;/h2&gt; 
&lt;p&gt;Only this repository, &lt;a href="https://github.com/qarmin/czkawka/releases"&gt;prebuild-binaries&lt;/a&gt;, projects on &lt;a href="https://crates.io/crates/czkawka_gui"&gt;crates.io&lt;/a&gt; and &lt;a href="https://flathub.org/apps/com.github.qarmin.czkawka"&gt;flathub&lt;/a&gt; are directly maintained by me.&lt;/p&gt; 
&lt;p&gt;Czkawka does not have an official website, so do not trust any sites that claim to be the official one.&lt;/p&gt; 
&lt;p&gt;If you use packages from unofficial sources, make sure they are safe.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The entire code in this repository is licensed under the &lt;a href="https://mit-license.org/"&gt;MIT&lt;/a&gt; license.&lt;/p&gt; 
&lt;p&gt;All images are licensed under the &lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;CC BY 4.0&lt;/a&gt; license.&lt;/p&gt; 
&lt;p&gt;The Czkawka GTK GUI and CLI applications are licensed under the &lt;a href="https://mit-license.org/"&gt;MIT&lt;/a&gt; license, while the Krokiet is licensed under the &lt;a href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;GPL-3.0-only&lt;/a&gt; license.&lt;/p&gt; 
&lt;h2&gt;Donations&lt;/h2&gt; 
&lt;p&gt;If you are using the app, I would appreciate a donation for its further development, which can be done &lt;a href="https://github.com/sponsors/qarmin"&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hyperium/hyper</title>
      <link>https://github.com/hyperium/hyper</link>
      <description>&lt;p&gt;An HTTP library for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://hyper.rs"&gt;hyper&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/hyper"&gt;&lt;img src="https://img.shields.io/crates/v/hyper.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/hyper"&gt;&lt;img src="https://docs.rs/hyper/badge.svg?sanitize=true" alt="Released API docs" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/hyperium/hyper/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/hyperium/hyper/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/hyperium/hyper/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/kkwpueZ"&gt;&lt;img src="https://img.shields.io/discord/500028886025895936.svg?logo=discord" alt="Discord chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A protective and efficient HTTP library for all.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HTTP/1 and HTTP/2&lt;/li&gt; 
 &lt;li&gt;Asynchronous design&lt;/li&gt; 
 &lt;li&gt;Leading in performance&lt;/li&gt; 
 &lt;li&gt;Tested and &lt;strong&gt;correct&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Extensive production use&lt;/li&gt; 
 &lt;li&gt;Client and Server APIs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Get started&lt;/strong&gt; by looking over the &lt;a href="https://hyper.rs/guides/1/"&gt;guides&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;"Low-level"&lt;/h2&gt; 
&lt;p&gt;hyper is a relatively low-level library, meant to be a building block for libraries and applications.&lt;/p&gt; 
&lt;p&gt;If you are looking for a convenient HTTP client, then you may wish to consider &lt;a href="https://github.com/seanmonstar/reqwest"&gt;reqwest&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are not sure what HTTP server to choose, then you may want to consider &lt;a href="https://github.com/tokio-rs/axum"&gt;axum&lt;/a&gt; or &lt;a href="https://github.com/seanmonstar/warp"&gt;warp&lt;/a&gt;, the latter taking a more functional approach. Both are built on top of this library.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To get involved, take a look at &lt;a href="https://raw.githubusercontent.com/hyperium/hyper/master/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you prefer chatting, there is an active community in the &lt;a href="https://discord.gg/kkwpueZ"&gt;Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;hyper is provided under the MIT license. See &lt;a href="https://raw.githubusercontent.com/hyperium/hyper/master/LICENSE"&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DioxusLabs/dioxus</title>
      <link>https://github.com/DioxusLabs/dioxus</link>
      <description>&lt;p&gt;Fullstack app framework for web, desktop, and mobile.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;/p&gt;
&lt;p align="center"&gt; 
 &lt;!-- &lt;img src="./notes/header-light-updated.svg#gh-light-mode-only" &gt;
      &lt;img src="./notes/header-dark-updated.svg#gh-dark-mode-only" &gt; --&gt; 
 &lt;!-- &lt;a href="https://dioxuslabs.com"&gt;
          &lt;img src="./notes/flat-splash.avif"&gt;
      &lt;/a&gt; --&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/splash-header-darkmode.svg#gh-dark-mode-only" style="width: 80%; height: auto;" /&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/splash-header.svg#gh-light-mode-only" style="width: 80%; height: auto;" /&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/image-splash.avif" /&gt; &lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;!-- Crates version --&gt; 
 &lt;a href="https://crates.io/crates/dioxus"&gt; &lt;img src="https://img.shields.io/crates/v/dioxus.svg?style=flat-square" alt="Crates.io version" /&gt; &lt;/a&gt; 
 &lt;!-- Downloads --&gt; 
 &lt;a href="https://crates.io/crates/dioxus"&gt; &lt;img src="https://img.shields.io/crates/d/dioxus.svg?style=flat-square" alt="Download" /&gt; &lt;/a&gt; 
 &lt;!-- docs --&gt; 
 &lt;a href="https://docs.rs/dioxus"&gt; &lt;img src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square" alt="docs.rs docs" /&gt; &lt;/a&gt; 
 &lt;!-- CI --&gt; 
 &lt;a href="https://github.com/jkelleyrtp/dioxus/actions"&gt; &lt;img src="https://github.com/dioxuslabs/dioxus/actions/workflows/main.yml/badge.svg?sanitize=true" alt="CI status" /&gt; &lt;/a&gt; 
 &lt;!--Awesome --&gt; 
 &lt;a href="https://dioxuslabs.com/awesome"&gt; &lt;img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true" alt="Awesome Page" /&gt; &lt;/a&gt; 
 &lt;!-- Discord --&gt; 
 &lt;a href="https://discord.gg/XgGxMSkvUM"&gt; &lt;img src="https://img.shields.io/discord/899851952891002890.svg?logo=discord&amp;amp;style=flat-square" alt="Discord Link" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h3&gt; &lt;a href="https://dioxuslabs.com"&gt; Website &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/tree/main/examples"&gt; Examples &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://dioxuslabs.com/learn/0.6/guide"&gt; Guide &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/zh-cn/README.md"&gt; 中文 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/pt-br/README.md"&gt; PT-BR &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/ja-jp/README.md"&gt; 日本語 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/tr-tr"&gt; Türkçe &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/ko-kr"&gt; 한국어 &lt;/a&gt; &lt;/h3&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/releases/tag/v0.7.0-alpha.0"&gt;✨ Dioxus 0.7 is in alpha - test it out! ✨&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;Build for web, desktop, and mobile, and more with a single codebase. Zero-config setup, integrated hot-reloading, and signals-based state management. Add backend functionality with Server Functions and bundle with our CLI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn app() -&amp;gt; Element {
    let mut count = use_signal(|| 0);

    rsx! {
        h1 { "High-Five counter: {count}" }
        button { onclick: move |_| count += 1, "Up high!" }
        button { onclick: move |_| count -= 1, "Down low!" }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⭐️ Unique features:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cross-platform apps in three lines of code (web, desktop, mobile, server, and more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dioxuslabs.com/blog/release-050"&gt;Ergonomic state management&lt;/a&gt; combines the best of React, Solid, and Svelte&lt;/li&gt; 
 &lt;li&gt;Built-in featureful, type-safe, fullstack web framework&lt;/li&gt; 
 &lt;li&gt;Integrated bundler for deploying to the web, macOS, Linux, and Windows&lt;/li&gt; 
 &lt;li&gt;Subsecond Rust hot-patching and asset hot-reloading&lt;/li&gt; 
 &lt;li&gt;And more! &lt;a href="https://dioxuslabs.com/learn/0.6/"&gt;Take a tour of Dioxus&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Instant hot-reloading&lt;/h2&gt; 
&lt;p&gt;With one command, &lt;code&gt;dx serve&lt;/code&gt; and your app is running. Edit your markup, styles, and see changes in milliseconds. Use our experimental &lt;code&gt;dx serve --hotpatch&lt;/code&gt; to update Rust code in real time.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/hotreload-video.webp" /&gt; 
 &lt;!-- &lt;video src="https://private-user-images.githubusercontent.com/10237910/386919031-6da371d5-3340-46da-84ff-628216851ba6.mov" width="500"&gt;&lt;/video&gt; --&gt; 
 &lt;!-- &lt;video src="https://private-user-images.githubusercontent.com/10237910/386919031-6da371d5-3340-46da-84ff-628216851ba6.mov" width="500"&gt;&lt;/video&gt; --&gt; 
&lt;/div&gt; 
&lt;h2&gt;Build Beautiful Apps&lt;/h2&gt; 
&lt;p&gt;Dioxus apps are styled with HTML and CSS. Use the built-in TailwindCSS support or load your favorite CSS library. Easily call into native code (objective-c, JNI, Web-Sys) for a perfect native touch.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/ebou2.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Experimental Native Renderer&lt;/h2&gt; 
&lt;p&gt;Render using web-sys, webview, server-side-rendering, liveview, or even with our experimental WGPU-based renderer. Embed Dioxus in Bevy, WGPU, or even run on embedded Linux!&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/native-blitz-wgpu.webp" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;First-party primitive components&lt;/h2&gt; 
&lt;p&gt;Get started quickly with a complete set of primitives modeled after shadcn/ui and Radix-Primitives.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/primitive-components.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;First-class Android and iOS support&lt;/h2&gt; 
&lt;p&gt;Dioxus is the fastest way to build native mobile apps with Rust. Simply run &lt;code&gt;dx serve --platform android&lt;/code&gt; and your app is running in an emulator or on device in seconds. Call directly into JNI and Native APIs.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/android_and_ios2.avif" width="500" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Productive, typesafe, fullstack web framework&lt;/h2&gt; 
&lt;p&gt;Directly call your backend from your frontend with our built-in type-safe RPC using &lt;a href="http://crates.io/crates/server_fn"&gt;&lt;code&gt;server_fn&lt;/code&gt;&lt;/a&gt;. Supports streaming, suspense, bundle splitting, websockets, and more.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn app() -&amp;gt; Element {
  let mut fortune = use_signal(|| "Fetch a fortune!");
  rsx! {
    h1 { "{fortune}" }
    button {
      onclick: move |_| async move {
        fortune.set(fetch_fortune().await.unwrap());
      }
    }
  }
}

#[server]
async fn fetch_fortune() -&amp;gt; ServerFnResult&amp;lt;String&amp;gt; {
  "Dioxus is super productive!".to_string()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Bundle for web, desktop, and mobile&lt;/h2&gt; 
&lt;p&gt;Simply run &lt;code&gt;dx bundle&lt;/code&gt; and your app will be built and bundled with maximization optimizations. On the web, take advantage of &lt;a href="https://dioxuslabs.com/learn/0.6/guides/assets"&gt;&lt;code&gt;.avif&lt;/code&gt; generation, &lt;code&gt;.wasm&lt;/code&gt; compression, minification&lt;/a&gt;, and more. Build WebApps weighing &lt;a href="https://github.com/ealmloff/tiny-dioxus/"&gt;less than 50kb&lt;/a&gt; and desktop/mobile apps less than 5mb.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/bundle.gif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Fantastic documentation&lt;/h2&gt; 
&lt;p&gt;We've put a ton of effort into building clean, readable, and comprehensive documentation. All html elements and listeners are documented with MDN docs, and our Docs runs continuous integration with Dioxus itself to ensure that the docs are always up to date. Check out the &lt;a href="https://dioxuslabs.com/learn/0.6/"&gt;Dioxus website&lt;/a&gt; for guides, references, recipes, and more. Fun fact: we use the Dioxus website as a testbed for new Dioxus features - &lt;a href="https://github.com/dioxusLabs/docsite"&gt;check it out!&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/docs.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Modular and Customizable&lt;/h2&gt; 
&lt;p&gt;Build your own renderer, or use a community renderer like &lt;a href="http://freyaui.dev"&gt;Freya&lt;/a&gt;. Use our modular components like RSX, VirtualDom, Blitz, Taffy, and Subsecond.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/freya-todo-example.webp" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Dioxus is a community-driven project, with a very active &lt;a href="https://discord.gg/XgGxMSkvUM"&gt;Discord&lt;/a&gt; and &lt;a href="https://github.com/DioxusLabs/dioxus/issues"&gt;GitHub&lt;/a&gt; community. We're always looking for help, and we're happy to answer questions and help you get started. &lt;a href="https://github.com/DioxusLabs/dioxus-std"&gt;Our SDK&lt;/a&gt; is community-run and we even have a &lt;a href="https://github.com/dioxus-community/"&gt;GitHub organization&lt;/a&gt; for the best Dioxus crates that receive free upgrades and support.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/dioxus-community.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Full-time core team&lt;/h2&gt; 
&lt;p&gt;Dioxus has grown from a side project to a small team of fulltime engineers. Thanks to the generous support of FutureWei, Satellite.im, the GitHub Accelerator program, we're able to work on Dioxus full-time. Our long term goal is for Dioxus to become self-sustaining by providing paid high-quality enterprise tools. If your company is interested in adopting Dioxus and would like to work with us, please reach out!&lt;/p&gt; 
&lt;h2&gt;Supported Platforms&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;table style="width:100%"&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Web&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render directly to the DOM using WebAssembly&lt;/li&gt; 
      &lt;li&gt;Pre-render with SSR and rehydrate on the client&lt;/li&gt; 
      &lt;li&gt;Simple "hello world" at about 50kb, comparable to React&lt;/li&gt; 
      &lt;li&gt;Built-in dev server and hot reloading for quick iteration&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Desktop&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render using Webview or - experimentally - with WGPU or &lt;a href="https://freyaui.dev"&gt;Freya&lt;/a&gt; (Skia) &lt;/li&gt; 
      &lt;li&gt;Zero-config setup. Simply `cargo run` or `dx serve` to build your app &lt;/li&gt; 
      &lt;li&gt;Full support for native system access without IPC &lt;/li&gt; 
      &lt;li&gt;Supports macOS, Linux, and Windows. Portable &amp;lt;3mb binaries &lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Mobile&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render using Webview or - experimentally - with WGPU or Skia &lt;/li&gt; 
      &lt;li&gt;Build .ipa and .apk files for iOS and Android &lt;/li&gt; 
      &lt;li&gt;Call directly into Java and Objective-C with minimal overhead&lt;/li&gt; 
      &lt;li&gt;From "hello world" to running on device in seconds&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Server-side Rendering&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Suspense, hydration, and server-side rendering&lt;/li&gt; 
      &lt;li&gt;Quickly drop in backend functionality with server functions&lt;/li&gt; 
      &lt;li&gt;Extractors, middleware, and routing integrations&lt;/li&gt; 
      &lt;li&gt;Static-site generation and incremental regeneration&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;h2&gt;Running the examples&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The examples in the main branch of this repository target the git version of dioxus and the CLI. If you are looking for examples that work with the latest stable release of dioxus, check out the &lt;a href="https://github.com/DioxusLabs/dioxus/tree/v0.6/examples"&gt;0.6 branch&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The examples in the top level of this repository can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo run --example &amp;lt;example&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, we encourage you to download the dioxus-cli to test out features like hot-reloading. To install the most recent binary CLI, you can use cargo binstall.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo binstall dioxus-cli@0.7.0-rc.0 --force
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If this CLI is out-of-date, you can install it directly from git&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo install --git https://github.com/DioxusLabs/dioxus dioxus-cli --locked
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the CLI, you can also run examples with the web platform. You will need to disable the default desktop feature and enable the web feature with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;dx serve --example &amp;lt;example&amp;gt; --platform web -- --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out the website &lt;a href="https://dioxuslabs.com/learn/0.6/contributing"&gt;section on contributing&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Report issues on our &lt;a href="https://github.com/dioxuslabs/dioxus/issues"&gt;issue tracker&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/XgGxMSkvUM"&gt;Join&lt;/a&gt; the discord and ask questions!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;a href="https://github.com/dioxuslabs/dioxus/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=dioxuslabs/dioxus&amp;amp;max=30&amp;amp;columns=10" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under either the &lt;a href="https://github.com/DioxusLabs/dioxus/raw/master/LICENSE-MIT"&gt;MIT license&lt;/a&gt; or the &lt;a href="https://github.com/DioxusLabs/dioxus/raw/master/LICENSE-APACHE"&gt;Apache-2 License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Dioxus by you, shall be licensed as MIT or Apache-2, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AppFlowy-IO/AppFlowy-Cloud</title>
      <link>https://github.com/AppFlowy-IO/AppFlowy-Cloud</link>
      <description>&lt;p&gt;Bring projects, wikis, and teams together with AI. AppFlowy is the AI collaborative workspace where you achieve more without losing control of your data. The leading open source Notion alternative.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source srcset="assets/logos/appflowy_logo_white.svg" media="(prefers-color-scheme: dark)" /&gt; 
  &lt;img src="https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/assets/logos/appflowy_logo_black.svg?sanitize=true" width="500" height="200" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;h4 align="center"&gt; &lt;a href="https://discord.gg/9Q2xaN37tV"&gt;&lt;img src="https://img.shields.io/badge/AppFlowy.IO-discord-orange" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/AGPL-3.0"&gt;&lt;img src="https://img.shields.io/badge/license-AGPL-purple.svg?sanitize=true" alt="License: AGPL" /&gt;&lt;/a&gt; &lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.appflowy.com"&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; • &lt;a href="https://twitter.com/appflowy"&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;⚡ The AppFlowy Cloud written with Rust 🦀&lt;/p&gt; 
&lt;h1&gt;AppFlowy Cloud&lt;/h1&gt; 
&lt;p&gt;AppFlowy Cloud is part of the AppFlowy ecosystem, offering secure user authentication, file storage, and real-time WebSocket communication for an efficient and collaborative user experience.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/#deployment"&gt;🚀 Deployment&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/#development"&gt;💻 Development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/#debugging"&gt;🐞 Debugging&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/#%EF%B8%8Fcontributing"&gt;⚙️ Contributing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀Deployment&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;See &lt;a href="https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/doc/DEPLOYMENT.md"&gt;deployment guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;💻Development&lt;/h2&gt; 
&lt;h3&gt;Pre-requisites&lt;/h3&gt; 
&lt;p&gt;You'll need to install:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Environment Configuration&lt;/h3&gt; 
&lt;p&gt;To get started, you need to set up your environment variables. We've made this easy with an interactive script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./script/generate_env.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The script will ask you to choose between development (&lt;code&gt;dev.env&lt;/code&gt;) or production (&lt;code&gt;deploy.env&lt;/code&gt;) settings, then generate a &lt;code&gt;.env&lt;/code&gt; file for you. If you have sensitive values like API keys, you can put them in environment-specific secret files and the script will safely merge them in.&lt;/p&gt; 
&lt;h4&gt;Quick Setup with Secrets (Recommended)&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;You don't need to understand all the environment variables.&lt;/strong&gt; For most development setups, simply:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Copy the development secrets template:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;cp env.dev.secret.example .env.dev.secret
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Edit &lt;code&gt;.env.dev.secret&lt;/code&gt; and fill in only the values you need (like API keys, passwords, etc.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the generator:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;./script/generate_env.sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The script will automatically use your secrets file and generate a complete &lt;code&gt;.env&lt;/code&gt; with sensible defaults for everything else.&lt;/p&gt; 
&lt;h4&gt;Manual Setup&lt;/h4&gt; 
&lt;p&gt;If you prefer doing it manually, just copy one of the template files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cp dev.env .env    # for development
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then edit the &lt;code&gt;.env&lt;/code&gt; file with your specific settings. &lt;strong&gt;Choose ONE of the following commands&lt;/strong&gt; to start the AppFlowy Cloud server locally(make sure you are in the root directory of the project):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# For new setup - RECOMMENDED FOR FIRST TIME
./script/run_local_server.sh --reset

# Basic run (interactive prompts for container management)
./script/run_local_server.sh

# With SQLx metadata preparation (useful for clean builds)
./script/run_local_server.sh --sqlx

# Combined: reset database and prepare SQLx metadata
./script/run_local_server.sh --reset --sqlx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Interactive Features:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Prompts before stopping existing containers (data is preserved)&lt;/li&gt; 
 &lt;li&gt;Automatically checks for sqlx-cli and offers to install if missing&lt;/li&gt; 
 &lt;li&gt;Color-coded output for better visibility&lt;/li&gt; 
 &lt;li&gt;Clear warnings about data-affecting operations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Command Line Flags:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--sqlx&lt;/code&gt;: Prepare SQLx metadata (takes a few minutes, required for clean builds)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--reset&lt;/code&gt;: Reset database schema and data (no prompt)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Environment Variables:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;SKIP_SQLX_PREPARE=true&lt;/code&gt;: Skip SQLx preparation (faster restarts)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SKIP_APPFLOWY_CLOUD=true&lt;/code&gt;: Skip AppFlowy Cloud build&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SQLX_OFFLINE=false&lt;/code&gt;: Connect to DB during build (default: true)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This process will execute all dependencies and start the AppFlowy-Cloud server with an interactive setup experience.&lt;/p&gt; 
&lt;h3&gt;Manual Setup (Step-by-Step)&lt;/h3&gt; 
&lt;p&gt;If you cannot run the &lt;code&gt;run_local_server.sh&lt;/code&gt; script, follow these manual steps:&lt;/p&gt; 
&lt;h4&gt;1. Prerequisites Check&lt;/h4&gt; 
&lt;p&gt;Ensure you have installed:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust&lt;/a&gt; and Cargo toolchain&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt; and Docker Compose&lt;/li&gt; 
 &lt;li&gt;PostgreSQL client (psql)&lt;/li&gt; 
 &lt;li&gt;sqlx-cli: &lt;code&gt;cargo install sqlx-cli&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;2. Configuration Setup&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Copy the configuration template
cp dev.env .env

# Edit the .env file as required (such as SMTP configurations)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. Start Docker Services&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Set environment variables
export GOTRUE_MAILER_AUTOCONFIRM=true
export GOTRUE_EXTERNAL_GOOGLE_ENABLED=true

# Start Docker Compose services
docker compose --file ./docker-compose-dev.yml up -d --build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;4. Wait for Services to Start&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Wait for PostgreSQL to be ready (adjust connection details as needed)
# Keep trying until connection succeeds
PGPASSWORD="password" psql -h "localhost" -U "postgres" -p "5432" -d "postgres" -c '\q'

# Wait for AppFlowy Cloud health check
# Keep trying until health endpoint responds
curl localhost:9999/health
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;5. Database Setup (Optional)&lt;/h4&gt; 
&lt;p&gt;If you need to reset/setup the database:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Generate protobuf files for collab-rt-entity crate
./script/code_gen.sh

# Create database and run migrations
cargo sqlx database create
cargo sqlx migrate run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;6. SQLx Preparation (Optional)&lt;/h4&gt; 
&lt;p&gt;If you need to prepare SQLx metadata:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Prepare SQLx metadata (takes a few minutes)
cargo sqlx prepare --workspace
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;7. Build AppFlowy Cloud&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Build and run AppFlowy Cloud
cargo run --package xtask
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⚙️Contributing&lt;/h2&gt; 
&lt;p&gt;Any new contribution is more than welcome in this project! If you want to know more about the development workflow or want to contribute, please visit our &lt;a href="https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/doc/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for detailed instructions!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Schniz/fnm</title>
      <link>https://github.com/Schniz/fnm</link>
      <description>&lt;p&gt;🚀 Fast and simple Node.js version manager, built in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; Fast Node Manager (&lt;code&gt;fnm&lt;/code&gt;) &lt;img alt="Amount of downloads" src="https://img.shields.io/github/downloads/Schniz/fnm/total.svg?style=flat" /&gt; &lt;a href="https://github.com/Schniz/fnm/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/Schniz/fnm/rust.yml?branch=master&amp;amp;label=workflow" alt="GitHub Actions workflow status" /&gt;&lt;/a&gt; &lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;🚀 Fast and simple Node.js version manager, built in Rust&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/Schniz/fnm/master/docs/fnm.svg?sanitize=true" alt="Blazing fast!" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;🌎 Cross-platform support (macOS, Windows, Linux)&lt;/p&gt; 
&lt;p&gt;✨ Single file, easy installation, instant startup&lt;/p&gt; 
&lt;p&gt;🚀 Built with speed in mind&lt;/p&gt; 
&lt;p&gt;📂 Works with &lt;code&gt;.node-version&lt;/code&gt; and &lt;code&gt;.nvmrc&lt;/code&gt; files&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Using a script (macOS/Linux)&lt;/h3&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;zsh&lt;/code&gt; and &lt;code&gt;fish&lt;/code&gt; shells, there's an &lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/.ci/install.sh"&gt;automatic installation script&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;First ensure that &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;unzip&lt;/code&gt; are already installed on your operating system. Then execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl -fsSL https://fnm.vercel.app/install | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Upgrade&lt;/h4&gt; 
&lt;p&gt;On macOS, it is as simple as &lt;code&gt;brew upgrade fnm&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;On other operating systems, upgrading &lt;code&gt;fnm&lt;/code&gt; is almost the same as installing it. To prevent duplication in your shell config file, pass &lt;code&gt;--skip-shell&lt;/code&gt; to the install command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl -fsSL https://fnm.vercel.app/install | bash -s -- --skip-shell
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Parameters&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;--install-dir&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Set a custom directory for fnm to be installed. The default is &lt;code&gt;$XDG_DATA_HOME/fnm&lt;/code&gt; (if &lt;code&gt;$XDG_DATA_HOME&lt;/code&gt; is not defined it falls back to &lt;code&gt;$HOME/.local/share/fnm&lt;/code&gt; on linux and &lt;code&gt;$HOME/Library/Application Support/fnm&lt;/code&gt; on MacOS).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On macOS, this option is only meaningful when using &lt;code&gt;--force-install&lt;/code&gt; since Homebrew is the default installation method.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;--skip-shell&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Skip appending shell specific loader to shell config file, based on the current user shell, defined in &lt;code&gt;$SHELL&lt;/code&gt;. e.g. for Bash, &lt;code&gt;$HOME/.bashrc&lt;/code&gt;. &lt;code&gt;$HOME/.zshrc&lt;/code&gt; for Zsh. For Fish - &lt;code&gt;$HOME/.config/fish/conf.d/fnm.fish&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--force-install&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;macOS installations using the installation script are deprecated in favor of the Homebrew formula, but this forces the script to install using it anyway.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir "./.fnm" --skip-shell
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manually&lt;/h3&gt; 
&lt;h4&gt;Using Homebrew (macOS/Linux)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install fnm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, &lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup"&gt;set up your shell for fnm&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Using Winget (Windows)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;winget install Schniz.fnm
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using Scoop (Windows)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;scoop install fnm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, &lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup"&gt;set up your shell for fnm&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Using Chocolatey (Windows)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install fnm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, &lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup"&gt;set up your shell for fnm&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Using Cargo (Linux/macOS/Windows)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo install fnm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, &lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup"&gt;set up your shell for fnm&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Using a release binary (Linux/macOS/Windows)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download the &lt;a href="https://github.com/Schniz/fnm/releases"&gt;latest release binary&lt;/a&gt; for your system&lt;/li&gt; 
 &lt;li&gt;Make it available globally on &lt;code&gt;PATH&lt;/code&gt; environment variable&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup"&gt;Set up your shell for fnm&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Removing&lt;/h3&gt; 
&lt;p&gt;To remove fnm (😢), just delete the &lt;code&gt;.fnm&lt;/code&gt; folder in your home directory. You should also edit your shell configuration to remove any references to fnm (ie. read &lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup"&gt;Shell Setup&lt;/a&gt;, and do the opposite).&lt;/p&gt; 
&lt;h2&gt;Completions&lt;/h2&gt; 
&lt;p&gt;fnm ships its completions with the binary:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;fnm completions --shell &amp;lt;SHELL&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where &lt;code&gt;&amp;lt;SHELL&amp;gt;&lt;/code&gt; can be one of the supported shells:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;bash&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;zsh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;powershell&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please follow your shell instructions to install them.&lt;/p&gt; 
&lt;h3&gt;Shell Setup&lt;/h3&gt; 
&lt;p&gt;Environment variables need to be setup before you can start using fnm. This is done by evaluating the output of &lt;code&gt;fnm env&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Check out the &lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/docs/configuration.md"&gt;Configuration&lt;/a&gt; section to enable highly recommended features, like automatic version switching.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Adding a &lt;code&gt;.node-version&lt;/code&gt; to your project is as simple as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ node --version
v14.18.3
$ node --version &amp;gt; .node-version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check out the following guides for the shell you use:&lt;/p&gt; 
&lt;h4&gt;Bash&lt;/h4&gt; 
&lt;p&gt;Add the following to your &lt;code&gt;.bashrc&lt;/code&gt; profile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;eval "$(fnm env --use-on-cd --shell bash)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Zsh&lt;/h4&gt; 
&lt;p&gt;Add the following to your &lt;code&gt;.zshrc&lt;/code&gt; profile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;eval "$(fnm env --use-on-cd --shell zsh)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fish shell&lt;/h4&gt; 
&lt;p&gt;Create &lt;code&gt;~/.config/fish/conf.d/fnm.fish&lt;/code&gt; and add this line to it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-fish"&gt;fnm env --use-on-cd --shell fish | source
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;PowerShell&lt;/h4&gt; 
&lt;p&gt;Add the following to the end of your profile file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;fnm env --use-on-cd --shell powershell | Out-String | Invoke-Expression
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;For macOS/Linux, the profile is located at &lt;code&gt;~/.config/powershell/Microsoft.PowerShell_profile.ps1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;For Windows location is either: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;%userprofile%\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1&lt;/code&gt; Powershell 5&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;%userprofile%\Documents\PowerShell\Microsoft.PowerShell_profile.ps1&lt;/code&gt; Powershell 6+&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;To create the profile file you can run this in PowerShell: &lt;pre&gt;&lt;code class="language-powershell"&gt;if (-not (Test-Path $profile)) { New-Item $profile -Force }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To edit your profile run this in PowerShell: &lt;pre&gt;&lt;code class="language-powershell"&gt;Invoke-Item $profile
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Windows Command Prompt aka Batch aka WinCMD&lt;/h4&gt; 
&lt;p&gt;fnm is also supported but is not entirely covered. You can set up a startup script for &lt;a href="https://superuser.com/a/144348"&gt;cmd.exe&lt;/a&gt; or &lt;a href="https://superuser.com/a/1855283"&gt;Windows Terminal&lt;/a&gt; and append the following lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-batch"&gt;@echo off
:: for /F will launch a new instance of cmd so we create a guard to prevent an infnite loop
if not defined FNM_AUTORUN_GUARD (
    set "FNM_AUTORUN_GUARD=AutorunGuard"
    FOR /f "tokens=*" %%z IN ('fnm env --use-on-cd') DO CALL %%z
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Usage with Cmder&lt;/h4&gt; 
&lt;p&gt;Usage is very similar to the normal WinCMD install, apart for a few tweaks to allow being called from the cmder startup script. The example &lt;strong&gt;assumes&lt;/strong&gt; that the &lt;code&gt;CMDER_ROOT&lt;/code&gt; environment variable is &lt;strong&gt;set&lt;/strong&gt; to the &lt;strong&gt;root directory&lt;/strong&gt; of your Cmder installation. Then you can do something like this:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make a .cmd file to invoke it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-batch"&gt;:: %CMDER_ROOT%\bin\fnm_init.cmd
@echo off
FOR /f "tokens=*" %%z IN ('fnm env --use-on-cd') DO CALL %%z
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add it to the startup script&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-batch"&gt;:: %CMDER_ROOT%\config\user_profile.cmd
call "%CMDER_ROOT%\bin\fnm_init.cmd"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can replace &lt;code&gt;%CMDER_ROOT%&lt;/code&gt; with any other convenient path too.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/docs/configuration.md"&gt;Configuration&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/docs/configuration.md"&gt;See the available configuration options for an extended configuration documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/docs/commands.md"&gt;Usage&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Schniz/fnm/master/docs/commands.md"&gt;See the available commands for an extended usage documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;PRs welcome &lt;span&gt;🎉&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;Developing:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Install Rust
git clone https://github.com/Schniz/fnm.git
cd fnm/
cargo build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Running Binary:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo run -- --help # Will behave like `fnm --help`
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Running Tests:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo test
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>antinomyhq/forge</title>
      <link>https://github.com/antinomyhq/forge</link>
      <description>&lt;p&gt;AI enabled pair programmer for Claude, GPT, O Series, Grok, Deepseek, Gemini and 300+ models&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;⚒️ Forge: AI-Enhanced Terminal Development Environment&lt;/h1&gt; 
&lt;p align="center"&gt;A comprehensive coding agent that integrates AI capabilities with your development environment&lt;/p&gt; 
&lt;p align="center"&gt;&lt;code&gt;npx forgecode@latest&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/antinomyhq/forge/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/antinomyhq/forge/ci.yml?style=for-the-badge" alt="CI Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/antinomyhq/forge/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/antinomyhq/forge?style=for-the-badge" alt="GitHub Release" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/kRZBPpkgwq"&gt;&lt;img src="https://img.shields.io/discord/1044859667798568962?style=for-the-badge&amp;amp;cacheSeconds=120&amp;amp;logo=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://cla-assistant.io/antinomyhq/forge"&gt;&lt;img src="https://cla-assistant.io/readme/badge/antinomyhq/forge?style=for-the-badge" alt="CLA assistant" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://assets.antinomy.ai/images/forge_demo_2x.gif" alt="Code-Forge Demo" /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Table&amp;nbsp;of&amp;nbsp;Contents&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#usage-examples"&gt;Usage Examples&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#why-forge"&gt;Why Forge?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#command-line-options"&gt;Command-Line Options&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#advanced-configuration"&gt;Advanced Configuration&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#provider-configuration"&gt;Provider Configuration&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#forgeyaml-configuration-options"&gt;forge.yaml Configuration Options&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#environment-variables"&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#mcp-configuration"&gt;MCP Configuration&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#example-use-cases"&gt;Example Use Cases&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#usage-in-multi-agent-workflows"&gt;Usage in Multi-Agent Workflows&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#community"&gt;Community&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/antinomyhq/forge/main/#support-us"&gt;Support Us&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To get started with Forge, set up your &lt;a href="https://forgecode.dev/docs/custom-providers/"&gt;provider API keys&lt;/a&gt; in your &lt;code&gt;.env&lt;/code&gt; file, then run Forge using the command below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx forgecode@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That's it! Forge is now ready to assist you with your development tasks.&lt;/p&gt; 
&lt;h2&gt;Usage Examples&lt;/h2&gt; 
&lt;p&gt;Forge can be used in different ways depending on your needs. Here are some common usage patterns:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Code Understanding&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; Can you explain how the authentication system works in this codebase?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will analyze your project's structure, identify authentication-related files, and provide a detailed explanation of the authentication flow, including the relationships between different components.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Implementing New Features&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I need to add a dark mode toggle to our React application. How should I approach this?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will suggest the best approach based on your current codebase, explain the steps needed, and even scaffold the necessary components and styles for you.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Debugging Assistance&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I'm getting this error: "TypeError: Cannot read property 'map' of undefined". What might be causing it?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will analyze the error, suggest potential causes based on your code, and propose different solutions to fix the issue.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; Please review the code in src/components/UserProfile.js and suggest improvements
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will analyze the code, identify potential issues, and suggest improvements for readability, performance, security, and maintainability.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Learning New Technologies&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I want to integrate GraphQL into this Express application. Can you explain how to get started?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will provide a tailored tutorial on integrating GraphQL with Express, using your specific project structure as context.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Database Schema Design&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I need to design a database schema for a blog with users, posts, comments, and categories
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will suggest an appropriate schema design, including tables/collections, relationships, indexes, and constraints based on your project's existing database technology.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Refactoring Legacy Code&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; Help me refactor this class-based component to use React Hooks
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge can help modernize your codebase by walking you through refactoring steps and implementing them with your approval.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Git Operations&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I need to merge branch 'feature/user-profile' into main but there are conflicts
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge can guide you through resolving git conflicts, explaining the differences and suggesting the best way to reconcile them.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Why Forge?&lt;/h2&gt; 
&lt;p&gt;Forge is designed for developers who want to enhance their workflow with AI assistance while maintaining full control over their development environment.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Zero configuration&lt;/strong&gt; - Just add your API key and you're ready to go&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless integration&lt;/strong&gt; - Works right in your terminal, where you already work&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-provider support&lt;/strong&gt; - Use OpenAI, Anthropic, or other LLM providers&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure by design&lt;/strong&gt; - Your code stays on your machine&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open-source&lt;/strong&gt; - Transparent, extensible, and community-driven&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Forge helps you code faster, solve complex problems, and learn new technologies without leaving your terminal.&lt;/p&gt; 
&lt;h2&gt;Command-Line Options&lt;/h2&gt; 
&lt;p&gt;Here's a quick reference of Forge's command-line options:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-p, --prompt &amp;lt;PROMPT&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Direct prompt to process without entering interactive mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-c, --command &amp;lt;COMMAND&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to a file containing initial commands to execute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-w, --workflow &amp;lt;WORKFLOW&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to a file containing the workflow to execute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-e, --event &amp;lt;EVENT&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Dispatch an event to the workflow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--conversation &amp;lt;CONVERSATION&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to a file containing the conversation to execute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-r, --restricted&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable restricted shell mode for enhanced security&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable verbose output mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Print help information&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-V, --version&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Print version&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Advanced Configuration&lt;/h2&gt; 
&lt;h3&gt;Provider Configuration&lt;/h3&gt; 
&lt;p&gt;Forge supports multiple AI providers. Below are setup instructions for each supported provider&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;OpenRouter&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENROUTER_API_KEY=&amp;lt;your_openrouter_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Requesty&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
REQUESTY_API_KEY=&amp;lt;your_requesty_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;x-ai&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
XAI_API_KEY=&amp;lt;your_xai_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;switch the model using &lt;code&gt;/model&lt;/code&gt; command in the Forge CLI.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;z.ai&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
ZAI_API_KEY=&amp;lt;your_zai_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;switch the model using &lt;code&gt;/model&lt;/code&gt; command in the Forge CLI.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Cerebras&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
CEREBRAS_API_KEY=&amp;lt;your_cerebras_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;switch the model using &lt;code&gt;/model&lt;/code&gt; command in the Forge CLI.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENAI_API_KEY=&amp;lt;your_openai_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: o3-mini-high
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Anthropic&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
ANTHROPIC_API_KEY=&amp;lt;your_anthropic_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: claude-3.7-sonnet
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Google Vertex AI&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
PROJECT_ID=&amp;lt;your_project_id&amp;gt;
LOCATION=&amp;lt;your_location&amp;gt;
OPENAI_API_KEY=&amp;lt;vertex_ai_key&amp;gt;
OPENAI_URL=https://${LOCATION}-aiplatform.googleapis.com/v1beta1/projects/${PROJECT_ID}/locations/${LOCATION}/endpoints/openapi
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: publishers/anthropic/models/claude-3-7-sonnet
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;OpenAI-Compatible Providers&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENAI_API_KEY=&amp;lt;your_provider_api_key&amp;gt;
OPENAI_URL=&amp;lt;your_provider_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: &amp;lt;provider-specific-model&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Groq&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENAI_API_KEY=&amp;lt;your_groq_api_key&amp;gt;
OPENAI_URL=https://api.groq.com/openai/v1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: deepseek-r1-distill-llama-70b
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Amazon Bedrock&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;To use Amazon Bedrock models with Forge, you'll need to first set up the &lt;a href="https://github.com/aws-samples/bedrock-access-gateway"&gt;Bedrock Access Gateway&lt;/a&gt;:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set up Bedrock Access Gateway&lt;/strong&gt;:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Follow the deployment steps in the &lt;a href="https://github.com/aws-samples/bedrock-access-gateway"&gt;Bedrock Access Gateway repo&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;Create your own API key in Secrets Manager&lt;/li&gt; 
    &lt;li&gt;Deploy the CloudFormation stack&lt;/li&gt; 
    &lt;li&gt;Note your API Base URL from the CloudFormation outputs&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create these files in your project directory&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
OPENAI_API_KEY=&amp;lt;your_bedrock_gateway_api_key&amp;gt;
OPENAI_URL=&amp;lt;your_bedrock_gateway_base_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: anthropic.claude-3-opus
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt;
 &lt;/ol&gt;
&lt;/details&gt;   
&lt;h3&gt;forge.yaml Configuration Options&lt;/h3&gt; 
&lt;h3&gt;Environment Variables&lt;/h3&gt; 
&lt;p&gt;Forge supports several environment variables for advanced configuration and fine-tuning. These can be set in your &lt;code&gt;.env&lt;/code&gt; file or system environment.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Retry Configuration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Control how Forge handles retry logic for failed requests:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
FORGE_RETRY_INITIAL_BACKOFF_MS=1000    # Initial backoff time in milliseconds (default: 1000)
FORGE_RETRY_BACKOFF_FACTOR=2           # Multiplier for backoff time (default: 2)
FORGE_RETRY_MAX_ATTEMPTS=3             # Maximum retry attempts (default: 3)
FORGE_SUPPRESS_RETRY_ERRORS=false      # Suppress retry error messages (default: false)
FORGE_RETRY_STATUS_CODES=429,500,502   # HTTP status codes to retry (default: 429,500,502,503,504)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;HTTP Configuration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Fine-tune HTTP client behavior for API requests:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
FORGE_HTTP_CONNECT_TIMEOUT=30              # Connection timeout in seconds (default: 30)
FORGE_HTTP_READ_TIMEOUT=900                # Read timeout in seconds (default: 900)
FORGE_HTTP_POOL_IDLE_TIMEOUT=90            # Pool idle timeout in seconds (default: 90)
FORGE_HTTP_POOL_MAX_IDLE_PER_HOST=5        # Max idle connections per host (default: 5)
FORGE_HTTP_MAX_REDIRECTS=10                # Maximum redirects to follow (default: 10)
FORGE_HTTP_USE_HICKORY=false               # Use Hickory DNS resolver (default: false)
FORGE_HTTP_TLS_BACKEND=default             # TLS backend: "default" or "rustls" (default: "default")
FORGE_HTTP_MIN_TLS_VERSION=1.2             # Minimum TLS version: "1.0", "1.1", "1.2", "1.3"
FORGE_HTTP_MAX_TLS_VERSION=1.3             # Maximum TLS version: "1.0", "1.1", "1.2", "1.3"
FORGE_HTTP_ADAPTIVE_WINDOW=true            # Enable HTTP/2 adaptive window (default: true)
FORGE_HTTP_KEEP_ALIVE_INTERVAL=60          # Keep-alive interval in seconds (default: 60, use "none"/"disabled" to disable)
FORGE_HTTP_KEEP_ALIVE_TIMEOUT=10           # Keep-alive timeout in seconds (default: 10)
FORGE_HTTP_KEEP_ALIVE_WHILE_IDLE=true      # Keep-alive while idle (default: true)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;API Configuration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Override default API endpoints:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
FORGE_API_URL=https://api.forgecode.dev  # Custom Forge API URL (default: https://api.forgecode.dev)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Tool Configuration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Configuring the tool calls settings:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
FORGE_TOOL_TIMEOUT=300         # Maximum execution time in seconds for a tool before it is terminated to prevent hanging the session. (default: 300)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;System Configuration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;System-level environment variables (usually set automatically):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# .env
FORGE_MAX_SEARCH_RESULT_BYTES=101024   # Maximum bytes for search results (default: 101024 - 10 KB)
SHELL=/bin/zsh                         # Shell to use for command execution (Unix/Linux/macOS)
COMSPEC=cmd.exe                        # Command processor to use (Windows)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;The &lt;code&gt;forge.yaml&lt;/code&gt; file supports several advanced configuration options that let you customize Forge's behavior.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Custom Rules&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Add your own guidelines that all agents should follow when generating responses.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
custom_rules: |
  1. Always add comprehensive error handling to any code you write.
  2. Include unit tests for all new functions.
  3. Follow our team's naming convention: camelCase for variables, PascalCase for classes.
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Commands&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Define custom commands as shortcuts for repetitive prompts:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
commands:
  - name: 'refactor'
    description: 'Refactor selected code'
    prompt: 'Please refactor this code to improve readability and performance'
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Specify the default AI model to use for all agents in the workflow.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
model: 'claude-3.7-sonnet'
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Max Walker Depth&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Control how deeply Forge traverses your project directory structure when gathering context.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
max_walker_depth: 3 # Limit directory traversal to 3 levels deep
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Temperature&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Adjust the creativity and randomness in AI responses. Lower values (0.0-0.3) produce more focused, deterministic outputs, while higher values (0.7-2.0) generate more diverse and creative results.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
temperature: 0.7 # Balanced creativity and focus
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Tool Max Failure Limit&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Control how many times a tool can fail before Forge forces completion to prevent infinite retry loops. This helps avoid situations where an agent gets stuck repeatedly trying the same failing operation.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
max_tool_failure_per_turn: 3 # Allow up to 3 failures per tool before forcing completion
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Set to a higher value if you want more retry attempts, or lower if you want faster failure detection.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Max Requests Per Turn&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Limit the maximum number of requests an agent can make in a single conversation turn. This prevents runaway conversations and helps control API usage and costs.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# forge.yaml
max_requests_per_turn: 50 # Allow up to 50 requests per turn
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;When this limit is reached, Forge will:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ask you if you wish to continue&lt;/li&gt; 
  &lt;li&gt;If you respond with 'Yes', it will continue the conversation&lt;/li&gt; 
  &lt;li&gt;If you respond with 'No', it will end the conversation&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Model Context Protocol (MCP)&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;The MCP feature allows AI agents to communicate with external tools and services. This implementation follows Anthropic's &lt;a href="https://docs.anthropic.com/en/docs/claude-code/tutorials#set-up-model-context-protocol-mcp"&gt;Model Context Protocol&lt;/a&gt; design.&lt;/p&gt; 
 &lt;h3&gt;MCP Configuration&lt;/h3&gt; 
 &lt;p&gt;Configure MCP servers using the CLI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# List all MCP servers
forge mcp list

# Add a new server
forge mcp add

# Add a server using JSON format
forge mcp add-json

# Get server details
forge mcp get

# Remove a server
forge mcp remove
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Or manually create a &lt;code&gt;.mcp.json&lt;/code&gt; file with the following structure:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
	"mcpServers": {
		"server_name": {
			"command": "command_to_execute",
			"args": ["arg1", "arg2"],
			"env": { "ENV_VAR": "value" }
		},
		"another_server": {
			"url": "http://localhost:3000/events"
		}
	}
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;MCP configurations are read from two locations (in order of precedence):&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Local configuration (project-specific)&lt;/li&gt; 
  &lt;li&gt;User configuration (user-specific)&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h3&gt;Example Use Cases&lt;/h3&gt; 
 &lt;p&gt;MCP can be used for various integrations:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Web browser automation&lt;/li&gt; 
  &lt;li&gt;External API interactions&lt;/li&gt; 
  &lt;li&gt;Tool integration&lt;/li&gt; 
  &lt;li&gt;Custom service connections&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Usage in Multi-Agent Workflows&lt;/h3&gt; 
 &lt;p&gt;MCP tools can be used as part of multi-agent workflows, allowing specialized agents to interact with external systems as part of a collaborative problem-solving approach.&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For comprehensive documentation on all features and capabilities, please visit the &lt;a href="https://github.com/antinomyhq/forge/tree/main/docs"&gt;documentation site&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our vibrant Discord community to connect with other Forge users and contributors, get help with your projects, share ideas, and provide feedback!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/kRZBPpkgwq"&gt;&lt;img src="https://img.shields.io/discord/1044859667798568962?style=for-the-badge&amp;amp;cacheSeconds=120&amp;amp;logo=discord" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Support Us&lt;/h2&gt; 
&lt;p&gt;Your support drives Forge's continued evolution! By starring our GitHub repository, you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Help others discover this powerful tool 🔍&lt;/li&gt; 
 &lt;li&gt;Motivate our development team 💪&lt;/li&gt; 
 &lt;li&gt;Enable us to prioritize new features 🛠️&lt;/li&gt; 
 &lt;li&gt;Strengthen our open-source community 🌱&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rust-unofficial/awesome-rust</title>
      <link>https://github.com/rust-unofficial/awesome-rust</link>
      <description>&lt;p&gt;A curated list of Rust code and resources.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome Rust &lt;a href="https://github.com/rust-unofficial/awesome-rust/actions/workflows/lint.yml"&gt;&lt;img src="https://github.com/rust-unofficial/awesome-rust/actions/workflows/lint.yml/badge.svg?sanitize=true" alt="lint badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rust-unofficial/awesome-rust/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/rust-unofficial/awesome-rust/actions/workflows/rust.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt; &lt;a href="https://www.trackawesomelist.com/rust-unofficial/awesome-rust/"&gt;&lt;img src="https://www.trackawesomelist.com/badge.svg?sanitize=true" alt="Track Awesome List" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;A curated list of Rust code and resources.&lt;/p&gt; 
&lt;p&gt;If you want to contribute, please read &lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/CONTRIBUTING.md"&gt;this&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;!-- toc --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#applications"&gt;Applications&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#audio-and-music"&gt;Audio and Music&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#blockchain"&gt;Blockchain&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#database"&gt;Database&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#embedded"&gt;Embedded&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#emulators"&gt;Emulators&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#file-manager"&gt;File manager&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#finance"&gt;Finance&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#games"&gt;Games&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#graphics"&gt;Graphics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#image-processing"&gt;Image processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#industrial-automation"&gt;Industrial automation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#message-queue"&gt;Message Queue&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#mlops"&gt;MLOps&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#observability"&gt;Observability&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#operating-systems"&gt;Operating systems&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#package-managers"&gt;Package Managers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#payments"&gt;Payments&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#productivity"&gt;Productivity&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#routing-protocols"&gt;Routing protocols&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#security-tools"&gt;Security tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#social-networks"&gt;Social networks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#system-tools"&gt;System tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#task-scheduling"&gt;Task scheduling&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#text-editors"&gt;Text editors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#text-processing"&gt;Text processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#utilities"&gt;Utilities&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#video"&gt;Video&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#virtualization"&gt;Virtualization&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#web"&gt;Web&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#web-servers"&gt;Web Servers&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#development-tools"&gt;Development tools&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#build-system"&gt;Build system&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#debugging"&gt;Debugging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#deployment"&gt;Deployment&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#embedded-1"&gt;Embedded&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#ffi"&gt;FFI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#formatters"&gt;Formatters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#ides"&gt;IDEs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#profiling"&gt;Profiling&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#services"&gt;Services&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#static-analysis"&gt;Static analysis&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#transpiling"&gt;Transpiling&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#libraries"&gt;Libraries&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#artificial-intelligence"&gt;Artificial Intelligence&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#genetic-algorithms"&gt;Genetic algorithms&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#machine-learning"&gt;Machine learning&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#openai"&gt;OpenAI&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#tooling"&gt;Tooling&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#astronomy"&gt;Astronomy&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#asynchronous"&gt;Asynchronous&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#audio-and-music-1"&gt;Audio and Music&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#authentication"&gt;Authentication&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#automotive"&gt;Automotive&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#bioinformatics"&gt;Bioinformatics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#caching"&gt;Caching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#cloud"&gt;Cloud&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#command-line"&gt;Command-line&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#compression"&gt;Compression&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#computation"&gt;Computation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#concurrency"&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#cryptography"&gt;Cryptography&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#data-processing"&gt;Data processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#data-streaming"&gt;Data streaming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#data-structures"&gt;Data structures&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#data-visualization"&gt;Data visualization&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#database-1"&gt;Database&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#date-and-time"&gt;Date and time&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#distributed-systems"&gt;Distributed systems&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#domain-driven-design"&gt;Domain driven design&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#ebpf"&gt;eBPF&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#email"&gt;Email&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#encoding"&gt;Encoding&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#filesystem"&gt;Filesystem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#finance-1"&gt;Finance&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#functional-programming"&gt;Functional Programming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#game-development"&gt;Game development&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#geospatial"&gt;Geospatial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#graph-algorithms"&gt;Graph algorithms&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#graphics-1"&gt;Graphics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#gui"&gt;GUI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#image-processing-1"&gt;Image processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#language-specification"&gt;Language specification&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#licensing"&gt;Licensing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#macro"&gt;Macro&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#markup-language"&gt;Markup language&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#mobile"&gt;Mobile&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#network-programming"&gt;Network programming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#parsing"&gt;Parsing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#peripherals"&gt;Peripherals&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#platform-specific"&gt;Platform specific&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#reverse-engineering"&gt;Reverse engineering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#scripting"&gt;Scripting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#simulation"&gt;Simulation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#social-networks-1"&gt;Social networks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#system"&gt;System&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#task-scheduling-1"&gt;Task scheduling&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#template-engine"&gt;Template engine&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#text-processing-1"&gt;Text processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#text-search"&gt;Text search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#unsafe"&gt;Unsafe&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#video-1"&gt;Video&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#virtualization-1"&gt;Virtualization&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#web-programming"&gt;Web programming&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#registries"&gt;Registries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- tocstop --&gt; 
&lt;h2&gt;Applications&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alacritty/alacritty"&gt;alacritty&lt;/a&gt; - A cross-platform, GPU enhanced terminal emulator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.torproject.org/tpo/core/arti"&gt;Arti&lt;/a&gt; - An implementation of Tor. (So far, it's a not-very-complete client. But watch this space!) &lt;a href="https://crates.io/crates/arti"&gt;&lt;img src="https://img.shields.io/crates/v/arti.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cch123/asm-cli-rust"&gt;asm-cli-rust&lt;/a&gt; - An interactive assembly shell.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clash-verge-rev/clash-verge-rev"&gt;clash-verge-rev/clash-verge-rev&lt;/a&gt; - A cross-platform, modern Clash GUI based on tauri &amp;amp; rust, supporting Windows, macOS, and Linux.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudflare/boringtun"&gt;cloudflare/boringtun&lt;/a&gt; - A Userspace WireGuard VPN Implementation &lt;a href="https://crates.io/crates/boringtun"&gt;&lt;img src="https://img.shields.io/crates/v/boringtun.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/defguard/defguard"&gt;defguard&lt;/a&gt; - Enterprise Open Source SSO &amp;amp; WireGuard VPN with real 2FA/MFA&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/denoland/deno"&gt;denoland/deno&lt;/a&gt; - A secure JavaScript/TypeScript runtime built with V8 and Tokio &lt;a href="https://github.com/denoland/deno/actions"&gt;&lt;img src="https://github.com/denoland/deno/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/doprz/dipc"&gt;doprz/dipc&lt;/a&gt; - Convert your favorite images and wallpapers with your favorite color palettes/themes &lt;a href="https://crates.io/crates/dipc"&gt;&lt;img src="https://img.shields.io/crates/v/dipc" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EasyTier/EasyTier"&gt;EasyTier&lt;/a&gt; - A simple, full-featured and decentralized mesh VPN with WireGuard support. &lt;a href="https://crates.io/crates/easytier"&gt;&lt;img src="https://img.shields.io/crates/v/easytier" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/actions/"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/core.yml/badge.svg?sanitize=true" alt="GitHub actions" /&gt;&lt;/a&gt;&lt;a href="https://github.com/EasyTier/EasyTier/actions/"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/gui.yml/badge.svg?sanitize=true" alt="GitHub actions" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/edit"&gt;Edit&lt;/a&gt; - A simple editor for simple needs. &lt;a href="https://github.com/microsoft/edit/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/microsoft/edit/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fcsonline/drill"&gt;fcsonline/drill&lt;/a&gt; - A HTTP load testing application inspired by Ansible syntax&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/printfn/fend"&gt;fend&lt;/a&gt; - Arbitrary-precision unit-aware calculator &lt;a href="https://github.com/printfn/fend/actions/workflows/actions.yml"&gt;&lt;img src="https://github.com/printfn/fend/workflows/build/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fractalide/fractalide"&gt;Fractalide&lt;/a&gt; - Simple microservices&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/habitat-sh/habitat"&gt;habitat&lt;/a&gt; - A tool created by Chef to build, deploy, and manage applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imjacobclark/Herd"&gt;Herd&lt;/a&gt; - an experimental HTTP load testing application&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/hickory-dns"&gt;hickory-dns&lt;/a&gt; - A DNS-server &lt;a href="https://github.com/hickory-dns/hickory-dns/actions?query=workflow%3Atest"&gt;&lt;img src="https://github.com/hickory-dns/hickory-dns/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tonarino/innernet"&gt;innernet&lt;/a&gt; - An overlay or private mesh network that uses Wireguard under the hood&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/awslabs/flowgger"&gt;jedisct1/flowgger&lt;/a&gt; - A fast, simple and lightweight data collector&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PaddiM8/kalker"&gt;kalker&lt;/a&gt; - A scientific calculator that supports math-like syntax with user-defined variables, functions, derivation, integration, and complex numbers. Cross-platform + WASM support &lt;a href="https://github.com/PaddiM8/kalker/actions"&gt;&lt;img src="https://github.com/PaddiM8/kalker/workflows/Release/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hcavarsan/kftray"&gt;kftray&lt;/a&gt; - A cross-platform system tray app for managing and sharing multiple kubectl port-forward configurations. &lt;a href="https://github.com/hcavarsan/kftray/actions"&gt;&lt;img src="https://github.com/hcavarsan/kftray/workflows/Release/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/changlan/kytan"&gt;kytan&lt;/a&gt; - High Performance Peer-to-Peer VPN&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linkerd/linkerd2-proxy"&gt;linkerd/linkerd2-proxy&lt;/a&gt; - Ultralight service mesh for Kubernetes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maidsafe"&gt;MaidSafe&lt;/a&gt; - A decentralized platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/mdBook"&gt;mdBook&lt;/a&gt; - A command line utility to create books from markdown files &lt;a href="https://github.com/rust-lang/mdBook/actions"&gt;&lt;img src="https://github.com/rust-lang/mdBook/actions/workflows/main.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/web3infra-foundation/mega"&gt;Mega&lt;/a&gt; - A monorepo &amp;amp; monolithic codebase management system that supports Git, also is an unofficial open source implementation of Google Piper.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/metalbear-co/mirrord"&gt;mirrord&lt;/a&gt; - Connect your local process and your cloud environment, and run local code in cloud conditions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nicohman/eidolon"&gt;nicohman/eidolon&lt;/a&gt; - A steam and drm-free game registry and launcher for linux and macosx&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pijul.org"&gt;Pijul&lt;/a&gt; - A patch-based distributed version control system&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sebadob/rauthy"&gt;Rauthy&lt;/a&gt; - OpenID Connect Single Sign-On Identity &amp;amp; Access Management&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/raphamorim/rio"&gt;Rio&lt;/a&gt; - A hardware-accelerated GPU terminal emulator powered by WebGPU, focusing to run in desktops and browsers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iot-ecology/rust-iot-platform"&gt;Rust Iot Platform&lt;/a&gt; - A high-performance IoT development platform built with Rust, designed for multi-protocol support and real-time data processing. This platform supports MQTT, WebSockets (WS), TCP, and CoAP protocols, making it highly flexible for diverse IoT applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudhead/rx"&gt;rx&lt;/a&gt; - Vi inspired Modern Pixel Art Editor&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ignisda/ryot"&gt;Ryot&lt;/a&gt; - A self hosted application to track media consumption, fitness, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sopaco/saga-reader"&gt;Saga Reader&lt;/a&gt; - A Blazing-Fast and Extremely-Lightweight Internet Reader driven by AI.Supports fetching of search engine information and RSS.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/servo/servo"&gt;Servo&lt;/a&gt; - A prototype web browser engine&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cfal/shoes"&gt;shoes&lt;/a&gt; - A multi-protocol proxy server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/shuttle-hq/shuttle"&gt;shuttle&lt;/a&gt; - A serverless platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GyulyVGC/sniffnet"&gt;Sniffnet&lt;/a&gt; - Cross-platform application to monitor your network traffic with ease &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/.github/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/gyulyvgc/sniffnet/rust.yml?logo=github" alt="build badge" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/sniffnet"&gt;&lt;img src="https://img.shields.io/crates/v/sniffnet?logo=rust" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swc-project/swc"&gt;SWC&lt;/a&gt; - super-fast TypeScript / JavaScript compiler&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/osa1/tiny"&gt;tiny&lt;/a&gt; - A terminal IRC client&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/upvpn/upvpn-app"&gt;UpVPN&lt;/a&gt; - WireGuard VPN client for macOS, Linux, and Windows built on Tauri.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x676e67/vproxy"&gt;vproxy&lt;/a&gt; - A high-performance HTTP/HTTPS/SOCKS5 proxy server &lt;a href="https://crates.io/crates/vproxy"&gt;&lt;img src="https://img.shields.io/crates/v/vproxy.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wasmerio/wasmer"&gt;wasmer&lt;/a&gt; - A safe and fast WebAssembly runtime supporting WASI and Emscripten &lt;a href="https://github.com/wasmerio/wasmer/actions"&gt;&lt;img src="https://github.com/wasmerio/wasmer/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/serayuzgur/weld"&gt;Weld&lt;/a&gt; - Full fake REST API generator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wezterm/wezterm"&gt;wezterm&lt;/a&gt; - A GPU-accelerated cross-platform terminal emulator and multiplexer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wasmerio/winterjs"&gt;WinterJS&lt;/a&gt; - A secure JavaScript runtime built with SpiderMonkey and Axum&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zellij-org/zellij"&gt;zellij&lt;/a&gt; - A terminal multiplexer (workspace) with batteries included&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Audio and Music&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kimono-koans/dano"&gt;dano&lt;/a&gt; - A hashdeep/md5tree (but much more) for media files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DasEtwas/enginesound"&gt;enginesound&lt;/a&gt; - A GUI and command line application used to procedurally generate semi-realistic engine sounds. Featuring in-depth configuration, variable sample rate and a frequency analysis window.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hinto-janai/festival"&gt;Festival&lt;/a&gt; - A local music player/server/client &lt;a href="https://github.com/hinto-janai/festival/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/hinto-janai/festival/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/figsoda/mmtc"&gt;figsoda/mmtc&lt;/a&gt; [&lt;a href="https://crates.io/crates/mmtc"&gt;mmtc&lt;/a&gt;] - Minimal mpd terminal client that aims to be simple yet highly configurable &lt;a href="https://github.com/figsoda/mmtc/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/figsoda/mmtc/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chaosprint/glicol"&gt;Glicol&lt;/a&gt; - Graph-oriented live coding language, for collaborative musicking in browsers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hrkfdn/ncspot"&gt;ncspot&lt;/a&gt; - Cross-platform ncurses Spotify client, inspired by ncmpc and the likes. &lt;a href="https://github.com/hrkfdn/ncspot/actions?query=workflow%3ABuild"&gt;&lt;img src="https://github.com/hrkfdn/ncspot/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/madeofpendletonwool/PinePods"&gt;Pinepods&lt;/a&gt; - A rust based podcast management system with multi-user support. Pinepods utilizes a central database so aspects like listen time and themes follow from device to device. With clients built using Tauri, it's a full cross-platform listening solution! &lt;a href="https://github.com/madeofpendletonwool/PinePods/actions/workflows/docker-publish.yml"&gt;&lt;img src="https://github.com/madeofpendletonwool/PinePods/actions/workflows/docker-publish.yml/badge.svg?sanitize=true" alt="Docker Container Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/agersant/polaris"&gt;Polaris&lt;/a&gt; - A music streaming application.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aome510/spotify-player"&gt;Spotify Player&lt;/a&gt; - A Spotify player in the terminal with full feature parity.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Spotifyd/spotifyd"&gt;Spotifyd&lt;/a&gt; - An open source Spotify client running as a UNIX daemon. &lt;a href="https://github.com/Spotifyd/spotifyd/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/Spotifyd/spotifyd/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Continuous Integration" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tramhao/termusic"&gt;termusic&lt;/a&gt; - Music Player TUI written&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sergree/whatbpm"&gt;WhatBPM&lt;/a&gt; - A daily statically generated information resource for electronic dance music producers. Provides daily analytics on the most frequently used values for each EDM genre: tempos, keys, root notes, and so on, using publicly available data such as Beatport and Spotify.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Blockchain&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-foundation/anchor"&gt;Anchor&lt;/a&gt; - Anchor is the leading development framework for building secure Solana programs (smart contracts).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradigmxyz/artemis"&gt;artemis&lt;/a&gt; - A simple, modular, and fast framework for writing MEV bots.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/eigerco/beerus"&gt;beerus&lt;/a&gt; - Beerus is a trustless StarkNet Light Client, ⚡blazing fast ⚡ &lt;a href="https://github.com/eigerco/beerus/actions/workflows/check.yml"&gt;&lt;img src="https://github.com/eigerco/beerus/actions/workflows/check.yml/badge.svg?sanitize=true" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brentongunning/rust-sv"&gt;Bitcoin Satoshi's Vision&lt;/a&gt; [&lt;a href="https://crates.io/crates/sv"&gt;sv&lt;/a&gt;] - A library for working with Bitcoin SV.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/starkware-libs/cairo"&gt;cairo&lt;/a&gt; - Cairo is the first Turing-complete language for creating provable programs for general computation. This is also the native language of &lt;a href="https://www.starknet.io"&gt;StarkNet&lt;/a&gt;, a ZK-Rollup using STARK proofs &lt;img src="https://img.shields.io/github/workflow/status/starkware-libs/cairo/CI?style=flat-square&amp;amp;logo=github" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lambdaclass/cairo-vm"&gt;cairo-vm&lt;/a&gt; - Implementation of the Cairo VM &lt;a href="https://github.com/lambdaclass/cairo-vm/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/lambdaclass/cairo-vm/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chainx-org/ChainX"&gt;ChainX&lt;/a&gt; - Fully Decentralized Interchain Crypto Asset Management on Polkadot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/citahub/cita"&gt;CITA&lt;/a&gt; - A high performance blockchain kernel for enterprise users.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inv2004/coinbase-pro-rs"&gt;coinbase-pro-rs&lt;/a&gt; - Coinbase pro client, supports sync/async/websocket&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/diem/diem"&gt;Diem&lt;/a&gt; - Diem’s mission is to enable a simple global currency and financial infrastructure that empowers billions of people.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dusk-network/rusk"&gt;dusk-network/rusk&lt;/a&gt; - Reference implementation of Dusk, a privacy-focused, scalable FMI for real-world assets (RWA) and compliant financial applications. &lt;a href="https://github.com/dusk-network/rusk/actions/workflows/rusk_ci.yml"&gt;&lt;img src="https://github.com/dusk-network/rusk/actions/workflows/rusk_ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/romanz/electrs"&gt;electrumrs&lt;/a&gt; - An efficient re-implementation of Electrum Server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-ethereum/ethabi"&gt;ethabi&lt;/a&gt; - Encode and decode smart contract invocations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Limeth/ethaddrgen"&gt;ethaddrgen&lt;/a&gt; - Custom Ethereum vanity address generator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quilt/etk"&gt;etk&lt;/a&gt; - etk is a collection of tools for writing, reading, and analyzing EVM bytecode.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ChainSafe/forest"&gt;Forest&lt;/a&gt; - Filecoin implementation &lt;a href="https://app.circleci.com/pipelines/github/ChainSafe/forest?branch=main"&gt;&lt;img src="https://img.shields.io/circleci/build/gh/ChainSafe/forest/main?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/foundry-rs/foundry"&gt;Foundry&lt;/a&gt; - Foundry is a blazing fast, portable and modular toolkit for Ethereum application development. &lt;img src="https://img.shields.io/github/workflow/status/foundry-rs/foundry/test?style=flat-square" alt="Build Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mimblewimble/grin/"&gt;Grin&lt;/a&gt; - Evolution of the MimbleWimble protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jjyr/hdwallet"&gt;hdwallet&lt;/a&gt; [&lt;a href="https://crates.io/crates/hdwallet"&gt;hdwallet&lt;/a&gt;] - BIP-32 HD wallet related key derivation utilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/holochain/holochain"&gt;Holochain&lt;/a&gt; - Scalable P2P alternative to blockchain for all those distributed apps you always wanted to build. &lt;a href="https://github.com/holochain/holochain/actions/"&gt;&lt;img src="https://github.com/holochain/holochain/actions/workflows/autorebase.yml/badge.svg?sanitize=true" alt="detect critical check failures" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hyperlane-xyz/hyperlane-monorepo"&gt;Hyperlane&lt;/a&gt; - Framework for permissionless, modular interoperability. The offchain clients are written in Rust, as well as the smart contracts for Solana VM and CosmWasm.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/informalsystems/hermes"&gt;ibc-rs&lt;/a&gt; - Implementation of the &lt;a href="https://ibc.cosmos.network/"&gt;Interblockchain Communication&lt;/a&gt; protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/infincia/bip39-rs"&gt;infincia/bip39-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/bip39"&gt;bip39&lt;/a&gt;] - Implementation of BIP39.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/interlay/interbtc"&gt;interBTC&lt;/a&gt; - Trustless and fully decentralized Bitcoin bridge to Polkadot and Kusama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Joystream/joystream"&gt;Joystream&lt;/a&gt; - A user governed video platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kaspanet/rusty-kaspa"&gt;Kaspa&lt;/a&gt; - The fastest, open-source, decentralized &amp;amp; fully scalable Layer-1 in the world.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigp/lighthouse"&gt;Lighthouse&lt;/a&gt; - Ethereum Consensus Layer (CL) Client &lt;a href="https://github.com/sigp/lighthouse/actions"&gt;&lt;img src="https://github.com/sigp/lighthouse/actions/workflows/test-suite.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/near/nearcore"&gt;near/nearcore&lt;/a&gt; - decentralized smart-contract platform for low-end mobile devices.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nervosnetwork/ckb"&gt;Nervos CKB&lt;/a&gt; - Nervos CKB is a public permissionless blockchain, the common knowledge layer of Nervos network.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gakonst/opensea-rs"&gt;opensea-rs&lt;/a&gt; - Bindings &amp;amp; CLI to the Opensea API and Contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paritytech/parity-bitcoin"&gt;Parity-Bitcoin&lt;/a&gt; - The Parity Bitcoin client&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Phala-Network/phala-blockchain"&gt;Phala-Network/phala-blockchain&lt;/a&gt; - Confidential smart contract blockchain based on Intel SGX and Substrate&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paritytech/polkadot-sdk"&gt;polkadot-sdk&lt;/a&gt; - The Parity Polkadot Blockchain SDK&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradigmxyz/reth"&gt;reth&lt;/a&gt; - Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bluealloy/revm"&gt;revm&lt;/a&gt; - Revolutionary Machine (revm) is a fast Ethereum virtual machine.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-bitcoin/rust-bitcoin"&gt;rust-bitcoin&lt;/a&gt; - Library with support for de/serialization, parsing and executing on data structures and network messages related to Bitcoin.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lightningdevkit/rust-lightning"&gt;rust-lightning&lt;/a&gt; &lt;a href="https://crates.io/crates/lightning"&gt;&lt;img src="https://img.shields.io/crates/v/lightning.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt; - Bitcoin Lightning library. The main crate,&lt;code&gt;lightning&lt;/code&gt;, does not handle networking, persistence, or any other I/O. Thus,it is runtime-agnostic, but users must implement basic networking logic, chain interactions, and disk storage.po on linking crate.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ergoplatform/sigma-rust"&gt;sigma-rust&lt;/a&gt; - ErgoTree interpreter and wallet-related features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/autonomys/subspace"&gt;Subspace&lt;/a&gt; - The first layer-one blockchain that can fully resolve the blockchain trilemma by simultaneously achieving scalability, security, and decentralization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MystenLabs/sui"&gt;Sui&lt;/a&gt; - A next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the Move programming language.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alloy-rs/svm-rs"&gt;svm-rs&lt;/a&gt; - Solidity-Compiler Version Manager.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cometbft/tendermint-rs"&gt;tendermint-rs&lt;/a&gt; - Tendermint blockchain data structures and clients&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/howardwu/wagyu"&gt;wagyu&lt;/a&gt; [&lt;a href="https://crates.io/crates/wagyu"&gt;wagyu&lt;/a&gt;] - Library for generating cryptocurrency wallets&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zcash/zcash"&gt;zcash&lt;/a&gt; - Zcash is an implementation of the "Zerocash" protocol.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apecloud/ape-dts"&gt;apecloud/ape-dts&lt;/a&gt; - Data Transfer Suite. Provides data replication between MySQL, PostgreSQL, Redis, MongoDB, Kafka, ClickHouse, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atomicdata-dev/atomic-server/"&gt;Atomic-Server&lt;/a&gt; [&lt;a href="https://crates.io/crates/atomic_server"&gt;atomic-server&lt;/a&gt;] - NoSQL graph database with realtime updates, dynamic indexing and easy-to-use GUI for CMS purposes. &lt;a href="https://github.com/atomicdata-dev/atomic-server/actions"&gt;&lt;img src="https://github.com/atomicdata-dev/atomic-server/actions/workflows/release_please.yml/badge.svg?sanitize=true" alt="Release" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cozodb/cozo"&gt;CozoDB&lt;/a&gt; - A transactional, relational database that uses Datalog and focuses on graph data and algorithms. Time-travel-capable, and fast! &lt;a href="https://github.com/cozodb/cozo/actions/workflows/build.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/cozodb/cozo/build.yml?branch=main" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Rustixir/darkbird"&gt;darkbird&lt;/a&gt; [&lt;a href="https://crates.io/crates/darkbird"&gt;darkbird&lt;/a&gt;] - HighConcurrency, RealTime, InMemory storage inspired by erlang mnesia&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/databendlabs/databend"&gt;Databend&lt;/a&gt; - A Modern Real-Time Data Processing &amp;amp; Analytics DBMS with Cloud-Native Architecture &lt;a href="https://github.com/databendlabs/databend/actions"&gt;&lt;img src="https://github.com/databendlabs/databend/actions/workflows/release.yml/badge.svg?sanitize=true" alt="Release" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dbpunk-labs/db3"&gt;DB3 Network&lt;/a&gt; - DB3 is a community-driven blockchain layer2 decentralized database network &lt;a href="https://github.com/dbpunk-labs/db3/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/dbpunk-labs/db3/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="GitHub Workflow Status (with event)" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/erikgrinaker/toydb"&gt;erikgrinaker/toydb&lt;/a&gt; - Distributed SQL database, written as a learning project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deuxfleurs-org/garage"&gt;Garage&lt;/a&gt; [&lt;a href="https://crates.io/crates/garage"&gt;garage&lt;/a&gt;] - S3-compatible distributed object storage service designed for self-hosting at a small-to-medium scale. &lt;a href="https://woodpecker.deuxfleurs.fr/repos/1"&gt;&lt;img src="https://woodpecker.deuxfleurs.fr/api/badges/1/status.svg?sanitize=true" alt="status-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gluesql/gluesql"&gt;GlueSQL&lt;/a&gt; - Rust library for SQL databases that includes a parser (sqlparser-rs), an execution layer, and a variety of storage options, both persistent and non-persistent, all in one package. &lt;a href="https://crates.io/crates/gluesql"&gt;&lt;img src="https://img.shields.io/crates/v/gluesql.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/grepTimeTeam/greptimedb/"&gt;GreptimeDB&lt;/a&gt; - An open-source, cloud-native, distributed time-series database with PromQL/SQL/Python supported.&lt;a href="https://github.com/greptimeTeam/greptimedb/actions/workflows/develop.yml"&gt;&lt;img src="https://github.com/greptimeTeam/greptimedb/actions/workflows/develop.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HelixDB/helix-db"&gt;HelixDB&lt;/a&gt; - A powerful, graph-vector database for intelligent data storage for RAG and AI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sebadob/hiqlite"&gt;Hiqlite&lt;/a&gt; - highly-available, embeddable, raft-based SQLite + cache&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/indradb"&gt;indradb&lt;/a&gt; - Graph database&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KipData/KiteSQL"&gt;KiteSQL&lt;/a&gt; - SQL as a Function for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lancedb/lancedb"&gt;lancedb&lt;/a&gt; [&lt;a href="https://crates.io/crates/vectordb"&gt;vectordb&lt;/a&gt;] - A serverless, low-latency vector database for AI applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lucid-kv/lucid"&gt;Lucid&lt;/a&gt; - High performance and distributed KV store accessible through a HTTP API. &lt;a href="https://github.com/lucid-kv/lucid/actions?workflow=Lucid"&gt;&lt;img src="https://github.com/lucid-kv/lucid/workflows/Lucid/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MaterializeInc/materialize"&gt;Materialize&lt;/a&gt; - Streaming SQL database powered by Timely Dataflow &lt;span&gt;💲&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vincent-herlemont/native_db"&gt;native_db&lt;/a&gt; [&lt;a href="https://crates.io/crates/native_db"&gt;native_db&lt;/a&gt;] - Drop-in, embedded database for multi-platform apps (server, desktop, mobile). Sync Rust types effortlessly&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neondatabase/neon"&gt;Neon&lt;/a&gt; - Serverless Postgres. We separated storage and compute to offer autoscaling, branching, and bottomless storage.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mit-pdos/noria"&gt;noria&lt;/a&gt; [&lt;a href="https://crates.io/crates/noria"&gt;noria&lt;/a&gt;] - Dynamically changing, partially-stateful data-flow for web application backends&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oxigraph/oxigraph"&gt;oxigraph/oxigraph&lt;/a&gt; [&lt;a href="https://crates.io/crates/oxigraph"&gt;oxigraph&lt;/a&gt;] - graph database implementing the &lt;a href="https://www.w3.org/TR/sparql11-overview/"&gt;SPARQL&lt;/a&gt; standard &lt;img src="https://img.shields.io/crates/v/oxigraph?logo=Rust" alt="Crates.io Version" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradedb/paradedb/"&gt;ParadeDB&lt;/a&gt; - ParadeDB is an Elasticsearch alternative built on Postgres, designed for real-time search and analytics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paritytech/parity-db"&gt;ParityDB&lt;/a&gt; - Fast and reliable database, optimised for read operation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PumpkinDB/PumpkinDB"&gt;PumpkinDB&lt;/a&gt; - an event sourcing database engine&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant"&gt;Qdrant&lt;/a&gt; - An open source vector similarity search engine with extended filtering support &lt;a href="https://github.com/qdrant/qdrant/actions"&gt;&lt;img src="https://github.com/qdrant/qdrant/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Qrlew/qrlew"&gt;Qrlew/qrlew&lt;/a&gt; [&lt;a href="https://crates.io/crates/qrlew"&gt;qrlew&lt;/a&gt;] - The SQL-to-SQL Differential Privacy layer &lt;a href="https://github.com/Qrlew/qrlew/actions"&gt;&lt;img src="https://github.com/Qrlew/qrlew/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Qrlew" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/v/qrlew?logo=Rust" alt="Crates.io Version" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RisingWaveLabs/risingwave"&gt;RisingWaveLabs/RisingWave&lt;/a&gt; - the next-generation streaming database in the cloud &lt;a href="https://github.com/risingwavelabs/risingwave/actions"&gt;&lt;img src="https://github.com/risingwavelabs/risingwave/actions/workflows/labeler.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/seppo0010/rsedis"&gt;seppo0010/rsedis&lt;/a&gt; - A Redis reimplementation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/skytable/skytable"&gt;Skytable&lt;/a&gt; - A multi-model NoSQL database &lt;img src="https://img.shields.io/github/workflow/status/skytable/skytable/Tests?style=flat-square" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/sled"&gt;sled&lt;/a&gt; - A (beta) modern embedded database &lt;a href="https://github.com/spacejam/sled/actions?workflow=Rust"&gt;&lt;img src="https://github.com/spacejam/sled/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orbitinghail/sqlsync"&gt;SQLSync&lt;/a&gt; - Multiplayer offline-first SQLite &lt;a href="https://github.com/orbitinghail/sqlsync/actions?query=branch%3Amain"&gt;&lt;img src="https://github.com/orbitinghail/sqlsync/actions/workflows/actions.yaml/badge.svg?branch=main" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/surrealdb/surrealdb"&gt;SurrealDB&lt;/a&gt; - A scalable, distributed, document-graph database &lt;a href="https://github.com/surrealdb/surrealdb/actions"&gt;&lt;img src="https://img.shields.io/github/workflow/status/surrealdb/surrealdb/Continuous%20integration/main" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/terminusdb/terminusdb-store"&gt;TerminusDB&lt;/a&gt; - open source graph database and document store &lt;a href="https://github.com/terminusdb/terminusdb-store/actions"&gt;&lt;img src="https://github.com/terminusdb/terminusdb-store/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tikv/tikv"&gt;tikv&lt;/a&gt; - A distributed KV database in Rust &lt;a href="https://ci.pingcap.net/job/tikv_ghpr_test/"&gt;&lt;img src="https://ci.pingcap.net/job/tikv_ghpr_test/badge/icon" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tonbo-io/tonbo"&gt;Tonbo&lt;/a&gt; - Tonbo is an embedded persistent database built on Apache Arrow &amp;amp; Parquet &lt;a href="https://crates.io/crates/tonbo"&gt;&lt;img src="https://img.shields.io/crates/v/tonbo.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trailbaseio/trailbase"&gt;TrailBase&lt;/a&gt; - A fast, lightweight, single-file FireBase alternative with type-safe APIs, built-in V8 JS/ES6/TS engine, auth and admin dashboard &lt;a href="https://github.com/trailbaseio/trailbase/actions?workflow=test"&gt;&lt;img src="https://github.com/trailbaseio/trailbase/workflows/test/badge.svg?sanitize=true" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tursodatabase/turso"&gt;Turso&lt;/a&gt; - Turso Database is an in-process SQL database, compatible with SQLite.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/unum-cloud/usearch"&gt;USearch&lt;/a&gt; - Similarity Search Engine for Vectors and Strings &lt;a href="https://crates.io/crates/usearch"&gt;&lt;img src="https://img.shields.io/crates/v/usearch.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kn0sys/valentinus"&gt;valentinus&lt;/a&gt; - Next generation vector database built with LMDB bindings &lt;a href="https://crates.io/crates/valentinus"&gt;&lt;img src="https://img.shields.io/crates/v/valentinus" alt="Crates.io Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vorot93/libmdbx-rs"&gt;vorot93/libmdbx-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/mdbx-sys"&gt;mdbx-sys&lt;/a&gt;] - Bindings for MDBX, a "fast, compact, powerful, embedded, transactional key-value database, with permissive license". This is a fork of mozilla/lmdb-rs with patches to make it work with libmdbx.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/naomijub/wooridb"&gt;WooriDB&lt;/a&gt; - General purpose time serial database inspired by Crux and Datomic.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Embedded&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/haobogu/rmk"&gt;rmk&lt;/a&gt; - A feature-rich keyboard firmware.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-osdev/uefi-rs"&gt;uefi-rs&lt;/a&gt; - Rusty wrapper for the Unified Extensible Firmware Interface. This crate makes it easy to develop Rust software that leverages safe, convenient, and performant abstractions for UEFI functionality.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Emulators&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://crates.io/keywords/emulator"&gt;crates matching keyword 'emulator'&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CHIP-8 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ColinEberhardt/wasm-rust-chip8"&gt;ColinEberhardt/wasm-rust-chip8&lt;/a&gt; - A WebAssembly CHIP-8 emulator.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/starrhorne/chip8-rust"&gt;starrhorne/chip8-rust&lt;/a&gt; - chip8 emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Commodore 64 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kondrak/rust64"&gt;kondrak/rust64&lt;/a&gt; - Commodore 64 emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Flash Player 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ruffle-rs/ruffle"&gt;Ruffle&lt;/a&gt; - Ruffle is an Adobe Flash Player emulator. Ruffle targets both the desktop and the web using WebAssembly. &lt;a href="https://github.com/ruffle-rs/ruffle/actions/workflows/test_rust.yml"&gt;&lt;img src="https://github.com/ruffle-rs/ruffle/actions/workflows/test_rust.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ruffle-rs/ruffle/actions/workflows/test_web.yml"&gt;&lt;img src="https://github.com/ruffle-rs/ruffle/actions/workflows/test_web.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Gameboy 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Gekkio/mooneye-gb"&gt;Gekkio/mooneye-gb&lt;/a&gt; - A Game Boy research project and emulator&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/joamag/boytacean"&gt;joamag/boytacean&lt;/a&gt; - GameBoy Color emulator that runs on the Web using WebAssembly.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mohanson/gameboy"&gt;mohanson/gameboy&lt;/a&gt; - Full featured Cross-platform GameBoy emulator. Forever boys!.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mvdnes/rboy"&gt;mvdnes/rboy&lt;/a&gt; - A Gameboy Emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Gameboy Advance 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/michelhe/rustboyadvance-ng"&gt;michelhe/rustboyadvance-ng&lt;/a&gt; - RustboyAdvance-ng is a Gameboy Advance emulator with desktop, android and &lt;a href="https://michelhe.github.io/rustboyadvance-ng/"&gt;WebAssembly&lt;/a&gt; support. &lt;a href="https://github.com/michelhe/rustboyadvance-ng/actions?query=workflow%3ADeploy"&gt;&lt;img src="https://github.com/michelhe/rustboyadvance-ng/actions/workflows/deploy.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;GameMaker 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/OpenGMK/OpenGMK"&gt;OpenGMK&lt;/a&gt; - OpenGMK is a modern rewrite of the proprietary GameMaker Classic engines, providing a full sourceport of the runner, a decompiler, a TASing framework, and libraries for working with gamedata yourself.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;IBM PC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dbalsom/martypc"&gt;MartyPC&lt;/a&gt; - An IBM PC/XT emulator written in Rust.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Intel 8080 CPU 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mohanson/i8080"&gt;mohanson/i8080&lt;/a&gt; - Intel 8080 CPU emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;iOS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/touchHLE/touchHLE"&gt;touchHLE&lt;/a&gt; - High-level emulator for iPhone OS apps&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;iPod 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/daniel5151/clicky"&gt;clicky&lt;/a&gt; - A clickwheel iPod emulator (WIP)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NES 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/koute/pinky"&gt;koute/pinky&lt;/a&gt; - A NES emulator&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pcwalton/sprocketnes"&gt;pcwalton/sprocketnes&lt;/a&gt; - A NES emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Nintendo 64 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gopher64/gopher64"&gt;gopher64&lt;/a&gt; - N64 emulator written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Nintendo DS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kelpsyberry/dust"&gt;dust&lt;/a&gt; - A Nintendo DS emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;PlayStation 4 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/obhq/obliteration"&gt;Obliteration&lt;/a&gt; - Experimental PS4 emulator for Windows, macOS and Linux &lt;a href="https://github.com/obhq/obliteration/actions/workflows/main.yml"&gt;&lt;img src="https://github.com/obhq/obliteration/actions/workflows/main.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Shockwave Player 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/igorlira/dirplayer-rs"&gt;DirPlayer&lt;/a&gt; - A web-compatible Shockwave Player emulator written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ZX Spectrum 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustzx/rustzx"&gt;rustzx/rustzx&lt;/a&gt; - &lt;a href="https://github.com/rustzx/rustzx/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/rustzx/rustzx/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="RustZX CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;File manager&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Canop/broot"&gt;broot&lt;/a&gt; - A new way to see and navigate directory trees (get an overview of a directory, even a big one; find a directory then &lt;code&gt;cd&lt;/code&gt; to it; never lose track of file hierarchy while you search; manipulate your files, ...), further reading &lt;a href="https://dystroy.org/broot/"&gt;dystroy.org/broot&lt;/a&gt; &lt;a href="https://crates.io/crates/broot"&gt;&lt;img src="https://img.shields.io/crates/v/broot.svg?sanitize=true" alt="Latest Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kamiyaa/joshuto"&gt;joshuto&lt;/a&gt; - ranger-like terminal file manager&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sayanarijit/xplr"&gt;xplr&lt;/a&gt; - A hackable, minimal, fast TUI file explorer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sxyazi/yazi"&gt;yazi&lt;/a&gt; - Blazing fast terminal file manager, based on async I/O.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Finance&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#payments"&gt;Payments&lt;/a&gt; applications.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Sajjon/klirr"&gt;klirr&lt;/a&gt; [&lt;a href="https://crates.io/crates/klirr"&gt;klirr&lt;/a&gt;] - Zero-maintenance and smart FOSS generating beautiful invoices for services and expenses.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tackler-ng/tackler"&gt;tackler&lt;/a&gt; [&lt;a href="https://crates.io/crates/tackler"&gt;tackler&lt;/a&gt;] - Fast, reliable bookkeeping engine with native GIT SCM support for plain text accounting &lt;a href="https://github.com/tackler-ng/tackler/raw/main/.github/workflows/ci.yml"&gt;&lt;img src="https://github.com/tackler-ng/tackler/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI Badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tarkah/tickrs"&gt;tarkah/tickrs&lt;/a&gt; - Realtime ticker data in your terminal&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Games&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://github.com/PistonDevelopers/piston/wiki/Games-Made-With-Piston"&gt;Games Made With Piston&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/buxx/OpenCombat"&gt;buxx/OpenCombat&lt;/a&gt; - A realtime 2nd world war tactical game&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thomas-mauran/chess-tui"&gt;chess-tui&lt;/a&gt; - A Chess TUI implementation ♟️&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/citybound/citybound"&gt;citybound&lt;/a&gt; - The city sim you deserve&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cristicbz/rust-doom"&gt;cristicbz/rust-doom&lt;/a&gt; - A renderer for Doom, may progress to being a playable game&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/doukutsu-rs/doukutsu-rs"&gt;doukutsu-rs&lt;/a&gt; - Reimplementation of Cave Story engine with some enhancements.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/garkimasera/rusted-ruins"&gt;garkimasera/rusted-ruins&lt;/a&gt; - Extensible open world rogue like game with pixel art&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla-devs/ferium"&gt;gorilla-devs/ferium&lt;/a&gt; - Ferium is a fast and feature rich CLI program for downloading and updating Minecraft mods from Modrinth, CurseForge, and GitHub Releases, and modpacks from Modrinth and CurseForge &lt;img src="https://github.com/gorilla-devs/ferium/actions/workflows/build.yml/badge.svg?branch=main" alt="ferium build" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HactarCE/Hyperspeedcube"&gt;HactarCE/Hyperspeedcube&lt;/a&gt; - A modern, beginner-friendly 3D and 4D Rubik's cube simulator with customizable mouse and keyboard controls and advanced features for speedsolving&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lifthrasiir/angolmois-rust"&gt;lifthrasiir/angolmois-rust&lt;/a&gt; - A minimalistic music video game which supports the BMS format&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maras-archive/rsnake"&gt;maras-archive/rsnake&lt;/a&gt; - Snake.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mcthesw/game-save-manager"&gt;mcthesw/game-save-manager&lt;/a&gt; - A user-friendly tool for managing game saves &lt;a href="https://github.com/mcthesw/game-save-manager/actions/workflows/tauri.yml"&gt;&lt;img src="https://github.com/mcthesw/game-save-manager/actions/workflows/tauri.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mtkennerly/ludusavi"&gt;mtkennerly/ludusavi&lt;/a&gt; - Backup tool for PC game saves &lt;a href="https://github.com/mtkennerly/ludusavi/actions/workflows/main.yaml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/mtkennerly/ludusavi/main.yaml?logo=github" alt="build badge" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/ludusavi"&gt;&lt;img src="https://img.shields.io/crates/v/ludusavi?logo=rust" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ozkriff/zemeroth"&gt;ozkriff/zemeroth&lt;/a&gt; - A small 2D turn-based hexagonal strategy game&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dpc/rhex"&gt;rhex&lt;/a&gt; - hexagonal ascii roguelike&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rsaarelm/magog"&gt;rsaarelm/magog&lt;/a&gt; - A roguelike game.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SoftbearStudios/mk48"&gt;SoftbearStudios/mk48&lt;/a&gt; - Mk48.io is an online multiplayer naval combat game&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swatteau/sokoban-rs"&gt;swatteau/sokoban-rs&lt;/a&gt; - A Sokoban implementation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thetawavegame/thetawave-legacy"&gt;thetawavegame/thetawave-legacy&lt;/a&gt; - A space shooter game that strives to be an entry point for new game developers to make their first contributions. &lt;img src="https://github.com/thetawavegame/thetawave-legacy/actions/workflows/ci.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Thinkofname/rust-quake"&gt;Thinkofname/rust-quake&lt;/a&gt; - Quake map renderer.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/topheman/snake-pipe-rust"&gt;topheman/snake-pipe-rust&lt;/a&gt; - A snake game in the terminal based on stdin/stdout (+tcp and unix domain sockets) &lt;a href="https://crates.io/crates/snakepipe"&gt;&lt;img src="https://img.shields.io/crates/v/snakepipe.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/ttyperacer/terminal-typeracer"&gt;ttyperacer/terminal-typeracer&lt;/a&gt; - Single player typing test game written for the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/veloren/veloren"&gt;Veloren&lt;/a&gt; - An open world, open source multiplayer voxel RPG game currently in alpha development &lt;a href="https://gitlab.com/veloren/veloren/-/pipelines"&gt;&lt;img src="https://gitlab.com/veloren/veloren/badges/master/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zipxing/rust_pixel"&gt;zipxing/rust_pixel&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust_pixel"&gt;rust_pixel&lt;/a&gt;] - A 2D pixel art game engine &amp;amp; rapid prototyping tools, supporting both text and graphical rendering modes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ozkriff/zoc"&gt;Zone of Control&lt;/a&gt; - A turn-based hexagonal strategy game&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graphics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dps/rust-raytracer"&gt;dps/rust-raytracer&lt;/a&gt; - An implementation of a very simple raytracer based on Ray Tracing in One Weekend by Peter Shirley.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flxzt/rnote"&gt;flxzt/rnote&lt;/a&gt; - Sketch and take handwritten notes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivanceras/svgbob"&gt;ivanceras/svgbob&lt;/a&gt; - converts ASCII diagrams into SVG graphics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KaminariOS/rustracer"&gt;KaminariOS/rustracer&lt;/a&gt; - A PBR glTF 2.0 renderer based on Vulkan ray-tracing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Limeth/euclider"&gt;Limeth/euclider&lt;/a&gt; - A real-time 4D CPU ray tracer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linebender/resvg"&gt;linebender/resvg&lt;/a&gt; - An SVG rendering library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rodrigorc/papercraft"&gt;rodrigorc/papercraft&lt;/a&gt; - A tool to unwrap 3D models and create them in paper with scissors and glue.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustq/vue-skia"&gt;rustq/vue-skia&lt;/a&gt; - Skia based 2d graphics vue rendering library. It is based on Rust to implement software rasterization to perform rendering.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/valora"&gt;turnage/valora&lt;/a&gt; - A library for generative fine art&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Twinklebear/tray_rust"&gt;Twinklebear/tray_rust&lt;/a&gt; - A ray tracer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wahn/rs_pbrt"&gt;wahn/rs_pbrt&lt;/a&gt; - Implements a counterpart to the PBRT book's (3rd edition) C++ code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Image processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imager-io/imager"&gt;Imager&lt;/a&gt; - Automated image optimization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oxipng/oxipng"&gt;oxipng&lt;/a&gt; [&lt;a href="https://crates.io/crates/oxipng"&gt;oxipng&lt;/a&gt;] - Multithreaded PNG optimizer written in Rust. &lt;a href="https://github.com/oxipng/oxipng/actions?query=branch%3Amaster"&gt;&lt;img src="https://github.com/oxipng/oxipng/workflows/oxipng/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/oxipng"&gt;&lt;img src="https://img.shields.io/crates/v/oxipng.svg?sanitize=true" alt="Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Industrial automation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/locka99/opcua"&gt;locka99/opcua&lt;/a&gt; - A &lt;a href="https://opcfoundation.org/about/opc-technologies/opc-ua/"&gt;OPC UA&lt;/a&gt; library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/slowtec/tokio-modbus"&gt;slowtec/tokio-modbus&lt;/a&gt; - A &lt;a href="https://tokio.rs"&gt;tokio&lt;/a&gt;-based &lt;a href="https://modbus.org"&gt;modbus&lt;/a&gt; library.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Message Queue&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/robustmq/robustmq"&gt;RobustMQ&lt;/a&gt; - Next generation cloud-native converged message queue.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mxsm/rocketmq-rust"&gt;Rocketmq-Rust&lt;/a&gt; - 🚀Apache RocketMQ build in Rust🦀. Faster, safer, and with lower memory usage.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MLOps&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tensorzero/tensorzero"&gt;TensorZero&lt;/a&gt; - data &amp;amp; learning flywheel for LLMs that unifies inference, observability, optimization, and experimentation &lt;img src="https://img.shields.io/github/check-runs/tensorzero/tensorzero/main" alt="TensorZero Build Status" /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Observability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/avito-tech/bioyino"&gt;avito-tech/bioyino&lt;/a&gt; - A high-performance scalable StatsD compatible server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MegaAntiCheat/client-backend"&gt;MegaAntiCheat/client-backend&lt;/a&gt; - The client app for &lt;a href="https://github.com/MegaAntiCheat"&gt;MAC&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openobserve/openobserve"&gt;openobserve&lt;/a&gt; - 10x easier, 140x lower storage cost, high performance, petabyte scale - Elasticsearch/Splunk/Datadog alternative.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/opentelemetry"&gt;OpenTelemetry&lt;/a&gt; - OpenTelemetry provides a single set of APIs, libraries, agents, and collector services to capture distributed traces and metrics from your application. You can analyze them using Prometheus, Jaeger, and other observability tools. &lt;a href="https://github.com/open-telemetry/opentelemetry-rust/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/open-telemetry/opentelemetry-rust/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="GitHub Actions CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quickwit-oss/quickwit"&gt;Quickwit-oss/quickwit&lt;/a&gt; - Cloud-native and highly cost-efficient search engine for log management. &lt;a href="https://github.com/quickwit-oss/quickwit/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/quickwit-oss/quickwit/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hubblo-org/scaphandre"&gt;Scaphandre&lt;/a&gt; - A power consumption monitoring agent, to track host and each service power consumption and enable designing systems and applications for more sustainability. Designed to fit any monitoring toolchain (already supports prometheus, warp10, riemann...).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vectordotdev/vector"&gt;vectordotdev/vector&lt;/a&gt; - A High-Performance, Logs, Metrics, &amp;amp; Events Router.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Operating systems&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://github.com/flosse/rust-os-comparison"&gt;A comparison of operating systems written in Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x59616e/SteinsOS"&gt;0x59616e/SteinsOS&lt;/a&gt; - An OS for armv8-a architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/adamperkowski/highlightos"&gt;adamperkowski/highlightos&lt;/a&gt; - x86_64 OS kernel written in Rust &amp;amp; Assembly.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Andy-Python-Programmer/aero"&gt;Andy-Python-Programmer/aero&lt;/a&gt; - A modern, unix-like operating system following the monolithic kernel design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/asterinas/asterinas"&gt;asterinas/asterinas&lt;/a&gt; - A secure, fast, and general-purpose OS kernel that provides Linux-compatible ABI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DragonOS-Community/DragonOS"&gt;DragonOS-Community/DragonOS&lt;/a&gt; - An operating system with a self-developed kernel from scratch and Linux compatibility.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.redox-os.org/redox-os/redox"&gt;redox-os/redox&lt;/a&gt; - A Unix-like general-purpose microkernel-based operating system with a focus on security, stability, performance, correctness, simplicity and pragmatism that aims to be a complete alternative for Linux and BSD.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thepowersgang/rust_os"&gt;thepowersgang/rust_os&lt;/a&gt; - An OS kernel written in rust. Non POSIX&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/theseus-os/Theseus"&gt;theseus-os/Theseus&lt;/a&gt; - A safe-language, single address space and single privilege level OS written from scratch - &lt;a href="https://www.theseus-os.com/Theseus/book/index.html"&gt;&lt;img src="https://img.shields.io/github/workflow/status/theseus-os/Theseus/Documentation?label=docs%20build" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tock/tock"&gt;tock/tock&lt;/a&gt; - A secure embedded operating system for Cortex-M based microcontrollers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vinc/moros"&gt;vinc/moros&lt;/a&gt; - A text-based hobby operating system targeting computers with a x86-64 architecture and a BIOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Package Managers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/helsing-ai/buffrs"&gt;helsing-ai/buffrs&lt;/a&gt; [&lt;a href="https://crates.io/crates/buffrs"&gt;buffrs&lt;/a&gt;] - A modern package manager for protocol buffers and gRPC architectures.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/rebos"&gt;rebos&lt;/a&gt; - A declarative way to automate package management on any linux distro &lt;a href="https://crates.io/crates/rebos"&gt;&lt;img src="https://img.shields.io/crates/v/rebos?logo=rust" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Payments&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch"&gt;hyperswitch&lt;/a&gt; - An open source payments orchestrator that lets you connect with multiple payment processors and route payment traffic effortlessly, all with a single API integration &lt;img src="https://img.shields.io/github/last-commit/juspay/hyperswitch?style=flat-square" alt="GitHub last commit" /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Productivity&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/jiggy"&gt;0xdea/jiggy&lt;/a&gt; [&lt;a href="https://crates.io/crates/jiggy"&gt;jiggy&lt;/a&gt;] - Minimalistic cross-platform mouse jiggler written in Rust &lt;a href="https://github.com/0xdea/oneiromancer/jiggy/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/jiggy/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigoden/aichat"&gt;aichat&lt;/a&gt; - All-in-one LLM CLI tool featuring Shell Assistant, Chat-REPL, RAG, AI Tools &amp;amp; Agents, with access to OpenAI, Claude, Gemini, Ollama, Groq, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ast-grep/ast-grep"&gt;ast-grep&lt;/a&gt; - A CLI tool for code structural search, lint and rewriting.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nikolassv/bartib"&gt;Bartib&lt;/a&gt; [&lt;a href="https://crates.io/crates/bartib"&gt;Bartib&lt;/a&gt;] - A simple timetracker for the command line &lt;a href="https://github.com/nikolassv/bartib/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/nikolassv/bartib/actions/workflows/test.yml/badge.svg?branch=master" alt="Tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/espanso/espanso"&gt;espanso&lt;/a&gt; - A cross-platform Text Expander. &lt;a href="https://github.com/espanso/espanso/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/espanso/espanso/actions/workflows/ci.yml/badge.svg?branch=dev&amp;amp;event=push" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/eureka"&gt;eureka&lt;/a&gt; - A CLI tool to input and store your ideas without leaving the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/unobserved-io/Furtherance"&gt;Furtherance&lt;/a&gt; - Time tracking app built with GTK4&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/illacloud/illa"&gt;illacloud/illa&lt;/a&gt; - Low-code internal tool builder.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kruseio/hygg"&gt;kruseio/hygg&lt;/a&gt; [&lt;a href="https://crates.io/crates/hygg"&gt;hygg&lt;/a&gt;] - 📚 Simplifying the way you read. Minimalistic Vim-like TUI document reader.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lldap/lldap"&gt;LLDAP&lt;/a&gt; - Simplified LDAP interface for authentication.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pier-cli/pier"&gt;pier-cli/pier&lt;/a&gt; - A central repository to manage (add, search metadata, etc.) all your one-liners, scripts, tools, and CLIs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ShadoySV/work-break"&gt;ShadoySV/work-break&lt;/a&gt; [&lt;a href="https://crates.io/crates/work-break"&gt;work-break&lt;/a&gt;] - Work and rest time balancer taking into account your current and today strain &lt;a href="https://github.com/ShadoySV/work-break/actions/workflows/release.yml"&gt;&lt;img src="https://github.com/ShadoySV/work-break/actions/workflows/release.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yashs662/rust_kanban"&gt;yashs662/rust_kanban&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust-kanban"&gt;rust-kanban&lt;/a&gt;] &lt;a href="https://github.com/yashs662/rust_kanban/releases"&gt;&lt;img src="https://github.com/yashs662/rust_kanban/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt; - A Kanban App for the terminal&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Routing protocols&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/holo-routing/holo"&gt;Holo&lt;/a&gt; - Holo is a suite of routing protocols designed to support high-scale and automation-driven networks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/osrg/rustybgp"&gt;RustyBGP&lt;/a&gt; - BGP&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Security tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/augur"&gt;0xdea/augur&lt;/a&gt; [&lt;a href="https://crates.io/crates/augur"&gt;augur&lt;/a&gt;] - Reverse engineering assistant that extracts strings and related pseudo-code from a binary file &lt;a href="https://github.com/0xdea/augur/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/augur/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/haruspex"&gt;0xdea/haruspex&lt;/a&gt; [&lt;a href="https://crates.io/crates/haruspex"&gt;haruspex&lt;/a&gt;] - Vulnerability research assistant that extracts pseudo-code from the IDA Hex-Rays decompiler &lt;a href="https://github.com/0xdea/haruspex/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/haruspex/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/oneiromancer"&gt;0xdea/oneiromancer&lt;/a&gt; [&lt;a href="https://crates.io/crates/oneiromancer"&gt;oneiromancer&lt;/a&gt;] - Reverse engineering assistant that uses a locally running LLM to aid with source code analysis &lt;a href="https://github.com/0xdea/oneiromancer/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/oneiromancer/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/rhabdomancer"&gt;0xdea/rhabdomancer&lt;/a&gt; [&lt;a href="https://crates.io/crates/rhabdomancer"&gt;rhabdomancer&lt;/a&gt;] - Vulnerability research assistant that locates all calls to potentially insecure API functions in a binary file &lt;a href="https://github.com/0xdea/rhabdomancer/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/rhabdomancer/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Lissy93/AdGuardian-Term"&gt;AdGuardian-Term&lt;/a&gt; [&lt;a href="https://crates.io/crates/adguardian"&gt;adguardian&lt;/a&gt;] - Terminal-based, real-time traffic monitoring and statistics for your AdGuard Home instance&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AFLplusplus/LibAFL"&gt;AFLplusplus/LibAFL&lt;/a&gt; - Advanced Fuzzing Library - Slot your Fuzzer together in Rust! Scales across cores and machines. For Windows, Android, MacOS, Linux, no_std, etc. &lt;a href="https://github.com/AFLplusplus/LibAFL/actions/workflows/build_and_test.yml"&gt;&lt;img src="https://github.com/AFLplusplus/LibAFL/actions/workflows/build_and_test.yml/badge.svg?sanitize=true" alt="build and test" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kongbytes/arp-scan-rs"&gt;arp-scan-rs&lt;/a&gt; - A minimalistic ARP scan tool for fast local network scans&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-audit"&gt;cargo-audit&lt;/a&gt; - Audit Cargo.lock for crates with security vulnerabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-auditable"&gt;cargo-auditable&lt;/a&gt; - Make production Rust binaries auditable&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-crev"&gt;cargo-crev&lt;/a&gt; - A cryptographically verifiable code review system for the cargo package manager.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-deny"&gt;cargo-deny&lt;/a&gt; - Cargo plugin to help you manage large dependency graphs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blst-security/cherrybomb"&gt;Cherrybomb&lt;/a&gt; - Stop half-done API specifications with a CLI tool that helps you avoid undefined user behaviour by validating your API specifications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/replydev/cotp"&gt;cotp&lt;/a&gt; - Trustworthy, encrypted, command-line TOTP/HOTP authenticator app with import functionality.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/entropic-security/xgadget"&gt;entropic-security/xgadget&lt;/a&gt; [&lt;a href="https://crates.io/crates/xgadget"&gt;xgadget&lt;/a&gt;] - Fast, parallel, cross-variant ROP/JOP gadget search &lt;a href="https://github.com/entropic-security/xgadget/actions"&gt;&lt;img src="https://github.com/entropic-security/xgadget/workflows/test/badge.svg?sanitize=true" alt="GitHub Actions" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/epi052/feroxbuster"&gt;epi052/feroxbuster&lt;/a&gt; - A simple, fast, recursive content discovery tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inspektor-dev/inspektor"&gt;Inspektor&lt;/a&gt; - A database protocol-aware proxy that is used to enforce access policies 👮&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kpcyrd/authoscope"&gt;kpcyrd/authoscope&lt;/a&gt; - A scriptable network authentication cracker&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kpcyrd/rshijack"&gt;kpcyrd/rshijack&lt;/a&gt; - A TCP connection hijacker; rewrite of shijack&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kpcyrd/sn0int"&gt;kpcyrd/sn0int&lt;/a&gt; - A semi-automatic OSINT framework and package manager&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kpcyrd/sniffglue"&gt;kpcyrd/sniffglue&lt;/a&gt; - A secure multithreaded packet sniffer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emo-crab/observer_ward"&gt;observer_ward&lt;/a&gt; - Web application and service fingerprint identification tool&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Raspirus/Raspirus"&gt;Raspirus&lt;/a&gt; - User- and resources-friendly rules-based malware scanner &lt;a href="https://github.com/Raspirus/Raspirus/actions/workflows/testproject.yml"&gt;&lt;img src="https://github.com/Raspirus/Raspirus/actions/workflows/testproject.yml/badge.svg?sanitize=true" alt="status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cortex/ripasso/"&gt;ripasso&lt;/a&gt; - A password manager, filesystem compatible with pass&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bee-san/RustScan"&gt;rustscan&lt;/a&gt; - Make Nmap faster with this port scanning tool &lt;a href="https://github.com/bee-san/RustScan/actions"&gt;&lt;img src="https://github.com/bee-san/RustScan/actions/workflows/test.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Social networks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Mastodon 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustodon/rustodon"&gt;Rustodon&lt;/a&gt; - A Mastodon-compatible, ActivityPub-speaking server.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Telegram 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/FedericoBruzzone/tgt"&gt;tgt&lt;/a&gt; - A crossplatform TUI for Telegram &lt;a href="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-linux.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-linux.yml/badge.svg?sanitize=true" alt="ci-linux" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-macos.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-macos.yml/badge.svg?sanitize=true" alt="ci-macos" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-windows.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-windows.yml/badge.svg?sanitize=true" alt="ci-windows" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;System tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ajeetdsouza/zoxide/"&gt;ajeetdsouza/zoxide&lt;/a&gt; - A fast alternative to &lt;code&gt;cd&lt;/code&gt; that learns your habits &lt;a href="https://github.com/ajeetdsouza/zoxide/actions"&gt;&lt;img src="https://github.com/ajeetdsouza/zoxide/actions/workflows/release.yml/badge.svg?sanitize=true" alt="release" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nohajc/anylinuxfs"&gt;anylinuxfs&lt;/a&gt; - CLI tool for mounting any linux-supported filesystem on a Mac - using NFS with a microVM&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atuinsh/atuin"&gt;atuin&lt;/a&gt; [&lt;a href="https://crates.io/crates/atuin"&gt;atuin&lt;/a&gt;] - Atuin replaces your existing shell history with a SQLite database, and records additional context for your commands. Additionally, it provides optional and fully encrypted synchronisation of your history between machines, via an Atuin server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imsnif/bandwhich"&gt;bandwhich&lt;/a&gt; - Terminal bandwidth utilization tool&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ClementTsang/bottom"&gt;bottom&lt;/a&gt; - Yet another cross-platform graphical process/system monitor. &lt;a href="https://github.com/ClementTsang/bottom/actions?query=branch%3Amaster"&gt;&lt;img src="https://img.shields.io/github/workflow/status/ClementTsang/bottom/ci/master" alt="GitHub Workflow Status (branch)" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brocode/fblog"&gt;brocode/fblog&lt;/a&gt; - Small command-line JSON Log viewer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reubeno/brush"&gt;brush-shell&lt;/a&gt; - bash/POSIX-compatible shell &lt;a href="https://github.com/reubeno/brush/actions/workflows/ci.yaml"&gt;&lt;img src="https://github.com/reubeno/brush/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="CICD" /&gt;&lt;/a&gt;&lt;a href="https://crates.io/crates/brush-shell"&gt;&lt;img src="https://img.shields.io/crates/v/brush-shell.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vrmiguel/bustd"&gt;bustd&lt;/a&gt; - Lightweight process killer daemon to handle out-of-memory scenarios on Linux. &lt;a href="https://github.com/vrmiguel/bustd/actions?query=branch%3Amaster"&gt;&lt;img src="https://img.shields.io/github/workflow/status/vrmiguel/bustd/build-and-test" alt="GitHub Workflow Status (branch)" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/buster/rrun"&gt;buster/rrun&lt;/a&gt; - A command launcher for Linux, similar to gmrun&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cantino/mcfly"&gt;cantino/mcfly&lt;/a&gt; - Fly through your shell history. Great Scott!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ChurchTao/clipboard-rs"&gt;ChurchTao/clipboard-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/clipboard-rs"&gt;clipboard-rs&lt;/a&gt;] - Cross-platform library written in Rust for getting and setting and monitoring changes the system-level clipboard content.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sstadick/crabz"&gt;crabz&lt;/a&gt; - Multi-threaded compression and decompression CLI tool &lt;a href="https://github.com/sstadick/crabz/actions?query=workflow%3ACheck"&gt;&lt;img src="https://github.com/sstadick/crabz/workflows/Check/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cristianoliveira/funzzy"&gt;cristianoliveira/funzzy&lt;/a&gt; - A configurable filesystem watcher inspired by &lt;a href="http://eradman.com/entrproject/"&gt;entr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalance/procs"&gt;dalance/procs&lt;/a&gt; - A modern replacement for 'ps' &lt;a href="https://github.com/dalance/procs/actions/workflows/regression.yml"&gt;&lt;img src="https://github.com/dalance/procs/actions/workflows/regression.yml/badge.svg?sanitize=true" alt="Regression" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/darakian/ddh"&gt;ddh&lt;/a&gt; - Fast duplicate file finder&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imsnif/diskonaut"&gt;diskonaut&lt;/a&gt; - Terminal visual disk space navigator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bootandy/dust"&gt;dust&lt;/a&gt; - A more intuitive version of du&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/eza-community/eza"&gt;eza-community/eza&lt;/a&gt; - A replacement for 'ls'&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fish-shell/fish-shell"&gt;fish-shell/fish-shell&lt;/a&gt; - The user-friendly command line shell&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/fselect"&gt;fselect&lt;/a&gt; - Find files with SQL-like queries&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gitui-org/gitui"&gt;gitui&lt;/a&gt; - Blazing fast terminal client for git. &lt;a href="https://github.com/gitui-org/gitui/actions"&gt;&lt;img src="https://github.com/gitui-org/gitui/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/amrdeveloper/gql"&gt;GQL&lt;/a&gt; - A SQL like query language to run on .git files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kimono-koans/httm"&gt;httm&lt;/a&gt; - Interactive, file-level Time Machine-like tool for ZFS/btrfs/nilfs2 (and even actual Time Machine backups!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/j0ru/kickoff"&gt;j0ru/kickoff&lt;/a&gt; - Fast and snappy wayland program launcher &lt;a href="https://github.com/j0ru/kickoff/actions"&gt;&lt;img src="https://github.com/j0ru/kickoff/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jacek-kurlit/pik"&gt;jacek-kurlit/pik&lt;/a&gt; [&lt;a href="https://crates.io/crates/pik"&gt;pik&lt;/a&gt;] - A TUI command line tool that helps to find and kill processes&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tbillington/kondo"&gt;Kondo&lt;/a&gt; - CLI &amp;amp; GUI tool for deleting software project artifacts and reclaiming disk space&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ilya-zlobintsev/LACT"&gt;LACT&lt;/a&gt; - Linux AMDGPU Controller&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lodosgroup/lpm"&gt;lodosgroup/lpm&lt;/a&gt; - An experimental system package manager&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lotabout/rargs"&gt;lotabout/rargs&lt;/a&gt; [&lt;a href="https://crates.io/crates/rargs"&gt;rargs&lt;/a&gt;] - xargs + awk with pattern matching support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lsd-rs/lsd"&gt;lsd&lt;/a&gt; - An ls with a lot of pretty colors and awesome icons &lt;a href="https://github.com/lsd-rs/lsd/actions"&gt;&lt;img src="https://github.com/lsd-rs/lsd/actions/workflows/CICD.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Luminarys/synapse"&gt;Luminarys/synapse&lt;/a&gt; - Flexible and fast BitTorrent daemon.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/m4b/bingrep"&gt;m4b/bingrep&lt;/a&gt; - Greps through binaries from various OSs and architectures, and colors them.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/matheus-git/systemd-manager-tui"&gt;matheus-git/systemd-manager-tui&lt;/a&gt; [&lt;a href="https://crates.io/crates/systemd-manager-tui"&gt;systemd-manager-tui&lt;/a&gt;] - A program for managing systemd services through a TUI (Terminal User Interfaces).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mdgaziur/findex"&gt;mdgaziur/findex&lt;/a&gt; - Findex is a highly customizable application finder using GTK3&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mitnk/cicada"&gt;mitnk/cicada&lt;/a&gt; - A bash-like Unix shell&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mmstick/concurr"&gt;mmstick/concurr&lt;/a&gt; - Alternative to GNU Parallel w/ a client-server architecture&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mmstick/fontfinder"&gt;mmstick/fontfinder&lt;/a&gt; - GTK3 application for previewing and installing Google's fonts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mmstick/tv-renamer"&gt;mmstick/tv-renamer&lt;/a&gt; - A tv series renaming application with an optional GTK3 frontend.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mxseev/logram"&gt;mxseev/logram&lt;/a&gt; - Push log files' updates to Telegram&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Chleba/netscanner"&gt;netscanner&lt;/a&gt; - TUI Network Scanner&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nickgerace/gfold"&gt;nickgerace/gfold&lt;/a&gt; [&lt;a href="https://crates.io/crates/gfold"&gt;gfold&lt;/a&gt;] - CLI tool to help keep track of multiple Git repositories &lt;a href="https://github.com/nickgerace/gfold/actions?query=workflow%3Amerge+branch%3Amain"&gt;&lt;img src="https://img.shields.io/github/workflow/status/nickgerace/gfold/merge/main" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nivekuil/rip"&gt;nivekuil/rip&lt;/a&gt; - A safe and ergonomic alternative to &lt;code&gt;rm&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nushell/nushell"&gt;nushell/nushell&lt;/a&gt; - A new type of shell&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nwiizo/tfmcp"&gt;nwiizo/tfmcp&lt;/a&gt; - Terraform MCP Tool - CLI for AI assistants to manage Terraform environments via Model Context Protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nwiizo/tfocus"&gt;nwiizo/tfocus&lt;/a&gt; - Interactive tool for selecting and executing Terraform plan/apply operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orhun/kmon"&gt;orhun/kmon&lt;/a&gt; - Linux Kernel Manager and Activity Monitor &lt;img src="https://img.shields.io/github/actions/workflow/status/orhun/kmon/ci.yml?branch=master&amp;amp;label=build" alt="https://github.com/orhun/kmon/actions" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orhun/systeroid"&gt;orhun/systeroid&lt;/a&gt; - A more powerful alternative to sysctl(8) with a terminal user interface &lt;img src="https://img.shields.io/github/actions/workflow/status/orhun/systeroid/ci.yml?branch=main&amp;amp;label=build" alt="https://github.com/orhun/systeroid/actions" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ouch-org/ouch"&gt;ouch&lt;/a&gt; - Painless compression and decompression on the command-line &lt;a href="https://github.com/ouch-org/ouch/actions?query=branch%3Amaster"&gt;&lt;img src="https://img.shields.io/github/workflow/status/ouch-org/ouch/build-and-test" alt="GitHub Workflow Status (branch)" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pkolaczk/fclones"&gt;pkolaczk/fclones&lt;/a&gt; - Efficient duplicate file finder and remover&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pop-os/popsicle"&gt;pop-os/popsicle&lt;/a&gt; - GTK3 &amp;amp; CLI utility for flashing multiple USB devices in parallel&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pop-os/system76-power/"&gt;pop-os/system76-power&lt;/a&gt; - Linux power management daemon (DBus-interface) with CLI tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nukesor/pueue"&gt;pueue&lt;/a&gt; - Manage your long running shell commands. &lt;a href="https://github.com/nukesor/pueue/actions"&gt;&lt;img src="https://github.com/Nukesor/pueue/actions/workflows/test.yml/badge.svg?sanitize=true" alt="GitHub Actions Workflow" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qarmin/czkawka"&gt;qarmin/czkawka&lt;/a&gt; - Multi-functional app to find duplicates, empty folders, similar images, etc. &lt;a href="https://github.com/qarmin/czkawka/actions"&gt;&lt;img src="https://github.com/qarmin/czkawka/actions/workflows/pages/pages-build-deployment/badge.svg?branch=master" alt="GitHub Actions Workflow" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/redox-os/ion"&gt;redox-os/ion&lt;/a&gt; - Next-generation system shell&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sharkdp/bat"&gt;sharkdp/bat&lt;/a&gt; - A cat(1) clone with wings. &lt;a href="https://github.com/sharkdp/bat/actions/workflows/CICD.yml"&gt;&lt;img src="https://github.com/sharkdp/bat/actions/workflows/CICD.yml/badge.svg?branch=master" alt="CICD" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sharkdp/fd"&gt;sharkdp/fd&lt;/a&gt; - A simple, fast and user-friendly alternative to find. &lt;a href="https://github.com/sharkdp/fd/actions/workflows/CICD.yml"&gt;&lt;img src="https://github.com/sharkdp/fd/actions/workflows/CICD.yml/badge.svg?sanitize=true" alt="CICD" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sitkevij/hex"&gt;sitkevij/hex&lt;/a&gt; - A colorized hexdump terminal utility.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/skim-rs/skim"&gt;skim&lt;/a&gt; - A fuzzy finder&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/supercilex/fuc"&gt;supercilex/fuc&lt;/a&gt; - Fast &lt;code&gt;cp&lt;/code&gt; and &lt;code&gt;rm&lt;/code&gt; commands&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fujiapple852/trippy"&gt;trippy&lt;/a&gt; - A network diagnostic tool &lt;a href="https://github.com/fujiapple852/trippy/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/fujiapple852/trippy/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/uutils/coreutils"&gt;uutils/coreutils&lt;/a&gt; - A cross-platform rewrite of the GNU coreutils &lt;a href="https://github.com/uutils/coreutils/actions/workflows/CICD.yml"&gt;&lt;img src="https://github.com/uutils/coreutils/actions/workflows/CICD.yml/badge.svg?sanitize=true" alt="CICD" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/watchexec/watchexec"&gt;watchexec&lt;/a&gt; - Executes commands in response to file modifications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/XAMPPRocky/tokei"&gt;XAMPPRocky/tokei&lt;/a&gt; - counts the lines of code&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ynqa/jnv"&gt;ynqa/jnv&lt;/a&gt; - Interactive JSON filter using jq &lt;a href="https://github.com/ynqa/jnv/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ynqa/jnv/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ynqa/logu"&gt;ynqa/logu&lt;/a&gt; - Extract patterns from (streaming) unstructured log messages &lt;a href="https://github.com/ynqa/logu/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ynqa/logu/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ynqa/sig"&gt;ynqa/sig&lt;/a&gt; - Interactive grep (for streaming) &lt;a href="https://github.com/ynqa/sig/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ynqa/sig/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Task scheduling&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stav121/tasklet"&gt;tasklet&lt;/a&gt; [&lt;a href="https://crates.io/crates/tasklet"&gt;tasklet&lt;/a&gt;] - A task scheduling library written in Rust &lt;img src="https://img.shields.io/github/actions/workflow/status/stav121/tasklet/rust.yml" alt="Build Status" /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Text editors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://amp.rs"&gt;amp&lt;/a&gt; - Inspired by Vi/Vim.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emacs-ng/emacs-ng"&gt;emacs-ng&lt;/a&gt; - Complementing the C codebase with rust code to introduce new features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gchp/iota"&gt;gchp/iota&lt;/a&gt; - A simple text editor&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/helix-editor/helix"&gt;helix&lt;/a&gt; - A post-modern modal text editor inspired by Neovim/Kakoune. &lt;a href="https://github.com/helix-editor/helix/actions"&gt;&lt;img src="https://github.com/helix-editor/helix/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ilai-deutel/kibi"&gt;ilai-deutel/kibi&lt;/a&gt; - A tiny (≤1024 LOC) text editor with syntax highlighting, incremental search and more. &lt;a href="https://github.com/ilai-deutel/kibi/actions?query=branch%3Amaster"&gt;&lt;img src="https://github.com/ilai-deutel/kibi/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lapce/lapce"&gt;Lapce&lt;/a&gt; - A modern editor with a backend. Taking inspiration from the discontinued &lt;a href="https://github.com/xi-editor/xi-editor"&gt;xi-editor&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mathall/rim"&gt;mathall/rim&lt;/a&gt; - Vim-like text editor.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/curlpipe/ox"&gt;ox&lt;/a&gt; - An independent Rust text editor that runs in your terminal!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://git.sr.ht/~lessa/pepper"&gt;vamolessa/pepper&lt;/a&gt; [&lt;a href="https://crates.io/crates/pepper"&gt;pepper&lt;/a&gt;] - An opinionated modal editor to simplify code editing from the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zed-industries/zed"&gt;zed&lt;/a&gt; - A high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Text processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ashvardanian/StringZilla"&gt;ashvardanian/stringzilla&lt;/a&gt; - SIMD-accelerated string search, sort, edit distances, alignments, and generators for x86 AVX2 &amp;amp; AVX-512, and Arm NEON &lt;a href="https://crates.io/crates/stringzilla"&gt;&lt;img src="https://img.shields.io/crates/v/stringzilla.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cchexcode/complate"&gt;cchexcode/complate&lt;/a&gt; - An in-terminal text templating tool designed for standardizing messages (like for GIT commits). &lt;a href="https://crates.io/crates/complate"&gt;&lt;img src="https://img.shields.io/crates/v/complate.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/complate"&gt;&lt;img src="https://img.shields.io/crates/d/complate?label=crates.io%20downloads" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cchexcode/complate/actions"&gt;&lt;img src="https://github.com/cchexcode/complate/actions/workflows/release.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dathere/qsv"&gt;dathere/qsv&lt;/a&gt; [&lt;a href="https://crates.io/crates/qsv"&gt;qsv&lt;/a&gt;] - A high performance CSV data-wrangling toolkit. Forked from xsv, with 34+ additional commands &amp;amp; more. &lt;a href="https://github.com/dathere/qsv/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/dathere/qsv/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Linux build status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dathere/qsv/actions/workflows/rust-windows.yml"&gt;&lt;img src="https://github.com/dathere/qsv/actions/workflows/rust-windows.yml/badge.svg?sanitize=true" alt="Windows build status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dathere/qsv/actions/workflows/rust-macos.yml"&gt;&lt;img src="https://github.com/dathere/qsv/actions/workflows/rust-macos.yml/badge.svg?sanitize=true" alt="macOS build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dominikwilkowski/cfonts"&gt;dominikwilkowski/cfonts&lt;/a&gt; [&lt;a href="https://crates.io/crates/cfonts"&gt;cfonts&lt;/a&gt;] - Sexy ANSI fonts for the console &lt;img src="https://github.com/dominikwilkowski/cfonts/actions/workflows/testing.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pemistahl/grex"&gt;grex&lt;/a&gt; - A command-line tool and library for generating regular expressions from user-provided test cases&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Lisprez/so_stupid_search"&gt;Lisprez/so_stupid_search&lt;/a&gt; - A simple and fast string search tool for human beings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/roquess/loki_text"&gt;loki_text&lt;/a&gt; [&lt;a href="https://crates.io/crates/loki_text"&gt;loki_text&lt;/a&gt;] - String manipulation library with pattern searching, text transformation, and multiple string search algorithms (KMP, Boyer-Moore, Aho-Corasick, etc.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yoav-lavi/melody"&gt;Melody&lt;/a&gt; - A language that compiles to regular expressions and aims to be more easily readable and maintainable &lt;a href="https://github.com/yoav-lavi/melody/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/yoav-lavi/melody/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/melody_compiler"&gt;&lt;img src="https://img.shields.io/crates/v/melody_compiler?label=compiler" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/phiresky/ripgrep-all"&gt;phiresky/ripgrep-all&lt;/a&gt; - ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/ripgrep"&gt;ripgrep&lt;/a&gt; - combines the usability of The Silver Searcher with the raw speed of grep&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/your-tools/ruplacer"&gt;ruplacer&lt;/a&gt; - Find and replace text in source files &lt;a href="https://github.com/your-tools/ruplacer/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/your-tools/ruplacer/actions/workflows/test.yml/badge.svg?branch=master" alt="Run tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thomasschafer/scooter"&gt;scooter&lt;/a&gt; - Interactive find and replace in the terminal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/sd"&gt;sd&lt;/a&gt; - Intuitive find &amp;amp; replace CLI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sstadick/hck"&gt;sstadick/hck&lt;/a&gt; - A faster and more featureful drop in replacement for &lt;code&gt;cut&lt;/code&gt; &lt;a href="https://github.com/sstadick/hck"&gt;&lt;img src="https://github.com/sstadick/hck/workflows/Check/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vishaltelangre/ff"&gt;vishaltelangre/ff&lt;/a&gt; - Find files (ff) by name!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/whitfin/bytelines"&gt;whitfin/bytelines&lt;/a&gt; [&lt;a href="https://crates.io/crates/bytelines"&gt;bytelines&lt;/a&gt;] - Read input lines as byte slices for high efficiency.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/whitfin/runiq"&gt;whitfin/runiq&lt;/a&gt; - an efficient way to filter duplicate lines from unsorted input.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/xsv"&gt;xsv&lt;/a&gt; - A fast CSV command line tool (slicing, indexing, selecting, searching, sampling, etc.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Utilities&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1History/1History"&gt;1History&lt;/a&gt; - Command line interface to backup Firefox/Chrome/Safari history to one SQLite file &lt;a href="https://github.com/1History/1History/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/1History/1History/actions/workflows/CI.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bloznelis/kbt"&gt;bloznelis/kbt&lt;/a&gt; [&lt;a href="https://crates.io/crates/kbt"&gt;kbt&lt;/a&gt;] - A simple TUI tool for keyboard testing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brycx/checkpwn"&gt;brycx/checkpwn&lt;/a&gt; - A Have I Been Pwned (HIBP) command-line utility tool that lets you easily check for compromised accounts and passwords.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dcapal/dcapal"&gt;dcapal&lt;/a&gt; - DcaPal is a free, no registration, online tool to help you keep your portfolio balanced with dollar cost averaging investments.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Eoin-McMahon/Blindfold"&gt;Eoin-McMahon/Blindfold&lt;/a&gt; [&lt;a href="https://crates.io/crates/blindfold"&gt;Blindfold&lt;/a&gt;] - A simple CLI tool for generating &lt;code&gt;.gitignore&lt;/code&gt; files quickly and easily. &lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/%5Bhttps://github.com/nix-community/nurl/actions/workflows/ci.yml%5D(https://github.com/Eoin-McMahon/blindfold/actions/workflows/rust.yml)"&gt;&lt;img src="https://github.com/Eoin-McMahon/blindfold/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AchetaGames/Epic-Asset-Manager"&gt;Epic Asset Manager&lt;/a&gt; - An unofficial client to install Unreal Engine, download and manage purchased assets, projects, plugins and games from the Epic Games Store.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evansmurithi/cloak"&gt;evansmurithi/cloak&lt;/a&gt; - A Command Line OTP (One Time Password) Authenticator application. &lt;img src="https://github.com/evansmurithi/cloak/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt; &lt;a href="https://ci.appveyor.com/project/evansmurithi/cloak"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/9mlfpfru3ng4c689/branch/master?svg=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fcsonline/tmux-thumbs"&gt;fcsonline/tmux-thumbs&lt;/a&gt; - A lightning fast version of tmux-fingers, copy/pasting tmux like vimium/vimperator.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/guoxbin/dtool"&gt;guoxbin/dtool&lt;/a&gt; - A useful command-line tool collection to assist development including conversion, codec, hashing, encryption, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Linus-Mussmaecher/rucola"&gt;Linus-Mussmaecher/rucola&lt;/a&gt; - Terminal-based markdown note manager. &lt;a href="https://crates.io/crates/rucola-notes"&gt;&lt;img src="https://img.shields.io/crates/v/rucola-notes.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Linus-Mussmaecher/rucola/actions/workflows/continuous-testing.yml"&gt;&lt;img src="https://github.com/Linus-Mussmaecher/rucola/actions/workflows/continuous-testing.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thewh1teagle/mobslide"&gt;Mobslide&lt;/a&gt; - Desktop application that turns your smartphone into presentation remote controller.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pvolok/mprocs"&gt;mprocs&lt;/a&gt; - TUI for running multiple processes&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mrjackwills/oxker"&gt;mrjackwills/oxker&lt;/a&gt; [&lt;a href="https://crates.io/crates/oxker"&gt;oxker&lt;/a&gt;] - A simple tui to view &amp;amp; control docker containers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nix-community/nix-init"&gt;nix-community/nix-init&lt;/a&gt; - Generate Nix packages from URLs with hash prefetching, dependency inference, license detection, and more &lt;a href="https://github.com/nix-community/nix-init/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/nix-community/nix-init/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nix-community/nix-melt"&gt;nix-community/nix-melt&lt;/a&gt; - A ranger-like flake.lock viewer &lt;a href="https://github.com/nix-community/nix-melt/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/nix-community/nix-melt/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nix-community/nurl"&gt;nix-community/nurl&lt;/a&gt; [&lt;a href="https://crates.io/crates/nurl"&gt;nurl&lt;/a&gt;] - Generate Nix fetcher calls from repository URLs &lt;a href="https://github.com/nix-community/nurl/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/nix-community/nurl/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yaa110/nomino"&gt;nomino&lt;/a&gt; - Batch rename utility for developers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/raftario/licensor"&gt;raftario/licensor&lt;/a&gt; - write licenses to stdout &lt;a href="https://github.com/raftario/licensor/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/raftario/licensor/actions/workflows/build.yml/badge.svg?branch=master" alt="GitHub Actions" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/restsend/rustpbx"&gt;restsend/rustpbx&lt;/a&gt; - Software-Defined SIP Proxy including register, presence, b2bua. alternative to Freeswitch/FreePBX.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aaronriekenberg/rust-parallel"&gt;rust-parallel&lt;/a&gt; - Fast command line app using Tokio to execute commands in parallel. Similar interface to GNU Parallel or xargs. &lt;a href="https://crates.io/crates/rust-parallel"&gt;&lt;img src="https://img.shields.io/crates/v/rust-parallel.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aaronriekenberg/rust-parallel/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/aaronriekenberg/rust-parallel/actions/workflows/CI.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustdesk/rustdesk"&gt;rustdesk/rustdesk&lt;/a&gt; - A remote desktop software, great alternative to TeamViewer and AnyDesk.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustic-rs/rustic"&gt;rustic-rs/rustic&lt;/a&gt; [&lt;a href="https://crates.io/crates/rustic-rs"&gt;rustic-rs&lt;/a&gt;] - Fast, encrypted, deduplicated backups powered by Rust. &lt;a href="https://crates.io/crates/rustic-rs"&gt;&lt;img src="https://img.shields.io/crates/v/rustic-rs.svg?sanitize=true" alt="Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/qrtool"&gt;sorairolake/qrtool&lt;/a&gt; [&lt;a href="https://crates.io/crates/qrtool"&gt;qrtool&lt;/a&gt;] - A utility for encoding and decoding QR code images. &lt;a href="https://github.com/sorairolake/qrtool/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/qrtool/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/str4d/rage"&gt;str4d/rage&lt;/a&gt; [&lt;a href="https://crates.io/crates/rage"&gt;rage&lt;/a&gt;] - Rust implementation of &lt;a href="https://github.com/FiloSottile/age"&gt;age&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Skallwar/suckit"&gt;suckit&lt;/a&gt; - Recursively visit and download a website's content to your disk. &lt;a href="https://crates.io/crates/suckit"&gt;&lt;img src="https://img.shields.io/crates/v/suckit.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Skallwar/suckit/raw/master/.github/workflows/build_and_test.yml"&gt;&lt;img src="https://github.com/Skallwar/suckit/workflows/Build%20and%20test/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/shshemi/tabiew"&gt;Tabiew&lt;/a&gt; - A lightweight TUI app to view and query CSV files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/davidmoreno/tailtales"&gt;Tail Tales&lt;/a&gt; - A TUI log viewer with logfmt support. &lt;a href="https://crates.io/crates/tailtales"&gt;&lt;img src="https://img.shields.io/crates/v/tailtales.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alexpasmantier/television"&gt;television&lt;/a&gt; - A blazing fast general purpose fuzzy finder TUI &lt;img src="https://img.shields.io/github/check-runs/alexpasmantier/television/main" alt="GitHub branch check runs" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tversteeg/emplace"&gt;tversteeg/emplace&lt;/a&gt; - Synchronize installed packages on multiple machines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vamolessa/verco"&gt;vamolessa/verco&lt;/a&gt; [&lt;a href="https://crates.io/crates/verco"&gt;verco&lt;/a&gt;] - A simple Git/Hg tui client focused on keyboard shortcuts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dani-garcia/vaultwarden#readme"&gt;vaultwarden&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/dani-garcia/vaultwarden/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt; - Alternative implementation of the Bitwarden server API written in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thewh1teagle/vibe"&gt;Vibe&lt;/a&gt; - Transcribe audio or video in every language on every platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/warpdotdev/Warp"&gt;warpdotdev/Warp&lt;/a&gt; - &lt;span&gt;💲&lt;/span&gt; Warp is a blazingly-fast modern GPU-accelerated terminal built to make you and your team more productive.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alvaro17f/wrestic"&gt;wrestic&lt;/a&gt; - A wrapper around restic.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ttytm/wthrr-the-weathercrab"&gt;wthrr&lt;/a&gt; - Weather companion for the terminal. &lt;a href="https://crates.io/crates/wthrr"&gt;&lt;img src="https://img.shields.io/crates/v/wthrr?logo=rust" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Video&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dertuxmalwieder/yaydl"&gt;dertuxmalwieder/yaydl&lt;/a&gt; [&lt;a href="https://crates.io/crates/yaydl"&gt;yaydl&lt;/a&gt;] - A simple video downloader&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gyroflow/gyroflow"&gt;gyroflow/gyroflow&lt;/a&gt; - Video stabilization application using gyroscope data&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/harlanc/xiu"&gt;harlanc/xiu&lt;/a&gt; - A powerful and secure live server (rtmp/httpflv/hls/relay). &lt;a href="https://crates.io/crates/xiu"&gt;&lt;img src="https://img.shields.io/crates/v/xiu.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TGotwig/vidmerger"&gt;vidmerger&lt;/a&gt; - Merge video &amp;amp; audio files via CLI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xiph/rav1e"&gt;xiph/rav1e&lt;/a&gt; - The fastest and safest AV1 encoder.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Virtualization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/firecracker-microvm/firecracker"&gt;firecracker-microvm/firecracker&lt;/a&gt; - A lightweight virtual machine for container workload &lt;a href="https://firecracker-microvm.github.io/"&gt;Firecracker Microvm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kata-containers/kata-containers"&gt;kata-containers/kata-containers&lt;/a&gt; - A implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tailhook/vagga"&gt;tailhook/vagga&lt;/a&gt; - A containerization tool without daemons&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/youki-dev/youki"&gt;youki-dev/youki&lt;/a&gt; - A container runtime &lt;a href="https://github.com/youki-dev/youki/actions"&gt;&lt;img src="https://github.com/youki-dev/youki/actions/workflows/basic.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Web&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cfal/tobaru"&gt;cfal/tobaru&lt;/a&gt; - Port forwarder with allowlists, IP and TLS SNI/ALPN rule-based routing, iptables support, round-robin forwarding (load balancing), and hot reloading.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/importantimport/hatsu"&gt;importantimport/hatsu&lt;/a&gt; - 🩵 Self-hosted and fully-automated ActivityPub bridge for static sites. &lt;a href="https://github.com/importantimport/hatsu/actions/workflows/release.yml"&gt;&lt;img src="https://github.com/importantimport/hatsu/actions/workflows/release.yml/badge.svg?sanitize=true" alt="release" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/LemmyNet/lemmy"&gt;LemmyNet/lemmy&lt;/a&gt; - A link aggregator / reddit clone for the fediverse &lt;a href="https://cloud.drone.io/LemmyNet/lemmy"&gt;&lt;img src="https://cloud.drone.io/api/badges/LemmyNet/lemmy/status.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MASQ-Project/Node"&gt;MASQ-Project/Node&lt;/a&gt; - MASQ Node software provides a decentralized mesh-network of nodes for global users to access normal internet content - next evolution of tech beyond Tor &amp;amp; VPN &lt;a href="https://github.com/MASQ-Project/Node/actions"&gt;&lt;img src="https://github.com/MASQ-Project/Node/actions/workflows/ci-matrix.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Plume-org/Plume"&gt;Plume-org/Plume&lt;/a&gt; - ActivityPub federating blogging application&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/redlib-org/redlib"&gt;Redlib&lt;/a&gt; - An alternative private front-end to Reddit, with its origins in &lt;a href="https://github.com/libreddit/libreddit"&gt;Libreddit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/revoltchat/backend"&gt;Revolt/backend&lt;/a&gt; - User-first chat platform built with modern web technologies.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Web Servers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudflare/pingora"&gt;cloudflare/pingora&lt;/a&gt; - A library for building fast, reliable and evolvable network services.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emanuele-em/proxelar"&gt;emanuele-em/proxelar&lt;/a&gt; - A MITM Proxy 🦀! Toolkit for HTTP/1, HTTP/2, and WebSockets with SSL/TLS Capabilities &lt;a href="https://github.com/emanuele-em/proxelar/actions"&gt;&lt;img src="https://github.com/emanuele-em/proxelar/actions/workflows/autofix.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bytedance/g3"&gt;g3proxy&lt;/a&gt; - Forward proxy server, support Proxy Chaining, Protocol Inspection, MITM Interception, ICAP Adaptation, Transparent Proxy &lt;a href="https://github.com/bytedance/g3/actions"&gt;&lt;img src="https://github.com/bytedance/g3/actions/workflows/codecov.yml/badge.svg?sanitize=true" alt="CodeCoverage" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcodpt/minirps"&gt;Mini RPS&lt;/a&gt; - Mini reverse proxy server, HTTPS, CORS, static file hosting and template engine (minijinja) &lt;a href="https://crates.io/crates/minirps"&gt;crates.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mu-arch/skyfolder"&gt;mu-arch/skyfolder&lt;/a&gt; - 🪂 Beautiful HTTP/Bittorrent server without the hassle. Secure - GUI - Pretty - Fast&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mufeedvh/binserve"&gt;mufeedvh/binserve&lt;/a&gt; - A blazingly fast static web server with routing, templating, and security in a single binary you can set up with zero code &lt;a href="https://github.com/mufeedvh/binserve/actions"&gt;&lt;img src="https://github.com/mufeedvh/binserve/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orhun/rustypaste"&gt;orhun/rustypaste&lt;/a&gt; - A minimal file upload/pastebin service &lt;img src="https://img.shields.io/github/actions/workflow/status/orhun/rustypaste/ci.yml?branch=master&amp;amp;label=build" alt="https://github.com/orhun/rustypaste/actions" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/plabayo/rama"&gt;plabayo/rama&lt;/a&gt; - A modular service framework to move and transform your network packets, used to build web clients, servers and — above all — proxies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ronanyeah/rust-hasura"&gt;ronanyeah/rust-hasura&lt;/a&gt; - A demonstration of how a GraphQL server can be used as a remote schema with &lt;a href="https://hasura.io/"&gt;Hasura&lt;/a&gt; &lt;img src="https://github.com/ronanyeah/rust-hasura/workflows/Rust/badge.svg?branch=master" alt="Rust" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/static-web-server/static-web-server"&gt;static-web-server&lt;/a&gt; - A blazing fast and asynchronous web server for static files-serving. ⚡ &lt;a href="https://github.com/static-web-server/static-web-server/actions/workflows/devel.yml?query=branch%3Amaster"&gt;&lt;img src="https://github.com/static-web-server/static-web-server/actions/workflows/devel.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/svenstaro/miniserve"&gt;svenstaro/miniserve&lt;/a&gt; - A small, self-contained cross-platform CLI tool that allows you to just grab the binary and serve some file(s) via HTTP &lt;a href="https://github.com/svenstaro/miniserve/actions"&gt;&lt;img src="https://github.com/svenstaro/miniserve/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thecoshman/http"&gt;thecoshman/http&lt;/a&gt; - Host These Things Please - A basic http server for hosting a folder fast and simply&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TheWaWaR/simple-http-server"&gt;TheWaWaR/simple-http-server&lt;/a&gt; - simple static http server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x676e67/vproxy"&gt;vproxy/0x676e67&lt;/a&gt; - An fast asynchronous Rust HTTP/Socks5 Proxy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development tools&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Julien-cpsn/ATAC"&gt;ATAC&lt;/a&gt; - A feature-full TUI API client made in Rust. ATAC is free, open-source, offline and account-less.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Canop/bacon"&gt;bacon&lt;/a&gt; - background rust code checker, similar to cargo-watch&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/clippy"&gt;clippy&lt;/a&gt; - Rust lints&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clog-tool/clog-cli"&gt;clog-tool/clog-cli&lt;/a&gt; - generates a changelog from git metadata (&lt;a href="https://blog.thoughtram.io/announcements/tools/2014/09/18/announcing-clog-a-conventional-changelog-generator-for-the-rest-of-us.html"&gt;conventional changelog&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudflare/foundations"&gt;cloudflare/foundations&lt;/a&gt; - Foundations is a modular Rust library, designed to help scale programs for distributed, production-grade systems.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/comtrya/comtrya"&gt;comtrya&lt;/a&gt; - A configuration management tool for localhost / dotfiles &lt;a href="https://github.com/comtrya/comtrya/actions"&gt;&lt;img src="https://github.com/comtrya/comtrya/actions/workflows/main.yaml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Wulf/create-rust-app"&gt;create-rust-app&lt;/a&gt; - Set up a modern rust+react web app by running one command. &lt;a href="https://crates.io/crates/create-rust-app"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dan-t/rusty-tags"&gt;dan-t/rusty-tags&lt;/a&gt; - create ctags/etags for a cargo project and all of its dependencies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/datanymizer/datanymizer"&gt;datanymizer/datanymizer&lt;/a&gt; - Powerful database anonymizer with flexible rules &lt;a href="https://github.com/datanymizer/datanymizer/actions?query=workflow%3ACI+branch%3Amain"&gt;&lt;img src="https://github.com/datanymizer/datanymizer/workflows/CI/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/git-delta"&gt;delta&lt;/a&gt; - A syntax-highlighter for git and diff output&lt;a href="https://github.com/dandavison/delta//actions"&gt;&lt;img src="https://github.com/dandavison/delta/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dotenv-linter/dotenv-linter"&gt;dotenv-linter&lt;/a&gt; - Linter for &lt;code&gt;.env&lt;/code&gt; files &lt;a href="https://github.com/dotenv-linter/dotenv-linter/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://github.com/dotenv-linter/dotenv-linter/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/envio-cli/envio"&gt;envio-cli/envio&lt;/a&gt; - A Modern And Secure CLI Tool For Managing Environment Variables &lt;a href="https://github.com/envio-cli/envio/actions/workflows/CICD.yml"&gt;&lt;img src="https://github.com/envio-cli/envio/actions/workflows/CICD.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flox/flox"&gt;Flox&lt;/a&gt; - Flox is a virtual environment and package manager all in one.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/antinomyhq/forge"&gt;Forge&lt;/a&gt; - A terminal-based AI pair programmer for code generation and editing. &lt;a href="https://forgecode.dev/"&gt;&lt;img src="https://img.shields.io/badge/website-forgecode.dev-blue" alt="Website" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/frolicflow/Frolic"&gt;frolic&lt;/a&gt; - An API layer to build customer facing dashboards 10x faster&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brocode/fw"&gt;fw&lt;/a&gt; - workspace productivity booster &lt;a href="https://github.com/brocode/fw/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/brocode/fw/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kyu08/fzf-make"&gt;fzf-make&lt;/a&gt; [&lt;a href="https://crates.io/crates/fzf-make"&gt;fzf-make&lt;/a&gt;] - A command line tool that executes make target using fuzzy finder with preview window. &lt;a href="https://crates.io/crates/fzf-make"&gt;&lt;img src="https://img.shields.io/crates/v/fzf-make?style=flatflat-square" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/geiger-rs/cargo-geiger"&gt;geiger&lt;/a&gt; - A program that list statistics related to usage of unsafe code in a crate and all its dependencies &lt;a href="https://dev.azure.com/cargo-geiger/cargo-geiger/_build/latest?definitionId=1&amp;amp;branchName=master"&gt;&lt;img src="https://dev.azure.com/cargo-geiger/cargo-geiger/_apis/build/status/geiger-rs.cargo-geiger?branchName=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orhun/git-cliff"&gt;git-cliff&lt;/a&gt; - A highly customizable Changelog Generator that follows Conventional Commit specifications &lt;img src="https://img.shields.io/github/actions/workflow/status/orhun/git-cliff/ci.yml?branch=main&amp;amp;label=build" alt="https://github.com/orhun/git-cliff/actions" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saschagrunert/git-journal/"&gt;git-journal&lt;/a&gt; - The Git Commit Message and Changelog Generation Framework&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rksm/hot-lib-reloader-rs"&gt;hot-lib-reloader&lt;/a&gt; - Hot reload Rust code &lt;a href="https://github.com/rksm/hot-lib-reloader-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/rksm/hot-lib-reloader-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lasantosr/intelli-shell"&gt;intelli-shell&lt;/a&gt; - Bookmark commands with placeholders and search or autocomplete at any time &lt;a href="https://crates.io/crates/intelli-shell"&gt;&lt;img src="https://img.shields.io/crates/v/intelli-shell.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/lasantosr/intelli-shell/actions/workflows/release.yml"&gt;&lt;img src="https://github.com/lasantosr/intelli-shell/actions/workflows/release.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/casey/just"&gt;just&lt;/a&gt; - A handy command runner for project-specific tasks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jacobdeichert/mask"&gt;mask&lt;/a&gt; - A CLI task runner defined by a simple markdown file &lt;a href="https://github.com/jacobdeichert/mask/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/jacobdeichert/mask/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fiatjaf/module-linker"&gt;Module Linker&lt;/a&gt; - Extension that adds &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; links to references in &lt;code&gt;mod&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;extern crate&lt;/code&gt; statements at GitHub.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalance/ptags"&gt;ptags&lt;/a&gt; - A parallel universal-ctags wrapper for git repository&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/racer-rust/racer"&gt;Racer&lt;/a&gt; - code completion for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huhu/rust-search-extension"&gt;Rust Search Extension&lt;/a&gt; - A handy browser extension to search crates and docs in address bar (omnibox). &lt;a href="https://github.com/huhu/rust-search-extension/actions"&gt;&lt;img src="https://github.com/huhu/rust-search-extension/workflows/build/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup"&gt;Rustup&lt;/a&gt; - the Rust toolchain installer &lt;a href="https://github.com/rust-lang/rustup/actions"&gt;&lt;img src="https://github.com/rust-lang/rustup/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/igor-petruk/scriptisto"&gt;scriptisto&lt;/a&gt; - A language-agnostic "shebang interpreter" that enables you to write one file scripts in compiled languages. &lt;a href="https://cloud.drone.io/igor-petruk/scriptisto"&gt;&lt;img src="https://cloud.drone.io/api/badges/igor-petruk/scriptisto/status.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/crate-ci/typos"&gt;typos&lt;/a&gt; [&lt;a href="https://crates.io/crates/typos-cli"&gt;typos-cli&lt;/a&gt;] - Source code spell checker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Build system&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/"&gt;Cargo&lt;/a&gt; - the Rust package manager 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/frewsxcv/cargo-all-features"&gt;cargo-all-features&lt;/a&gt; - A configurable subcommand to simplify testing, building and much more for all combinations of features &lt;a href="https://github.com/frewsxcv/cargo-all-features/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/frewsxcv/cargo-all-features/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-benchcmp"&gt;cargo-benchcmp&lt;/a&gt; - A utility to compare micro-benchmarks&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-bitbake"&gt;cargo-bitbake&lt;/a&gt; - A cargo extension that can generate BitBake recipes utilizing the classes from meta-rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-cache"&gt;cargo-cache&lt;/a&gt; - inspect/manage/clean your cargo cache (&lt;code&gt;~/.cargo/&lt;/code&gt;/&lt;code&gt;${CARGO_HOME}&lt;/code&gt;), print sizes etc &lt;a href="https://github.com/matthiaskrgr/cargo-cache/actions"&gt;&lt;img src="https://github.com/matthiaskrgr/cargo-cache/workflows/ci/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-check"&gt;cargo-check&lt;/a&gt; - A wrapper around &lt;code&gt;cargo rustc -- -Zno-trans&lt;/code&gt; which can be helpful for running a faster compile if you only need correctness checks&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-commander"&gt;cargo-commander&lt;/a&gt; - A subcommand for &lt;code&gt;cargo&lt;/code&gt; to run CLI commands similar to how the scripts section in &lt;code&gt;package.json&lt;/code&gt; works &lt;a href="https://github.com/simonhyll/cargo-commander/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/simonhyll/cargo-commander/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build and test" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-count"&gt;cargo-count&lt;/a&gt; - lists source code counts and details about cargo projects, including unsafe statistics&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-deb"&gt;cargo-deb&lt;/a&gt; - Generates binary Debian packages&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-depgraph"&gt;cargo-depgraph&lt;/a&gt; - Creates dependency graphs for cargo projects using cargo metadata and graphviz&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-do"&gt;cargo-do&lt;/a&gt; - run multiple cargo commands in a row&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-ebuild"&gt;cargo-ebuild&lt;/a&gt; - cargo extension that can generate ebuilds using the in-tree eclasses&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-edit"&gt;cargo-edit&lt;/a&gt; - allows you to add and list dependencies by reading/writing to your Cargo.toml file from the command line&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cargo-generate/cargo-generate"&gt;cargo-generate&lt;/a&gt; - A generator of a rust project by leveraging a pre-existing git repository as a template.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-info"&gt;cargo-info&lt;/a&gt; - queries crates.io for crates details from command line&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-license"&gt;cargo-license&lt;/a&gt; - A cargo subcommand to quickly view the licenses of all dependencies.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-limit"&gt;cargo-limit&lt;/a&gt; - Cargo with less noise: warnings are skipped until errors are fixed, Neovim integration, etc. &lt;a href="https://github.com/cargo-limit/cargo-limit/actions"&gt;&lt;img src="https://github.com/cargo-limit/cargo-limit/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-make"&gt;cargo-make&lt;/a&gt; - Task runner and build tool. &lt;a href="https://github.com/sagiegurari/cargo-make/actions"&gt;&lt;img src="https://github.com/sagiegurari/cargo-make/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-modules"&gt;cargo-modules&lt;/a&gt; - A cargo plugin for showing a tree-like overview of a crate's modules.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-multi"&gt;cargo-multi&lt;/a&gt; - runs specified cargo command on multiple crates&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-outdated"&gt;cargo-outdated&lt;/a&gt; - displays when newer versions of Rust dependencies are available, or out of date&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/orium/cargo-rdme"&gt;cargo-rdme&lt;/a&gt; [&lt;a href="https://crates.io/crates/cargo-rdme"&gt;cargo-rdme&lt;/a&gt;] - Cargo subcommand to create your README from your crate’s documentation. &lt;a href="https://github.com/orium/cargo-rdme/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/orium/cargo-rdme/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-release"&gt;cargo-release&lt;/a&gt; - tool for releasing git-managed cargo project, build, tag, publish, doc and push &lt;a href="https://github.com/crate-ci/cargo-release/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/crate-ci/cargo-release/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-script"&gt;cargo-script&lt;/a&gt; - lets people quickly and easily run Rust "scripts" which can make use of Cargo's package ecosystem&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/est31/cargo-udeps"&gt;cargo-udeps&lt;/a&gt; [&lt;a href="https://crates.io/crates/cargo-udeps"&gt;cargo-udeps&lt;/a&gt;] - find unused dependencies&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-update"&gt;cargo-update&lt;/a&gt; - cargo subcommand for checking and applying updates to installed executables&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-watch"&gt;cargo-watch&lt;/a&gt; - utility for cargo to compile projects when sources change&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dtolnay/cargo-expand"&gt;dtolnay/cargo-expand&lt;/a&gt; - Expand macros in your source code&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CMake 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Devolutions/CMakeRust"&gt;Devolutions/CMakeRust&lt;/a&gt; - useful for integrating a Rust library into a CMake project&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SiegeLord/RustCMake"&gt;SiegeLord/RustCMake&lt;/a&gt; - an example project showing usage of CMake with Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebook/buck2"&gt;facebook/buck2&lt;/a&gt; - &lt;a href="https://buck2.build/"&gt;Buck2&lt;/a&gt; is a large-scale build tool built in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/suptejas/fleet"&gt;Fleet&lt;/a&gt; [&lt;a href="https://crates.io/crates/fleet-rs"&gt;fleet-rs&lt;/a&gt;] - The blazing fast build tool for Rust.&lt;/li&gt; 
 &lt;li&gt;GitHub actions 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/icepuma/rust-action"&gt;icepuma/rust-action&lt;/a&gt; - rust github action&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/peaceiris/actions-mdbook"&gt;peaceiris/actions-mdbook&lt;/a&gt; - GitHub Actions for mdBook&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nixos.org/"&gt;Nix&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nix-community/fenix"&gt;nix-community/fenix&lt;/a&gt; - Rust toolchains and rust analyzer nightly for nix &lt;a href="https://github.com/nix-community/fenix/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/nix-community/fenix/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pantsbuild/pants"&gt;pantsbuild/pants&lt;/a&gt; - &lt;a href="https://www.pantsbuild.org/"&gt;Pants&lt;/a&gt; is a fast, scalable, user-friendly build system for codebases of all sizes built in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TraceMachina/nativelink"&gt;tracemachina/nativelink&lt;/a&gt; - &lt;a href="https://www.nativelink.com"&gt;NativeLink&lt;/a&gt; is a Backend Remote Execution platform written in rust for client build systems such as &lt;a href="https://buck2.build/"&gt;Buck2&lt;/a&gt;, &lt;a href="https://bazel.build/"&gt;Bazel&lt;/a&gt;, &lt;a href="https://www.pantsbuild.org/"&gt;Pants&lt;/a&gt;, etc.. &lt;a href="https://securityscorecards.dev/viewer/?uri=github.com/TraceMachina/nativelink"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/TraceMachina/nativelink/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/8050"&gt;&lt;img src="https://www.bestpractices.dev/projects/8050/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://nativelink.slack.com/join/shared_invite/zt-281qk1ho0-krT7HfTUIYfQMdwflRuq7A#/shared-invite/email"&gt;&lt;img src="https://img.shields.io/badge/slack--channel-blue?logo=slack" alt="Slack" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Debugging&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;GDB 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cs01/gdbgui"&gt;gdbgui&lt;/a&gt; - Browser based frontend for gdb to debug C, C++, Rust, and go.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/godzie44/BugStalker"&gt;godzie44/BugStalker&lt;/a&gt; - Modern debugger for Linux x86-64. Written in Rust for Rust programs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kxxt/tracexec"&gt;kxxt/tracexec&lt;/a&gt; [&lt;a href="https://crates.io/crates/tracexec"&gt;tracexec&lt;/a&gt;] - Tracer for execve{,at} and pre-exec behavior, launcher for debuggers.&lt;/li&gt; 
 &lt;li&gt;LLDB 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"&gt;CodeLLDB&lt;/a&gt; - A LLDB extension for &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Deployment&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/emk/rust-musl-builder"&gt;emk/rust-musl-builder&lt;/a&gt; - Docker images for compiling static Rust binaries using musl-libc and musl-gcc, with static versions of useful C libraries&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kpcyrd/mini-docker-rust"&gt;kpcyrd/mini-docker-rust&lt;/a&gt; - An example project for very small rust docker images&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/liuchong/docker-rustup"&gt;liuchong/docker-rustup&lt;/a&gt; - A multiple version (with musl tools) Rust Docker image&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LukeMathWalker/cargo-chef"&gt;LukeMathWalker/cargo-chef&lt;/a&gt; - A tool and pre-built images for caching compiling remote dependencies between Docker builds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-cross/rust-musl-cross"&gt;rust-cross/rust-musl-cross&lt;/a&gt; - Docker images for compiling static Rust binaries using musl-cross &lt;a href="https://github.com/rust-cross/rust-musl-cross/actions?query=workflow%3ABuild"&gt;&lt;img src="https://github.com/rust-cross/rust-musl-cross/workflows/Build/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/docker-rust"&gt;rust-lang-nursery/docker-rust&lt;/a&gt; - the official Rust Docker image&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stavrospanakakis/is_ready"&gt;Stavrospanakakis/is_ready&lt;/a&gt; - Wait for multiple services to become available &lt;img src="https://github.com/Stavrospanakakis/is_ready/actions/workflows/release.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Heroku 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/emk/heroku-buildpack-rust"&gt;emk/heroku-buildpack-rust&lt;/a&gt; - A buildpack for Rust applications on Heroku&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/release-plz/release-plz"&gt;release-plz&lt;/a&gt; [&lt;a href="https://crates.io/crates/release-plz"&gt;release-plz&lt;/a&gt;] - Release crates from CI, with changelog generation and semver check. &lt;a href="https://github.com/release-plz/release-plz/actions"&gt;&lt;img src="https://github.com/release-plz/release-plz/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Embedded&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://rust-embedded.org/"&gt;Rust Embedded&lt;/a&gt; focuses on improving the end-to-end experience of using Rust in resource-constrained environments and non-traditional platforms. See &lt;a href="https://github.com/rust-embedded/awesome-embedded-rust"&gt;awesome-embedded-rust&lt;/a&gt; for a curated, and more extended list of embedded Rust resources.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Arduino 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/avr-rust/ruduino"&gt;avr-rust/ruduino&lt;/a&gt; - Reusable components for the Arduino Uno.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Cross compiling 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/japaric/rust-cross"&gt;japaric/rust-cross&lt;/a&gt; - everything you need to know about cross compiling Rust programs&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/japaric/xargo"&gt;japaric/xargo&lt;/a&gt; - effortless cross compilation of Rust programs to custom bare-metal targets like ARM Cortex-M&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Espressif 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/esp-rs"&gt;esp-rs&lt;/a&gt; - home to a number of community projects enabling the use of the Rust programming language on various SoCs and modules produced by Espressif Systems.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Firmware 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/oreboot/oreboot"&gt;oreboot/oreboot&lt;/a&gt; - oreboot is a fork of coreboot, with C removed, written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;nRF 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nrf-rs/nrf-hal"&gt;nrf-rs/nrf-hal&lt;/a&gt; - A Rust HAL for the nRF family of devices&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;FFI&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://doc.rust-lang.org/book/first-edition/ffi.html"&gt;Foreign Function Interface&lt;/a&gt;, &lt;a href="http://jakegoulding.com/rust-ffi-omnibus/"&gt;The Rust FFI Omnibus&lt;/a&gt; (a collection of examples of using code written in Rust from other languages) and &lt;a href="https://github.com/alexcrichton/rust-ffi-examples"&gt;FFI examples written in Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;C 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mozilla/cbindgen"&gt;mozilla/cbindgen&lt;/a&gt; - generates C header files from Rust source files. Used in Gecko for WebRender&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Sean1708/rusty-cheddar"&gt;Sean1708/rusty-cheddar&lt;/a&gt; - generates C header files from Rust source files&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;C# 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Cysharp/csbindgen"&gt;csbindgen&lt;/a&gt; - generates C# bindings for Rust source files&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;C++ 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dtolnay/cxx"&gt;dtolnay/cxx&lt;/a&gt; - Safe interop between Rust and C++ &lt;a href="https://github.com/dtolnay/cxx"&gt;&lt;img src="https://img.shields.io/badge/github-dtolnay/cxx-8da0cb?style=for-the-badge&amp;amp;labelColor=555555&amp;amp;logo=github" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cpp"&gt;rust-cpp&lt;/a&gt; - Embed C++ code directly in Rust. &lt;a href="https://ci.appveyor.com/project/mystor/rust-cpp/branch/master"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/uu76vmcrwnjqra0u/branch/master?svg=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-bindgen"&gt;rust-lang/rust-bindgen&lt;/a&gt; - A Rust bindings generator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Erlang 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rusterlium/rustler"&gt;rusterlium/rustler&lt;/a&gt; - safe Rust bridge for creating Erlang NIF functions&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Java 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/benanders/rjni"&gt;bennettanderson/rjni&lt;/a&gt; - use Java from Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/drrb/java-rust-example"&gt;drrb/java-rust-example&lt;/a&gt; - use Rust from Java&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/j4rs"&gt;j4rs&lt;/a&gt; - use Java from Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/jni"&gt;jni&lt;/a&gt; - use Rust from Java&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/jni-sys"&gt;jni-sys&lt;/a&gt; - Rust definitions corresponding to jni.h&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/rucaja"&gt;rucaja&lt;/a&gt; - use Java from Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Lua 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jcmoyer/rust-lua53"&gt;jcmoyer/rust-lua53&lt;/a&gt; - Lua 5.3 bindings for Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lilyball/rust-lua"&gt;lilyball/rust-lua&lt;/a&gt; - Safe Rust bindings to Lua 5.1&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mlua-rs/mlua"&gt;mlua-rs/mlua&lt;/a&gt; - High level Lua 5.4/5.3/5.2/5.1 (including LuaJIT) and Roblox Luau bindings to Rust with async/await support &lt;a href="https://github.com/mlua-rs/mlua/actions"&gt;&lt;img src="https://github.com/mlua-rs/mlua/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tickbh/td_rlua"&gt;tickbh/td_rlua&lt;/a&gt; [&lt;a href="https://crates.io/crates/td_rlua"&gt;td_rlua&lt;/a&gt;] - Zero-cost high-level lua 5.3 wrapper for Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tomaka/hlua"&gt;tomaka/hlua&lt;/a&gt; - Rust library to interface with Lua&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;mruby 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/anima-engine/mrusty"&gt;anima-engine/mrusty&lt;/a&gt; - mruby safe bindings for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Node.js 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/infinyon/node-bindgen"&gt;infinyon/node-bindgen&lt;/a&gt; - Easy way to generate nodejs module using Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/neon-bindings/neon"&gt;neon-bindings/neon&lt;/a&gt; - Rust bindings for writing safe and fast native Node.js modules&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zhangyuang/node-ffi-rs"&gt;zhangyuang/node-ffi-rs&lt;/a&gt; - A module written in Rust and N-API provides interface (FFI) features for Node.js&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Objective-C 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SSheldon/rust-objc"&gt;SSheldon/rust-objc&lt;/a&gt; - Objective-C Runtime bindings and wrapper for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;PHP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/phper-framework/phper"&gt;phper-framework/phper&lt;/a&gt; - The framework that allows us to write PHP extensions using pure and safe Rust whenever possible&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Prolog 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mthom/scryer-prolog/"&gt;mthom/scryer-prolog&lt;/a&gt; - Scryer Prolog is a free software ISO Prolog system written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Python 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dgrunwald/rust-cpython"&gt;dgrunwald/rust-cpython&lt;/a&gt; - Python bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/getsentry/milksnake"&gt;getsentry/milksnake&lt;/a&gt; - extension for python setuptools that allows you to distribute dynamic linked libraries in Python wheels in the most portable way imaginable.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/PyO3/PyO3"&gt;PyO3/PyO3&lt;/a&gt; - Rust bindings for the Python interpreter&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RustPython/RustPython"&gt;RustPython&lt;/a&gt; - A Python Interpreter written in Rust &lt;a href="https://github.com/RustPython/RustPython/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/RustPython/RustPython/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ruby 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/d-unsed/ruru"&gt;d-unsed/ruru&lt;/a&gt; - native Ruby extensions written in Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/danielpclark/rutie"&gt;danielpclark/rutie&lt;/a&gt; - native Ruby extensions written in Rust and vice versa&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Web Assembly 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rhysd/wain"&gt;rhysd/wain&lt;/a&gt; - wain: WebAssembly INterpreter from scratch in Safe Rust with zero dependency &lt;a href="https://github.com/rhysd/wain/actions?query=workflow%3ACI+branch%3Amaster+event%3Apush"&gt;&lt;img src="https://github.com/rhysd/wain/workflows/CI/badge.svg?branch=master&amp;amp;event=push" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/wasm-bindgen/wasm-bindgen"&gt;wasm-bindgen&lt;/a&gt; - A project for facilitating high-level interactions between wasm modules and JS.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/drager/wasm-pack"&gt;wasm-pack&lt;/a&gt; - &lt;span&gt;📦&lt;/span&gt; &lt;span&gt;✨&lt;/span&gt; pack up the wasm and publish it to npm!&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Formatters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dprint/dprint"&gt;dprint&lt;/a&gt; - A pluggable and configurable code formatting platform &lt;a href="https://github.com/dprint/dprint/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/dprint/dprint/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jinxdash/prettier-plugin-rust"&gt;Prettier Rust&lt;/a&gt; - An opinionated Rust code formatter that autofixes bad syntax (&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; community plugin)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt"&gt;rustfmt&lt;/a&gt; - Rust code formatter maintained by the Rust team and included in cargo&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;IDEs&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://areweideyet.com/"&gt;Are we (I)DE yet?&lt;/a&gt; and &lt;a href="https://www.rust-lang.org/tools"&gt;Rust Tools&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.eclipse.org/"&gt;Eclipse&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/eclipse-corrosion/corrosion"&gt;Eclipse Corrosion&lt;/a&gt; - a Rust development plugin for the Eclipse IDE, providing a rich edition experience through integration with the Rust Analyzer language server, Cargo runner and gdb debugger&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/racer-rust/emacs-racer"&gt;emacs-racer&lt;/a&gt; - Autocompletion (see also &lt;a href="https://company-mode.github.io"&gt;company&lt;/a&gt; and &lt;a href="https://github.com/auto-complete/auto-complete"&gt;auto-complete&lt;/a&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/flycheck/flycheck-rust"&gt;flycheck-rust&lt;/a&gt; - Rust support for &lt;a href="https://github.com/flycheck/flycheck"&gt;Flycheck&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-mode"&gt;rust-mode&lt;/a&gt; - Rust Major Mode&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/brotzeit/rustic"&gt;rustic&lt;/a&gt; - Rust development environment for Emacs &lt;a href="https://github.com/brotzeit/rustic/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/brotzeit/rustic/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitpod.io"&gt;gitpod.io&lt;/a&gt; - Online IDE with full Rust support based on Rust Language Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://wiki.gnome.org/Apps/Builder"&gt;gnome-builder&lt;/a&gt; - native support for rust and cargo since Version 3.22.2&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/intellij-rust/intellij-rust"&gt;intellij-rust/intellij-rust&lt;/a&gt; - Rust plugin for the IntelliJ Platform&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://kakoune.org/"&gt;Kakoune&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kakoune-lsp/kakoune-lsp/"&gt;kakoune-lsp&lt;/a&gt; - &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;LSP&lt;/a&gt; client. Implemented in Rust and supports rls out of the box.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lapce/lapce"&gt;lapce&lt;/a&gt; - Lightning-fast and Powerful Code Editor written in Rust. &lt;a href="https://github.com/lapce/lapce/actions/workflows/release.yml"&gt;&lt;img src="https://github.com/lapce/lapce/actions/workflows/release.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/madeso/ride"&gt;Ride&lt;/a&gt; - A Rust IDE&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.jetbrains.com/rust/"&gt;RustRover&lt;/a&gt; - A powerful Rust IDE by JetBrains, free for individual non-commercial use&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-enhanced"&gt;rust-lang/rust-enhanced&lt;/a&gt; - official Rust package&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; - the ubiquitous text editor 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/autozimu/LanguageClient-neovim"&gt;autozimu/LanguageClient-neovim&lt;/a&gt; - &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;LSP&lt;/a&gt; client. Implemented in Rust and supports rls out of the box.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nwiizo/cargo.nvim"&gt;cargo.nvim&lt;/a&gt; - A Neovim plugin for seamless integration with Cargo commands.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Saecki/crates.nvim"&gt;crates.nvim&lt;/a&gt; - plugin that helps to managing crates.io dependencies.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust.vim"&gt;rust.vim&lt;/a&gt; - provides file detection, syntax highlighting, formatting, Syntastic integration, and more.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/racer-rust/vim-racer"&gt;vim-racer&lt;/a&gt; - allows vim to use &lt;a href="https://github.com/racer-rust/racer"&gt;Racer&lt;/a&gt; for Rust code completion and navigation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Visual Studio 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ZoeyR/rls-vs2017"&gt;dgriffen/rls-vs2017&lt;/a&gt; - Rust support for Visual Studio 2017 Preview &lt;a href="https://ci.appveyor.com/project/dgriffen/rls-vs2017"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/d2lxlincwninhsng?svg=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/VisualRust"&gt;PistonDevelopers/VisualRust&lt;/a&gt; - A Visual Studio extension for Rust &lt;a href="https://ci.appveyor.com/project/vosen/visualrust"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/5nw5no10jj0y4p3f?svg=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"&gt;CodeLLDB&lt;/a&gt; - A LLDB extension&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=fill-labs.dependi"&gt;Dependi&lt;/a&gt; - Manage your dependencies with ease&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml"&gt;Even Better TOML&lt;/a&gt; - TOML support in vscode&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jinxdash.prettier-rust"&gt;Prettier - Code formatter (Rust)&lt;/a&gt; - Opinionated Rust code formatter that autofixes bad syntax (&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; community plugin)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer"&gt;rust-analyzer&lt;/a&gt; - An alternative rust language server to the RLS&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Profiling&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bencherdev/bencher"&gt;Bencher&lt;/a&gt; - A suite of continuous benchmarking tools designed to catch performance regressions in CI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bheisler/criterion.rs"&gt;bheisler/criterion.rs&lt;/a&gt; - Statistics-driven benchmarking library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/koute/bytehound"&gt;Bytehound&lt;/a&gt; - A memory profiler for Linux&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nvzqz/divan"&gt;Divan&lt;/a&gt; - Simple yet powerful benchmarking library with allocation profiling&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ellisonch/rust-stopwatch"&gt;ellisonch/rust-stopwatch&lt;/a&gt; - A stopwatch library&lt;/li&gt; 
 &lt;li&gt;FlameGraphs 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/llogiq/flame"&gt;llogiq/flame&lt;/a&gt; - An intrusive flamegraph profiling tool for rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mrhooray/torch"&gt;mrhooray/torch&lt;/a&gt; - generates FlameGraphs based on DWARF Debug Info&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bytedance/g3"&gt;g3bench&lt;/a&gt; - A benchmark tool that supports HTTP 1.x, HTTP 2, HTTP 3, TLS Handshake, DNS and Cloudflare Keyless&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sharkdp/hyperfine"&gt;sharkdp/hyperfine&lt;/a&gt; - A command-line benchmarking tool&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Services&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deps-rs/deps.rs"&gt;deps.rs&lt;/a&gt; - Detect outdated or insecure dependencies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs"&gt;docs.rs&lt;/a&gt; - Automatic documentation generation of crates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Static analysis&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/assert"&gt;assert&lt;/a&gt;, &lt;a href="https://crates.io/keywords/static"&gt;static&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/endorlabs/mirai"&gt;MIRAI&lt;/a&gt; - an abstract interpreter operating on Rust's mid-level intermediate representation (MIR) &lt;a href="https://github.com/endorlabs/mirai/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/endorlabs/mirai/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Continuous Integration" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Artisan-Lab/RAPx"&gt;RAPx&lt;/a&gt; - A platform that helps Rust programmers develop and use advanced static analysis tools beyond those provided by the rustc compiler.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/static_assertions"&gt;static_assertions&lt;/a&gt; - Compile-time assertions to ensure that invariants are met&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/verus-lang/verus"&gt;verus-lang/verus&lt;/a&gt; - Verified Rust for low-level systems code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Testing&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/test"&gt;test&lt;/a&gt;, &lt;a href="https://crates.io/keywords/testing"&gt;testing&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Code Coverage 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-tarpaulin"&gt;tarpaulin&lt;/a&gt; - A code coverage tool&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Continuous Integration 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/japaric/trust"&gt;trust&lt;/a&gt; - A Travis CI and AppVeyor template to test your Rust crate on 5 architectures and publish binary releases of it for Linux, macOS and Windows&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Frameworks and Runners 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AlKass/polish"&gt;AlKass/polish&lt;/a&gt; - Mini Testing/Test-Driven Framework &lt;a href="https://crates.io/crates/polish"&gt;&lt;img src="https://img.shields.io/crates/v/polish.svg?sanitize=true" alt="Crates Package Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bitfield/cargo-testdox"&gt;bitfield/cargo-testdox&lt;/a&gt; [&lt;a href="https://crates.io/crates/cargo-testdox"&gt;cargo-testdox&lt;/a&gt;] - Turns your Rust tests into docs &lt;a href="https://github.com/bitfield/cargo-testdox/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/bitfield/cargo-testdox/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-dinghy/"&gt;cargo-dinghy&lt;/a&gt; - A cargo extension to simplify running library tests and benches on smartphones and other small processor devices.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cucumber"&gt;cucumber&lt;/a&gt; &lt;a href="https://crates.io/crates/cucumber"&gt;&lt;img src="https://img.shields.io/crates/v/cucumber.svg?sanitize=true" alt="Latest Version" /&gt;&lt;/a&gt; - An implementation of the Cucumber testing framework for Rust. Fully native, no external test runners or dependencies. &lt;a href="https://github.com/cucumber-rs/cucumber/actions"&gt;&lt;img src="https://github.com/cucumber-rs/cucumber/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/d-e-s-o/test-log"&gt;d-e-s-o/test-log&lt;/a&gt; [&lt;a href="https://crates.io/crates/test-log"&gt;test-log&lt;/a&gt;] - A replacement of the &lt;code&gt;#[test]&lt;/code&gt; attribute that initializes logging and/or tracing infrastructure before running tests. &lt;a href="https://github.com/d-e-s-o/test-log/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/d-e-s-o/test-log/actions/workflows/test.yml/badge.svg?branch=main" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/demonstrate"&gt;demonstrate&lt;/a&gt; - Declarative Testing Framework &lt;a href="https://github.com/aubaugh/demonstrate"&gt;&lt;img src="https://github.com/aubaugh/demonstrate/workflows/Continuous%20Integration/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/googletest"&gt;GoogleTest Rust&lt;/a&gt; - Powerful test assertion framework based on the C++ test library GoogleTest &lt;a href="https://github.com/google/googletest-rust/actions?query=workflow%3ACI+branch%3Amain"&gt;&lt;img src="https://github.com/google/googletest-rust/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/wfxr/rlt"&gt;rlt&lt;/a&gt; - A universal load testing framework, with real-time tui support.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/rstest"&gt;rstest&lt;/a&gt; - Fixture-based test framework &lt;a href="https://github.com/la10736/rstest/actions"&gt;&lt;img src="https://github.com/la10736/rstest/workflows/Test/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/speculate"&gt;speculate&lt;/a&gt; - An RSpec inspired minimal testing framework&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mocking and Test Data 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/asomers/mockall"&gt;asomers/mockall&lt;/a&gt; [&lt;a href="https://crates.io/crates/mockall"&gt;mockall&lt;/a&gt;] - A powerful mock object library. &lt;a href="https://cirrus-ci.com/github/asomers/mockall"&gt;&lt;img src="https://api.cirrus-ci.com/github/asomers/mockall.svg?sanitize=true" alt="Cirrus Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bcheidemann/fixtures-rs/tree/main/fixtures"&gt;bcheidemann/fixtures-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/fixtures"&gt;fixtures&lt;/a&gt;] - A proc macro for generating tests from fixtures using glob patterns&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cksac/fake-rs"&gt;fake-rs&lt;/a&gt; - A library for generating fake data&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/calder/rust-goldenfile"&gt;goldenfile&lt;/a&gt; [&lt;a href="https://crates.io/crates/goldenfile"&gt;goldenfile&lt;/a&gt;] - A library providing a simple API for goldenfile testing.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alexliesenfeld/httpmock"&gt;httpmock&lt;/a&gt; - HTTP mocking &lt;a href="https://dev.azure.com/alexliesenfeld/httpmock/_build/latest?definitionId=2&amp;amp;branchName=master"&gt;&lt;img src="https://dev.azure.com/alexliesenfeld/httpmock/_apis/build/status/alexliesenfeld.httpmock?branchName=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/mockiato"&gt;mockiato&lt;/a&gt; - A strict, yet friendly mocking library for unstable Rust 2018&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/mockito"&gt;mockito&lt;/a&gt; - HTTP mocking&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/IBM/mocktail"&gt;mocktail&lt;/a&gt; &lt;a href="https://crates.io/crates/mocktail"&gt;&lt;img src="https://img.shields.io/crates/v/mocktail" alt="mocktail" /&gt;&lt;/a&gt; - HTTP &amp;amp; gRPC server mocking for Rust &lt;img src="https://github.com/IBM/mocktail/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nrxus/faux/"&gt;nrxus/faux&lt;/a&gt; &lt;a href="https://crates.io/crates/faux"&gt;&lt;img src="https://img.shields.io/crates/v/faux.svg?sanitize=true" alt="Latest Version" /&gt;&lt;/a&gt; - A library to create mocks out of structs. &lt;img src="https://github.com/nrxus/faux/workflows/test/badge.svg?branch=master" alt="build" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/shuttle-hq/synth/"&gt;synth&lt;/a&gt; - Generate database data declaratively. &lt;a href="https://github.com/shuttle-hq/synth"&gt;&lt;img src="https://github.com/shuttle-hq/synth/actions/workflows/synth-test.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mutation Testing 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sourcefrog/cargo-mutants"&gt;cargo-mutants&lt;/a&gt; [&lt;a href="https://crates.io/crates/cargo-mutants"&gt;cargo-mutants&lt;/a&gt;] - Finds inadequately tested code by injecting mutations, no source changes required. &lt;a href="https://github.com/sourcefrog/cargo-mutants/actions/workflows/tests.yml?query=branch%3Amain"&gt;&lt;img src="https://github.com/sourcefrog/cargo-mutants/actions/workflows/tests.yml/badge.svg?branch=main&amp;amp;event=push" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/llogiq/mutagen"&gt;mutagen&lt;/a&gt; [&lt;a href="https://crates.io/crates/mutagen"&gt;mutagen&lt;/a&gt;] - A source-level mutation testing framework (nightly only)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Property Testing and Fuzzing 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/proptest"&gt;proptest&lt;/a&gt; - property testing framework inspired by the &lt;a href="https://hypothesis.works/"&gt;Hypothesis&lt;/a&gt; framework for Python&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/quickcheck"&gt;quickcheck&lt;/a&gt; - A Rust implementation of &lt;a href="https://wiki.haskell.org/Introduction_to_QuickCheck1"&gt;QuickCheck&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-fuzz/afl.rs"&gt;rust-fuzz/afl.rs&lt;/a&gt; - A Rust fuzzer, using &lt;a href="https://lcamtuf.coredump.cx/afl/"&gt;AFL&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Transpiling&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aleph-lang/aleph_ollama"&gt;aleph-lang/aleph_ollama&lt;/a&gt; [&lt;a href="https://crates.io/crates/aleph_ollama"&gt;aleph_ollama&lt;/a&gt;] - AI-powered source code translation tool using local Ollama API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BayesWitnesses/m2cgen"&gt;BayesWitnesses/m2cgen&lt;/a&gt; - A CLI tool to transpile trained classic machine learning models into a native Rust code with zero dependencies. &lt;a href="https://github.com/BayesWitnesses/m2cgen/actions"&gt;&lt;img src="https://github.com/BayesWitnesses/m2cgen/workflows/GitHub%20Actions/badge.svg?branch=master" alt="GitHub Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/immunant/c2rust"&gt;immunant/c2rust&lt;/a&gt; - C to Rust translator and cross checker built atop Clang/LLVM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jameysharp/corrode"&gt;jameysharp/corrode&lt;/a&gt; - A C to Rust translator written in Haskell.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Libraries&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/larksuite/perf-monitor-rs"&gt;perf-monitor-rs&lt;/a&gt; - A toolkit designed to be a foundation for applications to monitor their performance. &lt;a href="https://crates.io/crates/perf_monitor"&gt;&lt;img src="https://img.shields.io/crates/v/perf_monitor.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Artificial Intelligence&lt;/h3&gt; 
&lt;h4&gt;Genetic algorithms&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/innoave/genevo"&gt;innoave/genevo&lt;/a&gt; - Execute genetic algorithm (GA) simulations in a customizable and extensible way.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/m-decoster/RsGenetic"&gt;m-decoster/RsGenetic&lt;/a&gt; - Genetic Algorithm library. In maintenance mode.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Martin1887/oxigen"&gt;Martin1887/oxigen&lt;/a&gt; - Fast, parallel, extensible and adaptable genetic algorithm library. A example using this library solves the N Queens problem for N = 255 in only few seconds and using less than 1 MB of RAM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pkalivas/radiate"&gt;pkalivas/radiate&lt;/a&gt; - A customizable parallel genetic programming engine capable of evolving solutions for supervised, unsupervised, and reinforcement learning problems. Comes with complete and customizable implementation of NEAT and Evtree.&lt;img src="https://img.shields.io/crates/v/radiate" alt="Crates.io" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/willi-kappler/darwin-rs"&gt;willi-kappler/darwin-rs&lt;/a&gt; - Evolutionary algorithms&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Machine learning&lt;/h4&gt; 
&lt;p&gt;See [&lt;a href="https://crates.io/keywords/machine-learning"&gt;Machine learning&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;See also &lt;a href="https://medium.com/@autumn_eng/about-rust-s-machine-learning-community-4cda5ec8a790#.hvkp56j3f"&gt;About Rust’s Machine Learning Community&lt;/a&gt; and &lt;a href="https://www.arewelearningyet.com"&gt;Are we learning yet?&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/autumnai/leaf"&gt;autumnai/leaf&lt;/a&gt; - Open Machine Intelligence framework.. Abandoned project. The most updated fork is &lt;a href="https://github.com/fff-rs/juice"&gt;juice&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ave-Sergeev/Tictonix"&gt;ave-sergeev/tictonix&lt;/a&gt; [&lt;a href="https://crates.io/crates/tictonix"&gt;tictonix&lt;/a&gt;] - A library that provides the ability to convert tokens into embeddings, as well as to encode their positions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blackportal-ai/delta"&gt;blackportal-ai/delta&lt;/a&gt; - Δ An Open-Source Machine Learning Framework in Rust. &lt;img src="https://img.shields.io/crates/v/deltaml.svg?sanitize=true" alt="crates.io" /&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/blackportal-ai/delta/core.yml?branch=master" alt="build" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blackportal-ai/nebula"&gt;blackportal-ai/nebula&lt;/a&gt; - A Package Manager for Machine Learning Datasets and Models. &lt;img src="https://img.shields.io/github/actions/workflow/status/blackportal-ai/nebula/core.yml?branch=master" alt="build" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tracel-ai/burn"&gt;burn&lt;/a&gt; - A Flexible and Comprehensive Deep Learning Framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/coreylowman/dfdx"&gt;coreylowman/dfdx&lt;/a&gt; - CUDA accelerated machine learning framework that leverages many of Rust's unique features. &lt;img src="https://img.shields.io/crates/v/dfdx" alt="Crates.io" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/guillaume-be/rust-bert"&gt;guillaume-be/rust-bert&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust_bert"&gt;rust_bert&lt;/a&gt;] - Ready-to-use NLP pipelines and language models&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/candle"&gt;huggingface/candle&lt;/a&gt; [&lt;a href="https://crates.io/crates/candle-core"&gt;candle-core&lt;/a&gt;] - a minimalist ML framework with a focus on easiness of use and on performance (including GPU support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/tokenizers"&gt;huggingface/tokenizers&lt;/a&gt; - Hugging Face's tokenizers for modern NLP pipelines (original implementation) with bindings for Python. &lt;a href="https://github.com/huggingface/tokenizers/actions"&gt;&lt;img src="https://github.com/huggingface/tokenizers/workflows/Rust/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/LaurentMazare/tch-rs"&gt;LaurentMazare/tch-rs&lt;/a&gt; - Bindings for PyTorch.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maciejkula/rustlearn"&gt;maciejkula/rustlearn&lt;/a&gt; - Machine learning library. &lt;a href="https://app.circleci.com/pipelines/github/maciejkula/rustlearn"&gt;&lt;img src="https://circleci.com/gh/maciejkula/rustlearn.svg?style=svg" alt="Circle CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Mottl/lightgbm3-rs"&gt;Mottl/lightgb3-rs&lt;/a&gt; - Bindings for LightGBM &lt;a href="https://crates.io/crates/lightgbm3"&gt;&lt;img src="https://img.shields.io/crates/v/lightgbm3.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Mottl/lightgbm3-rs/actions"&gt;&lt;img src="https://github.com/Mottl/lightgbm3-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/perpetual-ml/perpetual"&gt;perpetual-ml/perpetual&lt;/a&gt; [&lt;a href="https://crates.io/crates/perpetual"&gt;perpetual&lt;/a&gt;] - A self-generalizing gradient boosting machine which doesn't need hyperparameter optimization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ramsyana/RustTensor"&gt;ramsyana/RustTensor&lt;/a&gt; - A learning-focused, high-performance tensor computation library built from scratch in Rust with automatic differentiation and CPU/CUDA backends.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-ml/linfa"&gt;rust-ml/linfa&lt;/a&gt; - Machine learning framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/smartcorelib/smartcore"&gt;smartcorelib/smartcore&lt;/a&gt; - Machine Learning Library [&lt;img src="https://img.shields.io/circleci/build/github/smartcorelib/smartcore" alt="Build Status" /&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tensorflow/rust"&gt;tensorflow/rust&lt;/a&gt; - Bindings for TensorFlow.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;OpenAI&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/64bit/async-openai"&gt;64bit/async-openai&lt;/a&gt; [&lt;a href="https://crates.io/crates/async-openai"&gt;async-openai&lt;/a&gt;] - Ergonomic Rust bindings for OpenAI API based on OpenAPI spec.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zurawiki/tiktoken-rs"&gt;zurawiki/tiktoken-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/tiktoken-rs"&gt;tiktoken-rs&lt;/a&gt;] - Library for tokenizing text with OpenAI models using tiktoken. &lt;a href="https://github.com/zurawiki/tiktoken-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zurawiki/tiktoken-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Tooling&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BoundaryML/baml"&gt;BAML&lt;/a&gt; - A simple prompting language for building reliable AI workflows and agents. BAML's compiler is written in Rust!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Astronomy&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/astronomy"&gt;astronomy&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cds-astro/aladin-lite"&gt;cds-astro/aladin-lite&lt;/a&gt; - Web application for visualizing spatial and planetary image surveys in different projections&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/fitsio"&gt;fitsio&lt;/a&gt; - fits interface library wrapping cfitsio&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flosse/rust-sun"&gt;flosse/rust-sun&lt;/a&gt; [&lt;a href="https://crates.io/crates/sun"&gt;sun&lt;/a&gt;] - A rust port of the JS library suncalc&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saurvs/astro-rust"&gt;saurvs/astro-rust&lt;/a&gt; - astronomy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Asynchronous&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://async.rs/"&gt;async-std&lt;/a&gt; [&lt;a href="https://crates.io/crates/async-std"&gt;async-std&lt;/a&gt;] - Async version of the Rust standard library &lt;a href="https://github.com/async-rs/async-std/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/async-rs/async-std/actions/workflows/ci.yml/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dagrs-dev/dagrs"&gt;dagrs&lt;/a&gt; - A high-performance asynchronous task programming framework, which follows the concept of Flow based Programming.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dpc/mioco"&gt;dpc/mioco&lt;/a&gt; - Scalable, coroutine-based, asynchronous IO handling library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/igumnoff/gabriel2"&gt;igumnoff/gabriel2&lt;/a&gt; [&lt;a href="https://crates.io/crates/gabriel2"&gt;gabriel2&lt;/a&gt;] - Gabriel2: An actor-model library based on Tokio&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tokio-rs/mio"&gt;mio&lt;/a&gt; - MIO is a lightweight IO library, with a focus on adding as little overhead as possible over the OS abstractions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs"&gt;rust-lang/futures-rs&lt;/a&gt; - Zero-cost futures&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/t3hmrman/async-dropper"&gt;t3hmrman/async-dropper&lt;/a&gt; [&lt;a href="https://crates.io/crates/async-dropper"&gt;async-dropper&lt;/a&gt;] - Implementation of &lt;code&gt;AsyncDrop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TeaEntityLab/fpRust"&gt;TeaEntityLab/fpRust&lt;/a&gt; - Monad/MonadIO, Handler, Coroutine/doNotation, Functional Programming features for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tokio-rs/tokio"&gt;tokio-rs/tokio&lt;/a&gt; - A runtime for writing reliable, asynchronous, and slim applications with the Rust programming language.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tqwewe/kameo"&gt;tqwewe/kameo&lt;/a&gt; - Fault-tolerant Async Actors Built on Tokio&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Xudong-Huang/may"&gt;Xudong-Huang/may&lt;/a&gt; - Stackful coroutine library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zonyitoo/coio-rs"&gt;zonyitoo/coio-rs&lt;/a&gt; - A coroutine I/O library with a working-stealing scheduler&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Audio and Music&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/audio"&gt;audio&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aschey/stream-download-rs"&gt;aschey/stream-download-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/stream-download"&gt;stream-download&lt;/a&gt;] - A library for streaming audio, video, and other media content &lt;a href="https://github.com/aschey/stream-download-rs/actions"&gt;&lt;img src="https://github.com/aschey/stream-download-rs/actions/workflows/ci.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/hound"&gt;hound&lt;/a&gt; - A WAV encoding and decoding library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/insomnimus/nodi"&gt;insomnimus/nodi&lt;/a&gt; [&lt;a href="https://crates.io/crates/nodi"&gt;nodi&lt;/a&gt;] - A library for playback and abstraction of MIDI files. &lt;a href="https://github.com/insomnimus/nodi/actions"&gt;&lt;img src="https://github.com/insomnimus/nodi/actions/workflows/main.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jhasse/ears"&gt;jhasse/ears&lt;/a&gt; - A simple library to play Sounds and Musics, on top of OpenAL and libsndfile&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/musitdev/portmidi-rs"&gt;musitdev/portmidi-rs&lt;/a&gt; - &lt;a href="https://portmedia.sourceforge.net/portmidi/"&gt;PortMidi&lt;/a&gt; bindings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ozankasikci/rust-music-theory"&gt;ozankasikci/rust-music-theory&lt;/a&gt; - Music theory library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pdeljanov/Symphonia"&gt;pdeljanov/Symphonia&lt;/a&gt; - Audio decoding and media demuxing library supporting AAC, FLAC, MP3, MP4, OGG, Vorbis, and WAV.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RustAudio"&gt;RustAudio&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RustAudio/cpal"&gt;RustAudio/cpal&lt;/a&gt; - Low-level cross-platform audio I/O library. &lt;a href="https://github.com/RustAudio/cpal/actions"&gt;&lt;img src="https://github.com/RustAudio/cpal/workflows/cpal/badge.svg?branch=master" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RustAudio/rodio"&gt;RustAudio/rodio&lt;/a&gt; - Audio playback library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RustAudio/rust-portaudio"&gt;RustAudio/rust-portaudio&lt;/a&gt; - PortAudio bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Serial-ATA/lofty-rs"&gt;Serial-ATA/lofty-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/lofty"&gt;lofty&lt;/a&gt;] - A library for reading and editing the metadata of various audio formats &lt;a href="https://github.com/Serial-ATA/lofty-rs/actions"&gt;&lt;img src="https://github.com/Serial-ATA/lofty-rs/actions/workflows/ci.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Authentication&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/constantoine/totp-rs"&gt;constantoine/totp-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/totp-rs"&gt;totp-rs&lt;/a&gt;] - 2fa library to generate and verify TOTP-based tokens &lt;img src="https://github.com/constantoine/totp-rs/workflows/Rust/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Keats/jsonwebtoken"&gt;Keats/jsonwebtoken&lt;/a&gt; - &lt;a href="https://en.wikipedia.org/wiki/JSON_Web_Token"&gt;JSON Web Token&lt;/a&gt; library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ramosbugs/oauth2-rs"&gt;oauth2&lt;/a&gt; - Extensible, strongly-typed OAuth2 client library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/197g/oxide-auth"&gt;oxide-auth&lt;/a&gt; - A OAuth2 server library, for use in combination with actix or other frontends, featuring a set of configurable and pluggable backends &lt;a href="https://cirrus-ci.com/github/HeroicKatora/oxide-auth"&gt;&lt;img src="https://api.cirrus-ci.com/github/197g/oxide-auth.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sgrust01/jwtvault"&gt;sgrust01/jwtvault&lt;/a&gt; - Async library to manage and orchestrate JWT workflow&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dermesser/yup-oauth2"&gt;yup-oauth2&lt;/a&gt; - An oauth2 client implementation providing the Device, Installed and Service Account flows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Automotive&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/idletea/tokio-socketcan"&gt;idletea/tokio-socketcan&lt;/a&gt; [&lt;a href="https://crates.io/crates/tokio-socketcan"&gt;tokio-socketcan&lt;/a&gt;] - Linux SocketCAN support for tokio based on the socketcan crate&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcelbuesing/can-dbc"&gt;marcelbuesing/can-dbc&lt;/a&gt; [&lt;a href="https://crates.io/crates/can-dbc"&gt;can-dbc&lt;/a&gt;] - A parser for the DBC format&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcelbuesing/tokio-socketcan-bcm"&gt;marcelbuesing/tokio-socketcan-bcm&lt;/a&gt; [&lt;a href="https://crates.io/crates/tokio-socketcan-bcm"&gt;tokio-socketcan-bcm&lt;/a&gt;] - Linux SocketCAN BCM support for tokio&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/socketcan-rs/socketcan-rs"&gt;mbr/socketcan&lt;/a&gt; [&lt;a href="https://crates.io/crates/socketcan"&gt;socketcan&lt;/a&gt;] - Linux SocketCAN library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Sensirion/lin-bus-rs"&gt;Sensirion/lin-bus&lt;/a&gt; [&lt;a href="https://crates.io/crates/lin-bus"&gt;lin-bus&lt;/a&gt;] - LIN bus driver traits and protocol implementation &lt;a href="https://app.circleci.com/pipelines/github/Sensirion/lin-bus-rs"&gt;&lt;img src="https://circleci.com/gh/Sensirion/lin-bus-rs.svg?style=svg" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Bioinformatics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/biodatageeks/polars-bio"&gt;polars-bio&lt;/a&gt; - Blazing-Fast Bioinformatic Operations on Python DataFrames &lt;img src="https://img.shields.io/pypi/v/polars-bio" alt="PyPI - Version" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-bio"&gt;Rust-Bio&lt;/a&gt; - bioinformatics libraries.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Caching&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/06chaynes/http-cache"&gt;06chaynes/http-cache&lt;/a&gt; [&lt;a href="https://crates.io/crates/http-cache"&gt;http-cache&lt;/a&gt;] - A caching middleware that follows HTTP caching rules &lt;a href="https://github.com/06chaynes/http-cache/actions/workflows/http-cache.yml"&gt;&lt;img src="https://github.com/06chaynes/http-cache/workflows/http-cache/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aisk/rust-memcache"&gt;aisk/rust-memcache&lt;/a&gt; - Memcached client library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/al8n/stretto"&gt;al8n/stretto&lt;/a&gt; - A high performance thread-safe memory-bound cache &lt;a href="https://github.com/al8n/stretto/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/al8n/stretto/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jaemk/cached"&gt;jaemk/cached&lt;/a&gt; - Simple function caching/memoization&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/moka-rs/moka"&gt;moka-rs/moka&lt;/a&gt; - A high performance concurrent caching library inspired by the Caffeine library for Java &lt;a href="https://github.com/moka-rs/moka/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/moka-rs/moka/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mozilla/sccache/"&gt;mozilla/sccache&lt;/a&gt; - Shared Compilation Cache, great compilation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zkat/cacache-rs"&gt;zkat/cacache-rs&lt;/a&gt; - A high-performance, concurrent, content-addressable disk cache, optimized for async APIs &lt;a href="https://github.com/zkat/cacache-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zkat/cacache-rs/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Cloud&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;AWS [&lt;a href="https://crates.io/keywords/aws"&gt;aws&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/awslabs/aws-lambda-rust-runtime"&gt;awslabs/aws-lambda-rust-runtime&lt;/a&gt; [&lt;a href="https://crates.io/crates/lambda_runtime"&gt;lambda_runtime&lt;/a&gt;] - Runtime for AWS Lambda &lt;a href="https://github.com/awslabs/aws-lambda-rust-runtime/actions"&gt;&lt;img src="https://github.com/awslabs/aws-lambda-rust-runtime/workflows/Rust/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/awslabs/aws-sdk-rust"&gt;awslabs/aws-sdk-rust&lt;/a&gt; - The new AWS SDK&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rusoto/rusoto"&gt;rusoto/rusoto&lt;/a&gt; - An AWS SDK for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Azure 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Azure/azure-sdk-for-rust"&gt;Azure/azure-sdk-for-rust&lt;/a&gt; - Official Azure SDK for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Load Balancer 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bparli/convey"&gt;Convey&lt;/a&gt; - Layer 4 Load Balancer with dynamic configuration loading.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Multi Cloud 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Qovery/engine"&gt;Qovery/engine&lt;/a&gt; - Abstraction layer library that turns easy application deployment on Cloud providers in just a few minutes&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Command-line&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Argument parsing 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/clap-rs/clap"&gt;clap-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/clap"&gt;clap&lt;/a&gt;] - A simple to use, full featured command-line argument parser&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cliparser"&gt;cliparser&lt;/a&gt; - Simple command line parser. &lt;a href="https://github.com/sagiegurari/cliparser/actions"&gt;&lt;img src="https://github.com/sagiegurari/cliparser/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/docopt/docopt.rs"&gt;docopt/docopt.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/docopt"&gt;docopt&lt;/a&gt;] - Implementation of &lt;a href="http://docopt.org"&gt;DocOpt&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/google/argh"&gt;google/argh&lt;/a&gt; [&lt;a href="https://crates.io/crates/argh"&gt;argh&lt;/a&gt;] - An opinionated Derive-based argument parser optimized for code size &lt;a href="https://github.com/google/argh/actions"&gt;&lt;img src="https://github.com/google/argh/workflows/Argh/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/killercup/quicli"&gt;killercup/quicli&lt;/a&gt; [&lt;a href="https://crates.io/crates/quicli"&gt;quicli&lt;/a&gt;] - quickly build cool CLI apps&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ksk001100/seahorse"&gt;ksk001100/seahorse&lt;/a&gt; [&lt;a href="https://crates.io/crates/seahorse"&gt;seahorse&lt;/a&gt;] - A minimal CLI framework &lt;a href="https://github.com/ksk001100/seahorse/actions"&gt;&lt;img src="https://github.com/ksk001100/seahorse/workflows/CI/badge.svg?branch=master" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/TeXitoi/structopt"&gt;TeXitoi/structopt&lt;/a&gt; [&lt;a href="https://crates.io/crates/structopt"&gt;structopt&lt;/a&gt;] - parse command line argument by defining a struct&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Data visualization 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nukesor/comfy-table"&gt;nukesor/comfy-table&lt;/a&gt; [&lt;a href="https://crates.io/crates/comfy-table"&gt;comfy-table&lt;/a&gt;] - Beautiful dynamic tables for your cli tools. &lt;a href="https://github.com/nukesor/comfy-table/actions"&gt;&lt;img src="https://github.com/Nukesor/comfy-table/workflows/Tests/badge.svg?branch=master" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zhiburt/tabled"&gt;zhiburt/tabled&lt;/a&gt; [&lt;a href="https://crates.io/crates/tabled"&gt;tabled&lt;/a&gt;] - An easy to use library for pretty print tables of structs and enums. &lt;a href="https://github.com/zhiburt/tabled/actions"&gt;&lt;img src="https://github.com/zhiburt/tabled/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Human-centered design 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-cli/human-panic"&gt;rust-cli/human-panic&lt;/a&gt; [&lt;a href="https://crates.io/crates/human-panic"&gt;human-panic&lt;/a&gt;] - panic messages for humans&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Line editor 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kkawakam/rustyline"&gt;kkawakam/rustyline&lt;/a&gt; [&lt;a href="https://crates.io/crates/rustyline"&gt;rustyline&lt;/a&gt;] - readline implementation&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/MovingtoMars/liner"&gt;MovingtoMars/liner&lt;/a&gt; [&lt;a href="https://crates.io/crates/liner"&gt;liner&lt;/a&gt;] - A library offering readline-like functionality&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/murarth/linefeed"&gt;murarth/linefeed&lt;/a&gt; [&lt;a href="https://crates.io/crates/linefeed"&gt;linefeed&lt;/a&gt;] - Configurable, extensible, interactive line reader&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/srijs/rust-copperline"&gt;srijs/rust-copperline&lt;/a&gt; [&lt;a href="https://crates.io/crates/copperline"&gt;copperline&lt;/a&gt;] - command line editing library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Other 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mgrachev/update-informer"&gt;mgrachev/update-informer&lt;/a&gt; [&lt;a href="https://crates.io/crates/update-informer"&gt;update-informer&lt;/a&gt;] - Update informer for CLI applications. It checks for a new version on Crates.io and GitHub &lt;a href="https://github.com/mgrachev/update-informer/actions"&gt;&lt;img src="https://github.com/mgrachev/update-informer/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Pipeline 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hniksic/rust-subprocess"&gt;hniksic/rust-subprocess&lt;/a&gt; [&lt;a href="https://crates.io/crates/subprocess"&gt;subprocess&lt;/a&gt;] - facilities for interaction with external pipelines&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/imp/pager-rs"&gt;imp/pager-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/pager"&gt;pager&lt;/a&gt;] - pipe your output through an external pager&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/oconnor663/duct.rs"&gt;oconnor663/duct.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/duct"&gt;duct&lt;/a&gt;] - A builder for subprocess pipelines and IO redirection&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-cli/rexpect"&gt;rust-cli/rexpect&lt;/a&gt; [&lt;a href="https://crates.io/crates/rexpect"&gt;rexpect&lt;/a&gt;] - automate interactive applications such as ssh, ftp, passwd, etc &lt;a href="https://github.com/rust-cli/rexpect/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/rust-cli/rexpect/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zhiburt/expectrl"&gt;zhiburt/expectrl&lt;/a&gt; [&lt;a href="https://crates.io/crates/expectrl"&gt;expectrl&lt;/a&gt;] - A library for controlling interactive programs in a pseudo-terminal &lt;a href="https://github.com/zhiburt/expectrl/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zhiburt/expectrl/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Progress 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/a8m/pb"&gt;a8m/pb&lt;/a&gt; [&lt;a href="https://crates.io/crates/pbr"&gt;pbr&lt;/a&gt;] - console progress bar&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/clitic/kdam"&gt;clitic/kdam&lt;/a&gt; [&lt;a href="https://crates.io/crates/kdam"&gt;kdam&lt;/a&gt;] - A console progress bar library inspired by tqdm &amp;amp; rich.progress &lt;a href="https://github.com/clitic/kdam/actions/workflows/tests.yml"&gt;&lt;img src="https://github.com/clitic/kdam/actions/workflows/tests.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/console-rs/indicatif"&gt;console-rs/indicatif&lt;/a&gt; [&lt;a href="https://crates.io/crates/indicatif"&gt;indicatif&lt;/a&gt;] - indicate progress to users&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/etienne-napoleone/spinach"&gt;etienne-napoleone/spinach&lt;/a&gt; [&lt;a href="https://crates.io/crates/spinach"&gt;spinach&lt;/a&gt;] - Practical spinner. &lt;a href="https://github.com/etienne-napoleone/spinach/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/etienne-napoleone/spinach/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/FGRibreau/spinners"&gt;FGRibreau/spinners&lt;/a&gt; [&lt;a href="https://crates.io/crates/spinners"&gt;spinners&lt;/a&gt;] - 60+ elegant terminal spinners&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Prompt 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hashmismatch/terminal_cli.rs"&gt;hashmismatch/terminal_cli.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/terminal_cli"&gt;terminal_cli&lt;/a&gt;] - build an interactive command prompt&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mikaelmello/inquire"&gt;mikaelmello/inquire&lt;/a&gt; [&lt;a href="https://crates.io/crates/inquire"&gt;inquire&lt;/a&gt;] - A library for building interactive prompts on terminals. &lt;a href="https://github.com/mikaelmello/inquire/actions"&gt;&lt;img src="https://github.com/mikaelmello/inquire/actions/workflows/build.yml/badge.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://starship.rs/"&gt;starship/starship&lt;/a&gt; [&lt;a href="https://crates.io/crates/starship"&gt;starship&lt;/a&gt;] - A minimal, blazing fast, and extremely customizable prompt for any shell &lt;a href="https://github.com/starship/starship/actions"&gt;&lt;img src="https://github.com/starship/starship/actions/workflows/workflow.yml/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ynqa/promkit"&gt;ynqa/promkit&lt;/a&gt; [&lt;a href="https://crates.io/crates/promkit"&gt;promkit&lt;/a&gt;] - A toolkit for building interactive command-line tools &lt;a href="https://github.com/ynqa/promkit/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ynqa/promkit/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Style 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/colored-rs/colored"&gt;colored&lt;/a&gt; [&lt;a href="https://crates.io/crates/colored"&gt;colored&lt;/a&gt;] - Coloring terminal so simple, you already know how to do it!&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/console-rs/dialoguer"&gt;console-rs/dialoguer&lt;/a&gt; [&lt;a href="https://crates.io/crates/dialoguer"&gt;dialoguer&lt;/a&gt;] - Library for command line prompts and similar things.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LukasKalbertodt/bunt"&gt;LukasKalbertodt/bunt&lt;/a&gt; [&lt;a href="https://crates.io/crates/bunt"&gt;bunt&lt;/a&gt;] - cross-platform terminal colors and styling with macros &lt;a href="https://github.com/LukasKalbertodt/bunt/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://github.com/LukasKalbertodt/bunt/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LukasKalbertodt/term-painter"&gt;LukasKalbertodt/term-painter&lt;/a&gt; [&lt;a href="https://crates.io/crates/term-painter"&gt;term-painter&lt;/a&gt;] - cross-platform styled terminal output&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ogham/rust-ansi-term"&gt;ogham/rust-ansi-term&lt;/a&gt; [&lt;a href="https://crates.io/crates/ansi_term"&gt;ansi_term&lt;/a&gt;] - control colours and formatting on ANSI terminals&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SergioBenitez/yansi"&gt;SergioBenitez/yansi&lt;/a&gt; [&lt;a href="https://crates.io/crates/yansi"&gt;yansi&lt;/a&gt;] - A dead simple ANSI terminal color painting library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;TUI 
  &lt;ul&gt; 
   &lt;li&gt;BearLibTerminal 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/nabijaczleweli/BearLibTerminal.rs"&gt;cfyzium/bearlibterminal&lt;/a&gt; [&lt;a href="https://crates.io/crates/bear-lib-terminal"&gt;bear-lib-terminal&lt;/a&gt;] - &lt;a href="https://github.com/tommyettinger/BearLibTerminal"&gt;BearLibTerminal&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ccbrown/iocraft"&gt;ccbrown/iocraft&lt;/a&gt; [&lt;a href="https://crates.io/crates/iocraft"&gt;iocraft&lt;/a&gt;] - A crate for beautiful, artisanally crafted CLIs, TUIs, and text-based IO. &lt;a href="https://github.com/ccbrown/iocraft/actions"&gt;&lt;img src="https://github.com/ccbrown/iocraft/actions/workflows/commit.yaml/badge.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/iocraft/"&gt;&lt;img src="https://img.shields.io/docsrs/iocraft" alt="docs.rs" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gyscos/Cursive"&gt;gyscos/Cursive&lt;/a&gt; [&lt;a href="https://crates.io/crates/cursive"&gt;cursive&lt;/a&gt;] - build rich TUI applications&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ivanceras/titik"&gt;ivanceras/titik&lt;/a&gt; - a crossplatform TUI widget library with the goal of providing interactive widgets&lt;/li&gt; 
   &lt;li&gt;ncurses 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/ihalila/pancurses"&gt;ihalila/pancurses&lt;/a&gt; [&lt;a href="https://crates.io/crates/pancurses"&gt;pancurses&lt;/a&gt;] - curses library, supports linux and windows&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/jeaye/ncurses-rs"&gt;jeaye/ncurses-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/ncurses"&gt;ncurses&lt;/a&gt;] - &lt;a href="https://www.gnu.org/software/ncurses/"&gt;ncurses&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ogham/rust-term-grid"&gt;ogham/rust-term-grid&lt;/a&gt; [&lt;a href="https://crates.io/crates/term_grid"&gt;term_grid&lt;/a&gt;] - Library for putting things in a grid&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ratatui/ratatui"&gt;ratatui-org/ratatui&lt;/a&gt; [&lt;a href="https://crates.io/crates/ratatui"&gt;ratatui&lt;/a&gt;] - Library that's all about cooking up terminal user interfaces (TUIs)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/redox-os/termion"&gt;redox-os/termion&lt;/a&gt; [&lt;a href="https://crates.io/crates/termion"&gt;termion&lt;/a&gt;] - bindless library for controlling terminals/TTY&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/ruterm"&gt;ruterm&lt;/a&gt; - tiny &amp;amp; simple library for working with TTY&lt;/li&gt; 
   &lt;li&gt;Termbox 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/gchp/rustbox"&gt;gchp/rustbox&lt;/a&gt; [&lt;a href="https://crates.io/crates/rustbox"&gt;rustbox&lt;/a&gt;] - bindings to &lt;a href="https://github.com/nsf/termbox"&gt;Termbox&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/crossterm-rs/crossterm"&gt;TimonPost/crossterm&lt;/a&gt; [&lt;a href="https://crates.io/crates/crossterm"&gt;crossterm&lt;/a&gt;] - crossplatform terminal library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compression&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://7-zip.org/7z.html"&gt;7z&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;[&lt;a href="https://crates.io/crates/sevenz-rust"&gt;sevenz-rust&lt;/a&gt;] - A 7z decompressor/compressor written in pure rust.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://opensource.googleblog.com/2015/09/introducing-brotli-new-compression.html"&gt;Brotli&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dropbox/rust-brotli"&gt;dropbox/rust-brotli&lt;/a&gt; - Brotli decompressor that optionally avoids the stdlib&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ende76/brotli-rs"&gt;ende76/brotli-rs&lt;/a&gt; - implementation of Brotli compression&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;bzip2 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/trifectatechfoundation/bzip2-rs"&gt;trifectatechfoundation/bzip2-rs&lt;/a&gt; - &lt;a href="https://www.sourceware.org/bzip2/"&gt;libbz2&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;gzip 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zopfli-rs/zopfli"&gt;zopfli&lt;/a&gt; [&lt;a href="https://crates.io/crates/zopfli"&gt;zopfli&lt;/a&gt;] - implementation of the Zopfli compression algorithm for higher quality deflate or zlib compression&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;gzp 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sstadick/gzp/"&gt;sstadick/gzp&lt;/a&gt; - multi-threaded encoding and decoding of deflate formats and snappy&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;miniz 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/flate2-rs"&gt;rust-lang/flate2-rs&lt;/a&gt; - &lt;a href="https://code.google.com/archive/p/miniz"&gt;miniz&lt;/a&gt; bindings &lt;a href="https://github.com/rust-lang/flate2-rs/actions"&gt;&lt;img src="https://github.com/rust-lang/flate2-rs/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/roquess/paxit"&gt;paxit&lt;/a&gt; [&lt;a href="https://crates.io/crates/paxit"&gt;paxit&lt;/a&gt;] - Flexible library for compressing and decompressing files using various algorithms (zip, tar, gzip, xz, zst, etc.) with modular design for easy extension&lt;/li&gt; 
 &lt;li&gt;tar 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alexcrichton/tar-rs"&gt;alexcrichton/tar-rs&lt;/a&gt; - tar archive reading/writing&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;zip 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zip-rs/zip2"&gt;zip-rs/zip2&lt;/a&gt; [&lt;a href="https://crates.io/crates/zip"&gt;zip&lt;/a&gt;] - read and write ZIP archives&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;zstd 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gyscos/zstd-rs"&gt;gyscos/zstd-rs&lt;/a&gt; - rust binding for the zstd compression library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Computation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/argmin-rs/argmin"&gt;argmin-rs/argmin&lt;/a&gt; [&lt;a href="https://crates.io/crates/argmin"&gt;argmin&lt;/a&gt;] - Optimization library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms"&gt;BLAS&lt;/a&gt; [&lt;a href="https://crates.io/keywords/blas"&gt;blas&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mikkyang/rust-blas"&gt;mikkyang/rust-blas&lt;/a&gt; - BLAS bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/calebwin/emu"&gt;calebwin/emu&lt;/a&gt; - A language for GPGPU numerical computing&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dimforge/nalgebra"&gt;dimforge/nalgebra&lt;/a&gt; - low-dimensional linear algebra library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sarah-quinones/faer-rs"&gt;faer-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/faer"&gt;faer&lt;/a&gt;] - Linear algebra foundation for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neogenie/fastnum"&gt;fastnum&lt;/a&gt; &lt;a href="https://crates.io/crates/fastnum"&gt;fastnum&lt;/a&gt; - Fast exact precision decimal numbers implemented in pure Rust. Suitable for financial, crypto and any other fixed-precision calculations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://www.gnu.org/software/gsl/"&gt;GSL&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GuillaumeGomez/rust-GSL"&gt;GuillaumeGomez/rust-GSL&lt;/a&gt; - GSL bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/LAPACK"&gt;LAPACK&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/blas-lapack-rs/lapack"&gt;stainless-steel/lapack&lt;/a&gt; - LAPACK bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Parallel 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/arrayfire/arrayfire-rust"&gt;arrayfire/arrayfire-rust&lt;/a&gt; - &lt;a href="https://github.com/arrayfire"&gt;Arrayfire&lt;/a&gt; bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/autumnai/collenchyma"&gt;autumnai/collenchyma&lt;/a&gt; - An extensible, pluggable, backend-agnostic framework for parallel, high-performance computations on CUDA, OpenCL and common host CPU.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/luqmana/rust-opencl"&gt;luqmana/rust-opencl&lt;/a&gt; - &lt;a href="https://www.khronos.org/opencl/"&gt;OpenCL&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Science 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Axect/Peroxide"&gt;Axect/Peroxide&lt;/a&gt; - Rust numeric library containing linear algebra, numerical analysis, statistics and machine learning tools in pure rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cpmech/russell"&gt;cpmech/russell&lt;/a&gt; - Rust Scientific Library for numerical mathematics, ordinary differential equations, special math functions, high-performance (sparse) linear algebra&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Ryan-D-Gast/differential-equations"&gt;Ryan-D-Gast/differential-equations&lt;/a&gt; - A high-performance library for numerically solving differential equations&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Statrs 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/statrs-dev/statrs"&gt;statrs-dev/statrs&lt;/a&gt; - Robust statistical computation library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Concurrency&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/crossbeam-rs/crossbeam"&gt;crossbeam-rs/crossbeam&lt;/a&gt; - Support for parallelism and low-level concurrency&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orium/archery"&gt;orium/archery&lt;/a&gt; [&lt;a href="https://crates.io/crates/archery"&gt;archery&lt;/a&gt;] - Library to abstract from &lt;code&gt;Rc&lt;/code&gt;/&lt;code&gt;Arc&lt;/code&gt; pointer types. &lt;a href="https://github.com/orium/archery/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/orium/archery/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/orx-parallel"&gt;orx-parallel&lt;/a&gt; - High performance, configurable and expressive parallel computation library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rayon-rs/rayon"&gt;Rayon&lt;/a&gt; - A data parallelism library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustcc/coroutine-rs"&gt;rustcc/coroutine-rs&lt;/a&gt; - Coroutine Library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zonyitoo/coio-rs"&gt;zonyitoo/coio-rs&lt;/a&gt; - Coroutine I/O&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andoriyu/uclicious"&gt;andoriyu/uclicious&lt;/a&gt; [&lt;a href="https://crates.io/crates/uclicious"&gt;uclicious&lt;/a&gt;] - &lt;a href="https://github.com/vstakhov/libucl"&gt;libUCL&lt;/a&gt; based feature-rich configuration library. &lt;a href="https://app.circleci.com/pipelines/github/vstakhov/libucl"&gt;&lt;img src="https://circleci.com/gh/vstakhov/libucl.svg?style=svg" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Kixunil/configure_me"&gt;Kixunil/configure_me&lt;/a&gt; [&lt;a href="https://crates.io/crates/configure_me"&gt;configure_me&lt;/a&gt;] - library for processing application configuration easily&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-cli/config-rs"&gt;rust-cli/config-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/config"&gt;config&lt;/a&gt;] - Layered configuration system (with strong support for 12-factor applications).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SergioBenitez/Figment"&gt;SergioBenitez/Figment&lt;/a&gt; [&lt;a href="https://crates.io/crates/figment"&gt;figment&lt;/a&gt;] - A configuration library so con-free, it's unreal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/softprops/envy"&gt;softprops/envy&lt;/a&gt; - deserialize env vars into typesafe structs &lt;a href="https://github.com/softprops/envy/actions/workflows/main.yml"&gt;&lt;img src="https://github.com/softprops/envy/actions/workflows/main.yml/badge.svg?sanitize=true" alt="Main" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Cryptography&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/crypto"&gt;crypto&lt;/a&gt;, &lt;a href="https://crates.io/keywords/cryptography"&gt;cryptography&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arkworks-rs/circom-compat"&gt;arkworks-rs/circom-compat&lt;/a&gt; - Arkworks bindings to Circom's R1CS, for Groth16 Proof and Witness generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/briansmith/ring"&gt;briansmith/ring&lt;/a&gt; - Safe, fast, small crypto using Rust and BoringSSL's cryptography primitives.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/briansmith/webpki"&gt;briansmith/webpki&lt;/a&gt; - Web PKI TLS X.509 certificate validation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/conradkleinespel/rooster"&gt;conradkleinespel/rooster&lt;/a&gt; [&lt;a href="https://crates.io/crates/rooster"&gt;rooster&lt;/a&gt;] - Simple password manager to use in your terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cossacklabs/themis"&gt;cossacklabs/themis&lt;/a&gt; [&lt;a href="https://crates.io/crates/themis"&gt;themis&lt;/a&gt;] - a high-level cryptographic library for solving typical data security tasks, best fit for multi-platform apps. &lt;a href="https://app.circleci.com/pipelines/github/cossacklabs/themis"&gt;&lt;img src="https://circleci.com/gh/cossacklabs/themis/tree/master.svg?style=shield" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DaGenix/rust-crypto"&gt;DaGenix/rust-crypto&lt;/a&gt; - cryptographic algorithms&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalek-cryptography/curve25519-dalek"&gt;dalek-cryptography/curve25519-dalek&lt;/a&gt; - Curve25519 operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalek-cryptography/ed25519-dalek"&gt;dalek-cryptography/ed25519-dalek&lt;/a&gt; - Ed25519 digital signatures&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalek-cryptography/x25519-dalek"&gt;dalek-cryptography/x25519-dalek&lt;/a&gt; - X25519 key exchange&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/debris/tiny-keccak"&gt;debris/tiny-keccak&lt;/a&gt; - Keccak family (SHA3)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dusk-network/bls12_381"&gt;dusk-network/bls12-381&lt;/a&gt; - A Rust-native BLS12-381 with enhancements for zk performance: optimized multi-scalar multiplication, custom hashing, and serde support—ideal for privacy-focused protocols and zero-knowledge applications. &lt;img src="https://github.com/dusk-network/bls12_381/workflows/Continuous%20integration/badge.svg?sanitize=true" alt="Build Status" /&gt; [&lt;a href="https://crates.io/crates/dusk-bls12_381"&gt;dusk-bls12_381&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dusk-network/plonk/"&gt;dusk-network/plonk&lt;/a&gt; - A high-performance, Rust-native implementation of the PLONK zk-SNARK over BLS12-381, optimized with custom gates and KZG10 polynomial commitment for efficient zero-knowledge proofs. &lt;img src="https://github.com/dusk-network/plonk/workflows/Continuous%20integration/badge.svg?sanitize=true" alt="Build Status" /&gt; [&lt;a href="https://crates.io/crates/dusk-plonk"&gt;PLONK&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dusk-network/Poseidon252"&gt;dusk-network/poseidon252&lt;/a&gt; - A Rust-native Poseidon hash over BLS12-381, Poseidon252 is built for zk-SNARK efficiency, ideal for privacy-focused protocols and zero-knowledge applications. &lt;img src="https://github.com/dusk-network/Poseidon252/workflows/Continuous%20integration/badge.svg?sanitize=true" alt="Build Status" /&gt; [&lt;a href="https://crates.io/crates/dusk-poseidon"&gt;Poseidon&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/exonum/exonum"&gt;exonum/exonum&lt;/a&gt; [&lt;a href="https://crates.io/crates/exonum"&gt;exonum&lt;/a&gt;] - extensible framework for blockchain projects&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebook/opaque-ke"&gt;facebook/opaque-ke&lt;/a&gt; - Implementation of the recent &lt;a href="https://datatracker.ietf.org/doc/draft-krawczyk-cfrg-opaque/"&gt;OPAQUE&lt;/a&gt; password-authenticated key exchange. &lt;a href="https://github.com/facebook/opaque-ke"&gt;&lt;img src="https://github.com/facebook/opaque-ke/workflows/Rust%20CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iddm/randomorg"&gt;iddm/randomorg&lt;/a&gt; - A random.org client library. &lt;a href="https://crates.io/crates/randomorg"&gt;&lt;img src="https://img.shields.io/crates/v/randomorg.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/klutzy/suruga"&gt;klutzy/suruga&lt;/a&gt; - Implementation of &lt;a href="https://datatracker.ietf.org/doc/html/rfc5246"&gt;TLS 1.2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kn0sys/ecc-rs"&gt;kn0sys/ecc-rs&lt;/a&gt; - Intuitive library for elliptic curve cryptography tutorials &lt;a href="https://crates.io/crates/kn0syseccrs"&gt;&lt;img src="https://img.shields.io/crates/v/kn0syseccrs" alt="Crates.io Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kornelski/rust-security-framework"&gt;kornelski/rust-security-framework&lt;/a&gt; - Bindings for Security Framework (OSX native)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/libOctavo/octavo"&gt;libOctavo/octavo&lt;/a&gt; - Modular hash and crypto library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orion-rs/orion"&gt;orion-rs/orion&lt;/a&gt; - This library aims to provide easy and usable crypto. 'Usable' meaning exposing high-level API's that are easy to use and hard to misuse. &lt;a href="https://github.com/orion-rs/orion/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/orion-rs/orion/actions/workflows/test.yml/badge.svg?branch=master" alt="Tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/racum/rust-djangohashers"&gt;racum/rust-djangohashers&lt;/a&gt; [&lt;a href="https://crates.io/crates/djangohashers"&gt;djangohashers&lt;/a&gt;] - Port of the password primitives used in the Django Project. It doesn't require Django, only hashes and validates passwords according to its style.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RustCrypto/hashes"&gt;RustCrypto/hashes&lt;/a&gt; - Collection of cryptographic hash functions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustls/rustls"&gt;rustls/rustls&lt;/a&gt; - Implementation of TLS&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sfackler/rust-native-tls"&gt;sfackler/rust-native-tls&lt;/a&gt; - Bindings for native TLS libraries&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sfackler/rust-openssl"&gt;sfackler/rust-openssl&lt;/a&gt; - &lt;a href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt; bindings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/abcrypt"&gt;sorairolake/abcrypt&lt;/a&gt; [&lt;a href="https://crates.io/crates/abcrypt"&gt;abcrypt&lt;/a&gt;] - A simple, modern and secure file encryption library. &lt;a href="https://github.com/sorairolake/abcrypt/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/abcrypt/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/scryptenc-rs"&gt;sorairolake/scryptenc-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/scryptenc"&gt;scryptenc&lt;/a&gt;] - An implementation of the scrypt encrypted data format. &lt;a href="https://github.com/sorairolake/scryptenc-rs/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/scryptenc-rs/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/w3f/schnorrkel"&gt;w3f/schnorrkel&lt;/a&gt; - Schnorr VRFs and signatures on the Ristretto group&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Data processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/amv-dev/yata"&gt;amv-dev/yata&lt;/a&gt; - high performance technical analysis library &lt;a href="https://github.com/amv-dev/yata/actions?query=workflow%3ARust"&gt;&lt;img src="https://img.shields.io/github/workflow/status/amv-dev/yata/Rust?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-ndarray/ndarray"&gt;bluss/ndarray&lt;/a&gt; - N-dimensional array with array views, multidimensional slicing, and efficient operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cocoindex-io/cocoindex"&gt;cocoindex&lt;/a&gt; - ETL framework to build fresh index&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion"&gt;datafusion&lt;/a&gt; - DataFusion is a very fast, extensible query engine for building high-quality data-centric systems in Rust, using the Apache Arrow in-memory format.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GoPlasmatic/datalogic-rs"&gt;GoPlasmatic/datalogic-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/datalogic-rs"&gt;datalogic-rs&lt;/a&gt;] - High-performance, type-safe JSONLogic evaluation engine in Rust, ideal for business rules and dynamic filtering.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kernelmachine/utah"&gt;kernelmachine/utah&lt;/a&gt; - Dataframe structure and operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradedb/paradedb/tree/dev/pg_analytics"&gt;pg_analytics&lt;/a&gt; - PostgreSQL extension that accelerates analytical query processing inside Postgres to a performance level comparable to dedicated OLAP databases.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradedb/paradedb/tree/dev/pg_lakehouse"&gt;pg_lakehouse&lt;/a&gt; - PostgreSQL extension that transforms Postgres into an analytical query engine over object stores like AWS S3/GCS and table formats like Delta Lake/Iceberg.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pola-rs/polars"&gt;pola-rs/polars&lt;/a&gt; - Fast feature complete DataFrame library &lt;a href="https://github.com/pola-rs/polars/actions"&gt;&lt;img src="https://github.com/pola-rs/polars/actions/workflows/lint-rust.yml/badge.svg?sanitize=true" alt="Lint Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/weld-project/weld"&gt;weld-project/weld&lt;/a&gt; - High-performance runtime for data analytics applications&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Data streaming&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arkflow-rs/arkflow"&gt;arkflow-rs/arkflow&lt;/a&gt; - High-performance Rust stream processing engine &lt;a href="https://github.com/arkflow-rs/arkflow/actions"&gt;&lt;img src="https://github.com/arkflow-rs/arkflow/actions/workflows/rust.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ArroyoSystems/arroyo"&gt;ArroyoSystems/arroyo&lt;/a&gt; - High-performance real-time analytics in Rust and SQL &lt;a href="https://github.com/ArroyoSystems/arroyo/actions"&gt;&lt;img src="https://github.com/ArroyoSystems/arroyo/actions/workflows/ci.yml/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/iggy"&gt;iggy&lt;/a&gt; [&lt;a href="https://crates.io/crates/iggy"&gt;iggy&lt;/a&gt;] - Persistent message streaming platform, supporting QUIC, TCP and HTTP transport protocols &lt;a href="https://github.com/apache/iggy/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/apache/iggy/actions/workflows/test.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/infinyon/fluvio"&gt;infinyon/fluvio&lt;/a&gt; - Programmable data streaming platform &lt;a href="https://github.com/infinyon/fluvio/actions"&gt;&lt;img src="https://github.com/infinyon/fluvio/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/graphform/swim-rust"&gt;swim-rust&lt;/a&gt; [&lt;a href="https://crates.io/crates/swimos"&gt;swim-rust&lt;/a&gt;] - Self-contained distributed software platform for building stateful, massively real-time streaming applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Data structures&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ashvardanian/SimSIMD"&gt;ashvardanian/simsimd&lt;/a&gt; - SIMD-accelerated vector distances and similarity functions for x86 AVX2 &amp;amp; AVX-512, and Arm NEON &lt;a href="https://crates.io/crates/simsimd"&gt;&lt;img src="https://img.shields.io/crates/v/simsimd.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/becheran/grid"&gt;becheran/grid&lt;/a&gt; [&lt;a href="https://crates.io/crates/grid"&gt;grid&lt;/a&gt;] - Provide a two dimensional data structure that is easy to use and fast. &lt;a href="https://github.com/becheran/grid/actions"&gt;&lt;img src="https://github.com/becheran/grid/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/billyevans/tst"&gt;billyevans/tst&lt;/a&gt; [&lt;a href="https://crates.io/crates/tst"&gt;tst&lt;/a&gt;] - Ternary search tree collection&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/contain-rs"&gt;contain-rs&lt;/a&gt; - Extension of Rust's std::collections&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danielpclark/array_tool"&gt;danielpclark/array_tool&lt;/a&gt; - Array helpers. Some of the most common methods you would use on Arrays made available on Vectors. Polymorphic implementations for handling most of your use cases.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fizyk20/generic-array"&gt;fizyk20/generic-array&lt;/a&gt; - a hack to allow for arrays sized by typenums&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/garro95/priority-queue"&gt;garro95/priority-queue&lt;/a&gt;[&lt;a href="https://crates.io/crates/priority-queue"&gt;priority-queue&lt;/a&gt;] - A priority queue that implements priority changes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/greyblake/nutype"&gt;greyblake/nutype&lt;/a&gt; [&lt;a href="https://crates.io/crates/nutype"&gt;nutype&lt;/a&gt;] - define newtype structures with validation constraints. &lt;a href="https://github.com/greyblake/nutype/actions"&gt;&lt;img src="https://github.com/greyblake/nutype/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mrhooray/kdtree-rs"&gt;mrhooray/kdtree-rs&lt;/a&gt; - K-dimensional tree for fast geospatial indexing and nearest neighbors lookup&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orium/rpds"&gt;orium/rpds&lt;/a&gt; [&lt;a href="https://crates.io/crates/rpds"&gt;rpds&lt;/a&gt;] - Persistent data structures. &lt;a href="https://github.com/orium/rpds/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/orium/rpds/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RoaringBitmap/roaring-rs"&gt;RoaringBitmap/roaring-rs&lt;/a&gt; - Roaring Bitmaps&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-itertools/itertools"&gt;rust-itertools/itertools&lt;/a&gt; - Extra iterator adaptors, functions and macros&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tnballo/scapegoat"&gt;tnballo/scapegoat&lt;/a&gt; [&lt;a href="https://crates.io/crates/scapegoat"&gt;scapegoat&lt;/a&gt;] - Safe, fallible, stack-only alternative to &lt;code&gt;BTreeSet&lt;/code&gt; and &lt;code&gt;BTreeMap&lt;/code&gt;. &lt;a href="https://github.com/tnballo/scapegoat/actions"&gt;&lt;img src="https://github.com/tnballo/scapegoat/workflows/test/badge.svg?branch=master" alt="GitHub Actions" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://codeberg.org/xfix/enum-map"&gt;xfix/enum-map&lt;/a&gt; [&lt;a href="https://crates.io/crates/enum-map"&gt;enum-map&lt;/a&gt;] - An optimized map implementation for enums using an array to store values.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yamafaktory/hypergraph"&gt;yamafaktory/hypergraph&lt;/a&gt; [&lt;a href="https://crates.io/crates/hypergraph"&gt;hypergraph&lt;/a&gt;] - Hypergraph is a data structure library to generate directed hypergraphs. &lt;a href="https://github.com/yamafaktory/hypergraph/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/yamafaktory/hypergraph/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Data visualization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blitzar-tech/egui_graphs"&gt;blitzar-tech/egui_graphs&lt;/a&gt; [&lt;a href="https://crates.io/crates/egui_graphs"&gt;egui_graphs&lt;/a&gt;] - Interactive graph visualization widget powered by egui and petgraph. &lt;a href="https://crates.io/crates/egui_graphs"&gt;&lt;img src="https://img.shields.io/crates/v/egui_graphs" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/egui_graphs"&gt;&lt;img src="https://img.shields.io/docsrs/egui_graphs" alt="docs.rs" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/djduque/pgfplots"&gt;djduque/pgfplots&lt;/a&gt; [&lt;a href="https://crates.io/crates/pgfplots"&gt;pgfplots&lt;/a&gt;] - Library to generate publication-quality figures. &lt;a href="https://github.com/DJDuque/pgfplots/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/DJDuque/pgfplots/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mazznoer/colorgrad-rs"&gt;mazznoer/colorgrad-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/colorgrad"&gt;colorgrad&lt;/a&gt;] - Color scales library for data visualization, charts, games, maps, generative art and others.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/milliams/plotlib"&gt;milliams/plotlib&lt;/a&gt; - Data plotting library for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/plotly/plotly.rs"&gt;plotly&lt;/a&gt; - Plotly for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cpmech/plotpy"&gt;plotpy&lt;/a&gt; [&lt;a href="https://crates.io/crates/plotpy"&gt;plotpy&lt;/a&gt;] - Rust plotting library using Python (Matplotlib)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/plotters-rs/plotters"&gt;plotters&lt;/a&gt; - &lt;a href="https://github.com/plotters-rs/plotters/actions"&gt;&lt;img src="https://github.com/plotters-rs/plotters/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rerun-io/rerun"&gt;rerun&lt;/a&gt; - [&lt;a href="https://crates.io/crates/rerun"&gt;rerun&lt;/a&gt;] - An SDK for logging computer vision and robotics data (tensors, point clouds, etc) paired with a visualizer for exploring that data over time.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saresend/Gust"&gt;saresend/gust&lt;/a&gt; - A small charting/visualization tool and partial vega implementation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/database"&gt;database&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;NoSQL [&lt;a href="https://crates.io/keywords/nosql"&gt;nosql&lt;/a&gt;]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://arangodb.com"&gt;ArangoDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://gitlab.com/qonfucius/aragog"&gt;Aragog&lt;/a&gt; [&lt;a href="https://crates.io/crates/aragog"&gt;aragog&lt;/a&gt;] - A Lightweight ArangoDB Object document, relational and graph mapper &lt;a href="https://gitlab.com/qonfucius/aragog/-/commits/master"&gt;&lt;img src="https://gitlab.com/qonfucius/aragog/badges/master/pipeline.svg?sanitize=true" alt="pipeline status" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/fMeow/arangors"&gt;Arangors&lt;/a&gt; [&lt;a href="https://crates.io/crates/arangors"&gt;arangors&lt;/a&gt;] - An ArangoDB driver&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://cassandra.apache.org/_/index.html"&gt;Cassandra&lt;/a&gt; [&lt;a href="https://crates.io/keywords/cassandra"&gt;cassandra&lt;/a&gt;, &lt;a href="https://crates.io/keywords/cql"&gt;cql&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/AlexPikalov/cdrs"&gt;AlexPikalov/cdrs&lt;/a&gt; [&lt;a href="https://crates.io/crates/cdrs"&gt;cdrs&lt;/a&gt;] - native client&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/cassandra-rs/cassandra-rs"&gt;cassandra-rs&lt;/a&gt; - bindings to the DataStax C/C++&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/krojew/cdrs-tokio"&gt;krojew/cdrs-tokio&lt;/a&gt; - High-level async Cassandra client written in 100% Rust. &lt;a href="https://github.com/krojew/cdrs-tokio/actions"&gt;&lt;img src="https://github.com/krojew/cdrs-tokio/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;[&lt;a href="https://crates.io/crates/cassandra-protocol"&gt;cassandra-protocol&lt;/a&gt;] - Cassandra protocol implementation.&lt;/li&gt; 
       &lt;li&gt;[&lt;a href="https://crates.io/crates/cdrs-tokio"&gt;cdrs-tokio&lt;/a&gt;] - production-ready async Apache Cassandra driverclient&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;CouchDB [&lt;a href="https://crates.io/keywords/couchdb"&gt;couchdb&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/chill-rs/chill"&gt;chill-rs/chill&lt;/a&gt; [&lt;a href="https://crates.io/crates/chill"&gt;couchdb&lt;/a&gt;] - Client for the CouchDB REST API&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt; [&lt;a href="https://crates.io/keywords/dynamodb"&gt;dynamodb&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/softprops/dynomite"&gt;softprops/dynomite&lt;/a&gt; - A library for strongly-typed and convenient interaction with &lt;code&gt;rusoto_dynamodb&lt;/code&gt; &lt;a href="https://github.com/softprops/dynomite/actions"&gt;&lt;img src="https://github.com/softprops/dynomite/workflows/Main/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Elasticsearch [&lt;a href="https://crates.io/keywords/elasticsearch"&gt;elasticsearch&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/benashford/rs-es"&gt;benashford/rs-es&lt;/a&gt; [&lt;a href="https://crates.io/crates/rs-es"&gt;rs-es&lt;/a&gt;] - Client for the &lt;a href="https://www.elastic.co/"&gt;Elastic&lt;/a&gt; REST API&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/elastic-rs/elastic"&gt;elastic-rs/elastic&lt;/a&gt; [&lt;a href="https://crates.io/crates/elastic"&gt;elastic&lt;/a&gt;] - elastic is an efficient, modular API client for Elasticsearch written in Rust &lt;a href="https://ci.appveyor.com/project/KodrAus/elastic"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/csa78tcumdpnbur2?svg=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;etcd 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/jimmycuadra/rust-etcd"&gt;jimmycuadra/rust-etcd&lt;/a&gt; [&lt;a href="https://crates.io/crates/etcd"&gt;etcd&lt;/a&gt;] - A client library for CoreOS's etcd.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.influxdata.com/"&gt;InfluxDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/driftluo/InfluxDBClient-rs"&gt;driftluo/InfluxDBClient-rs&lt;/a&gt; - Synchronization interface&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;LevelDB 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/skade/leveldb"&gt;skade/leveldb&lt;/a&gt; - &lt;a href="https://github.com/google/leveldb"&gt;LevelDB&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;LMDB [&lt;a href="https://crates.io/keywords/lmdb"&gt;lmdb&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/meilisearch/heed"&gt;meilisearch/heed&lt;/a&gt; [&lt;a href="https://crates.io/crates/heed"&gt;heed&lt;/a&gt;] - Another &lt;a href="https://www.symas.com/symas-embedded-database-lmdb"&gt;LMDB&lt;/a&gt; binding&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/vhbit/lmdb-rs"&gt;vhbit/lmdb-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/lmdb-rs"&gt;lmdb-rs&lt;/a&gt;] - &lt;a href="https://www.symas.com/symas-embedded-database-lmdb"&gt;LMDB&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;MongoDB [&lt;a href="https://crates.io/keywords/mongodb"&gt;mongodb&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/mongodb/mongo-rust-driver"&gt;mongodb/mongo-rust-driver&lt;/a&gt; [&lt;a href="https://crates.io/crates/mongodb"&gt;mongodb&lt;/a&gt;] - &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://pythonhosted.org/pickleDB/"&gt;PickleDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/seladb/pickledb-rs"&gt;seladb/pickledb-rs&lt;/a&gt; - a lightweight and simple key-value store, heavily inspired by Python's PickleDB.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.polodb.org/"&gt;PoloDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/PoloDB/PoloDB"&gt;PoloDB&lt;/a&gt; - An embedded JSON-based database has API similar to MongoDB. &lt;img src="https://img.shields.io/github/actions/workflow/status/PoloDB/PoloDB/rust.yml" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.redb.org/"&gt;Redb&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/cberner/redb"&gt;Redb&lt;/a&gt; - An embedded key-value database. It provides a similar interface to other embedded key-value stores such as rocksdb and lmdb. &lt;img src="https://github.com/cberner/redb/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Redis [&lt;a href="https://crates.io/keywords/redis"&gt;redis&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/aembke/fred.rs"&gt;aembke/fred&lt;/a&gt; [&lt;a href="https://crates.io/crates/fred"&gt;fred&lt;/a&gt;] - A high level async &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; client for Rust with Tokio. &lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/%5Bhttps://circleci.com/gh/aembke/fred.rs/tree/main%5D(https://app.circleci.com/pipelines/github/aembke/fred.rs?branch=main)"&gt;&lt;img src="https://circleci.com/gh/aembke/fred.rs/tree/main.svg?style=svg" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/redis-rs/redis-rs"&gt;redis-rs&lt;/a&gt; - &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; library &lt;a href="https://github.com/redis-rs/redis-rs/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/redis-rs/redis-rs/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rocksdb.org/"&gt;RocksDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/rust-rocksdb/rust-rocksdb"&gt;rust-rocksdb/rust-rocksdb&lt;/a&gt; - RocksDB bindings &lt;a href="https://github.com/rust-rocksdb/rust-rocksdb/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/rust-rocksdb/rust-rocksdb/actions/workflows/rust.yml/badge.svg?branch=master" alt="RocksDB CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://surrealdb.com/"&gt;SurrealDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/surrealdb/surrealdb"&gt;surrealdb/surrealdb&lt;/a&gt; - SurrealDB embedded document-graph database&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/symisc/unqlite"&gt;UnQLite&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/zitsen/unqlite.rs"&gt;zitsen/unqlite.rs&lt;/a&gt; - UnQLite bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://zookeeper.apache.org/"&gt;ZooKeeper&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/bonifaido/rust-zookeeper"&gt;bonifaido/rust-zookeeper&lt;/a&gt; [&lt;a href="https://crates.io/crates/zookeeper"&gt;zookeeper&lt;/a&gt;] - A client library for Apache ZooKeeper.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/krojew/rust-zookeeper"&gt;krojew/rust-zookeeper&lt;/a&gt; [&lt;a href="https://crates.io/crates/zookeeper-async"&gt;zookeeper-async&lt;/a&gt;] - Async Zookeeper client, based on tokio. &lt;img src="https://github.com/krojew/rust-zookeeper/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OGM [&lt;a href="https://crates.io/keywords/ogm"&gt;ogm&lt;/a&gt;]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/qonfucius/aragog"&gt;Aragog&lt;/a&gt; [&lt;a href="https://crates.io/crates/aragog"&gt;aragog&lt;/a&gt;] - A Lightweight ArangoDB Object document, relational and graph mapper &lt;a href="https://gitlab.com/qonfucius/aragog/-/commits/master"&gt;&lt;img src="https://gitlab.com/qonfucius/aragog/badges/master/pipeline.svg?sanitize=true" alt="pipeline status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ORM [&lt;a href="https://crates.io/keywords/orm"&gt;orm&lt;/a&gt;]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/diesel-rs/diesel"&gt;diesel-rs/diesel&lt;/a&gt; - an ORM and Query builder&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ivanceras/rustorm"&gt;ivanceras/rustorm&lt;/a&gt; - an ORM&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/njord-rs/njord"&gt;njord&lt;/a&gt; - ⛵ A versatile, feature-rich Rust ORM &lt;a href="https://github.com/njord-rs/njord/actions/workflows/core.yml"&gt;&lt;img src="https://github.com/njord-rs/njord/actions/workflows/core.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/v/njord.svg?sanitize=true" alt="crates.io" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rbatis/rbatis"&gt;rbatis/rbatis&lt;/a&gt; - ORM Framework High Performance(JSON based)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SeaQL/sea-orm"&gt;SeaQL/sea-orm&lt;/a&gt; - 🐚 An async &amp;amp; dynamic ORM &lt;a href="https://crates.io/crates/sea-orm"&gt;&lt;img src="https://img.shields.io/crates/v/sea-orm.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/sea-orm"&gt;&lt;img src="https://img.shields.io/docsrs/sea-orm/latest" alt="docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SeaQL/seaography"&gt;SeaQL/seaography&lt;/a&gt; - 🧭 GraphQL framework for SeaORM &lt;a href="https://crates.io/crates/seaography"&gt;&lt;img src="https://img.shields.io/crates/v/seaography.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/seaography"&gt;&lt;img src="https://img.shields.io/docsrs/seaography/latest" alt="docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SeaQL/seaography/actions/workflows/tests.yaml"&gt;&lt;img src="https://github.com/SeaQL/seaography/actions/workflows/tests.yaml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/thegenius/taitan-orm"&gt;thegenius/taitan-orm&lt;/a&gt; - The State of Art ORM for Rust, Async &amp;amp; Compile Time Generation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/sfackler/r2d2"&gt;sfackler/r2d2&lt;/a&gt; - generic connection pool&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SQL [&lt;a href="https://crates.io/keywords/sql"&gt;sql&lt;/a&gt;]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Generic 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/launchbadge/sqlx"&gt;launchbadge/sqlx&lt;/a&gt; - async PostgreSQL/MySQL/SQLite connection pool with strong typing support &lt;a href="https://github.com/launchbadge/sqlx"&gt;&lt;img src="https://img.shields.io/github/workflow/status/launchbadge/sqlx/Rust/master?style=flat-square" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/SeaQL/sea-query"&gt;SeaQL/sea-query&lt;/a&gt; - 🔱 A dynamic SQL query builder for MySQL, Postgres and SQLite &lt;a href="https://crates.io/crates/sea-query"&gt;&lt;img src="https://img.shields.io/crates/v/sea-query.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/sea-query"&gt;&lt;img src="https://img.shields.io/docsrs/sea-query/latest" alt="docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SeaQL/sea-query/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/SeaQL/sea-query/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/SeaQL/sea-schema"&gt;SeaQL/sea-schema&lt;/a&gt; - 🌿 SQL schema definition and discovery &lt;a href="https://crates.io/crates/sea-schema"&gt;&lt;img src="https://img.shields.io/crates/v/sea-schema.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/sea-schema"&gt;&lt;img src="https://img.shields.io/docsrs/sea-schema/latest" alt="docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SeaQL/sea-schema/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/SeaQL/sea-schema/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Microsoft SQL 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/prisma/tiberius"&gt;prisma/tiberius&lt;/a&gt; - &lt;a href="https://github.com/prisma/tiberius/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/prisma/tiberius/actions/workflows/test.yml/badge.svg?branch=master" alt="Cargo tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;MySql [&lt;a href="https://crates.io/keywords/mysql"&gt;mysql&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/AgilData/mysql-proxy-rs"&gt;AgilData/mysql-proxy-rs&lt;/a&gt; - A MySQL Proxy &lt;a href="https://app.circleci.com/pipelines/github/AgilData/mysql-proxy-rs?branch=master"&gt;&lt;img src="https://circleci.com/gh/AgilData/mysql-proxy-rs/tree/master.svg?style=svg" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/blackbeam/mysql_async"&gt;blackbeam/mysql_async&lt;/a&gt; [&lt;a href="https://crates.io/crates/mysql_async"&gt;mysql_async&lt;/a&gt;] - asynchronous Mysql driver based on Tokio. &lt;a href="https://app.circleci.com/pipelines/github/blackbeam/mysql_async?branch=master"&gt;&lt;img src="https://circleci.com/gh/blackbeam/mysql_async/tree/master.svg?style=shield" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/blackbeam/rust-mysql-simple"&gt;blackbeam/rust-mysql-simple&lt;/a&gt; [&lt;a href="https://crates.io/crates/mysql"&gt;mysql&lt;/a&gt;] - A native MySql client&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Oracle 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/kubo/rust-oracle"&gt;kubo/rust-oracle&lt;/a&gt; [&lt;a href="https://crates.io/crates/oracle"&gt;oracle&lt;/a&gt;] - Oracle driver &lt;a href="https://github.com/kubo/rust-oracle/actions/workflows/run-tests.yml"&gt;&lt;img src="https://github.com/kubo/rust-oracle/actions/workflows/run-tests.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;PostgreSql [&lt;a href="https://crates.io/keywords/postgres"&gt;postgres&lt;/a&gt;, &lt;a href="https://crates.io/keywords/postgresql"&gt;postgresql&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx"&gt;c410-f3r/wtx&lt;/a&gt; - Fast implementation with a low set of external dependencies.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/sfackler/rust-postgres"&gt;sfackler/rust-postgres&lt;/a&gt; [&lt;a href="https://crates.io/crates/postgres"&gt;postgres&lt;/a&gt;] - A native &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; client&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Sqlite [&lt;a href="https://crates.io/keywords/sqlite"&gt;sqlite&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/rusqlite/rusqlite"&gt;rusqlite&lt;/a&gt; - &lt;a href="https://sqlite.org/index.html"&gt;Sqlite3&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://venndb.rs/"&gt;VennDB&lt;/a&gt; [&lt;a href="https://github.com/plabayo/venndb"&gt;venndb&lt;/a&gt;] - An append-only in-memory database in Rust for rows queried using bit (flag) columns.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Date and time&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/date"&gt;date&lt;/a&gt;, &lt;a href="https://crates.io/keywords/time"&gt;time&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arthurhenrique/rusti-cal"&gt;arthurhenrique/rusti-cal&lt;/a&gt; [&lt;a href="https://crates.io/crates/rusti-cal"&gt;rusti-cal&lt;/a&gt;] - A cal(1) clone lightning-fast ~ more than 9999 years ~ Written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurntSushi/jiff"&gt;burntSushi/jiff&lt;/a&gt; - A date-time library for Rust that encourages you to jump into the pit of success. &lt;a href="https://github.com/BurntSushi/jiff/actions"&gt;&lt;img src="https://github.com/BurntSushi/jiff/workflows/ci/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chronotope/chrono"&gt;chronotope/chrono&lt;/a&gt; - Date and time library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Mnwa/ms"&gt;Mnwa/ms&lt;/a&gt; [&lt;a href="https://crates.io/crates/ms-converter"&gt;ms-converter&lt;/a&gt;] - it's a library for converting human-like times to milliseconds &lt;a href="https://github.com/Mnwa/ms/actions?query=workflow%3Abuild"&gt;&lt;img src="https://github.com/Mnwa/ms/workflows/build/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/nt-time"&gt;sorairolake/nt-time&lt;/a&gt; [&lt;a href="https://crates.io/crates/nt-time"&gt;nt-time&lt;/a&gt;] - A Windows file time library. &lt;a href="https://github.com/sorairolake/nt-time/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/nt-time/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/time-rs/time"&gt;time-rs/time&lt;/a&gt; - &lt;a href="https://github.com/time-rs/time/actions"&gt;&lt;img src="https://github.com/time-rs/time/workflows/Build/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Distributed systems&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Antimony 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/antimonyproject/antimony"&gt;antimonyproject/antimony&lt;/a&gt; [&lt;a href="https://crates.io/crates/antimony"&gt;antimony&lt;/a&gt;] - stream processing / distributed computation platform&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Apache Kafka 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fede1024/rust-rdkafka"&gt;fede1024/rust-rdkafka&lt;/a&gt; [&lt;a href="https://crates.io/crates/rdkafka"&gt;rdkafka&lt;/a&gt;] - &lt;a href="https://github.com/confluentinc/librdkafka"&gt;librdkafka&lt;/a&gt; bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gklijs/schema_registry_converter"&gt;gklijs/schema_registry_converter&lt;/a&gt; [&lt;a href="https://crates.io/crates/schema_registry_converter"&gt;schema_registry_converter&lt;/a&gt;] - to integrate with &lt;a href="https://www.confluent.io/product/confluent-platform/data-compatibility/"&gt;confluent schema registry&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kafka-rust/kafka-rust"&gt;kafka-rust/kafka-rust&lt;/a&gt; - Rust client for Apache Kafka&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HDFS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hyunsik/hdfs-rs"&gt;hyunsik/hdfs-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/hdfs"&gt;hdfs&lt;/a&gt;] - libhdfs bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Other 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/build-trust/ockam"&gt;build-trust/ockam&lt;/a&gt; [&lt;a href="https://crates.io/crates/ockam"&gt;ockam&lt;/a&gt;] - End-to-End Encryption, Mutual Authentication, and ABAC for distributed applications &lt;a href="https://github.com/build-trust/ockam"&gt;&lt;img src="https://github.com/build-trust/ockam/workflows/Rust/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Domain driven design&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/serverlesstechnology/cqrs"&gt;serverlesstechnology/cqrs&lt;/a&gt; [&lt;a href="https://crates.io/crates/cqrs-es"&gt;cqrs-es&lt;/a&gt;] - A framework for CQRS and event sourcing with &lt;a href="https://doc.rust-cqrs.org/"&gt;user guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;eBPF&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aya-rs/aya"&gt;aya/aya-rs&lt;/a&gt; - Built with a focus on developer experience and operability.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/libbpf/libbpf-rs"&gt;libbpf/libbpf-rs&lt;/a&gt; - A minimal and opinionated eBPF tooling.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Email&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/email"&gt;email&lt;/a&gt;, &lt;a href="https://crates.io/keywords/imap"&gt;imap&lt;/a&gt;, &lt;a href="https://crates.io/keywords/smtp"&gt;smtp&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/duesee/imap-codec"&gt;duesee/imap-codec&lt;/a&gt; [&lt;a href="https://crates.io/crates/imap-codec"&gt;imap-codec&lt;/a&gt;] - Rock-solid and complete codec for IMAP &lt;a href="https://github.com/duesee/imap-codec/actions/workflows/build_and_test.yml"&gt;&lt;img src="https://github.com/duesee/imap-codec/actions/workflows/build_and_test.yml/badge.svg?sanitize=true" alt="Build &amp;amp; Test" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gsquire/sendgrid-rs"&gt;gsquire/sendgrid-rs&lt;/a&gt; - Library for SendGrid API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jdrouet/catapulte"&gt;jdrouet/catapulte&lt;/a&gt; - A microservice to send emails using &lt;a href="https://github.com/jdrouet/mrml"&gt;MRML&lt;/a&gt; templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jdrouet/jolimail"&gt;jdrouet/jolimail&lt;/a&gt; - A web application to build &lt;a href="https://github.com/jdrouet/mrml"&gt;MRML&lt;/a&gt; templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jdrouet/mrml"&gt;jdrouet/mrml&lt;/a&gt; - A library to generate nice email templates working on any mail client.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lettre/lettre"&gt;lettre/lettre&lt;/a&gt; - an SMTP-library &lt;a href="https://github.com/lettre/lettre/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/lettre/lettre/actions/workflows/test.yml/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mailtutan/mailtutan"&gt;mailtutan/mailtutan&lt;/a&gt; - An SMTP server for test and development environment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meli/meli"&gt;meli/meli&lt;/a&gt; - 🐝 terminal mail client&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/staktrace/mailparse"&gt;staktrace/mailparse&lt;/a&gt; [&lt;a href="https://crates.io/crates/mailparse"&gt;mailparse&lt;/a&gt;] - A library for parsing real-world email files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stalwartlabs/mail-auth"&gt;stalwartlabs/mail-auth&lt;/a&gt; [&lt;a href="https://crates.io/crates/mail-auth"&gt;mail-auth&lt;/a&gt;] - DKIM, ARC, SPF and DMARC message authentication library &lt;a href="https://github.com/stalwartlabs/mail-auth/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/stalwartlabs/mail-auth/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stalwartlabs/mail-parser"&gt;stalwartlabs/mail-parser&lt;/a&gt; [&lt;a href="https://crates.io/crates/mail-parser"&gt;mail-parser&lt;/a&gt;] - A fast and robust e-mail parsing library with full MIME support &lt;a href="https://github.com/stalwartlabs/mail-parser/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/stalwartlabs/mail-parser/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stalwartlabs/mail-send"&gt;stalwartlabs/mail-send&lt;/a&gt; [&lt;a href="https://crates.io/crates/mail-send"&gt;mail-send&lt;/a&gt;] - E-mail builder and SMTP client library with DKIM support &lt;a href="https://github.com/stalwartlabs/mail-send/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/stalwartlabs/mail-send/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tweedegolf/mailcrab"&gt;tweedegolf/mailcrab&lt;/a&gt; - Email test server for development.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Encoding&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/encoding"&gt;encoding&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ASN.1 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alex/rust-asn1"&gt;alex/rust-asn1&lt;/a&gt; - ASN.1 (DER) serializer&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Binary 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bincode-org/bincode"&gt;bincode-org/bincode&lt;/a&gt; - A binary encoder/decoder &lt;a href="https://github.com/bincode-org/bincode/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/bincode-org/bincode/actions/workflows/rust.yml/badge.svg?branch=trunk" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jamesmunns/postcard"&gt;jamesmunns/postcard&lt;/a&gt; [&lt;a href="https://crates.io/crates/postcard"&gt;postcard&lt;/a&gt;] - Postcard is a #![no_std] focused serializer and deserializer for Serde.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/m4b/goblin"&gt;m4b/goblin&lt;/a&gt; [&lt;a href="https://crates.io/crates/goblin"&gt;goblin&lt;/a&gt;] - cross-platform, zero-copy, and endian-aware binary parsing&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;BSON 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mongodb/bson-rust"&gt;mongodb/bson-rust&lt;/a&gt; - Encoding and decoding support for BSON&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Byte swapping 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/BurntSushi/byteorder"&gt;BurntSushi/byteorder&lt;/a&gt; - Supports big-endian, little-endian and native byte orders&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Cap'n Proto 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/capnproto/capnproto-rust"&gt;capnproto/capnproto-rust&lt;/a&gt; - Cap'n Proto is a type system for distributed systems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CBOR 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/serde_cbor"&gt;serde_cbor&lt;/a&gt; - CBOR support for serde&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Character Encoding 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hsivonen/encoding_rs"&gt;hsivonen/encoding_rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/encoding_rs"&gt;encoding_rs&lt;/a&gt;] - A Gecko-oriented implementation of the Encoding Standard&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lifthrasiir/rust-encoding"&gt;lifthrasiir/rust-encoding&lt;/a&gt; - Character encoding support for Rust. (also known as rust-encoding) It is based on WHATWG Encoding Standard, and also provides an advanced interface for error detection and recovery.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CRC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mrhooray/crc-rs"&gt;mrhooray/crc-rs&lt;/a&gt; - Rust implementation of CRC(16, 32, 64) with support of various standards&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CSV 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/BurntSushi/rust-csv"&gt;BurntSushi/rust-csv&lt;/a&gt; - A fast and flexible CSV reader and writer, with support for Serde&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;EDN 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/naomijub/edn-rs"&gt;edn-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/edn-rs"&gt;edn-rs&lt;/a&gt;] - crate to parse and emit EDN format into Rust types.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://flatbuffers.dev/"&gt;FlatBuffers&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/frol/flatc-rust"&gt;frol/flatc-rust&lt;/a&gt; - FlatBuffers compiler (flatc) integration for Cargo build scripts&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HAR 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mandrean/har-rs"&gt;mandrean/har-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/har"&gt;har&lt;/a&gt;] - A HTTP Archive Format (HAR) serialization &amp;amp; deserialization library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/servo/html5ever"&gt;servo/html5ever&lt;/a&gt; - High-performance browser-grade HTML5 parser&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;JSON 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cloudwego/sonic-rs"&gt;cloudwego/sonic-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/sonic-rs"&gt;sonic-rs&lt;/a&gt;] - A fast Rust JSON library based on SIMD.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/importcjj/rust-ajson"&gt;importcjj/rust-ajson&lt;/a&gt; [&lt;a href="https://crates.io/crates/ajson"&gt;ajson&lt;/a&gt;] - Get JSON values quickly&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustadopt/jzon-rs/"&gt;rustadopt/jzon-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/jzon"&gt;jzon&lt;/a&gt;] - JSON implementation&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/serde-rs/json"&gt;serde-rs/json&lt;/a&gt; [&lt;a href="https://crates.io/crates/serde_json"&gt;serde_json&lt;/a&gt;] - JSON support for &lt;a href="https://github.com/serde-rs/serde"&gt;Serde&lt;/a&gt; framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/simd-lite/simd-json"&gt;simd-lite/simd-json&lt;/a&gt; [&lt;a href="https://crates.io/crates/simd-json"&gt;simd-json&lt;/a&gt;] - High performance JSON parser based on a port of simdjson&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;MsgPack 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/3Hren/msgpack-rust"&gt;3Hren/msgpack-rust&lt;/a&gt; - Low/high level MessagePack implementation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NetCDF 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/georust/netcdf"&gt;georust/netcdf&lt;/a&gt; [&lt;a href="https://crates.io/crates/netcdf"&gt;netcdf&lt;/a&gt;] - Medium-level netCDF bindings, allowing easy reading and writing of array-like structures to a file.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;PEM 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jcreekmore/pem-rs"&gt;jcreekmore/pem-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/pem"&gt;pem&lt;/a&gt;] - Parse and encode PEM-encoded data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ProtocolBuffers 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/stepancheg/rust-protobuf"&gt;stepancheg/rust-protobuf&lt;/a&gt; - Rust implementation of Google protocol buffers&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tokio-rs/prost"&gt;tokio-rs/prost&lt;/a&gt; - &lt;a href="https://github.com/tokio-rs/prost/actions"&gt;&lt;img src="https://github.com/tokio-rs/prost/workflows/continuous%20integration/badge.svg?branch=master" alt="continuous integration" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;rkyv 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rkyv/rkyv"&gt;rkyv/rkyv&lt;/a&gt; [&lt;a href="https://crates.io/crates/rkyv"&gt;rkyv&lt;/a&gt;] - rkyv (archive) is a zero-copy deserialization framework&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;RON (Rusty Object Notation) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ron-rs/ron"&gt;https://github.com/ron-rs/ron&lt;/a&gt; - Rusty Object Notation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Serde 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/serde-aux/"&gt;iddm/serde-aux&lt;/a&gt; - additional tools for using with the serde library. &lt;a href="https://github.com/iddm/serde-aux/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/serde-aux/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/serde-aux"&gt;&lt;img src="https://img.shields.io/crates/v/serde-aux.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;TOML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tamasfe/taplo"&gt;tamasfe/taplo&lt;/a&gt; [&lt;a href="https://crates.io/crates/taplo"&gt;taplo&lt;/a&gt;] - A TOML toolkit &lt;a href="https://github.com/tamasfe/taplo/actions?query=workflow%3A%22Continuous+integration%22"&gt;&lt;img src="https://github.com/tamasfe/taplo/workflows/Continuous%20integration/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/toml-rs/toml"&gt;toml-rs/toml&lt;/a&gt; - &lt;a href="https://github.com/toml-rs/toml/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/toml-rs/toml/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vitiral/stfu8"&gt;vitiral/stfu8&lt;/a&gt; [&lt;a href="https://crates.io/crates/stfu8"&gt;stfu8&lt;/a&gt;] - Sorta Text Format in UTF-8&lt;/li&gt; 
 &lt;li&gt;XML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Florob/RustyXML"&gt;Florob/RustyXML&lt;/a&gt; - an XML parser&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/netvl/xml-rs"&gt;netvl/xml-rs&lt;/a&gt; - A streaming XML library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/shepmaster/sxd-document"&gt;shepmaster/sxd-document&lt;/a&gt; - An XML library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/shepmaster/sxd-xpath"&gt;shepmaster/sxd-xpath&lt;/a&gt; - An XPath library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tafia/quick-xml"&gt;tafia/quick-xml&lt;/a&gt; - High performance XML pull reader/writer&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/luminvent/yaserde"&gt;yaserde&lt;/a&gt; - Yet Another Serializer/Deserializer specialized for XML&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;YAML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/chyh1990/yaml-rust"&gt;chyh1990/yaml-rust&lt;/a&gt; - The missing YAML 1.2 implementation.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/saphyr-rs/saphyr"&gt;saphyr&lt;/a&gt; - A set of crates dedicated to parsing YAML.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Filesystem&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/filesystem"&gt;filesystem&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Operations 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/camino-rs/camino"&gt;Camino&lt;/a&gt; [&lt;a href="https://crates.io/crates/camino"&gt;camino&lt;/a&gt;] - Like Rust's std::path::Path, but UTF-8.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/apache/opendal"&gt;OpenDAL&lt;/a&gt; [&lt;a href="https://crates.io/crates/opendal"&gt;opendal&lt;/a&gt;] - A unified data access layer, empowering users to seamlessly and efficiently retrieve data from diverse storage services. &lt;a href="https://github.com/apache/opendal/actions?query=branch%3Amain"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/apache/opendal/ci_core.yml?branch=main" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ParthJadhav/Rust_Search"&gt;ParthJadhav/Rust_Search&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust_search"&gt;rust_search&lt;/a&gt;] - Blazingly fast file search library.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pop-os/dbus-udisks2"&gt;pop-os/dbus-udisks2&lt;/a&gt; [&lt;a href="https://crates.io/crates/dbus-udisks2"&gt;dbus-udisks2&lt;/a&gt;] - UDisks2 DBus API&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pop-os/sys-mount"&gt;pop-os/sys-mount&lt;/a&gt; [&lt;a href="https://crates.io/crates/sys-mount"&gt;sys-mount&lt;/a&gt;] - High level abstraction for the &lt;code&gt;mount&lt;/code&gt; / &lt;code&gt;umount2&lt;/code&gt; system calls.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vitiral/path_abs"&gt;vitiral/path_abs&lt;/a&gt; [&lt;a href="https://crates.io/crates/path_abs"&gt;path_abs&lt;/a&gt;] - Absolute serializable path types and associated methods.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/webdesus/fs_extra"&gt;webdesus/fs_extra&lt;/a&gt; - expanding opportunities standard library std::fs and std::io&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Temporary Files 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stebalien/tempfile"&gt;Stebalien/tempfile&lt;/a&gt; - temporary file library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stebalien/xattr"&gt;Stebalien/xattr&lt;/a&gt; [&lt;a href="https://crates.io/crates/xattr"&gt;xattr&lt;/a&gt;] - list and manipulate unix extended file attributes&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zboxfs/zbox"&gt;zboxfs/zbox&lt;/a&gt; [&lt;a href="https://crates.io/crates/zbox"&gt;zbox&lt;/a&gt;] - Zero-details, privacy-focused embeddable file system.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Finance&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/avhz/RustQuant"&gt;avhz/RustQuant&lt;/a&gt; [&lt;a href="https://crates.io/crates/RustQuant"&gt;RustQuant&lt;/a&gt;] - A quantitative finance library. &lt;img src="https://img.shields.io/github/actions/workflow/status/avhz/RustQuant/build.yml" alt="GitHub Workflow Status (with event)" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/d-e-s-o/apca"&gt;d-e-s-o/apca&lt;/a&gt; [&lt;a href="https://crates.io/crates/apca"&gt;apca&lt;/a&gt;] - Opinionated and comprehensive bindings to the &lt;a href="https://alpaca.markets/"&gt;Alpaca API&lt;/a&gt; for stock trading and more. &lt;img src="https://github.com/d-e-s-o/apca/actions/workflows/test.yml/badge.svg?branch=main" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-dd/stochastic-rs"&gt;stochastic-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/stochastic-rs"&gt;stochastic-rs&lt;/a&gt;] - High-performance data generation library for stochastic process with quant finance tools. &lt;img src="https://github.com/rust-dd/stochastic-rs/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Functional Programming&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/fp"&gt;functional programming&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Prelude 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/JasonShin/fp-core.rs"&gt;JasonShin/fp-core.rs&lt;/a&gt; - A library for functional programming&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/myrrlyn/tap"&gt;myrrlyn/tap&lt;/a&gt; - Suffix-Position Pipeline Behavior&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Game development&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://arewegameyet.rs"&gt;Are we game yet?&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Allegro 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SiegeLord/RustAllegro"&gt;SiegeLord/RustAllegro&lt;/a&gt; - &lt;a href="https://liballeg.org/"&gt;Allegro 5&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ozkriff/awesome-quads"&gt;Awesome Quads&lt;/a&gt; - A curated list of links to miniquad/macroquad-related code &amp;amp; resources&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rofrol/awesome-wgpu"&gt;Awesome wgpu&lt;/a&gt; - A curated list of wgpu code and resources&lt;/li&gt; 
 &lt;li&gt;bracket-lib (previously RLTK) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/amethyst/bracket-lib"&gt;bracket-lib&lt;/a&gt; [&lt;a href="https://crates.io/crates/bracket-lib"&gt;bracket-lib&lt;/a&gt;] - The Roguelike Toolkit (RLTK). &lt;a href="https://github.com/amethyst/bracket-lib/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/amethyst/bracket-lib/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Challonge 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/challonge-rs"&gt;iddm/challonge-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/challonge"&gt;challonge&lt;/a&gt;] - Client library for the Challonge REST API. Helps to organize tournaments. &lt;a href="https://github.com/iddm/challonge-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/challonge-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Entity-Component Systems (ECS) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/amethyst/specs"&gt;amethyst/specs&lt;/a&gt; - Specs Parallel ECS&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/amethyst/legion"&gt;legion&lt;/a&gt; - A feature rich high performance ECS library with minimal boilerplate &lt;a href="https://github.com/amethyst/legion/actions"&gt;&lt;img src="https://github.com/amethyst/legion/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Game Engines 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bevyengine/bevy"&gt;Bevy&lt;/a&gt; - is a refreshingly simple data-driven game engine. - &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/v/bevy.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/d/bevy.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://fyrox.rs/"&gt;Fyrox&lt;/a&gt; - Game engine 3D &lt;a href="https://crates.io/crates/fyrox"&gt;&lt;img src="https://img.shields.io/crates/v/fyrox.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FyroxEngine/Fyrox/raw/master/LICENSE.md"&gt;&lt;img src="https://img.shields.io/crates/l/fyrox.svg?sanitize=true" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/fyrox"&gt;&lt;img src="https://img.shields.io/crates/d/fyrox.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ggez/ggez"&gt;ggez&lt;/a&gt; - A lightweight game framework for making 2D games with minimum friction - &lt;a href="https://crates.io/crates/ggez"&gt;&lt;img src="https://img.shields.io/crates/v/ggez.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ggez/ggez/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/ggez"&gt;&lt;img src="https://img.shields.io/crates/d/ggez.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sebcrozet/kiss3d"&gt;Kiss3d&lt;/a&gt; - A Keep It Simple, Stupid 3d graphics engine &lt;a href="https://crates.io/crates/kiss3d"&gt;&lt;img src="https://img.shields.io/crates/d/kiss3d.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Ruddle/oxidator"&gt;oxidator&lt;/a&gt; - A real time strategy game/engine supporting WebGPU&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.piston.rs/"&gt;Piston&lt;/a&gt; - &lt;a href="https://crates.io/crates/piston"&gt;&lt;img src="https://img.shields.io/crates/v/piston.svg?style=flat-square" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/PistonDevelopers/piston/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/piston.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/piston"&gt;&lt;img src="https://img.shields.io/crates/d/piston.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/unrust/unrust"&gt;Unrust&lt;/a&gt; - Webgl 2.0 / native game engine&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Game Servers 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gamedig/rust-gamedig"&gt;gamedig/rust-gamedig&lt;/a&gt; [&lt;a href="https://crates.io/crates/gamedig"&gt;gamedig&lt;/a&gt;] - Query game servers for informations such as name, players online, max players count etc. &lt;a href="https://crates.io/crates/gamedig"&gt;&lt;img src="https://img.shields.io/crates/v/gamedig.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/gamedig"&gt;&lt;img src="https://img.shields.io/crates/d/gamedig.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://godotengine.org/"&gt;Godot&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/godot-rust/gdext"&gt;godot-rust/gdext&lt;/a&gt; [&lt;a href="https://crates.io/crates/gdext"&gt;gdext&lt;/a&gt;] - Bindings to the Godot 4+ game engine &lt;a href="https://github.com/godot-rust/gdext/actions/workflows/full-ci.yml"&gt;&lt;img src="https://github.com/godot-rust/gdext/actions/workflows/full-ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/godot-rust/gdnative"&gt;godot-rust/gdnative&lt;/a&gt; [&lt;a href="https://crates.io/crates/gdnative"&gt;gdnative&lt;/a&gt;] - Bindings to the Godot 3+ game engine &lt;a href="https://github.com/godot-rust/gdnative/actions/workflows/full-ci.yml"&gt;&lt;img src="https://github.com/godot-rust/gdnative/actions/workflows/full-ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Minecraft 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bedrock-crustaceans/bedrock-rs"&gt;bedrock-crustaceans/bedrock-rs&lt;/a&gt; - Universal toolkit for Minecraft Bedrock Edition development in Rust. &lt;a href="https://github.com/bedrock-crustaceans/bedrock-rs"&gt;&lt;img src="https://img.shields.io/github/stars/bedrock-crustaceans/bedrock-rs" alt="GitHub stars" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bedrock-crustaceans/bedrock-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/bedrock-crustaceans/bedrock-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ferrumc-rs/ferrumc"&gt;FerrumC&lt;/a&gt; - A upgrade of the original Minecraft server in Rust [&lt;img src="https://github.com/ferrumc-rs/ferrumc/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;]&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pumpkin-mc/pumpkin"&gt;Pumpkin&lt;/a&gt; - A high-performance Minecraft server Software fully written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.raylib.com/"&gt;Raylib&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/deltaphc/raylib-rs"&gt;deltaphc/raylib-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/raylib"&gt;raylib&lt;/a&gt;] - Bindings for raylib&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://www.libsdl.org/"&gt;SDL&lt;/a&gt; [&lt;a href="https://crates.io/keywords/sdl"&gt;sdl&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/brson/rust-sdl"&gt;brson/rust-sdl&lt;/a&gt; - SDL1 bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Rust-SDL2/rust-sdl2"&gt;Rust-SDL2/rust-sdl2&lt;/a&gt; - SDL2 bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;SFML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jeremyletang/rust-sfml"&gt;jeremyletang/rust-sfml&lt;/a&gt; - &lt;a href="https://www.sfml-dev.org/"&gt;SFML&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Skillratings 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/atomflunder/skillratings"&gt;atomflunder/skillratings&lt;/a&gt; [&lt;a href="https://crates.io/crates/skillratings"&gt;skillratings&lt;/a&gt;] - Collection of skill rating algorithms for multiplayer games like Elo, Glicko-2, TrueSkill etc. &lt;a href="https://crates.io/crates/skillratings"&gt;&lt;img src="https://img.shields.io/crates/v/skillratings" alt="crates.io badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/atomflunder/skillratings/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/atomflunder/skillratings/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Tatami 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/giraffekey/tatami"&gt;giraffekey/tatami&lt;/a&gt; [&lt;a href="https://crates.io/crates/tatami-dungeon"&gt;tatami&lt;/a&gt;] - A roguelike dungeon generation algorithm.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Toornament-rs 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/toornament-rs"&gt;iddm/toornament-rs&lt;/a&gt; - Toornament.com API bindings. &lt;a href="https://github.com/iddm/toornament-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/toornament-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/toornament"&gt;&lt;img src="https://img.shields.io/crates/v/toornament.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Victorem 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/VictoremWinbringer/Victorem"&gt;VictoremWinbringer/Victorem&lt;/a&gt; [&lt;a href="https://crates.io/crates/Victorem"&gt;Victorem&lt;/a&gt;] - Easy UDP Game Server and UDP Client framework for creating simple 2D and 3D online game prototype&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Geospatial&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/geo"&gt;geo&lt;/a&gt;, &lt;a href="https://crates.io/keywords/gis"&gt;gis&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DaveKram/coord_transforms"&gt;DaveKram/coord_transforms&lt;/a&gt; [&lt;a href="https://crates.io/crates/coord_transforms"&gt;coord_transforms&lt;/a&gt;] - coordinate transformations (2-d, 3-d, and geospatial)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/georust"&gt;Georust&lt;/a&gt; - geospatial tools and libraries written&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maplibre/martin"&gt;MapLibre/Martin&lt;/a&gt; - Map tile server with PostGIS, MBTiles, PMTiles, and sprites support. &lt;a href="https://github.com/maplibre/martin/actions"&gt;&lt;img src="https://github.com/maplibre/martin/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI build" /&gt;&lt;/a&gt;&lt;a href="https://crates.io/crates/martin"&gt;&lt;img src="https://img.shields.io/crates/v/martin.svg?sanitize=true" alt="crates.io version" /&gt;&lt;/a&gt;&lt;a href="https://maplibre.org/martin/"&gt;&lt;img src="https://img.shields.io/badge/docs-Book-informational" alt="Book" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gx0r/rrgeo"&gt;rust-reverse-geocoder&lt;/a&gt; - A fast, offline reverse geocoder, inspired by &lt;a href="https://github.com/thampiman/reverse-geocoder"&gt;thampiman/reverse-geocoder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vlopes11/geomorph"&gt;vlopes11/geomorph&lt;/a&gt; [&lt;a href="https://crates.io/crates/geomorph"&gt;geomorph&lt;/a&gt;] - conversion between UTM, LatLon and MGRS coordinates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graph algorithms&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neo4j-labs/graph"&gt;neo4j-labs/graph&lt;/a&gt; - A library for high-performant graph algorithms &lt;a href="https://github.com/neo4j-labs/graph/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/workflow/status/neo4j-labs/graph/CI/main?label=CI" alt="graph CI status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/petgraph/petgraph"&gt;petgraph/petgraph&lt;/a&gt; - Graph data structure library. &lt;a href="https://github.com/petgraph/petgraph/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/petgraph/petgraph/workflows/Continuous%20integration/badge.svg?branch=master" alt="graph CI status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graphics&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/graphics"&gt;graphics&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fonts 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/redox-os/rusttype"&gt;redox-os/rusttype&lt;/a&gt; - Alternative to libraries like FreeType&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/harfbuzz/rustybuzz"&gt;rustybuzz&lt;/a&gt; - An incremental harfbuzz port&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gfx-rs/gfx"&gt;gfx-rs/gfx&lt;/a&gt; - A high-performance, bindless graphics API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gfx-rs/wgpu"&gt;gfx-rs/wgpu&lt;/a&gt; - Native WebGPU implementation based on gfx-hal. &lt;a href="https://github.com/gfx-rs/wgpu/actions"&gt;&lt;img src="https://github.com/gfx-rs/wgpu/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OpenGL [&lt;a href="https://crates.io/keywords/opengl"&gt;opengl&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-windowing/gl-rs"&gt;gl-rs&lt;/a&gt; - An OpenGL function pointer loader&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/glium/glium"&gt;glium/glium&lt;/a&gt; - safe OpenGL wrapper.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/glutin"&gt;glutin&lt;/a&gt; - Alternative to &lt;a href="https://www.glfw.org/"&gt;GLFW&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/glfw-rs"&gt;PistonDevelopers/glfw-rs&lt;/a&gt; - GLFW3 bindings and idiomatic wrapper&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;PDF 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bastibense/libharu_ng"&gt;bastibense/libharu_ng&lt;/a&gt; [&lt;a href="https://crates.io/crates/libharu_ng"&gt;libharu_ng&lt;/a&gt;] - Easily generate PDFs from your Rust app.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fschutt/printpdf"&gt;fschutt/printpdf&lt;/a&gt; - PDF writing library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/J-F-Liu/lopdf"&gt;J-F-Liu/lopdf&lt;/a&gt; - PDF document manipulation&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kaj/rust-pdf"&gt;kaj/rust-pdf&lt;/a&gt; - Generating PDF files in pure Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.vulkan.org/"&gt;Vulkan&lt;/a&gt; [&lt;a href="https://crates.io/keywords/vulkan"&gt;vulkan&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/Friz64/erupt"&gt;erupt&lt;/a&gt; [&lt;a href="https://crates.io/crates/erupt"&gt;erupt&lt;/a&gt;] - &lt;a href="https://gitlab.com/Friz64/erupt/-/pipelines"&gt;&lt;img src="https://gitlab.com/Friz64/erupt/badges/main/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vulkano-rs/vulkano"&gt;vulkano&lt;/a&gt; [&lt;a href="https://crates.io/crates/vulkano"&gt;vulkano&lt;/a&gt;] - Safe and rich Rust wrapper around the Vulkan API&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;GUI&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/gui"&gt;gui&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/autopilot-rs/autopilot-rs"&gt;autopilot-rs/autopilot-rs&lt;/a&gt; - A simple, cross-platform GUI automation library.&lt;/li&gt; 
 &lt;li&gt;Cocoa 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/servo/core-foundation-rs"&gt;servo/core-foundation-rs&lt;/a&gt; - Rust bindings to Core Foundation and other low level libraries on Mac OS X and iOS&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dioxuslabs/dioxus"&gt;DioxusLabs/dioxus&lt;/a&gt; - a portable, performant, and ergonomic framework for building cross-platform user interfaces in Rust. &lt;img src="https://github.com/dioxuslabs/dioxus/actions/workflows/main.yml/badge.svg?sanitize=true" alt="rust ci" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui"&gt;emilk/egui&lt;/a&gt; - Simple, fast, and highly portable immediate mode GUI library. egui runs on the web, natively, and in your favorite game engine. &lt;a href="https://github.com/emilk/egui/actions?workflow=CI"&gt;&lt;img src="https://github.com/emilk/egui/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emoon/rust_minifb"&gt;emoon/rust_minifb&lt;/a&gt; - minifb is a cross-platform window setup with optional bitmap rendering. It also comes with easy mouse and keyboard input. Primarily designed for prototyping&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.fltk.org/"&gt;FLTK&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fltk-rs/fltk-rs"&gt;fltk-rs&lt;/a&gt; - FLTK bindings &lt;a href="https://github.com/fltk-rs/fltk-rs/actions"&gt;&lt;img src="https://github.com/fltk-rs/fltk-rs/workflows/Build/badge.svg?branch=master" alt="Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://flutter.dev/"&gt;Flutter&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cunarist/rinf"&gt;cunarist/rinf&lt;/a&gt; - Rust as your Flutter backend, Flutter as your Rust frontend &lt;a href="https://github.com/cunarist/rinf/actions/workflows/build_test.yaml?query=branch%3Amain"&gt;&lt;img src="https://github.com/cunarist/rinf/actions/workflows/build_test.yaml/badge.svg?sanitize=true" alt="Build Test" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/flutter-rs/flutter-rs"&gt;flutter-rs&lt;/a&gt; - Build flutter desktop app in dart &amp;amp; rust.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fzyzcjy/flutter_rust_bridge"&gt;fzyzcjy/flutter_rust_bridge&lt;/a&gt; - High-level memory-safe binding generator for Flutter/Dart &amp;lt;-&amp;gt; Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fschutt/azul"&gt;fschutt/azul&lt;/a&gt; - A free, functional, IMGUI-oriented GUI framework for rapid development of desktop applications written in Rust, supported by the Mozilla WebRender rendering engine.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.gtk.org/"&gt;GTK+&lt;/a&gt; [&lt;a href="https://crates.io/keywords/gtk"&gt;gtk&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gtk-rs/gtk4-rs"&gt;gtk-rs/gtk4-rs&lt;/a&gt; - GTK4 binding &lt;img src="https://github.com/gtk-rs/gtk4-rs/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/antoyo/relm"&gt;relm&lt;/a&gt; - Asynchronous, GTK+-based, GUI library, inspired by Elm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iced-rs/iced"&gt;iced-rs/iced&lt;/a&gt; [&lt;a href="https://crates.io/crates/iced"&gt;iced&lt;/a&gt;] - A cross-platform GUI library, focused on simplicity and type-safety. Inspired by Elm.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ocornut/imgui"&gt;ImGui&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/imgui-rs/imgui-rs"&gt;imgui-rs&lt;/a&gt; - Bindings for ImGui &lt;a href="https://github.com/imgui-rs/imgui-rs/actions"&gt;&lt;img src="https://github.com/imgui-rs/imgui-rs/workflows/ci/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://webserver2.tecgraf.puc-rio.br/iup/"&gt;IUP&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/KISS-UI/kiss-ui"&gt;Kiss-ui&lt;/a&gt; - A simple UI framework built on IUP&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivanceras/sauron-native"&gt;ivanceras/sauron-native&lt;/a&gt; - A truly native and cross platform GUI library. One unified code can be run as native GUI, Html Web and TUI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andlabs/libui"&gt;libui&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-native-ui/libui-rs"&gt;rust-native-ui/libui-rs&lt;/a&gt; - libui bindings.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/makepad/makepad"&gt;makepad/makepad&lt;/a&gt; [&lt;a href="https://crates.io/crates/makepad-widgets"&gt;makepad-widgets&lt;/a&gt;] - Makepad is a creative software development platform that compiles to wasm/webGL, osx/metal, windows/dx11 linux/opengl.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Immediate-Mode-UI/Nuklear"&gt;Nuklear&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/snuk182/nuklear-rust"&gt;nuklear-rust&lt;/a&gt; - Bindings for Nuklear&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/redox-os/orbtk"&gt;OrbTk&lt;/a&gt; - The Orbital Widget Toolkit is a multi platform (G)UI toolkit using SDL2 &lt;a href="https://github.com/redox-os/orbtk/actions"&gt;&lt;img src="https://github.com/redox-os/orbtk/workflows/build/badge.svg?branch=develop" alt="Build and test" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/conrod/"&gt;PistonDevelopers/conrod&lt;/a&gt; - An easy-to-use, immediate-mode, 2D GUI library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://doc.qt.io"&gt;Qt&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cyndis/qmlrs"&gt;cyndis/qmlrs&lt;/a&gt; - QtQuick bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-qt"&gt;rust-qt&lt;/a&gt; - Qt bindings for Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/woboq/qmetaobject-rs"&gt;woboq/qmetaobject-rs&lt;/a&gt; - Integrate Qml and Rust by building the QMetaObject at compile time.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RibirX/Ribir"&gt;Ribir&lt;/a&gt; - Ribir is a Rust GUI framework that helps you build beautiful and native multi-platform applications from a single codebase.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rise-ui/rise"&gt;rise-ui&lt;/a&gt; - Simple component-based cross-Platform GUI Toolkit for developing beautiful and user-friendly interfaces.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saurvs/nfd-rs"&gt;saurvs/nfd-rs&lt;/a&gt; - &lt;a href="https://github.com/mlabbe/nativefiledialog"&gt;nativefiledialog&lt;/a&gt; bindings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://sciter.com/"&gt;Sciter&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sciter-sdk/rust-sciter"&gt;sciter-sdk/rust-sciter&lt;/a&gt; - Sciter bindings &lt;a href="https://ci.appveyor.com/project/sciter-sdk/rust-sciter"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/github/sciter-sdk/rust-sciter?svg=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/slint-ui/slint"&gt;slint-ui/slint&lt;/a&gt; &lt;a href="https://crates.io/crates/slint"&gt;slint&lt;/a&gt; - &lt;a href="https://slint.dev/"&gt;Slint&lt;/a&gt; is a toolkit to efficiently develop fluid graphical user interfaces for embedded devices and desktop applications. &lt;a href="https://github.com/slint-ui/slint/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/slint-ui/slint/workflows/CI/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tauri-apps/tauri"&gt;tauri-apps/tauri&lt;/a&gt; - Build smaller, faster, and more secure desktop applications with a web frontend, powered by &lt;a href="https://github.com/tauri-apps/wry"&gt;WRY&lt;/a&gt;. &lt;a href="https://github.com/tauri-apps/tauri/actions?query=workflow%3A%22test+library%22"&gt;&lt;img src="https://img.shields.io/github/workflow/status/tauri-apps/tauri/test%20library?label=test%20library" alt="test library" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tauri-apps/wry"&gt;tauri-apps/wry&lt;/a&gt; - Webview Rendering librarY.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linebender/xilem"&gt;xilem&lt;/a&gt; - Successor of the data-first UI design toolkit &lt;a href="https://github.com/linebender/druid"&gt;druid&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Image processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/abonander/img_hash"&gt;abonander/img_hash&lt;/a&gt; - Perceptual image hashing and comparison for equality and similarity.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Enet4/dicom-rs"&gt;Enet4/dicom-rs&lt;/a&gt; - A pure Rust implementation of the DICOM standard, allowing users to work with DICOM objects and interact with DICOM applications, while aiming to be fast, safe, and intuitive to use.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/image-rs/image"&gt;image-rs/image&lt;/a&gt; - Basic imaging processing functions and methods for converting to and from image formats&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/image-rs/imageproc"&gt;image-rs/imageproc&lt;/a&gt; - An image processing library, based on the &lt;code&gt;image&lt;/code&gt; library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marekm4/dominant_color"&gt;marekm4/dominant_color&lt;/a&gt; [&lt;a href="https://crates.io/crates/dominant_color"&gt;dominant_color&lt;/a&gt;] - Dominant color extractor &lt;img src="https://github.com/marekm4/dominant_color/actions/workflows/rust.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-cv/cv"&gt;rust-cv/cv&lt;/a&gt; - Implement computer vision algorithms, abstractions, and systems. &lt;code&gt;#[no_std]&lt;/code&gt; is supported where possible. &lt;img src="https://github.com/rust-cv/cv/workflows/tests/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/teovoinea/steganography"&gt;teovoinea/steganography&lt;/a&gt; [&lt;a href="https://crates.io/crates/steganography"&gt;steganography&lt;/a&gt;] - A simple steganography library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/twistedfall/opencv-rust"&gt;twistedfall/opencv-rust&lt;/a&gt; - Bindings for OpenCV&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Language specification&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/shnewto/bnf"&gt;shnewto/bnf&lt;/a&gt; - A library for parsing Backus–Naur form context-free grammars.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/WyvernIXTL/license-fetcher"&gt;WyvernIXTL/license-fetcher&lt;/a&gt; [&lt;a href="https://crates.io/crates/license-fetcher"&gt;license-fetcher&lt;/a&gt;] - Fetch licenses of dependencies at build time and embed them into your program.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Logging&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/log"&gt;log&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/donnie4w/tklog" title="donnie4w/tklog"&gt;donnie4w/tklog&lt;/a&gt; - lightweight and efficient rust structured log library with support for log levels, file segmentation, compressed archiving.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/estk/log4rs"&gt;estk/log4rs&lt;/a&gt; - highly configurable logging framework modeled after Java's Logback and log4j libraries &lt;a href="https://app.circleci.com/pipelines/github/estk/log4rs"&gt;&lt;img src="https://circleci.com/gh/estk/log4rs.svg?style=shield" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rbatis/fast_log"&gt;rbatis/fast_log&lt;/a&gt; - Async log High-performance asynchronous logging&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/log"&gt;rust-lang/log&lt;/a&gt; - Logging implementation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/seanmonstar/pretty-env-logger"&gt;seanmonstar/pretty-env-logger&lt;/a&gt; - A pretty, easy-to-use logger.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/slog-rs/slog"&gt;slog-rs/slog&lt;/a&gt; - Structured, composable logging&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tokio-rs/tracing"&gt;tokio-rs/tracing&lt;/a&gt; - An application level tracing framework for async-aware structured logging, error handling, metrics, and more &lt;a href="https://github.com/tokio-rs/tracing/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/tokio-rs/tracing/workflows/CI/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Macro&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;cute 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mattgathu/cute"&gt;mattgathu/cute&lt;/a&gt; - Macro for Python-esque list comprehensions.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/elastio/bon"&gt;elastio/bon&lt;/a&gt; [&lt;a href="https://crates.io/crates/bon"&gt;bon&lt;/a&gt;] - generate compile-time-checked builders for structs and functions, provides partial application, optional and named parameters for functions and methods. &lt;a href="https://github.com/elastio/bon/actions"&gt;&lt;img src="https://github.com/elastio/bon/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StardustDL/Linq-in-Rust"&gt;Linq-in-Rust&lt;/a&gt; - Macro and methods for C#-LINQ-like expressions. &lt;a href="https://github.com/StardustDL/Linq-in-Rust/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/StardustDL/Linq-in-Rust/workflows/CI/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Markup language&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;CommonMark 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pulldown-cmark/pulldown-cmark"&gt;pulldown-cmark/pulldown-cmark&lt;/a&gt; - &lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt; parser&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/insomnimus/tidier"&gt;insomnimus/tidier&lt;/a&gt; [&lt;a href="https://crates.io/crates/tidier"&gt;tidier&lt;/a&gt;] - A library to format HTML, XHTML and XML documents. &lt;a href="https://github.com/insomnimus/tidier/actions"&gt;&lt;img src="https://github.com/insomnimus/tidier/actions/workflows/main.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mobile&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Android / iOS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ivnsch/rust_android_ios"&gt;ivnsch/rust_android_ios&lt;/a&gt; - An example of using a shared lib for Android and iOS using rust-swig and cbindgen respectively.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Generic 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Geal/rust_on_mobile"&gt;Geal/rust_on_mobile&lt;/a&gt; - iOS CocoaPods / Android JNI&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/redbadger/crux"&gt;redbadger/crux&lt;/a&gt; [&lt;a href="https://crates.io/crates/crux_core"&gt;crux_core&lt;/a&gt;] - Cross-platform app development. Crux helps you share your app's business logic and behavior across mobile (iOS/Android) and web - as a single reusable core. &lt;a href="https://github.com/redbadger/crux/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/redbadger/crux/build.yaml" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;iOS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/TimNN/cargo-lipo"&gt;TimNN/cargo-lipo&lt;/a&gt; - A cargo lipo subcommand which automatically creates a universal library for use with your iOS application.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Network programming&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bluetooth 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bluez/bluer"&gt;bluez/bluer&lt;/a&gt; [&lt;a href="https://crates.io/crates/bluer"&gt;bluer&lt;/a&gt;] - Official BlueZ bindings. &lt;a href="https://github.com/bluez/bluer/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/bluez/bluer/actions/workflows/rust.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CoAP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Covertness/coap-rs"&gt;Covertness/coap-rs&lt;/a&gt; - A &lt;a href="https://datatracker.ietf.org/doc/html/rfc7252"&gt;Constrained Application Protocol(CoAP)&lt;/a&gt; library.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Docker 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fussybeaver/bollard"&gt;fussybeaver/bollard&lt;/a&gt; - Docker daemon API&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;FTP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mattnenterprise/rust-ftp"&gt;mattnenterprise/rust-ftp&lt;/a&gt; - an &lt;a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol"&gt;FTP&lt;/a&gt; client&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;gRPC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hyperium/tonic"&gt;hyperium/tonic&lt;/a&gt; - A native gRPC client &amp;amp; server implementation with async/await support &lt;a href="https://crates.io/crates/tonic"&gt;&lt;img src="https://img.shields.io/crates/v/tonic" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tikv/grpc-rs"&gt;tikv/grpc-rs&lt;/a&gt; - The gRPC library built on C Core library and futures&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl"&gt;Hurl&lt;/a&gt; - Run and test HTTP requests with plain text and libcurl &lt;a href="https://github.com/Orange-OpenSource/hurl/actions"&gt;&lt;img src="https://github.com/Orange-OpenSource/hurl/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;IPNetwork 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/achanda/ipnetwork"&gt;achanda/ipnetwork&lt;/a&gt; - A library to work with IP networks&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/canndrew/netsim"&gt;candrew/netsim&lt;/a&gt; - A library for network simulation and testing&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Low level 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/actix/actix"&gt;actix/actix&lt;/a&gt; - Actor library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dylanmckay/protocol"&gt;dylanmckay/protocol&lt;/a&gt; - Custom TCP/UDP protocol definitions&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/libpnet/libpnet"&gt;libpnet/libpnet&lt;/a&gt; - A cross-platform, low level networking&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/smoltcp-rs/smoltcp"&gt;smoltcp-rs/smoltcp&lt;/a&gt; - A standalone, event-driven TCP/IP stack that is designed for bare-metal, real-time systems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;message-io 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lemunozm/message-io"&gt;lemunozm/message-io&lt;/a&gt; - Event-driven message library to build network applications easy and fast. Supports TCP, UDP and WebSockets. &lt;a href="https://github.com/lemunozm/message-io/actions?query=workflow%3A%22message-io+ci%22"&gt;&lt;img src="https://img.shields.io/github/workflow/status/lemunozm/message-io/message-io%20ci" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;MQTT 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bytebeamio/rumqtt"&gt;bytebeamio/rumqtt&lt;/a&gt; - A library for developers to build applications that communicate with the &lt;a href="https://mqtt.org"&gt;MQTT protocol&lt;/a&gt; over TCP and WebSockets, with or without TLS. &lt;a href="https://github.com/bytebeamio/rumqtt/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/bytebeamio/rumqtt/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build and Test" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rmqtt/rmqtt"&gt;rmqtt/rmqtt&lt;/a&gt; - MQTT Server/MQTT Broker - Scalable Distributed MQTT Message Broker for IoT in the 5G Era&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NanoMsg 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/thehydroimpulse/nanomsg.rs"&gt;thehydroimpulse/nanomsg.rs&lt;/a&gt; - &lt;a href="https://nanomsg.org/"&gt;nanomsg&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NATS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nats-io/nats.rs"&gt;nats-io/nats.rs&lt;/a&gt; - Client for NATS, the cloud native messaging system. &lt;a href="https://github.com/nats-io/nats.rs/actions"&gt;&lt;img src="https://github.com/nats-io/nats.rs/workflows/Rust/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Nng 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/neachdainn/nng-rs"&gt;neachdainn/nng-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/nng"&gt;Nng&lt;/a&gt;] - &lt;a href="https://nng.nanomsg.org/index.html"&gt;Nng (nanomsg v2)&lt;/a&gt; bindings &lt;a href="https://gitlab.com/neachdainn/nng-rs/-/pipelines"&gt;&lt;img src="https://gitlab.com/neachdainn/nng-rs/badges/master/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NNTP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mattnenterprise/rust-nntp"&gt;mattnenterprise/rust-nntp&lt;/a&gt; [&lt;a href="https://crates.io/crates/nntp"&gt;nntp&lt;/a&gt;] - an &lt;a href="https://en.wikipedia.org/wiki/Network_News_Transfer_Protocol"&gt;NNTP&lt;/a&gt; client&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;P2P 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/libp2p/rust-libp2p"&gt;libp2p/rust-libp2p&lt;/a&gt; - Implementation of libp2p networking stack. &lt;a href="https://app.circleci.com/pipelines/github/libp2p/rust-libp2p"&gt;&lt;img src="https://circleci.com/gh/libp2p/rust-libp2p.svg?style=svg" alt="Circle CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/n0-computer/iroh"&gt;n0-computer/iroh&lt;/a&gt; [&lt;a href="https://crates.io/crates/iroh"&gt;iroh&lt;/a&gt;] - crate for building on direct connections between devices &lt;a href="https://github.com/n0-computer/iroh/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/n0-computer/iroh/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;POP3 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mattnenterprise/rust-pop3"&gt;mattnenterprise/rust-pop3&lt;/a&gt; [&lt;a href="https://crates.io/crates/pop3"&gt;pop3&lt;/a&gt;] - A &lt;a href="https://en.wikipedia.org/wiki/Post_Office_Protocol"&gt;POP3&lt;/a&gt; client&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;QUIC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/aws/s2n-quic"&gt;aws/s2n-quic&lt;/a&gt; - An implementation of the IETF QUIC protocol &lt;img src="https://img.shields.io/github/actions/workflow/status/aws/s2n-quic/ci.yml?branch=main" alt="ci" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cloudflare/quiche"&gt;cloudflare/quiche&lt;/a&gt; - cloudflare implementation of the QUIC transport protocol and HTTP/3 &lt;img src="https://img.shields.io/github/actions/workflow/status/cloudflare/quiche/stable.yml?branch=master" alt="build" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mozilla/neqo"&gt;mozilla/neqo&lt;/a&gt; - an Implementation of QUIC&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/quinn-rs/quinn"&gt;quinn-rs/quinn&lt;/a&gt; - Futures-based QUIC implementation &lt;a href="https://dev.azure.com/dochtman/Projects/_build"&gt;&lt;img src="https://dev.azure.com/dochtman/Projects/_apis/build/status/Quinn?branchName=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Tencent/tquic"&gt;tencent/tquic&lt;/a&gt; - A high-performance, lightweight, and cross-platform QUIC library &lt;a href="https://github.com/Tencent/tquic/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/tencent/tquic/rust.yml" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Raknet 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/b23r0/rust-raknet"&gt;b23r0/rust-raknet&lt;/a&gt; - RakNet Protocol implementation &lt;a href="https://github.com/b23r0/rust-raknet/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/workflow/status/b23r0/rust-raknet/Rust" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;RPC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ENQT-GmbH/remoc"&gt;ENQT-GmbH/remoc&lt;/a&gt; [&lt;a href="https://crates.io/crates/remoc"&gt;remoc&lt;/a&gt;] - Remoc provides channels (broadcast, mpsc, oneshot, watch) similar to Tokio's and trait calling over any remote transport. &lt;a href="https://github.com/ENQT-GmbH/remoc/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/ENQT-GmbH/remoc/actions/workflows/rust.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/smallnest/rpcx-rs"&gt;smallnest/rpcx-rs&lt;/a&gt; - A RPC library for developing microservices in easy and simple way.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;SIP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/restsend/rsipstack"&gt;restsend/rsipstack&lt;/a&gt; - A RFC 3261 compliant SIP stack&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Socket.io 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/1c3t3a/rust-socketio"&gt;1c3t3a/rust-socketio&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust_socketio"&gt;rust_socketio&lt;/a&gt;] - an implementation of a &lt;a href="https://socket.io"&gt;socket.io&lt;/a&gt; client written in Rust. &lt;a href="https://github.com/1c3t3a/rust-socketio/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/1c3t3a/rust-socketio/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;SSH 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alexcrichton/ssh2-rs"&gt;alexcrichton/ssh2-rs&lt;/a&gt; - &lt;a href="https://libssh2.org/"&gt;libssh2&lt;/a&gt; bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://pijul.org/thrussh"&gt;Thrussh&lt;/a&gt; [&lt;a href="https://crates.io/crates/thrussh"&gt;thrussh&lt;/a&gt;] - an SSH library, backed by &lt;a href="https://doc.libsodium.org/"&gt;libsodium&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Stomp 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zslayton/stomp-rs"&gt;zslayton/stomp-rs&lt;/a&gt; - A &lt;a href="http://stomp.github.io/stomp-specification-1.2.html"&gt;STOMP 1.2&lt;/a&gt; client implementation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;VPN 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/DefGuard/wireguard-rs"&gt;defguard/wireguard-rs&lt;/a&gt; - A multi-platform library providing a unified high-level API for managing WireGuard interfaces using native OS kernel and userspace WireGuard protocol implementations&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Zenoh 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/eclipse-zenoh-flow/zenoh-flow"&gt;eclipse-zenoh-flow/zenoh-flow&lt;/a&gt; - A declarative framework for computations that span from the &lt;em&gt;Cloud&lt;/em&gt; to the &lt;em&gt;Thing&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/eclipse-zenoh/zenoh"&gt;eclipse-zenoh/zenoh&lt;/a&gt; - Zero Overhead Network Protocol&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ZeroMQ 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/erickt/rust-zmq"&gt;erickt/rust-zmq&lt;/a&gt; - &lt;a href="https://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Parsing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xlane/pe-sign"&gt;0xlane/pe-sign&lt;/a&gt; &lt;a href="https://crates.io/crates/pe-sign"&gt;[pe-sign]&lt;/a&gt; - A cross-platform rust no-std library for verifying and extracting signature information from PE files. &lt;a href="https://crates.io/crates/pe-sign"&gt;&lt;img src="https://img.shields.io/crates/v/pe-sign" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/0xlane/pe-sign/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/0xlane/pe-sign/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cchexcode/wavefront_rs"&gt;cchexcode/wavefront_rs&lt;/a&gt; - A parser for the Wavefront OBJ format. &lt;a href="https://crates.io/crates/wavefront_rs"&gt;&lt;img src="https://img.shields.io/crates/v/wavefront_rs.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/wavefront_rs"&gt;&lt;img src="https://img.shields.io/crates/d/wavefront_rs?label=crates.io%20downloads" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cchexcode/wavefront_rs/actions"&gt;&lt;img src="https://github.com/cchexcode/wavefront_rs/workflows/pipeline/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/comex/rust-shlex"&gt;comex/rust-shlex&lt;/a&gt; [&lt;a href="https://crates.io/crates/shlex"&gt;shlex&lt;/a&gt;] - Split a string into shell words, like Python's shlex. &lt;a href="https://github.com/comex/rust-shlex/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/comex/rust-shlex/actions/workflows/test.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Eliah-Lakhin/lady-deirdre"&gt;Eliah-Lakhin/lady-deirdre&lt;/a&gt; - A framework for new programming languages and LSP servers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Folyd/robotstxt"&gt;Folyd/robotstxt&lt;/a&gt; - Port of Google's robots.txt parser and matcher C++ library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/freestrings/jsonpath"&gt;freestrings/jsonpath&lt;/a&gt; - &lt;a href="https://goessner.net/articles/JsonPath/"&gt;JsonPath&lt;/a&gt; engine. Webassembly and Javascript support too&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/stl_io"&gt;hmeyer/stl_io&lt;/a&gt; - A parser for STL (STereoLithography) files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/igumnoff/shiva"&gt;igumnoff/shiva&lt;/a&gt; - Shiva library: Implementation in Rust of a parser and generator for documents of any type (Plain text, Markdown, HTML, PDF and etc)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kevinmehall/rust-peg"&gt;kevinmehall/rust-peg&lt;/a&gt; - Parsing Expression Grammar (PEG) parser generator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lalrpop/lalrpop"&gt;lalrpop/lalrpop&lt;/a&gt; - LR(1) parser generator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/m4rw3r/chomp"&gt;m4rw3r/chomp&lt;/a&gt; - A fast monadic-style parser combinator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Marwes/combine"&gt;Marwes/combine&lt;/a&gt; - parser combinator library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nrc/zero"&gt;nrc/zero&lt;/a&gt; [&lt;a href="https://crates.io/crates/zero/"&gt;zero&lt;/a&gt;] - zero-allocation parsing of binary data&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pest-parser/pest"&gt;pest-parser/pest&lt;/a&gt; - The Elegant Parser&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ptal/oak"&gt;ptal/oak&lt;/a&gt; - A typed PEG parser generator (compiler plugin)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-bakery/nom"&gt;rust-bakery/nom&lt;/a&gt; - parser combinator library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/s-panferov/queryst"&gt;s-panferov/queryst&lt;/a&gt; - A query string parsing library inspired by &lt;a href="https://github.com/ljharb/qs#readme"&gt;gs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/softdevteam/grmtools/"&gt;softdevteam/grmtools&lt;/a&gt; - A LR parser with better error correction&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;tree-sitter/tree-sitter&lt;/a&gt; - A parser generator tool and an incremental parsing library geared towards programming tools&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Peripherals&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fingerprint reader 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alvaroparker/libfprint-rs"&gt;alvaroparker/libfprint-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/libfprint-rs"&gt;libfprint-rs&lt;/a&gt;] - Libfprint-rs provides a wrapper around the Linux libfprint library.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Serial Port 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/serialport/serialport-rs"&gt;serialport/serialport-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/serialport"&gt;serialport&lt;/a&gt;] - A cross-platform library that provides access to a serial port&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Platform specific&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cross-platform 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/thread-priority/"&gt;iddm/thread-priority&lt;/a&gt; - Simple, crossplatform thread priority management. &lt;a href="https://github.com/iddm/thread-priority/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/thread-priority/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/thread-priority"&gt;&lt;img src="https://img.shields.io/crates/v/thread-priority.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/battery"&gt;svartalf/rust-battery&lt;/a&gt; - Cross-platform information about the notebook batteries&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;FreeBSD 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fubarnetes/libjail-rs/"&gt;fubarnetes/libjail-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/jail"&gt;jail&lt;/a&gt;] - FreeBSD jail library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Linux 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hannobraun/inotify-rs"&gt;hannobraun/inotify-rs&lt;/a&gt; - &lt;a href="https://en.wikipedia.org/wiki/Inotify"&gt;inotify&lt;/a&gt; bindings &lt;a href="https://github.com/hannobraun/inotify-rs/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/hannobraun/inotify-rs/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pop-os/distinst/"&gt;pop-os/distinst&lt;/a&gt; - Linux distribution installer&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/yaa110/rust-iptables"&gt;yaa110/rust-iptables&lt;/a&gt; [&lt;a href="https://crates.io/crates/iptables"&gt;iptables&lt;/a&gt;] - &lt;a href="https://www.netfilter.org/projects/iptables/index.html"&gt;iptables&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Unix-like 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nix-rust/nix"&gt;nix-rust/nix&lt;/a&gt; - Unix-like API bindings &lt;a href="https://cirrus-ci.com/github/nix-rust/nix"&gt;&lt;img src="https://api.cirrus-ci.com/github/nix-rust/nix.svg?sanitize=true" alt="Cirrus Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bytecodealliance/rustix"&gt;rustix&lt;/a&gt; - Safe bindings to POSIX/Unix/Linux/Winsock2 syscalls &lt;a href="https://github.com/bytecodealliance/rustix/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/bytecodealliance/rustix/workflows/CI/badge.svg?sanitize=true" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zargony/fuse-rs"&gt;zargony/fuse-rs&lt;/a&gt; - &lt;a href="https://github.com/libfuse/libfuse"&gt;FUSE&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Windows 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/microsoft/windows-rs"&gt;microsoft/windows-rs&lt;/a&gt; - Rust for Windows &lt;a href="https://github.com/microsoft/windows-rs/actions"&gt;&lt;img src="https://github.com/microsoft/windows-rs/workflows/CI/badge.svg?sanitize=true" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/retep998/winapi-rs"&gt;retep998/winapi-rs&lt;/a&gt; - Windows API bindings &lt;a href="https://github.com/retep998/winapi-rs/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/retep998/winapi-rs/actions/workflows/rust.yml/badge.svg?branch=dev" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Reverse engineering&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/binarly-io/idalib"&gt;binarly-io/idalib&lt;/a&gt; [&lt;a href="https://crates.io/crates/idalib"&gt;idalib&lt;/a&gt;] - Rust bindings for the IDA SDK, enabling the development of standalone analysis tools using IDA v9.0’s idalib&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/encounter/objdiff"&gt;objdiff&lt;/a&gt; - A local diffing tool for decompilation projects&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Scripting&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/scripting"&gt;scripting&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustq/3body-lang"&gt;3body-lang&lt;/a&gt; - The Three Body Language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cel-rust/cel-rust"&gt;cel-rust&lt;/a&gt; [&lt;a href="https://crates.io/crates/cel-interpreter"&gt;cel-interpreter&lt;/a&gt;] - Common expression language parser and interpreter&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/duckscript"&gt;duckscript&lt;/a&gt; - &lt;a href="https://github.com/sagiegurari/duckscript"&gt;Simple, extendable and embeddable scripting language.&lt;/a&gt; &lt;a href="https://github.com/sagiegurari/duckscript/actions"&gt;&lt;img src="https://github.com/sagiegurari/duckscript/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebook/starlark-rust"&gt;facebook/starlark-rust&lt;/a&gt; - A small, deterministic, thread-safe language with Python syntax&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fleabitdev/glsp"&gt;fleabitdev/gamelisp&lt;/a&gt; - A Lisp-like scripting language for game development&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/giraffekey/xylo"&gt;giraffekey/xylo&lt;/a&gt; [&lt;a href="https://crates.io/crates/xylo-lang"&gt;xylo-lang&lt;/a&gt;] - A functional programming language for procedural art. &lt;a href="https://github.com/giraffekey/xylo/actions"&gt;&lt;img src="https://github.com/giraffekey/xylo/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gluon-lang/gluon"&gt;gluon-lang/gluon&lt;/a&gt; - A small, statically-typed, functional programming language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kcl-lang/kcl"&gt;kcl&lt;/a&gt; - A constraint-based record &amp;amp; functional language mainly used in configuration and policy scenarios.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/metacall/core"&gt;metacall/core&lt;/a&gt; [&lt;a href="https://crates.io/crates/metacall"&gt;metacall&lt;/a&gt;] - Cross-platform Polyglot Runtime which supports NodeJS, JavaScript, TypeScript, Python, Ruby, C#, Wasm, Java, Cobol and more. &lt;a href="https://gitlab.com/metacall/core"&gt;&lt;img src="https://gitlab.com/metacall/core/badges/master/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mun-lang/mun"&gt;mun&lt;/a&gt; - A compiled, statically-typed scripting language with first class hot reloading support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/murarth/ketos"&gt;murarth/ketos&lt;/a&gt; - A Lisp dialect functional programming language serving as a scripting and extension language for rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/dyon"&gt;PistonDevelopers/dyon&lt;/a&gt; - A rusty dynamically typed scripting language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rhaiscript/rhai"&gt;rhaiscript/rhai&lt;/a&gt; - A tiny and fast embedded scripting language resembling a combination of JavaScript and Rust &lt;a href="https://github.com/rhaiscript/rhai/actions"&gt;&lt;img src="https://github.com/rhaiscript/rhai/workflows/Build/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rune-rs/rune"&gt;rune-rs/rune&lt;/a&gt; - An embeddable dynamic programming language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trynova/nova"&gt;trynova/nova&lt;/a&gt; - JavaScript engine written entirely in Rust&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Simulation&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/simulation"&gt;simulation&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/nyx-space"&gt;nyx-space&lt;/a&gt; - High fidelity, fast, reliable and validated astrodynamical toolkit library, used for spacecraft mission design and orbit determination &lt;a href="https://gitlab.com/nyx-space/nyx/-/pipelines"&gt;&lt;img src="https://gitlab.com/nyx-space/nyx/badges/master/pipeline.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Social networks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Telegram 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/FedericoBruzzone/tdlib-rs"&gt;tdilb-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/tdlib-rs"&gt;tdilb-rs&lt;/a&gt;] - Crossplatform Rust wrapper around the Telegram Database Library (TDLib) &lt;a href="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-linux.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-linux.yml/badge.svg?sanitize=true" alt="CI Linux" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-macos.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-macos.yml/badge.svg?sanitize=true" alt="CI macOS" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-windows.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-windows.yml/badge.svg?sanitize=true" alt="CI Windows" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;System&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ardaku/whoami"&gt;ardaku/whoami&lt;/a&gt; [&lt;a href="https://crates.io/crates/whoami"&gt;whoami&lt;/a&gt;] - crate to get the current user and environment. &lt;a href="https://github.com/ardaku/whoami/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ardaku/whoami/actions/workflows/ci.yml/badge.svg?branch=stable" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GuillaumeGomez/sysinfo"&gt;GuillaumeGomez/sysinfo&lt;/a&gt; [&lt;a href="https://crates.io/crates/sysinfo"&gt;sysinfo&lt;/a&gt;] - Cross-platform library to fetch system information &lt;a href="https://github.com/GuillaumeGomez/sysinfo/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/GuillaumeGomez/sysinfo/actions/workflows/CI.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/navidys/procsys"&gt;navidys/procsys&lt;/a&gt; [&lt;a href="https://crates.io/crates/procsys"&gt;procsys&lt;/a&gt;] - A library to retrieve system, kernel, and process metrics from the pseudo-filesystems /proc and /sys.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Phate6660/nixinfo"&gt;Phate6660/nixinfo&lt;/a&gt; [&lt;a href="https://crates.io/crates/nixinfo"&gt;nixinfo&lt;/a&gt;] - A lib crate for gathering system info such as cpu, distro, environment, kernel, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/sysexits-rs"&gt;sorairolake/sysexits-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/sysexits"&gt;sysexits&lt;/a&gt;] - The system exit codes as defined by &lt;a href="https://manpages.ubuntu.com/manpages/lunar/man3/sysexits.h.3head.html"&gt;&lt;code&gt;&amp;lt;sysexits.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. &lt;a href="https://github.com/sorairolake/sysexits-rs/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/sysexits-rs/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Task scheduling&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BinChengZhao/delay-timer"&gt;delay-timer&lt;/a&gt; - Time-manager of delayed tasks. Like crontab, but asynchronous tasks are possible. &lt;a href="https://github.com/BinChengZhao/delay-timer/actions"&gt;&lt;img src="https://github.com/BinChengZhao/delay-timer/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustmailer/persistent-scheduler"&gt;persistent-scheduler&lt;/a&gt; [&lt;a href="https://crates.io/crates/persistent-scheduler"&gt;persistent-scheduler&lt;/a&gt;] - A high-performance task scheduling system built with Tokio, offering task persistence, repeatable tasks, and Cron-based scheduling for reliable time-based operations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Template engine&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Handlebars 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sunng87/handlebars-rust"&gt;sunng87/handlebars-rust&lt;/a&gt; - Handlebars template engine with inheritance, custom helper support.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zzau13/yarte"&gt;zzau13/yarte&lt;/a&gt; - Yarte stands for &lt;strong&gt;Y&lt;/strong&gt;et &lt;strong&gt;A&lt;/strong&gt;nother &lt;strong&gt;R&lt;/strong&gt;ust &lt;strong&gt;T&lt;/strong&gt;emplate &lt;strong&gt;E&lt;/strong&gt;ngine, is the fastest template engine.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/askama-rs/askama"&gt;askama&lt;/a&gt; - template rendering engine based on Jinja&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kaj/ructe"&gt;kaj/ructe&lt;/a&gt; - HTML template system&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Keats/tera"&gt;Keats/tera&lt;/a&gt; - template engine based on Jinja2 and the Django template language. &lt;a href="https://github.com/Keats/tera/actions"&gt;&lt;img src="https://github.com/Keats/tera/workflows/ci/badge.svg?branch=master" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lambda-fairy/maud"&gt;lambda-fairy/maud&lt;/a&gt; - compile-time HTML templates&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stebalien/horrorshow-rs"&gt;Stebalien/horrorshow-rs&lt;/a&gt; - compile-time HTML templates&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mustache 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustache/rustache"&gt;rustache/rustache&lt;/a&gt; - a Rust implementation of the Mustache spec&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Text processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/becheran/wildmatch"&gt;becheran/wildmatch&lt;/a&gt; [&lt;a href="https://crates.io/crates/wildmatch"&gt;wildmatch&lt;/a&gt;] - Simple string matching with questionmark- and star-wildcard operator &lt;a href="https://github.com/becheran/wildmatch/actions"&gt;&lt;img src="https://github.com/becheran/wildmatch/workflows/Build/badge.svg?branch=master" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurntSushi/suffix"&gt;BurntSushi/suffix&lt;/a&gt; - Linear time suffix array construction (with Unicode support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurntSushi/tabwriter"&gt;BurntSushi/tabwriter&lt;/a&gt; - Elastic tab stops (i.e., text column alignment)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/probablykasper/cpc"&gt;cpc&lt;/a&gt; - Parses and calculates strings of math with support for units and unit conversion, from &lt;code&gt;1+2&lt;/code&gt; to &lt;code&gt;1% of round(1 lightyear / 14!s to km/h)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Daniel-Liu-c0deb0t/triple_accel"&gt;Daniel-Liu-c0deb0t/triple_accel&lt;/a&gt; [&lt;a href="https://crates.io/crates/triple_accel"&gt;triple_accel&lt;/a&gt;] - Rust edit distance routines accelerated using SIMD; supports fast Hamming, Levenshtein, restricted Damerau-Levenshtein, etc. distance calculations and string search &lt;a href="https://github.com/Daniel-Liu-c0deb0t/triple_accel/actions"&gt;&lt;img src="https://github.com/Daniel-Liu-c0deb0t/triple_accel/workflows/Test/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fancy-regex/fancy-regex"&gt;fancy-regex/fancy-regex&lt;/a&gt; [&lt;a href="https://crates.io/crates/fancy-regex"&gt;fancy-regex&lt;/a&gt;] - Regular expressions implementation designed to support a relatively rich set of features such as look-around and backtracking. &lt;a href="https://crates.io/crates/fancy-regex"&gt;&lt;img src="https://img.shields.io/crates/v/fancy-regex.svg?sanitize=true" alt="crates" /&gt;&lt;/a&gt; &lt;a href="https://github.com/fancy-regex/fancy-regex/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/fancy-regex/fancy-regex/workflows/ci/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/greyblake/whatlang-rs"&gt;greyblake/whatlang-rs&lt;/a&gt; - Natural language detection library based on trigrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Lucretiel/joinery"&gt;Lucretiel/joinery&lt;/a&gt; [&lt;a href="https://crates.io/crates/joinery"&gt;joinery&lt;/a&gt;] - Generic string + iterable joining&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mgeisler/textwrap"&gt;mgeisler/textwrap&lt;/a&gt; [&lt;a href="https://crates.io/crates/textwrap"&gt;textwrap&lt;/a&gt;] - Word wrap text (with support for hyphenation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/null8626/decancer"&gt;null8626/decancer&lt;/a&gt; [&lt;a href="https://crates.io/crates/decancer"&gt;decancer&lt;/a&gt;] - A tiny package that removes common unicode confusables/homoglyphs from strings. &lt;a href="https://crates.io/crates/decancer"&gt;&lt;img src="https://img.shields.io/crates/v/decancer.svg?sanitize=true" alt="crates" /&gt;&lt;/a&gt; &lt;a href="https://github.com/null8626/decancer/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/null8626/decancer/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ps1dr3x/easy_reader"&gt;ps1dr3x/easy_reader&lt;/a&gt; - A reader that allows forwards, backwards and random navigations through the lines of huge files without consuming iterators&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pwoolcoc/ngrams"&gt;pwoolcoc/ngrams&lt;/a&gt; [&lt;a href="https://crates.io/crates/ngrams"&gt;ngrams&lt;/a&gt;] - Construct &lt;a href="https://en.wikipedia.org/wiki/N-gram"&gt;n-grams&lt;/a&gt; from arbitrary iterators&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/regex"&gt;rust-lang/regex&lt;/a&gt; - Regular expressions (RE2 style)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/strsim"&gt;strsim-rs&lt;/a&gt; - String similarity metrics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yaa110/rake-rs"&gt;yaa110/rake-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/rake"&gt;rake&lt;/a&gt;] - Multilingual implementation of RAKE algorithm for Rust&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Text search&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andylokandy/simsearch-rs"&gt;andylokandy/simsearch-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/simsearch"&gt;simsearch&lt;/a&gt;] - A simple and lightweight fuzzy search engine that works in memory, searching for similar strings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurntSushi/fst"&gt;BurntSushi/fst&lt;/a&gt; [&lt;a href="https://crates.io/crates/fst"&gt;fst&lt;/a&gt;] - a fast implementation of ordered sets and maps using finite state machines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CurrySoftware/perlin"&gt;CurrySoftware/perlin&lt;/a&gt; [&lt;a href="https://crates.io/crates/perlin"&gt;perlin&lt;/a&gt;] - A lazy, zero-allocation and data-agnostic Information Retrieval library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meilisearch/MeiliSearch"&gt;meilisearch/MeiliSearch&lt;/a&gt; - Ultra relevant, instant and typo-tolerant full-text search API. &lt;a href="https://github.com/meilisearch/MeiliSearch/actions"&gt;&lt;img src="https://github.com/meilisearch/MeiliSearch/workflows/Cargo%20test/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradedb/paradedb/tree/dev/pg_search"&gt;pg_search&lt;/a&gt; - PostgreSQL extension that enables full-text search over SQL tables using the BM25 algorithm, the state-of-the-art ranking function for full-text search.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SeekStorm/SeekStorm"&gt;SeekStorm&lt;/a&gt; [&lt;a href="https://crates.io/crates/seekstorm"&gt;SeekStorm&lt;/a&gt;] - sub-millisecond full-text search library &amp;amp; multi-tenancy server in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quickwit-oss/tantivy"&gt;tantivy&lt;/a&gt; [&lt;a href="https://crates.io/crates/tantivy"&gt;tantivy&lt;/a&gt;] - A horse-speed full-text search engine library written in Rust. &lt;a href="https://github.com/quickwit-oss/tantivy/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/quickwit-oss/tantivy/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Unsafe&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/zerocopy"&gt;zerocopy&lt;/a&gt; - "Zerocopy makes zero-cost memory manipulation effortless. We write &lt;code&gt;unsafe&lt;/code&gt; so you don’t have to."&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Video&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nathanbabcock/ffmpeg-sidecar"&gt;ffmpeg-sidecar&lt;/a&gt; - Wrap a standalone FFmpeg binary in an intuitive Iterator interface. &lt;a href="https://github.com/nathanbabcock/ffmpeg-sidecar/actions"&gt;&lt;img src="https://github.com/nathanbabcock/ffmpeg-sidecar/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Virtualization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/beneills/quantum"&gt;beneills/quantum&lt;/a&gt; - Advanced quantum computer simulator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bytecodealliance/wasmtime"&gt;bytecodealliance/wasmtime&lt;/a&gt; - A standalone runtime for WebAssembly &lt;a href="https://github.com/bytecodealliance/wasmtime/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/bytecodealliance/wasmtime/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://chromium.googlesource.com/chromiumos/platform/crosvm/"&gt;chromium/chromiumos/platform/crosvm&lt;/a&gt; - CrOSVM Enables Chrome OS to run Linux apps inside a fast, secure virtualized environment&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oxidecomputer/propolis"&gt;oxidecomputer/propolis&lt;/a&gt; - Userspace program for illumos bhyve kernel modules&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saurvs/hypervisor-rs"&gt;saurvs/hypervisor-rs&lt;/a&gt; - Hardware-accelerated virtualization on OS X&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Web programming&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://www.arewewebyet.org"&gt;Are we web yet?&lt;/a&gt; and &lt;a href="https://github.com/flosse/rust-web-framework-comparison"&gt;Rust web framework comparison&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Client-side / WASM 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-web"&gt;cargo-web&lt;/a&gt; - A Cargo subcommand for the client-side Web&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/leptos-rs/leptos"&gt;leptos&lt;/a&gt; - Leptos is a full-stack, isomorphic web framework leveraging fine-grained reactivity to build declarative user interfaces.&lt;a href="https://crates.io/crates/leptos"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ivanceras/sauron"&gt;sauron&lt;/a&gt; - Client side web framework which closely adheres to The Elm Architecture.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/seed-rs/seed"&gt;seed&lt;/a&gt; - A framework for creating web apps&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/stdweb"&gt;stdweb&lt;/a&gt; - A standard library for the client-side Web&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LiveDuo/tinyweb"&gt;tinyweb&lt;/a&gt; - A minimal Rust web framework for wasm in 800 lines of code&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/yew"&gt;yew&lt;/a&gt; - A framework for making client web apps&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP Client 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/0x676e67/wreq"&gt;0x676e67/wreq&lt;/a&gt; - An ergonomic Rust HTTP Client with TLS fingerprint. &lt;a href="https://github.com/0x676e67/wreq/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/0x676e67/wreq/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/wreq"&gt;&lt;img src="https://img.shields.io/crates/v/wreq.svg?logo=rust" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alexcrichton/curl-rust"&gt;alexcrichton/curl-rust&lt;/a&gt; - &lt;a href="https://curl.se/libcurl/"&gt;libcurl&lt;/a&gt; bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/async-graphql/async-graphql"&gt;async-graphql&lt;/a&gt; - A GraphQL server library &lt;a href="https://dev.azure.com/graphql-rust/GraphQL%20Rust/_build/latest?definitionId=1"&gt;&lt;img src="https://dev.azure.com/graphql-rust/GraphQL%20Rust/_apis/build/status/graphql-rust.juniper" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx"&gt;c410-f3r/wtx&lt;/a&gt; - HTTP/2 client framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/Douman/yukikaze"&gt;DoumanAsh/yukikaze&lt;/a&gt; [&lt;a href="https://crates.io/crates/yukikaze"&gt;yukikaze&lt;/a&gt;] - Beautiful and elegant Yukikaze is little HTTP client library based on hyper. &lt;a href="https://gitlab.com/Douman/yukikaze"&gt;&lt;img src="https://gitlab.com/Douman/yukikaze/badges/master/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ducaale/xh"&gt;ducaale/xh&lt;/a&gt; - Friendly and fast tool for sending HTTP requests &lt;a href="https://crates.io/crates/xh"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ducaale/xh/actions"&gt;&lt;img src="https://github.com/ducaale/xh/workflows/CI/badge.svg?branch=master" alt="GitHub actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/graphql-rust/graphql-client"&gt;graphql-client&lt;/a&gt; - Typed, correct GraphQL requests and responses. &lt;a href="https://github.com/graphql-rust/graphql-client/actions"&gt;&lt;img src="https://github.com/graphql-rust/graphql-client/workflows/CI/badge.svg?branch=master" alt="GitHub actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hyperium/hyper"&gt;hyperium/hyper&lt;/a&gt; - an HTTP implementation &lt;a href="https://github.com/hyperium/hyper/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/hyperium/hyper/workflows/CI/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/plabayo/rama"&gt;plabayo/rama&lt;/a&gt; - A modular service framework to move and transform your network packets, can be used among other things, to build clients with TLS, JA3/JA4, H2 and QUIC/H3 fingerprint impersonation&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/seanmonstar/reqwest"&gt;seanmonstar/reqwest&lt;/a&gt; - an ergonomic HTTP Client.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP Server 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/actix/actix-web"&gt;actix/actix-web&lt;/a&gt; - A lightweight async web framework with websocket support&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/saru-tora/anansi"&gt;Anansi&lt;/a&gt; - A simple full-stack web framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/branca"&gt;branca&lt;/a&gt; - Implementation of Branca for Authenticated and Encrypted API tokens.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx"&gt;c410-f3r/wtx&lt;/a&gt; - Low and high level HTTP/2 server&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/carllerche/tower-web"&gt;carllerche/tower-web&lt;/a&gt; [&lt;a href="https://crates.io/crates/tower-web"&gt;tower-web&lt;/a&gt;] - A fast, boilerplate free, web framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cot-rs/cot"&gt;Cot&lt;/a&gt; - The Rust web framework for lazy developers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GildedHonour/frank_jwt"&gt;GildedHonour/frank_jwt&lt;/a&gt; - JSON Web Token implementation.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gotham-rs/gotham"&gt;Gotham&lt;/a&gt; - A flexible web framework that does not sacrifice safety, security or speed.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/graphul-rs/graphul"&gt;Graphul&lt;/a&gt; - An Express-inspired web framework. &lt;a href="https://crates.io/crates/graphul"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sunng87/handlebars-rust"&gt;handlebars-rust&lt;/a&gt; - an Iron web framework middleware.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hyperium/hyper"&gt;hyperium/hyper&lt;/a&gt; - an HTTP implementation &lt;a href="https://github.com/hyperium/hyper/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/hyperium/hyper/workflows/CI/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iron/iron"&gt;Iron&lt;/a&gt; - A middleware-based server framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/graphql-rust/juniper"&gt;Juniper&lt;/a&gt; - GraphQL server library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/miketang84/sapper"&gt;miketang84/sapper&lt;/a&gt; - A lightweight web framework built on async hyper.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nickel-org/nickel.rs/"&gt;Nickel&lt;/a&gt; - inspired by &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/plabayo/rama"&gt;plabayo/rama&lt;/a&gt; - A modular service framework to move and transform your network packets, can also be used to fingerprint incoming clients&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/poem-web/poem"&gt;poem-web/poem&lt;/a&gt; - A full-featured and easy-to-use web framework. &lt;a href="https://github.com/poem-web/poem/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/poem-web/poem/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rwf2/Rocket"&gt;Rocket&lt;/a&gt; - Rocket is a web framework with a focus on ease-of-use, expressability, and speed&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustless/rustless"&gt;Rustless&lt;/a&gt; - A REST-like API micro-framework inspired by &lt;a href="https://github.com/ruby-grape/grape"&gt;Grape&lt;/a&gt; and &lt;a href="https://github.com/hyperium/hyper"&gt;Hyper&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/salvo-rs/salvo"&gt;Salvo&lt;/a&gt; - an easy to use webframework base on hyper and tokio. &lt;a href="https://github.com/salvo-rs/salvo/actions"&gt;&lt;img src="https://github.com/salvo-rs/salvo/actions/workflows/release.yml/badge.svg?sanitize=true" alt="build build" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/richerarc/saphir"&gt;Saphir&lt;/a&gt; - A progressive web framework with low-level control, without the pain.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/seanmonstar/warp"&gt;seanmonstar/warp&lt;/a&gt; - A super-easy, composable, web server framework for warp speeds. &lt;a href="https://crates.io/crates/warp"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/spring-rs/spring-rs"&gt;spring-rs&lt;/a&gt; - spring-rs is a application framework written in rust inspired by java's spring-boot.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tiny-http/tiny-http"&gt;tiny-http&lt;/a&gt; - Low level HTTP server library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tokio-rs/axum"&gt;tokio/axum&lt;/a&gt; - Ergonomic and modular web framework built with Tokio, Tower, and Hyper &lt;a href="https://github.com/tokio-rs/axum/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/tokio-rs/axum/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tomaka/rouille"&gt;tomaka/rouille&lt;/a&gt; - Web framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zino-rs/zino"&gt;Zino&lt;/a&gt; - Next-generation framework for composable applications&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Miscellaneous 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cargonauts-rs/cargonauts"&gt;cargonauts&lt;/a&gt; - A web framework intended for building maintainable, well-factored web apps.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/edezhic/prest"&gt;edezhic/prest&lt;/a&gt; [&lt;a href="https://crates.io/crates/prest"&gt;prest&lt;/a&gt;] - Progressive RESTful framework aimed to simplify fullstack development&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hominee/dyer"&gt;hominee/dyer&lt;/a&gt; [&lt;a href="https://crates.io/crates/dyer"&gt;dyer&lt;/a&gt;] - dyer is designed for reliable, flexible and fast Request-Response based service, including data processing, web-crawling and so on, providing some friendly, flexible, comprehensive features without compromising speed.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/osohq/oso"&gt;osohq/oso&lt;/a&gt; [&lt;a href="https://crates.io/crates/oso"&gt;oso&lt;/a&gt;] - A policy engine for authorization that's embedded in your application. &lt;a href="https://github.com/osohq/oso/actions?query=branch%3Amain+workflow%3ADevelopment"&gt;&lt;img src="https://github.com/osohq/oso/workflows/Development/badge.svg?branch=main" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/pwoolcoc/soup"&gt;pwoolcoc/soup&lt;/a&gt; [&lt;a href="https://crates.io/crates/soup"&gt;soup&lt;/a&gt;] - A library similar to Python's BeautifulSoup, designed to enable quick and easy manipulation and querying of HTML documents. &lt;a href="https://gitlab.com/pwoolcoc/soup/badges/master/pipeline.svg"&gt;&lt;img src="https://gitlab.com/pwoolcoc/soup/badges/master/pipeline.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://git.sr.ht/~pyrossh/rust-embed"&gt;pyrossh/rust-embed&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust-embed"&gt;rust-embed&lt;/a&gt;] - A macro to embed static assets into the rust binary&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/thewh1teagle/rookie"&gt;rookie&lt;/a&gt; - Load cookies from any browser on any platform. &lt;img src="https://img.shields.io/crates/v/rookie.svg?sanitize=true" alt="crates.io" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-scraper/scraper"&gt;rust-scraper/scraper&lt;/a&gt; [&lt;a href="https://crates.io/crates/scraper"&gt;scraper&lt;/a&gt;] - HTML parsing and querying with CSS selectors. &lt;a href="https://github.com/rust-scraper/scraper/actions"&gt;&lt;img src="https://github.com/rust-scraper/scraper/actions/workflows/test.yml/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/serenity-rs/serenity"&gt;serenity-rs/serenity&lt;/a&gt; [&lt;a href="https://crates.io/crates/serenity"&gt;serenity&lt;/a&gt;] - A library for the Discord API&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/softprops/openapi"&gt;softprops/openapi&lt;/a&gt; - A library for processing openapi spec files&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/svix/svix-webhooks"&gt;svix/svix-webhooks&lt;/a&gt; [&lt;a href="https://crates.io/crates/svix"&gt;svix&lt;/a&gt;] - A library for sending webhooks and verifying signatures.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/SnejUgal/tbot"&gt;tbot&lt;/a&gt; [&lt;a href="https://crates.io/crates/tbot"&gt;tbot&lt;/a&gt;] - Make cool Telegram bots easily &lt;a href="https://gitlab.com/SnejUgal/tbot/-/commits/master"&gt;&lt;img src="https://gitlab.com/SnejUgal/tbot/badges/master/pipeline.svg?sanitize=true" alt="pipeline status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/teloxide/teloxide/"&gt;teloxide/teloxide&lt;/a&gt; - An elegant Telegram bots framework &lt;a href="https://github.com/teloxide/teloxide/actions"&gt;&lt;img src="https://github.com/teloxide/teloxide/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tu6ge/valitron"&gt;tu6ge/valitron&lt;/a&gt; [&lt;a href="https://crates.io/crates/valitron"&gt;valitron&lt;/a&gt;] - An ergonomic, functional and configurable validator&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/utkarshkukreti/select.rs"&gt;utkarshkukreti/select.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/select"&gt;select&lt;/a&gt;] - A library to extract useful data from HTML documents, suitable for web scraping.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/juhaku/utoipa"&gt;Utoipa&lt;/a&gt; - Simple, Fast, Code first and Compile time generated OpenAPI documentation &lt;a href="https://crates.io/crates/utoipa"&gt;&lt;img src="https://img.shields.io/crates/v/utoipa.svg?label=crates.io&amp;amp;color=orange&amp;amp;logo=rust" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/juhaku/utoipa/actions/workflows/build.yaml"&gt;&lt;img src="https://github.com/juhaku/utoipa/actions/workflows/build.yaml/badge.svg?sanitize=true" alt="Utoipa build" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ProbablyClem/utoipauto"&gt;Utoipauto&lt;/a&gt; - Rust Macros to automate the addition of Paths/Schemas to Utoipa &lt;a href="https://crates.io/crates/utoipauto"&gt;&lt;img src="https://img.shields.io/crates/v/utoipauto.svg?label=crates.io&amp;amp;color=orange&amp;amp;logo=rust" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Reverse Proxy 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sozu-proxy/sozu"&gt;sozu-proxy/sozu&lt;/a&gt; [&lt;a href="https://crates.io/crates/sozu"&gt;sozu&lt;/a&gt;] - A HTTP reverse proxy. &lt;a href="https://github.com/sozu-proxy/sozu/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/sozu-proxy/sozu/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Static Site Generators 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cobalt-org/cobalt.rs"&gt;cobalt-org/cobalt.rs&lt;/a&gt; - Static site generator &lt;a href="https://dev.azure.com/cobalt-org/cobalt-org/_build?definitionId=2"&gt;&lt;img src="https://dev.azure.com/cobalt-org/cobalt-org/_apis/build/status/cobalt.rs?branchName=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/FuGangqiang/mdblog.rs"&gt;FuGangqiang/mdblog.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/mdblog"&gt;mdblog&lt;/a&gt;] - Static site generator from markdown files.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/getzola/zola"&gt;getzola/zola&lt;/a&gt; [&lt;a href="https://www.getzola.org/"&gt;zola&lt;/a&gt;] - An opinionated static site generator with everything built-in. &lt;a href="https://dev.azure.com/getzola/zola/_build"&gt;&lt;img src="https://dev.azure.com/getzola/zola/_apis/build/status/getzola.zola?branchName=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/grego/blades"&gt;grego/blades&lt;/a&gt; [&lt;a href="https://www.getblades.org/"&gt;blades&lt;/a&gt;] - Blazing fast dead simple static site generator.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/leven-the-blog/leven"&gt;leven-the-blog/leven&lt;/a&gt; [&lt;a href="https://crates.io/crates/leven"&gt;leven&lt;/a&gt;] - A simple, parallelized blog generator.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rochacbruno/marmite/"&gt;rochacbruno/marmite&lt;/a&gt; [&lt;a href="https://marmite.blog/"&gt;Marmite&lt;/a&gt;] - Zero config blog generator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/rfc6455/"&gt;WebSocket&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx"&gt;c410-f3r/wtx&lt;/a&gt; - Client and server with encryption support.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/housleyjk/ws-rs"&gt;housleyjk/ws-rs&lt;/a&gt; - lightweight, event-driven WebSockets&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/urlshortener-rs"&gt;iddm/urlshortener-rs&lt;/a&gt; - A very simple urlshortener library. &lt;a href="https://github.com/iddm/urlshortener-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/urlshortener-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/urlshortener"&gt;&lt;img src="https://img.shields.io/crates/v/urlshortener.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/graphform/ratchet"&gt;ratchet&lt;/a&gt; [&lt;a href="https://crates.io/crates/ratchet_rs"&gt;ratchet_rs&lt;/a&gt;] - Ratchet is a fast, lightweight and fully asynchronous implementation of the WebSocket protocol with support for extensions and Deflate.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/websockets-rs/rust-websocket"&gt;rust-websocket&lt;/a&gt; - A framework for dealing with WebSocket connections (both clients and servers)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/snapview/tungstenite-rs"&gt;snapview/tungstenite-rs&lt;/a&gt; - Lightweight stream-based WebSocket implementation.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vi/websocat"&gt;vi/websocat&lt;/a&gt; - CLI for interacting with WebSockets, with functionality of Netcat, Curl and Socat.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Registries&lt;/h2&gt; 
&lt;p&gt;A registry allows you to publish your Rust libraries as crate packages, to share them with others publicly and privately.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cenotelie/cratery"&gt;cenotelie/cratery&lt;/a&gt; - A lightweight private cargo registry with batteries included, built for organisations, including features similar to &lt;a href="https://docs.rs"&gt;docs.rs&lt;/a&gt; and &lt;a href="https://deps.rs"&gt;deps.rs&lt;/a&gt;. &lt;a href="https://github.com/cenotelie/cratery/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/cenotelie/cratery/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudsmith.com/product/formats/cargo-registry"&gt;Cloudsmith &lt;span&gt;💲&lt;/span&gt;&lt;/a&gt; - A fully managed package management SaaS, with first-class support for public and private Cargo/Rust registries (plus many others). Has a generous free-tier and is also completely free for open-source.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io"&gt;Crates&lt;/a&gt; - The official public registry for Rust/Cargo.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.repoflow.io"&gt;RepoFlow&lt;/a&gt; - A simple and modern repository platform that can host Rust crate repositories and proxy crates.io. Also supports other package types like Docker, PyPI, Maven, npm, and RubyGems. Available as a cloud service or self-hosted.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/w4/chartered"&gt;w4/chartered&lt;/a&gt; - A private, authenticated, permissioned Cargo registry &lt;a href="https://github.com/w4/chartered/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/w4/chartered/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/rustaceans/make-it-mandatory-a-brief-history-of-rust-part-1-805459c60c6b"&gt;A Brief History of Rust. Part 1&lt;/a&gt; - From a developer's pursuit of software stability to a project that nearly destabilized its creator. &lt;a href="https://medium.com/rustaceans/make-it-mandatory-a-brief-history-of-rust-part-2-981d61451aa5"&gt;Part 2&lt;/a&gt;. &lt;a href="https://medium.com/rustaceans/make-it-mandatory-a-brief-history-of-rust-part-2-b8c0f7a7e781?sk=c0e7fe5fde11a62edc23f284f125aa18"&gt;Part 3&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Benchmarks 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx-bench"&gt;c410-f3r/wtx-bench&lt;/a&gt; - Web benchmarks&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/TeXitoi/benchmarksgame-rs"&gt;TeXitoi/benchmarksgame-rs&lt;/a&gt; - Implementations for the &lt;a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/"&gt;The Computer Language Benchmarks Game&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Decks &amp;amp; Presentations 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://speakerdeck.com/jvns/learning-systems-programming-with-rust"&gt;Learning systems programming with Rust&lt;/a&gt; - Presented by &lt;a href="https://twitter.com/@b0rk"&gt;Julia Evans&lt;/a&gt; @ Rustconf 2016.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lO1z-7cuRYI"&gt;Rust: Hack Without Fear!&lt;/a&gt; - Presented by &lt;a href="https://github.com/nikomatsakis"&gt;Nicholas Matsakis&lt;/a&gt; @ C++Now 2018&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=t4CyEKb-ywA"&gt;Shipping a Solid Rust Crate&lt;/a&gt; - Presented by &lt;a href="https://github.com/mgattozzi"&gt;Michael Gattozzi&lt;/a&gt; @ RustConf 2017&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Learning 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://rust-exercises.com"&gt;100 Exercises To Learn Rust&lt;/a&gt; - Learn Rust through 100 hands-on exercises, covering syntax, types, and more&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cognitive-engineering-lab/aquascope"&gt;Aquascope&lt;/a&gt; - Interactive visualizations of Rust at compile-time and run-time&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jamesmunns/awesome-rust-streaming"&gt;Awesome Rust Streaming&lt;/a&gt; - A community curated list of livestreams.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rustbeginners.github.io/awesome-rust-mentors/"&gt;awesome-rust-mentors&lt;/a&gt; - A list of helpful mentors willing to take mentees and educate them about Rust and programming.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="http://cis198-2016s.github.io/schedule/"&gt;CIS 198: Rust Programming&lt;/a&gt; - University of Pennsylvania's Comp Sci Rust Programming Course&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://app.codecrafters.io/tracks/rust"&gt;CodeCrafters.io&lt;/a&gt; - Build your own Redis, Git, Docker, or SQLite&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://google.github.io/comprehensive-rust/"&gt;Comprehensive Rust 🦀&lt;/a&gt; - A 3-day course on Rust Fundamentals plus 1-day courses on Android, Bare-metal Rust, and Concurrency. Available in English, &lt;a href="https://google.github.io/comprehensive-rust/pt-BR/"&gt;Brazilian Portuguese&lt;/a&gt;, and &lt;a href="https://google.github.io/comprehensive-rust/ko/"&gt;Korean&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Dhghomon/easy_rust"&gt;Easy Rust&lt;/a&gt; - Learn Rust in easy English.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://exercism.org/tracks/rust"&gt;exercism.org&lt;/a&gt; - programming exercises that help you learn new concepts in Rust.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://pragprog.com/titles/hwrust/hands-on-rust/"&gt;Hands-on Rust&lt;/a&gt; - A hands-on guide to learning Rust by making games - by &lt;a href="https://github.com/thebracket/"&gt;Herbert Wolverson&lt;/a&gt; (paid)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mre/idiomatic-rust"&gt;Idiomatic Rust&lt;/a&gt; - A peer-reviewed collection of articles/talks/repos which teach idiomatic Rust.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://labex.io/skilltrees/rust"&gt;LabEx Rust Skill Tree&lt;/a&gt; - A structured Rust learning path with hands-on labs, designed for beginners to master Rust step by step.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rust-lang.guide/"&gt;Learn Rust 101&lt;/a&gt; - A guide to aid you in your journey of becoming a Rustacean (Rust developer)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cuppar/rtd"&gt;Learn Rust by 500 lines code&lt;/a&gt; - Learn Rust by 500 lines code, build a Todo Cli Application from scratch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rust-unofficial.github.io/too-many-lists/"&gt;Learning Rust With Entirely Too Many Linked Lists&lt;/a&gt; - in-depth exploration of Rust's memory management rules, through implementing a few different types of list structures.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://lborb.github.io/book/"&gt;Little Book of Rust Books&lt;/a&gt; - Curated list of rust books and how-tos.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://hackr.io/tutorials/learn-rust"&gt;Programming Community Curated Resources for Learning Rust&lt;/a&gt; - A list of recommended resources voted by the programming community.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.manning.com/books/refactoring-to-rust"&gt;Refactoring to Rust&lt;/a&gt; - A book that introduces to Rust language.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://doc.rust-lang.org/rust-by-example/"&gt;Rust by Example&lt;/a&gt; - a collection of runnable examples that illustrate various Rust concepts and standard libraries.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rust-lang-nursery.github.io/rust-cookbook/"&gt;Rust Cookbook&lt;/a&gt; - A collection of simple examples that demonstrate good practices to accomplish common programming tasks, using the crates of the Rust ecosystem.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ad-si/Rust-Flashcards"&gt;Rust Flashcards&lt;/a&gt; - Over 550 flashcards to learn Rust from first principles.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://overexact.com/rust-for-professionals/"&gt;Rust for professionals&lt;/a&gt; - A quick introduction to Rust for experienced software developers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/warycat/rustgym"&gt;Rust Gym&lt;/a&gt; - A big collection of coding interview problems solved in Rust.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.manning.com/books/rust-in-action"&gt;Rust in Action&lt;/a&gt; - A hands-on guide to systems programming with Rust by &lt;a href="https://github.com/timClicks"&gt;Tim McNamara&lt;/a&gt; (paid)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.manning.com/livevideo/rust-in-motion?a_aid=cnichols&amp;amp;a_bid=6a993c2e"&gt;Rust in Motion&lt;/a&gt; - A video series by &lt;a href="https://github.com/carols10cents"&gt;Carol Nichols&lt;/a&gt; and &lt;a href="https://github.com/shepmaster"&gt;Jake Goulding&lt;/a&gt; (paid)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://cheats.rs/"&gt;Rust Language Cheat Sheet&lt;/a&gt; - Rust Language Cheat Sheet&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rust-tieng-viet.github.io/"&gt;Rust Tiếng Việt&lt;/a&gt; - Learn Rust in Vietnamese.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jondot/rust-how-do-i-start"&gt;rust-how-do-i-start&lt;/a&gt; - A repo dedicated to answering the question: "So, Rust. How do I &lt;em&gt;start&lt;/em&gt;?". A beginner only hand-picked resources and learning track.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ctjhoa/rust-learning"&gt;rust-learning&lt;/a&gt; - A collection of useful resources to learn Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.rustfinity.com"&gt;Rustfinity&lt;/a&gt; - Interactive platform for practicing Rust through hands-on exercises and challenges&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rustlings"&gt;Rustlings&lt;/a&gt; - small exercises to get you used to reading and writing Rust code&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AbdesamedBendjeddou/Rusty-CS"&gt;Rusty CS&lt;/a&gt; - A Computer Science Curriculum that helps practice the acquired academic knowledge in Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/brson/stdx"&gt;stdx&lt;/a&gt; - Learn these crates first as an extension to std&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://tourofrust.com"&gt;Tour of Rust&lt;/a&gt; - This is meant to be an interactive step by step guide through the features of the Rust programming language.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Podcasts 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://newrustacean.com"&gt;New Rustacean&lt;/a&gt; - A podcast about learning Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rustacean-station.org/"&gt;Rustacean Station&lt;/a&gt; - A community project for creating podcast content for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-unofficial/patterns"&gt;Rust Design Patterns&lt;/a&gt; - A catalogue of Rust design patterns, anti-patterns and idioms&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://aturon.github.io/"&gt;Rust Guidelines&lt;/a&gt; - Aaron Turon's blog posts on rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.manning.com/books/rust-servers-services-and-apps"&gt;Rust Servers, Services and Apps - MEAP&lt;/a&gt; - Build backend servers, services, and front-ends in Rust to get fast, reliable, and maintainable applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/"&gt;Rust Subreddit&lt;/a&gt; - A subreddit(forum) where rust related questions, articles and resources are posted and discussed&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sger/RustBooks"&gt;RustBooks&lt;/a&gt; - list of RustBooks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLE7tQUdRKcybdIw61JpCoo89i4pWU5f_t"&gt;RustCamp 2015 Talks&lt;/a&gt; - Recorded talks from RustCamp 2015&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustviz/rustviz"&gt;RustViz&lt;/a&gt; - generates visualizations from simple Rust programs to assist users in better understanding the Rust Lifetime and Borrowing mechanism.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jf_ddGnum_4"&gt;Watch Jon Gjengset Implement BitTorrent in Rust&lt;/a&gt; - Implementing (part of) a BitTorrent client in Rust&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://creativecommons.org/publicdomain/zero/1.0/"&gt;&lt;img src="https://licensebuttons.net/p/zero/1.0/88x31.png" alt="CC0" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>