<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Fri, 31 Oct 2025 01:34:00 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>jerosoler/Drawflow</title>
      <link>https://github.com/jerosoler/Drawflow</link>
      <description>&lt;p&gt;Simple flow library üñ•Ô∏èüñ±Ô∏è&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://www.npmjs.com/package/drawflow"&gt;&lt;img src="https://img.shields.io/npm/v/drawflow?color=green" alt="npm" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/npm/dy/drawflow" alt="npm" /&gt; &lt;img src="https://img.shields.io/bundlephobia/minzip/drawflow" alt="npm bundle size" /&gt; &lt;a href="https://github.com/jerosoler/Drawflow/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/jerosoler/Drawflow" alt="GitHub license" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/jerosoler"&gt;&lt;img src="https://img.shields.io/twitter/url?style=social&amp;amp;url=https%3A%2F%2Ftwitter.com%2Fjerosoler" alt="Twitter URL" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Drawflow&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/jerosoler/Drawflow/raw/master/docs/drawflow.gif" alt="Demo" /&gt;&lt;/p&gt; 
&lt;p&gt;Simple flow library.&lt;/p&gt; 
&lt;p&gt;Drawflow allows you to create data flows easily and quickly.&lt;/p&gt; 
&lt;p&gt;Installing only a javascript library and with four lines of code.&lt;/p&gt; 
&lt;p&gt;‚≠ê &lt;a href="https://jerosoler.github.io/Drawflow/"&gt;LIVE DEMO&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üé® &lt;a href="https://jerosoler.github.io/drawflow-theme-generator/"&gt;THEME EDIT GENERATOR&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#running"&gt;Running&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#mouse-and-keys"&gt;Mouse and Keys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#editor"&gt;Editor&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#editor-options"&gt;Options&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#modules"&gt;Modules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#nodes"&gt;Nodes&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#node-example"&gt;Node example&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#register-node"&gt;Register Node&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#methods"&gt;Methods&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#methods-example"&gt;Methods example&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#events"&gt;Events&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#events-example"&gt;Events example&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#export-/-import"&gt;Export / Import&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#export-example"&gt;Export example&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#example"&gt;Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Drag Nodes&lt;/li&gt; 
 &lt;li&gt;Multiple Inputs / Outputs&lt;/li&gt; 
 &lt;li&gt;Multiple connections&lt;/li&gt; 
 &lt;li&gt;Delete Nodes and Connections&lt;/li&gt; 
 &lt;li&gt;Add/Delete inputs/outputs&lt;/li&gt; 
 &lt;li&gt;Reroute connections&lt;/li&gt; 
 &lt;li&gt;Data sync on Nodes&lt;/li&gt; 
 &lt;li&gt;Zoom in / out&lt;/li&gt; 
 &lt;li&gt;Clear data module&lt;/li&gt; 
 &lt;li&gt;Support modules&lt;/li&gt; 
 &lt;li&gt;Editor mode &lt;code&gt;edit&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt; or &lt;code&gt;view&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Import / Export data&lt;/li&gt; 
 &lt;li&gt;Events&lt;/li&gt; 
 &lt;li&gt;Mobile support&lt;/li&gt; 
 &lt;li&gt;Vanilla javascript (No dependencies)&lt;/li&gt; 
 &lt;li&gt;NPM&lt;/li&gt; 
 &lt;li&gt;Vue Support component nodes &amp;amp;&amp;amp; Nuxt&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Download or clone repository and copy the dist folder, CDN option Or npm.&lt;/p&gt; 
&lt;h4&gt;Clone&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;git clone https://github.com/jerosoler/Drawflow.git&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;CDN&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;# Last
&amp;lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/jerosoler/Drawflow/dist/drawflow.min.css"&amp;gt;
&amp;lt;script src="https://cdn.jsdelivr.net/gh/jerosoler/Drawflow/dist/drawflow.min.js"&amp;gt;&amp;lt;/script&amp;gt;
# or version view releases https://github.com/jerosoler/Drawflow/releases
&amp;lt;link rel="stylesheet" href="https://unpkg.com/drawflow@x.x.xx/dist/drawflow.min.css" /&amp;gt;
&amp;lt;script src="https://unpkg.com/drawflow@x.x.xx/dist/drawflow.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;NPM&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;npm i drawflow
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Typescript&lt;/h3&gt; 
&lt;p&gt;External package. More info &lt;a href="https://github.com/jerosoler/Drawflow/issues/119"&gt;#119&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;npm install -D @types/drawflow
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Import&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;import Drawflow from 'drawflow'
import styleDrawflow from 'drawflow/dist/drawflow.min.css'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Require&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var Drawflow = require('drawflow')
var styleDrawflow = require('drawflow/dist/drawflow.min.css')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create the parent element of &lt;strong&gt;drawflow&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div id="drawflow"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Running&lt;/h3&gt; 
&lt;p&gt;Start drawflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var id = document.getElementById("drawflow");
const editor = new Drawflow(id);
editor.start();
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Parameter&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Object&lt;/td&gt; 
   &lt;td&gt;Name of module&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;render&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Object&lt;/td&gt; 
   &lt;td&gt;It's for &lt;code&gt;Vue&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Object&lt;/td&gt; 
   &lt;td&gt;It's for &lt;code&gt;Vue&lt;/code&gt;. The parent Instance&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;For vue 2 example.&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;import Vue from 'vue'

// Pass render Vue
this.editor = new Drawflow(id, Vue, this);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;For vue 3 example.&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;import { h, getCurrentInstance, render } from 'vue'
const Vue = { version: 3, h, render };

this.editor = new Drawflow(id, Vue);
// Pass render Vue 3 Instance
const internalInstance = getCurrentInstance()
editor.value = new Drawflow(id, Vue, internalInstance.appContext.app._context);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Nuxt&lt;/h3&gt; 
&lt;p&gt;Add to &lt;code&gt;nuxt.config.js&lt;/code&gt; file&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;build: {
    transpile: ['drawflow'],
    ...
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Mouse and Keys&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;del key&lt;/code&gt; to remove element.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Right click&lt;/code&gt; to show remove options (Mobile long press).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Left click press&lt;/code&gt; to move editor or node selected.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Ctrl + Mouse Wheel&lt;/code&gt; Zoom in/out (Mobile pinch).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Editor&lt;/h2&gt; 
&lt;p&gt;You can change the editor to &lt;strong&gt;fixed&lt;/strong&gt; type to block. Only editor can be moved. You can put it before start.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;editor.editor_mode = 'edit'; // Default
editor.editor_mode = 'fixed'; // Only scroll
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also adjust the zoom values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;editor.zoom_max = 1.6;
editor.zoom_min = 0.5;
editor.zoom_value = 0.1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Editor options&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Parameter&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;reroute&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Boolean&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;Active reroute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;reroute_fix_curvature&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Boolean&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;Fix adding points&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;curvature&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;0.5&lt;/td&gt; 
   &lt;td&gt;Curvature&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;reroute_curvature_start_end&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;0.5&lt;/td&gt; 
   &lt;td&gt;Curvature reroute first point and las point&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;reroute_curvature&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;0.5&lt;/td&gt; 
   &lt;td&gt;Curvature reroute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;reroute_width&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;Width of reroute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;line_path&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;5&lt;/td&gt; 
   &lt;td&gt;Width of line&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;force_first_input&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Boolean&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;Force the first input to drop the connection on top of the node&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;editor_mode&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Text&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;edit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;edit&lt;/code&gt; for edit, &lt;code&gt;fixed&lt;/code&gt; for nodes fixed but their input fields available, &lt;code&gt;view&lt;/code&gt; for view only&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;zoom&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;Default zoom&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;zoom_max&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;1.6&lt;/td&gt; 
   &lt;td&gt;Default zoom max&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;zoom_min&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;0.5&lt;/td&gt; 
   &lt;td&gt;Default zoom min&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;zoom_value&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;0.1&lt;/td&gt; 
   &lt;td&gt;Default zoom value update&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;zoom_last_value&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Number&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;Default zoom last value&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;draggable_inputs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Boolean&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Drag nodes on click inputs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;useuuid&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Boolean&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;Use UUID as node ID instead of integer index. Only affect newly created nodes, do not affect imported nodes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Reroute&lt;/h3&gt; 
&lt;p&gt;Active reroute connections. Use before &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;editor.reroute = true;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create point with double click on line connection. Double click on point for remove.&lt;/p&gt; 
&lt;h2&gt;Modules&lt;/h2&gt; 
&lt;p&gt;Separate your flows in different editors.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;editor.addModule('nameNewModule');
editor.changeModule('nameNewModule');
editor.removeModule('nameModule');
// Default Module is Home
editor.changeModule('Home');
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;RemovedModule&lt;/code&gt; if it is in the same module redirects to the &lt;code&gt;Home&lt;/code&gt; module&lt;/p&gt; 
&lt;h2&gt;Nodes&lt;/h2&gt; 
&lt;p&gt;Adding a node is simple.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;editor.addNode(name, inputs, outputs, posx, posy, class, data, html);
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Parameter&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
   &lt;td&gt;Name of module&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;inputs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;Number of de inputs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;outputs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;Number of de outputs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;pos_x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;Position on start node left&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;pos_y&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;Position on start node top&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;class&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
   &lt;td&gt;Added classname to de node. Multiple classnames separated by space&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;data&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;json&lt;/td&gt; 
   &lt;td&gt;Data passed to node&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;html&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
   &lt;td&gt;HTML drawn on node or &lt;code&gt;name&lt;/code&gt; of register node.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;typenode&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean &amp;amp; text&lt;/td&gt; 
   &lt;td&gt;Default &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; for Object HTML, &lt;code&gt;vue&lt;/code&gt; for vue&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;You can use the attribute &lt;code&gt;df-*&lt;/code&gt; in &lt;strong&gt;inputs, textarea or select&lt;/strong&gt; to synchronize with the node data and &lt;strong&gt;contenteditable&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Atrributs multiples parents support &lt;code&gt;df-*-*...&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Node example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var html = `
&amp;lt;div&amp;gt;&amp;lt;input type="text" df-name&amp;gt;&amp;lt;/div&amp;gt;
`;
var data = { "name": '' };

editor.addNode('github', 0, 1, 150, 300, 'github', data, html);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Register Node&lt;/h3&gt; 
&lt;p&gt;it's possible register nodes for reuse.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var html = document.createElement("div");
html.innerHTML =  "Hello Drawflow!!";
editor.registerNode('test', html);
// Use
editor.addNode('github', 0, 1, 150, 300, 'github', data, 'test', true);

// For vue
import component from '~/components/testcomponent.vue'
editor.registerNode('name', component, props, options);
// Use for vue
editor.addNode('github', 0, 1, 150, 300, 'github', data, 'name', 'vue');
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Parameter&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
   &lt;td&gt;Name of module registered.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;html&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
   &lt;td&gt;HTML to drawn or &lt;code&gt;vue&lt;/code&gt; component.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;props&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;json&lt;/td&gt; 
   &lt;td&gt;Only for &lt;code&gt;vue&lt;/code&gt;. Props of component. &lt;code&gt;Not Required&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;options&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;json&lt;/td&gt; 
   &lt;td&gt;Only for &lt;code&gt;vue&lt;/code&gt;. Options of component. &lt;code&gt;Not Required&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Methods&lt;/h2&gt; 
&lt;p&gt;Other available functions.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Mehtod&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;zoom_in()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Increment zoom +0.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;zoom_out()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Decrement zoom -0.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;getNodeFromId(id)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Get Info of node. Ex: id: &lt;code&gt;5&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;getNodesFromName(name)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Return Array of nodes id. Ex: name: &lt;code&gt;telegram&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;removeNodeId(id)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Remove node. Ex id: &lt;code&gt;node-x&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;updateNodeDataFromId&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Update data element. Ex: &lt;code&gt;5, { name: 'Drawflow' }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;addNodeInput(id)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add input to node. Ex id: &lt;code&gt;5&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;addNodeOutput(id)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add output to node. Ex id: &lt;code&gt;5&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;removeNodeInput(id, input_class)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Remove input to node. Ex id: &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;input_2&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;removeNodeOutput(id, output_class)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Remove output to node. Ex id: &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;output_2&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;addConnection(id_output, id_input, output_class, input_class)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add connection. Ex: &lt;code&gt;15,16,'output_1','input_1'&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;removeSingleConnection(id_output, id_input, output_class, input_class)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Remove connection. Ex: &lt;code&gt;15,16,'output_1','input_1'&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;updateConnectionNodes(id)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Update connections position from Node Ex id: &lt;code&gt;node-x&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;removeConnectionNodeId(id)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Remove node connections. Ex id: &lt;code&gt;node-x&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;getModuleFromNodeId(id)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Get name of module where is the id. Ex id: &lt;code&gt;5&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;clearModuleSelected()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear data of module selected&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear all data of all modules and modules remove.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Methods example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;editor.removeNodeId('node-4');
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Events&lt;/h2&gt; 
&lt;p&gt;You can detect events that are happening.&lt;/p&gt; 
&lt;p&gt;List of available events:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Event&lt;/th&gt; 
   &lt;th&gt;Return&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;nodeCreated&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt; of Node&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;nodeRemoved&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt; of Node&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;nodeDataChanged&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt; of Node df-* attributes changed.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;nodeSelected&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt; of Node&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;nodeUnselected&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Unselect node&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;nodeMoved&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt; of Node&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;connectionStart&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;{ output_id, output_class }&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt; of nodes and output selected&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;connectionCancel&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Connection Cancel&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;connectionCreated&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;{ output_id, input_id, output_class, input_class }&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt;'s of nodes and output/input selected&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;connectionRemoved&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;{ output_id, input_id, output_class, input_class }&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt;'s of nodes and output/input selected&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;connectionSelected&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;{ output_id, input_id, output_class, input_class }&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt;'s of nodes and output/input selected&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;connectionUnselected&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Unselect connection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;addReroute&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt; of Node output&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;removeReroute&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt; of Node output&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;rerouteMoved&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;id&lt;/code&gt; of Node output&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;moduleCreated&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;name&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;name&lt;/code&gt; of Module&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;moduleChanged&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;name&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;name&lt;/code&gt; of Module&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;moduleRemoved&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;name&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;name&lt;/code&gt; of Module&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;click&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;event&lt;/td&gt; 
   &lt;td&gt;Click event&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;clickEnd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;event&lt;/td&gt; 
   &lt;td&gt;Once the click changes have been made&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;contextmenu&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;event&lt;/td&gt; 
   &lt;td&gt;Click second button mouse event&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mouseMove&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;{ x, y }&lt;/td&gt; 
   &lt;td&gt;Position&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mouseUp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;event&lt;/td&gt; 
   &lt;td&gt;MouseUp Event&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;keydown&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;event&lt;/td&gt; 
   &lt;td&gt;Keydown event&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;zoom&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;zoom_level&lt;/td&gt; 
   &lt;td&gt;Level of zoom&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;translate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;{ x, y }&lt;/td&gt; 
   &lt;td&gt;Position translate editor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;import&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;import&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Finish import&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;export&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;data&lt;/td&gt; 
   &lt;td&gt;Data export&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Events example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;editor.on('nodeCreated', function(id) {
  console.log("Node created " + id);
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Export / Import&lt;/h2&gt; 
&lt;p&gt;You can export and import your data.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var exportdata = editor.export();
editor.import(exportdata);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Export example&lt;/h3&gt; 
&lt;p&gt;Example of exported data:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "drawflow": {
        "Home": {
            "data": {}
        },
        "Other": {
            "data": {
                "16": {
                    "id": 16,
                    "name": "facebook",
                    "data": {},
                    "class": "facebook",
                    "html": "\n        
\n          
 Facebook Message
\n        
\n        ",
                    "inputs": {},
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "17",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 226,
                    "pos_y": 138
                },
                "17": {
                    "id": 17,
                    "name": "log",
                    "data": {},
                    "class": "log",
                    "html": "\n            
\n              
 Save log file
\n            
\n            ",
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "16",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {},
                    "pos_x": 690,
                    "pos_y": 129
                }
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;View the complete example in folder &lt;a href="https://github.com/jerosoler/Drawflow/tree/master/docs"&gt;docs&lt;/a&gt;.&lt;br /&gt; There is also an &lt;a href="https://raw.githubusercontent.com/jerosoler/Drawflow/master/docs/drawflow-element.html"&gt;example&lt;/a&gt; how to use Drawflow in a custom element. (based on &lt;a href="https://lit-element.polymer-project.org"&gt;LitElement&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>appium/appium</title>
      <link>https://github.com/appium/appium</link>
      <description>&lt;p&gt;Cross-platform automation framework for all kinds of apps, built on top of the W3C WebDriver protocol&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://appium.io/"&gt; &lt;img alt="Appium" src="https://raw.githubusercontent.com/appium/appium/master/packages/appium/docs/overrides/assets/images/appium-logo-horiz.png" width="500" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; Cross-platform test automation for native, hybrid, mobile web and desktop apps. &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://npmjs.org/package/appium"&gt;&lt;img src="https://badge.fury.io/js/appium.svg?sanitize=true" alt="NPM version" /&gt;&lt;/a&gt; &lt;a href="https://npmjs.org/package/appium"&gt;&lt;img src="https://img.shields.io/npm/dm/appium.svg?sanitize=true" alt="Monthly Downloads" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_shield"&gt;&lt;img src="https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/vshymanskyy/StandWithUkraine/"&gt;&lt;img src="https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg?sanitize=true" alt="StandWithUkraine" /&gt;&lt;/a&gt; &lt;a href="https://www.unrwa.org/"&gt;&lt;img src="https://img.shields.io/badge/Ceasefire_Now-%F0%9F%87%B5%F0%9F%87%B8-red?style=flat" alt="CeasefireInGaza" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt;&lt;b&gt; &lt;a href="https://appium.io"&gt;Documentation&lt;/a&gt; | &lt;a href="https://appium.io/docs/en/latest/intro/"&gt;Get Started&lt;/a&gt; | &lt;a href="https://appium.io/docs/en/latest/ecosystem/"&gt;Ecosystem&lt;/a&gt; | &lt;a href="https://github.com/appium/appium/raw/master/packages/appium/CHANGELOG.md"&gt;Changelog&lt;/a&gt; | &lt;a href="https://appium.io/docs/en/latest/contributing/"&gt;Contributing Guide&lt;/a&gt; | &lt;a href="https://discuss.appium.io"&gt;Discussion Forum&lt;/a&gt; &lt;/b&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Appium is an open-source automation framework that provides &lt;a href="https://www.w3.org/TR/webdriver/"&gt;WebDriver&lt;/a&gt;-based automation possibilities for a wide range of different mobile, desktop and IoT platforms. Appium is modular and extensible, and supports multiple programming languages, which means there is an entire ecosystem of related software:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/appium/appium/master/#drivers"&gt;&lt;strong&gt;Drivers&lt;/strong&gt;&lt;/a&gt; add support for automating specific platforms&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/appium/appium/master/#clients"&gt;&lt;strong&gt;Clients&lt;/strong&gt;&lt;/a&gt; allow writing Appium tests in your programming language of choice&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/appium/appium/master/#plugins"&gt;&lt;strong&gt;Plugins&lt;/strong&gt;&lt;/a&gt; allow to further extend Appium functionality&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Upgrading From Older Versions&lt;/h2&gt; 
&lt;p&gt;The Appium team only provides support for the most recent version of Appium. If you wish to upgrade from an older major Appium version, please refer to the migration guides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://appium.io/docs/en/latest/guides/migrating-2-to-3/"&gt;Appium v2 to v3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://appium.io/docs/en/latest/guides/migrating-1-to-2/"&gt;Appium v1 to v2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Appium can be installed using &lt;code&gt;npm&lt;/code&gt; (other package managers are not currently supported). Please check the &lt;a href="http://appium.io/docs/en/latest/quickstart/install/"&gt;installation docs&lt;/a&gt; for the system requirements and further information.&lt;/p&gt; 
&lt;p&gt;If upgrading from Appium 1, make sure Appium 1 is fully uninstalled (&lt;code&gt;npm uninstall -g appium&lt;/code&gt;). Unexpected errors might appear if this has not been done.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm i -g appium
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that this will only install the core Appium server, which cannot automate anything on its own. Please install &lt;a href="https://raw.githubusercontent.com/appium/appium/master/#drivers"&gt;drivers&lt;/a&gt; for your target platforms in order to automate them.&lt;/p&gt; 
&lt;h2&gt;Drivers&lt;/h2&gt; 
&lt;p&gt;Appium supports app automation across a variety of platforms, like iOS, Android, macOS, Windows, and more. Each platform is supported by one or more "drivers", which know how to automate that particular platform. You can find a full list of officially-supported and third-party drivers in &lt;a href="http://appium.io/docs/en/latest/ecosystem/drivers/"&gt;Appium Ecosystem's Drivers page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Driver management is done using &lt;a href="http://appium.io/docs/en/latest/cli/extensions/"&gt;Appium's Extension command-line interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install an official driver from npm (see documentation for a list of such drivers)
appium driver install &amp;lt;driver-name&amp;gt;
# Install any driver from npm
appium driver install --source=npm &amp;lt;driver-name&amp;gt;
# See documentation for installation from other sources

# List already installed drivers
appium driver list --installed
# Update a driver (it must be already installed)
# This will NOT update the major version, in order to prevent breaking changes
appium driver update &amp;lt;driver-name&amp;gt;
# Update a driver to the most recent version (may include breaking changes)
appium driver update &amp;lt;driver-name&amp;gt; --unsafe
# Uninstall a driver (it won't last forever, will it?)
appium driver uninstall &amp;lt;driver-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Clients&lt;/h2&gt; 
&lt;p&gt;Client libraries enable writing Appium tests in different programming languages. There are officially-supported clients for Java, Python, Ruby, and .NET C#, as well as third-party clients for other languages. You can find a full list of clients in &lt;a href="http://appium.io/docs/en/latest/ecosystem/clients/"&gt;Appium Ecosystem's Clients page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;p&gt;Plugins allow you to extend server functionality without changing the server code. The main difference between drivers and plugins is that the latter must be explicitly enabled on Appium server startup (all installed drivers are enabled by default):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;appium --use-plugins=&amp;lt;plugin-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find a full list of officially-supported and third-party plugins in &lt;a href="http://appium.io/docs/en/latest/ecosystem/plugins/"&gt;Appium Ecosystem's Plugins page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Similarly to drivers, plugin management is also done using &lt;a href="http://appium.io/docs/en/latest/cli/extensions/"&gt;Appium's Extension command-line interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install an official plugin from npm (see documentation for a list of such plugins)
appium plugin install &amp;lt;plugin-name&amp;gt;
# Install any plugin from npm
appium plugin install --source=npm &amp;lt;plugin-name&amp;gt;
# See documentation for installation from other sources

# List already installed plugins
appium plugin list --installed
# Update a plugin (it must be already installed)
# This will NOT update the major version, in order to prevent breaking changes
appium plugin update &amp;lt;plugin-name&amp;gt;
# Update a plugin to the most recent version (may include breaking changes)
appium plugin update &amp;lt;plugin-name&amp;gt; --unsafe
# Uninstall a plugin
appium plugin uninstall &amp;lt;plugin-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Server Command Line Interface&lt;/h2&gt; 
&lt;p&gt;In order to start sending commands to the Appium server, it must be running on the URL and port where your client library expects it to listen. &lt;a href="http://appium.io/docs/en/latest/cli/server/"&gt;Appium's command-line interface&lt;/a&gt; is used to launch and configure the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start the server on the default host (0.0.0.0) and port (4723)
appium server
# You can also omit the 'server' subcommand
appium
# Start the server on the given host, port and use a custom base path prefix (the default prefix is '/')
appium --address 127.0.0.1 --port 9000 --base-path /wd/hub
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Appium supports execution of parallel server processes, as well as parallel driver sessions within a single server process. Refer the corresponding driver documentations regarding which mode is optimal for the particular driver or whether it supports parallel sessions.&lt;/p&gt; 
&lt;h2&gt;Why Appium?&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;You usually don't have to recompile your app or modify it in any way, due to the use of standard automation APIs on all platforms.&lt;/li&gt; 
 &lt;li&gt;You can write tests with your favorite dev tools using any WebDriver-compatible language such as Java, Python, Ruby and C#. There are also third party client implementations for other languages.&lt;/li&gt; 
 &lt;li&gt;You can use any testing framework.&lt;/li&gt; 
 &lt;li&gt;Some drivers like &lt;code&gt;xcuitest&lt;/code&gt; and &lt;code&gt;uiautomator2&lt;/code&gt; have built-in mobile web and hybrid app support. Within the same script, you can switch seamlessly between native app automation and webview automation, all using the WebDriver model that's already the standard for web automation.&lt;/li&gt; 
 &lt;li&gt;You can run your automated tests locally and in a cloud. There are multiple cloud providers that support various Appium drivers (mostly targeting iOS and Android mobile automation).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/appium/appium-inspector"&gt;Appium Inspector&lt;/a&gt; can be used to visually inspect the page source of applications across different platforms, facilitating easier test development.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Investing in the &lt;a href="https://w3c.github.io/webdriver/webdriver-spec.html"&gt;WebDriver&lt;/a&gt; protocol means you are betting on a single, free, and open protocol for testing that has become a web standard. Don't lock yourself into a proprietary stack.&lt;/p&gt; 
&lt;p&gt;For example, if you use Apple's XCUITest library without Appium, you can only write tests using Obj-C/Swift, and you can only run tests through Xcode. Similarly, with Google's UiAutomator or Espresso, you can only write tests in Java/Kotlin. Appium opens up the possibility of true cross-platform native app automation, for mobile and beyond!&lt;/p&gt; 
&lt;p&gt;If you are looking for a more comprehensive description of what this is all about, please read our documentation on &lt;a href="https://appium.io/docs/en/latest/intro/appium/"&gt;How Does Appium Work?&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Appium has a &lt;a href="https://raw.githubusercontent.com/appium/appium/master/GOVERNANCE.md#sponsorship"&gt;Sponsorship Program&lt;/a&gt;! If you or your company uses Appium and wants to give back financially to the project, we use these funds to &lt;a href="https://raw.githubusercontent.com/appium/appium/master/GOVERNANCE.md#compensation-scheme"&gt;encourage development and contributions&lt;/a&gt;, as well as support other open source projects we rely on. &lt;a href="https://opencollective.com/appium"&gt;Become a sponsor&lt;/a&gt; via our OpenCollective page.&lt;/p&gt; 
&lt;h3&gt;Development and Strategic Partners&lt;/h3&gt; 
&lt;p&gt;Appium is incredibly grateful to our Development and Strategic Partners for their sustained contribution of project development and leadership!&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.browserstack.com/browserstack-appium?utm_campaigncode=701OW00000AoUTQYA3&amp;amp;utm_medium=partnered&amp;amp;utm_source=appium"&gt; 
  &lt;picture&gt; 
   &lt;source srcset="packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-dark.png" media="(prefers-color-scheme: dark)" /&gt; 
   &lt;source srcset="packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-light.png" media="(prefers-color-scheme: light)" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/appium/appium/master/packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-dark.png" width="300" alt="Browserstack" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://lambdatest.com/?utm_source=appium.io&amp;amp;utm_medium=organic&amp;amp;utm_campaign=june_25&amp;amp;utm_term=sk&amp;amp;utm_content=webpage"&gt; 
  &lt;picture&gt; 
   &lt;source srcset="packages/appium/docs/overrides/assets/images/sponsor-logo-lambdatest-dark.png" media="(prefers-color-scheme: dark)" /&gt; 
   &lt;source srcset="packages/appium/docs/overrides/assets/images/sponsor-logo-lambdatest-light.png" media="(prefers-color-scheme: light)" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/appium/appium/master/packages/appium/docs/overrides/assets/images/sponsor-logo-lambdatest-dark.png" width="300" alt="LambdaTest" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3&gt;Other Sponsors&lt;/h3&gt; 
&lt;p&gt;A full list of sponsors is available at our &lt;a href="https://appium.io/docs/en/latest/sponsors/"&gt;Sponsors page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/appium/appium/master/LICENSE"&gt;Apache-2.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_large"&gt;&lt;img src="https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@appium/logger&lt;/code&gt; package is under &lt;a href="https://raw.githubusercontent.com/appium/appium/master/packages/logger/LICENSE"&gt;ISC&lt;/a&gt; License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>leaningtech/webvm</title>
      <link>https://github.com/leaningtech/webvm</link>
      <description>&lt;p&gt;Virtual Machine for the Web&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebVM&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/yWRr2YnD9c"&gt;&lt;img src="https://img.shields.io/discord/988743885121548329?color=%235865F2&amp;amp;logo=discord&amp;amp;logoColor=%23fff" alt="Discord server" /&gt;&lt;/a&gt; &lt;a href="https://github.com/leaningtech/webvm/issues"&gt;&lt;img src="https://img.shields.io/github/issues/leaningtech/webvm" alt="Issues" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository hosts the source code for &lt;a href="https://webvm.io"&gt;https://webvm.io&lt;/a&gt;, a Linux virtual machine that runs in your browser.&lt;/p&gt; 
&lt;p&gt;Try out the new Alpine / Xorg / i3 graphical environment: &lt;a href="https://webvm.io/alpine.html"&gt;https://webvm.io/alpine.html&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/leaningtech/webvm/main/assets/welcome_to_WebVM_alpine_2024.png" width="90%" /&gt; 
&lt;p&gt;WebVM is a server-less virtual environment running fully client-side in HTML5/WebAssembly. It's designed to be Linux ABI-compatible. It runs an unmodified Debian distribution including many native development toolchains.&lt;/p&gt; 
&lt;p&gt;WebVM is powered by the CheerpX virtualization engine, and enables safe, sandboxed client-side execution of x86 binaries on any browser. CheerpX includes an x86-to-WebAssembly JIT compiler, a virtual block-based file system, and a Linux syscall emulator.&lt;/p&gt; 
&lt;h1&gt;Enable networking&lt;/h1&gt; 
&lt;p&gt;Modern browsers do not provide APIs to directly use TCP or UDP. WebVM provides networking support by integrating with Tailscale, a VPN network that supports WebSockets as a transport layer.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open the "Networking" panel from the side-bar&lt;/li&gt; 
 &lt;li&gt;Click "Connect to Tailscale" from the panel&lt;/li&gt; 
 &lt;li&gt;Log in to Tailscale (create an account if you don't have one)&lt;/li&gt; 
 &lt;li&gt;Click "Connect" when prompted by Tailscale&lt;/li&gt; 
 &lt;li&gt;If you are unfamiliar with Tailscale or would like additional information see &lt;a href="https://raw.githubusercontent.com/leaningtech/webvm/main/docs/Tailscale.md"&gt;WebVM and Tailscale&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Fork, deploy, customize&lt;/h1&gt; 
&lt;img src="https://raw.githubusercontent.com/leaningtech/webvm/main/assets/fork_deploy_instructions.gif" alt="deploy_instructions_gif" width="90%" /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fork the repository.&lt;/li&gt; 
 &lt;li&gt;Enable Github pages in settings. 
  &lt;ul&gt; 
   &lt;li&gt;Click on &lt;code&gt;Settings&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Go to the &lt;code&gt;Pages&lt;/code&gt; section.&lt;/li&gt; 
   &lt;li&gt;Select &lt;code&gt;Github Actions&lt;/code&gt; as the source. 
    &lt;ul&gt; 
     &lt;li&gt;If you are using a custom domain, ensure &lt;code&gt;Enforce HTTPS&lt;/code&gt; is enabled.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run the workflow. 
  &lt;ul&gt; 
   &lt;li&gt;Click on &lt;code&gt;Actions&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Accept the prompt. This is required only once to enable Actions for your fork.&lt;/li&gt; 
   &lt;li&gt;Click on the workflow named &lt;code&gt;Deploy&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Click &lt;code&gt;Run workflow&lt;/code&gt; and then once more &lt;code&gt;Run workflow&lt;/code&gt; in the menu.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;After a few seconds a new &lt;code&gt;Deploy&lt;/code&gt; workflow will start, click on it to see details.&lt;/li&gt; 
 &lt;li&gt;After the workflow completes, which takes a few minutes, it will show the URL below the &lt;code&gt;deploy_to_github_pages&lt;/code&gt; job.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://raw.githubusercontent.com/leaningtech/webvm/main/assets/result.png" width="70%" /&gt; 
&lt;p&gt;You can now customize &lt;code&gt;dockerfiles/debian_mini&lt;/code&gt; to suit your needs, or make a new Dockerfile from scratch. Use the &lt;code&gt;Path to Dockerfile&lt;/code&gt; workflow parameter to select it.&lt;/p&gt; 
&lt;h1&gt;Run WebVM locally with a custom Debian mini disk image&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the WebVM Repository&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/leaningtech/webvm.git
cd webvm
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt; &lt;p&gt;Download the Debian mini Ext2 image&lt;/p&gt; &lt;p&gt;Run the following command to download the Debian mini Ext2 image:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;wget "https://github.com/leaningtech/webvm/releases/download/ext2_image/debian_mini_20230519_5022088024.ext2"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(&lt;em&gt;You can also build your own disk image by selecting the &lt;strong&gt;"Upload GitHub release"&lt;/strong&gt; workflow option&lt;/em&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Update the configuration file&lt;/p&gt; &lt;p&gt;Edit &lt;code&gt;config_public_terminal.js&lt;/code&gt; to reference your local disk image:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Replace:&lt;/p&gt; &lt;p&gt;&lt;code&gt;"wss://disks.webvm.io/debian_large_20230522_5044875331.ext2"&lt;/code&gt;&lt;/p&gt; &lt;p&gt;With:&lt;/p&gt; &lt;p&gt;&lt;code&gt;"/disk-images/debian_mini_20230519_5022088024.ext2"&lt;/code&gt;&lt;/p&gt; &lt;p&gt;(&lt;em&gt;Use an absolute or relative URL pointing to the disk image location.&lt;/em&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Replace &lt;code&gt;"cloud"&lt;/code&gt; with the correct disk image type: &lt;code&gt;"bytes"&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt; &lt;p&gt;Build WebVM&lt;/p&gt; &lt;p&gt;Run the following commands to install dependencies and build WebVM:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;npm install
npm run build
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output will be placed in the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Configure Nginx&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Create a directory for the disk image:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt; mkdir disk-images
 mv debian_mini_20230519_5022088024.ext2 disk-images/
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Modify your &lt;code&gt;nginx.conf&lt;/code&gt; file to serve the disk image. Add the following location block:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-nginx"&gt; location /disk-images/ {
     root .;
     autoindex on;
 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="6"&gt; 
 &lt;li&gt; &lt;p&gt;Start Nginx&lt;/p&gt; &lt;p&gt;Run the following command to start Nginx:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;nginx -p . -c nginx.conf
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Nginx will automatically serve the build directory.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Access WebVM&lt;/p&gt; &lt;p&gt;Open a browser and visit: &lt;code&gt;http://127.0.0.1:8081&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Enjoy your local WebVM!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Example customization: Python3 REPL&lt;/h1&gt; 
&lt;p&gt;The &lt;code&gt;Deploy&lt;/code&gt; workflow takes into account the &lt;code&gt;CMD&lt;/code&gt; specified in the Dockerfile. To build a REPL you can simply apply this patch and deploy.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;diff --git a/dockerfiles/debian_mini b/dockerfiles/debian_mini
index 2878332..1f3103a 100644
--- a/dockerfiles/debian_mini
+++ b/dockerfiles/debian_mini
@@ -15,4 +15,4 @@ WORKDIR /home/user/
 # We set env, as this gets extracted by Webvm. This is optional.
 ENV HOME="/home/user" TERM="xterm" USER="user" SHELL="/bin/bash" EDITOR="vim" LANG="en_US.UTF-8" LC_ALL="C"
 RUN echo 'root:password' | chpasswd
-CMD [ "/bin/bash" ]
+CMD [ "/usr/bin/python3" ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;How to use Claude AI&lt;/h1&gt; 
&lt;p&gt;To access Claude AI, you need an API key. Follow these steps to get started:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create an account&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Visit &lt;a href="https://console.anthropic.com/login"&gt;Anthropic Console&lt;/a&gt; and sign up with your e-mail. You'll receive a sign in link to the Anthropic Console.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://raw.githubusercontent.com/leaningtech/webvm/main/assets/anthropic_signup.png" width="90%" /&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Get your API key&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Once logged in, navigate to &lt;strong&gt;Get API keys&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Purchase the amount of credits you need. After completing the purchase, you'll be able to generate the key through the API console.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://raw.githubusercontent.com/leaningtech/webvm/main/assets/anthropic_api_payment.png" width="90%" /&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Log in with your API key&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Navigate to your WebVM and hover over the robot icon. This will show the Claude AI Integration tab. For added convenience, you can click the pin button in the top right corner to keep the tab in place.&lt;/li&gt; 
 &lt;li&gt;You'll see a prompt where you can insert your Claude API key.&lt;/li&gt; 
 &lt;li&gt;Insert your key and press enter.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://raw.githubusercontent.com/leaningtech/webvm/main/assets/insert_key.png" width="90%" /&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Start using Claude AI&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Once your API key is entered, you can begin interacting with Claude AI by asking questions such as:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;"Solve the CTF challenge at &lt;code&gt;/home/user/chall1.bin.&lt;/code&gt; Note that the binary reads from stdin."&lt;/strong&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/leaningtech/webvm/main/assets/webvm_claude_ctf.gif" alt="deploy_instructions_gif" width="90%" /&gt; 
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Your API key is private and should never be shared. We do not have access to your key, which is not only stored locally in your browser.&lt;/p&gt; 
&lt;h1&gt;Bugs and Issues&lt;/h1&gt; 
&lt;p&gt;Please use &lt;a href="https://github.com/leaningtech/webvm/issues"&gt;Issues&lt;/a&gt; to report any bug. Or come to say hello / share your feedback on &lt;a href="https://discord.gg/yTNZgySKGa"&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;More links&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://leaningtech.com/webvm-server-less-x86-virtual-machines-in-the-browser/"&gt;WebVM: server-less x86 virtual machines in the browser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://leaningtech.com/webvm-virtual-machine-with-networking-via-tailscale/"&gt;WebVM: Linux Virtualization in WebAssembly with Full Networking via Tailscale&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://leaningtech.com/mini-webvm-your-linux-box-from-dockerfile-via-wasm/"&gt;Mini.WebVM: Your own Linux box from Dockerfile, virtualized in the browser via WebAssembly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Reference GitHub Pages deployment: &lt;a href="https://mini.webvm.io"&gt;Mini.WebVM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VqrbVycTXmw"&gt;Crafting the Impossible: X86 Virtualization in the Browser with WebAssembly&lt;/a&gt; Talk at JsNation 2022&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Thanks to...&lt;/h1&gt; 
&lt;p&gt;This project depends on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://cheerpx.io/"&gt;CheerpX&lt;/a&gt;, made by &lt;a href="https://leaningtech.com/"&gt;Leaning Technologies&lt;/a&gt; for x86 virtualization and Linux emulation&lt;/li&gt; 
 &lt;li&gt;xterm.js, &lt;a href="https://xtermjs.org/"&gt;https://xtermjs.org/&lt;/a&gt;, for providing the Web-based terminal emulator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tailscale.com/"&gt;Tailscale&lt;/a&gt;, for the networking component&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://savannah.nongnu.org/projects/lwip/"&gt;lwIP&lt;/a&gt;, for the TCP/IP stack, compiled for the Web via &lt;a href="https://github.com/leaningtech/cheerp-meta/"&gt;Cheerp&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Versioning&lt;/h1&gt; 
&lt;p&gt;WebVM depends on the CheerpX x86-to-WebAssembly virtualization technology, which is included in the project via &lt;a href="https://www.npmjs.com/package/@leaningtech/cheerpx"&gt;NPM&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The NPM package is updated on every release.&lt;/p&gt; 
&lt;p&gt;Every build is immutable, if a specific version works well for you today, it will keep working forever.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;WebVM is released under the Apache License, Version 2.0.&lt;/p&gt; 
&lt;p&gt;You are welcome to use, modify, and redistribute the contents of this repository.&lt;/p&gt; 
&lt;p&gt;The public CheerpX deployment is provided &lt;strong&gt;as-is&lt;/strong&gt; and is &lt;strong&gt;free to use&lt;/strong&gt; for technological exploration, testing and use by individuals. Any other use by organizations, including non-profit, academia and the public sector, requires a license. Downloading a CheerpX build for the purpose of hosting it elsewhere is not permitted without a commercial license.&lt;/p&gt; 
&lt;p&gt;Read more about &lt;a href="https://cheerpx.io/docs/licensing"&gt;CheerpX licensing&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you want to build a product on top of CheerpX/WebVM, please get in touch: &lt;a href="mailto:sales@leaningtech.com"&gt;sales@leaningtech.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microsoft/Web-Dev-For-Beginners</title>
      <link>https://github.com/microsoft/Web-Dev-For-Beginners</link>
      <description>&lt;p&gt;24 Lessons, 12 Weeks, Get Started as a Web Developer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/microsoft/Web-Dev-For-Beginners/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/microsoft/Web-Dev-For-Beginners.svg?sanitize=true" alt="GitHub license" /&gt;&lt;/a&gt; &lt;a href="https://GitHub.com/microsoft/Web-Dev-For-Beginners/graphs/contributors/"&gt;&lt;img src="https://img.shields.io/github/contributors/microsoft/Web-Dev-For-Beginners.svg?sanitize=true" alt="GitHub contributors" /&gt;&lt;/a&gt; &lt;a href="https://GitHub.com/microsoft/Web-Dev-For-Beginners/issues/"&gt;&lt;img src="https://img.shields.io/github/issues/microsoft/Web-Dev-For-Beginners.svg?sanitize=true" alt="GitHub issues" /&gt;&lt;/a&gt; &lt;a href="https://GitHub.com/microsoft/Web-Dev-For-Beginners/pulls/"&gt;&lt;img src="https://img.shields.io/github/issues-pr/microsoft/Web-Dev-For-Beginners.svg?sanitize=true" alt="GitHub pull-requests" /&gt;&lt;/a&gt; &lt;a href="http://makeapullrequest.com"&gt;&lt;img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://GitHub.com/microsoft/Web-Dev-For-Beginners/watchers/"&gt;&lt;img src="https://img.shields.io/github/watchers/microsoft/Web-Dev-For-Beginners.svg?style=social&amp;amp;label=Watch&amp;amp;maxAge=2592000" alt="GitHub watchers" /&gt;&lt;/a&gt; &lt;a href="https://GitHub.com/microsoft/Web-Dev-For-Beginners/network/"&gt;&lt;img src="https://img.shields.io/github/forks/microsoft/Web-Dev-For-Beginners.svg?style=social&amp;amp;label=Fork&amp;amp;maxAge=2592000" alt="GitHub forks" /&gt;&lt;/a&gt; &lt;a href="https://GitHub.com/microsoft/Web-Dev-For-Beginners/stargazers/"&gt;&lt;img src="https://img.shields.io/github/stars/microsoft/Web-Dev-For-Beginners.svg?style=social&amp;amp;label=Star&amp;amp;maxAge=2592000" alt="GitHub stars" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/zxKYvhSnVp?WT.mc_id=academic-000002-leestott"&gt;&lt;img src="https://dcbadge.vercel.app/api/server/ByRwuEEgH4" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Web Development for Beginners - A Curriculum&lt;/h1&gt; 
&lt;p&gt;Learn the fundamentals of web development with our 12-week comprehensive course by Microsoft Cloud Advocates. Each of the 24 lessons dives into JavaScript, CSS, and HTML through hands-on projects like terrariums, browser extensions, and space games. Engage with quizzes, discussions, and practical assignments. Enhance your skills and optimize your knowledge retention with our effective project-based pedagogy. Start your coding journey today!&lt;/p&gt; 
&lt;p&gt;Join the Azure AI Foundry Discord Community&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.com/invite/ByRwuEEgH4"&gt;&lt;img src="https://dcbadge.limes.pink/api/server/ByRwuEEgH4" alt="Microsoft Azure AI Foundry Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Follow these steps to get started using these resources:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Fork the Repository&lt;/strong&gt;: Click &lt;a href="https://GitHub.com/microsoft/Web-Dev-For-Beginners/fork"&gt;&lt;img src="https://img.shields.io/github/forks/microsoft/Web-Dev-For-beginners.svg?style=social&amp;amp;label=Fork" alt="GitHub forks" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Clone the Repository&lt;/strong&gt;: &lt;code&gt;git clone https://github.com/microsoft/Web-Dev-For-Beginners.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.com/invite/ByRwuEEgH4"&gt;&lt;strong&gt;Join The Azure AI Foundry Discord and meet experts and fellow developers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;üåê Multi-Language Support&lt;/h3&gt; 
&lt;h4&gt;Supported via GitHub Action (Automated &amp;amp; Always Up-to-Date)&lt;/h4&gt; 
&lt;!-- CO-OP TRANSLATOR LANGUAGES TABLE START --&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/ar/README.md"&gt;Arabic&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/bn/README.md"&gt;Bengali&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/bg/README.md"&gt;Bulgarian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/my/README.md"&gt;Burmese (Myanmar)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/zh/README.md"&gt;Chinese (Simplified)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/hk/README.md"&gt;Chinese (Traditional, Hong Kong)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/mo/README.md"&gt;Chinese (Traditional, Macau)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/tw/README.md"&gt;Chinese (Traditional, Taiwan)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/hr/README.md"&gt;Croatian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/cs/README.md"&gt;Czech&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/da/README.md"&gt;Danish&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/nl/README.md"&gt;Dutch&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/et/README.md"&gt;Estonian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/fi/README.md"&gt;Finnish&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/fr/README.md"&gt;French&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/de/README.md"&gt;German&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/el/README.md"&gt;Greek&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/he/README.md"&gt;Hebrew&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/hi/README.md"&gt;Hindi&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/hu/README.md"&gt;Hungarian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/id/README.md"&gt;Indonesian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/it/README.md"&gt;Italian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/ja/README.md"&gt;Japanese&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/ko/README.md"&gt;Korean&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/lt/README.md"&gt;Lithuanian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/ms/README.md"&gt;Malay&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/mr/README.md"&gt;Marathi&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/ne/README.md"&gt;Nepali&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/no/README.md"&gt;Norwegian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/fa/README.md"&gt;Persian (Farsi)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/pl/README.md"&gt;Polish&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/br/README.md"&gt;Portuguese (Brazil)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/pt/README.md"&gt;Portuguese (Portugal)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/pa/README.md"&gt;Punjabi (Gurmukhi)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/ro/README.md"&gt;Romanian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/ru/README.md"&gt;Russian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/sr/README.md"&gt;Serbian (Cyrillic)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/sk/README.md"&gt;Slovak&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/sl/README.md"&gt;Slovenian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/es/README.md"&gt;Spanish&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/sw/README.md"&gt;Swahili&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/sv/README.md"&gt;Swedish&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/tl/README.md"&gt;Tagalog (Filipino)&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/ta/README.md"&gt;Tamil&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/th/README.md"&gt;Thai&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/tr/README.md"&gt;Turkish&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/uk/README.md"&gt;Ukrainian&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/ur/README.md"&gt;Urdu&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/translations/vi/README.md"&gt;Vietnamese&lt;/a&gt;&lt;/p&gt; 
&lt;!-- CO-OP TRANSLATOR LANGUAGES TABLE END --&gt; 
&lt;p&gt;&lt;strong&gt;If you wish to have additional translations languages supported are listed &lt;a href="https://github.com/Azure/co-op-translator/raw/main/getting_started/supported-languages.md"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://open.vscode.dev/microsoft/Web-Dev-For-Beginners"&gt;&lt;img src="https://img.shields.io/static/v1?logo=visualstudiocode&amp;amp;label=&amp;amp;message=Open%20in%20Visual%20Studio%20Code&amp;amp;labelColor=2c2c32&amp;amp;color=007acc&amp;amp;logoColor=007acc" alt="Open in Visual Studio Code" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;üßë‚Äçüéì &lt;em&gt;Are you a student?&lt;/em&gt;&lt;/h4&gt; 
&lt;p&gt;Visit &lt;a href="https://docs.microsoft.com/learn/student-hub/?WT.mc_id=academic-77807-sagibbon"&gt;&lt;strong&gt;Student Hub page&lt;/strong&gt;&lt;/a&gt; where you will find beginner resources, Student packs and even ways to get a free certificate voucher. This is the page you want to bookmark and check from time to time as we switch out content monthly.&lt;/p&gt; 
&lt;h3&gt;üì£ Announcement - New GitHub Copilot Agent mode challenges to complete!&lt;/h3&gt; 
&lt;p&gt;New Challenge added, look for "GitHub Copilot Agent Challenge üöÄ" in most chapters. That's a new challenge for you to complete using GitHub Copilot and Agent mode. If you haven't used Agent mode before it's capable of not just generating text but can also create and edit files, run commands and more.&lt;/p&gt; 
&lt;h3&gt;üì£ Announcement - &lt;em&gt;New Project to build using Generative AI&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;New AI Assistant project just added, check it out &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/09-chat-project/README.md"&gt;project&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;üì£ Announcement - &lt;em&gt;New Curriculum&lt;/em&gt; on Generative AI for JavaScript was just released&lt;/h3&gt; 
&lt;p&gt;Don't miss our new Generative AI curriculum!&lt;/p&gt; 
&lt;p&gt;Visit &lt;a href="https://aka.ms/genai-js-course"&gt;https://aka.ms/genai-js-course&lt;/a&gt; to get started!&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/images/background.png" alt="Background" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lessons covering everything from basics to RAG.&lt;/li&gt; 
 &lt;li&gt;Interact with historical characters using GenAI and our companion app.&lt;/li&gt; 
 &lt;li&gt;Fun and engaging narrative, you'll be time traveling!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/images/character.png" alt="character" /&gt;&lt;/p&gt; 
&lt;p&gt;Each lesson includes an assignment to complete, a knowledge check and a challenge to guide you on learning topics like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Prompting and prompt engineering&lt;/li&gt; 
 &lt;li&gt;Text and image app generation&lt;/li&gt; 
 &lt;li&gt;Search apps&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Visit &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/%5Bhttps://aka.ms/genai-js-course"&gt;https://aka.ms/genai-js-course&lt;/a&gt; to get started!&lt;/p&gt; 
&lt;h2&gt;üå± Getting Started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Teachers&lt;/strong&gt;, we have &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/for-teachers.md"&gt;included some suggestions&lt;/a&gt; on how to use this curriculum. We'd love your feedback &lt;a href="https://github.com/microsoft/Web-Dev-For-Beginners/discussions/categories/teacher-corner"&gt;in our discussion forum&lt;/a&gt;!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://aka.ms/student-page/?WT.mc_id=academic-77807-sagibbon"&gt;Learners&lt;/a&gt;&lt;/strong&gt;, for each lesson, start with a pre-lecture quiz and follow through with reading the lecture material, completing the various activities and check your understanding with the post-lecture quiz.&lt;/p&gt; 
&lt;p&gt;To enhance your learning experience, connect with your peers to work on the projects together! Discussions are encouraged in our &lt;a href="https://github.com/microsoft/Web-Dev-For-Beginners/discussions"&gt;discussion forum&lt;/a&gt; where our team of moderators will be available to answer your questions.&lt;/p&gt; 
&lt;p&gt;To further your education, we highly recommend exploring &lt;a href="https://learn.microsoft.com/users/wirelesslife/collections/p1ddcy5jwy0jkm?WT.mc_id=academic-77807-sagibbon"&gt;Microsoft Learn&lt;/a&gt; for additional study materials.&lt;/p&gt; 
&lt;h3&gt;üìã Setting up your environment&lt;/h3&gt; 
&lt;p&gt;This curriculum has a development environment ready to go! As you get started you can choose to run the curriculum in a &lt;a href="https://github.com/features/codespaces/"&gt;Codespace&lt;/a&gt; (&lt;em&gt;a browser-based, no installs needed environment&lt;/em&gt;), or locally on your computer using a text editor such as &lt;a href="https://code.visualstudio.com/?WT.mc_id=academic-77807-sagibbon"&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Create your repository&lt;/h4&gt; 
&lt;p&gt;For you to easily save your work, it is recommended that you create your own copy of this repository. You can do this by clicking the &lt;strong&gt;Use this template&lt;/strong&gt; button at the top of the page. This will create a new repository in your GitHub account with a copy of the curriculum.&lt;/p&gt; 
&lt;p&gt;Follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Fork the Repository&lt;/strong&gt;: Click on the "Fork" button at the top-right corner of this page.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Clone the Repository&lt;/strong&gt;: &lt;code&gt;git clone https://github.com/microsoft/Web-Dev-For-Beginners.git&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Running the curriculum in a Codespace&lt;/h4&gt; 
&lt;p&gt;In your copy of this repository that you created, click the &lt;strong&gt;Code&lt;/strong&gt; button and select &lt;strong&gt;Open with Codespaces&lt;/strong&gt;. This will create a new Codespace for you to work in.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/images/createcodespace.png" alt="Codespace" /&gt;&lt;/p&gt; 
&lt;h4&gt;Running the curriculum locally on your computer&lt;/h4&gt; 
&lt;p&gt;To run this curriculum locally on your computer, you will need a text editor, a browser and a command line tool. Our first lesson, &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/1-getting-started-lessons/1-intro-to-programming-languages"&gt;Introduction to Programming Languages and Tools of the Trade&lt;/a&gt;, will walk you through various options for each of these tools for you to select what works best for you.&lt;/p&gt; 
&lt;p&gt;Our recommendation is to use &lt;a href="https://code.visualstudio.com/?WT.mc_id=academic-77807-sagibbon"&gt;Visual Studio Code&lt;/a&gt; as your editor, which also has a built-in &lt;a href="https://code.visualstudio.com/docs/terminal/basics/?WT.mc_id=academic-77807-sagibbon"&gt;Terminal&lt;/a&gt;. You can download Visual Studio Code &lt;a href="https://code.visualstudio.com/?WT.mc_id=academic-77807-sagibbon"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Clone your repository to your computer. You can do this by clicking the &lt;strong&gt;Code&lt;/strong&gt; button and copying the URL:&lt;/p&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/images/createcodespace.png"&gt;CodeSpace&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Then, open &lt;a href="https://code.visualstudio.com/docs/terminal/basics/?WT.mc_id=academic-77807-sagibbon"&gt;Terminal&lt;/a&gt; within &lt;a href="https://code.visualstudio.com/?WT.mc_id=academic-77807-sagibbon"&gt;Visual Studio Code&lt;/a&gt; and run the following command, replacing &lt;code&gt;&amp;lt;your-repository-url&amp;gt;&lt;/code&gt; with the URL you just copied:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;git clone &amp;lt;your-repository-url&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the folder in Visual Studio Code. You can do this by clicking &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;Open Folder&lt;/strong&gt; and selecting the folder you just cloned.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Recommended Visual Studio Code extensions:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&amp;amp;WT.mc_id=academic-77807-sagibbon"&gt;Live Server&lt;/a&gt; - to preview HTML pages within Visual Studio Code&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot&amp;amp;WT.mc_id=academic-77807-sagibbon"&gt;Copilot&lt;/a&gt; - to help you write code faster&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;üìÇ Each lesson includes:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;optional sketchnote&lt;/li&gt; 
 &lt;li&gt;optional supplemental video&lt;/li&gt; 
 &lt;li&gt;pre-lesson warmup quiz&lt;/li&gt; 
 &lt;li&gt;written lesson&lt;/li&gt; 
 &lt;li&gt;for project-based lessons, step-by-step guides on how to build the project&lt;/li&gt; 
 &lt;li&gt;knowledge checks&lt;/li&gt; 
 &lt;li&gt;a challenge&lt;/li&gt; 
 &lt;li&gt;supplemental reading&lt;/li&gt; 
 &lt;li&gt;assignment&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ff-quizzes.netlify.app/web/"&gt;post-lesson quiz&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;A note about quizzes&lt;/strong&gt;: All quizzes are contained in the Quiz-app folder, 48 total quizzes of three questions each. They are available &lt;a href="https://ff-quizzes.netlify.app/web/"&gt;here&lt;/a&gt; the quiz app can be run locally or deployed to Azure; follow the instruction in the &lt;code&gt;quiz-app&lt;/code&gt; folder.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;üóÉÔ∏è Lessons&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;Project Name&lt;/th&gt; 
   &lt;th align="center"&gt;Concepts Taught&lt;/th&gt; 
   &lt;th&gt;Learning Objectives&lt;/th&gt; 
   &lt;th align="center"&gt;Linked Lesson&lt;/th&gt; 
   &lt;th align="center"&gt;Author&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;01&lt;/td&gt; 
   &lt;td align="center"&gt;Getting Started&lt;/td&gt; 
   &lt;td align="center"&gt;Introduction to Programming and Tools of the Trade&lt;/td&gt; 
   &lt;td&gt;Learn the basic underpinnings behind most programming languages and about software that helps professional developers do their jobs&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/1-getting-started-lessons/1-intro-to-programming-languages/README.md"&gt;Intro to Programming Languages and Tools of the Trade&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jasmine&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;02&lt;/td&gt; 
   &lt;td align="center"&gt;Getting Started&lt;/td&gt; 
   &lt;td align="center"&gt;Basics of GitHub, includes working with a team&lt;/td&gt; 
   &lt;td&gt;How to use GitHub in your project, how to collaborate with others on a code base&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/1-getting-started-lessons/2-github-basics/README.md"&gt;Intro to GitHub&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Floor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;03&lt;/td&gt; 
   &lt;td align="center"&gt;Getting Started&lt;/td&gt; 
   &lt;td align="center"&gt;Accessibility&lt;/td&gt; 
   &lt;td&gt;Learn the basics of web accessibility&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/1-getting-started-lessons/3-accessibility/README.md"&gt;Accessibility Fundamentals&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Christopher&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;04&lt;/td&gt; 
   &lt;td align="center"&gt;JS Basics&lt;/td&gt; 
   &lt;td align="center"&gt;JavaScript Data Types&lt;/td&gt; 
   &lt;td&gt;The basics of JavaScript data types&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/2-js-basics/1-data-types/README.md"&gt;Data Types&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jasmine&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;05&lt;/td&gt; 
   &lt;td align="center"&gt;JS Basics&lt;/td&gt; 
   &lt;td align="center"&gt;Functions and Methods&lt;/td&gt; 
   &lt;td&gt;Learn about functions and methods to manage an application's logic flow&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/2-js-basics/2-functions-methods/README.md"&gt;Functions and Methods&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jasmine and Christopher&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;06&lt;/td&gt; 
   &lt;td align="center"&gt;JS Basics&lt;/td&gt; 
   &lt;td align="center"&gt;Making Decisions with JS&lt;/td&gt; 
   &lt;td&gt;Learn how to create conditions in your code using decision-making methods&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/2-js-basics/3-making-decisions/README.md"&gt;Making Decisions&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jasmine&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;07&lt;/td&gt; 
   &lt;td align="center"&gt;JS Basics&lt;/td&gt; 
   &lt;td align="center"&gt;Arrays and Loops&lt;/td&gt; 
   &lt;td&gt;Work with data using arrays and loops in JavaScript&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/2-js-basics/4-arrays-loops/README.md"&gt;Arrays and Loops&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jasmine&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;08&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/3-terrarium/solution/README.md"&gt;Terrarium&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;HTML in Practice&lt;/td&gt; 
   &lt;td&gt;Build the HTML to create an online terrarium, focusing on building a layout&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/3-terrarium/1-intro-to-html/README.md"&gt;Introduction to HTML&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;09&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/3-terrarium/solution/README.md"&gt;Terrarium&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;CSS in Practice&lt;/td&gt; 
   &lt;td&gt;Build the CSS to style the online terrarium, focusing on the basics of CSS including making the page responsive&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/3-terrarium/2-intro-to-css/README.md"&gt;Introduction to CSS&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;10&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/3-terrarium/solution/README.md"&gt;Terrarium&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;JavaScript Closures, DOM manipulation&lt;/td&gt; 
   &lt;td&gt;Build the JavaScript to make the terrarium function as a drag/drop interface, focusing on closures and DOM manipulation&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/3-terrarium/3-intro-to-DOM-and-closures/README.md"&gt;JavaScript Closures, DOM manipulation&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;11&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/4-typing-game/solution/README.md"&gt;Typing Game&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Build a Typing Game&lt;/td&gt; 
   &lt;td&gt;Learn how to use keyboard events to drive the logic of your JavaScript app&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/4-typing-game/typing-game/README.md"&gt;Event-Driven Programming&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Christopher&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;12&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/5-browser-extension/solution/README.md"&gt;Green Browser Extension&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Working with Browsers&lt;/td&gt; 
   &lt;td&gt;Learn how browsers work, their history, and how to scaffold the first elements of a browser extension&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/5-browser-extension/1-about-browsers/README.md"&gt;About Browsers&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;13&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/5-browser-extension/solution/README.md"&gt;Green Browser Extension&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Building a form, calling an API and storing variables in local storage&lt;/td&gt; 
   &lt;td&gt;Build the JavaScript elements of your browser extension to call an API using variables stored in local storage&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/5-browser-extension/2-forms-browsers-local-storage/README.md"&gt;APIs, Forms, and Local Storage&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;14&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/5-browser-extension/solution/README.md"&gt;Green Browser Extension&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Background processes in the browser, web performance&lt;/td&gt; 
   &lt;td&gt;Use the browser's background processes to manage the extension's icon; learn about web performance and some optimizations to make&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/5-browser-extension/3-background-tasks-and-performance/README.md"&gt;Background Tasks and Performance&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Jen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;15&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/solution/README.md"&gt;Space Game&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;More Advanced Game Development with JavaScript&lt;/td&gt; 
   &lt;td&gt;Learn about Inheritance using both Classes and Composition and the Pub/Sub pattern, in preparation for building a game&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/1-introduction/README.md"&gt;Introduction to Advanced Game Development&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Chris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;16&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/solution/README.md"&gt;Space Game&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Drawing to canvas&lt;/td&gt; 
   &lt;td&gt;Learn about the Canvas API, used to draw elements to a screen&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/2-drawing-to-canvas/README.md"&gt;Drawing to Canvas&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Chris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;17&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/solution/README.md"&gt;Space Game&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Moving elements around the screen&lt;/td&gt; 
   &lt;td&gt;Discover how elements can gain motion using the cartesian coordinates and the Canvas API&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/3-moving-elements-around/README.md"&gt;Moving Elements Around&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Chris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;18&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/solution/README.md"&gt;Space Game&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Collision detection&lt;/td&gt; 
   &lt;td&gt;Make elements collide and react to each other using keypresses and provide a cooldown function to ensure performance of the game&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/4-collision-detection/README.md"&gt;Collision Detection&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Chris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;19&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/solution/README.md"&gt;Space Game&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Keeping score&lt;/td&gt; 
   &lt;td&gt;Perform math calculations based on the game's status and performance&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/5-keeping-score/README.md"&gt;Keeping Score&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Chris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;20&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/solution/README.md"&gt;Space Game&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Ending and restarting the game&lt;/td&gt; 
   &lt;td&gt;Learn about ending and restarting the game, including cleaning up assets and resetting variable values&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/6-space-game/6-end-condition/README.md"&gt;The Ending Condition&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Chris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;21&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/7-bank-project/solution/README.md"&gt;Banking App&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;HTML Templates and Routes in a Web App&lt;/td&gt; 
   &lt;td&gt;Learn how to create the scaffold of a multipage website's architecture using routing and HTML templates&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/7-bank-project/1-template-route/README.md"&gt;HTML Templates and Routes&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Yohan&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;22&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/7-bank-project/solution/README.md"&gt;Banking App&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Build a Login and Registration Form&lt;/td&gt; 
   &lt;td&gt;Learn about building forms and handling validation routines&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/7-bank-project/2-forms/README.md"&gt;Forms&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Yohan&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;23&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/7-bank-project/solution/README.md"&gt;Banking App&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Methods of Fetching and Using Data&lt;/td&gt; 
   &lt;td&gt;How data flows in and out of your app, how to fetch it, store it, and dispose of it&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/7-bank-project/3-data/README.md"&gt;Data&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Yohan&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;24&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/7-bank-project/solution/README.md"&gt;Banking App&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Concepts of State Management&lt;/td&gt; 
   &lt;td&gt;Learn how your app retains state and how to manage it programmatically&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/7-bank-project/4-state-management/README.md"&gt;State Management&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Yohan&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;25&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/8-code-editor/"&gt;Browser/VScode Code&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Working with VScode&lt;/td&gt; 
   &lt;td&gt;Learn how to Using a code editor&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/8-code-editor/1-using-a-code-editor/README.md"&gt;Use VScode Code Editor&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Chris&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;26&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/9-chat-project/README.md"&gt;AI Assistants&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Working with AI&lt;/td&gt; 
   &lt;td&gt;Learn how to build your own AI assistant&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/9-chat-project/README.md"&gt;AI Assistant project&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Chris&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;üè´ Pedagogy&lt;/h2&gt; 
&lt;p&gt;Our curriculum is designed with two key pedagogical principles in mind:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;project-based learning&lt;/li&gt; 
 &lt;li&gt;frequent quizzes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The program teaches the fundamentals of JavaScript, HTML, and CSS, as well as the latest tools and techniques used by today's web developers. Students will have the opportunity to develop hands-on experience by building a typing game, virtual terrarium, eco-friendly browser extension, space-invader-style game, and a banking app for businesses. By the end of the series, students will have gained a solid understanding of web development.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;üéì You can take the first few lessons in this curriculum as a &lt;a href="https://docs.microsoft.com/learn/paths/web-development-101/?WT.mc_id=academic-77807-sagibbon"&gt;Learn Path&lt;/a&gt; on Microsoft Learn!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;By ensuring that the content aligns with projects, the process is made more engaging for students and retention of concepts will be augmented. We also wrote several starter lessons in JavaScript basics to introduce concepts, paired with a video from the "&lt;a href="https://channel9.msdn.com/Series/Beginners-Series-to-JavaScript/?WT.mc_id=academic-77807-sagibbon"&gt;Beginners Series to: JavaScript&lt;/a&gt;" collection of video tutorials, some of whose authors contributed to this curriculum.&lt;/p&gt; 
&lt;p&gt;In addition, a low-stakes quiz before a class sets the intention of the student towards learning a topic, while a second quiz after class ensures further retention. This curriculum was designed to be flexible and fun and can be taken in whole or in part. The projects start small and become increasingly complex by the end of the 12-week cycle.&lt;/p&gt; 
&lt;p&gt;While we have purposefully avoided introducing JavaScript frameworks to concentrate on the basic skills needed as a web developer before adopting a framework, a good next step to completing this curriculum would be learning about Node.js via another collection of videos: "&lt;a href="https://channel9.msdn.com/Series/Beginners-Series-to-Nodejs/?WT.mc_id=academic-77807-sagibbon"&gt;Beginner Series to: Node.js&lt;/a&gt;".&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Visit our &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt; guidelines. We welcome your constructive feedback!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;üß≠ Offline access&lt;/h2&gt; 
&lt;p&gt;You can run this documentation offline by using &lt;a href="https://docsify.js.org/#/"&gt;Docsify&lt;/a&gt;. Fork this repo, &lt;a href="https://docsify.js.org/#/quickstart"&gt;install Docsify&lt;/a&gt; on your local machine, and then in the root folder of this repo, type &lt;code&gt;docsify serve&lt;/code&gt;. The website will be served on port 3000 on your localhost: &lt;code&gt;localhost:3000&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;üìò PDF&lt;/h2&gt; 
&lt;p&gt;A PDF of all of the lessons can be found &lt;a href="https://microsoft.github.io/Web-Dev-For-Beginners/pdf/readme.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üéí Other Courses&lt;/h2&gt; 
&lt;p&gt;Our team produces other courses! Check out:&lt;/p&gt; 
&lt;!-- CO-OP TRANSLATOR OTHER COURSES START --&gt; 
&lt;h3&gt;Azure / Edge / MCP / Agents&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/microsoft/AZD-for-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/AZD%20for%20Beginners-0078D4?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=0078D4" alt="AZD for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/edgeai-for-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Edge%20AI%20for%20Beginners-00B8E4?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=00B8E4" alt="Edge AI for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/mcp-for-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/MCP%20for%20Beginners-009688?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=009688" alt="MCP for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/ai-agents-for-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/AI%20Agents%20for%20Beginners-00C49A?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=00C49A" alt="AI Agents for Beginners" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Generative AI Series&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/microsoft/generative-ai-for-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Generative%20AI%20for%20Beginners-8B5CF6?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=8B5CF6" alt="Generative AI for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/Generative-AI-for-beginners-dotnet?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Generative%20AI%20(.NET)-9333EA?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=9333EA" alt="Generative AI (.NET)" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/generative-ai-for-beginners-java?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Generative%20AI%20(Java)-C084FC?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=C084FC" alt="Generative AI (Java)" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/generative-ai-with-javascript?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Generative%20AI%20(JavaScript)-E879F9?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=E879F9" alt="Generative AI (JavaScript)" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Core Learning&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://aka.ms/ml-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/ML%20for%20Beginners-22C55E?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=22C55E" alt="ML for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://aka.ms/datascience-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Data%20Science%20for%20Beginners-84CC16?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=84CC16" alt="Data Science for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://aka.ms/ai-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/AI%20for%20Beginners-A3E635?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=A3E635" alt="AI for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/Security-101?WT.mc_id=academic-96948-sayoung"&gt;&lt;img src="https://img.shields.io/badge/Cybersecurity%20for%20Beginners-F97316?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=F97316" alt="Cybersecurity for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://aka.ms/webdev-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Web%20Dev%20for%20Beginners-EC4899?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=EC4899" alt="Web Dev for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://aka.ms/iot-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/IoT%20for%20Beginners-14B8A6?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=14B8A6" alt="IoT for Beginners" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/xr-development-for-beginners?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/XR%20Development%20for%20Beginners-38BDF8?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=38BDF8" alt="XR Development for Beginners" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Copilot Series&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://aka.ms/GitHubCopilotAI?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Copilot%20for%20AI%20Paired%20Programming-FACC15?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=FACC15" alt="Copilot for AI Paired Programming" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/mastering-github-copilot-for-dotnet-csharp-developers?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Copilot%20for%20C%23/.NET-FBBF24?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=FBBF24" alt="Copilot for C#/.NET" /&gt;&lt;/a&gt; &lt;a href="https://github.com/microsoft/CopilotAdventures?WT.mc_id=academic-105485-koreyst"&gt;&lt;img src="https://img.shields.io/badge/Copilot%20Adventure-FDE68A?style=for-the-badge&amp;amp;labelColor=E5E7EB&amp;amp;color=FDE68A" alt="Copilot Adventure" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- CO-OP TRANSLATOR OTHER COURSES END --&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you get stuck or have any questions about building AI apps, join:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://aka.ms/foundry/discord"&gt;&lt;img src="https://img.shields.io/badge/Discord-Azure_AI_Foundry_Community_Discord-blue?style=for-the-badge&amp;amp;logo=discord&amp;amp;color=5865f2&amp;amp;logoColor=fff" alt="Azure AI Foundry Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you have product feedback or errors while building visit:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://aka.ms/foundry/forum"&gt;&lt;img src="https://img.shields.io/badge/GitHub-Azure_AI_Foundry_Developer_Forum-blue?style=for-the-badge&amp;amp;logo=github&amp;amp;color=000000&amp;amp;logoColor=fff" alt="Azure AI Foundry Developer Forum" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the MIT license. See the &lt;a href="https://raw.githubusercontent.com/microsoft/Web-Dev-For-Beginners/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs/node</title>
      <link>https://github.com/nodejs/node</link>
      <description>&lt;p&gt;Node.js JavaScript runtime ‚ú®üê¢üöÄ‚ú®&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js&lt;/h1&gt; 
&lt;p&gt;Node.js is an open-source, cross-platform JavaScript runtime environment.&lt;/p&gt; 
&lt;p&gt;For information on using Node.js, see the &lt;a href="https://nodejs.org/"&gt;Node.js website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Node.js project uses an &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/GOVERNANCE.md"&gt;open governance model&lt;/a&gt;. The &lt;a href="https://openjsf.org/"&gt;OpenJS Foundation&lt;/a&gt; provides support for the project.&lt;/p&gt; 
&lt;p&gt;Contributors are expected to act in a collaborative manner to move the project forward. We encourage the constructive exchange of contrary opinions and compromise. The &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/GOVERNANCE.md#technical-steering-committee"&gt;TSC&lt;/a&gt; reserves the right to limit or block contributors who repeatedly act in ways that discourage, exhaust, or otherwise negatively affect other participants.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This project has a &lt;a href="https://github.com/nodejs/admin/raw/HEAD/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#support"&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#release-types"&gt;Release types&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#download"&gt;Download&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#current-and-lts-releases"&gt;Current and LTS releases&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#nightly-releases"&gt;Nightly releases&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#api-documentation"&gt;API documentation&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#verifying-binaries"&gt;Verifying binaries&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#building-nodejs"&gt;Building Node.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#security"&gt;Security&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#contributing-to-nodejs"&gt;Contributing to Node.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#current-project-team-members"&gt;Current project team members&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#tsc-technical-steering-committee"&gt;TSC (Technical Steering Committee)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#collaborators"&gt;Collaborators&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#triagers"&gt;Triagers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#release-keys"&gt;Release keys&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Looking for help? Check out the &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/.github/SUPPORT.md"&gt;instructions for getting support&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Release types&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Current&lt;/strong&gt;: Under active development. Code for the Current release is in the branch for its major version number (for example, &lt;a href="https://github.com/nodejs/node/tree/v22.x"&gt;v22.x&lt;/a&gt;). Node.js releases a new major version every 6 months, allowing for breaking changes. This happens in April and October every year. Releases appearing each October have a support life of 8 months. Releases appearing each April convert to LTS (see below) each October.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LTS&lt;/strong&gt;: Releases that receive Long Term Support, with a focus on stability and security. Every even-numbered major version will become an LTS release. LTS releases receive 12 months of &lt;em&gt;Active LTS&lt;/em&gt; support and a further 18 months of &lt;em&gt;Maintenance&lt;/em&gt;. LTS release lines have alphabetically-ordered code names, beginning with v4 Argon. There are no breaking changes or feature additions, except in some special circumstances.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nightly&lt;/strong&gt;: Code from the Current branch built every 24-hours when there are changes. Use with caution.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Current and LTS releases follow &lt;a href="https://semver.org"&gt;semantic versioning&lt;/a&gt;. A member of the Release Team &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#release-keys"&gt;signs&lt;/a&gt; each Current and LTS release. For more information, see the &lt;a href="https://github.com/nodejs/Release#readme"&gt;Release README&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Download&lt;/h3&gt; 
&lt;p&gt;Binaries, installers, and source tarballs are available at &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Current and LTS releases&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://nodejs.org/download/release/"&gt;https://nodejs.org/download/release/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://nodejs.org/download/release/latest/"&gt;latest&lt;/a&gt; directory is an alias for the latest Current release. The latest-&lt;em&gt;codename&lt;/em&gt; directory is an alias for the latest release from an LTS line. For example, the &lt;a href="https://nodejs.org/download/release/latest-hydrogen/"&gt;latest-hydrogen&lt;/a&gt; directory contains the latest Hydrogen (Node.js 18) release.&lt;/p&gt; 
&lt;h4&gt;Nightly releases&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://nodejs.org/download/nightly/"&gt;https://nodejs.org/download/nightly/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Each directory and filename includes the version (e.g., &lt;code&gt;v22.0.0&lt;/code&gt;), followed by the UTC date (e.g., &lt;code&gt;20240424&lt;/code&gt; for April 24, 2024), and the short commit SHA of the HEAD of the release (e.g., &lt;code&gt;ddd0a9e494&lt;/code&gt;). For instance, a full directory name might look like &lt;code&gt;v22.0.0-nightly20240424ddd0a9e494&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;API documentation&lt;/h4&gt; 
&lt;p&gt;Documentation for the latest Current release is at &lt;a href="https://nodejs.org/api/"&gt;https://nodejs.org/api/&lt;/a&gt;. Version-specific documentation is available in each release directory in the &lt;em&gt;docs&lt;/em&gt; subdirectory. Version-specific documentation is also at &lt;a href="https://nodejs.org/download/docs/"&gt;https://nodejs.org/download/docs/&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Verifying binaries&lt;/h3&gt; 
&lt;p&gt;Download directories contain a &lt;code&gt;SHASUMS256.txt.asc&lt;/code&gt; file with SHA checksums for the files and the releaser PGP signature.&lt;/p&gt; 
&lt;p&gt;You can get a trusted keyring from nodejs/release-keys, e.g. using &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -fsLo "/path/to/nodejs-keyring.kbx" "https://github.com/nodejs/release-keys/raw/HEAD/gpg/pubring.kbx"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can import the releaser keys in your default keyring, see &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#release-keys"&gt;Release keys&lt;/a&gt; for commands to how to do that.&lt;/p&gt; 
&lt;p&gt;Then, you can verify the files you've downloaded locally (if you're using your default keyring, pass &lt;code&gt;--keyring="${GNUPGHOME:-~/.gnupg}/pubring.kbx"&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -fsO "https://nodejs.org/dist/${VERSION}/SHASUMS256.txt.asc" \
&amp;amp;&amp;amp; gpgv --keyring="/path/to/nodejs-keyring.kbx" --output SHASUMS256.txt &amp;lt; SHASUMS256.txt.asc \
&amp;amp;&amp;amp; shasum --check SHASUMS256.txt --ignore-missing
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building Node.js&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/BUILDING.md"&gt;BUILDING.md&lt;/a&gt; for instructions on how to build Node.js from source and a list of supported platforms.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;For information on reporting security vulnerabilities in Node.js, see &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/SECURITY.md"&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing to Node.js&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/CONTRIBUTING.md"&gt;Contributing to the project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nodejs/TSC/raw/HEAD/WORKING_GROUPS.md"&gt;Working Groups&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/strategic-initiatives.md"&gt;Strategic initiatives&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/technical-values.md"&gt;Technical values and prioritization&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Current project team members&lt;/h2&gt; 
&lt;p&gt;For information about the governance of the Node.js project, see &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/GOVERNANCE.md"&gt;GOVERNANCE.md&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- node-core-utils and find-inactive-tsc.mjs depend on the format of the TSC
     list. If the format changes, those utilities need to be tested and
     updated. --&gt; 
&lt;h3&gt;TSC (Technical Steering Committee)&lt;/h3&gt; 
&lt;h4&gt;TSC voting members&lt;/h4&gt; 
&lt;!--lint disable prohibited-strings--&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aduh95"&gt;aduh95&lt;/a&gt; - &lt;strong&gt;Antoine du Hamel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:duhamelantoine1995@gmail.com"&gt;duhamelantoine1995@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anonrig"&gt;anonrig&lt;/a&gt; - &lt;strong&gt;Yagiz Nizipli&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yagiz@nizipli.com"&gt;yagiz@nizipli.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/benjamingr"&gt;benjamingr&lt;/a&gt; - &lt;strong&gt;Benjamin Gruenbaum&lt;/strong&gt; &amp;lt;&lt;a href="mailto:benjamingr@gmail.com"&gt;benjamingr@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BridgeAR"&gt;BridgeAR&lt;/a&gt; - &lt;strong&gt;Ruben Bridgewater&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruben@bridgewater.de"&gt;ruben@bridgewater.de&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gireeshpunathil"&gt;gireeshpunathil&lt;/a&gt; - &lt;strong&gt;Gireesh Punathil&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gpunathi@in.ibm.com"&gt;gpunathi@in.ibm.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jasnell"&gt;jasnell&lt;/a&gt; - &lt;strong&gt;James M Snell&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jasnell@gmail.com"&gt;jasnell@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/joyeecheung"&gt;joyeecheung&lt;/a&gt; - &lt;strong&gt;Joyee Cheung&lt;/strong&gt; &amp;lt;&lt;a href="mailto:joyeec9h3@gmail.com"&gt;joyeec9h3@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/legendecas"&gt;legendecas&lt;/a&gt; - &lt;strong&gt;Chengzhong Wu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:legendecas@gmail.com"&gt;legendecas@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marco-ippolito"&gt;marco-ippolito&lt;/a&gt; - &lt;strong&gt;Marco Ippolito&lt;/strong&gt; &amp;lt;&lt;a href="mailto:marcoippolito54@gmail.com"&gt;marcoippolito54@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mcollina"&gt;mcollina&lt;/a&gt; - &lt;strong&gt;Matteo Collina&lt;/strong&gt; &amp;lt;&lt;a href="mailto:matteo.collina@gmail.com"&gt;matteo.collina@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/panva"&gt;panva&lt;/a&gt; - &lt;strong&gt;Filip Skokan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:panva.ip@gmail.com"&gt;panva.ip@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RafaelGSS"&gt;RafaelGSS&lt;/a&gt; - &lt;strong&gt;Rafael Gonzaga&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rafael.nunu@hotmail.com"&gt;rafael.nunu@hotmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RaisinTen"&gt;RaisinTen&lt;/a&gt; - &lt;strong&gt;Darshan Sen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:raisinten@gmail.com"&gt;raisinten@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/richardlau"&gt;richardlau&lt;/a&gt; - &lt;strong&gt;Richard Lau&lt;/strong&gt; &amp;lt;&lt;a href="mailto:richard.lau@ibm.com"&gt;richard.lau@ibm.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ronag"&gt;ronag&lt;/a&gt; - &lt;strong&gt;Robert Nagy&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ronagy@icloud.com"&gt;ronagy@icloud.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ruyadorno"&gt;ruyadorno&lt;/a&gt; - &lt;strong&gt;Ruy Adorno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruy@vlt.sh"&gt;ruy@vlt.sh&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ShogunPanda"&gt;ShogunPanda&lt;/a&gt; - &lt;strong&gt;Paolo Insogna&lt;/strong&gt; &amp;lt;&lt;a href="mailto:paolo@cowtech.it"&gt;paolo@cowtech.it&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/targos"&gt;targos&lt;/a&gt; - &lt;strong&gt;Micha√´l Zasso&lt;/strong&gt; &amp;lt;&lt;a href="mailto:targos@protonmail.com"&gt;targos@protonmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tniessen"&gt;tniessen&lt;/a&gt; - &lt;strong&gt;Tobias Nie√üen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:tniessen@tnie.de"&gt;tniessen@tnie.de&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;TSC regular members&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BethGriggs"&gt;BethGriggs&lt;/a&gt; - &lt;strong&gt;Beth Griggs&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bethanyngriggs@gmail.com"&gt;bethanyngriggs@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bnoordhuis"&gt;bnoordhuis&lt;/a&gt; - &lt;strong&gt;Ben Noordhuis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:info@bnoordhuis.nl"&gt;info@bnoordhuis.nl&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cjihrig"&gt;cjihrig&lt;/a&gt; - &lt;strong&gt;Colin Ihrig&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cjihrig@gmail.com"&gt;cjihrig@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/codebytere"&gt;codebytere&lt;/a&gt; - &lt;strong&gt;Shelley Vohr&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shelley.vohr@gmail.com"&gt;shelley.vohr@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GeoffreyBooth"&gt;GeoffreyBooth&lt;/a&gt; - &lt;strong&gt;Geoffrey Booth&lt;/strong&gt; &amp;lt;&lt;a href="mailto:webadmin@geoffreybooth.com"&gt;webadmin@geoffreybooth.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MoLow"&gt;MoLow&lt;/a&gt; - &lt;strong&gt;Moshe Atlow&lt;/strong&gt; &amp;lt;&lt;a href="mailto:moshe@atlow.co.il"&gt;moshe@atlow.co.il&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Trott"&gt;Trott&lt;/a&gt; - &lt;strong&gt;Rich Trott&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rtrott@gmail.com"&gt;rtrott@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;TSC emeriti members&lt;/summary&gt; 
 &lt;h4&gt;TSC emeriti members&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://github.com/addaleax"&gt;addaleax&lt;/a&gt; - &lt;strong&gt;Anna Henningsen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:anna@addaleax.net"&gt;anna@addaleax.net&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/apapirovski"&gt;apapirovski&lt;/a&gt; - &lt;strong&gt;Anatoli Papirovski&lt;/strong&gt; &amp;lt;&lt;a href="mailto:apapirovski@mac.com"&gt;apapirovski@mac.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ChALkeR"&gt;ChALkeR&lt;/a&gt; - &lt;strong&gt;–°–∫–æ–≤–æ—Ä–æ–¥–∞ –ù–∏–∫–∏—Ç–∞ –ê–Ω–¥—Ä–µ–µ–≤–∏—á&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chalkerx@gmail.com"&gt;chalkerx@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/chrisdickinson"&gt;chrisdickinson&lt;/a&gt; - &lt;strong&gt;Chris Dickinson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:christopher.s.dickinson@gmail.com"&gt;christopher.s.dickinson@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/danbev"&gt;danbev&lt;/a&gt; - &lt;strong&gt;Daniel Bevenius&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daniel.bevenius@gmail.com"&gt;daniel.bevenius@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/danielleadams"&gt;danielleadams&lt;/a&gt; - &lt;strong&gt;Danielle Adams&lt;/strong&gt; &amp;lt;&lt;a href="mailto:adamzdanielle@gmail.com"&gt;adamzdanielle@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/evanlucas"&gt;evanlucas&lt;/a&gt; - &lt;strong&gt;Evan Lucas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:evanlucas@me.com"&gt;evanlucas@me.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/fhinkel"&gt;fhinkel&lt;/a&gt; - &lt;strong&gt;Franziska Hinkelmann&lt;/strong&gt; &amp;lt;&lt;a href="mailto:franziska.hinkelmann@gmail.com"&gt;franziska.hinkelmann@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Fishrock123"&gt;Fishrock123&lt;/a&gt; - &lt;strong&gt;Jeremiah Senkpiel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fishrock123@rocketmail.com"&gt;fishrock123@rocketmail.com&lt;/a&gt;&amp;gt; (he/they)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/gabrielschulhof"&gt;gabrielschulhof&lt;/a&gt; - &lt;strong&gt;Gabriel Schulhof&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gabrielschulhof@gmail.com"&gt;gabrielschulhof@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/gibfahn"&gt;gibfahn&lt;/a&gt; - &lt;strong&gt;Gibson Fahnestock&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gibfahn@gmail.com"&gt;gibfahn@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/indutny"&gt;indutny&lt;/a&gt; - &lt;strong&gt;Fedor Indutny&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fedor@indutny.com"&gt;fedor@indutny.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/isaacs"&gt;isaacs&lt;/a&gt; - &lt;strong&gt;Isaac Z. Schlueter&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@izs.me"&gt;i@izs.me&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/joshgav"&gt;joshgav&lt;/a&gt; - &lt;strong&gt;Josh Gavant&lt;/strong&gt; &amp;lt;&lt;a href="mailto:josh.gavant@outlook.com"&gt;josh.gavant@outlook.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mhdawson"&gt;mhdawson&lt;/a&gt; - &lt;strong&gt;Michael Dawson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:midawson@redhat.com"&gt;midawson@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mmarchini"&gt;mmarchini&lt;/a&gt; - &lt;strong&gt;Mary Marchini&lt;/strong&gt; &amp;lt;&lt;a href="mailto:oss@mmarchini.me"&gt;oss@mmarchini.me&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mscdex"&gt;mscdex&lt;/a&gt; - &lt;strong&gt;Brian White&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mscdex@mscdex.net"&gt;mscdex@mscdex.net&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/MylesBorins"&gt;MylesBorins&lt;/a&gt; - &lt;strong&gt;Myles Borins&lt;/strong&gt; &amp;lt;&lt;a href="mailto:myles.borins@gmail.com"&gt;myles.borins@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/nebrius"&gt;nebrius&lt;/a&gt; - &lt;strong&gt;Bryan Hughes&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bryan@nebri.us"&gt;bryan@nebri.us&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ofrobots"&gt;ofrobots&lt;/a&gt; - &lt;strong&gt;Ali Ijaz Sheikh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ofrobots@google.com"&gt;ofrobots@google.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/orangemocha"&gt;orangemocha&lt;/a&gt; - &lt;strong&gt;Alexis Campailla&lt;/strong&gt; &amp;lt;&lt;a href="mailto:orangemocha@nodejs.org"&gt;orangemocha@nodejs.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/piscisaureus"&gt;piscisaureus&lt;/a&gt; - &lt;strong&gt;Bert Belder&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bertbelder@gmail.com"&gt;bertbelder@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rvagg"&gt;rvagg&lt;/a&gt; - &lt;strong&gt;Rod Vagg&lt;/strong&gt; &amp;lt;&lt;a href="mailto:r@va.gg"&gt;r@va.gg&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/sam-github"&gt;sam-github&lt;/a&gt; - &lt;strong&gt;Sam Roberts&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vieuxtech@gmail.com"&gt;vieuxtech@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/shigeki"&gt;shigeki&lt;/a&gt; - &lt;strong&gt;Shigeki Ohtsu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ohtsu@ohtsu.org"&gt;ohtsu@ohtsu.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/thefourtheye"&gt;thefourtheye&lt;/a&gt; - &lt;strong&gt;Sakthipriyan Vairamani&lt;/strong&gt; &amp;lt;&lt;a href="mailto:thechargingvolcano@gmail.com"&gt;thechargingvolcano@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/TimothyGu"&gt;TimothyGu&lt;/a&gt; - &lt;strong&gt;Tiancheng "Timothy" Gu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:timothygu99@gmail.com"&gt;timothygu99@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/trevnorris"&gt;trevnorris&lt;/a&gt; - &lt;strong&gt;Trevor Norris&lt;/strong&gt; &amp;lt;&lt;a href="mailto:trev.norris@gmail.com"&gt;trev.norris@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;!-- node-core-utils and find-inactive-collaborators.mjs depend on the format
     of the collaborator list. If the format changes, those utilities need to be
     tested and updated. --&gt; 
&lt;h3&gt;Collaborators&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/abmusse"&gt;abmusse&lt;/a&gt; - &lt;strong&gt;Abdirahim Musse&lt;/strong&gt; &amp;lt;&lt;a href="mailto:abdirahim.musse@ibm.com"&gt;abdirahim.musse@ibm.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/addaleax"&gt;addaleax&lt;/a&gt; - &lt;strong&gt;Anna Henningsen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:anna@addaleax.net"&gt;anna@addaleax.net&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aditi-1400"&gt;Aditi-1400&lt;/a&gt; - &lt;strong&gt;Aditi Singh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:aditisingh1400@gmail.com"&gt;aditisingh1400@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aduh95"&gt;aduh95&lt;/a&gt; - &lt;strong&gt;Antoine du Hamel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:duhamelantoine1995@gmail.com"&gt;duhamelantoine1995@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/aduh95"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anonrig"&gt;anonrig&lt;/a&gt; - &lt;strong&gt;Yagiz Nizipli&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yagiz@nizipli.com"&gt;yagiz@nizipli.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/anonrig"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atlowChemi"&gt;atlowChemi&lt;/a&gt; - &lt;strong&gt;Chemi Atlow&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chemi@atlow.co.il"&gt;chemi@atlow.co.il&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ayase-252"&gt;Ayase-252&lt;/a&gt; - &lt;strong&gt;Qingyu Deng&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@ayase-lab.com"&gt;i@ayase-lab.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bengl"&gt;bengl&lt;/a&gt; - &lt;strong&gt;Bryan English&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bryan@bryanenglish.com"&gt;bryan@bryanenglish.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/benjamingr"&gt;benjamingr&lt;/a&gt; - &lt;strong&gt;Benjamin Gruenbaum&lt;/strong&gt; &amp;lt;&lt;a href="mailto:benjamingr@gmail.com"&gt;benjamingr@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BethGriggs"&gt;BethGriggs&lt;/a&gt; - &lt;strong&gt;Beth Griggs&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bethanyngriggs@gmail.com"&gt;bethanyngriggs@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bnb"&gt;bnb&lt;/a&gt; - &lt;strong&gt;Tierney Cyren&lt;/strong&gt; &amp;lt;&lt;a href="mailto:hello@bnb.im"&gt;hello@bnb.im&lt;/a&gt;&amp;gt; (they/them)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bnoordhuis"&gt;bnoordhuis&lt;/a&gt; - &lt;strong&gt;Ben Noordhuis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:info@bnoordhuis.nl"&gt;info@bnoordhuis.nl&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BridgeAR"&gt;BridgeAR&lt;/a&gt; - &lt;strong&gt;Ruben Bridgewater&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruben@bridgewater.de"&gt;ruben@bridgewater.de&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cclauss"&gt;cclauss&lt;/a&gt; - &lt;strong&gt;Christian Clauss&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cclauss@me.com"&gt;cclauss@me.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cjihrig"&gt;cjihrig&lt;/a&gt; - &lt;strong&gt;Colin Ihrig&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cjihrig@gmail.com"&gt;cjihrig@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/codebytere"&gt;codebytere&lt;/a&gt; - &lt;strong&gt;Shelley Vohr&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shelley.vohr@gmail.com"&gt;shelley.vohr@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cola119"&gt;cola119&lt;/a&gt; - &lt;strong&gt;Kohei Ueno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kohei.ueno119@gmail.com"&gt;kohei.ueno119@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/daeyeon"&gt;daeyeon&lt;/a&gt; - &lt;strong&gt;Daeyeon Jeong&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daeyeon.dev@gmail.com"&gt;daeyeon.dev@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dario-piotrowicz"&gt;dario-piotrowicz&lt;/a&gt; - &lt;strong&gt;Dario Piotrowicz&lt;/strong&gt; &amp;lt;&lt;a href="mailto:dario.piotrowicz@gmail.com"&gt;dario.piotrowicz@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/debadree25"&gt;debadree25&lt;/a&gt; - &lt;strong&gt;Debadree Chatterjee&lt;/strong&gt; &amp;lt;&lt;a href="mailto:debadree333@gmail.com"&gt;debadree333@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deokjinkim"&gt;deokjinkim&lt;/a&gt; - &lt;strong&gt;Deokjin Kim&lt;/strong&gt; &amp;lt;&lt;a href="mailto:deokjin81.kim@gmail.com"&gt;deokjin81.kim@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/edsadr"&gt;edsadr&lt;/a&gt; - &lt;strong&gt;Adrian Estrada&lt;/strong&gt; &amp;lt;&lt;a href="mailto:edsadr@gmail.com"&gt;edsadr@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ErickWendel"&gt;ErickWendel&lt;/a&gt; - &lt;strong&gt;Erick Wendel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:erick.workspace@gmail.com"&gt;erick.workspace@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ethan-Arrowood"&gt;Ethan-Arrowood&lt;/a&gt; - &lt;strong&gt;Ethan Arrowood&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ethan@arrowood.dev"&gt;ethan@arrowood.dev&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fhinkel"&gt;fhinkel&lt;/a&gt; - &lt;strong&gt;Franziska Hinkelmann&lt;/strong&gt; &amp;lt;&lt;a href="mailto:franziska.hinkelmann@gmail.com"&gt;franziska.hinkelmann@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Flarna"&gt;Flarna&lt;/a&gt; - &lt;strong&gt;Gerhard St√∂bich&lt;/strong&gt; &amp;lt;&lt;a href="mailto:deb2001-github@yahoo.de"&gt;deb2001-github@yahoo.de&lt;/a&gt;&amp;gt; (he/they)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gabrielschulhof"&gt;gabrielschulhof&lt;/a&gt; - &lt;strong&gt;Gabriel Schulhof&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gabrielschulhof@gmail.com"&gt;gabrielschulhof@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/geeksilva97"&gt;geeksilva97&lt;/a&gt; - &lt;strong&gt;Edy Silva&lt;/strong&gt; &amp;lt;&lt;a href="mailto:edigleyssonsilva@gmail.com"&gt;edigleyssonsilva@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gengjiawen"&gt;gengjiawen&lt;/a&gt; - &lt;strong&gt;Jiawen Geng&lt;/strong&gt; &amp;lt;&lt;a href="mailto:technicalcute@gmail.com"&gt;technicalcute@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GeoffreyBooth"&gt;GeoffreyBooth&lt;/a&gt; - &lt;strong&gt;Geoffrey Booth&lt;/strong&gt; &amp;lt;&lt;a href="mailto:webadmin@geoffreybooth.com"&gt;webadmin@geoffreybooth.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gireeshpunathil"&gt;gireeshpunathil&lt;/a&gt; - &lt;strong&gt;Gireesh Punathil&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gpunathi@in.ibm.com"&gt;gpunathi@in.ibm.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/guybedford"&gt;guybedford&lt;/a&gt; - &lt;strong&gt;Guy Bedford&lt;/strong&gt; &amp;lt;&lt;a href="mailto:guybedford@gmail.com"&gt;guybedford@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/H4ad"&gt;H4ad&lt;/a&gt; - &lt;strong&gt;Vin√≠cius Louren√ßo Claro Cardoso&lt;/strong&gt; &amp;lt;&lt;a href="mailto:contact@viniciusl.com.br"&gt;contact@viniciusl.com.br&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HarshithaKP"&gt;HarshithaKP&lt;/a&gt; - &lt;strong&gt;Harshitha K P&lt;/strong&gt; &amp;lt;&lt;a href="mailto:harshitha014@gmail.com"&gt;harshitha014@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/himself65"&gt;himself65&lt;/a&gt; - &lt;strong&gt;Zeyu "Alex" Yang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:himself65@outlook.com"&gt;himself65@outlook.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/IlyasShabi"&gt;IlyasShabi&lt;/a&gt; - &lt;strong&gt;Ilyas Shabi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ilyasshabi94@gmail.com"&gt;ilyasshabi94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/islandryu"&gt;islandryu&lt;/a&gt; - &lt;strong&gt;Ryuhei Shima&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shimaryuhei@gmail.com"&gt;shimaryuhei@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jakecastelli"&gt;jakecastelli&lt;/a&gt; - &lt;strong&gt;Jake Yuesong Li&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jake.yuesong@gmail.com"&gt;jake.yuesong@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JakobJingleheimer"&gt;JakobJingleheimer&lt;/a&gt; - &lt;strong&gt;Jacob Smith&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jacob@frende.me"&gt;jacob@frende.me&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jasnell"&gt;jasnell&lt;/a&gt; - &lt;strong&gt;James M Snell&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jasnell@gmail.com"&gt;jasnell@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jazelly"&gt;jazelly&lt;/a&gt; - &lt;strong&gt;Jason Zhang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:xzha4350@gmail.com"&gt;xzha4350@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jkrems"&gt;jkrems&lt;/a&gt; - &lt;strong&gt;Jan Martin&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jan.krems@gmail.com"&gt;jan.krems@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JonasBa"&gt;JonasBa&lt;/a&gt; - &lt;strong&gt;Jonas Badalic&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jonas.badalic@gmail.com"&gt;jonas.badalic@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/joyeecheung"&gt;joyeecheung&lt;/a&gt; - &lt;strong&gt;Joyee Cheung&lt;/strong&gt; &amp;lt;&lt;a href="mailto:joyeec9h3@gmail.com"&gt;joyeec9h3@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/juanarbol"&gt;juanarbol&lt;/a&gt; - &lt;strong&gt;Juan Jos√© Arboleda&lt;/strong&gt; &amp;lt;&lt;a href="mailto:soyjuanarbol@gmail.com"&gt;soyjuanarbol@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JungMinu"&gt;JungMinu&lt;/a&gt; - &lt;strong&gt;Minwoo Jung&lt;/strong&gt; &amp;lt;&lt;a href="mailto:nodecorelab@gmail.com"&gt;nodecorelab@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KhafraDev"&gt;KhafraDev&lt;/a&gt; - &lt;strong&gt;Matthew Aitken&lt;/strong&gt; &amp;lt;&lt;a href="mailto:maitken033380023@gmail.com"&gt;maitken033380023@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/legendecas"&gt;legendecas&lt;/a&gt; - &lt;strong&gt;Chengzhong Wu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:legendecas@gmail.com"&gt;legendecas@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lemire"&gt;lemire&lt;/a&gt; - &lt;strong&gt;Daniel Lemire&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daniel@lemire.me"&gt;daniel@lemire.me&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/LiviaMedeiros"&gt;LiviaMedeiros&lt;/a&gt; - &lt;strong&gt;LiviaMedeiros&lt;/strong&gt; &amp;lt;&lt;a href="mailto:livia@cirno.name"&gt;livia@cirno.name&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ljharb"&gt;ljharb&lt;/a&gt; - &lt;strong&gt;Jordan Harband&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ljharb@gmail.com"&gt;ljharb@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lpinca"&gt;lpinca&lt;/a&gt; - &lt;strong&gt;Luigi Pinca&lt;/strong&gt; &amp;lt;&lt;a href="mailto:luigipinca@gmail.com"&gt;luigipinca@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lukekarrys"&gt;lukekarrys&lt;/a&gt; - &lt;strong&gt;Luke Karrys&lt;/strong&gt; &amp;lt;&lt;a href="mailto:luke@lukekarrys.com"&gt;luke@lukekarrys.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Lxxyx"&gt;Lxxyx&lt;/a&gt; - &lt;strong&gt;Zijian Liu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:lxxyxzj@gmail.com"&gt;lxxyxzj@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marco-ippolito"&gt;marco-ippolito&lt;/a&gt; - &lt;strong&gt;Marco Ippolito&lt;/strong&gt; &amp;lt;&lt;a href="mailto:marcoippolito54@gmail.com"&gt;marcoippolito54@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/marco-ippolito"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marsonya"&gt;marsonya&lt;/a&gt; - &lt;strong&gt;Akhil Marsonya&lt;/strong&gt; &amp;lt;&lt;a href="mailto:akhil.marsonya27@gmail.com"&gt;akhil.marsonya27@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MattiasBuelens"&gt;MattiasBuelens&lt;/a&gt; - &lt;strong&gt;Mattias Buelens&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mattias@buelens.com"&gt;mattias@buelens.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mcollina"&gt;mcollina&lt;/a&gt; - &lt;strong&gt;Matteo Collina&lt;/strong&gt; &amp;lt;&lt;a href="mailto:matteo.collina@gmail.com"&gt;matteo.collina@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/mcollina"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meixg"&gt;meixg&lt;/a&gt; - &lt;strong&gt;Xuguang Mei&lt;/strong&gt; &amp;lt;&lt;a href="mailto:meixuguang@gmail.com"&gt;meixuguang@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mhdawson"&gt;mhdawson&lt;/a&gt; - &lt;strong&gt;Michael Dawson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:midawson@redhat.com"&gt;midawson@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MoLow"&gt;MoLow&lt;/a&gt; - &lt;strong&gt;Moshe Atlow&lt;/strong&gt; &amp;lt;&lt;a href="mailto:moshe@atlow.co.il"&gt;moshe@atlow.co.il&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MrJithil"&gt;MrJithil&lt;/a&gt; - &lt;strong&gt;Jithil P Ponnan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jithil@outlook.com"&gt;jithil@outlook.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ovflowd"&gt;ovflowd&lt;/a&gt; - &lt;strong&gt;Claudio Wunder&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cwunder@gnome.org"&gt;cwunder@gnome.org&lt;/a&gt;&amp;gt; (he/they)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/panva"&gt;panva&lt;/a&gt; - &lt;strong&gt;Filip Skokan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:panva.ip@gmail.com"&gt;panva.ip@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/panva"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pimterry"&gt;pimterry&lt;/a&gt; - &lt;strong&gt;Tim Perry&lt;/strong&gt; &amp;lt;&lt;a href="mailto:pimterry@gmail.com"&gt;pimterry@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pmarchini"&gt;pmarchini&lt;/a&gt; - &lt;strong&gt;Pietro Marchini&lt;/strong&gt; &amp;lt;&lt;a href="mailto:pietro.marchini94@gmail.com"&gt;pietro.marchini94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/puskin"&gt;puskin&lt;/a&gt; - &lt;strong&gt;Giovanni Bucci&lt;/strong&gt; &amp;lt;&lt;a href="mailto:github@puskin.it"&gt;github@puskin.it&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Qard"&gt;Qard&lt;/a&gt; - &lt;strong&gt;Stephen Belanger&lt;/strong&gt; &amp;lt;&lt;a href="mailto:admin@stephenbelanger.com"&gt;admin@stephenbelanger.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RafaelGSS"&gt;RafaelGSS&lt;/a&gt; - &lt;strong&gt;Rafael Gonzaga&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rafael.nunu@hotmail.com"&gt;rafael.nunu@hotmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/RafaelGSS"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RaisinTen"&gt;RaisinTen&lt;/a&gt; - &lt;strong&gt;Darshan Sen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:raisinten@gmail.com"&gt;raisinten@gmail.com&lt;/a&gt;&amp;gt; (he/him) - &lt;a href="https://github.com/sponsors/RaisinTen"&gt;Support me&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/richardlau"&gt;richardlau&lt;/a&gt; - &lt;strong&gt;Richard Lau&lt;/strong&gt; &amp;lt;&lt;a href="mailto:richard.lau@ibm.com"&gt;richard.lau@ibm.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rluvaton"&gt;rluvaton&lt;/a&gt; - &lt;strong&gt;Raz Luvaton&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rluvaton@gmail.com"&gt;rluvaton@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ronag"&gt;ronag&lt;/a&gt; - &lt;strong&gt;Robert Nagy&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ronagy@icloud.com"&gt;ronagy@icloud.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ruyadorno"&gt;ruyadorno&lt;/a&gt; - &lt;strong&gt;Ruy Adorno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruy@vlt.sh"&gt;ruy@vlt.sh&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/santigimeno"&gt;santigimeno&lt;/a&gt; - &lt;strong&gt;Santiago Gimeno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:santiago.gimeno@gmail.com"&gt;santiago.gimeno@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ShogunPanda"&gt;ShogunPanda&lt;/a&gt; - &lt;strong&gt;Paolo Insogna&lt;/strong&gt; &amp;lt;&lt;a href="mailto:paolo@cowtech.it"&gt;paolo@cowtech.it&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/srl295"&gt;srl295&lt;/a&gt; - &lt;strong&gt;Steven R Loomis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:srl295@gmail.com"&gt;srl295@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StefanStojanovic"&gt;StefanStojanovic&lt;/a&gt; - &lt;strong&gt;Stefan Stojanovic&lt;/strong&gt; &amp;lt;&lt;a href="mailto:stefan.stojanovic@janeasystems.com"&gt;stefan.stojanovic@janeasystems.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sxa"&gt;sxa&lt;/a&gt; - &lt;strong&gt;Stewart X Addison&lt;/strong&gt; &amp;lt;&lt;a href="mailto:sxa@redhat.com"&gt;sxa@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/targos"&gt;targos&lt;/a&gt; - &lt;strong&gt;Micha√´l Zasso&lt;/strong&gt; &amp;lt;&lt;a href="mailto:targos@protonmail.com"&gt;targos@protonmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/theanarkh"&gt;theanarkh&lt;/a&gt; - &lt;strong&gt;theanarkh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:theratliter@gmail.com"&gt;theratliter@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tniessen"&gt;tniessen&lt;/a&gt; - &lt;strong&gt;Tobias Nie√üen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:tniessen@tnie.de"&gt;tniessen@tnie.de&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trivikr"&gt;trivikr&lt;/a&gt; - &lt;strong&gt;Trivikram Kamat&lt;/strong&gt; &amp;lt;&lt;a href="mailto:trivikr.dev@gmail.com"&gt;trivikr.dev@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Trott"&gt;Trott&lt;/a&gt; - &lt;strong&gt;Rich Trott&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rtrott@gmail.com"&gt;rtrott@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/UlisesGascon"&gt;UlisesGascon&lt;/a&gt; - &lt;strong&gt;Ulises Gasc√≥n&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ulisesgascongonzalez@gmail.com"&gt;ulisesgascongonzalez@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vmoroz"&gt;vmoroz&lt;/a&gt; - &lt;strong&gt;Vladimir Morozov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vmorozov@microsoft.com"&gt;vmorozov@microsoft.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VoltrexKeyva"&gt;VoltrexKeyva&lt;/a&gt; - &lt;strong&gt;Mohammed Keyvanzadeh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mohammadkeyvanzade94@gmail.com"&gt;mohammadkeyvanzade94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zcbenz"&gt;zcbenz&lt;/a&gt; - &lt;strong&gt;Cheng Zhao&lt;/strong&gt; &amp;lt;&lt;a href="mailto:zcbenz@gmail.com"&gt;zcbenz@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ZYSzys"&gt;ZYSzys&lt;/a&gt; - &lt;strong&gt;Yongsheng Zhang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:zyszys98@gmail.com"&gt;zyszys98@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;Emeriti&lt;/summary&gt; 
 &lt;!-- find-inactive-collaborators.mjs depends on the format of the emeriti list.
     If the format changes, those utilities need to be tested and updated. --&gt; 
 &lt;h3&gt;Collaborator emeriti&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ak239"&gt;ak239&lt;/a&gt; - &lt;strong&gt;Aleksei Koziatinskii&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ak239spb@gmail.com"&gt;ak239spb@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/andrasq"&gt;andrasq&lt;/a&gt; - &lt;strong&gt;Andras&lt;/strong&gt; &amp;lt;&lt;a href="mailto:andras@kinvey.com"&gt;andras@kinvey.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/AndreasMadsen"&gt;AndreasMadsen&lt;/a&gt; - &lt;strong&gt;Andreas Madsen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:amwebdk@gmail.com"&gt;amwebdk@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/AnnaMag"&gt;AnnaMag&lt;/a&gt; - &lt;strong&gt;Anna M. Kedzierska&lt;/strong&gt; &amp;lt;&lt;a href="mailto:anna.m.kedzierska@gmail.com"&gt;anna.m.kedzierska@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/antsmartian"&gt;antsmartian&lt;/a&gt; - &lt;strong&gt;Anto Aravinth&lt;/strong&gt; &amp;lt;&lt;a href="mailto:anto.aravinth.cse@gmail.com"&gt;anto.aravinth.cse@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/apapirovski"&gt;apapirovski&lt;/a&gt; - &lt;strong&gt;Anatoli Papirovski&lt;/strong&gt; &amp;lt;&lt;a href="mailto:apapirovski@mac.com"&gt;apapirovski@mac.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/aqrln"&gt;aqrln&lt;/a&gt; - &lt;strong&gt;Alexey Orlenko&lt;/strong&gt; &amp;lt;&lt;a href="mailto:eaglexrlnk@gmail.com"&gt;eaglexrlnk@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/AshCripps"&gt;AshCripps&lt;/a&gt; - &lt;strong&gt;Ash Cripps&lt;/strong&gt; &amp;lt;&lt;a href="mailto:email@ashleycripps.co.uk"&gt;email@ashleycripps.co.uk&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/bcoe"&gt;bcoe&lt;/a&gt; - &lt;strong&gt;Ben Coe&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bencoe@gmail.com"&gt;bencoe@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/bmeck"&gt;bmeck&lt;/a&gt; - &lt;strong&gt;Bradley Farias&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bradley.meck@gmail.com"&gt;bradley.meck@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/bmeurer"&gt;bmeurer&lt;/a&gt; - &lt;strong&gt;Benedikt Meurer&lt;/strong&gt; &amp;lt;&lt;a href="mailto:benedikt.meurer@gmail.com"&gt;benedikt.meurer@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/boneskull"&gt;boneskull&lt;/a&gt; - &lt;strong&gt;Christopher Hiller&lt;/strong&gt; &amp;lt;&lt;a href="mailto:boneskull@boneskull.com"&gt;boneskull@boneskull.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/brendanashworth"&gt;brendanashworth&lt;/a&gt; - &lt;strong&gt;Brendan Ashworth&lt;/strong&gt; &amp;lt;&lt;a href="mailto:brendan.ashworth@me.com"&gt;brendan.ashworth@me.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/bzoz"&gt;bzoz&lt;/a&gt; - &lt;strong&gt;Bartosz Sosnowski&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bartosz@janeasystems.com"&gt;bartosz@janeasystems.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/calvinmetcalf"&gt;calvinmetcalf&lt;/a&gt; - &lt;strong&gt;Calvin Metcalf&lt;/strong&gt; &amp;lt;&lt;a href="mailto:calvin.metcalf@gmail.com"&gt;calvin.metcalf@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ChALkeR"&gt;ChALkeR&lt;/a&gt; - &lt;strong&gt;–°–∫–æ–≤–æ—Ä–æ–¥–∞ –ù–∏–∫–∏—Ç–∞ –ê–Ω–¥—Ä–µ–µ–≤–∏—á&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chalkerx@gmail.com"&gt;chalkerx@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/chrisdickinson"&gt;chrisdickinson&lt;/a&gt; - &lt;strong&gt;Chris Dickinson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:christopher.s.dickinson@gmail.com"&gt;christopher.s.dickinson@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/claudiorodriguez"&gt;claudiorodriguez&lt;/a&gt; - &lt;strong&gt;Claudio Rodriguez&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cjrodr@yahoo.com"&gt;cjrodr@yahoo.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/danbev"&gt;danbev&lt;/a&gt; - &lt;strong&gt;Daniel Bevenius&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daniel.bevenius@gmail.com"&gt;daniel.bevenius@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/danielleadams"&gt;danielleadams&lt;/a&gt; - &lt;strong&gt;Danielle Adams&lt;/strong&gt; &amp;lt;&lt;a href="mailto:adamzdanielle@gmail.com"&gt;adamzdanielle@gmail.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/DavidCai1993"&gt;DavidCai1993&lt;/a&gt; - &lt;strong&gt;David Cai&lt;/strong&gt; &amp;lt;&lt;a href="mailto:davidcai1993@yahoo.com"&gt;davidcai1993@yahoo.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/davisjam"&gt;davisjam&lt;/a&gt; - &lt;strong&gt;Jamie Davis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:davisjam@vt.edu"&gt;davisjam@vt.edu&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/devnexen"&gt;devnexen&lt;/a&gt; - &lt;strong&gt;David Carlier&lt;/strong&gt; &amp;lt;&lt;a href="mailto:devnexen@gmail.com"&gt;devnexen@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/devsnek"&gt;devsnek&lt;/a&gt; - &lt;strong&gt;Gus Caplan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@gus.host"&gt;me@gus.host&lt;/a&gt;&amp;gt; (they/them)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/digitalinfinity"&gt;digitalinfinity&lt;/a&gt; - &lt;strong&gt;Hitesh Kanwathirtha&lt;/strong&gt; &amp;lt;&lt;a href="mailto:digitalinfinity@gmail.com"&gt;digitalinfinity@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/dmabupt"&gt;dmabupt&lt;/a&gt; - &lt;strong&gt;Xu Meng&lt;/strong&gt; &amp;lt;&lt;a href="mailto:dmabupt@gmail.com"&gt;dmabupt@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/dnlup"&gt;dnlup&lt;/a&gt; - &lt;strong&gt;dnlup&lt;/strong&gt; &amp;lt;&lt;a href="mailto:dnlup.dev@gmail.com"&gt;dnlup.dev@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/eljefedelrodeodeljefe"&gt;eljefedelrodeodeljefe&lt;/a&gt; - &lt;strong&gt;Robert Jefe Lindstaedt&lt;/strong&gt; &amp;lt;&lt;a href="mailto:robert.lindstaedt@gmail.com"&gt;robert.lindstaedt@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/estliberitas"&gt;estliberitas&lt;/a&gt; - &lt;strong&gt;Alexander Makarenko&lt;/strong&gt; &amp;lt;&lt;a href="mailto:estliberitas@gmail.com"&gt;estliberitas@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/eugeneo"&gt;eugeneo&lt;/a&gt; - &lt;strong&gt;Eugene Ostroukhov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:eostroukhov@google.com"&gt;eostroukhov@google.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/evanlucas"&gt;evanlucas&lt;/a&gt; - &lt;strong&gt;Evan Lucas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:evanlucas@me.com"&gt;evanlucas@me.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/F3n67u"&gt;F3n67u&lt;/a&gt; - &lt;strong&gt;Feng Yu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:F3n67u@outlook.com"&gt;F3n67u@outlook.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/firedfox"&gt;firedfox&lt;/a&gt; - &lt;strong&gt;Daniel Wang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:wangyang0123@gmail.com"&gt;wangyang0123@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Fishrock123"&gt;Fishrock123&lt;/a&gt; - &lt;strong&gt;Jeremiah Senkpiel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fishrock123@rocketmail.com"&gt;fishrock123@rocketmail.com&lt;/a&gt;&amp;gt; (he/they)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/gdams"&gt;gdams&lt;/a&gt; - &lt;strong&gt;George Adams&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gadams@microsoft.com"&gt;gadams@microsoft.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/geek"&gt;geek&lt;/a&gt; - &lt;strong&gt;Wyatt Preul&lt;/strong&gt; &amp;lt;&lt;a href="mailto:wpreul@gmail.com"&gt;wpreul@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/gibfahn"&gt;gibfahn&lt;/a&gt; - &lt;strong&gt;Gibson Fahnestock&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gibfahn@gmail.com"&gt;gibfahn@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/glentiki"&gt;glentiki&lt;/a&gt; - &lt;strong&gt;Glen Keane&lt;/strong&gt; &amp;lt;&lt;a href="mailto:glenkeane.94@gmail.com"&gt;glenkeane.94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/hashseed"&gt;hashseed&lt;/a&gt; - &lt;strong&gt;Yang Guo&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yangguo@chromium.org"&gt;yangguo@chromium.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/hiroppy"&gt;hiroppy&lt;/a&gt; - &lt;strong&gt;Yuta Hiroto&lt;/strong&gt; &amp;lt;&lt;a href="mailto:hello@hiroppy.me"&gt;hello@hiroppy.me&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/iansu"&gt;iansu&lt;/a&gt; - &lt;strong&gt;Ian Sutherland&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ian@iansutherland.ca"&gt;ian@iansutherland.ca&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/iarna"&gt;iarna&lt;/a&gt; - &lt;strong&gt;Rebecca Turner&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@re-becca.org"&gt;me@re-becca.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/imran-iq"&gt;imran-iq&lt;/a&gt; - &lt;strong&gt;Imran Iqbal&lt;/strong&gt; &amp;lt;&lt;a href="mailto:imran@imraniqbal.org"&gt;imran@imraniqbal.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/imyller"&gt;imyller&lt;/a&gt; - &lt;strong&gt;Ilkka Myller&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ilkka.myller@nodefield.com"&gt;ilkka.myller@nodefield.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/indutny"&gt;indutny&lt;/a&gt; - &lt;strong&gt;Fedor Indutny&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fedor@indutny.com"&gt;fedor@indutny.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/isaacs"&gt;isaacs&lt;/a&gt; - &lt;strong&gt;Isaac Z. Schlueter&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@izs.me"&gt;i@izs.me&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/italoacasas"&gt;italoacasas&lt;/a&gt; - &lt;strong&gt;Italo A. Casas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@italoacasas.com"&gt;me@italoacasas.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/JacksonTian"&gt;JacksonTian&lt;/a&gt; - &lt;strong&gt;Jackson Tian&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shyvo1987@gmail.com"&gt;shyvo1987@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jasongin"&gt;jasongin&lt;/a&gt; - &lt;strong&gt;Jason Ginchereau&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jasongin@microsoft.com"&gt;jasongin@microsoft.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jbergstroem"&gt;jbergstroem&lt;/a&gt; - &lt;strong&gt;Johan Bergstr√∂m&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bugs@bergstroem.nu"&gt;bugs@bergstroem.nu&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jdalton"&gt;jdalton&lt;/a&gt; - &lt;strong&gt;John-David Dalton&lt;/strong&gt; &amp;lt;&lt;a href="mailto:john.david.dalton@gmail.com"&gt;john.david.dalton@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jhamhader"&gt;jhamhader&lt;/a&gt; - &lt;strong&gt;Yuval Brik&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yuval@brik.org.il"&gt;yuval@brik.org.il&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/joaocgreis"&gt;joaocgreis&lt;/a&gt; - &lt;strong&gt;Jo√£o Reis&lt;/strong&gt; &amp;lt;&lt;a href="mailto:reis@janeasystems.com"&gt;reis@janeasystems.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/joesepi"&gt;joesepi&lt;/a&gt; - &lt;strong&gt;Joe Sepi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:sepi@joesepi.com"&gt;sepi@joesepi.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/joshgav"&gt;joshgav&lt;/a&gt; - &lt;strong&gt;Josh Gavant&lt;/strong&gt; &amp;lt;&lt;a href="mailto:josh.gavant@outlook.com"&gt;josh.gavant@outlook.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/julianduque"&gt;julianduque&lt;/a&gt; - &lt;strong&gt;Julian Duque&lt;/strong&gt; &amp;lt;&lt;a href="mailto:julianduquej@gmail.com"&gt;julianduquej@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/kfarnung"&gt;kfarnung&lt;/a&gt; - &lt;strong&gt;Kyle Farnung&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kfarnung@microsoft.com"&gt;kfarnung@microsoft.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/kunalspathak"&gt;kunalspathak&lt;/a&gt; - &lt;strong&gt;Kunal Pathak&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kunal.pathak@microsoft.com"&gt;kunal.pathak@microsoft.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/kuriyosh"&gt;kuriyosh&lt;/a&gt; - &lt;strong&gt;Yoshiki Kurihara&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yosyos0306@gmail.com"&gt;yosyos0306@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/kvakil"&gt;kvakil&lt;/a&gt; - &lt;strong&gt;Keyhan Vakil&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kvakil@sylph.kvakil.me"&gt;kvakil@sylph.kvakil.me&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/lance"&gt;lance&lt;/a&gt; - &lt;strong&gt;Lance Ball&lt;/strong&gt; &amp;lt;&lt;a href="mailto:lball@redhat.com"&gt;lball@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Leko"&gt;Leko&lt;/a&gt; - &lt;strong&gt;Shingo Inoue&lt;/strong&gt; &amp;lt;&lt;a href="mailto:leko.noor@gmail.com"&gt;leko.noor@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Linkgoron"&gt;Linkgoron&lt;/a&gt; - &lt;strong&gt;Nitzan Uziely&lt;/strong&gt; &amp;lt;&lt;a href="mailto:linkgoron@gmail.com"&gt;linkgoron@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/lucamaraschi"&gt;lucamaraschi&lt;/a&gt; - &lt;strong&gt;Luca Maraschi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:luca.maraschi@gmail.com"&gt;luca.maraschi@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/lundibundi"&gt;lundibundi&lt;/a&gt; - &lt;strong&gt;Denys Otrishko&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shishugi@gmail.com"&gt;shishugi@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/lxe"&gt;lxe&lt;/a&gt; - &lt;strong&gt;Aleksey Smolenchuk&lt;/strong&gt; &amp;lt;&lt;a href="mailto:lxe@lxe.co"&gt;lxe@lxe.co&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/maclover7"&gt;maclover7&lt;/a&gt; - &lt;strong&gt;Jon Moss&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@jonathanmoss.me"&gt;me@jonathanmoss.me&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mafintosh"&gt;mafintosh&lt;/a&gt; - &lt;strong&gt;Mathias Buus&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mathiasbuus@gmail.com"&gt;mathiasbuus@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/matthewloring"&gt;matthewloring&lt;/a&gt; - &lt;strong&gt;Matthew Loring&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mattloring@google.com"&gt;mattloring@google.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Mesteery"&gt;Mesteery&lt;/a&gt; - &lt;strong&gt;Mestery&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mestery@protonmail.com"&gt;mestery@protonmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/micnic"&gt;micnic&lt;/a&gt; - &lt;strong&gt;Nicu Micleu»ôanu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:micnic90@gmail.com"&gt;micnic90@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mikeal"&gt;mikeal&lt;/a&gt; - &lt;strong&gt;Mikeal Rogers&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mikeal.rogers@gmail.com"&gt;mikeal.rogers@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/miladfarca"&gt;miladfarca&lt;/a&gt; - &lt;strong&gt;Milad Fa&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mfarazma@redhat.com"&gt;mfarazma@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mildsunrise"&gt;mildsunrise&lt;/a&gt; - &lt;strong&gt;Alba Mendez&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@alba.sh"&gt;me@alba.sh&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/misterdjules"&gt;misterdjules&lt;/a&gt; - &lt;strong&gt;Julien Gilli&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jgilli@netflix.com"&gt;jgilli@netflix.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mmarchini"&gt;mmarchini&lt;/a&gt; - &lt;strong&gt;Mary Marchini&lt;/strong&gt; &amp;lt;&lt;a href="mailto:oss@mmarchini.me"&gt;oss@mmarchini.me&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/monsanto"&gt;monsanto&lt;/a&gt; - &lt;strong&gt;Christopher Monsanto&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chris@monsan.to"&gt;chris@monsan.to&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/MoonBall"&gt;MoonBall&lt;/a&gt; - &lt;strong&gt;Chen Gang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gangc.cxy@foxmail.com"&gt;gangc.cxy@foxmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/mscdex"&gt;mscdex&lt;/a&gt; - &lt;strong&gt;Brian White&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mscdex@mscdex.net"&gt;mscdex@mscdex.net&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/MylesBorins"&gt;MylesBorins&lt;/a&gt; - &lt;strong&gt;Myles Borins&lt;/strong&gt; &amp;lt;&lt;a href="mailto:myles.borins@gmail.com"&gt;myles.borins@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/not-an-aardvark"&gt;not-an-aardvark&lt;/a&gt; - &lt;strong&gt;Teddy Katz&lt;/strong&gt; &amp;lt;&lt;a href="mailto:teddy.katz@gmail.com"&gt;teddy.katz@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ofrobots"&gt;ofrobots&lt;/a&gt; - &lt;strong&gt;Ali Ijaz Sheikh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ofrobots@google.com"&gt;ofrobots@google.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/Olegas"&gt;Olegas&lt;/a&gt; - &lt;strong&gt;Oleg Elifantiev&lt;/strong&gt; &amp;lt;&lt;a href="mailto:oleg@elifantiev.ru"&gt;oleg@elifantiev.ru&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/orangemocha"&gt;orangemocha&lt;/a&gt; - &lt;strong&gt;Alexis Campailla&lt;/strong&gt; &amp;lt;&lt;a href="mailto:orangemocha@nodejs.org"&gt;orangemocha@nodejs.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/othiym23"&gt;othiym23&lt;/a&gt; - &lt;strong&gt;Forrest L Norvell&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ogd@aoaioxxysz.net"&gt;ogd@aoaioxxysz.net&lt;/a&gt;&amp;gt; (they/them/themself)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/oyyd"&gt;oyyd&lt;/a&gt; - &lt;strong&gt;Ouyang Yadong&lt;/strong&gt; &amp;lt;&lt;a href="mailto:oyydoibh@gmail.com"&gt;oyydoibh@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/petkaantonov"&gt;petkaantonov&lt;/a&gt; - &lt;strong&gt;Petka Antonov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:petka_antonov@hotmail.com"&gt;petka_antonov@hotmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/phillipj"&gt;phillipj&lt;/a&gt; - &lt;strong&gt;Phillip Johnsen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:johphi@gmail.com"&gt;johphi@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/piscisaureus"&gt;piscisaureus&lt;/a&gt; - &lt;strong&gt;Bert Belder&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bertbelder@gmail.com"&gt;bertbelder@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/pmq20"&gt;pmq20&lt;/a&gt; - &lt;strong&gt;Minqi Pan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:pmq2001@gmail.com"&gt;pmq2001@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/PoojaDurgad"&gt;PoojaDurgad&lt;/a&gt; - &lt;strong&gt;Pooja D P&lt;/strong&gt; &amp;lt;&lt;a href="mailto:Pooja.D.P@ibm.com"&gt;Pooja.D.P@ibm.com&lt;/a&gt;&amp;gt; (she/her)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/princejwesley"&gt;princejwesley&lt;/a&gt; - &lt;strong&gt;Prince John Wesley&lt;/strong&gt; &amp;lt;&lt;a href="mailto:princejohnwesley@gmail.com"&gt;princejohnwesley@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/psmarshall"&gt;psmarshall&lt;/a&gt; - &lt;strong&gt;Peter Marshall&lt;/strong&gt; &amp;lt;&lt;a href="mailto:petermarshall@chromium.org"&gt;petermarshall@chromium.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/puzpuzpuz"&gt;puzpuzpuz&lt;/a&gt; - &lt;strong&gt;Andrey Pechkurov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:apechkurov@gmail.com"&gt;apechkurov@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/refack"&gt;refack&lt;/a&gt; - &lt;strong&gt;Refael Ackermann (◊®◊§◊ê◊ú ◊§◊ú◊ó◊ô)&lt;/strong&gt; &amp;lt;&lt;a href="mailto:refack@gmail.com"&gt;refack@gmail.com&lt;/a&gt;&amp;gt; (he/him/◊î◊ï◊ê/◊ê◊™◊î)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rexagod"&gt;rexagod&lt;/a&gt; - &lt;strong&gt;Pranshu Srivastava&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rexagod@gmail.com"&gt;rexagod@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rickyes"&gt;rickyes&lt;/a&gt; - &lt;strong&gt;Ricky Zhou&lt;/strong&gt; &amp;lt;&lt;a href="mailto:0x19951125@gmail.com"&gt;0x19951125@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rlidwka"&gt;rlidwka&lt;/a&gt; - &lt;strong&gt;Alex Kocharin&lt;/strong&gt; &amp;lt;&lt;a href="mailto:alex@kocharin.ru"&gt;alex@kocharin.ru&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rmg"&gt;rmg&lt;/a&gt; - &lt;strong&gt;Ryan Graham&lt;/strong&gt; &amp;lt;&lt;a href="mailto:r.m.graham@gmail.com"&gt;r.m.graham@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/robertkowalski"&gt;robertkowalski&lt;/a&gt; - &lt;strong&gt;Robert Kowalski&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rok@kowalski.gd"&gt;rok@kowalski.gd&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/romankl"&gt;romankl&lt;/a&gt; - &lt;strong&gt;Roman Klauke&lt;/strong&gt; &amp;lt;&lt;a href="mailto:romaaan.git@gmail.com"&gt;romaaan.git@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ronkorving"&gt;ronkorving&lt;/a&gt; - &lt;strong&gt;Ron Korving&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ron@ronkorving.nl"&gt;ron@ronkorving.nl&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/RReverser"&gt;RReverser&lt;/a&gt; - &lt;strong&gt;Ingvar Stepanyan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@rreverser.com"&gt;me@rreverser.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rubys"&gt;rubys&lt;/a&gt; - &lt;strong&gt;Sam Ruby&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rubys@intertwingly.net"&gt;rubys@intertwingly.net&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/rvagg"&gt;rvagg&lt;/a&gt; - &lt;strong&gt;Rod Vagg&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rod@vagg.org"&gt;rod@vagg.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/ryzokuken"&gt;ryzokuken&lt;/a&gt; - &lt;strong&gt;Ujjwal Sharma&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ryzokuken@disroot.org"&gt;ryzokuken@disroot.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/saghul"&gt;saghul&lt;/a&gt; - &lt;strong&gt;Sa√∫l Ibarra Corretg√©&lt;/strong&gt; &amp;lt;&lt;a href="mailto:s@saghul.net"&gt;s@saghul.net&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/sam-github"&gt;sam-github&lt;/a&gt; - &lt;strong&gt;Sam Roberts&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vieuxtech@gmail.com"&gt;vieuxtech@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/sebdeckers"&gt;sebdeckers&lt;/a&gt; - &lt;strong&gt;Sebastiaan Deckers&lt;/strong&gt; &amp;lt;&lt;a href="mailto:sebdeckers83@gmail.com"&gt;sebdeckers83@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/seishun"&gt;seishun&lt;/a&gt; - &lt;strong&gt;Nikolai Vavilov&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vvnicholas@gmail.com"&gt;vvnicholas@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/shigeki"&gt;shigeki&lt;/a&gt; - &lt;strong&gt;Shigeki Ohtsu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ohtsu@ohtsu.org"&gt;ohtsu@ohtsu.org&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/shisama"&gt;shisama&lt;/a&gt; - &lt;strong&gt;Masashi Hirano&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shisama07@gmail.com"&gt;shisama07@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/silverwind"&gt;silverwind&lt;/a&gt; - &lt;strong&gt;Roman Reiss&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@silverwind.io"&gt;me@silverwind.io&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/starkwang"&gt;starkwang&lt;/a&gt; - &lt;strong&gt;Weijia Wang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:starkwang@126.com"&gt;starkwang@126.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/stefanmb"&gt;stefanmb&lt;/a&gt; - &lt;strong&gt;Stefan Budeanu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:stefan@budeanu.com"&gt;stefan@budeanu.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/tellnes"&gt;tellnes&lt;/a&gt; - &lt;strong&gt;Christian Tellnes&lt;/strong&gt; &amp;lt;&lt;a href="mailto:christian@tellnes.no"&gt;christian@tellnes.no&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/thefourtheye"&gt;thefourtheye&lt;/a&gt; - &lt;strong&gt;Sakthipriyan Vairamani&lt;/strong&gt; &amp;lt;&lt;a href="mailto:thechargingvolcano@gmail.com"&gt;thechargingvolcano@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/thlorenz"&gt;thlorenz&lt;/a&gt; - &lt;strong&gt;Thorsten Lorenz&lt;/strong&gt; &amp;lt;&lt;a href="mailto:thlorenz@gmx.de"&gt;thlorenz@gmx.de&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/TimothyGu"&gt;TimothyGu&lt;/a&gt; - &lt;strong&gt;Tiancheng "Timothy" Gu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:timothygu99@gmail.com"&gt;timothygu99@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/trevnorris"&gt;trevnorris&lt;/a&gt; - &lt;strong&gt;Trevor Norris&lt;/strong&gt; &amp;lt;&lt;a href="mailto:trev.norris@gmail.com"&gt;trev.norris@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/tunniclm"&gt;tunniclm&lt;/a&gt; - &lt;strong&gt;Mike Tunnicliffe&lt;/strong&gt; &amp;lt;&lt;a href="mailto:m.j.tunnicliffe@gmail.com"&gt;m.j.tunnicliffe@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/vdeturckheim"&gt;vdeturckheim&lt;/a&gt; - &lt;strong&gt;Vladimir de Turckheim&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vlad2t@hotmail.com"&gt;vlad2t@hotmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/vkurchatkin"&gt;vkurchatkin&lt;/a&gt; - &lt;strong&gt;Vladimir Kurchatkin&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vladimir.kurchatkin@gmail.com"&gt;vladimir.kurchatkin@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/vsemozhetbyt"&gt;vsemozhetbyt&lt;/a&gt; - &lt;strong&gt;Vse Mozhet Byt&lt;/strong&gt; &amp;lt;&lt;a href="mailto:vsemozhetbyt@gmail.com"&gt;vsemozhetbyt@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/watilde"&gt;watilde&lt;/a&gt; - &lt;strong&gt;Daijiro Wachi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daijiro.wachi@gmail.com"&gt;daijiro.wachi@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/watson"&gt;watson&lt;/a&gt; - &lt;strong&gt;Thomas Watson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:w@tson.dk"&gt;w@tson.dk&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/whitlockjc"&gt;whitlockjc&lt;/a&gt; - &lt;strong&gt;Jeremy Whitlock&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jwhitlock@apache.org"&gt;jwhitlock@apache.org&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/XadillaX"&gt;XadillaX&lt;/a&gt; - &lt;strong&gt;Khaidi Chu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@2333.moe"&gt;i@2333.moe&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/yashLadha"&gt;yashLadha&lt;/a&gt; - &lt;strong&gt;Yash Ladha&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yash@yashladha.in"&gt;yash@yashladha.in&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/yhwang"&gt;yhwang&lt;/a&gt; - &lt;strong&gt;Yihong Wang&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yh.wang@ibm.com"&gt;yh.wang@ibm.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/yorkie"&gt;yorkie&lt;/a&gt; - &lt;strong&gt;Yorkie Liu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yorkiefixer@gmail.com"&gt;yorkiefixer@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/yosuke-furukawa"&gt;yosuke-furukawa&lt;/a&gt; - &lt;strong&gt;Yosuke Furukawa&lt;/strong&gt; &amp;lt;&lt;a href="mailto:yosuke.furukawa@gmail.com"&gt;yosuke.furukawa@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;!--lint enable prohibited-strings--&gt; 
&lt;p&gt;Collaborators follow the &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/collaborator-guide.md"&gt;Collaborator Guide&lt;/a&gt; in maintaining the Node.js project.&lt;/p&gt; 
&lt;h3&gt;Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1ilsang"&gt;1ilsang&lt;/a&gt; - &lt;strong&gt;Sangchul Lee&lt;/strong&gt; &amp;lt;&lt;a href="mailto:1ilsang.dev@gmail.com"&gt;1ilsang.dev@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atlowChemi"&gt;atlowChemi&lt;/a&gt; - &lt;strong&gt;Chemi Atlow&lt;/strong&gt; &amp;lt;&lt;a href="mailto:chemi@atlow.co.il"&gt;chemi@atlow.co.il&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ayase-252"&gt;Ayase-252&lt;/a&gt; - &lt;strong&gt;Qingyu Deng&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@ayase-lab.com"&gt;i@ayase-lab.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bjohansebas"&gt;bjohansebas&lt;/a&gt; - &lt;strong&gt;Sebastian Beltran&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bjohansebas@gmail.com"&gt;bjohansebas@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bmuenzenmeyer"&gt;bmuenzenmeyer&lt;/a&gt; - &lt;strong&gt;Brian Muenzenmeyer&lt;/strong&gt; &amp;lt;&lt;a href="mailto:brian.muenzenmeyer@gmail.com"&gt;brian.muenzenmeyer@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CanadaHonk"&gt;CanadaHonk&lt;/a&gt; - &lt;strong&gt;Oliver Medhurst&lt;/strong&gt; &amp;lt;&lt;a href="mailto:honk@goose.icu"&gt;honk@goose.icu&lt;/a&gt;&amp;gt; (they/them)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/daeyeon"&gt;daeyeon&lt;/a&gt; - &lt;strong&gt;Daeyeon Jeong&lt;/strong&gt; &amp;lt;&lt;a href="mailto:daeyeon.dev@gmail.com"&gt;daeyeon.dev@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gireeshpunathil"&gt;gireeshpunathil&lt;/a&gt; - &lt;strong&gt;Gireesh Punathil&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gpunathi@in.ibm.com"&gt;gpunathi@in.ibm.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gurgunday"&gt;gurgunday&lt;/a&gt; - &lt;strong&gt;G√ºrg√ºn Dayƒ±oƒülu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:hey@gurgun.day"&gt;hey@gurgun.day&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HBSPS"&gt;HBSPS&lt;/a&gt; - &lt;strong&gt;Wiyeong Seo&lt;/strong&gt; &amp;lt;&lt;a href="mailto:hbsps.dev@gmail.com"&gt;hbsps.dev@gmail.com&lt;/a&gt;&amp;gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iam-frankqiu"&gt;iam-frankqiu&lt;/a&gt; - &lt;strong&gt;Frank Qiu&lt;/strong&gt; &amp;lt;&lt;a href="mailto:iam.frankqiu@gmail.com"&gt;iam.frankqiu@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KevinEady"&gt;KevinEady&lt;/a&gt; - &lt;strong&gt;Kevin Eady&lt;/strong&gt; &amp;lt;&lt;a href="mailto:kevin.c.eady@gmail.com"&gt;kevin.c.eady@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marsonya"&gt;marsonya&lt;/a&gt; - &lt;strong&gt;Akhil Marsonya&lt;/strong&gt; &amp;lt;&lt;a href="mailto:akhil.marsonya27@gmail.com"&gt;akhil.marsonya27@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meixg"&gt;meixg&lt;/a&gt; - &lt;strong&gt;Xuguang Mei&lt;/strong&gt; &amp;lt;&lt;a href="mailto:meixuguang@gmail.com"&gt;meixuguang@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/milesguicent"&gt;milesguicent&lt;/a&gt; - &lt;strong&gt;Miles Guicent&lt;/strong&gt; &amp;lt;&lt;a href="mailto:guicent@pm.me"&gt;guicent@pm.me&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/preveen-stack"&gt;preveen-stack&lt;/a&gt; - &lt;strong&gt;Preveen Padmanabhan&lt;/strong&gt; &amp;lt;&lt;a href="mailto:wide4head@gmail.com"&gt;wide4head@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RaisinTen"&gt;RaisinTen&lt;/a&gt; - &lt;strong&gt;Darshan Sen&lt;/strong&gt; &amp;lt;&lt;a href="mailto:raisinten@gmail.com"&gt;raisinten@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VoltrexKeyva"&gt;VoltrexKeyva&lt;/a&gt; - &lt;strong&gt;Mohammed Keyvanzadeh&lt;/strong&gt; &amp;lt;&lt;a href="mailto:mohammadkeyvanzade94@gmail.com"&gt;mohammadkeyvanzade94@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Triagers follow the &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/issues.md#triaging-a-bug-report"&gt;Triage Guide&lt;/a&gt; when responding to new issues.&lt;/p&gt; 
&lt;h3&gt;Release keys&lt;/h3&gt; 
&lt;p&gt;Primary GPG keys for Node.js Releasers (some Releasers sign with subkeys):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Antoine du Hamel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:duhamelantoine1995@gmail.com"&gt;duhamelantoine1995@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;5BE8A3F6C8A5C01D106C0AD820B1A390B168D356&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Juan Jos√© Arboleda&lt;/strong&gt; &amp;lt;&lt;a href="mailto:soyjuanarbol@gmail.com"&gt;soyjuanarbol@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Marco Ippolito&lt;/strong&gt; &amp;lt;&lt;a href="mailto:marcoippolito54@gmail.com"&gt;marcoippolito54@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;CC68F5A3106FF448322E48ED27F5E38D5B0A215F&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Micha√´l Zasso&lt;/strong&gt; &amp;lt;&lt;a href="mailto:targos@protonmail.com"&gt;targos@protonmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rafael Gonzaga&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rafael.nunu@hotmail.com"&gt;rafael.nunu@hotmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Richard Lau&lt;/strong&gt; &amp;lt;&lt;a href="mailto:richard.lau@ibm.com"&gt;richard.lau@ibm.com&lt;/a&gt;&amp;gt; &lt;code&gt;C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ruy Adorno&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruyadorno@hotmail.com"&gt;ruyadorno@hotmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;108F52B48DB57BB0CC439B2997B01419BD92F80A&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ulises Gasc√≥n&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ulisesgascongonzalez@gmail.com"&gt;ulisesgascongonzalez@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;A363A499291CBBC940DD62E41F10027AF002F8B0&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use the keyring the project maintains at &lt;a href="https://github.com/nodejs/release-keys/raw/refs/heads/main/gpg-only-active-keys/pubring.kbx"&gt;https://github.com/nodejs/release-keys/raw/refs/heads/main/gpg-only-active-keys/pubring.kbx&lt;/a&gt;. Alternatively, you can import them from a public key server. Have in mind that the project cannot guarantee the availability of the server nor the keys on that server.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gpg --keyserver hkps://keys.openpgp.org --recv-keys 5BE8A3F6C8A5C01D106C0AD820B1A390B168D356 # Antoine du Hamel
gpg --keyserver hkps://keys.openpgp.org --recv-keys DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7 # Juan Jos√© Arboleda
gpg --keyserver hkps://keys.openpgp.org --recv-keys CC68F5A3106FF448322E48ED27F5E38D5B0A215F # Marco Ippolito
gpg --keyserver hkps://keys.openpgp.org --recv-keys 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 # Micha√´l Zasso
gpg --keyserver hkps://keys.openpgp.org --recv-keys 890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 # Rafael Gonzaga
gpg --keyserver hkps://keys.openpgp.org --recv-keys C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C # Richard Lau
gpg --keyserver hkps://keys.openpgp.org --recv-keys 108F52B48DB57BB0CC439B2997B01419BD92F80A # Ruy Adorno
gpg --keyserver hkps://keys.openpgp.org --recv-keys A363A499291CBBC940DD62E41F10027AF002F8B0 # Ulises Gasc√≥n
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/#verifying-binaries"&gt;Verifying binaries&lt;/a&gt; for how to use these keys to verify a downloaded file.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Other keys used to sign some previous releases&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Antoine du Hamel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:duhamelantoine1995@gmail.com"&gt;duhamelantoine1995@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;C0D6248439F1D5604AAFFB4021D900FFDB233756&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Beth Griggs&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bethanyngriggs@gmail.com"&gt;bethanyngriggs@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;4ED778F539E3634C779C87C6D7062848A1AB005C&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Bryan English&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bryan@bryanenglish.com"&gt;bryan@bryanenglish.com&lt;/a&gt;&amp;gt; &lt;code&gt;141F07595B7B3FFE74309A937405533BE57C7D57&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Chris Dickinson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:christopher.s.dickinson@gmail.com"&gt;christopher.s.dickinson@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;9554F04D7259F04124DE6B476D5A82AC7E37093B&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Colin Ihrig&lt;/strong&gt; &amp;lt;&lt;a href="mailto:cjihrig@gmail.com"&gt;cjihrig@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;94AE36675C464D64BAFA68DD7434390BDBE9B9C5&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Danielle Adams&lt;/strong&gt; &amp;lt;&lt;a href="mailto:adamzdanielle@gmail.com"&gt;adamzdanielle@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;1C050899334244A8AF75E53792EF661D867B9DFA&lt;/code&gt; &lt;code&gt;74F12602B6F1C4E913FAA37AD3A89613643B6201&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Evan Lucas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:evanlucas@me.com"&gt;evanlucas@me.com&lt;/a&gt;&amp;gt; &lt;code&gt;B9AE9905FFD7803F25714661B63B535A4C206CA9&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Gibson Fahnestock&lt;/strong&gt; &amp;lt;&lt;a href="mailto:gibfahn@gmail.com"&gt;gibfahn@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;77984A986EBC2AA786BC0F66B01FBB92821C587A&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Isaac Z. Schlueter&lt;/strong&gt; &amp;lt;&lt;a href="mailto:i@izs.me"&gt;i@izs.me&lt;/a&gt;&amp;gt; &lt;code&gt;93C7E9E91B49E432C2F75674B0A78B0A6C481CF6&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Italo A. Casas&lt;/strong&gt; &amp;lt;&lt;a href="mailto:me@italoacasas.com"&gt;me@italoacasas.com&lt;/a&gt;&amp;gt; &lt;code&gt;56730D5401028683275BD23C23EFEFE93C4CFFFE&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;James M Snell&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jasnell@keybase.io"&gt;jasnell@keybase.io&lt;/a&gt;&amp;gt; &lt;code&gt;71DCFD284A79C3B38668286BC97EC7A07EDE3FC1&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Jeremiah Senkpiel&lt;/strong&gt; &amp;lt;&lt;a href="mailto:fishrock@keybase.io"&gt;fishrock@keybase.io&lt;/a&gt;&amp;gt; &lt;code&gt;FD3A5288F042B6850C66B31F09FE44734EB7990E&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Juan Jos√© Arboleda&lt;/strong&gt; &amp;lt;&lt;a href="mailto:soyjuanarbol@gmail.com"&gt;soyjuanarbol@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;61FC681DFB92A079F1685E77973F295594EC4689&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Julien Gilli&lt;/strong&gt; &amp;lt;&lt;a href="mailto:jgilli@fastmail.fm"&gt;jgilli@fastmail.fm&lt;/a&gt;&amp;gt; &lt;code&gt;114F43EE0176B71C7BC219DD50A3051F888C628D&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Myles Borins&lt;/strong&gt; &amp;lt;&lt;a href="mailto:myles.borins@gmail.com"&gt;myles.borins@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Rod Vagg&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rod@vagg.org"&gt;rod@vagg.org&lt;/a&gt;&amp;gt; &lt;code&gt;DD8F2338BAE7501E3DD5AC78C273792F7D83545D&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Ruben Bridgewater&lt;/strong&gt; &amp;lt;&lt;a href="mailto:ruben@bridgewater.de"&gt;ruben@bridgewater.de&lt;/a&gt;&amp;gt; &lt;code&gt;A48C2BEE680E841632CD4E44F07496B3EB3C1762&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Shelley Vohr&lt;/strong&gt; &amp;lt;&lt;a href="mailto:shelley.vohr@gmail.com"&gt;shelley.vohr@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;B9E2F5981AA6E0CD28160D9FF13993A75599653C&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Timothy J Fontaine&lt;/strong&gt; &amp;lt;&lt;a href="mailto:tjfontaine@gmail.com"&gt;tjfontaine@gmail.com&lt;/a&gt;&amp;gt; &lt;code&gt;7937DFD2AB06298B2293C3187D33FF9D0246406D&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;The project maintains a keyring able to verify all past releases of Node.js at &lt;a href="https://github.com/nodejs/release-keys/raw/refs/heads/main/gpg/pubring.kbx"&gt;https://github.com/nodejs/release-keys/raw/refs/heads/main/gpg/pubring.kbx&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Security release stewards&lt;/h3&gt; 
&lt;p&gt;When possible, the commitment to take slots in the security release steward rotation is made by companies in order to ensure individuals who act as security stewards have the support and recognition from their employer to be able to prioritize security releases. Security release stewards manage security releases on a rotation basis as outlined in the &lt;a href="https://raw.githubusercontent.com/nodejs/node/main/doc/contributing/security-release-process.md"&gt;security release process&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.datadoghq.com/"&gt;Datadog&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bengl"&gt;bengl&lt;/a&gt; - &lt;strong&gt;Bryan English&lt;/strong&gt; &amp;lt;&lt;a href="mailto:bryan@bryanenglish.com"&gt;bryan@bryanenglish.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.herodevs.com/"&gt;HeroDevs&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/marco-ippolito"&gt;marco-ippolito&lt;/a&gt; - &lt;strong&gt;Marco Ippolito&lt;/strong&gt; &amp;lt;&lt;a href="mailto:marcoippolito54@gmail.com"&gt;marcoippolito54@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nodesource.com/"&gt;NodeSource&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/juanarbol"&gt;juanarbol&lt;/a&gt; - &lt;strong&gt;Juan Jos√© Arboleda&lt;/strong&gt; &amp;lt;&lt;a href="mailto:soyjuanarbol@gmail.com"&gt;soyjuanarbol@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RafaelGSS"&gt;RafaelGSS&lt;/a&gt; - &lt;strong&gt;Rafael Gonzaga&lt;/strong&gt; &amp;lt;&lt;a href="mailto:rafael.nunu@hotmail.com"&gt;rafael.nunu@hotmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://platformatic.dev/"&gt;Platformatic&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mcollina"&gt;mcollina&lt;/a&gt; - &lt;strong&gt;Matteo Collina&lt;/strong&gt; &amp;lt;&lt;a href="mailto:matteo.collina@gmail.com"&gt;matteo.collina@gmail.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redhat.com"&gt;Red Hat&lt;/a&gt; / &lt;a href="https://ibm.com"&gt;IBM&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/joesepi"&gt;joesepi&lt;/a&gt; - &lt;strong&gt;Joe Sepi&lt;/strong&gt; &amp;lt;&lt;a href="mailto:joesepi@ibm.com"&gt;joesepi@ibm.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mhdawson"&gt;mhdawson&lt;/a&gt; - &lt;strong&gt;Michael Dawson&lt;/strong&gt; &amp;lt;&lt;a href="mailto:midawson@redhat.com"&gt;midawson@redhat.com&lt;/a&gt;&amp;gt; (he/him)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Node.js is available under the &lt;a href="https://opensource.org/licenses/MIT"&gt;MIT License&lt;/a&gt;. Node.js also includes external libraries that are available under a variety of licenses. See &lt;a href="https://github.com/nodejs/node/raw/HEAD/LICENSE"&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NginxProxyManager/nginx-proxy-manager</title>
      <link>https://github.com/NginxProxyManager/nginx-proxy-manager</link>
      <description>&lt;p&gt;Docker container for managing Nginx proxy hosts with a simple, powerful interface&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://nginxproxymanager.com/github.png" /&gt; &lt;br /&gt;&lt;br /&gt; &lt;img src="https://img.shields.io/badge/version-2.12.6-green.svg?style=for-the-badge" /&gt; &lt;a href="https://hub.docker.com/repository/docker/jc21/nginx-proxy-manager"&gt; &lt;img src="https://img.shields.io/docker/stars/jc21/nginx-proxy-manager.svg?style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/repository/docker/jc21/nginx-proxy-manager"&gt; &lt;img src="https://img.shields.io/docker/pulls/jc21/nginx-proxy-manager.svg?style=for-the-badge" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;This project comes as a pre-built docker image that enables you to easily forward to your websites running at home or otherwise, including free SSL, without having to know too much about Nginx or Letsencrypt.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NginxProxyManager/nginx-proxy-manager/develop/#quick-setup"&gt;Quick Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nginxproxymanager.com/setup/"&gt;Full Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nginxproxymanager.com/screenshots/"&gt;Screenshots&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Goal&lt;/h2&gt; 
&lt;p&gt;I created this project to fill a personal need to provide users with an easy way to accomplish reverse proxying hosts with SSL termination and it had to be so easy that a monkey could do it. This goal hasn't changed. While there might be advanced options they are optional and the project should be as simple as possible so that the barrier for entry here is low.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/jc21" target="_blank"&gt;&lt;img src="http://public.jc21.com/github/by-me-a-coffee.png" alt="Buy Me A Coffee" style="height: 51px !important;width: 217px !important;" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Beautiful and Secure Admin Interface based on &lt;a href="https://tabler.github.io/"&gt;Tabler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Easily create forwarding domains, redirections, streams and 404 hosts without knowing anything about Nginx&lt;/li&gt; 
 &lt;li&gt;Free SSL using Let's Encrypt or provide your own custom SSL certificates&lt;/li&gt; 
 &lt;li&gt;Access Lists and basic HTTP Authentication for your hosts&lt;/li&gt; 
 &lt;li&gt;Advanced Nginx configuration available for super users&lt;/li&gt; 
 &lt;li&gt;User management, permissions and audit log&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Hosting your home network&lt;/h2&gt; 
&lt;p&gt;I won't go in to too much detail here but here are the basics for someone new to this self-hosted world.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Your home router will have a Port Forwarding section somewhere. Log in and find it&lt;/li&gt; 
 &lt;li&gt;Add port forwarding for port 80 and 443 to the server hosting this project&lt;/li&gt; 
 &lt;li&gt;Configure your domain name details to point to your home, either with a static ip or a service like DuckDNS or &lt;a href="https://github.com/jc21/route53-ddns"&gt;Amazon Route53&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Use the Nginx Proxy Manager as your gateway to forward to your other web based services&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Quick Setup&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Docker and Docker-Compose&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/install/"&gt;Docker Install documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;Docker-Compose Install documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Create a docker-compose.yml file similar to this:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;services:
  app:
    image: 'docker.io/jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is the bare minimum configuration required. See the &lt;a href="https://nginxproxymanager.com/setup/"&gt;documentation&lt;/a&gt; for more.&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Bring up your stack by running&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker-compose up -d

# If using docker-compose-plugin
docker compose up -d

&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Log in to the Admin UI&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;When your docker container is running, connect to it on port &lt;code&gt;81&lt;/code&gt; for the admin interface. Sometimes this can take a little bit because of the entropy of keys.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://127.0.0.1:81"&gt;http://127.0.0.1:81&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Default Admin User:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Email:    admin@example.com
Password: changeme
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Immediately after logging in with this default user you will be asked to modify your details and change your password.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;All are welcome to create pull requests for this project, against the &lt;code&gt;develop&lt;/code&gt; branch. Official releases are created from the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; 
&lt;p&gt;CI is used in this project. All PR's must pass before being considered. After passing, docker builds for PR's are available on dockerhub for manual verifications.&lt;/p&gt; 
&lt;p&gt;Documentation within the &lt;code&gt;develop&lt;/code&gt; branch is available for preview at &lt;a href="https://develop.nginxproxymanager.com"&gt;https://develop.nginxproxymanager.com&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;Special thanks to &lt;a href="https://github.com/NginxProxyManager/nginx-proxy-manager/graphs/contributors"&gt;all of our contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Support&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NginxProxyManager/nginx-proxy-manager/issues"&gt;Found a bug?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NginxProxyManager/nginx-proxy-manager/discussions"&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://reddit.com/r/nginxproxymanager"&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>cv-cat/Spider_XHS</title>
      <link>https://github.com/cv-cat/Spider_XHS</link>
      <description>&lt;p&gt;Â∞èÁ∫¢‰π¶Áà¨Ëô´Êï∞ÊçÆÈááÈõÜÔºåÂ∞èÁ∫¢‰π¶ÂÖ®ÂüüËøêËê•Ëß£ÂÜ≥ÊñπÊ°à&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://github.com/cv-cat/Spider_XHS" target="_blank" align="center" alt="Go to XHS_Spider Website"&gt; 
  &lt;picture&gt; 
   &lt;img width="220" src="https://github.com/user-attachments/assets/b817a5d2-4ca6-49e9-b7b1-efb07a4fb325" alt="Spider_XHS logo" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.python.org/"&gt; &lt;img src="https://img.shields.io/badge/python-3.7%2B-blue" alt="Python 3.7+" /&gt; &lt;/a&gt; 
 &lt;a href="https://nodejs.org/zh-cn/"&gt; &lt;img src="https://img.shields.io/badge/nodejs-18%2B-blue" alt="NodeJS 18+" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h1&gt;Spider_XHS&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;‚ú® ‰∏ì‰∏öÁöÑÂ∞èÁ∫¢‰π¶Êï∞ÊçÆÈááÈõÜËß£ÂÜ≥ÊñπÊ°àÔºåÊîØÊåÅÁ¨îËÆ∞Áà¨ÂèñÔºå‰øùÂ≠òÊ†ºÂºè‰∏∫excelÊàñËÄÖmedia&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;‚ú® Â∞èÁ∫¢‰π¶ÂÖ®ÂüüËøêËê•Ëß£ÂÜ≥ÊñπÊ≥ïÔºåAI‰∏ÄÈîÆÊîπÂÜôÁ¨îËÆ∞ÔºàÂõæÊñáÔºåËßÜÈ¢ëÔºâÁõ¥Êé•‰∏ä‰º†&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;‚≠êÂäüËÉΩÂàóË°®&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;‚ö†Ô∏è ‰ªª‰ΩïÊ∂âÂèäÊï∞ÊçÆÊ≥®ÂÖ•ÁöÑÊìç‰ΩúÈÉΩÊòØ‰∏çË¢´ÂÖÅËÆ∏ÁöÑÔºåÊú¨È°πÁõÆ‰ªÖ‰æõÂ≠¶‰π†‰∫§ÊµÅ‰ΩøÁî®ÔºåÂ¶ÇÊúâËøùÂèçÔºåÂêéÊûúËá™Ë¥ü&lt;/strong&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Ê®°Âùó&lt;/th&gt; 
   &lt;th&gt;Â∑≤ÂÆûÁé∞&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Â∞èÁ∫¢‰π¶Âàõ‰ΩúËÄÖÂπ≥Âè∞&lt;/td&gt; 
   &lt;td&gt;‚úÖ ‰∫åÁª¥Á†ÅÁôªÂΩï&lt;br /&gt;‚úÖ ÊâãÊú∫È™åËØÅÁ†ÅÁôªÂΩï&lt;br /&gt;‚úÖ ‰∏ä‰º†ÔºàÂõæÈõÜ„ÄÅËßÜÈ¢ëÔºâ‰ΩúÂìÅ&lt;br /&gt;‚úÖÊü•ÁúãËá™Â∑±‰∏ä‰º†ÁöÑ‰ΩúÂìÅ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Â∞èÁ∫¢‰π¶PC&lt;/td&gt; 
   &lt;td&gt;‚úÖ ‰∫åÁª¥Á†ÅÁôªÂΩï&lt;br /&gt; ‚úÖ ÊâãÊú∫È™åËØÅÁ†ÅÁôªÂΩï&lt;br /&gt; ‚úÖ Ëé∑ÂèñÊó†Ê∞¥Âç∞ÂõæÁâá&lt;br /&gt; ‚úÖ Ëé∑ÂèñÊó†Ê∞¥Âç∞ËßÜÈ¢ë&lt;br /&gt; ‚úÖ Ëé∑Âèñ‰∏ªÈ°µÁöÑÊâÄÊúâÈ¢ëÈÅì&lt;br /&gt;‚úÖ Ëé∑Âèñ‰∏ªÈ°µÊé®ËçêÁ¨îËÆ∞&lt;br /&gt;‚úÖ Ëé∑ÂèñÊüê‰∏™Áî®Êà∑ÁöÑ‰ø°ÊÅØ&lt;br /&gt;‚úÖ Áî®Êà∑Ëá™Â∑±ÁöÑ‰ø°ÊÅØ&lt;br /&gt;‚úÖ Ëé∑ÂèñÊüê‰∏™Áî®Êà∑‰∏ä‰º†ÁöÑÁ¨îËÆ∞&lt;br /&gt;‚úÖ Ëé∑ÂèñÊüê‰∏™Áî®Êà∑ÊâÄÊúâÁöÑÂñúÊ¨¢Á¨îËÆ∞&lt;br /&gt;‚úÖ Ëé∑ÂèñÊüê‰∏™Áî®Êà∑ÊâÄÊúâÁöÑÊî∂ËóèÁ¨îËÆ∞&lt;br /&gt;‚úÖ Ëé∑ÂèñÊüê‰∏™Á¨îËÆ∞ÁöÑËØ¶ÁªÜÂÜÖÂÆπ&lt;br /&gt;‚úÖ ÊêúÁ¥¢Á¨îËÆ∞ÂÜÖÂÆπ&lt;br /&gt;‚úÖ ÊêúÁ¥¢Áî®Êà∑ÂÜÖÂÆπ&lt;br /&gt;‚úÖ Ëé∑ÂèñÊüê‰∏™Á¨îËÆ∞ÁöÑËØÑËÆ∫&lt;br /&gt;‚úÖ Ëé∑ÂèñÊú™ËØªÊ∂àÊÅØ‰ø°ÊÅØ&lt;br /&gt;‚úÖ Ëé∑ÂèñÊî∂Âà∞ÁöÑËØÑËÆ∫Âíå@ÊèêÈÜí‰ø°ÊÅØ&lt;br /&gt;‚úÖ Ëé∑ÂèñÊî∂Âà∞ÁöÑÁÇπËµûÂíåÊî∂Ëóè‰ø°ÊÅØ&lt;br /&gt;‚úÖ Ëé∑ÂèñÊñ∞Â¢ûÂÖ≥Ê≥®‰ø°ÊÅØ&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;üåü ÂäüËÉΩÁâπÊÄß&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚úÖ &lt;strong&gt;Â§öÁª¥Â∫¶Êï∞ÊçÆÈááÈõÜ&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Áî®Êà∑‰∏ªÈ°µ‰ø°ÊÅØ&lt;/li&gt; 
   &lt;li&gt;Á¨îËÆ∞ËØ¶ÁªÜÂÜÖÂÆπ&lt;/li&gt; 
   &lt;li&gt;Êô∫ËÉΩÊêúÁ¥¢ÁªìÊûúÊäìÂèñ&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;üöÄ &lt;strong&gt;È´òÊÄßËÉΩÊû∂ÊûÑ&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Ëá™Âä®ÈáçËØïÊú∫Âà∂&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;üîí &lt;strong&gt;ÂÆâÂÖ®Á®≥ÂÆö&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Â∞èÁ∫¢‰π¶ÊúÄÊñ∞APIÈÄÇÈÖç&lt;/li&gt; 
   &lt;li&gt;ÂºÇÂ∏∏Â§ÑÁêÜÊú∫Âà∂&lt;/li&gt; 
   &lt;li&gt;proxy‰ª£ÁêÜ&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;üé® &lt;strong&gt;‰æøÊç∑ÁÆ°ÁêÜ&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ÁªìÊûÑÂåñÁõÆÂΩïÂ≠òÂÇ®&lt;/li&gt; 
   &lt;li&gt;Ê†ºÂºèÂåñËæìÂá∫ÔºàJSON/EXCEL/MEDIAÔºâ&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üé®ÊïàÊûúÂõæ&lt;/h2&gt; 
&lt;h3&gt;Â§ÑÁêÜÂêéÁöÑÊâÄÊúâÁî®Êà∑&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://github.com/cv-cat/Spider_XHS/assets/94289429/00902dbd-4da1-45bc-90bb-19f5856a04ad" alt="image" /&gt;&lt;/p&gt; 
&lt;h3&gt;Êüê‰∏™Áî®Êà∑ÊâÄÊúâÁöÑÁ¨îËÆ∞&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://github.com/cv-cat/Spider_XHS/assets/94289429/880884e8-4a1d-4dc1-a4dc-e168dd0e9896" alt="image" /&gt;&lt;/p&gt; 
&lt;h3&gt;Êüê‰∏™Á¨îËÆ∞ÂÖ∑‰ΩìÁöÑÂÜÖÂÆπ&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://github.com/cv-cat/Spider_XHS/assets/94289429/d17f3f4e-cd44-4d3a-b9f6-d880da626cc8" alt="image" /&gt;&lt;/p&gt; 
&lt;h3&gt;‰øùÂ≠òÁöÑexcel&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/707f20ed-be27-4482-89b3-a5863bc360e7" alt="image" /&gt;&lt;/p&gt; 
&lt;h2&gt;üõ†Ô∏è Âø´ÈÄüÂºÄÂßã&lt;/h2&gt; 
&lt;h3&gt;‚õ≥ËøêË°åÁéØÂ¢É&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Python 3.7+&lt;/li&gt; 
 &lt;li&gt;Node.js 18+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üéØÂÆâË£Ö‰æùËµñ&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt
npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;üé®ÈÖçÁΩÆÊñá‰ª∂&lt;/h3&gt; 
&lt;p&gt;ÈÖçÁΩÆÊñá‰ª∂Âú®È°πÁõÆÊ†πÁõÆÂΩï.envÊñá‰ª∂‰∏≠ÔºåÂ∞Ü‰∏ãÂõæËá™Â∑±ÁöÑÁôªÂΩïcookieÊîæÂÖ•ÂÖ∂‰∏≠ÔºåcookieËé∑Âèñ‚û°Ô∏èÂú®ÊµèËßàÂô®f12ÊâìÂºÄÊéßÂà∂Âè∞ÔºåÁÇπÂáªÁΩëÁªúÔºåÁÇπÂáªfetchÔºåÊâæ‰∏Ä‰∏™Êé•Âè£ÁÇπÂºÄ &lt;img src="https://github.com/user-attachments/assets/6a7e4ecb-0432-4581-890a-577e0eae463d" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;Â§çÂà∂cookieÂà∞.envÊñá‰ª∂‰∏≠ÔºàÊ≥®ÊÑèÔºÅÁôªÂΩïÂ∞èÁ∫¢‰π¶ÂêéÁöÑcookieÊâçÊòØÊúâÊïàÁöÑÔºå‰∏çÁôªÈôÜÊ≤°ÊúâÁî®Ôºâ &lt;img src="https://github.com/user-attachments/assets/5e62bc35-d758-463e-817c-7dcaacbee13c" alt="image" /&gt;&lt;/p&gt; 
&lt;h3&gt;üöÄËøêË°åÈ°πÁõÆ&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;python main.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;üóùÔ∏èÊ≥®ÊÑè‰∫ãÈ°π&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;main.py‰∏≠ÁöÑ‰ª£Á†ÅÊòØÁà¨Ëô´ÁöÑÂÖ•Âè£ÔºåÂèØ‰ª•Ê†πÊçÆËá™Â∑±ÁöÑÈúÄÊ±ÇËøõË°å‰øÆÊîπ&lt;/li&gt; 
 &lt;li&gt;apis/xhs_pc_apis.py ‰∏≠ÁöÑ‰ª£Á†ÅÂåÖÂê´‰∫ÜÊâÄÊúâÁöÑapiÊé•Âè£ÔºåÂèØ‰ª•Ê†πÊçÆËá™Â∑±ÁöÑÈúÄÊ±ÇËøõË°å‰øÆÊîπ&lt;/li&gt; 
 &lt;li&gt;apis/xhs_creator_apis.py ‰∏≠ÁöÑ‰ª£Á†ÅÂåÖÂê´‰∫ÜÂ∞èÁ∫¢‰π¶Âàõ‰ΩúËÄÖÂπ≥Âè∞ÁöÑapiÊé•Âè£ÔºåÂèØ‰ª•Ê†πÊçÆËá™Â∑±ÁöÑÈúÄÊ±ÇËøõË°å‰øÆÊîπ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üç•Êó•Âøó&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Êó•Êúü&lt;/th&gt; 
   &lt;th&gt;ËØ¥Êòé&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/08/09&lt;/td&gt; 
   &lt;td&gt;- È¶ñÊ¨°Êèê‰∫§&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/09/13&lt;/td&gt; 
   &lt;td&gt;- apiÊõ¥ÊîπparamsÂ¢ûÂä†‰∏§‰∏™Â≠óÊÆµÔºå‰øÆÂ§çÂõæÁâáÊó†Ê≥ï‰∏ãËΩΩÔºåÊúâ‰∫õÈ°µÈù¢Êó†Ê≥ïËÆøÈóÆÂØºËá¥Êä•Èîô&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/09/16&lt;/td&gt; 
   &lt;td&gt;- ËæÉÂ§ßËßÜÈ¢ëÂá∫Áé∞ÁºñÁ†ÅÈóÆÈ¢òÔºå‰øÆÂ§çËßÜÈ¢ëÁºñÁ†ÅÈóÆÈ¢òÔºåÂä†ÂÖ•ÂºÇÂ∏∏Â§ÑÁêÜ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/09/18&lt;/td&gt; 
   &lt;td&gt;- ‰ª£Á†ÅÈáçÊûÑÔºåÂä†ÂÖ•Â§±Ë¥•ÈáçËØï&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/09/19&lt;/td&gt; 
   &lt;td&gt;- Êñ∞Â¢û‰∏ãËΩΩÊêúÁ¥¢ÁªìÊûúÂäüËÉΩ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/10/05&lt;/td&gt; 
   &lt;td&gt;- Êñ∞Â¢ûË∑≥ËøáÂ∑≤‰∏ãËΩΩÂäüËÉΩÔºåËé∑ÂèñÊõ¥ËØ¶ÁªÜÁöÑÁ¨îËÆ∞ÂíåÁî®Êà∑‰ø°ÊÅØ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/10/08&lt;/td&gt; 
   &lt;td&gt;- ‰∏ä‰º†‰ª£Á†Å‚òûPypiÔºåÂèØÈÄöËøápip installÂÆâË£ÖÊú¨È°πÁõÆ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/10/17&lt;/td&gt; 
   &lt;td&gt;- ÊêúÁ¥¢‰∏ãËΩΩÊñ∞Â¢ûÊéíÂ∫èÊñπÂºèÈÄâÈ°πÔºà1„ÄÅÁªºÂêàÊéíÂ∫è 2„ÄÅÁÉ≠Èó®ÊéíÂ∫è 3„ÄÅÊúÄÊñ∞ÊéíÂ∫èÔºâ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/10/21&lt;/td&gt; 
   &lt;td&gt;- Êñ∞Â¢ûÂõæÂΩ¢ÂåñÁïåÈù¢,‰∏ä‰º†Ëá≥release v2.1.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23/10/28&lt;/td&gt; 
   &lt;td&gt;- Fix Bug ‰øÆÂ§çÊêúÁ¥¢ÂäüËÉΩÂá∫Áé∞ÁöÑÈöêËóèÈóÆÈ¢ò&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25/03/18&lt;/td&gt; 
   &lt;td&gt;- Êõ¥Êñ∞APIÔºå‰øÆÂ§çÈÉ®ÂàÜÈóÆÈ¢ò&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25/06/07&lt;/td&gt; 
   &lt;td&gt;- Êõ¥Êñ∞searchÊé•Âè£ÔºåÂå∫ÂàÜËßÜÈ¢ëÂíåÂõæÈõÜ‰∏ãËΩΩÔºåÂ¢ûÂä†Â∞èÁ∫¢‰π¶Âàõ‰ΩúËÄÖapi&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25/07/15&lt;/td&gt; 
   &lt;td&gt;- Êõ¥Êñ∞ xs version56 &amp;amp; Â∞èÁ∫¢‰π¶Âàõ‰ΩúËÄÖÊé•Âè£&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;üß∏È¢ùÂ§ñËØ¥Êòé&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;ÊÑüË∞¢star‚≠êÂíåfollowüì∞ÔºÅ‰∏çÊó∂Êõ¥Êñ∞&lt;/li&gt; 
 &lt;li&gt;‰ΩúËÄÖÁöÑËÅîÁ≥ªÊñπÂºèÂú®‰∏ªÈ°µÈáåÔºåÊúâÈóÆÈ¢òÂèØ‰ª•ÈöèÊó∂ËÅîÁ≥ªÊàë&lt;/li&gt; 
 &lt;li&gt;ÂèØ‰ª•ÂÖ≥Ê≥®‰∏ã‰ΩúËÄÖÁöÑÂÖ∂‰ªñÈ°πÁõÆÔºåÊ¨¢Ëøé PR Âíå issue&lt;/li&gt; 
 &lt;li&gt;ÊÑüË∞¢ËµûÂä©ÔºÅÂ¶ÇÊûúÊ≠§È°πÁõÆÂØπÊÇ®ÊúâÂ∏ÆÂä©ÔºåËØ∑‰ΩúËÄÖÂñù‰∏ÄÊùØÂ•∂Ëå∂~~ ÔºàÂºÄÂøÉ‰∏ÄÊï¥Â§©üòäüòäÔºâ&lt;/li&gt; 
 &lt;li&gt;thank you~~~&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/cv-cat/Spider_XHS/master/author/wx_pay.png" width="400px" alt="ÂæÆ‰ø°ËµûËµèÁ†Å" /&gt;‚ÄÉ 
 &lt;img src="https://raw.githubusercontent.com/cv-cat/Spider_XHS/master/author/zfb_pay.jpg" width="400px" alt="ÊîØ‰ªòÂÆùÊî∂Ê¨æÁ†Å" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;üìà Star Ë∂ãÂäø&lt;/h2&gt; 
&lt;a href="https://www.star-history.com/#cv-cat/Spider_XHS&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=cv-cat/Spider_XHS&amp;amp;type=Date&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=cv-cat/Spider_XHS&amp;amp;type=Date" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=cv-cat/Spider_XHS&amp;amp;type=Date" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;üçî ‰∫§ÊµÅÁæ§&lt;/h2&gt; 
&lt;img width="1031" height="1449" alt="5355a0f82398ee2052f2e659328d737b" src="https://github.com/user-attachments/assets/ea690f33-0c5f-4941-9332-de9feff838e7" /&gt;</description>
    </item>
    
    <item>
      <title>swagger-api/swagger-ui</title>
      <link>https://github.com/swagger-api/swagger-ui</link>
      <description>&lt;p&gt;Swagger UI is a collection of HTML, JavaScript, and CSS assets that dynamically generate beautiful documentation from a Swagger-compliant API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SWU-logo-clr.png" width="300" /&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="http://badge.fury.io/js/swagger-ui"&gt;&lt;img src="https://badge.fury.io/js/swagger-ui.svg?sanitize=true" alt="NPM version" /&gt;&lt;/a&gt; &lt;a href="https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-ui-master/"&gt;&lt;img src="https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-ui-master/badge/icon?subject=jenkins%20build" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://jenkins.swagger.io/job/oss-swagger-ui-security-audit/lastBuild/console"&gt;&lt;img src="https://jenkins.swagger.io/buildStatus/icon?job=oss-swagger-ui-security-audit&amp;amp;subject=npm%20audit" alt="npm audit" /&gt;&lt;/a&gt; &lt;a href="https://github.com/swagger-api/swagger-ui/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors-anon/swagger-api/swagger-ui.svg?sanitize=true" alt="total GitHub contributors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/swagger-ui"&gt;&lt;img src="https://img.shields.io/npm/dm/swagger-ui.svg?label=npm%20downloads" alt="monthly npm installs" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/docker-docker.swagger.io%2Fswaggerapi%2Fswagger--ui-blue" alt="docker registry" /&gt; &lt;img src="https://img.shields.io/packagist/dm/swagger-api/swagger-ui.svg?label=packagist%20installs" alt="monthly packagist installs" /&gt; &lt;a href="https://bundlephobia.com/package/swagger-ui"&gt;&lt;img src="https://img.shields.io/bundlephobia/minzip/swagger-ui.svg?label=gzip%20size" alt="gzip size" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://swagger.io/tools/swagger-ui/"&gt;Swagger UI&lt;/a&gt; allows anyone ‚Äî be it your development team or your end consumers ‚Äî to visualize and interact with the API‚Äôs resources without having any of the implementation logic in place. It‚Äôs automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption.&lt;/p&gt; 
&lt;h2&gt;General&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;üëâüèº Want to score an easy open-source contribution?&lt;/strong&gt; Check out our &lt;a href="https://github.com/swagger-api/swagger-ui/issues?q=is%3Aissue+is%3Aopen+label%3A%22Good+first+issue%22"&gt;Good first issue&lt;/a&gt; label.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;üï∞Ô∏è Looking for the older version of Swagger UI?&lt;/strong&gt; Refer to the &lt;a href="https://github.com/swagger-api/swagger-ui/tree/2.x"&gt;&lt;em&gt;2.x&lt;/em&gt; branch&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This repository publishes three different NPM modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.npmjs.com/package/swagger-ui"&gt;swagger-ui&lt;/a&gt; is a traditional npm module intended for use in single-page applications that are capable of resolving dependencies (via Webpack, Browserify, etc.).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.npmjs.com/package/swagger-ui-dist"&gt;swagger-ui-dist&lt;/a&gt; is a dependency-free module that includes everything you need to serve Swagger UI in a server-side project, or a single-page application that can't resolve npm module dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.npmjs.com/package/swagger-ui-react"&gt;swagger-ui-react&lt;/a&gt; is Swagger UI packaged as a React component for use in React applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We strongly suggest that you use &lt;code&gt;swagger-ui&lt;/code&gt; instead of &lt;code&gt;swagger-ui-dist&lt;/code&gt; if you're building a single-page application, since &lt;code&gt;swagger-ui-dist&lt;/code&gt; is significantly larger.&lt;/p&gt; 
&lt;p&gt;If you are looking for plain ol' HTML/JS/CSS, &lt;a href="https://github.com/swagger-api/swagger-ui/releases/latest"&gt;download the latest release&lt;/a&gt; and copy the contents of the &lt;code&gt;/dist&lt;/code&gt; folder to your server.&lt;/p&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;The OpenAPI Specification has undergone 5 revisions since initial creation in 2010. Compatibility between Swagger UI and the OpenAPI Specification is as follows:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Swagger UI Version&lt;/th&gt; 
   &lt;th&gt;Release Date&lt;/th&gt; 
   &lt;th&gt;OpenAPI Spec compatibility&lt;/th&gt; 
   &lt;th&gt;Notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5.19.0&lt;/td&gt; 
   &lt;td&gt;2025-02-17&lt;/td&gt; 
   &lt;td&gt;2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.1.0, 3.1.1&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v5.19.0"&gt;tag v5.19.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5.0.0&lt;/td&gt; 
   &lt;td&gt;2023-06-12&lt;/td&gt; 
   &lt;td&gt;2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.1.0&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v5.0.0"&gt;tag v5.0.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.0.0&lt;/td&gt; 
   &lt;td&gt;2021-11-03&lt;/td&gt; 
   &lt;td&gt;2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v4.0.0"&gt;tag v4.0.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;3.18.3&lt;/td&gt; 
   &lt;td&gt;2018-08-03&lt;/td&gt; 
   &lt;td&gt;2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v3.18.3"&gt;tag v3.18.3&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;3.0.21&lt;/td&gt; 
   &lt;td&gt;2017-07-26&lt;/td&gt; 
   &lt;td&gt;2.0&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v3.0.21"&gt;tag v3.0.21&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2.2.10&lt;/td&gt; 
   &lt;td&gt;2017-01-04&lt;/td&gt; 
   &lt;td&gt;1.1, 1.2, 2.0&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v2.2.10"&gt;tag v2.2.10&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2.1.5&lt;/td&gt; 
   &lt;td&gt;2016-07-20&lt;/td&gt; 
   &lt;td&gt;1.1, 1.2, 2.0&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v2.1.5"&gt;tag v2.1.5&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2.0.24&lt;/td&gt; 
   &lt;td&gt;2014-09-12&lt;/td&gt; 
   &lt;td&gt;1.1, 1.2&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v2.0.24"&gt;tag v2.0.24&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.0.13&lt;/td&gt; 
   &lt;td&gt;2013-03-08&lt;/td&gt; 
   &lt;td&gt;1.1, 1.2&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v1.0.13"&gt;tag v1.0.13&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.0.1&lt;/td&gt; 
   &lt;td&gt;2011-10-11&lt;/td&gt; 
   &lt;td&gt;1.0, 1.1&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/tree/v1.0.1"&gt;tag v1.0.1&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Anonymized analytics&lt;/h2&gt; 
&lt;p&gt;SwaggerUI uses &lt;a href="https://scarf.sh/"&gt;Scarf&lt;/a&gt; to collect &lt;a href="https://github.com/scarf-sh/scarf-js?tab=readme-ov-file#as-a-user-of-a-package-using-scarf-js-what-information-does-scarf-js-send-about-me"&gt;anonymized installation analytics&lt;/a&gt;. These analytics help support the maintainers of this library and ONLY run during installation. To &lt;a href="https://github.com/scarf-sh/scarf-js?tab=readme-ov-file#as-a-user-of-a-package-using-scarf-js-how-can-i-opt-out-of-analytics"&gt;opt out&lt;/a&gt;, you can set the &lt;code&gt;scarfSettings.enabled&lt;/code&gt; field to &lt;code&gt;false&lt;/code&gt; in your project's &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// package.json
{
  // ...
  "scarfSettings": {
    "enabled": false
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can set the environment variable &lt;code&gt;SCARF_ANALYTICS&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; as part of the environment that installs your npm packages, e.g., &lt;code&gt;SCARF_ANALYTICS=false npm install&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;h4&gt;Usage&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/usage/installation.md"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/usage/configuration.md"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/usage/cors.md"&gt;CORS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/usage/oauth2.md"&gt;OAuth2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/usage/deep-linking.md"&gt;Deep Linking&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/usage/limitations.md"&gt;Limitations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/usage/version-detection.md"&gt;Version detection&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Customization&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/customization/overview.md"&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/customization/plugin-api.md"&gt;Plugin API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/customization/custom-layout.md"&gt;Custom layout&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Development&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/development/setting-up.md"&gt;Setting up&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui/raw/HEAD/docs/development/scripts.md"&gt;Scripts&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Contributing&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swagger-api/.github/raw/HEAD/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Integration Tests&lt;/h5&gt; 
&lt;p&gt;You will need JDK of version 7 or higher as instructed here &lt;a href="https://nightwatchjs.org/guide/getting-started/installation.html#install-selenium-server"&gt;https://nightwatchjs.org/guide/getting-started/installation.html#install-selenium-server&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Integration tests can be run locally with &lt;code&gt;npm run e2e&lt;/code&gt; - be sure you aren't running a dev server when testing!&lt;/p&gt; 
&lt;h3&gt;Browser support&lt;/h3&gt; 
&lt;p&gt;Swagger UI works in the latest versions of Chrome, Safari, Firefox, and Edge.&lt;/p&gt; 
&lt;h3&gt;Known Issues&lt;/h3&gt; 
&lt;p&gt;To help with the migration, here are the currently known issues with 3.X. This list will update regularly, and will not include features that were not implemented in previous versions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Only part of the parameters previously supported are available.&lt;/li&gt; 
 &lt;li&gt;The JSON Form Editor is not implemented.&lt;/li&gt; 
 &lt;li&gt;Support for &lt;code&gt;collectionFormat&lt;/code&gt; is partial.&lt;/li&gt; 
 &lt;li&gt;l10n (translations) is not implemented.&lt;/li&gt; 
 &lt;li&gt;Relative path support for external files is not implemented.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security contact&lt;/h2&gt; 
&lt;p&gt;Please disclose any security-related issues or vulnerabilities by emailing &lt;a href="mailto:security@swagger.io"&gt;security@swagger.io&lt;/a&gt;, instead of using the public issue tracker.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;SwaggerUI is licensed under &lt;a href="https://github.com/swagger-api/swagger-ui/raw/master/LICENSE"&gt;Apache 2.0 license&lt;/a&gt;. SwaggerUI comes with an explicit &lt;a href="https://github.com/swagger-api/swagger-ui/raw/master/NOTICE"&gt;NOTICE&lt;/a&gt; file containing additional legal notices and information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>plankanban/planka</title>
      <link>https://github.com/plankanban/planka</link>
      <description>&lt;p&gt;PLANKA is the kanban-style project mastering tool for everyone.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PLANKA&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Project mastering driven by fun&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/github/package-json/v/plankanban/planka?style=flat-square" alt="Version" /&gt; &lt;a href="https://github.com/plankanban/planka/pkgs/container/planka"&gt;&lt;img src="https://img.shields.io/badge/docker_pulls-6M%2B-%23066da5?style=flat-square&amp;amp;color=red" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://github.com/plankanban/planka/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/plankanban/planka?style=flat-square&amp;amp;color=blue" alt="Contributors" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/WqqYNd7Jvt"&gt;&lt;img src="https://img.shields.io/discord/1041440072953765979?style=flat-square&amp;amp;logo=discord&amp;amp;logoColor=white" alt="Chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/plankanban/planka/master/assets/demo.gif" alt="Demo" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://plankanban.github.io/planka"&gt;&lt;strong&gt;Client demo&lt;/strong&gt;&lt;/a&gt; (without server features).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ö†Ô∏è The demo GIF and client demo are based on &lt;strong&gt;v1&lt;/strong&gt; and will be updated soon.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Collaborative Kanban Boards&lt;/strong&gt;: Create projects, boards, lists, cards, and manage tasks with an intuitive drag-and-drop interface&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Real-Time Updates&lt;/strong&gt;: Instant syncing across all users, no refresh needed&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rich Markdown Support&lt;/strong&gt;: Write beautifully formatted card descriptions with a powerful markdown editor&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible Notifications&lt;/strong&gt;: Get alerts through 100+ providers, fully customizable to your workflow&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless Authentication&lt;/strong&gt;: Single sign-on with OpenID Connect integration&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multilingual &amp;amp; Easy to Translate&lt;/strong&gt;: Full internationalization support for a global audience&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Deploy&lt;/h2&gt; 
&lt;p&gt;PLANKA is easy to install using multiple methods - learn more in the &lt;a href="https://docs.planka.cloud/docs/welcome/"&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For configuration and environment settings, see the &lt;a href="https://docs.planka.cloud/docs/category/configuration/"&gt;configuration section&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Interested in a hosted version of PLANKA? Email us at &lt;a href="mailto:github@planka.group"&gt;github@planka.group&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For any security issues, please do not create a public issue on GitHub - instead, report it privately by emailing &lt;a href="mailto:security@planka.group"&gt;security@planka.group&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We do NOT offer any public support via email, please use GitHub.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Join our community:&lt;/strong&gt; Get help, share ideas, or contribute on our &lt;a href="https://discord.gg/WqqYNd7Jvt"&gt;Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;PLANKA is &lt;a href="https://faircode.io"&gt;fair-code&lt;/a&gt; distributed under the &lt;a href="https://github.com/plankanban/planka/raw/master/LICENSES/PLANKA%20Community%20License%20EN.md"&gt;Fair Use License&lt;/a&gt; and &lt;a href="https://github.com/plankanban/planka/raw/master/LICENSES/PLANKA%20Commercial%20License%20EN.md"&gt;PLANKA Pro/Enterprise License&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Source Available&lt;/strong&gt;: The source code is always visible&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Self-Hostable&lt;/strong&gt;: Deploy and host it anywhere&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: Customize with your own functionality&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise Licenses&lt;/strong&gt;: Available for additional features and support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more details, check the &lt;a href="https://github.com/plankanban/planka/raw/master/LICENSES/PLANKA%20License%20Guide%20EN.md"&gt;License Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Found a bug or have a feature request? Check out our &lt;a href="https://github.com/plankanban/planka/raw/master/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;For setting up the project locally, see the &lt;a href="https://docs.planka.cloud/docs/category/development/"&gt;development section&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Thanks to all our contributors!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/plankanban/planka/graphs/contributors"&gt;&lt;img src="https://contrib.rocks/image?repo=plankanban/planka" alt="Contributors" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>overleaf/overleaf</title>
      <link>https://github.com/overleaf/overleaf</link>
      <description>&lt;p&gt;A web-based collaborative LaTeX editor&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;br /&gt; &lt;a href="https://www.overleaf.com"&gt;&lt;img src="https://raw.githubusercontent.com/overleaf/overleaf/main/doc/logo.png" alt="Overleaf" width="300" /&gt;&lt;/a&gt; &lt;/h1&gt; 
&lt;h4 align="center"&gt;An open-source online real-time collaborative LaTeX editor.&lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/overleaf/overleaf/wiki"&gt;Wiki&lt;/a&gt; ‚Ä¢ &lt;a href="https://www.overleaf.com/for/enterprises"&gt;Server Pro&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/overleaf/overleaf/main/#contributing"&gt;Contributing&lt;/a&gt; ‚Ä¢ &lt;a href="https://mailchi.mp/overleaf.com/community-edition-and-server-pro"&gt;Mailing List&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/overleaf/overleaf/main/#authors"&gt;Authors&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/overleaf/overleaf/main/#license"&gt;License&lt;/a&gt; &lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/overleaf/overleaf/main/doc/screenshot.png" alt="A screenshot of a project being edited in Overleaf Community Edition" /&gt; 
&lt;p align="center"&gt; Figure 1: A screenshot of a project being edited in Overleaf Community Edition. &lt;/p&gt; 
&lt;h2&gt;Community Edition&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.overleaf.com"&gt;Overleaf&lt;/a&gt; is an open-source online real-time collaborative LaTeX editor. We run a hosted version at &lt;a href="https://www.overleaf.com"&gt;www.overleaf.com&lt;/a&gt;, but you can also run your own local version, and contribute to the development of Overleaf.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] Overleaf Community Edition is intended for use in environments where &lt;strong&gt;all&lt;/strong&gt; users are trusted. Community Edition is &lt;strong&gt;not&lt;/strong&gt; appropriate for scenarios where isolation of users is required due to Sandbox Compiles not being available. When not using Sandboxed Compiles, users have full read and write access to the &lt;code&gt;sharelatex&lt;/code&gt; container resources (filesystem, network, environment variables) when running LaTeX compiles.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For more information on Sandbox Compiles check out our &lt;a href="https://docs.overleaf.com/on-premises/configuration/overleaf-toolkit/server-pro-only-configuration/sandboxed-compiles"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Enterprise&lt;/h2&gt; 
&lt;p&gt;If you want help installing and maintaining Overleaf in your lab or workplace, we offer an officially supported version called &lt;a href="https://www.overleaf.com/for/enterprises"&gt;Overleaf Server Pro&lt;/a&gt;. It also includes more features for security (SSO with LDAP or SAML), administration and collaboration (e.g. tracked changes). &lt;a href="https://www.overleaf.com/for/enterprises"&gt;Find out more!&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Keeping up to date&lt;/h2&gt; 
&lt;p&gt;Sign up to the &lt;a href="https://mailchi.mp/overleaf.com/community-edition-and-server-pro"&gt;mailing list&lt;/a&gt; to get updates on Overleaf releases and development.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;We have detailed installation instructions in the &lt;a href="https://github.com/overleaf/toolkit/"&gt;Overleaf Toolkit&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Upgrading&lt;/h2&gt; 
&lt;p&gt;If you are upgrading from a previous version of Overleaf, please see the &lt;a href="https://github.com/overleaf/overleaf/wiki#release-notes"&gt;Release Notes section on the Wiki&lt;/a&gt; for all of the versions between your current version and the version you are upgrading to.&lt;/p&gt; 
&lt;h2&gt;Overleaf Docker Image&lt;/h2&gt; 
&lt;p&gt;This repo contains two dockerfiles, &lt;a href="https://raw.githubusercontent.com/overleaf/overleaf/main/server-ce/Dockerfile-base"&gt;&lt;code&gt;Dockerfile-base&lt;/code&gt;&lt;/a&gt;, which builds the &lt;code&gt;sharelatex/sharelatex-base&lt;/code&gt; image, and &lt;a href="https://raw.githubusercontent.com/overleaf/overleaf/main/server-ce/Dockerfile"&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt; which builds the &lt;code&gt;sharelatex/sharelatex&lt;/code&gt; (or "community") image.&lt;/p&gt; 
&lt;p&gt;The Base image generally contains the basic dependencies like &lt;code&gt;wget&lt;/code&gt;, plus &lt;code&gt;texlive&lt;/code&gt;. We split this out because it's a pretty heavy set of dependencies, and it's nice to not have to rebuild all of that every time.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;sharelatex/sharelatex&lt;/code&gt; image extends the base image and adds the actual Overleaf code and services.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;make build-base&lt;/code&gt; and &lt;code&gt;make build-community&lt;/code&gt; from &lt;code&gt;server-ce/&lt;/code&gt; to build these images.&lt;/p&gt; 
&lt;p&gt;We use the &lt;a href="https://github.com/phusion/baseimage-docker"&gt;Phusion base-image&lt;/a&gt; (which is extended by our &lt;code&gt;base&lt;/code&gt; image) to provide us with a VM-like container in which to run the Overleaf services. Baseimage uses the &lt;code&gt;runit&lt;/code&gt; service manager to manage services, and we add our init-scripts from the &lt;code&gt;server-ce/runit&lt;/code&gt; folder.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/overleaf/overleaf/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; file for information on contributing to the development of Overleaf.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.overleaf.com/about"&gt;The Overleaf Team&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The code in this repository is released under the GNU AFFERO GENERAL PUBLIC LICENSE, version 3. A copy can be found in the &lt;a href="https://raw.githubusercontent.com/overleaf/overleaf/main/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Copyright (c) Overleaf, 2014-2025.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>projectdiscovery/nuclei-templates</title>
      <link>https://github.com/projectdiscovery/nuclei-templates</link>
      <description>&lt;p&gt;Community curated list of templates for the nuclei engine to find security vulnerabilities.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; Nuclei Templates &lt;/h1&gt; 
&lt;h4 align="center"&gt;Community curated list of templates for the nuclei engine to find security vulnerabilities in applications.&lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/projectdiscovery/nuclei-templates/issues"&gt;&lt;img src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" /&gt;&lt;/a&gt; &lt;a href="https://github.com/projectdiscovery/nuclei-templates/releases"&gt;&lt;img src="https://img.shields.io/github/release/projectdiscovery/nuclei-templates" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/pdnuclei"&gt;&lt;img src="https://img.shields.io/twitter/follow/pdnuclei.svg?logo=twitter" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/projectdiscovery"&gt;&lt;img src="https://img.shields.io/discord/695645237418131507.svg?logo=discord" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://nuclei.projectdiscovery.io/templating-guide/"&gt;Documentation&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/main/#-contributions"&gt;Contributions&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/main/#-discussion"&gt;Discussion&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/main/#-community"&gt;Community&lt;/a&gt; ‚Ä¢ &lt;a href="https://nuclei.projectdiscovery.io/faq/templates/"&gt;FAQs&lt;/a&gt; ‚Ä¢ &lt;a href="https://discord.gg/projectdiscovery"&gt;Join Discord&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Templates are the core of the &lt;a href="https://github.com/projectdiscovery/nuclei"&gt;nuclei scanner&lt;/a&gt; which powers the actual scanning engine. This repository stores and houses various templates for the scanner provided by our team, as well as contributed by the community. We hope that you also contribute by sending templates via &lt;strong&gt;pull requests&lt;/strong&gt; or &lt;a href="https://github.com/projectdiscovery/nuclei-templates/issues/new?assignees=&amp;amp;labels=&amp;amp;template=submit-template.md&amp;amp;title=%5Bnuclei-template%5D+"&gt;Github issues&lt;/a&gt; to grow the list.&lt;/p&gt; 
&lt;h2&gt;Nuclei Templates overview&lt;/h2&gt; 
&lt;p&gt;An overview of the nuclei template project, including statistics on unique tags, author, directory, severity, and type of templates. The table below contains the top ten statistics for each matrix; an expanded version of this is &lt;a href="https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/main/TEMPLATES-STATS.md"&gt;available here&lt;/a&gt;, and also available in &lt;a href="https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/main/TEMPLATES-STATS.json"&gt;JSON&lt;/a&gt; format for integration.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;h2&gt;Nuclei Templates Top 10 statistics&lt;/h2&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;TAG&lt;/th&gt; 
       &lt;th&gt;COUNT&lt;/th&gt; 
       &lt;th&gt;AUTHOR&lt;/th&gt; 
       &lt;th&gt;COUNT&lt;/th&gt; 
       &lt;th&gt;DIRECTORY&lt;/th&gt; 
       &lt;th&gt;COUNT&lt;/th&gt; 
       &lt;th&gt;SEVERITY&lt;/th&gt; 
       &lt;th&gt;COUNT&lt;/th&gt; 
       &lt;th&gt;TYPE&lt;/th&gt; 
       &lt;th&gt;COUNT&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;cve&lt;/td&gt; 
       &lt;td&gt;3288&lt;/td&gt; 
       &lt;td&gt;dhiyaneshdk&lt;/td&gt; 
       &lt;td&gt;1882&lt;/td&gt; 
       &lt;td&gt;http&lt;/td&gt; 
       &lt;td&gt;8967&lt;/td&gt; 
       &lt;td&gt;info&lt;/td&gt; 
       &lt;td&gt;4190&lt;/td&gt; 
       &lt;td&gt;file&lt;/td&gt; 
       &lt;td&gt;435&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;panel&lt;/td&gt; 
       &lt;td&gt;1342&lt;/td&gt; 
       &lt;td&gt;daffainfo&lt;/td&gt; 
       &lt;td&gt;868&lt;/td&gt; 
       &lt;td&gt;cloud&lt;/td&gt; 
       &lt;td&gt;657&lt;/td&gt; 
       &lt;td&gt;high&lt;/td&gt; 
       &lt;td&gt;2446&lt;/td&gt; 
       &lt;td&gt;dns&lt;/td&gt; 
       &lt;td&gt;26&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;xss&lt;/td&gt; 
       &lt;td&gt;1257&lt;/td&gt; 
       &lt;td&gt;princechaddha&lt;/td&gt; 
       &lt;td&gt;854&lt;/td&gt; 
       &lt;td&gt;file&lt;/td&gt; 
       &lt;td&gt;435&lt;/td&gt; 
       &lt;td&gt;medium&lt;/td&gt; 
       &lt;td&gt;2379&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;wordpress&lt;/td&gt; 
       &lt;td&gt;1181&lt;/td&gt; 
       &lt;td&gt;dwisiswant0&lt;/td&gt; 
       &lt;td&gt;806&lt;/td&gt; 
       &lt;td&gt;dast&lt;/td&gt; 
       &lt;td&gt;255&lt;/td&gt; 
       &lt;td&gt;critical&lt;/td&gt; 
       &lt;td&gt;1425&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;exposure&lt;/td&gt; 
       &lt;td&gt;1107&lt;/td&gt; 
       &lt;td&gt;ritikchaddha&lt;/td&gt; 
       &lt;td&gt;649&lt;/td&gt; 
       &lt;td&gt;workflows&lt;/td&gt; 
       &lt;td&gt;202&lt;/td&gt; 
       &lt;td&gt;low&lt;/td&gt; 
       &lt;td&gt;318&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;wp-plugin&lt;/td&gt; 
       &lt;td&gt;1032&lt;/td&gt; 
       &lt;td&gt;pussycat0x&lt;/td&gt; 
       &lt;td&gt;532&lt;/td&gt; 
       &lt;td&gt;code&lt;/td&gt; 
       &lt;td&gt;198&lt;/td&gt; 
       &lt;td&gt;unknown&lt;/td&gt; 
       &lt;td&gt;56&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;osint&lt;/td&gt; 
       &lt;td&gt;841&lt;/td&gt; 
       &lt;td&gt;pikpikcu&lt;/td&gt; 
       &lt;td&gt;352&lt;/td&gt; 
       &lt;td&gt;network&lt;/td&gt; 
       &lt;td&gt;145&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;tech&lt;/td&gt; 
       &lt;td&gt;803&lt;/td&gt; 
       &lt;td&gt;pdteam&lt;/td&gt; 
       &lt;td&gt;310&lt;/td&gt; 
       &lt;td&gt;javascript&lt;/td&gt; 
       &lt;td&gt;71&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;rce&lt;/td&gt; 
       &lt;td&gt;786&lt;/td&gt; 
       &lt;td&gt;pdresearch&lt;/td&gt; 
       &lt;td&gt;269&lt;/td&gt; 
       &lt;td&gt;ssl&lt;/td&gt; 
       &lt;td&gt;38&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;lfi&lt;/td&gt; 
       &lt;td&gt;777&lt;/td&gt; 
       &lt;td&gt;iamnoooob&lt;/td&gt; 
       &lt;td&gt;257&lt;/td&gt; 
       &lt;td&gt;dns&lt;/td&gt; 
       &lt;td&gt;23&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; &lt;p&gt;&lt;strong&gt;848 directories, 11344 files&lt;/strong&gt;.&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;üìñ Documentation&lt;/h2&gt; 
&lt;p&gt;Please navigate to &lt;a href="https://nuclei.projectdiscovery.io"&gt;https://nuclei.projectdiscovery.io&lt;/a&gt; for detailed documentation to &lt;strong&gt;build&lt;/strong&gt; new or your own &lt;strong&gt;custom&lt;/strong&gt; templates. We have also added a set of templates to help you understand how things work.&lt;/p&gt; 
&lt;h2&gt;üí™ Contributions&lt;/h2&gt; 
&lt;p&gt;Nuclei-templates is powered by major contributions from the community. &lt;a href="https://github.com/projectdiscovery/nuclei-templates/issues/new?assignees=&amp;amp;labels=&amp;amp;template=submit-template.md&amp;amp;title=%5Bnuclei-template%5D+"&gt;Template contributions &lt;/a&gt;, &lt;a href="https://github.com/projectdiscovery/nuclei-templates/issues/new?assignees=&amp;amp;labels=&amp;amp;template=feature_request.md&amp;amp;title=%5BFeature%5D+"&gt;Feature Requests&lt;/a&gt; and &lt;a href="https://github.com/projectdiscovery/nuclei-templates/issues/new?assignees=&amp;amp;labels=&amp;amp;template=bug_report.md&amp;amp;title=%5BBug%5D+"&gt;Bug Reports&lt;/a&gt; are more than welcome.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/55ee65543bb9a0f9c797626c4e66d472a517d17c.svg?sanitize=true" alt="Alt" title="Repobeats analytics image" /&gt;&lt;/p&gt; 
&lt;h2&gt;üí¨ Discussion&lt;/h2&gt; 
&lt;p&gt;Have questions / doubts / ideas to discuss? Feel free to open a discussion on &lt;a href="https://github.com/projectdiscovery/nuclei-templates/discussions"&gt;Github discussions&lt;/a&gt; board.&lt;/p&gt; 
&lt;h2&gt;üë®‚Äçüíª Community&lt;/h2&gt; 
&lt;p&gt;You are welcome to join the active &lt;a href="https://discord.gg/projectdiscovery"&gt;Discord Community&lt;/a&gt; to discuss directly with project maintainers and share things with others around security and automation. Additionally, you may follow us on &lt;a href="https://twitter.com/pdnuclei"&gt;Twitter&lt;/a&gt; to be updated on all the things about Nuclei.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/projectdiscovery/nuclei-templates/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=projectdiscovery/nuclei-templates&amp;amp;max=300" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Thanks again for your contribution and keeping this community vibrant. &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github/awesome-copilot</title>
      <link>https://github.com/github/awesome-copilot</link>
      <description>&lt;p&gt;Community-contributed instructions, prompts, and configurations to help you make the most of GitHub Copilot.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ü§ñ Awesome GitHub Copilot Customizations&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://aka.ms/awesome-github-copilot"&gt;&lt;img src="https://img.shields.io/badge/Powered_by-Awesome_Copilot-blue?logo=githubcopilot" alt="Powered by Awesome Copilot" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/#contributors-"&gt;&lt;img src="https://img.shields.io/badge/all_contributors-90-orange.svg?style=flat-square" alt="All Contributors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; 
&lt;p&gt;A curated collection of prompts, instructions, and chat modes to supercharge your GitHub Copilot experience across different domains, languages, and use cases.&lt;/p&gt; 
&lt;h2&gt;üöÄ What is Awesome GitHub Copilot?&lt;/h2&gt; 
&lt;p&gt;This repository provides a comprehensive toolkit for enhancing GitHub Copilot with specialized:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;üëâ &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.agents.md"&gt;Awesome Agents&lt;/a&gt;&lt;/strong&gt; - Specialized GitHub Copilot agents that integrate with MCP servers to provide enhanced capabilities for specific workflows and tools&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üëâ &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.prompts.md"&gt;Awesome Prompts&lt;/a&gt;&lt;/strong&gt; - Focused, task-specific prompts for generating code, documentation, and solving specific problems&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üëâ &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.instructions.md"&gt;Awesome Instructions&lt;/a&gt;&lt;/strong&gt; - Comprehensive coding standards and best practices that apply to specific file patterns or entire projects&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üëâ &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.chatmodes.md"&gt;Awesome Chat Modes&lt;/a&gt;&lt;/strong&gt; - Specialized AI personas and conversation modes for different roles and contexts&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üëâ &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.collections.md"&gt;Awesome Collections&lt;/a&gt;&lt;/strong&gt; - Curated collections of related prompts, instructions, and chat modes organized around specific themes and workflows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üåü Featured Collections&lt;/h2&gt; 
&lt;p&gt;Discover our curated collections of prompts, instructions, and chat modes organized around specific themes and workflows.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Items&lt;/th&gt; 
   &lt;th&gt;Tags&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/collections/awesome-copilot.md"&gt;Awesome Copilot&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Meta prompts that help you discover and generate curated GitHub Copilot chat modes, collections, instructions, prompts, and agents.&lt;/td&gt; 
   &lt;td&gt;6 items&lt;/td&gt; 
   &lt;td&gt;github-copilot, discovery, meta, prompt-engineering, agents&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/collections/partners.md"&gt;Partners&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Custom agents that have been created by GitHub partners&lt;/td&gt; 
   &lt;td&gt;11 items&lt;/td&gt; 
   &lt;td&gt;devops, security, database, cloud, infrastructure, observability, feature-flags, cicd, migration, performance&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;MCP Server&lt;/h2&gt; 
&lt;p&gt;To make it easy to add these customizations to your editor, we have created a &lt;a href="https://developer.microsoft.com/blog/announcing-awesome-copilot-mcp-server"&gt;MCP Server&lt;/a&gt; that provides a prompt for searching and installing prompts, instructions, and chat modes directly from this repository. You'll need to have Docker installed and running to run the server.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://aka.ms/awesome-copilot/mcp/vscode"&gt;&lt;img src="https://img.shields.io/badge/VS_Code-Install-0098FF?logo=visualstudiocode&amp;amp;logoColor=white" alt="Install in VS Code" /&gt;&lt;/a&gt; &lt;a href="https://aka.ms/awesome-copilot/mcp/vscode-insiders"&gt;&lt;img src="https://img.shields.io/badge/VS_Code_Insiders-Install-24bfa5?logo=visualstudiocode&amp;amp;logoColor=white" alt="Install in VS Code Insiders" /&gt;&lt;/a&gt; &lt;a href="https://aka.ms/awesome-copilot/mcp/vs"&gt;&lt;img src="https://img.shields.io/badge/Visual_Studio-Install-C16FDE?logo=visualstudio&amp;amp;logoColor=white" alt="Install in Visual Studio" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Show MCP Server JSON configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "servers": {
    "awesome-copilot": {
      "type": "stdio",
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "ghcr.io/microsoft/mcp-dotnet-samples/awesome-copilot:latest"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;üîß How to Use&lt;/h2&gt; 
&lt;h3&gt;ü§ñ Custom Agents&lt;/h3&gt; 
&lt;p&gt;Custom agents can be used in Copilot coding agent (CCA), VS Code, and Copilot CLI (coming soon). For CCA, when assigning an issue to Copilot, select the custom agent from the provided list. In VS Code, you can activate the custom agent in the agents session, alongside built-in agents like Plan and Agent.&lt;/p&gt; 
&lt;h3&gt;üéØ Prompts&lt;/h3&gt; 
&lt;p&gt;Use the &lt;code&gt;/&lt;/code&gt; command in GitHub Copilot Chat to access prompts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-plaintext"&gt;/awesome-copilot create-readme
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;üìã Instructions&lt;/h3&gt; 
&lt;p&gt;Instructions automatically apply to files based on their patterns and provide contextual guidance for coding standards, frameworks, and best practices.&lt;/p&gt; 
&lt;h3&gt;üí≠ Chat Modes&lt;/h3&gt; 
&lt;p&gt;Activate chat modes to get specialized assistance from AI personas tailored for specific roles like architects, DBAs, or security experts.&lt;/p&gt; 
&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! Please see our &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt; for details on how to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add new prompts, instructions, or chat modes&lt;/li&gt; 
 &lt;li&gt;Improve existing content&lt;/li&gt; 
 &lt;li&gt;Report issues or suggest enhancements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Quick Contribution Guide&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Follow our file naming conventions and frontmatter requirements&lt;/li&gt; 
 &lt;li&gt;Test your contributions thoroughly&lt;/li&gt; 
 &lt;li&gt;Update the appropriate README tables&lt;/li&gt; 
 &lt;li&gt;Submit a pull request with a clear description&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;üìñ Repository Structure&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-plaintext"&gt;‚îú‚îÄ‚îÄ prompts/          # Task-specific prompts (.prompt.md)
‚îú‚îÄ‚îÄ instructions/     # Coding standards and best practices (.instructions.md)
‚îú‚îÄ‚îÄ chatmodes/        # AI personas and specialized modes (.chatmode.md)
‚îú‚îÄ‚îÄ collections/      # Curated collections of related items (.collection.yml)
‚îî‚îÄ‚îÄ scripts/          # Utility scripts for maintenance
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üåü Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Browse the Collections&lt;/strong&gt;: Check out our comprehensive lists of &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.prompts.md"&gt;prompts&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.instructions.md"&gt;instructions&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.chatmodes.md"&gt;chat modes&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.collections.md"&gt;collections&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add to your editor&lt;/strong&gt;: Click the "Install" button to install to VS Code, or copy the file contents for other editors.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Start Using&lt;/strong&gt;: Copy prompts to use with &lt;code&gt;/&lt;/code&gt; commands, let instructions enhance your coding experience, or activate chat modes for specialized assistance.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;üìÑ License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;üõ°Ô∏è Security &amp;amp; Support&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Security Issues&lt;/strong&gt;: Please see our &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/SECURITY.md"&gt;Security Policy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: Check our &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/SUPPORT.md"&gt;Support Guide&lt;/a&gt; for getting help&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;: We follow the &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/CODE_OF_CONDUCT.md"&gt;Contributor Covenant&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üéØ Why Use Awesome GitHub Copilot?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Productivity&lt;/strong&gt;: Pre-built prompts and instructions save time and provide consistent results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Best Practices&lt;/strong&gt;: Benefit from community-curated coding standards and patterns&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Specialized Assistance&lt;/strong&gt;: Access expert-level guidance through specialized chat modes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Continuous Learning&lt;/strong&gt;: Stay updated with the latest patterns and practices across technologies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Ready to supercharge your coding experience?&lt;/strong&gt; Start exploring our &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.prompts.md"&gt;prompts&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.instructions.md"&gt;instructions&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/docs/README.chatmodes.md"&gt;chat modes&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href="https://allcontributors.org/docs/en/emoji-key"&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.aaron-powell.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/434140?v=4?s=100" width="100px;" alt="Aaron Powell" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aaron Powell&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=aaronpowell" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/#maintenance-aaronpowell" title="Maintenance"&gt;üöß&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/#projectManagement-aaronpowell" title="Project Management"&gt;üìÜ&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/github/awesome-copilot/main/#promotion-aaronpowell" title="Promotion"&gt;üì£&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://mubaidr.js.org/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2222702?v=4?s=100" width="100px;" alt="Muhammad Ubaid Raza" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Muhammad Ubaid Raza&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mubaidr" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://digitarald.de/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8599?v=4?s=100" width="100px;" alt="Harald Kirschner" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Harald Kirschner&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=digitarald" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/mbianchidev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37507190?v=4?s=100" width="100px;" alt="Matteo Bianchi" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Matteo Bianchi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mbianchidev" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/AungMyoKyaw"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9404824?v=4?s=100" width="100px;" alt="Aung Myo Kyaw" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aung Myo Kyaw&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=AungMyoKyaw" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://danielscottraynsford.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7589164?v=4?s=100" width="100px;" alt="Daniel Scott-Raynsford" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniel Scott-Raynsford&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=PlagueHO" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/burkeholland"&gt;&lt;img src="https://avatars.githubusercontent.com/u/686963?v=4?s=100" width="100px;" alt="Burke Holland" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Burke Holland&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=burkeholland" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://calva.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30010?v=4?s=100" width="100px;" alt="Peter Str√∂mberg" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peter Str√∂mberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=PEZ" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.devprodlogs.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51440732?v=4?s=100" width="100px;" alt="Daniel Meppiel" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniel Meppiel&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=danielmeppiel" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://montemagno.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1676321?v=4?s=100" width="100px;" alt="James Montemagno" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;James Montemagno&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=jamesmontemagno" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/VamshiVerma"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21999324?v=4?s=100" width="100px;" alt="Vamshi Verma" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Vamshi Verma&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=VamshiVerma" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/sinedied"&gt;&lt;img src="https://avatars.githubusercontent.com/u/593151?v=4?s=100" width="100px;" alt="Yohan Lasorsa" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yohan Lasorsa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=sinedied" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/OrenMe"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5461862?v=4?s=100" width="100px;" alt="Oren Me" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Oren Me&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=OrenMe" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/mjrousos"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10077254?v=4?s=100" width="100px;" alt="Mike Rousos" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mike Rousos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mjrousos" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/guiopen"&gt;&lt;img src="https://avatars.githubusercontent.com/u/94094527?v=4?s=100" width="100px;" alt="Guilherme do Amaral Alves " /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Guilherme do Amaral Alves &lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=guiopen" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.buymeacoffee.com/troystaylor"&gt;&lt;img src="https://avatars.githubusercontent.com/u/44444967?v=4?s=100" width="100px;" alt="Troy Simeon Taylor" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Troy Simeon Taylor&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=troystaylor" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.linkedin.com/in/ambilykk/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10282550?v=4?s=100" width="100px;" alt="Ambily" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ambily&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=ambilykk" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://tgrall.github.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/541250?v=4?s=100" width="100px;" alt="Tugdual Grall" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tugdual Grall&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=tgrall" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/TianqiZhang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5326582?v=4?s=100" width="100px;" alt="Tianqi Zhang" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tianqi Zhang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=TianqiZhang" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/shubham070"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5480589?v=4?s=100" width="100px;" alt="Shubham Gaikwad" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shubham Gaikwad&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=shubham070" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/sdolgin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/576449?v=4?s=100" width="100px;" alt="Saul Dolgin" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Saul Dolgin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=sdolgin" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/nullchimp"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58362593?v=4?s=100" width="100px;" alt="NULLchimp" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;NULLchimp&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=nullchimp" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/MattVevang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20714898?v=4?s=100" width="100px;" alt="Matt Vevang" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Matt Vevang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=MattVevang" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://devkimchi.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1538528?v=4?s=100" width="100px;" alt="Justin Yoo" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Justin Yoo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=justinyoo" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://hachyderm.io/@0gis0"&gt;&lt;img src="https://avatars.githubusercontent.com/u/175379?v=4?s=100" width="100px;" alt="Gisela Torres" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Gisela Torres&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=0GiS0" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://debbie.codes/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13063165?v=4?s=100" width="100px;" alt="Debbie O'Brien" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Debbie O'Brien&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=debs-obrien" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/agreaves-ms"&gt;&lt;img src="https://avatars.githubusercontent.com/u/111466195?v=4?s=100" width="100px;" alt="Allen Greaves" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Allen Greaves&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=agreaves-ms" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/AmeliaRose802"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26167931?v=4?s=100" width="100px;" alt="Amelia Payne" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Amelia Payne&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=AmeliaRose802" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/SebastienDegodez"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2349146?v=4?s=100" width="100px;" alt="Sebastien DEGODEZ" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sebastien DEGODEZ&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=SebastienDegodez" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://graef.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19261257?v=4?s=100" width="100px;" alt="Sebastian Gr√§f" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sebastian Gr√§f&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=segraef" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://9ssi7.dev/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/76786120?v=4?s=100" width="100px;" alt="Salih ƒ∞brahimba≈ü" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Salih ƒ∞brahimba≈ü&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=9ssi7" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/inquinity"&gt;&lt;img src="https://avatars.githubusercontent.com/u/406234?v=4?s=100" width="100px;" alt="Robert Altman" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Robert Altman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=inquinity" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/pertrai1"&gt;&lt;img src="https://avatars.githubusercontent.com/u/442374?v=4?s=100" width="100px;" alt="Rob Simpson" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rob Simpson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=pertrai1" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://ricksm.it/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7207783?v=4?s=100" width="100px;" alt="Rick Smit" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rick Smit&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=ricksmit3000" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://dotneteers.net/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/28162552?v=4?s=100" width="100px;" alt="Peter Smulovics" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peter Smulovics&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=psmulovics" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/pelikhan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4175913?v=4?s=100" width="100px;" alt="Peli de Halleux" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peli de Halleux&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=pelikhan" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.paulomorgado.net/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/470455?v=4?s=100" width="100px;" alt="Paulo Morgado" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Paulo Morgado&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=paulomorgado" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://nickyt.co/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/833231?v=4?s=100" width="100px;" alt="Nick Taylor" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nick Taylor&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=nickytonline" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/mikeparker104"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12763221?v=4?s=100" width="100px;" alt="Mike Parker" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mike Parker&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mikeparker104" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/mikekistler"&gt;&lt;img src="https://avatars.githubusercontent.com/u/85643503?v=4?s=100" width="100px;" alt="Mike Kistler" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mike Kistler&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mikekistler" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://a11ysupport.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/498678?v=4?s=100" width="100px;" alt="Michael Fairchild" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Michael Fairchild&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=mfairchild365" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.linkedin.com/in/michael-volz/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/129928?v=4?s=100" width="100px;" alt="Michael A. Volz (Flynn)" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Michael A. Volz (Flynn)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=michaelvolz" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/4regab"&gt;&lt;img src="https://avatars.githubusercontent.com/u/178603515?v=4?s=100" width="100px;" alt="4regab" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;4regab&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=4regab" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/TheovanKraay"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24420698?v=4?s=100" width="100px;" alt="Theo van Kraay" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Theo van Kraay&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=TheovanKraay" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://glsauto.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/132710946?v=4?s=100" width="100px;" alt="Troy Witthoeft (glsauto)" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Troy Witthoeft (glsauto)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=twitthoeft-gls" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/iletai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26614687?v=4?s=100" width="100px;" alt="T√†i L√™" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;T√†i L√™&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=iletai" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://tinyurl.com/3p5j9mwe"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9591887?v=4?s=100" width="100px;" alt="Udaya Veeramreddygari" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Udaya Veeramreddygari&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=udayakumarreddyv" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://bio.warengonzaga.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15052701?v=4?s=100" width="100px;" alt="Waren Gonzaga" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Waren Gonzaga&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=warengonzaga" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://blog.miniasp.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/88981?v=4?s=100" width="100px;" alt="Will ‰øùÂì•" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Will ‰øùÂì•&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=doggy8088" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/yukiomoto"&gt;&lt;img src="https://avatars.githubusercontent.com/u/38450410?v=4?s=100" width="100px;" alt="Yuki Omoto" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yuki Omoto&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=yukiomoto" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/hueanmy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20430626?v=4?s=100" width="100px;" alt="Meii" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Meii&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=hueanmy" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/samqbush"&gt;&lt;img src="https://avatars.githubusercontent.com/u/74389839?v=4?s=100" width="100px;" alt="samqbush" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;samqbush&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=samqbush" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/sdanzo-hrb"&gt;&lt;img src="https://avatars.githubusercontent.com/u/136493100?v=4?s=100" width="100px;" alt="sdanzo-hrb" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;sdanzo-hrb&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=sdanzo-hrb" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/voidfnc"&gt;&lt;img src="https://avatars.githubusercontent.com/u/194750710?v=4?s=100" width="100px;" alt="voidfnc" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;voidfnc&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=voidfnc" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/webreidi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/55603905?v=4?s=100" width="100px;" alt="Wendy Breiding" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Wendy Breiding&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=webreidi" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/zooav"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12625412?v=4?s=100" width="100px;" alt="Ankur Sharma" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ankur Sharma&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=zooav" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://jianminhuang.cc/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6296280?v=4?s=100" width="100px;" alt="ÈªÉÂÅ•Êóª Vincent Huang" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ÈªÉÂÅ•Êóª Vincent Huang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=Jian-Min-Huang" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/dgh06175"&gt;&lt;img src="https://avatars.githubusercontent.com/u/77305722?v=4?s=100" width="100px;" alt="Ïù¥ÏÉÅÌòÑ" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ïù¥ÏÉÅÌòÑ&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=dgh06175" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/abdidaudpropel"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51310019?v=4?s=100" width="100px;" alt="Abdi Daud" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Abdi Daud&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=abdidaudpropel" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://www.senseof.tech/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/50712277?v=4?s=100" width="100px;" alt="Adrien Clerbois" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Adrien Clerbois&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=AClerbois" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://www.qreate.it/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1868590?v=4?s=100" width="100px;" alt="Alan Sprecacenere" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alan Sprecacenere&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=tegola" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://asilva.dev/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2493377?v=4?s=100" width="100px;" alt="Andr√© Silva" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andr√© Silva&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=askpt" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://javaetmoi.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/838318?v=4?s=100" width="100px;" alt="Antoine Rey" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Antoine Rey&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=arey" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/artemsaveliev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15679218?v=4?s=100" width="100px;" alt="Artem Saveliev" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Artem Saveliev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=artemsaveliev" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://brunoborges.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/129743?v=4?s=100" width="100px;" alt="Bruno Borges" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Bruno Borges&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=brunoborges" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.peug.net/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3845786?v=4?s=100" width="100px;" alt="Christophe Peugnet" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Christophe Peugnet&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=tossnet" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.movinglive.ca/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14792628?v=4?s=100" width="100px;" alt="Chtive" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Chtive&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=MovingLive" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/craigbekker"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1115912?v=4?s=100" width="100px;" alt="Craig Bekker" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Craig Bekker&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=craigbekker" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/breakid"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1446918?v=4?s=100" width="100px;" alt="Dan" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=breakid" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/ewega"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26189114?v=4?s=100" width="100px;" alt="Eldrick Wega" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Eldrick Wega&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=ewega" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://www.felixarjuna.dev/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/79026094?v=4?s=100" width="100px;" alt="Felix Arjuna" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Felix Arjuna&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=felixarjuna" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/feapaydin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19946639?v=4?s=100" width="100px;" alt="Furkan Enes" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Furkan Enes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=feapaydin" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://learn.microsoft.com/dotnet"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24882762?v=4?s=100" width="100px;" alt="Genevieve Warren" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Genevieve Warren&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=gewarren" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/geoder101"&gt;&lt;img src="https://avatars.githubusercontent.com/u/145904?v=4?s=100" width="100px;" alt="George Dernikos" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;George Dernikos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=geoder101" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/giomartinsdev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/125399281?v=4?s=100" width="100px;" alt="Giovanni de Almeida Martins" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Giovanni de Almeida Martins&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=giomartinsdev" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/Ioana37"&gt;&lt;img src="https://avatars.githubusercontent.com/u/69301842?v=4?s=100" width="100px;" alt="Ioana A" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ioana A&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=Ioana37" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/nohwnd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5735905?v=4?s=100" width="100px;" alt="Jakub Jare≈°" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jakub Jare≈°&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=nohwnd" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://joe-watkins.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3695795?v=4?s=100" width="100px;" alt="Joe Watkins" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Joe Watkins&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=joe-watkins" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://johnpapa.net/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1202528?v=4?s=100" width="100px;" alt="John Papa" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;John Papa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=johnpapa" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://www.sugbo4j.co.nz/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15100839?v=4?s=100" width="100px;" alt="Joseph Gonzales" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Joseph Gonzales&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=josephgonzales01" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://digio.es/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/173672918?v=4?s=100" width="100px;" alt="Jos√© Antonio Garrido" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jos√© Antonio Garrido&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=josegarridodigio" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/Ranrar"&gt;&lt;img src="https://avatars.githubusercontent.com/u/95967772?v=4?s=100" width="100px;" alt="Kim Skov Rasmussen" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kim Skov Rasmussen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=Ranrar" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/whiteken"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20211937?v=4?s=100" width="100px;" alt="Kenny White" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kenny White&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=whiteken" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/LouellaCreemers"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46204894?v=4?s=100" width="100px;" alt="Louella Creemers" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Louella Creemers&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=LouellaCreemers" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://linktr.ee/lukemurray"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24467442?v=4?s=100" width="100px;" alt="Luke Murray" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Luke Murray&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=lukemurraynz" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="http://marknoble.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3819700?v=4?s=100" width="100px;" alt="Mark Noble" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mark Noble&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=marknoble" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://soderlind.no"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1649452?v=4?s=100" width="100px;" alt="Per S√∏derlind" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Per S√∏derlind&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=soderlind" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/riqueufmg"&gt;&lt;img src="https://avatars.githubusercontent.com/u/108551585?v=4?s=100" width="100px;" alt="Henrique Nunes" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Henrique Nunes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=riqueufmg" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/jeremiah-snee-openx"&gt;&lt;img src="https://avatars.githubusercontent.com/u/113928685?v=4?s=100" width="100px;" alt="Jeremiah Snee" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jeremiah Snee&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=jeremiah-snee-openx" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center" valign="top" width="14.28%"&gt;&lt;a href="https://github.com/spectatora"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1385755?v=4?s=100" width="100px;" alt="spectatora" /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;spectatora&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/github/awesome-copilot/commits?author=spectatora" title="Code"&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tfoot&gt; 
  &lt;tr&gt; 
   &lt;td align="center" size="13px" colspan="7"&gt; &lt;img src="https://raw.githubusercontent.com/all-contributors/all-contributors-cli/1b8533af435da9854653492b1327a23a4dbd0a10/assets/logo-small.svg?sanitize=true" /&gt; &lt;a href="https://all-contributors.js.org/docs/en/bot/usage"&gt;Add your contributions&lt;/a&gt;  &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tfoot&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href="https://github.com/all-contributors/all-contributors"&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;h2&gt;üìö Additional Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/copilot/copilot-customization"&gt;VS Code Copilot Customization Documentation&lt;/a&gt; - Official Microsoft documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/copilot/chat/copilot-chat"&gt;GitHub Copilot Chat Documentation&lt;/a&gt; - Complete chat feature guide&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/copilot/chat/chat-modes"&gt;Custom Chat Modes&lt;/a&gt; - Advanced chat configuration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/getstarted/settings"&gt;VS Code Settings&lt;/a&gt; - General VS Code configuration guide&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚Ñ¢Ô∏è Trademarks&lt;/h2&gt; 
&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href="https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general"&gt;Microsoft's Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jgraph/drawio-desktop</title>
      <link>https://github.com/jgraph/drawio-desktop</link>
      <description>&lt;p&gt;Official electron build of draw.io&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;drawio-desktop&lt;/strong&gt; is a diagramming desktop app based on &lt;a href="https://electronjs.org/"&gt;Electron&lt;/a&gt; that wraps the &lt;a href="https://github.com/jgraph/drawio"&gt;core draw.io editor&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Download built binaries from the &lt;a href="https://github.com/jgraph/drawio-desktop/releases"&gt;releases section&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Can I use this app for free?&lt;/strong&gt; Yes, under the apache 2.0 license. If you don't change the code and accept it is provided "as-is", you can use it for any purpose.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;draw.io Desktop is designed to be completely isolated from the Internet, apart from the update process. This checks github.com at startup for a newer version and downloads it from an AWS S3 bucket owned by Github. All JavaScript files are self-contained, the Content Security Policy forbids running remotely loaded JavaScript.&lt;/p&gt; 
&lt;p&gt;No diagram data is ever sent externally, nor do we send any analytics about app usage externally. There is a Content Security Policy in place on the web part of the interface to ensure external transmission cannot happen, even by accident.&lt;/p&gt; 
&lt;p&gt;Security and isolating the app are the primarily objectives of draw.io desktop. If you ask for anything that involves external connections enabled in the app by default, the answer will be no.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Support is provided on a reasonable business constraints basis, but without anything contractually binding. All support is provided via this repo. There is no private ticketing support for non-paying users.&lt;/p&gt; 
&lt;p&gt;Purchasing draw.io for Confluence or Jira does not entitle you to commercial support for draw.io desktop.&lt;/p&gt; 
&lt;h2&gt;Developing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;draw.io&lt;/strong&gt; is a git submodule of &lt;strong&gt;drawio-desktop&lt;/strong&gt;. To get both you need to clone recursively:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/jgraph/drawio-desktop.git&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To run this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; (in the root directory of this repo)&lt;/li&gt; 
 &lt;li&gt;[internal use only] export DRAWIO_ENV=dev if you want to develop/debug in dev mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm start&lt;/code&gt; &lt;em&gt;in the root directory of this repo&lt;/em&gt; runs the app. For debugging, use &lt;code&gt;npm start --enable-logging&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note: If a symlink is used to refer to drawio repo (instead of the submodule), then symlink the &lt;code&gt;node_modules&lt;/code&gt; directory inside &lt;code&gt;drawio/src/main/webapp&lt;/code&gt; also.&lt;/p&gt; 
&lt;p&gt;To release:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Update the draw.io sub-module and push the change. Add version tag before pushing to origin.&lt;/li&gt; 
 &lt;li&gt;Wait for the builds to complete (&lt;a href="https://travis-ci.org/jgraph/drawio-desktop"&gt;https://travis-ci.org/jgraph/drawio-desktop&lt;/a&gt; and &lt;a href="https://ci.appveyor.com/project/davidjgraph/drawio-desktop"&gt;https://ci.appveyor.com/project/davidjgraph/drawio-desktop&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Go to &lt;a href="https://github.com/jgraph/drawio-desktop/releases"&gt;https://github.com/jgraph/drawio-desktop/releases&lt;/a&gt;, edit the preview release.&lt;/li&gt; 
 &lt;li&gt;Download the windows exe and windows portable, sign them using &lt;code&gt;signtool sign /a /tr http://rfc3161timestamp.globalsign.com/advanced /td SHA256 c:/path/to/your/file.exe&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Re-upload signed file as &lt;code&gt;draw.io-windows-installer-x.y.z.exe&lt;/code&gt; and &lt;code&gt;draw.io-windows-no-installer-x.y.z.exe&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Add release notes&lt;/li&gt; 
 &lt;li&gt;Publish release&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: In Windows release, when using both x64 and is32 as arch, the result is one big file with both archs. This is why we split them.&lt;/p&gt; 
&lt;p&gt;Local Storage and Session Storage is stored in the AppData folder:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS: &lt;code&gt;~/Library/Application Support/draw.io&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Windows: &lt;code&gt;C:\Users\&amp;lt;USER-NAME&amp;gt;\AppData\Roaming\draw.io\&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Not open-contribution&lt;/h2&gt; 
&lt;p&gt;draw.io is closed to contributions (unless a maintainer permits it, which is extremely rare).&lt;/p&gt; 
&lt;p&gt;The level of complexity of this project means that even simple changes can break a &lt;em&gt;lot&lt;/em&gt; of other moving parts. The amount of testing required is far more than it first seems. If we were to receive a PR, we'd have to basically throw it away and write it how we want it to be implemented.&lt;/p&gt; 
&lt;p&gt;We are grateful for community involvement, bug reports, &amp;amp; feature requests. We do not wish to come off as anything but welcoming, however, we've made the decision to keep this project closed to contributions for the long term viability of the project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebGoat/WebGoat</title>
      <link>https://github.com/WebGoat/WebGoat</link>
      <description>&lt;p&gt;WebGoat is a deliberately insecure application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebGoat: A deliberately insecure Web Application&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/WebGoat/WebGoat/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/WebGoat/WebGoat/actions/workflows/build.yml/badge.svg?branch=develop" alt="Build" /&gt;&lt;/a&gt; &lt;a href="https://jdk.java.net/"&gt;&lt;img src="https://img.shields.io/badge/java%20jdk-25-green.svg?sanitize=true" alt="java-jdk" /&gt;&lt;/a&gt; &lt;a href="https://owasp.org/projects/"&gt;&lt;img src="https://img.shields.io/badge/OWASP-Lab%20project-f7b73c.svg?sanitize=true" alt="OWASP Labs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/WebGoat/WebGoat/releases/latest"&gt;&lt;img src="https://img.shields.io/github/release/WebGoat/WebGoat.svg?sanitize=true" alt="GitHub release" /&gt;&lt;/a&gt; &lt;a href="https://gitter.im/OWASPWebGoat/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge"&gt;&lt;img src="https://badges.gitter.im/OWASPWebGoat/community.svg?sanitize=true" alt="Gitter" /&gt;&lt;/a&gt; &lt;a href="https://github.com/WebGoat/WebGoat/discussions"&gt;&lt;img src="https://img.shields.io/github/discussions/WebGoat/WebGoat" alt="Discussions" /&gt;&lt;/a&gt; &lt;a href="https://conventionalcommits.org"&gt;&lt;img src="https://img.shields.io/badge/Conventional%20Commits-1.0.0-%23FE5196?logo=conventionalcommits&amp;amp;logoColor=white" alt="Conventional Commits" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;WebGoat is a deliberately insecure web application maintained by &lt;a href="http://www.owasp.org/"&gt;OWASP&lt;/a&gt; designed to teach web application security lessons.&lt;/p&gt; 
&lt;p&gt;This program is a demonstration of common server-side application flaws. The exercises are intended to be used by people to learn about application security and penetration testing techniques.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WARNING 1:&lt;/strong&gt; &lt;em&gt;While running this program your machine will be extremely vulnerable to attack. You should disconnect from the Internet while using this program.&lt;/em&gt; WebGoat's default configuration binds to localhost to minimize the exposure.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WARNING 2:&lt;/strong&gt; &lt;em&gt;This program is for educational purposes only. If you attempt these techniques without authorization, you are very likely to get caught. If you are caught engaging in unauthorized hacking, most companies will fire you. Claiming that you were doing security research will not work as that is the first thing that all hackers claim.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/WebGoat/WebGoat/main/docs/images/webgoat.png" alt="WebGoat" /&gt;&lt;/p&gt; 
&lt;h1&gt;Installation instructions:&lt;/h1&gt; 
&lt;p&gt;For more details check &lt;a href="https://raw.githubusercontent.com/WebGoat/WebGoat/main/CONTRIBUTING.md"&gt;the Contribution guide&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;1. Run using Docker&lt;/h2&gt; 
&lt;p&gt;Already have a browser and ZAP and/or Burp installed on your machine in this case you can run the WebGoat image directly using Docker.&lt;/p&gt; 
&lt;p&gt;Every release is also published on &lt;a href="https://hub.docker.com/r/webgoat/webgoat"&gt;DockerHub&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker run -it -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 webgoat/webgoat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For some lessons you need the container run in the same timezone. For this you can set the TZ environment variable. E.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker run -it -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 -e TZ=America/Boise webgoat/webgoat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to use OWASP ZAP or another proxy, you can no longer use 127.0.0.1 or localhost. but you can use custom host entries. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;127.0.0.1 www.webgoat.local www.webwolf.local
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can run the container with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker run -it -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 -e WEBGOAT_HOST=www.webgoat.local -e WEBWOLF_HOST=www.webwolf.local -e TZ=America/Boise webgoat/webgoat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then visit &lt;a href="http://www.webgoat.local:8080/WebGoat/"&gt;http://www.webgoat.local:8080/WebGoat/&lt;/a&gt; and &lt;a href="http://www.webwolf.local:9090/WebWolf/"&gt;http://www.webwolf.local:9090/WebWolf/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;2. Run using Docker with complete Linux Desktop&lt;/h2&gt; 
&lt;p&gt;Instead of installing tools locally we have a complete Docker image based on running a desktop in your browser. This way you only have to run a Docker image which will give you the best user experience.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker run -p 127.0.0.1:3000:3000 webgoat/webgoat-desktop
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3. Standalone&lt;/h2&gt; 
&lt;p&gt;Download the latest WebGoat release from &lt;a href="https://github.com/WebGoat/WebGoat/releases"&gt;https://github.com/WebGoat/WebGoat/releases&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;export TZ=Europe/Amsterdam # or your timezone
java -Dfile.encoding=UTF-8 -jar webgoat-2023.8.jar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Click the link in the log to start WebGoat.&lt;/p&gt; 
&lt;h3&gt;3.1 Running on a different port&lt;/h3&gt; 
&lt;p&gt;If for some reason you want to run WebGoat on a different port, you can do so by adding the following parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;java -jar webgoat-2023.8.jar --webgoat.port=8001 --webwolf.port=8002
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a full overview of all the parameters you can use, please check the [WebGoat properties file](webgoat-container/src/main/resources/application-{webgoat, webwolf}.properties).&lt;/p&gt; 
&lt;h2&gt;4. Run from the sources&lt;/h2&gt; 
&lt;h3&gt;Prerequisites:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Java 25&lt;/li&gt; 
 &lt;li&gt;Your favorite IDE&lt;/li&gt; 
 &lt;li&gt;Git, or Git support in your IDE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Open a command shell/window:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Shell"&gt;git clone git@github.com:WebGoat/WebGoat.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let's start by compiling the project.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Shell"&gt;cd WebGoat
git checkout &amp;lt;&amp;lt;branch_name&amp;gt;&amp;gt;
# On Linux/Mac:
./mvnw clean install

# On Windows:
./mvnw.cmd clean install

# Using docker or podman, you can than build the container locally
docker build -f Dockerfile . -t webgoat/webgoat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we are ready to run the project. WebGoat is using Spring Boot.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Shell"&gt;# On Linux/Mac:
./mvnw spring-boot:run
# On Windows:
./mvnw.cmd spring-boot:run

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... you should be running WebGoat on &lt;a href="http://localhost:8080/WebGoat"&gt;http://localhost:8080/WebGoat&lt;/a&gt; momentarily.&lt;/p&gt; 
&lt;p&gt;Note: The above link will redirect you to login page if you are not logged in. LogIn/Create account to proceed.&lt;/p&gt; 
&lt;p&gt;To change the IP address add the following variable to the &lt;code&gt;WebGoat/webgoat-container/src/main/resources/application.properties&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;server.address=x.x.x.x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;4. Run with custom menu&lt;/h2&gt; 
&lt;p&gt;For specialist only. There is a way to set up WebGoat with a personalized menu. You can leave out some menu categories or individual lessons by setting certain environment variables.&lt;/p&gt; 
&lt;p&gt;For instance running as a jar on a Linux/macOS it will look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Shell"&gt;export TZ=Europe/Amsterdam # or your timezone
export EXCLUDE_CATEGORIES="CLIENT_SIDE,GENERAL,CHALLENGE"
export EXCLUDE_LESSONS="SqlInjectionAdvanced,SqlInjectionMitigations"
java -jar target/webgoat-2023.8-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or in a docker run it would (once this version is pushed into docker hub) look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Shell"&gt;docker run -d -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 -e EXCLUDE_CATEGORIES="CLIENT_SIDE,GENERAL,CHALLENGE" -e EXCLUDE_LESSONS="SqlInjectionAdvanced,SqlInjectionMitigations" webgoat/webgoat
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>HumanSignal/label-studio</title>
      <link>https://github.com/HumanSignal/label-studio</link>
      <description>&lt;p&gt;Label Studio is a multi-type data labeling and annotation tool with standardized output format&lt;/p&gt;&lt;hr&gt;&lt;img src="https://user-images.githubusercontent.com/12534576/192582340-4c9e4401-1fe6-4dbb-95bb-fdbba5493f61.png" /&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/github/license/heartexlabs/label-studio?logo=heartex" alt="GitHub" /&gt; &lt;img src="https://github.com/HumanSignal/label-studio/workflows/label-studio:build/badge.svg?sanitize=true" alt="label-studio:build" /&gt; &lt;img src="https://img.shields.io/github/v/release/heartexlabs/label-studio?include_prereleases" alt="GitHub release" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://labelstud.io/"&gt;Website&lt;/a&gt; ‚Ä¢ &lt;a href="https://labelstud.io/guide/"&gt;Docs&lt;/a&gt; ‚Ä¢ &lt;a href="https://slack.labelstud.io/?source=github-1"&gt;Join Slack Community &lt;img src="https://app.heartex.ai/docs/images/slack-mini.png" width="18px" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Label Studio?&lt;/h2&gt; 
&lt;!-- &lt;a href="https://labelstud.io/blog/release-130.html"&gt;&lt;img src="https://github.com/HumanSignal/label-studio/raw/master/docs/themes/htx/source/images/release-130/LS-Hits-v1.3.png" align="right" /&gt;&lt;/a&gt; --&gt; 
&lt;p&gt;Label Studio is an open source data labeling tool. It lets you label data types like audio, text, images, videos, and time series with a simple and straightforward UI and export to various model formats. It can be used to prepare raw data or improve existing training data to get more accurate ML models.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#try-out-label-studio"&gt;Try out Label Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#what-you-get-from-label-studio"&gt;What you get from Label Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#included-templates-for-labeling-data-in-label-studio"&gt;Included templates for labeling data in Label Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#set-up-machine-learning-models-with-Label-Studio"&gt;Set up machine learning models with Label Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#integrate-label-studio-with-your-existing-tools"&gt;Integrate Label Studio with your existing tools&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/images/annotation_examples.gif" alt="Gif of Label Studio annotating different types of data" /&gt;&lt;/p&gt; 
&lt;p&gt;Have a custom dataset? You can customize Label Studio to fit your needs. Read an &lt;a href="https://towardsdatascience.com/introducing-label-studio-a-swiss-army-knife-of-data-labeling-140c1be92881"&gt;introductory blog post&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Try out Label Studio&lt;/h2&gt; 
&lt;p&gt;Install Label Studio locally or deploy it in a cloud instance. &lt;a href="https://humansignal.com/platform/starter-cloud/"&gt;Or sign up for a free trial of our Starter Cloud edition!&lt;/a&gt; You can learn more about what each edition offers &lt;a href="https://labelstud.io/guide/label_studio_compare"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-locally-with-docker"&gt;Install locally with Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#run-with-docker-compose"&gt;Run with Docker Compose (Label Studio + Nginx + PostgreSQL)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-locally-with-pip"&gt;Install locally with pip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-locally-with-poetry"&gt;Install locally with poetry&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-locally-with-anaconda"&gt;Install locally with Anaconda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-for-local-development"&gt;Install for local development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#deploy-in-a-cloud-instance"&gt;Deploy in a cloud instance&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install locally with Docker&lt;/h3&gt; 
&lt;p&gt;Official Label Studio docker image is &lt;a href="https://hub.docker.com/r/heartexlabs/label-studio"&gt;here&lt;/a&gt; and it can be downloaded with &lt;code&gt;docker pull&lt;/code&gt;. Run Label Studio in a Docker container and access it at &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull heartexlabs/label-studio:latest
docker run -it -p 8080:8080 -v $(pwd)/mydata:/label-studio/data heartexlabs/label-studio:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find all the generated assets, including SQLite3 database storage &lt;code&gt;label_studio.sqlite3&lt;/code&gt; and uploaded files, in the &lt;code&gt;./mydata&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h4&gt;Override default Docker install&lt;/h4&gt; 
&lt;p&gt;You can override the default launch command by appending the new arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -it -p 8080:8080 -v $(pwd)/mydata:/label-studio/data heartexlabs/label-studio:latest label-studio --log-level DEBUG
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Build a local image with Docker&lt;/h4&gt; 
&lt;p&gt;If you want to build a local image, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker build -t heartexlabs/label-studio:latest .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run with Docker Compose&lt;/h3&gt; 
&lt;p&gt;Docker Compose script provides production-ready stack consisting of the following components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Label Studio&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.nginx.com/"&gt;Nginx&lt;/a&gt; - proxy web server used to load various static data, including uploaded audio, images, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; - production-ready database that replaces less performant SQLite3.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To start using the app from &lt;code&gt;http://localhost&lt;/code&gt; run this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run with Docker Compose + MinIO&lt;/h3&gt; 
&lt;p&gt;You can also run it with an additional MinIO server for local S3 storage. This is particularly useful when you want to test the behavior with S3 storage on your local system. To start Label Studio in this way, you need to run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Add sudo on Linux if you are not a member of the docker group
docker compose -f docker-compose.yml -f docker-compose.minio.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not have a static IP address, you must create an entry in your hosts file so that both Label Studio and your browser can access the MinIO server. For more detailed instructions, please refer to &lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/docs/source/guide/storedata.md"&gt;our guide on storing data&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Install locally with pip&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Requires Python &amp;gt;=3.8
pip install label-studio

# Start the server at http://localhost:8080
label-studio
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install locally with poetry&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;### install poetry
pip install poetry

### set poetry environment
poetry new my-label-studio
cd my-label-studio
poetry add label-studio

### activate poetry environment
poetry shell

### Start the server at http://localhost:8080
label-studio
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install locally with Anaconda&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;conda create --name label-studio
conda activate label-studio
conda install psycopg2
pip install label-studio
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install for local development&lt;/h3&gt; 
&lt;p&gt;You can run the latest Label Studio version locally without installing the package from pypi.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install all package dependencies
pip install poetry
poetry install
# Run database migrations
python label_studio/manage.py migrate
python label_studio/manage.py collectstatic
# Start the server in development mode at http://localhost:8080
python label_studio/manage.py runserver
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Deploy in a cloud instance&lt;/h3&gt; 
&lt;p&gt;You can deploy Label Studio with one click in Heroku, Microsoft Azure, or Google Cloud Platform:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.heroku.com/deploy?template=https://github.com/HumanSignal/label-studio/tree/heroku-persistent-pg"&gt;&lt;img src="https://www.herokucdn.com/deploy/button.svg?sanitize=true" alt="Deploy" height="30px" /&gt;&lt;/a&gt; &lt;a href="https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fhumansignal%2Flabel-studio%2Fdevelop%2Fazuredeploy.json"&gt;&lt;img src="https://aka.ms/deploytoazurebutton" height="30px" /&gt;&lt;/a&gt; &lt;a href="https://deploy.cloud.run"&gt;&lt;img src="https://deploy.cloud.run/button.svg?sanitize=true" height="30px" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Apply frontend changes&lt;/h4&gt; 
&lt;p&gt;For information about updating the frontend, see &lt;a href="https://github.com/HumanSignal/label-studio/raw/develop/web/README.md#installation-instructions"&gt;label-studio/web/README.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Install dependencies on Windows&lt;/h4&gt; 
&lt;p&gt;To run Label Studio on Windows, download and install the following wheel packages from &lt;a href="https://www.lfd.uci.edu/~gohlke/pythonlibs"&gt;Gohlke builds&lt;/a&gt; to ensure you're using the correct version of Python:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml"&gt;lxml&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Upgrade pip 
pip install -U pip

# If you're running Win64 with Python 3.8, install the packages downloaded from Gohlke:
pip install lxml‚Äë4.5.0‚Äëcp38‚Äëcp38‚Äëwin_amd64.whl

# Install label studio
pip install label-studio
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run test suite&lt;/h3&gt; 
&lt;p&gt;To add the tests' dependencies to your local install:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry install --with test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, it is possible to run the unit tests from a Docker container in which the test dependencies are installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make build-testing-image
make docker-testing-shell
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In either case, to run the unit tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd label_studio

# sqlite3
DJANGO_DB=sqlite DJANGO_SETTINGS_MODULE=core.settings.label_studio pytest -vv

# postgres (assumes default postgres user,db,pass. Will not work in Docker
# testing container without additional configuration)
DJANGO_DB=default DJANGO_SETTINGS_MODULE=core.settings.label_studio pytest -vv
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;What you get from Label Studio&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/525ad5ff-6904-4398-b507-7e8954268d69"&gt;https://github.com/user-attachments/assets/525ad5ff-6904-4398-b507-7e8954268d69&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-user labeling&lt;/strong&gt; sign up and login, when you create an annotation it's tied to your account.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multiple projects&lt;/strong&gt; to work on all your datasets in one instance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Streamlined design&lt;/strong&gt; helps you focus on your task, not how to use the software.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Configurable label formats&lt;/strong&gt; let you customize the visual interface to meet your specific labeling needs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support for multiple data types&lt;/strong&gt; including images, audio, text, HTML, time-series, and video.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Import from files or from cloud storage&lt;/strong&gt; in Amazon AWS S3, Google Cloud Storage, or JSON, CSV, TSV, RAR, and ZIP archives.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Integration with machine learning models&lt;/strong&gt; so that you can visualize and compare predictions from different models and perform pre-labeling.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Embed it in your data pipeline&lt;/strong&gt; REST API makes it easy to make it a part of your pipeline&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Included templates for labeling data in Label Studio&lt;/h2&gt; 
&lt;p&gt;Label Studio includes a variety of templates to help you label your data, or you can create your own using specifically designed configuration language. The most common templates and use cases for labeling include the following cases:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/images/template-types.png" /&gt; 
&lt;h2&gt;Set up machine learning models with Label Studio&lt;/h2&gt; 
&lt;p&gt;Connect your favorite machine learning model using the Label Studio Machine Learning SDK. Follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Start your own machine learning backend server. See &lt;a href="https://github.com/HumanSignal/label-studio-ml-backend"&gt;more detailed instructions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Connect Label Studio to the server on the model page found in project settings.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This lets you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Pre-label&lt;/strong&gt; your data using model predictions.&lt;/li&gt; 
 &lt;li&gt;Do &lt;strong&gt;online learning&lt;/strong&gt; and retrain your model while new annotations are being created.&lt;/li&gt; 
 &lt;li&gt;Do &lt;strong&gt;active learning&lt;/strong&gt; by labeling only the most complex examples in your data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integrate Label Studio with your existing tools&lt;/h2&gt; 
&lt;p&gt;You can use Label Studio as an independent part of your machine learning workflow or integrate the frontend or backend into your existing tools.&lt;/p&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Project&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;label-studio&lt;/td&gt; 
   &lt;td&gt;Server, distributed as a pip package&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/web/libs/editor/"&gt;Frontend library&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The Label Studio frontend library. This uses React to build the UI and mobx-state-tree for state management.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/web/libs/datamanager/"&gt;Data Manager library&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A library for the Data Manager, our data exploration tool.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/HumanSignal/label-studio-sdk/tree/master/src/label_studio_sdk/converter"&gt;label-studio-converter&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Encode labels in the format of your favorite machine learning library&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/HumanSignal/label-studio-transformers"&gt;label-studio-transformers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Transformers library connected and configured for use with Label Studio&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;Include a citation for Label Studio in the &lt;strong&gt;References&lt;/strong&gt; section of your articles:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-tex"&gt;@misc{Label Studio,
  title={{Label Studio}: Data labeling software},
  url={https://github.com/HumanSignal/label-studio},
  note={Open source software available from https://github.com/HumanSignal/label-studio},
  author={
    Maxim Tkachenko and
    Mikhail Malyuk and
    Andrey Holmanyuk and
    Nikolai Liubimov},
  year={2020-2025},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This software is licensed under the &lt;a href="https://raw.githubusercontent.com/HumanSignal/label-studio/develop/LICENSE"&gt;Apache 2.0 LICENSE&lt;/a&gt; ¬© &lt;a href="https://www.heartex.com/"&gt;Heartex&lt;/a&gt;. 2020-2025&lt;/p&gt; 
&lt;img src="https://user-images.githubusercontent.com/12534576/192582529-cf628f58-abc5-479b-a0d4-8a3542a4b35e.png" title="Hey everyone!" width="180" /&gt;</description>
    </item>
    
    <item>
      <title>qeeqbox/social-analyzer</title>
      <link>https://github.com/qeeqbox/social-analyzer</link>
      <description>&lt;p&gt;API, CLI, and Web App for analyzing and finding a person's profile in 1000 social media \ websites&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/socialanalyzerlogo_.png" /&gt;&lt;/p&gt; 
&lt;p&gt;Social Analyzer - API, CLI, and Web App for analyzing &amp;amp; finding a person's profile across +1000 social media \ websites. It includes different analysis and detection modules, and you can choose which modules to use during the investigation process.&lt;/p&gt; 
&lt;p&gt;The detection modules utilize a rating mechanism based on different detection techniques, which produces a rate value that starts from 0 to 100 (No-Maybe-Yes). This module is intended to have fewer false positives.&lt;/p&gt; 
&lt;p&gt;The analysis and public extracted information from this OSINT tool could help investigate profiles related to suspicious or malicious activities such as cyberbullying, cyber grooming, cyberstalking, and spreading misinformation.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;This project is currently used by some law enforcement agencies in countries where resources are limited - The detection database is different than the one shared here..&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;So¬∑cial Me¬∑di¬∑a&lt;/h2&gt; 
&lt;p&gt;Websites and applications that enable users to create and share content or to participate in social networking - Oxford Dictionary&lt;/p&gt; 
&lt;h2&gt;Structure&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/structure.png" /&gt; 
&lt;h2&gt;APP (Preferred!)&lt;/h2&gt; 
&lt;p&gt;Standard localhost WEB APP url: &lt;a href="http://0.0.0.0:9005/app.html"&gt;http://0.0.0.0:9005/app.html&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/intro_fast.gif" style="max-width:768px" /&gt; 
&lt;h2&gt;CLI&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/cli.gif" style="max-width:768px" /&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;String &amp;amp; name analysis (Permutations and Combinations)&lt;/li&gt; 
 &lt;li&gt;Find a profile using multiple techniques (HTTPS library &amp;amp; Webdriver)&lt;/li&gt; 
 &lt;li&gt;Multi profile search (Used for correlation - any combination separated with "," )&lt;/li&gt; 
 &lt;li&gt;Multilayers detections (OCR, normal, advanced &amp;amp; special)&lt;/li&gt; 
 &lt;li&gt;Visualized profile information using Ixora (Metadata &amp;amp; Patterns)&lt;/li&gt; 
 &lt;li&gt;Metadata &amp;amp; Patterns extraction (Added from Qeeqbox OSINT project)&lt;/li&gt; 
 &lt;li&gt;Force-directed Graph for Metadata (Needs ExtractPatterns)&lt;/li&gt; 
 &lt;li&gt;Search by top ranking or by country (Alexa Ranking)&lt;/li&gt; 
 &lt;li&gt;Search by type (adult, music, etc.. - automated websites stats)&lt;/li&gt; 
 &lt;li&gt;Profiles stats and static info (Category country)&lt;/li&gt; 
 &lt;li&gt;Cross Metadata stats (Added from Qeeqbox OSINT project)&lt;/li&gt; 
 &lt;li&gt;Auto-flirtation to unnecessary output (Enable javascript etc..)&lt;/li&gt; 
 &lt;li&gt;Search engine lookup (Google API - optional)&lt;/li&gt; 
 &lt;li&gt;Custom search queries (Google API &amp;amp; DuckDuckGo API - optional)&lt;/li&gt; 
 &lt;li&gt;Profile screenshot, title, info, and website description&lt;/li&gt; 
 &lt;li&gt;Find name origins, name similarity &amp;amp; common words by language&lt;/li&gt; 
 &lt;li&gt;Find possible profile\person age (Limited analysis)&lt;/li&gt; 
 &lt;li&gt;Custom user-agent, proxy, timeout &amp;amp; implicit wait&lt;/li&gt; 
 &lt;li&gt;Python CLI &amp;amp; NodeJS CLI (limited to FindUserProfilesFast option)&lt;/li&gt; 
 &lt;li&gt;Screenshots of detected profile (The latest version of Chrome must be installed)&lt;/li&gt; 
 &lt;li&gt;Grid option for faster checking (limited to docker-compose)&lt;/li&gt; 
 &lt;li&gt;Dump logs to folder or terminal (prettified)&lt;/li&gt; 
 &lt;li&gt;Adjust finding\getting profile workers (default 15)&lt;/li&gt; 
 &lt;li&gt;Re-checking option for failed profiles&lt;/li&gt; 
 &lt;li&gt;Filter profiles by good, maybe, and bad&lt;/li&gt; 
 &lt;li&gt;Save the analysis as a JSON file&lt;/li&gt; 
 &lt;li&gt;Simplified web interface and CLI&lt;/li&gt; 
 &lt;li&gt;And, more!!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Special Detections&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Facebook (Phone number, name, or profile name)&lt;/li&gt; 
 &lt;li&gt;Gmail (&lt;a href="mailto:example@gmail.com"&gt;example@gmail.com&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Google (&lt;a href="mailto:example@example.com"&gt;example@example.com&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install &amp;amp; Run&lt;/h2&gt; 
&lt;h3&gt;Linux (As Node WebApp)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get update
#Depedning on your Linux distro, you may or may not need these 2 lines
sudo DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
sudo add-apt-repository ppa:mozillateam/ppa -y
sudo apt-get install -y firefox-esr tesseract-ocr git nodejs npm
git clone https://github.com/qeeqbox/social-analyzer.git
cd social-analyzer
npm update
npm install
npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux (As Node CLI)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get update
#Depedning on your Linux distro, you may or may not need these 2 lines
sudo DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
sudo add-apt-repository ppa:mozillateam/ppa -y
sudo apt-get install -y firefox-esr tesseract-ocr git nodejs npm
git clone https://github.com/qeeqbox/social-analyzer.git
cd social-analyzer
npm install
nodejs app.js --username "johndoe"
#or
nodejs app.js --username "johndoe,janedoe" --metadata
#or
nodejs app.js --username "johndoe,janedoe" --metadata --top 100
#or
nodejs app.js --username "johndoe" --type "adult"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux (As python package)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get update
sudo apt-get install python3 python3-pip
pip3 install social-analyzer
python3 -m social-analyzer --username "johndoe"
#or
python3 -m social-analyzer --username "johndoe" --metadata
#or
python3 -m social-analyzer --username "johndoe" --metadata --top 100
#or
python3 -m social-analyzer --username "johndoe" --type "adult"
#or
python3 -m social-analyzer --username "johndoe" --websites "car" --logs --screenshots
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux (As python script)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get update
sudo apt-get install git python3 python3-pip
git clone https://github.com/qeeqbox/social-analyzer
cd social-analyzer
pip3 install -r requirements.txt
python3 app.py --username "janedoe"
#or
python3 app.py --username "johndoe" --metadata
#or
python3 app.py --username "johndoe" --metadata --top 100
#or
python3 app.py --username "johndoe" --type "adult"
#or
python3 app.py --username "johndoe" --websites "car" --logs --screenshots
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Importing as object (python)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;
#E.g. #1
from importlib import import_module
SocialAnalyzer = import_module("social-analyzer").SocialAnalyzer()
results = SocialAnalyzer.run_as_object(username="johndoe",silent=True)
print(results)

#E.g. #2
from importlib import import_module
SocialAnalyzer = import_module("social-analyzer").SocialAnalyzer()
results = SocialAnalyzer.run_as_object(username="johndoe,janedoe",silent=True,output="json",filter="good",metadata=False,timeout=10, profiles="detected")
print(results)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux, Windows, MacOS, Raspberry pi..&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;check this &lt;a href="https://github.com/qeeqbox/social-analyzer/wiki/install"&gt;wiki&lt;/a&gt; for all possible installation methods&lt;/li&gt; 
 &lt;li&gt;check this &lt;a href="https://github.com/qeeqbox/social-analyzer/wiki/integration"&gt;wiki&lt;/a&gt; for integrating social-analyzer with your OSINT tools, feeds, etc...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;social-analyzer --h&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Required Arguments:
  --username   E.g. johndoe, john_doe or johndoe9999

Optional Arguments:
  --websites    A website or websites separated by space E.g. youtube, tiktokor tumblr
  --mode        Analysis mode E.g.fast -&amp;gt; FindUserProfilesFast, slow -&amp;gt; FindUserProfilesSlow or special -&amp;gt; FindUserProfilesSpecial
  --output      Show the output in the following format: json -&amp;gt; json outputfor integration or pretty -&amp;gt; prettify the output
  --options     Show the following when a profile is found: link, rate, titleor text
  --method      find -&amp;gt; show detected profiles, get -&amp;gt; show all profiles regardless detected or not, all -&amp;gt; combine find &amp;amp; get
  --filter      Filter detected profiles by good, maybe or bad, you can do combine them with comma (good,bad) or use all
  --profiles    Filter profiles by detected, unknown or failed, you can do combine them with comma (detected,failed) or use all
  --countries   select websites by country or countries separated by space as: us br ru
  --type        Select websites by type (Adult, Music etc)
  --top         select top websites as 10, 50 etc...[--websites is not needed]
  --extract     Extract profiles, urls &amp;amp; patterns if possible
  --metadata    Extract metadata if possible (pypi QeeqBox OSINT)
  --trim        Trim long strings
  --gui         Reserved for a gui (Not implemented)
  --cli         Reserved for a cli (Not needed)

Listing websites &amp;amp; detections:
  --list        List all available websites

Setting:
  --headers     Headers as dict
  --logs_dir    Change logs directory
  --timeout     Change timeout between each request
  --silent      Disable output to screen
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Open Shell&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https://github.com/qeeqbox/social-analyzer&amp;amp;tutorial=README.md"&gt;&lt;img src="https://img.shields.io/static/v1?label=%3E_&amp;amp;message=Open%20in%20Cloud%20Shell&amp;amp;color=3267d6&amp;amp;style=flat-square" alt="Open in Cloud Shell" /&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/qeeqbox/social-analyzer"&gt;&lt;img src="https://img.shields.io/static/v1?label=%3E_&amp;amp;message=Open%20in%20repl.it%20Shell&amp;amp;color=606c74&amp;amp;style=flat-square" alt="Open in repl.it Shell" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;DuckDuckGo API, Google API, NodeJS, bootstrap, selectize, jQuery, Wikipedia, font-awesome, selenium-webdriver &amp;amp; tesseract.js&lt;/li&gt; 
 &lt;li&gt;Let me know if I missed a reference or resource!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Disclaimer\Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download this project from GitHub and treat it as a security project&lt;/li&gt; 
 &lt;li&gt;If you want your website to be excluded from this project list, please reach out to me&lt;/li&gt; 
 &lt;li&gt;This tool is meant to be used locally, not as a service (It does not have any Access Control)&lt;/li&gt; 
 &lt;li&gt;For issues related to modules that end with -private or under the private group &lt;img src="https://raw.githubusercontent.com/qeeqbox/social-analyzer/main/readme/modules.png" alt="" /&gt;, reach out directly to me (do not open an issue on GitHub)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other Projects&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/qeeqbox/analyzer"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/analyzer.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/chameleon"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/chameleon.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/honeypots"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/honeypots.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/osint"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/osint.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/url-sandbox"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/url-sandbox.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/mitre-visualizer"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/mitre-visualizer.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/woodpecker"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/woodpecker.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/docker-images"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/docker-images.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/seahorse"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/seahorse.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/rhino"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/rhino.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/raven"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/raven.png" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qeeqbox/image-analyzer"&gt;&lt;img src="https://github.com/qeeqbox/.github/raw/main/data/image-analyzer.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sudheerj/reactjs-interview-questions</title>
      <link>https://github.com/sudheerj/reactjs-interview-questions</link>
      <description>&lt;p&gt;List of top 500 ReactJS Interview Questions &amp; Answers....Coding exercise questions are coming soon!!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Interview Questions &amp;amp; Answers&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Click &lt;span&gt;‚≠ê&lt;/span&gt; if you like the project. Pull Requests are highly appreciated. Follow me &lt;a href="https://twitter.com/SudheerJonna"&gt;@SudheerJonna&lt;/a&gt; for technical updates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;div&gt; 
 &lt;p align="center"&gt; &lt;a href="https://www.greatfrontend.com/questions/react-interview-questions?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=sudheerj-react&amp;amp;fpr=sudheerj&amp;amp;gnrs=sudheerj"&gt; &lt;img src="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/collab/greatfrontend-react.gif" alt="GreatFrontEnd React Interview Questions" width="100%" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Practice 280+ JavaScript coding interview questions in-browser. Built by ex-FAANG interviewers. No AI-generated fluff. No fake reviews. &lt;a href="https://www.greatfrontend.com/questions/react-interview-questions?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=sudheerj-react&amp;amp;fpr=sudheerj&amp;amp;gnrs=sudheerj"&gt;Try GreatFrontEnd ‚Üí&lt;/a&gt; üí°&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;div&gt; 
 &lt;p align="center"&gt; &lt;a href="https://zerotomastery.io/?utm_source=github&amp;amp;utm_medium=sponsor&amp;amp;utm_campaign=reactjs-interview-questions"&gt; &lt;img src="https://process.fs.teachablecdn.com/ADNupMnWyR7kCWRvm76Laz/resize=height:70/https://www.filepicker.io/api/file/AKYtjj5SSGyJuyZrkAB2" alt="ZTM Logo" width="100" height="50" /&gt; &lt;/a&gt; &lt;/p&gt;
 &lt;ol&gt; 
  &lt;li&gt;I recommend this &lt;a href="https://links.zerotomastery.io/react_sudheer"&gt;React course&lt;/a&gt; if you‚Äôre serious about learning React and want to go beyond the basics.&lt;/li&gt; 
  &lt;li&gt;Want to ace your coding interview and get hired at your dream company? &lt;a href="http://links.zerotomastery.io/mci_sudheer"&gt;Take this coding interview bootcamp&lt;/a&gt;.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repository is specific to ReactJS. Please check &lt;a href="https://github.com/sudheerj/javascript-interview-questions"&gt;JavaScript Interview Questions&lt;/a&gt; for core JavaScript questions and &lt;a href="https://github.com/sudheerj/datastructures-algorithms"&gt;Data Structures and Algorithms&lt;/a&gt; for DSA-related questions or problems.&lt;/p&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;details open&gt; 
 &lt;summary&gt; Hide/Show table of contents &lt;/summary&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;No.&lt;/th&gt; 
    &lt;th&gt;Questions&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;Core React&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;1&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react"&gt;What is React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;2&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-history-behind-react-evolution"&gt;What is the history behind React‚Äôs evolution?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;3&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-major-features-of-react"&gt;What are the major features of React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;4&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jsx"&gt;What is JSX?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;5&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-an-element-and-a-component"&gt;What is the difference between an Element and a Component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;6&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-components-in-react"&gt;How do you create components in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;7&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-to-use-a-class-component-over-a-function-component"&gt;When should you use a Class Component over a Function Component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;8&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-pure-components"&gt;What are Pure Components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;9&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-state-in-react"&gt;What is state in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;10&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-props-in-react"&gt;What are props in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;11&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-state-and-props"&gt;What is the difference between state and props?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;12&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-html-and-react-event-handling"&gt;What is the difference between HTML and React event handling?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;13&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-synthetic-events-in-react"&gt;What are synthetic events in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;14&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-inline-conditional-expressions"&gt;What are inline conditional expressions?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;15&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-key-prop-and-what-is-the-benefit-of-using-it-in-arrays-of-elements"&gt;What is the "key" prop and what is its benefit when used in arrays of elements?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;16&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-virtual-dom"&gt;What is the Virtual DOM?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;17&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-virtual-dom-works"&gt;How does the Virtual DOM work?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;18&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-shadow-dom-and-virtual-dom"&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;19&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-fiber"&gt;What is React Fiber?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;20&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-goal-of-react-fiber"&gt;What is the main goal of React Fiber?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;21&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-controlled-components"&gt;What are controlled components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;22&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-uncontrolled-components"&gt;What are uncontrolled components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;23&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-createelement-and-cloneelement"&gt;What is the difference between createElement and cloneElement?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;24&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-lifting-state-up-in-react"&gt;What is Lifting State Up in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;25&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-higher-order-components"&gt;What are Higher-Order Components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;26&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-children-prop"&gt;What is the children prop?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;27&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-write-comments-in-react"&gt;How do you write comments in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;28&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reconciliation"&gt;What is reconciliation?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;29&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-the-lazy-function-support-named-exports"&gt;Does the lazy function support named exports?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;30&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-uses-classname-over-class-attribute"&gt;Why does React use className instead of the class attribute?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;31&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-fragments"&gt;What are Fragments?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;32&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-fragments-are-better-than-container-divs"&gt;Why are Fragments better than container divs?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;33&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-portals-in-react"&gt;What are portals in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;34&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateless-components"&gt;What are stateless components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;35&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateful-components"&gt;What are stateful components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;36&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-apply-validation-on-props-in-react"&gt;How do you apply validation to props in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;37&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react"&gt;What are the advantages of React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;38&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-of-react"&gt;What are the limitations of React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;39&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-recommended-ways-for-static-type-checking"&gt;What are the recommended ways for static type checking?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;40&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-react-dom-package"&gt;What is the use of the react-dom package?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;41&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reactdomserver"&gt;What is ReactDOMServer?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;42&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-innerhtml-in-react"&gt;How do you use innerHTML in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;43&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-styles-in-react"&gt;How do you apply styles in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;44&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-events-are-different-in-react"&gt;How are events different in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;45&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-impact-of-indexes-as-keys"&gt;What is the impact of using indexes as keys?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;46&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-conditionally-render-components"&gt;How do you conditionally render components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;47&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-be-careful-when-spreading-props-on-dom-elements"&gt;Why do we need to be careful when spreading props on DOM elements?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;48&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-memoize-a-component"&gt;How do you memoize a component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;49&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-implement-server-side-rendering-or-ssr"&gt;How do you implement Server-Side Rendering (SSR)?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;50&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-enable-production-mode-in-react"&gt;How do you enable production mode in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;51&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-hooks-replace-render-props-and-higher-order-components"&gt;Do Hooks replace render props and higher-order components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;52&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-switching-component"&gt;What is a switching component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;53&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-mixins"&gt;What are React Mixins?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;54&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-pointer-events-supported-in-react"&gt;What are the pointer events supported in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;55&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-component-names-start-with-capital-letter"&gt;Why should component names start with a capital letter?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;56&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-custom-dom-attributes-supported-in-react-v16"&gt;Are custom DOM attributes supported in React v16?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;57&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-loop-inside-jsx"&gt;How do you loop inside JSX?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;58&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-props-in-attribute-quotes"&gt;How do you access props within attribute quotes?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;59&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-proptype-array-with-shape"&gt;What is a React PropType array with shape?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;60&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-conditionally-apply-class-attributes"&gt;How do you conditionally apply class attributes?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;61&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-reactdom"&gt;What is the difference between React and ReactDOM?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;62&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-reactdom-is-separated-from-react"&gt;Why is ReactDOM separated from React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;63&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-react-label-element"&gt;How do you use the React label element?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;64&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-combine-multiple-inline-style-objects"&gt;How do you combine multiple inline style objects?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;65&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-re-render-the-view-when-the-browser-is-resized"&gt;How do you re-render the view when the browser is resized?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;66&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pretty-print-json-with-react"&gt;How do you pretty-print JSON with React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;67&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-cant-update-props-in-react"&gt;Why can‚Äôt you update props in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;68&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-focus-an-input-element-on-page-load"&gt;How do you focus an input element on page load?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;69&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-can-we-find-the-version-of-react-at-runtime-in-the-browser"&gt;How can you find the version of React at runtime in the browser?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;70&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-google-analytics-for-react-router"&gt;How do you add Google Analytics for React Router?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;71&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-apply-vendor-prefixes-to-inline-styles-in-react"&gt;How do you apply vendor prefixes to inline styles in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;72&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-import-and-export-components-using-react-and-es6"&gt;How do you import and export components using React and ES6?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;73&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-exceptions-on-react-component-naming"&gt;What are the exceptions to React component naming?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;74&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-asyncawait-in-plain-react"&gt;Is it possible to use async/await in plain React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;75&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-common-folder-structures-for-react"&gt;What are common folder structures for React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;76&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-packages-for-animation"&gt;What are popular packages for animation?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;77&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-styles-modules"&gt;What are the benefits of style modules?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;78&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-react-specific-linters"&gt;What are popular React-specific linters?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;React Router&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;79&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-router"&gt;What is React Router?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;80&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-router-is-different-from-history-library"&gt;How is React Router different from the history library?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;81&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-router-components-of-react-router-v6"&gt;What are the 
      &lt;router&gt;
        components of React Router v6?
      &lt;/router&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;82&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-push-and-replace-methods-of-history"&gt;What is the purpose of the push and replace methods of history?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;83&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-programmatically-navigate-using-react-router-v4"&gt;How do you programmatically navigate using React Router v4?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;84&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-query-parameters-in-react-router-v4"&gt;How do you get query parameters in React Router v4?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;85&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-get-router-may-have-only-one-child-element-warning"&gt;Why do you get a "Router may have only one child element" warning?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;86&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-params-to-historypush-method-in-react-router-v4"&gt;How do you pass params to the history.push method in React Router v4?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;87&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-implement-default-or-notfound-page"&gt;How do you implement a default or NotFound page?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;88&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-history-on-react-router-v4"&gt;How do you get history in React Router v4?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;89&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-perform-automatic-redirect-after-login"&gt;How do you perform an automatic redirect after login?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;React Internationalization&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;90&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-intl"&gt;What is React Intl?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;91&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-react-intl"&gt;What are the main features of React Intl?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;92&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-two-ways-of-formatting-in-react-intl"&gt;What are the two ways of formatting in React Intl?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;93&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-formattedmessage-as-placeholder-using-react-intl"&gt;How do you use FormattedMessage as a placeholder with React Intl?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;94&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-current-locale-with-react-intl"&gt;How do you access the current locale with React Intl?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;95&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-format-date-using-react-intl"&gt;How do you format a date using React Intl?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;React Testing&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;96&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-shallow-renderer-in-react-testing"&gt;What is the Shallow Renderer in React testing?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;97&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-testrenderer-package-in-react"&gt;What is the TestRenderer package in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;98&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-reacttestutils-package"&gt;What is the purpose of the ReactTestUtils package?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;99&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jest"&gt;What is Jest?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;100&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-jest-over-jasmine"&gt;What are the advantages of Jest over Jasmine?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;101&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-a-simple-example-of-jest-test-case"&gt;Can you give a simple example of a Jest test case?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;React Redux&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;102&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flux"&gt;What is Flux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;103&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux"&gt;What is Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;104&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-core-principles-of-redux"&gt;What are the core principles of Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;105&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-downsides-of-redux-compared-to-flux"&gt;What are the downsides of Redux compared to Flux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;106&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-mapstatetoprops-and-mapdispatchtoprops"&gt;What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;107&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-dispatch-an-action-in-reducer"&gt;Can you dispatch an action in a reducer?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;108&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-redux-store-outside-a-component"&gt;How do you access the Redux store outside a component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;109&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-drawbacks-of-mvw-pattern"&gt;What are the drawbacks of the MVW pattern?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;110&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-there-any-similarities-between-redux-and-rxjs"&gt;Are there any similarities between Redux and RxJS?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;111&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-reset-state-in-redux"&gt;How do you reset state in Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;112&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-context-and-react-redux"&gt;What is the difference between React Context and React Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;113&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-redux-state-functions-called-reducers"&gt;Why are Redux state functions called reducers?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;114&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-request-in-redux"&gt;How do you make an AJAX request in Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;115&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-keep-all-components-state-in-redux-store"&gt;Should you keep all component states in the Redux store?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;116&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-way-to-access-redux-store"&gt;What is the proper way to access the Redux store?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;117&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-component-and-container-in-react-redux"&gt;What is the difference between a component and a container in React Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;118&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-the-constants-in-redux"&gt;What is the purpose of constants in Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;119&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-ways-to-write-mapdispatchtoprops"&gt;What are the different ways to write mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;120&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-the-ownprops-parameter-in-mapstatetoprops-and-mapdispatchtoprops"&gt;What is the use of the ownProps parameter in mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;121&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-structure-redux-top-level-directories"&gt;How do you structure Redux top-level directories?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;122&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-saga"&gt;What is Redux Saga?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;123&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-mental-model-of-redux-saga"&gt;What is the mental model of Redux Saga?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;124&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-call-and-put-in-redux-saga"&gt;What are the differences between call and put in Redux Saga?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;125&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-thunk"&gt;What is Redux Thunk?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;126&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-saga-and-redux-thunk"&gt;What are the differences between Redux Saga and Redux Thunk?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;127&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-devtools"&gt;What is Redux DevTools?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;128&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-redux-devtools"&gt;What are the features of Redux DevTools?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;129&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-redux-selectors-and-why-use-them"&gt;What are Redux selectors and why should you use them?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;130&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-form"&gt;What is Redux Form?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;131&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-redux-form"&gt;What are the main features of Redux Form?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;132&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-multiple-middlewares-to-redux"&gt;How do you add multiple middlewares to Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;133&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-initial-state-in-redux"&gt;How do you set the initial state in Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;134&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-relay-is-different-from-redux"&gt;How is Relay different from Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;135&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-an-action-in-redux"&gt;What is an action in Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;React Native&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;136&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-native-and-react"&gt;What is the difference between React Native and React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;137&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-test-react-native-apps"&gt;How do you test React Native apps?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;138&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-do-logging-in-react-native"&gt;How do you log in React Native?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;139&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-your-react-native"&gt;How do you debug React Native apps?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;React Supported Libraries and Integration&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;140&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reselect-and-how-it-works"&gt;What is Reselect and how does it work?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;141&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flow"&gt;What is Flow?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;142&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-flow-and-proptypes"&gt;What is the difference between Flow and PropTypes?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;143&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-font-awesome-icons-in-react"&gt;How do you use Font Awesome icons in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;144&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-dev-tools"&gt;What is React DevTools?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;145&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-devtools-not-loading-in-chrome-for-local-files"&gt;Why does DevTools not load in Chrome for local files?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;146&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-polymer-in-react"&gt;How do you use Polymer in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;147&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react-over-vuejs"&gt;What are the advantages of React over Vue.js?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;148&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-angular"&gt;What is the difference between React and Angular?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;149&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-tab-is-not-showing-up-in-devtools"&gt;Why is the React tab not showing up in DevTools?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;150&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-styled-components"&gt;What are styled-components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;151&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-styled-components"&gt;Can you give an example of styled-components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;152&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-relay"&gt;What is Relay?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;153&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-reselect-library"&gt;What are the main features of the Reselect library?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;154&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-reselect-usage"&gt;Can you give an example of Reselect usage?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;155&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-redux-only-be-used-with-react"&gt;Can Redux only be used with React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;156&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-you-need-to-have-a-particular-build-tool-to-use-redux"&gt;Do you need a specific build tool to use Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;157&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-redux-form-initialvalues-get-updated-from-state"&gt;How do Redux Form initial values get updated from state?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;158&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-proptypes-allow-different-types-for-one-prop"&gt;How do React PropTypes allow different types for one prop?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;159&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-import-an-svg-file-as-react-component"&gt;Can you import an SVG file as a React component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;160&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-render-hijacking-in-react"&gt;What is render hijacking in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;161&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-numbers-to-react-component"&gt;How do you pass numbers to a React component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;162&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-keep-all-my-state-into-redux-should-i-ever-use-react-internal-state"&gt;Do you need to keep all state in Redux? Should you ever use React‚Äôs internal state?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;163&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-registerserviceworker-in-react"&gt;What is the purpose of registerServiceWorker in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;164&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-memo-function"&gt;What is the React.memo function?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;165&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-lazy-function"&gt;What is the React.lazy function?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;166&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-unnecessary-updates-using-setstate"&gt;How do you prevent unnecessary updates using setState?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;167&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-render-array-strings-and-numbers-in-react-16-version"&gt;How do you render arrays, strings, and numbers in React v16?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;168&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hooks"&gt;What are Hooks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;169&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-rules-need-to-be-followed-for-hooks"&gt;What rules must be followed for Hooks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;170&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-ensure-hooks-followed-the-rules-in-your-project"&gt;How do you ensure Hooks follow the rules in your project?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;171&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-flux-and-redux"&gt;What are the differences between Flux and Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;172&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-react-router-v4"&gt;What are the benefits of React Router v4?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;173&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-describe-about-componentdidcatch-lifecycle-method-signature"&gt;Can you describe the componentDidCatch lifecycle method signature?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;174&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#in-which-scenarios-do-error-boundaries-not-catch-errors"&gt;In which scenarios do error boundaries not catch errors?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;175&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-behavior-of-uncaught-errors-in-react-16"&gt;What is the behavior of uncaught errors in React v16?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;176&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-placement-for-error-boundaries"&gt;What is the proper placement for error boundaries?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;177&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-component-stack-trace-from-error-boundary"&gt;What is the benefit of a component stack trace from an error boundary?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;178&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-default-props"&gt;What are default props?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;179&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-displayname-class-property"&gt;What is the purpose of the displayName class property?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;180&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-browser-support-for-react-applications"&gt;What is the browser support for React applications?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;181&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-code-splitting"&gt;What is code-splitting?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;182&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-keyed-fragments"&gt;What are keyed Fragments?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;183&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-react-support-all-html-attributes"&gt;Does React support all HTML attributes?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;184&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-component-props-defaults-to-true"&gt;When do component props default to true?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;185&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-nextjs-and-major-features-of-it"&gt;What is Next.js and what are its major features?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;186&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-an-event-handler-to-a-component"&gt;How do you pass an event handler to a component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;187&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-a-function-from-being-called-multiple-times"&gt;How do you prevent a function from being called multiple times?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;188&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-jsx-prevents-injection-attacks"&gt;How does JSX prevent injection attacks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;189&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-update-rendered-elements"&gt;How do you update rendered elements?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;190&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-props-are-read-only"&gt;How do you indicate that props are read-only?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;191&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-conditions-to-safely-use-the-index-as-a-key"&gt;What are the conditions for safely using an index as a key?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;192&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-keys-should-be-globally-unique"&gt;Do keys need to be globally unique?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;193&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-popular-choice-for-form-handling"&gt;What is the popular choice for form handling?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;194&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-formik-over-redux-form-library"&gt;What are the advantages of Formik over the Redux Form library?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;195&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-required-to-use-inheritance"&gt;Why are you not required to use inheritance?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;196&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-web-components-in-react-application"&gt;Can you use web components in a React application?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;197&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-dynamic-import"&gt;What is a dynamic import?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;198&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-loadable-components"&gt;What are loadable components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;199&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-suspense-component"&gt;What is a Suspense component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;200&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-route-based-code-splitting"&gt;What is route-based code splitting?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;201&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-default-value-in-context"&gt;What is the purpose of the default value in Context?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;202&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-diffing-algorithm"&gt;What is the diffing algorithm?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;203&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-covered-by-diffing-algorithm"&gt;What rules are covered by the diffing algorithm?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;204&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-do-you-need-to-use-refs"&gt;When do you need to use refs?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;205&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-prop-must-be-named-as-render-for-render-props"&gt;Must a prop be named "render" for render props?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;206&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-problems-of-using-render-props-with-pure-components"&gt;What are the problems with using render props with Pure Components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;207&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-windowing-technique"&gt;What is the windowing technique?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;208&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-print-falsy-values-in-jsx"&gt;How do you print falsy values in JSX?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;209&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-typical-use-case-of-portals"&gt;What is the typical use case for portals?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;210&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-set-default-value-for-uncontrolled-component"&gt;How do you set a default value for an uncontrolled component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;211&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-your-favorite-react-stack"&gt;What is your favorite React stack?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;212&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-real-dom-and-virtual-dom"&gt;What is the difference between the real DOM and the Virtual DOM?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;213&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-bootstrap-to-a-react-application"&gt;How do you add Bootstrap to a React application?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;214&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-list-down-top-websites-or-applications-using-react-as-front-end-framework"&gt;Can you list the top websites or applications using React as a front-end framework?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;215&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-recommended-to-use-css-in-js-technique-in-react"&gt;Is it recommended to use the CSS-in-JS technique in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;216&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-rewrite-all-my-class-components-with-hooks"&gt;Do you need to rewrite all class components with Hooks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;217&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-fetch-data-with-react-hooks"&gt;How do you fetch data with React Hooks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;218&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-hooks-cover-all-use-cases-for-classes"&gt;Do Hooks cover all use cases for classes?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;219&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-stable-release-for-hooks-support"&gt;What is the stable release for Hooks support?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;220&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-we-use-array-destructuring-square-brackets-notation-in-usestate"&gt;Why do we use array destructuring (square bracket notation) in useState?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;221&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-sources-used-for-introducing-hooks"&gt;What sources were used for introducing Hooks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;222&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-imperative-api-of-web-components"&gt;How do you access the imperative API of web components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;223&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-formik"&gt;What is Formik?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;224&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-typical-middleware-choices-for-handling-asynchronous-calls-in-redux"&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;225&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-browsers-understand-jsx-code"&gt;Do browsers understand JSX code?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;226&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#describe-about-data-flow-in-react"&gt;Can you describe data flow in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;227&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-mobx"&gt;What is MobX?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;228&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-and-mobx"&gt;What are the differences between Redux and MobX?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;229&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-learn-es6-before-learning-reactjs"&gt;Should you learn ES6 before learning ReactJS?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;230&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-concurrent-rendering"&gt;What is concurrent rendering?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;231&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-async-mode-and-concurrent-mode"&gt;What is the difference between async mode and concurrent mode?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;232&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-javascript-urls-in-react169"&gt;Can you use JavaScript URLs in React v16.9?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;233&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-eslint-plugin-for-hooks"&gt;What is the purpose of the ESLint plugin for Hooks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;234&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-imperative-and-declarative-in-react"&gt;What is the difference between imperative and declarative programming in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;235&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-using-typescript-with-reactjs"&gt;What are the benefits of using TypeScript with ReactJS?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;236&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-make-sure-that-user-remains-authenticated-on-page-refresh-while-using-context-api-state-management"&gt;How do you ensure a user remains authenticated on page refresh while using Context API state management?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;237&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-new-jsx-transform"&gt;What are the benefits of the new JSX transform?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;238&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-is-the-new-jsx-transform-different-from-old-transform"&gt;How is the new JSX transform different from the old transform?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;239&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-server-components"&gt;What are React Server Components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;240&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-prop-drilling"&gt;What is prop drilling?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;241&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-usestate-and-useref-hook"&gt;What is the difference between the useState and useRef Hooks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;242&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-wrapper-component"&gt;What is a wrapper component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;243&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-useeffect-and-uselayouteffect-hooks"&gt;What are the differences between the useEffect and useLayoutEffect Hooks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;244&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-functional-and-class-components"&gt;What are the differences between functional and class components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;245&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-strict-mode-in-react"&gt;What is Strict Mode in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;246&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-strict-mode"&gt;What is the benefit of Strict Mode?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;247&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-does-strict-mode-render-twice-in-react"&gt;Why does Strict Mode render twice in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;248&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-of-jsx"&gt;What are the rules of JSX?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;249&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-reason-behind-multiple-jsx-tags-to-be-wrapped"&gt;What is the reason multiple JSX tags must be wrapped?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;250&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-prevent-mutating-array-variables"&gt;How do you prevent mutating array variables?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;251&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-capture-phase-events"&gt;What are capture phase events?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;252&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-does-react-updates-screen-in-an-application"&gt;How does React update the screen in an application?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;253&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-does-react-batch-multiple-state-updates"&gt;How does React batch multiple state updates?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;254&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-prevent-automatic-batching"&gt;Is it possible to prevent automatic batching?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;255&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-hydration"&gt;What is React hydration?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;256&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-update-objects-inside-state"&gt;How do you update objects inside state?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;257&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#How-do-you-update-nested-objects-inside-state"&gt;How do you update nested objects inside state?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;258&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-update-arrays-inside-state"&gt;How do you update arrays inside state?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;259&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-use-immer-library-for-state-updates"&gt;How do you use the Immer library for state updates?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;260&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-preventing-the-direct-state-mutations"&gt;What are the benefits of preventing direct state mutations?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;261&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-preferred-and-non-preferred-array-operations-for-updating-the-state"&gt;What are the preferred and non-preferred array operations for updating state?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;262&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-by-defining-nested-function-components"&gt;What will happen when defining nested function components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;263&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-keys-for-non-list-items"&gt;Can I use keys for non-list items?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;264&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-guidelines-to-be-followed-for-writing-reducers"&gt;What are the guidelines to follow for writing reducers?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;Hooks&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;265&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-use-reducer-hook-can-you-describe-its-usage"&gt;What is useReducer hook? Can you describe its usage?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;266&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-compare-use-state-and-use-reducer"&gt;How do you compare useState and useReducer?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;267&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-does-context-works-using-usecontext-hook"&gt;How does Context work with the useContext hook?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;268&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-use-cases-of-usecontext-hook"&gt;What are the use cases of the useContext hook?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;269&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-to-use-client-and-server-components"&gt;When should you use client and server components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;270&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-page-router-and-app-router-in-nextjs"&gt;What are the differences between the Page Router and App Router in Next.js?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;details open&gt; 
 &lt;summary&gt; Hide/Show table of contents &lt;/summary&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;No.&lt;/th&gt; 
    &lt;th&gt;Questions&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;Old Q&amp;amp;A&lt;/strong&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;1&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-we-not-update-the-state-directly"&gt;Why should we not update the state directly?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;2&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-callback-function-as-an-argument-of-setstate"&gt;What is the purpose of callback function as an argument of setState()?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;3&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-bind-methods-or-event-handlers-in-jsx-callbacks"&gt;How to bind methods or event handlers in JSX callbacks?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;4&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-a-parameter-to-an-event-handler-or-callback"&gt;How to pass a parameter to an event handler or callback?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;5&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-refs"&gt;What is the use of refs?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;6&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-refs"&gt;How to create refs?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;7&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-forward-refs"&gt;What are forward refs?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;8&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#which-is-preferred-option-with-in-callback-refs-and-finddomnode"&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;9&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-string-refs-legacy"&gt;Why are String Refs legacy?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;10&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-phases-of-component-lifecycle"&gt;What are the different phases of component lifecycle?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;11&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-of-react"&gt;What are the lifecycle methods of React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;12&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-props-proxy-for-hoc-component"&gt;How to create props proxy for HOC component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;13&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-context"&gt;What is context?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;14&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-using-super-constructor-with-props-argument"&gt;What is the purpose of using super constructor with props argument?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;15&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-state-with-a-dynamic-key-name"&gt;How to set state with a dynamic key name?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;16&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-would-be-the-common-mistake-of-function-being-called-every-time-the-component-renders"&gt;What would be the common mistake of function being called every time the component renders?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;17&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-error-boundaries-in-react-v16"&gt;What are error boundaries in React v16&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;18&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-are-error-boundaries-handled-in-react-v15"&gt;How are error boundaries handled in React v15?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;19&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-render-method-of-react-dom"&gt;What is the purpose of render method of react-dom?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;20&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-setstate-in-constructor"&gt;What will happen if you use setState in constructor?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;21&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-setstate-in-componentwillmount-method"&gt;Is it good to use setState() in componentWillMount() method?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;22&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-props-in-initial-state"&gt;What will happen if you use props in initial state?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;23&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-use-decorators-in-react"&gt;How you use decorators in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;24&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-cra-and-its-benefits"&gt;What is CRA and its benefits?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;25&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-lifecycle-methods-order-in-mounting"&gt;What is the lifecycle methods order in mounting?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;26&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-going-to-be-deprecated-in-react-v16"&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;27&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromprops-lifecycle-method"&gt;What is the purpose of getDerivedStateFromProps() lifecycle method?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;28&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getsnapshotbeforeupdate-lifecycle-method"&gt;What is the purpose of getSnapshotBeforeUpdate() lifecycle method?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;29&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-way-for-naming-components"&gt;What is the recommended way for naming components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;30&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-ordering-of-methods-in-component-class"&gt;What is the recommended ordering of methods in component class?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;31&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-pass-a-function-to-setstate"&gt;Why we need to pass a function to setState()?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;32&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-ismounted-an-anti-pattern-and-what-is-the-proper-solution"&gt;Why is isMounted() an anti-pattern and what is the proper solution?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;33&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-constructor-and-getinitialstate"&gt;What is the difference between constructor and getInitialState?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;34&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-force-a-component-to-re-render-without-calling-setstate"&gt;Can you force a component to re-render without calling setState?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;35&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-super-and-superprops-in-react-using-es6-classes"&gt;What is the difference between super() and super(props) in React using ES6 classes?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;36&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-setstate-and-replacestate-methods"&gt;What is the difference between setState and replaceState methods?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;37&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-listen-to-state-changes"&gt;How to listen to state changes?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;38&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-approach-of-removing-an-array-element-in-react-state"&gt;What is the recommended approach of removing an array element in react state?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;39&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-rendering-html"&gt;Is it possible to use React without rendering HTML?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;40&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-ways-of-updating-objects-in-state"&gt;What are the possible ways of updating objects in state?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;41&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-approaches-to-include-polyfills-in-your-create-react-app"&gt;What are the approaches to include polyfills in your create-react-app?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;42&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-https-instead-of-http-in-create-react-app"&gt;How to use https instead of http in create-react-app?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;43&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-avoid-using-relative-path-imports-in-create-react-app"&gt;How to avoid using relative path imports in create-react-app?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;44&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-update-a-component-every-second"&gt;How to update a component every second?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;45&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-a-component-constructor-called-only-once"&gt;Why is a component constructor called only once?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;46&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-define-constants-in-react"&gt;How to define constants in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;47&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-programmatically-trigger-click-event-in-react"&gt;How to programmatically trigger click event in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;48&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-call-and-in-which-component-lifecycle-methods-should-i-make-an-ajax-call"&gt;How to make AJAX call and In which component lifecycle methods should I make an AJAX call?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;49&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-render-props"&gt;What are render props?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;50&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-dispatch-an-action-on-load"&gt;How to dispatch an action on load?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;51&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-connect-from-react-redux"&gt;How to use connect from React Redux?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;52&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#whats-the-purpose-of-at-symbol-in-the-redux-connect-decorator"&gt;Whats the purpose of at symbol in the redux connect decorator?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;53&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-typescript-in-create-react-app-application"&gt;How to use TypeScript in create-react-app application?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;54&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-the-statics-object-work-with-es6-classes-in-react"&gt;Does the statics object work with ES6 classes in React?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;55&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-inline-ref-callbacks-or-functions-not-recommended"&gt;Why are inline ref callbacks or functions not recommended?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;56&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hoc-factory-implementations"&gt;What are HOC factory implementations?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;57&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-class-field-declarations-syntax-in-react-classes"&gt;How to use class field declarations syntax in React classes?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;58&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-need-error-boundaries-for-event-handlers"&gt;Why do you not need error boundaries for event handlers?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;59&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-try-catch-block-and-error-boundaries"&gt;What is the difference between try catch block and error boundaries?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;60&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-required-method-to-be-defined-for-a-class-component"&gt;What is the required method to be defined for a class component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;61&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-return-types-of-render-method"&gt;What are the possible return types of render method?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;62&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-purpose-of-constructor"&gt;What is the main purpose of constructor?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;63&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-mandatory-to-define-constructor-for-react-component"&gt;Is it mandatory to define constructor for React component?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;64&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-not-call-setstate-in-componentwillunmount"&gt;Why should not call setState in componentWillUnmount?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;65&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromerror"&gt;What is the purpose of getDerivedStateFromError?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;66&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-methods-order-when-component-re-rendered"&gt;What is the methods order when component re-rendered?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;67&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-methods-invoked-during-error-handling"&gt;What are the methods invoked during error handling?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;68&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-unmountcomponentatnode-method"&gt;What is the purpose of unmountComponentAtNode method?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;69&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-with-hocs"&gt;What are the limitations with HOCs?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;70&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-forwardrefs-in-devtools"&gt;How to debug forwardRefs in DevTools?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;71&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-arrow-functions-in-render-methods"&gt;Is it good to use arrow functions in render methods?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;72&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-state-updates-are-merged"&gt;How do you say that state updates are merged?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;73&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-arguments-to-an-event-handler"&gt;How do you pass arguments to an event handler?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;74&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-component-from-rendering"&gt;How to prevent component from rendering?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;75&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-on-how-to-use-context"&gt;Give an example on How to use context?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;76&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-use-contexttype"&gt;How do you use contextType?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;77&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-consumer"&gt;What is a consumer?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;78&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-solve-performance-corner-cases-while-using-context"&gt;How do you solve performance corner cases while using context?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;79&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-forward-ref-in-hocs"&gt;What is the purpose of forward ref in HOCs?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;80&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-ref-argument-available-for-all-functions-or-class-components"&gt;Is it ref argument available for all functions or class components?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;81&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-need-additional-care-for-component-libraries-while-using-forward-refs"&gt;Why do you need additional care for component libraries while using forward refs?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;82&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-react-class-components-without-es6"&gt;How to create react class components without ES6?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;83&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-jsx"&gt;Is it possible to use react without JSX?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;84&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-create-hoc-using-render-props"&gt;How do you create HOC using render props?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;85&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-scripts"&gt;What is react scripts?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;86&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-create-react-app"&gt;What are the features of create react app?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;87&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-rendertonodestream-method"&gt;What is the purpose of renderToNodeStream method?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;88&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-get-redux-scaffolding-using-create-react-app"&gt;How do you get redux scaffolding using create-react-app?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;89&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-state-mutation-and-how-to-prevent-it"&gt;What is state mutation and how to prevent it?&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;Core React&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;h3&gt;What is React?&lt;/h3&gt; &lt;p&gt;React (aka React.js or ReactJS) is an &lt;strong&gt;open-source front-end JavaScript library&lt;/strong&gt; for building user interfaces based on components. It's used for handling the view layer in web and mobile applications, and allows developers to create reusable UI components and manage the state of those components efficiently.&lt;/p&gt; &lt;p&gt;React was created by &lt;a href="https://github.com/jordwalke"&gt;Jordan Walke&lt;/a&gt;, a software engineer at Facebook (now Meta). It was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012. The library was open-sourced in May 2013 and has since become one of the most popular JavaScript libraries for building modern user interfaces.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the history behind React evolution?&lt;/h3&gt; &lt;p&gt;The history of ReactJS started in 2010 with the creation of &lt;strong&gt;XHP&lt;/strong&gt;. XHP is a PHP extension which improved the syntax of the language such that XML document fragments become valid PHP expressions and the primary purpose was used to create custom and reusable HTML elements.&lt;/p&gt; &lt;p&gt;The main principle of this extension was to make front-end code easier to understand and to help avoid cross-site scripting attacks. The project was successful to prevent the malicious content submitted by the scrubbing user.&lt;/p&gt; &lt;p&gt;But there was a different problem with XHP in which dynamic web applications require many roundtrips to the server, and XHP did not solve this problem. Also, the whole UI was re-rendered for small change in the application. Later, the initial prototype of React is created with the name &lt;strong&gt;FaxJ&lt;/strong&gt; by Jordan inspired from XHP. Finally after sometime React has been introduced as a new library into JavaScript world.&lt;/p&gt; 
  &lt;details&gt; 
   &lt;summary&gt;&lt;b&gt;See deep-dive answer&lt;/b&gt;&lt;/summary&gt; The evolution of React has a fascinating history that spans over a decade: 
   &lt;p&gt;&lt;strong&gt;2010-2011: The Origins&lt;/strong&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;The journey began with &lt;strong&gt;XHP&lt;/strong&gt;, a PHP extension created at Facebook that allowed HTML components to be used in PHP code&lt;/li&gt; 
    &lt;li&gt;XHP improved front-end code readability and helped prevent cross-site scripting (XSS) attacks&lt;/li&gt; 
    &lt;li&gt;However, XHP had limitations with dynamic web applications, requiring frequent server roundtrips and complete UI re-renders for small changes&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p&gt;&lt;strong&gt;2011-2012: Early Development&lt;/strong&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Jordan Walke created the first prototype called &lt;strong&gt;FaxJS&lt;/strong&gt; (later renamed to React), inspired by XHP's component model&lt;/li&gt; 
    &lt;li&gt;The key innovation was bringing XHP's component model to JavaScript with performance improvements&lt;/li&gt; 
    &lt;li&gt;React introduced the Virtual DOM concept to solve the performance issues of full page re-renders&lt;/li&gt; 
    &lt;li&gt;First deployed internally on Facebook's News Feed in 2011 and Instagram in 2012&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p&gt;&lt;strong&gt;2013: Public Release&lt;/strong&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;React was officially open-sourced at JSConf US in May 2013&lt;/li&gt; 
    &lt;li&gt;Initial public reception was mixed, with some developers skeptical about the JSX syntax and the approach of mixing markup with JavaScript&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p&gt;&lt;strong&gt;2014-2015: Growing Adoption&lt;/strong&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;React Native was announced in 2015, extending React's paradigm to mobile app development&lt;/li&gt; 
    &lt;li&gt;The ecosystem began to grow with tools like Redux for state management&lt;/li&gt; 
    &lt;li&gt;Companies beyond Facebook began adopting React for production applications&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p&gt;&lt;strong&gt;2016-2018: Maturation&lt;/strong&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;React 16 ("Fiber") was released in 2017 with a complete rewrite of the core architecture&lt;/li&gt; 
    &lt;li&gt;Introduction of new features like Error Boundaries, Portals, and improved server-side rendering&lt;/li&gt; 
    &lt;li&gt;React 16.3 introduced the Context API for easier state management&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p&gt;&lt;strong&gt;2019-Present: Modern React&lt;/strong&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;React Hooks were introduced in React 16.8 (February 2019), revolutionizing state management in functional components&lt;/li&gt; 
    &lt;li&gt;React 17 (October 2020) focused on making React upgrades easier&lt;/li&gt; 
    &lt;li&gt;React 18 (March 2022) introduced concurrent rendering and automatic batching&lt;/li&gt; 
    &lt;li&gt;React continues to evolve with Server Components, the new React compiler (React Forget), and other performance improvements&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/details&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; JSX, React's syntax extension, was indeed inspired by XHP's approach of embedding XML-like syntax in code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the major features of React?&lt;/h3&gt; &lt;p&gt;React offers a powerful set of features that have made it one of the most popular JavaScript libraries for building user interfaces:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Core Features:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Component-Based Architecture&lt;/strong&gt;: React applications are built using components - independent, reusable pieces of code that return HTML via a render function. This modular approach enables better code organization, reusability, and maintenance.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Virtual DOM&lt;/strong&gt;: React creates an in-memory data structure cache, computes the resulting differences, and efficiently updates only the changed parts in the browser DOM. This approach significantly improves performance compared to direct DOM manipulation.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;JSX (JavaScript XML)&lt;/strong&gt;: A syntax extension that allows writing HTML-like code in JavaScript. JSX makes the code more readable and expressive while providing the full power of JavaScript.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unidirectional Data Flow&lt;/strong&gt;: React follows a one-way data binding model where data flows from parent to child components. This makes the code more predictable and easier to debug.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Declarative UI&lt;/strong&gt;: React allows you to describe what your UI should look like for a given state, and it handles the DOM updates when the underlying data changes.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Advanced Features:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;React Hooks&lt;/strong&gt;: Introduced in React 16.8, hooks allow using state and other React features in functional components without writing classes.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Context API&lt;/strong&gt;: Provides a way to share values between components without explicitly passing props through every level of the component tree.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Error Boundaries&lt;/strong&gt;: Components that catch JavaScript errors anywhere in their child component tree and display fallback UI instead of crashing.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server-Side Rendering (SSR)&lt;/strong&gt;: Enables rendering React components on the server before sending HTML to the client, improving performance and SEO.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Concurrent Mode&lt;/strong&gt;: A set of new features (in development) that help React apps stay responsive and gracefully adjust to the user's device capabilities and network speed.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;React Server Components&lt;/strong&gt;: A new feature that allows components to be rendered entirely on the server, reducing bundle size and improving performance.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Suspense&lt;/strong&gt;: A feature that lets your components "wait" for something before rendering, supporting code-splitting and data fetching with cleaner code.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;These features collectively make React powerful for building everything from small widgets to complex, large-scale web applications.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSX?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;JSX&lt;/em&gt; stands for &lt;em&gt;JavaScript XML&lt;/em&gt; and it is an XML-like syntax extension to ECMAScript. Basically it just provides the syntactic sugar for the &lt;code&gt;React.createElement(type, props, ...children)&lt;/code&gt; function, giving us expressiveness of JavaScript along with HTML like template syntax.&lt;/p&gt; &lt;p&gt;In the example below, the text inside &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is returned as JavaScript function to the render function.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;export default function App() {
  return &amp;lt;h1 className="greeting"&amp;gt;{"Hello, this is a JSX Code!"}&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don't use JSX syntax then the respective JavaScript code should be written as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { createElement } from "react";

export default function App() {
  return createElement(
    "h1",
    { className: "greeting" },
    "Hello, this is a JSX Code!"
  );
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;details&gt;
   &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
   &lt;p&gt; &lt;/p&gt;
   &lt;pre&gt;&lt;code class="language-jsx"&gt;class App extends React.Component {
  render() {
    return &amp;lt;h1 className="greeting"&amp;gt;{"Hello, this is a JSX Code!"}&amp;lt;/h1&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;&lt;/p&gt; 
  &lt;/details&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; JSX is stricter than HTML&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between an Element and a Component?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Element:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;A React &lt;strong&gt;Element&lt;/strong&gt; is a plain JavaScript object that describes what you want to see on the UI. It represents a DOM node or a component at a specific point in time.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Elements are immutable: once created, you cannot change their properties. Instead, you create new elements to reflect updates.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Elements can be nested within other elements through their &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Creating an element is a fast, lightweight operation‚Äîit does &lt;strong&gt;not&lt;/strong&gt; create any actual DOM nodes or render anything to the screen directly.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example (without JSX):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const element = React.createElement("button", { id: "login-btn" }, "Login");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Equivalent JSX syntax:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;button id="login-btn"&amp;gt;Login&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;The object returned by &lt;code&gt;React.createElement&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;{
  type: 'button',
  props: {
    id: 'login-btn',
    children: 'Login'
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Elements are then passed to the React DOM renderer (e.g., &lt;code&gt;ReactDOM.render()&lt;/code&gt;), which translates them to actual DOM nodes.&lt;/p&gt; 
    &lt;hr /&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;A &lt;strong&gt;Component&lt;/strong&gt; is a function or class that returns an element (or a tree of elements) to describe part of the UI. Components can accept inputs (called &lt;strong&gt;props&lt;/strong&gt;) and manage their own state (in case of class or function components with hooks).&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Components allow you to split the UI into independent, reusable pieces, each isolated and composable.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can define a component using a function or a class:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example (Function Component with JSX):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const Button = ({ handleLogin }) =&amp;gt; (
  &amp;lt;button id="login-btn" onClick={handleLogin}&amp;gt;
    Login
  &amp;lt;/button&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When JSX is compiled, it's transformed into a tree of &lt;code&gt;React.createElement&lt;/code&gt; calls:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const Button = ({ handleLogin }) =&amp;gt;
  React.createElement(
    "button",
    { id: "login-btn", onClick: handleLogin },
    "Login"
  );
&lt;/code&gt;&lt;/pre&gt; 
    &lt;hr /&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;In summary:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Elements&lt;/strong&gt; are the smallest building blocks in React‚Äîobjects that describe what you want to see.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt; are functions or classes that return elements and encapsulate logic, structure, and behavior for parts of your UI.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;Think of &lt;strong&gt;elements&lt;/strong&gt; as the instructions for creating UI, and &lt;strong&gt;components&lt;/strong&gt; as reusable blueprints that combine logic and structure to generate those instructions.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to create components in React?&lt;/h3&gt; &lt;p&gt;Components are the building blocks of creating User Interfaces(UI) in React. There are two possible ways to create a component.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function Components:&lt;/strong&gt; This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as the one and only one parameter and return React elements to render the output:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function Greeting({ message }) {
  return &amp;lt;h1&amp;gt;{`Hello, ${message}`}&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Class Components:&lt;/strong&gt; You can also use ES6 class to define a component. The above function component can be written as a class component:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class Greeting extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;{`Hello, ${this.props.message}`}&amp;lt;/h1&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;When to use a Class Component over a Function Component?&lt;/h3&gt; &lt;p&gt;After the addition of Hooks(i.e. React 16.8 onwards) it is always recommended to use Function components over Class components in React. Because you could use state, lifecycle methods and other features that were only available in class component present in function component too.&lt;/p&gt; &lt;p&gt;But even there are two reasons to use Class components over Function components.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If you need a React functionality whose Function component equivalent is not present yet, like Error Boundaries.&lt;/li&gt; 
   &lt;li&gt;In older versions, If the component needs &lt;em&gt;state or lifecycle methods&lt;/em&gt; then you need to use class component.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;So the summary to this question is as follows:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Use Function Components:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If you don't need state or lifecycle methods, and your component is purely presentational.&lt;/li&gt; 
   &lt;li&gt;For simplicity, readability, and modern code practices, especially with the use of React Hooks for state and side effects.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Use Class Components:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If you need to manage state or use lifecycle methods.&lt;/li&gt; 
   &lt;li&gt;In scenarios where backward compatibility or integration with older code is necessary.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also use reusable &lt;a href="https://github.com/bvaughn/react-error-boundary"&gt;react error boundary&lt;/a&gt; third-party component without writing any class. i.e, No need to use class components for Error boundaries.&lt;/p&gt; &lt;p&gt;The usage of Error boundaries from the above library is quite straight forward.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note when using react-error-boundary:&lt;/em&gt;&lt;/strong&gt; ErrorBoundary is a client component. You can only pass props to it that are serializable or use it in files that have a &lt;code&gt;"use client";&lt;/code&gt; directive.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;"use client";

import { ErrorBoundary } from "react-error-boundary";

&amp;lt;ErrorBoundary fallback={&amp;lt;div&amp;gt;Something went wrong&amp;lt;/div&amp;gt;}&amp;gt;
  &amp;lt;ExampleApplication /&amp;gt;
&amp;lt;/ErrorBoundary&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are Pure Components?&lt;/h3&gt; &lt;p&gt;Pure components are the components which render the same output for the same state and props. In function components, you can achieve these pure components through memoized &lt;code&gt;React.memo()&lt;/code&gt; API wrapping around the component. This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. So it will be helpful for performance optimizations.&lt;/p&gt; &lt;p&gt;But at the same time, it won't compare the previous state with the current state because function component itself prevents the unnecessary rendering by default when you set the same state again.&lt;/p&gt; &lt;p&gt;The syntactic representation of memoized components looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const MemoizedComponent = memo(SomeComponent, arePropsEqual?);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Below is the example of how child component(i.e., EmployeeProfile) prevents re-renders for the same props passed by parent component(i.e.,EmployeeRegForm).&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { memo, useState } from "react";

const EmployeeProfile = memo(function EmployeeProfile({ name, email }) {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;p&amp;gt;Name:{name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Email: {email}&amp;lt;/p&amp;gt;
    &amp;lt;/&amp;gt;
  );
});
export default function EmployeeRegForm() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  return (
    &amp;lt;&amp;gt;
      &amp;lt;label&amp;gt;
        Name:{" "}
        &amp;lt;input value={name} onChange={(e) =&amp;gt; setName(e.target.value)} /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;label&amp;gt;
        Email:{" "}
        &amp;lt;input value={email} onChange={(e) =&amp;gt; setEmail(e.target.value)} /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;hr /&amp;gt;
      &amp;lt;EmployeeProfile name={name} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, the email prop has not been passed to child component. So there won't be any re-renders for email prop change.&lt;/p&gt; &lt;p&gt;In class components, the components extending &lt;em&gt;&lt;code&gt;React.PureComponent&lt;/code&gt;&lt;/em&gt; instead of &lt;em&gt;&lt;code&gt;React.Component&lt;/code&gt;&lt;/em&gt; become the pure components. When props or state changes, &lt;em&gt;PureComponent&lt;/em&gt; will do a shallow comparison on both props and state by invoking &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; lifecycle method.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.memo()&lt;/code&gt; is a higher-order component.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is state in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;State&lt;/em&gt; of a component is an object that holds some information that may change over the lifetime of the component. The important point is whenever the state object changes, the component re-renders. It is always recommended to make our state as simple as possible and minimize the number of stateful components.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/state.jpg" alt="state" /&gt;&lt;/p&gt; &lt;p&gt;Let's take an example of &lt;strong&gt;User&lt;/strong&gt; component with &lt;code&gt;message&lt;/code&gt; state. Here, &lt;strong&gt;useState&lt;/strong&gt; hook has been used to add state to the User component and it returns an array with current state and function to update it.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { useState } from "react";

function User() {
  const [message, setMessage] = useState("Welcome to React world");

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;{message}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whenever React calls your component or access &lt;code&gt;useState&lt;/code&gt; hook, it gives you a snapshot of the state for that particular render.&lt;/p&gt; 
  &lt;details&gt;
   &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
   &lt;p&gt; &lt;/p&gt;
   &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from "react";
class User extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      message: "Welcome to React world",
    };
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{this.state.message}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;&lt;/p&gt; 
  &lt;/details&gt; &lt;p&gt;State is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are props in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Props&lt;/em&gt; are inputs to components. They are single values or objects containing a set of values that are passed to components on creation similar to HTML-tag attributes. Here, the data is passed down from a parent component to a child component.&lt;/p&gt; &lt;p&gt;The primary purpose of props in React is to provide following component functionality:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Pass custom data to your component.&lt;/li&gt; 
   &lt;li&gt;Trigger state changes.&lt;/li&gt; 
   &lt;li&gt;Use via &lt;code&gt;this.props.reactProp&lt;/code&gt; inside component's &lt;code&gt;render()&lt;/code&gt; method.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, let us create an element with &lt;code&gt;reactProp&lt;/code&gt; property:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;Element reactProp={"1"} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This &lt;code&gt;reactProp&lt;/code&gt; (or whatever you came up with) attribute name then becomes a property attached to React's native props object which originally already exists on all components created using React library.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;props.reactProp;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For example, the usage of props in function component looks like below:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from "react";
import ReactDOM from "react-dom";

const ChildComponent = (props) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;{props.name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{props.age}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{props.gender}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

const ParentComponent = () =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;ChildComponent name="John" age="30" gender="male" /&amp;gt;
      &amp;lt;ChildComponent name="Mary" age="25" geneder="female" /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The properties from props object can be accessed directly using destructing feature from ES6 (ECMAScript 2015). It is also possible to fallback to default value when the prop value is not specified. The above child component can be simplified like below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;const ChildComponent = ({ name, age, gender = "male" }) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;{name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{age}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{gender}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The default value won't be used if you pass &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; value. i.e, default value is only used if the prop value is missed or &lt;code&gt;undefined&lt;/code&gt; value has been passed.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; The Props accessed in Class Based Component as below 
 &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from "react";
import ReactDOM from "react-dom";

class ChildComponent extends React.Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{this.props.name}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;{this.props.age}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;{this.props.gender}&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class ParentComponent extends React.Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;ChildComponent name="John" age="30" gender="male" /&amp;gt;
        &amp;lt;ChildComponent name="Mary" age="25" gender="female" /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="11"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between state and props?&lt;/h3&gt; &lt;p&gt;In React, both &lt;strong&gt;state&lt;/strong&gt; and &lt;strong&gt;props&lt;/strong&gt; are plain JavaScript objects, but they serve different purposes and have distinct behaviors:&lt;/p&gt; &lt;h3&gt;State&lt;/h3&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;br /&gt; State is a data structure that is managed within a component. It represents information that can change over the lifetime of the component.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Mutability:&lt;/strong&gt;&lt;br /&gt; State is mutable, meaning it can be changed using the setter function (&lt;code&gt;setState&lt;/code&gt; in class components or the updater function from &lt;code&gt;useState&lt;/code&gt; in functional components).&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt;&lt;br /&gt; State is local to the component where it is defined. Only that component can modify its own state.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;br /&gt; State is typically used for data that needs to change in response to user actions, network responses, or other dynamic events.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Re-rendering:&lt;/strong&gt;&lt;br /&gt; Updating the state triggers a re-render of the component and its descendants.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h3&gt;Props&lt;/h3&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;br /&gt; Props (short for ‚Äúproperties‚Äù) are inputs to a component, provided by its parent component.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Mutability:&lt;/strong&gt;&lt;br /&gt; Props are read-only. A component cannot modify its own props; they are immutable from the component‚Äôs perspective.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt;&lt;br /&gt; Props are used to pass data and event handlers down the component tree, enabling parent components to configure or communicate with their children.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;br /&gt; Props are commonly used to make components reusable and configurable. They allow the same component to be rendered with different data or behavior.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Analogy:&lt;/strong&gt;&lt;br /&gt; Think of props as arguments to a function, whereas state is like variables declared inside the function.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h3&gt;Summary Table&lt;/h3&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Feature&lt;/th&gt; 
     &lt;th&gt;State&lt;/th&gt; 
     &lt;th&gt;Props&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Managed by&lt;/td&gt; 
     &lt;td&gt;The component itself&lt;/td&gt; 
     &lt;td&gt;Parent component&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Mutable&lt;/td&gt; 
     &lt;td&gt;Yes&lt;/td&gt; 
     &lt;td&gt;No (read-only)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Scope&lt;/td&gt; 
     &lt;td&gt;Local to the component&lt;/td&gt; 
     &lt;td&gt;Passed from parent to child&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Usage&lt;/td&gt; 
     &lt;td&gt;Manage dynamic data and UI changes&lt;/td&gt; 
     &lt;td&gt;Configure and customize component&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Update&lt;/td&gt; 
     &lt;td&gt;Using setState/useState&lt;/td&gt; 
     &lt;td&gt;Cannot be updated by the component&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
  &lt;hr /&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between HTML and React event handling?&lt;/h3&gt; &lt;p&gt;Below are some of the main differences between HTML and React event handling,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, the event name usually represents in &lt;em&gt;lowercase&lt;/em&gt; as a convention:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;button onclick="activateLasers()"&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React it follows &lt;em&gt;camelCase&lt;/em&gt; convention:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;button onClick={activateLasers}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, you can return &lt;code&gt;false&lt;/code&gt; to prevent default behavior:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;a
  href="#"
  onclick='console.log("The link was clicked."); return false;'
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React you must call &lt;code&gt;preventDefault()&lt;/code&gt; explicitly:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function handleClick(event) {
  event.preventDefault();
  console.log("The link was clicked.");
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, you need to invoke the function by appending &lt;code&gt;()&lt;/code&gt; Whereas in react you should not append &lt;code&gt;()&lt;/code&gt; with the function name. (refer "activateLasers" function in the first point for example)&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are synthetic events in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SyntheticEvent&lt;/code&gt; is a cross-browser wrapper around the browser's native event. Its API is same as the browser's native event, including &lt;code&gt;stopPropagation()&lt;/code&gt; and &lt;code&gt;preventDefault()&lt;/code&gt;, except the events work identically across all browsers. The native events can be accessed directly from synthetic events using &lt;code&gt;nativeEvent&lt;/code&gt; attribute.&lt;/p&gt; &lt;p&gt;Let's take an example of &lt;code&gt;BookStore&lt;/code&gt; title search component with the ability to get all native event properties&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function BookStore() {
  function handleTitleChange(e) {
    console.log("The new title is:", e.target.value);
    console.log('Synthetic event:', e); // React SyntheticEvent
    console.log('Native event:', e.nativeEvent); // Browser native event
    e.stopPropagation();
    e.preventDefault();
  }

  return &amp;lt;input name="title" onChange={handleTitleChange} /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;List of common synthetic events are:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;onClick&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onChange&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onSubmit&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onKeyDown&lt;/code&gt;, &lt;code&gt;onKeyUp&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onFocus&lt;/code&gt;, &lt;code&gt;onBlur&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onMouseEnter&lt;/code&gt;, &lt;code&gt;onMouseLeave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onTouchStart&lt;/code&gt;, &lt;code&gt;onTouchEnd&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are inline conditional expressions?&lt;/h3&gt; &lt;p&gt;You can use either &lt;em&gt;if statements&lt;/em&gt; or &lt;em&gt;ternary expressions&lt;/em&gt; which are available in JS(and JSX in React) to conditionally execute or render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. It is helpful to render elements conditionally within a single line and commonly used for concise logic, especially in JSX rendering.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;;
{
  messages.length &amp;gt; 0 &amp;amp;&amp;amp; !isLogin ? (
    &amp;lt;h2&amp;gt;You have {messages.length} unread messages.&amp;lt;/h2&amp;gt;
  ) : (
    &amp;lt;h2&amp;gt;You don't have unread messages.&amp;lt;/h2&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is "key" prop and what is the benefit of using it in arrays of elements?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;key&lt;/code&gt; is a special attribute you &lt;strong&gt;should&lt;/strong&gt; include when mapping over arrays to render data. &lt;em&gt;Key&lt;/em&gt; prop helps React identify which items have changed, are added, or are removed.&lt;/p&gt; &lt;p&gt;Keys should be unique among its siblings. Most often we use ID from our data as &lt;em&gt;key&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const todoItems = todos.map((todo) =&amp;gt; &amp;lt;li key={todo.id}&amp;gt;{todo.text}&amp;lt;/li&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you don't have stable IDs for rendered items, you may use the item &lt;em&gt;index&lt;/em&gt; as a &lt;em&gt;key&lt;/em&gt; as a last resort:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const todoItems = todos.map((todo, index) =&amp;gt; (
  &amp;lt;li key={index}&amp;gt;{todo.text}&amp;lt;/li&amp;gt;
));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Benefits of key:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Enables React to &lt;strong&gt;efficiently update and re-render&lt;/strong&gt; components.&lt;/li&gt; 
   &lt;li&gt;Prevents unnecessary re-renders by &lt;strong&gt;reusing&lt;/strong&gt; components when possible.&lt;/li&gt; 
   &lt;li&gt;Helps &lt;strong&gt;maintain internal state&lt;/strong&gt; of list items correctly.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using &lt;em&gt;indexes&lt;/em&gt; for &lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;not recommended&lt;/strong&gt; if the order of items may change. This can negatively impact performance and may cause issues with component state.&lt;/li&gt; 
   &lt;li&gt;If you extract list item as separate component then apply &lt;em&gt;keys&lt;/em&gt; on list component instead of &lt;code&gt;li&lt;/code&gt; tag.&lt;/li&gt; 
   &lt;li&gt;There will be a warning message in the console if the &lt;code&gt;key&lt;/code&gt; prop is not present on list items.&lt;/li&gt; 
   &lt;li&gt;The key attribute accepts either string or number and internally convert it as string type.&lt;/li&gt; 
   &lt;li&gt;Don't generate the key on the fly something like &lt;code&gt;key={Math.random()}&lt;/code&gt;. Because the keys will never match up between re-renders and DOM created everytime.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; (VDOM) is a lightweight, in-memory representation of &lt;em&gt;Real DOM&lt;/em&gt; used by libraries like React to optimize UI rendering. The representation of a UI is kept in memory and synced with the "real" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How Virtual DOM works?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; works in five simple steps.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1. Initial Render&lt;/strong&gt;&lt;br /&gt; When a UI component renders for the first time, it returns JSX. React uses this structure to create a Virtual DOM tree, which is a lightweight copy of the actual DOM. This Virtual DOM is then used to build and render the Real DOM in the browser.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;2. State or Props Change&lt;/strong&gt;&lt;br /&gt; When the component's state or props change, React creates a new Virtual DOM reflecting the updated UI. However, it doesn't immediately update the Real DOM; instead, it works in memory to prepare for an efficient update.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom1.png" alt="vdom" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;3. Diffing Algorithm&lt;/strong&gt;&lt;br /&gt; React then compares the new Virtual DOM with the previous one using a process called diffing. It determines what has changed between the two versions and identifies the minimal set of updates needed.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom2.png" alt="vdom2" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;4. Reconciliation&lt;/strong&gt;&lt;br /&gt; Based on the diffing results, React decides which parts of the Real DOM should be updated. It avoids re-rendering the entire DOM and instead updates only the elements that actually changed.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom3.png" alt="vdom3" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;5. Efficient DOM Updates&lt;/strong&gt;&lt;br /&gt; This entire process‚Äîworking with the Virtual DOM, diffing, and selective updating‚Äîmakes the UI rendering much faster and more efficient than manipulating the Real DOM directly.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Shadow DOM&lt;/em&gt; is a browser technology designed primarily for scoping variables and CSS in &lt;em&gt;web components&lt;/em&gt;. The &lt;em&gt;Virtual DOM&lt;/em&gt; is a concept implemented by libraries in JavaScript on top of browser APIs.&lt;/p&gt; &lt;p&gt;The key differences in a table format shown below:&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Feature&lt;/th&gt; 
     &lt;th&gt;Shadow DOM&lt;/th&gt; 
     &lt;th&gt;Virtual DOM&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Purpose&lt;/td&gt; 
     &lt;td&gt;Encapsulation for Web Components&lt;/td&gt; 
     &lt;td&gt;Efficient UI rendering&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Managed by&lt;/td&gt; 
     &lt;td&gt;Browser&lt;/td&gt; 
     &lt;td&gt;JS frameworks (e.g., React)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;DOM Type&lt;/td&gt; 
     &lt;td&gt;Part of real DOM (scoped)&lt;/td&gt; 
     &lt;td&gt;In-memory representation&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Encapsulation&lt;/td&gt; 
     &lt;td&gt;Yes&lt;/td&gt; 
     &lt;td&gt;No&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Use Case&lt;/td&gt; 
     &lt;td&gt;Web Components, scoped styling&lt;/td&gt; 
     &lt;td&gt;UI diffing and minimal DOM updates&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Fiber?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React Fiber&lt;/strong&gt; is the &lt;strong&gt;new reconciliation engine&lt;/strong&gt; in React, introduced in React 16. It‚Äôs a complete rewrite of React‚Äôs core algorithm(old stack-based algorithm) for rendering and updating the UI. Fiber enhances React‚Äôs ability to handle &lt;strong&gt;asynchronous rendering&lt;/strong&gt;, &lt;strong&gt;prioritized updates&lt;/strong&gt;(assign priority to different types of updates), and &lt;strong&gt;interruption&lt;/strong&gt;(ability to pause, abort, or reuse work) of rendering work, enabling smoother and more responsive user interfaces.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main goal of React Fiber?&lt;/h3&gt; &lt;p&gt;The goal of &lt;em&gt;React Fiber&lt;/em&gt; is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is &lt;strong&gt;incremental rendering&lt;/strong&gt;: the ability to split rendering work into chunks and spread it out over multiple frames.&lt;/p&gt; &lt;p&gt;Its main goals are:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Incremental Rendering&lt;/strong&gt; ‚Äì Breaks work into chunks for smoother updates.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Interruptible Rendering&lt;/strong&gt; ‚Äì Pauses and resumes rendering to keep the UI responsive.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Prioritization&lt;/strong&gt; ‚Äì Handles high-priority updates (e.g. animations) before low-priority ones.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Concurrency Support&lt;/strong&gt; ‚Äì Enables working on multiple UI versions simultaneously.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Better Error Handling&lt;/strong&gt; ‚Äì Supports component-level error boundaries.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Suspense Support&lt;/strong&gt; ‚Äì Allows waiting for async data before rendering.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Improved DevTools&lt;/strong&gt; ‚Äì Enables better debugging and performance tracking.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are controlled components?&lt;/h3&gt; &lt;p&gt;A &lt;strong&gt;controlled component&lt;/strong&gt; is a React component that &lt;strong&gt;fully manages the form element's state&lt;/strong&gt;(e.g, elements like &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;)) using React's internal state mechanism. i.e, The component does not manage its own internal state ‚Äî instead, React acts as the single source of truth for form data.&lt;/p&gt; &lt;p&gt;The controlled components will be implemented using the below steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Initialize the state using &lt;code&gt;useState&lt;/code&gt; hooks in function components or inside constructor for class components.&lt;/li&gt; 
   &lt;li&gt;Set the value of the form element to the respective state variable.&lt;/li&gt; 
   &lt;li&gt;Create an event handler(&lt;code&gt;onChange&lt;/code&gt;) to handle the user input changes through &lt;code&gt;useState&lt;/code&gt;'s updater function or &lt;code&gt;setState&lt;/code&gt; from class component.&lt;/li&gt; 
   &lt;li&gt;Attach the above event handler to form element's change or click events&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; React re-renders the component every time the input value changes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For example, the name input field updates the username using &lt;code&gt;handleChange&lt;/code&gt; event handler as below,&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;import React, { useState } from "react";

function UserProfile() {
  const [username, setUsername] = useState("");

  const handleChange = (e) =&amp;gt; {
    setUsername(e.target.value);
  };

  return (
    &amp;lt;form&amp;gt;
      &amp;lt;label&amp;gt;
        Name:
        &amp;lt;input type="text" value={username} onChange={handleChange} /&amp;gt;
      &amp;lt;/label&amp;gt;
    &amp;lt;/form&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In these components, DOM does not hold the actual data instead React does.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Benefits:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Easy to implement &lt;strong&gt;validation&lt;/strong&gt;, &lt;strong&gt;conditional formatting&lt;/strong&gt;, or &lt;strong&gt;live feedback&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Full control over form data.&lt;/li&gt; 
 &lt;li&gt;Easier to test and debug because the data is centralized in the component‚Äôs state.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="22"&gt; 
 &lt;li&gt; &lt;h3&gt;What are uncontrolled components?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;Uncontrolled components&lt;/strong&gt; are form elements (like &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;) that &lt;strong&gt;manage their own state internally&lt;/strong&gt; via the &lt;strong&gt;DOM&lt;/strong&gt;, rather than through React state. You can query the DOM using a &lt;code&gt;ref&lt;/code&gt; to find its current value when you need it. This is a bit more like traditional HTML.&lt;/p&gt; &lt;p&gt;The uncontrolled components will be implemented using the below steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Create a ref using &lt;code&gt;useRef&lt;/code&gt; react hook in function component or &lt;code&gt;React.createRef()&lt;/code&gt; in class based component.&lt;/li&gt; 
   &lt;li&gt;Attach this &lt;code&gt;ref&lt;/code&gt; to the form element.&lt;/li&gt; 
   &lt;li&gt;The form element value can be accessed directly through &lt;code&gt;ref&lt;/code&gt; in event handlers or &lt;code&gt;componentDidMount&lt;/code&gt; for class components&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;In the below UserProfile component, the &lt;code&gt;username&lt;/code&gt; input is accessed using ref.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React, { useRef } from "react";

function UserProfile() {
  const usernameRef = useRef(null);

  const handleSubmit = (event) =&amp;gt; {
    event.preventDefault();
    console.log("The submitted username is: " + usernameRef.current.value);
  };

  return (
    &amp;lt;form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;label&amp;gt;
        Username:
        &amp;lt;input type="text" ref={usernameRef} /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;button type="submit"&amp;gt;Submit&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Here, DOM is in charge of the value. React only accesses the value when needed (via &lt;code&gt;ref&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Benefits:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Less boilerplate&lt;/strong&gt; ‚Äî no need for &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;onChange&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Useful for &lt;strong&gt;quick form setups&lt;/strong&gt; or when integrating with &lt;strong&gt;non-React code&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Slightly better &lt;strong&gt;performance&lt;/strong&gt; in very large forms (fewer re-renders).&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;In most cases, it's recommend to use controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.&lt;/p&gt; 
  &lt;details&gt;
   &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
   &lt;p&gt; &lt;/p&gt;
   &lt;pre&gt;&lt;code class="language-jsx"&gt;class UserProfile extends React.Component {
  constructor(props) {
    super(props);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.input = React.createRef();
  }

  handleSubmit(event) {
    alert("A name was submitted: " + this.input.current.value);
    event.preventDefault();
  }

  render() {
    return (
      &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
        &amp;lt;label&amp;gt;
          {"Name:"}
          &amp;lt;input type="text" ref={this.input} /&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;input type="submit" value="Submit" /&amp;gt;
      &amp;lt;/form&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;&lt;/p&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="23"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between createElement and cloneElement?&lt;/h3&gt; &lt;p&gt;Both &lt;code&gt;React.createElement&lt;/code&gt; and &lt;code&gt;React.cloneElement&lt;/code&gt; are used to work with React elements, but they serve different purposes.&lt;/p&gt; &lt;h4&gt;&lt;strong&gt;createElement:&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;Creates a new React element from scratch. JSX elements will be transpiled to &lt;code&gt;React.createElement()&lt;/code&gt; functions to create React elements which are going to be used for the object representation of UI. &lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;React.createElement(type, props, ...children)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;React.createElement('button', { className: 'btn' }, 'Click Me')
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;strong&gt;cloneElement:&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;The &lt;code&gt;cloneElement&lt;/code&gt; method is used to clone an existing React element and optionally adds or overrides props.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;React.cloneElement(element, newProps, ...children)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const button = &amp;lt;button className="btn"&amp;gt;Click Me&amp;lt;/button&amp;gt;;
const cloned = React.cloneElement(button, { className: 'btn-primary' });
// Result: &amp;lt;button className="btn-primary"&amp;gt;Click Me&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Lifting State Up in React?&lt;/h3&gt; &lt;p&gt;When several components need to share the same changing data then it is recommended to &lt;em&gt;lift the shared state up&lt;/em&gt; to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are Higher-Order Components?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;higher-order component&lt;/em&gt; (&lt;em&gt;HOC&lt;/em&gt;) is a function that takes a component and returns a new enhanced component with additional props, behavior, or data. It‚Äôs a design pattern based on React‚Äôs compositional nature, allowing you to reuse logic across multiple components without modifying their internals.&lt;/p&gt; &lt;p&gt;We consider HOCs &lt;strong&gt;pure components&lt;/strong&gt; because they don‚Äôt mutate or copy behavior from the original component‚Äîthey simply &lt;strong&gt;wrap it&lt;/strong&gt;, enhance it, and pass through the necessary props. The wrapped component remains decoupled and reusable.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const EnhancedComponent = higherOrderComponent(WrappedComponent);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's take an example of a &lt;code&gt;withAuth&lt;/code&gt; higher-order component (HOC) in React. This HOC will check if a user is authenticated and either render the wrapped component if authenticated or redirect (or show a message) if not.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;withAuth HOC Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from 'react';
import { Navigate } from 'react-router-dom'; // For redirection (assuming React Router v6)

const isAuthenticated = () =&amp;gt; {
  // e.g., check for a valid token in localStorage or context
  return !!localStorage.getItem('authToken');
};

function withAuth(WrappedComponent) {
  return function AuthenticatedComponent(props) {
    if (!isAuthenticated()) {
      // User is NOT authenticated, redirect to login page
      return &amp;lt;Navigate to="/login" replace /&amp;gt;;
    }

    // User is authenticated, render the wrapped component
    return &amp;lt;WrappedComponent {...props} /&amp;gt;;
  };
}

export default withAuth;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from 'react';
import withAuth from './withAuth';

function Dashboard() {
  return &amp;lt;h1&amp;gt;Welcome to the Dashboard!&amp;lt;/h1&amp;gt;;
}

// Wrap Dashboard with withAuth HOC
export default withAuth(Dashboard);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;HOC can be used for many use cases:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Code reuse, logic and bootstrap abstraction (e.g., fetching data, permissions, theming).&lt;/li&gt; 
   &lt;li&gt;Render hijacking (e.g., conditional rendering or layout changes).&lt;/li&gt; 
   &lt;li&gt;State abstraction and manipulation(e.g., handling form logic).&lt;/li&gt; 
   &lt;li&gt;Props manipulation(e.g., injecting additional props or filtering them).&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Some of the real-world examples of HOCs in react eco-system:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;connect() from react-redux&lt;/li&gt; 
   &lt;li&gt;withRouter() from React Router v5&lt;/li&gt; 
   &lt;li&gt;withTranslation() from react-i18next&lt;/li&gt; 
   &lt;li&gt;withApollo() from Apollo client&lt;/li&gt; 
   &lt;li&gt;withFormik from Formik library&lt;/li&gt; 
   &lt;li&gt;withTheme from styled components&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is children prop?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;children&lt;/code&gt; prop is a special prop in React used to pass elements between the opening and closing tags of a component. It is commonly used in layout and wrapper componnents.&lt;/p&gt; &lt;p&gt;A simple usage of children prop looks as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function MyDiv({ children }){
    return (
      &amp;lt;div&amp;gt;
        {children}
      &amp;lt;/div&amp;gt;;
    );
}

export default function Greeting() {
  return (
    &amp;lt;MyDiv&amp;gt;
      &amp;lt;span&amp;gt;{"Hello"}&amp;lt;/span&amp;gt;
      &amp;lt;span&amp;gt;{"World"}&amp;lt;/span&amp;gt;
    &amp;lt;/MyDiv&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here, everything inside &lt;code&gt;&amp;lt;MyDiv&amp;gt;...&amp;lt;/MyDiv&amp;gt;&lt;/code&gt; is passed as children to the custom div component.&lt;/p&gt; &lt;p&gt;The children can be text, JSX elements, fragments, arrays and functions(for advance use case like render props).&lt;/p&gt; 
  &lt;details&gt;
   &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
   &lt;p&gt; &lt;/p&gt;
   &lt;pre&gt;&lt;code class="language-jsx"&gt;const MyDiv = React.createClass({
  render: function () {
    return &amp;lt;div&amp;gt;{this.props.children}&amp;lt;/div&amp;gt;;
  },
});

ReactDOM.render(
  &amp;lt;MyDiv&amp;gt;
    &amp;lt;span&amp;gt;{"Hello"}&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;{"World"}&amp;lt;/span&amp;gt;
  &amp;lt;/MyDiv&amp;gt;,
  node
);
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;&lt;/p&gt; 
  &lt;/details&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are several methods available in the legacy React API to work with this prop. These include &lt;code&gt;React.Children.map&lt;/code&gt;, &lt;code&gt;React.Children.forEach&lt;/code&gt;, &lt;code&gt;React.Children.count&lt;/code&gt;, &lt;code&gt;React.Children.only&lt;/code&gt;, &lt;code&gt;React.Children.toArray&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to write comments in React?&lt;/h3&gt; &lt;p&gt;The comments in React/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Single-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div&amp;gt;
  {/* Single-line comments(In vanilla JavaScript, the single-line comments are represented by double slash(//)) */}
  {`Welcome ${user}, let's play React`}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Multi-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div&amp;gt;
  {/* Multi-line comments for more than
   one line */}
  {`Welcome ${user}, let's play React`}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use &lt;code&gt;//&lt;/code&gt; and &lt;code&gt;/* */&lt;/code&gt; in JS logic, hooks, and functions.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is reconciliation?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Reconciliation&lt;/code&gt; is the process through which React updates the Browser DOM and makes React work faster. React use a &lt;code&gt;diffing algorithm&lt;/code&gt; so that component updates are predictable and faster. React would first calculate the difference between the &lt;code&gt;real DOM&lt;/code&gt; and the copy of DOM &lt;code&gt;(Virtual DOM)&lt;/code&gt; when there's an update of components. React stores a copy of Browser DOM which is called &lt;code&gt;Virtual DOM&lt;/code&gt;. When we make changes or add data, React creates a new Virtual DOM and compares it with the previous one. This comparison is done by &lt;code&gt;Diffing Algorithm&lt;/code&gt;. Now React compares the Virtual DOM with Real DOM. It finds out the changed nodes and updates only the changed nodes in Real DOM leaving the rest nodes as it is. This process is called &lt;em&gt;Reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Does the lazy function support named exports?&lt;/h3&gt; &lt;p&gt;No, currently &lt;code&gt;React.lazy&lt;/code&gt; function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don‚Äôt pull unused components. Let's take a component file which exports multiple named components,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// MoreComponents.js
export const SomeComponent = /* ... */;
export const UnusedComponent = /* ... */;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and reexport &lt;code&gt;MoreComponents.js&lt;/code&gt; components in an intermediate file &lt;code&gt;IntermediateComponent.js&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// IntermediateComponent.js
export { SomeComponent as default } from "./MoreComponents.js";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can import the module using lazy function as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import React, { lazy } from "react";
const SomeComponent = lazy(() =&amp;gt; import("./IntermediateComponent.js"));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why React uses &lt;code&gt;className&lt;/code&gt; over &lt;code&gt;class&lt;/code&gt; attribute?&lt;/h3&gt; &lt;p&gt;React uses &lt;strong&gt;className&lt;/strong&gt; instead of &lt;strong&gt;class&lt;/strong&gt; because of a JavaScript naming conflict with the class keyword.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;class&lt;/code&gt; is a reserved keyword in JavaScript In JavaScript, class is used to define ES6 classes:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;class Person {
  constructor(name) {
    this.name = name;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you try to use class as a variable or property name, it will throw a syntax error. Since JSX is just JavaScript with XML-like syntax, using class directly in JSX would break the parser.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;JSX Is JavaScript&lt;/p&gt; &lt;p&gt;When you write JSX like this:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div class="btn"&amp;gt;Click&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It will be compiled to:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;React.createElement('div', { class: 'btn' }, 'Click');
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But &lt;code&gt;class&lt;/code&gt; is invalid in this object literal context (since it clashes with the JS keyword), hence React instead uses className.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div className="btn"&amp;gt;Click&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which compiles to:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;React.createElement('div', { className: 'btn' }, 'Click');
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;React then translates &lt;code&gt;className&lt;/code&gt; to&lt;code&gt; class&lt;/code&gt; in the final HTML DOM.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Aligns with DOM APIs In vanilla JavaScript, you interact with element classes using:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;element.className = 'my-class';
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;React follows this convention, staying consistent with the DOM API's property name rather than HTML‚Äôs attribute.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are fragments?&lt;/h3&gt; &lt;p&gt;It's a common pattern or practice in React for a component to return multiple elements. &lt;em&gt;Fragments&lt;/em&gt; let you group a list of children without adding extra nodes to the DOM. You need to use either &lt;code&gt;&amp;lt;Fragment&amp;gt;&lt;/code&gt; or a shorter syntax having empty tag (&lt;code&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Below is the example of how to use fragment inside &lt;em&gt;Story&lt;/em&gt; component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function Story({ title, description, date }) {
  return (
    &amp;lt;Fragment&amp;gt;
      &amp;lt;h2&amp;gt;{title}&amp;lt;/h2&amp;gt;
      &amp;lt;p&amp;gt;{description}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{date}&amp;lt;/p&amp;gt;
    &amp;lt;/Fragment&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is also possible to render list of fragments inside a loop with the mandatory &lt;strong&gt;key&lt;/strong&gt; attribute supplied.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function StoryBook() {
  return stories.map((story) =&amp;gt; (
    &amp;lt;Fragment key={story.id}&amp;gt;
      &amp;lt;h2&amp;gt;{story.title}&amp;lt;/h2&amp;gt;
      &amp;lt;p&amp;gt;{story.description}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{story.date}&amp;lt;/p&amp;gt;
    &amp;lt;/Fragment&amp;gt;
  ));
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Usually, you don't need to use &lt;code&gt;&amp;lt;Fragment&amp;gt;&lt;/code&gt; until there is a need of &lt;em&gt;key&lt;/em&gt; attribute. The usage of shorter syntax looks like below.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function Story({ title, description, date }) {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h2&amp;gt;{title}&amp;lt;/h2&amp;gt;
      &amp;lt;p&amp;gt;{description}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{date}&amp;lt;/p&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why fragments are better than container divs?&lt;/h3&gt; &lt;p&gt;Below are the list of reasons to prefer fragments over container DOM elements,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Fragments are a bit faster and use less memory by not creating an extra DOM node. This only has a real benefit on very large and deep trees.&lt;/li&gt; 
   &lt;li&gt;Some CSS mechanisms like &lt;em&gt;Flexbox&lt;/em&gt; and &lt;em&gt;CSS Grid&lt;/em&gt; have a special parent-child relationships, and adding divs in the middle makes it hard to keep the desired layout.&lt;/li&gt; 
   &lt;li&gt;The DOM Inspector is less cluttered.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are portals in React?&lt;/h3&gt; &lt;p&gt;A Portal is a React feature that enables rendering children into a DOM node that exists outside the parent component's DOM hierarchy, while still preserving the React component hierarchy. Portals help avoid CSS stacking issues‚Äîfor example, elements with position: fixed may not behave as expected inside a parent with transform. Portals solve this by rendering content (like modals or tooltips) outside such constrained DOM contexts.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;ReactDOM.createPortal(child, container);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;child&lt;/code&gt;: Any valid React node (e.g., JSX, string, fragment).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;container&lt;/code&gt;: A real DOM node (e.g., &lt;code&gt;document.getElementById('modal-root')&lt;/code&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Even though the content renders elsewhere in the DOM, it still behaves like a normal child in React. It has access to context, state, and event handling.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example:- Modal:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function Modal({ children }) {
  return ReactDOM.createPortal(
    &amp;lt;div className="modal"&amp;gt;{children}&amp;lt;/div&amp;gt;,
    document.body)
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code will render the modal content into the body element in the HTML, not inside the component's usual location.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are stateless components?&lt;/h3&gt; &lt;p&gt;If the behaviour of a component is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the &lt;code&gt;this&lt;/code&gt; keyword altogether.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are stateful components?&lt;/h3&gt; &lt;p&gt;If the behaviour of a component is dependent on the &lt;em&gt;state&lt;/em&gt; of the component then it can be termed as stateful component. These &lt;em&gt;stateful components&lt;/em&gt; are either function components with hooks or &lt;em&gt;class components&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Let's take an example of function stateful component which update the state based on click event,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import React, {useState} from 'react';

const App = (props) =&amp;gt; {
const [count, setCount] = useState(0);
handleIncrement() {
  setCount(count+1);
}

return (
  &amp;lt;&amp;gt;
    &amp;lt;button onClick={handleIncrement}&amp;gt;Increment&amp;lt;/button&amp;gt;
    &amp;lt;span&amp;gt;Counter: {count}&amp;lt;/span&amp;gt;
  &amp;lt;/&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;details&gt;
   &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
   &lt;p&gt; The equivalent class stateful component with a state that gets initialized in the `constructor`. &lt;/p&gt;
   &lt;pre&gt;&lt;code class="language-jsx"&gt;class App extends Component {
  constructor(props) {
    super(props);
    this.state = { count: 0 };
  }

  handleIncrement() {
    setState({ count: this.state.count + 1 });
  }

  render() {
    &amp;lt;&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; this.handleIncrement}&amp;gt;Increment&amp;lt;/button&amp;gt;
      &amp;lt;span&amp;gt;Count: {count}&amp;lt;/span&amp;gt;
    &amp;lt;/&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;&lt;/p&gt; 
  &lt;/details&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to apply validation on props in React?&lt;/h3&gt; &lt;p&gt;When the application is running in &lt;em&gt;development mode&lt;/em&gt;, React will automatically check all props that we set on components to make sure they have &lt;em&gt;correct type&lt;/em&gt;. If the type is incorrect, React will generate warning messages in the console. It's disabled in &lt;em&gt;production mode&lt;/em&gt; due to performance impact. The mandatory props are defined with &lt;code&gt;isRequired&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The set of predefined prop types:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.number&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.string&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.array&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.object&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.func&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.node&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.element&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.bool&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.symbol&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.any&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;We can define &lt;code&gt;propTypes&lt;/code&gt; for &lt;code&gt;User&lt;/code&gt; component as below:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from "react";
import PropTypes from "prop-types";

class User extends React.Component {
  static propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired,
  };

  render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;h1&amp;gt;{`Welcome, ${this.props.name}`}&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;{`Age, ${this.props.age}`}&amp;lt;/h2&amp;gt;
      &amp;lt;/&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In React v15.5 &lt;em&gt;PropTypes&lt;/em&gt; were moved from &lt;code&gt;React.PropTypes&lt;/code&gt; to &lt;code&gt;prop-types&lt;/code&gt; library.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from "react";
import PropTypes from "prop-types";

function User({ name, age }) {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;{`Welcome, ${name}`}&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;{`Age, ${age}`}&amp;lt;/h2&amp;gt;
    &amp;lt;/&amp;gt;
  );
}

User.propTypes = {
  name: PropTypes.string.isRequired,
  age: PropTypes.number.isRequired,
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of React?&lt;/h3&gt; &lt;p&gt;Below are the list of main advantages of React,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Increases the application's performance with &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/li&gt; 
   &lt;li&gt;JSX makes code easy to read and write.&lt;/li&gt; 
   &lt;li&gt;It renders both on client and server side (&lt;em&gt;SSR&lt;/em&gt;).&lt;/li&gt; 
   &lt;li&gt;Easy to integrate with frameworks (Angular, Backbone) since it is only a view library.&lt;/li&gt; 
   &lt;li&gt;Easy to write unit and integration tests with tools such as Jest.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the limitations of React?&lt;/h3&gt; &lt;p&gt;Apart from the advantages, there are few limitations of React too,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React is just a view library, not a full framework.&lt;/li&gt; 
   &lt;li&gt;There is a learning curve for beginners who are new to web development.&lt;/li&gt; 
   &lt;li&gt;Integrating React into a traditional MVC framework requires some additional configuration.&lt;/li&gt; 
   &lt;li&gt;The code complexity increases with inline templating and JSX.&lt;/li&gt; 
   &lt;li&gt;Too many smaller components leading to over engineering or boilerplate.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the recommended ways for static type checking?&lt;/h3&gt; &lt;p&gt;Normally we use &lt;em&gt;PropTypes library&lt;/em&gt; (&lt;code&gt;React.PropTypes&lt;/code&gt; moved to a &lt;code&gt;prop-types&lt;/code&gt; package since React v15.5) for &lt;em&gt;type checking&lt;/em&gt; in the React applications. For large code bases, it is recommended to use &lt;em&gt;static type checkers&lt;/em&gt; such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of &lt;code&gt;react-dom&lt;/code&gt; package?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-dom&lt;/code&gt; package provides &lt;em&gt;DOM-specific methods&lt;/em&gt; that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;hydrate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;unmountComponentAtNode()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;findDOMNode()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;createPortal()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ReactDOMServer?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;ReactDOMServer&lt;/code&gt; object enables you to render components to static markup (typically used on node server). This object is mainly used for &lt;em&gt;server-side rendering&lt;/em&gt; (SSR). The following methods can be used in both the server and browser environments:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;renderToString()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;renderToStaticMarkup()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call &lt;code&gt;renderToString&lt;/code&gt; to render your root component to a string, which you then send as response.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// using Express
import { renderToString } from "react-dom/server";
import MyPage from "./MyPage";

app.get("/", (req, res) =&amp;gt; {
  res.write(
    "&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;My Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;"
  );
  res.write('&amp;lt;div id="content"&amp;gt;');
  res.write(renderToString(&amp;lt;MyPage /&amp;gt;));
  res.write("&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;");
  res.end();
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to use innerHTML in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute is React's replacement for using &lt;code&gt;innerHTML&lt;/code&gt; in the browser DOM. Just like &lt;code&gt;innerHTML&lt;/code&gt;, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a &lt;code&gt;__html&lt;/code&gt; object as key and HTML text as value.&lt;/p&gt; &lt;p&gt;In this example MyComponent uses &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute for setting HTML markup:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function createMarkup() {
  return { __html: "First &amp;amp;middot; Second" };
}

function MyComponent() {
  return &amp;lt;div dangerouslySetInnerHTML={createMarkup()} /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to use styles in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;style&lt;/code&gt; attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const divStyle = {
  color: "blue",
  backgroundImage: "url(" + imgUrl + ")",
};

function HelloWorldComponent() {
  return &amp;lt;div style={divStyle}&amp;gt;Hello World!&amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. &lt;code&gt;node.style.backgroundImage&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How events are different in React?&lt;/h3&gt; &lt;p&gt;Handling events in React elements has some syntactic differences:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React event handlers are named using camelCase, rather than lowercase.&lt;/li&gt; 
   &lt;li&gt;With JSX you pass a function as the event handler, rather than a string.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the impact of indexes as keys?&lt;/h3&gt; &lt;p&gt;Keys should be stable, predictable, and unique so that React can keep track of elements.&lt;/p&gt; &lt;p&gt;In the below code snippet each element's key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do and creates confusing bugs in the application.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;{
  todos.map((todo, index) =&amp;gt; &amp;lt;Todo {...todo} key={index} /&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you use element data for unique key, assuming &lt;code&gt;todo.id&lt;/code&gt; is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;{
  todos.map((todo) =&amp;gt; &amp;lt;Todo {...todo} key={todo.id} /&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you don't specify &lt;code&gt;key&lt;/code&gt; prop at all, React will use index as a key's value while iterating over an array of data.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you conditionally render components?&lt;/h3&gt; &lt;p&gt;In some cases you want to render different components depending on some state. JSX does not render &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, so you can use conditional &lt;em&gt;short-circuiting&lt;/em&gt; to render a given part of your component only if a certain condition is true.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const MyComponent = ({ name, address }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;
    {address &amp;amp;&amp;amp; &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;}
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need an &lt;code&gt;if-else&lt;/code&gt; condition then use &lt;em&gt;ternary operator&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const MyComponent = ({ name, address }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;
    {address ? &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt; : &amp;lt;p&amp;gt;{"Address is not available"}&amp;lt;/p&amp;gt;}
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why we need to be careful when spreading props on DOM elements?&lt;/h3&gt; &lt;p&gt;When we &lt;em&gt;spread props&lt;/em&gt; we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with &lt;code&gt;...rest&lt;/code&gt; operator, so it will add only required props.&lt;/p&gt; &lt;p&gt;For example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const ComponentA = () =&amp;gt; (
  &amp;lt;ComponentB isDisplay={true} className={"componentStyle"} /&amp;gt;
);

const ComponentB = ({ isDisplay, ...domProps }) =&amp;gt; (
  &amp;lt;div {...domProps}&amp;gt;{"ComponentB"}&amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you memoize a component?&lt;/h3&gt; &lt;p&gt;There are memoize libraries available which can be used on function components.&lt;/p&gt; &lt;p&gt;For example &lt;code&gt;moize&lt;/code&gt; library can memoize the component in another component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import moize from "moize";
import Component from "./components/Component"; // this module exports a non-memoized component

const MemoizedFoo = moize.react(Component);

const Consumer = () =&amp;gt; {
  &amp;lt;div&amp;gt;
    {"I will memoize the following entry:"}
    &amp;lt;MemoizedFoo /&amp;gt;
  &amp;lt;/div&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Since React v16.6.0, we have a &lt;code&gt;React.memo&lt;/code&gt;. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const MemoComponent = React.memo(function MemoComponent(props) {
  /* render using props */
});
OR;
export default React.memo(MyFunctionComponent);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How you implement Server Side Rendering or SSR?&lt;/h3&gt; &lt;p&gt;React is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import ReactDOMServer from "react-dom/server";
import App from "./App";

ReactDOMServer.renderToString(&amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to enable production mode in React?&lt;/h3&gt; &lt;p&gt;You should use Webpack's &lt;code&gt;DefinePlugin&lt;/code&gt; method to set &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt;, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify's dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Do Hooks replace render props and higher order components?&lt;/h3&gt; &lt;p&gt;Both render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a switching component?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;switching component&lt;/em&gt; is a component that renders one of many components. We need to use object to map prop values to components.&lt;/p&gt; &lt;p&gt;For example, a switching component to display different pages based on &lt;code&gt;page&lt;/code&gt; prop:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import HomePage from "./HomePage";
import AboutPage from "./AboutPage";
import ServicesPage from "./ServicesPage";
import ContactPage from "./ContactPage";

const PAGES = {
  home: HomePage,
  about: AboutPage,
  services: ServicesPage,
  contact: ContactPage,
};

const Page = (props) =&amp;gt; {
  const Handler = PAGES[props.page] || ContactPage;

  return &amp;lt;Handler {...props} /&amp;gt;;
};

// The keys of the PAGES object can be used in the prop types to catch dev-time errors.
Page.propTypes = {
  page: PropTypes.oneOf(Object.keys(PAGES)).isRequired,
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are React Mixins?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Mixins&lt;/em&gt; are a way to totally separate components to have a common functionality. Mixins &lt;strong&gt;should not be used&lt;/strong&gt; and can be replaced with &lt;em&gt;higher-order components&lt;/em&gt; or &lt;em&gt;decorators&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;One of the most commonly used mixins is &lt;code&gt;PureRenderMixin&lt;/code&gt;. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const PureRenderMixin = require("react-addons-pure-render-mixin");

const Button = React.createClass({
  mixins: [PureRenderMixin],
  // ...
});
&lt;/code&gt;&lt;/pre&gt; 
  &lt;!-- TODO: mixins are deprecated --&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the Pointer Events supported in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Pointer Events&lt;/em&gt; provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don't correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the &lt;em&gt;Pointer Events&lt;/em&gt; specification.&lt;/p&gt; &lt;p&gt;The following event types are now available in &lt;em&gt;React DOM&lt;/em&gt;:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;onPointerDown&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerMove&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerUp&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerCancel&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onGotPointerCapture&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onLostPointerCapture&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerEnter&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerLeave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerOver&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerOut&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why should component names start with capital letter?&lt;/h3&gt; &lt;p&gt;If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as an unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function SomeComponent {
  // Code goes here
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can define function component whose name starts with lowercase letter, but when it's imported it should have a capital letter. Here lowercase is fine:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function myComponent {
  render() {
    return &amp;lt;div /&amp;gt;;
  }
}

export default myComponent;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While when imported in another file it should start with capital letter:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import MyComponent from "./myComponent";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Are custom DOM attributes supported in React v16?&lt;/h3&gt; &lt;p&gt;Yes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn't recognize, React would just skip it.&lt;/p&gt; &lt;p&gt;For example, let's take a look at the below attribute:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div mycustomattribute={"something"} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Would render an empty div to the DOM with React v15:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In React v16 any unknown attributes will end up in the DOM:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div mycustomattribute="something" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to loop inside JSX?&lt;/h3&gt; &lt;p&gt;You can simply use &lt;code&gt;Array.prototype.map&lt;/code&gt; with ES6 &lt;em&gt;arrow function&lt;/em&gt; syntax.&lt;/p&gt; &lt;p&gt;For example, the &lt;code&gt;items&lt;/code&gt; array of objects is mapped into an array of components:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;tbody&amp;gt;
  {items.map((item) =&amp;gt; (
    &amp;lt;SomeComponent key={item.id} name={item.name} /&amp;gt;
  ))}
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can't iterate using &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;tbody&amp;gt;
  for (let i = 0; i &amp;lt; items.length; i++) {
    &amp;lt;SomeComponent key={items[i].id} name={items[i].name} /&amp;gt;
  }
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is because JSX tags are transpiled into &lt;em&gt;function calls&lt;/em&gt;, and you can't use statements inside expressions. This may change thanks to &lt;code&gt;do&lt;/code&gt; expressions which are &lt;em&gt;stage 1 proposal&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access props in attribute quotes?&lt;/h3&gt; &lt;p&gt;React (or JSX) doesn't support variable interpolation inside an attribute value. The below representation won't work:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;img className="image" src="images/{this.props.image}" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can put any JS expression inside curly braces as the entire attribute value. So the below expression works:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;img className="image" src={"images/" + this.props.image} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;em&gt;template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;img className="image" src={`images/${this.props.image}`} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is React proptype array with shape?&lt;/h3&gt; &lt;p&gt;If you want to pass an array of objects to a component with a particular shape then use &lt;code&gt;React.PropTypes.shape()&lt;/code&gt; as an argument to &lt;code&gt;React.PropTypes.arrayOf()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;ReactComponent.propTypes = {
  arrayWithShape: React.PropTypes.arrayOf(
    React.PropTypes.shape({
      color: React.PropTypes.string.isRequired,
      fontSize: React.PropTypes.number.isRequired,
    })
  ).isRequired,
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to conditionally apply class attributes?&lt;/h3&gt; &lt;p&gt;You shouldn't use curly braces inside quotes because it is going to be evaluated as a string.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div className="btn-panel {this.props.visible ? 'show' : 'hidden'}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead you need to move curly braces outside (don't forget to include spaces between class names):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div className={'btn-panel ' + (this.props.visible ? 'show' : 'hidden')}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div className={`btn-panel ${this.props.visible ? 'show' : 'hidden'}`}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React and ReactDOM?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react&lt;/code&gt; package contains &lt;code&gt;React.createElement()&lt;/code&gt;, &lt;code&gt;React.Component&lt;/code&gt;, &lt;code&gt;React.Children&lt;/code&gt;, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The &lt;code&gt;react-dom&lt;/code&gt; package contains &lt;code&gt;ReactDOM.render()&lt;/code&gt;, and in &lt;code&gt;react-dom/server&lt;/code&gt; we have &lt;em&gt;server-side rendering&lt;/em&gt; support with &lt;code&gt;ReactDOMServer.renderToString()&lt;/code&gt; and &lt;code&gt;ReactDOMServer.renderToStaticMarkup()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why ReactDOM is separated from React?&lt;/h3&gt; &lt;p&gt;The React team worked on extracting all DOM-related features into a separate library called &lt;em&gt;ReactDOM&lt;/em&gt;. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, &lt;code&gt;react-native&lt;/code&gt;, &lt;code&gt;react-art&lt;/code&gt;, &lt;code&gt;react-canvas&lt;/code&gt;, and &lt;code&gt;react-three&lt;/code&gt;, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.&lt;/p&gt; &lt;p&gt;To build more environments that React can render to, React team planned to split the main React package into two: &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;. This paves the way to writing components that can be shared between the web version of React and React Native.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to use React label element?&lt;/h3&gt; &lt;p&gt;If you try to render a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element bound to a text input using the standard &lt;code&gt;for&lt;/code&gt; attribute, then it produces HTML missing that attribute and prints a warning to the console.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;label for={'user'}&amp;gt;{'User'}&amp;lt;/label&amp;gt;
&amp;lt;input type={'text'} id={'user'} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since &lt;code&gt;for&lt;/code&gt; is a reserved keyword in JavaScript, use &lt;code&gt;htmlFor&lt;/code&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;label htmlFor={'user'}&amp;gt;{'User'}&amp;lt;/label&amp;gt;
&amp;lt;input type={'text'} id={'user'} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to combine multiple inline style objects?&lt;/h3&gt; &lt;p&gt;You can use &lt;em&gt;spread operator&lt;/em&gt; in regular React:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;button style={{ ...styles.panel.button, ...styles.panel.submitButton }}&amp;gt;
  {"Submit"}
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you're using React Native then you can use the array notation:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;button style={[styles.panel.button, styles.panel.submitButton]}&amp;gt;
  {"Submit"}
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to re-render the view when the browser is resized?&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;useState&lt;/code&gt; hook to manage the width and height state variables, and the &lt;code&gt;useEffect&lt;/code&gt; hook to add and remove the &lt;code&gt;resize&lt;/code&gt; event listener. The &lt;code&gt;[]&lt;/code&gt; dependency array passed to useEffect ensures that the effect only runs once (on mount) and not on every re-render.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import React, { useState, useEffect } from "react";
function WindowDimensions() {
  const [dimensions, setDimensions] = useState({
    width: window.innerWidth,
    height: window.innerHeight,
  });

  useEffect(() =&amp;gt; {
    function handleResize() {
      setDimensions({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    }
    window.addEventListener("resize", handleResize);
    return () =&amp;gt; window.removeEventListener("resize", handleResize);
  }, []);

  return (
    &amp;lt;span&amp;gt;
      {dimensions.width} x {dimensions.height}
    &amp;lt;/span&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;details&gt; 
   &lt;summary&gt;&lt;h4&gt;Using Class Component&lt;/h4&gt;&lt;/summary&gt; 
   &lt;p&gt;You can listen to the &lt;code&gt;resize&lt;/code&gt; event in &lt;code&gt;componentDidMount()&lt;/code&gt; and then update the dimensions (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;). You should remove the listener in &lt;code&gt;componentWillUnmount()&lt;/code&gt; method.&lt;/p&gt; 
   &lt;pre&gt;&lt;code class="language-javascript"&gt;class WindowDimensions extends React.Component {
  constructor(props) {
    super(props);
    this.updateDimensions = this.updateDimensions.bind(this);
  }

  componentWillMount() {
    this.updateDimensions();
  }

  componentDidMount() {
    window.addEventListener("resize", this.updateDimensions);
  }

  componentWillUnmount() {
    window.removeEventListener("resize", this.updateDimensions);
  }

  updateDimensions() {
    this.setState({
      width: window.innerWidth,
      height: window.innerHeight,
    });
  }

  render() {
    return (
      &amp;lt;span&amp;gt;
        {this.state.width} x {this.state.height}
      &amp;lt;/span&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="66"&gt; 
 &lt;li&gt; &lt;h3&gt;How to pretty print JSON with React?&lt;/h3&gt; &lt;p&gt;We can use &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag so that the formatting of the &lt;code&gt;JSON.stringify()&lt;/code&gt; is retained:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const data = { name: "John", age: 42 };

function User {
    return &amp;lt;pre&amp;gt;{JSON.stringify(data, null, 2)}&amp;lt;/pre&amp;gt;;
}

const container = createRoot(document.getElementById("container"));

container.render(&amp;lt;User /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;details&gt;
   &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
   &lt;p&gt; &lt;/p&gt;
   &lt;pre&gt;&lt;code class="language-jsx"&gt;const data = { name: "John", age: 42 };

class User extends React.Component {
  render() {
    return &amp;lt;pre&amp;gt;{JSON.stringify(data, null, 2)}&amp;lt;/pre&amp;gt;;
  }
}

React.render(&amp;lt;User /&amp;gt;, document.getElementById("container"));
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;&lt;/p&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="67"&gt; 
 &lt;li&gt; &lt;h3&gt;Why can't you update props in React?&lt;/h3&gt; &lt;p&gt;The React philosophy is that props should be &lt;em&gt;immutable&lt;/em&gt;(read only) and &lt;em&gt;top-down&lt;/em&gt;. This means that a parent can send any prop values to a child, but the child can't modify received props.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="68"&gt; 
 &lt;li&gt; &lt;h3&gt;How to focus an input element on page load?&lt;/h3&gt; &lt;p&gt;You need to use &lt;code&gt;useEffect&lt;/code&gt; hook to set focus on input field during page load time for functional component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React, { useEffect, useRef } from "react";

const App = () =&amp;gt; {
  const inputElRef = useRef(null);

  useEffect(() =&amp;gt; {
    inputElRef.current.focus();
  }, []);

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;input defaultValue={"Won't focus"} /&amp;gt;
      &amp;lt;input ref={inputElRef} defaultValue={"Will focus"} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById("app"));
&lt;/code&gt;&lt;/pre&gt; 
  &lt;details&gt;
   &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
   &lt;p&gt; You can do it by creating _ref_ for `input` element and using it in `componentDidMount()`: &lt;/p&gt;
   &lt;pre&gt;&lt;code class="language-jsx"&gt;class App extends React.Component {
  componentDidMount() {
    this.nameInput.focus();
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;input defaultValue={"Won't focus"} /&amp;gt;
        &amp;lt;input
          ref={(input) =&amp;gt; (this.nameInput = input)}
          defaultValue={"Will focus"}
        /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById("app"));
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;&lt;/p&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="69"&gt; 
 &lt;li&gt; &lt;h3&gt;How can we find the version of React at runtime in the browser?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;React.version&lt;/code&gt; to get the version.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const REACT_VERSION = React.version;

ReactDOM.render(
  &amp;lt;div&amp;gt;{`React version: ${REACT_VERSION}`}&amp;lt;/div&amp;gt;,
  document.getElementById("app")
);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="70"&gt; 
 &lt;li&gt; &lt;h3&gt;How to add Google Analytics for React Router?&lt;/h3&gt; &lt;p&gt;Add a listener on the &lt;code&gt;history&lt;/code&gt; object to record each page view:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;history.listen(function (location) {
  window.ga("set", "page", location.pathname + location.search);
  window.ga("send", "pageview", location.pathname + location.search);
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="71"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you apply vendor prefixes to inline styles in React?&lt;/h3&gt; &lt;p&gt;React &lt;em&gt;does not&lt;/em&gt; apply &lt;em&gt;vendor prefixes&lt;/em&gt; automatically. You need to add vendor prefixes manually.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div
  style={{
    transform: "rotate(90deg)",
    WebkitTransform: "rotate(90deg)", // note the capital 'W' here
    msTransform: "rotate(90deg)", // 'ms' is the only lowercase vendor prefix
  }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="72"&gt; 
 &lt;li&gt; &lt;h3&gt;How to import and export components using React and ES6?&lt;/h3&gt; &lt;p&gt;You should use default for exporting the components&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import User from "user";

export default function MyProfile {
    return &amp;lt;User type="customer"&amp;gt;//...&amp;lt;/User&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;details&gt;
   &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
   &lt;p&gt; ```jsx harmony import React from "react"; import User from "user"; &lt;/p&gt;
   &lt;p&gt;export default class MyProfile extends React.Component { render() { return 
    &lt;user type="customer"&gt;
     //...
    &lt;/user&gt;; } }&lt;/p&gt; 
   &lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;

With the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components.
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="73"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the exceptions on React component naming?&lt;/h3&gt; &lt;p&gt;The component names should start with an uppercase letter but there are few exceptions to this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names. For example, the below tag can be compiled to a valid component,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;     render() {
          return (
            &amp;lt;obj.component/&amp;gt; // `React.createElement(obj.component)`
          )
    }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use async/await in plain React?&lt;/h3&gt; &lt;p&gt;Yes, you can use &lt;code&gt;async/await&lt;/code&gt; in plain React, as long as your JavaScript environment supports ES2017+. Nowadays most modern browsers and build tools support ES2017+ version. If you're using &lt;strong&gt;Create React App&lt;/strong&gt;, &lt;strong&gt;Next.js&lt;/strong&gt;, &lt;strong&gt;Remix&lt;/strong&gt;, or any modern React setup, &lt;code&gt;async/await&lt;/code&gt; is supported out of the box through &lt;strong&gt;Babel&lt;/strong&gt;.&lt;/p&gt; &lt;h3&gt;Example Usage&lt;/h3&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { useEffect, useState } from 'react';

function UserProfile() {
  const [user, setUser] = useState(null);

  useEffect(() =&amp;gt; {
    const fetchUser = async () =&amp;gt; {
      const response = await fetch('/api/user');
      const data = await response.json();
      setUser(data);
    };

    fetchUser();
  }, []);

  return user ? &amp;lt;div&amp;gt;Hello, {user.name}&amp;lt;/div&amp;gt; : &amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But If you're not using a bundler like &lt;strong&gt;Webpack or Babel&lt;/strong&gt;, you will need &lt;em&gt;Babel&lt;/em&gt; and &lt;a href="https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator"&gt;transform-async-to-generator&lt;/a&gt; plugin. However, React Native ships with Babel and a set of transforms.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="75"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common folder structures for React?&lt;/h3&gt; &lt;p&gt;There are two common practices for React project file structure.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Grouping by features or routes:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;One common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;common/
‚îú‚îÄ Avatar.js
‚îú‚îÄ Avatar.css
‚îú‚îÄ APIUtils.js
‚îî‚îÄ APIUtils.test.js
feed/
‚îú‚îÄ index.js
‚îú‚îÄ Feed.js
‚îú‚îÄ Feed.css
‚îú‚îÄ FeedStory.js
‚îú‚îÄ FeedStory.test.js
‚îî‚îÄ FeedAPI.js
profile/
‚îú‚îÄ index.js
‚îú‚îÄ Profile.js
‚îú‚îÄ ProfileHeader.js
‚îú‚îÄ ProfileHeader.css
‚îî‚îÄ ProfileAPI.js
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Grouping by file type:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Another popular way to structure projects is to group similar files together.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;api/
‚îú‚îÄ APIUtils.js
‚îú‚îÄ APIUtils.test.js
‚îú‚îÄ ProfileAPI.js
‚îî‚îÄ UserAPI.js
components/
‚îú‚îÄ Avatar.js
‚îú‚îÄ Avatar.css
‚îú‚îÄ Feed.js
‚îú‚îÄ Feed.css
‚îú‚îÄ FeedStory.js
‚îú‚îÄ FeedStory.test.js
‚îú‚îÄ Profile.js
‚îú‚îÄ ProfileHeader.js
‚îî‚îÄ ProfileHeader.css
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="76"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the popular packages for animation?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Transition Group&lt;/em&gt; and &lt;em&gt;React Motion&lt;/em&gt; are popular animation packages in React ecosystem.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="77"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of styles modules?&lt;/h3&gt; &lt;p&gt;It is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules.&lt;/p&gt; &lt;p&gt;For example, these styles could be extracted into a separate component:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;export const colors = {
  white,
  black,
  blue,
};

export const space = [0, 8, 16, 32, 64];
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then imported individually in other components:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { space, colors } from "./styles";
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="78"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the popular React-specific linters?&lt;/h3&gt; &lt;p&gt;ESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called &lt;code&gt;eslint-plugin-react&lt;/code&gt;. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types.&lt;/p&gt; &lt;p&gt;Another popular plugin is &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt;, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with &lt;code&gt;alt&lt;/code&gt; text and &lt;code&gt;tabindex&lt;/code&gt;, for example, will not be picked up by regular plugins.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;React Router&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="79"&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Router?&lt;/h3&gt; &lt;p&gt;React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what's being displayed on the page.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="80"&gt; 
 &lt;li&gt; &lt;h3&gt;How React Router is different from history library?&lt;/h3&gt; &lt;p&gt;React Router is a wrapper around the &lt;code&gt;history&lt;/code&gt; library which handles interaction with the browser's &lt;code&gt;window.history&lt;/code&gt; with its browser and hash histories. It also provides memory history which is useful for environments that don't have global history, such as mobile app development (React Native) and unit testing with Node.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="81"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components of React Router v6?&lt;/h3&gt; &lt;p&gt;React Router v6 provides below 4 &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;:Uses the HTML5 history API for standard web apps.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;HashRouter&amp;gt;&lt;/code&gt;:Uses hash-based routing for static servers.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;MemoryRouter&amp;gt;&lt;/code&gt;:Uses in-memory routing for testing and non-browser environments.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;StaticRouter&amp;gt;&lt;/code&gt;:Provides static routing for server-side rendering (SSR).&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The above components will create &lt;em&gt;browser&lt;/em&gt;, &lt;em&gt;hash&lt;/em&gt;, &lt;em&gt;memory&lt;/em&gt; and &lt;em&gt;static&lt;/em&gt; history instances. React Router v6 makes the properties and methods of the &lt;code&gt;history&lt;/code&gt; instance associated with your router available through the context in the &lt;code&gt;router&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="82"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods of &lt;code&gt;history&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;A history instance has two methods for navigation purpose.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;push()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;If you think of the history as an array of visited locations, &lt;code&gt;push()&lt;/code&gt; will add a new location to the array and &lt;code&gt;replace()&lt;/code&gt; will replace the current location in the array with the new one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="83"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you programmatically navigate using React Router v4?&lt;/h3&gt; &lt;p&gt;There are three different ways to achieve programmatic routing/navigation within components.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using the &lt;code&gt;withRouter()&lt;/code&gt; higher-order function:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;withRouter()&lt;/code&gt; higher-order function will inject the history object as a prop of the component. This object provides &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods to avoid the usage of context.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { withRouter } from "react-router-dom"; // this also works with 'react-router-native'

const Button = withRouter(({ history }) =&amp;gt; (
  &amp;lt;button
    type="button"
    onClick={() =&amp;gt; {
      history.push("/new-location");
    }}
  &amp;gt;
    {"Click Me!"}
  &amp;lt;/button&amp;gt;
));
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component and render props pattern:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component passes the same props as &lt;code&gt;withRouter()&lt;/code&gt;, so you will be able to access the history methods through the history prop.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { Route } from "react-router-dom";

const Button = () =&amp;gt; (
  &amp;lt;Route
    render={({ history }) =&amp;gt; (
      &amp;lt;button
        type="button"
        onClick={() =&amp;gt; {
          history.push("/new-location");
        }}
      &amp;gt;
        {"Click Me!"}
      &amp;lt;/button&amp;gt;
    )}
  /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using context:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This option is not recommended and treated as unstable API.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const Button = (props, context) =&amp;gt; (
  &amp;lt;button
    type="button"
    onClick={() =&amp;gt; {
      context.history.push("/new-location");
    }}
  &amp;gt;
    {"Click Me!"}
  &amp;lt;/button&amp;gt;
);

Button.contextTypes = {
  history: React.PropTypes.shape({
    push: React.PropTypes.func.isRequired,
  }),
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="84"&gt; 
 &lt;li&gt; &lt;h3&gt;How to get query parameters in React Router v4?&lt;/h3&gt; &lt;p&gt;The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const queryString = require("query-string");
const parsed = queryString.parse(props.location.search);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use &lt;code&gt;URLSearchParams&lt;/code&gt; if you want something native:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const params = new URLSearchParams(props.location.search);
const foo = params.get("name");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should use a &lt;em&gt;polyfill&lt;/em&gt; for IE11.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="85"&gt; 
 &lt;li&gt; &lt;h3&gt;Why you get "Router may have only one child element" warning?&lt;/h3&gt; &lt;p&gt;You have to wrap your Route's in a &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block because &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; is unique in that it renders a route exclusively.&lt;/p&gt; &lt;p&gt;At first you need to add &lt;code&gt;Switch&lt;/code&gt; to your imports:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { Switch, Router, Route } from "react-router";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then define the routes within &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;Router&amp;gt;
  &amp;lt;Switch&amp;gt;
    &amp;lt;Route {/* ... */} /&amp;gt;
    &amp;lt;Route {/* ... */} /&amp;gt;
  &amp;lt;/Switch&amp;gt;
&amp;lt;/Router&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="86"&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass params to &lt;code&gt;history.push&lt;/code&gt; method in React Router v4?&lt;/h3&gt; &lt;p&gt;While navigating you can pass props to the &lt;code&gt;history&lt;/code&gt; object:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;this.props.history.push({
  pathname: "/template",
  search: "?name=sudheer",
  state: { detail: response.data },
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;search&lt;/code&gt; property is used to pass query params in &lt;code&gt;push()&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="87"&gt; 
 &lt;li&gt; &lt;h3&gt;How to implement &lt;em&gt;default&lt;/em&gt; or &lt;em&gt;NotFound&lt;/em&gt; page?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; renders the first child &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; that matches. A &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; with no path always matches. So you just need to simply drop path attribute as below&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;Switch&amp;gt;
  &amp;lt;Route exact path="/" component={Home} /&amp;gt;
  &amp;lt;Route path="/user" component={User} /&amp;gt;
  &amp;lt;Route component={NotFound} /&amp;gt;
&amp;lt;/Switch&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="88"&gt; 
 &lt;li&gt; &lt;h3&gt;How to get history on React Router v4?&lt;/h3&gt; &lt;p&gt;Below are the list of steps to get history object on React Router v4,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create a module that exports a &lt;code&gt;history&lt;/code&gt; object and import this module across the project.&lt;/p&gt; &lt;p&gt;For example, create &lt;code&gt;history.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { createBrowserHistory } from "history";

export default createBrowserHistory({
  /* pass a configuration object here if needed */
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You should use the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; component instead of built-in routers. Import the above &lt;code&gt;history.js&lt;/code&gt; inside &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { Router } from "react-router-dom";
import history from "./history";
import App from "./App";

ReactDOM.render(
  &amp;lt;Router history={history}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Router&amp;gt;,
  holder
);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use push method of &lt;code&gt;history&lt;/code&gt; object similar to built-in history object:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// some-other-file.js
import history from "./history";

history.push("/go-here");
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="89"&gt; 
 &lt;li&gt; &lt;h3&gt;How to perform automatic redirect after login?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-router&lt;/code&gt; package provides &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; component in React Router. Rendering a &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { Redirect } from "react-router";

export default function Login {
    if (this.state.isLoggedIn === true) {
      return &amp;lt;Redirect to="/your/redirect/page" /&amp;gt;;
    } else {
      return &amp;lt;div&amp;gt;{"Login Please"}&amp;lt;/div&amp;gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;details&gt;
   &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
   &lt;p&gt; &lt;/p&gt;
   &lt;pre&gt;&lt;code class="language-jsx"&gt;import React, { Component } from "react";
import { Redirect } from "react-router";

export default class LoginComponent extends Component {
  render() {
    if (this.state.isLoggedIn === true) {
      return &amp;lt;Redirect to="/your/redirect/page" /&amp;gt;;
    } else {
      return &amp;lt;div&amp;gt;{"Login Please"}&amp;lt;/div&amp;gt;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;&lt;/p&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;React Internationalization&lt;/h2&gt; 
&lt;ol start="90"&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;React Intl&lt;/em&gt; library makes internationalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of &lt;em&gt;FormatJS&lt;/em&gt; which provides bindings to React via its components and API.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="91"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of React Intl?&lt;/h3&gt; &lt;p&gt;Below are the main features of React Intl,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Display numbers with separators.&lt;/li&gt; 
   &lt;li&gt;Display dates and times correctly.&lt;/li&gt; 
   &lt;li&gt;Display dates relative to "now".&lt;/li&gt; 
   &lt;li&gt;Pluralize labels in strings.&lt;/li&gt; 
   &lt;li&gt;Support for 150+ languages.&lt;/li&gt; 
   &lt;li&gt;Runs in the browser and Node.&lt;/li&gt; 
   &lt;li&gt;Built on standards.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="92"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the two ways of formatting in React Intl?&lt;/h3&gt; &lt;p&gt;The library provides two ways to format strings, numbers, and dates:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using react components:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;FormattedMessage
  id={"account"}
  defaultMessage={"The amount is less than minimum balance."}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using an API:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const messages = defineMessages({
  accountMessage: {
    id: "account",
    defaultMessage: "The amount is less than minimum balance.",
  },
});

formatMessage(messages.accountMessage);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="93"&gt; 
 &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;&amp;lt;FormattedMessage&amp;gt;&lt;/code&gt; as placeholder using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Formatted... /&amp;gt;&lt;/code&gt; components from &lt;code&gt;react-intl&lt;/code&gt; return elements, not plain text, so they can't be used for placeholders, alt text, etc. In that case, you should use lower level API &lt;code&gt;formatMessage()&lt;/code&gt;. You can inject the &lt;code&gt;intl&lt;/code&gt; object into your component using &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component and then format the message using &lt;code&gt;formatMessage()&lt;/code&gt; available on that object.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from "react";
import { injectIntl, intlShape } from "react-intl";

const MyComponent = ({ intl }) =&amp;gt; {
  const placeholder = intl.formatMessage({ id: "messageId" });
  return &amp;lt;input placeholder={placeholder} /&amp;gt;;
};

MyComponent.propTypes = {
  intl: intlShape.isRequired,
};

export default injectIntl(MyComponent);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="94"&gt; 
 &lt;li&gt; &lt;h3&gt;How to access current locale with React Intl?&lt;/h3&gt; &lt;p&gt;You can get the current locale in any component of your application using &lt;code&gt;injectIntl()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { injectIntl, intlShape } from "react-intl";

const MyComponent = ({ intl }) =&amp;gt; (
  &amp;lt;div&amp;gt;{`The current locale is ${intl.locale}`}&amp;lt;/div&amp;gt;
);

MyComponent.propTypes = {
  intl: intlShape.isRequired,
};

export default injectIntl(MyComponent);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="95"&gt; 
 &lt;li&gt; &lt;h3&gt;How to format date using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component will give you access to the &lt;code&gt;formatDate()&lt;/code&gt; method via the props in your component. The method is used internally by instances of &lt;code&gt;FormattedDate&lt;/code&gt; and it returns the string representation of the formatted date.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { injectIntl, intlShape } from "react-intl";

const stringDate = this.props.intl.formatDate(date, {
  year: "numeric",
  month: "numeric",
  day: "numeric",
});

const MyComponent = ({ intl }) =&amp;gt; (
  &amp;lt;div&amp;gt;{`The formatted date is ${stringDate}`}&amp;lt;/div&amp;gt;
);

MyComponent.propTypes = {
  intl: intlShape.isRequired,
};

export default injectIntl(MyComponent);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Testing&lt;/h2&gt; 
&lt;ol start="96"&gt; 
 &lt;li&gt; &lt;h3&gt;What is Shallow Renderer in React testing?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Shallow rendering&lt;/em&gt; is useful for writing unit test cases in React. It lets you render a component &lt;em&gt;one level deep&lt;/em&gt; and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered.&lt;/p&gt; &lt;p&gt;For example, if you have the following component:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;span className={"heading"}&amp;gt;{"Title"}&amp;lt;/span&amp;gt;
      &amp;lt;span className={"description"}&amp;gt;{"Description"}&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then you can assert as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import ShallowRenderer from "react-test-renderer/shallow";

// in your test
const renderer = new ShallowRenderer();
renderer.render(&amp;lt;MyComponent /&amp;gt;);

const result = renderer.getRenderOutput();

expect(result.type).toBe("div");
expect(result.props.children).toEqual([
  &amp;lt;span className={"heading"}&amp;gt;{"Title"}&amp;lt;/span&amp;gt;,
  &amp;lt;span className={"description"}&amp;gt;{"Description"}&amp;lt;/span&amp;gt;,
]);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="97"&gt; 
 &lt;li&gt; &lt;h3&gt;What is &lt;code&gt;TestRenderer&lt;/code&gt; package in React?&lt;/h3&gt; &lt;p&gt;This package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or &lt;code&gt;jsdom&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import TestRenderer from "react-test-renderer";

const Link = ({ page, children }) =&amp;gt; &amp;lt;a href={page}&amp;gt;{children}&amp;lt;/a&amp;gt;;

const testRenderer = TestRenderer.create(
  &amp;lt;Link page={"https://www.facebook.com/"}&amp;gt;{"Facebook"}&amp;lt;/Link&amp;gt;
);

console.log(testRenderer.toJSON());
// {
//   type: 'a',
//   props: { href: 'https://www.facebook.com/' },
//   children: [ 'Facebook' ]
// }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="98"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of ReactTestUtils package?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;ReactTestUtils&lt;/em&gt; are provided in the &lt;code&gt;with-addons&lt;/code&gt; package and allow you to perform actions against a simulated DOM for the purpose of unit testing.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="99"&gt; 
 &lt;li&gt; &lt;h3&gt;What is Jest?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Jest&lt;/em&gt; is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a &lt;code&gt;jsdom&lt;/code&gt; environment. It's often used for testing components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="100"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of Jest over Jasmine?&lt;/h3&gt; &lt;p&gt;There are couple of advantages compared to Jasmine:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically finds tests to execute in your source code.&lt;/li&gt; 
   &lt;li&gt;Automatically mocks dependencies when running your tests.&lt;/li&gt; 
   &lt;li&gt;Allows you to test asynchronous code synchronously.&lt;/li&gt; 
   &lt;li&gt;Runs your tests with a fake DOM implementation (via &lt;code&gt;jsdom&lt;/code&gt;) so that your tests can be run on the command line.&lt;/li&gt; 
   &lt;li&gt;Runs tests in parallel processes so that they finish sooner.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="101"&gt; 
 &lt;li&gt; &lt;h3&gt;Give a simple example of Jest test case&lt;/h3&gt; &lt;p&gt;Let's write a test for a function that adds two numbers in &lt;code&gt;sum.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const sum = (a, b) =&amp;gt; a + b;

export default sum;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Create a file named &lt;code&gt;sum.test.js&lt;/code&gt; which contains actual test:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import sum from "./sum";

test("adds 1 + 2 to equal 3", () =&amp;gt; {
  expect(sum(1, 2)).toBe(3);
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then add the following section to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
  "scripts": {
    "test": "jest"
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, run &lt;code&gt;yarn test&lt;/code&gt; or &lt;code&gt;npm test&lt;/code&gt; and Jest will print a result:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ yarn test
PASS ./sum.test.js
‚úì adds 1 + 2 to equal 3 (2ms)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Redux&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="102"&gt; 
 &lt;li&gt; &lt;h3&gt;What is flux?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Flux&lt;/strong&gt; is an &lt;strong&gt;application architecture&lt;/strong&gt; (not a framework or library) designed by Facebook to manage &lt;strong&gt;data flow&lt;/strong&gt; in React applications. It was created as an alternative to the traditional &lt;strong&gt;MVC (Model-View-Controller)&lt;/strong&gt; pattern, and it emphasizes a &lt;strong&gt;unidirectional data flow&lt;/strong&gt; to make state changes more predictable and easier to debug.&lt;/p&gt; &lt;p&gt;Flux complements React by organizing the way data moves through your application, especially in large-scale or complex projects.&lt;/p&gt; &lt;h4&gt;Core Concepts of Flux&lt;/h4&gt; &lt;p&gt;Flux operates using &lt;strong&gt;four key components&lt;/strong&gt;, each with a specific responsibility:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Plain JavaScript objects or functions that describe &lt;em&gt;what happened&lt;/em&gt; (e.g., user interactions or API responses).&lt;/li&gt; 
     &lt;li&gt;Example: &lt;code&gt;{ type: 'ADD_TODO', payload: 'Buy milk' }&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Dispatcher&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;A central hub that receives actions and &lt;strong&gt;dispatches&lt;/strong&gt; them to the appropriate stores.&lt;/li&gt; 
     &lt;li&gt;There is &lt;strong&gt;only one dispatcher&lt;/strong&gt; in a Flux application.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Stores&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Hold the &lt;strong&gt;application state&lt;/strong&gt; and business logic.&lt;/li&gt; 
     &lt;li&gt;Respond to actions from the dispatcher and update themselves accordingly.&lt;/li&gt; 
     &lt;li&gt;They &lt;strong&gt;emit change events&lt;/strong&gt; that views can listen to.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Views (React Components)&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Subscribe to stores and &lt;strong&gt;re-render&lt;/strong&gt; when the data changes.&lt;/li&gt; 
     &lt;li&gt;They can also trigger new actions (e.g., on user input).&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/flux.png" alt="flux" /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="103"&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux?&lt;/h3&gt; Redux is a predictable state container for JavaScript applications, most commonly used with React. It helps you manage and centralize your application‚Äôs state in a single source of truth, enabling easier debugging, testing, and maintenance‚Äîespecially in large or complex applications. Redux core is tiny library(about 2.5kB gzipped) and has no dependencies.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="104"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the core principles of Redux?&lt;/h3&gt; &lt;p&gt;Redux follows three fundamental principles:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Single source of truth:&lt;/strong&gt; The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const store = createStore(reducer);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;State is read-only:&lt;/strong&gt; The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const action = { type: 'INCREMENT' };
store.dispatch(action);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="3"&gt; 
   &lt;li&gt;&lt;strong&gt;Changes are made with pure functions(Reducers):&lt;/strong&gt; To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function counter(state = 0, action) {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1;
    case 'DECREMENT':
      return state - 1;
    default:
      return state;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="105"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the downsides of Redux compared to Flux?&lt;/h3&gt; &lt;p&gt;While Redux offers a powerful and predictable state management solution, it comes with a few trade-offs when compared to Flux. These include:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Immutability is essential&lt;/strong&gt;&lt;br /&gt; Redux enforces a strict immutability model for state updates, which differs from Flux‚Äôs more relaxed approach. This means you must avoid mutating state directly. Many Redux-related libraries assume immutability, so your team must be disciplined in writing pure update logic. You can use tools like &lt;code&gt;redux-immutable-state-invariant&lt;/code&gt;, &lt;code&gt;Immer&lt;/code&gt;, or &lt;code&gt;Immutable.js&lt;/code&gt; to help enforce this practice, especially during development.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Careful selection of complementary packages&lt;/strong&gt;&lt;br /&gt; Redux is more minimal by design and provides extension points such as middleware and store enhancers. This has led to a large ecosystem, but it also means you must thoughtfully choose and configure additional packages for features like undo/redo, persistence, or form handling‚Äîsomething Flux explicitly leaves out but may be simpler to manage in smaller setups.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Limited static type integration&lt;/strong&gt;&lt;br /&gt; While Flux has mature support for static type checking with tools like Flow, Redux‚Äôs type integration is less seamless. Although TypeScript is commonly used with Redux now, early Flow support was limited, and more boilerplate was required for static type safety. This may affect teams that rely heavily on type systems for large codebases.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="106"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;mapStateToProps()&lt;/code&gt; is a utility which helps your component get updated state (which is updated by some other components):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const mapStateToProps = (state) =&amp;gt; {
  return {
    todos: getVisibleTodos(state.todos, state.visibilityFilter),
  };
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;mapDispatchToProps()&lt;/code&gt; is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    onTodoClick: (id) =&amp;gt; {
      dispatch(toggleTodo(id));
    },
  };
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is recommended to always use the ‚Äúobject shorthand‚Äù form for the &lt;code&gt;mapDispatchToProps&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Redux wraps it in another function that looks like (‚Ä¶args) =&amp;gt; dispatch(onTodoClick(‚Ä¶args)), and pass that wrapper function as a prop to your component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const mapDispatchToProps = {
  onTodoClick,
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="107"&gt; 
 &lt;li&gt; &lt;h3&gt;Can I dispatch an action in reducer?&lt;/h3&gt; &lt;p&gt;Dispatching an action within a reducer is an &lt;strong&gt;anti-pattern&lt;/strong&gt;. Your reducer should be &lt;em&gt;without side effects&lt;/em&gt;, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="108"&gt; 
 &lt;li&gt; &lt;h3&gt;How to access Redux store outside a component?&lt;/h3&gt; &lt;p&gt;You just need to export the store from the module where it created with &lt;code&gt;createStore()&lt;/code&gt;. Also, it shouldn't pollute the global window object.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;store = createStore(myReducer);

export default store;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="109"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the drawbacks of MVW pattern?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;DOM manipulation is very expensive which causes applications to behave slow and inefficient.&lt;/li&gt; 
   &lt;li&gt;Due to circular dependencies, a complicated model was created around models and views.&lt;/li&gt; 
   &lt;li&gt;Lot of data changes happens for collaborative applications(like Google Docs).&lt;/li&gt; 
   &lt;li&gt;No way to do undo (travel back in time) easily without adding so much extra code.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="110"&gt; 
 &lt;li&gt; &lt;h3&gt;Are there any similarities between Redux and RxJS?&lt;/h3&gt; &lt;p&gt;These libraries are very different for very different purposes, but there are some vague similarities.&lt;/p&gt; &lt;p&gt;Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="111"&gt; 
 &lt;li&gt; &lt;h3&gt;How to reset state in Redux?&lt;/h3&gt; &lt;p&gt;You need to write a &lt;em&gt;root reducer&lt;/em&gt; in your application which delegate handling the action to the reducer generated by &lt;code&gt;combineReducers()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take &lt;code&gt;rootReducer()&lt;/code&gt; to return the initial state after &lt;code&gt;USER_LOGOUT&lt;/code&gt; action. As we know, reducers are supposed to return the initial state when they are called with &lt;code&gt;undefined&lt;/code&gt; as the first argument, no matter the action.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const appReducer = combineReducers({
  /* your app's top-level reducers */
});

const rootReducer = (state, action) =&amp;gt; {
  if (action.type === "USER_LOGOUT") {
    state = undefined;
  }

  return appReducer(state, action);
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case of using &lt;code&gt;redux-persist&lt;/code&gt;, you may also need to clean your storage. &lt;code&gt;redux-persist&lt;/code&gt; keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const appReducer = combineReducers({
  /* your app's top-level reducers */
});

const rootReducer = (state, action) =&amp;gt; {
  if (action.type === "USER_LOGOUT") {
    Object.keys(state).forEach((key) =&amp;gt; {
      storage.removeItem(`persist:${key}`);
    });

    state = undefined;
  }

  return appReducer(state, action);
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="112"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React context and React Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;strong&gt;Context&lt;/strong&gt; in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for.&lt;/p&gt; &lt;p&gt;Whereas &lt;strong&gt;Redux&lt;/strong&gt; is much more powerful and provides a large number of features that the Context API doesn't provide. Also, React Redux uses context internally but it doesn't expose this fact in the public API.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="113"&gt; 
 &lt;li&gt; &lt;h3&gt;Why are Redux state functions called reducers?&lt;/h3&gt; &lt;p&gt;Reducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could &lt;em&gt;reduce&lt;/em&gt; a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="114"&gt; 
 &lt;li&gt; &lt;h3&gt;How to make AJAX request in Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;redux-thunk&lt;/code&gt; middleware which allows you to define async actions.&lt;/p&gt; &lt;p&gt;Let's take an example of fetching specific account as an AJAX call using &lt;em&gt;fetch API&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;export function fetchAccount(id) {
  return (dispatch) =&amp;gt; {
    dispatch(setLoadingAccountState()); // Show a loading spinner
    fetch(`/account/${id}`, (response) =&amp;gt; {
      dispatch(doneFetchingAccount()); // Hide loading spinner
      if (response.status === 200) {
        dispatch(setAccount(response.json)); // Use a normal function to set the received state
      } else {
        dispatch(someError);
      }
    });
  };
}

function setAccount(data) {
  return { type: "SET_Account", data: data };
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="115"&gt; 
 &lt;li&gt; &lt;h3&gt;Should I keep all component's state in Redux store?&lt;/h3&gt; &lt;p&gt;Keep your data in the Redux store, and the UI related state internally in the component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="116"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the proper way to access Redux store?&lt;/h3&gt; &lt;p&gt;The best way to access your store in a component is to use the &lt;code&gt;connect()&lt;/code&gt; function, that creates a new component that wraps around your existing one. This pattern is called &lt;em&gt;Higher-Order Components&lt;/em&gt;, and is generally the preferred way of extending a component's functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.&lt;/p&gt; &lt;p&gt;Let's take an example of &lt;code&gt;&amp;lt;FilterLink&amp;gt;&lt;/code&gt; component using connect:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { connect } from "react-redux";
import { setVisibilityFilter } from "../actions";
import Link from "../components/Link";

const mapStateToProps = (state, ownProps) =&amp;gt; ({
  active: ownProps.filter === state.visibilityFilter,
});

const mapDispatchToProps = (dispatch, ownProps) =&amp;gt; ({
  onClick: () =&amp;gt; dispatch(setVisibilityFilter(ownProps.filter)),
});

const FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link);

export default FilterLink;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Due to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using &lt;code&gt;connect()&lt;/code&gt; over accessing the store directly (using context API).&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function MyComponent {
  someMethod() {
    doSomethingWith(this.context.store);
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="117"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between component and container in React Redux?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Component&lt;/strong&gt; is a class or function component that describes the presentational part of your application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; is an informal term for a component that is connected to a Redux store. Containers &lt;em&gt;subscribe&lt;/em&gt; to Redux state updates and &lt;em&gt;dispatch&lt;/em&gt; actions, and they usually don't render DOM elements; they delegate rendering to presentational child components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="118"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the constants in Redux?&lt;/h3&gt; &lt;p&gt;Constants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos ‚Äì in which case, you will get a &lt;code&gt;ReferenceError&lt;/code&gt; immediately.&lt;/p&gt; &lt;p&gt;Normally we will save them in a single file (&lt;code&gt;constants.js&lt;/code&gt; or &lt;code&gt;actionTypes.js&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;export const ADD_TODO = "ADD_TODO";
export const DELETE_TODO = "DELETE_TODO";
export const EDIT_TODO = "EDIT_TODO";
export const COMPLETE_TODO = "COMPLETE_TODO";
export const COMPLETE_ALL = "COMPLETE_ALL";
export const CLEAR_COMPLETED = "CLEAR_COMPLETED";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In Redux, you use them in two places:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;During action creation:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let's take &lt;code&gt;actions.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { ADD_TODO } from "./actionTypes";

export function addTodo(text) {
  return { type: ADD_TODO, text };
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;In reducers:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let's create &lt;code&gt;reducer.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { ADD_TODO } from "./actionTypes";

export default (state = [], action) =&amp;gt; {
  switch (action.type) {
    case ADD_TODO:
      return [
        ...state,
        {
          text: action.text,
          completed: false,
        },
      ];
    default:
      return state;
  }
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="119"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to write &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are a few ways of binding &lt;em&gt;action creators&lt;/em&gt; to &lt;code&gt;dispatch()&lt;/code&gt; in &lt;code&gt;mapDispatchToProps()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({
  action: () =&amp;gt; dispatch(action()),
});
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({
  action: bindActionCreators(action, dispatch),
});
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const mapDispatchToProps = { action };
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The third option is just a shorthand for the first one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="120"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of the &lt;code&gt;ownProps&lt;/code&gt; parameter in &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;If the &lt;code&gt;ownProps&lt;/code&gt; parameter is specified, React Redux will pass the props that were passed to the component into your &lt;em&gt;connect&lt;/em&gt; functions. So, if you use a connected component:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import ConnectedComponent from "./containers/ConnectedComponent";

&amp;lt;ConnectedComponent user={"john"} /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;ownProps&lt;/code&gt; inside your &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt; functions will be an object:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;{
  user: "john";
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use this object to decide what to return from those functions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="121"&gt; 
 &lt;li&gt; &lt;h3&gt;How to structure Redux top level directories?&lt;/h3&gt; &lt;p&gt;Most of the applications has several top-level directories as below:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt;: Used for &lt;em&gt;dumb&lt;/em&gt; components unaware of Redux.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Used for &lt;em&gt;smart&lt;/em&gt; components connected to Redux.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;: Used for all action creators, where file names correspond to part of the app.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Reducers&lt;/strong&gt;: Used for all reducers, where files name correspond to state key.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: Used for store initialization.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;This structure works well for small and medium size apps.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="122"&gt; 
 &lt;li&gt; &lt;h3&gt;What is redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;redux-saga&lt;/code&gt; is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.&lt;/p&gt; &lt;p&gt;It is available in NPM:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ npm install --save redux-saga
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="123"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the mental model of redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Saga&lt;/em&gt; is like a separate thread in your application, that's solely responsible for side effects. &lt;code&gt;redux-saga&lt;/code&gt; is a redux &lt;em&gt;middleware&lt;/em&gt;, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="124"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; in redux-saga?&lt;/h3&gt; &lt;p&gt;Both &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; are effect creator functions. &lt;code&gt;call()&lt;/code&gt; function is used to create effect description, which instructs middleware to call the promise. &lt;code&gt;put()&lt;/code&gt; function creates an effect, which instructs middleware to dispatch an action to the store.&lt;/p&gt; &lt;p&gt;Let's take example of how these effects work for fetching particular user data.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function* fetchUserSaga(action) {
  // `call` function accepts rest arguments, which will be passed to `api.fetchUser` function.
  // Instructing middleware to call promise, it resolved value will be assigned to `userData` variable
  const userData = yield call(api.fetchUser, action.userId);

  // Instructing middleware to dispatch corresponding action.
  yield put({
    type: "FETCH_USER_SUCCESS",
    userData,
  });
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="125"&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux Thunk?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Thunk&lt;/em&gt; middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods &lt;code&gt;dispatch()&lt;/code&gt; and &lt;code&gt;getState()&lt;/code&gt; as parameters.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="126"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;redux-saga&lt;/code&gt; and &lt;code&gt;redux-thunk&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;Redux Thunk&lt;/em&gt; and &lt;em&gt;Redux Saga&lt;/em&gt; take care of dealing with side effects. In most of the scenarios, Thunk uses &lt;em&gt;Promises&lt;/em&gt; to deal with them, whereas Saga uses &lt;em&gt;Generators&lt;/em&gt;. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="127"&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux DevTools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux DevTools&lt;/em&gt; is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don't want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="128"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the features of Redux DevTools?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux DevTools are below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Lets you inspect every state and action payload.&lt;/li&gt; 
   &lt;li&gt;Lets you go back in time by &lt;em&gt;cancelling&lt;/em&gt; actions.&lt;/li&gt; 
   &lt;li&gt;If you change the reducer code, each &lt;em&gt;staged&lt;/em&gt; action will be re-evaluated.&lt;/li&gt; 
   &lt;li&gt;If the reducers throw, you will see during which action this happened, and what the error was.&lt;/li&gt; 
   &lt;li&gt;With &lt;code&gt;persistState()&lt;/code&gt; store enhancer, you can persist debug sessions across page reloads.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="129"&gt; 
 &lt;li&gt; &lt;h3&gt;What are Redux selectors and why use them?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Selectors&lt;/em&gt; are functions that take Redux state as an argument and return some data to pass to the component.&lt;/p&gt; &lt;p&gt;For example, to get user details from the state:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const getUserData = (state) =&amp;gt; state.user.data;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These selectors have two main benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The selector can compute derived data, allowing Redux to store the minimal possible state&lt;/li&gt; 
   &lt;li&gt;The selector is not recomputed unless one of its arguments changes&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="130"&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux Form?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Form&lt;/em&gt; works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="131"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of Redux Form?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux Form are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Field values persistence via Redux store.&lt;/li&gt; 
   &lt;li&gt;Validation (sync/async) and submission.&lt;/li&gt; 
   &lt;li&gt;Formatting, parsing and normalization of field values.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="132"&gt; 
 &lt;li&gt; &lt;h3&gt;How to add multiple middlewares to Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;applyMiddleware()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, you can add &lt;code&gt;redux-thunk&lt;/code&gt; and &lt;code&gt;logger&lt;/code&gt; passing them as arguments to &lt;code&gt;applyMiddleware()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { createStore, applyMiddleware } from "redux";
const createStoreWithMiddleware = applyMiddleware(
  ReduxThunk,
  logger
)(createStore);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="133"&gt; 
 &lt;li&gt; &lt;h3&gt;How to set initial state in Redux?&lt;/h3&gt; &lt;p&gt;You need to pass initial state as second argument to createStore:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const rootReducer = combineReducers({
  todos: todos,
  visibilityFilter: visibilityFilter,
});

const initialState = {
  todos: [{ id: 123, name: "example", completed: false }],
};

const store = createStore(rootReducer, initialState);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="134"&gt; 
 &lt;li&gt; &lt;h3&gt;How Relay is different from Redux?&lt;/h3&gt; &lt;p&gt;Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via &lt;em&gt;GraphQL&lt;/em&gt; queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an action in Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Actions&lt;/em&gt; are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.&lt;/p&gt; &lt;p&gt;For example, let's take an action which represents adding a new todo item:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{
  type: ADD_TODO,
  text: 'Add todo item'
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;React Native&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="136"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React Native and React?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;React Native&lt;/strong&gt; is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="137"&gt; 
 &lt;li&gt; &lt;h3&gt;How to test React Native apps?&lt;/h3&gt; &lt;p&gt;React Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (&lt;a href="https://expo.io"&gt;https://expo.io&lt;/a&gt;) Where it syncs using QR code, your mobile and computer should be in same wireless network.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="138"&gt; 
 &lt;li&gt; &lt;h3&gt;How to do logging in React Native?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;console.log&lt;/code&gt;, &lt;code&gt;console.warn&lt;/code&gt;, etc. As of React Native v0.29 you can simply run the following to see logs in the console:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ react-native log-ios
$ react-native log-android
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="139"&gt; 
 &lt;li&gt; &lt;h3&gt;How to debug your React Native?&lt;/h3&gt; &lt;p&gt;Follow the below steps to debug React Native app:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Run your application in the iOS simulator.&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;Command + D&lt;/code&gt; and a webpage should open up at &lt;code&gt;http://localhost:8081/debugger-ui&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Enable &lt;em&gt;Pause On Caught Exceptions&lt;/em&gt; for a better debugging experience.&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;Command + Option + I&lt;/code&gt; to open the Chrome Developer tools, or open it via &lt;code&gt;View&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer Tools&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;You should now be able to debug as you normally would.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React supported libraries &amp;amp; Integration&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="140"&gt; 
 &lt;li&gt; &lt;h3&gt;What is reselect and how it works?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Reselect&lt;/em&gt; is a &lt;strong&gt;selector library&lt;/strong&gt; (for Redux) which uses &lt;em&gt;memoization&lt;/em&gt; concept. It was originally written to compute derived data from Redux-like applications state, but it can't be tied to any architecture or library.&lt;/p&gt; &lt;p&gt;Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the same inputs are provided twice in a row, Reselect returns the cached output. It's memoization and cache are fully customizable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="141"&gt; 
 &lt;li&gt; &lt;h3&gt;What is Flow?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flow&lt;/em&gt; is a &lt;em&gt;static type checker&lt;/em&gt; designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving &lt;code&gt;null&lt;/code&gt;, unlike most type systems.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="142"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Flow and PropTypes?&lt;/h3&gt; &lt;p&gt;Flow is a &lt;em&gt;static analysis tool&lt;/em&gt; (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.&lt;/p&gt; &lt;p&gt;PropTypes is a &lt;em&gt;basic type checker&lt;/em&gt; (runtime checker) which has been patched onto React. It can't check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="143"&gt; 
 &lt;li&gt; &lt;h3&gt;How to use Font Awesome icons in React?&lt;/h3&gt; &lt;p&gt;The below steps followed to include Font Awesome in React:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Install &lt;code&gt;font-awesome&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ npm install --save font-awesome
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Import &lt;code&gt;font-awesome&lt;/code&gt; in your &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import "font-awesome/css/font-awesome.min.css";
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Add Font Awesome classes in &lt;code&gt;className&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function MyComponent {
  return &amp;lt;div&amp;gt;&amp;lt;i className={'fa fa-spinner'} /&amp;gt;&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="144"&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Dev Tools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Developer Tools&lt;/em&gt; let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native).&lt;/p&gt; &lt;p&gt;The official extensions available for different browsers or environments.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Chrome extension&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Firefox extension&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Standalone app&lt;/strong&gt; (Safari, React Native, etc)&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="145"&gt; 
 &lt;li&gt; &lt;h3&gt;Why is DevTools not loading in Chrome for local files?&lt;/h3&gt; &lt;p&gt;If you opened a local HTML file in your browser (&lt;code&gt;file://...&lt;/code&gt;) then you must first open &lt;em&gt;Chrome Extensions&lt;/em&gt; and check &lt;code&gt;Allow access to file URLs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="146"&gt; 
 &lt;li&gt; &lt;h3&gt;How to use Polymer in React?&lt;/h3&gt; &lt;p&gt;You need to follow below steps to use Polymer in React,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create a Polymer element:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;link
  rel="import"
  href="../../bower_components/polymer/polymer.html"
/&amp;gt;;
Polymer({
  is: "calendar-element",
  ready: function () {
    this.textContent = "I am a calendar";
  },
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Create the Polymer component HTML tag by importing it in a HTML document, e.g. import it in the &lt;code&gt;index.html&lt;/code&gt; of your React application:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;link
  rel="import"
  href="./src/polymer-components/calendar-element.html"
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Use that element in the JSX file:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;export default function MyComponent {
  return &amp;lt;calendar-element /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="147"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of React over Vue.js?&lt;/h3&gt; &lt;p&gt;React has the following advantages over Vue.js:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Gives more flexibility in large apps developing.&lt;/li&gt; 
   &lt;li&gt;Easier to test.&lt;/li&gt; 
   &lt;li&gt;Suitable for mobile apps creating.&lt;/li&gt; 
   &lt;li&gt;More information and solutions available.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of advantages are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="148"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React and Angular?&lt;/h3&gt; &lt;p&gt;Let's see the difference between React and Angular in a table format.&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;React&lt;/th&gt; 
     &lt;th&gt;Angular&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React is a library and has only the View layer&lt;/td&gt; 
     &lt;td&gt;Angular is a framework and has complete MVC functionality&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React handles rendering on the server side&lt;/td&gt; 
     &lt;td&gt;AngularJS renders only on the client side but Angular 2 and above renders on the server side&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React uses JSX that looks like HTML in JS which can be confusing&lt;/td&gt; 
     &lt;td&gt;Angular follows the template approach for HTML, which makes code shorter and easy to understand&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React Native, which is a React type to build mobile applications are faster and more stable&lt;/td&gt; 
     &lt;td&gt;Ionic, Angular's mobile native app is relatively less stable and slower&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;In React, data flows only in one way and hence debugging is easy&lt;/td&gt; 
     &lt;td&gt;In Angular, data flows both way i.e it has two-way data binding between children and parent and hence debugging is often difficult&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of differences are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="149"&gt; 
 &lt;li&gt; &lt;h3&gt;Why React tab is not showing up in DevTools?&lt;/h3&gt; &lt;p&gt;When the page loads, &lt;em&gt;React DevTools&lt;/em&gt; sets a global named &lt;code&gt;__REACT_DEVTOOLS_GLOBAL_HOOK__&lt;/code&gt;, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won't show up the tab.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="150"&gt; 
 &lt;li&gt; &lt;h3&gt;What are Styled Components?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;styled-components&lt;/code&gt; is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="151"&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example of Styled Components?&lt;/h3&gt; &lt;p&gt;Lets create &lt;code&gt;&amp;lt;Title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Wrapper&amp;gt;&lt;/code&gt; components with specific styles for each.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import React from "react";
import styled from "styled-components";

// Create a &amp;lt;Title&amp;gt; component that renders an &amp;lt;h1&amp;gt; which is centered, red and sized at 1.5em
const Title = styled.h1`
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
`;

// Create a &amp;lt;Wrapper&amp;gt; component that renders a &amp;lt;section&amp;gt; with some padding and a papayawhip background
const Wrapper = styled.section`
  padding: 4em;
  background: papayawhip;
`;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These two variables, &lt;code&gt;Title&lt;/code&gt; and &lt;code&gt;Wrapper&lt;/code&gt;, are now components that you can render just like any other react component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;Wrapper&amp;gt;
  &amp;lt;Title&amp;gt;{"Lets start first styled component!"}&amp;lt;/Title&amp;gt;
&amp;lt;/Wrapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="152"&gt; 
 &lt;li&gt; &lt;h3&gt;What is Relay?&lt;/h3&gt; &lt;p&gt;Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Miscellaneous&lt;/h2&gt; 
&lt;ol start="153"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of Reselect library?&lt;/h3&gt; &lt;p&gt;Let's see the main features of Reselect library,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Selectors can compute derived data, allowing Redux to store the minimal possible state.&lt;/li&gt; 
   &lt;li&gt;Selectors are efficient. A selector is not recomputed unless one of its arguments changes.&lt;/li&gt; 
   &lt;li&gt;Selectors are composable. They can be used as input to other selectors.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h4&gt;Give an example of Reselect usage?&lt;/h4&gt; &lt;p&gt;Let's take calculations and different amounts of a shipment order with the simplified usage of Reselect:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { createSelector } from "reselect";

const shopItemsSelector = (state) =&amp;gt; state.shop.items;
const taxPercentSelector = (state) =&amp;gt; state.shop.taxPercent;

const subtotalSelector = createSelector(shopItemsSelector, (items) =&amp;gt;
  items.reduce((acc, item) =&amp;gt; acc + item.value, 0)
);

const taxSelector = createSelector(
  subtotalSelector,
  taxPercentSelector,
  (subtotal, taxPercent) =&amp;gt; subtotal * (taxPercent / 100)
);

export const totalSelector = createSelector(
  subtotalSelector,
  taxSelector,
  (subtotal, tax) =&amp;gt; ({ total: subtotal + tax })
);

let exampleState = {
  shop: {
    taxPercent: 8,
    items: [
      { name: "apple", value: 1.2 },
      { name: "orange", value: 0.95 },
    ],
  },
};

console.log(subtotalSelector(exampleState)); // 2.15
console.log(taxSelector(exampleState)); // 0.172
console.log(totalSelector(exampleState)); // { total: 2.322 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="155"&gt; 
 &lt;li&gt; &lt;h3&gt;Can Redux only be used with React?&lt;/h3&gt; &lt;p&gt;Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="156"&gt; 
 &lt;li&gt; &lt;h3&gt;Do you need to have a particular build tool to use Redux?&lt;/h3&gt; &lt;p&gt;Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="157"&gt; 
 &lt;li&gt; &lt;h3&gt;How Redux Form &lt;code&gt;initialValues&lt;/code&gt; get updated from state?&lt;/h3&gt; &lt;p&gt;You need to add &lt;code&gt;enableReinitialize : true&lt;/code&gt; setting.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const InitializeFromStateForm = reduxForm({
  form: "initializeFromState",
  enableReinitialize: true,
})(UserEdit);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your &lt;code&gt;initialValues&lt;/code&gt; prop gets updated, your form will update too.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="158"&gt; 
 &lt;li&gt; &lt;h3&gt;How React PropTypes allow different types for one prop?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;oneOfType()&lt;/code&gt; method of &lt;code&gt;PropTypes&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, the height property can be defined with either &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; type as below:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Component.propTypes = {
  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="159"&gt; 
 &lt;li&gt; &lt;h3&gt;Can I import an SVG file as react component?&lt;/h3&gt; &lt;p&gt;You can import SVG directly as component instead of loading it as a file. This feature is available with &lt;code&gt;react-scripts@2.0.0&lt;/code&gt; and higher.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { ReactComponent as Logo } from "./logo.svg";

const App = () =&amp;gt; (
  &amp;lt;div&amp;gt;
    {/* Logo is an actual react component */}
    &amp;lt;Logo /&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don't forget about the curly braces in the import.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="160"&gt; 
 &lt;li&gt; &lt;h3&gt;What is render hijacking in react?&lt;/h3&gt; &lt;p&gt;The concept of render hijacking is the ability to control what a component will output from another component. It means that you decorate your component by wrapping it into a Higher-Order component. By wrapping, you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enable hijacking, but by using HOC you make your component behave differently.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="161"&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass numbers to React component?&lt;/h3&gt; &lt;p&gt;We can pass &lt;code&gt;numbers&lt;/code&gt; as &lt;code&gt;props&lt;/code&gt; to React component using curly braces &lt;code&gt;{}&lt;/code&gt; where as &lt;code&gt;strings&lt;/code&gt; in double quotes &lt;code&gt;""&lt;/code&gt; or single quotes &lt;code&gt;''&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from "react";

const ChildComponent = ({ name, age }) =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      My Name is {name} and Age is {age}
    &amp;lt;/&amp;gt;
  );
};

const ParentComponent = () =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;ChildComponent name="Chetan" age={30} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default ParentComponent;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="162"&gt; 
 &lt;li&gt; &lt;h3&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/h3&gt; &lt;p&gt;It is up to the developer's decision, i.e., it is developer's job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as ‚Äúis this dropdown currently open‚Äù, inside a component's internal state.&lt;/p&gt; &lt;p&gt;Below are the rules of thumb to determine what kind of data should be put into Redux&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Do other parts of the application care about this data?&lt;/li&gt; 
   &lt;li&gt;Do you need to be able to create further derived data based on this original data?&lt;/li&gt; 
   &lt;li&gt;Is the same data being used to drive multiple components?&lt;/li&gt; 
   &lt;li&gt;Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?&lt;/li&gt; 
   &lt;li&gt;Do you want to cache the data (i.e, use what's in state if it's already there instead of re-requesting it)?&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="163"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of registerServiceWorker in React?&lt;/h3&gt; &lt;p&gt;React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on a slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that's what you should know about service worker for now. It's all about adding offline capabilities to your site.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import registerServiceWorker from "./registerServiceWorker";

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById("root"));
registerServiceWorker();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="164"&gt; 
 &lt;li&gt; &lt;h3&gt;What is React memo function?&lt;/h3&gt; &lt;p&gt;Class components can be restricted from re-rendering when their input props are the same using &lt;strong&gt;PureComponent or shouldComponentUpdate&lt;/strong&gt;. Now you can do the same with function components by wrapping them in &lt;strong&gt;React.memo&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const MyComponent = React.memo(function MyComponent(props) {
  /* only rerenders if props change */
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="165"&gt; 
 &lt;li&gt; &lt;h3&gt;What is React lazy function?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;React.lazy&lt;/code&gt; function lets you render a dynamic import as a regular component. It will automatically load the bundle containing the &lt;code&gt;OtherComponent&lt;/code&gt; when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const OtherComponent = React.lazy(() =&amp;gt; import("./OtherComponent"));

function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;OtherComponent /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.lazy&lt;/code&gt; and &lt;code&gt;Suspense&lt;/code&gt; is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="166"&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent unnecessary updates using setState?&lt;/h3&gt; &lt;p&gt;You can compare the current value of the state with an existing state value and decide whether to rerender the page or not. If the values are the same then you need to return &lt;strong&gt;null&lt;/strong&gt; to stop re-rendering otherwise return the latest state value.&lt;/p&gt; &lt;p&gt;For example, the user profile information is conditionally rendered as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;getUserProfile = (user) =&amp;gt; {
  const latestAddress = user.address;
  this.setState((state) =&amp;gt; {
    if (state.address === latestAddress) {
      return null;
    } else {
      return { title: latestAddress };
    }
  });
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="167"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;: Unlike older releases, you don't need to make sure &lt;strong&gt;render&lt;/strong&gt; method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array.&lt;/p&gt; &lt;p&gt;For example, let us take the below list of developers,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const ReactJSDevs = () =&amp;gt; {
  return [
    &amp;lt;li key="1"&amp;gt;John&amp;lt;/li&amp;gt;,
    &amp;lt;li key="2"&amp;gt;Jackie&amp;lt;/li&amp;gt;,
    &amp;lt;li key="3"&amp;gt;Jordan&amp;lt;/li&amp;gt;,
  ];
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also merge this array of items in another array component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const JSDevs = () =&amp;gt; {
  return (
    &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt;Brad&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;Brodge&amp;lt;/li&amp;gt;
      &amp;lt;ReactJSDevs /&amp;gt;
      &amp;lt;li&amp;gt;Brandon&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Strings and Numbers:&lt;/strong&gt; You can also return string and number type from the render method.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
 return 'Welcome to ReactJS questions';
}
// Number
render() {
 return 2018;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="168"&gt; 
 &lt;li&gt; &lt;h3&gt;What are hooks?&lt;/h3&gt; &lt;p&gt;Hooks is a special JavaScript function that allows you use state and other React features without writing a class. This pattern has been introduced as a new feature in React 16.8 and helped to isolate the stateful logic from the components.&lt;/p&gt; &lt;p&gt;Let's see an example of useState hook:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { useState } from "react";

function Example() {
  // Declare a new state variable, which we'll call "count"
  const [count, setCount] = useState(0);

  return (
    &amp;lt;&amp;gt;
      &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;Click me&amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Hooks can be used inside an existing function component without rewriting the component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="169"&gt; 
 &lt;li&gt; &lt;h3&gt;What rules need to be followed for hooks?&lt;/h3&gt; &lt;p&gt;You need to follow two rules in order to use hooks,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Call Hooks only at the top level of your react functions:&lt;/strong&gt; You should always use hooks at the top level of react function before any early returns. i.e, You shouldn‚Äôt call Hooks inside loops, conditions, or nested functions. This will ensure that Hooks are called in the same order each time a component renders and it preserves the state of Hooks between multiple re-renders due to &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; calls.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let's see the difference using an example, &lt;strong&gt;Correct usage:&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function UserProfile() {
 // Correct: Hooks called at the top level
 const [name, setName] = useState('John');
 const [country, setCountry] = useState('US');

 return (
   &amp;lt;div&amp;gt;
     &amp;lt;h1&amp;gt;Name: {name}&amp;lt;/h1&amp;gt;
     &amp;lt;p&amp;gt;Country: {country}&amp;lt;/p&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Incorrect usage:&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function UserProfile() {
 const [name, setName] = useState('John');

 if (name === 'John') {
   // Incorrect: useState is called inside a conditional
   const [country, setCountry] = useState('US'); 
 }

 return (
   &amp;lt;div&amp;gt;
     &amp;lt;h1&amp;gt;Name: {name}&amp;lt;/h1&amp;gt;
     &amp;lt;p&amp;gt;Country: {country}&amp;lt;/p&amp;gt; {/* This will throw an error if the name condition isn't met */}
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook for the country field is being called conditionally within an &lt;code&gt;if&lt;/code&gt; block. This can lead to inconsistent state behavior and may cause hooks to be called in a different order on each re-render.&lt;/p&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Call Hooks from React Functions only:&lt;/strong&gt; You shouldn‚Äôt call Hooks from regular JavaScript functions or class components. Instead, you should call them from either function components or custom hooks.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let's find the difference of correct and incorrect usage with below examples,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Correct usage:&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;//Example1:
function Counter() {
 // Correct: useState is used inside a functional component
 const [count, setCount] = useState(0);

 return &amp;lt;div&amp;gt;Counter: {count}&amp;lt;/div&amp;gt;;
}
//Example2:
function useFetchData(url) {
 const [data, setData] = useState(null);

 useEffect(() =&amp;gt; {
   fetch(url)
     .then((response) =&amp;gt; response.json())
     .then((data) =&amp;gt; setData(data));
 }, [url]);

 return data;
}

function UserProfile() {
 // Correct: Using a custom hook here
 const user = useFetchData('https://some-api.com/user');

 return (
   &amp;lt;div&amp;gt;
     &amp;lt;h1&amp;gt;{user ? user.name : 'Loading profile...'}&amp;lt;/h1&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Incorrect usage:&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt; //Example1
 function normalFunction() {
   // Incorrect: Can't call hooks in normal functions
   const [count, setCount] = useState(0); 
 }

 //Example2
 function fetchData(url) {
   // Incorrect: Hooks can't be used in non-React functions
   const [data, setData] = useState(null);

   useEffect(() =&amp;gt; {
     fetch(url)
       .then((response) =&amp;gt; response.json())
       .then((data) =&amp;gt; setData(data));
   }, [url]);

   return data;
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above incorrect usage example, both &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; are used in non-React functions(&lt;code&gt;normalFunction&lt;/code&gt; and &lt;code&gt;fetchData&lt;/code&gt;), which is not allowed.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="170"&gt; 
 &lt;li&gt; &lt;h3&gt;How to ensure hooks followed the rules in your project?&lt;/h3&gt; &lt;p&gt;React team released an ESLint plugin called &lt;strong&gt;eslint-plugin-react-hooks&lt;/strong&gt; that enforces Hook's two rules. It is part of Hooks API. You can add this plugin to your project using the below command,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;npm install eslint-plugin-react-hooks --save-dev
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And apply the below config in your ESLint config file,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// Your ESLint configuration
{
  "plugins": [
    // ...
    "react-hooks"
  ],
  "rules": {
    // ...
    "react-hooks/rules-of-hooks": "error"
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This plugin also provide another important rule through &lt;code&gt;react-hooks/exhaustive-deps&lt;/code&gt;. It ensures that the dependencies of useEffect, useCallback, and useMemo hooks are correctly listed to avoid potential bugs.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;useEffect(() =&amp;gt; {
  // Forgetting `message` will result in incorrect behavior
  console.log(message);
}, []); // Here `message` should be a dependency
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The recommended &lt;code&gt;eslint-config-react-app&lt;/code&gt; preset already includes the hooks rules of this plugin. For example, the linter enforce proper naming convention for hooks. If you rename your custom hooks which as prefix "use" to something else then linter won't allow you to call built-in hooks such as useState, useEffect etc inside of your custom hook anymore.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This plugin is intended to use in Create React App by default.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="171"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Flux and Redux?&lt;/h3&gt; &lt;p&gt;Below are the major differences between Flux and Redux&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Flux&lt;/th&gt; 
     &lt;th&gt;Redux&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;State is mutable&lt;/td&gt; 
     &lt;td&gt;State is immutable&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;The Store contains both state and change logic&lt;/td&gt; 
     &lt;td&gt;The Store and change logic are separate&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;There are multiple stores exist&lt;/td&gt; 
     &lt;td&gt;There is only one store exist&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;All the stores are disconnected and flat&lt;/td&gt; 
     &lt;td&gt;Single store with hierarchical reducers&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It has a singleton dispatcher&lt;/td&gt; 
     &lt;td&gt;There is no concept of dispatcher&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React components subscribe to the store&lt;/td&gt; 
     &lt;td&gt;Container components uses connect function&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="172"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of React Router V4?&lt;/h3&gt; &lt;p&gt;Below are the main benefits of React Router V4 module,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;In React Router v4(version 4), the API is completely about components. A router can be visualized as a single component(&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;) which wraps specific child router components(&lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;You don't need to manually set history. The router module will take care history by wrapping routes with &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; component.&lt;/li&gt; 
   &lt;li&gt;The application size is reduced by adding only the specific router module(Web, core, or native)&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="173"&gt; 
 &lt;li&gt; &lt;h3&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;error: - The error object which was thrown&lt;/li&gt; 
   &lt;li&gt;info: - An object with a componentStack key contains the information about which component threw the error.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The method structure would be as follows&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;componentDidCatch(error, info);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="174"&gt; 
 &lt;li&gt; &lt;h3&gt;In which scenarios do error boundaries not catch errors?&lt;/h3&gt; &lt;p&gt;Below are the cases in which error boundaries don't work,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Inside Event handlers&lt;/li&gt; 
   &lt;li&gt;Asynchronous code using &lt;strong&gt;setTimeout or requestAnimationFrame&lt;/strong&gt; callbacks&lt;/li&gt; 
   &lt;li&gt;During Server side rendering&lt;/li&gt; 
   &lt;li&gt;When errors thrown in the error boundary code itself&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="175"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the behavior of uncaught errors in react 16?&lt;/h3&gt; In React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="176"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the proper placement for error boundaries?&lt;/h3&gt; The granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches, 
  &lt;ol&gt; 
   &lt;li&gt;You can wrap top-level route components to display a generic error message for the entire application.&lt;/li&gt; 
   &lt;li&gt;You can also wrap individual components in an error boundary to protect them from crashing the rest of the application.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="177"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of component stack trace from error boundary?&lt;/h3&gt; &lt;p&gt;Apart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept.&lt;/p&gt; &lt;p&gt;For example, BuggyCounter component displays the component stack trace as below,&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/error_boundary.png" alt="stacktrace" /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="178"&gt; 
 &lt;li&gt; &lt;h3&gt;What are default props?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;defaultProps&lt;/em&gt; can be defined as a property on the component to set the default values for the props. These default props are used when props not supplied(i.e., undefined props), but not for &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; as props. That means, If you provide null value then it remains null value. It's the same behavior with 0 as well.&lt;/p&gt; &lt;p&gt;For example, let us create color default prop for the button component,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function MyButton {
  // ...
}

MyButton.defaultProps = {
  color: "red",
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If &lt;code&gt;props.color&lt;/code&gt; is not provided then it will set the default value to 'red'. i.e, Whenever you try to access the color prop it uses the default value&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function MyButton() {
  return &amp;lt;MyButton /&amp;gt;; // props.color will contain red value
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="179"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of displayName class property?&lt;/h3&gt; &lt;p&gt;The displayName string is used in debugging messages. Usually, you don‚Äôt need to set it explicitly because it‚Äôs inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component.&lt;/p&gt; &lt;p&gt;For example, To ease debugging, choose a display name that communicates that it‚Äôs the result of a withSubscription HOC.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function withSubscription(WrappedComponent) {
  class WithSubscription extends React.Component {
    /* ... */
  }
  WithSubscription.displayName = `WithSubscription(${getDisplayName(
    WrappedComponent
  )})`;
  return WithSubscription;
}
function getDisplayName(WrappedComponent) {
  return (
    WrappedComponent.displayName || WrappedComponent.name || "Component"
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="180"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the browser support for react applications?&lt;/h3&gt; React supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use &lt;strong&gt;es5-shim and es5-sham&lt;/strong&gt; polyfill then it even support old browsers that doesn't support ES5 methods.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="181"&gt; 
 &lt;li&gt; &lt;h3&gt;What is code-splitting?&lt;/h3&gt; &lt;p&gt;Code-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature.&lt;/p&gt; &lt;p&gt;For example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;moduleA.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const moduleA = "Hello";

export { moduleA };
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;export default function App {
  function handleClick() {
    import("./moduleA")
      .then(({ moduleA }) =&amp;gt; {
        // Use moduleA
      })
      .catch((err) =&amp;gt; {
        // Handle failure
      });
  };

 return (
   &amp;lt;div&amp;gt;
     &amp;lt;button onClick={this.handleClick}&amp;gt;Load&amp;lt;/button&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;See Class&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;pre&gt;&lt;code class="language-javascript"&gt;  import React, { Component } from "react";

   class App extends Component {
     handleClick = () =&amp;gt; {
       import("./moduleA")
         .then(({ moduleA }) =&amp;gt; {
           // Use moduleA
         })
         .catch((err) =&amp;gt; {
           // Handle failure
         });
     };

     render() {
       return (
         &amp;lt;div&amp;gt;
           &amp;lt;button onClick={this.handleClick}&amp;gt;Load&amp;lt;/button&amp;gt;
         &amp;lt;/div&amp;gt;
       );
     }
   }

   export default App;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="182"&gt; 
 &lt;li&gt; &lt;h3&gt;What are Keyed Fragments?&lt;/h3&gt; &lt;p&gt;The Fragments declared with the explicit &amp;lt;React.Fragment&amp;gt; syntax may have keys. The general use case is mapping a collection to an array of fragments as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Glossary(props) {
  return (
    &amp;lt;dl&amp;gt;
      {props.items.map((item) =&amp;gt; (
        // Without the `key`, React will fire a key warning
        &amp;lt;React.Fragment key={item.id}&amp;gt;
          &amp;lt;dt&amp;gt;{item.term}&amp;lt;/dt&amp;gt;
          &amp;lt;dd&amp;gt;{item.description}&amp;lt;/dd&amp;gt;
        &amp;lt;/React.Fragment&amp;gt;
      ))}
    &amp;lt;/dl&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="183"&gt; 
 &lt;li&gt; &lt;h3&gt;Does React support all HTML attributes?&lt;/h3&gt; &lt;p&gt;As of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs.&lt;/p&gt; &lt;p&gt;Let us take few props with respect to standard HTML attributes,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;div tabIndex="-1" /&amp;gt;      // Just like node.tabIndex DOM API
&amp;lt;div className="Button" /&amp;gt; // Just like node.className DOM API
&amp;lt;input readOnly={true} /&amp;gt;  // Just like node.readOnly DOM API
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="184"&gt; 
 &lt;li&gt; &lt;h3&gt;When component props defaults to true?&lt;/h3&gt; &lt;p&gt;If you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML.&lt;/p&gt; &lt;p&gt;For example, below expressions are equivalent,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;MyInput autocomplete /&amp;gt;

&amp;lt;MyInput autocomplete={true} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, &lt;code&gt;{name}&lt;/code&gt; which is short for &lt;code&gt;{name: name}&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="185"&gt; 
 &lt;li&gt; &lt;h3&gt;What is NextJS and major features of it?&lt;/h3&gt; &lt;p&gt;Next.js is a popular and lightweight framework for static and server‚Äërendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Server-rendered by default&lt;/li&gt; 
   &lt;li&gt;Automatic code splitting for faster page loads&lt;/li&gt; 
   &lt;li&gt;Simple client-side routing (page based)&lt;/li&gt; 
   &lt;li&gt;Webpack-based dev environment which supports (HMR)&lt;/li&gt; 
   &lt;li&gt;Able to implement with Express or any other Node.js HTTP server&lt;/li&gt; 
   &lt;li&gt;Customizable with your own Babel and Webpack configurations&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="186"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you pass an event handler to a component?&lt;/h3&gt; &lt;p&gt;You can pass event handlers and other functions as props to child components. The functions can be passed to child component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function Button({ onClick }) {
  return &amp;lt;button onClick={onClick}&amp;gt;Download&amp;lt;/button&amp;gt;;
}

export default function downloadExcel() {
  function handleClick() {
    alert("Downloaded");
  }

  return &amp;lt;Button onClick={handleClick}&amp;gt;&amp;lt;/Button&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="187"&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent a function from being called multiple times?&lt;/h3&gt; &lt;p&gt;If you use an event handler such as &lt;strong&gt;onClick or onScroll&lt;/strong&gt; and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Throttling:&lt;/strong&gt; Changes based on a time based frequency. For example, it can be used using _.throttle lodash function&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Debouncing:&lt;/strong&gt; Publish changes after a period of inactivity. For example, it can be used using _.debounce lodash function&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;RequestAnimationFrame throttling:&lt;/strong&gt; Changes based on requestAnimationFrame. For example, it can be used using raf-schd lodash function&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="188"&gt; 
 &lt;li&gt; &lt;h3&gt;How JSX prevents Injection Attacks?&lt;/h3&gt; &lt;p&gt;React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that‚Äôs not explicitly written in your application. Everything is converted to a string before being rendered.&lt;/p&gt; &lt;p&gt;For example, you can embed user input as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const name = response.potentiallyMaliciousInput;
const element = &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way you can prevent XSS(Cross-site-scripting) attacks in the application.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="189"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you update rendered elements?&lt;/h3&gt; &lt;p&gt;You can update UI(represented by rendered element) by passing the newly created element to ReactDOM's render method.&lt;/p&gt; &lt;p&gt;For example, lets take a ticking clock example, where it updates the time by calling render method multiple times,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function tick() {
  const element = (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;It is {new Date().toLocaleTimeString()}.&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  );
  ReactDOM.render(element, document.getElementById("root"));
}

setInterval(tick, 1000);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="190"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you say that props are readonly?&lt;/h3&gt; &lt;p&gt;When you declare a component as a function or a class, it must never modify its own props.&lt;/p&gt; &lt;p&gt;Let us take a below capital function,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function capital(amount, interest) {
  return amount + interest;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above function is called ‚Äúpure‚Äù because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying "All React components must act like pure functions with respect to their props."&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="191"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the conditions to safely use the index as a key?&lt;/h3&gt; &lt;p&gt;There are three conditions to make sure, it is safe use the index as a key.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The list and items are static‚Äì they are not computed and do not change&lt;/li&gt; 
   &lt;li&gt;The items in the list have no ids&lt;/li&gt; 
   &lt;li&gt;The list is never reordered or filtered.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="192"&gt; 
 &lt;li&gt; &lt;h3&gt;Should keys be globally unique?&lt;/h3&gt; &lt;p&gt;The keys used within arrays should be unique among their siblings but they don‚Äôt need to be globally unique. i.e, You can use the same keys with two different arrays.&lt;/p&gt; &lt;p&gt;For example, the below &lt;code&gt;Book&lt;/code&gt; component uses two arrays with different arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Book(props) {
  const index = (
    &amp;lt;ul&amp;gt;
      {props.pages.map((page) =&amp;gt; (
        &amp;lt;li key={page.id}&amp;gt;{page.title}&amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  );
  const content = props.pages.map((page) =&amp;gt; (
    &amp;lt;div key={page.id}&amp;gt;
      &amp;lt;h3&amp;gt;{page.title}&amp;lt;/h3&amp;gt;
      &amp;lt;p&amp;gt;{page.content}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{page.pageNumber}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  ));
  return (
    &amp;lt;div&amp;gt;
      {index}
      &amp;lt;hr /&amp;gt;
      {content}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="193"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the popular choice for form handling?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Formik&lt;/code&gt; is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission.&lt;/p&gt; &lt;p&gt;In detail, You can categorize them as follows,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; 
   &lt;li&gt;Validation and error messages&lt;/li&gt; 
   &lt;li&gt;Handling form submission&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;It is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="194"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of formik over redux form library?&lt;/h3&gt; &lt;p&gt;Below are the main reasons to recommend formik over redux form library,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The form state is inherently short-term and local, so tracking it in Redux (or any kind of Flux library) is unnecessary.&lt;/li&gt; 
   &lt;li&gt;Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY SINGLE KEYSTROKE. This way it increases input latency for large apps.&lt;/li&gt; 
   &lt;li&gt;Redux-Form is 22.5 kB minified gzipped whereas Formik is 12.7 kB&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="195"&gt; 
 &lt;li&gt; &lt;h3&gt;Why are you not required to use inheritance?&lt;/h3&gt; In React, it is recommended to use composition over inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a component‚Äôs look and behavior explicitly and safely. Whereas, If you want to reuse non-UI functionality between components, it is suggested to extract it into a separate JavaScript module. Later components import it and use that function, object, or class, without extending it.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="196"&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use web components in react application?&lt;/h3&gt; &lt;p&gt;Yes, you can use web components in a react application. Even though many developers won't use this combination, it may require especially if you are using third-party UI components that are written using Web Components.&lt;/p&gt; &lt;p&gt;For example, let us use &lt;code&gt;Vaadin&lt;/code&gt; date picker web component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import "./App.css";
import "@vaadin/vaadin-date-picker";
export default function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;vaadin-date-picker label="When were you born?"&amp;gt;&amp;lt;/vaadin-date-picker&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="197"&gt; 
 &lt;li&gt; &lt;h3&gt;What is dynamic import?&lt;/h3&gt; &lt;p&gt;You can achieve code-splitting in your app using dynamic import.&lt;/p&gt; &lt;p&gt;Let's take an example of addition,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Normal Import&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { add } from "./math";
console.log(add(10, 20));
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Dynamic Import&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import("./math").then((math) =&amp;gt; {
  console.log(math.add(10, 20));
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="198"&gt; 
 &lt;li&gt; &lt;h3&gt;What are loadable components?&lt;/h3&gt; &lt;p&gt;With the release of React 18, React.lazy and Suspense are now available for server-side rendering. However, prior to React 18, it was recommended to use Loadable Components for code-splitting in a server-side rendered app because React.lazy and Suspense were not available for server-side rendering. Loadable Components lets you render a dynamic import as a regular component. For example, you can use Loadable Components to load the OtherComponent in a separate bundle like this:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import loadable from "@loadable/component";

const OtherComponent = loadable(() =&amp;gt; import("./OtherComponent"));

function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;OtherComponent /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now OtherComponent will be loaded in a separated bundle Loadable Components provides additional benefits beyond just code-splitting, such as automatic code reloading, error handling, and preloading. By using Loadable Components, you can ensure that your application loads quickly and efficiently, providing a better user experience for your users.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="199"&gt; 
 &lt;li&gt; &lt;h3&gt;What is suspense component?&lt;/h3&gt; &lt;p&gt;React Suspense is a built-in feature that lets you defer rendering part of your component tree until some condition(asynchronous operation) is met‚Äîusually, data or code has finished loading. While waiting, Suspense lets you display a fallback UI like a spinner or placeholder.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Lazy loading components uses suspense feature,&lt;/p&gt; &lt;p&gt;If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you‚Äôre waiting for it to load using a loading indicator. This can be done using &lt;strong&gt;Suspense&lt;/strong&gt; component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const OtherComponent = React.lazy(() =&amp;gt; import("./OtherComponent"));

function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;
        &amp;lt;OtherComponent /&amp;gt;
      &amp;lt;/Suspense&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above component shows fallback UI instead real component until &lt;code&gt;OtherComponent&lt;/code&gt; is fully loaded.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;As an another example, suspend until async data(data fetching) is ready&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;  function UserProfile() {
    const user = use(fetchUser()); // throws a promise internally
    return &amp;lt;div&amp;gt;{user.name}&amp;lt;/div&amp;gt;;
  }

  function App() {
    return (
      &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading user...&amp;lt;/div&amp;gt;}&amp;gt;
        &amp;lt;UserProfile /&amp;gt;
      &amp;lt;/Suspense&amp;gt;
    );
  }

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="200"&gt; 
 &lt;li&gt; &lt;h3&gt;What is route based code splitting?&lt;/h3&gt; &lt;p&gt;One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won't be disturbed.&lt;/p&gt; &lt;p&gt;Let us take an example of route based website using libraries like React Router with React.lazy,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import { BrowserRouter as Router, Route, Switch } from "react-router-dom";
import React, { Suspense, lazy } from "react";

const Home = lazy(() =&amp;gt; import("./routes/Home"));
const About = lazy(() =&amp;gt; import("./routes/About"));

const App = () =&amp;gt; (
  &amp;lt;Router&amp;gt;
    &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route exact path="/" component={Home} /&amp;gt;
        &amp;lt;Route path="/about" component={About} /&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/Suspense&amp;gt;
  &amp;lt;/Router&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, the code splitting will happen at each route level.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="201"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of default value in context?&lt;/h3&gt; &lt;p&gt;The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.&lt;/p&gt; &lt;p&gt;Below code snippet provides default theme value as Luna.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const MyContext = React.createContext(defaultValue);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="202"&gt; 
 &lt;li&gt; &lt;h3&gt;What is diffing algorithm?&lt;/h3&gt; &lt;p&gt;React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n¬≥) where n is the number of elements in the tree.&lt;/p&gt; &lt;p&gt;In this case, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Two elements of different types will produce different trees.&lt;/li&gt; 
   &lt;li&gt;The developer can hint at which child elements may be stable across different renders with a key prop.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="203"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the rules covered by diffing algorithm?&lt;/h3&gt; &lt;p&gt;When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Elements Of Different Types:&lt;/strong&gt; Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. For example, elements &lt;a&gt; to &lt;img /&gt;, or from &lt;/a&gt;&lt;/p&gt;
    &lt;article&gt;
     &lt;a&gt; to 
      &lt;comment&gt;
        of different types lead a full rebuild.
       &lt;p&gt;&lt;/p&gt; 
      &lt;/comment&gt;&lt;/a&gt;
    &lt;/article&gt;&lt;/li&gt;
   &lt;a&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;DOM Elements Of The Same Type:&lt;/strong&gt; When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. Lets take an example with same DOM elements except className attribute,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;div className="show" title="ReactJS" /&amp;gt;

&amp;lt;div className="hide" title="ReactJS" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Component Elements Of The Same Type:&lt;/strong&gt; When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the underlying instance. After that, the render() method is called and the diff algorithm recurses on the previous result and the new result.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Recursing On Children:&lt;/strong&gt; when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there‚Äôs a difference. For example, when adding an element at the end of the children, converting between these two trees works well.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;third&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Handling keys:&lt;/strong&gt; React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key can make the tree conversion efficient,&lt;/p&gt; &lt;/li&gt; &lt;/a&gt;
  &lt;/ol&gt;&lt;a&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li key="2015"&amp;gt;Duke&amp;lt;/li&amp;gt;
  &amp;lt;li key="2016"&amp;gt;Villanova&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li key="2014"&amp;gt;Connecticut&amp;lt;/li&amp;gt;
  &amp;lt;li key="2015"&amp;gt;Duke&amp;lt;/li&amp;gt;
  &amp;lt;li key="2016"&amp;gt;Villanova&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&lt;/li&gt;
 &lt;a&gt; &lt;/a&gt;
&lt;/ol&gt;
&lt;a&gt; &lt;/a&gt;
&lt;p&gt;&lt;a&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="204"&gt; 
 &lt;li&gt; &lt;h3&gt;When do you need to use refs?&lt;/h3&gt; &lt;p&gt;There are few use cases to go for refs,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Managing focus, text selection, or media playback.&lt;/li&gt; 
   &lt;li&gt;Triggering imperative animations.&lt;/li&gt; 
   &lt;li&gt;Integrating with third-party DOM libraries.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="205"&gt; 
 &lt;li&gt; &lt;h3&gt;Must prop be named as render for render props?&lt;/h3&gt; &lt;p&gt;Even though the pattern named render props, you don‚Äôt have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a ‚Äúrender prop‚Äù. Lets take an example with the children prop for render props,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;Mouse
  children={(mouse) =&amp;gt; (
    &amp;lt;p&amp;gt;
      The mouse position is {mouse.x}, {mouse.y}
    &amp;lt;/p&amp;gt;
  )}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Actually children prop doesn‚Äôt need to be named in the list of ‚Äúattributes‚Äù in JSX element. Instead, you can keep it directly inside element,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;Mouse&amp;gt;
  {(mouse) =&amp;gt; (
    &amp;lt;p&amp;gt;
      The mouse position is {mouse.x}, {mouse.y}
    &amp;lt;/p&amp;gt;
  )}
&amp;lt;/Mouse&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While using this above technique(without any name), explicitly state that children should be a function in your propTypes.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;Mouse.propTypes = {
  children: PropTypes.func.isRequired,
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="206"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems of using render props with pure components?&lt;/h3&gt; If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="207"&gt; 
 &lt;li&gt; &lt;h3&gt;What is windowing technique?&lt;/h3&gt; Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="208"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print falsy values in JSX?&lt;/h3&gt; &lt;p&gt;The falsy values such as false, null, undefined, and true are valid children but they don't render anything. If you still want to display them then you need to convert it to string. Let's take an example on how to convert to a string,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;div&amp;gt;My JavaScript variable is {String(myVariable)}.&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="209"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the typical use case of portals?&lt;/h3&gt; &lt;p&gt;React Portals are primarily used to render UI components such as &lt;strong&gt;modals, tooltips, dropdowns, hovercards, and notifications&lt;/strong&gt; outside of their parent component's DOM tree. This helps avoid common CSS issues caused by parent elements, such as:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;**overflow: hidden**&lt;/code&gt; on parent elements clipping or hiding child elements like modals or tooltips,&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;stacking context and&lt;/strong&gt; &lt;code&gt;**z-index**&lt;/code&gt; &lt;strong&gt;conflicts&lt;/strong&gt; created by parent containers that prevent child elements from appearing above other content.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;That means, you need to visually ‚Äúbreak out‚Äù of its container. By rendering these UI elements into a separate DOM node (often directly under &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;), portals ensure they appear above all other content and are not restricted by the parent‚Äôs CSS or layout constraints, resulting in correct positioning and visibility regardless of the parent‚Äôs styling.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="210"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you set default value for uncontrolled component?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt; In React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a **defaultValue** attribute instead of **value**.

 ```javascript
 render() {
   return (
     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
       &amp;lt;label&amp;gt;
         User Name:
         &amp;lt;input
           defaultValue="John"
           type="text"
           ref={this.input} /&amp;gt;
       &amp;lt;/label&amp;gt;
       &amp;lt;input type="submit" value="Submit" /&amp;gt;
     &amp;lt;/form&amp;gt;
   );
 }
 ```

 The same applies for `select` and `textArea` inputs. But you need to use **defaultChecked** for `checkbox` and `radio` inputs.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="211"&gt; 
 &lt;li&gt; &lt;h3&gt;What is your favorite React stack?&lt;/h3&gt; Even though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel. You can clone the project &lt;a href="https://github.com/react-boilerplate/react-boilerplate"&gt;https://github.com/react-boilerplate/react-boilerplate&lt;/a&gt; and start working on any new react project.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="212"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Real DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Real DOM and Virtual DOM,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Real DOM&lt;/th&gt; 
     &lt;th&gt;Virtual DOM&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Updates are slow&lt;/td&gt; 
     &lt;td&gt;Updates are fast&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;DOM manipulation is very expensive.&lt;/td&gt; 
     &lt;td&gt;DOM manipulation is very easy&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;You can update HTML directly.&lt;/td&gt; 
     &lt;td&gt;You Can‚Äôt directly update HTML&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It causes too much of memory wastage&lt;/td&gt; 
     &lt;td&gt;There is no memory wastage&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Creates a new DOM if element updates&lt;/td&gt; 
     &lt;td&gt;It updates the JSX if element update&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="213"&gt; 
 &lt;li&gt; &lt;h3&gt;How to add Bootstrap to a react application?&lt;/h3&gt; &lt;p&gt;Bootstrap can be added to your React app in a three possible ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using the Bootstrap CDN: This is the easiest way to add bootstrap. Add both bootstrap CSS and JS resources in a head tag.&lt;/li&gt; 
   &lt;li&gt;Bootstrap as Dependency: If you are using a build tool or a module bundler such as Webpack, then this is the preferred option for adding Bootstrap to your React application &lt;pre&gt;&lt;code class="language-javascript"&gt;npm install bootstrap
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;React Bootstrap Package: In this case, you can add Bootstrap to our React app is by using a package that has rebuilt Bootstrap components to work particularly as React components. Below packages are popular in this category, 
    &lt;ol&gt; 
     &lt;li&gt;react-bootstrap&lt;/li&gt; 
     &lt;li&gt;reactstrap&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="214"&gt; 
 &lt;li&gt; &lt;h3&gt;Can you list down top websites or applications using react as front end framework?&lt;/h3&gt; &lt;p&gt;Below are the &lt;code&gt;top 10 websites&lt;/code&gt; using React as their front-end framework,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Facebook&lt;/li&gt; 
   &lt;li&gt;Uber&lt;/li&gt; 
   &lt;li&gt;Instagram&lt;/li&gt; 
   &lt;li&gt;WhatsApp&lt;/li&gt; 
   &lt;li&gt;Khan Academy&lt;/li&gt; 
   &lt;li&gt;Airbnb&lt;/li&gt; 
   &lt;li&gt;Dropbox&lt;/li&gt; 
   &lt;li&gt;Flipboard&lt;/li&gt; 
   &lt;li&gt;Netflix&lt;/li&gt; 
   &lt;li&gt;PayPal&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="215"&gt; 
 &lt;li&gt; &lt;h3&gt;Is it recommended to use CSS In JS technique in React?&lt;/h3&gt; React does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate *.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="216"&gt; 
 &lt;li&gt; &lt;h3&gt;Do I need to rewrite all my class components with hooks?&lt;/h3&gt; No. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="217"&gt; 
 &lt;li&gt; &lt;h3&gt;What is useEffect hook? How to fetch data with React Hooks?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hook is a React Hook that lets you perform &lt;strong&gt;side effects&lt;/strong&gt; in function components. Side effects are operations that interact with the outside world or system and aren't directly related to rendering UI ‚Äî such as fetching data, setting up subscriptions, timers, manually manipulating the DOM, etc.&lt;/p&gt; &lt;p&gt;In function components, useEffect replaces the class component lifecycle methods(&lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt;) with a single, unified API.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;useEffect(() =&amp;gt; {
   // Side effect logic here

   return () =&amp;gt; {
   // Cleanup logic (optional)
   };
   }, [dependencies]);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This effect hook can be used to fetch data from an API and to set the data in the local state of the component with the useState hook‚Äôs update function.&lt;/p&gt; &lt;p&gt;Here is an example of fetching a list of ReactJS articles from an API using fetch.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import React from "react";

function App() {
  const [data, setData] = React.useState({ hits: [] });

  React.useEffect(() =&amp;gt; {
    fetch("http://hn.algolia.com/api/v1/search?query=react")
      .then((response) =&amp;gt; response.json())
      .then((data) =&amp;gt; setData(data));
  }, []);

  return (
    &amp;lt;ul&amp;gt;
      {data.hits.map((item) =&amp;gt; (
        &amp;lt;li key={item.objectID}&amp;gt;
          &amp;lt;a href={item.url}&amp;gt;{item.title}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A popular way to simplify this is by using the library axios.&lt;/p&gt; &lt;p&gt;We provided an empty array as second argument to the useEffect hook to avoid activating it on component updates. This way, it only fetches on component mount.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="218"&gt; 
 &lt;li&gt; &lt;h3&gt;Is Hooks cover all use cases for classes?&lt;/h3&gt; Hooks doesn't cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon &lt;strong&gt;getSnapshotBeforeUpdate&lt;/strong&gt; and &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycles yet.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="219"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the stable release for hooks support?&lt;/h3&gt; &lt;p&gt;React includes a stable implementation of React Hooks in 16.8 release for below packages&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React DOM&lt;/li&gt; 
   &lt;li&gt;React DOM Server&lt;/li&gt; 
   &lt;li&gt;React Test Renderer&lt;/li&gt; 
   &lt;li&gt;React Shallow Renderer&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="220"&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we use array destructuring (square brackets notation) in &lt;code&gt;useState&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;When we declare a state variable with &lt;code&gt;useState&lt;/code&gt;, it returns a pair ‚Äî an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.&lt;/p&gt; &lt;p&gt;For example, the array index access would look as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var userStateVariable = useState("userProfile"); // Returns an array pair
var user = userStateVariable[0]; // Access first item
var setUser = userStateVariable[1]; // Access second item
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas with array destructuring the variables can be accessed as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const [user, setUser] = useState("userProfile");
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the sources used for introducing hooks?&lt;/h3&gt; &lt;p&gt;Hooks got the ideas from several different sources. Below are some of them,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Previous experiments with functional APIs in the react-future repository&lt;/li&gt; 
   &lt;li&gt;Community experiments with render prop APIs such as Reactions Component&lt;/li&gt; 
   &lt;li&gt;State variables and state cells in DisplayScript.&lt;/li&gt; 
   &lt;li&gt;Subscriptions in Rx.&lt;/li&gt; 
   &lt;li&gt;Reducer components in ReasonReact.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="222"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access imperative API of web components?&lt;/h3&gt; Web Components often expose an imperative API to implement its functions. You will need to use a &lt;strong&gt;ref&lt;/strong&gt; to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a &lt;strong&gt;wrapper&lt;/strong&gt; for your Web Component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="223"&gt; 
 &lt;li&gt; &lt;h3&gt;What is formik?&lt;/h3&gt; &lt;p&gt;Formik is a small react form library that helps you with the three major problems,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; 
   &lt;li&gt;Validation and error messages&lt;/li&gt; 
   &lt;li&gt;Handling form submission&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="224"&gt; 
 &lt;li&gt; &lt;h3&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/h3&gt; Some of the popular middleware choices for handling asynchronous calls in Redux eco system are &lt;code&gt;Redux Thunk, Redux Promise, Redux Saga&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="225"&gt; 
 &lt;li&gt; &lt;h3&gt;Do browsers understand JSX code?&lt;/h3&gt; No, browsers can't understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="226"&gt; 
 &lt;li&gt; &lt;h3&gt;Describe about data flow in react?&lt;/h3&gt; React implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="227"&gt; 
 &lt;li&gt; &lt;h3&gt;What is MobX?&lt;/h3&gt; MobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For ReactJS application, you need to install below packages, &lt;pre&gt;&lt;code class="language-bash"&gt;npm install mobx --save
npm install mobx-react --save
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="228"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Redux and MobX?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Redux and MobX,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Topic&lt;/th&gt; 
     &lt;th&gt;Redux&lt;/th&gt; 
     &lt;th&gt;MobX&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Definition&lt;/td&gt; 
     &lt;td&gt;It is a javascript library for managing the application state&lt;/td&gt; 
     &lt;td&gt;It is a library for reactively managing the state of your applications&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Programming&lt;/td&gt; 
     &lt;td&gt;It is mainly written in ES6&lt;/td&gt; 
     &lt;td&gt;It is written in JavaScript(ES5)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Data Store&lt;/td&gt; 
     &lt;td&gt;There is only one large store exist for data storage&lt;/td&gt; 
     &lt;td&gt;There is more than one store for storage&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Usage&lt;/td&gt; 
     &lt;td&gt;Mainly used for large and complex applications&lt;/td&gt; 
     &lt;td&gt;Used for simple applications&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Performance&lt;/td&gt; 
     &lt;td&gt;Need to be improved&lt;/td&gt; 
     &lt;td&gt;Provides better performance&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;How it stores&lt;/td&gt; 
     &lt;td&gt;Uses JS Object to store&lt;/td&gt; 
     &lt;td&gt;Uses observable to store the data&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="229"&gt; 
 &lt;li&gt; &lt;h3&gt;Should I learn ES6 before learning ReactJS?&lt;/h3&gt; &lt;p&gt;No, you don‚Äôt have to learn es2015/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let's see some of the frequently used ES6 features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Destructuring:&lt;/strong&gt; To get props and use them in a component&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// in es 5
var someData = this.props.someData;
var dispatch = this.props.dispatch;

// in es6
const { someData, dispatch } = this.props;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Spread operator:&lt;/strong&gt; Helps in passing props down into a component&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// in es 5
&amp;lt;SomeComponent someData={this.props.someData} dispatch={this.props.dispatch} /&amp;gt;

// in es6
&amp;lt;SomeComponent {...this.props} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arrow functions:&lt;/strong&gt; Makes compact syntax&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// es 5
var users = usersList.map(function (user) {
  return &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;;
});
// es 6
const users = usersList.map((user) =&amp;gt; &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="230"&gt; 
 &lt;li&gt; &lt;h3&gt;What is Concurrent Rendering?&lt;/h3&gt; &lt;p&gt;The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there's something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// 1. Part of an app by wrapping with ConcurrentMode
&amp;lt;React.unstable_ConcurrentMode&amp;gt;
  &amp;lt;Something /&amp;gt;
&amp;lt;/React.unstable_ConcurrentMode&amp;gt;;

// 2. Whole app using createRoot
ReactDOM.unstable_createRoot(domNode).render(&amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="231"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between async mode and concurrent mode?&lt;/h3&gt; Both refers the same thing. Previously concurrent Mode being referred to as "Async Mode" by React team. The name has been changed to highlight React‚Äôs ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="232"&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use javascript urls in react16.9?&lt;/h3&gt; &lt;p&gt;Yes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; and create a security hole.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const companyProfile = {
  website: "javascript: alert('Your website is hacked')",
};
// It will log a warning
&amp;lt;a href={companyProfile.website}&amp;gt;More details&amp;lt;/a&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember that the future versions will throw an error for javascript URLs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="233"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of eslint plugin for hooks?&lt;/h3&gt; &lt;p&gt;The ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with ‚Äùuse‚Äù and a capital letter right after it is a Hook. In particular, the rule enforces that,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Calls to Hooks are either inside a PascalCase function (assumed to be a component) or another useSomething function (assumed to be a custom Hook).&lt;/li&gt; 
   &lt;li&gt;Hooks are called in the same order on every render.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="234"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Imperative and Declarative in React?&lt;/h3&gt; &lt;p&gt;Imagine a simple UI component, such as a "Like" button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue.&lt;/p&gt; &lt;p&gt;The imperative way of doing this would be:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (user.likes()) {
  if (hasBlue()) {
    removeBlue();
    addGrey();
  } else {
    removeGrey();
    addBlue();
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Basically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario.&lt;/p&gt; &lt;p&gt;In contrast, the declarative approach would be:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (this.state.liked) {
  return &amp;lt;blueLike /&amp;gt;;
} else {
  return &amp;lt;greyLike /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Because the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a specific state, and is therefore much simpler to understand.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="235"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of using TypeScript with ReactJS?&lt;/h3&gt; &lt;p&gt;Below are some of the benefits of using TypeScript with ReactJS,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is possible to use latest JavaScript features&lt;/li&gt; 
   &lt;li&gt;Use of interfaces for complex type definitions&lt;/li&gt; 
   &lt;li&gt;IDEs such as VS Code was made for TypeScript&lt;/li&gt; 
   &lt;li&gt;Avoid bugs with the ease of readability and Validation&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/h3&gt; &lt;p&gt;When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import { loadUser } from "../actions/auth";
store.dispatch(loadUser());
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;But while using &lt;strong&gt;Context API&lt;/strong&gt;, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as &lt;strong&gt;loadUser&lt;/strong&gt; action will be triggered on each re-render.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import AuthState from "./context/auth/AuthState";

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;AuthState&amp;gt;
      &amp;lt;App /&amp;gt;
    &amp;lt;/AuthState&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById("root")
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const authContext = useContext(AuthContext);

const { loadUser } = authContext;

useEffect(() =&amp;gt; {
  loadUser();
}, []);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;loadUser&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const loadUser = async () =&amp;gt; {
  const token = sessionStorage.getItem("token");

  if (!token) {
    dispatch({
      type: ERROR,
    });
  }
  setAuthToken(token);

  try {
    const res = await axios("/api/auth");

    dispatch({
      type: USER_LOADED,
      payload: res.data.data,
    });
  } catch (err) {
    console.error(err);
  }
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="237"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of new JSX transform?&lt;/h3&gt; &lt;p&gt;There are three major benefits of new JSX transform,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is possible to use JSX without importing React packages&lt;/li&gt; 
   &lt;li&gt;The compiled output might improve the bundle size in a small amount&lt;/li&gt; 
   &lt;li&gt;The future improvements provides the flexibility to reduce the number of concepts to learn React.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="238"&gt; 
 &lt;li&gt; &lt;h3&gt;How is the new JSX transform different from old transform??&lt;/h3&gt; &lt;p&gt;The new JSX transform doesn‚Äôt require React to be in scope. i.e, You don't need to import React package for simple scenarios.&lt;/p&gt; &lt;p&gt;Let's take an example to look at the main differences between the old and the new transform,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Old Transform:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import React from "react";

function App() {
  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now JSX transform convert the above code into regular JavaScript as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import React from "react";

function App() {
  return React.createElement("h1", null, "Good morning!!");
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;New Transform:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The new JSX transform doesn't require any React imports&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function App() {
  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Under the hood JSX transform compiles to below code&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import { jsx as _jsx } from "react/jsx-runtime";

function App() {
  return _jsx("h1", { children: "Good morning!!" });
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You still need to import React to use Hooks.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="239"&gt; 
 &lt;li&gt; &lt;h3&gt;What are React Server components?&lt;/h3&gt; &lt;p&gt;React Server Component is a way to write React component that gets rendered in the server-side with the purpose of improving React app performance. These components allow us to load components from the backend.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; React Server Components is still under development and not recommended for production yet.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="240"&gt; 
 &lt;li&gt; &lt;h3&gt;What is prop drilling?&lt;/h3&gt; Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components that do not need the data but only help in passing it around.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="241"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between useState and useRef hook?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;useState causes components to re-render after state updates whereas useRef doesn‚Äôt cause a component to re-render when the value or state changes. Essentially, useRef is like a ‚Äúbox‚Äù that can hold a mutable value in its (&lt;code&gt;.current&lt;/code&gt;) property.&lt;/li&gt; 
   &lt;li&gt;useState allows us to update the state inside components. While useRef allows referencing DOM elements and tracking values.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="242"&gt; 
 &lt;li&gt; &lt;h3&gt;What is a wrapper component?&lt;/h3&gt; &lt;p&gt;A wrapper in React is a component that wraps or surrounds another component or group of components. It can be used for a variety of purposes such as adding additional functionality, styling, or layout to the wrapped components.&lt;/p&gt; &lt;p&gt;For example, consider a simple component that displays a message:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const Message = ({ text }) =&amp;gt; {
  return &amp;lt;p&amp;gt;{text}&amp;lt;/p&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We can create a wrapper component that will add a border to the message component:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const MessageWrapper = (props) =&amp;gt; {
  return (
    &amp;lt;div style={{ border: "1px solid black" }}&amp;gt;
      &amp;lt;Message {...props} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we can use the MessageWrapper component instead of the Message component and the message will be displayed with a border:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;MessageWrapper text="Hello World" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wrapper component can also accept its own props and pass them down to the wrapped component, for example, we can create a wrapper component that will add a title to the message component:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const MessageWrapperWithTitle = ({ title, ...props }) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;{title}&amp;lt;/h3&amp;gt;
      &amp;lt;Message {...props} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we can use the MessageWrapperWithTitle component and pass title props:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;MessageWrapperWithTitle title="My Message" text="Hello World" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way, the wrapper component can add additional functionality, styling, or layout to the wrapped component while keeping the wrapped component simple and reusable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="243"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between useEffect and useLayoutEffect hooks?&lt;/h3&gt; &lt;p&gt;useEffect and useLayoutEffect are both React hooks that can be used to synchronize a component with an external system, such as a browser API or a third-party library. However, there are some key differences between the two:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Timing: useEffect runs after the browser has finished painting, while useLayoutEffect runs synchronously before the browser paints. This means that useLayoutEffect can be used to measure and update layout in a way that feels more synchronous to the user.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Browser Paint: useEffect allows browser to paint the changes before running the effect, hence it may cause some visual flicker. useLayoutEffect synchronously runs the effect before browser paints and hence it will avoid visual flicker.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Execution Order: The order in which multiple useEffect hooks are executed is determined by React and may not be predictable. However, the order in which multiple useLayoutEffect hooks are executed is determined by the order in which they were called.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Error handling: useEffect has a built-in mechanism for handling errors that occur during the execution of the effect, so that it does not crash the entire application. useLayoutEffect does not have this mechanism, and errors that occur during the execution of the effect will crash the entire application.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;In general, it's recommended to use useEffect as much as possible, because it is more performant and less prone to errors. useLayoutEffect should only be used when you need to measure or update layout, and you can't achieve the same result using useEffect.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="244"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Functional and Class Components?&lt;/h3&gt; &lt;p&gt;There are two different ways to create components in ReactJS. The main differences are listed down as below,&lt;/p&gt; &lt;h2&gt;1. Syntax:&lt;/h2&gt; &lt;p&gt;The class components uses ES6 classes to create the components. It uses &lt;code&gt;render&lt;/code&gt; function to display the HTML content in the webpage.&lt;/p&gt; &lt;p&gt;The syntax for class component looks like as below.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;class App extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;This is a class component&amp;lt;/h1&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;strong&gt;Pascal Case&lt;/strong&gt; is the recommended approach to provide naming to a component.&lt;/p&gt; &lt;p&gt;Functional component has been improved over the years with some added features like Hooks. Here is a syntax for functional component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;Hello, I'm a function component&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;2. State:&lt;/h2&gt; &lt;p&gt;State contains information or data about a component which may change over time.&lt;/p&gt; &lt;p&gt;In class component, you can update the state when a user interacts with it or server updates the data using the &lt;code&gt;setState()&lt;/code&gt; method. The initial state is going to be assigned in the &lt;code&gt;Constructor()&lt;/code&gt; method using the &lt;code&gt;this.state&lt;/code&gt; object and it is possible to assign different data types such as string, boolean, numbers, etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;A simple example showing how we use the setState() and constructor():&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;class App extends Component {
  constructor() {
    super();
    this.state = {
      message: "This is a class component",
    };
  }
  updateMessage() {
    this.setState({
      message: "Updating the class component",
    });
  }
  render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;h1&amp;gt;{this.state.message}&amp;lt;/h1&amp;gt;
        &amp;lt;button
          onClick={() =&amp;gt; {
            this.updateMessage();
          }}&amp;gt;
          Click!!
        &amp;lt;/button&amp;gt;
      &amp;lt;/&amp;gt;
    );
  }
}

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You didn't use state in functional components because it was only supported in class components. But over the years hooks have been implemented in functional components which enables to use state too.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;useState()&lt;/code&gt; hook can used to implement state in functional components. It returns an array with two items: the first item is current state and the next one is a function (setState) that updates the value of the current state.&lt;/p&gt; &lt;p&gt;Let's see an example to demonstrate the state in functional components,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function App() {
  const [message, setMessage] = useState("This is a functional component");
  const updateMessage = () =&amp;gt; {
    setMessage("Updating the functional component");
  };
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;{message} &amp;lt;/h1&amp;gt;
      &amp;lt;button onClick={updateMessage}&amp;gt;Click me!!&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;3. Props:&lt;/h2&gt; &lt;p&gt;Props are referred to as "properties". The props are passed into React component just like arguments passed to a function. In other words, they are similar to HTML attributes.&lt;/p&gt; &lt;p&gt;The props are accessible in child class component using &lt;code&gt;this.props&lt;/code&gt; as shown in below example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;class Child extends React.Component {
  render() {
    return (
      &amp;lt;h1&amp;gt;
        {" "}
        This is a functional component and component name is {
          this.props.name
        }{" "}
      &amp;lt;/h1&amp;gt;
    );
  }
}

class Parent extends React.Component {
  render() {
    return (
      &amp;lt;div className="Parent"&amp;gt;
        &amp;lt;Child name="First child component" /&amp;gt;
        &amp;lt;Child name="Second child component" /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Props in functional components are similar to that of the class components but the difference is the absence of 'this' keyword.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function Child(props) {
  return (
    &amp;lt;h1&amp;gt;
      This is a child component and the component name is{props.name}
    &amp;lt;/h1&amp;gt;
  );
}

function Parent() {
  return (
    &amp;lt;div className="Parent"&amp;gt;
      &amp;lt;Child name="First child component" /&amp;gt;
      &amp;lt;Child name="Second child component" /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="245"&gt; 
 &lt;li&gt; &lt;h3&gt;What is strict mode in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;React.StrictMode&lt;/code&gt; is a useful component for highlighting potential problems in an application. Just like &lt;code&gt;&amp;lt;Fragment&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;StrictMode&amp;gt;&lt;/code&gt; does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for &lt;em&gt;development mode&lt;/em&gt; only.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { StrictMode } from "react";

function App() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Header /&amp;gt;
      &amp;lt;StrictMode&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;ComponentOne /&amp;gt;
          &amp;lt;ComponentTwo /&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/StrictMode&amp;gt;
      &amp;lt;Header /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the example above, the &lt;em&gt;strict mode&lt;/em&gt; checks apply to &lt;code&gt;&amp;lt;ComponentOne&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ComponentTwo&amp;gt;&lt;/code&gt; components only. i.e., Part of the application only.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Frameworks such as NextJS has this flag enabled by default.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of strict mode?&lt;/h3&gt; &lt;p&gt;The 
   &lt;strictmode&gt;
     will be helpful in the below cases,
   &lt;/strictmode&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;To find the bugs caused by impure rendering where the components will re-render twice.&lt;/li&gt; 
   &lt;li&gt;To find the bugs caused by missing cleanup of effects where the components will re-run effects one more extra time.&lt;/li&gt; 
   &lt;li&gt;Identifying components with &lt;strong&gt;unsafe lifecycle methods&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Warning about &lt;strong&gt;legacy string ref&lt;/strong&gt; API usage.&lt;/li&gt; 
   &lt;li&gt;Detecting unexpected &lt;strong&gt;side effects&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Detecting &lt;strong&gt;legacy context&lt;/strong&gt; API.&lt;/li&gt; 
   &lt;li&gt;Warning about deprecated &lt;strong&gt;findDOMNode&lt;/strong&gt; usage&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="247"&gt; 
 &lt;li&gt; &lt;h3&gt;Why does strict mode render twice in React?&lt;/h3&gt; &lt;p&gt;StrictMode renders components twice in development mode(not production) in order to detect any problems with your code and warn you about those problems. This is used to detect accidental side effects in the render phase. If you used &lt;code&gt;create-react-app&lt;/code&gt; development tool then it automatically enables StrictMode by default.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const root = createRoot(document.getElementById("root"));
root.render(
  &amp;lt;StrictMode&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/StrictMode&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to disable this behavior then you can simply remove &lt;code&gt;strict&lt;/code&gt; mode.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const root = createRoot(document.getElementById("root"));
root.render(&amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To detect side effects the following functions are invoked twice:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Function component bodies, excluding the code inside event handlers.&lt;/li&gt; 
   &lt;li&gt;Functions passed to &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, or &lt;code&gt;useReducer&lt;/code&gt; (any other Hook)&lt;/li&gt; 
   &lt;li&gt;Class component's &lt;code&gt;constructor&lt;/code&gt;, &lt;code&gt;render&lt;/code&gt;, and &lt;code&gt;shouldComponentUpdate&lt;/code&gt; methods&lt;/li&gt; 
   &lt;li&gt;Class component static &lt;code&gt;getDerivedStateFromProps&lt;/code&gt; method&lt;/li&gt; 
   &lt;li&gt;State updater functions&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="248"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the rules of JSX?&lt;/h3&gt; &lt;p&gt;The below 3 rules needs to be followed while using JSX in a react application.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Return a single root element&lt;/strong&gt;: If you are returning multiple elements from a component, wrap them in a single parent element. Otherwise you will receive the below error in your browser console.&lt;/p&gt; &lt;p&gt;&lt;code&gt;html Adjacent JSX elements must be wrapped in an enclosing tag.&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;All the tags needs to be closed:&lt;/strong&gt; Unlike HTML, all tags needs to closed explicitly with in JSX. This rule applies for self-closing tags(like hr, br and img tags) as well.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use camelCase naming:&lt;/strong&gt; It is suggested to use camelCase naming for attributes in JSX. For example, the common attributes of HTML elements such as &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;tabindex&lt;/code&gt; will be used as &lt;code&gt;className&lt;/code&gt; and &lt;code&gt;tabIndex&lt;/code&gt;.&lt;br /&gt; &lt;strong&gt;Note:&lt;/strong&gt; There is an exception for &lt;code&gt;aria-*&lt;/code&gt; and &lt;code&gt;data-*&lt;/code&gt; attributes which should be lower cased all the time.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="249"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the reason behind multiple JSX tags to be wrapped?&lt;/h3&gt; &lt;p&gt;Behind the scenes, JSX is transformed into plain javascript objects. It is not possible to return two or more objects from a function without wrapping into an array. This is the reason you can't simply return two or more JSX tags from a function without wrapping them into a single parent tag or a Fragment.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="250"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you prevent mutating array variables?&lt;/h3&gt; &lt;p&gt;The preexisting variables outside of the function scope including state, props and context leads to a mutation and they result in unpredictable bugs during the rendering stage. The below points should be taken care while working with arrays variables.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;You need to take copy of the original array and perform array operations on it for the rendering purpose. This is called local mutation.&lt;/li&gt; 
   &lt;li&gt;Avoid triggering mutation methods such as push, pop, sort and reverse methods on original array. It is safe to use filter, map and slice method because they create a new array.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="251"&gt; 
 &lt;li&gt; &lt;h3&gt;What are capture phase events?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;onClickCapture&lt;/code&gt; React event is helpful to catch all the events of child elements irrespective of event propagation logic or even if the events propagation stopped. This is useful if you need to log every click events for analytics purpose.&lt;/p&gt; &lt;p&gt;For example, the below code triggers the click event of parent first followed by second level child eventhough leaf child button elements stops the propagation.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div onClickCapture={() =&amp;gt; alert("parent")}&amp;gt;
  &amp;lt;div onClickCapture={() =&amp;gt; alert("child")}&amp;gt;
    &amp;lt;button onClick={(e) =&amp;gt; e.stopPropagation()} /&amp;gt;
    &amp;lt;button onClick={(e) =&amp;gt; e.stopPropagation()} /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The event propagation for the above code snippet happens in the following order:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It travels downwards in the DOM tree by calling all &lt;code&gt;onClickCapture&lt;/code&gt; event handlers.&lt;/li&gt; 
   &lt;li&gt;It executes &lt;code&gt;onClick&lt;/code&gt; event handler on the target element.&lt;/li&gt; 
   &lt;li&gt;It travels upwards in the DOM tree by call all &lt;code&gt;onClick&lt;/code&gt; event handlers above to it.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How does React updates screen in an application?&lt;/h3&gt; &lt;p&gt;React updates UI in three steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Triggering or initiating a render:&lt;/strong&gt; The component is going to triggered for render in two ways.&lt;/p&gt; 
    &lt;ol&gt; 
     &lt;li&gt;&lt;strong&gt;Initial render:&lt;/strong&gt; When the app starts, you can trigger the initial render by calling &lt;code&gt;creatRoot&lt;/code&gt; with the target DOM node followed by invoking component's &lt;code&gt;render&lt;/code&gt; method. For example, the following code snippet renders &lt;code&gt;App&lt;/code&gt; component on root DOM node.&lt;/li&gt; 
    &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { createRoot } from "react-dom/client";

const root = createRoot(document.getElementById("root"));
root.render(&amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; 
    &lt;ol start="2"&gt; 
     &lt;li&gt;&lt;strong&gt;Re-render when the state updated:&lt;/strong&gt; When you update the component state using the state setter function, the componen't state automatically queues for a render.&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rendering components:&lt;/strong&gt; After triggering a render, React will call your components to display them on the screen. React will call the root component for initial render and call the function component whose state update triggered the render. This is a recursive process for all nested components of the target component.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Commit changes to DOM:&lt;/strong&gt; After calling components, React will modify the DOM for initial render using &lt;code&gt;appendChild()&lt;/code&gt; DOM API and apply minimal necessary DOM updates for re-renders based on differences between rerenders.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="253"&gt; 
 &lt;li&gt; &lt;h3&gt;How does React batch multiple state updates?&lt;/h3&gt; &lt;p&gt;React prevents component from re-rendering for each and every state update by grouping multiple state updates within an event handler. This strategy improves the application performance and this process known as &lt;strong&gt;batching&lt;/strong&gt;. The older version of React only supported batching for browser events whereas React18 supported for asynchronous actions, timeouts and intervals along with native events. This improved version of batching is called &lt;strong&gt;automatic batching&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Let's demonstrate this automatic batching feature with a below example.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { useState } from "react";

export default function BatchingState() {
  const [count, setCount] = useState(0);
  const [message, setMessage] = useState("batching");

  console.log("Application Rendered");

  const handleUsers = () =&amp;gt; {
    fetch("https://jsonplaceholder.typicode.com/users/1").then(() =&amp;gt; {
      // Automatic Batching re-render only once
      setCount(count + 1);
      setMessage("users fetched");
    });
  };

  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;{count}&amp;lt;/h1&amp;gt;
      &amp;lt;button onClick={handleAsyncFetch}&amp;gt;Click Me!&amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The preceding code updated two state variables with in an event handler. However, React will perform automatic batching feature and the component will be re-rendered only once for better performance.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="254"&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to prevent automatic batching?&lt;/h3&gt; &lt;p&gt;Yes, it is possible to prevent automatic batching default behavior. There might be cases where you need to re-render your component after each state update or updating one state depends on another state variable. Considering this situation, React introduced &lt;code&gt;flushSync&lt;/code&gt; method from &lt;code&gt;react-dom&lt;/code&gt; API for the usecases where you need to flush state updates to DOM immediately.&lt;/p&gt; &lt;p&gt;The usage of &lt;code&gt;flushSync&lt;/code&gt; method within an &lt;code&gt;onClick&lt;/code&gt; event handler will be looking like as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { flushSync } from "react-dom";

const handleClick = () =&amp;gt; {
  flushSync(() =&amp;gt; {
    setClicked(!clicked); //Component will create a re-render here
  });

  setCount(count + 1); // Component will create a re-render again here
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above click handler, React will update DOM at first using flushSync and second time updates DOM because of the counter setter function by avoiding automatic batching.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="255"&gt; 
 &lt;li&gt; &lt;h3&gt;What is React hydration?&lt;/h3&gt; &lt;p&gt;React hydration is used to add client-side JavaScript interactivity to pre-rendered static HTML generated by the server. It is used only for server-side rendering(SSR) to enhance the initial rendering time and make it SEO friendly application. This hydration acts as a bridge to reduce the gap between server side and client-side rendering.&lt;/p&gt; &lt;p&gt;After the page loaded with generated static HTML, React will add application state and interactivity by attaching all event handlers for the respective elements. Let's demonstrate this with an example.&lt;/p&gt; &lt;p&gt;Consider that React DOM API(using &lt;code&gt;renderToString&lt;/code&gt;) generated HTML for &lt;code&gt;&amp;lt;App&amp;gt;&lt;/code&gt; component which contains &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element to increment the counter.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import {useState} from 'react';
import { renderToString } from 'react-dom/server';

export default function App() {
  const [count, setCount] = React.useState(0);

  return (
    &amp;lt;h1&amp;gt;Counter&amp;lt;/h1&amp;gt;
    &amp;lt;button onClick={() =&amp;gt; setCount(prevCount =&amp;gt; prevCount + 1)}&amp;gt;
      {count} times
    &amp;lt;/button&amp;gt;
    );
}

const html = renderToString(&amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code generates the below HTML with a header text and button component without any interactivity.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;h1&amp;gt;Counter&amp;lt;/h1&amp;gt;
&amp;lt;button&amp;gt;
  &amp;lt;!-- --&amp;gt;0&amp;lt;!-- --&amp;gt;
  times
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;At this stage &lt;code&gt;hydrateRoot&lt;/code&gt; API can be used to perform hydration by attaching &lt;code&gt;onClick&lt;/code&gt; event handler.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { hydrateRoot } from "react-dom/client";
import App from "./App.js";

hydrateRoot(document.getElementById("root"), &amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After this step, you are able to run React application on server-side and hydrating the javascript bundle on client-side for smooth user experience and SEO purposes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="256"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you update objects inside state?&lt;/h3&gt; &lt;p&gt;You cannot update the objects which exists in the state directly. Instead, you should create a fresh new object (or copy from the existing object) and update the latest state using the newly created object. Eventhough JavaScript objects are mutable, you need to treat objects inside state as read-only while updating the state.&lt;/p&gt; &lt;p&gt;Let's see this comparison with an example. The issue with regular object mutation approach can be described by updating the user details fields of &lt;code&gt;Profile&lt;/code&gt; component. The properties of &lt;code&gt;Profile&lt;/code&gt; component such as firstName, lastName and age details mutated in an event handler as shown below.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { useState } from "react";

export default function Profile() {
  const [user, setUser] = useState({
    firstName: "John",
    lastName: "Abraham",
    age: 30,
  });

  function handleFirstNameChange(e) {
    user.firstName = e.target.value;
  }

  function handleLastNameChange(e) {
    user.lastName = e.target.value;
  }

  function handleAgeChange(e) {
    user.age = e.target.value;
  }

  return (
    &amp;lt;&amp;gt;
      &amp;lt;label&amp;gt;
        First name:
        &amp;lt;input value={user.firstName} onChange={handleFirstNameChange} /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;label&amp;gt;
        Last name:
        &amp;lt;input value={user.lastName} onChange={handleLastNameChange} /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;label&amp;gt;
        Age:
        &amp;lt;input value={user.age} onChange={handleAgeChange} /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;p&amp;gt;
        Profile:
        {person.firstName} {person.lastName} ({person.age})
      &amp;lt;/p&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once you run the application with above user profile component, you can observe that user profile details won't be update upon entering the input fields. This issue can be fixed by creating a new copy of object which includes existing properties through spread syntax(...obj) and add changed values in a single event handler itself as shown below.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;handleProfileChange(e) {
  setUser({
  ...user,
    [e.target.name]: e.target.value
  });
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above event handler is concise instead of maintaining separate event handler for each field. Now, UI displays the updated field values as expected without an issue.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="257"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you update nested objects inside state?&lt;/h3&gt; &lt;p&gt;You cannot simply use spread syntax for all kinds of objects inside state. Because spread syntax is shallow and it copies properties for one level deep only. If the object has nested object structure, UI doesn't work as expected with regular JavaScript nested property mutation. Let's demonstrate this behavior with an example of User object which has address nested object inside of it.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const user = {
  name: "John",
  age: 32,
  address: {
    country: "Singapore",
    postalCode: 440004,
  },
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you try to update the country nested field in a regular javascript fashion(as shown below) then user profile screen won't be updated with latest value.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;user.address.country = "Germany";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This issue can be fixed by flattening all the fields into a top-level object or create a new object for each nested object and point it to it's parent object. In this example, first you need to create copy of address object and update it with the latest value. Later, the address object should be linked to parent user object something like below.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;setUser({
  ...user,
  address: {
    ...user.address,
    country: "Germany",
  },
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This approach is bit verbose and not easy for deep hierarchical state updates. But this workaround can be used for few levels of nested objects without much hassle.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="258"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you update arrays inside state?&lt;/h3&gt; &lt;p&gt;Eventhough arrays in JavaScript are mutable in nature, you need to treat them as immutable while storing them in a state. That means, similar to objects, the arrays cannot be updated directly inside state. Instead, you need to create a copy of the existing array and then set the state to use newly copied array.&lt;/p&gt; &lt;p&gt;To ensure that arrays are not mutated, the mutation operations like direct direct assignment(arr[1]='one'), push, pop, shift, unshift, splice etc methods should be avoided on original array. Instead, you can create a copy of existing array with help of array operations such as filter, map, slice, spread syntax etc.&lt;/p&gt; &lt;p&gt;For example, the below push operation doesn't add the new todo to the total todo's list in an event handler.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;onClick = {
  todos.push({
    id: id+1,
    name: name
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This issue is fixed by replacing push operation with spread syntax where it will create a new array and the UI updated with new todo.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;onClick = {
  [
    ...todos,
    { id: id+1, name: name }
  ]
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="259"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you use immer library for state updates?&lt;/h3&gt; &lt;p&gt;Immer library enforces the immutability of state based on &lt;strong&gt;copy-on-write&lt;/strong&gt; mechanism. It uses JavaScript proxy to keep track of updates to immutable states. Immer has 3 main states as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Current state:&lt;/strong&gt; It refers to actual state&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Draft state:&lt;/strong&gt; All new changes will be applied to this state. In this state, draft is just a proxy of the current state.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Next state:&lt;/strong&gt; It is formed after all mutations applied to the draft state&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Immer can be used by following below instructions,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Install the dependency using &lt;code&gt;npm install use-immer&lt;/code&gt; command&lt;/li&gt; 
   &lt;li&gt;Replace &lt;code&gt;useState&lt;/code&gt; hook with &lt;code&gt;useImmer&lt;/code&gt; hook by importing at the top&lt;/li&gt; 
   &lt;li&gt;The setter function of &lt;code&gt;useImmer&lt;/code&gt; hook can be used to update the state.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, the mutation syntax of immer library simplifies the nested address object of user state as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { useImmer } from "use-immer";
const [user, setUser] = useImmer({
  name: "John",
  age: 32,
  address: {
    country: "Singapore",
    postalCode: 440004,
  },
});

//Update user details upon any event
setUser((draft) =&amp;gt; {
  draft.address.country = "Germany";
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The preceding code enables you to update nested objects with a conceise mutation syntax.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="260"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of preventing the direct state mutations?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="261"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the preferred and non-preferred array operations for updating the state?&lt;/h3&gt; &lt;p&gt;The below table represent preferred and non-preferred array operations for updating the component state.&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Action&lt;/th&gt; 
     &lt;th&gt;Preferred&lt;/th&gt; 
     &lt;th&gt;Non-preferred&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Adding&lt;/td&gt; 
     &lt;td&gt;concat, [...arr]&lt;/td&gt; 
     &lt;td&gt;push, unshift&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Removing&lt;/td&gt; 
     &lt;td&gt;filter, slice&lt;/td&gt; 
     &lt;td&gt;pop, shift, splice&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Replacing&lt;/td&gt; 
     &lt;td&gt;map&lt;/td&gt; 
     &lt;td&gt;splice, arr[i] = someValue&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;sorting&lt;/td&gt; 
     &lt;td&gt;copying to new array&lt;/td&gt; 
     &lt;td&gt;reverse, sort&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;p&gt;If you use Immer library then you can able to use all array methods without any problem.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="262"&gt; 
 &lt;li&gt; &lt;h3&gt;What will happen by defining nested function components?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Technically it is possible to write nested function components but it is not suggested to write nested function definitions. Because it leads to unexpected bugs and performance issues.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="263"&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use keys for non-list items?&lt;/h3&gt; &lt;p&gt;Keys are primarily used for rendering list items but they are not just for list items. You can also use them React to distinguish components. By default, React uses order of the components in&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="264"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the guidelines to be followed for writing reducers?&lt;/h3&gt; &lt;p&gt;There are two guidelines to be taken care while writing reducers in your code.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Reducers must be pure without mutating the state. That means, same input always returns the same output. These reducers run during rendering time similar to state updater functions. So these functions should not send any requests, schedule time outs and any other side effects.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Each action should describe a single user interaction even though there are multiple changes applied to data. For example, if you "reset" registration form which has many user input fields managed by a reducer, it is suggested to send one "reset" action instead of creating separate action for each fields. The proper ordering of actions should reflect the user interactions in the browser and it helps a lot for debugging purpose.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="265"&gt; 
 &lt;li&gt; &lt;h3&gt;How does ReactJS work behind the scenes?&lt;/h3&gt; &lt;p&gt;ReactJS is a powerful JavaScript library for building user interfaces. While it appears simple on the surface, React performs a lot of complex operations behind the scenes to efficiently update the UI. Here's an overview of how it works internally:&lt;/p&gt; &lt;h4&gt;&lt;strong&gt;1. Virtual DOM &amp;amp; Component Rendering&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;React doesn't manipulate the real DOM directly. Instead, it uses a &lt;strong&gt;Virtual DOM&lt;/strong&gt; ‚Äî a lightweight JavaScript representation of the UI.&lt;/p&gt; &lt;p&gt;When a component renders (e.g., &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React &lt;strong&gt;executes the component function&lt;/strong&gt; (e.g., &lt;code&gt;App()&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;Hooks like &lt;code&gt;useState&lt;/code&gt; are registered and tracked in order.&lt;/li&gt; 
   &lt;li&gt;React builds a &lt;strong&gt;Virtual DOM tree&lt;/strong&gt; from the returned JSX.&lt;/li&gt; 
   &lt;li&gt;This virtual DOM is a &lt;strong&gt;plain JS object&lt;/strong&gt; that describes the desired UI.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;This process ensures fast and efficient rendering before React decides how to update the real DOM.&lt;/p&gt; &lt;h4&gt;2. &lt;strong&gt;React Fiber Architecture&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;React‚Äôs core engine is called &lt;strong&gt;Fiber&lt;/strong&gt;, introduced in React 16. Fiber is a reimplementation of the React reconciliation algorithm with the following capabilities:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Breaks rendering work into &lt;strong&gt;units of work&lt;/strong&gt; (fiber nodes).&lt;/li&gt; 
   &lt;li&gt;Enables &lt;strong&gt;interruptible rendering&lt;/strong&gt; (important for responsiveness).&lt;/li&gt; 
   &lt;li&gt;Supports &lt;strong&gt;priority scheduling&lt;/strong&gt; and &lt;strong&gt;concurrent rendering&lt;/strong&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Each Fiber node represents a component and stores:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The component type (function/class).&lt;/li&gt; 
   &lt;li&gt;Props, state, and effects.&lt;/li&gt; 
   &lt;li&gt;Links to parent, child, and sibling fibers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;3. &lt;strong&gt;Reconciliation (Diffing Algorithm)&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;When state or props change:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React re-executes the component to produce a new virtual DOM.&lt;/li&gt; 
   &lt;li&gt;It &lt;strong&gt;compares the new virtual DOM to the previous one&lt;/strong&gt; using an efficient diffing algorithm.&lt;/li&gt; 
   &lt;li&gt;React determines the &lt;strong&gt;minimal set of DOM changes&lt;/strong&gt; required.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;This process is known as &lt;strong&gt;reconciliation&lt;/strong&gt;.&lt;/p&gt; &lt;h4&gt;4. &lt;strong&gt;Commit Phase (Real DOM Updates)&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;Once reconciliation is done:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React enters the &lt;strong&gt;commit phase&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;It applies calculated changes to the &lt;strong&gt;real DOM&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;It also runs side effects like &lt;code&gt;useEffect&lt;/code&gt; or &lt;code&gt;useLayoutEffect&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;This is the only time React interacts directly with the browser DOM.&lt;/p&gt; &lt;h4&gt;5. &lt;strong&gt;Hooks and State Management&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;With Hooks (like &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt;):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React keeps an &lt;strong&gt;internal list of hooks per component&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Hooks are identified by their order in the function.&lt;/li&gt; 
   &lt;li&gt;When state updates occur, React re-renders the component and re-runs the hooks in the same order.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;6. &lt;strong&gt;React Scheduler&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;React uses an internal &lt;strong&gt;Scheduler&lt;/strong&gt; to control how updates are prioritized:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Urgent tasks like clicks and inputs are processed immediately.&lt;/li&gt; 
   &lt;li&gt;Non-urgent tasks (like data fetching) can be delayed or paused.&lt;/li&gt; 
   &lt;li&gt;This improves responsiveness and allows for &lt;strong&gt;time slicing&lt;/strong&gt; in Concurrent Mode.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="266"&gt; 
 &lt;li&gt; &lt;h3&gt;How is &lt;code&gt;useReducer&lt;/code&gt; Different from &lt;code&gt;useState&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are notable differences between &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt; hooks.&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Feature&lt;/th&gt; 
     &lt;th&gt;&lt;code&gt;useState&lt;/code&gt;&lt;/th&gt; 
     &lt;th&gt;&lt;code&gt;useReducer&lt;/code&gt;&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;State complexity&lt;/td&gt; 
     &lt;td&gt;Simple (one variable or flat object)&lt;/td&gt; 
     &lt;td&gt;Complex, multi-part or deeply nested&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Update style&lt;/td&gt; 
     &lt;td&gt;Direct (e.g. &lt;code&gt;setState(x)&lt;/code&gt;)&lt;/td&gt; 
     &lt;td&gt;Through actions (e.g. &lt;code&gt;dispatch({})&lt;/code&gt;)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Update logic&lt;/td&gt; 
     &lt;td&gt;In component&lt;/td&gt; 
     &lt;td&gt;In reducer function&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Reusability &amp;amp; testing&lt;/td&gt; 
     &lt;td&gt;Less reusable&lt;/td&gt; 
     &lt;td&gt;Highly reusable &amp;amp; testable&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="267"&gt; 
 &lt;li&gt; &lt;h3&gt;What is useContext? What are the steps to follow for useContext?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useContext&lt;/code&gt; hook is a built-in React Hook that lets you access the value of a context inside a functional component without needing to wrap it in a &amp;lt;Context.Consumer&amp;gt; component.&lt;/p&gt; &lt;p&gt;It helps you &lt;strong&gt;avoid prop drilling&lt;/strong&gt; (passing props through multiple levels) by allowing components to access shared data like themes, authentication status, or user preferences.&lt;/p&gt; &lt;p&gt;The usage of useContext involves three main steps:&lt;/p&gt; &lt;h4&gt;&lt;strong&gt;Step 1 : Create the Context&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;Use &lt;code&gt;React.createContext()&lt;/code&gt; to create a context object.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React, { createContext } from 'react'; 

const ThemeContext = createContext(); // default value optional
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You typically export this so other components can import it.&lt;/p&gt; &lt;h4&gt;&lt;strong&gt;Step 2: Provide the Context Value&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;Wrap your component tree (or a part of it) with the &lt;code&gt;Context.Provider&lt;/code&gt; and pass a &lt;code&gt;value&lt;/code&gt; prop.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function App() {
    return ( 
        &amp;lt;ThemeContext.Provider value="dark"&amp;gt;
           &amp;lt;MyComponent /&amp;gt;
        &amp;lt;/ThemeContext.Provider&amp;gt;
    ); 
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now any component inside &lt;code&gt;&amp;lt;ThemeContext.Provider&amp;gt;&lt;/code&gt; can access the context value.&lt;/p&gt; &lt;h4&gt;&lt;strong&gt;Step 3: Consume the Context with&lt;/strong&gt; &lt;code&gt;**useContext**&lt;/code&gt;&lt;/h4&gt; &lt;p&gt;In any functional component &lt;strong&gt;inside the Provider&lt;/strong&gt;, use the &lt;code&gt;useContext&lt;/code&gt; hook:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { useContext } from 'react'; 
function MyComponent() {
    const theme = useContext(ThemeContext); // theme = "dark"
    return &amp;lt;p&amp;gt;Current Theme: {theme}&amp;lt;/p&amp;gt;; 
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="268"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the use cases of useContext hook?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useContext&lt;/code&gt; hook in React is used to share data across components without having to pass props manually through each level. Here are some common and effective use cases:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Theme Customization&lt;/strong&gt;&lt;br /&gt; &lt;code&gt;useContext&lt;/code&gt; can be used to manage application-wide themes, such as light and dark modes, ensuring consistent styling and enabling user-driven customization.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Localization and Internationalization&lt;/strong&gt;&lt;br /&gt; It supports localization by providing translated strings or locale-specific content to components, adapting the application for users in different regions.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;User Authentication and Session Management&lt;/strong&gt;&lt;br /&gt; &lt;code&gt;useContext&lt;/code&gt; allows global access to authentication status and user data. This enables conditional rendering of components and helps manage protected routes or user-specific UI elements.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Shared Modal or Sidebar Visibility&lt;/strong&gt;&lt;br /&gt; It's ideal for managing the visibility of shared UI components like modals, drawers, or sidebars, especially when their state needs to be controlled from various parts of the app.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Combining with&lt;/strong&gt; &lt;code&gt;**useReducer**&lt;/code&gt; &lt;strong&gt;for Global State Management&lt;/strong&gt;&lt;br /&gt; When combined with &lt;code&gt;useReducer&lt;/code&gt;, &lt;code&gt;useContext&lt;/code&gt; becomes a powerful tool for managing more complex global state logic. This pattern helps maintain cleaner, scalable state logic without introducing external libraries like Redux. Some of the common use cases of useContext are listed below,&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="269"&gt; 
 &lt;li&gt; &lt;h3&gt;When to use client and server components?&lt;/h3&gt; &lt;p&gt;You can efficiently build nextjs application if you are aware about which part of the application needs to use client components and which other parts needs to use server components. The common cases of both client and server components are listed below:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Client components:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Whenever your need to add interactivity and event listeners such as onClick(), onChange(), etc to the pages&lt;/li&gt; 
   &lt;li&gt;If you need to use State and Lifecycle Effects like useState(), useReducer(), useEffect() etc.&lt;/li&gt; 
   &lt;li&gt;If there is a requirement to use browser-only APIs.&lt;/li&gt; 
   &lt;li&gt;If you need to implement custom hooks that depend on state, effects, or browser-only APIs.&lt;/li&gt; 
   &lt;li&gt;There are React Class components in the pages.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Server components:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If the component logic is about data fetching.&lt;/li&gt; 
   &lt;li&gt;If you need to access backend resources directly.&lt;/li&gt; 
   &lt;li&gt;When you need to keep sensitive information((access tokens, API keys, etc) ) on the server.&lt;/li&gt; 
   &lt;li&gt;If you want reduce client-side JavaScript and placing large dependencies on the server.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="270"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between page router and app router in nextjs?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="271"&gt; 
 &lt;li&gt; &lt;h3&gt;Can you describe the useMemo() Hook?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useMemo()&lt;/code&gt; Hook in React is used to &lt;strong&gt;optimize performance&lt;/strong&gt; by &lt;strong&gt;memoizing the result of expensive calculations&lt;/strong&gt;. It ensures that a function is &lt;strong&gt;only re-executed when its dependencies change&lt;/strong&gt;, preventing unnecessary computations on every re-render.&lt;/p&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-js"&gt; const memoizedValue = useMemo(() =&amp;gt; computeExpensiveValue(arg), [dependencies]);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;computeExpensiveValue&lt;/code&gt;&lt;/strong&gt;:&lt;br /&gt; A function that returns the computed result.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;dependencies&lt;/code&gt;&lt;/strong&gt;:&lt;br /&gt; An array of values that, when changed, will cause the memoized function to re-run.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If the dependencies haven‚Äôt changed since the last render, React returns the &lt;strong&gt;cached result&lt;/strong&gt; instead of re-running the function.&lt;/p&gt; &lt;p&gt;Let's exaplain the usage of &lt;code&gt;useMemo&lt;/code&gt; hook with an example of user search and its respective filtered users list.&lt;/p&gt; &lt;h4&gt;Example: Memoizing a Filtered List&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import React, { useState, useMemo } from 'react';

const users = [
  { id: 1, name: 'Sudheer' },
  { id: 2, name: 'Brendon' },
  { id: 3, name: 'Charlie' },
  { id: 4, name: 'Dary' },
  { id: 5, name: 'Eden' }
];

export default function UserSearch({ users }) {
  const [searchTerm, setSearchTerm] = useState('');
  const [counter, setCounter] = useState(0);

  // Memoize the filtered user list based on the search term
  const filteredUsers = useMemo(() =&amp;gt; {
    console.log("Filtering users...");
    return users.filter(user =&amp;gt;
      user.name.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm]);

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;Counter: {counter}&amp;lt;/h2&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCounter(prev =&amp;gt; prev + 1)}&amp;gt;Increment Counter&amp;lt;/button&amp;gt;

      &amp;lt;h2&amp;gt;Search Users&amp;lt;/h2&amp;gt;
      &amp;lt;input
        type="text"
        value={searchTerm}
        onChange={(e) =&amp;gt; setSearchTerm(e.target.value)}
        placeholder="Enter name"
      /&amp;gt;

      &amp;lt;ul&amp;gt;
        {filteredUsers.map(user =&amp;gt; (
          &amp;lt;li key={user.id}&amp;gt;{user.name}&amp;lt;/li&amp;gt;
        ))}
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The filteredUsers list is only recomputed when searchTerm changes.&lt;/li&gt; 
   &lt;li&gt;Pressing the "Increment Counter" button does not trigger the filtering logic again, as it's not a dependency.&lt;/li&gt; 
   &lt;li&gt;The console will only log "Filtering users..." when the search term updates.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="272"&gt; 
 &lt;li&gt; &lt;h3&gt;Can Hooks be used in class components?&lt;/h3&gt; No, Hooks cannot be used inside class components. They are specially designed for function components. This is because hooks depend on the sequence in which they are called during a component‚Äôs render, something that's only guaranteed in functional components. However, both class and function components can coexist in the same application.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="273"&gt; 
 &lt;li&gt; &lt;h3&gt;What is an updater function? Should an updater function be used in all cases?&lt;/h3&gt; &lt;p&gt;An &lt;strong&gt;updater function&lt;/strong&gt; is a form of &lt;code&gt;setState&lt;/code&gt; where you pass a &lt;strong&gt;function&lt;/strong&gt; instead of a direct value. This function receives the &lt;strong&gt;previous state&lt;/strong&gt; as an argument and returns the &lt;strong&gt;next state&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;The updater function expression looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;setCount(prevCount =&amp;gt; prevCount + 1); // Safe and predictable
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here, &lt;code&gt;prevCount =&amp;gt; prevCount + 1&lt;/code&gt; is the updater function.&lt;/p&gt; &lt;p&gt;In the React community, there's often a recommendation to use updater functions when updating state that depends on its previous value. This helps prevent unexpected behaviors that can arise from working with outdated or "stale" state.&lt;/p&gt; &lt;p&gt;While using an updater function is a good habit, it's not always necessary. In most cases, React batches updates and ensures that the state is up-to-date at the beginning of the event handler, so you typically don‚Äôt run into stale state issues during a single synchronous event. However, if you‚Äôre doing multiple updates to the same state variable within a single handler, using the updater form ensures that each update correctly uses the latest state value, rather than a potentially outdated one.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Multiple Updates in One Handler&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function handleCount() {
   setCounter(a =&amp;gt; a + 1);
   setCounter(a =&amp;gt; a + 1);
   setCounter(a =&amp;gt; a + 1);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this example, &lt;code&gt;a =&amp;gt; a + 1&lt;/code&gt; is an &lt;strong&gt;updater function&lt;/strong&gt;. React queues these updater functions and applies them sequentially, each using the most recent state value. As a result, the counter will correctly increment by 3.&lt;/p&gt; &lt;p&gt;In many cases, such as setting state based on user input or assigning static values, you don‚Äôt need the updater function:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;setName('Sudheer');
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="274"&gt; 
 &lt;li&gt; &lt;h3&gt;Can useState take a function as an initial value?&lt;/h3&gt; &lt;p&gt;Yes, &lt;code&gt;useState&lt;/code&gt; can take a function as an initial value, and this is a useful feature in React called &lt;strong&gt;lazy initialization&lt;/strong&gt;. This function is also known as &lt;strong&gt;initializer function&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;When you call useState(initialValue), you normally pass in a value directly:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const [count, setCount] = useState(0);  // initial value is 0
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But if calculating that initial value is expensive or involves logic, you can pass a function that returns the value:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;   const [count, setCount] = useState(() =&amp;gt; {
   // This function only runs once ‚Äî when the component first renders
   return expensiveComputation();
   });
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This function avoids doing heavy computation on every render. If you don't use this function form and invokes it directly, the function will run everytime the component renders and impact the performance. For example, the below usage is not recommended.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const [count, setCount] = useState(expensiveComputation());
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="275"&gt; 
 &lt;li&gt; &lt;h3&gt;What types of values can &lt;code&gt;useState&lt;/code&gt; hold?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook accepts different types of values.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Primitives: &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Arrays&lt;/li&gt; 
   &lt;li&gt;Objects&lt;/li&gt; 
   &lt;li&gt;Functions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;But you needs to be cautious with &lt;strong&gt;reference types (objects/arrays)&lt;/strong&gt; because React compares old and new values &lt;strong&gt;by reference&lt;/strong&gt;, so direct mutations won't trigger a re-render. For example, the correct and wrong ways of state updates as shown below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;user.name = "Sudheer"; //wrong way
setUser(prev =&amp;gt; ({ ...prev, name: 'Sudheer' })); //correct way
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="276"&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if you call &lt;code&gt;useState&lt;/code&gt; conditionally?&lt;/h3&gt; &lt;p&gt;As per rules of React Hooks, hooks must be called unconditionally. For example, if you conditionally call it:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;if (someCondition) { 
   const [state, setState] = useState(0); 
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;React will throw a runtime error because it &lt;strong&gt;relies on the order of Hook calls&lt;/strong&gt;, and conditional logic breaks that order.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="277"&gt; 
 &lt;li&gt; &lt;h3&gt;Is useState Synchronous or Asynchronous?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook is synchronous, but state updates are asynchronous. When you call &lt;code&gt;useState()&lt;/code&gt;, it runs synchronously and returns the state variable and setter function as tuple.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const [count, setCount] = useState(0);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This happens immediately during rendering. However, the state update function (&lt;strong&gt;setState&lt;/strong&gt;) is asynchronous in the sense that it doesn't update the state immediately. React &lt;strong&gt;batches&lt;/strong&gt; updates and applies them before the next render. You won‚Äôt see the updated value immediately after calling &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const [count, setCount] = useState(0);

function handleClick() {
  setCount(count + 1);
  console.log(count); // ‚ùóÔ∏èStill logs the old value
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &amp;gt; &lt;code&gt;console.log(count)&lt;/code&gt; prints the &lt;strong&gt;old value&lt;/strong&gt;, because the update hasn‚Äôt happened yet.&lt;/p&gt; &lt;p&gt;To see the updated state value, you can use &lt;code&gt;useEffect()&lt;/code&gt; hook. It runs &lt;strong&gt;after the component has re-rendered.&lt;/strong&gt; &amp;nbsp;By the time &lt;code&gt;useEffect&lt;/code&gt; runs:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The component has been updated.&lt;/li&gt; 
   &lt;li&gt;The &lt;strong&gt;state contains the new value&lt;/strong&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import React, { useState, useEffect } from 'react';

function Counter() {
const [count, setCount] = useState(0);

const handleClick = () =&amp;gt; {
setCount(count + 1);
console.log('Clicked count (old):', count); // Old value
};

useEffect(() =&amp;gt; {
console.log('Updated count:', count); // New value
}, [count]); // Only runs when `count` changes

return &amp;lt;button onClick={handleClick}&amp;gt;Count: {count}&amp;lt;/button&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="278"&gt; 
 &lt;li&gt; &lt;h3&gt;Can you explain how useState works internally?&lt;/h3&gt; &lt;p&gt;React‚Äôs hooks, including &lt;code&gt;useState&lt;/code&gt;, rely on some internal machinery that keeps track of state &lt;strong&gt;per component&lt;/strong&gt; and &lt;strong&gt;per hook call&lt;/strong&gt; during rendering. Here's a simplified explanation of the internal mechanics:&lt;/p&gt; &lt;h4&gt;1. &lt;strong&gt;Hook List / Linked List&lt;/strong&gt;&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React maintains a linked list or array of "hook states" for each component.&lt;/li&gt; 
   &lt;li&gt;When a component renders, React keeps track of which hook it is currently processing via a cursor/index.&lt;/li&gt; 
   &lt;li&gt;Each call to &lt;code&gt;useState()&lt;/code&gt; corresponds to one "slot" in this list.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;2. &lt;strong&gt;State Storage&lt;/strong&gt;&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Each slot stores:&lt;/li&gt; 
   &lt;li&gt;The current state value.&lt;/li&gt; 
   &lt;li&gt;A queue of pending state updates.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;3. &lt;strong&gt;Initial Render&lt;/strong&gt;&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;When the component first renders, React:&lt;/li&gt; 
   &lt;li&gt;Creates a new slot for &lt;code&gt;useState&lt;/code&gt; with the initial state (e.g., &lt;code&gt;0&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;Returns &lt;code&gt;[state, updaterFunction]&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;4. &lt;strong&gt;Updater Function&lt;/strong&gt;&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The updater function (&lt;code&gt;setCount&lt;/code&gt;) is a closure that, when called:&lt;/li&gt; 
   &lt;li&gt;Enqueues a state update to React's internal queue.&lt;/li&gt; 
   &lt;li&gt;Schedules a re-render of the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;5. &lt;strong&gt;Re-render and State Update&lt;/strong&gt;&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;On the next render:&lt;/li&gt; 
   &lt;li&gt;React processes all queued updates for each hook slot.&lt;/li&gt; 
   &lt;li&gt;Updates the stored state value accordingly.&lt;/li&gt; 
   &lt;li&gt;Returns the new state to the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;6. &lt;strong&gt;Important: Hook Order&lt;/strong&gt;&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Hooks must be called in the same order on every render so React can match hook calls to their internal slots.&lt;/li&gt; 
   &lt;li&gt;That‚Äôs why you can‚Äôt call hooks conditionally.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The pseudocode for internal implementation of &lt;code&gt;useState&lt;/code&gt; looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;  let hookIndex = 0;
  const hooks = [];
  
  function useState(initialValue) {
      const currentIndex = hookIndex;
  
      if (!hooks[currentIndex]) {
          // First render: initialize state
          hooks[currentIndex] = {
              state: initialValue,
              queue: [],
          };
      }
  
      const hook = hooks[currentIndex];
  
      // Process queued updates
      hook.queue.forEach(update =&amp;gt; {
          hook.state = update(hook.state);
      });
      hook.queue = [];
  
      // Define updater function
      function setState(action) {
          // action can be new state or function(state) =&amp;gt; new state
          hook.queue.push(typeof action === 'function' ? action : () =&amp;gt; action);
          scheduleRender(); // triggers React re-render
      }
  
      hookIndex++;
      return [hook.state, setState];
  }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="279"&gt; 
 &lt;li&gt; &lt;h3&gt;What is &lt;code&gt;useReducer&lt;/code&gt;? Why do you use useReducer?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useReducer&lt;/code&gt; hook is a React hook used to manage &lt;strong&gt;complex state logic&lt;/strong&gt; inside &lt;strong&gt;functional components&lt;/strong&gt;. It is conceptually similar to &lt;strong&gt;Redux&lt;/strong&gt;. i.e, Instead of directly updating state like with &lt;code&gt;useState&lt;/code&gt;, you &lt;strong&gt;dispatch an action&lt;/strong&gt; to a &lt;strong&gt;reducer function&lt;/strong&gt;, and the reducer returns the new state.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;useReducer&lt;/code&gt; hook takes three arguments:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const [state, dispatch] = useReducer(reducer, initialState, initFunction);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;**reducer**&lt;/code&gt;: A function &lt;code&gt;(state, action) =&amp;gt; newState&lt;/code&gt; that handles how state should change based on the action.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;**initialState**&lt;/code&gt;: The starting state.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;**dispatch**&lt;/code&gt;: A function you call to trigger an update by passing an action.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The &lt;code&gt;useReducer&lt;/code&gt; hook is used when:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;strong&gt;state is complex&lt;/strong&gt;, such as nested structures or multiple related values.&lt;/li&gt; 
   &lt;li&gt;State updates depend on the &lt;strong&gt;previous state&lt;/strong&gt; and &lt;strong&gt;logic&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;You want to &lt;strong&gt;separate state update logic&lt;/strong&gt; from UI code to make it cleaner and testable.&lt;/li&gt; 
   &lt;li&gt;You‚Äôre managing features like: 
    &lt;ul&gt; 
     &lt;li&gt;Forms&lt;/li&gt; 
     &lt;li&gt;Wizards / Multi-step flows&lt;/li&gt; 
     &lt;li&gt;Undo/Redo functionality&lt;/li&gt; 
     &lt;li&gt;Shopping cart logic&lt;/li&gt; 
     &lt;li&gt;Toggle &amp;amp; conditional UI logic&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="280"&gt; 
 &lt;li&gt; &lt;h3&gt;How does &lt;code&gt;useReducer&lt;/code&gt; works? Explain with an example&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useReducer&lt;/code&gt; hooks works similarly to Redux, where:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;You define a &lt;strong&gt;reducer function&lt;/strong&gt; to handle state transitions.&lt;/li&gt; 
   &lt;li&gt;You dispatch actions to update the state.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Counter Example with Increment, Decrement, and Reset:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Reducer function:&lt;/p&gt; &lt;p&gt;Define a counter reducer function that takes the current state and an action object with a type, and returns a new state based on that type.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function counterReducer(state, action) {
   switch (action.type) {
     case 'increment':
       return { count: state.count + 1 };
     case 'decrement':
       return { count: state.count - 1 };
     case 'reset':
       return { count: 0 };
     default:
       return state;
   }
 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Using &lt;code&gt;useReducer&lt;/code&gt;: Invoke &lt;code&gt;useReducer&lt;/code&gt; with above reducer function along with initial state. Thereafter, you can attach dispatch actions for respective button handlers.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import React, { useReducer } from 'react';

  function Counter() {
    const initialState = { count: 0 };
    const [state, dispatch] = useReducer(counterReducer, initialState);

    return (
      &amp;lt;div style={{ textAlign: 'center' }}&amp;gt;
        &amp;lt;h2&amp;gt;Count: {state.count}&amp;lt;/h2&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; dispatch({ type: 'increment' })}&amp;gt;Increment&amp;lt;/button&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; dispatch({ type: 'decrement' })}&amp;gt;Decrement&amp;lt;/button&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; dispatch({ type: 'reset' })}&amp;gt;Reset&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }

export default Counter;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once the new state has been returned, React re-renders the component with the updated &lt;code&gt;state.count&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="281"&gt; 
 &lt;li&gt; &lt;h3&gt;Can you combine &lt;strong&gt;useReducer&lt;/strong&gt; with &lt;strong&gt;useContext&lt;/strong&gt;?&lt;/h3&gt; &lt;p&gt;Yes, it's common to combine &lt;strong&gt;useReducer&lt;/strong&gt; with &lt;strong&gt;useContext&lt;/strong&gt; to build a lightweight state management system similar to Redux:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const AppContext = React.createContext();

function AppProvider({ children }) {
  const [state, dispatch] = useReducer(reducer, initialState);
  return (
    &amp;lt;AppContext.Provider value={{ state, dispatch }}&amp;gt;
      {children}
    &amp;lt;/AppContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="282"&gt; 
 &lt;li&gt; &lt;h3&gt;Can you dispatch multiple actions in a row with useReducer?&lt;/h3&gt; &lt;p&gt;Yes, you can dispatch multiple actions in a row using &lt;code&gt;useReducer&lt;/code&gt; but not directly in one call. You'd have to call dispatch multiple times or create a composite action in your reducer that performs multiple updates based on the action type.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Dispatching Multiple Actions&lt;/strong&gt; You can define a custom function with dispatching actions one by one.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function handleMultipleActions(dispatch) {
  dispatch({ type: 'increment' });
  dispatch({ type: 'increment' });
  dispatch({ type: 'reset' });
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that, you need to invoke it through event handler&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;&amp;lt;button onClick={() =&amp;gt; handleMultipleActions(dispatch)}&amp;gt;
  Run Multiple Actions
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also define a custom action type If you want multiple state changes to be handled in one reducer call.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;case 'increment_twice':
  return { count: state.count + 2 };
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then dispatch&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;dispatch({ type: 'increment_twice' });
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="283"&gt; 
 &lt;li&gt; &lt;h3&gt;How does useContext works? Explain with an example&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useContext&lt;/code&gt; hook can be used for authentication state management across multiple components and pages in a React application.&lt;/p&gt; &lt;p&gt;Let's build a simple authentication flow with:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Login and Logout buttons&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;Global &lt;code&gt;AuthContext&lt;/code&gt; to share state&lt;/li&gt; 
   &lt;li&gt;Components that can &lt;strong&gt;access and update&lt;/strong&gt; auth status&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;1. Create the Auth Context:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can define &lt;code&gt;AuthProvider&lt;/code&gt; which holds and provides &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;login()&lt;/code&gt;, and &lt;code&gt;logout()&lt;/code&gt; via context.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;// AuthContext.js
import React, { createContext, useContext, useState } from 'react';

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);

  const login = (username) =&amp;gt; setUser({ name: username });
  const logout = () =&amp;gt; setUser(null);

  return (
    &amp;lt;AuthContext.Provider value={{ user, login, logout }}&amp;gt;
      {children}
    &amp;lt;/AuthContext.Provider&amp;gt;
  );
}

// Custom hook for cleaner usage
export const useAuth = () =&amp;gt; useContext(AuthContext);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;2. Wrap Your App with the Provider:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Wrap the above created provider in main &lt;code&gt;App.js&lt;/code&gt; file&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;// App.js
import React from 'react';
import { AuthProvider } from './AuthContext';
import HomePage from './HomePage';
import Dashboard from './Dashboard';

function App() {
  return (
    &amp;lt;AuthProvider&amp;gt;
      &amp;lt;HomePage /&amp;gt;
      &amp;lt;Dashboard /&amp;gt;
    &amp;lt;/AuthProvider&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;3. Home page with login:&lt;/strong&gt; Read or access user and login details through custom useAuth hook and use it inside home page.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt; // HomePage.js
 import React from 'react';
 import { useAuth } from './AuthContext';

 function HomePage() {
   const { user, login } = useAuth();

   return (
     &amp;lt;div&amp;gt;
       &amp;lt;h1&amp;gt;Home&amp;lt;/h1&amp;gt;
       {user ? (
         &amp;lt;p&amp;gt;Welcome back, {user.name}!&amp;lt;/p&amp;gt;
       ) : (
         &amp;lt;button onClick={() =&amp;gt; login('Alice')}&amp;gt;Login&amp;lt;/button&amp;gt;
       )}
     &amp;lt;/div&amp;gt;
   );
 }

 export default HomePage;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;4. Dashboard with logout:&lt;/strong&gt; Read or access user and logout details from &lt;code&gt;useAuth&lt;/code&gt; custom hook and use it inside dashboard page.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;  // Dashboard.js
  import React from 'react';
  import { useAuth } from './AuthContext';
  
  function Dashboard() {
    const { user, logout } = useAuth();
  
    if (!user) {
      return &amp;lt;p&amp;gt;Please login to view the dashboard.&amp;lt;/p&amp;gt;;
    }
  
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt;Dashboard&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;Logged in as: {user.name}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={logout}&amp;gt;Logout&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
  
  export default Dashboard;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="284"&gt; 
 &lt;li&gt; &lt;h3&gt;Can You Use Multiple Contexts in One Component?&lt;/h3&gt; &lt;p&gt;Yes, it is possible. You can use multiple contexts inside the same component by calling useContext multiple times, once for each context.&lt;/p&gt; &lt;p&gt;It can be achieved with below steps,&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create multiple contexts using &lt;code&gt;createContext()&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Wrap your component tree with multiple &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt;s.&lt;/li&gt; 
   &lt;li&gt;Call &lt;code&gt;useContext()&lt;/code&gt; separately for each context in the same component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Example: Using &lt;code&gt;ThemeContext&lt;/code&gt; and &lt;code&gt;UserContext&lt;/code&gt; Together&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import React, { createContext, useContext } from 'react';

 // Step 1: Create two contexts
 const ThemeContext = createContext();
 const UserContext = createContext();

 function Dashboard() {
   // Step 2: Use both contexts
   const theme = useContext(ThemeContext);
   const user = useContext(UserContext);

   return (
     &amp;lt;div style={{ background: theme === 'dark' ? '#333' : '#fff' }}&amp;gt;
       &amp;lt;h1&amp;gt;Welcome, {user.name}&amp;lt;/h1&amp;gt;
       &amp;lt;p&amp;gt;Current theme: {theme}&amp;lt;/p&amp;gt;
     &amp;lt;/div&amp;gt;
   );
 }

 // Step 3: Provide both contexts
 function App() {
   return (
     &amp;lt;ThemeContext.Provider value="dark"&amp;gt;
       &amp;lt;UserContext.Provider value={{ name: 'Sudheer' }}&amp;gt;
         &amp;lt;Dashboard /&amp;gt;
       &amp;lt;/UserContext.Provider&amp;gt;
     &amp;lt;/ThemeContext.Provider&amp;gt;
   );
 }

 export default App;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="285"&gt; 
 &lt;li&gt; &lt;h3&gt;What's a common pitfall when using useContext with objects?&lt;/h3&gt; &lt;p&gt;A &lt;strong&gt;common pitfall&lt;/strong&gt; when using &lt;code&gt;useContext&lt;/code&gt; with objects is &lt;strong&gt;triggering unnecessary re-renders&lt;/strong&gt; across all consuming components ‚Äî even when only part of the context value changes.&lt;/p&gt; &lt;p&gt;When you provide an object as the context value, React compares the entire object reference. If the object changes (even slightly), React assumes the whole context has changed, and &lt;strong&gt;all components using&lt;/strong&gt; &lt;code&gt;useContext(MyContext)&lt;/code&gt; &lt;strong&gt;will re-render&lt;/strong&gt;, regardless of whether they use the part that changed.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;   const MyContext = React.createContext();

   function MyProvider({ children }) {
     const [user, setUser] = useState(null);
     const [theme, setTheme] = useState('light');

     // This causes all consumers to re-render on any state change
     const contextValue = { user, setUser, theme, setTheme };

     return (
       &amp;lt;MyContext.Provider value={contextValue}&amp;gt;
         {children}
       &amp;lt;/MyContext.Provider&amp;gt;
     );
   }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this case, a change in &lt;code&gt;theme&lt;/code&gt; will also trigger a re-render in components that only care about &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This issue can be fixed in two ways,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1. Split Contexts&lt;/strong&gt;&lt;br /&gt; Create separate contexts for unrelated pieces of state:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const UserContext = React.createContext(); 
const ThemeContext = React.createContext();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;2. Memoize Context Value&lt;/strong&gt;&lt;br /&gt; Use &lt;code&gt;useMemo&lt;/code&gt; to prevent unnecessary re-renders:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;  const contextValue = useMemo(() =&amp;gt; ({ user, setUser, theme, setTheme }), [user, theme]);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, this only helps if the object structure and dependencies are well controlled.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="286"&gt; 
 &lt;li&gt; &lt;h3&gt;What would the context value be for no matching provider?&lt;/h3&gt; &lt;p&gt;When a component calls &lt;code&gt;useContext(SomeContext)&lt;/code&gt; but &lt;strong&gt;no matching&lt;/strong&gt; &lt;code&gt;&amp;lt;SomeContext.Provider&amp;gt;&lt;/code&gt; &lt;strong&gt;is present higher up in the component tree&lt;/strong&gt;, the &lt;strong&gt;default value&lt;/strong&gt; passed to &lt;code&gt;React.createContext(defaultValue)&lt;/code&gt; is returned.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const ThemeContext = React.createContext('light'); // 'light' is the default value

function ThemedComponent() {
  const theme = useContext(ThemeContext);
  return &amp;lt;div&amp;gt;Current theme: {theme}&amp;lt;/div&amp;gt;;
}

// No ThemeContext.Provider anywhere in the tree
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this case, &lt;code&gt;theme&lt;/code&gt; will be 'light'. It's the default value you provided when you created the context.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you don‚Äôt specify a default value, the context value will be undefined when used without a provider:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const AuthContext = React.createContext(); // No default

function Profile() {
  const auth = useContext(AuthContext);
  // auth will be undefined if there's no AuthContext.Provider
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="287"&gt; 
 &lt;li&gt; &lt;h3&gt;How do reactive dependencies in the useEffect dependency array affect its execution behavior?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hook accepts an optional dependencies argument that accepts an array of reactive values. The &lt;strong&gt;dependency array&lt;/strong&gt; determines &lt;strong&gt;when&lt;/strong&gt; the effect runs. i.e, It makes &lt;code&gt;useEffect&lt;/code&gt; &lt;em&gt;reactive&lt;/em&gt; to changes in specified values.&lt;/p&gt; &lt;h4&gt;&lt;strong&gt;How Dependency Array Affects Behavior&lt;/strong&gt;&lt;/h4&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Empty Dependency Array:&lt;/strong&gt; &lt;code&gt;**[]**&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-css"&gt;useEffect(() =&amp;gt; {
  // runs once after the initial render
}, []);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Effect runs &lt;strong&gt;only once&lt;/strong&gt; (like &lt;code&gt;componentDidMount&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;Ignores all state/prop changes.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;With Specific Dependencies:&lt;/strong&gt; &lt;code&gt;**[count, user]**&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-css"&gt;useEffect(() =&amp;gt; {
  // runs after initial render
  // AND whenever `count` or `user` changes
}, [count, user]);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Effect runs on &lt;strong&gt;first render&lt;/strong&gt;, and&lt;/li&gt; 
   &lt;li&gt;Again &lt;strong&gt;every time&lt;/strong&gt; any dependency value changes.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;ol start="3"&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Dependency Array (Omitted)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;useEffect(() =&amp;gt; {
  // runs after **every** render
});
&lt;/code&gt;&lt;/pre&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Effect runs after &lt;strong&gt;every render&lt;/strong&gt;, regardless of what changed.&lt;/li&gt; 
     &lt;li&gt;Can lead to &lt;strong&gt;performance issues&lt;/strong&gt; if not used carefully.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;React uses shallow comparison of the dependencies. If any value has changed (!==), the effect will re-run.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This hook works well when dependencies are primitives or memoized objects/functions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="288"&gt; 
 &lt;li&gt; &lt;h3&gt;When and how often does React invoke the setup and cleanup functions inside a useEffect hook?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Setup Function Execution (&lt;code&gt;useEffect&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The setup function (or the main function) you pass to &lt;code&gt;useEffect&lt;/code&gt; runs at specific points:&lt;/p&gt; 
    &lt;ol&gt; 
     &lt;li&gt;&lt;strong&gt;After the component is mounted&lt;/strong&gt; (if the dependency array is empty &lt;code&gt;[]&lt;/code&gt;)&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;After every render&lt;/strong&gt; (if no dependency array is provided)&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;After a dependency value changes&lt;/strong&gt; (if the dependency array contains variables)&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cleanup Function Execution (Returned function from &lt;code&gt;useEffect&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The cleanup function is called &lt;strong&gt;before the effect is re-executed&lt;/strong&gt; and when the component &lt;strong&gt;unmounts&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="289"&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if you return a Promise from useEffect??&lt;/h3&gt; &lt;p&gt;You should NOT return a Promise from useEffect. React expects the function passed to useEffect to return either nothing (undefined) or a cleanup function (synchronous function). i.e, It does not expect or handle a returned Promise. If you still return a Promise, React will ignore it silently, and it may lead to bugs or warnings in strict mode.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Incorrect:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;useEffect(async () =&amp;gt; {
  await fetchData(); // ‚ùå useEffect shouldn't be async
}, []);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Correct:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;useEffect(() =&amp;gt; {
  const fetchData = async () =&amp;gt; {
    const res = await fetch('/api');
    const data = await res.json();
    setData(data);
  };

  fetchData();
}, []);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="289"&gt; 
 &lt;li&gt; &lt;h3&gt;Can you have multiple useEffect hooks in a single component?&lt;/h3&gt; &lt;p&gt;Yes, multiple useEffect hooks are allowed and recommended when you want to separate concerns.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;useEffect(() =&amp;gt; {
  // Handles API fetch
}, []);

useEffect(() =&amp;gt; {
  // Handles event listeners
}, []);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each effect runs independently and helps make code modular and easier to debug.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="290"&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent infinite loops with useEffect?&lt;/h3&gt; &lt;p&gt;Infinite loops happen when the effect updates state that‚Äôs listed in its own dependency array, which causes the effect to re-run, updating state again and so on.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Infinite loop scenario:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;useEffect(() =&amp;gt; {
  setCount(count + 1);
}, [count]); // Triggers again every time count updates
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You need to ensure that setState calls do not depend on values that cause the effect to rerun, or isolate them with a guard.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;useEffect(() =&amp;gt; {
  if (count &amp;lt; 5) {
    setCount(count + 1);
  }
}, [count]);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="291"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the usecases of useLayoutEffect?&lt;/h3&gt; &lt;p&gt;You need to use &lt;code&gt;useLayoutEffect&lt;/code&gt; when your effect &lt;strong&gt;must run before the browser paints&lt;/strong&gt;, such as:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Reading layout measurements&lt;/strong&gt; (e.g., element size, scroll position)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Synchronously applying DOM styles&lt;/strong&gt; to prevent visual flicker&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Animating layout or transitions&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Integrating with third-party libraries&lt;/strong&gt; that require DOM manipulation&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If there's no visual or layout dependency, prefer &lt;code&gt;useEffect&lt;/code&gt; ‚Äî it's more performance-friendly.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;useLayoutEffect(() =&amp;gt; {
  const width = divRef.current.offsetWidth;
  if (width &amp;lt; 400) {
    divRef.current.style.background = 'blue'; // prevents flicker
  }
}, []);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="292"&gt; 
 &lt;li&gt; &lt;h3&gt;How does useLayoutEffect work during server-side rendering (SSR)?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useLayoutEffect&lt;/code&gt; hook does &lt;strong&gt;not run on the server&lt;/strong&gt;, because there is no DOM. React issues a warning in server environments like Next.js if &lt;code&gt;useLayoutEffect&lt;/code&gt; is used directly.&lt;/p&gt; &lt;p&gt;This can be mitigated using a conditional polyfill:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const useIsomorphicLayoutEffect =
  typeof window !== 'undefined' ? useLayoutEffect : useEffect;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;i.e, Use &lt;code&gt;useIsomorphicLayoutEffect&lt;/code&gt; in components that render both on client and server.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="293"&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if you use useLayoutEffect for non-layout logic?&lt;/h3&gt; &lt;p&gt;Using &lt;code&gt;useLayoutEffect&lt;/code&gt; for logic &lt;strong&gt;unrelated to layout or visual DOM changes&lt;/strong&gt; (such as logging, data fetching, or analytics) is &lt;strong&gt;not recommended&lt;/strong&gt;. It can lead to &lt;strong&gt;performance issues&lt;/strong&gt; or even unexpected behavior.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Anti-pattern&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;useLayoutEffect(() =&amp;gt; {
  console.log("Tracking analytics");
  fetch('/log-page-view');
}, []);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above usage delays the paint of the UI just to send a network request, which could (and should) be done after paint using useEffect.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="294"&gt; 
 &lt;li&gt; &lt;h3&gt;How does useLayoutEffect cause layout thrashing?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useLayoutEffect&lt;/code&gt; can &lt;strong&gt;cause layout thrashing&lt;/strong&gt; when you &lt;strong&gt;repeatedly read and write to the DOM&lt;/strong&gt; in ways that force the browser to recalculate layout multiple times per frame. This is because &lt;code&gt;useLayoutEffect&lt;/code&gt; runs &lt;em&gt;before the browser paints&lt;/em&gt;, these reflows happen &lt;em&gt;synchronously&lt;/em&gt;, blocking rendering and degrading performance.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function ThrashingComponent() {
  const ref = useRef();

  useLayoutEffect(() =&amp;gt; {
    const height = ref.current.offsetHeight; //Read
    ref.current.style.height = height + 20 + 'px'; //Write
    const newHeight = ref.current.offsetHeight; //Read again ‚Äî forces reflow
  }, []);

  return &amp;lt;div ref={ref}&amp;gt;Hello&amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, each read/write cycle triggers synchronous reflows, blocking the main thread and delays UI rendering.&lt;/p&gt; &lt;p&gt;This issue can be avoided by batching your DOM reads and writes and prevent unnecessary reads after writes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="295"&gt; 
 &lt;li&gt; &lt;h3&gt;How Do You Use useRef to Access a DOM Element in React? Give an example.&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useRef&lt;/code&gt; hook is commonly used in React to directly reference and interact with DOM elements ‚Äî like focusing an input, scrolling to a section, or controlling media elements.&lt;/p&gt; &lt;p&gt;When you assign a ref to a DOM element using useRef, React gives you access to the underlying DOM node via the .current property of the ref object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Focus an input&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import React, { useRef } from 'react';

function FocusInput() {
  const inputRef = useRef(null); // create the ref

  const handleFocus = () =&amp;gt; {
    inputRef.current.focus(); // access DOM element and focus it
  };

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;input type="text" ref={inputRef} /&amp;gt;
      &amp;lt;button onClick={handleFocus}&amp;gt;Focus the input&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The DOM reference is only available &lt;strong&gt;after the component has mounted&lt;/strong&gt; ‚Äî typically accessed in &lt;code&gt;useEffect&lt;/code&gt; or event handlers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="296"&gt; 
 &lt;li&gt; &lt;h3&gt;Can you use useRef to persist values across renders??&lt;/h3&gt; &lt;p&gt;Yes, you can use &lt;code&gt;useRef&lt;/code&gt; to persist values across renders in React. Unlike &lt;code&gt;useState&lt;/code&gt;, changing &lt;code&gt;.current&lt;/code&gt; does not cause re-renders, but the value is preserved across renders.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;function Timer() {
  const renderCount = useRef(0);
  useEffect(() =&amp;gt; {
    renderCount.current++;
    console.log("Render count:", renderCount.current);
  });

  return &amp;lt;div&amp;gt;Check console for render count.&amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="297"&gt; 
 &lt;li&gt; &lt;h3&gt;Can useRef be used to store previous values?&lt;/h3&gt; &lt;p&gt;Yes, &lt;code&gt;useRef&lt;/code&gt; is a common pattern when you want to compare current and previous props or state without causing re-renders.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Storing previous state value&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import { useEffect, useRef, useState } from 'react';

function PreviousValueExample() {
  const [count, setCount] = useState(0);
  const prevCountRef = useRef();

  useEffect(() =&amp;gt; {
    prevCountRef.current = count;
  }, [count]);

  const prevCount = prevCountRef.current;

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;Current: {count}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Previous: {prevCount}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(c =&amp;gt; c + 1)}&amp;gt;Increment&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="298"&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to access a ref in the render method?&lt;/h3&gt; &lt;p&gt;Yes, you can access a ref in the render method, but what you get from it depends on how you're using the ref and when in the component lifecycle you're rendering.&lt;/p&gt; &lt;p&gt;For example, when using ref to access a DOM node (e.g., divRef.current), it's not immediately available on the first render.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;const divRef = useRef(null);

console.log(divRef.current); // ‚ùå null on initial render
return &amp;lt;div ref={divRef}&amp;gt;Hello&amp;lt;/div&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="299"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common usecases of useRef hook?&lt;/h3&gt; Some of the common cases are: 
  &lt;ul&gt; 
   &lt;li&gt;Automatically focus an input when a component mounts.&lt;/li&gt; 
   &lt;li&gt;Scroll to a specific element.&lt;/li&gt; 
   &lt;li&gt;Measure element dimensions (&lt;code&gt;offsetWidth&lt;/code&gt;, &lt;code&gt;clientHeight&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;Control video/audio playback.&lt;/li&gt; 
   &lt;li&gt;Integrate with non-React libraries (like D3 or jQuery).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="300"&gt; 
 &lt;li&gt; &lt;h3&gt;What is useImperativeHandle Hook? Give an example.&lt;/h3&gt; &lt;p&gt;&lt;code&gt;useImperativeHandle&lt;/code&gt; is a React Hook that allows a &lt;strong&gt;child component&lt;/strong&gt; to expose &lt;strong&gt;custom functions or properties&lt;/strong&gt; to its &lt;strong&gt;parent component&lt;/strong&gt;, when using &lt;code&gt;ref&lt;/code&gt;. It is typically used with &lt;code&gt;forwardRef&lt;/code&gt; and is very useful in cases like &lt;strong&gt;modals&lt;/strong&gt;, &lt;strong&gt;dialogs&lt;/strong&gt;, &lt;strong&gt;custom inputs&lt;/strong&gt;, etc., where the parent needs to &lt;strong&gt;control behavior imperatively&lt;/strong&gt; (e.g., open, close, reset).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: Dialog component&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-js"&gt;import React, {
  useRef,
  useState,
  useImperativeHandle,
  forwardRef,
} from 'react';
import './Dialog.css'; 

const Dialog = forwardRef((props, ref) =&amp;gt; {
  const [isOpen, setIsOpen] = useState(false);
  const [formData, setFormData] = useState('');

  useImperativeHandle(ref, () =&amp;gt; ({
    open: () =&amp;gt; setIsOpen(true),
    close: () =&amp;gt; setIsOpen(false),
    reset: () =&amp;gt; setFormData(''),
  }));

  if (!isOpen) return null;

  return (
    &amp;lt;div className="dialog"&amp;gt; 
      &amp;lt;h2&amp;gt;Dialog&amp;lt;/h2&amp;gt;
      &amp;lt;input
        type="text"
        value={formData}
        placeholder="Type something..."
        onChange={(e) =&amp;gt; setFormData(e.target.value)}
      /&amp;gt;
      &amp;lt;br /&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setIsOpen(false)}&amp;gt;Close&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
});

function Parent() {
  const dialogRef = useRef();

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;useImperativeHandle Dialog Example&amp;lt;/h1&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dialogRef.current.open()}&amp;gt;Open Dialog&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dialogRef.current.reset()}&amp;gt;Reset Dialog&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dialogRef.current.close()}&amp;gt;Close Dialog&amp;lt;/button&amp;gt;

      &amp;lt;Dialog ref={dialogRef} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default Parent;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="301"&gt; 
 &lt;li&gt; &lt;h3&gt;When should you use useImperativeHandle?&lt;/h3&gt; &lt;p&gt;The useImperativeHandler hook will be used in below cases:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;You want to expose &lt;strong&gt;imperative methods&lt;/strong&gt; from a child component 
    &lt;ul&gt; 
     &lt;li&gt;Custom input controls exposing &lt;code&gt;focus&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt;, or &lt;code&gt;validate&lt;/code&gt; methods&lt;/li&gt; 
     &lt;li&gt;Modal components exposing &lt;code&gt;open()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; methods&lt;/li&gt; 
     &lt;li&gt;Scroll containers exposing &lt;code&gt;scrollToTop()&lt;/code&gt; or &lt;code&gt;scrollToBottom()&lt;/code&gt; methods&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;You want to &lt;strong&gt;hide internal implementation&lt;/strong&gt; but provide controlled external access.&lt;/li&gt; 
   &lt;li&gt;You're building &lt;strong&gt;reusable component libraries&lt;/strong&gt; (e.g., inputs, modals, form controls).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="302"&gt; 
 &lt;li&gt; &lt;h3&gt;Is that possible to use useImperativeHandle without forwardRef?&lt;/h3&gt; &lt;strong&gt;No.&lt;/strong&gt; &lt;code&gt;useImperativeHandle&lt;/code&gt; only works when the component is wrapped in &lt;code&gt;forwardRef&lt;/code&gt;. It's the combination that allows parent components to use a &lt;code&gt;ref&lt;/code&gt; on a function component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="303"&gt; 
 &lt;li&gt; &lt;h3&gt;How is useMemo different from useCallback?&lt;/h3&gt; &lt;p&gt;The following table compares both useMemo and useCallback:&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Feature&lt;/th&gt; 
     &lt;th&gt;&lt;code&gt;useMemo&lt;/code&gt;&lt;/th&gt; 
     &lt;th&gt;&lt;code&gt;useCallback&lt;/code&gt;&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Purpose&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Memoizes the &lt;strong&gt;result of a computation&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Memoizes a &lt;strong&gt;function reference&lt;/strong&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Returns&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;A &lt;strong&gt;value&lt;/strong&gt; (e.g., result of a function)&lt;/td&gt; 
     &lt;td&gt;A &lt;strong&gt;function&lt;/strong&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;&lt;code&gt;useMemo(() =&amp;gt; computeValue(), [deps])&lt;/code&gt;&lt;/td&gt; 
     &lt;td&gt;&lt;code&gt;useCallback(() =&amp;gt; doSomething(), [deps])&lt;/code&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Primary Use Case&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Avoid expensive recalculations&lt;/td&gt; 
     &lt;td&gt;Prevent unnecessary re-creations of functions&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Common Scenario&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Filtering, sorting, calculating derived data&lt;/td&gt; 
     &lt;td&gt;Passing callbacks to child components&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;When It's Useful&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;When the value is expensive to compute&lt;/td&gt; 
     &lt;td&gt;When referential equality matters (e.g., props)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Recomputed When&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Dependencies change&lt;/td&gt; 
     &lt;td&gt;Dependencies change&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Returned Value Type&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Any (number, object, array, etc.)&lt;/td&gt; 
     &lt;td&gt;Always a function&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;Overhead&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;Slight (evaluates a function and caches result)&lt;/td&gt; 
     &lt;td&gt;Slight (caches a function reference)&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="304"&gt; 
 &lt;li&gt; &lt;h3&gt;Does useMemo prevent re-rendering of child components?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useMemo&lt;/code&gt; hook &lt;strong&gt;does not directly prevent re-rendering of child components&lt;/strong&gt;. Its main purpose is to memoize the result of an expensive computation so that it doesn‚Äôt get recalculated unless its dependencies change. While this can improve performance, it doesn‚Äôt inherently control whether a child component re-renders.&lt;/p&gt; &lt;p&gt;However, &lt;code&gt;useMemo&lt;/code&gt; &lt;strong&gt;can help prevent re-renders&lt;/strong&gt; when the memoized value is passed as a prop to a child component that is wrapped in &lt;code&gt;React.memo&lt;/code&gt;. In that case, if the memoized value doesn‚Äôt change between renders (i.e., it has the same reference), React.memo can skip re-rendering the child. So, while &lt;code&gt;useMemo&lt;/code&gt; doesn‚Äôt stop renders on its own, it &lt;strong&gt;works in combination&lt;/strong&gt; with tools like &lt;code&gt;React.memo&lt;/code&gt; to optimize rendering behavior.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="305"&gt; 
 &lt;li&gt; &lt;h3&gt;What is &lt;code&gt;useCallback&lt;/code&gt; and why is it used?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;useCallback&lt;/code&gt; is a React Hook used to memoize &lt;strong&gt;function definitions&lt;/strong&gt; between renders. It returns the same function reference unless its dependencies change. This is especially useful when passing callbacks to optimized child components (e.g. those wrapped in &lt;code&gt;React.memo&lt;/code&gt;) to prevent unnecessary re-renders.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-css"&gt;const handleClick = useCallback(() =&amp;gt; {
  console.log('Button clicked');
}, []);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Without &lt;code&gt;useCallback&lt;/code&gt;, a new function is created on every render, potentially causing child components to re-render unnecessarily.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="306"&gt; 
 &lt;li&gt; &lt;h3&gt;What are Custom React Hooks, and How Can You Develop One?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Custom Hooks&lt;/strong&gt; in React are JavaScript functions that allow you to &lt;strong&gt;extract and reuse component logic&lt;/strong&gt; using React‚Äôs built-in Hooks like &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt;, etc.&lt;/p&gt; &lt;p&gt;They start with the word &lt;strong&gt;"use"&lt;/strong&gt; and let you encapsulate logic that multiple components might share‚Äîsuch as fetching data, handling forms, or managing timers‚Äîwithout repeating code.&lt;/p&gt; &lt;p&gt;Let's explain the custom hook usage with &lt;code&gt;useFetchData&lt;/code&gt; example. The &lt;code&gt;useFetchData&lt;/code&gt; custom Hook is a reusable function in React that simplifies the process of fetching data from an API. It encapsulates common logic such as initiating the fetch request, managing loading and error states, and storing the fetched data. By using built-in Hooks like &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt;, &lt;code&gt;useFetchData&lt;/code&gt; provides a clean interface that returns the &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;loading&lt;/code&gt;, and &lt;code&gt;error&lt;/code&gt; values, which can be directly used in components.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import { useState, useEffect } from 'react';

function useFetchData(url) {
  const [data, setData] = useState(null);     // Holds the response
  const [loading, setLoading] = useState(true); // Loading state
  const [error, setError] = useState(null);     // Error state

  useEffect(() =&amp;gt; {
    let isMounted = true; // Prevent setting state on unmounted component
    setLoading(true);

    fetch(url)
      .then((response) =&amp;gt; {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then((json) =&amp;gt; {
        if (isMounted) {
          setData(json);
          setLoading(false);
        }
      })
      .catch((err) =&amp;gt; {
        if (isMounted) {
          setError(err.message);
          setLoading(false);
        }
      });

    return () =&amp;gt; {
      isMounted = false; // Clean-up function to avoid memory leaks
    };
  }, [url]);

  return { data, loading, error };
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above custom hook can be used to retrieve users data for &lt;code&gt;AuthorList&lt;/code&gt;, &lt;code&gt;ReviewerList&lt;/code&gt; components.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example: AuthorList component&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function AuthorList() {
  const { data, loading, error } = useFetchData('https://api.example.com/authors');

  if (loading) return &amp;lt;p&amp;gt;Loading authors...&amp;lt;/p&amp;gt;;
  if (error) return &amp;lt;p&amp;gt;Error: {error}&amp;lt;/p&amp;gt;;

  return (
    &amp;lt;ul&amp;gt;
      {data.map((author) =&amp;gt; (
        &amp;lt;li key={author.id}&amp;gt;{author.name}&amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Some of the benefits of custom hooks are:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Promotes &lt;strong&gt;code reuse&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;Keeps components &lt;strong&gt;clean and focused&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;Makes complex logic &lt;strong&gt;easier to test and maintain&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="307"&gt; 
 &lt;li&gt; &lt;h3&gt;How does React Fiber works? Explain in detail.&lt;/h3&gt; &lt;p&gt;React Fiber is the &lt;strong&gt;core engine&lt;/strong&gt; that enables advanced features like &lt;strong&gt;concurrent rendering&lt;/strong&gt;, &lt;strong&gt;prioritization&lt;/strong&gt;, and &lt;strong&gt;interruptibility&lt;/strong&gt; in React. Here's how it works:&lt;/p&gt; &lt;h3&gt;1. &lt;strong&gt;Fiber Tree Structure&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Each component in your app is represented by a &lt;strong&gt;Fiber node&lt;/strong&gt; in a tree structure. A Fiber node contains:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Component type&lt;/li&gt; 
   &lt;li&gt;Props &amp;amp; state&lt;/li&gt; 
   &lt;li&gt;Pointers to parent, child, and sibling nodes&lt;/li&gt; 
   &lt;li&gt;Effect tags to track changes (e.g., update, placement)&lt;/li&gt; 
   &lt;li&gt;This forms the &lt;strong&gt;Fiber Tree&lt;/strong&gt;, a data structure React uses instead of the traditional call stack.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h3&gt;2. &lt;strong&gt;Two Phases of Rendering&lt;/strong&gt;&lt;/h3&gt; &lt;h4&gt;&lt;strong&gt;A. Render Phase (work-in-progress)&lt;/strong&gt;&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React builds a &lt;strong&gt;work-in-progress Fiber tree&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;It walks through each component (begin phase), calculates what needs to change, and collects side effects (complete phase).&lt;/li&gt; 
   &lt;li&gt;This phase is &lt;strong&gt;interruptible&lt;/strong&gt;‚ÄîReact can pause it and resume later.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h4&gt;&lt;strong&gt;B. Commit Phase&lt;/strong&gt;&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React applies changes to the &lt;strong&gt;Real DOM&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Runs lifecycle methods (e.g., &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;This phase is &lt;strong&gt;non-interruptible&lt;/strong&gt; but fast.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h3&gt;3. &lt;strong&gt;Work Units and Scheduling&lt;/strong&gt;&lt;/h3&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React breaks rendering into &lt;strong&gt;units of work&lt;/strong&gt; (small tasks).&lt;/li&gt; 
   &lt;li&gt;These units are scheduled based on &lt;strong&gt;priority&lt;/strong&gt; using the &lt;strong&gt;React Scheduler&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;If time runs out (e.g., user starts typing), React can &lt;strong&gt;pause and yield&lt;/strong&gt; control back to the browser.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h3&gt;4. &lt;strong&gt;Double Buffering with Two Trees&lt;/strong&gt;&lt;/h3&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React maintains two trees:&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Current Tree&lt;/strong&gt; ‚Äì what's visible on the screen.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Work-In-Progress Tree&lt;/strong&gt; ‚Äì the next version being built in memory.&lt;/li&gt; 
   &lt;li&gt;Only after the new tree is fully ready, React &lt;strong&gt;commits&lt;/strong&gt; it, making it the new current tree.&lt;/li&gt; 
  &lt;/ul&gt; &lt;h3&gt;5. &lt;strong&gt;Concurrency and Prioritization&lt;/strong&gt;&lt;/h3&gt; 
  &lt;ul&gt; 
   &lt;li&gt;React can prepare multiple versions of UI at once (e.g., during slow data loading).&lt;/li&gt; 
   &lt;li&gt;Updates can be &lt;strong&gt;assigned priorities&lt;/strong&gt;, so urgent updates (like clicks) are handled faster than background work.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Old Q&amp;amp;A&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;h3&gt;Why should we not update the state directly?&lt;/h3&gt; &lt;p&gt;If you try to update the state directly then it won't re-render the component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//Wrong
this.state.message = "Hello world";
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead use &lt;code&gt;setState()&lt;/code&gt; method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//Correct
this.setState({ message: "Hello World" });
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can directly assign to the state object either in &lt;em&gt;constructor&lt;/em&gt; or using latest javascript's class field declaration syntax.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;The callback function provided as the second argument to &lt;code&gt;setState&lt;/code&gt; is executed after the state has been updated and the component has re-rendered. Because &lt;code&gt;setState()&lt;/code&gt; is asynchronous, you cannot reliably perform actions that require the updated state immediately after calling &lt;code&gt;setState&lt;/code&gt;. The callback ensures your code runs only after the update and re-render are complete.&lt;/p&gt; &lt;h4&gt;Example&lt;/h4&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;this.setState({ name: "Sudheer" }, () =&amp;gt; {
  console.log("The name has been updated and the component has re-rendered.");
});
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;When to use the callback?&lt;/h4&gt; &lt;p&gt;Use the &lt;code&gt;setState&lt;/code&gt; callback when you need to perform an action immediately after the DOM has been updated in response to a state change. i.e, The callback is a reliable way to perform actions after a state update and re-render, especially when the timing is critical due to the asynchronous nature of state updates in React. For example, if you need to interact with the updated DOM, trigger analytics, or perform further computations that depend on the new state or rendered output.&lt;/p&gt; &lt;h4&gt;Note&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;In modern React (with function components), you can achieve similar effects using the &lt;code&gt;useEffect&lt;/code&gt; hook to respond to state changes.&lt;/li&gt; 
   &lt;li&gt;In class components, you can also use lifecycle methods like &lt;code&gt;componentDidUpdate&lt;/code&gt; for broader post-update logic.&lt;/li&gt; 
   &lt;li&gt;The &lt;code&gt;setState&lt;/code&gt; callback is still useful for one-off actions that directly follow a specific state change.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to bind methods or event handlers in JSX callbacks?&lt;/h3&gt; &lt;p&gt;There are 3 possible ways to achieve this in class components:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Binding in Constructor:&lt;/strong&gt; In JavaScript classes, the methods are not bound by default. The same rule applies for React event handlers defined as class methods. Normally we bind them in constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class User extends Component {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    console.log("SingOut triggered");
  }
  render() {
    return &amp;lt;button onClick={this.handleClick}&amp;gt;SingOut&amp;lt;/button&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Public class fields syntax:&lt;/strong&gt; If you don't like to use bind approach then &lt;em&gt;public class fields syntax&lt;/em&gt; can be used to correctly bind callbacks. The Create React App enables this syntax by default.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;handleClick = () =&amp;gt; {
  console.log("SingOut triggered", this);
};
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;SingOut&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arrow functions in callbacks:&lt;/strong&gt; It is possible to use &lt;em&gt;arrow functions&lt;/em&gt; directly in the callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;handleClick() {
    console.log('SingOut triggered');
}
render() {
    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;SignOut&amp;lt;/button&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with &lt;code&gt;.bind()&lt;/code&gt; or &lt;em&gt;public class fields syntax&lt;/em&gt; approach considering performance.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass a parameter to an event handler or callback?&lt;/h3&gt; &lt;p&gt;You can use an &lt;em&gt;arrow function&lt;/em&gt; to wrap around an &lt;em&gt;event handler&lt;/em&gt; and pass parameters:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;button onClick={() =&amp;gt; this.handleClick(id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is an equivalent to calling &lt;code&gt;.bind&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;button onClick={this.handleClick.bind(this, id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Apart from these two approaches, you can also pass arguments to a function which is defined as arrow function&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;button onClick={this.handleClick(id)} /&amp;gt;;
handleClick = (id) =&amp;gt; () =&amp;gt; {
  console.log("Hello, your ticket number is", id);
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of refs?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;ref&lt;/em&gt; is used to return a reference to the element. They &lt;em&gt;should be avoided&lt;/em&gt; in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to create refs?&lt;/h3&gt; &lt;p&gt;There are two approaches&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;This is a recently added approach. &lt;em&gt;Refs&lt;/em&gt; are created using &lt;code&gt;React.createRef()&lt;/code&gt; method and attached to React elements via the &lt;code&gt;ref&lt;/code&gt; attribute. In order to use &lt;em&gt;refs&lt;/em&gt; throughout the component, just assign the &lt;em&gt;ref&lt;/em&gt; to the instance property within constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.myRef = React.createRef();
  }
  render() {
    return &amp;lt;div ref={this.myRef} /&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use ref callbacks approach regardless of React version. For example, the search bar component's input element is accessed as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class SearchBar extends Component {
  constructor(props) {
    super(props);
    this.txtSearch = null;
    this.state = { term: "" };
    this.setInputSearchRef = (e) =&amp;gt; {
      this.txtSearch = e;
    };
  }
  onInputChange(event) {
    this.setState({ term: this.txtSearch.value });
  }
  render() {
    return (
      &amp;lt;input
        value={this.state.term}
        onChange={this.onInputChange.bind(this)}
        ref={this.setInputSearchRef}
      /&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;You can also use &lt;em&gt;refs&lt;/em&gt; in function components using &lt;strong&gt;closures&lt;/strong&gt;. &lt;strong&gt;Note&lt;/strong&gt;: You can also use inline ref callbacks even though it is not a recommended approach.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are forward refs?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Ref forwarding&lt;/em&gt; is a feature that lets some components take a &lt;em&gt;ref&lt;/em&gt; they receive, and pass it further down to a child.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;const ButtonElement = React.forwardRef((props, ref) =&amp;gt; (
  &amp;lt;button ref={ref} className="CustomButton"&amp;gt;
    {props.children}
  &amp;lt;/button&amp;gt;
));

// Create ref to the DOM button:
const ref = React.createRef();
&amp;lt;ButtonElement ref={ref}&amp;gt;{"Forward Ref"}&amp;lt;/ButtonElement&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/h3&gt; &lt;p&gt;It is preferred to use &lt;em&gt;callback refs&lt;/em&gt; over &lt;code&gt;findDOMNode()&lt;/code&gt; API. Because &lt;code&gt;findDOMNode()&lt;/code&gt; prevents certain improvements in React in the future.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;legacy&lt;/strong&gt; approach of using &lt;code&gt;findDOMNode&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends Component {
  componentDidMount() {
    findDOMNode(this).scrollIntoView();
  }

  render() {
    return &amp;lt;div /&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The recommended approach is:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends Component {
  constructor(props) {
    super(props);
    this.node = createRef();
  }
  componentDidMount() {
    this.node.current.scrollIntoView();
  }

  render() {
    return &amp;lt;div ref={this.node} /&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why are String Refs legacy?&lt;/h3&gt; &lt;p&gt;If you worked with React before, you might be familiar with an older API where the &lt;code&gt;ref&lt;/code&gt; attribute is a string, like &lt;code&gt;ref={'textInput'}&lt;/code&gt;, and the DOM node is accessed as &lt;code&gt;this.refs.textInput&lt;/code&gt;. We advise against it because &lt;em&gt;string refs have below issues&lt;/em&gt;, and are considered legacy. String refs were &lt;strong&gt;removed in React v16&lt;/strong&gt;.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;They &lt;em&gt;force React to keep track of currently executing component&lt;/em&gt;. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;They are &lt;em&gt;not composable&lt;/em&gt; ‚Äî if a library puts a ref on the passed child, the user can't put another ref on it. Callback refs are perfectly composable.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;They &lt;em&gt;don't work with static analysis&lt;/em&gt; like Flow. Flow can't guess the magic that framework does to make the string ref appear on &lt;code&gt;this.refs&lt;/code&gt;, as well as its type (which could be different). Callback refs are friendlier to static analysis.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;It doesn't work as most people would expect with the "render callback" pattern (e.g. 
     &lt;datagrid renderRow="{this.renderRow}" /&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class MyComponent extends Component {
  renderRow = (index) =&amp;gt; {
    // This won't work. Ref will get attached to DataTable rather than MyComponent:
    return &amp;lt;input ref={"input-" + index} /&amp;gt;;

    // This would work though! Callback refs are awesome.
    return &amp;lt;input ref={(input) =&amp;gt; (this["input-" + index] = input)} /&amp;gt;;
  };

  render() {
    return (
      &amp;lt;DataTable data={this.props.data} renderRow={this.renderRow} /&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different phases of component lifecycle?&lt;/h3&gt; &lt;p&gt;The component lifecycle has three distinct lifecycle phases:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mounting:&lt;/strong&gt; The component is ready to mount in the browser DOM. This phase covers initialization from &lt;code&gt;constructor()&lt;/code&gt;, &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, and &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Updating:&lt;/strong&gt; In this phase, the component gets updated in two ways, sending the new props and updating the state either from &lt;code&gt;setState()&lt;/code&gt; or &lt;code&gt;forceUpdate()&lt;/code&gt;. This phase covers &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;shouldComponentUpdate()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; and &lt;code&gt;componentDidUpdate()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unmounting:&lt;/strong&gt; In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes &lt;code&gt;componentWillUnmount()&lt;/code&gt; lifecycle method.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;It's worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows&lt;/p&gt; 
  &lt;ol start="4"&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Render&lt;/strong&gt; The component will render without any side effects. This applies to Pure components and in this phase, React can pause, abort, or restart the render.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pre-commit&lt;/strong&gt; Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Commit&lt;/strong&gt; React works with the DOM and executes the final lifecycles respectively &lt;code&gt;componentDidMount()&lt;/code&gt; for mounting, &lt;code&gt;componentDidUpdate()&lt;/code&gt; for updating, and &lt;code&gt;componentWillUnmount()&lt;/code&gt; for unmounting.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;React 16.3+ Phases (or an &lt;a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/"&gt;interactive version&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases16.4.png" alt="phases 16.4+" /&gt;&lt;/p&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases.png" alt="phases 16.2" /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the lifecycle methods of React?&lt;/h3&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillMount:&lt;/strong&gt; Executed before rendering and is used for App level configuration in your root component.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and here all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillReceiveProps:&lt;/strong&gt; Executed when particular prop updates to trigger state transitions.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn't need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUpdate:&lt;/strong&gt; Executed before re-rendering the component when there are props &amp;amp; state changes confirmed by &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; which returns true.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUnmount:&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;React 16.3+&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;getDerivedStateFromProps:&lt;/strong&gt; Invoked right before calling &lt;code&gt;render()&lt;/code&gt; and is invoked on &lt;em&gt;every&lt;/em&gt; render. This exists for rare use cases where you need a derived state. Worth reading &lt;a href="https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html"&gt;if you need derived state&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and where all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default, it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn't need to render after the state or props are updated, you can return a false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives a new prop.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;getSnapshotBeforeUpdate:&lt;/strong&gt; Executed right before rendered output is committed to the DOM. Any value returned by this will be passed into &lt;code&gt;componentDidUpdate()&lt;/code&gt;. This is useful to capture information from the DOM i.e. scroll position.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes. This will not fire if &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUnmount&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to create props proxy for HOC component?&lt;/h3&gt; &lt;p&gt;You can add/edit props passed to the component using &lt;em&gt;props proxy&lt;/em&gt; pattern like this:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function HOC(WrappedComponent) {
  return class Test extends Component {
    render() {
      const newProps = {
        title: "New Header",
        footer: false,
        showFeatureX: false,
        showFeatureY: true,
      };

      return &amp;lt;WrappedComponent {...this.props} {...newProps} /&amp;gt;;
    }
  };
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is context?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Context&lt;/em&gt; provides a way to pass data through the component tree without having to pass props down manually at every level.&lt;/p&gt; &lt;p&gt;For example, authenticated users, locale preferences, UI themes need to be accessed in the application by many components.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const { Provider, Consumer } = React.createContext(defaultValue);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of using super constructor with props argument?&lt;/h3&gt; &lt;p&gt;A child class constructor cannot make use of &lt;code&gt;this&lt;/code&gt; reference until the &lt;code&gt;super()&lt;/code&gt; method has been called. The same applies to ES6 sub-classes as well. The main reason for passing props parameter to &lt;code&gt;super()&lt;/code&gt; call is to access &lt;code&gt;this.props&lt;/code&gt; in your child constructors.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);

    console.log(this.props); // prints { name: 'John', age: 42 }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Not passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super();

    console.log(this.props); // prints undefined

    // but props parameter is still available
    console.log(props); // prints { name: 'John', age: 42 }
  }

  render() {
    // no difference outside constructor
    console.log(this.props); // prints { name: 'John', age: 42 }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code snippets reveals that &lt;code&gt;this.props&lt;/code&gt; is different only within the constructor. It would be the same outside the constructor.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to set state with a dynamic key name?&lt;/h3&gt; &lt;p&gt;If you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with &lt;em&gt;computed property names&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;handleInputChange(event) {
  this.setState({ [event.target.id]: event.target.value })
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What would be the common mistake of function being called every time the component renders?&lt;/h3&gt; &lt;p&gt;You need to make sure that function is not being called while passing the function as a parameter.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  // Wrong: handleClick is called instead of passed as a reference!
  return &amp;lt;button onClick={this.handleClick()}&amp;gt;{'Click Me'}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead, pass the function itself without parenthesis:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  // Correct: handleClick is passed as a reference!
  return &amp;lt;button onClick={this.handleClick}&amp;gt;{'Click Me'}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are error boundaries in React v16?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Error boundaries&lt;/em&gt; are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.&lt;/p&gt; &lt;p&gt;A class component becomes an error boundary if it defines a new lifecycle method called &lt;code&gt;componentDidCatch(error, info)&lt;/code&gt; or &lt;code&gt;static getDerivedStateFromError() &lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  componentDidCatch(error, info) {
    // You can also log the error to an error reporting service
    logErrorToMyService(error, info);
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return &amp;lt;h1&amp;gt;{"Something went wrong."}&amp;lt;/h1&amp;gt;;
    }
    return this.props.children;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that use it as a regular component:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;ErrorBoundary&amp;gt;
  &amp;lt;MyWidget /&amp;gt;
&amp;lt;/ErrorBoundary&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How are error boundaries handled in React v15?&lt;/h3&gt; &lt;p&gt;React v15 provided very basic support for &lt;em&gt;error boundaries&lt;/em&gt; using &lt;code&gt;unstable_handleError&lt;/code&gt; method. It has been renamed to &lt;code&gt;componentDidCatch&lt;/code&gt; in React v16.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of render method of &lt;code&gt;react-dom&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;This method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ReactDOM.render(element, container, [callback])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the optional callback is provided, it will be executed after the component is rendered or updated.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What will happen if you use &lt;code&gt;setState()&lt;/code&gt; in constructor?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt;, then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: &lt;em&gt;Can only update a mounted or mounting component.&lt;/em&gt; So we need to use &lt;code&gt;this.state&lt;/code&gt; to initialize variables inside constructor.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it good to use &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillMount()&lt;/code&gt; method?&lt;/h3&gt; &lt;p&gt;Yes, it is safe to use &lt;code&gt;setState()&lt;/code&gt; inside &lt;code&gt;componentWillMount()&lt;/code&gt; method. But at the same it is recommended to avoid async initialization in &lt;code&gt;componentWillMount()&lt;/code&gt; lifecycle method. &lt;code&gt;componentWillMount()&lt;/code&gt; is invoked immediately before mounting occurs. It is called before &lt;code&gt;render()&lt;/code&gt;, therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in &lt;code&gt;componentDidMount()&lt;/code&gt; instead of &lt;code&gt;componentWillMount()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;componentDidMount() {
  axios.get(`api/todos`)
    .then((result) =&amp;gt; {
      this.setState({
        messages: [...result.data]
      })
    })
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What will happen if you use props in initial state?&lt;/h3&gt; &lt;p&gt;If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.&lt;/p&gt; &lt;p&gt;The below component won't display the updated input value:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      records: [],
      inputValue: this.props.inputValue,
    };
  }

  render() {
    return &amp;lt;div&amp;gt;{this.state.inputValue}&amp;lt;/div&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using props inside render method will update the value:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      record: [],
    };
  }

  render() {
    return &amp;lt;div&amp;gt;{this.props.inputValue}&amp;lt;/div&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How you use decorators in React?&lt;/h3&gt; &lt;p&gt;You can &lt;em&gt;decorate&lt;/em&gt; your &lt;em&gt;class&lt;/em&gt; components, which is the same as passing the component into a function. &lt;strong&gt;Decorators&lt;/strong&gt; are flexible and readable way of modifying component functionality.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;@setTitle("Profile")
class Profile extends React.Component {
  //....
}

/*
  title is a string that will be set as a document title
  WrappedComponent is what our decorator will receive when
  put directly above a component class as seen in the example above
*/
const setTitle = (title) =&amp;gt; (WrappedComponent) =&amp;gt; {
  return class extends React.Component {
    componentDidMount() {
      document.title = title;
    }

    render() {
      return &amp;lt;WrappedComponent {...this.props} /&amp;gt;;
    }
  };
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Decorators are a feature that didn't make it into ES7, but are currently a &lt;em&gt;stage 2 proposal&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is CRA and its benefits?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;create-react-app&lt;/code&gt; CLI tool allows you to quickly create &amp;amp; run React applications with no configuration step.&lt;/p&gt; &lt;p&gt;Let's create Todo App using &lt;em&gt;CRA&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;# Installation
$ npm install -g create-react-app

# Create new project
$ create-react-app todo-app
$ cd todo-app

# Build, test and run
$ npm run build
$ npm run test
$ npm start
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It includes everything we need to build a React app:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React, JSX, ES6, and Flow syntax support.&lt;/li&gt; 
   &lt;li&gt;Language extras beyond ES6 like the object spread operator.&lt;/li&gt; 
   &lt;li&gt;Autoprefixed CSS, so you don‚Äôt need -webkit- or other prefixes.&lt;/li&gt; 
   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting.&lt;/li&gt; 
   &lt;li&gt;A live development server that warns about common mistakes.&lt;/li&gt; 
   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the lifecycle methods order in mounting?&lt;/h3&gt; &lt;p&gt;The lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;static getDerivedStateFromProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/h3&gt; &lt;p&gt;The following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Starting with React v16.3 these methods are aliased with &lt;code&gt;UNSAFE_&lt;/code&gt; prefix, and the unprefixed version will be removed in React v17.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new static &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or &lt;code&gt;null&lt;/code&gt; to indicate that the new props do not require any state updates.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends React.Component {
  static getDerivedStateFromProps(props, state) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillReceiveProps()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to &lt;code&gt;componentDidUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends React.Component {
  getSnapshotBeforeUpdate(prevProps, prevState) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended way for naming components?&lt;/h3&gt; &lt;p&gt;It is recommended to name the component by reference instead of using &lt;code&gt;displayName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Using &lt;code&gt;displayName&lt;/code&gt; for naming component:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;export default React.createClass({
  displayName: "TodoApp",
  // ...
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;strong&gt;recommended&lt;/strong&gt; approach:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;export default class TodoApp extends React.Component {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;also&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const TodoApp = () =&amp;gt; {
  //...
};
export default TodoApp;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended ordering of methods in component class?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt; ordering of methods from &lt;em&gt;mounting&lt;/em&gt; to &lt;em&gt;render stage&lt;/em&gt;:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;static&lt;/code&gt; methods&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;getChildContext()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;shouldComponentUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUnmount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;click handlers or event handlers like &lt;code&gt;onClickSubmit()&lt;/code&gt; or &lt;code&gt;onChangeDescription()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;getter methods for render like &lt;code&gt;getSelectReason()&lt;/code&gt; or &lt;code&gt;getFooterContent()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;optional render methods like &lt;code&gt;renderNavigation()&lt;/code&gt; or &lt;code&gt;renderProfilePicture()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why we need to pass a function to setState()?&lt;/h3&gt; &lt;p&gt;The reason behind for this is that &lt;code&gt;setState()&lt;/code&gt; is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after &lt;code&gt;setState()&lt;/code&gt; is called. That means you should not rely on the current state when calling &lt;code&gt;setState()&lt;/code&gt;‚Ääsince you can't be sure what that state will be. The solution is to pass a function to &lt;code&gt;setState()&lt;/code&gt;, with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of &lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let's say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// assuming this.state.count === 0
this.setState({ count: this.state.count + 1 });
this.setState({ count: this.state.count + 1 });
this.setState({ count: this.state.count + 1 });
// this.state.count === 1, not 3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we pass a function to &lt;code&gt;setState()&lt;/code&gt;, the count gets incremented correctly.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;this.setState((prevState, props) =&amp;gt; ({
  count: prevState.count + props.increment,
}));
// this.state.count === 3 as expected
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;(OR)&lt;/strong&gt;&lt;/p&gt; &lt;h3&gt;Why function is preferred over object for &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;React may batch multiple &lt;code&gt;setState()&lt;/code&gt; calls into a single update for performance. Because &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; may be updated asynchronously, you should not rely on their values for calculating the next state.&lt;/p&gt; &lt;p&gt;This counter example will fail to update as expected:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// Wrong
this.setState({
  counter: this.state.counter + this.props.increment,
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The preferred approach is to call &lt;code&gt;setState()&lt;/code&gt; with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// Correct
this.setState((prevState, props) =&amp;gt; ({
  counter: prevState.counter + props.increment,
}));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why is &lt;code&gt;isMounted()&lt;/code&gt; an anti-pattern and what is the proper solution?&lt;/h3&gt; &lt;p&gt;The primary use case for &lt;code&gt;isMounted()&lt;/code&gt; is to avoid calling &lt;code&gt;setState()&lt;/code&gt; after a component has been unmounted, because it will emit a warning.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;if (this.isMounted()) {
  this.setState({...})
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Checking &lt;code&gt;isMounted()&lt;/code&gt; before calling &lt;code&gt;setState()&lt;/code&gt; does eliminate the warning, but it also defeats the purpose of the warning. Using &lt;code&gt;isMounted()&lt;/code&gt; is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted.&lt;/p&gt; &lt;p&gt;An optimal solution would be to find places where &lt;code&gt;setState()&lt;/code&gt; might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in &lt;code&gt;componentWillUnmount()&lt;/code&gt;, prior to unmounting.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between constructor and getInitialState?&lt;/h3&gt; &lt;p&gt;You should initialize state in the constructor when using ES6 classes, and &lt;code&gt;getInitialState()&lt;/code&gt; method when using &lt;code&gt;React.createClass()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using ES6 classes:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      /* initial state */
    };
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const MyComponent = React.createClass({
  getInitialState() {
    return {
      /* initial state */
    };
  },
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.createClass()&lt;/code&gt; is deprecated and removed in React v16. Use plain JavaScript classes instead.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can you force a component to re-render without calling setState?&lt;/h3&gt; &lt;p&gt;By default, when your component's state or props change, your component will re-render. If your &lt;code&gt;render()&lt;/code&gt; method depends on some other data, you can tell React that the component needs re-rendering by calling &lt;code&gt;forceUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;component.forceUpdate(callback);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is recommended to avoid all uses of &lt;code&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; in &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;super()&lt;/code&gt; and &lt;code&gt;super(props)&lt;/code&gt; in React using ES6 classes?&lt;/h3&gt; &lt;p&gt;When you want to access &lt;code&gt;this.props&lt;/code&gt; in &lt;code&gt;constructor()&lt;/code&gt; then you should pass props to &lt;code&gt;super()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super(props)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    console.log(this.props); // { name: 'John', ... }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super();
    console.log(this.props); // undefined
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Outside &lt;code&gt;constructor()&lt;/code&gt; both will display same value for &lt;code&gt;this.props&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;setState()&lt;/code&gt; and &lt;code&gt;replaceState()&lt;/code&gt; methods?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt; the current and previous states are merged. &lt;code&gt;replaceState()&lt;/code&gt; throws out the current state, and replaces it with only what you provide. Usually &lt;code&gt;setState()&lt;/code&gt; is used unless you really need to remove all previous keys for some reason. You can also set state to &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt; in &lt;code&gt;setState()&lt;/code&gt; instead of using &lt;code&gt;replaceState()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="37"&gt; 
 &lt;li&gt; &lt;h3&gt;How to listen to state changes?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;componentDidUpdate&lt;/code&gt; lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;componentDidUpdate(object prevProps, object prevState)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The previous releases of ReactJS also uses &lt;code&gt;componentWillUpdate(object nextProps, object nextState)&lt;/code&gt; for state changes. It has been deprecated in latest releases.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="38"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended approach of removing an array element in React state?&lt;/h3&gt; &lt;p&gt;The better approach is to use &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;For example, let's create a &lt;code&gt;removeItem()&lt;/code&gt; method for updating the state.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;removeItem(index) {
  this.setState({
    data: this.state.data.filter((item, i) =&amp;gt; i !== index)
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="39"&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use React without rendering HTML?&lt;/h3&gt; &lt;p&gt;It is possible. Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  return false
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  return true
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  return null
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;React version &amp;gt;=16.0.0:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  return []
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  return ""
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;React version &amp;gt;=16.2.0:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  return &amp;lt;React.Fragment&amp;gt;&amp;lt;/React.Fragment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  return &amp;lt;&amp;gt;&amp;lt;/&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;React version &amp;gt;=18.0.0:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;render() {
  return undefined
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="40"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible ways of updating objects in state?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with an object to merge with state:&lt;/strong&gt;&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;Using &lt;code&gt;Object.assign()&lt;/code&gt; to create a copy of the object:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = Object.assign({}, this.state.user, { age: 42 });
this.setState({ user });
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Using &lt;em&gt;spread operator&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const user = { ...this.state.user, age: 42 };
this.setState({ user });
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with a function:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;this.setState((prevState) =&amp;gt; ({
  user: {
    ...prevState.user,
    age: 42,
  },
}));
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="41"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the approaches to include polyfills in your &lt;code&gt;create-react-app&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are approaches to include polyfills in create-react-app,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manual import from &lt;code&gt;core-js&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a file called (something like) &lt;code&gt;polyfills.js&lt;/code&gt; and import it into root &lt;code&gt;index.js&lt;/code&gt; file. Run &lt;code&gt;npm install core-js&lt;/code&gt; or &lt;code&gt;yarn add core-js&lt;/code&gt; and import your specific required features.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import "core-js/fn/array/find";
import "core-js/fn/array/includes";
import "core-js/fn/number/is-nan";
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Polyfill service:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.includes"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above script we had to explicitly request the &lt;code&gt;Array.prototype.includes&lt;/code&gt; feature as it is not included in the default feature set.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="42"&gt; 
 &lt;li&gt; &lt;h3&gt;How to use https instead of http in create-react-app?&lt;/h3&gt; &lt;p&gt;You just need to use &lt;code&gt;HTTPS=true&lt;/code&gt; configuration. You can edit your &lt;code&gt;package.json&lt;/code&gt; scripts section:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt;"scripts": {
  "start": "set HTTPS=true &amp;amp;&amp;amp; react-scripts start"
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or just run &lt;code&gt;set HTTPS=true &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="43"&gt; 
 &lt;li&gt; &lt;h3&gt;How to avoid using relative path imports in create-react-app?&lt;/h3&gt; &lt;p&gt;Create a file called &lt;code&gt;.env&lt;/code&gt; in the project root and write the import path:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NODE_PATH=src/app
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that restart the development server. Now you should be able to import anything inside &lt;code&gt;src/app&lt;/code&gt; without relative paths.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="44"&gt; 
 &lt;li&gt; &lt;h3&gt;How to update a component every second?&lt;/h3&gt; &lt;p&gt;You need to use &lt;code&gt;setInterval()&lt;/code&gt; to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;componentDidMount() {
  this.interval = setInterval(() =&amp;gt; this.setState({ time: Date.now() }), 1000)
}

componentWillUnmount() {
  clearInterval(this.interval)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="45"&gt; 
 &lt;li&gt; &lt;h3&gt;Why is a component constructor called only once?&lt;/h3&gt; &lt;p&gt;React's &lt;em&gt;reconciliation&lt;/em&gt; algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it's the same component as before, so reuses the previous instance rather than creating a new one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="46"&gt; 
 &lt;li&gt; &lt;h3&gt;How to define constants in React?&lt;/h3&gt; &lt;p&gt;You can use ES7 &lt;code&gt;static&lt;/code&gt; field to define constant.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends React.Component {
  static DEFAULT_PAGINATION = 10;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="47"&gt; 
 &lt;li&gt; &lt;h3&gt;How to programmatically trigger click event in React?&lt;/h3&gt; &lt;p&gt;You could use the ref prop to acquire a reference to the underlying &lt;code&gt;HTMLInputElement&lt;/code&gt; object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the &lt;code&gt;HTMLElement.click&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;This can be done in two steps:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create ref in render method:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;input ref={(input) =&amp;gt; (this.inputElement = input)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Apply click event in your event handler:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;this.inputElement.click();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="48"&gt; 
 &lt;li&gt; &lt;h3&gt;How to make AJAX call and in which component lifecycle methods should I make an AJAX call?&lt;/h3&gt; &lt;p&gt;You can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in &lt;code&gt;fetch&lt;/code&gt;. You should fetch data in the &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle method. This is so you can use &lt;code&gt;setState()&lt;/code&gt; to update your component when the data is retrieved.&lt;/p&gt; &lt;p&gt;For example, the employees list fetched from API and set local state:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      employees: [],
      error: null,
    };
  }

  componentDidMount() {
    fetch("https://api.example.com/items")
      .then((res) =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            employees: result.employees,
          });
        },
        (error) =&amp;gt; {
          this.setState({ error });
        }
      );
  }

  render() {
    const { error, employees } = this.state;
    if (error) {
      return &amp;lt;div&amp;gt;Error: {error.message}&amp;lt;/div&amp;gt;;
    } else {
      return (
        &amp;lt;ul&amp;gt;
          {employees.map((employee) =&amp;gt; (
            &amp;lt;li key={employee.name}&amp;gt;
              {employee.name}-{employee.experience}
            &amp;lt;/li&amp;gt;
          ))}
        &amp;lt;/ul&amp;gt;
      );
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="49"&gt; 
 &lt;li&gt; &lt;h3&gt;What are render props?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Render Props&lt;/strong&gt; is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;DataProvider render={(data) =&amp;gt; &amp;lt;h1&amp;gt;{`Hello ${data.target}`}&amp;lt;/h1&amp;gt;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Libraries such as React Router and DownShift are using this pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="50"&gt; 
 &lt;li&gt; &lt;h3&gt;How to dispatch an action on load?&lt;/h3&gt; &lt;p&gt;You can dispatch an action in &lt;code&gt;componentDidMount()&lt;/code&gt; method and in &lt;code&gt;render()&lt;/code&gt; method you can verify the data.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class App extends Component {
  componentDidMount() {
    this.props.fetchData();
  }

  render() {
    return this.props.isLoaded ? (
      &amp;lt;div&amp;gt;{"Loaded"}&amp;lt;/div&amp;gt;
    ) : (
      &amp;lt;div&amp;gt;{"Not Loaded"}&amp;lt;/div&amp;gt;
    );
  }
}

const mapStateToProps = (state) =&amp;gt; ({
  isLoaded: state.isLoaded,
});

const mapDispatchToProps = { fetchData };

export default connect(mapStateToProps, mapDispatchToProps)(App);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="51"&gt; 
 &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;connect()&lt;/code&gt; from React Redux?&lt;/h3&gt; &lt;p&gt;You need to follow two steps to use your store in your container:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use &lt;code&gt;mapStateToProps()&lt;/code&gt;:&lt;/strong&gt; It maps the state variables from your store to the props that you specify.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connect the above props to your container:&lt;/strong&gt; The object returned by the &lt;code&gt;mapStateToProps&lt;/code&gt; function is connected to the container. You can import &lt;code&gt;connect()&lt;/code&gt; from &lt;code&gt;react-redux&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;import React from "react";
import { connect } from "react-redux";

class App extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;{this.props.containerData}&amp;lt;/div&amp;gt;;
  }
}

function mapStateToProps(state) {
  return { containerData: state.data };
}

export default connect(mapStateToProps)(App);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="52"&gt; 
 &lt;li&gt; &lt;h3&gt;Whats the purpose of &lt;code&gt;at&lt;/code&gt; symbol in the Redux connect decorator?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;@&lt;/strong&gt; symbol is in fact a JavaScript expression used to signify decorators. &lt;em&gt;Decorators&lt;/em&gt; make it possible to annotate and modify classes and properties at design time.&lt;/p&gt; &lt;p&gt;Let's take an example setting up Redux without and with a decorator.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Without decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import React from "react";
import * as actionCreators from "./actionCreators";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

function mapStateToProps(state) {
  return { todos: state.todos };
}

function mapDispatchToProps(dispatch) {
  return { actions: bindActionCreators(actionCreators, dispatch) };
}

class MyApp extends React.Component {
  // ...define your main app here
}

export default connect(mapStateToProps, mapDispatchToProps)(MyApp);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;With decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import React from "react";
import * as actionCreators from "./actionCreators";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

function mapStateToProps(state) {
  return { todos: state.todos };
}

function mapDispatchToProps(dispatch) {
  return { actions: bindActionCreators(actionCreators, dispatch) };
}

@connect(mapStateToProps, mapDispatchToProps)
export default class MyApp extends React.Component {
  // ...define your main app here
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The above examples are almost similar except the usage of decorator. The decorator syntax isn't built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="53"&gt; 
 &lt;li&gt; &lt;h3&gt;How to use TypeScript in &lt;code&gt;create-react-app&lt;/code&gt; application?&lt;/h3&gt; &lt;pre&gt;&lt;code&gt;Starting from react-scripts@3.3.0+ releases onwards, you can now optionally start a new app from a template by appending `--template [template-name]` to the creation command. If you don't select a template, it will create your project with base template. Remember that templates are always named in the format `cra-template-[template-name]`, here you only need to fill the `[template-name]` section.

The typeScript can be used in your project by appending `--template typescript` to the creation command.

 ```bash
 npx create-react-app my-app --template typescript
 ```

But if you are using React Scripting between react-scripts@2.1.0 and react-scripts@3.2.x , there is a built-in support for TypeScript. i.e, `create-react-app` now supports TypeScript natively. You can just pass `--typescript` option as below

 ```bash
 npx create-react-app my-app --typescript

 # or

 yarn create react-app my-app --typescript
 ```

 Whereas for lower versions of react scripts, just supply `--scripts-version` option as `react-scripts-ts` while you create a new project. `react-scripts-ts` is a set of adjustments to take the standard `create-react-app` project pipeline and bring TypeScript into the mix.

 Now the project layout should look like the following:

 ```
 my-app/
 ‚îú‚îÄ .gitignore
 ‚îú‚îÄ images.d.ts
 ‚îú‚îÄ node_modules/
 ‚îú‚îÄ public/
 ‚îú‚îÄ src/
 ‚îÇ  ‚îî‚îÄ ...
 ‚îú‚îÄ package.json
 ‚îú‚îÄ tsconfig.json
 ‚îú‚îÄ tsconfig.prod.json
 ‚îú‚îÄ tsconfig.test.json
 ‚îî‚îÄ tslint.json
 ```
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Does the statics object work with ES6 classes in React?&lt;/h3&gt; &lt;p&gt;No, &lt;code&gt;statics&lt;/code&gt; only works with &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;someComponent = React.createClass({
  statics: {
    someMethod: function () {
      // ..
    },
  },
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can write statics inside ES6+ classes as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Component extends React.Component {
  static propTypes = {
    // ...
  };

  static someMethod() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or writing them outside class as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Component extends React.Component {
   ....
}

Component.propTypes = {...}
Component.someMethod = function(){....}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="55"&gt; 
 &lt;li&gt; &lt;h3&gt;Why are inline ref callbacks or functions not recommended?&lt;/h3&gt; &lt;p&gt;If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class UserForm extends Component {
  handleSubmit = () =&amp;gt; {
    console.log("Input Value is: ", this.input.value);
  };

  render() {
    return (
      &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
        &amp;lt;input type="text" ref={(input) =&amp;gt; (this.input = input)} /&amp;gt; //
        Access DOM input in handle submit
        &amp;lt;button type="submit"&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class UserForm extends Component {
  handleSubmit = () =&amp;gt; {
    console.log("Input Value is: ", this.input.value);
  };

  setSearchInput = (input) =&amp;gt; {
    this.input = input;
  };

  render() {
    return (
      &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
        &amp;lt;input type="text" ref={this.setSearchInput} /&amp;gt; // Access DOM input
        in handle submit
        &amp;lt;button type="submit"&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="56"&gt; 
 &lt;li&gt; &lt;h3&gt;What are HOC factory implementations?&lt;/h3&gt; &lt;p&gt;There are two main ways of implementing HOCs in React.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Props Proxy (PP) and&lt;/li&gt; 
   &lt;li&gt;Inheritance Inversion (II).&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;But they follow different approaches for manipulating the &lt;em&gt;WrappedComponent&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Props Proxy&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name &lt;strong&gt;Props Proxy&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function ppHOC(WrappedComponent) {
  return class PP extends React.Component {
    render() {
      return &amp;lt;WrappedComponent {...this.props} /&amp;gt;;
    }
  };
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Inheritance Inversion&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems &lt;strong&gt;inverse&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;function iiHOC(WrappedComponent) {
  return class Enhancer extends WrappedComponent {
    render() {
      return super.render();
    }
  };
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="57"&gt; 
 &lt;li&gt; &lt;h3&gt;How to use class field declarations syntax in React classes?&lt;/h3&gt; &lt;p&gt;React Class Components can be made much more concise using the class field declarations. You can initialize the local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them.&lt;/p&gt; &lt;p&gt;Let's take a counter example to demonstrate class field declarations for state without using constructor and methods without binding,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-jsx"&gt;class Counter extends Component {
  state = { value: 0 };

  handleIncrement = () =&amp;gt; {
    this.setState((prevState) =&amp;gt; ({
      value: prevState.value + 1,
    }));
  };

  handleDecrement = () =&amp;gt; {
    this.setState((prevState) =&amp;gt; ({
      value: prevState.value - 1,
    }));
  };

  render() {
    return (
      &amp;lt;div&amp;gt;
        {this.state.value}

        &amp;lt;button onClick={this.handleIncrement}&amp;gt;+&amp;lt;/button&amp;gt;
        &amp;lt;button onClick={this.handleDecrement}&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="58"&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you not need error boundaries for event handlers?&lt;/h3&gt; &lt;p&gt;Error boundaries do not catch errors inside event handlers.&lt;/p&gt; &lt;p&gt;React doesn‚Äôt need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don‚Äôt happen during rendering. So if they throw, React still knows what to display on the screen.&lt;/p&gt; &lt;p&gt;If you need to catch an error inside an event handler, use the regular JavaScript try / catch statement:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    try {
      // Do something that could throw
    } catch (error) {
      this.setState({ error });
    }
  }

  render() {
    if (this.state.error) {
      return &amp;lt;h1&amp;gt;Caught an error.&amp;lt;/h1&amp;gt;;
    }
    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the above example is demonstrating regular JavaScript behavior and doesn‚Äôt use error boundaries.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="59"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between try catch block and error boundaries?&lt;/h3&gt; &lt;p&gt;Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.&lt;/p&gt; &lt;p&gt;For example, the try catch block used for below imperative code&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;try {
  showButton();
} catch (error) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas error boundaries wrap declarative code as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;ErrorBoundary&amp;gt;
  &amp;lt;MyComponent /&amp;gt;
&amp;lt;/ErrorBoundary&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So if an error occurs in a &lt;strong&gt;componentDidUpdate&lt;/strong&gt; method caused by a &lt;strong&gt;setState&lt;/strong&gt; somewhere deep in the tree, it will still correctly propagate to the closest error boundary.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="60"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the required method to be defined for a class component?&lt;/h3&gt; The &lt;code&gt;render()&lt;/code&gt; method is the only required method in a class component. i.e, All methods other than render method are optional for a class component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="61"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible return types of render method?&lt;/h3&gt; &lt;p&gt;Below are the list of following types used and return from render method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;React elements:&lt;/strong&gt; Elements that instruct React to render a DOM node. It includes html elements such as &lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt; and user defined elements.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Arrays and fragments:&lt;/strong&gt; Return multiple elements to render as Arrays and Fragments to wrap multiple elements&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Portals:&lt;/strong&gt; Render children into a different DOM subtree.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;String and numbers:&lt;/strong&gt; Render both Strings and Numbers as text nodes in the DOM&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Booleans or null:&lt;/strong&gt; Doesn't render anything but these types are used to conditionally render content.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="62"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main purpose of constructor?&lt;/h3&gt; &lt;p&gt;The constructor is mainly used for two purposes,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;To initialize local state by assigning object to this.state&lt;/li&gt; 
   &lt;li&gt;For binding event handler methods to the instance For example, the below code covers both the above cases,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;constructor(props) {
  super(props);
  // Don't call this.setState() here!
  this.state = { counter: 0 };
  this.handleClick = this.handleClick.bind(this);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="63"&gt; 
 &lt;li&gt; &lt;h3&gt;Is it mandatory to define constructor for React component?&lt;/h3&gt; No, it is not mandatory. i.e, If you don‚Äôt initialize state and you don‚Äôt bind methods, you don‚Äôt need to implement a constructor for your React component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="64"&gt; 
 &lt;li&gt; &lt;h3&gt;Why should not call setState in componentWillUnmount?&lt;/h3&gt; You should not call &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillUnmount()&lt;/code&gt; because once a component instance is unmounted, it will never be mounted again.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="65"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of getDerivedStateFromError?&lt;/h3&gt; &lt;p&gt;This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.&lt;/p&gt; &lt;p&gt;The signature of the lifecycle method is as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;static getDerivedStateFromError(error)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let us take error boundary use case with the above lifecycle method for demonstration purpose,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return &amp;lt;h1&amp;gt;Something went wrong.&amp;lt;/h1&amp;gt;;
    }

    return this.props.children;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="66"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the methods order when component re-rendered?&lt;/h3&gt; &lt;p&gt;An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt; 
   &lt;li&gt;shouldComponentUpdate()&lt;/li&gt; 
   &lt;li&gt;render()&lt;/li&gt; 
   &lt;li&gt;getSnapshotBeforeUpdate()&lt;/li&gt; 
   &lt;li&gt;componentDidUpdate()&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="67"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the methods invoked during error handling?&lt;/h3&gt; &lt;p&gt;Below methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;static getDerivedStateFromError()&lt;/li&gt; 
   &lt;li&gt;componentDidCatch()&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="68"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of unmountComponentAtNode method?&lt;/h3&gt; &lt;p&gt;This method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.&lt;/p&gt; &lt;p&gt;The method signature would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;ReactDOM.unmountComponentAtNode(container);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="69"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the limitations with HOCs?&lt;/h3&gt; &lt;p&gt;Higher-order components come with a few caveats apart from its benefits. Below are the few listed in an order,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Don‚Äôt use HOCs inside the render method:&lt;/strong&gt; It is not recommended to apply a HOC to a component within the render method of a component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;render() {
  // A new version of EnhancedComponent is created on every render
  // EnhancedComponent1 !== EnhancedComponent2
  const EnhancedComponent = enhance(MyComponent);
  // That causes the entire subtree to unmount/remount each time!
  return &amp;lt;EnhancedComponent /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code impacts on performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static methods must be copied over:&lt;/strong&gt; When you apply a HOC to a component the new component does not have any of the static methods of the original component&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;// Define a static method
WrappedComponent.staticMethod = function () {
  /*...*/
};
// Now apply a HOC
const EnhancedComponent = enhance(WrappedComponent);

// The enhanced component has no static method
typeof EnhancedComponent.staticMethod === "undefined"; // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can overcome this by copying the methods onto the container before returning it,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function enhance(WrappedComponent) {
  class Enhance extends React.Component {
    /*...*/
  }
  // Must know exactly which method(s) to copy :(
  Enhance.staticMethod = WrappedComponent.staticMethod;
  return Enhance;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Refs aren‚Äôt passed through:&lt;/strong&gt; For HOCs you need to pass through all props to the wrapped component but this does not work for refs. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="70"&gt; 
 &lt;li&gt; &lt;h3&gt;How to debug forwardRefs in DevTools?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React.forwardRef&lt;/strong&gt; accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component.&lt;/p&gt; &lt;p&gt;For example, If you don't name the render function or not using displayName property then it will appear as ‚ÄùForwardRef‚Äù in the DevTools,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const WrappedComponent = React.forwardRef((props, ref) =&amp;gt; {
  return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But If you name the render function then it will appear as &lt;strong&gt;‚ÄùForwardRef(myFunction)‚Äù&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;const WrappedComponent = React.forwardRef(function myFunction(props, ref) {
  return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As an alternative, You can also set displayName property for forwardRef function,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function logProps(Component) {
  class LogProps extends React.Component {
    // ...
  }

  function forwardRef(props, ref) {
    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
  }

  // Give this component a more helpful display name in DevTools.
  // e.g. "ForwardRef(logProps(MyComponent))"
  const name = Component.displayName || Component.name;
  forwardRef.displayName = `logProps(${name})`;

  return React.forwardRef(forwardRef);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="71"&gt; 
 &lt;li&gt; &lt;h3&gt;Is it good to use arrow functions in render methods?&lt;/h3&gt; &lt;p&gt;Yes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Foo extends Component {
  handleClick() {
    console.log("Click happened");
  }
  render() {
    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using an arrow function in render method creates a new function each time the component renders, which may have performance implications&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="72"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you say that state updates are merged?&lt;/h3&gt; &lt;p&gt;When you call setState() in the component, React merges the object you provide into the current state.&lt;/p&gt; &lt;p&gt;For example, let us take a facebook user with posts and comments details as state variables,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;  constructor(props) {
    super(props);
    this.state = {
      posts: [],
      comments: []
    };
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can update them independently with separate &lt;code&gt;setState()&lt;/code&gt; calls as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt; componentDidMount() {
    fetchPosts().then(response =&amp;gt; {
      this.setState({
        posts: response.posts
      });
    });

    fetchComments().then(response =&amp;gt; {
      this.setState({
        comments: response.comments
      });
    });
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code snippets, &lt;code&gt;this.setState({comments})&lt;/code&gt; updates only comments variable without modifying or replacing &lt;code&gt;posts&lt;/code&gt; variable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="73"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you pass arguments to an event handler?&lt;/h3&gt; &lt;p&gt;During iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method.&lt;/p&gt; &lt;p&gt;Let us take an example of user details updated in a grid,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;button onClick={(e) =&amp;gt; this.updateUser(userId, e)}&amp;gt;Update User details&amp;lt;/button&amp;gt;
&amp;lt;button onClick={this.updateUser.bind(this, userId)}&amp;gt;Update User details&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the both approaches, the synthetic argument &lt;code&gt;e&lt;/code&gt; is passed as a second argument. You need to pass it explicitly for arrow functions and it will be passed automatically for &lt;code&gt;bind&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="74"&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent component from rendering?&lt;/h3&gt; &lt;p&gt;You can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function Greeting(props) {
  if (!props.loggedIn) {
    return null;
  }

  return &amp;lt;div className="greeting"&amp;gt;welcome, {props.name}&amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class User extends React.Component {
  constructor(props) {
    super(props);
    this.state = {loggedIn: false, name: 'John'};
  }

  render() {
   return (
       &amp;lt;div&amp;gt;
         //Prevent component render if it is not loggedIn
         &amp;lt;Greeting loggedIn={this.state.loggedIn} /&amp;gt;
         &amp;lt;UserDetails name={this.state.name}&amp;gt;
       &amp;lt;/div&amp;gt;
   );
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, the &lt;code&gt;greeting&lt;/code&gt; component skips its rendering section by applying condition and returning null value.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="75"&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example on How to use context?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt; is designed to share data that can be considered &lt;strong&gt;global&lt;/strong&gt; for a tree of React components.&lt;/p&gt; &lt;p&gt;For example, in the code below lets manually thread through a ‚Äútheme‚Äù prop in order to style the Button component.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;//Lets create a context with a default theme value "luna"
const ThemeContext = React.createContext("luna");
// Create App component where it uses provider to pass theme value in the tree
class App extends React.Component {
  render() {
    return (
      &amp;lt;ThemeContext.Provider value="nova"&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/ThemeContext.Provider&amp;gt;
    );
  }
}
// A middle component where you don't need to pass theme prop anymore
function Toolbar(props) {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;ThemedButton /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
// Lets read theme value in the button component to use
class ThemedButton extends React.Component {
  static contextType = ThemeContext;
  render() {
    return &amp;lt;Button theme={this.context} /&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="76"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you use contextType?&lt;/h3&gt; &lt;p&gt;ContextType is used to consume the context object. The contextType property can be used in two ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;contextType as property of class:&lt;/strong&gt; The contextType property on a class can be assigned a Context object created by React.createContext(). After that, you can consume the nearest current value of that Context type using this.context in any of the lifecycle methods and render function.&lt;/p&gt; &lt;p&gt;Lets assign contextType property on MyClass as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyClass extends React.Component {
  componentDidMount() {
    let value = this.context;
    /* perform a side-effect at mount using the value of MyContext */
  }
  componentDidUpdate() {
    let value = this.context;
    /* ... */
  }
  componentWillUnmount() {
    let value = this.context;
    /* ... */
  }
  render() {
    let value = this.context;
    /* render something based on the value of MyContext */
  }
}
MyClass.contextType = MyContext;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static field&lt;/strong&gt; You can use a static class field to initialize your contextType using public class field syntax.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class MyClass extends React.Component {
  static contextType = MyContext;
  render() {
    let value = this.context;
    /* render something based on the value */
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="77"&gt; 
 &lt;li&gt; &lt;h3&gt;What is a consumer?&lt;/h3&gt; &lt;p&gt;A Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.&lt;/p&gt; &lt;p&gt;Lets take a simple example,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;MyContext.Consumer&amp;gt;
  {value =&amp;gt; /* render something based on the context value */}
&amp;lt;/MyContext.Consumer&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="78"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you solve performance corner cases while using context?&lt;/h3&gt; &lt;p&gt;The context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider‚Äôs parent re-renders.&lt;/p&gt; &lt;p&gt;For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class App extends React.Component {
  render() {
    return (
      &amp;lt;Provider value={{ something: "something" }}&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This can be solved by lifting up the value to parent state,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: { something: "something" },
    };
  }

  render() {
    return (
      &amp;lt;Provider value={this.state.value}&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="79"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of forward ref in HOCs?&lt;/h3&gt; &lt;p&gt;Refs will not get passed through because ref is not a prop. It is handled differently by React just like &lt;strong&gt;key&lt;/strong&gt;. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API.&lt;/p&gt; &lt;p&gt;The below HOC logs all props,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function logProps(Component) {
  class LogProps extends React.Component {
    componentDidUpdate(prevProps) {
      console.log("old props:", prevProps);
      console.log("new props:", this.props);
    }

    render() {
      const { forwardedRef, ...rest } = this.props;

      // Assign the custom prop "forwardedRef" as a ref
      return &amp;lt;Component ref={forwardedRef} {...rest} /&amp;gt;;
    }
  }

  return React.forwardRef((props, ref) =&amp;gt; {
    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
  });
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's use this HOC to log all props that get passed to our ‚Äúfancy button‚Äù component,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class FancyButton extends React.Component {
  focus() {
    // ...
  }

  // ...
}
export default logProps(FancyButton);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now let's create a ref and pass it to FancyButton component. In this case, you can set focus to button element.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;import FancyButton from "./FancyButton";

const ref = React.createRef();
ref.current.focus();
&amp;lt;FancyButton label="Click Me" handleClick={handleClick} ref={ref} /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="80"&gt; 
 &lt;li&gt; &lt;h3&gt;Is ref argument available for all functions or class components?&lt;/h3&gt; Regular function or class components don‚Äôt receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="81"&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need additional care for component libraries while using forward refs?&lt;/h3&gt; When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="82"&gt; 
 &lt;li&gt; &lt;h3&gt;How to create react class components without ES6?&lt;/h3&gt; &lt;p&gt;If you don‚Äôt use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;var Greeting = createReactClass({
  getDefaultProps: function () {
    return {
      name: "Jhohn",
    };
  },
  getInitialState: function () {
    return { message: this.props.message };
  },
  handleClick: function () {
    console.log(this.state.message);
  },
  render: function () {
    return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;;
  },
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use createReactClass then auto binding is available for all methods. i.e, You don't need to use &lt;code&gt;.bind(this)&lt;/code&gt; with in constructor for event handlers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="83"&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use react without JSX?&lt;/h3&gt; &lt;p&gt;Yes, JSX is not mandatory for using React. Actually it is convenient when you don‚Äôt want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take a greeting example with JSX,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Greeting extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;Hello {this.props.message}&amp;lt;/div&amp;gt;;
  }
}

ReactDOM.render(
  &amp;lt;Greeting message="World" /&amp;gt;,
  document.getElementById("root")
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can write the same code without JSX as below,&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class Greeting extends React.Component {
  render() {
    return React.createElement("div", null, `Hello ${this.props.message}`);
  }
}

ReactDOM.render(
  React.createElement(Greeting, { message: "World" }, null),
  document.getElementById("root")
);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="84"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create HOC using render props?&lt;/h3&gt; &lt;p&gt;You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a 
   &lt;mouse&gt;
     component, you could easily create one using a regular 
    &lt;mouse&gt;
      with a render prop.
    &lt;/mouse&gt;
   &lt;/mouse&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;function withMouse(Component) {
  return class extends React.Component {
    render() {
      return (
        &amp;lt;Mouse
          render={(mouse) =&amp;gt; &amp;lt;Component {...this.props} mouse={mouse} /&amp;gt;}
        /&amp;gt;
      );
    }
  };
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way render props gives the flexibility of using either pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="85"&gt; 
 &lt;li&gt; &lt;h3&gt;What is react scripts?&lt;/h3&gt; The &lt;code&gt;react-scripts&lt;/code&gt; package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The &lt;code&gt;react-scripts start&lt;/code&gt; command sets up the development environment and starts a server, as well as hot module reloading.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="86"&gt; 
 &lt;li&gt; &lt;h3&gt;What are the features of create react app?&lt;/h3&gt; &lt;p&gt;Below are the list of some of the features provided by create react app.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React, JSX, ES6, Typescript and Flow syntax support.&lt;/li&gt; 
   &lt;li&gt;Autoprefixed CSS&lt;/li&gt; 
   &lt;li&gt;CSS Reset/Normalize&lt;/li&gt; 
   &lt;li&gt;A live development server&lt;/li&gt; 
   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting&lt;/li&gt; 
   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps&lt;/li&gt; 
   &lt;li&gt;An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="87"&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of renderToNodeStream method?&lt;/h3&gt; The &lt;code&gt;ReactDOMServer#renderToNodeStream&lt;/code&gt; method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes. &lt;strong&gt;Note:&lt;/strong&gt; Remember this method is not available in the browser but only server.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="88"&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get redux scaffolding using create-react-app?&lt;/h3&gt; Redux team has provided official redux+js or redux+typescript templates for create-react-app project. The generated project setup includes, 
  &lt;ol&gt; 
   &lt;li&gt;Redux Toolkit and React-Redux dependencies&lt;/li&gt; 
   &lt;li&gt;Create and configure Redux store&lt;/li&gt; 
   &lt;li&gt;React-Redux &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; passing the store to React components&lt;/li&gt; 
   &lt;li&gt;Small "counter" example to demo how to add redux logic and React-Redux hooks API to interact with the store from components The below commands need to be executed along with template option as below,&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Javascript template:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-js"&gt;npx create-react-app my-app --template redux
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start="2"&gt; 
   &lt;li&gt;&lt;strong&gt;Typescript template:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class="language-js"&gt;npx create-react-app my-app --template redux-typescript
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start="89"&gt; 
 &lt;li&gt; &lt;h3&gt;What is state mutation and how to prevent it?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;State mutation&lt;/code&gt; happens when you try to update the state of a component without actually using &lt;code&gt;setState&lt;/code&gt; function. This can happen when you are trying to do some computations using a state variable and unknowingly save the result in the same state variable. This is the main reason why it is advised to return new instances of state variables from the reducers by using Object.assign({}, ...) or spread syntax.&lt;/p&gt; &lt;p&gt;This can cause unknown issues in the UI as the value of the state variable got updated without telling React to check what all components were being affected from this update and it can cause UI bugs.&lt;/p&gt; &lt;p&gt;Ex:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-javascript"&gt;class A extends React.component {
  constructor(props) {
    super(props);
    this.state = {
      loading: false
    }
 }

componentDidMount() {
  let { loading } = this.state;
  loading = (() =&amp;gt; true)(); // Trying to perform an operation and directly saving in a state variable
}

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;How to prevent it:&lt;/strong&gt; Make sure your state variables are immutable by either enforcing immutability by using plugins like Immutable.js, always using &lt;code&gt;setState&lt;/code&gt; to make updates, and returning new instances in reducers when sending updated state values.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents"&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;The questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask ‚Äî do not get discouraged if you don't know the answer to all of them ‚Å†‚Äî that is ok!&lt;/p&gt; 
&lt;p&gt;Good luck with your interview üòä&lt;/p&gt; 
&lt;hr /&gt;</description>
    </item>
    
  </channel>
</rss>