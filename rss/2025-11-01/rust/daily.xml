<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Fri, 31 Oct 2025 01:36:53 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>rustdesk/rustdesk</title>
      <link>https://github.com/rustdesk/rustdesk</link>
      <description>&lt;p&gt;An open-source remote desktop application designed for self-hosting, as an alternative to TeamViewer.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rustdesk/rustdesk/master/res/logo-header.svg?sanitize=true" alt="RustDesk - Your remote desktop" /&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build"&gt;Build&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker"&gt;Docker&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure"&gt;Structure&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot"&gt;Snapshot&lt;/a&gt;&lt;br /&gt; [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-UA.md"&gt;Українська&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-CS.md"&gt;česky&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ZH.md"&gt;中文&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-HU.md"&gt;Magyar&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ES.md"&gt;Español&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FA.md"&gt;فارسی&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FR.md"&gt;Français&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DE.md"&gt;Deutsch&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PL.md"&gt;Polski&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ID.md"&gt;Indonesian&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FI.md"&gt;Suomi&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ML.md"&gt;മലയാളം&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-JP.md"&gt;日本語&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NL.md"&gt;Nederlands&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-IT.md"&gt;Italiano&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RU.md"&gt;Русский&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PTBR.md"&gt;Português (Brasil)&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-EO.md"&gt;Esperanto&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-KR.md"&gt;한국어&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-AR.md"&gt;العربي&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-VN.md"&gt;Tiếng Việt&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DA.md"&gt;Dansk&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-GR.md"&gt;Ελληνικά&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-TR.md"&gt;Türkçe&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NO.md"&gt;Norsk&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RO.md"&gt;Română&lt;/a&gt;]&lt;br /&gt; &lt;b&gt;We need your help to translate this README, &lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/lang"&gt;RustDesk UI&lt;/a&gt; and &lt;a href="https://github.com/rustdesk/doc.rustdesk.com"&gt;RustDesk Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Caution] &lt;strong&gt;Misuse Disclaimer:&lt;/strong&gt; &lt;br /&gt; The developers of RustDesk do not condone or support any unethical or illegal use of this software. Misuse, such as unauthorized access, control or invasion of privacy, is strictly against our guidelines. The authors are not responsible for any misuse of the application.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Chat with us: &lt;a href="https://discord.gg/nDceKgxnkV"&gt;Discord&lt;/a&gt; | &lt;a href="https://twitter.com/rustdesk"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/rustdesk"&gt;Reddit&lt;/a&gt; | &lt;a href="https://www.youtube.com/@rustdesk"&gt;YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://rustdesk.com/pricing.html"&gt;&lt;img src="https://img.shields.io/badge/RustDesk%20Server%20Pro-Advanced%20Features-blue" alt="RustDesk Server Pro" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Yet another remote desktop solution, written in Rust. Works out of the box with no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href="https://rustdesk.com/server"&gt;set up your own&lt;/a&gt;, or &lt;a href="https://github.com/rustdesk/rustdesk-server-demo"&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for help getting started.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/wiki/FAQ"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases"&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases/tag/nightly"&gt;&lt;strong&gt;NIGHTLY BUILD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://f-droid.org/en/packages/com.carriez.flutter_hbb"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" height="80" /&gt;&lt;/a&gt; &lt;a href="https://flathub.org/apps/com.rustdesk.RustDesk"&gt;&lt;img src="https://flathub.org/api/badge?svg&amp;amp;locale=en" alt="Get it on Flathub" height="80" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;Desktop versions use Flutter or Sciter (deprecated) for GUI, this tutorial is for Sciter only, since it is easier and more friendly to start. Check out our &lt;a href="https://github.com/rustdesk/rustdesk/raw/master/.github/workflows/flutter-build.yml"&gt;CI&lt;/a&gt; for building Flutter version.&lt;/p&gt; 
&lt;p&gt;Please download Sciter dynamic library yourself.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"&gt;Windows&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so"&gt;Linux&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib"&gt;macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Raw Steps to build&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://github.com/microsoft/vcpkg"&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static&lt;/li&gt; 
   &lt;li&gt;Linux/macOS: vcpkg install libvpx libyuv opus aom&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://rustdesk.com/docs/en/dev/build/"&gt;Build&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;How to Build on Linux&lt;/h2&gt; 
&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y zip g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev \
        libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake make \
        libclang-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpam0g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libXfixes-devel cmake alsa-lib-devel gstreamer-devel gstreamer-plugins-base-devel xdotool-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel gstreamer1-devel gstreamer1-plugins-base-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pipewire
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install vcpkg&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/microsoft/vcpkg
cd vcpkg
git checkout 2023.04.15
cd ..
vcpkg/bootstrap-vcpkg.sh
export VCPKG_ROOT=$HOME/vcpkg
vcpkg/vcpkg install libvpx libyuv opus aom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd vcpkg/buildtrees/libvpx/src
cd *
./configure
sed -i 's/CFLAGS+=-I/CFLAGS+=-fPIC -I/g' Makefile
sed -i 's/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g' Makefile
make
cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/
cd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
git clone --recurse-submodules https://github.com/rustdesk/rustdesk
cd rustdesk
mkdir -p target/debug
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so
mv libsciter-gtk.so target/debug
VCPKG_ROOT=$HOME/vcpkg cargo run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build with Docker&lt;/h2&gt; 
&lt;p&gt;Begin by cloning the repository and building the Docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/rustdesk/rustdesk
cd rustdesk
git submodule update --init --recursive
docker build -t "rustdesk-builder" .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID="$(id -u)" -e PGID="$(id -g)" rustdesk-builder
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/debug/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you're running a release executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/release/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please ensure that you run these commands from the root of the RustDesk repository, or the application may not find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; 
&lt;h2&gt;File Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common"&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/scrap"&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/enigo"&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/clipboard"&gt;libs/clipboard&lt;/a&gt;&lt;/strong&gt;: file copy and paste implementation for Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/ui"&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: obsolete Sciter UI (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/server"&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/client.rs"&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs"&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href="https://github.com/rustdesk/rustdesk-server"&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/platform"&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter"&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for desktop and mobile&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter/web/v1/js"&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: JavaScript for Flutter web client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/db82d4e7-c4bc-4823-8e6f-6af7eadf7651" alt="Connection Manager" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/9baa91e9-3362-4d06-aa1a-7518edcbd7ea" alt="Connected to a Windows PC" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/39511ad3-aa9a-4f8c-8947-1cce286a46ad" alt="File Transfer" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/78e8708f-e87e-4570-8373-1360033ea6c5" alt="TCP Tunneling" /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nushell/nushell</title>
      <link>https://github.com/nushell/nushell</link>
      <description>&lt;p&gt;A new type of shell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nushell 
 &lt;!-- omit in toc --&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/nu"&gt;&lt;img src="https://img.shields.io/crates/v/nu.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/nushell/nushell/ci.yml?branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/actions/workflows/nightly-build.yml"&gt;&lt;img src="https://github.com/nushell/nushell/actions/workflows/nightly-build.yml/badge.svg?sanitize=true" alt="Nightly Build" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NtAbbGn"&gt;&lt;img src="https://img.shields.io/discord/601130461678272522.svg?logo=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://changelog.com/podcast/363"&gt;&lt;img src="https://img.shields.io/badge/The%20Changelog-%23363-61c192.svg?sanitize=true" alt="The Changelog #363" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/graphs/commit-activity"&gt;&lt;img src="https://img.shields.io/github/commit-activity/m/nushell/nushell" alt="GitHub commit activity" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/nushell/nushell" alt="GitHub contributors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A new type of shell.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/nushell/nushell/main/assets/nushell-autocomplete6.gif" alt="Example of nushell" title="Example of nushell" /&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents 
 &lt;!-- omit in toc --&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#status"&gt;Status&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#learning-about-nu"&gt;Learning About Nu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#philosophy"&gt;Philosophy&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#pipelines"&gt;Pipelines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#opening-files"&gt;Opening files&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#goals"&gt;Goals&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#officially-supported-by"&gt;Officially Supported By&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;This project has reached a minimum-viable-product level of quality. Many people use it as their daily driver, but it may be unstable for some commands. Nu's design is subject to change as it matures.&lt;/p&gt; 
&lt;h2&gt;Learning About Nu&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://www.nushell.sh/book/"&gt;Nushell book&lt;/a&gt; is the primary source of Nushell documentation. You can find &lt;a href="https://www.nushell.sh/commands/"&gt;a full list of Nu commands in the book&lt;/a&gt;, and we have many examples of using Nu in our &lt;a href="https://www.nushell.sh/cookbook/"&gt;cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We're also active on &lt;a href="https://discord.gg/NtAbbGn"&gt;Discord&lt;/a&gt;; come and chat with us!&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To quickly install Nu:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Linux and macOS
brew install nushell
# Windows
winget install nushell
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use &lt;code&gt;Nu&lt;/code&gt; in GitHub Action, check &lt;a href="https://github.com/marketplace/actions/setup-nu"&gt;setup-nu&lt;/a&gt; for more detail.&lt;/p&gt; 
&lt;p&gt;Detailed installation instructions can be found in the &lt;a href="https://www.nushell.sh/book/installation.html"&gt;installation chapter of the book&lt;/a&gt;. Nu is available via many package managers:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/nushell/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/nushell.svg?columns=3" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For details about which platforms the Nushell team actively supports, see &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/devdocs/PLATFORM_SUPPORT.md"&gt;our platform support policy&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The default configurations can be found at &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/crates/nu-utils/src/default_files"&gt;sample_config&lt;/a&gt; which are the configuration files one gets when they startup Nushell for the first time.&lt;/p&gt; 
&lt;p&gt;It sets all of the default configuration to run Nushell. From here one can then customize this file for their specific needs.&lt;/p&gt; 
&lt;p&gt;To see where &lt;em&gt;config.nu&lt;/em&gt; is located on your system simply type this command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;$nu.config-path
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please see our &lt;a href="https://www.nushell.sh"&gt;book&lt;/a&gt; for all of the Nushell documentation.&lt;/p&gt; 
&lt;h2&gt;Philosophy&lt;/h2&gt; 
&lt;p&gt;Nu draws inspiration from projects like PowerShell, functional programming languages, and modern CLI tools. Rather than thinking of files and data as raw streams of text, Nu looks at each input as something with structure. For example, when you list the contents of a directory what you get back is a table of rows, where each row represents an item in that directory. These values can be piped through a series of steps, in a series of commands called a 'pipeline'.&lt;/p&gt; 
&lt;h3&gt;Pipelines&lt;/h3&gt; 
&lt;p&gt;In Unix, it's common to pipe between commands to split up a sophisticated command over multiple steps. Nu takes this a step further and builds heavily on the idea of &lt;em&gt;pipelines&lt;/em&gt;. As in the Unix philosophy, Nu allows commands to output to stdout and read from stdin. Additionally, commands can output structured data (you can think of this as a third kind of stream). Commands that work in the pipeline fit into one of three categories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Commands that produce a stream (e.g., &lt;code&gt;ls&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Commands that filter a stream (e.g., &lt;code&gt;where type == "dir"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Commands that consume the output of the pipeline (e.g., &lt;code&gt;table&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Commands are separated by the pipe symbol (&lt;code&gt;|&lt;/code&gt;) to denote a pipeline flowing left to right.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ls | where type == "dir" | table
# =&amp;gt; ╭────┬──────────┬──────┬─────────┬───────────────╮
# =&amp;gt; │ #  │   name   │ type │  size   │   modified    │
# =&amp;gt; ├────┼──────────┼──────┼─────────┼───────────────┤
# =&amp;gt; │  0 │ .cargo   │ dir  │     0 B │ 9 minutes ago │
# =&amp;gt; │  1 │ assets   │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  2 │ crates   │ dir  │ 4.0 KiB │ 2 weeks ago   │
# =&amp;gt; │  3 │ docker   │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  4 │ docs     │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  5 │ images   │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  6 │ pkg_mgrs │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  7 │ samples  │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  8 │ src      │ dir  │ 4.0 KiB │ 2 weeks ago   │
# =&amp;gt; │  9 │ target   │ dir  │     0 B │ a day ago     │
# =&amp;gt; │ 10 │ tests    │ dir  │ 4.0 KiB │ 2 weeks ago   │
# =&amp;gt; │ 11 │ wix      │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; ╰────┴──────────┴──────┴─────────┴───────────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because most of the time you'll want to see the output of a pipeline, &lt;code&gt;table&lt;/code&gt; is assumed. We could have also written the above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ls | where type == "dir"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Being able to use the same commands and compose them differently is an important philosophy in Nu. For example, we could use the built-in &lt;code&gt;ps&lt;/code&gt; command to get a list of the running processes, using the same &lt;code&gt;where&lt;/code&gt; as above.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ps | where cpu &amp;gt; 0
# =&amp;gt; ╭───┬───────┬───────────┬───────┬───────────┬───────────╮
# =&amp;gt; │ # │  pid  │   name    │  cpu  │    mem    │  virtual  │
# =&amp;gt; ├───┼───────┼───────────┼───────┼───────────┼───────────┤
# =&amp;gt; │ 0 │  2240 │ Slack.exe │ 16.40 │ 178.3 MiB │ 232.6 MiB │
# =&amp;gt; │ 1 │ 16948 │ Slack.exe │ 16.32 │ 205.0 MiB │ 197.9 MiB │
# =&amp;gt; │ 2 │ 17700 │ nu.exe    │  3.77 │  26.1 MiB │   8.8 MiB │
# =&amp;gt; ╰───┴───────┴───────────┴───────┴───────────┴───────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Opening files&lt;/h3&gt; 
&lt;p&gt;Nu can load file and URL contents as raw text or structured data (if it recognizes the format). For example, you can load a .toml file as structured data and explore it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml
# =&amp;gt; ╭──────────────────┬────────────────────╮
# =&amp;gt; │ bin              │ [table 1 row]      │
# =&amp;gt; │ dependencies     │ {record 25 fields} │
# =&amp;gt; │ dev-dependencies │ {record 8 fields}  │
# =&amp;gt; │ features         │ {record 10 fields} │
# =&amp;gt; │ package          │ {record 13 fields} │
# =&amp;gt; │ patch            │ {record 1 field}   │
# =&amp;gt; │ profile          │ {record 3 fields}  │
# =&amp;gt; │ target           │ {record 3 fields}  │
# =&amp;gt; │ workspace        │ {record 1 field}   │
# =&amp;gt; ╰──────────────────┴────────────────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can pipe this into a command that gets the contents of one of the columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml | get package
# =&amp;gt; ╭───────────────┬────────────────────────────────────╮
# =&amp;gt; │ authors       │ [list 1 item]                      │
# =&amp;gt; │ default-run   │ nu                                 │
# =&amp;gt; │ description   │ A new type of shell                │
# =&amp;gt; │ documentation │ https://www.nushell.sh/book/       │
# =&amp;gt; │ edition       │ 2018                               │
# =&amp;gt; │ exclude       │ [list 1 item]                      │
# =&amp;gt; │ homepage      │ https://www.nushell.sh             │
# =&amp;gt; │ license       │ MIT                                │
# =&amp;gt; │ metadata      │ {record 1 field}                   │
# =&amp;gt; │ name          │ nu                                 │
# =&amp;gt; │ repository    │ https://github.com/nushell/nushell │
# =&amp;gt; │ rust-version  │ 1.60                               │
# =&amp;gt; │ version       │ 0.72.0                             │
# =&amp;gt; ╰───────────────┴────────────────────────────────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And if needed we can drill down further:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml | get package.version
# =&amp;gt; 0.72.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Plugins&lt;/h3&gt; 
&lt;p&gt;Nu supports plugins that offer additional functionality to the shell and follow the same structured data model that built-in commands use. There are a few examples in the &lt;code&gt;crates/nu_plugins_*&lt;/code&gt; directories.&lt;/p&gt; 
&lt;p&gt;Plugins are binaries that are available in your path and follow a &lt;code&gt;nu_plugin_*&lt;/code&gt; naming convention. These binaries interact with nu via a simple JSON-RPC protocol where the command identifies itself and passes along its configuration, making it available for use. If the plugin is a filter, data streams to it one element at a time, and it can stream data back in return via stdin/stdout. If the plugin is a sink, it is given the full vector of final data and is given free reign over stdin/stdout to use as it pleases.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/nushell/awesome-nu#plugins"&gt;awesome-nu repo&lt;/a&gt; lists a variety of nu-plugins while the &lt;a href="https://github.com/nushell/showcase"&gt;showcase repo&lt;/a&gt; &lt;em&gt;shows&lt;/em&gt; off informative blog posts that have been written about Nushell along with videos that highlight technical topics that have been presented.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;Nu adheres closely to a set of goals that make up its design philosophy. As features are added, they are checked against these goals.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;First and foremost, Nu is cross-platform. Commands and techniques should work across platforms and Nu has &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/devdocs/PLATFORM_SUPPORT.md"&gt;first-class support for Windows, macOS, and Linux&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu ensures compatibility with existing platform-specific executables.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu's workflow and tools should have the usability expected of modern software in 2022 (and beyond).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu views data as either structured or unstructured. It is a structured shell like PowerShell.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Finally, Nu views data functionally. Rather than using mutation, pipelines act as a means to load, change, and save data without mutable state.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Officially Supported By&lt;/h2&gt; 
&lt;p&gt;Please submit an issue or PR to be added to this list.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/starship/starship"&gt;starship&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ohmyposh.dev"&gt;oh-my-posh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://couchbase.sh"&gt;Couchbase Shell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pypa/virtualenv"&gt;virtualenv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ellie/atuin"&gt;atuin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clap-rs/clap/tree/master/clap_complete_nushell"&gt;clap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://github.com/bevry/dorothy"&gt;Dorothy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/direnv/direnv/raw/master/docs/hook.md#nushell"&gt;Direnv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x-cmd.com/mod/nu"&gt;x-cmd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/version-fox/vfox"&gt;vfox&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt; for details. Thanks to all the people who already contributed!&lt;/p&gt; 
&lt;a href="https://github.com/nushell/nushell/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=nushell/nushell&amp;amp;max=750&amp;amp;columns=20" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The project is made available under the MIT license. See the &lt;code&gt;LICENSE&lt;/code&gt; file for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>block/goose</title>
      <link>https://github.com/block/goose</link>
      <description>&lt;p&gt;an open source, extensible AI agent that goes beyond code suggestions - install, execute, edit, and test with any LLM&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;goose&lt;/h1&gt; 
 &lt;p&gt;&lt;em&gt;a local, extensible, open source AI agent that automates engineering tasks&lt;/em&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt; &lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://discord.gg/goose-oss"&gt; &lt;img src="https://img.shields.io/discord/1287729918100246654?logo=discord&amp;amp;logoColor=white&amp;amp;label=Join+Us&amp;amp;color=blueviolet" alt="Discord" /&gt; &lt;/a&gt; &lt;a href="https://github.com/block/goose/actions/workflows/ci.yml"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/block/goose/ci.yml?branch=main" alt="CI" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;🎉 Hacktoberfest 2025 🎉&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;goose&lt;/code&gt; is a participating project in Hacktoberfest 2025! We’re so excited for your contributions, and have created a wide variety of issues so that anyone can contribute. Whether you're a seasoned developer or a first-time open source contributor, there's something for everyone.&lt;/p&gt; 
&lt;h3&gt;To get started:&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read the &lt;a href="https://github.com/block/goose/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href="https://github.com/block/.github/raw/main/CODE_OF_CONDUCT.md"&gt;code of conduct&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href="https://raw.githubusercontent.com/block/goose/main/ai-assisted-coding-guide.md"&gt;full Responsible AI-Assisted Coding Guide&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Choose a task from this project's Hacktoberfest issues in our &lt;a href="https://github.com/block/goose/issues/4705"&gt;Project Hub&lt;/a&gt; and follow the instructions. Each issue has the 🏷️ &lt;code&gt;hacktoberfest&lt;/code&gt; label.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Have questions? Connecting with us in our &lt;a href="https://discord.gg/goose-oss"&gt;Discord community&lt;/a&gt; in the &lt;code&gt;#hacktoberfest&lt;/code&gt; project channel.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;goose is your on-machine AI agent, capable of automating complex development tasks from start to finish. More than just code suggestions, goose can build entire projects from scratch, write and execute code, debug failures, orchestrate workflows, and interact with external APIs - &lt;em&gt;autonomously&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Whether you're prototyping an idea, refining existing code, or managing intricate engineering pipelines, goose adapts to your workflow and executes tasks with precision.&lt;/p&gt; 
&lt;p&gt;Designed for maximum flexibility, goose works with any LLM and supports multi-model configuration to optimize performance and cost, seamlessly integrates with MCP servers, and is available as both a desktop app as well as CLI - making it the ultimate AI assistant for developers who want to move faster and focus on innovation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/D-DpDunrbpo"&gt;&lt;img src="https://github.com/user-attachments/assets/ddc71240-3928-41b5-8210-626dfb28af7a" alt="Watch the video" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Quick Links&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/getting-started/installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/getting-started"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/block/goose/raw/main/GOVERNANCE.md"&gt;Governance&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;a little goose humor 🦢&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Why did the developer choose goose as their AI agent?&lt;/p&gt; 
 &lt;p&gt;Because it always helps them "migrate" their code to production! 🚀&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;goose around with us&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/goose-oss"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/@goose-oss"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/goose-oss"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/goose_oss"&gt;Twitter/X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bsky.app/profile/opensource.block.xyz"&gt;Bluesky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://njump.me/opensource@block.xyz"&gt;Nostr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>tikv/tikv</title>
      <link>https://github.com/tikv/tikv</link>
      <description>&lt;p&gt;Distributed transactional key-value database, originally created to complement TiDB&lt;/p&gt;&lt;hr&gt;&lt;img src="https://raw.githubusercontent.com/tikv/tikv/master/images/tikv-logo.png" alt="tikv_logo" width="300" /&gt; 
&lt;h2&gt;&lt;a href="https://tikv.org"&gt;Website&lt;/a&gt; | &lt;a href="https://tikv.org/docs/latest/concepts/overview/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://slack.tidb.io/invite?team=tikv-wg&amp;amp;channel=general"&gt;Community Chat&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://ci.pingcap.net/blue/organizations/jenkins/tikv_ghpr_build_master/activity"&gt;&lt;img src="https://ci.pingcap.net/buildStatus/icon?job=tikv_ghpr_build_master" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/tikv/tikv"&gt;&lt;img src="https://codecov.io/gh/tikv/tikv/branch/master/graph/badge.svg?sanitize=true" alt="Coverage Status" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/2574"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/2574/badge" alt="CII Best Practices" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;TiKV is an open-source, distributed, and transactional key-value database. Unlike other traditional NoSQL systems, TiKV not only provides classical key-value APIs, but also transactional APIs with ACID compliance. Built in Rust and powered by Raft, TiKV was originally created by &lt;a href="https://en.pingcap.com"&gt;PingCAP&lt;/a&gt; to complement &lt;a href="https://github.com/pingcap/tidb"&gt;TiDB&lt;/a&gt;, a distributed HTAP database compatible with the MySQL protocol.&lt;/p&gt; 
&lt;p&gt;The design of TiKV ('Ti' stands for titanium) is inspired by some great distributed systems from Google, such as BigTable, Spanner, and Percolator, and some of the latest achievements in academia in recent years, such as the Raft consensus algorithm.&lt;/p&gt; 
&lt;p&gt;If you're interested in contributing to TiKV, or want to build it from source, see &lt;a href="https://raw.githubusercontent.com/tikv/tikv/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tikv/tikv/master/images/cncf.png#gh-light-mode-only" alt="cncf_logo" /&gt; &lt;img src="https://raw.githubusercontent.com/tikv/tikv/master/images/cncf-white.png#gh-dark-mode-only" alt="cncf_logo" /&gt;&lt;/p&gt; 
&lt;p&gt;TiKV is a graduated project of the &lt;a href="https://cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt; (CNCF). If you are an organization that wants to help shape the evolution of technologies that are container-packaged, dynamically-scheduled and microservices-oriented, consider joining the CNCF. For details about who's involved and how TiKV plays a role, read the CNCF &lt;a href="https://www.cncf.io/announcements/2020/09/02/cloud-native-computing-foundation-announces-tikv-graduation/"&gt;announcement&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;With the implementation of the Raft consensus algorithm in Rust and consensus state stored in RocksDB, TiKV guarantees data consistency. &lt;a href="https://github.com/pingcap/pd/"&gt;Placement Driver (PD)&lt;/a&gt;, which is introduced to implement auto-sharding, enables automatic data migration. The transaction model is similar to Google's Percolator with some performance improvements. TiKV also provides snapshot isolation (SI), snapshot isolation with lock (SQL: &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt;), and externally consistent reads and writes in distributed transactions.&lt;/p&gt; 
&lt;p&gt;TiKV has the following key features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Geo-Replication&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;TiKV uses &lt;a href="http://raft.github.io/"&gt;Raft&lt;/a&gt; and the Placement Driver to support Geo-Replication.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Horizontal scalability&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;With PD and carefully designed Raft groups, TiKV excels in horizontal scalability and can easily scale to 100+ TBs of data.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Consistent distributed transactions&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Similar to Google's Spanner, TiKV supports externally-consistent distributed transactions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Coprocessor support&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Similar to HBase, TiKV implements a coprocessor framework to support distributed computing.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cooperates with &lt;a href="https://github.com/pingcap/tidb"&gt;TiDB&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Thanks to the internal optimization, TiKV and TiDB can work together to be a compelling database solution with high horizontal scalability, externally-consistent transactions, support for RDBMS, and NoSQL design patterns.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Governance&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/tikv/community/raw/master/GOVERNANCE.md"&gt;Governance&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For instructions on deployment, configuration, and maintenance of TiKV,see TiKV documentation on our &lt;a href="https://tikv.org/docs/4.0/tasks/introduction/"&gt;website&lt;/a&gt;. For more details on concepts and designs behind TiKV, see &lt;a href="https://tikv.org/deep-dive/introduction/"&gt;Deep Dive TiKV&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;We have migrated our documentation from the &lt;a href="https://github.com/tikv/tikv/wiki/"&gt;TiKV's wiki page&lt;/a&gt; to the &lt;a href="https://tikv.org/docs"&gt;official website&lt;/a&gt;. The original Wiki page is discontinued. If you have any suggestions or issues regarding documentation, offer your feedback &lt;a href="https://github.com/tikv/website"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;TiKV adopters&lt;/h2&gt; 
&lt;p&gt;You can view the list of &lt;a href="https://tikv.org/adopters/"&gt;TiKV Adopters&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;TiKV software stack&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tikv/tikv/master/images/tikv_stack.png" alt="The TiKV software stack" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Placement Driver:&lt;/strong&gt; PD is the cluster manager of TiKV, which periodically checks replication constraints to balance load and data automatically.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Store:&lt;/strong&gt; There is a RocksDB within each Store and it stores data into the local disk.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Region:&lt;/strong&gt; Region is the basic unit of Key-Value data movement. Each Region is replicated to multiple Nodes. These multiple replicas form a Raft group.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node:&lt;/strong&gt; A physical node in the cluster. Within each node, there are one or more Stores. Within each Store, there are many Regions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When a node starts, the metadata of the Node, Store and Region are recorded into PD. The status of each Region and Store is reported to PD regularly.&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;h3&gt;Deploy a playground with TiUP&lt;/h3&gt; 
&lt;p&gt;The most quickest to try out TiKV with TiDB is using TiUP, a component manager for TiDB.&lt;/p&gt; 
&lt;p&gt;You can see &lt;a href="https://docs.pingcap.com/tidb/stable/quick-start-with-tidb#deploy-a-local-test-environment-using-tiup-playground"&gt;this page&lt;/a&gt; for a step by step tutorial.&lt;/p&gt; 
&lt;h3&gt;Deploy a playground with binary&lt;/h3&gt; 
&lt;p&gt;TiKV is able to run separately with PD, which is the minimal deployment required.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download and extract binaries.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ export TIKV_VERSION=v7.5.0
$ export GOOS=darwin  # only {darwin, linux} are supported
$ export GOARCH=amd64 # only {amd64, arm64} are supported
$ curl -O  https://tiup-mirrors.pingcap.com/tikv-$TIKV_VERSION-$GOOS-$GOARCH.tar.gz
$ curl -O  https://tiup-mirrors.pingcap.com/pd-$TIKV_VERSION-$GOOS-$GOARCH.tar.gz
$ tar -xzf tikv-$TIKV_VERSION-$GOOS-$GOARCH.tar.gz
$ tar -xzf pd-$TIKV_VERSION-$GOOS-$GOARCH.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Start PD instance.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ ./pd-server --name=pd --data-dir=/tmp/pd/data --client-urls="http://127.0.0.1:2379" --peer-urls="http://127.0.0.1:2380" --initial-cluster="pd=http://127.0.0.1:2380" --log-file=/tmp/pd/log/pd.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Start TiKV instance.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ ./tikv-server --pd-endpoints="127.0.0.1:2379" --addr="127.0.0.1:20160" --data-dir=/tmp/tikv/data --log-file=/tmp/tikv/log/tikv.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Install TiKV Client(Python) and verify the deployment, required Python 3.5+.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ pip3 install -i https://test.pypi.org/simple/ tikv-client
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from tikv_client import RawClient

client = RawClient.connect(["127.0.0.1:2379"])

client.put(b'foo', b'bar')
print(client.get(b'foo')) # b'bar'

client.put(b'foo', b'baz')
print(client.get(b'foo')) # b'baz'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Deploy a cluster with TiUP&lt;/h3&gt; 
&lt;p&gt;You can see &lt;a href="https://raw.githubusercontent.com/tikv/tikv/master/doc/deploy.md"&gt;this manual&lt;/a&gt; of production-like cluster deployment presented by @c4pt0r.&lt;/p&gt; 
&lt;h3&gt;Build from source&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/tikv/tikv/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Client drivers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tikv/client-go"&gt;Go&lt;/a&gt; (The most stable and widely used)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tikv/client-java"&gt;Java&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tikv/client-rust"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tikv/client-c"&gt;C&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you want to try the Go client, see &lt;a href="https://tikv.org/docs/4.0/reference/clients/go/"&gt;Go Client&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;h3&gt;Security audit&lt;/h3&gt; 
&lt;p&gt;A third-party security auditing was performed by Cure53. See the full report &lt;a href="https://raw.githubusercontent.com/tikv/tikv/master/security/Security-Audit.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Reporting Security Vulnerabilities&lt;/h3&gt; 
&lt;p&gt;To report a security vulnerability, please send an email to &lt;a href="mailto:tikv-security@lists.cncf.io"&gt;TiKV-security&lt;/a&gt; group.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/tikv/tikv/master/SECURITY.md"&gt;Security&lt;/a&gt; for the process and policy followed by the TiKV project.&lt;/p&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;p&gt;Communication within the TiKV community abides by &lt;a href="https://raw.githubusercontent.com/tikv/tikv/master/CODE_OF_CONDUCT.md"&gt;TiKV Code of Conduct&lt;/a&gt;. Here is an excerpt:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Social Media&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/tikvproject"&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tikv.org/blog/"&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.reddit.com/r/TiKV"&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Post questions or help answer them on &lt;a href="https://stackoverflow.com/questions/tagged/tikv"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Slack&lt;/h3&gt; 
&lt;p&gt;Join the TiKV community on &lt;a href="https://slack.tidb.io/invite?team=tikv-wg&amp;amp;channel=general"&gt;Slack&lt;/a&gt; - Sign up and join channels on TiKV topics that interest you.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;TiKV is under the Apache 2.0 license. See the &lt;a href="https://raw.githubusercontent.com/tikv/tikv/master/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Thanks &lt;a href="https://github.com/coreos/etcd"&gt;etcd&lt;/a&gt; for providing some great open source tools.&lt;/li&gt; 
 &lt;li&gt;Thanks &lt;a href="https://github.com/facebook/rocksdb"&gt;RocksDB&lt;/a&gt; for their powerful storage engines.&lt;/li&gt; 
 &lt;li&gt;Thanks &lt;a href="https://github.com/rust-lang/rust-clippy"&gt;rust-clippy&lt;/a&gt;. We do love the great project.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>cube-js/cube</title>
      <link>https://github.com/cube-js/cube</link>
      <description>&lt;p&gt;📊 Cube Core is open-source semantic layer and LookML alternative for AI, BI and embedded analytics&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="" alt="" /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://cube.dev?ref=github-readme"&gt;&lt;img src="https://raw.githubusercontent.com/cube-js/cube/master/docs/content/cube-logo-with-bg.png" alt="Cube — Semantic Layer for Data Applications" width="300px" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;a href="https://cube.dev?ref=github-readme"&gt;Website&lt;/a&gt; • &lt;a href="https://cube.dev/docs/getting-started?ref=github-readme"&gt;Getting Started&lt;/a&gt; • &lt;a href="https://cube.dev/docs?ref=github-readme"&gt;Docs&lt;/a&gt; • &lt;a href="https://cube.dev/docs/examples?ref=github-readme"&gt;Examples&lt;/a&gt; • &lt;a href="https://cube.dev/blog?ref=github-readme"&gt;Blog&lt;/a&gt; • &lt;a href="https://slack.cube.dev?ref=github-readme"&gt;Slack&lt;/a&gt; • &lt;a href="https://twitter.com/the_cube_dev"&gt;X&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://badge.fury.io/js/%40cubejs-backend%2Fserver"&gt;&lt;img src="https://badge.fury.io/js/%40cubejs-backend%2Fserver.svg?sanitize=true" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cube-js/cube/actions?query=workflow%3ABuild+branch%3Amaster"&gt;&lt;img src="https://github.com/cube-js/cube/workflows/Build/badge.svg?sanitize=true" alt="GitHub Actions" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js?ref=badge_shield"&gt;&lt;img src="https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Cube Core is an open-source semantic layer and LookML alternative.&lt;/strong&gt; It can be used by data professionals to access data from modern data stores, organize it into consistent definitions, and deliver it to every application. Cube Core is headless and comes with multiple APIs for embedded analytics and BI: REST, GraphQL and SQL. If you are looking for a fully integrated platform, similar to Looker, check out our commercial product - &lt;a href="https://cube.dev"&gt;Cube&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://ucarecdn.com/8d945f29-e9eb-4e7f-9e9e-29ae7074e195/" style="border: none" width="100%" /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt;Learn more about connecting Cube to &lt;a href="https://cube.dev/docs/config/databases?ref=github-readme" target="_blank"&gt;data sources&lt;/a&gt; and &lt;a href="https://cube.dev/docs/config/downstream?ref=github-readme" target="_blank"&gt;analytics &amp;amp; visualization tools&lt;/a&gt;.&lt;/i&gt; &lt;/p&gt; 
&lt;p&gt;Cube was designed to work with all SQL-enabled data sources, including cloud data warehouses like Snowflake or Google BigQuery, query engines like Presto or Amazon Athena, and application databases like Postgres. Cube has a built-in relational caching engine to provide sub-second latency and high concurrency for API requests.&lt;/p&gt; 
&lt;p&gt;For more details, see the &lt;a href="https://cube.dev/docs/cubejs-introduction?ref=github-readme"&gt;introduction&lt;/a&gt; page in our documentation.&lt;/p&gt; 
&lt;h2&gt;Why Cube?&lt;/h2&gt; 
&lt;p&gt;As data infrastructure evolved from traditional relational databases to cloud data platforms, OLAP capabilities that once lived in specialized servers like SQL Server Analysis Services and Oracle Essbase were left behind. Today's organizations face several challenges:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Analytics Modeling and Multidimensionality.&lt;/strong&gt; Modern cloud data platforms excel at processing large volumes of data but lack native support for multidimensional analysis and modeling. Cube brings OLAP-style analytics to these platforms, enabling consistent metric definitions and multidimensional analysis.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance Optimization.&lt;/strong&gt; While cloud data warehouses have improved query performance through column-oriented storage and distributed processing, they still struggle with complex analytical workloads. Cube provides intelligent caching and pre-aggregation strategies that dramatically improve query response times.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Access Control and Governance.&lt;/strong&gt; Securing and governing access to data across all consuming applications remains critical. Cube offers robust access control to ensure consistent security across your entire data ecosystem.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;API Flexibility.&lt;/strong&gt; Legacy OLAP tools were limited in how they exposed data. Cube provides modern REST, GraphQL, and SQL APIs along with support for traditional MDX and DAX interfaces, making it a truly universal semantic layer.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Cube is the missing OLAP engine for the cloud data platform era that provides the necessary infrastructure and features to implement efficient data modeling, access control, and performance optimizations without duplicating analytics modeling, data, or security permissions across different tools.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cube-js/cube.js/master/docs/content/old-was-vs-cubejs-way.png" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started 🚀&lt;/h2&gt; 
&lt;h3&gt;Cube Cloud&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://cube.dev/cloud?ref=github-readme"&gt;Cube Cloud&lt;/a&gt; is the fastest way to get started with Cube. It provides managed infrastructure as well as an instant and free access for development projects and proofs of concept.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://cubecloud.dev/auth/signup?ref=github-readme"&gt;&lt;img src="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f1f1eac0-0b44-4c47-936e-33b5c06eedf0.png" alt="Get started now" width="200px" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For a step-by-step guide on Cube Cloud, &lt;a href="https://cube.dev/docs/getting-started/cloud/overview?ref=github-readme"&gt;see the docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can get started with Cube locally or self-host it with &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once Docker is installed, in a new folder for your project, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -p 4000:4000 \
  -p 15432:15432 \
  -v ${PWD}:/cube/conf \
  -e CUBEJS_DEV_MODE=true \
  cubejs/cube
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, open &lt;a href="http://localhost:4000"&gt;http://localhost:4000&lt;/a&gt; in your browser to continue setup.&lt;/p&gt; 
&lt;p&gt;For a step-by-step guide on Docker, &lt;a href="https://cube.dev/docs/getting-started-docker?ref=github-readme"&gt;see the docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://cube.dev/docs?ref=github-readme"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cube.dev/docs/getting-started?ref=github-readme"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cube.dev/docs/examples?ref=github-readme"&gt;Examples &amp;amp; Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cube.dev/docs/product/introduction#four-layers-of-semantic-layer"&gt;Architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;There are many ways you can contribute to Cube! Here are a few possibilities:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Star this repo and follow us on &lt;a href="https://twitter.com/the_cube_dev"&gt;X&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Add Cube to your stack on &lt;a href="https://stackshare.io/cube-js"&gt;Stackshare&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Upvote issues with 👍 reaction so we know what's the demand for particular issue to prioritize it within road map.&lt;/li&gt; 
 &lt;li&gt;Create issues every time you feel something is missing or goes wrong.&lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/cube.js"&gt;Stack Overflow with cube.js tag&lt;/a&gt; if others can have these questions as well.&lt;/li&gt; 
 &lt;li&gt;Provide pull requests for all open issues and especially for those with &lt;a href="https://github.com/cube-js/cube/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt; and &lt;a href="https://github.com/cube-js/cube/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;good first issue&lt;/a&gt; labels.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All sort of contributions are &lt;strong&gt;welcome and extremely helpful&lt;/strong&gt; 🙌 Please refer to &lt;a href="https://github.com/cube-js/cube/raw/master/CONTRIBUTING.md"&gt;the contribution guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Cube Client is &lt;a href="https://raw.githubusercontent.com/cube-js/cube/master/packages/cubejs-client-core/LICENSE"&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Cube Backend is &lt;a href="https://raw.githubusercontent.com/cube-js/cube/master/packages/cubejs-server/LICENSE"&gt;Apache 2.0 licensed&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js?ref=badge_large"&gt;&lt;img src="https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tursodatabase/turso</title>
      <link>https://github.com/tursodatabase/turso</link>
      <description>&lt;p&gt;Turso is an in-process SQL database, compatible with SQLite.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/turso.png" alt="Turso Database" width="800" /&gt; &lt;/p&gt;
&lt;h1 align="center"&gt;Turso Database&lt;/h1&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="center"&gt; An in-process SQL database, compatible with SQLite. &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a title="Build Status" target="_blank" href="https://github.com/tursodatabase/turso/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/tursodatabase/turso/rust.yml?style=flat-square" /&gt;&lt;/a&gt; &lt;a title="Releases" target="_blank" href="https://github.com/tursodatabase/turso/releases"&gt;&lt;img src="https://img.shields.io/github/release/tursodatabase/turso?style=flat-square&amp;amp;color=9CF" /&gt;&lt;/a&gt; &lt;a title="Rust" target="_blank" href="https://crates.io/crates/turso"&gt;&lt;img alt="PyPI" src="https://img.shields.io/crates/v/turso" /&gt;&lt;/a&gt; &lt;a title="JavaScript" target="_blank" href="https://www.npmjs.com/package/@tursodatabase/database"&gt;&lt;img alt="PyPI" src="https://img.shields.io/npm/v/@tursodatabase/database" /&gt;&lt;/a&gt; &lt;a title="Python" target="_blank" href="https://pypi.org/project/pyturso/"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/v/pyturso" /&gt;&lt;/a&gt; &lt;a title="MIT" target="_blank" href="https://github.com/tursodatabase/turso/raw/main/LICENSE.md"&gt;&lt;img src="http://img.shields.io/badge/license-MIT-orange.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a title="GitHub Pull Requests" target="_blank" href="https://github.com/tursodatabase/turso/pulls"&gt;&lt;img src="https://img.shields.io/github/issues-pr-closed/tursodatabase/turso.svg?style=flat-square&amp;amp;color=FF9966" /&gt;&lt;/a&gt; &lt;a title="GitHub Commits" target="_blank" href="https://github.com/tursodatabase/turso/commits/main"&gt;&lt;img src="https://img.shields.io/github/commit-activity/m/tursodatabase/turso.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a title="Last Commit" target="_blank" href="https://github.com/tursodatabase/turso/commits/main"&gt;&lt;img src="https://img.shields.io/github/last-commit/tursodatabase/turso.svg?style=flat-square&amp;amp;color=FF9900" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a title="Developer's Discord" target="_blank" href="https://discord.gg/jgjmyYgHwB"&gt;&lt;img alt="Chat with the Core Developers on Discord" src="https://img.shields.io/discord/1258658826257961020?label=Discord&amp;amp;logo=Discord&amp;amp;style=social&amp;amp;label=Core%20Developers" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a title="Users's Discord" target="_blank" href="https://tur.so/discord"&gt;&lt;img alt="Chat with other users of Turso (and Turso Cloud) on Discord" src="https://img.shields.io/discord/933071162680958986?label=Discord&amp;amp;logo=Discord&amp;amp;style=social&amp;amp;label=Users" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Turso Database is an in-process SQL database written in Rust, compatible with SQLite.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;⚠️ Warning:&lt;/strong&gt; This software is in BETA. It may still contain bugs and unexpected behavior. Use caution with production data and ensure you have backups.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features and Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SQLite compatibility&lt;/strong&gt; for SQL dialect, file formats, and the C API [see &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/COMPAT.md"&gt;document&lt;/a&gt; for details]&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Change data capture (CDC)&lt;/strong&gt; for real-time tracking of database changes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-language support&lt;/strong&gt; for 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tursodatabase/turso-go"&gt;Go&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/java"&gt;Java&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/python"&gt;Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/rust"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/javascript"&gt;WebAssembly&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Asynchronous I/O&lt;/strong&gt; support on Linux with &lt;code&gt;io_uring&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt; support for Linux, macOS, Windows and browsers (through WebAssembly)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Vector support&lt;/strong&gt; support including exact search and vector manipulation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Improved schema management&lt;/strong&gt; including extended &lt;code&gt;ALTER&lt;/code&gt; support and faster schema changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The database has the following experimental features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;BEGIN CONCURRENT&lt;/code&gt;&lt;/strong&gt; for improved write throughput using multi-version concurrency control (MVCC).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Encryption at rest&lt;/strong&gt; for protecting the data locally.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Incremental computation&lt;/strong&gt; using DBSP for incremental view mainatenance and query subscriptions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following features are on our current roadmap:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Vector indexing&lt;/strong&gt; for fast approximate vector search, similar to &lt;a href="https://turso.tech/vector"&gt;libSQL vector search&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/docs/manual.md"&gt;Turso Database Manual&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;💻 Command Line&lt;/summary&gt; 
 &lt;br /&gt; You can install the latest `turso` release with: 
 &lt;pre&gt;&lt;code class="language-shell"&gt;curl --proto '=https' --tlsv1.2 -LsSf \
  https://github.com/tursodatabase/turso/releases/latest/download/turso_cli-installer.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Then launch the interactive shell:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;$ tursodb
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This will start the Turso interactive shell where you can execute SQL statements:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;Turso
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database
turso&amp;gt; CREATE TABLE users (id INT, username TEXT);
turso&amp;gt; INSERT INTO users VALUES (1, 'alice');
turso&amp;gt; INSERT INTO users VALUES (2, 'bob');
turso&amp;gt; SELECT * FROM users;
1|alice
2|bob
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can also build and run the latest development version with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you like docker, we got you covered. Simply run this in the root folder:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;make docker-cli-build &amp;amp;&amp;amp; \
make docker-cli-run
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🦀 Rust&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;cargo add turso
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-rust"&gt;let db = Builder::new_local("sqlite.db").build().await?;
let conn = db.connect()?;

let res = conn.query("SELECT * FROM users", ()).await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;✨ JavaScript&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;npm i @tursodatabase/database
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-js"&gt;import { connect } from '@tursodatabase/database';

const db = await connect('sqlite.db');
const stmt = db.prepare('SELECT * FROM users');
const users = stmt.all();
console.log(users);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🐍 Python&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;uv pip install pyturso
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;import turso

con = turso.connect("sqlite.db")
cur = con.cursor()
res = cur.execute("SELECT * FROM users")
print(res.fetchone())
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🦫 Go&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;go get github.com/tursodatabase/turso-go
go install github.com/tursodatabase/turso-go
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;import (
    "database/sql"
    _ "github.com/tursodatabase/turso-go"
)

conn, _ = sql.Open("turso", "sqlite.db")
defer conn.Close()

stmt, _ := conn.Prepare("select * from users")
defer stmt.Close()

rows, _ = stmt.Query()
for rows.Next() {
    var id int
    var username string
    _ := rows.Scan(&amp;amp;id, &amp;amp;username)
    fmt.Printf("User: ID: %d, Username: %s\n", id, username)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;☕️ Java&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;We integrated Turso Database into JDBC. For detailed instructions on how to use Turso Database with java, please refer to the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/java/README.md"&gt;README.md under bindings/java&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🤖 MCP Server Mode&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;The Turso CLI includes a built-in &lt;a href="https://modelcontextprotocol.io/"&gt;Model Context Protocol (MCP)&lt;/a&gt; server that allows AI assistants to interact with your databases.&lt;/p&gt; 
 &lt;p&gt;Start the MCP server with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;tursodb your_database.db --mcp
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Configuration&lt;/h3&gt; 
 &lt;p&gt;Add Turso to your MCP client configuration:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "turso": {
      "command": "/path/to/.turso/tursodb",
      "args": ["/path/to/your/database.db", "--mcp"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Available Tools&lt;/h3&gt; 
 &lt;p&gt;The MCP server provides nine tools for database interaction:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;open_database&lt;/code&gt;&lt;/strong&gt; - Open a new database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;current_database&lt;/code&gt;&lt;/strong&gt; - Describe the current database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;list_tables&lt;/code&gt;&lt;/strong&gt; - List all tables in the database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;describe_table&lt;/code&gt;&lt;/strong&gt; - Describe the structure of a specific table&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;execute_query&lt;/code&gt;&lt;/strong&gt; - Execute read-only SELECT queries&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;insert_data&lt;/code&gt;&lt;/strong&gt; - Insert new data into tables&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;update_data&lt;/code&gt;&lt;/strong&gt; - Update existing data in tables&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;delete_data&lt;/code&gt;&lt;/strong&gt; - Delete data from tables&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;schema_change&lt;/code&gt;&lt;/strong&gt; - Execute schema modification statements (CREATE TABLE, ALTER TABLE, DROP TABLE)&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Once connected, you can ask your AI assistant:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;"Show me all tables in the database"&lt;/li&gt; 
  &lt;li&gt;"What's the schema for the users table?"&lt;/li&gt; 
  &lt;li&gt;"Find all posts with more than 100 upvotes"&lt;/li&gt; 
  &lt;li&gt;"Insert a new user with name 'Alice' and email '&lt;a href="mailto:alice@example.com"&gt;alice@example.com&lt;/a&gt;'"&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;MCP Clients&lt;/h3&gt; 
 &lt;details&gt; 
  &lt;summary&gt;Claude Code&lt;/summary&gt; 
  &lt;p&gt;If you're using &lt;a href="https://claude.ai/code"&gt;Claude Code&lt;/a&gt;, you can easily connect to your Turso MCP server using the built-in MCP management commands:&lt;/p&gt; 
  &lt;h4&gt;Quick Setup&lt;/h4&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add the MCP server&lt;/strong&gt; to Claude Code:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;claude mcp add my-database -- tursodb ./path/to/your/database.db --mcp
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Restart Claude Code&lt;/strong&gt; to activate the connection&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start querying&lt;/strong&gt; your database through natural language!&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;h4&gt;Command Breakdown&lt;/h4&gt; 
  &lt;pre&gt;&lt;code class="language-bash"&gt;claude mcp add my-database -- tursodb ./path/to/your/database.db --mcp
#              ↑            ↑       ↑                           ↑
#              |            |       |                           |
#              Name         |       Database path               MCP flag
#                          Separator
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;my-database&lt;/code&gt;&lt;/strong&gt; - Choose any name for your MCP server&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;--&lt;/code&gt;&lt;/strong&gt; - Required separator between Claude options and your command&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;tursodb&lt;/code&gt;&lt;/strong&gt; - The Turso database CLI&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;./path/to/your/database.db&lt;/code&gt;&lt;/strong&gt; - Path to your SQLite database file&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;--mcp&lt;/code&gt;&lt;/strong&gt; - Enables MCP server mode&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;h4&gt;Example Usage&lt;/h4&gt; 
  &lt;pre&gt;&lt;code class="language-bash"&gt;# For a local project database
cd /your/project
claude mcp add my-project-db -- tursodb ./data/app.db --mcp

# For an absolute path
claude mcp add analytics-db -- tursodb /Users/you/databases/analytics.db --mcp

# For a specific project (local scope)
claude mcp add project-db --local -- tursodb ./database.db --mcp
&lt;/code&gt;&lt;/pre&gt; 
  &lt;h4&gt;Managing MCP Servers&lt;/h4&gt; 
  &lt;pre&gt;&lt;code class="language-bash"&gt;# List all configured MCP servers
claude mcp list

# Get details about a specific server
claude mcp get my-database

# Remove an MCP server
claude mcp remove my-database
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt;Claude Desktop&lt;/summary&gt; 
  &lt;p&gt;For Claude Desktop, add the configuration to your &lt;code&gt;claude_desktop_config.json&lt;/code&gt; file:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "turso": {
      "command": "/path/to/.turso/tursodb",
      "args": ["./path/to/your/database.db.db", "--mcp"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt;Cursor&lt;/summary&gt; 
  &lt;p&gt;For Cursor, configure MCP in your settings:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Open Cursor settings&lt;/li&gt; 
   &lt;li&gt;Navigate to Extensions → MCP&lt;/li&gt; 
   &lt;li&gt;Add a new server with: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: &lt;code&gt;turso&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Command&lt;/strong&gt;: &lt;code&gt;/path/to/.turso/tursodb&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Args&lt;/strong&gt;: &lt;code&gt;["./path/to/your/database.db.db", "--mcp"]&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;p&gt;Alternatively, you can add it to your Cursor configuration file directly.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;h3&gt;Direct JSON-RPC Usage&lt;/h3&gt; 
 &lt;p&gt;The MCP server runs as a single process that handles multiple JSON-RPC requests over stdin/stdout. Here's how to interact with it directly:&lt;/p&gt; 
 &lt;h4&gt;Example with In-Memory Database&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cat &amp;lt;&amp;lt; 'EOF' | tursodb --mcp
{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "client", "version": "1.0"}}}
{"jsonrpc": "2.0", "id": 2, "method": "tools/call", "params": {"name": "schema_change", "arguments": {"query": "CREATE TABLE users (id INTEGER, name TEXT, email TEXT)"}}}
{"jsonrpc": "2.0", "id": 3, "method": "tools/call", "params": {"name": "list_tables", "arguments": {}}}
{"jsonrpc": "2.0", "id": 4, "method": "tools/call", "params": {"name": "insert_data", "arguments": {"query": "INSERT INTO users VALUES (1, 'Alice', 'alice@example.com')"}}}
{"jsonrpc": "2.0", "id": 5, "method": "tools/call", "params": {"name": "execute_query", "arguments": {"query": "SELECT * FROM users"}}}
EOF
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Example with Existing Database&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Working with an existing database file
cat &amp;lt;&amp;lt; 'EOF' | tursodb mydb.db --mcp
{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "client", "version": "1.0"}}}
{"jsonrpc": "2.0", "id": 2, "method": "tools/call", "params": {"name": "list_tables", "arguments": {}}}
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We'd love to have you contribute to Turso Database! Please check out the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Found a data corruption bug? Get up to $1,000.00&lt;/h3&gt; 
&lt;p&gt;SQLite is loved because it is the most reliable database in the world. The next evolution of SQLite has to match or surpass this level of reliability. Turso is built with &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/simulator/"&gt;Deterministic Simulation Testing&lt;/a&gt; from the ground up, and is also tested by &lt;a href="https://antithesis.com"&gt;Antithesis&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Even during Alpha, if you find a bug that leads to a data corruption and demonstrate how our simulator failed to catch it, you can get up to $1,000.00. As the project matures we will increase the size of the prize, and the scope of the bugs.&lt;/p&gt; 
&lt;p&gt;More details &lt;a href="https://turso.algora.io"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can see an example of an awarded case on &lt;a href="https://github.com/tursodatabase/turso/issues/2049"&gt;#2049&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Turso core staff are not eligible.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Is Turso Database ready for production use?&lt;/h3&gt; 
&lt;p&gt;Turso Database is currently under heavy development and is &lt;strong&gt;not&lt;/strong&gt; ready for production use.&lt;/p&gt; 
&lt;h3&gt;How is Turso Database different from Turso's libSQL?&lt;/h3&gt; 
&lt;p&gt;Turso Database is a project to build the next evolution of SQLite in Rust, with a strong open contribution focus and features like native async support, vector search, and more. The libSQL project is also an attempt to evolve SQLite in a similar direction, but through a fork rather than a rewrite.&lt;/p&gt; 
&lt;p&gt;Rewriting SQLite in Rust started as an unassuming experiment, and due to its incredible success, replaces libSQL as our intended direction. At this point, libSQL is production ready, Turso Database is not - although it is evolving rapidly. More details &lt;a href="https://turso.tech/blog/we-will-rewrite-sqlite-and-we-are-going-all-in"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Publications&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pekka Enberg, Sasu Tarkoma, Jon Crowcroft Ashwin Rao (2024). Serverless Runtime / Database Co-Design With Asynchronous I/O. In &lt;em&gt;EdgeSys ‘24&lt;/em&gt;. &lt;a href="https://penberg.org/papers/penberg-edgesys24.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pekka Enberg, Sasu Tarkoma, and Ashwin Rao (2023). Towards Database and Serverless Runtime Co-Design. In &lt;em&gt;CoNEXT-SW ’23&lt;/em&gt;. [&lt;a href="https://penberg.org/papers/penberg-conext-sw-23.pdf"&gt;PDF&lt;/a&gt;] [&lt;a href="https://penberg.org/papers/penberg-conext-sw-23-slides.pdf"&gt;Slides&lt;/a&gt;]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/LICENSE.md"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Turso Database by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;p&gt;Thanks to all the partners of Turso!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://antithesis.com/"&gt;&lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/antithesis.jpg" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://blacksmith.sh"&gt;&lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/blacksmith.svg?sanitize=true" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://nyrkio.com/"&gt;&lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/turso-nyrkio.png" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thanks to all the contributors to Turso Database!&lt;/p&gt; 
&lt;a href="https://github.com/tursodatabase/turso/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=tursodatabase/turso" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>helix-editor/helix</title>
      <link>https://github.com/helix-editor/helix</link>
      <description>&lt;p&gt;A post-modern modal text editor.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="logo_dark.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="logo_light.svg" /&gt; 
   &lt;img alt="Helix" height="128" src="https://raw.githubusercontent.com/helix-editor/helix/master/logo_light.svg?sanitize=true" /&gt; 
  &lt;/picture&gt; &lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://github.com/helix-editor/helix/actions"&gt;&lt;img src="https://github.com/helix-editor/helix/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/helix-editor/helix/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/helix-editor/helix" alt="GitHub Release" /&gt;&lt;/a&gt; &lt;a href="https://docs.helix-editor.com/"&gt;&lt;img src="https://shields.io/badge/-documentation-452859" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://github.com/helix-editor/helix/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/helix-editor/helix" alt="GitHub contributors" /&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/#helix-community:matrix.org"&gt;&lt;img src="https://img.shields.io/matrix/helix-community:matrix.org" alt="Matrix Space" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/helix-editor/helix/master/screenshot.png" alt="Screenshot" /&gt;&lt;/p&gt; 
&lt;p&gt;A &lt;a href="https://github.com/mawww/kakoune"&gt;Kakoune&lt;/a&gt; / &lt;a href="https://github.com/neovim/neovim"&gt;Neovim&lt;/a&gt; inspired editor, written in Rust.&lt;/p&gt; 
&lt;p&gt;The editing model is very heavily based on Kakoune; during development I found myself agreeing with most of Kakoune's design decisions.&lt;/p&gt; 
&lt;p&gt;For more information, see the &lt;a href="https://helix-editor.com"&gt;website&lt;/a&gt; or &lt;a href="https://docs.helix-editor.com/"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All shortcuts/keymaps can be found &lt;a href="https://docs.helix-editor.com/keymap.html"&gt;in the documentation on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/helix-editor/helix/wiki/Troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vim-like modal editing&lt;/li&gt; 
 &lt;li&gt;Multiple selections&lt;/li&gt; 
 &lt;li&gt;Built-in language server support&lt;/li&gt; 
 &lt;li&gt;Smart, incremental syntax highlighting and code editing via tree-sitter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Although it's primarily a terminal-based editor, I am interested in exploring a custom renderer (similar to Emacs) using wgpu or skulpin.&lt;/p&gt; 
&lt;p&gt;Note: Only certain languages have indentation definitions at the moment. Check &lt;code&gt;runtime/queries/&amp;lt;lang&amp;gt;/&lt;/code&gt; for &lt;code&gt;indents.scm&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://docs.helix-editor.com/install.html"&gt;Installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/helix-editor/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/helix-editor.svg?exclude_unsupported=1" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;Contributing guidelines can be found &lt;a href="https://raw.githubusercontent.com/helix-editor/helix/master/docs/CONTRIBUTING.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Your question might already be answered on the &lt;a href="https://github.com/helix-editor/helix/wiki/FAQ"&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Discuss the project on the community &lt;a href="https://matrix.to/#/#helix-community:matrix.org"&gt;Matrix Space&lt;/a&gt; (make sure to join &lt;code&gt;#helix-editor:matrix.org&lt;/code&gt; if you're on a client that doesn't support Matrix Spaces yet).&lt;/p&gt; 
&lt;h1&gt;Credits&lt;/h1&gt; 
&lt;p&gt;Thanks to &lt;a href="https://github.com/jakenvac"&gt;@jakenvac&lt;/a&gt; for designing the logo!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>casey/just</title>
      <link>https://github.com/casey/just</link>
      <description>&lt;p&gt;🤖 Just a command runner&lt;/p&gt;&lt;hr&gt;&lt;div align="right"&gt;
 Table of Contents↗️
&lt;/div&gt; 
&lt;h1 align="center"&gt;&lt;code&gt;just&lt;/code&gt;&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://crates.io/crates/just"&gt; &lt;img src="https://img.shields.io/crates/v/just.svg?sanitize=true" alt="crates.io version" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/casey/just/actions/workflows/ci.yaml"&gt; &lt;img src="https://github.com/casey/just/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="build status" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/casey/just/releases"&gt; &lt;img src="https://img.shields.io/github/downloads/casey/just/total.svg?sanitize=true" alt="downloads" /&gt; &lt;/a&gt; 
 &lt;a href="https://discord.gg/ezYScXR"&gt; &lt;img src="https://img.shields.io/discord/695580069837406228?logo=discord" alt="chat on discord" /&gt; &lt;/a&gt; 
 &lt;a href="mailto:casey@rodarmor.com?subject=Thanks%20for%20Just!"&gt; &lt;img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg?sanitize=true" alt="say thanks" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a handy way to save and run project-specific commands.&lt;/p&gt; 
&lt;p&gt;This readme is also available as a &lt;a href="https://just.systems/man/en/"&gt;book&lt;/a&gt;. The book reflects the latest release, whereas the &lt;a href="https://github.com/casey/just/raw/master/README.md"&gt;readme on GitHub&lt;/a&gt; reflects latest master.&lt;/p&gt; 
&lt;p&gt;(中文文档在 &lt;a href="https://github.com/casey/just/raw/master/README.%E4%B8%AD%E6%96%87.md"&gt;这里&lt;/a&gt;, 快看过来!)&lt;/p&gt; 
&lt;p&gt;Commands, called recipes, are stored in a file called &lt;code&gt;justfile&lt;/code&gt; with syntax inspired by &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/casey/just/master/screenshot.png" alt="screenshot" /&gt;&lt;/p&gt; 
&lt;p&gt;You can then run them with &lt;code&gt;just RECIPE&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test-all
cc *.c -o main
./test --all
Yay, all your tests passed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; has a ton of useful features, and many improvements over &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a command runner, not a build system, so it avoids much of &lt;a href="https://raw.githubusercontent.com/casey/just/master/#what-are-the-idiosyncrasies-of-make-that-just-avoids"&gt;&lt;code&gt;make&lt;/code&gt;'s complexity and idiosyncrasies&lt;/a&gt;. No need for &lt;code&gt;.PHONY&lt;/code&gt; recipes!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Linux, MacOS, Windows, and other reasonable unices are supported with no additional dependencies. (Although if your system doesn't have an &lt;code&gt;sh&lt;/code&gt;, you'll need to &lt;a href="https://raw.githubusercontent.com/casey/just/master/#shell"&gt;choose a different shell&lt;/a&gt;.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Errors are specific and informative, and syntax errors are reported along with their source context.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recipes can accept &lt;a href="https://raw.githubusercontent.com/casey/just/master/#recipe-parameters"&gt;command line arguments&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wherever possible, errors are resolved statically. Unknown recipes and circular dependencies are reported before anything runs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/casey/just/master/#dotenv-settings"&gt;loads &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;, making it easy to populate environment variables.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recipes can be &lt;a href="https://raw.githubusercontent.com/casey/just/master/#listing-available-recipes"&gt;listed from the command line&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Command line completion scripts are &lt;a href="https://raw.githubusercontent.com/casey/just/master/#shell-completion-scripts"&gt;available for most popular shells&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recipes can be written in &lt;a href="https://raw.githubusercontent.com/casey/just/master/#shebang-recipes"&gt;arbitrary languages&lt;/a&gt;, like Python or NodeJS.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; can be invoked from any subdirectory, not just the directory that contains the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;And &lt;a href="https://just.systems/man/en/"&gt;much more&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you need help with &lt;code&gt;just&lt;/code&gt; please feel free to open an issue or ping me on &lt;a href="https://discord.gg/ezYScXR"&gt;Discord&lt;/a&gt;. Feature requests and bug reports are always welcome!&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; should run on any system with a reasonable &lt;code&gt;sh&lt;/code&gt;, including Linux, MacOS, and the BSDs.&lt;/p&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;On Windows, &lt;code&gt;just&lt;/code&gt; works with the &lt;code&gt;sh&lt;/code&gt; provided by &lt;a href="https://git-scm.com"&gt;Git for Windows&lt;/a&gt;, &lt;a href="https://desktop.github.com"&gt;GitHub Desktop&lt;/a&gt;, or &lt;a href="http://www.cygwin.com"&gt;Cygwin&lt;/a&gt;. After installation, &lt;code&gt;sh&lt;/code&gt; must be available in the &lt;code&gt;PATH&lt;/code&gt; of the shell you want to to invoke &lt;code&gt;just&lt;/code&gt; from.&lt;/p&gt; 
&lt;p&gt;If you'd rather not install &lt;code&gt;sh&lt;/code&gt;, you can use the &lt;code&gt;shell&lt;/code&gt; setting to use the shell of your choice.&lt;/p&gt; 
&lt;p&gt;Like PowerShell:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# use PowerShell instead of sh:
set shell := ["powershell.exe", "-c"]

hello:
  Write-Host "Hello, world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;…or &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# use cmd.exe instead of sh:
set shell := ["cmd.exe", "/c"]

list:
  dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also set the shell using command-line arguments. For example, to use PowerShell, launch &lt;code&gt;just&lt;/code&gt; with &lt;code&gt;--shell powershell.exe --shell-arg -c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;(PowerShell is installed by default on Windows 7 SP1 and Windows Server 2008 R2 S1 and later, and &lt;code&gt;cmd.exe&lt;/code&gt; is quite fiddly, so PowerShell is recommended for most Windows users.)&lt;/p&gt; 
&lt;h3&gt;Packages&lt;/h3&gt; 
&lt;h4&gt;Cross-platform&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/alexellis/arkade"&gt;arkade&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;just&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;arkade get just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://asdf-vm.com"&gt;asdf&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/olofvndrhr/asdf-just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;asdf plugin add just&lt;/code&gt;&lt;br /&gt; &lt;code&gt;asdf install just &amp;lt;version&amp;gt;&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.rust-lang.org"&gt;Cargo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cargo install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.conda.io/projects/conda/en/latest/index.html"&gt;Conda&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://anaconda.org/conda-forge/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;conda install -c conda-forge just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://formulae.brew.sh/formula/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;brew install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://nixos.org/nix/"&gt;Nix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/ju/just/package.nix"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/rust-just"&gt;rust-just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;npm install -g rust-just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://pipx.pypa.io/stable/"&gt;pipx&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://pypi.org/project/rust-just/"&gt;rust-just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pipx install rust-just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://snapcraft.io"&gt;Snap&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://snapcraft.io/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;snap install --edge --classic just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;BSD&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operating System&lt;/th&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.freebsd.org"&gt;FreeBSD&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.freebsd.org/doc/handbook/pkgng-intro.html"&gt;pkg&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.freshports.org/deskutils/just/"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pkg install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operating System&lt;/th&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://alpinelinux.org"&gt;Alpine&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management"&gt;apk-tools&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://pkgs.alpinelinux.org/package/edge/community/x86_64/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;apk add just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.archlinux.org"&gt;Arch&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.archlinux.org/title/Pacman"&gt;pacman&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/just/"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pacman -S just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href="https://debian.org"&gt;Debian 13&lt;/a&gt; and &lt;a href="https://ubuntu.com"&gt;Ubuntu 24.04&lt;/a&gt; derivatives&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/APT_(software)"&gt;apt&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://packages.debian.org/trixie/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;apt install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://debian.org"&gt;Debian&lt;/a&gt; and &lt;a href="https://ubuntu.com"&gt;Ubuntu&lt;/a&gt; derivatives&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://mpr.makedeb.org"&gt;MPR&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://mpr.makedeb.org/packages/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;git clone https://mpr.makedeb.org/just&lt;/code&gt;&lt;br /&gt; &lt;code&gt;cd just&lt;/code&gt;&lt;br /&gt; &lt;code&gt;makedeb -si&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://debian.org"&gt;Debian&lt;/a&gt; and &lt;a href="https://ubuntu.com"&gt;Ubuntu&lt;/a&gt; derivatives&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.makedeb.org/prebuilt-mpr"&gt;Prebuilt-MPR&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://mpr.makedeb.org/packages/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;sup&gt;&lt;b&gt;You must have the &lt;a href="https://docs.makedeb.org/prebuilt-mpr/getting-started/#setting-up-the-repository"&gt;Prebuilt-MPR set up&lt;/a&gt; on your system in order to run this command.&lt;/b&gt;&lt;/sup&gt;&lt;br /&gt; &lt;code&gt;apt install just&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://getfedora.org"&gt;Fedora&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://dnf.readthedocs.io/en/latest/"&gt;DNF&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://src.fedoraproject.org/rpms/rust-just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;dnf install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gentoo.org"&gt;Gentoo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.gentoo.org/wiki/Portage"&gt;Portage&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gentoo-mirror/guru/tree/master/dev-build/just"&gt;guru/dev-build/just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;eselect repository enable guru&lt;/code&gt;&lt;br /&gt; &lt;code&gt;emerge --sync guru&lt;/code&gt;&lt;br /&gt; &lt;code&gt;emerge dev-build/just&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://nixos.org/nixos/"&gt;NixOS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://nixos.org/nix/"&gt;Nix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/ju/just/package.nix"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nix-env -iA nixos.just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://opensuse.org"&gt;openSUSE&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://en.opensuse.org/Portal:Zypper"&gt;Zypper&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://build.opensuse.org/package/show/Base:System/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;zypper in just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://getsol.us"&gt;Solus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://getsol.us/articles/package-management/basics/en"&gt;eopkg&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://dev.getsol.us/source/just/"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;eopkg install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://voidlinux.org"&gt;Void&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.voidlinux.org/XBPS"&gt;XBPS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/void-linux/void-packages/raw/master/srcpkgs/just/template"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;xbps-install -S just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/michidk/just-choco"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;choco install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://scoop.sh"&gt;Scoop&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/just.json"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;scoop install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/"&gt;Windows Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/c/Casey/Just"&gt;Casey/Just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;winget install --id Casey.Just --exact&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.macports.org"&gt;MacPorts&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://ports.macports.org/port/just/summary"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;port install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/just.svg?sanitize=true" alt="just package version table" /&gt;&lt;/p&gt; 
&lt;h3&gt;Pre-Built Binaries&lt;/h3&gt; 
&lt;p&gt;Pre-built binaries for Linux, MacOS, and Windows can be found on &lt;a href="https://github.com/casey/just/releases"&gt;the releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can use the following command on Linux, MacOS, or Windows to download the latest release, just replace &lt;code&gt;DEST&lt;/code&gt; with the directory where you'd like to put &lt;code&gt;just&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to DEST
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, to install &lt;code&gt;just&lt;/code&gt; to &lt;code&gt;~/bin&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;# create ~/bin
mkdir -p ~/bin

# download and extract just to ~/bin/just
curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin

# add `~/bin` to the paths that your shell searches for executables
# this line should be added to your shells initialization file,
# e.g. `~/.bashrc` or `~/.zshrc`
export PATH="$PATH:$HOME/bin"

# just should now be executable
just --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;install.sh&lt;/code&gt; may fail on GitHub Actions, or in other environments where many machines share IP addresses. &lt;code&gt;install.sh&lt;/code&gt; calls GitHub APIs in order to determine the latest version of &lt;code&gt;just&lt;/code&gt; to install, and those API calls are rate-limited on a per-IP basis. To make &lt;code&gt;install.sh&lt;/code&gt; more reliable in such circumstances, pass a specific tag to install with &lt;code&gt;--tag&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Another way to avoid rate-limiting is to pass a GitHub authentication token to &lt;code&gt;install.sh&lt;/code&gt; as an environment variable named &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;, allowing it to authenticate its requests.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/casey/just/releases"&gt;Releases&lt;/a&gt; include a &lt;code&gt;SHA256SUM&lt;/code&gt; file which can be used to verify the integrity of pre-built binary archives.&lt;/p&gt; 
&lt;p&gt;To verify a release, download the pre-built binary archive along with the &lt;code&gt;SHA256SUM&lt;/code&gt; file and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;shasum --algorithm 256 --ignore-missing --check SHA256SUMS
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GitHub Actions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can be installed on GitHub Actions in a few ways.&lt;/p&gt; 
&lt;p&gt;Using package managers pre-installed on GitHub Actions runners on MacOS with &lt;code&gt;brew install just&lt;/code&gt;, and on Windows with &lt;code&gt;choco install just&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;With &lt;a href="https://github.com/extractions/setup-just"&gt;extractions/setup-just&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- uses: extractions/setup-just@v3
  with:
    just-version: 1.5.0  # optional semver specification, otherwise latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with &lt;a href="https://github.com/taiki-e/install-action"&gt;taiki-e/install-action&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- uses: taiki-e/install-action@just
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Release RSS Feed&lt;/h3&gt; 
&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS feed&lt;/a&gt; of &lt;code&gt;just&lt;/code&gt; releases is available &lt;a href="https://github.com/casey/just/releases.atom"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Node.js Installation&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://npmjs.com/package/just-install"&gt;just-install&lt;/a&gt; can be used to automate installation of &lt;code&gt;just&lt;/code&gt; in Node.js applications.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a great, more robust alternative to npm scripts. If you want to include &lt;code&gt;just&lt;/code&gt; in the dependencies of a Node.js application, &lt;code&gt;just-install&lt;/code&gt; will install a local, platform-specific binary as part of the &lt;code&gt;npm install&lt;/code&gt; command. This removes the need for every developer to install &lt;code&gt;just&lt;/code&gt; independently using one of the processes mentioned above. After installation, the &lt;code&gt;just&lt;/code&gt; command will work in npm scripts or with npx. It's great for teams who want to make the set up process for their project as easy as possible.&lt;/p&gt; 
&lt;p&gt;For more information, see the &lt;a href="https://github.com/brombal/just-install#readme"&gt;just-install README file&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Backwards Compatibility&lt;/h2&gt; 
&lt;p&gt;With the release of version 1.0, &lt;code&gt;just&lt;/code&gt; features a strong commitment to backwards compatibility and stability.&lt;/p&gt; 
&lt;p&gt;Future releases will not introduce backwards incompatible changes that make existing &lt;code&gt;justfile&lt;/code&gt;s stop working, or break working invocations of the command-line interface.&lt;/p&gt; 
&lt;p&gt;This does not, however, preclude fixing outright bugs, even if doing so might break &lt;code&gt;justfiles&lt;/code&gt; that rely on their behavior.&lt;/p&gt; 
&lt;p&gt;There will never be a &lt;code&gt;just&lt;/code&gt; 2.0. Any desirable backwards-incompatible changes will be opt-in on a per-&lt;code&gt;justfile&lt;/code&gt; basis, so users may migrate at their leisure.&lt;/p&gt; 
&lt;p&gt;Features that aren't yet ready for stabilization are marked as unstable and may be changed or removed at any time. Using unstable features produces an error by default, which can be suppressed with by passing the &lt;code&gt;--unstable&lt;/code&gt; flag, &lt;code&gt;set unstable&lt;/code&gt;, or setting the environment variable &lt;code&gt;JUST_UNSTABLE&lt;/code&gt;, to any value other than &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or the empty string.&lt;/p&gt; 
&lt;h2&gt;Editor Support&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;justfile&lt;/code&gt; syntax is close enough to &lt;code&gt;make&lt;/code&gt; that you may want to tell your editor to use &lt;code&gt;make&lt;/code&gt; syntax highlighting for &lt;code&gt;just&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Vim and Neovim&lt;/h3&gt; 
&lt;p&gt;Vim version 9.1.1042 or better and Neovim version 0.11 or better support Justfile syntax highlighting out of the box, thanks to &lt;a href="https://github.com/pbnj"&gt;pbnj&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;vim-just&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The &lt;a href="https://github.com/NoahTheDuke/vim-just"&gt;vim-just&lt;/a&gt; plugin provides syntax highlighting for &lt;code&gt;justfile&lt;/code&gt;s.&lt;/p&gt; 
&lt;p&gt;Install it with your favorite package manager, like &lt;a href="https://github.com/junegunn/vim-plug"&gt;Plug&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-vim"&gt;call plug#begin()

Plug 'NoahTheDuke/vim-just'

call plug#end()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with Vim's built-in package support:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;mkdir -p ~/.vim/pack/vendor/start
cd ~/.vim/pack/vendor/start
git clone https://github.com/NoahTheDuke/vim-just.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;tree-sitter-just&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://github.com/IndianBoy42/tree-sitter-just"&gt;tree-sitter-just&lt;/a&gt; is an &lt;a href="https://github.com/nvim-treesitter/nvim-treesitter"&gt;Nvim Treesitter&lt;/a&gt; plugin for Neovim.&lt;/p&gt; 
&lt;h4&gt;Makefile Syntax Highlighting&lt;/h4&gt; 
&lt;p&gt;Vim's built-in makefile syntax highlighting isn't perfect for &lt;code&gt;justfile&lt;/code&gt;s, but it's better than nothing. You can put the following in &lt;code&gt;~/.vim/filetype.vim&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-vimscript"&gt;if exists("did_load_filetypes")
  finish
endif

augroup filetypedetect
  au BufNewFile,BufRead justfile setf make
augroup END
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or add the following to an individual &lt;code&gt;justfile&lt;/code&gt; to enable &lt;code&gt;make&lt;/code&gt; mode on a per-file basis:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;# vim: set ft=make :
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Emacs&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/leon-barrett/just-mode.el"&gt;just-mode&lt;/a&gt; provides syntax highlighting and automatic indentation of &lt;code&gt;justfile&lt;/code&gt;s. It is available on &lt;a href="https://melpa.org/"&gt;MELPA&lt;/a&gt; as &lt;a href="https://melpa.org/#/just-mode"&gt;just-mode&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/psibi/justl.el"&gt;justl&lt;/a&gt; provides commands for executing and listing recipes.&lt;/p&gt; 
&lt;p&gt;You can add the following to an individual &lt;code&gt;justfile&lt;/code&gt; to enable &lt;code&gt;make&lt;/code&gt; mode on a per-file basis:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;# Local Variables:
# mode: makefile
# End:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Visual Studio Code&lt;/h3&gt; 
&lt;p&gt;An extension for VS Code is &lt;a href="https://github.com/nefrob/vscode-just"&gt;available here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unmaintained VS Code extensions include &lt;a href="https://github.com/skellock/vscode-just"&gt;skellock/vscode-just&lt;/a&gt; and &lt;a href="https://github.com/sclu1034/vscode-just"&gt;sclu1034/vscode-just&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;JetBrains IDEs&lt;/h3&gt; 
&lt;p&gt;A plugin for JetBrains IDEs by &lt;a href="https://github.com/linux-china"&gt;linux_china&lt;/a&gt; is &lt;a href="https://plugins.jetbrains.com/plugin/18658-just"&gt;available here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Kakoune&lt;/h3&gt; 
&lt;p&gt;Kakoune supports &lt;code&gt;justfile&lt;/code&gt; syntax highlighting out of the box, thanks to TeddyDD.&lt;/p&gt; 
&lt;h3&gt;Helix&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://helix-editor.com/"&gt;Helix&lt;/a&gt; supports &lt;code&gt;justfile&lt;/code&gt; syntax highlighting out-of-the-box since version 23.05.&lt;/p&gt; 
&lt;h3&gt;Sublime Text&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://github.com/nk9/just_sublime"&gt;Just package&lt;/a&gt; by &lt;a href="https://github.com/nk9"&gt;nk9&lt;/a&gt; with &lt;code&gt;just&lt;/code&gt; syntax and some other tools is available on &lt;a href="https://packagecontrol.io/packages/Just"&gt;PackageControl&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Micro&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://micro-editor.github.io/"&gt;Micro&lt;/a&gt; supports Justfile syntax highlighting out of the box, thanks to &lt;a href="https://github.com/tomodachi94"&gt;tomodachi94&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Zed&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://github.com/jackTabsCode/zed-just/"&gt;zed-just&lt;/a&gt; extension by &lt;a href="https://github.com/jackTabsCode"&gt;jackTabsCode&lt;/a&gt; is avilable on the &lt;a href="https://zed.dev/extensions?query=just"&gt;Zed extensions page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Other Editors&lt;/h3&gt; 
&lt;p&gt;Feel free to send me the commands necessary to get syntax highlighting working in your editor of choice so that I may include them here.&lt;/p&gt; 
&lt;h3&gt;Model Context Protocol&lt;/h3&gt; 
&lt;p&gt;&lt;a href="http://github.com/promptexecution/just-mcp"&gt;just-mcp&lt;/a&gt; provides a &lt;a href="https://en.wikipedia.org/wiki/Model_Context_Protocol"&gt;model context protocol&lt;/a&gt; adapter to allow LLMs to query the contents of &lt;code&gt;justfiles&lt;/code&gt; and run recipes.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;See the installation section for how to install &lt;code&gt;just&lt;/code&gt; on your computer. Try running &lt;code&gt;just --version&lt;/code&gt; to make sure that it's installed correctly.&lt;/p&gt; 
&lt;p&gt;For an overview of the syntax, check out &lt;a href="https://cheatography.com/linux-china/cheat-sheets/justfile/"&gt;this cheatsheet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once &lt;code&gt;just&lt;/code&gt; is installed and working, create a file named &lt;code&gt;justfile&lt;/code&gt; in the root of your project with the following contents:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;recipe-name:
  echo 'This is a recipe!'

# this is a comment
another-recipe:
  @echo 'This is another recipe.'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you invoke &lt;code&gt;just&lt;/code&gt; it looks for file &lt;code&gt;justfile&lt;/code&gt; in the current directory and upwards, so you can invoke it from any subdirectory of your project.&lt;/p&gt; 
&lt;p&gt;The search for a &lt;code&gt;justfile&lt;/code&gt; is case insensitive, so any case, like &lt;code&gt;Justfile&lt;/code&gt;, &lt;code&gt;JUSTFILE&lt;/code&gt;, or &lt;code&gt;JuStFiLe&lt;/code&gt;, will work. &lt;code&gt;just&lt;/code&gt; will also look for files with the name &lt;code&gt;.justfile&lt;/code&gt;, in case you'd like to hide a &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Running &lt;code&gt;just&lt;/code&gt; with no arguments runs the first recipe in the &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
echo 'This is a recipe!'
This is a recipe!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One or more arguments specify the recipe(s) to run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just another-recipe
This is another recipe.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; prints each command to standard error before running it, which is why &lt;code&gt;echo 'This is a recipe!'&lt;/code&gt; was printed. This is suppressed for lines starting with &lt;code&gt;@&lt;/code&gt;, which is why &lt;code&gt;echo 'This is another recipe.'&lt;/code&gt; was not printed.&lt;/p&gt; 
&lt;p&gt;Recipes stop running if a command fails. Here &lt;code&gt;cargo publish&lt;/code&gt; will only run if &lt;code&gt;cargo test&lt;/code&gt; succeeds:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;publish:
  cargo test
  # tests passed, time to publish!
  cargo publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes can depend on other recipes. Here the &lt;code&gt;test&lt;/code&gt; recipe depends on the &lt;code&gt;build&lt;/code&gt; recipe, so &lt;code&gt;build&lt;/code&gt; will run before &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cc main.c foo.c bar.c -o main

test: build
  ./test

sloc:
  @echo "`wc -l *.c` lines of code"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test
cc main.c foo.c bar.c -o main
./test
testing… all tests passed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes without dependencies will run in the order they're given on the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build sloc
cc main.c foo.c bar.c -o main
1337 lines of code
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Dependencies will always run first, even if they are passed after a recipe that depends on them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test build
cc main.c foo.c bar.c -o main
./test
testing… all tests passed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes may depend on recipes in submodules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod foo

baz: foo::bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;A variety of &lt;code&gt;justfile&lt;/code&gt;s can be found in the &lt;a href="https://github.com/casey/just/tree/master/examples"&gt;examples directory&lt;/a&gt; and on &lt;a href="https://github.com/search?q=path%3A**%2Fjustfile&amp;amp;type=code"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;The Default Recipe&lt;/h3&gt; 
&lt;p&gt;When &lt;code&gt;just&lt;/code&gt; is invoked without a recipe, it runs the recipe with the &lt;code&gt;[default]&lt;/code&gt; attribute, or the first recipe in the &lt;code&gt;justfile&lt;/code&gt; if no recipe has the &lt;code&gt;[default]&lt;/code&gt; attribute.&lt;/p&gt; 
&lt;p&gt;This recipe might be the most frequently run command in the project, like running the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test:
  cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use dependencies to run multiple recipes by default:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default: lint build test

build:
  echo Building…

test:
  echo Testing…

lint:
  echo Linting…
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If no recipe makes sense as the default recipe, you can add a recipe to the beginning of your &lt;code&gt;justfile&lt;/code&gt; that lists the available recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default:
  just --list
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Listing Available Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes can be listed in alphabetical order with &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    build
    test
    deploy
    lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes in &lt;a href="https://raw.githubusercontent.com/casey/just/master/#modules1190"&gt;submodules&lt;/a&gt; can be listed with &lt;code&gt;just --list PATH&lt;/code&gt;, where &lt;code&gt;PATH&lt;/code&gt; is a space- or &lt;code&gt;::&lt;/code&gt;-separated module path:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cat justfile
mod foo
$ cat foo.just
mod bar
$ cat bar.just
baz:
$ just foo bar
Available recipes:
    baz
$ just foo::bar
Available recipes:
    baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just --summary&lt;/code&gt; is more concise:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --summary
build test deploy lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Pass &lt;code&gt;--unsorted&lt;/code&gt; to print recipes in the order they appear in the &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test:
  echo 'Testing!'

build:
  echo 'Building!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --unsorted
Available recipes:
    test
    build
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --summary --unsorted
test build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you'd like &lt;code&gt;just&lt;/code&gt; to default to listing the recipes in the &lt;code&gt;justfile&lt;/code&gt;, you can use this as your default recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default:
  @just --list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you may need to add &lt;code&gt;--justfile {{justfile()}}&lt;/code&gt; to the line above. Without it, if you executed &lt;code&gt;just -f /some/distant/justfile -d .&lt;/code&gt; or &lt;code&gt;just -f ./non-standard-justfile&lt;/code&gt;, the plain &lt;code&gt;just --list&lt;/code&gt; inside the recipe would not necessarily use the file you provided. It would try to find a justfile in your current path, maybe even resulting in a &lt;code&gt;No justfile found&lt;/code&gt; error.&lt;/p&gt; 
&lt;p&gt;The heading text can be customized with &lt;code&gt;--list-heading&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --list-heading $'Cool stuff…\n'
Cool stuff…
    test
    build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the indentation can be customized with &lt;code&gt;--list-prefix&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --list-prefix ····
Available recipes:
····test
····build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The argument to &lt;code&gt;--list-heading&lt;/code&gt; replaces both the heading and the newline following it, so it should contain a newline if non-empty. It works this way so you can suppress the heading line entirely by passing the empty string:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --list-heading ''
    test
    build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Invoking Multiple Recipes&lt;/h3&gt; 
&lt;p&gt;Multiple recipes may be invoked on the command line at once:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  make web

serve:
  python3 -m http.server -d out 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build serve
make web
python3 -m http.server -d out 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Keep in mind that recipes with parameters will swallow arguments, even if they match the names of other recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build project:
  make {{project}}

serve:
  python3 -m http.server -d out 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build serve
make: *** No rule to make target `serve'.  Stop.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--one&lt;/code&gt; flag can be used to restrict command-line invocations to a single recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --one build serve
error: Expected 1 command-line recipe invocation but found 2.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Working Directory&lt;/h3&gt; 
&lt;p&gt;By default, recipes run with the working directory set to the directory that contains the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;[no-cd]&lt;/code&gt; attribute can be used to make recipes run with the working directory set to directory in which &lt;code&gt;just&lt;/code&gt; was invoked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@foo:
  pwd

[no-cd]
@bar:
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cd subdir
$ just foo
/
$ just bar
/subdir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can override the working directory for all recipes with &lt;code&gt;set working-directory := '…'&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set working-directory := 'bar'

@foo:
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ pwd
/home/bob
$ just foo
/home/bob/bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can override the working directory for a specific recipe with the &lt;code&gt;working-directory&lt;/code&gt; attribute&lt;sup&gt;1.38.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[working-directory: 'bar']
@foo:
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ pwd
/home/bob
$ just foo
/home/bob/bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The argument to the &lt;code&gt;working-directory&lt;/code&gt; setting or &lt;code&gt;working-directory&lt;/code&gt; attribute may be absolute or relative. If it is relative it is interpreted relative to the default working directory.&lt;/p&gt; 
&lt;h3&gt;Aliases&lt;/h3&gt; 
&lt;p&gt;Aliases allow recipes to be invoked on the command line with alternative names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;alias b := build

build:
  echo 'Building!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
echo 'Building!'
Building!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The target of an alias may be a recipe in a submodule:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod foo

alias baz := foo::bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Settings&lt;/h3&gt; 
&lt;p&gt;Settings control interpretation and execution. Each setting may be specified at most once, anywhere in the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["zsh", "-cu"]

foo:
  # this line will be run as `zsh -cu 'ls **/*.txt'`
  ls **/*.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Table of Settings&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;allow-duplicate-recipes&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Allow recipes appearing later in a &lt;code&gt;justfile&lt;/code&gt; to override earlier recipes with the same name.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;allow-duplicate-variables&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Allow variables appearing later in a &lt;code&gt;justfile&lt;/code&gt; to override earlier variables with the same name.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-filename&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file with a custom name, if present.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-load&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file, if present.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-override&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Override existing environment variables with values from the &lt;code&gt;.env&lt;/code&gt; file.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-path&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file from a custom path and error if not present. Overrides &lt;code&gt;dotenv-filename&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-required&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Error if a &lt;code&gt;.env&lt;/code&gt; file isn't found.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;export&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Export all variables as environment variables.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;fallback&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Search &lt;code&gt;justfile&lt;/code&gt; in parent directory if the first recipe on the command line is not found.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ignore-comments&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Ignore recipe lines beginning with &lt;code&gt;#&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;positional-arguments&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pass positional arguments.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;quiet&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Disable echoing recipe lines before executing.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;script-interpreter&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS…]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;['sh', '-eu']&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set command used to invoke recipes with empty &lt;code&gt;[script]&lt;/code&gt; attribute.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS…]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Set command used to invoke recipes and evaluate backticks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;tempdir&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Create temporary directories in &lt;code&gt;tempdir&lt;/code&gt; instead of the system default temporary directory.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;unstable&lt;/code&gt;&lt;sup&gt;1.31.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable unstable features.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;windows-powershell&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use PowerShell on Windows as default shell. (Deprecated. Use &lt;code&gt;windows-shell&lt;/code&gt; instead.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;windows-shell&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS…]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Set the command used to invoke recipes and evaluate backticks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;working-directory&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Set the working directory for recipes and backticks, relative to the default working directory.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Boolean settings can be written as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;set NAME
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which is equivalent to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;set NAME := true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Allow Duplicate Recipes&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;allow-duplicate-recipes&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, defining multiple recipes with the same name is not an error and the last definition is used. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set allow-duplicate-recipes

@foo:
  echo foo

@foo:
  echo bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Allow Duplicate Variables&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;allow-duplicate-variables&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, defining multiple variables with the same name is not an error and the last definition is used. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set allow-duplicate-variables

a := "foo"
a := "bar"

@foo:
  echo {{a}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Dotenv Settings&lt;/h4&gt; 
&lt;p&gt;If any of &lt;code&gt;dotenv-load&lt;/code&gt;, &lt;code&gt;dotenv-filename&lt;/code&gt;, &lt;code&gt;dotenv-override&lt;/code&gt;, &lt;code&gt;dotenv-path&lt;/code&gt;, or &lt;code&gt;dotenv-required&lt;/code&gt; are set, &lt;code&gt;just&lt;/code&gt; will try to load environment variables from a file.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-path&lt;/code&gt; is set, &lt;code&gt;just&lt;/code&gt; will look for a file at the given path, which may be absolute, or relative to the working directory.&lt;/p&gt; 
&lt;p&gt;The command-line option &lt;code&gt;--dotenv-path&lt;/code&gt;, short form &lt;code&gt;-E&lt;/code&gt;, can be used to set or override &lt;code&gt;dotenv-path&lt;/code&gt; at runtime.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-filename&lt;/code&gt; is set &lt;code&gt;just&lt;/code&gt; will look for a file at the given path, relative to the working directory and each of its ancestors.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-filename&lt;/code&gt; is not set, but &lt;code&gt;dotenv-load&lt;/code&gt; or &lt;code&gt;dotenv-required&lt;/code&gt; are set, just will look for a file named &lt;code&gt;.env&lt;/code&gt;, relative to the working directory and each of its ancestors.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;dotenv-filename&lt;/code&gt; and &lt;code&gt;dotenv-path&lt;/code&gt; are similar, but &lt;code&gt;dotenv-path&lt;/code&gt; is only checked relative to the working directory, whereas &lt;code&gt;dotenv-filename&lt;/code&gt; is checked relative to the working directory and each of its ancestors.&lt;/p&gt; 
&lt;p&gt;It is not an error if an environment file is not found, unless &lt;code&gt;dotenv-required&lt;/code&gt; is set.&lt;/p&gt; 
&lt;p&gt;The loaded variables are environment variables, not &lt;code&gt;just&lt;/code&gt; variables, and so must be accessed using &lt;code&gt;$VARIABLE_NAME&lt;/code&gt; in recipes and backticks.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-override&lt;/code&gt; is set, variables from the environment file will override existing environment variables.&lt;/p&gt; 
&lt;p&gt;For example, if your &lt;code&gt;.env&lt;/code&gt; file contains:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;# a comment, will be ignored
DATABASE_ADDRESS=localhost:6379
SERVER_PORT=1337
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And your &lt;code&gt;justfile&lt;/code&gt; contains:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set dotenv-load

serve:
  @echo "Starting server with database $DATABASE_ADDRESS on port $SERVER_PORT…"
  ./server --database $DATABASE_ADDRESS --port $SERVER_PORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just serve&lt;/code&gt; will output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just serve
Starting server with database localhost:6379 on port 1337…
./server --database $DATABASE_ADDRESS --port $SERVER_PORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Export&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;export&lt;/code&gt; setting causes all &lt;code&gt;just&lt;/code&gt; variables to be exported as environment variables. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set export

a := "hello"

@foo b:
  echo $a
  echo $b
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo goodbye
hello
goodbye
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Positional Arguments&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;positional-arguments&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, recipe arguments will be passed as positional arguments to commands. For linewise recipes, argument &lt;code&gt;$0&lt;/code&gt; will be the name of the recipe.&lt;/p&gt; 
&lt;p&gt;For example, running this recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set positional-arguments

@foo bar:
  echo $0
  echo $1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will produce the following output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo hello
foo
hello
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using an &lt;code&gt;sh&lt;/code&gt;-compatible shell, such as &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;$@&lt;/code&gt; expands to the positional arguments given to the recipe, starting from one. When used within double quotes as &lt;code&gt;"$@"&lt;/code&gt;, arguments including whitespace will be passed on as if they were double-quoted. That is, &lt;code&gt;"$@"&lt;/code&gt; is equivalent to &lt;code&gt;"$1" "$2"&lt;/code&gt;… When there are no positional parameters, &lt;code&gt;"$@"&lt;/code&gt; and &lt;code&gt;$@&lt;/code&gt; expand to nothing (i.e., they are removed).&lt;/p&gt; 
&lt;p&gt;This example recipe will print arguments one by one on separate lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set positional-arguments

@test *args='':
  bash -c 'while (( "$#" )); do echo - $1; shift; done' -- "$@"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Running it with &lt;em&gt;two&lt;/em&gt; arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test foo "bar baz"
- foo
- bar baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Positional arguments may also be turned on on a per-recipe basis with the &lt;code&gt;[positional-arguments]&lt;/code&gt; attribute&lt;sup&gt;1.29.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[positional-arguments]
@foo bar:
  echo $0
  echo $1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that PowerShell does not handle positional arguments in the same way as other shells, so turning on positional arguments will likely break recipes that use PowerShell.&lt;/p&gt; 
&lt;p&gt;If using PowerShell 7.4 or better, the &lt;code&gt;-CommandWithArgs&lt;/code&gt; flag will make positional arguments work as expected:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ['pwsh.exe', '-CommandWithArgs']
set positional-arguments

print-args a b c:
  Write-Output @($args[1..($args.Count - 1)])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Shell&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;shell&lt;/code&gt; setting controls the command used to invoke recipe lines and backticks. Shebang recipes are unaffected. The default shell is &lt;code&gt;sh -cu&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# use python3 to execute recipe lines and backticks
set shell := ["python3", "-c"]

# use print to capture result of evaluation
foos := `print("foo" * 4)`

foo:
  print("Snake snake snake snake.")
  print("{{foos}}")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; passes the command to be executed as an argument. Many shells will need an additional flag, often &lt;code&gt;-c&lt;/code&gt;, to make them evaluate the first argument.&lt;/p&gt; 
&lt;h5&gt;Windows Shell&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;sh&lt;/code&gt; on Windows by default. To use a different shell on Windows, use &lt;code&gt;windows-shell&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]

hello:
  Write-Host "Hello, world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://github.com/casey/just/raw/master/examples/powershell.just"&gt;powershell.just&lt;/a&gt; for a justfile that uses PowerShell on all platforms.&lt;/p&gt; 
&lt;h5&gt;Windows PowerShell&lt;/h5&gt; 
&lt;p&gt;&lt;em&gt;&lt;code&gt;set windows-powershell&lt;/code&gt; uses the legacy &lt;code&gt;powershell.exe&lt;/code&gt; binary, and is no longer recommended. See the &lt;code&gt;windows-shell&lt;/code&gt; setting above for a more flexible way to control which shell is used on Windows.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;sh&lt;/code&gt; on Windows by default. To use &lt;code&gt;powershell.exe&lt;/code&gt; instead, set &lt;code&gt;windows-powershell&lt;/code&gt; to true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set windows-powershell := true

hello:
  Write-Host "Hello, world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Python 3&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["python3", "-c"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Bash&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["bash", "-uc"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Z Shell&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["zsh", "-uc"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Fish&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["fish", "-c"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Nushell&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["nu", "-c"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change the default table mode to &lt;code&gt;light&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ['nu', '-m', 'light', '-c']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/nushell/nushell"&gt;Nushell&lt;/a&gt; was written in Rust, and &lt;strong&gt;has cross-platform support for Windows / macOS and Linux&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Documentation Comments&lt;/h3&gt; 
&lt;p&gt;Comments immediately preceding a recipe will appear in &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# build stuff
build:
  ./bin/build

# test stuff
test:
  ./bin/test
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    build # build stuff
    test # test stuff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;[doc]&lt;/code&gt; attribute can be used to set or suppress a recipe's doc comment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# This comment won't appear
[doc('Build stuff')]
build:
  ./bin/build

# This one won't either
[doc]
test:
  ./bin/test
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    build # Build stuff
    test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Expressions and Substitutions&lt;/h3&gt; 
&lt;p&gt;Various operators and function calls are supported in expressions, which may be used in assignments, default recipe arguments, and inside recipe body &lt;code&gt;{{…}}&lt;/code&gt; substitutions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;tmpdir  := `mktemp -d`
version := "0.2.7"
tardir  := tmpdir / "awesomesauce-" + version
tarball := tardir + ".tar.gz"
config  := quote(config_dir() / ".project-config")

publish:
  rm -f {{tarball}}
  mkdir {{tardir}}
  cp README.md *.c {{ config }} {{tardir}}
  tar zcvf {{tarball}} {{tardir}}
  scp {{tarball}} me@server.com:release/
  rm -rf {{tarball}} {{tardir}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Concatenation&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator returns the left-hand argument concatenated with the right-hand argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foobar := 'foo' + 'bar'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Logical Operators&lt;/h4&gt; 
&lt;p&gt;The logical operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; can be used to coalesce string values&lt;sup&gt;1.37.0&lt;/sup&gt;, similar to Python's &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;. These operators consider the empty string &lt;code&gt;''&lt;/code&gt; to be false, and all other strings to be true.&lt;/p&gt; 
&lt;p&gt;These operators are currently unstable.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator returns the empty string if the left-hand argument is the empty string, otherwise it returns the right-hand argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foo := '' &amp;amp;&amp;amp; 'goodbye'      # ''
bar := 'hello' &amp;amp;&amp;amp; 'goodbye' # 'goodbye'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;||&lt;/code&gt; operator returns the left-hand argument if it is non-empty, otherwise it returns the right-hand argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foo := '' || 'goodbye'      # 'goodbye'
bar := 'hello' || 'goodbye' # 'hello'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Joining Paths&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; operator can be used to join two strings with a slash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := "a" / "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --evaluate foo
a/b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that a &lt;code&gt;/&lt;/code&gt; is added even if one is already present:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := "a/"
bar := foo / "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --evaluate bar
a//b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Absolute paths can also be constructed&lt;sup&gt;1.5.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := / "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --evaluate foo
/b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; operator uses the &lt;code&gt;/&lt;/code&gt; character, even on Windows. Thus, using the &lt;code&gt;/&lt;/code&gt; operator should be avoided with paths that use universal naming convention (UNC), i.e., those that start with &lt;code&gt;\?&lt;/code&gt;, since forward slashes are not supported with UNC paths.&lt;/p&gt; 
&lt;h4&gt;Escaping &lt;code&gt;{{&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;To write a recipe containing &lt;code&gt;{{&lt;/code&gt;, use &lt;code&gt;{{{{&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;braces:
  echo 'I {{{{LOVE}} curly braces!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(An unmatched &lt;code&gt;}}&lt;/code&gt; is ignored, so it doesn't need to be escaped.)&lt;/p&gt; 
&lt;p&gt;Another option is to put all the text you'd like to escape inside of an interpolation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;braces:
  echo '{{'I {{LOVE}} curly braces!'}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yet another option is to use &lt;code&gt;{{ "{{" }}&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;braces:
  echo 'I {{ "{{" }}LOVE}} curly braces!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Strings&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;'single'&lt;/code&gt;, &lt;code&gt;"double"&lt;/code&gt;, and &lt;code&gt;'''triple'''&lt;/code&gt; quoted string literals are supported. Unlike in recipe bodies, &lt;code&gt;{{…}}&lt;/code&gt; interpolations are not supported inside strings.&lt;/p&gt; 
&lt;p&gt;Double-quoted strings support escape sequences:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;carriage-return   := "\r"
double-quote      := "\""
newline           := "\n"
no-newline        := "\
"
slash             := "\\"
tab               := "\t"
unicode-codepoint := "\u{1F916}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --evaluate
"arriage-return   := "
double-quote      := """
newline           := "
"
no-newline        := ""
slash             := "\"
tab               := "     "
unicode-codepoint := "🤖"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The unicode character escape sequence &lt;code&gt;\u{…}&lt;/code&gt;&lt;sup&gt;1.36.0&lt;/sup&gt; accepts up to six hex digits.&lt;/p&gt; 
&lt;p&gt;Strings may contain line breaks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;single := '
hello
'

double := "
goodbye
"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Single-quoted strings do not recognize escape sequences:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;escapes := '\t\n\r\"\\'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --evaluate
escapes := "\t\n\r\"\\"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Indented versions of both single- and double-quoted strings, delimited by triple single- or double-quotes, are supported. Indented string lines are stripped of a leading line break, and leading whitespace common to all non-blank lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# this string will evaluate to `foo\nbar\n`
x := '''
  foo
  bar
'''

# this string will evaluate to `abc\n  wuv\nxyz\n`
y := """
  abc
    wuv
  xyz
"""
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Similar to unindented strings, indented double-quoted strings process escape sequences, and indented single-quoted strings ignore escape sequences. Escape sequence processing takes place after unindentation. The unindentation algorithm does not take escape-sequence produced whitespace or newlines into account.&lt;/p&gt; 
&lt;p&gt;Strings prefixed with &lt;code&gt;x&lt;/code&gt; are shell expanded&lt;sup&gt;1.27.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foobar := x'~/$FOO/${BAR}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Replacement&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$VAR&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;${VAR}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;${VAR:-DEFAULT}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;, or &lt;code&gt;DEFAULT&lt;/code&gt; if &lt;code&gt;VAR&lt;/code&gt; is not set&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Leading &lt;code&gt;~&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;path to current user's home directory&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Leading &lt;code&gt;~USER&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;path to &lt;code&gt;USER&lt;/code&gt;'s home directory&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;This expansion is performed at compile time, so variables from &lt;code&gt;.env&lt;/code&gt; files and exported &lt;code&gt;just&lt;/code&gt; variables cannot be used. However, this allows shell expanded strings to be used in places like settings and import paths, which cannot depend on &lt;code&gt;just&lt;/code&gt; variables and &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt; 
&lt;h3&gt;Ignoring Errors&lt;/h3&gt; 
&lt;p&gt;Normally, if a command returns a non-zero exit status, execution will stop. To continue execution after a command, even if it fails, prefix the command with &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  -cat foo
  echo 'Done!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
cat foo
cat: foo: No such file or directory
echo 'Done!'
Done!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Functions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; provides many built-in functions for use in expressions, including recipe body &lt;code&gt;{{…}}&lt;/code&gt; substitutions, assignments, and default parameter values.&lt;/p&gt; 
&lt;p&gt;All functions ending in &lt;code&gt;_directory&lt;/code&gt; can be abbreviated to &lt;code&gt;_dir&lt;/code&gt;. So &lt;code&gt;home_directory()&lt;/code&gt; can also be written as &lt;code&gt;home_dir()&lt;/code&gt;. In addition, &lt;code&gt;invocation_directory_native()&lt;/code&gt; can be abbreviated to &lt;code&gt;invocation_dir_native()&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;System Information&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;arch()&lt;/code&gt; — Instruction set architecture. Possible values are: &lt;code&gt;"aarch64"&lt;/code&gt;, &lt;code&gt;"arm"&lt;/code&gt;, &lt;code&gt;"asmjs"&lt;/code&gt;, &lt;code&gt;"hexagon"&lt;/code&gt;, &lt;code&gt;"mips"&lt;/code&gt;, &lt;code&gt;"msp430"&lt;/code&gt;, &lt;code&gt;"powerpc"&lt;/code&gt;, &lt;code&gt;"powerpc64"&lt;/code&gt;, &lt;code&gt;"s390x"&lt;/code&gt;, &lt;code&gt;"sparc"&lt;/code&gt;, &lt;code&gt;"wasm32"&lt;/code&gt;, &lt;code&gt;"x86"&lt;/code&gt;, &lt;code&gt;"x86_64"&lt;/code&gt;, and &lt;code&gt;"xcore"&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;num_cpus()&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; - Number of logical CPUs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;os()&lt;/code&gt; — Operating system. Possible values are: &lt;code&gt;"android"&lt;/code&gt;, &lt;code&gt;"bitrig"&lt;/code&gt;, &lt;code&gt;"dragonfly"&lt;/code&gt;, &lt;code&gt;"emscripten"&lt;/code&gt;, &lt;code&gt;"freebsd"&lt;/code&gt;, &lt;code&gt;"haiku"&lt;/code&gt;, &lt;code&gt;"ios"&lt;/code&gt;, &lt;code&gt;"linux"&lt;/code&gt;, &lt;code&gt;"macos"&lt;/code&gt;, &lt;code&gt;"netbsd"&lt;/code&gt;, &lt;code&gt;"openbsd"&lt;/code&gt;, &lt;code&gt;"solaris"&lt;/code&gt;, and &lt;code&gt;"windows"&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;os_family()&lt;/code&gt; — Operating system family; possible values are: &lt;code&gt;"unix"&lt;/code&gt; and &lt;code&gt;"windows"&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;system-info:
  @echo "This is an {{arch()}} machine".
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just system-info
This is an x86_64 machine
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;os_family()&lt;/code&gt; function can be used to create cross-platform &lt;code&gt;justfile&lt;/code&gt;s that work on various operating systems. For an example, see &lt;a href="https://github.com/casey/just/raw/master/examples/cross-platform.just"&gt;cross-platform.just&lt;/a&gt; file.&lt;/p&gt; 
&lt;h4&gt;External Commands&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;shell(command, args...)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; returns the standard output of shell script &lt;code&gt;command&lt;/code&gt; with zero or more positional arguments &lt;code&gt;args&lt;/code&gt;. The shell used to interpret &lt;code&gt;command&lt;/code&gt; is the same shell that is used to evaluate recipe lines, and can be changed with &lt;code&gt;set shell := […]&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;command&lt;/code&gt; is passed as the first argument, so if the command is &lt;code&gt;'echo $@'&lt;/code&gt;, the full command line, with the default shell command &lt;code&gt;sh -cu&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; &lt;code&gt;'foo'&lt;/code&gt; and &lt;code&gt;'bar'&lt;/code&gt; will be:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;'sh' '-cu' 'echo $@' 'echo $@' 'foo' 'bar'
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is so that &lt;code&gt;$@&lt;/code&gt; works as expected, and &lt;code&gt;$1&lt;/code&gt; refers to the first argument. &lt;code&gt;$@&lt;/code&gt; does not include the first positional argument, which is expected to be the name of the program being run.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# arguments can be variables or expressions
file := '/sys/class/power_supply/BAT0/status'
bat0stat := shell('cat $1', file)

# commands can be variables or expressions
command := 'wc -l'
output := shell(command + ' "$1"', 'main.c')

# arguments referenced by the shell command must be used
empty := shell('echo', 'foo')
full := shell('echo $1', 'foo')
error := shell('echo $1')
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# Using python as the shell. Since `python -c` sets `sys.argv[0]` to `'-c'`,
# the first "real" positional argument will be `sys.argv[2]`.
set shell := ["python3", "-c"]
olleh := shell('import sys; print(sys.argv[2][::-1])', 'hello')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Environment Variables&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;env(key)&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; — Retrieves the environment variable with name &lt;code&gt;key&lt;/code&gt;, aborting if it is not present.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;home_dir := env('HOME')

test:
  echo "{{home_dir}}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
/home/user1
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;env(key, default)&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; — Retrieves the environment variable with name &lt;code&gt;key&lt;/code&gt;, returning &lt;code&gt;default&lt;/code&gt; if it is not present.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;env_var(key)&lt;/code&gt; — Deprecated alias for &lt;code&gt;env(key)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;env_var_or_default(key, default)&lt;/code&gt; — Deprecated alias for &lt;code&gt;env(key, default)&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A default can be substituted for an empty environment variable value with the &lt;code&gt;||&lt;/code&gt; operator, currently unstable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set unstable

foo := env('FOO') || 'DEFAULT_VALUE'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Executables&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;require(name)&lt;/code&gt;&lt;sup&gt;1.39.0&lt;/sup&gt; — Search directories in the &lt;code&gt;PATH&lt;/code&gt; environment variable for the executable &lt;code&gt;name&lt;/code&gt; and return its full path, or halt with an error if no executable with &lt;code&gt;name&lt;/code&gt; exists.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-just"&gt;bash := require("bash")

@test:
    echo "bash: '{{bash}}'"
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ just
bash: '/bin/bash'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;which(name)&lt;/code&gt;&lt;sup&gt;1.39.0&lt;/sup&gt; — Search directories in the &lt;code&gt;PATH&lt;/code&gt; environment variable for the executable &lt;code&gt;name&lt;/code&gt; and return its full path, or the empty string if no executable with &lt;code&gt;name&lt;/code&gt; exists. Currently unstable.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-just"&gt;set unstable

bosh := which("bosh")

@test:
    echo "bosh: '{{bosh}}'"
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ just
bosh: ''
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Invocation Information&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;is_dependency()&lt;/code&gt; - Returns the string &lt;code&gt;true&lt;/code&gt; if the current recipe is being run as a dependency of another recipe, rather than being run directly, otherwise returns the string &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Invocation Directory&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;invocation_directory()&lt;/code&gt; - Retrieves the absolute path to the current directory when &lt;code&gt;just&lt;/code&gt; was invoked, before &lt;code&gt;just&lt;/code&gt; changed it (chdir'd) prior to executing commands. On Windows, &lt;code&gt;invocation_directory()&lt;/code&gt; uses &lt;code&gt;cygpath&lt;/code&gt; to convert the invocation directory to a Cygwin-compatible &lt;code&gt;/&lt;/code&gt;-separated path. Use &lt;code&gt;invocation_directory_native()&lt;/code&gt; to return the verbatim invocation directory on all platforms.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, to call &lt;code&gt;rustfmt&lt;/code&gt; on files just under the "current directory" (from the user/invoker's perspective), use the following rule:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;rustfmt:
  find {{invocation_directory()}} -name \*.rs -exec rustfmt {} \;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if your command needs to be run from the current directory, you could use (e.g.):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cd {{invocation_directory()}}; ./some_script_that_needs_to_be_run_from_here
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;invocation_directory_native()&lt;/code&gt; - Retrieves the absolute path to the current directory when &lt;code&gt;just&lt;/code&gt; was invoked, before &lt;code&gt;just&lt;/code&gt; changed it (chdir'd) prior to executing commands.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Justfile and Justfile Directory&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;justfile()&lt;/code&gt; - Retrieves the path of the current &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;justfile_directory()&lt;/code&gt; - Retrieves the path of the parent directory of the current &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, to run a command relative to the location of the current &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;script:
  {{justfile_directory()}}/scripts/some_script
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source and Source Directory&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;source_file()&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Retrieves the path of the current source file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;source_directory()&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Retrieves the path of the parent directory of the current source file.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;source_file()&lt;/code&gt; and &lt;code&gt;source_directory()&lt;/code&gt; behave the same as &lt;code&gt;justfile()&lt;/code&gt; and &lt;code&gt;justfile_directory()&lt;/code&gt; in the root &lt;code&gt;justfile&lt;/code&gt;, but will return the path and directory, respectively, of the current &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;mod&lt;/code&gt; source file when called from within an import or submodule.&lt;/p&gt; 
&lt;h4&gt;Just Executable&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;just_executable()&lt;/code&gt; - Absolute path to the &lt;code&gt;just&lt;/code&gt; executable.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;executable:
  @echo The executable is at: {{just_executable()}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
The executable is at: /bin/just
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Just Process ID&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;just_pid()&lt;/code&gt; - Process ID of the &lt;code&gt;just&lt;/code&gt; executable.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;pid:
  @echo The process ID is: {{ just_pid() }}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
The process ID is: 420
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;String Manipulation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;append(suffix, s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; Append &lt;code&gt;suffix&lt;/code&gt; to whitespace-separated strings in &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;append('/src', 'foo bar baz')&lt;/code&gt; → &lt;code&gt;'foo/src bar/src baz/src'&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prepend(prefix, s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; Prepend &lt;code&gt;prefix&lt;/code&gt; to whitespace-separated strings in &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;prepend('src/', 'foo bar baz')&lt;/code&gt; → &lt;code&gt;'src/foo src/bar src/baz'&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encode_uri_component(s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Percent-encode characters in &lt;code&gt;s&lt;/code&gt; except &lt;code&gt;[A-Za-z0-9_.!~*'()-]&lt;/code&gt;, matching the behavior of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"&gt;JavaScript &lt;code&gt;encodeURIComponent&lt;/code&gt; function&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;quote(s)&lt;/code&gt; - Replace all single quotes with &lt;code&gt;'\''&lt;/code&gt; and prepend and append single quotes to &lt;code&gt;s&lt;/code&gt;. This is sufficient to escape special characters for many shells, including most Bourne shell descendants.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replace(s, from, to)&lt;/code&gt; - Replace all occurrences of &lt;code&gt;from&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replace_regex(s, regex, replacement)&lt;/code&gt; - Replace all occurrences of &lt;code&gt;regex&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;replacement&lt;/code&gt;. Regular expressions are provided by the &lt;a href="https://docs.rs/regex/latest/regex/"&gt;Rust &lt;code&gt;regex&lt;/code&gt; crate&lt;/a&gt;. See the &lt;a href="https://docs.rs/regex/latest/regex/#syntax"&gt;syntax documentation&lt;/a&gt; for usage examples. Capture groups are supported. The &lt;code&gt;replacement&lt;/code&gt; string uses &lt;a href="https://docs.rs/regex/latest/regex/struct.Regex.html#replacement-string-syntax"&gt;Replacement string syntax&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim(s)&lt;/code&gt; - Remove leading and trailing whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_end(s)&lt;/code&gt; - Remove trailing whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_end_match(s, substring)&lt;/code&gt; - Remove suffix of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_end_matches(s, substring)&lt;/code&gt; - Repeatedly remove suffixes of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_start(s)&lt;/code&gt; - Remove leading whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_start_match(s, substring)&lt;/code&gt; - Remove prefix of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_start_matches(s, substring)&lt;/code&gt; - Repeatedly remove prefixes of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Case Conversion&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;capitalize(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert first character of &lt;code&gt;s&lt;/code&gt; to uppercase and the rest to lowercase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;kebabcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;kebab-case&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lowercamelcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;lowerCamelCase&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lowercase(s)&lt;/code&gt; - Convert &lt;code&gt;s&lt;/code&gt; to lowercase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;shoutykebabcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;SHOUTY-KEBAB-CASE&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;shoutysnakecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;SHOUTY_SNAKE_CASE&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;snakecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;snake_case&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;titlecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;Title Case&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;uppercamelcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;UpperCamelCase&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;uppercase(s)&lt;/code&gt; - Convert &lt;code&gt;s&lt;/code&gt; to uppercase.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Path Manipulation&lt;/h4&gt; 
&lt;h5&gt;Fallible&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;absolute_path(path)&lt;/code&gt; - Absolute path to relative &lt;code&gt;path&lt;/code&gt; in the working directory. &lt;code&gt;absolute_path("./bar.txt")&lt;/code&gt; in directory &lt;code&gt;/foo&lt;/code&gt; is &lt;code&gt;/foo/bar.txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;canonicalize(path)&lt;/code&gt;&lt;sup&gt;1.24.0&lt;/sup&gt; - Canonicalize &lt;code&gt;path&lt;/code&gt; by resolving symlinks and removing &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt;, and extra &lt;code&gt;/&lt;/code&gt;s where possible.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;extension(path)&lt;/code&gt; - Extension of &lt;code&gt;path&lt;/code&gt;. &lt;code&gt;extension("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;file_name(path)&lt;/code&gt; - File name of &lt;code&gt;path&lt;/code&gt; with any leading directory components removed. &lt;code&gt;file_name("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;bar.txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;file_stem(path)&lt;/code&gt; - File name of &lt;code&gt;path&lt;/code&gt; without extension. &lt;code&gt;file_stem("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;bar&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parent_directory(path)&lt;/code&gt; - Parent directory of &lt;code&gt;path&lt;/code&gt;. &lt;code&gt;parent_directory("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;/foo&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;without_extension(path)&lt;/code&gt; - &lt;code&gt;path&lt;/code&gt; without extension. &lt;code&gt;without_extension("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;/foo/bar&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These functions can fail, for example if a path does not have an extension, which will halt execution.&lt;/p&gt; 
&lt;h5&gt;Infallible&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;clean(path)&lt;/code&gt; - Simplify &lt;code&gt;path&lt;/code&gt; by removing extra path separators, intermediate &lt;code&gt;.&lt;/code&gt; components, and &lt;code&gt;..&lt;/code&gt; where possible. &lt;code&gt;clean("foo//bar")&lt;/code&gt; is &lt;code&gt;foo/bar&lt;/code&gt;, &lt;code&gt;clean("foo/..")&lt;/code&gt; is &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;clean("foo/./bar")&lt;/code&gt; is &lt;code&gt;foo/bar&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;join(a, b…)&lt;/code&gt; - &lt;em&gt;This function uses &lt;code&gt;/&lt;/code&gt; on Unix and &lt;code&gt;\&lt;/code&gt; on Windows, which can be lead to unwanted behavior. The &lt;code&gt;/&lt;/code&gt; operator, e.g., &lt;code&gt;a / b&lt;/code&gt;, which always uses &lt;code&gt;/&lt;/code&gt;, should be considered as a replacement unless &lt;code&gt;\&lt;/code&gt;s are specifically desired on Windows.&lt;/em&gt; Join path &lt;code&gt;a&lt;/code&gt; with path &lt;code&gt;b&lt;/code&gt;. &lt;code&gt;join("foo/bar", "baz")&lt;/code&gt; is &lt;code&gt;foo/bar/baz&lt;/code&gt;. Accepts two or more arguments.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Filesystem Access&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;path_exists(path)&lt;/code&gt; - Returns &lt;code&gt;true&lt;/code&gt; if the path points at an existing entity and &lt;code&gt;false&lt;/code&gt; otherwise. Traverses symbolic links, and returns &lt;code&gt;false&lt;/code&gt; if the path is inaccessible or points to a broken symlink.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;read(path)&lt;/code&gt;&lt;sup&gt;1.39.0&lt;/sup&gt; - Returns the content of file at &lt;code&gt;path&lt;/code&gt; as string.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Error Reporting&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;error(message)&lt;/code&gt; - Abort execution and report error &lt;code&gt;message&lt;/code&gt; to user.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;UUID and Hash Generation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;blake3(string)&lt;/code&gt;&lt;sup&gt;1.25.0&lt;/sup&gt; - Return &lt;a href="https://github.com/BLAKE3-team/BLAKE3/"&gt;BLAKE3&lt;/a&gt; hash of &lt;code&gt;string&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;blake3_file(path)&lt;/code&gt;&lt;sup&gt;1.25.0&lt;/sup&gt; - Return &lt;a href="https://github.com/BLAKE3-team/BLAKE3/"&gt;BLAKE3&lt;/a&gt; hash of file at &lt;code&gt;path&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sha256(string)&lt;/code&gt; - Return the SHA-256 hash of &lt;code&gt;string&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sha256_file(path)&lt;/code&gt; - Return SHA-256 hash of file at &lt;code&gt;path&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;uuid()&lt;/code&gt; - Generate a random version 4 UUID.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Random&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;choose(n, alphabet)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Generate a string of &lt;code&gt;n&lt;/code&gt; randomly selected characters from &lt;code&gt;alphabet&lt;/code&gt;, which may not contain repeated characters. For example, &lt;code&gt;choose('64', HEX)&lt;/code&gt; will generate a random 64-character lowercase hex string.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Datetime&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;datetime(format)&lt;/code&gt;&lt;sup&gt;1.30.0&lt;/sup&gt; - Return local time with &lt;code&gt;format&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datetime_utc(format)&lt;/code&gt;&lt;sup&gt;1.30.0&lt;/sup&gt; - Return UTC time with &lt;code&gt;format&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The arguments to &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;datetime_utc&lt;/code&gt; are &lt;code&gt;strftime&lt;/code&gt;-style format strings, see the &lt;a href="https://docs.rs/chrono/latest/chrono/format/strftime/index.html"&gt;&lt;code&gt;chrono&lt;/code&gt; library docs&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h4&gt;Semantic Versions&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;semver_matches(version, requirement)&lt;/code&gt;&lt;sup&gt;1.16.0&lt;/sup&gt; - Check whether a &lt;a href="https://semver.org"&gt;semantic &lt;code&gt;version&lt;/code&gt;&lt;/a&gt;, e.g., &lt;code&gt;"0.1.0"&lt;/code&gt; matches a &lt;code&gt;requirement&lt;/code&gt;, e.g., &lt;code&gt;"&amp;gt;=0.1.0"&lt;/code&gt;, returning &lt;code&gt;"true"&lt;/code&gt; if so and &lt;code&gt;"false"&lt;/code&gt; otherwise.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Style&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;style(name)&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt; - Return a named terminal display attribute escape sequence used by &lt;code&gt;just&lt;/code&gt;. Unlike terminal display attribute escape sequence constants, which contain standard colors and styles, &lt;code&gt;style(name)&lt;/code&gt; returns an escape sequence used by &lt;code&gt;just&lt;/code&gt; itself, and can be used to make recipe output match &lt;code&gt;just&lt;/code&gt;'s own output.&lt;/p&gt; &lt;p&gt;Recognized values for &lt;code&gt;name&lt;/code&gt; are &lt;code&gt;'command'&lt;/code&gt;, for echoed recipe lines, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;warning&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, to style an error message:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-just"&gt;scary:
  @echo '{{ style("error") }}OH NO{{ NORMAL }}'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;User Directories&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/h5&gt; 
&lt;p&gt;These functions return paths to user-specific directories for things like configuration, data, caches, executables, and the user's home directory.&lt;/p&gt; 
&lt;p&gt;On Unix, these functions follow the &lt;a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;XDG Base Directory Specification&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;On MacOS and Windows, these functions return the system-specified user-specific directories. For example, &lt;code&gt;cache_directory()&lt;/code&gt; returns &lt;code&gt;~/Library/Caches&lt;/code&gt; on MacOS and &lt;code&gt;{FOLDERID_LocalAppData}&lt;/code&gt; on Windows.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://docs.rs/dirs/latest/dirs/index.html"&gt;&lt;code&gt;dirs&lt;/code&gt;&lt;/a&gt; crate for more details.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cache_directory()&lt;/code&gt; - The user-specific cache directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;config_directory()&lt;/code&gt; - The user-specific configuration directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;config_local_directory()&lt;/code&gt; - The local user-specific configuration directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;data_directory()&lt;/code&gt; - The user-specific data directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;data_local_directory()&lt;/code&gt; - The local user-specific data directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;executable_directory()&lt;/code&gt; - The user-specific executable directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;home_directory()&lt;/code&gt; - The user's home directory.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you would like to use XDG base directories on all platforms you can use the &lt;code&gt;env(…)&lt;/code&gt; function with the appropriate environment variable and fallback, although note that the XDG specification requires ignoring non-absolute paths, so for full compatibility with spec-compliant applications, you would need to do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;xdg_config_dir := if env('XDG_CONFIG_HOME', '') =~ '^/' {
  env('XDG_CONFIG_HOME')
} else {
  home_directory() / '.config'
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Constants&lt;/h3&gt; 
&lt;p&gt;A number of constants are predefined:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Value on Windows&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HEX&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"0123456789abcdef"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HEXLOWER&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"0123456789abcdef"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HEXUPPER&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"0123456789ABCDEF"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PATH_SEP&lt;/code&gt;&lt;sup&gt;1.41.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"/"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\"&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PATH_VAR_SEP&lt;/code&gt;&lt;sup&gt;1.41.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;":"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;";"&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CLEAR&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\ec"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NORMAL&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[0m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BOLD&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[1m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ITALIC&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[3m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;UNDERLINE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[4m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;INVERT&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[7m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HIDE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[8m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;STRIKETHROUGH&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[9m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BLACK&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[30m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;RED&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[31m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;GREEN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[32m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;YELLOW&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[33m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BLUE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[34m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MAGENTA&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[35m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CYAN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[36m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;WHITE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[37m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_BLACK&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[40m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_RED&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[41m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_GREEN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[42m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_YELLOW&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[43m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_BLUE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[44m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_MAGENTA&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[45m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_CYAN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[46m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_WHITE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[47m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@foo:
  echo {{HEX}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
0123456789abcdef
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Constants starting with &lt;code&gt;\e&lt;/code&gt; are &lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code"&gt;ANSI escape sequences&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;CLEAR&lt;/code&gt; clears the screen, similar to the &lt;code&gt;clear&lt;/code&gt; command. The rest are of the form &lt;code&gt;\e[Nm&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer, and set terminal display attributes.&lt;/p&gt; 
&lt;p&gt;Terminal display attribute escape sequences can be combined, for example text weight &lt;code&gt;BOLD&lt;/code&gt;, text style &lt;code&gt;STRIKETHROUGH&lt;/code&gt;, foreground color &lt;code&gt;CYAN&lt;/code&gt;, and background color &lt;code&gt;BG_BLUE&lt;/code&gt;. They should be followed by &lt;code&gt;NORMAL&lt;/code&gt;, to reset the terminal back to normal.&lt;/p&gt; 
&lt;p&gt;Escape sequences should be quoted, since &lt;code&gt;[&lt;/code&gt; is treated as a special character by some shells.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@foo:
  echo '{{BOLD + STRIKETHROUGH + CYAN + BG_BLUE}}Hi!{{NORMAL}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Attributes&lt;/h3&gt; 
&lt;p&gt;Recipes, &lt;code&gt;mod&lt;/code&gt; statements, and aliases may be annotated with attributes that change their behavior.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[confirm]&lt;/code&gt;&lt;sup&gt;1.17.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Require confirmation prior to executing recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[confirm(PROMPT)]&lt;/code&gt;&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Require confirmation prior to executing recipe with a custom prompt.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[default]&lt;/code&gt;&lt;sup&gt;1.43.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Use recipe as module's default recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[doc(DOC)]&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;module, recipe&lt;/td&gt; 
   &lt;td&gt;Set recipe or module's &lt;a href="https://raw.githubusercontent.com/casey/just/master/#documentation-comments"&gt;documentation comment&lt;/a&gt; to &lt;code&gt;DOC&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[extension(EXT)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Set shebang recipe script's file extension to &lt;code&gt;EXT&lt;/code&gt;. &lt;code&gt;EXT&lt;/code&gt; should include a period if one is desired.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[group(NAME)]&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;module, recipe&lt;/td&gt; 
   &lt;td&gt;Put recipe or module in in &lt;a href="https://raw.githubusercontent.com/casey/just/master/#groups"&gt;group&lt;/a&gt; &lt;code&gt;NAME&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[linux]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on Linux.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[macos]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on MacOS.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[metadata(METADATA)]&lt;/code&gt;&lt;sup&gt;1.42.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Attach &lt;code&gt;METADATA&lt;/code&gt; to recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[no-cd]&lt;/code&gt;&lt;sup&gt;1.9.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Don't change directory before executing recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[no-exit-message]&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Don't print an error message if recipe fails.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[no-quiet]&lt;/code&gt;&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Override globally quiet recipes and always echo out the recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[openbsd]&lt;/code&gt;&lt;sup&gt;1.38.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on OpenBSD.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[parallel]&lt;/code&gt;&lt;sup&gt;1.42.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Run this recipe's dependencies in parallel.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[positional-arguments]&lt;/code&gt;&lt;sup&gt;1.29.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Turn on &lt;a href="https://raw.githubusercontent.com/casey/just/master/#positional-arguments"&gt;positional arguments&lt;/a&gt; for this recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[private]&lt;/code&gt;&lt;sup&gt;1.10.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;alias, recipe&lt;/td&gt; 
   &lt;td&gt;Make recipe, alias, or variable private. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#private-recipes"&gt;Private Recipes&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[script]&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Execute recipe as script. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#script-recipes"&gt;script recipes&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[script(COMMAND)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Execute recipe as a script interpreted by &lt;code&gt;COMMAND&lt;/code&gt;. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#script-recipes"&gt;script recipes&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[unix]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on Unixes. (Includes MacOS).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[windows]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on Windows.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[working-directory(PATH)]&lt;/code&gt;&lt;sup&gt;1.38.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Set recipe working directory. &lt;code&gt;PATH&lt;/code&gt; may be relative or absolute. If relative, it is interpreted relative to the default working directory.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;A recipe can have multiple attributes, either on multiple lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-cd]
[private]
foo:
    echo "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or separated by commas on a single line&lt;sup&gt;1.14.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-cd, private]
foo:
    echo "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attributes with a single argument may be written with a colon:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[group: 'bar']
foo:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Enabling and Disabling Recipes&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;[linux]&lt;/code&gt;, &lt;code&gt;[macos]&lt;/code&gt;, &lt;code&gt;[unix]&lt;/code&gt;, and &lt;code&gt;[windows]&lt;/code&gt; attributes are configuration attributes. By default, recipes are always enabled. A recipe with one or more configuration attributes will only be enabled when one or more of those configurations is active.&lt;/p&gt; 
&lt;p&gt;This can be used to write &lt;code&gt;justfile&lt;/code&gt;s that behave differently depending on which operating system they run on. The &lt;code&gt;run&lt;/code&gt; recipe in this &lt;code&gt;justfile&lt;/code&gt; will compile and run &lt;code&gt;main.c&lt;/code&gt;, using a different C compiler and using the correct output binary name for that compiler depending on the operating system:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[unix]
run:
  cc main.c
  ./a.out

[windows]
run:
  cl main.c
  main.exe
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Disabling Changing Directory&lt;sup&gt;1.9.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally executes recipes with the current directory set to the directory that contains the &lt;code&gt;justfile&lt;/code&gt;. This can be disabled using the &lt;code&gt;[no-cd]&lt;/code&gt; attribute. This can be used to create recipes which use paths relative to the invocation directory, or which operate on the current directory.&lt;/p&gt; 
&lt;p&gt;For example, this &lt;code&gt;commit&lt;/code&gt; recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-cd]
commit file:
  git add {{file}}
  git commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Can be used with paths that are relative to the current directory, because &lt;code&gt;[no-cd]&lt;/code&gt; prevents &lt;code&gt;just&lt;/code&gt; from changing the current directory when executing &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Requiring Confirmation for Recipes&lt;sup&gt;1.17.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally executes all recipes unless there is an error. The &lt;code&gt;[confirm]&lt;/code&gt; attribute allows recipes require confirmation in the terminal prior to running. This can be overridden by passing &lt;code&gt;--yes&lt;/code&gt; to &lt;code&gt;just&lt;/code&gt;, which will automatically confirm any recipes marked by this attribute.&lt;/p&gt; 
&lt;p&gt;Recipes dependent on a recipe that requires confirmation will not be run if the relied upon recipe is not confirmed, as well as recipes passed after any recipe that requires confirmation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[confirm]
delete-all:
  rm -rf *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Custom Confirmation Prompt&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;The default confirmation prompt can be overridden with &lt;code&gt;[confirm(PROMPT)]&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[confirm("Are you sure you want to delete everything?")]
delete-everything:
  rm -rf *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Groups&lt;/h3&gt; 
&lt;p&gt;Recipes and modules may be annotated with one or more group names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[group('lint')]
js-lint:
    echo 'Running JS linter…'

[group('rust recipes')]
[group('lint')]
rust-lint:
    echo 'Running Rust linter…'

[group('lint')]
cpp-lint:
  echo 'Running C++ linter…'

# not in any group
email-everyone:
    echo 'Sending mass email…'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes are listed by group:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --list
Available recipes:
    email-everyone # not in any group

    [lint]
    cpp-lint
    js-lint
    rust-lint

    [rust recipes]
    rust-lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just --list --unsorted&lt;/code&gt; prints recipes in their justfile order within each group:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --list --unsorted
Available recipes:
    (no group)
    email-everyone # not in any group

    [lint]
    js-lint
    rust-lint
    cpp-lint

    [rust recipes]
    rust-lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Groups can be listed with &lt;code&gt;--groups&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --groups
Recipe groups:
  lint
  rust recipes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use &lt;code&gt;just --groups --unsorted&lt;/code&gt; to print groups in their justfile order.&lt;/p&gt; 
&lt;h3&gt;Command Evaluation Using Backticks&lt;/h3&gt; 
&lt;p&gt;Backticks can be used to store the result of commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;localhost := `dumpinterfaces | cut -d: -f2 | sed 's/\/.*//' | sed 's/ //g'`

serve:
  ./serve {{localhost}} 8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Indented backticks, delimited by three backticks, are de-indented in the same manner as indented strings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# This backtick evaluates the command `echo foo\necho bar\n`, which produces the value `foo\nbar\n`.
stuff := ```
    echo foo
    echo bar
  ```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/casey/just/master/#strings"&gt;Strings&lt;/a&gt; section for details on unindenting.&lt;/p&gt; 
&lt;p&gt;Backticks may not start with &lt;code&gt;#!&lt;/code&gt;. This syntax is reserved for a future upgrade.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/casey/just/master/#external-commands"&gt;&lt;code&gt;shell(…)&lt;/code&gt; function&lt;/a&gt; provides a more general mechanism to invoke external commands, including the ability to execute the contents of a variable as a command, and to pass arguments to a command.&lt;/p&gt; 
&lt;h3&gt;Conditional Expressions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; expressions evaluate different branches depending on if two expressions evaluate to the same value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "2" == "2" { "Good!" } else { "1984" }

bar:
  @echo "{{foo}}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
Good!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also possible to test for inequality:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" != "goodbye" { "xyz" } else { "abc" }

bar:
  @echo {{foo}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
xyz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And match against regular expressions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" =~ 'hel+o' { "match" } else { "mismatch" }

bar:
  @echo {{foo}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
match
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regular expressions are provided by the &lt;a href="https://github.com/rust-lang/regex"&gt;regex crate&lt;/a&gt;, whose syntax is documented on &lt;a href="https://docs.rs/regex/1.5.4/regex/#syntax"&gt;docs.rs&lt;/a&gt;. Since regular expressions commonly use backslash escape sequences, consider using single-quoted string literals, which will pass slashes to the regex parser unmolested.&lt;/p&gt; 
&lt;p&gt;Conditional expressions short-circuit, which means they only evaluate one of their branches. This can be used to make sure that backtick expressions don't run when they shouldn't.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if env_var("RELEASE") == "true" { `get-something-from-release-database` } else { "dummy-value" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Conditionals can be used inside of recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;bar foo:
  echo {{ if foo == "bar" { "hello" } else { "goodbye" } }}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note the space after the final &lt;code&gt;}&lt;/code&gt;! Without the space, the interpolation will be prematurely closed.&lt;/p&gt; 
&lt;p&gt;Multiple conditionals can be chained:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" == "goodbye" {
  "xyz"
} else if "a" == "a" {
  "abc"
} else {
  "123"
}

bar:
  @echo {{foo}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
abc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Stopping execution with error&lt;/h3&gt; 
&lt;p&gt;Execution can be halted with the &lt;code&gt;error&lt;/code&gt; function. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" == "goodbye" {
  "xyz"
} else if "a" == "b" {
  "abc"
} else {
  error("123")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which produce the following error when run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;error: Call to function `error` failed: 123
   |
16 |   error("123")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Setting Variables from the Command Line&lt;/h3&gt; 
&lt;p&gt;Variables can be overridden from the command line.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;os := "linux"

test: build
  ./test --test {{os}}

build:
  ./build {{os}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
./build linux
./test --test linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Any number of arguments of the form &lt;code&gt;NAME=VALUE&lt;/code&gt; can be passed before recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just os=plan9
./build plan9
./test --test plan9
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use the &lt;code&gt;--set&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --set os bsd
./build bsd
./test --test bsd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Getting and Setting Environment Variables&lt;/h3&gt; 
&lt;h4&gt;Exporting &lt;code&gt;just&lt;/code&gt; Variables&lt;/h4&gt; 
&lt;p&gt;Assignments prefixed with the &lt;code&gt;export&lt;/code&gt; keyword will be exported to recipes as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export RUST_BACKTRACE := "1"

test:
  # will print a stack trace if it crashes
  cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters prefixed with a &lt;code&gt;$&lt;/code&gt; will be exported as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test $RUST_BACKTRACE="1":
  # will print a stack trace if it crashes
  cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Exported variables and parameters are not exported to backticks in the same scope.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export WORLD := "world"
# This backtick will fail with "WORLD: unbound variable"
BAR := `echo hello $WORLD`
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# Running `just a foo` will fail with "A: unbound variable"
a $A $B=`echo $A`:
  echo $A $B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;a href="https://raw.githubusercontent.com/casey/just/master/#export"&gt;export&lt;/a&gt; is set, all &lt;code&gt;just&lt;/code&gt; variables are exported as environment variables.&lt;/p&gt; 
&lt;h4&gt;Unexporting Environment Variables&lt;sup&gt;1.29.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;Environment variables can be unexported with the &lt;code&gt;unexport keyword&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;unexport FOO

@foo:
  echo $FOO
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ export FOO=bar
$ just foo
sh: FOO: unbound variable
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Getting Environment Variables from the environment&lt;/h4&gt; 
&lt;p&gt;Environment variables from the environment are passed automatically to the recipes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;print_home_folder:
  echo "HOME is: '${HOME}'"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
HOME is '/home/myuser'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Setting &lt;code&gt;just&lt;/code&gt; Variables from Environment Variables&lt;/h4&gt; 
&lt;p&gt;Environment variables can be propagated to &lt;code&gt;just&lt;/code&gt; variables using the &lt;code&gt;env()&lt;/code&gt; function. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#environment-variables"&gt;environment-variables&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Recipe Parameters&lt;/h3&gt; 
&lt;p&gt;Recipes may have parameters. Here recipe &lt;code&gt;build&lt;/code&gt; has a parameter called &lt;code&gt;target&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build target:
  @echo 'Building {{target}}…'
  cd {{target}} &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To pass arguments on the command line, put them after the recipe name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build my-awesome-project
Building my-awesome-project…
cd my-awesome-project &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To pass arguments to a dependency, put the dependency in parentheses along with the arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default: (build "main")

build target:
  @echo 'Building {{target}}…'
  cd {{target}} &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variables can also be passed as arguments to dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;target := "main"

_build version:
  @echo 'Building {{version}}…'
  cd {{version}} &amp;amp;&amp;amp; make

build: (_build target)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A command's arguments can be passed to dependency by putting the dependency in parentheses along with the arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build target:
  @echo "Building {{target}}…"

push target: (build target)
  @echo 'Pushing {{target}}…'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters may have default values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default := 'all'

test target tests=default:
  @echo 'Testing {{target}}:{{tests}}…'
  ./test --tests {{tests}} {{target}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters with default values may be omitted:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test server
Testing server:all…
./test --tests all server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or supplied:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test server unit
Testing server:unit…
./test --tests unit server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Default values may be arbitrary expressions, but expressions containing the &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, or &lt;code&gt;/&lt;/code&gt; operators must be parenthesized:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;arch := "wasm"

test triple=(arch + "-unknown-unknown") input=(arch / "input.dat"):
  ./test {{triple}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The last parameter of a recipe may be variadic, indicated with either a &lt;code&gt;+&lt;/code&gt; or a &lt;code&gt;*&lt;/code&gt; before the argument name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;backup +FILES:
  scp {{FILES}} me@server.com:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variadic parameters prefixed with &lt;code&gt;+&lt;/code&gt; accept &lt;em&gt;one or more&lt;/em&gt; arguments and expand to a string containing those arguments separated by spaces:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just backup FAQ.md GRAMMAR.md
scp FAQ.md GRAMMAR.md me@server.com:
FAQ.md                  100% 1831     1.8KB/s   00:00
GRAMMAR.md              100% 1666     1.6KB/s   00:00
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variadic parameters prefixed with &lt;code&gt;*&lt;/code&gt; accept &lt;em&gt;zero or more&lt;/em&gt; arguments and expand to a string containing those arguments separated by spaces, or an empty string if no arguments are present:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;commit MESSAGE *FLAGS:
  git commit {{FLAGS}} -m "{{MESSAGE}}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variadic parameters can be assigned default values. These are overridden by arguments passed on the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test +FLAGS='-q':
  cargo test {{FLAGS}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;{{…}}&lt;/code&gt; substitutions may need to be quoted if they contain spaces. For example, if you have the following recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;search QUERY:
  lynx https://www.google.com/?q={{QUERY}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And you type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just search "cat toupee"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; will run the command &lt;code&gt;lynx https://www.google.com/?q=cat toupee&lt;/code&gt;, which will get parsed by &lt;code&gt;sh&lt;/code&gt; as &lt;code&gt;lynx&lt;/code&gt;, &lt;code&gt;https://www.google.com/?q=cat&lt;/code&gt;, and &lt;code&gt;toupee&lt;/code&gt;, and not the intended &lt;code&gt;lynx&lt;/code&gt; and &lt;code&gt;https://www.google.com/?q=cat toupee&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can fix this by adding quotes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;search QUERY:
  lynx 'https://www.google.com/?q={{QUERY}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters prefixed with a &lt;code&gt;$&lt;/code&gt; will be exported as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo $bar:
  echo $bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;p&gt;Dependencies run before recipes that depend on them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a: b
  @echo A

b:
  @echo B
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just a
B
A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In a given invocation of &lt;code&gt;just&lt;/code&gt;, a recipe with the same arguments will only run once, regardless of how many times it appears in the command-line invocation, or how many times it appears as a dependency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a:
  @echo A

b: a
  @echo B

c: a
  @echo C
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just a a a a a
A
$ just b c
A
B
C
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Multiple recipes may depend on a recipe that performs some kind of setup, and when those recipes run, that setup will only be performed once:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cc main.c

test-foo: build
  ./a.out --test foo

test-bar: build
  ./a.out --test bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just test-foo test-bar
cc main.c
./a.out --test foo
./a.out --test bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes in a given run are only skipped when they receive the same arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cc main.c

test TEST: build
  ./a.out --test {{TEST}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just test foo test bar
cc main.c
./a.out --test foo
./a.out --test bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running Recipes at the End of a Recipe&lt;/h4&gt; 
&lt;p&gt;Normal dependencies of a recipes always run before a recipe starts. That is to say, the dependee always runs before the depender. These dependencies are called "prior dependencies".&lt;/p&gt; 
&lt;p&gt;A recipe can also have subsequent dependencies, which run immediately after the recipe and are introduced with an &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a:
  echo 'A!'

b: a &amp;amp;&amp;amp; c d
  echo 'B!'

c:
  echo 'C!'

d:
  echo 'D!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;…running &lt;em&gt;b&lt;/em&gt; prints:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
echo 'A!'
A!
echo 'B!'
B!
echo 'C!'
C!
echo 'D!'
D!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running Recipes in the Middle of a Recipe&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; doesn't support running recipes in the middle of another recipe, but you can call &lt;code&gt;just&lt;/code&gt; recursively in the middle of a recipe. Given the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a:
  echo 'A!'

b: a
  echo 'B start!'
  just c
  echo 'B end!'

c:
  echo 'C!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;…running &lt;em&gt;b&lt;/em&gt; prints:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
echo 'A!'
A!
echo 'B start!'
B start!
echo 'C!'
C!
echo 'B end!'
B end!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This has limitations, since recipe &lt;code&gt;c&lt;/code&gt; is run with an entirely new invocation of &lt;code&gt;just&lt;/code&gt;: Assignments will be recalculated, dependencies might run twice, and command line arguments will not be propagated to the child &lt;code&gt;just&lt;/code&gt; process.&lt;/p&gt; 
&lt;h3&gt;Shebang Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes that start with &lt;code&gt;#!&lt;/code&gt; are called shebang recipes, and are executed by saving the recipe body to a file and running it. This lets you write recipes in different languages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;polyglot: python js perl sh ruby nu

python:
  #!/usr/bin/env python3
  print('Hello from python!')

js:
  #!/usr/bin/env node
  console.log('Greetings from JavaScript!')

perl:
  #!/usr/bin/env perl
  print "Larry Wall says Hi!\n";

sh:
  #!/usr/bin/env sh
  hello='Yo'
  echo "$hello from a shell script!"

nu:
  #!/usr/bin/env nu
  let hello = 'Hola'
  echo $"($hello) from a nushell script!"

ruby:
  #!/usr/bin/env ruby
  puts "Hello from ruby!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just polyglot
Hello from python!
Greetings from JavaScript!
Larry Wall says Hi!
Yo from a shell script!
Hola from a nushell script!
Hello from ruby!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Unix-like operating systems, including Linux and MacOS, shebang recipes are executed by saving the recipe body to a file in a temporary directory, marking the file as executable, and executing it. The OS then parses the shebang line into a command line and invokes it, including the path to the file. For example, if a recipe starts with &lt;code&gt;#!/usr/bin/env bash&lt;/code&gt;, the final command that the OS runs will be something like &lt;code&gt;/usr/bin/env bash /tmp/PATH_TO_SAVED_RECIPE_BODY&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Shebang line splitting is operating system dependent. When passing a command with arguments, you may need to tell &lt;code&gt;env&lt;/code&gt; to split them explicitly by using the &lt;code&gt;-S&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;run:
  #!/usr/bin/env -S bash -x
  ls
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Windows does not support shebang lines. On Windows, &lt;code&gt;just&lt;/code&gt; splits the shebang line into a command and arguments, saves the recipe body to a file, and invokes the split command and arguments, adding the path to the saved recipe body as the final argument. For example, on Windows, if a recipe starts with &lt;code&gt;#! py&lt;/code&gt;, the final command the OS runs will be something like &lt;code&gt;py C:\Temp\PATH_TO_SAVED_RECIPE_BODY&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Script Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes with a &lt;code&gt;[script(COMMAND)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt; attribute are run as scripts interpreted by &lt;code&gt;COMMAND&lt;/code&gt;. This avoids some of the issues with shebang recipes, such as the use of &lt;code&gt;cygpath&lt;/code&gt; on Windows, the need to use &lt;code&gt;/usr/bin/env&lt;/code&gt;, inconsistencies in shebang line splitting across Unix OSs, and requiring a temporary directory from which files can be executed.&lt;/p&gt; 
&lt;p&gt;Recipes with an empty &lt;code&gt;[script]&lt;/code&gt; attribute are executed with the value of &lt;code&gt;set script-interpreter := […]&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;, defaulting to &lt;code&gt;sh -eu&lt;/code&gt;, and &lt;em&gt;not&lt;/em&gt; the value of &lt;code&gt;set shell&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The body of the recipe is evaluated, written to disk in the temporary directory, and run by passing its path as an argument to &lt;code&gt;COMMAND&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;[script(…)]&lt;/code&gt; attribute is unstable, so you'll need to use &lt;code&gt;set unstable&lt;/code&gt;, set the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable, or pass &lt;code&gt;--unstable&lt;/code&gt; on the command line.&lt;/p&gt; 
&lt;h3&gt;Script and Shebang Recipe Temporary Files&lt;/h3&gt; 
&lt;p&gt;Both script and shebang recipes write the recipe body to a temporary file for execution. Script recipes execute that file by passing it to a command, while shebang recipes execute the file directly. Shebang recipe execution will fail if the filesystem containing the temporary file is mounted with &lt;code&gt;noexec&lt;/code&gt; or is otherwise non-executable.&lt;/p&gt; 
&lt;p&gt;The directory that &lt;code&gt;just&lt;/code&gt; writes temporary files to may be configured in a number of ways, from highest to lowest precedence:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Globally with the &lt;code&gt;--tempdir&lt;/code&gt; command-line option or the &lt;code&gt;JUST_TEMPDIR&lt;/code&gt; environment variable&lt;sup&gt;1.41.0&lt;/sup&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On a per-module basis with the &lt;code&gt;tempdir&lt;/code&gt; setting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Globally on Linux with the &lt;code&gt;XDG_RUNTIME_DIR&lt;/code&gt; environment variable.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Falling back to the directory returned by &lt;a href="https://doc.rust-lang.org/std/env/fn.temp_dir.html"&gt;std::env::temp_dir&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Python Recipes with &lt;code&gt;uv&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; is an excellent cross-platform python project manager, written in Rust.&lt;/p&gt; 
&lt;p&gt;Using the &lt;code&gt;[script]&lt;/code&gt; attribute and &lt;code&gt;script-interpreter&lt;/code&gt; setting, &lt;code&gt;just&lt;/code&gt; can easily be configured to run Python recipes with &lt;code&gt;uv&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set unstable

set script-interpreter := ['uv', 'run', '--script']

[script]
hello:
  print("Hello from Python!")

[script]
goodbye:
  # /// script
  # requires-python = "&amp;gt;=3.11"
  # dependencies=["sh"]
  # ///
  import sh
  print(sh.echo("Goodbye from Python!"), end='')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, a shebang also works:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;hello:
  #!/usr/bin/env -S uv run --script
  print("Hello from Python!")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Safer Bash Shebang Recipes&lt;/h3&gt; 
&lt;p&gt;If you're writing a &lt;code&gt;bash&lt;/code&gt; shebang recipe, consider adding &lt;code&gt;set -euxo pipefail&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  set -euxo pipefail
  hello='Yo'
  echo "$hello from Bash!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It isn't strictly necessary, but &lt;code&gt;set -euxo pipefail&lt;/code&gt; turns on a few useful features that make &lt;code&gt;bash&lt;/code&gt; shebang recipes behave more like normal, linewise &lt;code&gt;just&lt;/code&gt; recipe:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -e&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a command fails.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -u&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a variable is undefined.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -x&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; print each script line before it's run.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -o pipefail&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a command in a pipeline fails. This is &lt;code&gt;bash&lt;/code&gt;-specific, so isn't turned on in normal linewise &lt;code&gt;just&lt;/code&gt; recipes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Together, these avoid a lot of shell scripting gotchas.&lt;/p&gt; 
&lt;h4&gt;Shebang Recipe Execution on Windows&lt;/h4&gt; 
&lt;p&gt;On Windows, shebang interpreter paths containing a &lt;code&gt;/&lt;/code&gt; are translated from Unix-style paths to Windows-style paths using &lt;code&gt;cygpath&lt;/code&gt;, a utility that ships with &lt;a href="http://www.cygwin.com"&gt;Cygwin&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, to execute this recipe on Windows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;echo:
  #!/bin/sh
  echo "Hello!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The interpreter path &lt;code&gt;/bin/sh&lt;/code&gt; will be translated to a Windows-style path using &lt;code&gt;cygpath&lt;/code&gt; before being executed.&lt;/p&gt; 
&lt;p&gt;If the interpreter path does not contain a &lt;code&gt;/&lt;/code&gt; it will be executed without being translated. This is useful if &lt;code&gt;cygpath&lt;/code&gt; is not available, or you wish to pass a Windows-style path to the interpreter.&lt;/p&gt; 
&lt;h3&gt;Setting Variables in a Recipe&lt;/h3&gt; 
&lt;p&gt;Recipe lines are interpreted by the shell, not &lt;code&gt;just&lt;/code&gt;, so it's not possible to set &lt;code&gt;just&lt;/code&gt; variables in the middle of a recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foo:
  x := "hello" # This doesn't work!
  echo {{x}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to use shell variables, but there's another problem. Every recipe line is run by a new shell instance, so variables set in one line won't be set in the next:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  x=hello &amp;amp;&amp;amp; echo $x # This works!
  y=bye
  echo $y            # This doesn't, `y` is undefined here!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The best way to work around this is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  set -euxo pipefail
  x=hello
  echo $x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sharing Environment Variables Between Recipes&lt;/h3&gt; 
&lt;p&gt;Each line of each recipe is executed by a fresh shell, so it is not possible to share environment variables between recipes.&lt;/p&gt; 
&lt;h4&gt;Using Python Virtual Environments&lt;/h4&gt; 
&lt;p&gt;Some tools, like &lt;a href="https://docs.python.org/3/library/venv.html"&gt;Python's venv&lt;/a&gt;, require loading environment variables in order to work, making them challenging to use with &lt;code&gt;just&lt;/code&gt;. As a workaround, you can execute the virtual environment binaries directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;venv:
  [ -d foo ] || python3 -m venv foo

run: venv
  ./foo/bin/python3 main.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Changing the Working Directory in a Recipe&lt;/h3&gt; 
&lt;p&gt;Each recipe line is executed by a new shell, so if you change the working directory on one line, it won't have an effect on later lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  pwd    # This `pwd` will print the same directory…
  cd bar
  pwd    # …as this `pwd`!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are a couple ways around this. One is to call &lt;code&gt;cd&lt;/code&gt; on the same line as the command you want to run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  cd bar &amp;amp;&amp;amp; pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The other is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing, and thus a &lt;code&gt;cd&lt;/code&gt; on one line will affect later lines, just like a shell script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  set -euxo pipefail
  cd bar
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Indentation&lt;/h3&gt; 
&lt;p&gt;Recipe lines can be indented with spaces or tabs, but not a mix of both. All of a recipe's lines must have the same type of indentation, but different recipes in the same &lt;code&gt;justfile&lt;/code&gt; may use different indentation.&lt;/p&gt; 
&lt;p&gt;Each recipe must be indented at least one level from the &lt;code&gt;recipe-name&lt;/code&gt; but after that may be further indented.&lt;/p&gt; 
&lt;p&gt;Here's a justfile with a recipe indented with spaces, represented as &lt;code&gt;·&lt;/code&gt;, and tabs, represented as &lt;code&gt;→&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;set windows-shell := ["pwsh", "-NoLogo", "-NoProfileLoadTime", "-Command"]

set ignore-comments

list-space directory:
··#!pwsh
··foreach ($item in $(Get-ChildItem {{directory}} )) {
····echo $item.Name
··}
··echo ""

# indentation nesting works even when newlines are escaped
list-tab directory:
→ @foreach ($item in $(Get-ChildItem {{directory}} )) { \
→ → echo $item.Name \
→ }
→ @echo ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-pwsh"&gt;PS &amp;gt; just list-space ~
Desktop
Documents
Downloads

PS &amp;gt; just list-tab ~
Desktop
Documents
Downloads
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Multi-Line Constructs&lt;/h3&gt; 
&lt;p&gt;Recipes without an initial shebang are evaluated and run line-by-line, which means that multi-line constructs probably won't do what you want.&lt;/p&gt; 
&lt;p&gt;For example, with the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;conditional:
  if true; then
    echo 'True!'
  fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The extra leading whitespace before the second line of the &lt;code&gt;conditional&lt;/code&gt; recipe will produce a parse error:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just conditional
error: Recipe line has extra leading whitespace
  |
3 |         echo 'True!'
  |     ^^^^^^^^^^^^^^^^
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To work around this, you can write conditionals on one line, escape newlines with slashes, or add a shebang to your recipe. Some examples of multi-line constructs are provided for reference.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;if&lt;/code&gt; statements&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;conditional:
  if true; then echo 'True!'; fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;conditional:
  if true; then \
    echo 'True!'; \
  fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;conditional:
  #!/usr/bin/env sh
  if true; then
    echo 'True!'
  fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;for&lt;/code&gt; loops&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;for:
  for file in `ls .`; do echo $file; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;for:
  for file in `ls .`; do \
    echo $file; \
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;for:
  #!/usr/bin/env sh
  for file in `ls .`; do
    echo $file
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;while&lt;/code&gt; loops&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;while:
  while `server-is-dead`; do ping -c 1 server; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;while:
  while `server-is-dead`; do \
    ping -c 1 server; \
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;while:
  #!/usr/bin/env sh
  while `server-is-dead`; do
    ping -c 1 server
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Outside Recipe Bodies&lt;/h4&gt; 
&lt;p&gt;Parenthesized expressions can span multiple lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;abc := ('a' +
        'b'
         + 'c')

abc2 := (
  'a' +
  'b' +
  'c'
)

foo param=('foo'
      + 'bar'
    ):
  echo {{param}}

bar: (foo
        'Foo'
     )
  echo 'Bar!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lines ending with a backslash continue on to the next line as if the lines were joined by whitespace&lt;sup&gt;1.15.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a := 'foo' + \
     'bar'

foo param1 \
  param2='foo' \
  *varparam='': dep1 \
                (dep2 'foo')
  echo {{param1}} {{param2}} {{varparam}}

dep1: \
    # this comment is not part of the recipe body
  echo 'dep1'

dep2 \
  param:
    echo 'Dependency with parameter {{param}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Backslash line continuations can also be used in interpolations. The line following the backslash must be indented.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;recipe:
  echo '{{ \
  "This interpolation " + \
    "has a lot of text." \
  }}'
  echo 'back to recipe body'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Command-line Options&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; supports a number of useful command-line options for listing, dumping, and debugging recipes and variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
  js
  perl
  polyglot
  python
  ruby
$ just --show perl
perl:
  #!/usr/bin/env perl
  print "Larry Wall says Hi!\n";
$ just --show polyglot
polyglot: python js perl sh ruby
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Setting Command-line Options with Environment Variables&lt;/h4&gt; 
&lt;p&gt;Some command-line options can be set with environment variables&lt;/p&gt; 
&lt;p&gt;For example, unstable features can be enabled either with the &lt;code&gt;--unstable&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --unstable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or by setting the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ export JUST_UNSTABLE=1
$ just
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since environment variables are inherited by child processes, command-line options set with environment variables are inherited by recursive invocations of &lt;code&gt;just&lt;/code&gt;, where as command line options set with arguments are not.&lt;/p&gt; 
&lt;p&gt;Consult &lt;code&gt;just --help&lt;/code&gt; for which options can be set with environment variables.&lt;/p&gt; 
&lt;h3&gt;Private Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes and aliases whose name starts with a &lt;code&gt;_&lt;/code&gt; are omitted from &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test: _test-helper
  ./bin/test

_test-helper:
  ./bin/super-secret-test-helper-stuff
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And from &lt;code&gt;just --summary&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --summary
test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;[private]&lt;/code&gt; attribute&lt;sup&gt;1.10.0&lt;/sup&gt; may also be used to hide recipes or aliases without needing to change the name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[private]
foo:

[private]
alias b := bar

bar:
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is useful for helper recipes which are only meant to be used as dependencies of other recipes.&lt;/p&gt; 
&lt;h3&gt;Quiet Recipes&lt;/h3&gt; 
&lt;p&gt;A recipe name may be prefixed with &lt;code&gt;@&lt;/code&gt; to invert the meaning of &lt;code&gt;@&lt;/code&gt; before each line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@quiet:
  echo hello
  echo goodbye
  @# all done!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now only the lines starting with &lt;code&gt;@&lt;/code&gt; will be echoed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just quiet
hello
goodbye
# all done!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All recipes in a Justfile can be made quiet with &lt;code&gt;set quiet&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set quiet

foo:
  echo "This is quiet"

@foo2:
  echo "This is also quiet"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;[no-quiet]&lt;/code&gt; attribute overrides this setting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set quiet

foo:
  echo "This is quiet"

[no-quiet]
foo2:
  echo "This is not quiet"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Shebang recipes are quiet by default:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  echo 'Foo!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
Foo!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Adding &lt;code&gt;@&lt;/code&gt; to a shebang recipe name makes &lt;code&gt;just&lt;/code&gt; print the recipe before executing it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@bar:
  #!/usr/bin/env bash
  echo 'Bar!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
#!/usr/bin/env bash
echo 'Bar!'
Bar!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally prints error messages when a recipe line fails. These error messages can be suppressed using the &lt;code&gt;[no-exit-message]&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; attribute. You may find this especially useful with a recipe that wraps a tool:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;git *args:
    @git {{args}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just git status
fatal: not a git repository (or any of the parent directories): .git
error: Recipe `git` failed on line 2 with exit code 128
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add the attribute to suppress the exit error message when the tool exits with a non-zero code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-exit-message]
git *args:
    @git {{args}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just git status
fatal: not a git repository (or any of the parent directories): .git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Selecting Recipes to Run With an Interactive Chooser&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;--choose&lt;/code&gt; subcommand makes &lt;code&gt;just&lt;/code&gt; invoke a chooser to select which recipes to run. Choosers should read lines containing recipe names from standard input and print one or more of those names separated by spaces to standard output.&lt;/p&gt; 
&lt;p&gt;Because there is currently no way to run a recipe that requires arguments with &lt;code&gt;--choose&lt;/code&gt;, such recipes will not be given to the chooser. Private recipes and aliases are also skipped.&lt;/p&gt; 
&lt;p&gt;The chooser can be overridden with the &lt;code&gt;--chooser&lt;/code&gt; flag. If &lt;code&gt;--chooser&lt;/code&gt; is not given, then &lt;code&gt;just&lt;/code&gt; first checks if &lt;code&gt;$JUST_CHOOSER&lt;/code&gt; is set. If it isn't, then the chooser defaults to &lt;code&gt;fzf&lt;/code&gt;, a popular fuzzy finder.&lt;/p&gt; 
&lt;p&gt;Arguments can be included in the chooser, i.e. &lt;code&gt;fzf --exact&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The chooser is invoked in the same way as recipe lines. For example, if the chooser is &lt;code&gt;fzf&lt;/code&gt;, it will be invoked with &lt;code&gt;sh -cu 'fzf'&lt;/code&gt;, and if the shell, or the shell arguments are overridden, the chooser invocation will respect those overrides.&lt;/p&gt; 
&lt;p&gt;If you'd like &lt;code&gt;just&lt;/code&gt; to default to selecting recipes with a chooser, you can use this as your default recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default:
  @just --choose
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Invoking &lt;code&gt;justfile&lt;/code&gt;s in Other Directories&lt;/h3&gt; 
&lt;p&gt;If the first argument passed to &lt;code&gt;just&lt;/code&gt; contains a &lt;code&gt;/&lt;/code&gt;, then the following occurs:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The argument is split at the last &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The part before the last &lt;code&gt;/&lt;/code&gt; is treated as a directory. &lt;code&gt;just&lt;/code&gt; will start its search for the &lt;code&gt;justfile&lt;/code&gt; there, instead of in the current directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The part after the last slash is treated as a normal argument, or ignored if it is empty.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This may seem a little strange, but it's useful if you wish to run a command in a &lt;code&gt;justfile&lt;/code&gt; that is in a subdirectory.&lt;/p&gt; 
&lt;p&gt;For example, if you are in a directory which contains a subdirectory named &lt;code&gt;foo&lt;/code&gt;, which contains a &lt;code&gt;justfile&lt;/code&gt; with the recipe &lt;code&gt;build&lt;/code&gt;, which is also the default recipe, the following are all equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ (cd foo &amp;amp;&amp;amp; just build)
$ just foo/build
$ just foo/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Additional recipes after the first are sought in the same &lt;code&gt;justfile&lt;/code&gt;. For example, the following are both equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo/a b
$ (cd foo &amp;amp;&amp;amp; just a b)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And will both invoke recipes &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; in &lt;code&gt;foo/justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Imports&lt;/h3&gt; 
&lt;p&gt;One &lt;code&gt;justfile&lt;/code&gt; can include the contents of another using &lt;code&gt;import&lt;/code&gt; statements.&lt;/p&gt; 
&lt;p&gt;If you have the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;import 'foo/bar.just'

a: b
  @echo A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the following text in &lt;code&gt;foo/bar.just&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;b:
  @echo B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;foo/bar.just&lt;/code&gt; will be included in &lt;code&gt;justfile&lt;/code&gt; and recipe &lt;code&gt;b&lt;/code&gt; will be defined:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
B
$ just a
B
A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;import&lt;/code&gt; path can be absolute or relative to the location of the justfile containing it. A leading &lt;code&gt;~/&lt;/code&gt; in the import path is replaced with the current users home directory.&lt;/p&gt; 
&lt;p&gt;Justfiles are insensitive to order, so included files can reference variables and recipes defined after the &lt;code&gt;import&lt;/code&gt; statement.&lt;/p&gt; 
&lt;p&gt;Imported files can themselves contain &lt;code&gt;import&lt;/code&gt;s, which are processed recursively.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;allow-duplicate-recipes&lt;/code&gt; and &lt;code&gt;allow-duplicate-variables&lt;/code&gt; allow duplicate recipes and variables, respectively, to override each other, instead of producing an error.&lt;/p&gt; 
&lt;p&gt;Within a module, later definitions override earlier definitions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set allow-duplicate-recipes

foo:

foo:
  echo 'yes'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;code&gt;import&lt;/code&gt;s are involved, things unfortunately get much more complicated and hard to explain.&lt;/p&gt; 
&lt;p&gt;Shallower definitions always override deeper definitions, so recipes at the top level will override recipes in imports, and recipes in an import will override recipes in an import which itself imports those recipes.&lt;/p&gt; 
&lt;p&gt;When two duplicate definitions are imported and are at the same depth, the one from the earlier import will override the one from the later import.&lt;/p&gt; 
&lt;p&gt;This is because &lt;code&gt;just&lt;/code&gt; uses a stack when processing imports, pushing imports onto the stack in source-order, and always processing the top of the stack next, so earlier imports are actually handled later by the compiler.&lt;/p&gt; 
&lt;p&gt;This is definitely a bug, but since &lt;code&gt;just&lt;/code&gt; has very strong backwards compatibility guarantees and we take enormous pains not to break anyone's &lt;code&gt;justfile&lt;/code&gt;, we have created issue #2540 to discuss whether or not we can actually fix it.&lt;/p&gt; 
&lt;p&gt;Imports may be made optional by putting a &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;import&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;import? 'foo/bar.just'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Importing the same source file multiple times is not an error&lt;sup&gt;1.37.0&lt;/sup&gt;. This allows importing multiple justfiles, for example &lt;code&gt;foo.just&lt;/code&gt; and &lt;code&gt;bar.just&lt;/code&gt;, which both import a third justfile containing shared recipes, for example &lt;code&gt;baz.just&lt;/code&gt;, without the duplicate import of &lt;code&gt;baz.just&lt;/code&gt; being an error:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# justfile
import 'foo.just'
import 'bar.just'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# foo.just
import 'baz.just'
foo: baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# bar.just
import 'baz.just'
bar: baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# baz
baz:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Modules&lt;sup&gt;1.19.0&lt;/sup&gt;&lt;/h3&gt; 
&lt;p&gt;A &lt;code&gt;justfile&lt;/code&gt; can declare modules using &lt;code&gt;mod&lt;/code&gt; statements.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;mod&lt;/code&gt; statements were stabilized in &lt;code&gt;just&lt;/code&gt;&lt;sup&gt;1.31.0&lt;/sup&gt;. In earlier versions, you'll need to use the &lt;code&gt;--unstable&lt;/code&gt; flag, &lt;code&gt;set unstable&lt;/code&gt;, or set the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable to use them.&lt;/p&gt; 
&lt;p&gt;If you have the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod bar

a:
  @echo A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the following text in &lt;code&gt;bar.just&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;b:
  @echo B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;bar.just&lt;/code&gt; will be included in &lt;code&gt;justfile&lt;/code&gt; as a submodule. Recipes, aliases, and variables defined in one submodule cannot be used in another, and each module uses its own settings.&lt;/p&gt; 
&lt;p&gt;Recipes in submodules can be invoked as subcommands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar b
B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with path syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar::b
B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If a module is named &lt;code&gt;foo&lt;/code&gt;, just will search for the module file in &lt;code&gt;foo.just&lt;/code&gt;, &lt;code&gt;foo/mod.just&lt;/code&gt;, &lt;code&gt;foo/justfile&lt;/code&gt;, and &lt;code&gt;foo/.justfile&lt;/code&gt;. In the latter two cases, the module file may have any capitalization.&lt;/p&gt; 
&lt;p&gt;Module statements may be of the form:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod foo 'PATH'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which loads the module's source file from &lt;code&gt;PATH&lt;/code&gt;, instead of from the usual locations. A leading &lt;code&gt;~/&lt;/code&gt; in &lt;code&gt;PATH&lt;/code&gt; is replaced with the current user's home directory. &lt;code&gt;PATH&lt;/code&gt; may point to the module source file itself, or to a directory containing the module source file with the name &lt;code&gt;mod.just&lt;/code&gt;, &lt;code&gt;justfile&lt;/code&gt;, or &lt;code&gt;.justfile&lt;/code&gt;. In the latter two cases, the module file may have any capitalization.&lt;/p&gt; 
&lt;p&gt;Environment files are only loaded for the root justfile, and loaded environment variables are available in submodules. Settings in submodules that affect environment file loading are ignored.&lt;/p&gt; 
&lt;p&gt;Recipes in submodules without the &lt;code&gt;[no-cd]&lt;/code&gt; attribute run with the working directory set to the directory containing the submodule source file.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;justfile()&lt;/code&gt; and &lt;code&gt;justfile_directory()&lt;/code&gt; always return the path to the root justfile and the directory that contains it, even when called from submodule recipes.&lt;/p&gt; 
&lt;p&gt;Modules may be made optional by putting a &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;mod&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;mod? foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Missing source files for optional modules do not produce an error.&lt;/p&gt; 
&lt;p&gt;Optional modules with no source file do not conflict, so you can have multiple mod statements with the same name, but with different source file paths, as long as at most one source file exists:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;mod? foo 'bar.just'
mod? foo 'baz.just'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Modules may be given doc comments which appear in &lt;code&gt;--list&lt;/code&gt; output&lt;sup&gt;1.30.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# foo is a great module!
mod foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    foo ... # foo is a great module!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Modules are still missing a lot of features, for example, the ability to refer to variables in other modules. See the &lt;a href="https://github.com/casey/just/issues/2252"&gt;module improvement tracking issue&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Hiding &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; looks for &lt;code&gt;justfile&lt;/code&gt;s named &lt;code&gt;justfile&lt;/code&gt; and &lt;code&gt;.justfile&lt;/code&gt;, which can be used to keep a &lt;code&gt;justfile&lt;/code&gt; hidden.&lt;/p&gt; 
&lt;h3&gt;Just Scripts&lt;/h3&gt; 
&lt;p&gt;By adding a shebang line to the top of a &lt;code&gt;justfile&lt;/code&gt; and making it executable, &lt;code&gt;just&lt;/code&gt; can be used as an interpreter for scripts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cat &amp;gt; script &amp;lt;&amp;lt;EOF
#!/usr/bin/env just --justfile

foo:
  echo foo
EOF
$ chmod +x script
$ ./script foo
echo foo
foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When a script with a shebang is executed, the system supplies the path to the script as an argument to the command in the shebang. So, with a shebang of &lt;code&gt;#!/usr/bin/env just --justfile&lt;/code&gt;, the command will be &lt;code&gt;/usr/bin/env just --justfile PATH_TO_SCRIPT&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;With the above shebang, &lt;code&gt;just&lt;/code&gt; will change its working directory to the location of the script. If you'd rather leave the working directory unchanged, use &lt;code&gt;#!/usr/bin/env just --working-directory . --justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note: Shebang line splitting is not consistent across operating systems. The previous examples have only been tested on macOS. On Linux, you may need to pass the &lt;code&gt;-S&lt;/code&gt; flag to &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;#!/usr/bin/env -S just --justfile

default:
  echo foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Formatting and dumping &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;Each &lt;code&gt;justfile&lt;/code&gt; has a canonical formatting with respect to whitespace and newlines.&lt;/p&gt; 
&lt;p&gt;You can overwrite the current justfile with a canonically-formatted version using the currently-unstable &lt;code&gt;--fmt&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cat justfile
# A lot of blank lines





some-recipe:
  echo "foo"
$ just --fmt --unstable
$ cat justfile
# A lot of blank lines

some-recipe:
    echo "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Invoking &lt;code&gt;just --fmt --check --unstable&lt;/code&gt; runs &lt;code&gt;--fmt&lt;/code&gt; in check mode. Instead of overwriting the &lt;code&gt;justfile&lt;/code&gt;, &lt;code&gt;just&lt;/code&gt; will exit with an exit code of 0 if it is formatted correctly, and will exit with 1 and print a diff if it is not.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;code&gt;--dump&lt;/code&gt; command to output a formatted version of the &lt;code&gt;justfile&lt;/code&gt; to stdout:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --dump &amp;gt; formatted-justfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--dump&lt;/code&gt; command can be used with &lt;code&gt;--dump-format json&lt;/code&gt; to print a JSON representation of a &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Fallback to parent &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;If a recipe is not found in a &lt;code&gt;justfile&lt;/code&gt; and the &lt;code&gt;fallback&lt;/code&gt; setting is set, &lt;code&gt;just&lt;/code&gt; will look for &lt;code&gt;justfile&lt;/code&gt;s in the parent directory and up, until it reaches the root directory. &lt;code&gt;just&lt;/code&gt; will stop after it reaches a &lt;code&gt;justfile&lt;/code&gt; in which the &lt;code&gt;fallback&lt;/code&gt; setting is &lt;code&gt;false&lt;/code&gt; or unset.&lt;/p&gt; 
&lt;p&gt;As an example, suppose the current directory contains this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set fallback
foo:
  echo foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the parent directory contains this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;bar:
  echo bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
Trying ../justfile
echo bar
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Avoiding Argument Splitting&lt;/h3&gt; 
&lt;p&gt;Given this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo argument:
  touch {{argument}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following command will create two files, &lt;code&gt;some&lt;/code&gt; and &lt;code&gt;argument.txt&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo "some argument.txt"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The user's shell will parse &lt;code&gt;"some argument.txt"&lt;/code&gt; as a single argument, but when &lt;code&gt;just&lt;/code&gt; replaces &lt;code&gt;touch {{argument}}&lt;/code&gt; with &lt;code&gt;touch some argument.txt&lt;/code&gt;, the quotes are not preserved, and &lt;code&gt;touch&lt;/code&gt; will receive two arguments.&lt;/p&gt; 
&lt;p&gt;There are a few ways to avoid this: quoting, positional arguments, and exported arguments.&lt;/p&gt; 
&lt;h4&gt;Quoting&lt;/h4&gt; 
&lt;p&gt;Quotes can be added around the &lt;code&gt;{{argument}}&lt;/code&gt; interpolation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo argument:
  touch '{{argument}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This preserves &lt;code&gt;just&lt;/code&gt;'s ability to catch variable name typos before running, for example if you were to write &lt;code&gt;{{argument}}&lt;/code&gt;, but will not do what you want if the value of &lt;code&gt;argument&lt;/code&gt; contains single quotes.&lt;/p&gt; 
&lt;h4&gt;Positional Arguments&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;positional-arguments&lt;/code&gt; setting causes all arguments to be passed as positional arguments, allowing them to be accessed with &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, …, and &lt;code&gt;$@&lt;/code&gt;, which can be then double-quoted to avoid further splitting by the shell:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set positional-arguments

foo argument:
  touch "$1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This defeats &lt;code&gt;just&lt;/code&gt;'s ability to catch typos, for example if you type &lt;code&gt;$2&lt;/code&gt; instead of &lt;code&gt;$1&lt;/code&gt;, but works for all possible values of &lt;code&gt;argument&lt;/code&gt;, including those with double quotes.&lt;/p&gt; 
&lt;h4&gt;Exported Arguments&lt;/h4&gt; 
&lt;p&gt;All arguments are exported when the &lt;code&gt;export&lt;/code&gt; setting is set:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set export

foo argument:
  touch "$argument"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or individual arguments may be exported by prefixing them with &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo $argument:
  touch "$argument"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This defeats &lt;code&gt;just&lt;/code&gt;'s ability to catch typos, for example if you type &lt;code&gt;$argument&lt;/code&gt;, but works for all possible values of &lt;code&gt;argument&lt;/code&gt;, including those with double quotes.&lt;/p&gt; 
&lt;h3&gt;Configuring the Shell&lt;/h3&gt; 
&lt;p&gt;There are a number of ways to configure the shell for linewise recipes, which are the default when a recipe does not start with a &lt;code&gt;#!&lt;/code&gt; shebang. Their precedence, from highest to lowest, is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The &lt;code&gt;--shell&lt;/code&gt; and &lt;code&gt;--shell-arg&lt;/code&gt; command line options. Passing either of these will cause &lt;code&gt;just&lt;/code&gt; to ignore any settings in the current justfile.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set windows-shell := [...]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set windows-powershell&lt;/code&gt; (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set shell := [...]&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Since &lt;code&gt;set windows-shell&lt;/code&gt; has higher precedence than &lt;code&gt;set shell&lt;/code&gt;, you can use &lt;code&gt;set windows-shell&lt;/code&gt; to pick a shell on Windows, and &lt;code&gt;set shell&lt;/code&gt; to pick a shell for all other platforms.&lt;/p&gt; 
&lt;h3&gt;Timestamps&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can print timestamps before each recipe commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;recipe:
  echo one
  sleep 2
  echo two
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --timestamp recipe
[07:28:46] echo one
one
[07:28:46] sleep 2
[07:28:48] echo two
two
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, timestamps are formatted as &lt;code&gt;HH:MM:SS&lt;/code&gt;. The format can be changed with &lt;code&gt;--timestamp-format&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --timestamp recipe --timestamp-format '%H:%M:%S%.3f %Z'
[07:32:11:.349 UTC] echo one
one
[07:32:11:.350 UTC] sleep 2
[07:32:13:.352 UTC] echo two
two
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The argument to &lt;code&gt;--timestamp-format&lt;/code&gt; is a &lt;code&gt;strftime&lt;/code&gt;-style format string, see the &lt;a href="https://docs.rs/chrono/latest/chrono/format/strftime/index.html"&gt;&lt;code&gt;chrono&lt;/code&gt; library docs&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Signal Handling&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Signal_(IPC)"&gt;Signals&lt;/a&gt; are messsages sent to running programs to trigger specific behavior. For example, &lt;code&gt;SIGINT&lt;/code&gt; is sent to all processes in the terminal forground process group when &lt;code&gt;CTRL-C&lt;/code&gt; is pressed.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; tries to exit when requested by a signal, but it also tries to avoid leaving behind running child proccesses, two goals which are somewhat in conflict.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;just&lt;/code&gt; exits leaving behind child processes, the user will have no recourse but to &lt;code&gt;ps aux | grep&lt;/code&gt; for the children and manually &lt;code&gt;kill&lt;/code&gt; them, a tedious endevour.&lt;/p&gt; 
&lt;h4&gt;Fatal Signals&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;SIGHUP&lt;/code&gt;, &lt;code&gt;SIGINT&lt;/code&gt;, and &lt;code&gt;SIGQUIT&lt;/code&gt; are generated when the user closes the terminal, types &lt;code&gt;ctrl-c&lt;/code&gt;, or types &lt;code&gt;ctrl-\&lt;/code&gt;, respectively, and are sent to all processes in the foreground process group.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;SIGTERM&lt;/code&gt; is the default signal sent by the &lt;code&gt;kill&lt;/code&gt; command, and is delivered only to its intended victim.&lt;/p&gt; 
&lt;p&gt;When a child process is not running, &lt;code&gt;just&lt;/code&gt; will exit immediately on receipt of any of the above signals.&lt;/p&gt; 
&lt;p&gt;When a child process &lt;em&gt;is&lt;/em&gt; running, &lt;code&gt;just&lt;/code&gt; will wait until it terminates, to avoid leaving it behind.&lt;/p&gt; 
&lt;p&gt;Additionally, on receipt of &lt;code&gt;SIGTERM&lt;/code&gt;, &lt;code&gt;just&lt;/code&gt; will forward &lt;code&gt;SIGTERM&lt;/code&gt; to any running children&lt;sup&gt;1.41.0&lt;/sup&gt;, since unlike other fatal signals, &lt;code&gt;SIGTERM&lt;/code&gt;, was likely sent to &lt;code&gt;just&lt;/code&gt; alone.&lt;/p&gt; 
&lt;p&gt;Regardless of whether a child process terminates successfully after &lt;code&gt;just&lt;/code&gt; receives a fatal signal, &lt;code&gt;just&lt;/code&gt; halts execution.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;SIGINFO&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;SIGINFO&lt;/code&gt; is sent to all processes in the foreground process group when the user types &lt;code&gt;ctrl-t&lt;/code&gt; on &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;BSD&lt;/a&gt;-derived operating systems, including MacOS, but not Linux.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; responds by printing a list of all child process IDs and commands&lt;sup&gt;1.41.0&lt;/sup&gt;.&lt;/p&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;On Windows, &lt;code&gt;just&lt;/code&gt; behaves as if it had received &lt;code&gt;SIGINT&lt;/code&gt; when the user types &lt;code&gt;ctrl-c&lt;/code&gt;. Other signals are unsupported.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;A changelog for the latest release is available in &lt;a href="https://raw.githubusercontent.com/casey/just/master/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt;. Changelogs for previous releases are available on &lt;a href="https://github.com/casey/just/releases"&gt;the releases page&lt;/a&gt;. &lt;code&gt;just --changelog&lt;/code&gt; can also be used to make a &lt;code&gt;just&lt;/code&gt; binary print its changelog.&lt;/p&gt; 
&lt;h2&gt;Miscellanea&lt;/h2&gt; 
&lt;h3&gt;Re-running recipes when files change&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/mattgreen/watchexec"&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; can re-run any command when files change.&lt;/p&gt; 
&lt;p&gt;To re-run the recipe &lt;code&gt;foo&lt;/code&gt; when any file changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;watchexec just foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;code&gt;watchexec --help&lt;/code&gt; for more info, including how to specify which files should be watched for changes.&lt;/p&gt; 
&lt;h3&gt;Parallelism&lt;/h3&gt; 
&lt;p&gt;Dependencies may be run in parallel with the &lt;code&gt;[parallel]&lt;/code&gt; attribute.&lt;/p&gt; 
&lt;p&gt;In this &lt;code&gt;justfile&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;baz&lt;/code&gt; will execute in parallel when &lt;code&gt;main&lt;/code&gt; is run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[parallel]
main: foo bar baz

foo:
  sleep 1

bar:
  sleep 1

baz:
  sleep 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GNU &lt;code&gt;parallel&lt;/code&gt; may be used to run recipe lines concurrently:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;parallel:
  #!/usr/bin/env -S parallel --shebang --ungroup --jobs {{ num_cpus() }}
  echo task 1 start; sleep 3; echo task 1 done
  echo task 2 start; sleep 3; echo task 2 done
  echo task 3 start; sleep 3; echo task 3 done
  echo task 4 start; sleep 3; echo task 4 done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Shell Alias&lt;/h3&gt; 
&lt;p&gt;For lightning-fast command running, put &lt;code&gt;alias j=just&lt;/code&gt; in your shell's configuration file.&lt;/p&gt; 
&lt;p&gt;In &lt;code&gt;bash&lt;/code&gt;, the aliased command may not keep the shell completion functionality described in the next section. Add the following line to your &lt;code&gt;.bashrc&lt;/code&gt; to use the same completion function as &lt;code&gt;just&lt;/code&gt; for your aliased command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;complete -F _just -o bashdefault -o default j
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Shell Completion Scripts&lt;/h3&gt; 
&lt;p&gt;Shell completion scripts for Bash, Elvish, Fish, Nushell, PowerShell, and Zsh are available &lt;a href="https://github.com/casey/just/releases"&gt;release archives&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;just&lt;/code&gt; binary can also generate the same completion scripts at runtime using &lt;code&gt;just --completions SHELL&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --completions zsh &amp;gt; just.zsh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please refer to your shell's documentation for how to install them.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;macOS Note:&lt;/em&gt; Recent versions of macOS use zsh as the default shell. If you use Homebrew to install &lt;code&gt;just&lt;/code&gt;, it will automatically install the most recent copy of the zsh completion script in the Homebrew zsh directory, which the built-in version of zsh doesn't know about by default. It's best to use this copy of the script if possible, since it will be updated whenever you update &lt;code&gt;just&lt;/code&gt; via Homebrew. Also, many other Homebrew packages use the same location for completion scripts, and the built-in zsh doesn't know about those either. To take advantage of &lt;code&gt;just&lt;/code&gt; completion in zsh in this scenario, you can set &lt;code&gt;fpath&lt;/code&gt; to the Homebrew location before calling &lt;code&gt;compinit&lt;/code&gt;. Note also that Oh My Zsh runs &lt;code&gt;compinit&lt;/code&gt; by default. So your &lt;code&gt;.zshrc&lt;/code&gt; file could look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;# Init Homebrew, which adds environment variables
eval "$(brew shellenv)"

fpath=($HOMEBREW_PREFIX/share/zsh/site-functions $fpath)

# Then choose one of these options:
# 1. If you're using Oh My Zsh, you can initialize it here
# source $ZSH/oh-my-zsh.sh

# 2. Otherwise, run compinit yourself
# autoload -U compinit
# compinit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Man Page&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can print its own man page with &lt;code&gt;just --man&lt;/code&gt;. Man pages are written in &lt;a href="https://en.wikipedia.org/wiki/Roff_%28software%29"&gt;&lt;code&gt;roff&lt;/code&gt;&lt;/a&gt;, a venerable markup language and one of the first practical applications of Unix. If you have &lt;a href="https://www.gnu.org/software/groff/"&gt;&lt;code&gt;groff&lt;/code&gt;&lt;/a&gt; installed you can view the man page with &lt;code&gt;just --man | groff -mandoc -Tascii | less&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Grammar&lt;/h3&gt; 
&lt;p&gt;A non-normative grammar of &lt;code&gt;justfile&lt;/code&gt;s can be found in &lt;a href="https://github.com/casey/just/raw/master/GRAMMAR.md"&gt;GRAMMAR.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;just.sh&lt;/h3&gt; 
&lt;p&gt;Before &lt;code&gt;just&lt;/code&gt; was a fancy Rust program it was a tiny shell script that called &lt;code&gt;make&lt;/code&gt;. You can find the old version in &lt;a href="https://github.com/casey/just/raw/master/contrib/just.sh"&gt;contrib/just.sh&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Global and User &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;If you want some recipes to be available everywhere, you have a few options.&lt;/p&gt; 
&lt;h4&gt;Global Justfile&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just --global-justfile&lt;/code&gt;, or &lt;code&gt;just -g&lt;/code&gt; for short, searches the following paths, in-order, for a justfile:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/just/justfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.config/just/justfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/justfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.justfile&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can put recipes that are used across many projects in a global justfile to easily invoke them from any directory.&lt;/p&gt; 
&lt;h4&gt;User justfile tips&lt;/h4&gt; 
&lt;p&gt;You can also adopt some of the following workflows. These tips assume you've created a &lt;code&gt;justfile&lt;/code&gt; at &lt;code&gt;~/.user.justfile&lt;/code&gt;, but you can put this &lt;code&gt;justfile&lt;/code&gt; at any convenient path on your system.&lt;/p&gt; 
&lt;h5&gt;Recipe Aliases&lt;/h5&gt; 
&lt;p&gt;If you want to call the recipes in &lt;code&gt;~/.user.justfile&lt;/code&gt; by name, and don't mind creating an alias for every recipe, add the following to your shell's initialization script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;for recipe in `just --justfile ~/.user.justfile --summary`; do
  alias $recipe="just --justfile ~/.user.justfile --working-directory . $recipe"
done
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, if you have a recipe called &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;~/.user.justfile&lt;/code&gt;, you can just type &lt;code&gt;foo&lt;/code&gt; at the command line to run it.&lt;/p&gt; 
&lt;p&gt;It took me way too long to realize that you could create recipe aliases like this. Notwithstanding my tardiness, I am very pleased to bring you this major advance in &lt;code&gt;justfile&lt;/code&gt; technology.&lt;/p&gt; 
&lt;h5&gt;Forwarding Alias&lt;/h5&gt; 
&lt;p&gt;If you'd rather not create aliases for every recipe, you can create a single alias:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;alias .j='just --justfile ~/.user.justfile --working-directory .'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, if you have a recipe called &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;~/.user.justfile&lt;/code&gt;, you can just type &lt;code&gt;.j foo&lt;/code&gt; at the command line to run it.&lt;/p&gt; 
&lt;p&gt;I'm pretty sure that nobody actually uses this feature, but it's there.&lt;/p&gt; 
&lt;p&gt;¯\_(ツ)_/¯&lt;/p&gt; 
&lt;h5&gt;Customization&lt;/h5&gt; 
&lt;p&gt;You can customize the above aliases with additional options. For example, if you'd prefer to have the recipes in your &lt;code&gt;justfile&lt;/code&gt; run in your home directory, instead of the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;alias .j='just --justfile ~/.user.justfile --working-directory ~'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Node.js &lt;code&gt;package.json&lt;/code&gt; Script Compatibility&lt;/h3&gt; 
&lt;p&gt;The following export statement gives &lt;code&gt;just&lt;/code&gt; recipes access to local Node module binaries, and makes &lt;code&gt;just&lt;/code&gt; recipe commands behave more like &lt;code&gt;script&lt;/code&gt; entries in Node.js &lt;code&gt;package.json&lt;/code&gt; files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export PATH := "./node_modules/.bin:" + env_var('PATH')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Paths on Windows&lt;/h3&gt; 
&lt;p&gt;On Windows, all functions that return paths, except &lt;code&gt;invocation_directory()&lt;/code&gt; will return &lt;code&gt;\&lt;/code&gt;-separated paths. When not using PowerShell or &lt;code&gt;cmd.exe&lt;/code&gt; these paths should be quoted to prevent the &lt;code&gt;\&lt;/code&gt;s from being interpreted as character escapes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;ls:
    echo '{{absolute_path(".")}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;cygpath.exe&lt;/code&gt; is an executable included in some distributions of Unix userlands for Windows, including &lt;a href="https://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; and &lt;a href="https://git-scm.com/downloads"&gt;Git&lt;/a&gt; for Windows.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;cygpath.exe&lt;/code&gt; in two places:&lt;/p&gt; 
&lt;p&gt;For backwards compatibility, &lt;code&gt;invocation_directory()&lt;/code&gt;, uses &lt;code&gt;cygpath.exe&lt;/code&gt; to convert the invocation directory into a unix-style &lt;code&gt;/&lt;/code&gt;-separated path. Use &lt;code&gt;invocation_directory_native()&lt;/code&gt; to get the native, Windows-style path. On unix, &lt;code&gt;invocation_directory()&lt;/code&gt; and &lt;code&gt;invocation_directory_native()&lt;/code&gt; both return the same unix-style path.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;cygpath.exe&lt;/code&gt; is used also used to convert Unix-style shebang lines into Windows paths. As an alternative, the &lt;code&gt;[script]&lt;/code&gt; attribute, currently unstable, can be used, which does not depend on &lt;code&gt;cygpath.exe&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;cygpath.exe&lt;/code&gt; is available, you can use it to convert between path styles:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo_unix := '/hello/world'
foo_windows := shell('cygpath --windows $1', foo_unix)

bar_windows := 'C:\hello\world'
bar_unix := shell('cygpath --unix $1', bar_windows)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remote Justfiles&lt;/h3&gt; 
&lt;p&gt;If you wish to include a &lt;code&gt;mod&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; source file in many &lt;code&gt;justfiles&lt;/code&gt; without needing to duplicate it, you can use an optional &lt;code&gt;mod&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;, along with a recipe to fetch the module source:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;import? 'foo.just'

fetch:
  curl https://raw.githubusercontent.com/casey/just/master/justfile &amp;gt; foo.just
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Given the above &lt;code&gt;justfile&lt;/code&gt;, after running &lt;code&gt;just fetch&lt;/code&gt;, the recipes in &lt;code&gt;foo.just&lt;/code&gt; will be available.&lt;/p&gt; 
&lt;h3&gt;Printing Complex Strings&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; can be used to print strings, but because it processes escape sequences, like &lt;code&gt;\n&lt;/code&gt;, and different implementations of &lt;code&gt;echo&lt;/code&gt; recognize different escape sequences, using &lt;code&gt;printf&lt;/code&gt; is often a better choice.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;printf&lt;/code&gt; takes a C-style format string and any number of arguments, which are interpolated into the format string.&lt;/p&gt; 
&lt;p&gt;This can be combined with indented, triple quoted strings to emulate shell heredocs.&lt;/p&gt; 
&lt;p&gt;Substitution complex strings into recipe bodies with &lt;code&gt;{…}&lt;/code&gt; can also lead to trouble as it may be split by the shell into multiple arguments depending on the presence of whitespace and quotes. Exporting complex strings as environment variables and referring to them with &lt;code&gt;"$NAME"&lt;/code&gt;, note the double quotes, can also help.&lt;/p&gt; 
&lt;p&gt;Putting all this together, to print a string verbatim to standard output, with all its various escape sequences and quotes undisturbed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export FOO := '''
  a complicated string with
  some dis\tur\bi\ng escape sequences
  and "quotes" of 'different' kinds
'''

bar:
  printf %s "$FOO"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Alternatives and Prior Art&lt;/h3&gt; 
&lt;p&gt;There is no shortage of command runners! Some more or less similar alternatives to &lt;code&gt;just&lt;/code&gt; include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;make&lt;/a&gt;: The Unix build tool that inspired &lt;code&gt;just&lt;/code&gt;. There are a few different modern day descendents of the original &lt;code&gt;make&lt;/code&gt;, including &lt;a href="https://www.freebsd.org/cgi/man.cgi?make(1)"&gt;FreeBSD Make&lt;/a&gt; and &lt;a href="https://www.gnu.org/software/make/"&gt;GNU Make&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/go-task/task"&gt;task&lt;/a&gt;: A YAML-based command runner written in Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/egoist/maid"&gt;maid&lt;/a&gt;: A Markdown-based command runner written in JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/just"&gt;microsoft/just&lt;/a&gt;: A JavaScript-based command runner written in JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sagiegurari/cargo-make"&gt;cargo-make&lt;/a&gt;: A command runner for Rust projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tj/mmake"&gt;mmake&lt;/a&gt;: A wrapper around &lt;code&gt;make&lt;/code&gt; with a number of improvements, including remote includes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tj/robo"&gt;robo&lt;/a&gt;: A YAML-based command runner written in Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jakedeichert/mask"&gt;mask&lt;/a&gt;: A Markdown-based command runner written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xonixx/makesure"&gt;makesure&lt;/a&gt;: A simple and portable command runner written in AWK and shell.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VladimirMarkelov/haku"&gt;haku&lt;/a&gt;: A make-like command runner written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mise.jdx.dev/"&gt;mise&lt;/a&gt;: A development environment tool manager written in Rust supporing tasks in TOML files and standalone scripts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; welcomes your contributions! &lt;code&gt;just&lt;/code&gt; is released under the maximally permissive &lt;a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt"&gt;CC0&lt;/a&gt; public domain dedication and fallback license, so your changes must also be released under this license.&lt;/p&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is written in Rust. Use &lt;a href="https://www.rust-lang.org/tools/install"&gt;rustup&lt;/a&gt; to install a Rust toolchain.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is extensively tested. All new features must be covered by unit or integration tests. Unit tests are under &lt;a href="https://github.com/casey/just/raw/master/src"&gt;src&lt;/a&gt;, live alongside the code being tested, and test code in isolation. Integration tests are in the &lt;a href="https://github.com/casey/just/raw/master/tests"&gt;tests directory&lt;/a&gt; and test the &lt;code&gt;just&lt;/code&gt; binary from the outside by invoking &lt;code&gt;just&lt;/code&gt; on a given &lt;code&gt;justfile&lt;/code&gt; and set of command-line arguments, and checking the output.&lt;/p&gt; 
&lt;p&gt;You should write whichever type of tests are easiest to write for your feature while still providing good test coverage.&lt;/p&gt; 
&lt;p&gt;Unit tests are useful for testing new Rust functions that are used internally and as an aid for development. A good example are the unit tests which cover the &lt;a href="https://github.com/casey/just/raw/master/src/unindent.rs"&gt;&lt;code&gt;unindent()&lt;/code&gt; function&lt;/a&gt;, used to unindent triple-quoted strings and backticks. &lt;code&gt;unindent()&lt;/code&gt; has a bunch of tricky edge cases which are easy to exercise with unit tests that call &lt;code&gt;unindent()&lt;/code&gt; directly.&lt;/p&gt; 
&lt;p&gt;Integration tests are useful for making sure that the final behavior of the &lt;code&gt;just&lt;/code&gt; binary is correct. &lt;code&gt;unindent()&lt;/code&gt; is also covered by integration tests which make sure that evaluating a triple-quoted string produces the correct unindented value. However, there are not integration tests for all possible cases. These are covered by faster, more concise unit tests that call &lt;code&gt;unindent()&lt;/code&gt; directly.&lt;/p&gt; 
&lt;p&gt;Integration tests use the &lt;code&gt;Test&lt;/code&gt; struct, a builder which allows for easily invoking &lt;code&gt;just&lt;/code&gt; with a given &lt;code&gt;justfile&lt;/code&gt;, arguments, and environment variables, and checking the program's stdout, stderr, and exit code .&lt;/p&gt; 
&lt;h3&gt;Contribution Workflow&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Make sure the feature is wanted. There should be an open issue about the feature with a comment from &lt;a href="https://github.com/casey"&gt;@casey&lt;/a&gt; saying that it's a good idea or seems reasonable. If there isn't, open a new issue and ask for feedback.&lt;/p&gt; &lt;p&gt;There are lots of good features which can't be merged, either because they aren't backwards compatible, have an implementation which would overcomplicate the codebase, or go against &lt;code&gt;just&lt;/code&gt;'s design philosophy.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Settle on the design of the feature. If the feature has multiple possible implementations or syntaxes, make sure to nail down the details in the issue.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone &lt;code&gt;just&lt;/code&gt; and start hacking. The best workflow is to have the code you're working on in an editor alongside a job that re-runs tests whenever a file changes. You can run such a job by installing &lt;a href="https://github.com/watchexec/cargo-watch"&gt;cargo-watch&lt;/a&gt; with &lt;code&gt;cargo install cargo-watch&lt;/code&gt; and running &lt;code&gt;just watch test&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a failing test for your feature. Most of the time this will be an integration test which exercises the feature end-to-end. Look for an appropriate file to put the test in in &lt;a href="https://github.com/casey/just/raw/master/tests"&gt;tests&lt;/a&gt;, or add a new file in &lt;a href="https://github.com/casey/just/raw/master/tests"&gt;tests&lt;/a&gt; and add a &lt;code&gt;mod&lt;/code&gt; statement importing that file in &lt;a href="https://github.com/casey/just/raw/master/tests/lib.rs"&gt;tests/lib.rs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Implement the feature.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;just ci&lt;/code&gt; to make sure that all tests, lints, and checks pass. Requires &lt;a href="https://github.com/rust-lang/mdBook"&gt;mdBook&lt;/a&gt; and &lt;a href="https://github.com/Michael-F-Bryan/mdbook-linkcheck"&gt;mdbook-linkcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open a PR with the new code that is editable by maintainers. PRs often require rebasing and minor tweaks. If the PR is not editable by maintainers, each rebase and tweak will require a round trip of code review. Your PR may be summarily closed if it is not editable by maintainers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Incorporate feedback.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enjoy the sweet feeling of your PR getting merged!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Feel free to open a draft PR at any time for discussion and feedback.&lt;/p&gt; 
&lt;h3&gt;Hints&lt;/h3&gt; 
&lt;p&gt;Here are some hints to get you started with specific kinds of new features, which you can use in addition to the contribution workflow above.&lt;/p&gt; 
&lt;h4&gt;Adding a New Attribute&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Write a new integration test in &lt;a href="https://github.com/casey/just/raw/master/tests/attributes.rs"&gt;tests/attributes.rs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a new variant to the &lt;a href="https://github.com/casey/just/raw/master/src/attribute.rs"&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; enum.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Implement the functionality of the new attribute.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;just ci&lt;/code&gt; to make sure that all tests pass.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Janus&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/casey/janus"&gt;Janus&lt;/a&gt; is a tool for checking whether a change to &lt;code&gt;just&lt;/code&gt; breaks or changes the interpretation of existing &lt;code&gt;justfile&lt;/code&gt;s. It collects and analyzes public &lt;code&gt;justfile&lt;/code&gt;s on GitHub.&lt;/p&gt; 
&lt;p&gt;Before merging a particularly large or gruesome change, Janus should be run to make sure that nothing breaks. Don't worry about running Janus yourself, Casey will happily run it for you on changes that need it.&lt;/p&gt; 
&lt;h3&gt;Minimum Supported Rust Version&lt;/h3&gt; 
&lt;p&gt;The minimum supported Rust version, or MSRV, is current stable Rust. It may build on older versions of Rust, but this is not guaranteed.&lt;/p&gt; 
&lt;h3&gt;New Releases&lt;/h3&gt; 
&lt;p&gt;New releases of &lt;code&gt;just&lt;/code&gt; are made frequently so that users quickly get access to new features.&lt;/p&gt; 
&lt;p&gt;Release commit messages use the following template:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Release x.y.z

- Bump version: x.y.z → x.y.z
- Update changelog
- Update changelog contributor credits
- Update dependencies
- Update version references in readme
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;h3&gt;What are the idiosyncrasies of Make that Just avoids?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; has some behaviors which are confusing, complicated, or make it unsuitable for use as a general command runner.&lt;/p&gt; 
&lt;p&gt;One example is that under some circumstances, &lt;code&gt;make&lt;/code&gt; won't actually run the commands in a recipe. For example, if you have a file called &lt;code&gt;test&lt;/code&gt; and the following makefile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test:
  ./test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; will refuse to run your tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ make test
make: `test' is up to date.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; assumes that the &lt;code&gt;test&lt;/code&gt; recipe produces a file called &lt;code&gt;test&lt;/code&gt;. Since this file exists and the recipe has no other dependencies, &lt;code&gt;make&lt;/code&gt; thinks that it doesn't have anything to do and exits.&lt;/p&gt; 
&lt;p&gt;To be fair, this behavior is desirable when using &lt;code&gt;make&lt;/code&gt; as a build system, but not when using it as a command runner. You can disable this behavior for specific targets using &lt;code&gt;make&lt;/code&gt;'s built-in &lt;a href="https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html"&gt;&lt;code&gt;.PHONY&lt;/code&gt; target name&lt;/a&gt;, but the syntax is verbose and can be hard to remember. The explicit list of phony targets, written separately from the recipe definitions, also introduces the risk of accidentally defining a new non-phony target. In &lt;code&gt;just&lt;/code&gt;, all recipes are treated as if they were phony.&lt;/p&gt; 
&lt;p&gt;Other examples of &lt;code&gt;make&lt;/code&gt;'s idiosyncrasies include the difference between &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;:=&lt;/code&gt; in assignments, the confusing error messages that are produced if you mess up your makefile, needing &lt;code&gt;$$&lt;/code&gt; to use environment variables in recipes, and incompatibilities between different flavors of &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;What's the relationship between Just and Cargo build scripts?&lt;/h3&gt; 
&lt;p&gt;&lt;a href="http://doc.crates.io/build-script.html"&gt;&lt;code&gt;cargo&lt;/code&gt; build scripts&lt;/a&gt; have a pretty specific use, which is to control how &lt;code&gt;cargo&lt;/code&gt; builds your Rust project. This might include adding flags to &lt;code&gt;rustc&lt;/code&gt; invocations, building an external dependency, or running some kind of codegen step.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt;, on the other hand, is for all the other miscellaneous commands you might run as part of development. Things like running tests in different configurations, linting your code, pushing build artifacts to a server, removing temporary files, and the like.&lt;/p&gt; 
&lt;p&gt;Also, although &lt;code&gt;just&lt;/code&gt; is written in Rust, it can be used regardless of the language or build system your project uses.&lt;/p&gt; 
&lt;h2&gt;Further Ramblings&lt;/h2&gt; 
&lt;p&gt;I personally find it very useful to write a &lt;code&gt;justfile&lt;/code&gt; for almost every project, big or small.&lt;/p&gt; 
&lt;p&gt;On a big project with multiple contributors, it's very useful to have a file with all the commands needed to work on the project close at hand.&lt;/p&gt; 
&lt;p&gt;There are probably different commands to test, build, lint, deploy, and the like, and having them all in one place is useful and cuts down on the time you have to spend telling people which commands to run and how to type them.&lt;/p&gt; 
&lt;p&gt;And, with an easy place to put commands, it's likely that you'll come up with other useful things which are part of the project's collective wisdom, but which aren't written down anywhere, like the arcane commands needed for some part of your revision control workflow, to install all your project's dependencies, or all the random flags you might need to pass to the build system.&lt;/p&gt; 
&lt;p&gt;Some ideas for recipes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Deploying/publishing the project&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Building in release mode vs debug mode&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Running in debug mode or with logging enabled&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Complex git workflows&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Updating dependencies&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Running different sets of tests, for example fast tests vs slow tests, or running them with verbose output&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Any complex set of commands that you really should write down somewhere, if only to be able to remember them&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Even for small, personal projects it's nice to be able to remember commands by name instead of ^Reverse searching your shell history, and it's a huge boon to be able to go into an old project written in a random language with a mysterious build system and know that all the commands you need to do whatever you need to do are in the &lt;code&gt;justfile&lt;/code&gt;, and that if you type &lt;code&gt;just&lt;/code&gt; something useful (or at least interesting!) will probably happen.&lt;/p&gt; 
&lt;p&gt;For ideas for recipes, check out &lt;a href="https://github.com/casey/just/raw/master/justfile"&gt;this project's &lt;code&gt;justfile&lt;/code&gt;&lt;/a&gt;, or some of the &lt;code&gt;justfile&lt;/code&gt;s &lt;a href="https://github.com/search?q=path%3A**%2Fjustfile&amp;amp;type=code"&gt;out in the wild&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Anyways, I think that's about it for this incredibly long-winded README.&lt;/p&gt; 
&lt;p&gt;I hope you enjoy using &lt;code&gt;just&lt;/code&gt; and find great success and satisfaction in all your computational endeavors!&lt;/p&gt; 
&lt;p&gt;😸&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/casey/just/master/#just"&gt;🔼 Back to the top!&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nautechsystems/nautilus_trader</title>
      <link>https://github.com/nautechsystems/nautilus_trader</link>
      <description>&lt;p&gt;A high-performance algorithmic trading platform and event-driven backtester&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader-logo.png" width="500" /&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://codecov.io/gh/nautechsystems/nautilus_trader"&gt;&lt;img src="https://codecov.io/gh/nautechsystems/nautilus_trader/branch/master/graph/badge.svg?token=DXO9QQI40H" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/nautechsystems/nautilus_trader"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="codspeed" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/pypi/pyversions/nautilus_trader" alt="pythons" /&gt; &lt;img src="https://img.shields.io/pypi/v/nautilus_trader" alt="pypi-version" /&gt; &lt;img src="https://img.shields.io/pypi/format/nautilus_trader?color=blue" alt="pypi-format" /&gt; &lt;a href="https://pepy.tech/project/nautilus-trader"&gt;&lt;img src="https://pepy.tech/badge/nautilus-trader" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NautilusTrader"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Branch&lt;/th&gt; 
   &lt;th align="left"&gt;Version&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fmaster%2Fversion.json" alt="version" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=master" alt="build" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fnightly%2Fversion.json" alt="version" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly" alt="build" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fdevelop%2Fversion.json" alt="version" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=develop" alt="build" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Rust&lt;/th&gt; 
   &lt;th align="left"&gt;Python&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.91.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.12-3.14&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.91.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.12-3.14&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.91.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.12-3.14&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.91.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.12-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href="https://nautilustrader.io/docs/"&gt;https://nautilustrader.io/docs/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: &lt;a href="mailto:support@nautilustrader.io"&gt;support@nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is an open-source, high-performance, production-grade algorithmic trading platform, providing quantitative traders with the ability to backtest portfolios of automated trading strategies on historical data with an event-driven engine, and also deploy those same strategies live, with no code changes.&lt;/p&gt; 
&lt;p&gt;The platform is &lt;em&gt;AI-first&lt;/em&gt;, designed to develop and deploy algorithmic trading strategies within a highly performant and robust Python-native environment. This helps to address the parity challenge of keeping the Python research/backtest environment consistent with the production live trading environment.&lt;/p&gt; 
&lt;p&gt;NautilusTrader's design, architecture, and implementation philosophy prioritizes software correctness and safety at the highest level, with the aim of supporting Python-native, mission-critical, trading system backtesting and live deployment workloads.&lt;/p&gt; 
&lt;p&gt;The platform is also universal, and asset-class-agnostic — with any REST API or WebSocket feed able to be integrated via modular adapters. It supports high-frequency trading across a wide range of asset classes and instrument types including FX, Equities, Futures, Options, Crypto, DeFi, and Betting — enabling seamless operations across multiple venues simultaneously.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader.png" alt="nautilus-trader" title="nautilus-trader" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Core is written in Rust with asynchronous networking using &lt;a href="https://crates.io/crates/tokio"&gt;tokio&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Rust-powered type- and thread-safety, with optional Redis-backed state persistence.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt;: OS independent, runs on Linux, macOS, and Windows. Deploy using Docker.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Modular adapters mean any REST API or WebSocket feed can be integrated.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt;: Time in force &lt;code&gt;IOC&lt;/code&gt;, &lt;code&gt;FOK&lt;/code&gt;, &lt;code&gt;GTC&lt;/code&gt;, &lt;code&gt;GTD&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, &lt;code&gt;AT_THE_OPEN&lt;/code&gt;, &lt;code&gt;AT_THE_CLOSE&lt;/code&gt;, advanced order types and conditional triggers. Execution instructions &lt;code&gt;post-only&lt;/code&gt;, &lt;code&gt;reduce-only&lt;/code&gt;, and icebergs. Contingency orders including &lt;code&gt;OCO&lt;/code&gt;, &lt;code&gt;OUO&lt;/code&gt;, &lt;code&gt;OTO&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Add user-defined custom components, or assemble entire systems from scratch leveraging the &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; and &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtesting&lt;/strong&gt;: Run with multiple venues, instruments and strategies simultaneously using historical quote tick, trade tick, bar, order book and custom data with nanosecond resolution.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: Use identical strategy implementations between backtesting and live deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-venue&lt;/strong&gt;: Multiple venue capabilities facilitate market-making and statistical arbitrage strategies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Training&lt;/strong&gt;: Backtest engine fast enough to be used to train AI trading agents (RL/ES).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-art.png" alt="Alt text" title="nautilus" /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;nautilus - from ancient Greek 'sailor' and naus 'ship'.&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;The nautilus shell consists of modular chambers with a growth factor which approximates a logarithmic spiral. The idea is that this can be translated to the aesthetics of design and architecture.&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Why NautilusTrader?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Highly performant event-driven Python&lt;/strong&gt;: Native binary core components.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parity between backtesting and live trading&lt;/strong&gt;: Identical strategy code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reduced operational risk&lt;/strong&gt;: Enhanced risk management functionality, logical accuracy, and type safety.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly extendable&lt;/strong&gt;: Message bus, custom components and actors, custom data, custom adapters.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Traditionally, trading strategy research and backtesting might be conducted in Python using vectorized methods, with the strategy then needing to be reimplemented in a more event-driven way using C++, C#, Java or other statically typed language(s). The reasoning here is that vectorized backtesting code cannot express the granular time and event dependent complexity of real-time trading, where compiled languages have proven to be more suitable due to their inherently higher performance, and type safety.&lt;/p&gt; 
&lt;p&gt;One of the key advantages of NautilusTrader here, is that this reimplementation step is now circumvented - as the critical core components of the platform have all been written entirely in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; or &lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;. This means we're using the right tools for the job, where systems programming languages compile performant binaries, with CPython C extension modules then able to offer a Python-native environment, suitable for professional quantitative traders and trading firms.&lt;/p&gt; 
&lt;h2&gt;Why Python?&lt;/h2&gt; 
&lt;p&gt;Python was originally created decades ago as a simple scripting language with a clean straightforward syntax. It has since evolved into a fully fledged general purpose object-oriented programming language. Based on the TIOBE index, Python is currently the most popular programming language in the world. Not only that, Python has become the &lt;em&gt;de facto lingua franca&lt;/em&gt; of data science, machine learning, and artificial intelligence.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is "blazingly fast" and memory-efficient (comparable to C and C++) with no garbage collector. It can power mission-critical systems, run on embedded devices, and easily integrates with other languages.&lt;/p&gt; 
&lt;p&gt;Rust’s rich type system and ownership model guarantees memory-safety and thread-safety deterministically — eliminating many classes of bugs at compile-time.&lt;/p&gt; 
&lt;p&gt;The project increasingly utilizes Rust for core performance-critical components. Python bindings are implemented via Cython and &lt;a href="https://pyo3.rs"&gt;PyO3&lt;/a&gt;—no Rust toolchain is required at install time.&lt;/p&gt; 
&lt;p&gt;This project makes the &lt;a href="https://raphlinus.github.io/rust/2020/01/18/soundness-pledge.html"&gt;Soundness Pledge&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;“The intent of this project is to be free of soundness bugs. The developers will do their best to avoid them, and welcome help in analyzing and fixing them.”&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; NautilusTrader relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally equal to the latest stable release of Rust.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is modularly designed to work with &lt;em&gt;adapters&lt;/em&gt;, enabling connectivity to trading venues and data providers by translating their raw APIs into a unified interface and normalized domain model.&lt;/p&gt; 
&lt;p&gt;The following integrations are currently supported; see &lt;a href="https://nautilustrader.io/docs/latest/integrations/"&gt;docs/integrations/&lt;/a&gt; for details:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Name&lt;/th&gt; 
   &lt;th align="left"&gt;ID&lt;/th&gt; 
   &lt;th align="left"&gt;Type&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
   &lt;th align="left"&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://betfair.com"&gt;Betfair&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BETFAIR&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Sports Betting Exchange&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/betfair.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://binance.com"&gt;Binance&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.bitmex.com"&gt;BitMEX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BITMEX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/bitmex.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.bybit.com"&gt;Bybit&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BYBIT&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/bybit.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.coinbase.com/en/international-exchange"&gt;Coinbase International&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;COINBASE_INTX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/coinbase_intx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://databento.com"&gt;Databento&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DATABENTO&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/databento.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://dydx.exchange/"&gt;dYdX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DYDX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/dydx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://hyperliquid.xyz"&gt;Hyperliquid&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;HYPERLIQUID&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/building-orange" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/hyperliquid.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.interactivebrokers.com"&gt;Interactive Brokers&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;INTERACTIVE_BROKERS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Brokerage (multi-venue)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/ib.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://okx.com"&gt;OKX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;OKX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/okx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://polymarket.com"&gt;Polymarket&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;POLYMARKET&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Prediction Market (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/polymarket.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://tardis.dev"&gt;Tardis&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;TARDIS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/tardis.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ID&lt;/strong&gt;: The default client ID for the integrations adapter clients.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: The type of integration (often the venue type).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;building&lt;/code&gt;: Under construction and likely not in a usable state.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;beta&lt;/code&gt;: Completed to a minimally working state and in a beta testing phase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: Stabilized feature set and API, the integration has been tested by both developers and users to a reasonable level (some bugs may still remain).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/integrations/index.html"&gt;Integrations&lt;/a&gt; documentation for further details.&lt;/p&gt; 
&lt;h2&gt;Versioning and releases&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;NautilusTrader is still under active development&lt;/strong&gt;. Some features may be incomplete, and while the API is becoming more stable, breaking changes can occur between releases. We strive to document these changes in the release notes on a &lt;strong&gt;best-effort basis&lt;/strong&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We aim to follow a &lt;strong&gt;bi-weekly release schedule&lt;/strong&gt;, though experimental or larger features may cause delays.&lt;/p&gt; 
&lt;h3&gt;Branches&lt;/h3&gt; 
&lt;p&gt;We aim to maintain a stable, passing build across all branches.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: Reflects the source code for the latest released version; recommended for production use.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;: Daily snapshots of the &lt;code&gt;develop&lt;/code&gt; branch for early testing; merged at &lt;strong&gt;14:00 UTC&lt;/strong&gt; and as required.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt;: Active development branch for contributors and feature work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Our &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md"&gt;roadmap&lt;/a&gt; aims to achieve a &lt;strong&gt;stable API for version 2.x&lt;/strong&gt; (likely after the Rust port). Once this milestone is reached, we plan to implement a formal deprecation process for any API changes. This approach allows us to maintain a rapid development pace for now.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Precision mode&lt;/h2&gt; 
&lt;p&gt;NautilusTrader supports two precision modes for its core value types (&lt;code&gt;Price&lt;/code&gt;, &lt;code&gt;Quantity&lt;/code&gt;, &lt;code&gt;Money&lt;/code&gt;), which differ in their internal bit-width and maximum decimal precision.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High-precision&lt;/strong&gt;: 128-bit integers with up to 16 decimals of precision, and a larger value range.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Standard-precision&lt;/strong&gt;: 64-bit integers with up to 9 decimals of precision, and a smaller value range.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;By default, the official Python wheels ship in high-precision (128-bit) mode on Linux and macOS. On Windows, only standard-precision (64-bit) is available due to the lack of native 128-bit integer support. For the Rust crates, the default is standard-precision unless you explicitly enable the &lt;code&gt;high-precision&lt;/code&gt; feature flag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Rust feature flag&lt;/strong&gt;: To enable high-precision mode in Rust, add the &lt;code&gt;high-precision&lt;/code&gt; feature to your Cargo.toml:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
nautilus_model = { version = "*", features = ["high-precision"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;We recommend using the latest supported version of Python and installing &lt;a href="https://pypi.org/project/nautilus_trader/"&gt;nautilus_trader&lt;/a&gt; inside a virtual environment to isolate dependencies.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;There are two supported ways to install&lt;/strong&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Pre-built binary wheel from PyPI &lt;em&gt;or&lt;/em&gt; the Nautech Systems package index.&lt;/li&gt; 
 &lt;li&gt;Build from source.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;We highly recommend installing using the &lt;a href="https://docs.astral.sh/uv"&gt;uv&lt;/a&gt; package manager with a "vanilla" CPython.&lt;/p&gt; 
 &lt;p&gt;Conda and other Python distributions &lt;em&gt;may&lt;/em&gt; work but aren’t officially supported.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;From PyPI&lt;/h3&gt; 
&lt;p&gt;To install the latest binary wheel (or sdist package) from PyPI using Python's pip package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From the Nautech Systems package index&lt;/h3&gt; 
&lt;p&gt;The Nautech Systems package index (&lt;code&gt;packages.nautechsystems.io&lt;/code&gt;) complies with &lt;a href="https://peps.python.org/pep-0503/"&gt;PEP-503&lt;/a&gt; and hosts both stable and development binary wheels for &lt;code&gt;nautilus_trader&lt;/code&gt;. This enables users to install either the latest stable release or pre-release versions for testing.&lt;/p&gt; 
&lt;h4&gt;Stable wheels&lt;/h4&gt; 
&lt;p&gt;Stable wheels correspond to official releases of &lt;code&gt;nautilus_trader&lt;/code&gt; on PyPI, and use standard versioning.&lt;/p&gt; 
&lt;p&gt;To install the latest stable release:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Use &lt;code&gt;--extra-index-url&lt;/code&gt; instead of &lt;code&gt;--index-url&lt;/code&gt; if you want pip to fall back to PyPI automatically:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Development wheels&lt;/h4&gt; 
&lt;p&gt;Development wheels are published from both the &lt;code&gt;nightly&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branches, allowing users to test features and fixes ahead of stable releases.&lt;/p&gt; 
&lt;p&gt;This process also helps preserve compute resources and provides easy access to the exact binaries tested in CI pipelines, while adhering to &lt;a href="https://peps.python.org/pep-0440/"&gt;PEP-440&lt;/a&gt; versioning standards:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; wheels use the version format &lt;code&gt;dev{date}+{build_number}&lt;/code&gt; (e.g., &lt;code&gt;1.208.0.dev20241212+7001&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; wheels use the version format &lt;code&gt;a{date}&lt;/code&gt; (alpha) (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Nightly&lt;/th&gt; 
   &lt;th align="left"&gt;Develop&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Development wheels from the &lt;code&gt;develop&lt;/code&gt; branch publish for every supported platform except Linux ARM64. Skipping that target keeps CI feedback fast while avoiding unnecessary build resource usage.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;We do not recommend using development wheels in production environments, such as live trading controlling real capital.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Installation commands&lt;/h4&gt; 
&lt;p&gt;By default, pip will install the latest stable release. Adding the &lt;code&gt;--pre&lt;/code&gt; flag ensures that pre-release versions, including development wheels, are considered.&lt;/p&gt; 
&lt;p&gt;To install the latest available pre-release (including development wheels):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --pre --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install a specific development wheel (e.g., &lt;code&gt;1.221.0a20251026&lt;/code&gt; for October 26, 2025):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install nautilus_trader==1.221.0a20251026 --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Available versions&lt;/h4&gt; 
&lt;p&gt;You can view all available versions of &lt;code&gt;nautilus_trader&lt;/code&gt; on the &lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;package index&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To programmatically fetch and list available versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -s https://packages.nautechsystems.io/simple/nautilus-trader/index.html | grep -oP '(?&amp;lt;=&amp;lt;a href=")[^"]+(?=")' | awk -F'#' '{print $1}' | sort
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;On Linux, confirm your glibc version with &lt;code&gt;ldd --version&lt;/code&gt; and ensure it reports &lt;strong&gt;2.35&lt;/strong&gt; or newer before installing binary wheels.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Branch updates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): Build and publish continuously with every merged commit.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): Build and publish daily when we automatically merge the &lt;code&gt;develop&lt;/code&gt; branch at &lt;strong&gt;14:00 UTC&lt;/strong&gt; (if there are changes).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Retention policies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): We retain only the most recent wheel build.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): We retain only the 30 most recent wheel builds.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Verifying build provenance&lt;/h4&gt; 
&lt;p&gt;All release artifacts (wheels and source distributions) published to PyPI, GitHub Releases, and the Nautech Systems package index include cryptographic attestations that prove their authenticity and build provenance.&lt;/p&gt; 
&lt;p&gt;These attestations are generated automatically during the CI/CD pipeline using &lt;a href="https://slsa.dev/"&gt;SLSA&lt;/a&gt; build provenance, and can be verified to ensure:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The artifact was built by the official NautilusTrader GitHub Actions workflow.&lt;/li&gt; 
 &lt;li&gt;The artifact corresponds to a specific commit SHA in the repository.&lt;/li&gt; 
 &lt;li&gt;The artifact hasn't been tampered with since it was built.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To verify a wheel file using the GitHub CLI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gh attestation verify nautilus_trader-1.220.0-*.whl --owner nautechsystems
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This provides supply chain security by allowing you to cryptographically verify that the installed package came from the official NautilusTrader build process.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Attestation verification requires the &lt;a href="https://cli.github.com/"&gt;GitHub CLI&lt;/a&gt; (&lt;code&gt;gh&lt;/code&gt;) to be installed. Development wheels from &lt;code&gt;develop&lt;/code&gt; and &lt;code&gt;nightly&lt;/code&gt; branches are also attested and can be verified the same way.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;From source&lt;/h3&gt; 
&lt;p&gt;It's possible to install from source using pip if you first install the build dependencies as specified in the &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt; (the Rust toolchain installer):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl https://sh.rustup.rs -sSf | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Download and install &lt;a href="https://win.rustup.rs/x86_64"&gt;&lt;code&gt;rustup-init.exe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;Install "Desktop development with C++" using &lt;a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/"&gt;Build Tools for Visual Studio 2022&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;rustc --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;cargo&lt;/code&gt; in the current shell:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Start a new PowerShell&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://clang.llvm.org/"&gt;clang&lt;/a&gt; (a C language frontend for LLVM):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get install clang
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ol&gt; 
     &lt;li&gt; &lt;p&gt;Add Clang to your &lt;a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/"&gt;Build Tools for Visual Studio 2022&lt;/a&gt;:&lt;/p&gt; 
      &lt;ul&gt; 
       &lt;li&gt;Start | Visual Studio Installer | Modify | C++ Clang tools for Windows (latest) = checked | Modify&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;clang&lt;/code&gt; in the current shell:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-powershell"&gt;[System.Environment]::SetEnvironmentVariable('path', "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\x64\bin\;" + $env:Path,"User")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;clang --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install uv (see the &lt;a href="https://docs.astral.sh/uv/getting-started/installation"&gt;uv installation guide&lt;/a&gt; for more details):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows (PowerShell):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-powershell"&gt;irm https://astral.sh/uv/install.ps1 | iex
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the source with &lt;code&gt;git&lt;/code&gt;, and install from the project's root directory:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;git clone --branch develop --depth 1 https://github.com/nautechsystems/nautilus_trader
cd nautilus_trader
uv sync --all-extras
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;--depth 1&lt;/code&gt; flag fetches just the latest commit for a faster, lightweight clone.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start="6"&gt; 
 &lt;li&gt; &lt;p&gt;Set environment variables for PyO3 compilation (Linux and macOS only):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Set the library path for the Python interpreter (in this case Python 3.13.4)
export LD_LIBRARY_PATH="$HOME/.local/share/uv/python/cpython-3.13.4-linux-x86_64-gnu/lib:$LD_LIBRARY_PATH"

# Set the Python executable path for PyO3
export PYO3_PYTHON=$(pwd)/.venv/bin/python
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Adjust the Python version and architecture in the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to match your system. Use &lt;code&gt;uv python list&lt;/code&gt; to find the exact path for your Python installation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for other options and further details.&lt;/p&gt; 
&lt;h2&gt;Redis&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href="https://redis.io"&gt;Redis&lt;/a&gt; with NautilusTrader is &lt;strong&gt;optional&lt;/strong&gt; and only required if configured as the backend for a &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; database or &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;. See the &lt;strong&gt;Redis&lt;/strong&gt; section of the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation#redis"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h2&gt;Makefile&lt;/h2&gt; 
&lt;p&gt;A &lt;code&gt;Makefile&lt;/code&gt; is provided to automate most installation and build tasks for development. Some of the targets include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;make install&lt;/code&gt;: Installs in &lt;code&gt;release&lt;/code&gt; build mode with all dependency groups and extras.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-debug&lt;/code&gt;: Same as &lt;code&gt;make install&lt;/code&gt; but with &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-just-deps&lt;/code&gt;: Installs just the &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; dependencies (does not install package).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;: Runs the build script in &lt;code&gt;release&lt;/code&gt; build mode (default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-debug&lt;/code&gt;: Runs the build script in &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;release&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel-debug&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;debug&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make cargo-test&lt;/code&gt;: Runs all Rust crate tests using &lt;code&gt;cargo-nextest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Deletes all build results, such as &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt; files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make distclean&lt;/code&gt;: &lt;strong&gt;CAUTION&lt;/strong&gt; Removes all artifacts not in the git index from the repository. This includes source files which have not been &lt;code&gt;git add&lt;/code&gt;ed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make docs&lt;/code&gt;: Builds the documentation HTML using Sphinx.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pre-commit&lt;/code&gt;: Runs the pre-commit checks over all files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make ruff&lt;/code&gt;: Runs ruff over all files using the &lt;code&gt;pyproject.toml&lt;/code&gt; config (with autofix).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pytest&lt;/code&gt;: Runs all tests with &lt;code&gt;pytest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make test-performance&lt;/code&gt;: Runs performance tests with &lt;a href="https://codspeed.io"&gt;codspeed&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make help&lt;/code&gt; for documentation on all available make targets.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;See the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/crates/infrastructure/TESTS.md"&gt;crates/infrastructure/TESTS.md&lt;/a&gt; file for running the infrastructure integration tests.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Indicators and strategies can be developed in both Python and Cython. For performance and latency-sensitive applications, we recommend using Cython. Below are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/indicators/ema_python.py"&gt;indicator&lt;/a&gt; example written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/indicators/"&gt;indicator&lt;/a&gt; implementations written in Cython.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/strategies/"&gt;strategy&lt;/a&gt; examples written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/examples/backtest/"&gt;backtest&lt;/a&gt; examples using a &lt;code&gt;BacktestEngine&lt;/code&gt; directly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;p&gt;Docker containers are built using the base image &lt;code&gt;python:3.12-slim&lt;/code&gt; with the following variant tags:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:latest&lt;/code&gt; has the latest release version installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:latest&lt;/code&gt; has the latest release version installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can pull the container images as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/&amp;lt;image_variant_tag&amp;gt; --platform linux/amd64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can launch the backtest example container by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/jupyterlab:nightly --platform linux/amd64
docker run -p 8888:8888 ghcr.io/nautechsystems/jupyterlab:nightly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open your browser at the following address:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;http://127.0.0.1:8888/lab
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader currently exceeds the rate limit for Jupyter notebook logging (stdout output). Therefore, we set the &lt;code&gt;log_level&lt;/code&gt; to &lt;code&gt;ERROR&lt;/code&gt; in the examples. Lowering this level to see more logging will cause the notebook to hang during cell execution. We are investigating a fix that may involve either raising the configured rate limits for Jupyter or throttling the log flushing from Nautilus.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab/issues/12845"&gt;https://github.com/jupyterlab/jupyterlab/issues/12845&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/deshaw/jupyterlab-limit-output"&gt;https://github.com/deshaw/jupyterlab-limit-output&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;We aim to provide the most pleasant developer experience possible for this hybrid codebase of Python, Cython and Rust. See the &lt;a href="https://nautilustrader.io/docs/latest/developer_guide/index.html"&gt;Developer Guide&lt;/a&gt; for helpful information.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make build-debug&lt;/code&gt; to compile after changes to Rust or Cython code for the most efficient development workflow.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Testing with Rust&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://nexte.st"&gt;cargo-nextest&lt;/a&gt; is the standard Rust test runner for NautilusTrader. Its key benefit is isolating each test in its own process, ensuring test reliability by avoiding interference.&lt;/p&gt; 
&lt;p&gt;You can install cargo-nextest by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install cargo-nextest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run Rust tests with &lt;code&gt;make cargo-test&lt;/code&gt;, which uses &lt;strong&gt;cargo-nextest&lt;/strong&gt; with an efficient profile.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you for considering contributing to NautilusTrader! We welcome any and all help to improve the project. If you have an idea for an enhancement or a bug fix, the first step is to open an &lt;a href="https://github.com/nautechsystems/nautilus_trader/issues"&gt;issue&lt;/a&gt; on GitHub to discuss it with the team. This helps to ensure that your contribution will be well-aligned with the goals of the project and avoids duplication of effort.&lt;/p&gt; 
&lt;p&gt;Before getting started, be sure to review the &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md#open-source-scope"&gt;open-source scope&lt;/a&gt; outlined in the project’s roadmap to understand what’s in and out of scope.&lt;/p&gt; 
&lt;p&gt;Once you're ready to start working on your contribution, make sure to follow the guidelines outlined in the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file. This includes signing a Contributor License Agreement (CLA) to ensure that your contributions can be included in the project.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Pull requests should target the &lt;code&gt;develop&lt;/code&gt; branch (the default branch). This is where new features and improvements are integrated before release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Thank you again for your interest in NautilusTrader! We look forward to reviewing your contributions and working with you to improve the project.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our community of users and contributors on &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord&lt;/a&gt; to chat and stay up-to-date with the latest announcements and features of NautilusTrader. Whether you're a developer looking to contribute or just want to learn more about the platform, all are welcome on our Discord server.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader does not issue, promote, or endorse any cryptocurrency tokens. Any claims or communications suggesting otherwise are unauthorized and false.&lt;/p&gt; 
 &lt;p&gt;All official updates and communications from NautilusTrader will be shared exclusively through &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;, our &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord server&lt;/a&gt;, or our X (Twitter) account: &lt;a href="https://x.com/NautilusTrader"&gt;@NautilusTrader&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;If you encounter any suspicious activity, please report it to the appropriate platform and contact us at &lt;a href="mailto:info@nautechsystems.io"&gt;info@nautechsystems.io&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The source code for NautilusTrader is available on GitHub under the &lt;a href="https://www.gnu.org/licenses/lgpl-3.0.en.html"&gt;GNU Lesser General Public License v3.0&lt;/a&gt;. Contributions to the project are welcome and require the completion of a standard &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CLA.md"&gt;Contributor License Agreement (CLA)&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;NautilusTrader™ is developed and maintained by Nautech Systems, a technology company specializing in the development of high-performance trading systems. For more information, visit &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;© 2015-2025 Nautech Systems Pty Ltd. All rights reserved.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ns-logo.png" alt="nautechsystems" title="nautechsystems" /&gt; &lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ferris.png" width="128" /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fredolx/open-tv</title>
      <link>https://github.com/Fredolx/open-tv</link>
      <description>&lt;p&gt;Ultra-fast, simple and powerful cross-platform IPTV app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open TV&lt;/h1&gt; 
&lt;p&gt;Completely rewritten to accommodate new features and to be even speedier, Open TV has been carefully crafted to deliver the best IPTV experience.&lt;/p&gt; 
&lt;a href="https://apps.microsoft.com/detail/9PBWX3RKR1QX?launch=true&amp;amp;mode=mini"&gt; &lt;img src="https://get.microsoft.com/images/en-us%20dark.svg?sanitize=true" width="350" /&gt; &lt;/a&gt; 
&lt;a href="https://flathub.org/apps/dev.fredol.open-tv"&gt; &lt;img src="https://dl.flathub.org/assets/badges/flathub-badge-en.svg?sanitize=true" width="300" /&gt; &lt;/a&gt; 
&lt;a href="https://aur.archlinux.org/packages/open-tv-bin"&gt; &lt;img src="https://raw.githubusercontent.com/Fredolx/open-tv/refs/heads/main/readme_imgs/aur-open-tv.svg?sanitize=true" width="350" /&gt; &lt;/a&gt; 
&lt;a href="https://apps.apple.com/ca/app/open-tv-open-source-iptv/id6742751800"&gt; &lt;img src="https://raw.githubusercontent.com/Fredolx/open-tv/refs/heads/main/readme_imgs/app-store.svg?sanitize=true" width="300" /&gt; &lt;/a&gt; 
&lt;a href="https://play.google.com/store/apps/details?id=dev.fredol.open_tv"&gt; &lt;img src="https://raw.githubusercontent.com/Fredolx/open-tv/refs/heads/main/readme_imgs/gplay.png" /&gt; &lt;/a&gt; 
&lt;h1&gt;This project NEEDS your help. Please consider donating on &lt;a href="https://github.com/sponsors/Fredolx"&gt;Github&lt;/a&gt;, &lt;a href="https://paypal.me/fredolx"&gt;Paypal&lt;/a&gt; or directly by &lt;a href="https://raw.githubusercontent.com/Fredolx/open-tv/main/#donate-crypto-thank-you"&gt;crypto&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;I've been developing and maintaining this project alone and for entirely for free over the past 2 years. I am in dire need of support to continue developing this project. I've never added annoying donation pop-ups or anything of the sort to make sure you have the fastest and cleanest IPTV experience and I'm committed to keep this project FREE &amp;amp; OPEN-SOURCE. To keep that commitment, I need your support!&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/Fredolx/open-tv/raw/main/screenshots/demo1.png" alt="Image of the app" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Import your IPTV channels from any source (M3U File, M3U link, Xtream) 🗃️&lt;/li&gt; 
 &lt;li&gt;Record while watching 🎥&lt;/li&gt; 
 &lt;li&gt;Multi IPTV sources 🎊&lt;/li&gt; 
 &lt;li&gt;Control the UI from a TV remote 📺&lt;/li&gt; 
 &lt;li&gt;Super low RAM usage, crazy speeds, and instant search 🚅&lt;/li&gt; 
 &lt;li&gt;Refresh your sources when you need it 🔄&lt;/li&gt; 
 &lt;li&gt;Add channels to favorites 🌟&lt;/li&gt; 
 &lt;li&gt;Make your own custom channels&lt;/li&gt; 
 &lt;li&gt;Share your custom channels with friends&lt;/li&gt; 
 &lt;li&gt;Re-stream channels to friends or other devices (phone, tv)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;p&gt;If you are on Windows or use the flatpak on Linux; SKIP THIS PART.&lt;/p&gt; 
&lt;p&gt;The app depends on mpv, ffmpeg and yt-dlp. If you are on MacOS, you must use Brew or MacPorts to install those dependencies.&lt;/p&gt; 
&lt;p&gt;On Fedora, you must add rpmfusion to install those packages.&lt;/p&gt; 
&lt;p&gt;On Debian or LTS distro, I would strongly suggest using a backport for yt-dlp.&lt;/p&gt; 
&lt;p&gt;The Windows build &lt;strong&gt;comes with mpv included&lt;/strong&gt; (.msi), but you can still install mpv from a package manager of your choice to always have the latest version installed&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install mpv ffmpeg yt-dlp #MacOS
sudo dnf install mpv ffmpeg yt-dlp #Fedora
sudo zypper install mpv ffmpeg yt-dlp #OpenSUSE
sudo pacman -Syu mpv ffmpeg yt-dlp #Arch
sudo apt install mpv ffmpeg yt-dlp #Debian/Ubuntu
scoop install mpv ffmpeg yt-dlp # Windows
choco install mpv ffmpeg yt-dlp # Windows alternative
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Feedback&lt;/h2&gt; 
&lt;p&gt;Feel free to submit any kind of feedback by creating a new issue.&lt;/p&gt; 
&lt;h2&gt;Hotkeys&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;F1: Help&lt;/li&gt; 
 &lt;li&gt;Ctrl + a: Show all channels&lt;/li&gt; 
 &lt;li&gt;Ctrl + s: Show categories&lt;/li&gt; 
 &lt;li&gt;Ctrl + d: Show favorites&lt;/li&gt; 
 &lt;li&gt;Ctrl + f: Search&lt;/li&gt; 
 &lt;li&gt;Ctrl + q: Enable/Disable livestreams&lt;/li&gt; 
 &lt;li&gt;Ctrl + w: Enable/Disable movies&lt;/li&gt; 
 &lt;li&gt;Ctrl + e: Enable/Disable series&lt;/li&gt; 
 &lt;li&gt;Backspace/Esc: Go back&lt;/li&gt; 
 &lt;li&gt;Arrow keys/Tab/Shift+Tab: Navigation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you have a tv remote or air mouse that has slightly different bindings for general nav (back, up, down, left, right), please open an issue and I will add them if it's feasible. Otherwise, you can still use hwdb to make them match OpenTV's bindings.&lt;/p&gt; 
&lt;h2&gt;Settings explained&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Stream Caching&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Why enabling:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you have a slow internet connection/IPTV provider causing the stream to pause often&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Why disabling:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If the stream often drops completely. It will prevent the stream from jumping too far ahead/behind&lt;/li&gt; 
 &lt;li&gt;If you have a good internet/provider and want lower latency&lt;/li&gt; 
 &lt;li&gt;Can prevent some weird bugs/slowdowns&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Donate Crypto (Thank you!)&lt;/h2&gt; 
&lt;p&gt;BTC:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bc1q7v27u4mrxhtqzl97pcp4vl52npss760epsheu3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ETH:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;0x171D5B628eff75c98c141aD5584FffA209274365
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;LTC:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ltc1qzxgp2grt9ayvpv0dur7lgzgf88yp09h2ytmga0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;BCH:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bitcoincash:qz4mauqyytkvhp9yze0qhgn2nnlv4z5glckyysxg2n
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SOL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;AM7roSrxBKrS5mG7q6aXnQHZKh3ArtBxvG3x1B1VjKhj
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;BNB:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;0x0C8C5217a8044b3736aD82CCFB9f099597b65253
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;Open TV is an independent open-source project created to provide a fast and powerful IPTV experience. The name "Open TV" is used solely to represent this specific software and its purpose as described in the project documentation. Any other software, applications, or products bearing the same or similar name are unrelated to this project. Any resemblance to other software or applications is purely coincidental and unintended. We do not intend to cause confusion or imply affiliation with any other products or organizations that may share a similar name.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pola-rs/polars</title>
      <link>https://github.com/pola-rs/polars</link>
      <description>&lt;p&gt;Extremely fast Query Engine for DataFrames, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://pola.rs"&gt; &lt;img src="https://raw.githubusercontent.com/pola-rs/polars-static/master/banner/polars_github_banner.svg?sanitize=true" alt="Polars logo" /&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://crates.io/crates/polars"&gt; &lt;img src="https://img.shields.io/crates/v/polars.svg?sanitize=true" alt="crates.io Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://pypi.org/project/polars/"&gt; &lt;img src="https://img.shields.io/pypi/v/polars.svg?sanitize=true" alt="PyPi Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://www.npmjs.com/package/nodejs-polars"&gt; &lt;img src="https://img.shields.io/npm/v/nodejs-polars.svg?sanitize=true" alt="NPM Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://community.r-multiverse.org/polars"&gt; &lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fcommunity.r-multiverse.org%2Fapi%2Fpackages%2Fpolars&amp;amp;query=%24.Version&amp;amp;label=r-multiverse" alt="R-multiverse Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://doi.org/10.5281/zenodo.7697217"&gt; &lt;img src="https://zenodo.org/badge/DOI/10.5281/zenodo.7697217.svg?sanitize=true" alt="DOI Latest Release" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;b&gt;Documentation&lt;/b&gt;: &lt;a href="https://docs.pola.rs/api/python/stable/reference/index.html"&gt;Python&lt;/a&gt; - &lt;a href="https://docs.rs/polars/latest/polars/"&gt;Rust&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/nodejs-polars/index.html"&gt;Node.js&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/r-polars/index.html"&gt;R&lt;/a&gt; | &lt;b&gt;StackOverflow&lt;/b&gt;: &lt;a href="https://stackoverflow.com/questions/tagged/python-polars"&gt;Python&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/rust-polars"&gt;Rust&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/nodejs-polars"&gt;Node.js&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/r-polars"&gt;R&lt;/a&gt; | &lt;a href="https://docs.pola.rs/"&gt;User guide&lt;/a&gt; | &lt;a href="https://discord.gg/4UfP5cfBE7"&gt;Discord&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Polars: Extremely fast Query Engine for DataFrames, written in Rust&lt;/h2&gt; 
&lt;p&gt;Polars is an analytical query engine written for DataFrames. It is designed to be fast, easy to use and expressive. Key features are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lazy | Eager execution&lt;/li&gt; 
 &lt;li&gt;Streaming (larger-than-RAM datasets)&lt;/li&gt; 
 &lt;li&gt;Query optimization&lt;/li&gt; 
 &lt;li&gt;Multi-threaded&lt;/li&gt; 
 &lt;li&gt;Written in Rust&lt;/li&gt; 
 &lt;li&gt;SIMD&lt;/li&gt; 
 &lt;li&gt;Powerful expression API&lt;/li&gt; 
 &lt;li&gt;Front end in Python | Rust | NodeJS | R | SQL&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://arrow.apache.org/docs/format/Columnar.html"&gt;Apache Arrow Columnar Format&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To learn more, read the &lt;a href="https://docs.pola.rs/"&gt;user guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Performance 🚀🚀&lt;/h2&gt; 
&lt;h3&gt;Blazingly fast&lt;/h3&gt; 
&lt;p&gt;Polars is very fast. In fact, it is one of the best performing solutions available. See the &lt;a href="https://www.pola.rs/benchmarks.html"&gt;PDS-H benchmarks&lt;/a&gt; results.&lt;/p&gt; 
&lt;h3&gt;Lightweight&lt;/h3&gt; 
&lt;p&gt;Polars is also very lightweight. It comes with zero required dependencies, and this shows in the import times:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;polars: 70ms&lt;/li&gt; 
 &lt;li&gt;numpy: 104ms&lt;/li&gt; 
 &lt;li&gt;pandas: 520ms&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Handles larger-than-RAM data&lt;/h3&gt; 
&lt;p&gt;If you have data that does not fit into memory, Polars' query engine is able to process your query (or parts of your query) in a streaming fashion. This drastically reduces memory requirements, so you might be able to process your 250GB dataset on your laptop. Collect with &lt;code&gt;collect(engine='streaming')&lt;/code&gt; to run the query streaming.&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;p&gt;Install the latest Polars version with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install polars
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.pola.rs/user-guide/installation/#feature-flags"&gt;User Guide&lt;/a&gt; for more details on optional dependencies&lt;/p&gt; 
&lt;p&gt;To see the current Polars version and a full list of its optional dependencies, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;pl.show_versions()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Want to contribute? Read our &lt;a href="https://docs.pola.rs/development/contributing/"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Managed/Distributed Polars&lt;/h2&gt; 
&lt;p&gt;Do you want a managed solution or scale out to distributed clusters? Consider our &lt;a href="https://cloud.pola.rs/"&gt;offering&lt;/a&gt; and help the project!&lt;/p&gt; 
&lt;h2&gt;Python: compile Polars from source&lt;/h2&gt; 
&lt;p&gt;If you want a bleeding edge release or maximal performance you should compile Polars from source.&lt;/p&gt; 
&lt;p&gt;This can be done by going through the following steps in sequence:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the latest &lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://maturin.rs/"&gt;maturin&lt;/a&gt;: &lt;code&gt;pip install maturin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cd py-polars&lt;/code&gt; and choose one of the following: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;, slow binary with debug assertions and symbols, fast compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-release&lt;/code&gt;, fast binary without debug assertions, minimal debug symbols, long compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-nodebug-release&lt;/code&gt;, same as build-release but without any debug symbols, slightly faster to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-debug-release&lt;/code&gt;, same as build-release but with full debug symbols, slightly slower to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-dist-release&lt;/code&gt;, fastest binary, extreme compile times&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;By default the binary is compiled with optimizations turned on for a modern CPU. Specify &lt;code&gt;LTS_CPU=1&lt;/code&gt; with the command if your CPU is older and does not support e.g. AVX2.&lt;/p&gt; 
&lt;p&gt;Note that the Rust crate implementing the Python bindings is called &lt;code&gt;py-polars&lt;/code&gt; to distinguish from the wrapped Rust crate &lt;code&gt;polars&lt;/code&gt; itself. However, both the Python package and the Python module are named &lt;code&gt;polars&lt;/code&gt;, so you can &lt;code&gt;pip install polars&lt;/code&gt; and &lt;code&gt;import polars&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Using custom Rust functions in Python&lt;/h2&gt; 
&lt;p&gt;Extending Polars with UDFs compiled in Rust is easy. We expose PyO3 extensions for &lt;code&gt;DataFrame&lt;/code&gt; and &lt;code&gt;Series&lt;/code&gt; data structures. See more in &lt;a href="https://github.com/pola-rs/polars/tree/main/pyo3-polars"&gt;https://github.com/pola-rs/polars/tree/main/pyo3-polars&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Going big...&lt;/h2&gt; 
&lt;p&gt;Do you expect more than 2^32 (~4.2 billion) rows? Compile Polars with the &lt;code&gt;bigidx&lt;/code&gt; feature flag or, for Python users, install &lt;code&gt;pip install polars[rt64]&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Don't use this unless you hit the row boundary as the default build of Polars is faster and consumes less memory.&lt;/p&gt; 
&lt;h2&gt;Legacy&lt;/h2&gt; 
&lt;p&gt;Do you want Polars to run on an old CPU (e.g. dating from before 2011), or on an &lt;code&gt;x86-64&lt;/code&gt; build of Python on Apple Silicon under Rosetta? Install &lt;code&gt;pip install polars[rtcompat]&lt;/code&gt;. This version of Polars is compiled without &lt;a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions"&gt;AVX&lt;/a&gt; target features.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>paradigmxyz/reth</title>
      <link>https://github.com/paradigmxyz/reth</link>
      <description>&lt;p&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol, in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reth&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/bench.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/actions/workflows/bench.yml/badge.svg?sanitize=true" alt="bench status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/unit.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/workflows/unit/badge.svg?sanitize=true" alt="CI status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/lint.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/actions/workflows/lint.yml/badge.svg?sanitize=true" alt="cargo-lint status" /&gt;&lt;/a&gt; &lt;a href="https://t.me/paradigm_reth"&gt;&lt;img src="https://img.shields.io/endpoint?color=neon&amp;amp;logo=telegram&amp;amp;label=chat&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fparadigm%5Freth" alt="Telegram Chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-prod.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://paradigmxyz.github.io/reth/installation/installation.html"&gt;Install&lt;/a&gt;&lt;/strong&gt; | &lt;a href="https://reth.rs"&gt;User Docs&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs"&gt;Developer Docs&lt;/a&gt; | &lt;a href="https://reth.rs/docs"&gt;Crate Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Reth?&lt;/h2&gt; 
&lt;p&gt;Reth (short for Rust Ethereum, &lt;a href="https://x.com/kelvinfichter/status/1597653609411268608"&gt;pronunciation&lt;/a&gt;) is a new Ethereum full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient. Reth is an Execution Layer (EL) and is compatible with all Ethereum Consensus Layer (CL) implementations that support the &lt;a href="https://github.com/ethereum/execution-apis/tree/a0d03086564ab1838b462befbc083f873dcf0c0f/src/engine"&gt;Engine API&lt;/a&gt;. It is originally built and driven forward by &lt;a href="https://paradigm.xyz/"&gt;Paradigm&lt;/a&gt;, and is licensed under the Apache and MIT licenses.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;As a full Ethereum node, Reth allows users to connect to the Ethereum network and interact with the Ethereum blockchain. This includes sending and receiving transactions/logs/traces, as well as accessing and interacting with smart contracts. Building a successful Ethereum node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software.&lt;/p&gt; 
&lt;p&gt;More concretely, our goals are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Every component of Reth is built to be used as a library: well-tested, heavily documented and benchmarked. We envision that developers will import the node's crates, mix and match, and innovate on top of them. Examples of such usage include but are not limited to spinning up standalone P2P networks, talking directly to a node's database, or "unbundling" the node into the components you need. To achieve that, we are licensing Reth under the Apache/MIT permissive license. You can learn more about the project's components &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Reth aims to be fast, so we use Rust and the &lt;a href="https://erigon.substack.com/p/erigon-stage-sync-and-control-flows"&gt;Erigon staged-sync&lt;/a&gt; node architecture. We also use our Ethereum libraries (including &lt;a href="https://github.com/alloy-rs/alloy/"&gt;Alloy&lt;/a&gt; and &lt;a href="https://github.com/bluealloy/revm/"&gt;revm&lt;/a&gt;) which we've battle-tested and optimized via &lt;a href="https://github.com/foundry-rs/foundry/"&gt;Foundry&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free for anyone to use any way they want&lt;/strong&gt;: Reth is free open source software, built for the community, by the community. By licensing the software under the Apache/MIT license, we want developers to use it without being bound by business licenses, or having to think about the implications of GPL-like licenses.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Client Diversity&lt;/strong&gt;: The Ethereum protocol becomes more antifragile when no node implementation dominates. This ensures that if there's a software bug, the network does not finalize a bad block. By building a new client, we hope to contribute to Ethereum's antifragility.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support as many EVM chains as possible&lt;/strong&gt;: We aspire that Reth can full-sync not only Ethereum, but also other chains like Optimism, Polygon, BNB Smart Chain, and more. If you're working on any of these projects, please reach out.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Configurability&lt;/strong&gt;: We want to solve for node operators that care about fast historical queries, but also for hobbyists who cannot operate on large hardware. We also want to support teams and individuals who want both sync from genesis and via "fast sync". We envision that Reth will be configurable enough and provide configurable "profiles" for the tradeoffs that each team faces.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. We also actively recommend professional node operators to switch to Reth in production for performance and cost reasons in use cases where high performance with great margins is required such as RPC, MEV, Indexing, Simulations, and P2P activities.&lt;/p&gt; 
&lt;p&gt;More historical context below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We released 1.0 "production-ready" stable Reth in June 2024. 
  &lt;ul&gt; 
   &lt;li&gt;Reth completed an audit with &lt;a href="https://sigmaprime.io/"&gt;Sigma Prime&lt;/a&gt;, the developers of &lt;a href="https://github.com/sigp/lighthouse"&gt;Lighthouse&lt;/a&gt;, the Rust Consensus Layer implementation. Find it &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/audit/sigma_prime_audit_v2.pdf"&gt;here&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Revm (the EVM used in Reth) underwent an audit with &lt;a href="https://x.com/guidovranken"&gt;Guido Vranken&lt;/a&gt; (#1 &lt;a href="https://ethereum.org/en/bug-bounty"&gt;Ethereum Bug Bounty&lt;/a&gt;). We will publish the results soon.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;We released multiple iterative beta versions, up to &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.9"&gt;beta.9&lt;/a&gt; on Monday June 3, 2024,the last beta release.&lt;/li&gt; 
 &lt;li&gt;We released &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1"&gt;beta&lt;/a&gt; on Monday March 4, 2024, our first breaking change to the database model, providing faster query speed, smaller database footprint, and allowing "history" to be mounted on separate drives.&lt;/li&gt; 
 &lt;li&gt;We shipped iterative improvements until the last alpha release on February 28, 2024, &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.21"&gt;0.1.0-alpha.21&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;We &lt;a href="https://www.paradigm.xyz/2023/06/reth-alpha"&gt;initially announced&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.1"&gt;0.1.0-alpha.1&lt;/a&gt; on June 20, 2023.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database compatibility&lt;/h3&gt; 
&lt;p&gt;We do not have any breaking database changes since beta.1, and we do not plan any in the near future.&lt;/p&gt; 
&lt;p&gt;Reth &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1"&gt;v0.2.0-beta.1&lt;/a&gt; includes a &lt;a href="https://github.com/paradigmxyz/reth/pull/5191"&gt;set of breaking database changes&lt;/a&gt; that makes it impossible to use database files produced by earlier versions.&lt;/p&gt; 
&lt;p&gt;If you had a database produced by alpha versions of Reth, you need to drop it with &lt;code&gt;reth db drop&lt;/code&gt; (using the same arguments such as &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;--datadir&lt;/code&gt; that you passed to &lt;code&gt;reth node&lt;/code&gt;), and resync using the same &lt;code&gt;reth node&lt;/code&gt; command you've used before.&lt;/p&gt; 
&lt;h2&gt;For Users&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://reth.rs/"&gt;Reth documentation&lt;/a&gt; for instructions on how to install and run Reth.&lt;/p&gt; 
&lt;h2&gt;For Developers&lt;/h2&gt; 
&lt;h3&gt;Using reth as a library&lt;/h3&gt; 
&lt;p&gt;You can use individual crates of reth in your project.&lt;/p&gt; 
&lt;p&gt;The crate docs can be found &lt;a href="https://reth.rs/docs/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For a general overview of the crates, see &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;Project Layout&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you want to contribute, or follow along with contributor discussion, you can use our &lt;a href="https://t.me/paradigm_reth"&gt;main telegram&lt;/a&gt; to chat with us about the development of Reth!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Our contributor guidelines can be found in &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;See our &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs"&gt;contributor docs&lt;/a&gt; for more information on the project. A good starting point is &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;Project Layout&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building and testing&lt;/h3&gt; 
&lt;!--
When updating this, also update:
- Cargo.toml
- .github/workflows/lint.yml
--&gt; 
&lt;p&gt;The Minimum Supported Rust Version (MSRV) of this project is &lt;a href="https://blog.rust-lang.org/2025/06/26/Rust-1.88.0/"&gt;1.88.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the docs for detailed instructions on how to &lt;a href="https://reth.rs/installation/source/"&gt;build from source&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To fully test Reth, you will need to have &lt;a href="https://geth.ethereum.org/docs/getting-started/installing-geth"&gt;Geth installed&lt;/a&gt;, but it is possible to run a subset of tests without Geth.&lt;/p&gt; 
&lt;p&gt;First, clone the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/paradigmxyz/reth
cd reth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, run the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo nextest run --workspace

# Run the Ethereum Foundation tests
make ef-tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We highly recommend using &lt;a href="https://nexte.st/"&gt;&lt;code&gt;cargo nextest&lt;/code&gt;&lt;/a&gt; to speed up testing. Using &lt;code&gt;cargo test&lt;/code&gt; to run tests may work fine, but this is not tested and does not support more advanced features like retries for spurious failures.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Some tests use random number generators to generate test data. If you want to use a deterministic seed, you can set the &lt;code&gt;SEED&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you have any questions, first see if the answer to your question can be found in the &lt;a href="https://reth.rs/"&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If the answer is not there:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join the &lt;a href="https://t.me/paradigm_reth"&gt;Telegram&lt;/a&gt; to get help, or&lt;/li&gt; 
 &lt;li&gt;Open a &lt;a href="https://github.com/paradigmxyz/reth/discussions/new"&gt;discussion&lt;/a&gt; with your question, or&lt;/li&gt; 
 &lt;li&gt;Open an issue with &lt;a href="https://github.com/paradigmxyz/reth/issues/new?assignees=&amp;amp;labels=C-bug%2CS-needs-triage&amp;amp;projects=&amp;amp;template=bug.yml"&gt;the bug&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/SECURITY.md"&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Reth is a new implementation of the Ethereum protocol. In the process of developing the node we investigated the design decisions other nodes have made to understand what is done well, what is not, and where we can improve the status quo.&lt;/p&gt; 
&lt;p&gt;None of this would have been possible without them, so big shoutout to the teams below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ethereum/go-ethereum/"&gt;Geth&lt;/a&gt;: We would like to express our heartfelt gratitude to the go-ethereum team for their outstanding contributions to Ethereum over the years. Their tireless efforts and dedication have helped to shape the Ethereum ecosystem and make it the vibrant and innovative community it is today. Thank you for your hard work and commitment to the project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ledgerwatch/erigon"&gt;Erigon&lt;/a&gt; (fka Turbo-Geth): Erigon pioneered the &lt;a href="https://erigon.substack.com/p/erigon-stage-sync-and-control-flows"&gt;"Staged Sync" architecture&lt;/a&gt; that Reth is using, as well as &lt;a href="https://github.com/ledgerwatch/erigon/wiki/Choice-of-storage-engine"&gt;introduced MDBX&lt;/a&gt; as the database of choice. We thank Erigon for pushing the state of the art research on the performance limits of Ethereum nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/akula-bft/akula/"&gt;Akula&lt;/a&gt;: Reth uses forks of the Apache versions of Akula's &lt;a href="https://github.com/paradigmxyz/reth/pull/132"&gt;MDBX Bindings&lt;/a&gt;, &lt;a href="https://github.com/paradigmxyz/reth/pull/63"&gt;FastRLP&lt;/a&gt; and &lt;a href="https://github.com/paradigmxyz/reth/pull/80"&gt;ECIES&lt;/a&gt;. Given that these packages were already released under the Apache License, and they implement standardized solutions, we decided not to reimplement them to iterate faster. We thank the Akula team for their contributions to the Rust Ethereum ecosystem and for publishing these packages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Warning&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;NippyJar&lt;/code&gt; and &lt;code&gt;Compact&lt;/code&gt; encoding formats and their implementations are designed for storing and retrieving data internally. They are not hardened to safely read potentially malicious data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kata-containers/kata-containers</title>
      <link>https://github.com/kata-containers/kata-containers</link>
      <description>&lt;p&gt;Kata Containers is an open source project and community working to build a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs. https://katacontainers.io/&lt;/p&gt;&lt;hr&gt;&lt;img src="https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-images-prod/openstack-logo/kata/SVG/kata-1.svg?sanitize=true" width="900" /&gt; 
&lt;p&gt;&lt;a href="https://github.com/kata-containers/kata-containers/actions/workflows/payload-after-push.yaml"&gt;&lt;img src="https://github.com/kata-containers/kata-containers/actions/workflows/payload-after-push.yaml/badge.svg?sanitize=true" alt="CI | Publish Kata Containers payload" /&gt;&lt;/a&gt; &lt;a href="https://github.com/kata-containers/kata-containers/actions/workflows/ci-nightly.yaml"&gt;&lt;img src="https://github.com/kata-containers/kata-containers/actions/workflows/ci-nightly.yaml/badge.svg?sanitize=true" alt="Kata Containers Nightly CI" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/kata-containers/kata-containers"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/kata-containers/kata-containers/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Kata Containers&lt;/h1&gt; 
&lt;p&gt;Welcome to Kata Containers!&lt;/p&gt; 
&lt;p&gt;This repository is the home of the Kata Containers code for the 2.0 and newer releases.&lt;/p&gt; 
&lt;p&gt;If you want to learn about Kata Containers, visit the main &lt;a href="https://katacontainers.io"&gt;Kata Containers website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Kata Containers is an open source project and community working to build a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The code is licensed under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/LICENSE"&gt;the license file&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;Kata Containers currently runs on 64-bit systems supporting the following technologies:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Architecture&lt;/th&gt; 
   &lt;th&gt;Virtualization technology&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.intel.com"&gt;Intel&lt;/a&gt; VT-x, AMD SVM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;aarch64&lt;/code&gt; ("&lt;code&gt;arm64&lt;/code&gt;")&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.arm.com"&gt;ARM&lt;/a&gt; Hyp&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ppc64le&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ibm.com"&gt;IBM&lt;/a&gt; Power&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;s390x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ibm.com"&gt;IBM&lt;/a&gt; Z &amp;amp; LinuxONE SIE&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Hardware requirements&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime"&gt;Kata Containers runtime&lt;/a&gt; provides a command to determine if your host system is capable of running and creating a Kata Container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ kata-runtime check
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;This command runs a number of checks including connecting to the network to determine if a newer release of Kata Containers is available on GitHub. If you do not wish this to check to run, add the &lt;code&gt;--no-network-checks&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;By default, only a brief success / failure message is printed. If more details are needed, the &lt;code&gt;--verbose&lt;/code&gt; flag can be used to display the list of all the checks performed.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If the command is run as the &lt;code&gt;root&lt;/code&gt; user additional checks are run (including checking if another incompatible hypervisor is running). When running as &lt;code&gt;root&lt;/code&gt;, network checks are automatically disabled.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install"&gt;installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs"&gt;official documentation&lt;/a&gt; including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install"&gt;Installation guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/Developer-Guide.md"&gt;Developer guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design"&gt;Design documents&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design/architecture"&gt;Architecture overview&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design/architecture_3.0/"&gt;Architecture 3.0 overview&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Kata Containers uses a single &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime/README.md#configuration"&gt;configuration file&lt;/a&gt; which contains a number of sections for various parts of the Kata Containers system including the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime"&gt;runtime&lt;/a&gt;, the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/agent"&gt;agent&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/#hypervisors"&gt;hypervisor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Hypervisors&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/hypervisors.md"&gt;hypervisors document&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime/README.md#hypervisor-specific-configuration"&gt;Hypervisor specific configuration details&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;To learn more about the project, its community and governance, see the &lt;a href="https://github.com/kata-containers/community"&gt;community repository&lt;/a&gt;. This is the first place to go if you wish to contribute to the project.&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/#community"&gt;community&lt;/a&gt; section for ways to contact us.&lt;/p&gt; 
&lt;h3&gt;Raising issues&lt;/h3&gt; 
&lt;p&gt;Please raise an issue &lt;a href="https://github.com/kata-containers/kata-containers/issues"&gt;in this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are reporting a security issue, please follow the &lt;a href="https://github.com/kata-containers/community#vulnerability-handling"&gt;vulnerability reporting process&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Developers&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/Developer-Guide.md"&gt;developer guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Components&lt;/h3&gt; 
&lt;h3&gt;Main components&lt;/h3&gt; 
&lt;p&gt;The table below lists the core parts of the project:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime"&gt;runtime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;Main component run by a container manager and providing a containerd shimv2 runtime implementation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime-rs"&gt;runtime-rs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;The Rust version runtime.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/agent"&gt;agent&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;Management process running inside the virtual machine / POD that sets up the container environment.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/dragonball"&gt;&lt;code&gt;dragonball&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;An optional built-in VMM brings out-of-the-box Kata Containers experience with optimizations on container workloads&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs"&gt;documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;documentation&lt;/td&gt; 
   &lt;td&gt;Documentation common to all components (such as design and install documentation).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests"&gt;tests&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;tests&lt;/td&gt; 
   &lt;td&gt;Excludes unit tests which live with the main code.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Additional components&lt;/h3&gt; 
&lt;p&gt;The table below lists the remaining parts of the project:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging"&gt;packaging&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Scripts and metadata for producing packaged binaries&lt;br /&gt;(components, hypervisors, kernel and rootfs).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org"&gt;kernel&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;kernel&lt;/td&gt; 
   &lt;td&gt;Linux kernel used by the hypervisor to boot the guest image. Patches are stored &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging/kernel"&gt;here&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/osbuilder"&gt;osbuilder&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Tool to create "mini O/S" rootfs and initrd images and kernel for the hypervisor.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging/kata-debug/README.md"&gt;kata-debug&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Utility tool to gather Kata Containers debug information from Kubernetes clusters.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/agent-ctl"&gt;&lt;code&gt;agent-ctl&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Tool that provides low-level access for testing the agent.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/kata-ctl"&gt;&lt;code&gt;kata-ctl&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Tool that provides advanced commands and debug facilities.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/trace-forwarder"&gt;&lt;code&gt;trace-forwarder&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Agent tracing helper.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/runk"&gt;&lt;code&gt;runk&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Standard OCI container runtime based on the agent.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/.github/workflows"&gt;&lt;code&gt;ci&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CI&lt;/td&gt; 
   &lt;td&gt;Continuous Integration configuration files and scripts.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/ci/openshift-ci/README.md"&gt;&lt;code&gt;ocp-ci&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CI&lt;/td&gt; 
   &lt;td&gt;Continuous Integration configuration for the OpenShift pipelines.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/kata-containers/www.katacontainers.io"&gt;&lt;code&gt;katacontainers.io&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Source for the &lt;a href="https://www.katacontainers.io"&gt;&lt;code&gt;katacontainers.io&lt;/code&gt;&lt;/a&gt; site.&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/testing/kata-webhook/README.md"&gt;&lt;code&gt;Webhook&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Example of a simple admission controller webhook to annotate pods with the Kata runtime class&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Packaging and releases&lt;/h3&gt; 
&lt;p&gt;Kata Containers is now &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install/README.md#packaged-installation-methods"&gt;available natively for most distributions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;General tests&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests/README.md"&gt;tests documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Metrics tests&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests/metrics/README.md"&gt;metrics documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Glossary of Terms&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/kata-containers/kata-containers/wiki/Glossary"&gt;glossary of terms&lt;/a&gt; related to Kata Containers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bootandy/dust</title>
      <link>https://github.com/bootandy/dust</link>
      <description>&lt;p&gt;A more intuitive version of du in rust&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/bootandy/dust/actions"&gt;&lt;img src="https://github.com/bootandy/dust/actions/workflows/CICD.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Dust&lt;/h1&gt; 
&lt;p&gt;du + rust = dust. Like du but more intuitive.&lt;/p&gt; 
&lt;h1&gt;Why&lt;/h1&gt; 
&lt;p&gt;Because I want an easy way to see where my disk is being used.&lt;/p&gt; 
&lt;h1&gt;Demo&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bootandy/dust/master/media/snap.png" alt="Example" /&gt;&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;h4&gt;Cargo &lt;a href="https://repology.org/project/du-dust/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/du-dust.svg?sanitize=true" alt="Packaging status" align="right" /&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cargo install du-dust&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;🍺 Homebrew (Mac OS)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;brew install dust&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;🍺 Homebrew (Linux)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;brew install dust&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;a href="https://ubuntu.com/core/services/guide/snaps-intro"&gt;Snap&lt;/a&gt; Ubuntu and &lt;a href="https://snapcraft.io/docs/installing-snapd"&gt;supported systems&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;snap install dust&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: &lt;code&gt;dust&lt;/code&gt; installed through &lt;code&gt;snap&lt;/code&gt; can only access files stored in the &lt;code&gt;/home&lt;/code&gt; directory. See daniejstriata/dust-snap#2 for more information.&lt;/p&gt; 
&lt;h4&gt;&lt;a href="https://github.com/pacstall/pacstall"&gt;Pacstall&lt;/a&gt; (Debian/Ubuntu)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;pacstall -I dust-bin&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Anaconda (conda-forge)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;conda install -c conda-forge dust&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;a href="https://github.com/wimpysworld/deb-get"&gt;deb-get&lt;/a&gt; (Debian/Ubuntu)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;deb-get install du-dust&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;a href="https://www.x-cmd.com/pkg/#VPContent"&gt;x-cmd&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;x env use dust&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Windows:&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;scoop install dust&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Windows GNU version - works&lt;/li&gt; 
 &lt;li&gt;Windows MSVC - requires: &lt;a href="https://docs.microsoft.com/en-gb/cpp/windows/latest-supported-vc-redist?view=msvc-170"&gt;VCRUNTIME140.dll&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Download&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download Linux/Mac binary from &lt;a href="https://github.com/bootandy/dust/releases"&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;unzip file: &lt;code&gt;tar -xvf _downloaded_file.tar.gz&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;move file to executable path: &lt;code&gt;sudo mv dust /usr/local/bin/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Dust is meant to give you an instant overview of which directories are using disk space without requiring sort or head. Dust will print a maximum of one 'Did not have permissions message'.&lt;/p&gt; 
&lt;p&gt;Dust will list a slightly-less-than-the-terminal-height number of the biggest subdirectories or files and will smartly recurse down the tree to find the larger ones. There is no need for a '-d' flag or a '-h' flag. The largest subdirectories will be colored.&lt;/p&gt; 
&lt;p&gt;The different colors on the bars: These represent the combined tree hierarchy &amp;amp; disk usage. The shades of grey are used to indicate which parent folder a subfolder belongs to. For instance, look at the above screenshot. &lt;code&gt;.steam&lt;/code&gt; is a folder taking 44% of the space. From the &lt;code&gt;.steam&lt;/code&gt; bar is a light grey line that goes up. All these folders are inside &lt;code&gt;.steam&lt;/code&gt; so if you delete &lt;code&gt;.steam&lt;/code&gt; all that stuff will be gone too.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Usage: dust
Usage: dust &amp;lt;dir&amp;gt;
Usage: dust &amp;lt;dir&amp;gt;  &amp;lt;another_dir&amp;gt; &amp;lt;and_more&amp;gt;
Usage: dust -p (full-path - Show fullpath of the subdirectories)
Usage: dust -s (apparent-size - shows the length of the file as opposed to the amount of disk space it uses)
Usage: dust -n 30  (Shows 30 directories instead of the default [default is terminal height])
Usage: dust -d 3  (Shows 3 levels of subdirectories)
Usage: dust -D (Show only directories (eg dust -D))
Usage: dust -F (Show only files - finds your largest files)
Usage: dust -r (reverse order of output)
Usage: dust -o si/b/kb/kib/mb/mib/gb/gib (si - prints sizes in powers of 1000. Others print size in that format).
Usage: dust -X ignore  (ignore all files and directories with the name 'ignore')
Usage: dust -x (Only show directories on the same filesystem)
Usage: dust -b (Do not show percentages or draw ASCII bars)
Usage: dust -B (--bars-on-right - Percent bars moved to right side of screen)
Usage: dust -i (Do not show hidden files)
Usage: dust -c (No colors [monochrome])
Usage: dust -C (Force colors)
Usage: dust -f (Count files instead of diskspace [Counts by inode, to include duplicate inodes use dust -f -s])
Usage: dust -t (Group by filetype)
Usage: dust -z 10M (min-size, Only include files larger than 10M)
Usage: dust -e regex (Only include files matching this regex (eg dust -e "\.png$" would match png files))
Usage: dust -v regex (Exclude files matching this regex (eg dust -v "\.png$" would ignore png files))
Usage: dust -L (dereference-links - Treat sym links as directories and go into them)
Usage: dust -P (Disable the progress indicator)
Usage: dust -R (For screen readers. Removes bars/symbols. Adds new column: depth level. (May want to use -p for full path too))
Usage: dust -S (Custom Stack size - Use if you see: 'fatal runtime error: stack overflow' (default allocation: low memory=1048576, high memory=1073741824)"),
Usage: dust --skip-total (No total row will be displayed)
Usage: dust -z 40000/30MB/20kib (Exclude output files/directories below size 40000 bytes / 30MB / 20KiB)
Usage: dust -j (Prints JSON representation of directories, try: dust -j  | jq)
Usage: dust --files0-from=FILE (Read NUL-terminated file paths from FILE; if FILE is '-', read from stdin)
Usage: dust --files-from=FILE (Read newline-terminated file paths from FILE; if FILE is '-', read from stdin)
Usage: dust --collapse=node-modules will keep the node-modules folder collapsed in display instead of recursively opening it
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Config file&lt;/h2&gt; 
&lt;p&gt;Dust has a config file where the above options can be set. Either: &lt;code&gt;~/.config/dust/config.toml&lt;/code&gt; or &lt;code&gt;~/.dust.toml&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cat ~/.config/dust/config.toml
reverse=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dev.yorhel.nl/ncdu"&gt;NCDU&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nachoparker/dutree"&gt;dutree&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Byron/dua-cli/"&gt;dua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KSXGitHub/parallel-disk-usage"&gt;pdu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/scullionw/dirstat-rs"&gt;dirstat-rs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;du -d 1 -h | sort -h&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: Apparent-size is calculated slightly differently in dust to gdu. In dust each hard link is counted as using file_length space. In gdu only the first entry is counted.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typst/packages</title>
      <link>https://github.com/typst/packages</link>
      <description>&lt;p&gt;Packages for Typst.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Typst Packages&lt;/h1&gt; 
&lt;p&gt;The package repository for Typst, where package authors submit their packages. The packages submitted here are available on &lt;a href="https://typst.app/universe/"&gt;Typst Universe&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Package format&lt;/h2&gt; 
&lt;p&gt;A package is a collection of Typst files and assets that can be imported as a unit. A &lt;code&gt;typst.toml&lt;/code&gt; manifest with metadata is required at the root of a package. &lt;a href="https://raw.githubusercontent.com/typst/packages/main/docs/manifest.md"&gt;Read more about the manifest format&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Published packages&lt;/h2&gt; 
&lt;p&gt;This repository contains a collection of published packages. Due to its early and experimental nature, all packages in this repository are scoped in a &lt;code&gt;preview&lt;/code&gt; namespace. A package that is stored in &lt;code&gt;packages/preview/{name}/{version}&lt;/code&gt; in this repository will become available in Typst as &lt;code&gt;#import "@preview/{name}:{version}"&lt;/code&gt;. You must always specify the full package version.&lt;/p&gt; 
&lt;p&gt;You can use template packages to create new Typst projects with the CLI with the &lt;code&gt;typst init&lt;/code&gt; command or the web application by clicking the &lt;em&gt;Start from template&lt;/em&gt; button.&lt;/p&gt; 
&lt;p&gt;If you want to submit your own package, you can follow &lt;a href="https://raw.githubusercontent.com/typst/packages/main/docs/README.md"&gt;our documentation on publishing packages&lt;/a&gt; that will guide you through the process and give you some tips.&lt;/p&gt; 
&lt;h3&gt;Downloads&lt;/h3&gt; 
&lt;p&gt;The Typst compiler downloads packages from the &lt;code&gt;preview&lt;/code&gt; namespace on-demand. Once used, they are cached in &lt;code&gt;{cache-dir}/typst/packages/preview&lt;/code&gt; where &lt;code&gt;{cache-dir}&lt;/code&gt; is&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$XDG_CACHE_HOME&lt;/code&gt; or &lt;code&gt;~/.cache&lt;/code&gt; on Linux&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;~/Library/Caches&lt;/code&gt; on macOS&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;%LOCALAPPDATA%&lt;/code&gt; on Windows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Importing a cached package does not result in network access.&lt;/p&gt; 
&lt;h2&gt;Local packages&lt;/h2&gt; 
&lt;p&gt;Want to install a package locally on your system without publishing it or experiment with it before publishing? You can store packages in &lt;code&gt;{data-dir}/typst/packages/{namespace}/{name}/{version}&lt;/code&gt; to make them available locally on your system. Here, &lt;code&gt;{data-dir}&lt;/code&gt; is&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$XDG_DATA_HOME&lt;/code&gt; or &lt;code&gt;~/.local/share&lt;/code&gt; on Linux&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;~/Library/Application Support&lt;/code&gt; on macOS&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;%APPDATA%&lt;/code&gt; on Windows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can create an arbitrary &lt;code&gt;{namespace}&lt;/code&gt;. A good namespace for system-local packages is &lt;code&gt;local&lt;/code&gt;. Using this namespace:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Store a package in &lt;code&gt;{data-dir}/typst/packages/local/mypkg/1.0.0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Import from it with &lt;code&gt;#import "@local/mypkg:1.0.0": *&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Packages in the data directory have precedence over ones in the cache directory.&lt;/p&gt; 
&lt;p&gt;Note that future iterations of Typst's package management may change/break this local setup.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The infrastructure around the package repository is licensed under the terms of the Apache-2.0 license. Packages in &lt;code&gt;packages/&lt;/code&gt; are licensed under their respective license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openai/codex</title>
      <link>https://github.com/openai/codex</link>
      <description>&lt;p&gt;Lightweight coding agent that runs in your terminal&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt;&lt;code&gt;npm i -g @openai/codex&lt;/code&gt;&lt;br /&gt;or &lt;code&gt;brew install --cask codex&lt;/code&gt;&lt;/p&gt; 
&lt;p align="center"&gt;&lt;strong&gt;Codex CLI&lt;/strong&gt; is a coding agent from OpenAI that runs locally on your computer. &lt;br /&gt; &lt;br /&gt;If you want Codex in your code editor (VS Code, Cursor, Windsurf), &lt;a href="https://developers.openai.com/codex/ide"&gt;install in your IDE&lt;/a&gt; &lt;br /&gt;If you are looking for the &lt;em&gt;cloud-based agent&lt;/em&gt; from OpenAI, &lt;strong&gt;Codex Web&lt;/strong&gt;, go to &lt;a href="https://chatgpt.com/codex"&gt;chatgpt.com/codex&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-splash.png" alt="Codex CLI splash" width="80%" /&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Installing and running Codex CLI&lt;/h3&gt; 
&lt;p&gt;Install globally with your preferred package manager. If you use npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;npm install -g @openai/codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if you use Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;brew install --cask codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then simply run &lt;code&gt;codex&lt;/code&gt; to get started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're running into upgrade issues with Homebrew, see the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/faq.md#brew-update-codex-isnt-upgrading-me"&gt;FAQ entry on brew upgrade codex&lt;/a&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;You can also go to the &lt;a href="https://github.com/openai/codex/releases/latest"&gt;latest GitHub Release&lt;/a&gt; and download the appropriate binary for your platform.&lt;/summary&gt; 
 &lt;p&gt;Each GitHub Release contains many executables, but in practice, you likely want one of these:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;macOS 
   &lt;ul&gt; 
    &lt;li&gt;Apple Silicon/arm64: &lt;code&gt;codex-aarch64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;x86_64 (older Mac hardware): &lt;code&gt;codex-x86_64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Linux 
   &lt;ul&gt; 
    &lt;li&gt;x86_64: &lt;code&gt;codex-x86_64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;arm64: &lt;code&gt;codex-aarch64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Each archive contains a single entry with the platform baked into the name (e.g., &lt;code&gt;codex-x86_64-unknown-linux-musl&lt;/code&gt;), so you likely want to rename it to &lt;code&gt;codex&lt;/code&gt; after extracting it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using Codex with your ChatGPT plan&lt;/h3&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-login.png" alt="Codex CLI login" width="80%" /&gt; &lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;codex&lt;/code&gt; and select &lt;strong&gt;Sign in with ChatGPT&lt;/strong&gt;. We recommend signing into your ChatGPT account to use Codex as part of your Plus, Pro, Team, Edu, or Enterprise plan. &lt;a href="https://help.openai.com/en/articles/11369540-codex-in-chatgpt"&gt;Learn more about what's included in your ChatGPT plan&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also use Codex with an API key, but this requires &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#usage-based-billing-alternative-use-an-openai-api-key"&gt;additional setup&lt;/a&gt;. If you previously used an API key for usage-based billing, see the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#migrating-from-usage-based-billing-api-key"&gt;migration steps&lt;/a&gt;. If you're having trouble with login, please comment on &lt;a href="https://github.com/openai/codex/issues/1243"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Model Context Protocol (MCP)&lt;/h3&gt; 
&lt;p&gt;Codex can access MCP servers. To configure them, refer to the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md#mcp_servers"&gt;config docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;Codex CLI supports a rich set of configuration options, with preferences stored in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;. For full configuration options, see &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Docs &amp;amp; FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md"&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#cli-usage"&gt;CLI usage&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#running-with-a-prompt-as-input"&gt;Running with a prompt as input&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#example-prompts"&gt;Example prompts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/prompts.md"&gt;Custom prompts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#memory-with-agentsmd"&gt;Memory with AGENTS.md&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/sandbox.md"&gt;&lt;strong&gt;Sandbox &amp;amp; approvals&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md"&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#forcing-a-specific-auth-method-advanced"&gt;Auth methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#connecting-on-a-headless-machine"&gt;Login on a "Headless" machine&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automating Codex&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/openai/codex-action"&gt;GitHub Action&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/sdk/typescript/README.md"&gt;TypeScript SDK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/exec.md"&gt;Non-interactive mode (&lt;code&gt;codex exec&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md"&gt;&lt;strong&gt;Advanced&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#tracing--verbose-logging"&gt;Tracing / verbose logging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#model-context-protocol-mcp"&gt;Model Context Protocol (MCP)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/zdr.md"&gt;&lt;strong&gt;Zero data retention (ZDR)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/contributing.md"&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md"&gt;&lt;strong&gt;Install &amp;amp; build&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#system-requirements"&gt;System Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#dotslash"&gt;DotSlash&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#build-from-source"&gt;Build from source&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/faq.md"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/open-source-fund.md"&gt;&lt;strong&gt;Open source fund&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/LICENSE"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ratatui/ratatui</title>
      <link>https://github.com/ratatui/ratatui</link>
      <description>&lt;p&gt;A Rust crate for cooking up terminal user interfaces (TUIs) 👨‍🍳🐀 https://ratatui.rs&lt;/p&gt;&lt;hr&gt;&lt;details&gt; 
 &lt;summary&gt;Table of Contents&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/#quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/#templates"&gt;Templates&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/#built-with-ratatui"&gt;Built with Ratatui&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/#alternatives"&gt;Alternatives&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/#acknowledgements"&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;img src="https://github.com/ratatui/ratatui/raw/b23480adfa9430697071c906c7ba4d4f9bd37a73/assets/release-header.png?raw=true" alt="Release header" /&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://crates.io/crates/ratatui"&gt;&lt;img src="https://img.shields.io/crates/v/ratatui?logo=rust&amp;amp;style=flat-square&amp;amp;color=E05D44" alt="Crate Badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ratatui/ratatui"&gt;&lt;img src="https://img.shields.io/badge/repo-ratatui/ratatui-1370D3?style=flat-square&amp;amp;logo=github" alt="Repo Badge" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/ratatui"&gt;&lt;img src="https://img.shields.io/badge/docs-ratatui-1370D3?style=flat-square&amp;amp;logo=rust" alt="Docs Badge" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/ratatui?style=flat-square&amp;amp;color=1370D3" alt="License Badge" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/ratatui/ratatui/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/ratatui/ratatui/ci.yml?style=flat-square&amp;amp;logo=github" alt="CI Badge" /&gt;&lt;/a&gt; &lt;a href="https://deps.rs/repo/github/ratatui/ratatui?path=ratatui"&gt;&lt;img src="https://deps.rs/repo/github/ratatui/ratatui/status.svg?path=ratatui&amp;amp;style=flat-square" alt="Deps Badge" /&gt;&lt;/a&gt; &lt;a href="https://app.codecov.io/gh/ratatui/ratatui"&gt;&lt;img src="https://img.shields.io/codecov/c/github/ratatui/ratatui?logo=codecov&amp;amp;style=flat-square&amp;amp;token=BAQ8SOKEST&amp;amp;color=C43AC3" alt="Codecov Badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sponsors/ratatui"&gt;&lt;img src="https://img.shields.io/github/sponsors/ratatui?logo=github&amp;amp;style=flat-square&amp;amp;color=1370D3" alt="Sponsors Badge" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://ratatui.rs/"&gt;Ratatui Website&lt;/a&gt; · &lt;a href="https://docs.rs/ratatui"&gt;Docs&lt;/a&gt; · &lt;a href="https://github.com/ratatui/ratatui/tree/main/ratatui-widgets/examples"&gt;Widget Examples&lt;/a&gt; · &lt;a href="https://github.com/ratatui/ratatui/tree/main/examples"&gt;App Examples&lt;/a&gt; · &lt;a href="https://github.com/ratatui/ratatui/raw/main/CHANGELOG.md"&gt;Changelog&lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/ratatui/ratatui/raw/main/BREAKING-CHANGES.md"&gt;Breaking Changes&lt;/a&gt; · &lt;a href="https://github.com/ratatui/ratatui/raw/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt; · &lt;a href="https://github.com/ratatui/ratatui/issues/new?labels=bug&amp;amp;projects=&amp;amp;template=bug_report.md"&gt;Report a bug&lt;/a&gt; · &lt;a href="https://github.com/ratatui/ratatui/issues/new?labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.md"&gt;Request a Feature&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://ratatui.rs/"&gt;Ratatui&lt;/a&gt; (&lt;em&gt;ˌræ.təˈtu.i&lt;/em&gt;) is a Rust crate for cooking up terminal user interfaces (TUIs). It provides a simple and flexible way to create text-based user interfaces in the terminal, which can be used for command-line applications, dashboards, and other interactive console programs.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Ratatui has &lt;a href="https://github.com/ratatui/templates/"&gt;templates&lt;/a&gt; available to help you get started quickly. You can use the &lt;a href="https://crates.io/crates/cargo-generate"&gt;&lt;code&gt;cargo-generate&lt;/code&gt;&lt;/a&gt; command to create a new project with Ratatui:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install --locked cargo-generate
cargo generate ratatui/templates
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Selecting the Hello World template produces the following application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use color_eyre::Result;
use crossterm::event::{self, Event};
use ratatui::{DefaultTerminal, Frame};

fn main() -&amp;gt; Result&amp;lt;()&amp;gt; {
    color_eyre::install()?;
    let terminal = ratatui::init();
    let result = run(terminal);
    ratatui::restore();
    result
}

fn run(mut terminal: DefaultTerminal) -&amp;gt; Result&amp;lt;()&amp;gt; {
    loop {
        terminal.draw(render)?;
        if matches!(event::read()?, Event::Key(_)) {
            break Ok(());
        }
    }
}

fn render(frame: &amp;amp;mut Frame) {
    frame.render_widget("hello world", frame.area());
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/ratatui"&gt;Docs&lt;/a&gt; - the full API documentation for the library on docs.rs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ratatui.rs/"&gt;Ratatui Website&lt;/a&gt; - explains the library's concepts and provides step-by-step tutorials.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://forum.ratatui.rs"&gt;Ratatui Forum&lt;/a&gt; - a place to ask questions and discuss the library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ratatui/ratatui/tree/main/ratatui-widgets/examples"&gt;Widget Examples&lt;/a&gt; - a collection of examples that demonstrate how to use the library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ratatui/ratatui/tree/main/examples"&gt;App Examples&lt;/a&gt; - a collection of more complex examples that demonstrate how to build apps.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ratatui/ratatui/raw/main/ARCHITECTURE.md"&gt;ARCHITECTURE.md&lt;/a&gt; - explains the crate organization and modular workspace structure.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ratatui/ratatui/raw/main/CHANGELOG.md"&gt;Changelog&lt;/a&gt; - generated by &lt;a href="https://git-cliff.org"&gt;git-cliff&lt;/a&gt; utilizing &lt;a href="https://www.conventionalcommits.org"&gt;Conventional Commits&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ratatui/ratatui/raw/main/BREAKING-CHANGES.md"&gt;Breaking Changes&lt;/a&gt; - a list of breaking changes in the library.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also watch the &lt;a href="https://www.youtube.com/watch?v=hWG51Mc1DlM"&gt;EuroRust 2024 talk&lt;/a&gt; to learn about common concepts in Ratatui and what's possible to build with it.&lt;/p&gt; 
&lt;h2&gt;Templates&lt;/h2&gt; 
&lt;p&gt;If you're looking to get started quickly, you can use one of the available templates from the &lt;a href="https://github.com/ratatui/templates/"&gt;templates&lt;/a&gt; repository using &lt;a href="https://crates.io/crates/cargo-generate"&gt;&lt;code&gt;cargo-generate&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo generate ratatui/templates
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Built with Ratatui&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/ratatui/awesome-ratatui"&gt;&lt;img src="https://awesome.re/badge-flat2.svg?sanitize=true" alt="Awesome" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://ratatui.rs/showcase/"&gt;showcase&lt;/a&gt; section of the website, or the &lt;a href="https://github.com/ratatui/awesome-ratatui"&gt;awesome-ratatui&lt;/a&gt; repository for a curated list of awesome apps and libraries built with Ratatui!&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/cursive"&gt;Cursive&lt;/a&gt; - a ncurses-based TUI library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/iocraft"&gt;iocraft&lt;/a&gt; - a declarative TUI library.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/pMCEU9hNEj"&gt;&lt;img src="https://img.shields.io/discord/1070692720437383208?label=discord&amp;amp;logo=discord&amp;amp;style=flat-square&amp;amp;color=1370D3&amp;amp;logoColor=1370D3" alt="Discord Badge" /&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/#ratatui:matrix.org"&gt;&lt;img src="https://img.shields.io/matrix/ratatui-general%3Amatrix.org?style=flat-square&amp;amp;logo=matrix&amp;amp;label=Matrix&amp;amp;color=C43AC3" alt="Matrix Badge" /&gt;&lt;/a&gt; &lt;a href="https://forum.ratatui.rs"&gt;&lt;img src="https://img.shields.io/discourse/likes?server=https%3A%2F%2Fforum.ratatui.rs&amp;amp;style=flat-square&amp;amp;logo=discourse&amp;amp;label=forum&amp;amp;color=C43AC3" alt="Forum Badge" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Feel free to join our &lt;a href="https://discord.gg/pMCEU9hNEj"&gt;Discord server&lt;/a&gt; for discussions and questions! There is also a &lt;a href="https://matrix.org/"&gt;Matrix&lt;/a&gt; bridge available at &lt;a href="https://matrix.to/#/#ratatui:matrix.org"&gt;#ratatui:matrix.org&lt;/a&gt;. We have also recently launched the &lt;a href="https://forum.ratatui.rs"&gt;Ratatui Forum&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We rely on GitHub for &lt;a href="https://github.com/ratatui/ratatui/issues/new?labels=bug&amp;amp;projects=&amp;amp;template=bug_report.md"&gt;bugs&lt;/a&gt; and &lt;a href="https://github.com/ratatui/ratatui/issues/new?labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.md"&gt;feature requests&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please make sure you read the &lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/CONTRIBUTING.md"&gt;contributing&lt;/a&gt; guidelines before &lt;a href="https://github.com/ratatui/ratatui/compare"&gt;creating a pull request&lt;/a&gt;. We accept AI generated code, but please read the &lt;a href="https://github.com/ratatui/ratatui/raw/main/CONTRIBUTING.md#ai-generated-content"&gt;AI Contributions&lt;/a&gt; guidelines to ensure compliance.&lt;/p&gt; 
&lt;p&gt;If you'd like to show your support, you can add the Ratatui badge to your project's README:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-md"&gt;[![Built With Ratatui](https://img.shields.io/badge/Built_With_Ratatui-000?logo=ratatui&amp;amp;logoColor=fff)](https://ratatui.rs/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://ratatui.rs/"&gt;&lt;img src="https://img.shields.io/badge/Built_With_Ratatui-000?logo=ratatui&amp;amp;logoColor=fff" alt="Built With Ratatui" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Ratatui was forked from the &lt;a href="https://crates.io/crates/tui"&gt;tui-rs&lt;/a&gt; crate in 2023 in order to continue its development. None of this could be possible without &lt;a href="https://github.com/fdehau"&gt;Florian Dehau&lt;/a&gt; who originally created &lt;a href="https://crates.io/crates/tui"&gt;tui-rs&lt;/a&gt; which inspired many Rust TUIs.&lt;/p&gt; 
&lt;p&gt;Special thanks to &lt;a href="https://github.com/nawok"&gt;Pavel Fomchenkov&lt;/a&gt; for his work in designing an awesome logo for the Ratatui project and organization.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/ratatui/ratatui/main/LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>huggingface/candle</title>
      <link>https://github.com/huggingface/candle</link>
      <description>&lt;p&gt;Minimalist ML framework for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;candle&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/hugging-face-879548962464493619"&gt;&lt;img src="https://dcbadge.limes.pink/api/server/hugging-face-879548962464493619" alt="discord server" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/candle-core"&gt;&lt;img src="https://img.shields.io/crates/v/candle-core.svg?sanitize=true" alt="Latest version" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/candle-core"&gt;&lt;img src="https://docs.rs/candle-core/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://github.com/huggingface/candle/raw/main/LICENSE-MIT"&gt;&lt;img src="https://img.shields.io/github/license/base-org/node?color=blue" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/huggingface/candle/raw/main/LICENSE-APACHE"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%202.0-blue?style=flat-square" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Candle is a minimalist ML framework for Rust with a focus on performance (including GPU support) and ease of use. Try our online demos: &lt;a href="https://huggingface.co/spaces/lmz/candle-whisper"&gt;whisper&lt;/a&gt;, &lt;a href="https://huggingface.co/spaces/lmz/candle-llama2"&gt;LLaMA2&lt;/a&gt;, &lt;a href="https://huggingface.co/spaces/radames/Candle-T5-Generation-Wasm"&gt;T5&lt;/a&gt;, &lt;a href="https://huggingface.co/spaces/lmz/candle-yolo"&gt;yolo&lt;/a&gt;, &lt;a href="https://huggingface.co/spaces/radames/candle-segment-anything-wasm"&gt;Segment Anything&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;p&gt;Make sure that you have &lt;a href="https://github.com/huggingface/candle/tree/main/candle-core"&gt;&lt;code&gt;candle-core&lt;/code&gt;&lt;/a&gt; correctly installed as described in &lt;a href="https://huggingface.github.io/candle/guide/installation.html"&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Let's see how to run a simple matrix multiplication. Write the following to your &lt;code&gt;myapp/src/main.rs&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use candle_core::{Device, Tensor};

fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let device = Device::Cpu;

    let a = Tensor::randn(0f32, 1., (2, 3), &amp;amp;device)?;
    let b = Tensor::randn(0f32, 1., (3, 4), &amp;amp;device)?;

    let c = a.matmul(&amp;amp;b)?;
    println!("{c}");
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;cargo run&lt;/code&gt; should display a tensor of shape &lt;code&gt;Tensor[[2, 4], f32]&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Having installed &lt;code&gt;candle&lt;/code&gt; with Cuda support, simply define the &lt;code&gt;device&lt;/code&gt; to be on GPU:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;- let device = Device::Cpu;
+ let device = Device::new_cuda(0)?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced examples, please have a look at the following section.&lt;/p&gt; 
&lt;h2&gt;Check out our examples&lt;/h2&gt; 
&lt;p&gt;These online demos run entirely in your browser:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://huggingface.co/spaces/lmz/candle-yolo"&gt;yolo&lt;/a&gt;: pose estimation and object recognition.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://huggingface.co/spaces/lmz/candle-whisper"&gt;whisper&lt;/a&gt;: speech recognition.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://huggingface.co/spaces/lmz/candle-llama2"&gt;LLaMA2&lt;/a&gt;: text generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://huggingface.co/spaces/radames/Candle-T5-Generation-Wasm"&gt;T5&lt;/a&gt;: text generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://huggingface.co/spaces/radames/Candle-Phi-1.5-Wasm"&gt;Phi-1.5, and Phi-2&lt;/a&gt;: text generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://huggingface.co/spaces/radames/candle-segment-anything-wasm"&gt;Segment Anything Model&lt;/a&gt;: Image segmentation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://huggingface.co/spaces/radames/Candle-BLIP-Image-Captioning"&gt;BLIP&lt;/a&gt;: image captioning.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We also provide some command line based examples using state of the art models:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/llama/"&gt;LLaMA v1, v2, and v3&lt;/a&gt;: general LLM, includes the SOLAR-10.7B variant.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/falcon/"&gt;Falcon&lt;/a&gt;: general LLM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/codegeex4-9b/"&gt;Codegeex4&lt;/a&gt;: Code completion, code interpreter, web search, function calling, repository-level&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/glm4/"&gt;GLM4&lt;/a&gt;: Open Multilingual Multimodal Chat LMs by THUDM&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/gemma/"&gt;Gemma v1 and v2&lt;/a&gt;: 2b and 7b+/9b general LLMs from Google Deepmind.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/recurrent-gemma/"&gt;RecurrentGemma&lt;/a&gt;: 2b and 7b Griffin based models from Google that mix attention with a RNN like state.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/phi/"&gt;Phi-1, Phi-1.5, Phi-2, and Phi-3&lt;/a&gt;: 1.3b, 2.7b, and 3.8b general LLMs with performance on par with 7b models.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/stable-lm/"&gt;StableLM-3B-4E1T&lt;/a&gt;: a 3b general LLM pre-trained on 1T tokens of English and code datasets. Also supports StableLM-2, a 1.6b LLM trained on 2T tokens, as well as the code variants.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/mamba/"&gt;Mamba&lt;/a&gt;: an inference only implementation of the Mamba state space model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/mistral/"&gt;Mistral7b-v0.1&lt;/a&gt;: a 7b general LLM with better performance than all publicly available 13b models as of 2023-09-28.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/mixtral/"&gt;Mixtral8x7b-v0.1&lt;/a&gt;: a sparse mixture of experts 8x7b general LLM with better performance than a Llama 2 70B model with much faster inference.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/bigcode/"&gt;StarCoder&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/starcoder2/"&gt;StarCoder2&lt;/a&gt;: LLM specialized to code generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/qwen/"&gt;Qwen1.5&lt;/a&gt;: Bilingual (English/Chinese) LLMs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/rwkv/"&gt;RWKV v5 and v6&lt;/a&gt;: An RNN with transformer level LLM performance.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/replit-code/"&gt;Replit-code-v1.5&lt;/a&gt;: a 3.3b LLM specialized for code completion.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/yi/"&gt;Yi-6B / Yi-34B&lt;/a&gt;: two bilingual (English/Chinese) general LLMs with 6b and 34b parameters.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/quantized/"&gt;Quantized LLaMA&lt;/a&gt;: quantized version of the LLaMA model using the same quantization techniques as &lt;a href="https://github.com/ggerganov/llama.cpp"&gt;llama.cpp&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://github.com/huggingface/candle/raw/main/candle-examples/examples/quantized/assets/aoc.gif" width="600" /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/stable-diffusion/"&gt;Stable Diffusion&lt;/a&gt;: text to image generative model, support for the 1.5, 2.1, SDXL 1.0 and Turbo versions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://github.com/huggingface/candle/raw/main/candle-examples/examples/stable-diffusion/assets/stable-diffusion-xl.jpg" width="200" /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/wuerstchen/"&gt;Wuerstchen&lt;/a&gt;: another text to image generative model.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://github.com/huggingface/candle/raw/main/candle-examples/examples/wuerstchen/assets/cat.jpg" width="200" /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/yolo-v3/"&gt;yolo-v3&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/yolo-v8/"&gt;yolo-v8&lt;/a&gt;: object detection and pose estimation models.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/huggingface/candle/raw/main/candle-examples/examples/yolo-v8/assets/bike.od.jpg" width="200" /&gt;&lt;img src="https://github.com/huggingface/candle/raw/main/candle-examples/examples/yolo-v8/assets/bike.pose.jpg" width="200" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/segment-anything/"&gt;segment-anything&lt;/a&gt;: image segmentation model with prompt.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://github.com/huggingface/candle/raw/main/candle-examples/examples/segment-anything/assets/sam_merged.jpg" width="200" /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/segformer/"&gt;SegFormer&lt;/a&gt;: transformer based semantic segmentation model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/whisper/"&gt;Whisper&lt;/a&gt;: speech recognition model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/encodec/"&gt;EnCodec&lt;/a&gt;: high-quality audio compression model using residual vector quantization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/metavoice/"&gt;MetaVoice&lt;/a&gt;: foundational model for text-to-speech.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/parler-tts/"&gt;Parler-TTS&lt;/a&gt;: large text-to-speech model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/t5"&gt;T5&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/bert/"&gt;Bert&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/jina-bert/"&gt;JinaBert&lt;/a&gt; : useful for sentence embeddings.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/dinov2/"&gt;DINOv2&lt;/a&gt;: computer vision model trained using self-supervision (can be used for imagenet classification, depth evaluation, segmentation).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/vgg/"&gt;VGG&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/repvgg"&gt;RepVGG&lt;/a&gt;: computer vision models.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/blip/"&gt;BLIP&lt;/a&gt;: image to text model, can be used to generate captions for an image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/clip/"&gt;CLIP&lt;/a&gt;: multi-model vision and language model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/trocr/"&gt;TrOCR&lt;/a&gt;: a transformer OCR model, with dedicated submodels for hand-writing and printed recognition.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/marian-mt/"&gt;Marian-MT&lt;/a&gt;: neural machine translation model, generates the translated text from the input text.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/moondream/"&gt;Moondream&lt;/a&gt;: tiny computer-vision model that can answer real-world questions about images.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Run them using commands like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo run --example quantized --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to use &lt;strong&gt;CUDA&lt;/strong&gt; add &lt;code&gt;--features cuda&lt;/code&gt; to the example command line. If you have cuDNN installed, use &lt;code&gt;--features cudnn&lt;/code&gt; for even more speedups.&lt;/p&gt; 
&lt;p&gt;There are also some wasm examples for whisper and &lt;a href="https://github.com/karpathy/llama2.c"&gt;llama2.c&lt;/a&gt;. You can either build them with &lt;code&gt;trunk&lt;/code&gt; or try them online: &lt;a href="https://huggingface.co/spaces/lmz/candle-whisper"&gt;whisper&lt;/a&gt;, &lt;a href="https://huggingface.co/spaces/lmz/candle-llama2"&gt;llama2&lt;/a&gt;, &lt;a href="https://huggingface.co/spaces/radames/Candle-T5-Generation-Wasm"&gt;T5&lt;/a&gt;, &lt;a href="https://huggingface.co/spaces/radames/Candle-Phi-1.5-Wasm"&gt;Phi-1.5, and Phi-2&lt;/a&gt;, &lt;a href="https://huggingface.co/spaces/radames/candle-segment-anything-wasm"&gt;Segment Anything Model&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For LLaMA2, run the following command to retrieve the weight files and start a test server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd candle-wasm-examples/llama2-c
wget https://huggingface.co/spaces/lmz/candle-llama2/resolve/main/model.bin
wget https://huggingface.co/spaces/lmz/candle-llama2/resolve/main/tokenizer.json
trunk serve --release --port 8081
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then head over to &lt;a href="http://localhost:8081/"&gt;http://localhost:8081/&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- ANCHOR: useful_libraries ---&gt; 
&lt;h2&gt;Useful External Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ToluClassics/candle-tutorial"&gt;&lt;code&gt;candle-tutorial&lt;/code&gt;&lt;/a&gt;: A very detailed tutorial showing how to convert a PyTorch model to Candle.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EricLBuehler/candle-lora"&gt;&lt;code&gt;candle-lora&lt;/code&gt;&lt;/a&gt;: Efficient and ergonomic LoRA implementation for Candle. &lt;code&gt;candle-lora&lt;/code&gt; has&lt;br /&gt; out-of-the-box LoRA support for many models from Candle, which can be found &lt;a href="https://github.com/EricLBuehler/candle-lora/tree/master/candle-lora-transformers/examples"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KGrewal1/optimisers"&gt;&lt;code&gt;optimisers&lt;/code&gt;&lt;/a&gt;: A collection of optimisers including SGD with momentum, AdaGrad, AdaDelta, AdaMax, NAdam, RAdam, and RMSprop.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EricLBuehler/candle-vllm"&gt;&lt;code&gt;candle-vllm&lt;/code&gt;&lt;/a&gt;: Efficient platform for inference and serving local LLMs including an OpenAI compatible API server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mokeyish/candle-ext"&gt;&lt;code&gt;candle-ext&lt;/code&gt;&lt;/a&gt;: An extension library to Candle that provides PyTorch functions not currently available in Candle.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vishpat/candle-coursera-ml"&gt;&lt;code&gt;candle-coursera-ml&lt;/code&gt;&lt;/a&gt;: Implementation of ML algorithms from Coursera's &lt;a href="https://www.coursera.org/specializations/machine-learning-introduction"&gt;Machine Learning Specialization&lt;/a&gt; course.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/floneum/floneum/tree/master/interfaces/kalosm"&gt;&lt;code&gt;kalosm&lt;/code&gt;&lt;/a&gt;: A multi-modal meta-framework in Rust for interfacing with local pre-trained models with support for controlled generation, custom samplers, in-memory vector databases, audio transcription, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EricLBuehler/candle-sampling"&gt;&lt;code&gt;candle-sampling&lt;/code&gt;&lt;/a&gt;: Sampling techniques for Candle.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jeroenvlek/gpt-from-scratch-rs"&gt;&lt;code&gt;gpt-from-scratch-rs&lt;/code&gt;&lt;/a&gt;: A port of Andrej Karpathy's &lt;em&gt;Let's build GPT&lt;/em&gt; tutorial on YouTube showcasing the Candle API on a toy problem.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tomsanbear/candle-einops"&gt;&lt;code&gt;candle-einops&lt;/code&gt;&lt;/a&gt;: A pure rust implementation of the python &lt;a href="https://github.com/arogozhnikov/einops"&gt;einops&lt;/a&gt; library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atoma-network/atoma-infer"&gt;&lt;code&gt;atoma-infer&lt;/code&gt;&lt;/a&gt;: A Rust library for fast inference at scale, leveraging FlashAttention2 for efficient attention computation, PagedAttention for efficient KV-cache memory management, and multi-GPU support. It is OpenAI api compatible.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nerdai/llms-from-scratch-rs"&gt;&lt;code&gt;llms-from-scratch-rs&lt;/code&gt;&lt;/a&gt;: A comprehensive Rust translation of the code from Sebastian Raschka's Build an LLM from Scratch book.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you have an addition to this list, please submit a pull request.&lt;/p&gt; 
&lt;!-- ANCHOR_END: useful_libraries ---&gt; 
&lt;!-- ANCHOR: features ---&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple syntax, looks and feels like PyTorch. 
  &lt;ul&gt; 
   &lt;li&gt;Model training.&lt;/li&gt; 
   &lt;li&gt;Embed user-defined ops/kernels, such as &lt;a href="https://github.com/huggingface/candle/raw/89ba005962495f2bfbda286e185e9c3c7f5300a3/candle-flash-attn/src/lib.rs#L152"&gt;flash-attention v2&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Backends. 
  &lt;ul&gt; 
   &lt;li&gt;Optimized CPU backend with optional MKL support for x86 and Accelerate for macs.&lt;/li&gt; 
   &lt;li&gt;CUDA backend for efficiently running on GPUs, multiple GPU distribution via NCCL.&lt;/li&gt; 
   &lt;li&gt;WASM support, run your models in a browser.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Included models. 
  &lt;ul&gt; 
   &lt;li&gt;Language Models. 
    &lt;ul&gt; 
     &lt;li&gt;LLaMA v1, v2, and v3 with variants such as SOLAR-10.7B.&lt;/li&gt; 
     &lt;li&gt;Falcon.&lt;/li&gt; 
     &lt;li&gt;StarCoder, StarCoder2.&lt;/li&gt; 
     &lt;li&gt;Phi 1, 1.5, 2, and 3.&lt;/li&gt; 
     &lt;li&gt;Mamba, Minimal Mamba&lt;/li&gt; 
     &lt;li&gt;Gemma v1 2b and 7b+, v2 2b and 9b.&lt;/li&gt; 
     &lt;li&gt;Mistral 7b v0.1.&lt;/li&gt; 
     &lt;li&gt;Mixtral 8x7b v0.1.&lt;/li&gt; 
     &lt;li&gt;StableLM-3B-4E1T, StableLM-2-1.6B, Stable-Code-3B.&lt;/li&gt; 
     &lt;li&gt;Replit-code-v1.5-3B.&lt;/li&gt; 
     &lt;li&gt;Bert.&lt;/li&gt; 
     &lt;li&gt;Yi-6B and Yi-34B.&lt;/li&gt; 
     &lt;li&gt;Qwen1.5, Qwen1.5 MoE.&lt;/li&gt; 
     &lt;li&gt;RWKV v5 and v6.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Quantized LLMs. 
    &lt;ul&gt; 
     &lt;li&gt;Llama 7b, 13b, 70b, as well as the chat and code variants.&lt;/li&gt; 
     &lt;li&gt;Mistral 7b, and 7b instruct.&lt;/li&gt; 
     &lt;li&gt;Mixtral 8x7b.&lt;/li&gt; 
     &lt;li&gt;Zephyr 7b a and b (Mistral-7b based).&lt;/li&gt; 
     &lt;li&gt;OpenChat 3.5 (Mistral-7b based).&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Text to text. 
    &lt;ul&gt; 
     &lt;li&gt;T5 and its variants: FlanT5, UL2, MADLAD400 (translation), CoEdit (Grammar correction).&lt;/li&gt; 
     &lt;li&gt;Marian MT (Machine Translation).&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Text to image. 
    &lt;ul&gt; 
     &lt;li&gt;Stable Diffusion v1.5, v2.1, XL v1.0.&lt;/li&gt; 
     &lt;li&gt;Wurstchen v2.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Image to text. 
    &lt;ul&gt; 
     &lt;li&gt;BLIP.&lt;/li&gt; 
     &lt;li&gt;TrOCR.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Audio. 
    &lt;ul&gt; 
     &lt;li&gt;Whisper, multi-lingual speech-to-text.&lt;/li&gt; 
     &lt;li&gt;EnCodec, audio compression model.&lt;/li&gt; 
     &lt;li&gt;MetaVoice-1B, text-to-speech model.&lt;/li&gt; 
     &lt;li&gt;Parler-TTS, text-to-speech model.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Computer Vision Models. 
    &lt;ul&gt; 
     &lt;li&gt;DINOv2, ConvMixer, EfficientNet, ResNet, ViT, VGG, RepVGG, ConvNeXT, ConvNeXTv2, MobileOne, EfficientVit (MSRA), MobileNetv4, Hiera, FastViT.&lt;/li&gt; 
     &lt;li&gt;yolo-v3, yolo-v8.&lt;/li&gt; 
     &lt;li&gt;Segment-Anything Model (SAM).&lt;/li&gt; 
     &lt;li&gt;SegFormer.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;File formats: load models from safetensors, npz, ggml, or PyTorch files.&lt;/li&gt; 
 &lt;li&gt;Serverless (on CPU), small and fast deployments.&lt;/li&gt; 
 &lt;li&gt;Quantization support using the llama.cpp quantized types.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- ANCHOR_END: features ---&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;!-- ANCHOR: cheatsheet ---&gt; 
&lt;p&gt;Cheatsheet:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;Using PyTorch&lt;/th&gt; 
   &lt;th&gt;Using Candle&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Creation&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;torch.Tensor([[1, 2], [3, 4]])&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Tensor::new(&amp;amp;[[1f32, 2.], [3., 4.]], &amp;amp;Device::Cpu)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Creation&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;torch.zeros((2, 2))&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Tensor::zeros((2, 2), DType::F32, &amp;amp;Device::Cpu)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Indexing&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor[:, :4]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.i((.., ..4))?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Operations&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.view((2, 2))&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.reshape((2, 2))?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Operations&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;a.matmul(b)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;a.matmul(&amp;amp;b)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Arithmetic&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;a + b&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;amp;a + &amp;amp;b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Device&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.to(device="cuda")&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.to_device(&amp;amp;Device::new_cuda(0)?)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dtype&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.to(dtype=torch.float16)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.to_dtype(&amp;amp;DType::F16)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Saving&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;torch.save({"A": A}, "model.bin")&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;candle::safetensors::save(&amp;amp;HashMap::from([("A", A)]), "model.safetensors")?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Loading&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;weights = torch.load("model.bin")&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;candle::safetensors::load("model.safetensors", &amp;amp;device)&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- ANCHOR_END: cheatsheet ---&gt; 
&lt;h2&gt;Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-core"&gt;candle-core&lt;/a&gt;: Core ops, devices, and &lt;code&gt;Tensor&lt;/code&gt; struct definition&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-nn/"&gt;candle-nn&lt;/a&gt;: Tools to build real models&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/"&gt;candle-examples&lt;/a&gt;: Examples of using the library in realistic settings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-kernels/"&gt;candle-kernels&lt;/a&gt;: CUDA custom kernels&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-datasets/"&gt;candle-datasets&lt;/a&gt;: Datasets and data loaders.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-transformers"&gt;candle-transformers&lt;/a&gt;: transformers-related utilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-flash-attn"&gt;candle-flash-attn&lt;/a&gt;: Flash attention v2 layer.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/huggingface/candle/main/candle-onnx/"&gt;candle-onnx&lt;/a&gt;: ONNX model evaluation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Why should I use Candle?&lt;/h3&gt; 
&lt;!-- ANCHOR: goals ---&gt; 
&lt;p&gt;Candle's core goal is to &lt;em&gt;make serverless inference possible&lt;/em&gt;. Full machine learning frameworks like PyTorch are very large, which makes creating instances on a cluster slow. Candle allows deployment of lightweight binaries.&lt;/p&gt; 
&lt;p&gt;Secondly, Candle lets you &lt;em&gt;remove Python&lt;/em&gt; from production workloads. Python overhead can seriously hurt performance, and the &lt;a href="https://www.backblaze.com/blog/the-python-gil-past-present-and-future/"&gt;GIL&lt;/a&gt; is a notorious source of headaches.&lt;/p&gt; 
&lt;p&gt;Finally, Rust is cool! A lot of the HF ecosystem already has Rust crates, like &lt;a href="https://github.com/huggingface/safetensors"&gt;safetensors&lt;/a&gt; and &lt;a href="https://github.com/huggingface/tokenizers"&gt;tokenizers&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- ANCHOR_END: goals ---&gt; 
&lt;h3&gt;Other ML frameworks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/coreylowman/dfdx"&gt;dfdx&lt;/a&gt; is a formidable crate, with shapes being included in types. This prevents a lot of headaches by getting the compiler to complain about shape mismatches right off the bat. However, we found that some features still require nightly, and writing code can be a bit daunting for non rust experts.&lt;/p&gt; &lt;p&gt;We're leveraging and contributing to other core crates for the runtime so hopefully both crates can benefit from each other.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/burn-rs/burn"&gt;burn&lt;/a&gt; is a general crate that can leverage multiple backends so you can choose the best engine for your workload.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/LaurentMazare/tch-rs.git"&gt;tch-rs&lt;/a&gt; Bindings to the torch library in Rust. Extremely versatile, but they bring in the entire torch library into the runtime. The main contributor of &lt;code&gt;tch-rs&lt;/code&gt; is also involved in the development of &lt;code&gt;candle&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Common Errors&lt;/h3&gt; 
&lt;h4&gt;Missing symbols when compiling with the mkl feature.&lt;/h4&gt; 
&lt;p&gt;If you get some missing symbols when compiling binaries/tests using the mkl or accelerate features, e.g. for mkl you get:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  = note: /usr/bin/ld: (....o): in function `blas::sgemm':
          .../blas-0.22.0/src/lib.rs:1944: undefined reference to `sgemm_' collect2: error: ld returned 1 exit status

  = note: some `extern` functions couldn't be found; some native libraries may need to be installed or have their path specified
  = note: use the `-l` flag to specify native libraries to link
  = note: use the `cargo:rustc-link-lib` directive to specify the native libraries to link with Cargo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or for accelerate:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Undefined symbols for architecture arm64:
            "_dgemm_", referenced from:
                candle_core::accelerate::dgemm::h1b71a038552bcabe in libcandle_core...
            "_sgemm_", referenced from:
                candle_core::accelerate::sgemm::h2cf21c592cba3c47 in libcandle_core...
          ld: symbol(s) not found for architecture arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is likely due to a missing linker flag that was needed to enable the mkl library. You can try adding the following for mkl at the top of your binary:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;extern crate intel_mkl_src;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or for accelerate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;extern crate accelerate_src;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Cannot run the LLaMA examples: access to source requires login credentials&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;Error: request error: https://huggingface.co/meta-llama/Llama-2-7b-hf/resolve/main/tokenizer.json: status code 401
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is likely because you're not permissioned for the LLaMA-v2 model. To fix this, you have to register on the huggingface-hub, accept the &lt;a href="https://huggingface.co/meta-llama/Llama-2-7b-hf"&gt;LLaMA-v2 model conditions&lt;/a&gt;, and set up your authentication token. See issue &lt;a href="https://github.com/huggingface/candle/issues/350"&gt;#350&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h4&gt;Missing cute/cutlass headers when compiling flash-attn&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;  In file included from kernels/flash_fwd_launch_template.h:11:0,
                   from kernels/flash_fwd_hdim224_fp16_sm80.cu:5:
  kernels/flash_fwd_kernel.h:8:10: fatal error: cute/algorithm/copy.hpp: No such file or directory
   #include &amp;lt;cute/algorithm/copy.hpp&amp;gt;
            ^~~~~~~~~~~~~~~~~~~~~~~~~
  compilation terminated.
  Error: nvcc error while compiling:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/NVIDIA/cutlass"&gt;cutlass&lt;/a&gt; is provided as a git submodule so you may want to run the following command to check it in properly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git submodule update --init
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Compiling with flash-attention fails&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;/usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with ‘...’:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a bug in gcc-11 triggered by the Cuda compiler. To fix this, install a different, supported gcc version - for example gcc-10, and specify the path to the compiler in the NVCC_CCBIN environment variable.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;env NVCC_CCBIN=/usr/lib/gcc/x86_64-linux-gnu/10 cargo ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Linking error on windows when running rustdoc or mdbook tests&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;Couldn't compile the test.
---- .\candle-book\src\inference\hub.md - Using_the_hub::Using_in_a_real_model_ (line 50) stdout ----
error: linking with `link.exe` failed: exit code: 1181
//very long chain of linking
 = note: LINK : fatal error LNK1181: cannot open input file 'windows.0.48.5.lib'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure you link all native libraries that might be located outside a project target, e.g., to run mdbook tests, you should run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mdbook test candle-book -L .\target\debug\deps\ `
-L native=$env:USERPROFILE\.cargo\registry\src\index.crates.io-6f17d22bba15001f\windows_x86_64_msvc-0.42.2\lib `
-L native=$env:USERPROFILE\.cargo\registry\src\index.crates.io-6f17d22bba15001f\windows_x86_64_msvc-0.48.5\lib
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Extremely slow model load time with WSL&lt;/h4&gt; 
&lt;p&gt;This may be caused by the models being loaded from &lt;code&gt;/mnt/c&lt;/code&gt;, more details on &lt;a href="https://stackoverflow.com/questions/68972448/why-is-wsl-extremely-slow-when-compared-with-native-windows-npm-yarn-processing"&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Tracking down errors&lt;/h4&gt; 
&lt;p&gt;You can set &lt;code&gt;RUST_BACKTRACE=1&lt;/code&gt; to be provided with backtraces when a candle error is generated.&lt;/p&gt; 
&lt;h4&gt;CudaRC error&lt;/h4&gt; 
&lt;p&gt;If you encounter an error like this one &lt;code&gt;called &lt;/code&gt;Result::unwrap()&lt;code&gt;on an&lt;/code&gt;Err&lt;code&gt; value: LoadLibraryExW { source: Os { code: 126, kind: Uncategorized, message: "The specified module could not be found." } }&lt;/code&gt; on windows. To fix copy and rename these 3 files (make sure they are in path). The paths depend on your cuda version. &lt;code&gt;c:\Windows\System32\nvcuda.dll&lt;/code&gt; -&amp;gt; &lt;code&gt;cuda.dll&lt;/code&gt; &lt;code&gt;c:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4\bin\cublas64_12.dll&lt;/code&gt; -&amp;gt; &lt;code&gt;cublas.dll&lt;/code&gt; &lt;code&gt;c:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4\bin\curand64_10.dll&lt;/code&gt; -&amp;gt; &lt;code&gt;curand.dll&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MystenLabs/sui</title>
      <link>https://github.com/MystenLabs/sui</link>
      <description>&lt;p&gt;Sui, a next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the Move programming language&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/MystenLabs/sui/refs/heads/main/docs/site/static/img/logo.svg?sanitize=true" alt="Logo" width="100" height="100" /&gt; &lt;/p&gt; 
&lt;h1&gt;Welcome to Sui&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/MystenLabs/sui/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/MystenLabs/sui.svg?sort=semver" alt="Github release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/MystenLabs/sui/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/MystenLabs/sui" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://sui.io"&gt;Sui&lt;/a&gt; is a next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the &lt;a href="https://github.com/MystenLabs/awesome-move"&gt;Move programming language&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sui Highlights&lt;/h2&gt; 
&lt;p&gt;Sui offers the following benefits and capabilities:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unmatched scalability, instant settlement&lt;/li&gt; 
 &lt;li&gt;A safe smart contract language accessible to mainstream developers&lt;/li&gt; 
 &lt;li&gt;Ability to define rich and composable on-chain assets&lt;/li&gt; 
 &lt;li&gt;Better user experience for web3 apps&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sui is the only blockchain today that can scale with the growth of web3 while achieving industry-leading performance, cost, programmability, and usability. Sui demonstrates capacity beyond the transaction processing capabilities of established systems – traditional and blockchain alike. Sui is the first internet-scale programmable blockchain platform, a foundational layer for web3.&lt;/p&gt; 
&lt;h2&gt;Sui Architecture&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart LR
    CC(CLI Client) --&amp;gt; ClientService
    RC(Rest Client) --&amp;gt; ClientService
    RPCC(RPC Client) --&amp;gt; ClientService
    ClientService --&amp;gt; AuthorityAggregator
    AuthorityAggregator --&amp;gt; AC1[AuthorityClient] &amp;amp; AC2[AuthorityClient]
    subgraph Authority1
      AS[AuthorityState]
    end
    subgraph Authority2
      AS2[AuthorityState]
    end
    AC1 &amp;lt;==&amp;gt;|Network TCP| Authority1
    AC2 &amp;lt;==&amp;gt;|Network TCP| Authority2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sui Overview&lt;/h2&gt; 
&lt;p&gt;Sui is a smart contract platform maintained by a permissionless set of authorities that play a role similar to validators or miners in other blockchain systems.&lt;/p&gt; 
&lt;p&gt;Sui offers scalability and unprecedented low-latency for common use cases. Sui makes the vast majority of transactions processable in parallel, which makes better use of processing resources, and offers the option to increase throughput with more resources. Sui forgoes consensus to instead use simpler and lower-latency primitives for common use cases, such as payment transactions and asset transfers. This is unprecedented in the blockchain world and enables a number of new latency-sensitive distributed applications, ranging from gaming to retail payment at physical points of sale.&lt;/p&gt; 
&lt;p&gt;Sui is written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt; and supports smart contracts written in the &lt;a href="https://github.com/move-language/move"&gt;Move programming language&lt;/a&gt; to define assets that may have an owner. Move programs define operations on these assets including custom rules for their creation, the transfer of these assets to new owners, and operations that mutate assets.&lt;/p&gt; 
&lt;p&gt;Sui has a native token called SUI, with a fixed supply. The SUI token is used to pay for gas, and is also used as &lt;a href="https://learn.bybit.com/blockchain/delegated-proof-of-stake-dpos/"&gt;delegated stake on authorities&lt;/a&gt; within an epoch. The voting power of authorities within this epoch is a function of this delegated stake. Authorities are periodically reconfigured according to the stake delegated to them. In any epoch, the set of authorities is &lt;a href="https://pmg.csail.mit.edu/papers/osdi99.pdf"&gt;Byzantine fault tolerant&lt;/a&gt;. At the end of the epoch, fees collected through all transactions processed are distributed to authorities according to their contribution to the operation of the system. Authorities can in turn share some of the fees as rewards to users that delegated stakes to them.&lt;/p&gt; 
&lt;p&gt;Sui is supported by several cutting-edge &lt;a href="https://github.com/MystenLabs/sui/raw/main/docs/content/concepts/research-papers.mdx"&gt;peer-reviewed studies&lt;/a&gt; and extensive years of open-source development.&lt;/p&gt; 
&lt;h2&gt;More About Sui&lt;/h2&gt; 
&lt;p&gt;Use the following links to learn more about Sui and the Sui ecosystem:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Learn more about working with Sui in the &lt;a href="https://docs.sui.io/"&gt;Sui Documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join the Sui community on &lt;a href="https://discord.gg/sui"&gt;Sui Discord&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Find out more about the Sui ecosystem on the &lt;a href="https://sui.io/resources/"&gt;Sui Resources&lt;/a&gt; page.&lt;/li&gt; 
 &lt;li&gt;Review information about Sui governance, &lt;a href="https://suifoundation.org/decentralization"&gt;decentralization&lt;/a&gt;, and &lt;a href="https://sui.io/grants-hub"&gt;Developer Grants Program&lt;/a&gt; on the &lt;a href="https://sui.io/about"&gt;Sui Foundation&lt;/a&gt; site.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; for details on how to contribute to Sui.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/CODE_OF_CONDUCT.MD"&gt;Code of Conduct&lt;/a&gt; for details on our code of conduct.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lapce/lapce</title>
      <link>https://github.com/lapce/lapce</link>
      <description>&lt;p&gt;Lightning-fast and Powerful Code Editor written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://lapce.dev" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/lapce/lapce/master/extra/images/logo.png" width="200" height="200/" /&gt;&lt;br /&gt; Lapce &lt;/a&gt; &lt;/h1&gt; 
&lt;h4 align="center"&gt;Lightning-fast And Powerful Code Editor&lt;/h4&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://github.com/lapce/lapce/actions/workflows/ci.yml" target="_blank"&gt; &lt;img src="https://github.com/lapce/lapce/actions/workflows/ci.yml/badge.svg?sanitize=true" /&gt; &lt;/a&gt; 
 &lt;a href="https://discord.gg/n8tGJ6Rn6D" target="_blank"&gt; &lt;img src="https://img.shields.io/discord/946858761413328946?logo=discord" /&gt; &lt;/a&gt; 
 &lt;a href="https://docs.lapce.dev" target="_blank"&gt; &lt;img src="https://img.shields.io/static/v1?label=Docs&amp;amp;message=docs.lapce.dev&amp;amp;color=blue" alt="Lapce Docs" /&gt; &lt;/a&gt; 
 &lt;a href="https://wiki.mutable.ai/lapce/lapce" target="_blank"&gt; &lt;img src="https://img.shields.io/static/v1?label=Code Wiki&amp;amp;message=Mutable.ai&amp;amp;color=blue" alt="Mutable.ai Auto Wiki" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;Lapce (IPA: /læps/) is written in pure Rust, with a UI in &lt;a href="https://github.com/lapce/floem"&gt;Floem&lt;/a&gt;. It is designed with &lt;a href="https://xi-editor.io/docs/rope_science_00.html"&gt;Rope Science&lt;/a&gt; from the &lt;a href="https://github.com/xi-editor/xi-editor"&gt;Xi-Editor&lt;/a&gt;, enabling lightning-fast computation, and leverages &lt;a href="https://github.com/gfx-rs/wgpu"&gt;wgpu&lt;/a&gt; for rendering. More information about the features of Lapce can be found on the &lt;a href="https://lapce.dev"&gt;main website&lt;/a&gt; and user documentation can be found on &lt;a href="https://docs.lapce.dev/"&gt;GitBook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/lapce/lapce/raw/master/extra/images/screenshot.png?raw=true" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in LSP (&lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt;) support to give you intelligent code features such as: completion, diagnostics and code actions&lt;/li&gt; 
 &lt;li&gt;Modal editing support as first class citizen (Vim-like, and toggleable)&lt;/li&gt; 
 &lt;li&gt;Built-in remote development support inspired by &lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;VSCode Remote Development&lt;/a&gt;. Enjoy the benefits of a "local" experience, and seamlessly gain the full power of a remote system. We also have &lt;a href="https://lap.dev/"&gt;Lapdev&lt;/a&gt; which can help manage your remote dev environments.&lt;/li&gt; 
 &lt;li&gt;Plugins can be written in programming languages that can compile to the &lt;a href="https://wasi.dev/"&gt;WASI&lt;/a&gt; format (C, Rust, &lt;a href="https://www.assemblyscript.org/"&gt;AssemblyScript&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Built-in terminal, so you can execute commands in your workspace, without leaving Lapce.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can find pre-built releases for Windows, Linux and macOS &lt;a href="https://github.com/lapce/lapce/releases"&gt;here&lt;/a&gt;, or &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/docs/installing-with-package-manager.md"&gt;installing with a package manager&lt;/a&gt;. If you'd like to compile from source, you can find the &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/docs/building-from-source.md"&gt;guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;a href="https://ws.lap.dev/#https://github.com/lapce/lapce" target="_blank"&gt; &lt;img src="https://lap.dev/images/open-in-lapdev.svg?version=8" alt="Open in Lapdev" /&gt; &lt;/a&gt; 
&lt;p&gt;&lt;a href="https://lap.dev/"&gt;Lapdev&lt;/a&gt;, developed by the Lapce team, is a cloud dev env service similar to GitHub Codespaces. By clicking the button above, you'll be taken to a fully set up Lapce dev env where you can browse the code and start developing. All dependencies are pre-installed, so you can get straight to code.&lt;/p&gt; 
&lt;p&gt;Guidelines for contributing to Lapce can be found in &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feedback &amp;amp; Contact&lt;/h2&gt; 
&lt;p&gt;The most popular place for Lapce developers and users is on the &lt;a href="https://discord.gg/n8tGJ6Rn6D"&gt;Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Or, join the discussion on &lt;a href="https://www.reddit.com/r/lapce/"&gt;Reddit&lt;/a&gt; where we are just getting started.&lt;/p&gt; 
&lt;p&gt;There is also a &lt;a href="https://matrix.to/#/#lapce-editor:matrix.org"&gt;Matrix Space&lt;/a&gt;, which is linked to the content from the Discord server.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Lapce is released under the Apache License Version 2, which is an open source license. You may contribute to this project, or use the code as you please as long as you adhere to its conditions. You can find a copy of the license text here: &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudflare/quiche</title>
      <link>https://github.com/cloudflare/quiche</link>
      <description>&lt;p&gt;🥧 Savoury implementation of the QUIC transport protocol and HTTP/3&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudflare/quiche/master/quiche.svg?sanitize=true" alt="quiche" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/quiche"&gt;&lt;img src="https://img.shields.io/crates/v/quiche.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/quiche"&gt;&lt;img src="https://docs.rs/quiche/badge.svg?sanitize=true" alt="docs.rs" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/BSD-2-Clause"&gt;&lt;img src="https://img.shields.io/github/license/cloudflare/quiche.svg?sanitize=true" alt="license" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/cloudflare/quiche/stable.yml?branch=master" alt="build" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.quic.tech/quiche/"&gt;quiche&lt;/a&gt; is an implementation of the QUIC transport protocol and HTTP/3 as specified by the &lt;a href="https://quicwg.org/"&gt;IETF&lt;/a&gt;. It provides a low level API for processing QUIC packets and handling connection state. The application is responsible for providing I/O (e.g. sockets handling) as well as an event loop with support for timers.&lt;/p&gt; 
&lt;p&gt;For more information on how quiche came about and some insights into its design you can read a &lt;a href="https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/"&gt;post&lt;/a&gt; on Cloudflare's blog that goes into some more detail.&lt;/p&gt; 
&lt;h2&gt;Who uses quiche?&lt;/h2&gt; 
&lt;h3&gt;Cloudflare&lt;/h3&gt; 
&lt;p&gt;quiche powers Cloudflare edge network's &lt;a href="https://blog.cloudflare.com/http3-the-past-present-and-future/"&gt;HTTP/3 support&lt;/a&gt;. The &lt;a href="https://cloudflare-quic.com"&gt;cloudflare-quic.com&lt;/a&gt; website can be used for testing and experimentation.&lt;/p&gt; 
&lt;h3&gt;Android&lt;/h3&gt; 
&lt;p&gt;Android's DNS resolver uses quiche to &lt;a href="https://security.googleblog.com/2022/07/dns-over-http3-in-android.html"&gt;implement DNS over HTTP/3&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;curl&lt;/h3&gt; 
&lt;p&gt;quiche can be &lt;a href="https://github.com/curl/curl/raw/master/docs/HTTP3.md#quiche-version"&gt;integrated into curl&lt;/a&gt; to provide support for HTTP/3.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Command-line apps&lt;/h3&gt; 
&lt;p&gt;Before diving into the quiche API, here are a few examples on how to use the quiche tools provided as part of the &lt;a href="https://raw.githubusercontent.com/cloudflare/quiche/master/apps/"&gt;quiche-apps&lt;/a&gt; crate.&lt;/p&gt; 
&lt;p&gt;After cloning the project according to the command mentioned in the &lt;a href="https://raw.githubusercontent.com/cloudflare/quiche/master/#building"&gt;building&lt;/a&gt; section, the client can be run as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo run --bin quiche-client -- https://cloudflare-quic.com/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;while the server can be run as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo run --bin quiche-server -- --cert apps/src/bin/cert.crt --key apps/src/bin/cert.key
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(note that the certificate provided is self-signed and should not be used in production)&lt;/p&gt; 
&lt;p&gt;Use the &lt;code&gt;--help&lt;/code&gt; command-line flag to get a more detailed description of each tool's options.&lt;/p&gt; 
&lt;h3&gt;Configuring connections&lt;/h3&gt; 
&lt;p&gt;The first step in establishing a QUIC connection using quiche is creating a &lt;a href="https://docs.quic.tech/quiche/struct.Config.html"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let mut config = quiche::Config::new(quiche::PROTOCOL_VERSION)?;
config.set_application_protos(&amp;amp;[b"example-proto"]);

// Additional configuration specific to application and use case...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href="https://docs.quic.tech/quiche/struct.Config.html"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; object controls important aspects of the QUIC connection such as QUIC version, ALPN IDs, flow control, congestion control, idle timeout and other properties or features.&lt;/p&gt; 
&lt;p&gt;QUIC is a general-purpose transport protocol and there are several configuration properties where there is no reasonable default value. For example, the permitted number of concurrent streams of any particular type is dependent on the application running over QUIC, and other use-case specific concerns.&lt;/p&gt; 
&lt;p&gt;quiche defaults several properties to zero, applications most likely need to set these to something else to satisfy their needs using the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_streams_bidi"&gt;&lt;code&gt;set_initial_max_streams_bidi()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_streams_uni"&gt;&lt;code&gt;set_initial_max_streams_uni()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_data"&gt;&lt;code&gt;set_initial_max_data()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_stream_data_bidi_local"&gt;&lt;code&gt;set_initial_max_stream_data_bidi_local()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_stream_data_bidi_remote"&gt;&lt;code&gt;set_initial_max_stream_data_bidi_remote()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_stream_data_uni"&gt;&lt;code&gt;set_initial_max_stream_data_uni()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://docs.quic.tech/quiche/struct.Config.html"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; also holds TLS configuration. This can be changed by mutators on the an existing object, or by constructing a TLS context manually and creating a configuration using &lt;a href="https://docs.quic.tech/quiche/struct.Config.html#method.with_boring_ssl_ctx_builder"&gt;&lt;code&gt;with_boring_ssl_ctx_builder()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A configuration object can be shared among multiple connections.&lt;/p&gt; 
&lt;h3&gt;Connection setup&lt;/h3&gt; 
&lt;p&gt;On the client-side the &lt;a href="https://docs.quic.tech/quiche/fn.connect.html"&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; utility function can be used to create a new connection, while &lt;a href="https://docs.quic.tech/quiche/fn.accept.html"&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/a&gt; is for servers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// Client connection.
let conn = quiche::connect(Some(&amp;amp;server_name), &amp;amp;scid, local, peer, &amp;amp;mut config)?;

// Server connection.
let conn = quiche::accept(&amp;amp;scid, None, local, peer, &amp;amp;mut config)?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Handling incoming packets&lt;/h3&gt; 
&lt;p&gt;Using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.recv"&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt; method the application can process incoming packets that belong to that connection from the network:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let to = socket.local_addr().unwrap();

loop {
    let (read, from) = socket.recv_from(&amp;amp;mut buf).unwrap();

    let recv_info = quiche::RecvInfo { from, to };

    let read = match conn.recv(&amp;amp;mut buf[..read], recv_info) {
        Ok(v) =&amp;gt; v,

        Err(e) =&amp;gt; {
            // An error occurred, handle it.
            break;
        },
    };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Generating outgoing packets&lt;/h3&gt; 
&lt;p&gt;Outgoing packet are generated using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.send"&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; method instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;loop {
    let (write, send_info) = match conn.send(&amp;amp;mut out) {
        Ok(v) =&amp;gt; v,

        Err(quiche::Error::Done) =&amp;gt; {
            // Done writing.
            break;
        },

        Err(e) =&amp;gt; {
            // An error occurred, handle it.
            break;
        },
    };

    socket.send_to(&amp;amp;out[..write], &amp;amp;send_info.to).unwrap();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When packets are sent, the application is responsible for maintaining a timer to react to time-based connection events. The timer expiration can be obtained using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.timeout"&gt;&lt;code&gt;timeout()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let timeout = conn.timeout();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The application is responsible for providing a timer implementation, which can be specific to the operating system or networking framework used. When a timer expires, the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.on_timeout"&gt;&lt;code&gt;on_timeout()&lt;/code&gt;&lt;/a&gt; method should be called, after which additional packets might need to be sent on the network:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// Timeout expired, handle it.
conn.on_timeout();

// Send more packets as needed after timeout.
loop {
    let (write, send_info) = match conn.send(&amp;amp;mut out) {
        Ok(v) =&amp;gt; v,

        Err(quiche::Error::Done) =&amp;gt; {
            // Done writing.
            break;
        },

        Err(e) =&amp;gt; {
            // An error occurred, handle it.
            break;
        },
    };

    socket.send_to(&amp;amp;out[..write], &amp;amp;send_info.to).unwrap();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Pacing&lt;/h4&gt; 
&lt;p&gt;It is recommended that applications &lt;a href="https://datatracker.ietf.org/doc/html/rfc9002#section-7.7"&gt;pace&lt;/a&gt; sending of outgoing packets to avoid creating packet bursts that could cause short-term congestion and losses in the network.&lt;/p&gt; 
&lt;p&gt;quiche exposes pacing hints for outgoing packets through the [&lt;code&gt;at&lt;/code&gt;] field of the [&lt;code&gt;SendInfo&lt;/code&gt;] structure that is returned by the &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.send"&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; method. This field represents the time when a specific packet should be sent into the network.&lt;/p&gt; 
&lt;p&gt;Applications can use these hints by artificially delaying the sending of packets through platform-specific mechanisms (such as the &lt;a href="https://man7.org/linux/man-pages/man8/tc-etf.8.html"&gt;&lt;code&gt;SO_TXTIME&lt;/code&gt;&lt;/a&gt; socket option on Linux), or custom methods (for example by using user-space timers).&lt;/p&gt; 
&lt;h3&gt;Sending and receiving stream data&lt;/h3&gt; 
&lt;p&gt;After some back and forth, the connection will complete its handshake and will be ready for sending or receiving application data.&lt;/p&gt; 
&lt;p&gt;Data can be sent on a stream by using the &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.stream_send"&gt;&lt;code&gt;stream_send()&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;if conn.is_established() {
    // Handshake completed, send some data on stream 0.
    conn.stream_send(0, b"hello", true)?;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The application can check whether there are any readable streams by using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.readable"&gt;&lt;code&gt;readable()&lt;/code&gt;&lt;/a&gt; method, which returns an iterator over all the streams that have outstanding data to read.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.stream_recv"&gt;&lt;code&gt;stream_recv()&lt;/code&gt;&lt;/a&gt; method can then be used to retrieve the application data from the readable stream:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;if conn.is_established() {
    // Iterate over readable streams.
    for stream_id in conn.readable() {
        // Stream is readable, read until there's no more data.
        while let Ok((read, fin)) = conn.stream_recv(stream_id, &amp;amp;mut buf) {
            println!("Got {} bytes on stream {}", read, stream_id);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;HTTP/3&lt;/h3&gt; 
&lt;p&gt;The quiche &lt;a href="https://docs.quic.tech/quiche/h3/index.html"&gt;HTTP/3 module&lt;/a&gt; provides a high level API for sending and receiving HTTP requests and responses on top of the QUIC transport protocol.&lt;/p&gt; 
&lt;p&gt;Have a look at the [quiche/examples/] directory for more complete examples on how to use the quiche API, including examples on how to use quiche in C/C++ applications (see below for more information).&lt;/p&gt; 
&lt;h2&gt;Calling quiche from C/C++&lt;/h2&gt; 
&lt;p&gt;quiche exposes a &lt;a href="https://github.com/cloudflare/quiche/raw/master/quiche/include/quiche.h"&gt;thin C API&lt;/a&gt; on top of the Rust API that can be used to more easily integrate quiche into C/C++ applications (as well as in other languages that allow calling C APIs via some form of FFI). The C API follows the same design of the Rust one, modulo the constraints imposed by the C language itself.&lt;/p&gt; 
&lt;p&gt;When running &lt;code&gt;cargo build&lt;/code&gt;, a static library called &lt;code&gt;libquiche.a&lt;/code&gt; will be built automatically alongside the Rust one. This is fully stand-alone and can be linked directly into C/C++ applications.&lt;/p&gt; 
&lt;p&gt;Note that in order to enable the FFI API, the &lt;code&gt;ffi&lt;/code&gt; feature must be enabled (it is disabled by default), by passing &lt;code&gt;--features ffi&lt;/code&gt; to &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;quiche requires Rust 1.83 or later to build. The latest stable Rust release can be installed using &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once the Rust build environment is setup, the quiche source code can be fetched using git:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ git clone --recursive https://github.com/cloudflare/quiche
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and then built using cargo:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo build --examples
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;cargo can also be used to run the testsuite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;a href="https://boringssl.googlesource.com/boringssl/"&gt;BoringSSL&lt;/a&gt;, which is used to implement QUIC's cryptographic handshake based on TLS, needs to be built and linked to quiche. This is done automatically when building quiche using cargo, but requires the &lt;code&gt;cmake&lt;/code&gt; command to be available during the build process. On Windows you also need &lt;a href="https://www.nasm.us/"&gt;NASM&lt;/a&gt;. The &lt;a href="https://github.com/google/boringssl/raw/master/BUILDING.md"&gt;official BoringSSL documentation&lt;/a&gt; has more details.&lt;/p&gt; 
&lt;p&gt;In alternative you can use your own custom build of BoringSSL by configuring the BoringSSL directory with the &lt;code&gt;QUICHE_BSSL_PATH&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ QUICHE_BSSL_PATH="/path/to/boringssl" cargo build --examples
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively you can use &lt;a href="https://github.com/quictls/openssl"&gt;OpenSSL/quictls&lt;/a&gt;. To enable quiche to use this vendor the &lt;code&gt;openssl&lt;/code&gt; feature can be added to the &lt;code&gt;--feature&lt;/code&gt; list. Be aware that &lt;code&gt;0-RTT&lt;/code&gt; is not supported if this vendor is used.&lt;/p&gt; 
&lt;h3&gt;Building for Android&lt;/h3&gt; 
&lt;p&gt;Building quiche for Android (NDK version 19 or higher, 21 recommended), can be done using &lt;a href="https://docs.rs/crate/cargo-ndk"&gt;cargo-ndk&lt;/a&gt; (v2.0 or later).&lt;/p&gt; 
&lt;p&gt;First the &lt;a href="https://developer.android.com/ndk"&gt;Android NDK&lt;/a&gt; needs to be installed, either using Android Studio or directly, and the &lt;code&gt;ANDROID_NDK_HOME&lt;/code&gt; environment variable needs to be set to the NDK installation path, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ export ANDROID_NDK_HOME=/usr/local/share/android-ndk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then the Rust toolchain for the Android architectures needed can be installed as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the minimum API level is 21 for all target architectures.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.rs/crate/cargo-ndk"&gt;cargo-ndk&lt;/a&gt; (v2.0 or later) also needs to be installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo install cargo-ndk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally the quiche library can be built using the following procedure. Note that the &lt;code&gt;-t &amp;lt;architecture&amp;gt;&lt;/code&gt; and &lt;code&gt;-p &amp;lt;NDK version&amp;gt;&lt;/code&gt; options are mandatory.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo ndk -t arm64-v8a -p 21 -- build --features ffi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://github.com/cloudflare/quiche/raw/master/tools/android/build_android_ndk19.sh"&gt;build_android_ndk19.sh&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Building for iOS&lt;/h3&gt; 
&lt;p&gt;To build quiche for iOS, you need the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install Xcode command-line tools. You can install them with Xcode or with the following command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ xcode-select --install
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the Rust toolchain for iOS architectures:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ rustup target add aarch64-apple-ios x86_64-apple-ios
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;cargo-lipo&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo install cargo-lipo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build libquiche, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo lipo --features ffi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo lipo --features ffi --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;iOS build is tested in Xcode 10.1 and Xcode 11.2.&lt;/p&gt; 
&lt;h3&gt;Building Docker images&lt;/h3&gt; 
&lt;p&gt;In order to build the Docker images, simply run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ make docker-build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find the quiche Docker images on the following Docker Hub repositories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/repository/docker/cloudflare/quiche"&gt;cloudflare/quiche&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/repository/docker/cloudflare/quiche-qns"&gt;cloudflare/quiche-qns&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;latest&lt;/code&gt; tag will be updated whenever quiche master branch updates.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;cloudflare/quiche&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Provides a server and client installed in /usr/local/bin.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;cloudflare/quiche-qns&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Provides the script to test quiche within the &lt;a href="https://github.com/marten-seemann/quic-interop-runner"&gt;quic-interop-runner&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2018-2019, Cloudflare, Inc.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/cloudflare/quiche/tree/master/COPYING"&gt;COPYING&lt;/a&gt; for the license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lancedb/lancedb</title>
      <link>https://github.com/lancedb/lancedb</link>
      <description>&lt;p&gt;Developer-friendly, embedded retrieval engine for multimodal AI. Search More; Manage Less.&lt;/p&gt;&lt;hr&gt;&lt;a href="https://cloud.lancedb.com" target="_blank"&gt; &lt;img src="https://github.com/user-attachments/assets/92dad0a2-2a37-4ce1-b783-0d1b4f30a00c" alt="LanceDB Cloud Public Beta" width="100%" style="max-width: 100%;" /&gt; &lt;/a&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://lancedb.com"&gt;&lt;img src="https://raw.githubusercontent.com/lancedb/lancedb/main/docs/src/assets/hero-header.png" alt="LanceDB" /&gt;&lt;/a&gt; &lt;a href="https://lancedb.com/"&gt;&lt;img src="https://img.shields.io/badge/-Website-100000?style=for-the-badge&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="Website" /&gt;&lt;/a&gt; &lt;a href="https://blog.lancedb.com/"&gt;&lt;img src="https://img.shields.io/badge/Blog-100000?style=for-the-badge&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="Blog" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/zMM32dvNtd"&gt;&lt;img src="https://img.shields.io/badge/-Discord-100000?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/lancedb"&gt;&lt;img src="https://img.shields.io/badge/-Twitter-100000?style=for-the-badge&amp;amp;logo=x&amp;amp;logoColor=white&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="Twitter" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/lancedb/"&gt;&lt;img src="https://img.shields.io/badge/-LinkedIn-100000?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="LinkedIn" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;img src="https://raw.githubusercontent.com/lancedb/lancedb/main/docs/src/assets/lancedb.png" alt="LanceDB" width="50%" /&gt; 
 &lt;h1&gt;&lt;strong&gt;The Multimodal AI Lakehouse&lt;/strong&gt;&lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/lancedb/lancedb/main/#how-to-install"&gt;&lt;strong&gt;How to Install&lt;/strong&gt; &lt;/a&gt; ✦ &lt;a href="https://lancedb.github.io/lancedb/"&gt;&lt;strong&gt;Detailed Documentation&lt;/strong&gt;&lt;/a&gt; ✦ &lt;a href="https://github.com/lancedb/vectordb-recipes/tree/main"&gt;&lt;strong&gt;Tutorials and Recipes&lt;/strong&gt;&lt;/a&gt; ✦ &lt;a href="https://raw.githubusercontent.com/lancedb/lancedb/main/#contributors"&gt;&lt;strong&gt;Contributors&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;The ultimate multimodal data platform for AI/ML applications.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;LanceDB is designed for fast, scalable, and production-ready vector search. It is built on top of the Lance columnar format. You can store, index, and search over petabytes of multimodal data and vectors with ease. LanceDB is a central location where developers can build, train and analyze their AI workloads.&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;&lt;strong&gt;Demo: Multimodal Search by Keyword, Vector or with SQL&lt;/strong&gt;&lt;/h2&gt; 
&lt;img max-width="750px" alt="LanceDB Multimodal Search" src="https://github.com/lancedb/lancedb/assets/917119/09c5afc5-7816-4687-bae4-f2ca194426ec" /&gt; 
&lt;h2&gt;&lt;strong&gt;Star LanceDB to get updates!&lt;/strong&gt;&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;⭐ Click here ⭐ to see how fast we're growing!&lt;/summary&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=lancedb/lancedb&amp;amp;theme=dark&amp;amp;type=Date" /&gt; 
  &lt;img width="100%" src="https://api.star-history.com/svg?repos=lancedb/lancedb&amp;amp;theme=dark&amp;amp;type=Date" /&gt; 
 &lt;/picture&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;strong&gt;Key Features&lt;/strong&gt;:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fast Vector Search&lt;/strong&gt;: Search billions of vectors in milliseconds with state-of-the-art indexing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Comprehensive Search&lt;/strong&gt;: Support for vector similarity search, full-text search and SQL.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multimodal Support&lt;/strong&gt;: Store, query and filter vectors, metadata and multimodal data (text, images, videos, point clouds, and more).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced Features&lt;/strong&gt;: Zero-copy, automatic versioning, manage versions of your data without needing extra infrastructure. GPU support in building vector index.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;Products&lt;/strong&gt;:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Open Source &amp;amp; Local&lt;/strong&gt;: 100% open source, runs locally or in your cloud. No vendor lock-in.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cloud and Enterprise&lt;/strong&gt;: Production-scale vector search with no servers to manage. Complete data sovereignty and security.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;Ecosystem&lt;/strong&gt;:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Columnar Storage&lt;/strong&gt;: Built on the Lance columnar format for efficient storage and analytics.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless Integration&lt;/strong&gt;: Python, Node.js, Rust, and REST APIs for easy integration. Native Python and Javascript/Typescript support.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rich Ecosystem&lt;/strong&gt;: Integrations with &lt;a href="https://python.langchain.com/docs/integrations/vectorstores/lancedb/"&gt;&lt;strong&gt;LangChain&lt;/strong&gt; 🦜️🔗&lt;/a&gt;, &lt;a href="https://gpt-index.readthedocs.io/en/latest/examples/vector_stores/LanceDBIndexDemo.html"&gt;&lt;strong&gt;LlamaIndex&lt;/strong&gt; 🦙&lt;/a&gt;, Apache-Arrow, Pandas, Polars, DuckDB and more on the way.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;How to Install&lt;/strong&gt;:&lt;/h2&gt; 
&lt;p&gt;Follow the &lt;a href="https://lancedb.github.io/lancedb/basic/"&gt;Quickstart&lt;/a&gt; doc to set up LanceDB locally.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;API &amp;amp; SDK:&lt;/strong&gt; We also support Python, Typescript and Rust SDKs&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Interface&lt;/th&gt; 
   &lt;th&gt;Documentation&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Python SDK&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://lancedb.github.io/lancedb/python/python/"&gt;https://lancedb.github.io/lancedb/python/python/&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Typescript SDK&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://lancedb.github.io/lancedb/js/globals/"&gt;https://lancedb.github.io/lancedb/js/globals/&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rust SDK&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.rs/lancedb/latest/lancedb/index.html"&gt;https://docs.rs/lancedb/latest/lancedb/index.html&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;REST API&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.lancedb.com/api-reference/introduction"&gt;https://docs.lancedb.com/api-reference/introduction&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;&lt;strong&gt;Join Us and Contribute&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;We welcome contributions from everyone! Whether you're a developer, researcher, or just someone who wants to help out.&lt;/p&gt; 
&lt;p&gt;If you have any suggestions or feature requests, please feel free to open an issue on GitHub or discuss it on our &lt;a href="https://discord.gg/G5DcmnZWKB"&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt; server.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/lancedb/lancedb/issues"&gt;&lt;strong&gt;Check out the GitHub Issues&lt;/strong&gt;&lt;/a&gt; if you would like to work on the features that are planned for the future. If you have any suggestions or feature requests, please feel free to open an issue on GitHub.&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Contributors&lt;/strong&gt;&lt;/h2&gt; 
&lt;a href="https://github.com/lancedb/lancedb/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=lancedb/lancedb" /&gt; &lt;/a&gt; 
&lt;h2&gt;&lt;strong&gt;Stay in Touch With Us&lt;/strong&gt;&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;a href="https://lancedb.com/"&gt;&lt;img src="https://img.shields.io/badge/-Website-100000?style=for-the-badge&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="Website" /&gt;&lt;/a&gt; &lt;a href="https://blog.lancedb.com/"&gt;&lt;img src="https://img.shields.io/badge/Blog-100000?style=for-the-badge&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="Blog" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/zMM32dvNtd"&gt;&lt;img src="https://img.shields.io/badge/-Discord-100000?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/lancedb"&gt;&lt;img src="https://img.shields.io/badge/-Twitter-100000?style=for-the-badge&amp;amp;logo=x&amp;amp;logoColor=white&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="Twitter" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/lancedb/"&gt;&lt;img src="https://img.shields.io/badge/-LinkedIn-100000?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white&amp;amp;labelColor=645cfb&amp;amp;color=645cfb" alt="LinkedIn" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>tokio-rs/tokio</title>
      <link>https://github.com/tokio-rs/tokio</link>
      <description>&lt;p&gt;A runtime for writing reliable asynchronous applications with Rust. Provides I/O, networking, scheduling, timers, ...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tokio&lt;/h1&gt; 
&lt;p&gt;A runtime for writing reliable, asynchronous, and slim applications with the Rust programming language. It is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Tokio's zero-cost abstractions give you bare-metal performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Tokio leverages Rust's ownership, type system, and concurrency model to reduce bugs and ensure thread safety.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Tokio has a minimal footprint, and handles backpressure and cancellation naturally.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/tokio"&gt;&lt;img src="https://img.shields.io/crates/v/tokio.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tokio-rs/tokio/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tokio-rs/tokio/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://github.com/tokio-rs/tokio/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/tokio"&gt;&lt;img src="https://img.shields.io/discord/500028886025895936.svg?logo=discord&amp;amp;style=flat-square" alt="Discord chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://tokio.rs"&gt;Website&lt;/a&gt; | &lt;a href="https://tokio.rs/tokio/tutorial"&gt;Guides&lt;/a&gt; | &lt;a href="https://docs.rs/tokio/latest/tokio"&gt;API Docs&lt;/a&gt; | &lt;a href="https://discord.gg/tokio"&gt;Chat&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A multithreaded, work-stealing based task &lt;a href="https://docs.rs/tokio/latest/tokio/runtime/index.html"&gt;scheduler&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;A reactor backed by the operating system's event queue (epoll, kqueue, IOCP, etc.).&lt;/li&gt; 
 &lt;li&gt;Asynchronous &lt;a href="https://docs.rs/tokio/latest/tokio/net/index.html"&gt;TCP and UDP&lt;/a&gt; sockets.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These components provide the runtime components necessary for building an asynchronous application.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;A basic TCP echo server with Tokio.&lt;/p&gt; 
&lt;p&gt;Make sure you activated the full features of the tokio crate on Cargo.toml:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
tokio = { version = "1.48.0", features = ["full"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, on your main.rs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust,no_run"&gt;use tokio::net::TcpListener;
use tokio::io::{AsyncReadExt, AsyncWriteExt};

#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let listener = TcpListener::bind("127.0.0.1:8080").await?;

    loop {
        let (mut socket, _) = listener.accept().await?;

        tokio::spawn(async move {
            let mut buf = [0; 1024];

            // In a loop, read data from the socket and write the data back.
            loop {
                let n = match socket.read(&amp;amp;mut buf).await {
                    // socket closed
                    Ok(0) =&amp;gt; return,
                    Ok(n) =&amp;gt; n,
                    Err(e) =&amp;gt; {
                        eprintln!("failed to read from socket; err = {:?}", e);
                        return;
                    }
                };

                // Write the data back
                if let Err(e) = socket.write_all(&amp;amp;buf[0..n]).await {
                    eprintln!("failed to write to socket; err = {:?}", e);
                    return;
                }
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More examples can be found &lt;a href="https://github.com/tokio-rs/tokio/tree/master/examples"&gt;here&lt;/a&gt;. For a larger "real world" example, see the &lt;a href="https://github.com/tokio-rs/mini-redis/"&gt;mini-redis&lt;/a&gt; repository.&lt;/p&gt; 
&lt;p&gt;To see a list of the available features flags that can be enabled, check our &lt;a href="https://docs.rs/tokio/#feature-flags"&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;First, see if the answer to your question can be found in the &lt;a href="https://tokio.rs/tokio/tutorial"&gt;Guides&lt;/a&gt; or the &lt;a href="https://docs.rs/tokio/latest/tokio"&gt;API documentation&lt;/a&gt;. If the answer is not there, there is an active community in the &lt;a href="https://discord.gg/tokio"&gt;Tokio Discord server&lt;/a&gt;. We would be happy to try to answer your question. You can also ask your question on &lt;a href="https://github.com/tokio-rs/tokio/discussions"&gt;the discussions page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;🎈&lt;/span&gt; Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href="https://github.com/tokio-rs/tokio/raw/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to help you get involved in the Tokio project.&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;In addition to the crates in this repository, the Tokio project also maintains several other libraries, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum"&gt;&lt;code&gt;axum&lt;/code&gt;&lt;/a&gt;: A web application framework that focuses on ergonomics and modularity.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/hyperium/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;: A fast and correct HTTP/1.1 and HTTP/2 implementation for Rust.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/hyperium/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;: A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/seanmonstar/warp"&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt;: A super-easy, composable, web server framework for warp speeds.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tower-rs/tower"&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt;: A library of modular and reusable components for building robust networking clients and servers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/tracing"&gt;&lt;code&gt;tracing&lt;/code&gt;&lt;/a&gt; (formerly &lt;code&gt;tokio-trace&lt;/code&gt;): A framework for application-level tracing and async-aware diagnostics.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/mio"&gt;&lt;code&gt;mio&lt;/code&gt;&lt;/a&gt;: A low-level, cross-platform abstraction over OS I/O APIs that powers &lt;code&gt;tokio&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/bytes"&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;: Utilities for working with bytes, including efficient byte buffers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/loom"&gt;&lt;code&gt;loom&lt;/code&gt;&lt;/a&gt;: A testing tool for concurrent Rust code.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;The Tokio repository contains multiple crates. Each crate has its own changelog.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tokio&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-util&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-util/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-stream&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-stream/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-macros&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-macros/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-test&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-test/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Rust Versions&lt;/h2&gt; 
&lt;!--
When updating this, also update:
- .github/workflows/ci.yml
- CONTRIBUTING.md
- README.md
- tokio/README.md
- tokio/Cargo.toml
- tokio-util/Cargo.toml
- tokio-test/Cargo.toml
- tokio-stream/Cargo.toml
--&gt; 
&lt;p&gt;Tokio will keep a rolling MSRV (minimum supported rust version) policy of &lt;strong&gt;at least&lt;/strong&gt; 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.71.&lt;/p&gt; 
&lt;p&gt;Note that the MSRV is not increased automatically, and only as part of a minor release. The MSRV history for past minor releases can be found below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;1.48 to now - Rust 1.71&lt;/li&gt; 
 &lt;li&gt;1.39 to 1.47 - Rust 1.70&lt;/li&gt; 
 &lt;li&gt;1.30 to 1.38 - Rust 1.63&lt;/li&gt; 
 &lt;li&gt;1.27 to 1.29 - Rust 1.56&lt;/li&gt; 
 &lt;li&gt;1.17 to 1.26 - Rust 1.49&lt;/li&gt; 
 &lt;li&gt;1.15 to 1.16 - Rust 1.46&lt;/li&gt; 
 &lt;li&gt;1.0 to 1.14 - Rust 1.45&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that although we try to avoid the situation where a dependency transitively increases the MSRV of Tokio, we do not guarantee that this does not happen. However, every minor release will have some set of versions of dependencies that works with the MSRV of that minor release.&lt;/p&gt; 
&lt;h2&gt;Release schedule&lt;/h2&gt; 
&lt;p&gt;Tokio doesn't follow a fixed release schedule, but we typically make one minor release each month. We make patch releases for bugfixes as necessary.&lt;/p&gt; 
&lt;h2&gt;Bug patching policy&lt;/h2&gt; 
&lt;p&gt;For the purposes of making patch releases with bugfixes, we have designated certain minor releases as LTS (long term support) releases. Whenever a bug warrants a patch release with a fix for the bug, it will be backported and released as a new patch release for each LTS minor version. Our current LTS releases are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;1.43.x&lt;/code&gt; - LTS release until March 2026. (MSRV 1.70)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.47.x&lt;/code&gt; - LTS release until September 2026. (MSRV 1.70)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each LTS release will continue to receive backported fixes for at least a year. If you wish to use a fixed minor release in your project, we recommend that you use an LTS release.&lt;/p&gt; 
&lt;p&gt;To use a fixed minor version, you can specify the version with a tilde. For example, to specify that you wish to use the newest &lt;code&gt;1.43.x&lt;/code&gt; patch release, you can use the following dependency specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;tokio = { version = "~1.43", features = [...] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Previous LTS releases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;1.8.x&lt;/code&gt; - LTS release until February 2022.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.14.x&lt;/code&gt; - LTS release until June 2022.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.18.x&lt;/code&gt; - LTS release until June 2023.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.20.x&lt;/code&gt; - LTS release until September 2023.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.25.x&lt;/code&gt; - LTS release until March 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.32.x&lt;/code&gt; - LTS release until September 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.36.x&lt;/code&gt; - LTS release until March 2025.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.38.x&lt;/code&gt; - LTS release until July 2025.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://github.com/tokio-rs/tokio/raw/master/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tokio by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>