<rss version="2.0">
  <channel>
    <title>GitHub TypeScript Daily Trending</title>
    <description>Daily Trending of TypeScript in GitHub</description>
    <pubDate>Fri, 01 Aug 2025 01:40:28 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>fastrepl/hyprnote</title>
      <link>https://github.com/fastrepl/hyprnote</link>
      <description>&lt;p&gt;Local-first AI Notepad for Private Meetings&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/e5fac942-1a51-4180-9d64-f508db705f9d" alt="github_banner_v2"&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;/p&gt;
&lt;p align="center"&gt;AI notepad for &lt;strong&gt;private&lt;/strong&gt; meetings. Not a single byte of data leaves your device.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://deepwiki.com/fastrepl/hyprnote"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki"&gt;&lt;/a&gt; &lt;a href="https://hyprnote.com/discord" target="_blank"&gt;&lt;img src="https://img.shields.io/static/v1?label=Join%20our&amp;amp;message=Discord&amp;amp;color=blue&amp;amp;logo=Discord" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://x.com/tryhyprnote" target="_blank"&gt;&lt;img src="https://img.shields.io/static/v1?label=Follow%20us%20on&amp;amp;message=X&amp;amp;color=black&amp;amp;logo=x" alt="X"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h2&gt;What is Hyprnote?&lt;/h2&gt; 
&lt;p&gt;Hyprnote is a local-first AI notepad designed for people in back-to-back meetings.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Listens to your meetings while you write&lt;/li&gt; 
 &lt;li&gt;Crafts smart summaries based on your quick notes&lt;/li&gt; 
 &lt;li&gt;Runs completely &lt;strong&gt;offline&lt;/strong&gt; using open-source models like Whisper or HyprLLM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;No clouds. No leaks. Just your notes—on your machine.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew tap fastrepl/hyprnote &amp;amp;&amp;amp; brew install hyprnote --cask
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://hyprnote.com/download"&gt;macOS&lt;/a&gt; (public beta)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fastrepl/hyprnote/issues/66"&gt;Windows&lt;/a&gt; (soon)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fastrepl/hyprnote/issues/67"&gt;Linux&lt;/a&gt; (of course)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;h3&gt;Realtime Transcript&lt;/h3&gt; 
&lt;p&gt;Watch a live transcript update as the meeting unfolds—accurate, fast, and fully local. &lt;img width="959" height="712" alt="image" src="https://github.com/user-attachments/assets/d24b8b43-a052-44cd-803e-daa3ff600a9c"&gt;&lt;/p&gt; 
&lt;h3&gt;From Memos to Summaries&lt;/h3&gt; 
&lt;p&gt;Jot things down during your call. Hyprnote turns them into a polished meeting summary—context-aware and easy to share. &lt;img width="959" height="712" alt="image" src="https://github.com/user-attachments/assets/489f9239-1a32-4217-9d74-554906687fe1"&gt;&lt;/p&gt; 
&lt;h3&gt;Truly Local&lt;/h3&gt; 
&lt;p&gt;No internet? No problem. Hyprnote works offline by default and keeps everything on your device.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/c6649a63-3d41-40ea-a1fd-8c0713ad91bc" alt="offline"&gt;&lt;/p&gt; 
&lt;h3&gt;Bring Your Own LLM&lt;/h3&gt; 
&lt;p&gt;Prefer something custom? You can swap in your own language model:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run local models via Ollama&lt;/li&gt; 
 &lt;li&gt;Use approved third-party APIs like Gemini, Claude, or Azure-hosted GPT&lt;/li&gt; 
 &lt;li&gt;Stay compliant with whatever your org allows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Hyprnote plays nice with whatever stack you’re running.&lt;/p&gt; 
&lt;img width="912" height="712" alt="image" src="https://github.com/user-attachments/assets/717dc39a-3359-46d6-a92f-51de56907750"&gt; 
&lt;h3&gt;Note Templates&lt;/h3&gt; 
&lt;p&gt;Prefer a certain style? Choose from predefined templates like bullet points, agenda-based, or paragraph summary. Or create your own.&lt;/p&gt; 
&lt;img width="959" height="712" alt="image" src="https://github.com/user-attachments/assets/d826a854-4b6f-415c-9e97-270f517c0868"&gt; 
&lt;h3&gt;Autonomy Selector&lt;/h3&gt; 
&lt;p&gt;Control how much freedom the AI takes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stick strictly to your quick notes&lt;/li&gt; 
 &lt;li&gt;Let Hyprnote improvise and reframe based on the full conversation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img width="912" height="712" alt="image" src="https://github.com/user-attachments/assets/7de5c74f-5d99-46ec-8a5f-a38fb62bafb1"&gt; 
&lt;h3&gt;AI Chat&lt;/h3&gt; 
&lt;p&gt;Ask follow-ups right inside your notes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;"What were the action items?"&lt;/li&gt; 
 &lt;li&gt;"Rewrite this in simpler language"&lt;/li&gt; 
 &lt;li&gt;"Translate to Spanish"&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img width="959" height="712" alt="image" src="https://github.com/user-attachments/assets/52b7dc14-906f-445f-91f9-b0089d40a495"&gt; 
&lt;h3&gt;Integrations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apple Calendar, Contacts&lt;/li&gt; 
 &lt;li&gt;Obsidian&lt;/li&gt; 
 &lt;li&gt;Coming soon: Notion, Slack, Hubspot, Salesforce&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img width="912" height="712" alt="image" src="https://github.com/user-attachments/assets/ab559e54-fda5-4c8c-97d7-ba1b9d134cc8"&gt;</description>
    </item>
    
    <item>
      <title>puckeditor/puck</title>
      <link>https://github.com/puckeditor/puck</link>
      <description>&lt;p&gt;The visual editor for React&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://puckeditor.com"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="https://res.cloudinary.com/die3nptcg/image/upload/Puck_Logo_White_RGB_j2rwgg.svg" height="100px" aria-label="Puck logo"&gt; 
   &lt;img src="https://res.cloudinary.com/die3nptcg/image/upload/Puck_Logo_Black_RGB_dqsjag.svg?sanitize=true" height="100px" aria-label="Puck logo"&gt; 
  &lt;/picture&gt; &lt;/a&gt; 
 &lt;p&gt;&lt;em&gt;The visual editor for React&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://puckeditor.com/docs"&gt;Documentation&lt;/a&gt; • &lt;a href="https://demo.puckeditor.com/edit"&gt;Demo&lt;/a&gt; • &lt;a href="https://discord.gg/V9mDAhuxyZ"&gt;Discord&lt;/a&gt; • &lt;a href="https://github.com/puckeditor/puck/raw/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;⭐️ Enjoying Puck? Please &lt;a href="https://github.com/puckeditor/puck"&gt;leave a star&lt;/a&gt;!&lt;/p&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;a href="https://demo.puckeditor.com/edit"&gt;&lt;img src="https://github.com/user-attachments/assets/25e1ae25-ca5e-450f-afa0-01816830b731" alt="GIF showing a page being created in the Puck Editor, with components being added, arranged, and customized in real time"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is Puck?&lt;/h2&gt; 
&lt;p&gt;Puck is a modular, open-source visual editor for React.js. You can use Puck to build custom drag-and-drop experiences with your own application and React components.&lt;/p&gt; 
&lt;p&gt;Because Puck is just a React component, it plays well with all React.js environments, including Next.js. You own your data and there’s no vendor lock-in.&lt;/p&gt; 
&lt;p&gt;Puck is also &lt;a href="https://github.com/puckeditor/puck?tab=MIT-1-ov-file#readme"&gt;licensed under MIT&lt;/a&gt;, making it suitable for both internal systems and commercial applications.&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;Install the package:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm i @measured/puck --save # or npx create-puck-app my-app
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Render the editor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;// Editor.jsx
import { Puck } from "@measured/puck";
import "@measured/puck/puck.css";

// Create Puck component config
const config = {
  components: {
    HeadingBlock: {
      fields: {
        children: {
          type: "text",
        },
      },
      render: ({ children }) =&amp;gt; {
        return &amp;lt;h1&amp;gt;{children}&amp;lt;/h1&amp;gt;;
      },
    },
  },
};

// Describe the initial data
const initialData = {};

// Save the data to your database
const save = (data) =&amp;gt; {};

// Render Puck editor
export function Editor() {
  return &amp;lt;Puck config={config} data={initialData} onPublish={save} /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Render the page:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;// Page.jsx
import { Render } from "@measured/puck";
import "@measured/puck/puck.css";

export function Page() {
  return &amp;lt;Render config={config} data={data} /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Recipes&lt;/h2&gt; 
&lt;p&gt;Use &lt;code&gt;create-puck-app&lt;/code&gt; to quickly spin up a a pre-configured app based on our provided &lt;a href="https://github.com/measuredco/puck/tree/main/recipes"&gt;recipes&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npx create-puck-app my-app
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Available recipes include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/measuredco/puck/tree/main/recipes/next"&gt;&lt;strong&gt;next&lt;/strong&gt;&lt;/a&gt;: Next.js example, using App Router and static page generation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/measuredco/puck/tree/main/recipes/remix"&gt;&lt;strong&gt;remix&lt;/strong&gt;&lt;/a&gt;: Remix Run v2 example, using dynamic routes at root-level&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/measuredco/puck/tree/main/recipes/react-router"&gt;&lt;strong&gt;react-router&lt;/strong&gt;&lt;/a&gt;: React Router v7 app example, using dynamic routes to create pages at any level&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/D9e4E3MQVZ"&gt;Discord server&lt;/a&gt; for discussions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/measuredco/awesome-puck"&gt;awesome-puck&lt;/a&gt; community repo for plugins, custom fields &amp;amp; more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get support&lt;/h2&gt; 
&lt;p&gt;If you have any questions about Puck, please open a &lt;a href="https://github.com/measuredco/puck/issues"&gt;GitHub issue&lt;/a&gt; or join us on &lt;a href="https://discord.gg/D9e4E3MQVZ"&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Or &lt;a href="https://app.cal.com/chrisvxd/puck-enquiry/"&gt;book a discovery call&lt;/a&gt; for hands-on support and consultancy.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT © &lt;a href="https://github.com/measuredco/puck/graphs/contributors"&gt;The Puck Contributors&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linkwarden/linkwarden</title>
      <link>https://github.com/linkwarden/linkwarden</link>
      <description>&lt;p&gt;⚡️⚡️⚡️ Self-hosted collaborative bookmark manager to collect, read, annotate, and fully preserve what matters, all in one place.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/linkwarden/linkwarden/main/assets/logo.png" width="100px"&gt; 
 &lt;h1&gt;Linkwarden&lt;/h1&gt; 
 &lt;h3&gt;Bookmarks, Evolved&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://discord.com/invite/CtuYV47nuJ"&gt;&lt;img src="https://img.shields.io/discord/1117993124669702164?logo=discord&amp;amp;style=flat" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/LinkwardenHQ"&gt;&lt;img src="https://img.shields.io/twitter/follow/linkwarden" alt="Twitter"&gt;&lt;/a&gt; &lt;a href="https://news.ycombinator.com/item?id=36942308"&gt;&lt;img src="https://img.shields.io/badge/Hacker%20News-280-%23FF6600"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/linkwarden/linkwarden/releases"&gt;&lt;img alt="GitHub release" src="https://img.shields.io/github/v/release/linkwarden/linkwarden"&gt;&lt;/a&gt; &lt;a href="https://crowdin.com/project/linkwarden"&gt; &lt;img src="https://badges.crowdin.net/linkwarden/localized.svg?sanitize=true" alt="Crowdin"&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/linkwarden"&gt;&lt;img src="https://img.shields.io/opencollective/all/linkwarden" alt="Open Collective"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://demo.linkwarden.app"&gt;« LAUNCH DEMO »&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://cloud.linkwarden.app"&gt;Cloud&lt;/a&gt; · &lt;a href="https://linkwarden.app"&gt;Website&lt;/a&gt; · &lt;a href="https://github.com/linkwarden/linkwarden#features"&gt;Features&lt;/a&gt; · &lt;a href="https://docs.linkwarden.app"&gt;Docs&lt;/a&gt;&lt;/p&gt; 
 &lt;img src="https://raw.githubusercontent.com/linkwarden/linkwarden/main/assets/home.png"&gt; 
&lt;/div&gt; 
&lt;h2&gt;Intro &amp;amp; motivation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Linkwarden is a self-hosted, open-source collaborative bookmark manager to collect, read, annotate, and fully preserve what matters, all in one place.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The objective is to organize useful webpages and articles you find across the web in one place, and since useful webpages can go away (see the inevitability of &lt;a href="https://en.wikipedia.org/wiki/Link_rot"&gt;Link Rot&lt;/a&gt;), Linkwarden also saves a copy of each webpage as a Screenshot and PDF, ensuring accessibility even if the original content is no longer available.&lt;/p&gt; 
&lt;p&gt;In addition to preservation, Linkwarden provides a user-friendly reading and annotation experience that blends the simplicity of a “read-it-later” tool with the reliability of a web archive. Whether you’re highlighting key ideas, jotting down thoughts, or revisiting content long after it’s disappeared from the web, Linkwarden keeps your knowledge accessible and organized.&lt;/p&gt; 
&lt;p&gt;Linkwarden is also designed with collaboration in mind, enabling you to share links with the public and/or collaborate seamlessly with multiple users.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;br&gt; Our official &lt;a href="https://linkwarden.app/#pricing"&gt;Cloud&lt;/a&gt; offering provides the simplest way to begin using Linkwarden and it's the preferred choice for many due to its time-saving benefits. &lt;br&gt; Your subscription supports our hosting infrastructure and ongoing development. &lt;br&gt; Alternatively, if you prefer self-hosting Linkwarden, you can do so by following our &lt;a href="https://docs.linkwarden.app/self-hosting/installation"&gt;Installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📸 Auto capture a screenshot, PDF, and single html file of each webpage.&lt;/li&gt; 
 &lt;li&gt;📖 Reader view of the webpage, with the ability to highlight and annotate text.&lt;/li&gt; 
 &lt;li&gt;🏛️ Send your webpage to Wayback Machine (&lt;a href="https://archive.org"&gt;archive.org&lt;/a&gt;) for a snapshot. (Optional)&lt;/li&gt; 
 &lt;li&gt;✨ Local AI Tagging to automatically tag your links based on their content (Optional).&lt;/li&gt; 
 &lt;li&gt;📂 Organize links by collection, sub-collection, name, description and multiple tags.&lt;/li&gt; 
 &lt;li&gt;👥 Collaborate on gathering links in a collection.&lt;/li&gt; 
 &lt;li&gt;🎛️ Customize the permissions of each member.&lt;/li&gt; 
 &lt;li&gt;🌐 Share your collected links and preserved formats with the world.&lt;/li&gt; 
 &lt;li&gt;📌 Pin your favorite links to dashboard.&lt;/li&gt; 
 &lt;li&gt;🔍 Full text search, filter and sort for easy retrieval.&lt;/li&gt; 
 &lt;li&gt;📱 Responsive design and supports most modern browsers.&lt;/li&gt; 
 &lt;li&gt;🌓 Dark/Light mode support.&lt;/li&gt; 
 &lt;li&gt;🧩 Browser extension. &lt;a href="https://github.com/linkwarden/browser-extension"&gt;Star it here!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🔄 Browser Synchronization (using &lt;a href="https://floccus.org"&gt;Floccus&lt;/a&gt;!)&lt;/li&gt; 
 &lt;li&gt;⬇️ Import and export your bookmarks.&lt;/li&gt; 
 &lt;li&gt;🔐 SSO integration. (Enterprise and Self-hosted users only)&lt;/li&gt; 
 &lt;li&gt;📦 Installable Progressive Web App (PWA).&lt;/li&gt; 
 &lt;li&gt;🍎 iOS Shortcut to save Links to Linkwarden.&lt;/li&gt; 
 &lt;li&gt;🔑 API keys.&lt;/li&gt; 
 &lt;li&gt;✅ Bulk actions.&lt;/li&gt; 
 &lt;li&gt;👥 User administration.&lt;/li&gt; 
 &lt;li&gt;🌐 Support for Other Languages (i18n).&lt;/li&gt; 
 &lt;li&gt;📁 Image and PDF Uploads.&lt;/li&gt; 
 &lt;li&gt;🎨 Custom Icons for Links and Collections.&lt;/li&gt; 
 &lt;li&gt;🔔 RSS Feed Subscription.&lt;/li&gt; 
 &lt;li&gt;✨ And many more features. (Literally!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Like what we're doing? Give us a Star ⭐&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/linkwarden/linkwarden/main/assets/star_repo.gif" alt="Star Us"&gt;&lt;/p&gt; 
&lt;h2&gt;We're building our Community 🌐&lt;/h2&gt; 
&lt;p&gt;Join and follow us in the following platforms to stay up to date about the most recent features and for support:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.com/invite/CtuYV47nuJ"&gt;&lt;img src="https://img.shields.io/discord/1117993124669702164?logo=discord&amp;amp;style=flat" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://twitter.com/LinkwardenHQ"&gt;&lt;img src="https://img.shields.io/twitter/follow/linkwarden" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://fosstodon.org/@linkwarden"&gt;&lt;img src="https://img.shields.io/mastodon/follow/110748840237143200?domain=https%3A%2F%2Ffosstodon.org" alt="Mastodon"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Suggestions&lt;/h2&gt; 
&lt;p&gt;We &lt;em&gt;usually&lt;/em&gt; go after the &lt;a href="https://github.com/linkwarden/linkwarden/issues?q=is%3Aissue%20is%3Aopen%20sort%3Areactions-%2B1-desc"&gt;popular suggestions&lt;/a&gt;. Feel free to open a &lt;a href="https://github.com/linkwarden/linkwarden/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.md&amp;amp;title="&gt;new issue&lt;/a&gt; to suggest one - others might be interested too! :)&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Make sure to check out our &lt;a href="https://github.com/orgs/linkwarden/projects/1"&gt;public roadmap&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community Projects&lt;/h2&gt; 
&lt;p&gt;Here are some community-maintained projects that are built around Linkwarden:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://apps.apple.com/ca/app/my-links-for-linkwarden/id6504573402"&gt;My Links&lt;/a&gt; - iOS and MacOS Apps, maintained by &lt;a href="https://github.com/JGeek00"&gt;JGeek00&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://fossdroid.com/a/linkdroid-for-linkwarden.html"&gt;LinkDroid&lt;/a&gt; - Android App with share sheet integration, &lt;a href="https://github.com/Dacid99/LinkDroid-for-Linkwarden"&gt;source code&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Elbullazul/LinkGuardian"&gt;LinkGuardian&lt;/a&gt; - An Android client for Linkwarden. Built with Kotlin and Jetpack compose.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rtuszik/starwarden"&gt;StarWarden&lt;/a&gt; - A browser extension to save your starred GitHub repositories to Linkwarden.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;If you want to contribute, Thanks! Start by choosing one of our &lt;a href="https://github.com/linkwarden/linkwarden/issues?q=is%3Aissue%20is%3Aopen%20sort%3Areactions-%2B1-desc"&gt;popular suggestions&lt;/a&gt;, just please stay in touch with &lt;a href="https://github.com/daniel31x13"&gt;@daniel31x13&lt;/a&gt; before starting.&lt;/p&gt; 
&lt;h1&gt;Translations&lt;/h1&gt; 
&lt;p&gt;If you want to help us translate Linkwarden to your language, please check out our &lt;a href="https://crowdin.com/project/linkwarden"&gt;Crowdin page&lt;/a&gt; and start translating. We would love to have your help!&lt;/p&gt; 
&lt;p&gt;To start translating a new language, please create an issue so we can set it up for you. New languages will be added once they reach at least 50% translation completion.&lt;/p&gt; 
&lt;a href="https://crowdin.com/project/linkwarden"&gt; &lt;img src="https://badges.crowdin.net/linkwarden/localized.svg?sanitize=true" alt="Crowdin"&gt;&lt;/a&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you found a security vulnerability, please do &lt;strong&gt;not&lt;/strong&gt; create a public issue, instead send an email to &lt;a href="mailto:security@linkwarden.app"&gt;security@linkwarden.app&lt;/a&gt; stating the vulnerability. Thanks!&lt;/p&gt; 
&lt;h2&gt;Support &amp;lt;3&lt;/h2&gt; 
&lt;p&gt;Other than using our official &lt;a href="https://linkwarden.app/#pricing"&gt;Cloud&lt;/a&gt; offering, any &lt;a href="https://opencollective.com/linkwarden"&gt;donations&lt;/a&gt; are highly appreciated as well!&lt;/p&gt; 
&lt;p&gt;Here are the other ways to support/cheer this project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Starring this repository.&lt;/li&gt; 
 &lt;li&gt;Joining us on &lt;a href="https://discord.com/invite/CtuYV47nuJ"&gt;Discord&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Referring Linkwarden to a friend.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you did any of the above, Thanksss! Otherwise thanks.&lt;/p&gt; 
&lt;h2&gt;Thanks to All the Contributors 💪&lt;/h2&gt; 
&lt;p&gt;Huge thanks to these guys for spending their time helping Linkwarden grow. They rock! ⚡️&lt;/p&gt; 
&lt;img src="https://contributors-img.web.app/image?repo=linkwarden/linkwarden" alt="Contributors"&gt;</description>
    </item>
    
    <item>
      <title>puppeteer/puppeteer</title>
      <link>https://github.com/puppeteer/puppeteer</link>
      <description>&lt;p&gt;JavaScript API for Chrome and Firefox&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Puppeteer&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/puppeteer/puppeteer/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/puppeteer/puppeteer/actions/workflows/ci.yml/badge.svg?branch=main" alt="build"&gt;&lt;/a&gt; &lt;a href="https://npmjs.org/package/puppeteer"&gt;&lt;img src="https://img.shields.io/npm/v/puppeteer.svg?sanitize=true" alt="npm puppeteer package"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://user-images.githubusercontent.com/10379601/29446482-04f7036a-841f-11e7-9872-91d1fc2ea683.png" height="200" align="right"&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Puppeteer is a JavaScript library which provides a high-level API to control Chrome or Firefox over the &lt;a href="https://chromedevtools.github.io/devtools-protocol/"&gt;DevTools Protocol&lt;/a&gt; or &lt;a href="https://pptr.dev/webdriver-bidi"&gt;WebDriver BiDi&lt;/a&gt;. Puppeteer runs in the headless (no visible UI) by default&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;a href="https://pptr.dev/docs"&gt;Get started&lt;/a&gt; | &lt;a href="https://pptr.dev/api"&gt;API&lt;/a&gt; | &lt;a href="https://pptr.dev/faq"&gt;FAQ&lt;/a&gt; | &lt;a href="https://pptr.dev/contributing"&gt;Contributing&lt;/a&gt; | &lt;a href="https://pptr.dev/troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm i puppeteer # Downloads compatible Chrome during installation.
npm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;import puppeteer from 'puppeteer';
// Or import puppeteer from 'puppeteer-core';

// Launch the browser and open a new blank page
const browser = await puppeteer.launch();
const page = await browser.newPage();

// Navigate the page to a URL.
await page.goto('https://developer.chrome.com/');

// Set screen size.
await page.setViewport({width: 1080, height: 1024});

// Type into search box using accessible input name.
await page.locator('aria/Search').fill('automate beyond recorder');

// Wait and click on first result.
await page.locator('.devsite-result-item-link').click();

// Locate the full title with a unique string.
const textSelector = await page
  .locator('text/Customize and automate')
  .waitHandle();
const fullTitle = await textSelector?.evaluate(el =&amp;gt; el.textContent);

// Print the full title.
console.log('The title of this blog post is "%s".', fullTitle);

await browser.close();
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>microsoft/playwright</title>
      <link>https://github.com/microsoft/playwright</link>
      <description>&lt;p&gt;Playwright is a framework for Web Testing and Automation. It allows testing Chromium, Firefox and WebKit with a single API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🎭 Playwright&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/playwright"&gt;&lt;img src="https://img.shields.io/npm/v/playwright.svg?sanitize=true" alt="npm version"&gt;&lt;/a&gt; 
 &lt;!-- GEN:chromium-version-badge --&gt;&lt;a href="https://www.chromium.org/Home"&gt;&lt;img src="https://img.shields.io/badge/chromium-139.0.7258.42-blue.svg?logo=google-chrome" alt="Chromium version"&gt;&lt;/a&gt;
 &lt;!-- GEN:stop --&gt; 
 &lt;!-- GEN:firefox-version-badge --&gt;&lt;a href="https://www.mozilla.org/en-US/firefox/new/"&gt;&lt;img src="https://img.shields.io/badge/firefox-141.0-blue.svg?logo=firefoxbrowser" alt="Firefox version"&gt;&lt;/a&gt;
 &lt;!-- GEN:stop --&gt; 
 &lt;!-- GEN:webkit-version-badge --&gt;&lt;a href="https://webkit.org/"&gt;&lt;img src="https://img.shields.io/badge/webkit-26.0-blue.svg?logo=safari" alt="WebKit version"&gt;&lt;/a&gt;
 &lt;!-- GEN:stop --&gt; &lt;a href="https://aka.ms/playwright/discord"&gt;&lt;img src="https://img.shields.io/badge/join-discord-informational" alt="Join Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://playwright.dev"&gt;Documentation&lt;/a&gt; | &lt;a href="https://playwright.dev/docs/api/class-playwright"&gt;API reference&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Playwright is a framework for Web Testing and Automation. It allows testing &lt;a href="https://www.chromium.org/Home"&gt;Chromium&lt;/a&gt;, &lt;a href="https://www.mozilla.org/en-US/firefox/new/"&gt;Firefox&lt;/a&gt; and &lt;a href="https://webkit.org/"&gt;WebKit&lt;/a&gt; with a single API. Playwright is built to enable cross-browser web automation that is &lt;strong&gt;ever-green&lt;/strong&gt;, &lt;strong&gt;capable&lt;/strong&gt;, &lt;strong&gt;reliable&lt;/strong&gt; and &lt;strong&gt;fast&lt;/strong&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;Linux&lt;/th&gt; 
   &lt;th align="center"&gt;macOS&lt;/th&gt; 
   &lt;th align="center"&gt;Windows&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Chromium 
    &lt;!-- GEN:chromium-version --&gt;139.0.7258.42
    &lt;!-- GEN:stop --&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;WebKit 
    &lt;!-- GEN:webkit-version --&gt;26.0
    &lt;!-- GEN:stop --&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Firefox 
    &lt;!-- GEN:firefox-version --&gt;141.0
    &lt;!-- GEN:stop --&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Headless execution is supported for all browsers on all platforms. Check out &lt;a href="https://playwright.dev/docs/intro#system-requirements"&gt;system requirements&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;Looking for Playwright for &lt;a href="https://playwright.dev/python/docs/intro"&gt;Python&lt;/a&gt;, &lt;a href="https://playwright.dev/dotnet/docs/intro"&gt;.NET&lt;/a&gt;, or &lt;a href="https://playwright.dev/java/docs/intro"&gt;Java&lt;/a&gt;?&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Playwright has its own test runner for end-to-end tests, we call it Playwright Test.&lt;/p&gt; 
&lt;h3&gt;Using init command&lt;/h3&gt; 
&lt;p&gt;The easiest way to get started with Playwright Test is to run the init command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Shell"&gt;# Run from your project's root directory
npm init playwright@latest
# Or create a new project
npm init playwright@latest new-project
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a configuration file, optionally add examples, a GitHub Action workflow and a first test example.spec.ts. You can now jump directly to writing assertions section.&lt;/p&gt; 
&lt;h3&gt;Manually&lt;/h3&gt; 
&lt;p&gt;Add dependency and install browsers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Shell"&gt;npm i -D @playwright/test
# install supported browsers
npx playwright install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can optionally install only selected browsers, see &lt;a href="https://playwright.dev/docs/cli#install-browsers"&gt;install browsers&lt;/a&gt; for more details. Or you can install no browsers at all and use existing &lt;a href="https://playwright.dev/docs/browsers"&gt;browser channels&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://playwright.dev/docs/intro"&gt;Getting started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://playwright.dev/docs/api/class-playwright"&gt;API reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Capabilities&lt;/h2&gt; 
&lt;h3&gt;Resilient • No flaky tests&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Auto-wait&lt;/strong&gt;. Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts - a primary cause of flaky tests.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Web-first assertions&lt;/strong&gt;. Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tracing&lt;/strong&gt;. Configure test retry strategy, capture execution trace, videos and screenshots to eliminate flakes.&lt;/p&gt; 
&lt;h3&gt;No trade-offs • No limits&lt;/h3&gt; 
&lt;p&gt;Browsers run web content belonging to different origins in different processes. Playwright is aligned with the architecture of the modern browsers and runs tests out-of-process. This makes Playwright free of the typical in-process test runner limitations.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Multiple everything&lt;/strong&gt;. Test scenarios that span multiple tabs, multiple origins and multiple users. Create scenarios with different contexts for different users and run them against your server, all in one test.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Trusted events&lt;/strong&gt;. Hover elements, interact with dynamic controls and produce trusted events. Playwright uses real browser input pipeline indistinguishable from the real user.&lt;/p&gt; 
&lt;p&gt;Test frames, pierce Shadow DOM. Playwright selectors pierce shadow DOM and allow entering frames seamlessly.&lt;/p&gt; 
&lt;h3&gt;Full isolation • Fast execution&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Browser contexts&lt;/strong&gt;. Playwright creates a browser context for each test. Browser context is equivalent to a brand new browser profile. This delivers full test isolation with zero overhead. Creating a new browser context only takes a handful of milliseconds.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Log in once&lt;/strong&gt;. Save the authentication state of the context and reuse it in all the tests. This bypasses repetitive log-in operations in each test, yet delivers full isolation of independent tests.&lt;/p&gt; 
&lt;h3&gt;Powerful Tooling&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://playwright.dev/docs/codegen"&gt;Codegen&lt;/a&gt;&lt;/strong&gt;. Generate tests by recording your actions. Save them into any language.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://playwright.dev/docs/inspector"&gt;Playwright inspector&lt;/a&gt;&lt;/strong&gt;. Inspect page, generate selectors, step through the test execution, see click points and explore execution logs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://playwright.dev/docs/trace-viewer"&gt;Trace Viewer&lt;/a&gt;&lt;/strong&gt;. Capture all the information to investigate the test failure. Playwright trace contains test execution screencast, live DOM snapshots, action explorer, test source and many more.&lt;/p&gt; 
&lt;p&gt;Looking for Playwright for &lt;a href="https://playwright.dev/docs/intro"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://playwright.dev/docs/intro"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://playwright.dev/python/docs/intro"&gt;Python&lt;/a&gt;, &lt;a href="https://playwright.dev/dotnet/docs/intro"&gt;.NET&lt;/a&gt;, or &lt;a href="https://playwright.dev/java/docs/intro"&gt;Java&lt;/a&gt;?&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;To learn how to run these Playwright Test examples, check out our &lt;a href="https://playwright.dev/docs/intro"&gt;getting started docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Page screenshot&lt;/h4&gt; 
&lt;p&gt;This code snippet navigates to Playwright homepage and saves a screenshot.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-TypeScript"&gt;import { test } from '@playwright/test';

test('Page Screenshot', async ({ page }) =&amp;gt; {
  await page.goto('https://playwright.dev/');
  await page.screenshot({ path: `example.png` });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Mobile and geolocation&lt;/h4&gt; 
&lt;p&gt;This snippet emulates Mobile Safari on a device at given geolocation, navigates to maps.google.com, performs the action and takes a screenshot.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-TypeScript"&gt;import { test, devices } from '@playwright/test';

test.use({
  ...devices['iPhone 13 Pro'],
  locale: 'en-US',
  geolocation: { longitude: 12.492507, latitude: 41.889938 },
  permissions: ['geolocation'],
})

test('Mobile and geolocation', async ({ page }) =&amp;gt; {
  await page.goto('https://maps.google.com');
  await page.getByText('Your location').click();
  await page.waitForRequest(/.*preview\/pwa/);
  await page.screenshot({ path: 'colosseum-iphone.png' });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Evaluate in browser context&lt;/h4&gt; 
&lt;p&gt;This code snippet navigates to example.com, and executes a script in the page context.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-TypeScript"&gt;import { test } from '@playwright/test';

test('Evaluate in browser context', async ({ page }) =&amp;gt; {
  await page.goto('https://www.example.com/');
  const dimensions = await page.evaluate(() =&amp;gt; {
    return {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight,
      deviceScaleFactor: window.devicePixelRatio
    }
  });
  console.log(dimensions);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Intercept network requests&lt;/h4&gt; 
&lt;p&gt;This code snippet sets up request routing for a page to log all network requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-TypeScript"&gt;import { test } from '@playwright/test';

test('Intercept network requests', async ({ page }) =&amp;gt; {
  // Log and continue all network requests
  await page.route('**', route =&amp;gt; {
    console.log(route.request().url());
    route.continue();
  });
  await page.goto('http://todomvc.com');
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://playwright.dev"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://playwright.dev/docs/api/class-playwright/"&gt;API reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/playwright/main/CONTRIBUTING.md"&gt;Contribution guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/playwright/releases"&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Canner/WrenAI</title>
      <link>https://github.com/Canner/WrenAI</link>
      <description>&lt;p&gt;⚡️Wren AI is your GenBI Agent, that you can query any database with natural language, get accurate SQL(Text-to-SQL), charts(Text-to-Charts) &amp; AI-generated insights in seconds.&lt;/p&gt;&lt;hr&gt;&lt;p align="center" id="top"&gt; &lt;a href="https://getwren.ai/?utm_source=github&amp;amp;utm_medium=title&amp;amp;utm_campaign=readme"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="./misc/wrenai_logo.png"&gt; 
   &lt;img src="https://raw.githubusercontent.com/Canner/WrenAI/main/misc/wrenai_logo_white.png" width="300px"&gt; 
  &lt;/picture&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h1 align="center"&gt;&lt;a href="https://getwren.ai/?utm_source=github&amp;amp;utm_medium=title&amp;amp;utm_campaign=readme"&gt;Wren AI - Open-Source GenBI Agent&lt;/a&gt;&lt;/h1&gt;
&lt;a href="https://getwren.ai/?utm_source=github&amp;amp;utm_medium=title&amp;amp;utm_campaign=readme"&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a aria-label="Follow us on X" href="https://x.com/getwrenai"&gt; &lt;img alt="" src="https://img.shields.io/badge/-@getwrenai-blue?style=for-the-badge&amp;amp;logo=x&amp;amp;logoColor=white&amp;amp;labelColor=gray&amp;amp;logoWidth=20"&gt; &lt;/a&gt; &lt;a aria-label="Releases" href="https://github.com/canner/WrenAI/releases"&gt; &lt;img alt="" src="https://img.shields.io/github/v/release/canner/WrenAI?logo=github&amp;amp;label=GitHub%20Release&amp;amp;color=blue&amp;amp;style=for-the-badge"&gt; &lt;/a&gt; &lt;a aria-label="License" href="https://github.com/Canner/WrenAI/raw/main/LICENSE"&gt; &lt;img alt="" src="https://img.shields.io/github/license/canner/WrenAI?color=blue&amp;amp;style=for-the-badge"&gt; &lt;/a&gt; &lt;a href="https://docs.getwren.ai"&gt; &lt;img src="https://img.shields.io/badge/docs-online-brightgreen?style=for-the-badge" alt="Docs"&gt; &lt;/a&gt; &lt;a aria-label="Join the community on GitHub" href="https://discord.gg/5DvshJqG8Z"&gt; &lt;img alt="" src="https://img.shields.io/badge/-JOIN%20THE%20COMMUNITY-blue?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;labelColor=grey&amp;amp;logoWidth=20"&gt; &lt;/a&gt; &lt;a aria-label="Canner" href="https://cannerdata.com/?utm_source=github&amp;amp;utm_medium=badge&amp;amp;utm_campaign=readme"&gt; &lt;img src="https://img.shields.io/badge/%F0%9F%A7%A1-Made%20by%20Canner-blue?style=for-the-badge"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://trendshift.io/repositories/9263" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/9263" alt="Canner%2FWrenAI | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Wren AI is your GenBI Agent, that you can query any database with natural language → get accurate SQL(Text-to-SQL), charts(Text-to-Charts) &amp;amp; AI-generated insights in seconds. ⚡️&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Canner/WrenAI/main/misc/workflow.png"&gt; &lt;/p&gt; 
&lt;h2&gt;😍 Demos&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/f9c1cb34-5a95-4580-8890-ec9644da4160"&gt;https://github.com/user-attachments/assets/f9c1cb34-5a95-4580-8890-ec9644da4160&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/90ad1d35-bb1e-490b-9676-b29863ff090b"&gt;Watch GenBI Demo&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🤖 Features&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;What you get&lt;/th&gt; 
   &lt;th&gt;Why it matters&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Talk to Your Data&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Ask in any language → precise SQL &amp;amp; answers&lt;/td&gt; 
   &lt;td&gt;Slash the SQL learning curve﻿&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;GenBI Insights&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;AI-written summaries, charts &amp;amp; reports&lt;/td&gt; 
   &lt;td&gt;Decision-ready context in one click﻿&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Semantic Layer&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;MDL models encode schema, metrics, joins&lt;/td&gt; 
   &lt;td&gt;Keeps LLM outputs accurate &amp;amp; governed﻿&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Embed via API&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Generate queries &amp;amp; charts inside your apps (&lt;a href="https://wrenai.readme.io/reference/cloud-getting-started"&gt;API Docs&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;Build custom agents, SaaS features, chatbots﻿ (&lt;a href="https://huggingface.co/spaces/getWrenAI/wrenai-cloud-api-demo"&gt;Streamlit Live Demo&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;🤩 &lt;a href="https://getwren.ai/genbi?utm_source=github&amp;amp;utm_medium=content&amp;amp;utm_campaign=readme"&gt;Learn more about GenBI&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; 
&lt;p&gt;Using Wren AI is super simple, you can set it up within 3 minutes, and start to interact with your data!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Visit our &lt;a href="http://docs.getwren.ai/oss/installation?utm_source=github&amp;amp;utm_medium=content&amp;amp;utm_campaign=readme"&gt;Install in your local environment&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Visit the &lt;a href="https://docs.getwren.ai/oss/guide/connect/overview?utm_source=github&amp;amp;utm_medium=content&amp;amp;utm_campaign=readme"&gt;Usage Guides&lt;/a&gt; to learn more about how to use Wren AI.&lt;/li&gt; 
 &lt;li&gt;Or just start with &lt;a href="https://getwren.ai/?utm_source=github&amp;amp;utm_medium=content&amp;amp;utm_campaign=readme"&gt;Wren AI Cloud&lt;/a&gt; our Managed Cloud Service. (&lt;a href="https://docs.getwren.ai/oss/overview/cloud_vs_self_host"&gt;OSS vs. Commercial Plans&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🏗️ Architecture&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Canner/WrenAI/main/misc/how_wrenai_works.png"&gt; &lt;/p&gt; 
&lt;p&gt;👉 &lt;a href="https://getwren.ai/post/how-we-design-our-semantic-engine-for-llms-the-backbone-of-the-semantic-layer-for-llm-architecture?utm_source=github&amp;amp;utm_medium=content&amp;amp;utm_campaign=readme"&gt;Learn more about our Design&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🔌 Data Sources&lt;/h2&gt; 
&lt;p&gt;If your data source is not listed here, vote for it in our &lt;a href="https://github.com/Canner/WrenAI/discussions/327"&gt;GitHub discussion thread&lt;/a&gt;. It will be a valuable input for us to decide on the next supported data sources.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Athena (Trino)&lt;/li&gt; 
 &lt;li&gt;Redshift&lt;/li&gt; 
 &lt;li&gt;BigQuery&lt;/li&gt; 
 &lt;li&gt;DuckDB&lt;/li&gt; 
 &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;li&gt;MySQL&lt;/li&gt; 
 &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
 &lt;li&gt;ClickHouse&lt;/li&gt; 
 &lt;li&gt;Oracle&lt;/li&gt; 
 &lt;li&gt;Trino&lt;/li&gt; 
 &lt;li&gt;Snowflake&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤖 LLM Models&lt;/h2&gt; 
&lt;p&gt;Wren AI supports integration with various Large Language Models (LLMs), including but not limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OpenAI Models&lt;/li&gt; 
 &lt;li&gt;Azure OpenAI Models&lt;/li&gt; 
 &lt;li&gt;DeepSeek Models&lt;/li&gt; 
 &lt;li&gt;Google AI Studio – Gemini Models&lt;/li&gt; 
 &lt;li&gt;Vertex AI Models (Gemini + Anthropic)&lt;/li&gt; 
 &lt;li&gt;Bedrock Models&lt;/li&gt; 
 &lt;li&gt;Anthropic API Models&lt;/li&gt; 
 &lt;li&gt;Groq Models&lt;/li&gt; 
 &lt;li&gt;Ollama Models&lt;/li&gt; 
 &lt;li&gt;Databricks Models&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check &lt;a href="https://github.com/Canner/WrenAI/tree/main/wren-ai-service/docs/config_examples"&gt;configuration examples here&lt;/a&gt;!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] The performance of Wren AI depends significantly on the capabilities of the LLM you choose. We strongly recommend using the most powerful model available for optimal results. Using less capable models may lead to reduced performance, slower response times, or inaccurate outputs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;📚 Documentation&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href="https://docs.getwren.ai/oss/overview/introduction?utm_source=github&amp;amp;utm_medium=content&amp;amp;utm_campaign=readme"&gt;Wren AI documentation&lt;/a&gt; to view the full documentation.&lt;/p&gt; 
&lt;h2&gt;📪 Keep Posted?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.getwren.ai/blog/?utm_source=github&amp;amp;utm_medium=content&amp;amp;utm_campaign=readme"&gt;Subscribe our blog&lt;/a&gt; and &lt;a href="https://www.linkedin.com/company/wrenai"&gt;Follow our LinkedIn&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🛠️ Contribution&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Star ⭐ the repo to show support (it really helps).&lt;/li&gt; 
 &lt;li&gt;Open an issue for bugs, ideas, or discussions.&lt;/li&gt; 
 &lt;li&gt;Read &lt;a href="https://github.com/Canner/WrenAI/raw/main/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt; for setup &amp;amp; PR guidelines.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;⭐️ Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join 1.3k+ developers in our &lt;a href="https://discord.gg/5DvshJqG8Z"&gt;Discord&lt;/a&gt; for real-time help and roadmap previews.&lt;/li&gt; 
 &lt;li&gt;If there are any issues, please visit &lt;a href="https://github.com/Canner/WrenAI/issues"&gt;GitHub Issues&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Explore our &lt;a href="https://wrenai.notion.site/"&gt;public roadmap&lt;/a&gt; to stay updated on upcoming features and improvements!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please note that our &lt;a href="https://raw.githubusercontent.com/Canner/WrenAI/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; applies to all Wren AI community channels. Users are &lt;strong&gt;highly encouraged&lt;/strong&gt; to read and adhere to them to avoid repercussions.&lt;/p&gt; 
&lt;h2&gt;🎉 Our Contributors&lt;/h2&gt; 
&lt;a href="https://github.com/canner/wrenAI/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=Canner/WrenAI"&gt; &lt;/a&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/Canner/WrenAI/main/#top"&gt;⬆️ Back to Top&lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>payloadcms/payload</title>
      <link>https://github.com/payloadcms/payload</link>
      <description>&lt;p&gt;Payload is the open-source, fullstack Next.js framework, giving you instant backend superpowers. Get a full TypeScript backend and admin panel instantly. Use Payload as a headless CMS or for building powerful applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://payloadcms.com"&gt;&lt;img width="100%" src="https://l4wlsi8vxy8hre4v.public.blob.vercel-storage.com/github-banner-new-logo.jpg" alt="Payload headless CMS Admin panel built with React"&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p align="left"&gt; &lt;a href="https://github.com/payloadcms/payload/actions"&gt;&lt;img alt="GitHub Workflow Status" src="https://img.shields.io/github/actions/workflow/status/payloadcms/payload/main.yml?style=flat-square"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://discord.gg/payload"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/967097582721572934?label=Discord&amp;amp;color=7289da&amp;amp;style=flat-square"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.npmjs.com/package/payload"&gt;&lt;img alt="npm" src="https://img.shields.io/npm/dw/payload?style=flat-square"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/payloadcms/payload/graphs/contributors"&gt;&lt;img alt="npm" src="https://img.shields.io/github/contributors-anon/payloadcms/payload?color=yellow&amp;amp;style=flat-square"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.npmjs.com/package/payload"&gt;&lt;img alt="npm" src="https://img.shields.io/npm/v/payload?style=flat-square"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/payloadcms"&gt;&lt;img src="https://img.shields.io/badge/follow-payloadcms-1DA1F2?logo=twitter&amp;amp;style=flat-square" alt="Payload Twitter"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt; &lt;a target="_blank" href="https://payloadcms.com/docs/getting-started/what-is-payload" rel="dofollow"&gt;&lt;strong&gt;Explore the Docs&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;·&amp;nbsp;&lt;a target="_blank" href="https://payloadcms.com/community-help" rel="dofollow"&gt;&lt;strong&gt;Community Help&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;·&amp;nbsp;&lt;a target="_blank" href="https://github.com/payloadcms/payload/discussions/1539" rel="dofollow"&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;·&amp;nbsp;&lt;a target="_blank" href="https://www.g2.com/products/payload-cms/reviews#reviews" rel="dofollow"&gt;&lt;strong&gt;View G2 Reviews&lt;/strong&gt;&lt;/a&gt; &lt;/h4&gt; 
&lt;hr&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] 🎉 &lt;strong&gt;We've released 3.0!&lt;/strong&gt; Star this repo or keep an eye on it to follow along.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Payload is the first-ever Next.js native CMS that can install directly in your existing &lt;code&gt;/app&lt;/code&gt; folder. It's the start of a new era for headless CMS.&lt;/p&gt; 
&lt;h3&gt;Benefits over a regular CMS&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Deploy anywhere, including serverless on Vercel for free&lt;/li&gt; 
 &lt;li&gt;Combine your front+backend in the same &lt;code&gt;/app&lt;/code&gt; folder if you want&lt;/li&gt; 
 &lt;li&gt;Don't sign up for yet another SaaS - Payload is open source&lt;/li&gt; 
 &lt;li&gt;Query your database in React Server Components&lt;/li&gt; 
 &lt;li&gt;Both admin and backend are 100% extensible&lt;/li&gt; 
 &lt;li&gt;No vendor lock-in&lt;/li&gt; 
 &lt;li&gt;Never touch ancient WP code again&lt;/li&gt; 
 &lt;li&gt;Build faster, never hit a roadblock&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Before beginning to work with Payload, make sure you have all of the &lt;a href="https://payloadcms.com/docs/getting-started/installation"&gt;required software&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;pnpx create-payload-app@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;If you're new to Payload, you should start with the website template&lt;/strong&gt; (&lt;code&gt;pnpx create-payload-app@latest -t website&lt;/code&gt;). It shows how to do &lt;em&gt;everything&lt;/em&gt; - including custom Rich Text blocks, on-demand revalidation, live preview, and more. It comes with a frontend built with Tailwind all in one &lt;code&gt;/app&lt;/code&gt; folder.&lt;/p&gt; 
&lt;h2&gt;One-click templates&lt;/h2&gt; 
&lt;p&gt;Jumpstart your next project by starting with a pre-made template. These are production-ready, end-to-end solutions designed to get you to market as fast as possible.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/payloadcms/payload/tree/main/templates/website"&gt;🌐 Website&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Build any kind of website, blog, or portfolio from small to enterprise. Comes with a fully functional front-end built with RSCs and Tailwind.&lt;/p&gt; 
&lt;p&gt;We're constantly adding more templates to our &lt;a href="https://github.com/payloadcms/payload/tree/main/templates"&gt;Templates Directory&lt;/a&gt;. If you maintain your own template, consider adding the &lt;code&gt;payload-template&lt;/code&gt; topic to your GitHub repository for others to find.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/payloadcms/payload/tree/main/templates"&gt;Official Templates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/topics/payload-template"&gt;Community Templates&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Completely free and open-source&lt;/li&gt; 
 &lt;li&gt;Next.js native, built to run inside &lt;em&gt;your&lt;/em&gt; &lt;code&gt;/app&lt;/code&gt; folder&lt;/li&gt; 
 &lt;li&gt;Use server components to extend Payload UI&lt;/li&gt; 
 &lt;li&gt;Query your database directly in server components, no need for REST / GraphQL&lt;/li&gt; 
 &lt;li&gt;Fully TypeScript with automatic types for your data&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/docs/authentication/overview"&gt;Auth out of the box&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/docs/versions/overview"&gt;Versions and drafts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/docs/configuration/localization"&gt;Localization&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/docs/fields/blocks"&gt;Block-based layout builder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/docs/admin/overview"&gt;Customizable React admin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/docs/fields/rich-text"&gt;Lexical rich text editor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/docs/fields/overview#conditional-logic"&gt;Conditional field logic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Extremely granular &lt;a href="https://payloadcms.com/docs/access-control/overview"&gt;Access Control&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/docs/hooks/overview"&gt;Document and field-level hooks&lt;/a&gt; for every action Payload provides&lt;/li&gt; 
 &lt;li&gt;Intensely fast API&lt;/li&gt; 
 &lt;li&gt;Highly secure thanks to HTTP-only cookies, CSRF protection, and more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a target="_blank" href="https://github.com/payloadcms/payload/discussions"&gt;&lt;strong&gt;Request Feature&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🗒️ Documentation&lt;/h2&gt; 
&lt;p&gt;Check out the &lt;a href="https://payloadcms.com/docs/getting-started/what-is-payload"&gt;Payload website&lt;/a&gt; to find in-depth documentation for everything that Payload offers.&lt;/p&gt; 
&lt;p&gt;Migrating from v2 to v3? Check out the &lt;a href="https://github.com/payloadcms/payload/raw/main/docs/migration-guide/overview.mdx"&gt;3.0 Migration Guide&lt;/a&gt; on how to do it.&lt;/p&gt; 
&lt;h2&gt;🙋 Contributing&lt;/h2&gt; 
&lt;p&gt;If you want to add contributions to this repository, please follow the instructions in &lt;a href="https://raw.githubusercontent.com/payloadcms/payload/main/CONTRIBUTING.md"&gt;contributing.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📚 Examples&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/payloadcms/payload/main/examples"&gt;Examples Directory&lt;/a&gt; is a great resource for learning how to setup Payload in a variety of different ways, but you can also find great examples in our blog and throughout our social media.&lt;/p&gt; 
&lt;p&gt;If you'd like to run the examples, you can use &lt;code&gt;create-payload-app&lt;/code&gt; to create a project from one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npx create-payload-app --example example_name
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see more examples at:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/payloadcms/payload/main/examples"&gt;Examples Directory&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/blog"&gt;Payload Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/@payloadcms"&gt;Payload YouTube&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🔌 Plugins&lt;/h2&gt; 
&lt;p&gt;Payload is highly extensible and allows you to install or distribute plugins that add or remove functionality. There are both officially-supported and community-supported plugins available. If you maintain your own plugin, consider adding the &lt;code&gt;payload-plugin&lt;/code&gt; topic to your GitHub repository for others to find.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orgs/payloadcms/repositories?q=topic%3Apayload-plugin"&gt;Official Plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/topics/payload-plugin"&gt;Community Plugins&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚨 Need help?&lt;/h2&gt; 
&lt;p&gt;There are lots of good conversations and resources in our Github Discussions board and our Discord Server. If you're struggling with something, chances are, someone's already solved what you're up against. &lt;span&gt;👇&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/payloadcms/payload/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/payloadcms/payload/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://t.co/30APlsQUPB"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://payloadcms.com/community-help"&gt;Community Help&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⭐ Like what we're doing? Give us a star&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://cms.payloadcms.com/media/payload-github-star.gif" alt="payload-github-star"&gt;&lt;/p&gt; 
&lt;h2&gt;👏 Thanks to all our contributors&lt;/h2&gt; 
&lt;img align="left" src="https://contributors-img.web.app/image?repo=payloadcms/payload"&gt;</description>
    </item>
    
    <item>
      <title>DefinitelyTyped/DefinitelyTyped</title>
      <link>https://github.com/DefinitelyTyped/DefinitelyTyped</link>
      <description>&lt;p&gt;The repository for high quality TypeScript type definitions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Definitely Typed&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The repository for &lt;em&gt;high quality&lt;/em&gt; TypeScript type definitions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;You can also read this README in &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/README.es.md"&gt;Español&lt;/a&gt;, &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/README.ko.md"&gt;한국어&lt;/a&gt;, &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/README.ru.md"&gt;Русский&lt;/a&gt;, &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/README.zh-Hans.md"&gt;简体中文&lt;/a&gt;, &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/README.pt.md"&gt;Português&lt;/a&gt;, &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/README.it.md"&gt;Italiano&lt;/a&gt;, &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/README.ja.md"&gt;日本語&lt;/a&gt; and &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/README.fr.md"&gt;Français&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Link to &lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/docs/admin.md"&gt;Admin manual&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;!!! Important! This repo has recently changed layout! !!!&lt;/h2&gt; 
&lt;p&gt;Definitely Typed has recently changed to a proper &lt;code&gt;pnpm&lt;/code&gt; monorepo; you may want to reread this document for changes to the layout of packages in this repo.&lt;/p&gt; 
&lt;p&gt;At the very least, you may want to &lt;code&gt;git clean -fdx&lt;/code&gt; the repo (or &lt;code&gt;node ./scripts/clean-node-modules.js&lt;/code&gt; on Windows) to clean up &lt;code&gt;node_modules&lt;/code&gt; and run &lt;code&gt;pnpm install --filter .&lt;/code&gt; to install the workspace root. See further sections for more info on &lt;code&gt;pnpm install&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Current status&lt;/h2&gt; 
&lt;p&gt;This section tracks the health of the repository and publishing process. It may be helpful for contributors experiencing any issues with their PRs and packages.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Most recent build &lt;a href="https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint"&gt;type-checked/linted&lt;/a&gt; cleanly: &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml?query=branch%3Amaster+event%3Apush"&gt;&lt;img src="https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml/badge.svg?branch=master&amp;amp;event=push" alt="Build status"&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;All packages are type-checking/linting cleanly: &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml?query=branch%3Amaster+event%3Aschedule"&gt;&lt;img src="https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml/badge.svg?branch=master&amp;amp;event=schedule" alt="Build status"&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;All packages are being &lt;a href="https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/publisher"&gt;published to npm&lt;/a&gt; in under an hour and a half: &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/watchdog-publisher.yml"&gt;&lt;img src="https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/watchdog-publisher.yml/badge.svg?sanitize=true" alt="Publish Status"&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/typescript-bot"&gt;typescript-bot&lt;/a&gt; has been active on Definitely Typed: &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/watchdog-typescript-bot.yml"&gt;&lt;img src="https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/watchdog-typescript-bot.yml/badge.svg?sanitize=true" alt="Activity Status"&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Current &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/issues/44317"&gt;infrastructure status updates&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If anything here seems wrong or any of the above are failing, please let us know in &lt;a href="https://discord.gg/typescript"&gt;the Definitely Typed channel on the TypeScript Community Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What are declaration files and how do I get them?&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"&gt;TypeScript handbook&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;npm&lt;/h3&gt; 
&lt;p&gt;This is the preferred method. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm install --save-dev @types/node
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install typings for a scoped module, remove the &lt;code&gt;@&lt;/code&gt; and add double-underscore after the scope. For example, to install typings for &lt;code&gt;@babel/preset-env&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm install --save-dev @types/babel__preset-env
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The types should then be automatically included by the compiler. You may need to add a &lt;code&gt;types&lt;/code&gt; reference if you're not using modules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;/// &amp;lt;reference types="node" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more in the &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html"&gt;handbook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For an npm package "foo", typings for it will be at "@types/foo".&lt;/p&gt; 
&lt;p&gt;If your package has typings specified using the &lt;code&gt;types&lt;/code&gt; or &lt;code&gt;typings&lt;/code&gt; key in its &lt;code&gt;package.json&lt;/code&gt;, the npm registry will display that the package has available bindings like so:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/30049719/228748963-56fabfd1-9101-42c2-9891-b586b775b01e.png" alt="image"&gt;&lt;/p&gt; 
&lt;p&gt;If you still can't find the typings, just look for any ".d.ts" files in the package and manually include them with a &lt;code&gt;/// &amp;lt;reference path="" /&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Support Window&lt;/h3&gt; 
&lt;p&gt;Definitely Typed only tests packages on versions of TypeScript that are less than 2 years old.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/docs/support-window.svg#gh-light-mode-only" style="width:100%"&gt; 
&lt;img src="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/docs/support-window.svg#gh-dark-mode-only" style="width:100%"&gt; 
&lt;details&gt; 
 &lt;summary&gt;Older versions of TypeScript&lt;/summary&gt; 
 &lt;p&gt;&lt;code&gt;@types&lt;/code&gt; packages have tags for versions of TypeScript that they explicitly support, so you can usually get older versions of packages that predate the 2-year window. For example, if you run &lt;code&gt;npm dist-tags @types/react&lt;/code&gt;, you'll see that TypeScript 2.5 can use types for react@16.0, whereas TypeScript 2.6 and 2.7 can use types for react@16.4:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Tag&lt;/th&gt; 
    &lt;th&gt;Version&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;latest&lt;/td&gt; 
    &lt;td&gt;16.9.23&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;ts2.0&lt;/td&gt; 
    &lt;td&gt;15.0.1&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;...&lt;/td&gt; 
    &lt;td&gt;...&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;ts2.5&lt;/td&gt; 
    &lt;td&gt;16.0.36&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;ts2.6&lt;/td&gt; 
    &lt;td&gt;16.4.7&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;ts2.7&lt;/td&gt; 
    &lt;td&gt;16.4.7&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;...&lt;/td&gt; 
    &lt;td&gt;...&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;h4&gt;TypeScript 1.*&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Manually download from the &lt;code&gt;master&lt;/code&gt; branch of this repository and place them in your project&lt;/li&gt; 
  &lt;li&gt;&lt;del&gt;&lt;a href="https://github.com/typings/typings"&gt;Typings&lt;/a&gt;&lt;/del&gt; (use preferred alternatives, typings is deprecated)&lt;/li&gt; 
  &lt;li&gt;&lt;del&gt;&lt;a href="https://nuget.org/packages?q=DefinitelyTyped"&gt;NuGet&lt;/a&gt;&lt;/del&gt; (use preferred alternatives, nuget DT type publishing has been turned off)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;You may need to add manual &lt;a href="https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html"&gt;references&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;How can I contribute?&lt;/h2&gt; 
&lt;p&gt;Definitely Typed only works because of contributions by users like you!&lt;/p&gt; 
&lt;h3&gt;Testing&lt;/h3&gt; 
&lt;p&gt;Before you share your improvement with the world, use the types yourself by creating a &lt;code&gt;typename.d.ts&lt;/code&gt; file in your project and filling out its exports:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;declare module "libname" {
    // Types inside here
    export function helloWorldMessage(): string;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Test editing an existing package&lt;/h4&gt; 
&lt;p&gt;You can edit the types directly in &lt;code&gt;node_modules/@types/foo/index.d.ts&lt;/code&gt; to validate your changes, then bring the changes to this repo with the steps below.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can use &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation"&gt;module augmentation&lt;/a&gt; to extend existing types from the DT module or use the &lt;code&gt;declare module&lt;/code&gt; technique above which will override the version in &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Adding tests to a new package&lt;/h4&gt; 
&lt;p&gt;Add to your &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;"baseUrl": "types",
"typeRoots": ["types"],
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create &lt;code&gt;types/foo/index.d.ts&lt;/code&gt; containing declarations for the module "foo". You should now be able to import from &lt;code&gt;"foo"&lt;/code&gt; in your code and it will route to the new type definition. Then build &lt;em&gt;and&lt;/em&gt; run the code to make sure your type definition actually corresponds to what happens at runtime.&lt;/p&gt; 
&lt;p&gt;Once you've tested your definitions with real code, make a &lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#make-a-pull-request"&gt;PR&lt;/a&gt; then follow the instructions to &lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#edit-an-existing-package"&gt;edit an existing package&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#create-a-new-package"&gt;create a new package&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Make a pull request&lt;/h3&gt; 
&lt;p&gt;Once you've tested your package, you can share it on Definitely Typed.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://guides.github.com/activities/forking/"&gt;Fork&lt;/a&gt; this repository.&lt;/li&gt; 
 &lt;li&gt;Clone it. 
  &lt;ul&gt; 
   &lt;li&gt;The Definitely Typed repo is large; you may want to consider using a &lt;a href="https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/#user-content-blobless-clones"&gt;"blobless clone"&lt;/a&gt; to save time and space by passing &lt;code&gt;--filter=blob:none&lt;/code&gt; when running &lt;code&gt;git clone&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://nodejs.org/"&gt;node&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;pnpm install&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;pnpm install&lt;/code&gt; will install the &lt;em&gt;entire&lt;/em&gt; repository, including packages you may not be editing. If you'd like to install only a subset, you can run &lt;code&gt;pnpm install -w --filter "{./types/foo}..."&lt;/code&gt; to install &lt;code&gt;@types/foo&lt;/code&gt; and all of its dependencies. If you need to run tests for packages that &lt;em&gt;depend&lt;/em&gt; on &lt;code&gt;@types/foo&lt;/code&gt;, you can run &lt;code&gt;pnpm install -w --filter "...{./types/foo}..."&lt;/code&gt; to pull in all related packages for testing.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you are using Windows, you may find that &lt;code&gt;git clean&lt;/code&gt; does not remove the &lt;code&gt;node_modules&lt;/code&gt; directory or hangs when doing so. If you need to remove &lt;code&gt;node_modules&lt;/code&gt;, you can run &lt;code&gt;pnpm clean-node-modules&lt;/code&gt; to reset the repo.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We use a bot to let a large number of pull requests to DefinitelyTyped be handled entirely in a self-service manner. You can read more about &lt;a href="https://devblogs.microsoft.com/typescript/changes-to-how-we-manage-definitelytyped/"&gt;why and how here&lt;/a&gt;. Here is a handy reference showing the life cycle of a pull request to DT:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/microsoft/DefinitelyTyped-tools/main/packages/mergebot/docs/dt-mergebot-lifecycle.svg?sanitize=true"&gt; 
&lt;h4&gt;Edit an existing package&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make changes. Remember to &lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#my-package-teststs"&gt;edit tests&lt;/a&gt;. If you make breaking changes, do not forget to &lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#if-a-library-is-updated-to-a-new-major-version-with-breaking-changes-how-should-i-update-its-type-declaration-package"&gt;update a major version&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#running-tests"&gt;Run &lt;code&gt;pnpm test &amp;lt;package to test&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When you make a PR to edit an existing package, &lt;code&gt;dt-bot&lt;/code&gt; should @-mention the package's owners. If it doesn't, you can do so yourself in the comment associated with the PR.&lt;/p&gt; 
&lt;h4&gt;Create a new package&lt;/h4&gt; 
&lt;p&gt;If you are the library author and your package is written in TypeScript, &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html"&gt;bundle the generated declaration files&lt;/a&gt; in your package instead of publishing to Definitely Typed. You can also generate declaration files from JavaScript files, using JSDoc for type annotations.&lt;/p&gt; 
&lt;p&gt;If you are adding typings for an npm package, create a directory with the same name. If the package you are adding typings for is not on npm, make sure the name you choose for it does not conflict with the name of a package on npm. (You can use &lt;code&gt;npm info &amp;lt;my-package&amp;gt;&lt;/code&gt; to check for the existence of the &lt;code&gt;&amp;lt;my-package&amp;gt;&lt;/code&gt; package.)&lt;/p&gt; 
&lt;p&gt;Your package should have this structure:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;File&lt;/th&gt; 
   &lt;th&gt;Purpose&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;index.d.ts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;This contains the typings for the package.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#my-package-teststs"&gt;&lt;code&gt;&amp;lt;my-package&amp;gt;-tests.ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This contains sample code which tests the typings. This code does &lt;em&gt;not&lt;/em&gt; run, but it is type-checked.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#tsconfigjson"&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This allows you to run &lt;code&gt;tsc&lt;/code&gt; within the package.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#linter-eslintrcjson"&gt;&lt;code&gt;.eslintrc.json&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;(Rarely) Needed only to disable lint rules written for eslint.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#packagejson"&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Contains metadata for the package, including its name, version and dependencies.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#npmignore"&gt;&lt;code&gt;.npmignore&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specifies which files are intended to be included in the package.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Generate these by running &lt;code&gt;npx dts-gen --dt --name &amp;lt;my-package&amp;gt; --template module&lt;/code&gt;. See all options at &lt;a href="https://github.com/microsoft/DefinitelyTyped-tools/tree/main/packages/dts-gen"&gt;dts-gen&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have &lt;code&gt;.d.ts&lt;/code&gt; files besides &lt;code&gt;index.d.ts&lt;/code&gt;, make sure that they are referenced either in &lt;code&gt;index.d.ts&lt;/code&gt; or the tests.&lt;/p&gt; 
&lt;p&gt;Definitely Typed members routinely monitor for new PRs, though keep in mind that the number of other PRs may slow things down.&lt;/p&gt; 
&lt;p&gt;For a good example package, see &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/a2ff1d2088143cbacc15786c7f3b0ec67179523c/types/base64-js"&gt;base64-js&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Removing a package&lt;/h4&gt; 
&lt;p&gt;When a package &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html"&gt;bundles&lt;/a&gt; its own types, types should be removed from Definitely Typed to avoid confusion.&lt;/p&gt; 
&lt;p&gt;You can remove it by running &lt;code&gt;pnpm run not-needed &amp;lt;typingsPackageName&amp;gt; &amp;lt;asOfVersion&amp;gt; [&amp;lt;libraryName&amp;gt;]&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;typingsPackageName&amp;gt;&lt;/code&gt;: This is the name of the directory to delete.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;asOfVersion&amp;gt;&lt;/code&gt;: A stub will be published to &lt;code&gt;@types/&amp;lt;typingsPackageName&amp;gt;&lt;/code&gt; with this version. Should be higher than any currently published version and should be a version of &lt;code&gt;&amp;lt;libraryName&amp;gt;&lt;/code&gt; on npm.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;libraryName&amp;gt;&lt;/code&gt;: Name of npm package that replaces the Definitely Typed types. Usually this is identical to &lt;code&gt;&amp;lt;typingsPackageName&amp;gt;&lt;/code&gt;, in which case you can omit it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If a package was never on Definitely Typed, it does not need to be added to &lt;code&gt;notNeededPackages.json&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Running tests&lt;/h4&gt; 
&lt;p&gt;Test your changes by running &lt;code&gt;pnpm test &amp;lt;package to test&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;package to test&amp;gt;&lt;/code&gt; is the name of your package. You need to run this from the DefinitelyTyped directory because individual package.jsons don't define test scripts.&lt;/p&gt; 
&lt;p&gt;This script uses &lt;a href="https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint"&gt;dtslint&lt;/a&gt; to run the TypeScript compiler against your dts files.&lt;/p&gt; 
&lt;p&gt;Once you have all your changes ready, use &lt;code&gt;pnpm run test-all&lt;/code&gt; to see how your changes affect other modules.&lt;/p&gt; 
&lt;h5&gt;@arethetypeswrong/cli (&lt;code&gt;attw&lt;/code&gt;) checks&lt;/h5&gt; 
&lt;p&gt;dtslint includes module format and &lt;code&gt;package.json&lt;/code&gt; configuration checks from &lt;a href="https://github.com/arethetypeswrong/arethetypeswrong.github.io/raw/main/packages/cli"&gt;@arethetypeswrong/cli&lt;/a&gt;. The checks run only if a SemVer-major-compatible implementation package can be found on npm to compare against the DefinitelyTyped package. (DefinitelyTyped packages marked as &lt;code&gt;nonNpm&lt;/code&gt; in their &lt;code&gt;package.json&lt;/code&gt; are skipped.)&lt;/p&gt; 
&lt;p&gt;Many packages currently fail the &lt;code&gt;attw&lt;/code&gt; checks and need to be fixed. To allow us to make incremental progress, failed &lt;code&gt;attw&lt;/code&gt; checks do not fail the &lt;code&gt;dtslint&lt;/code&gt; run when the package is listed in &lt;code&gt;failingPackages&lt;/code&gt; in &lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/attw.json"&gt;&lt;code&gt;attw.json&lt;/code&gt;&lt;/a&gt;, but they will still be reported in the &lt;code&gt;pnpm test my-package&lt;/code&gt; output. If you fix the package, remove it from &lt;code&gt;failingPackages&lt;/code&gt; so that &lt;code&gt;attw&lt;/code&gt; checks can start failing &lt;code&gt;dtslint&lt;/code&gt; runs.&lt;/p&gt; 
&lt;p&gt;All problems reported by &lt;code&gt;attw&lt;/code&gt; have documentation linked in the output. Some rules of thumb to help avoid problems:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; in the DefinitelyTyped package must have matching &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; fields if the implementation package uses them in its &lt;code&gt;package.json&lt;/code&gt;. For example, if an implementation &lt;code&gt;package.json&lt;/code&gt; looks like:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
    "name": "my-package",
    "version": "1.0.1",
    "type": "module",
    "main": "dist/cjs/index.cjs",
    "exports": {
        ".": {
            "import": "./dist/esm/index.js",
            "require": "./dist/cjs/index.cjs"
        },
        "./subpath": {
            "import": "./dist/esm/subpath.js",
            "require": "./dist/cjs/subpath.cjs"
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;then the DefinitelyTyped &lt;code&gt;package.json&lt;/code&gt; should look something like:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json5"&gt;{
    "name": "@types/my-package",
    "version": "1.0.9999",
    "type": "module",
    "types": "index.d.ts",
    "exports": {
        ".": {
            "import": "./index.d.ts",
            "require": "./index.d.cts"
        },
        "./subpath": {
            "import": "./subpath.d.ts",
             "require": "./subpath.d.cts"
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Notice that each &lt;code&gt;exports&lt;/code&gt; subpath is reflected, and each JavaScript file has a corresponding declaration file with a matching file extension—a &lt;code&gt;.d.ts&lt;/code&gt; file types a &lt;code&gt;.js&lt;/code&gt; file, not a &lt;code&gt;.mjs&lt;/code&gt; or &lt;code&gt;.cjs&lt;/code&gt; file!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When the implementation package uses &lt;code&gt;module.exports = ...&lt;/code&gt;, the DefinitelyTyped package should use &lt;code&gt;export =&lt;/code&gt;, not &lt;code&gt;export default&lt;/code&gt;. (Alternatively, if the &lt;code&gt;module.exports&lt;/code&gt; is just an object of named properties, the DefinitelyTyped package can use a series of named exports.) The most common obstacle to correcting this problem is confusion about how to export types in addition to the primary export. For example, assume these types are incorrectly using &lt;code&gt;export default&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-ts"&gt;export interface Options {
    // ...
}
export default function doSomething(options: Options): void;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Changing the &lt;code&gt;export default&lt;/code&gt; to an &lt;code&gt;export =&lt;/code&gt; creates an error:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-ts"&gt;export interface Options {
    // ...
}
declare function doSomething(options: Options): void;
export = doSomething;
// ^^^^^^^^^^^^^^^^^
// Error: An export assignment cannot be used in a module with other exported elements.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To fix this, move the types inside a namespace with the same name as the function:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-ts"&gt;declare namespace doSomething {
    export interface Options {
        // ...
    }
}
declare function doSomething(options: doSomething.Options): void;
export = doSomething;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you need help fixing a problem, please ask in the DefinitelyTyped channel on the &lt;a href="https://discord.gg/typescript"&gt;TypeScript Community Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Naming&lt;/h4&gt; 
&lt;p&gt;If you are adding typings for an npm package, create a directory with the same name. If the package you are adding typings for is not on npm, set &lt;code&gt;"nonNpm": true&lt;/code&gt; in the &lt;code&gt;package.json&lt;/code&gt;, and make sure the name you choose for it does not conflict with the name of a package on npm. (You can use &lt;code&gt;npm info &amp;lt;my-package&amp;gt;&lt;/code&gt; to check for the existence of the &lt;code&gt;&amp;lt;my-package&amp;gt;&lt;/code&gt; package.)&lt;/p&gt; 
&lt;p&gt;In rare occasions, &lt;code&gt;nonNpm&lt;/code&gt; may be set to &lt;code&gt;"conflict"&lt;/code&gt;, which incidates that there is a package on npm with the same name, but the types intentionally conflict with that package. This can be true for packages which define an environment like &lt;code&gt;@types/node&lt;/code&gt; or for dummy packages like &lt;code&gt;aws-lambda&lt;/code&gt;. Avoid using &lt;code&gt;"conflict"&lt;/code&gt; where possible.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;&amp;lt;my-package&amp;gt;-tests.ts&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;There should be a &lt;code&gt;&amp;lt;my-package&amp;gt;-tests.ts&lt;/code&gt; file, which is considered your test file, along with any &lt;code&gt;*.ts&lt;/code&gt; files it imports. If you don't see any test files in the module's folder, create a &lt;code&gt;&amp;lt;my-package&amp;gt;-tests.ts&lt;/code&gt;. These files are used to validate the API exported from the &lt;code&gt;*.d.ts&lt;/code&gt; files which are shipped as &lt;code&gt;@types/&amp;lt;my-package&amp;gt;&lt;/code&gt;. They do not themselves ship.&lt;/p&gt; 
&lt;p&gt;Changes to the &lt;code&gt;*.d.ts&lt;/code&gt; files should include a corresponding &lt;code&gt;*.ts&lt;/code&gt; file change which shows the API being used, so that someone doesn't accidentally break code you depend on. For example, this change to a function in a &lt;code&gt;.d.ts&lt;/code&gt; file adding a new param to a function:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;index.d.ts&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;- export function twoslash(body: string): string
+ export function twoslash(body: string, config?: { version: string }): string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;my-package&amp;gt;-tests.ts&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;import {twoslash} from "./"

// $ExpectType string
const result = twoslash("//")

+ // Handle options param
+ const resultWithOptions = twoslash("//", { version: "3.7" })
+ // When the param is incorrect
+ // @ts-expect-error
+ const resultWithOptions = twoslash("//", {  })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're wondering where to start with test code, the examples in the README of the original package are a great place to start.&lt;/p&gt; 
&lt;p&gt;You can &lt;a href="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/#running-tests"&gt;validate your changes&lt;/a&gt; with &lt;code&gt;npm test &amp;lt;package to test&amp;gt;&lt;/code&gt; from the root of this repo, which takes changed files into account.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;$ExpectType&lt;/code&gt; to assert that an expression is of a given type and &lt;code&gt;@ts-expect-error&lt;/code&gt; to assert that a compile error. Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;// $ExpectType void
f(1);

// @ts-expect-error
f("one");
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more details, see &lt;a href="https://github.com/Microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint#write-tests"&gt;dtslint&lt;/a&gt; readme.&lt;/p&gt; 
&lt;h5&gt;Linter: &lt;code&gt;.eslintrc.json&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;If for some reason a lint rule needs to be disabled, disable it for a specific line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;// eslint-disable-next-line no-const-enum
const enum Const {
    One,
}
const enum Enum { // eslint-disable-line no-const-enum
    Two,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can still disable rules with an .eslintrc.json, but should not in new packages. Disabling rules for the entire package makes it harder to review.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;tsconfig.json&lt;/code&gt; should have &lt;code&gt;noImplicitAny&lt;/code&gt;, &lt;code&gt;noImplicitThis&lt;/code&gt;, &lt;code&gt;strictNullChecks&lt;/code&gt; and &lt;code&gt;strictFunctionTypes&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You may edit the &lt;code&gt;tsconfig.json&lt;/code&gt; to add new test files, to add &lt;code&gt;"target": "es6"&lt;/code&gt; (needed for async functions), to add to &lt;code&gt;"lib"&lt;/code&gt; or to add the &lt;code&gt;"jsx"&lt;/code&gt; compiler option.&lt;/p&gt; 
&lt;h5&gt;&lt;code&gt;esModuleInterop&lt;/code&gt;/&lt;code&gt;allowSyntheticDefaultImports&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;TL;DR: &lt;code&gt;esModuleInterop&lt;/code&gt; and &lt;code&gt;allowSyntheticDefaultImports&lt;/code&gt; are &lt;em&gt;not allowed&lt;/em&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;These options make it possible to write a default import for a CJS export, modeling the built-in interoperability between CJS and ES modules in Node and in some JS bundlers:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-tsx"&gt;// component.d.ts
declare class Component {​​​​​}​​​​​
// CJS export, modeling `module.exports = Component` in JS
export = Component;

// index.d.ts
// ESM default import, only allowed under 'esModuleInterop' or 'allowSyntheticDefaultExports'
import Component from "./component";
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Since the compile-time validity of the import in &lt;code&gt;index.d.ts&lt;/code&gt; is dependent upon specific compilation settings, which users of your types do not inherit, using this pattern in DefinitelyTyped would force users to change their own compilation settings, which might be incorrect for their runtime. Instead, you must write a CJS import for a CJS export to ensure widespread, config-independent compatibility:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-ts"&gt;// index.d.ts
// CJS import, modeling `const Component = require("./component")` in JS
import Component = require("./component");
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This file is required and should follow this template:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json5"&gt;{
    "private": true,
    "name": "@types/PACKAGE-NAME",
    "version": "1.2.9999",
    "projects": [
        "https://aframe.io/"
    ],
    "dependencies": {
        "@types/DEPENDENCY-1": "*",
        "@types/DEPENDENCY-2": "*"
    },
    "devDependencies": {
        "@types/PACKAGE-NAME": "workspace:."
    },
    "owners": [
        {
            "name": "Your Name Here",
            "githubUsername": "ghost"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A &lt;code&gt;package.json&lt;/code&gt; specifies &lt;em&gt;all&lt;/em&gt; dependencies, including other &lt;code&gt;@types&lt;/code&gt; packages.&lt;/p&gt; 
&lt;p&gt;You must add non-&lt;code&gt;@types&lt;/code&gt; dependencies to &lt;a href="https://github.com/microsoft/DefinitelyTyped-tools/raw/master/packages/definitions-parser/allowedPackageJsonDependencies.txt"&gt;the list of allowed external dependencies&lt;/a&gt;. &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/types/pikaday/package.json"&gt;Pikaday is a good example.&lt;/a&gt; These additions are approved by a maintainer, which gives us the chance to make sure that &lt;code&gt;@types&lt;/code&gt; packages don't depend on malicious packages.&lt;/p&gt; 
&lt;p&gt;If the implementation package uses ESM and specifies &lt;code&gt;"type": "module"&lt;/code&gt;, then you should modify package.json to match:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "type": "module"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This also applies if the implementation package has &lt;code&gt;exports&lt;/code&gt; in its package.json.&lt;/p&gt; 
&lt;h5&gt;Peer dependencies&lt;/h5&gt; 
&lt;p&gt;Definitely Typed allows &lt;code&gt;peerDependencies&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;. Peer dependencies can help prevent situations where a package manager unexpectedly installs too-new versions or more than one version of the same package. However, peer dependencies have downsides; package managers differ in their handling of peer dependencies (e.g., &lt;code&gt;yarn&lt;/code&gt; does not auto-install them, &lt;code&gt;npm&lt;/code&gt; requires &lt;code&gt;--legacy-peer-deps&lt;/code&gt; for mismatches). As such, PRs introducing new peer dependencies require maintainer approval and should be limited to specific circumstances.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;In general, types packages should only have a peer dependency if the upstream package has a peer dependency on the same package (or its types).&lt;/strong&gt; For example, a DT package for a React component can specify a peer dependency on &lt;code&gt;@types/react@*&lt;/code&gt;, as the consumer will have needed to install &lt;code&gt;@types/react&lt;/code&gt; to use JSX in the first place. If the consumer installs &lt;code&gt;@types/react@16&lt;/code&gt; in their project, but a newer version of &lt;code&gt;@types/react&lt;/code&gt; is available on npm, the peer dependency may help the package manager choose &lt;code&gt;@types/react@16&lt;/code&gt; instead of that newer version. Similarly, &lt;code&gt;chai-as-promised&lt;/code&gt; has a peer dependency on &lt;code&gt;chai&lt;/code&gt;, so &lt;code&gt;@types/chai-as-promised&lt;/code&gt; should have a peer dependency on &lt;code&gt;@types/chai&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;There are some cases where the upstream package does not have a peer dependency on the types package, but a peer dependency is still appropriate. These are typically cases where the upstream package extends another package and assumes it exists, so &lt;em&gt;should&lt;/em&gt; have declared a peer dependency as it extends another package, but did not. For example, &lt;code&gt;chai-match-pattern&lt;/code&gt; extends &lt;code&gt;chai&lt;/code&gt;, but does not declare a peer dependency on &lt;code&gt;chai&lt;/code&gt;, but needs it to function. &lt;code&gt;@types/chai-match-pattern&lt;/code&gt; should have a peer dependency on &lt;code&gt;@types/chai&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If a package simply exposes types from another package as a part of its API due to a regular dependency in the upstream package, it &lt;em&gt;should not&lt;/em&gt; use a peer dependency. For example, &lt;code&gt;express&lt;/code&gt; has &lt;code&gt;qs&lt;/code&gt; in its &lt;code&gt;"dependencies"&lt;/code&gt;. When users install &lt;code&gt;express&lt;/code&gt;, they don't need to manually install &lt;code&gt;qs&lt;/code&gt;. Likewise, &lt;code&gt;@types/express&lt;/code&gt; has &lt;code&gt;@types/qs&lt;/code&gt; in its &lt;code&gt;"dependencies"&lt;/code&gt;. It would be incorrect to declare &lt;code&gt;@types/qs&lt;/code&gt; as a peer dependency of &lt;code&gt;@types/express&lt;/code&gt;, since that would require some downstream consumers to manually install &lt;code&gt;@types/qs&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;.npmignore&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This file defines which files are to be included in each &lt;code&gt;@types&lt;/code&gt; package. It must take a specific form. For packages with only one version in the repo:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ignore"&gt;*
!**/*.d.ts
!**/*.d.cts
!**/*.d.mts
!**/*.d.*.ts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which is to say "ignore all files, but don't ignore any declaration files". For packages that have more than one version in the repo, the "latest" version (at the top level) should contain something like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ignore"&gt;*
!**/*.d.ts
!**/*.d.cts
!**/*.d.mts
!**/*.d.*.ts
/v15/
/v16/
/v17/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which is the same as the previous &lt;code&gt;.npmignore&lt;/code&gt; but ignoring each of the versioned child directories.&lt;/p&gt; 
&lt;p&gt;CI will fail if this file contains the wrong contents and provide the intended value. No matter what this file contains, the publisher will only publish declaration files.&lt;/p&gt; 
&lt;h4&gt;Common mistakes&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;First, follow advice from the &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html"&gt;handbook&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Formatting: &lt;a href="https://dprint.dev"&gt;dprint&lt;/a&gt; is set up on this repo, so you can run &lt;code&gt;pnpm dprint fmt -- 'path/to/package/**/*.ts'&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Consider using the VS Code &lt;code&gt;.vscode/settings.template.json&lt;/code&gt; (or equivalent for other editors) to format on save with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=dprint.dprint"&gt;VS Code dprint extension&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;function sum(nums: number[]): number&lt;/code&gt;: Use &lt;code&gt;ReadonlyArray&lt;/code&gt; if a function does not write to its parameters.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;interface Foo { new(): Foo; }&lt;/code&gt;: This defines a type of objects that are new-able. You probably want &lt;code&gt;declare class Foo { constructor(); }&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;const Class: { new(): IClass; }&lt;/code&gt;: Prefer to use a class declaration &lt;code&gt;class Class { constructor(); }&lt;/code&gt; instead of a new-able constant.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;getMeAT&amp;lt;T&amp;gt;(): T&lt;/code&gt;: If a type parameter does not appear in the types of any parameters, you don't really have a generic function, you just have a disguised type assertion. Prefer to use a real type assertion, e.g. &lt;code&gt;getMeAT() as number&lt;/code&gt;. Example where a type parameter is acceptable: &lt;code&gt;function id&amp;lt;T&amp;gt;(value: T): T;&lt;/code&gt;. Example where it is not acceptable: &lt;code&gt;function parseJson&amp;lt;T&amp;gt;(json: string): T;&lt;/code&gt;. Exception: &lt;code&gt;new Map&amp;lt;string, number&amp;gt;()&lt;/code&gt; is OK.&lt;/li&gt; 
 &lt;li&gt;Using the types &lt;code&gt;Function&lt;/code&gt; and &lt;code&gt;Object&lt;/code&gt; is almost never a good idea. In 99% of cases it's possible to specify a more specific type. Examples are &lt;code&gt;(x: number) =&amp;gt; number&lt;/code&gt; for &lt;a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#function-type-expressions"&gt;functions&lt;/a&gt; and &lt;code&gt;{ x: number, y: number }&lt;/code&gt; for objects. If there is no certainty at all about the type, &lt;a href="https://www.typescriptlang.org/docs/handbook/basic-types.html#any"&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt; is the right choice, not &lt;code&gt;Object&lt;/code&gt;. If the only known fact about the type is that it's some object, use the type &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#object-type"&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;, not &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;{ [key: string]: any }&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;var foo: string | any&lt;/code&gt;: When &lt;code&gt;any&lt;/code&gt; is used in a union type, the resulting type is still &lt;code&gt;any&lt;/code&gt;. So, while the &lt;code&gt;string&lt;/code&gt; portion of this type annotation may &lt;em&gt;look&lt;/em&gt; useful, it in fact offers no additional typechecking over simply using &lt;code&gt;any&lt;/code&gt;. Depending on the intention, acceptable alternatives could be &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;string | object&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Definition owners&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;TL;DR: do not modify &lt;code&gt;.github/CODEOWNERS&lt;/code&gt;, always modify list of the owners in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;DT has the concept of "Definition Owners" which are people who want to maintain the quality of a particular module's types.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Adding yourself to the list will cause you to be notified (via your GitHub username) whenever someone makes a pull request or issue about the package.&lt;/li&gt; 
 &lt;li&gt;Your PR reviews will have a higher precedence of importance to &lt;a href="https://github.com/microsoft/DefinitelyTyped-tools/tree/main/packages/mergebot"&gt;the bot&lt;/a&gt; which maintains this repo.&lt;/li&gt; 
 &lt;li&gt;The DT maintainers are putting trust in the definition owners to ensure a stable eco-system, please don't add yourself lightly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To add yourself as a Definition Owner, modify the &lt;code&gt;owners&lt;/code&gt; array in &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;"owners": [
    {
        "name": "Some Person",
        "githubUsername": "somebody"
    },
    {
        "name": "Some Corp",
        "url": "https://example.org"
    }
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that this list is &lt;em&gt;not&lt;/em&gt; used to provide credit for contributions; it is only used for managing PR reviews.&lt;/p&gt; 
&lt;p&gt;Once a week the Definition Owners are synced to the file &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/.github/CODEOWNERS"&gt;.github/CODEOWNERS&lt;/a&gt; which is our source of truth.&lt;/p&gt; 
&lt;h2&gt;The history of Definitely Typed&lt;/h2&gt; 
&lt;p&gt;Definitely Typed is one of the most active repositories on GitHub. You might have wondered how the project came to be. @johnnyreilly wrote a history of Definitely Typed. It tells the story of the early days of Definitely Typed, from a repository created by @borisyankov, to the point where it became a pivotal part of the TypeScript ecosystem. &lt;a href="https://johnnyreilly.com/definitely-typed-the-movie"&gt;You can read the story of Definitely Typed here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h4&gt;What exactly is the relationship between this repository and the &lt;code&gt;@types&lt;/code&gt; packages on npm?&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch is automatically published to the &lt;code&gt;@types&lt;/code&gt; scope on npm thanks to &lt;a href="https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/publisher"&gt;DefinitelyTyped-tools&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;I've submitted a pull request. How long until it is merged?&lt;/h4&gt; 
&lt;p&gt;It depends, but most pull requests will be merged within a week. Some PRs can be merged by the owners of a module and they can be merged much faster. Roughly:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;PRs which only change the types of a module and have corresponding tests changes will be merged much faster&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;PRs that have been approved by an owner listed in the definition's &lt;code&gt;package.json&lt;/code&gt; are usually merged more quickly; PRs for new definitions will take more time as they require more review from maintainers. Each PR is reviewed by a TypeScript or Definitely Typed team member before being merged, so please be patient as human factors may cause delays. Check the &lt;a href="https://github.com/orgs/DefinitelyTyped/projects/1"&gt;Pull Request Status Board&lt;/a&gt; to see progress as maintainers work through the open PRs.&lt;/p&gt; 
&lt;h4&gt;I'd like to submit a change to a very popular project, why are they treated differently?&lt;/h4&gt; 
&lt;p&gt;For changes to very popular modules, e.g. Node/Express/Jest which have many millions of downloads each per week on npm, the requirements for contributions are a bit higher. Changes to these projects can have massive ecosystem effects and so we treat changes to them with a lot of care. These modules require both a sign-off from a DT maintainer and enthusiastic support from the module owners. The bar for passing this can be quite high and often PRs can go stale because it doesn't have a champion. If you're finding that no-one is committing, try to make your PR have a smaller focus.&lt;/p&gt; 
&lt;h4&gt;My PR is merged; when will the &lt;code&gt;@types&lt;/code&gt; npm package be updated?&lt;/h4&gt; 
&lt;p&gt;npm packages should update within an hour. If it's been more than an hour, mention the PR number on &lt;a href="https://discord.gg/typescript"&gt;the Definitely Typed channel on the TypeScript Community Discord server&lt;/a&gt; and the current maintainer will get the correct team member to investigate.&lt;/p&gt; 
&lt;h4&gt;I'm writing a definition that depends on another definition. Should I use &lt;code&gt;&amp;lt;reference types="" /&amp;gt;&lt;/code&gt; or an import?&lt;/h4&gt; 
&lt;p&gt;If the module you're referencing is a module (uses &lt;code&gt;export&lt;/code&gt;), use an import. If the module you're referencing is an ambient module (uses &lt;code&gt;declare module&lt;/code&gt;) or just declares globals, use &lt;code&gt;&amp;lt;reference types="" /&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Some packages have a &lt;code&gt;tsconfig.json&lt;/code&gt; that is missing &lt;code&gt;"noImplicitAny": true&lt;/code&gt;, &lt;code&gt;"noImplicitThis": true&lt;/code&gt; or &lt;code&gt;"strictNullChecks": true&lt;/code&gt;.&lt;/h4&gt; 
&lt;p&gt;Then they are wrong and we've not noticed yet. You can help by submitting a pull request to fix them.&lt;/p&gt; 
&lt;h4&gt;Are Files Formatted Automatically?&lt;/h4&gt; 
&lt;p&gt;Yes, using &lt;a href="https://dprint.dev"&gt;dprint&lt;/a&gt;. We recommend using a &lt;a href="https://dprint.dev/install/#editor-extensions"&gt;dprint extension for your editor&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can enable a git hook which will format your code automatically. Run &lt;code&gt;pnpm run setup-hooks&lt;/code&gt;. Then, when you commit, &lt;code&gt;dprint fmt&lt;/code&gt; command will be executed on changed files.&lt;/p&gt; 
&lt;p&gt;Pull requests do not require correct formatting to be merged. Any unformatted code will be automatically reformatted after being merged.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 If you're a VS Code user, we suggest copying the &lt;code&gt;.vscode/settings.template.json&lt;/code&gt; file to &lt;code&gt;.vscode/settings.json&lt;/code&gt;. That template sets the &lt;a href="https://marketplace.visualstudio.com/items?itemName=dprint.dprint"&gt;dprint VS Code extension&lt;/a&gt; as the default formatter in the repo.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Can I request a definition?&lt;/h4&gt; 
&lt;p&gt;Here are the &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/categories/request-a-new-types-package"&gt;currently requested definitions&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;What about type definitions for the DOM?&lt;/h4&gt; 
&lt;p&gt;If types are part of a web standard, they should be contributed to &lt;a href="https://github.com/Microsoft/TypeScript-DOM-lib-generator"&gt;TypeScript-DOM-lib-generator&lt;/a&gt; so that they can become part of the default &lt;code&gt;lib.dom.d.ts&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;What about type definitions with no matching package?&lt;/h4&gt; 
&lt;p&gt;If there's no source JavaScript code at all, for example if you're writing helper types or types for a spec, you should publish the types yourself, not on Definitely Typed. Because they're meant to provide types for existing JavaScript code, &lt;code&gt;@types&lt;/code&gt; packages are not meant to be imported directly. That is, you shouldn't create a Definitely Typed package that's meant to be used like &lt;code&gt;import type { ... } from "@types/foo"&lt;/code&gt;. Nor should you expect to write &lt;code&gt;import type { ... } from "foo"&lt;/code&gt; when there's no &lt;code&gt;foo&lt;/code&gt; installed.&lt;/p&gt; 
&lt;p&gt;This is different from providing types for a browser only JavaScript library or types for an entire environment like node, bun, et al. There, the types are either resolved implicitly or using &lt;code&gt;/// &amp;lt;references types="foo" /&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Should I add an empty namespace to a package that doesn't export a module to use ES6 style imports?&lt;/h4&gt; 
&lt;p&gt;Some packages, like &lt;a href="https://github.com/chaijs/chai-http"&gt;chai-http&lt;/a&gt;, export a function.&lt;/p&gt; 
&lt;p&gt;Importing this module with an ES6 style import in the form &lt;code&gt;import * as foo from "foo";&lt;/code&gt; leads to the error:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;error TS2497: Module 'foo' resolves to a non-module entity and cannot be imported using this construct.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This error can be suppressed by merging the function declaration with an empty namespace of the same name, but this practice is discouraged. This is a commonly cited &lt;a href="https://stackoverflow.com/questions/39415661/what-does-resolves-to-a-non-module-entity-and-cannot-be-imported-using-this"&gt;Stack Overflow answer&lt;/a&gt; regarding this matter.&lt;/p&gt; 
&lt;p&gt;It is more appropriate to import the module using the &lt;code&gt;import foo = require("foo");&lt;/code&gt; syntax. Nevertheless, if you want to use a default import like &lt;code&gt;import foo from "foo";&lt;/code&gt; you have two options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can use the &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html#support-for-default-import-interop-with-systemjs"&gt;&lt;code&gt;--allowSyntheticDefaultImports&lt;/code&gt; compiler option&lt;/a&gt; if your module runtime supports an interop scheme for non-ECMAScript modules, i.e. if default imports work in your environment (e.g. Webpack, SystemJS, esm).&lt;/li&gt; 
 &lt;li&gt;you can use the &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#support-for-import-d-from-cjs-form-commonjs-modules-with---esmoduleinterop"&gt;&lt;code&gt;--esModuleInterop&lt;/code&gt; compiler option&lt;/a&gt; if you want TypeScript to take care of non-ECMAScript interop (since TypeScript 2.7).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;A package uses &lt;code&gt;export =&lt;/code&gt;, but I prefer to use default imports. Can I change &lt;code&gt;export =&lt;/code&gt; to &lt;code&gt;export default&lt;/code&gt;?&lt;/h4&gt; 
&lt;p&gt;Like in the previous question, refer to using either the &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html#support-for-default-import-interop-with-systemjs"&gt;&lt;code&gt;--allowSyntheticDefaultImports&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#support-for-import-d-from-cjs-form-commonjs-modules-with---esmoduleinterop"&gt;&lt;code&gt;--esModuleInterop&lt;/code&gt;&lt;/a&gt; compiler options.&lt;/p&gt; 
&lt;p&gt;Do not change the type definition if it is accurate. For an npm package, &lt;code&gt;export =&lt;/code&gt; is accurate if &lt;code&gt;node -p 'require("foo")'&lt;/code&gt; works to import a module and &lt;code&gt;export default&lt;/code&gt; is accurate if &lt;code&gt;node -p 'require("foo").default'&lt;/code&gt; works to import a module.&lt;/p&gt; 
&lt;h4&gt;I want to use features from very new TypeScript versions.&lt;/h4&gt; 
&lt;p&gt;Then you will have set the minimum supported version by specifying &lt;code&gt;"minimumTypeScriptVersion": "X.Y"&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;However, if your project needs to maintain types that are compatible with, say, 3.7 and above &lt;em&gt;at the same time as&lt;/em&gt; types that are compatible with 3.6 or below, you will need to use the &lt;code&gt;typesVersions&lt;/code&gt; feature. You can find a detailed explanation of this feature in the &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-1.html#version-selection-with-typesversions"&gt;official TypeScript documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here's a short example to get you started:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You'll have to add &lt;code&gt;typesVersions&lt;/code&gt; to &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
    "private": true,
    "types": "index",
    "typesVersions": {
        "&amp;lt;=3.6": { "*": ["ts3.6/*"] }
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create the sub-directory mentioned in the &lt;code&gt;typesVersions&lt;/code&gt; field inside your types directory (&lt;code&gt;ts3.6/&lt;/code&gt; in this example). &lt;code&gt;ts3.6/&lt;/code&gt; will support TypeScript versions 3.6 and below, so copy the existing types and tests there.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Back in the root of the package, add the TypeScript 3.7 features you want to use. When people install the package, TypeScript 3.6 and below will start from &lt;code&gt;ts3.6/index.d.ts&lt;/code&gt;, whereas TypeScript 3.7 and above will start from &lt;code&gt;index.d.ts&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can look at &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/f2512c2cf7cdcf9a487d989e288174e49b7839ab/types/bluebird"&gt;bluebird&lt;/a&gt; for an example.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;I want to add a DOM API not present in TypeScript by default.&lt;/h4&gt; 
&lt;p&gt;This may belong in &lt;a href="https://github.com/Microsoft/TypeScript-DOM-lib-generator#readme"&gt;TypeScript-DOM-lib-generator&lt;/a&gt;. See the guidelines there. If the standard is still a draft, it belongs here. Use a name beginning with &lt;code&gt;dom-&lt;/code&gt; and include a link to the standard as the "Project" link in &lt;code&gt;package.json&lt;/code&gt;. When it graduates draft mode, we may remove it from Definitely Typed and deprecate the associated &lt;code&gt;@types&lt;/code&gt; package.&lt;/p&gt; 
&lt;h4&gt;How do Definitely Typed package versions relate to versions of the corresponding library?&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;NOTE: The discussion in this section assumes familiarity with &lt;a href="https://semver.org/"&gt;Semantic versioning&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Each Definitely Typed package is versioned when published to npm. The &lt;a href="https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/publisher"&gt;DefinitelyTyped-tools&lt;/a&gt; (the tool that publishes &lt;code&gt;@types&lt;/code&gt; packages to npm) will set the declaration package's version by using the &lt;code&gt;major.minor.9999&lt;/code&gt; version number listed in &lt;code&gt;package.json&lt;/code&gt;. For example, here are the first few lines of Node's type declarations for version &lt;code&gt;20.8.x&lt;/code&gt; at the time of writing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "private": true,
    "name": "@types/node",
    "version": "20.8.9999"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because the version is listed as &lt;code&gt;20.8.9999&lt;/code&gt;, the npm version of the &lt;code&gt;@types/node&lt;/code&gt; package will also be &lt;code&gt;20.8.x&lt;/code&gt;. Note that the version in &lt;code&gt;package.json&lt;/code&gt; should only contain &lt;code&gt;major.minor&lt;/code&gt; version (e.g. &lt;code&gt;10.12&lt;/code&gt;) followed by &lt;code&gt;.9999&lt;/code&gt;. This is because only the major and minor release numbers are aligned between library packages and type declaration packages. (The &lt;code&gt;.9999&lt;/code&gt; is to ensure that local &lt;code&gt;@types&lt;/code&gt; packages are always newest during local development.) The patch release number of the type declaration package (e.g. &lt;code&gt;.0&lt;/code&gt; in &lt;code&gt;20.8.0&lt;/code&gt;) is initialized to zero by Definitely Typed and is incremented each time a new &lt;code&gt;@types/node&lt;/code&gt; package is published to npm for the same major/minor version of the corresponding library.&lt;/p&gt; 
&lt;p&gt;Sometimes type declaration package versions and library package versions can get out of sync. Below are a few common reasons why, in order of how much they inconvenience users of a library. Only the last case is typically problematic.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;As noted above, the patch version of the type declaration package is unrelated to the library patch version. This allows Definitely Typed to safely update type declarations for the same major/minor version of a library.&lt;/li&gt; 
 &lt;li&gt;If updating a package for new functionality, don't forget to update the version number to line up with that version of the library. If users make sure versions correspond between JavaScript packages and their respective &lt;code&gt;@types&lt;/code&gt; packages, then &lt;code&gt;npm update&lt;/code&gt; should typically just work.&lt;/li&gt; 
 &lt;li&gt;It's common for type declaration package updates to lag behind library updates because it's often library users, not maintainers, who update Definitely Typed when new library features are released. So, there may be a lag of days, weeks or even months before a helpful community member sends a PR to update the type declaration package for a new library release. If you're impacted by this, you can be the change you want to see in the world and you can be that helpful community member!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span&gt;❗&lt;/span&gt; If you're updating type declarations for a library, always set the &lt;code&gt;major.minor&lt;/code&gt; version in &lt;code&gt;package.json&lt;/code&gt; to match the library version that you're documenting! &lt;span&gt;❗&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;If a library is updated to a new major version with breaking changes, how should I update its type declaration package?&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://semver.org/"&gt;Semantic versioning&lt;/a&gt; requires that versions with breaking changes must increment the major version number. For example, a library that removes a publicly exported function after its &lt;code&gt;3.5.8&lt;/code&gt; release must bump its version to &lt;code&gt;4.0.0&lt;/code&gt; in its next release. Furthermore, when the library's &lt;code&gt;4.0.0&lt;/code&gt; release is out, it's Definitely Typed type declaration package should also be updated to &lt;code&gt;4.0.0&lt;/code&gt;, including any breaking changes to the library's API.&lt;/p&gt; 
&lt;p&gt;Many libraries have a large installed base of developers (including maintainers of other packages using that library as a dependency) who won't move right away to a new version that has breaking changes, because it might be months until a maintainer has time to rewrite code to adapt to the new version. In the meantime, users of old library versions still may want to update type declarations for older versions.&lt;/p&gt; 
&lt;p&gt;If you intend to continue updating the older version of a library's type declarations, you may create a new subfolder (e.g. &lt;code&gt;/v2/&lt;/code&gt;) named for the current (soon to be "old") version and copy existing files from the current version to it.&lt;/p&gt; 
&lt;p&gt;When creating a new version folder, ensure that the version field of &lt;code&gt;package.json&lt;/code&gt; has been updated; &lt;code&gt;pnpm&lt;/code&gt; will automatically resolve to this versioned package whenever it's needed. If other packages in the repo need to depend on this new version, ensure that their &lt;code&gt;package.json&lt;/code&gt;s are also updated too.&lt;/p&gt; 
&lt;p&gt;For example, if we are creating &lt;code&gt;types/history/v2&lt;/code&gt;, its &lt;code&gt;package.json&lt;/code&gt; would look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "private": true,
    "name": "@types/history",
    "version": "2.4.9999"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another package may select this version by specifying:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "private": true,
    "name": "@types/browser-sync",
    "version": "2.26.9999",
    "dependencies": {
        "@types/history": "^2"
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also, &lt;code&gt;/// &amp;lt;reference types=".." /&amp;gt;&lt;/code&gt; will not work with path mapping, so dependencies must use &lt;code&gt;import&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;How do breaking type changes work if type declaration packages closely track the library package's version?&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;@types&lt;/code&gt; packages always type packages of the same version, so &lt;code&gt;@types/foo@5.4.x&lt;/code&gt; are for &lt;code&gt;foo@5.4.x&lt;/code&gt;. As a consequence, all changes, breaking or not, are published as patch revisions, unless paired with a major/minor bump to change the package version being targeted (coincidentally or not).&lt;/p&gt; 
&lt;p&gt;When it comes to breaking changes, DT maintainers consider the popularity of the package, the upsides of the proposed breaking change, the effort that will be required for users to fix their code, and whether the change could reasonably be delayed until it can be synced with a major bump of the upstream library.&lt;/p&gt; 
&lt;h4&gt;How do I write definitions for packages that can be used globally and as a module?&lt;/h4&gt; 
&lt;p&gt;The TypeScript handbook contains excellent &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"&gt;general information about writing definitions&lt;/a&gt; and also &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"&gt;this example definition file&lt;/a&gt; which shows how to create a definition using ES6-style module syntax, while also specifying objects made available to the global scope. This technique is demonstrated practically in the &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/types/big.js/index.d.ts"&gt;definition for &lt;code&gt;big.js&lt;/code&gt;&lt;/a&gt;, which is a library that can be loaded globally via script tag on a web page or imported via require or ES6-style imports.&lt;/p&gt; 
&lt;p&gt;To test how your definition can be used both when referenced globally or as an imported module, create a &lt;code&gt;test&lt;/code&gt; folder and place two test files in there. Name one &lt;code&gt;YourLibraryName-global.test.ts&lt;/code&gt; and the other &lt;code&gt;YourLibraryName-module.test.ts&lt;/code&gt;. The &lt;em&gt;global&lt;/em&gt; test file should exercise the definition according to how it would be used in a script loaded on a web page where the library is available on the global scope - in this scenario you should not specify an import statement. The &lt;em&gt;module&lt;/em&gt; test file should exercise the definition according to how it would be used when imported (including the &lt;code&gt;import&lt;/code&gt; statement(s)). If you specify a &lt;code&gt;files&lt;/code&gt; property in your &lt;code&gt;tsconfig.json&lt;/code&gt; file, be sure to include both test files. A &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/big.js/test"&gt;practical example of this&lt;/a&gt; is also available on the &lt;code&gt;big.js&lt;/code&gt; definition.&lt;/p&gt; 
&lt;p&gt;Please note that it is not required to fully exercise the definition in each test file - it is sufficient to test only the globally accessible elements on the global test file and fully exercise the definition in the module test file or vice versa.&lt;/p&gt; 
&lt;h4&gt;What about scoped packages?&lt;/h4&gt; 
&lt;p&gt;Types for a scoped package &lt;code&gt;@foo/bar&lt;/code&gt; should go in &lt;code&gt;types/foo__bar&lt;/code&gt;. Note the double underscore.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT license.&lt;/p&gt; 
&lt;p&gt;Copyrights on the definition files are respective of each contributor listed at the beginning of each definition file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wasp-lang/open-saas</title>
      <link>https://github.com/wasp-lang/open-saas</link>
      <description>&lt;p&gt;A free, open-source SaaS app starter for React &amp; Node.js with superpowers. Full-featured. Community-driven.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Welcome to your new SaaS App! 🎉&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.producthunt.com/products/open-saas?embed=true&amp;amp;utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_source=badge-open-saas-2" target="_blank"&gt;&lt;img src="https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=991058&amp;amp;theme=neutral&amp;amp;t=1753776395137" alt="Open SaaS - The open-source SaaS boilerplate with superpowers! | Product Hunt" style="width: 250px; height: 54px;" width="250" height="54"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/3856276b-23e9-455e-a564-b5f26f4f0e98"&gt;https://github.com/user-attachments/assets/3856276b-23e9-455e-a564-b5f26f4f0e98&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You've decided to build a SaaS app with the Open SaaS template. Great choice!&lt;/p&gt; 
&lt;p&gt;This template is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;fully open-source&lt;/li&gt; 
 &lt;li&gt;completely free to use and distribute&lt;/li&gt; 
 &lt;li&gt;comes with a ton of features out of the box!&lt;/li&gt; 
 &lt;li&gt;focused on free, open-source services, where possible&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;🧑‍💻 Check it out in action here: &lt;a href="https://opensaas.sh"&gt;OpenSaaS.sh&lt;/a&gt;&lt;br&gt; 📚 Check out the Docs here: &lt;a href="https://docs.opensaas.sh"&gt;Open SaaS Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What's inside?&lt;/h2&gt; 
&lt;p&gt;The template itself is built on top of some very powerful tools and frameworks, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🐝 &lt;a href="https://wasp.sh"&gt;Wasp&lt;/a&gt; - a full-stack React, NodeJS, Prisma framework with superpowers&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;a href="https://starlight.astro.build/"&gt;Astro&lt;/a&gt; - Astro's lightweight "Starlight" template for documentation and blog&lt;/li&gt; 
 &lt;li&gt;💸 &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt; or &lt;a href="https://lemonsqueezy.com/"&gt;Lemon Squeezy&lt;/a&gt; (with Polar.sh and Paddle coming soon!) - for products and payments&lt;/li&gt; 
 &lt;li&gt;💅 &lt;a href="https://tailwindcss.com"&gt;ShadCN UI&lt;/a&gt; - for components &amp;amp; styling (plus admin dashboard!)&lt;/li&gt; 
 &lt;li&gt;📈 &lt;a href="https://plausible.io"&gt;Plausible&lt;/a&gt; or &lt;a href="https://analytics.google.com/"&gt;Google&lt;/a&gt; Analytics&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;a href="https://openai.com"&gt;OpenAI&lt;/a&gt; - OpenAI API w/ function calling example&lt;/li&gt; 
 &lt;li&gt;📦 &lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3&lt;/a&gt; - for file uploads&lt;/li&gt; 
 &lt;li&gt;📧 &lt;a href="https://sendgrid.com"&gt;SendGrid&lt;/a&gt;, &lt;a href="https://mailgun.com"&gt;MailGun&lt;/a&gt;, or SMTP - for email sending&lt;/li&gt; 
 &lt;li&gt;🧪 &lt;a href="https://playwright.dev"&gt;Playwright&lt;/a&gt; - end-to-end tests with Playwright&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Because we're using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔐 &lt;a href="https://wasp.sh/docs/auth/overview"&gt;Full-stack Authentication&lt;/a&gt; - Email verified + social Auth in a few lines of code.&lt;/li&gt; 
 &lt;li&gt;⛑ &lt;a href="https://wasp.sh/docs/data-model/operations/overview"&gt;End-to-end Type Safety&lt;/a&gt; - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;a href="https://wasp.sh/docs/advanced/jobs"&gt;Jobs&lt;/a&gt; - Run cron jobs in the background or set up queues simply by defining a function in the config file.&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;a href="https://wasp.sh/docs/advanced/deployment/overview"&gt;One-command Deploy&lt;/a&gt; - Easily deploy your DB, Server, &amp;amp; Client with one commaned to &lt;a href="https://railway.app"&gt;Railway&lt;/a&gt; or &lt;a href="https://fly.io"&gt;Fly.io&lt;/a&gt; via the CLI. Or deploy manually to any other hosting serivce of your choice.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You also get access to Wasp's diverse, helpful community if you get stuck or need help.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🤝 &lt;a href="https://discord.gg/aCamt5wCpS"&gt;Wasp Discord&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Simple Instructions&lt;/h3&gt; 
&lt;p&gt;First, to install the latest version of &lt;a href="https://wasp.sh/"&gt;Wasp&lt;/a&gt; on macOS, Linux, or Windows with WSL, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSL https://get.wasp.sh/installer.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, create a new SaaS app with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wasp new -t saas
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a &lt;strong&gt;clean copy of the Open SaaS template&lt;/strong&gt; into a new directory, and you can start building your SaaS app right away!&lt;/p&gt; 
&lt;h3&gt;Detailed Instructions&lt;/h3&gt; 
&lt;p&gt;For everything you need to know about getting started and using this template, check out the &lt;a href="https://docs.opensaas.sh"&gt;Open SaaS Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We've documented everything in great detail, including installation instructions, pulling updates to the template, guides for integrating services, SEO, deployment, and more. 🚀&lt;/p&gt; 
&lt;h2&gt;Getting Help &amp;amp; Providing Feedback&lt;/h2&gt; 
&lt;p&gt;There are two ways to get help or provide feedback (and we try to always respond quickly!):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wasp-lang/open-saas/issues"&gt;Open an issue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/aCamt5wCpS"&gt;Wasp Discord&lt;/a&gt; -- please direct questions to the #🙋questions forum channel&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Note that we've tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.&lt;/p&gt; 
&lt;p&gt;We could always use some help tying up loose ends: contributions are welcome! Check out &lt;a href="https://raw.githubusercontent.com/wasp-lang/open-saas/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linshenkx/prompt-optimizer</title>
      <link>https://github.com/linshenkx/prompt-optimizer</link>
      <description>&lt;p&gt;一款提示词优化器，助力于编写高质量的提示词&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prompt Optimizer (提示词优化器) 🚀&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/README_EN.md"&gt;English&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/README.md"&gt;中文&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/linshenkx/prompt-optimizer/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/linshenkx/prompt-optimizer" alt="GitHub stars"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/chrome-web-store/users/cakkkhboolfnadechdlgdcnjammejlna?style=flat&amp;amp;label=Chrome%20Users&amp;amp;link=https%3A%2F%2Fchromewebstore.google.com%2Fdetail%2F%25E6%258F%2590%25E7%25A4%25BA%25E8%25AF%258D%25E4%25BC%2598%25E5%258C%2596%25E5%2599%25A8%2Fcakkkhboolfnadechdlgdcnjammejlna" alt="Chrome Web Store Users"&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/linshen/prompt-optimizer"&gt;&lt;img src="https://img.shields.io/docker/pulls/linshen/prompt-optimizer" alt="Docker Pulls"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/forks/linshenkx/prompt-optimizer?style=flat" alt="GitHub forks"&gt; &lt;a href="https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Flinshenkx%2Fprompt-optimizer"&gt;&lt;img src="https://img.shields.io/badge/Vercel-indigo?style=flat&amp;amp;logo=vercel" alt="Deploy with Vercel"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://prompt.always200.com"&gt;在线体验&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B"&gt;快速开始&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98"&gt;常见问题&lt;/a&gt; | &lt;a href="https://chromewebstore.google.com/detail/prompt-optimizer/cakkkhboolfnadechdlgdcnjammejlna"&gt;Chrome插件&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/dev.md"&gt;开发文档&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/user/deployment/vercel.md"&gt;Vercel部署指南&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/user/mcp-server.md"&gt;MCP部署使用说明&lt;/a&gt; | &lt;a href="https://deepwiki.com/linshenkx/prompt-optimizer"&gt;DeepWiki文档&lt;/a&gt; | &lt;a href="https://zread.ai/linshenkx/prompt-optimizer"&gt;ZRead文档&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;📖 项目简介&lt;/h2&gt; 
&lt;p&gt;Prompt Optimizer是一个强大的AI提示词优化工具，帮助你编写更好的AI提示词，提升AI输出质量。支持Web应用、桌面应用、Chrome插件和Docker部署四种使用方式。&lt;/p&gt; 
&lt;h3&gt;🎥 功能演示&lt;/h3&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;b&gt;1. 角色扮演对话：激发小模型潜力&lt;/b&gt;&lt;/p&gt; 
 &lt;p&gt;在追求成本效益的生产或注重隐私的本地化场景中，结构化的提示词能让小模型稳定地进入角色，提供沉浸式、高一致性的角色扮演体验，有效激发其潜力。&lt;/p&gt; 
 &lt;img src="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/images/demo/cat-maid-roleplay.png" alt="猫女仆角色扮演演示" width="85%"&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;b&gt;2. 知识图谱提取：保障生产环境的稳定性&lt;/b&gt;&lt;/p&gt; 
 &lt;p&gt;在需要程序化处理的生产环境中，高质量的提示词能显著降低对模型智能程度的要求，使得更经济的小模型也能稳定输出可靠的指定格式。本工具旨在辅助开发者快速达到此目的，从而加速开发、保障稳定，实现降本增效。&lt;/p&gt; 
 &lt;img src="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/images/demo/knowledge-graph-extractor.png" alt="知识图谱提取演示" width="85%"&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;b&gt;3. 诗歌写作：辅助创意探索与需求定制&lt;/b&gt;&lt;/p&gt; 
 &lt;p&gt;当面对一个强大的AI，我们的目标不只是得到一个“好”答案，而是得到一个“我们想要的”独特答案。本工具能帮助用户将一个模糊的灵感（如“写首诗”）细化为具体的需求（关于什么主题、何种意象、何种情感），辅助您探索、发掘并精确表达自己的创意，与AI共创独一无二的作品。&lt;/p&gt; 
 &lt;img src="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/images/demo/poetry-writing.png" alt="诗歌创作演示" width="85%"&gt; 
&lt;/div&gt; 
&lt;h2&gt;✨ 核心特性&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;智能优化&lt;/strong&gt;：一键优化提示词，支持多轮迭代改进，提升AI回复准确度&lt;/li&gt; 
 &lt;li&gt;📝 &lt;strong&gt;双模式优化&lt;/strong&gt;：支持系统提示词优化和用户提示词优化，满足不同使用场景&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;对比测试&lt;/strong&gt;：支持原始提示词和优化后提示词的实时对比，直观展示优化效果&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;strong&gt;多模型集成&lt;/strong&gt;：支持OpenAI、Gemini、DeepSeek、智谱AI、SiliconFlow等主流AI模型&lt;/li&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;安全架构&lt;/strong&gt;：纯客户端处理，数据直接与AI服务商交互，不经过中间服务器&lt;/li&gt; 
 &lt;li&gt;📱 &lt;strong&gt;多端支持&lt;/strong&gt;：同时提供Web应用、桌面应用、Chrome插件和Docker部署四种使用方式&lt;/li&gt; 
 &lt;li&gt;🔐 &lt;strong&gt;访问控制&lt;/strong&gt;：支持密码保护功能，保障部署安全&lt;/li&gt; 
 &lt;li&gt;🧩 &lt;strong&gt;MCP协议支持&lt;/strong&gt;：支持Model Context Protocol (MCP) 协议，可与Claude Desktop等MCP兼容应用集成&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;快速开始&lt;/h2&gt; 
&lt;h3&gt;1. 使用在线版本（推荐）&lt;/h3&gt; 
&lt;p&gt;直接访问：&lt;a href="https://prompt.always200.com"&gt;https://prompt.always200.com&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;项目是纯前端项目，所有数据只存储在浏览器本地，不会上传至任何服务器，因此直接使用在线版本也是安全可靠的&lt;/p&gt; 
&lt;h3&gt;2. Vercel部署&lt;/h3&gt; 
&lt;p&gt;方式1：一键部署到自己的Vercel(方便，但后续无法自动更新)： &lt;a href="https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Flinshenkx%2Fprompt-optimizer"&gt;&lt;img src="https://vercel.com/button" alt="部署到 Vercel"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;方式2: Fork项目后在Vercel中导入（推荐，但需参考部署文档进行手动设置）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;先Fork项目到自己的GitHub&lt;/li&gt; 
 &lt;li&gt;然后在Vercel中导入该项目&lt;/li&gt; 
 &lt;li&gt;可跟踪源项目更新，便于同步最新功能和修复&lt;/li&gt; 
 &lt;li&gt;配置环境变量： 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;ACCESS_PASSWORD&lt;/code&gt;：设置访问密码，启用访问限制&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;VITE_OPENAI_API_KEY&lt;/code&gt;等：配置各AI服务商的API密钥&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;更多详细的部署步骤和注意事项，请查看：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/user/deployment/vercel.md"&gt;Vercel部署指南&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. 下载桌面应用&lt;/h3&gt; 
&lt;p&gt;从 &lt;a href="https://github.com/linshenkx/prompt-optimizer/releases"&gt;GitHub Releases&lt;/a&gt; 下载最新版本。我们为各平台提供&lt;strong&gt;安装程序&lt;/strong&gt;和&lt;strong&gt;压缩包&lt;/strong&gt;两种格式。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;安装程序 (推荐)&lt;/strong&gt;: 如 &lt;code&gt;*.exe&lt;/code&gt;, &lt;code&gt;*.dmg&lt;/code&gt;, &lt;code&gt;*.AppImage&lt;/code&gt; 等。&lt;strong&gt;强烈推荐使用此方式，因为它支持自动更新&lt;/strong&gt;。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;压缩包&lt;/strong&gt;: 如 &lt;code&gt;*.zip&lt;/code&gt;。解压即用，但无法自动更新。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;桌面应用核心优势&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;✅ &lt;strong&gt;无跨域限制&lt;/strong&gt;：作为原生桌面应用，它能彻底摆脱浏览器跨域（CORS）问题的困扰。这意味着您可以直接连接任何AI服务提供商的API，包括本地部署的Ollama或有严格安全策略的商业API，获得最完整、最稳定的功能体验。&lt;/li&gt; 
 &lt;li&gt;✅ &lt;strong&gt;自动更新&lt;/strong&gt;：通过安装程序（如 &lt;code&gt;.exe&lt;/code&gt;, &lt;code&gt;.dmg&lt;/code&gt;）安装的版本，能够自动检查并更新到最新版。&lt;/li&gt; 
 &lt;li&gt;✅ &lt;strong&gt;独立运行&lt;/strong&gt;：无需依赖浏览器，提供更快的响应和更佳的性能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. 安装Chrome插件&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;从Chrome商店安装（由于审批较慢，可能不是最新的）：&lt;a href="https://chromewebstore.google.com/detail/prompt-optimizer/cakkkhboolfnadechdlgdcnjammejlna"&gt;Chrome商店地址&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;点击图标即可打开提示词优化器&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;5. Docker部署&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;点击查看 Docker 部署命令&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 运行容器（默认配置）
docker run -d -p 8081:80 --restart unless-stopped --name prompt-optimizer linshen/prompt-optimizer

# 运行容器（配置API密钥和访问密码）
docker run -d -p 8081:80 \
  -e VITE_OPENAI_API_KEY=your_key \
  -e ACCESS_USERNAME=your_username \  # 可选，默认为"admin"
  -e ACCESS_PASSWORD=your_password \  # 设置访问密码
  --restart unless-stopped \
  --name prompt-optimizer \
  linshen/prompt-optimizer
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;国内镜像&lt;/strong&gt;: 如果Docker Hub访问较慢，可以将上述命令中的 &lt;code&gt;linshen/prompt-optimizer&lt;/code&gt; 替换为 &lt;code&gt;registry.cn-guangzhou.aliyuncs.com/prompt-optimizer/prompt-optimizer&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;6. Docker Compose部署&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;点击查看 Docker Compose 部署步骤&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 1. 克隆仓库
git clone https://github.com/linshenkx/prompt-optimizer.git
cd prompt-optimizer

# 2. 可选：创建.env文件配置API密钥和访问认证
cp env.local.example .env
# 编辑 .env 文件，填入实际的 API 密钥和配置

# 3. 启动服务
docker compose up -d

# 4. 查看日志
docker compose logs -f

# 5. 访问服务
Web 界面：http://localhost:8081
MCP 服务器：http://localhost:8081/mcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;你还可以直接编辑docker-compose.yml文件，自定义配置：&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;点击查看 docker-compose.yml 示例&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;services:
  prompt-optimizer:
    # 使用Docker Hub镜像
    image: linshen/prompt-optimizer:latest
    # 或使用阿里云镜像（国内用户推荐）
    # image: registry.cn-guangzhou.aliyuncs.com/prompt-optimizer/prompt-optimizer:latest
    container_name: prompt-optimizer
    restart: unless-stopped
    ports:
      - "8081:80"  # Web应用端口（包含MCP服务器，通过/mcp路径访问）
    environment:
      # API密钥配置
      - VITE_OPENAI_API_KEY=your_openai_key
      - VITE_GEMINI_API_KEY=your_gemini_key
      # 访问控制（可选）
      - ACCESS_USERNAME=admin
      - ACCESS_PASSWORD=your_password
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;7. MCP Server 使用说明&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;点击查看 MCP Server 使用说明&lt;/summary&gt; 
 &lt;p&gt;Prompt Optimizer 现在支持 Model Context Protocol (MCP) 协议，可以与 Claude Desktop 等支持 MCP 的 AI 应用集成。&lt;/p&gt; 
 &lt;p&gt;当通过 Docker 运行时，MCP Server 会自动启动，并可通过 &lt;code&gt;http://ip:port/mcp&lt;/code&gt; 访问。&lt;/p&gt; 
 &lt;h4&gt;环境变量配置&lt;/h4&gt; 
 &lt;p&gt;MCP Server 需要配置 API 密钥才能正常工作。主要的 MCP 专属配置：&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# MCP 服务器配置
MCP_DEFAULT_MODEL_PROVIDER=openai  # 可选值：openai, gemini, deepseek, siliconflow, zhipu, custom
MCP_LOG_LEVEL=info                 # 日志级别
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Docker 环境下使用 MCP&lt;/h4&gt; 
 &lt;p&gt;在 Docker 环境中，MCP Server 会与 Web 应用一起运行，您可以通过 Web 应用的相同端口访问 MCP 服务，路径为 &lt;code&gt;/mcp&lt;/code&gt;。&lt;/p&gt; 
 &lt;p&gt;例如，如果您将容器的 80 端口映射到主机的 8081 端口：&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d -p 8081:80 \
  -e VITE_OPENAI_API_KEY=your-openai-key \
  -e MCP_DEFAULT_MODEL_PROVIDER=openai \
  --name prompt-optimizer \
  linshen/prompt-optimizer
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;那么 MCP Server 将可以通过 &lt;code&gt;http://localhost:8081/mcp&lt;/code&gt; 访问。&lt;/p&gt; 
 &lt;h4&gt;Claude Desktop 集成示例&lt;/h4&gt; 
 &lt;p&gt;要在 Claude Desktop 中使用 Prompt Optimizer，您需要在 Claude Desktop 的配置文件中添加服务配置。&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;找到 Claude Desktop 的配置目录：&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Windows: &lt;code&gt;%APPDATA%\Claude\services&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;macOS: &lt;code&gt;~/Library/Application Support/Claude/services&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;Linux: &lt;code&gt;~/.config/Claude/services&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;编辑或创建 &lt;code&gt;services.json&lt;/code&gt; 文件，添加以下内容：&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "services": [
    {
      "name": "Prompt Optimizer",
      "url": "http://localhost:8081/mcp"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;请确保将 &lt;code&gt;localhost:8081&lt;/code&gt; 替换为您实际部署 Prompt Optimizer 的地址和端口。&lt;/p&gt; 
 &lt;h4&gt;可用工具&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;optimize-user-prompt&lt;/strong&gt;: 优化用户提示词以提高 LLM 性能&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;optimize-system-prompt&lt;/strong&gt;: 优化系统提示词以提高 LLM 性能&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;iterate-prompt&lt;/strong&gt;: 对已经成熟/完善的提示词进行定向迭代优化&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;更多详细信息，请查看 &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/user/mcp-server.md"&gt;MCP 服务器用户指南&lt;/a&gt;。&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;⚙️ API密钥配置&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;点击查看API密钥配置方法&lt;/summary&gt; 
 &lt;h3&gt;方式一：通过界面配置（推荐）&lt;/h3&gt; 
 &lt;ol&gt; 
  &lt;li&gt;点击界面右上角的"⚙️设置"按钮&lt;/li&gt; 
  &lt;li&gt;选择"模型管理"选项卡&lt;/li&gt; 
  &lt;li&gt;点击需要配置的模型（如OpenAI、Gemini、DeepSeek等）&lt;/li&gt; 
  &lt;li&gt;在弹出的配置框中输入对应的API密钥&lt;/li&gt; 
  &lt;li&gt;点击"保存"即可&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;支持的模型：OpenAI、Gemini、DeepSeek、Zhipu智谱、SiliconFlow、自定义API（OpenAI兼容接口）&lt;/p&gt; 
 &lt;p&gt;除了API密钥，您还可以在模型配置界面为每个模型单独设置高级LLM参数。这些参数通过一个名为 &lt;code&gt;llmParams&lt;/code&gt; 的字段进行配置，它允许您以键值对的形式指定LLM SDK支持的任何参数，从而更精细地控制模型行为。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;高级LLM参数配置示例：&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;OpenAI/兼容API&lt;/strong&gt;: &lt;code&gt;{"temperature": 0.7, "max_tokens": 4096, "timeout": 60000}&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Gemini&lt;/strong&gt;: &lt;code&gt;{"temperature": 0.8, "maxOutputTokens": 2048, "topP": 0.95}&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;DeepSeek&lt;/strong&gt;: &lt;code&gt;{"temperature": 0.5, "top_p": 0.9, "frequency_penalty": 0.1}&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;有关 &lt;code&gt;llmParams&lt;/code&gt; 的更详细说明和配置指南，请参阅 &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/developer/llm-params-guide.md"&gt;LLM参数配置指南&lt;/a&gt;。&lt;/p&gt; 
 &lt;h3&gt;方式二：通过环境变量配置&lt;/h3&gt; 
 &lt;p&gt;Docker部署时通过 &lt;code&gt;-e&lt;/code&gt; 参数配置环境变量：&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;-e VITE_OPENAI_API_KEY=your_key
-e VITE_GEMINI_API_KEY=your_key
-e VITE_DEEPSEEK_API_KEY=your_key
-e VITE_ZHIPU_API_KEY=your_key
-e VITE_SILICONFLOW_API_KEY=your_key
-e VITE_CUSTOM_API_KEY=your_custom_api_key
-e VITE_CUSTOM_API_BASE_URL=your_custom_api_base_url
-e VITE_CUSTOM_API_MODEL=your_custom_model_name
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;本地开发&lt;/h2&gt; 
&lt;p&gt;详细文档可查看 &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/dev.md"&gt;开发文档&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;点击查看本地开发命令&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 1. 克隆项目
git clone https://github.com/linshenkx/prompt-optimizer.git
cd prompt-optimizer

# 2. 安装依赖
pnpm install

# 3. 启动开发服务
pnpm dev               # 主开发命令：构建core/ui并运行web应用
pnpm dev:web          # 仅运行web应用
pnpm dev:fresh        # 完整重置并重新启动开发环境
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;🗺️ 开发路线&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; 基础功能开发&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Web应用发布&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Chrome插件发布&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; 国际化支持&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; 支持系统提示词优化和用户提示词优化&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; 桌面应用发布&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; mcp服务发布&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详细的项目状态可查看 &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/project-status.md"&gt;项目状态文档&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📖 相关文档&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/README.md"&gt;文档索引&lt;/a&gt; - 所有文档的索引&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/developer/technical-development-guide.md"&gt;技术开发指南&lt;/a&gt; - 技术栈和开发规范&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/developer/llm-params-guide.md"&gt;LLM参数配置指南&lt;/a&gt; - 高级LLM参数配置详细说明&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/developer/project-structure.md"&gt;项目结构&lt;/a&gt; - 详细的项目结构说明&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/project/project-status.md"&gt;项目状态&lt;/a&gt; - 当前进度和计划&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/project/prd.md"&gt;产品需求&lt;/a&gt; - 产品需求文档&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/user/deployment/vercel.md"&gt;Vercel部署指南&lt;/a&gt; - Vercel部署详细说明&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;a href="https://star-history.com/#linshenkx/prompt-optimizer&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=linshenkx/prompt-optimizer&amp;amp;type=Date&amp;amp;theme=dark"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=linshenkx/prompt-optimizer&amp;amp;type=Date"&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=linshenkx/prompt-optimizer&amp;amp;type=Date"&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;常见问题&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;点击查看常见问题解答&lt;/summary&gt; 
 &lt;h3&gt;API连接问题&lt;/h3&gt; 
 &lt;h4&gt;Q1: 为什么配置好API密钥后仍然无法连接到模型服务？&lt;/h4&gt; 
 &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: 大多数连接失败是由&lt;strong&gt;跨域问题&lt;/strong&gt;（CORS）导致的。由于本项目是纯前端应用，浏览器出于安全考虑会阻止直接访问不同源的API服务。模型服务如未正确配置CORS策略，会拒绝来自浏览器的直接请求。&lt;/p&gt; 
 &lt;h4&gt;Q2: 如何解决本地Ollama的连接问题？&lt;/h4&gt; 
 &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Ollama完全支持OpenAI标准接口，只需配置正确的跨域策略：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;设置环境变量 &lt;code&gt;OLLAMA_ORIGINS=*&lt;/code&gt; 允许任意来源的请求&lt;/li&gt; 
  &lt;li&gt;如仍有问题，设置 &lt;code&gt;OLLAMA_HOST=0.0.0.0:11434&lt;/code&gt; 监听任意IP地址&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h4&gt;Q3: 如何解决商业API（如Nvidia的DS API、字节跳动的火山API）的跨域问题？&lt;/h4&gt; 
 &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: 这些平台通常有严格的跨域限制，推荐以下解决方案：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;使用Vercel代理&lt;/strong&gt;（便捷方案）&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;使用在线版本：&lt;a href="https://prompt.always200.com"&gt;prompt.always200.com&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;或自行部署到Vercel平台&lt;/li&gt; 
    &lt;li&gt;在模型设置中勾选"使用Vercel代理"选项&lt;/li&gt; 
    &lt;li&gt;请求流向：浏览器→Vercel→模型服务提供商&lt;/li&gt; 
    &lt;li&gt;详细步骤请参考 &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/docs/user/deployment/vercel.md"&gt;Vercel部署指南&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;使用自部署的API中转服务&lt;/strong&gt;（可靠方案）&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;部署如OneAPI等开源API聚合/代理工具&lt;/li&gt; 
    &lt;li&gt;在设置中配置为自定义API端点&lt;/li&gt; 
    &lt;li&gt;请求流向：浏览器→中转服务→模型服务提供商&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h4&gt;Q4: Vercel代理有什么缺点或风险？&lt;/h4&gt; 
 &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: 使用Vercel代理可能会触发某些模型服务提供商的风控机制。部分厂商可能会将来自Vercel的请求判定为代理行为，从而限制或拒绝服务。如遇此问题，建议使用自部署的中转服务。&lt;/p&gt; 
 &lt;h4&gt;Q5: 我已正确配置本地模型（如Ollama）的跨域策略，为什么使用在线版依然无法连接？&lt;/h4&gt; 
 &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: 这是由浏览器的&lt;strong&gt;混合内容（Mixed Content）安全策略&lt;/strong&gt;导致的。出于安全考虑，浏览器会阻止安全的HTTPS页面（如在线版）向不安全的HTTP地址（如您的本地Ollama服务）发送请求。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;： 为了绕过此限制，您需要让应用和API处于同一种协议下（例如，都是HTTP）。推荐以下几种方式：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;使用桌面版&lt;/strong&gt;：桌面应用没有浏览器限制，是连接本地模型最稳定可靠的方式。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;docker部署&lt;/strong&gt;：docker部署也是http&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;使用Chrome插件&lt;/strong&gt;：插件在某些情况下也可以绕过部分安全限制。&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h2&gt;🤝 参与贡献&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;点击查看贡献指南&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Fork 本仓库&lt;/li&gt; 
  &lt;li&gt;创建特性分支 (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;提交更改 (&lt;code&gt;git commit -m '添加某个特性'&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;推送到分支 (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;提交 Pull Request&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;提示：使用cursor工具开发时，建议在提交前:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;使用"code_review"规则进行代码审查&lt;/li&gt; 
  &lt;li&gt;按照审查报告格式检查: 
   &lt;ul&gt; 
    &lt;li&gt;变更的整体一致性&lt;/li&gt; 
    &lt;li&gt;代码质量和实现方式&lt;/li&gt; 
    &lt;li&gt;测试覆盖情况&lt;/li&gt; 
    &lt;li&gt;文档完善程度&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;根据审查结果进行优化后再提交&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h2&gt;👏 贡献者名单&lt;/h2&gt; 
&lt;p&gt;感谢所有为项目做出贡献的开发者！&lt;/p&gt; 
&lt;a href="https://github.com/linshenkx/prompt-optimizer/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=linshenkx/prompt-optimizer" alt="贡献者"&gt; &lt;/a&gt; 
&lt;h2&gt;📄 开源协议&lt;/h2&gt; 
&lt;p&gt;本项目采用 &lt;a href="https://raw.githubusercontent.com/linshenkx/prompt-optimizer/develop/LICENSE"&gt;MIT&lt;/a&gt; 协议开源。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;如果这个项目对你有帮助，请考虑给它一个 Star ⭐️&lt;/p&gt; 
&lt;h2&gt;👥 联系我们&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;提交 Issue&lt;/li&gt; 
 &lt;li&gt;发起 Pull Request&lt;/li&gt; 
 &lt;li&gt;加入讨论组&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>devlikeapro/waha</title>
      <link>https://github.com/devlikeapro/waha</link>
      <description>&lt;p&gt;WAHA - WhatsApp HTTP API (REST API) that you can configure in a click! 3 engines: WEBJS (browser based), NOWEB (websocket nodejs), GOWS (websocket go)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WAHA&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/devlikeapro/waha/core/logo.png" style="border-radius: 50%" width="150"&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WAHA&lt;/strong&gt; - &lt;strong&gt;W&lt;/strong&gt;hats&lt;strong&gt;A&lt;/strong&gt;pp &lt;strong&gt;H&lt;/strong&gt;TTP &lt;strong&gt;A&lt;/strong&gt;PI (REST API) that you can install on your own server and run in less than 5 minutes!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hub.docker.com/r/devlikeapro/waha"&gt;&lt;img src="https://img.shields.io/docker/pulls/devlikeapro/waha" alt="Docker Pulls"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation: &lt;a href="https://waha.devlike.pro/"&gt;https://waha.devlike.pro/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dashboard Example: &lt;a href="https://waha.devlike.pro/dashboard"&gt;https://waha.devlike.pro/dashboard&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Swagger Example: &lt;a href="https://waha.devlike.pro/swagger"&gt;https://waha.devlike.pro/swagger&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Tables of Contents&lt;/h1&gt; 
&lt;!-- toc --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#quick-start"&gt;Quick start&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#send-your-first-message"&gt;Send your first message&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#1-download-image"&gt;1. Download image&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#2-run-whatsapp-http-api"&gt;2. Run WhatsApp HTTP API&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#3-start-a-new-session"&gt;3. Start a new session&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#4-get-and-scan-qr"&gt;4. Get and scan QR&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#5-get-the-screenshot"&gt;5. Get the screenshot&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#6-send-a-text-message"&gt;6. Send a text message&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#what-is-next"&gt;What is next?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#development"&gt;Development&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/#start-the-project"&gt;Start the project&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- tocstop --&gt; 
&lt;h1&gt;Quick start&lt;/h1&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Only thing that you must have - installed docker. Please follow the original instruction &lt;a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener"&gt;how to install docker -&amp;gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When you are ready - come back and follows the below steps to send the first text message to WhatsApp via HTTP API!&lt;/p&gt; 
&lt;h2&gt;Send your first message&lt;/h2&gt; 
&lt;p&gt;Let's go over steps that allow you to send your first text message via WhatsApp HTTP API!&lt;/p&gt; 
&lt;h3&gt;1. Download image&lt;/h3&gt; 
&lt;p&gt;Assuming you have installed &lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt;, let's download the image.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull devlikeapro/waha
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker login -u devlikeapro -p {KEY}
docker pull devlikeapro/waha-plus
docker logout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read more about how to get &lt;code&gt;PASSWORD&lt;/code&gt; for &lt;a href="https://waha.devlike.pro/docs/how-to/waha-plus/"&gt;&lt;strong&gt;➕ WAHA Plus&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;2. Run WhatsApp HTTP API&lt;/h3&gt; 
&lt;p&gt;Run WhatsApp HTTP API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -it --rm -p 3000:3000/tcp --name waha devlikeapro/waha

# It prints logs and the last line must be
# WhatsApp HTTP API is running on: http://[::1]:3000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open the link in your browser &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; and you'll see API documentation (Swagger).&lt;/p&gt; 
&lt;h3&gt;3. Start a new session&lt;/h3&gt; 
&lt;p&gt;To start a new session you should have your mobile phone with installed WhatsApp application close to you.&lt;/p&gt; 
&lt;p&gt;Please go and read how what we'll need to a bit later: &lt;a href="https://faq.whatsapp.com/381777293328336/?helpref=hc_fnav" target="_blank"&gt; How to log in - the instruction on WhatsApp site &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;When your ready - find &lt;code&gt;POST /api/sessions&lt;/code&gt;, click on &lt;strong&gt;Try it out&lt;/strong&gt;, then &lt;strong&gt;Execute&lt;/strong&gt; a bit below.&lt;/p&gt; 
&lt;p&gt;The example payload:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": "default"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By using the request with &lt;code&gt;name&lt;/code&gt; values you can start multiple session (WhatsApp accounts) inside the single docker container in Plus&lt;/p&gt; 
&lt;h3&gt;4. Get and scan QR&lt;/h3&gt; 
&lt;p&gt;Find &lt;code&gt;GET /api/screenshot&lt;/code&gt; and execute it, it shows you QR code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Scan the QR with your cell phone's WhatsApp app.&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;5. Get the screenshot&lt;/h3&gt; 
&lt;p&gt;Execute &lt;code&gt;GET /api/screenshot&lt;/code&gt; after a few seconds after scanning the QR - it'll show you the screenshot of you Whatsapp instance. If you can get the actual screenshot - then you're ready to start sending messages!&lt;/p&gt; 
&lt;h3&gt;6. Send a text message&lt;/h3&gt; 
&lt;p&gt;Let's send a text message - find &lt;code&gt;POST /api/sendText&lt;/code&gt; in &lt;a href="http://localhost:3000/"&gt;swagger&lt;/a&gt; and change &lt;code&gt;chatId&lt;/code&gt; this way: use a phone international phone number without &lt;code&gt;+&lt;/code&gt; symbol and add &lt;code&gt;@c.us&lt;/code&gt; at the end.&lt;/p&gt; 
&lt;p&gt;For phone number &lt;code&gt;12132132131&lt;/code&gt; the &lt;code&gt;chatId&lt;/code&gt; is &lt;code&gt;12132132131@c.us&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The example payload:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "chatId": "12132132130@c.us",
  "text": "Hi there!",
  "session": "default"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also, you can use &lt;code&gt;curl&lt;/code&gt; and send POST request like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Phone without +
export PHONE=12132132130
curl -d "{\"chatId\": \"${PHONE}@c.us\", \"text\": \"Hello from WhatsApp HTTP API\" }" -H "Content-Type: application/json" -X POST http://localhost:3000/api/sendText
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;What is next?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://waha.devlike.pro/docs/overview/introduction/"&gt;Go and read the full documentation!&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;h2&gt;Start the project&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository&lt;/li&gt; 
 &lt;li&gt;Make sure you're using node&amp;gt;=22 (check &lt;a href="https://raw.githubusercontent.com/devlikeapro/waha/core/.nvmrc"&gt;.nvmrc&lt;/a&gt; to get the version)&lt;/li&gt; 
 &lt;li&gt;Run the following commands:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install dependencies
yarn install
# Fetch and compile proto files
yarn gows:proto
# Run
yarn start
# open http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>outline/outline</title>
      <link>https://github.com/outline/outline</link>
      <description>&lt;p&gt;The fastest knowledge base for growing teams. Beautiful, realtime collaborative, feature packed, and markdown compatible.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://user-images.githubusercontent.com/31465/34380645-bd67f474-eb0b-11e7-8d03-0151c1730654.png" height="29"&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt;A fast, collaborative, knowledge base for your team built using React and Node.js.&lt;br&gt;Try out Outline using our hosted version at &lt;a href="https://www.getoutline.com"&gt;www.getoutline.com&lt;/a&gt;.&lt;/i&gt; &lt;br&gt; &lt;img width="1640" alt="screenshot" src="https://user-images.githubusercontent.com/380914/110356468-26374600-7fef-11eb-9f6a-f2cc2c8c6590.png"&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://circleci.com/gh/outline/outline" rel="nofollow"&gt;&lt;img src="https://circleci.com/gh/outline/outline.svg?style=shield"&gt;&lt;/a&gt; &lt;a href="http://www.typescriptlang.org" rel="nofollow"&gt;&lt;img src="https://img.shields.io/badge/%3C%2F%3E-TypeScript-%230074c1.svg?sanitize=true" alt="TypeScript"&gt;&lt;/a&gt; &lt;a href="https://github.com/prettier/prettier"&gt;&lt;img src="https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat" alt="Prettier"&gt;&lt;/a&gt; &lt;a href="https://github.com/styled-components/styled-components"&gt;&lt;img src="https://img.shields.io/badge/style-%F0%9F%92%85%20styled--components-orange.svg?sanitize=true" alt="Styled Components"&gt;&lt;/a&gt; &lt;a href="https://translate.getoutline.com/project/outline" alt="Localized"&gt;&lt;img src="https://badges.crowdin.net/outline/localized.svg?sanitize=true"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;This is the source code that runs &lt;a href="https://www.getoutline.com"&gt;&lt;strong&gt;Outline&lt;/strong&gt;&lt;/a&gt; and all the associated services. If you want to use Outline then you don't need to run this code, we offer a hosted version of the app at &lt;a href="https://www.getoutline.com"&gt;getoutline.com&lt;/a&gt;. You can also find documentation on using Outline in &lt;a href="https://docs.getoutline.com/s/guide"&gt;our guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you'd like to run your own copy of Outline or contribute to development then this is the place for you.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;Please see the &lt;a href="https://docs.getoutline.com/s/hosting/"&gt;documentation&lt;/a&gt; for running your own copy of Outline in a production configuration.&lt;/p&gt; 
&lt;p&gt;If you have questions or improvements for the docs please create a thread in &lt;a href="https://github.com/outline/outline/discussions"&gt;GitHub discussions&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;p&gt;There is a short guide for &lt;a href="https://docs.getoutline.com/s/hosting/doc/local-development-5hEhFRXow7"&gt;setting up a development environment&lt;/a&gt; if you wish to contribute changes, fixes, and improvements to Outline.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Outline is built and maintained by a small team – we'd love your help to fix bugs and add features!&lt;/p&gt; 
&lt;p&gt;Before submitting a pull request &lt;em&gt;please&lt;/em&gt; discuss with the core team by creating or commenting in an issue on &lt;a href="https://www.github.com/outline/outline/issues"&gt;GitHub&lt;/a&gt; – we'd also love to hear from you in the &lt;a href="https://www.github.com/outline/outline/discussions"&gt;discussions&lt;/a&gt;. This way we can ensure that an approach is agreed on before code is written. This will result in a much higher likelihood of your code being accepted.&lt;/p&gt; 
&lt;p&gt;If you’re looking for ways to get started, here's a list of ways to help us improve Outline:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/outline/outline/main/docs/TRANSLATION.md"&gt;Translation&lt;/a&gt; into other languages&lt;/li&gt; 
 &lt;li&gt;Issues with &lt;a href="https://github.com/outline/outline/labels/good%20first%20issue"&gt;&lt;code&gt;good first issue&lt;/code&gt;&lt;/a&gt; label&lt;/li&gt; 
 &lt;li&gt;Performance improvements, both on server and frontend&lt;/li&gt; 
 &lt;li&gt;Developer happiness and documentation&lt;/li&gt; 
 &lt;li&gt;Bugs and other issues listed on GitHub&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;If you're interested in contributing or learning more about the Outline codebase please refer to the &lt;a href="https://raw.githubusercontent.com/outline/outline/main/docs/ARCHITECTURE.md"&gt;architecture document&lt;/a&gt; first for a high level overview of how the application is put together.&lt;/p&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;p&gt;In development Outline outputs simple logging to the console, prefixed by categories. In production it outputs JSON logs, these can be easily parsed by your preferred log ingestion pipeline.&lt;/p&gt; 
&lt;p&gt;HTTP logging is disabled by default, but can be enabled by setting the &lt;code&gt;DEBUG=http&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;We aim to have sufficient test coverage for critical parts of the application and aren't aiming for 100% unit test coverage. All API endpoints and anything authentication related should be thoroughly tested.&lt;/p&gt; 
&lt;p&gt;To add new tests, write your tests with &lt;a href="https://facebook.github.io/jest/"&gt;Jest&lt;/a&gt; and add a file with &lt;code&gt;.test.js&lt;/code&gt; extension next to the tested code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# To run all tests
make test

# To run backend tests in watch mode
make watch
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the test database is created with &lt;code&gt;make test&lt;/code&gt; you may individually run frontend and backend tests directly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# To run backend tests
yarn test:server

# To run a specific backend test
yarn test:server myTestFile

# To run frontend tests
yarn test:app
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Migrations&lt;/h2&gt; 
&lt;p&gt;Sequelize is used to create and run migrations, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;yarn sequelize migration:generate --name my-migration
yarn sequelize db:migrate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or to run migrations on test database:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;yarn sequelize db:migrate --env test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Activity&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/ff2e4e6918afff1acf9deb72d1ba6b071d586178.svg?sanitize=true" alt="Alt" title="Repobeats analytics image"&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Outline is &lt;a href="https://raw.githubusercontent.com/outline/outline/main/LICENSE"&gt;BSL 1.1 licensed&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>