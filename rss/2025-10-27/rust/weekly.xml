<rss version="2.0">
  <channel>
    <title>GitHub Rust Weekly Trending</title>
    <description>Weekly Trending of Rust in GitHub</description>
    <pubDate>Sun, 26 Oct 2025 01:48:43 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>servo/servo</title>
      <link>https://github.com/servo/servo</link>
      <description>&lt;p&gt;Servo aims to empower developers with a lightweight, high-performance alternative for embedding web technologies in applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Servo Parallel Browser Engine Project&lt;/h1&gt; 
&lt;p&gt;Servo is a prototype web browser engine written in the &lt;a href="https://github.com/rust-lang/rust"&gt;Rust&lt;/a&gt; language. It is currently developed on 64-bit macOS, 64-bit Linux, 64-bit Windows, 64-bit OpenHarmony, and Android.&lt;/p&gt; 
&lt;p&gt;Servo welcomes contribution from everyone. Check out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://book.servo.org"&gt;Servo Book&lt;/a&gt; for documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://servo.org/"&gt;servo.org&lt;/a&gt; for news and guides&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Coordination of Servo development happens:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Here in the Github Issues&lt;/li&gt; 
 &lt;li&gt;On the &lt;a href="https://servo.zulipchat.com/"&gt;Servo Zulip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;In video calls advertised in the &lt;a href="https://github.com/servo/project/issues"&gt;Servo Project&lt;/a&gt; repo.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;For more detailed build instructions, see the Servo book under &lt;a href="https://book.servo.org/hacking/setting-up-your-environment.html"&gt;Setting up your environment&lt;/a&gt;, &lt;a href="https://book.servo.org/hacking/building-servo.html"&gt;Building Servo&lt;/a&gt;, &lt;a href="https://book.servo.org/hacking/building-for-android.html"&gt;Building for Android&lt;/a&gt; and &lt;a href="https://book.servo.org/hacking/building-for-openharmony.html"&gt;Building for OpenHarmony&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download and install &lt;a href="https://developer.apple.com/xcode/"&gt;Xcode&lt;/a&gt; and &lt;a href="https://brew.sh/"&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt;: &lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;rustup&lt;/code&gt;: &lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;./mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;curl&lt;/code&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Arch: &lt;code&gt;sudo pacman -S --needed curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Debian, Ubuntu: &lt;code&gt;sudo apt install curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Fedora: &lt;code&gt;sudo dnf install curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Gentoo: &lt;code&gt;sudo emerge net-misc/curl&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt;: &lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;rustup&lt;/code&gt;: &lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;./mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download &lt;a href="https://docs.astral.sh/uv/getting-started/installation/#standalone-installer"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://chocolatey.org/install#individual"&gt;&lt;code&gt;choco&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://win.rustup.rs/"&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Be sure to select &lt;em&gt;Quick install via the Visual Studio Community installer&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;In the Visual Studio Installer, ensure the following components are installed: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Windows 10/11 SDK (anything &amp;gt;= 10.0.19041.0)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.Windows{10, 11}SDK.{&amp;gt;=19041}&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;MSVC v143 - VS 2022 C++ x64/x86 build tools (Latest)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.Tools.x86.x64&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;C++ ATL for latest v143 build tools (x86 &amp;amp; x64)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.ATL&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;.\mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;.\mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Android&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure that the following environment variables are set: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ANDROID_NDK_ROOT&lt;/code&gt;: &lt;code&gt;$ANDROID_SDK_ROOT/ndk/28.2.13676358/&lt;/code&gt; &lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt; can be any directory (such as &lt;code&gt;~/android-sdk&lt;/code&gt;). All of the Android build dependencies will be installed there.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install the latest version of the &lt;a href="https://developer.android.com/studio#command-tools"&gt;Android command-line tools&lt;/a&gt; to &lt;code&gt;$ANDROID_SDK_ROOT/cmdline-tools/latest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Run the following command to install the necessary components: &lt;pre&gt;&lt;code class="language-shell"&gt;sudo $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install \
 "build-tools;34.0.0" \
 "emulator" \
 "ndk;28.2.13676358" \
 "platform-tools" \
 "platforms;android-33" \
 "system-images;android-33;google_apis;x86_64"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Follow the instructions above for the platform you are building on&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;OpenHarmony&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow the instructions above for the platform you are building on to prepare the environment.&lt;/li&gt; 
 &lt;li&gt;Depending on the target distribution (e.g. &lt;code&gt;HarmonyOS NEXT&lt;/code&gt; vs pure &lt;code&gt;OpenHarmony&lt;/code&gt;) the build configuration will differ slightly.&lt;/li&gt; 
 &lt;li&gt;Ensure that the following environment variables are set 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DEVECO_SDK_HOME&lt;/code&gt; (Required when targeting &lt;code&gt;HarmonyOS NEXT&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;OHOS_BASE_SDK_HOME&lt;/code&gt; (Required when targeting &lt;code&gt;OpenHarmony&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;OHOS_SDK_NATIVE&lt;/code&gt; (e.g. &lt;code&gt;${DEVECO_SDK_HOME}/default/openharmony/native&lt;/code&gt; or &lt;code&gt;${OHOS_BASE_SDK_HOME}/${API_VERSION}/native&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;SERVO_OHOS_SIGNING_CONFIG&lt;/code&gt;: Path to json file containing a valid signing configuration for the demo app.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Review the detailed instructions at &lt;a href="https://book.servo.org/hacking/building-for-openharmony.html"&gt;Building for OpenHarmony&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The target distribution can be modified by passing &lt;code&gt;--flavor=&amp;lt;default|harmonyos&amp;gt;&lt;/code&gt; to &lt;code&gt;mach &amp;lt;build|package|install&amp;gt;&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>abenz1267/walker</title>
      <link>https://github.com/abenz1267/walker</link>
      <description>&lt;p&gt;Multi-Purpose Launcher with a lot of features. Highly Customizable and fast.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Walker - A Modern Application Launcher&lt;/h1&gt; 
&lt;p&gt;A fast, customizable application launcher built with GTK4 and Rust, designed for Linux desktop environments. Walker provides a clean, modern interface for launching applications, running commands, performing calculations, and more.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://benz.gitbook.io/walker/"&gt;GitBook Documentation/Wiki&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/mGQWBQHASt"&gt;&lt;img src="https://img.shields.io/discord/1402235361463242964?logo=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://www.gnu.org/licenses/gpl-3.0"&gt;&lt;img src="https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true" alt="License: GPL v3" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/abenz1267/walker/refs/heads/master/resources/screenshot.png" alt="screenshot" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The following Elephant providers are implemented by default:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Desktop Applications&lt;/strong&gt;: Launch installed GUI applications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Calculator&lt;/strong&gt;: Perform mathematical calculations with &lt;code&gt;=&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;File Browser&lt;/strong&gt;: Navigate and open files with &lt;code&gt;/&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Command Runner&lt;/strong&gt;: Execute shell commands&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Websearch&lt;/strong&gt;: Search the web with custom-defined engines&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Clipboard History&lt;/strong&gt;: Access clipboard history with &lt;code&gt;:&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Symbol Picker&lt;/strong&gt;: Insert special symbols with &lt;code&gt;.&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Provider List&lt;/strong&gt;: Switch between providers with &lt;code&gt;;&lt;/code&gt; prefix&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Menu Integration&lt;/strong&gt;: Create custom menus with elephant and let walker display them&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dmenu&lt;/strong&gt;: Your good old dmenu ... with seamless menus!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Arch Linux Packages&lt;/strong&gt;: Search through available packages (official and aur), install or delete a target! List all exlusively installed packages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Todo List&lt;/strong&gt;: create simple todo items with basic time tracking, scheduling and notifications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bluetooth&lt;/strong&gt;: basic bluetooth management&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Build from Source&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone the repository
git clone https://github.com/abenz1267/walker.git
cd walker

# Build with Cargo
cargo build --release

# Run Walker
./target/release/walker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;GTK4 (version 4.6+)&lt;/li&gt; 
 &lt;li&gt;gtk4-layer-shell&lt;/li&gt; 
 &lt;li&gt;Protocol Buffers compiler&lt;/li&gt; 
 &lt;li&gt;cairo&lt;/li&gt; 
 &lt;li&gt;poppler-glib&lt;/li&gt; 
 &lt;li&gt;make sure &lt;a href="https://github.com/abenz1267/elephant"&gt;elephant&lt;/a&gt; is running before starting Walker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;h3&gt; Install using Nix &lt;/h3&gt; &lt;/summary&gt; 
 &lt;h4&gt;1. Add flake inputs&lt;/h4&gt; 
 &lt;p&gt;Add walker and elephant to the inputs of your configs &lt;code&gt;flake.nix&lt;/code&gt; and set walker to follow elephant&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;elephant.url = "github:abenz1267/elephant";

walker = {
  url = "github:abenz1267/walker";
  inputs.elephant.follows = "elephant";
};
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;2. Install walker&lt;/h4&gt; 
 &lt;p&gt;You have 3 options for installing walker.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Option A&lt;/strong&gt; (Home Manager Module): Import the home-manager module to your home-manager config and enable walker.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;imports = [inputs.walker.homeManagerModules.default];

programs.walker.enable = true;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Option B&lt;/strong&gt; (NixOS Module): Import the nixos module in your NixOS config and enable walker&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;imports = [inputs.walker.nixosModules.default];

programs.walker.enable = true;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Note: this option doesn't support the &lt;code&gt;runAsService&lt;/code&gt; option; It is recommended that you launch the elephant and walker services using your desktop instead.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Option C&lt;/strong&gt; (Package): Add &lt;code&gt;inputs.walker.packages.&amp;lt;system&amp;gt;.default&lt;/code&gt; to your system packages or home-manager packages. replace &lt;code&gt;&amp;lt;system&amp;gt;&lt;/code&gt; with your system architecture. Note: This option doesn't support configuration using nix.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;home.packages = [inputs.walker.packages.&amp;lt;system&amp;gt;.default];
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;environment.systemPackages = [inputs.walker.packages.&amp;lt;system&amp;gt;.default];
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;3. Configure walker&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;programs.walker = {
  enable = true;
  runAsService = true; # Note: this option isn't supported in the NixOS module only in the home-manager module

  # All options from the config.toml can be used here https://github.com/abenz1267/walker/blob/master/resources/config.toml
  config = {
    theme = "your theme name";
    placeholders."default" = { input = "Search"; list = "Example"; };
    providers.prefixes = [
      {provider = "websearch"; prefix = "+";}
      {provider = "providerlist"; prefix = "_";}
    ];
    keybinds.quick_activate = ["F1" "F2" "F3"];
  };
  
  # Set `programs.walker.config.theme="your theme name"` to choose the default theme
  themes = {
    "your theme name" = {
      # Check out the default css theme as an example https://github.com/abenz1267/walker/blob/master/resources/themes/default/style.css
      style = " /* css */ ";

      # Check out the default layouts for examples https://github.com/abenz1267/walker/tree/master/resources/themes/default
      layouts = {
        "layout" = " &amp;lt;!-- xml --&amp;gt; ";
        "item_calc" = " &amp;lt;!-- xml --&amp;gt; ";
        # other provider layouts
      };
    };
    "other theme name" = {
        # ...
    };
    # more themes
  };
};
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Optionally, there is 2 binary caches which can be used by adding the following to you config:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;nix.settings = {
  extra-substituters = ["https://walker.cachix.org" "https://walker-git.cachix.org"];
  extra-trusted-public-keys = ["walker.cachix.org-1:fG8q+uAaMqhsMxWjwvk0IMb4mFPFLqHjuvfwQxE4oJM=" "walker-git.cachix.org-1:vmC0ocfPWh0S/vRAQGtChuiZBTAe4wiKDeyyXM0/7pM="];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Basic Usage&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Make sure &lt;code&gt;elephant&lt;/code&gt; is running and you have providers installed. &lt;code&gt;elephant-providerlist&lt;/code&gt; and f.e. &lt;code&gt;elephant-desktopapplications&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Launch Walker with &lt;code&gt;walker&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In order to improve startup performance, run a Walker service with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;walker --gapplication-service
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the service is running, you can either open Walker with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;walker
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or for an even faster launch make a socket call, f.e. with &lt;code&gt;openbsd-netcat&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nc -U /run/user/1000/walker/walker.sock
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The downside of the socket call is that it does not handle any commandline options, so it's just a faster alternative to a simple &lt;code&gt;walker&lt;/code&gt; call.&lt;/p&gt; 
&lt;h2&gt;Keybinds&lt;/h2&gt; 
&lt;p&gt;The following modifier keys are valid: &lt;code&gt;ctrl&lt;/code&gt;, &lt;code&gt;alt&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To get a full list of possible key values, look here: &lt;a href="https://github.com/gtk-rs/gtk4-rs/raw/0.9/gdk4/sys/src/lib.rs#L302"&gt;GDK key-values&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;F.e. &lt;code&gt;pub const GDK_KEY_semicolon: c_int = 59;&lt;/code&gt; means that &lt;code&gt;ctrl semicolon&lt;/code&gt; would be a valid keybind.&lt;/p&gt; 
&lt;h2&gt;Config&lt;/h2&gt; 
&lt;p&gt;Configuration should be done in &lt;code&gt;~/.config/walker&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://raw.githubusercontent.com/abenz1267/walker/refs/heads/master/resources/config.toml"&gt;default config&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Theming&lt;/h2&gt; 
&lt;p&gt;You can customize Walker's appearance by creating a custom theme. Checkout &lt;code&gt;resources/themes/default&lt;/code&gt; for the default theme. Themes inherit the default theme by default, so if you just want to change the CSS, you can just create &lt;code&gt;themes/yours/style.css&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can customize rendering of list items for each provider individually, f.e. "item_files.xml" will define the layout for items sourced from the &lt;code&gt;files&lt;/code&gt; provider.&lt;/p&gt; 
&lt;p&gt;Please refer to &lt;a href="https://docs.gtk.org/gtk4/"&gt;the GTK4 docs&lt;/a&gt; to checkout how to write &lt;code&gt;*.xml&lt;/code&gt; files for GTK4.&lt;/p&gt; 
&lt;p&gt;You can set the default theme in your &lt;code&gt;config.toml&lt;/code&gt; f.e. &lt;code&gt;theme = "yours"&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please do not make PRs to fix single typos. Fix all or nothing.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the GNU General Public License v3.0 - see the &lt;a href="https://raw.githubusercontent.com/abenz1267/walker/master/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tokio-rs/axum</title>
      <link>https://github.com/tokio-rs/axum</link>
      <description>&lt;p&gt;Ergonomic and modular web framework built with Tokio, Tower, and Hyper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;axum&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a web application framework that focuses on ergonomics and modularity.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/tokio-rs/axum/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/axum"&gt;&lt;img src="https://img.shields.io/crates/v/axum" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/axum"&gt;&lt;img src="https://docs.rs/axum/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;More information about this crate can be found in the &lt;a href="https://docs.rs/axum"&gt;crate documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;High level features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Route requests to handlers with a macro free API.&lt;/li&gt; 
 &lt;li&gt;Declaratively parse requests using extractors.&lt;/li&gt; 
 &lt;li&gt;Simple and predictable error handling model.&lt;/li&gt; 
 &lt;li&gt;Generate responses with minimal boilerplate.&lt;/li&gt; 
 &lt;li&gt;Take full advantage of the &lt;a href="https://crates.io/crates/tower"&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/tower-http"&gt;&lt;code&gt;tower-http&lt;/code&gt;&lt;/a&gt; ecosystem of middleware, services, and utilities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In particular the last point is what sets &lt;code&gt;axum&lt;/code&gt; apart from other frameworks. &lt;code&gt;axum&lt;/code&gt; doesn't have its own middleware system but instead uses &lt;a href="https://docs.rs/tower/latest/tower/trait.Service.html"&gt;&lt;code&gt;tower::Service&lt;/code&gt;&lt;/a&gt;. This means &lt;code&gt;axum&lt;/code&gt; gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://crates.io/crates/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;⚠ Breaking changes ⚠&lt;/h2&gt; 
&lt;p&gt;We are currently working towards axum 0.9 so the &lt;code&gt;main&lt;/code&gt; branch contains breaking changes. See the &lt;a href="https://github.com/tokio-rs/axum/tree/v0.8.x"&gt;&lt;code&gt;0.8.x&lt;/code&gt;&lt;/a&gt; branch for what's released to crates.io.&lt;/p&gt; 
&lt;h2&gt;Usage example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use axum::{
    routing::{get, post},
    http::StatusCode,
    Json, Router,
};
use serde::{Deserialize, Serialize};

#[tokio::main]
async fn main() {
    // initialize tracing
    tracing_subscriber::fmt::init();

    // build our application with a route
    let app = Router::new()
        // `GET /` goes to `root`
        .route("/", get(root))
        // `POST /users` goes to `create_user`
        .route("/users", post(create_user));

    // run our app with hyper, listening globally on port 3000
    let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();
    axum::serve(listener, app).await.unwrap();
}

// basic handler that responds with a static string
async fn root() -&amp;gt; &amp;amp;'static str {
    "Hello, World!"
}

async fn create_user(
    // this argument tells axum to parse the request body
    // as JSON into a `CreateUser` type
    Json(payload): Json&amp;lt;CreateUser&amp;gt;,
) -&amp;gt; (StatusCode, Json&amp;lt;User&amp;gt;) {
    // insert your application logic here
    let user = User {
        id: 1337,
        username: payload.username,
    };

    // this will be converted into a JSON response
    // with a status code of `201 Created`
    (StatusCode::CREATED, Json(user))
}

// the input to our `create_user` handler
#[derive(Deserialize)]
struct CreateUser {
    username: String,
}

// the output to our `create_user` handler
#[derive(Serialize)]
struct User {
    id: u64,
    username: String,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find this &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples/readme"&gt;example&lt;/a&gt; as well as other example projects in the &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;example directory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://docs.rs/axum"&gt;crate documentation&lt;/a&gt; for way more examples.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a relatively thin layer on top of &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; and adds very little overhead. So &lt;code&gt;axum&lt;/code&gt;'s performance is comparable to &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;. You can find benchmarks &lt;a href="https://github.com/programatik29/rust-web-benchmarks"&gt;here&lt;/a&gt; and &lt;a href="https://web-frameworks-benchmark.netlify.app/result?l=rust"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Safety&lt;/h2&gt; 
&lt;p&gt;This crate uses &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; to ensure everything is implemented in 100% safe Rust.&lt;/p&gt; 
&lt;h2&gt;Minimum supported Rust version&lt;/h2&gt; 
&lt;p&gt;axum's MSRV is 1.78.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;examples&lt;/a&gt; folder contains various examples of how to use &lt;code&gt;axum&lt;/code&gt;. The &lt;a href="https://docs.rs/axum"&gt;docs&lt;/a&gt; also provide lots of code snippets and examples. For full-fledged examples, check out community-maintained &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase"&gt;showcases&lt;/a&gt; or &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials"&gt;tutorials&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;In the &lt;code&gt;axum&lt;/code&gt;'s repo we also have a &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;number of examples&lt;/a&gt; showing how to put everything together. Community-maintained &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase"&gt;showcases&lt;/a&gt; and &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials"&gt;tutorials&lt;/a&gt; also demonstrate how to use &lt;code&gt;axum&lt;/code&gt; for real-world applications. You're also welcome to ask in the &lt;a href="https://discord.gg/tokio"&gt;Discord channel&lt;/a&gt; or open a &lt;a href="https://github.com/tokio-rs/axum/discussions/new?category=q-a"&gt;discussion&lt;/a&gt; with your question.&lt;/p&gt; 
&lt;h2&gt;Community projects&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md"&gt;here&lt;/a&gt; for a list of community maintained crates and projects built with &lt;code&gt;axum&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;🎈 Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href="https://github.com/tokio-rs/axum/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to help you get involved in the &lt;code&gt;axum&lt;/code&gt; project.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://github.com/tokio-rs/axum/raw/main/axum/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in &lt;code&gt;axum&lt;/code&gt; by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tokio-rs/tokio</title>
      <link>https://github.com/tokio-rs/tokio</link>
      <description>&lt;p&gt;A runtime for writing reliable asynchronous applications with Rust. Provides I/O, networking, scheduling, timers, ...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tokio&lt;/h1&gt; 
&lt;p&gt;A runtime for writing reliable, asynchronous, and slim applications with the Rust programming language. It is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Tokio's zero-cost abstractions give you bare-metal performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Tokio leverages Rust's ownership, type system, and concurrency model to reduce bugs and ensure thread safety.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Tokio has a minimal footprint, and handles backpressure and cancellation naturally.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/tokio"&gt;&lt;img src="https://img.shields.io/crates/v/tokio.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tokio-rs/tokio/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tokio-rs/tokio/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://github.com/tokio-rs/tokio/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/tokio"&gt;&lt;img src="https://img.shields.io/discord/500028886025895936.svg?logo=discord&amp;amp;style=flat-square" alt="Discord chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://tokio.rs"&gt;Website&lt;/a&gt; | &lt;a href="https://tokio.rs/tokio/tutorial"&gt;Guides&lt;/a&gt; | &lt;a href="https://docs.rs/tokio/latest/tokio"&gt;API Docs&lt;/a&gt; | &lt;a href="https://discord.gg/tokio"&gt;Chat&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A multithreaded, work-stealing based task &lt;a href="https://docs.rs/tokio/latest/tokio/runtime/index.html"&gt;scheduler&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;A reactor backed by the operating system's event queue (epoll, kqueue, IOCP, etc.).&lt;/li&gt; 
 &lt;li&gt;Asynchronous &lt;a href="https://docs.rs/tokio/latest/tokio/net/index.html"&gt;TCP and UDP&lt;/a&gt; sockets.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These components provide the runtime components necessary for building an asynchronous application.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;A basic TCP echo server with Tokio.&lt;/p&gt; 
&lt;p&gt;Make sure you activated the full features of the tokio crate on Cargo.toml:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
tokio = { version = "1.48.0", features = ["full"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, on your main.rs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust,no_run"&gt;use tokio::net::TcpListener;
use tokio::io::{AsyncReadExt, AsyncWriteExt};

#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let listener = TcpListener::bind("127.0.0.1:8080").await?;

    loop {
        let (mut socket, _) = listener.accept().await?;

        tokio::spawn(async move {
            let mut buf = [0; 1024];

            // In a loop, read data from the socket and write the data back.
            loop {
                let n = match socket.read(&amp;amp;mut buf).await {
                    // socket closed
                    Ok(0) =&amp;gt; return,
                    Ok(n) =&amp;gt; n,
                    Err(e) =&amp;gt; {
                        eprintln!("failed to read from socket; err = {:?}", e);
                        return;
                    }
                };

                // Write the data back
                if let Err(e) = socket.write_all(&amp;amp;buf[0..n]).await {
                    eprintln!("failed to write to socket; err = {:?}", e);
                    return;
                }
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More examples can be found &lt;a href="https://github.com/tokio-rs/tokio/tree/master/examples"&gt;here&lt;/a&gt;. For a larger "real world" example, see the &lt;a href="https://github.com/tokio-rs/mini-redis/"&gt;mini-redis&lt;/a&gt; repository.&lt;/p&gt; 
&lt;p&gt;To see a list of the available features flags that can be enabled, check our &lt;a href="https://docs.rs/tokio/#feature-flags"&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;First, see if the answer to your question can be found in the &lt;a href="https://tokio.rs/tokio/tutorial"&gt;Guides&lt;/a&gt; or the &lt;a href="https://docs.rs/tokio/latest/tokio"&gt;API documentation&lt;/a&gt;. If the answer is not there, there is an active community in the &lt;a href="https://discord.gg/tokio"&gt;Tokio Discord server&lt;/a&gt;. We would be happy to try to answer your question. You can also ask your question on &lt;a href="https://github.com/tokio-rs/tokio/discussions"&gt;the discussions page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;🎈&lt;/span&gt; Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href="https://github.com/tokio-rs/tokio/raw/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to help you get involved in the Tokio project.&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;In addition to the crates in this repository, the Tokio project also maintains several other libraries, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum"&gt;&lt;code&gt;axum&lt;/code&gt;&lt;/a&gt;: A web application framework that focuses on ergonomics and modularity.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/hyperium/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;: A fast and correct HTTP/1.1 and HTTP/2 implementation for Rust.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/hyperium/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;: A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/seanmonstar/warp"&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt;: A super-easy, composable, web server framework for warp speeds.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tower-rs/tower"&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt;: A library of modular and reusable components for building robust networking clients and servers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/tracing"&gt;&lt;code&gt;tracing&lt;/code&gt;&lt;/a&gt; (formerly &lt;code&gt;tokio-trace&lt;/code&gt;): A framework for application-level tracing and async-aware diagnostics.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/mio"&gt;&lt;code&gt;mio&lt;/code&gt;&lt;/a&gt;: A low-level, cross-platform abstraction over OS I/O APIs that powers &lt;code&gt;tokio&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/bytes"&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;: Utilities for working with bytes, including efficient byte buffers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/loom"&gt;&lt;code&gt;loom&lt;/code&gt;&lt;/a&gt;: A testing tool for concurrent Rust code.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;The Tokio repository contains multiple crates. Each crate has its own changelog.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tokio&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-util&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-util/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-stream&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-stream/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-macros&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-macros/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-test&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-test/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Rust Versions&lt;/h2&gt; 
&lt;!--
When updating this, also update:
- .github/workflows/ci.yml
- CONTRIBUTING.md
- README.md
- tokio/README.md
- tokio/Cargo.toml
- tokio-util/Cargo.toml
- tokio-test/Cargo.toml
- tokio-stream/Cargo.toml
--&gt; 
&lt;p&gt;Tokio will keep a rolling MSRV (minimum supported rust version) policy of &lt;strong&gt;at least&lt;/strong&gt; 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.71.&lt;/p&gt; 
&lt;p&gt;Note that the MSRV is not increased automatically, and only as part of a minor release. The MSRV history for past minor releases can be found below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;1.48 to now - Rust 1.71&lt;/li&gt; 
 &lt;li&gt;1.39 to 1.47 - Rust 1.70&lt;/li&gt; 
 &lt;li&gt;1.30 to 1.38 - Rust 1.63&lt;/li&gt; 
 &lt;li&gt;1.27 to 1.29 - Rust 1.56&lt;/li&gt; 
 &lt;li&gt;1.17 to 1.26 - Rust 1.49&lt;/li&gt; 
 &lt;li&gt;1.15 to 1.16 - Rust 1.46&lt;/li&gt; 
 &lt;li&gt;1.0 to 1.14 - Rust 1.45&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that although we try to avoid the situation where a dependency transitively increases the MSRV of Tokio, we do not guarantee that this does not happen. However, every minor release will have some set of versions of dependencies that works with the MSRV of that minor release.&lt;/p&gt; 
&lt;h2&gt;Release schedule&lt;/h2&gt; 
&lt;p&gt;Tokio doesn't follow a fixed release schedule, but we typically make one minor release each month. We make patch releases for bugfixes as necessary.&lt;/p&gt; 
&lt;h2&gt;Bug patching policy&lt;/h2&gt; 
&lt;p&gt;For the purposes of making patch releases with bugfixes, we have designated certain minor releases as LTS (long term support) releases. Whenever a bug warrants a patch release with a fix for the bug, it will be backported and released as a new patch release for each LTS minor version. Our current LTS releases are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;1.43.x&lt;/code&gt; - LTS release until March 2026. (MSRV 1.70)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.47.x&lt;/code&gt; - LTS release until September 2026. (MSRV 1.70)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each LTS release will continue to receive backported fixes for at least a year. If you wish to use a fixed minor release in your project, we recommend that you use an LTS release.&lt;/p&gt; 
&lt;p&gt;To use a fixed minor version, you can specify the version with a tilde. For example, to specify that you wish to use the newest &lt;code&gt;1.43.x&lt;/code&gt; patch release, you can use the following dependency specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;tokio = { version = "~1.43", features = [...] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Previous LTS releases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;1.8.x&lt;/code&gt; - LTS release until February 2022.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.14.x&lt;/code&gt; - LTS release until June 2022.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.18.x&lt;/code&gt; - LTS release until June 2023.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.20.x&lt;/code&gt; - LTS release until September 2023.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.25.x&lt;/code&gt; - LTS release until March 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.32.x&lt;/code&gt; - LTS release until September 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.36.x&lt;/code&gt; - LTS release until March 2025.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.38.x&lt;/code&gt; - LTS release until July 2025.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://github.com/tokio-rs/tokio/raw/master/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tokio by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>boa-dev/boa</title>
      <link>https://github.com/boa-dev/boa</link>
      <description>&lt;p&gt;Boa is an embeddable Javascript engine written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Boa&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;a href="https://boajs.dev/"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="./assets/logo_yellow.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="./assets/logo_black.svg" /&gt; 
   &lt;img alt="Boa logo" src="https://raw.githubusercontent.com/boa-dev/boa/main/assets/logo.png" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Boa is an experimental JavaScript lexer, parser and interpreter written in Rust 🦀, it has support for &lt;strong&gt;more&lt;/strong&gt; than 90% of the latest ECMAScript specification. We continuously improve the conformance to keep up with the ever-evolving standard.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/boa-dev/boa/actions/workflows/rust.yml?query=event%3Apush+branch%3Amain"&gt;&lt;img src="https://github.com/boa-dev/boa/actions/workflows/rust.yml/badge.svg?event=push&amp;amp;branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/boa-dev/boa"&gt;&lt;img src="https://codecov.io/gh/boa-dev/boa/branch/main/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/boa_engine"&gt;&lt;img src="https://img.shields.io/crates/v/boa_engine.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/boa_engine"&gt;&lt;img src="https://docs.rs/boa_engine/badge.svg?sanitize=true" alt="Docs.rs" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/tUFFk9Y"&gt;&lt;img src="https://img.shields.io/discord/595323158140158003?logo=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/#boa:matrix.org"&gt;&lt;img src="https://img.shields.io/matrix/boa:matrix.org?logo=matrix" alt="Matrix" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;⚡️ Live Demo (WASM)&lt;/h2&gt; 
&lt;p&gt;Try out the engine now at the live WASM playground &lt;a href="https://boajs.dev/playground"&gt;here&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;Prefer a CLI? Feel free to try out &lt;code&gt;boa_cli&lt;/code&gt;!&lt;/p&gt; 
&lt;h2&gt;📦 Crates&lt;/h2&gt; 
&lt;p&gt;Boa currently publishes and actively maintains the following crates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;boa_ast&lt;/code&gt;&lt;/strong&gt; - Boa's ECMAScript Abstract Syntax Tree&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;boa_cli&lt;/code&gt;&lt;/strong&gt; - Boa's CLI &amp;amp;&amp;amp; REPL implementation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;boa_engine&lt;/code&gt;&lt;/strong&gt; - Boa's implementation of ECMAScript builtin objects and execution&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;boa_gc&lt;/code&gt;&lt;/strong&gt; - Boa's garbage collector&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;boa_interner&lt;/code&gt;&lt;/strong&gt; - Boa's string interner&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;boa_parser&lt;/code&gt;&lt;/strong&gt; - Boa's lexer and parser&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;boa_icu_provider&lt;/code&gt;&lt;/strong&gt; - Boa's ICU4X data provider&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;boa_runtime&lt;/code&gt;&lt;/strong&gt; - Boa's WebAPI features&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;boa_string&lt;/code&gt;&lt;/strong&gt; - Boa's ECMAScript string implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;tag_ptr&lt;/code&gt;&lt;/strong&gt; - Utility library that enables a pointer to be associated with a tag of type &lt;code&gt;usize&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;Boa&lt;/code&gt; and &lt;code&gt;boa_unicode&lt;/code&gt; crates are deprecated.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;🚀 Example&lt;/h2&gt; 
&lt;p&gt;To start using Boa simply add the &lt;code&gt;boa_engine&lt;/code&gt; crate to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
boa_engine = "0.21.0"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then in &lt;code&gt;main.rs&lt;/code&gt;, copy the below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use boa_engine::{Context, Source, JsResult};

fn main() -&amp;gt; JsResult&amp;lt;()&amp;gt; {
  let js_code = r#"
      let two = 1 + 1;
      let definitely_not_four = two + "2";

      definitely_not_four
  "#;

  // Instantiate the execution context
  let mut context = Context::default();

  // Parse the source code
  let result = context.eval(Source::from_bytes(js_code))?;

  println!("{}", result.display());

  Ok(())
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, all that's left to do is &lt;code&gt;cargo run&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Congrats! You've executed your first JavaScript code using Boa!&lt;/p&gt; 
&lt;h2&gt;🔎 Documentation&lt;/h2&gt; 
&lt;p&gt;For more information on Boa's API, feel free to check out our documentation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.rs/boa_engine/latest/boa_engine/"&gt;&lt;strong&gt;API Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🏅 Conformance&lt;/h2&gt; 
&lt;p&gt;To know more details about Boa's conformance surrounding the &lt;em&gt;ECMAScript&lt;/em&gt; specification, you can check out our &lt;em&gt;ECMASCript Test262&lt;/em&gt; test suite results &lt;a href="https://boajs.dev/conformance"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🪚 Contributing&lt;/h2&gt; 
&lt;p&gt;Please, check the &lt;a href="https://raw.githubusercontent.com/boa-dev/boa/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file to know how to contribute in the project. You will need Rust installed and an editor. We have some configurations ready for VSCode.&lt;/p&gt; 
&lt;h3&gt;🐛 Debugging&lt;/h3&gt; 
&lt;p&gt;Check &lt;a href="https://raw.githubusercontent.com/boa-dev/boa/main/docs/debugging.md"&gt;debugging.md&lt;/a&gt; for more info on debugging.&lt;/p&gt; 
&lt;h3&gt;🕸 Web Assembly&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;This only applies to &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target, &lt;code&gt;WASI&lt;/code&gt; and &lt;code&gt;Emscripten&lt;/code&gt; target variants are handled automatically.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enable the &lt;code&gt;js&lt;/code&gt; feature flag.&lt;/li&gt; 
 &lt;li&gt;Set &lt;code&gt;RUSTFLAGS='--cfg getrandom_backend="wasm_js"'&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;rustflags&lt;/code&gt; can also be set by adding a &lt;code&gt;.cargo/config.toml&lt;/code&gt; file in the project root directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[target.wasm32-unknown-unknown]
rustflags = '--cfg getrandom_backend="wasm_js"'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information see: &lt;a href="https://docs.rs/getrandom/latest/getrandom/index.html#webassembly-support"&gt;&lt;code&gt;getrandom&lt;/code&gt; WebAssembly Support&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;⚙️ Usage&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone this repo.&lt;/li&gt; 
 &lt;li&gt;Run with &lt;code&gt;cargo run -- test.js&lt;/code&gt; in the project root directory where &lt;code&gt;test.js&lt;/code&gt; is a path to an existing JS file with any valid JS code.&lt;/li&gt; 
 &lt;li&gt;If any JS doesn't work then it's a bug. Please raise an &lt;a href="https://github.com/boa-dev/boa/issues/"&gt;issue&lt;/a&gt;!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Example&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/boa-dev/boa/main/docs/img/latestDemo.gif" alt="Example" /&gt;&lt;/p&gt; 
&lt;h3&gt;Command-line Options&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-txt"&gt;Usage: boa [OPTIONS] [FILE]...

Arguments:
  [FILE]...  The JavaScript file(s) to be evaluated

Options:
      --strict                        Run in strict mode
  -a, --dump-ast [&amp;lt;FORMAT&amp;gt;]           Dump the AST to stdout with the given format [possible values: debug, json, json-pretty]
  -t, --trace                         Dump the AST to stdout with the given format
      --vi                            Use vi mode in the REPL
  -O, --optimize
      --optimizer-statistics
      --flowgraph [&amp;lt;FORMAT&amp;gt;]          Generate instruction flowgraph. Default is Graphviz [possible values: graphviz, mermaid]
      --flowgraph-direction &amp;lt;FORMAT&amp;gt;  Specifies the direction of the flowgraph. Default is top-top-bottom [possible values: top-to-bottom, bottom-to-top, left-to-right, right-to-left]
      --debug-object                  Inject debugging object `$boa`
  -m, --module                        Treats the input files as modules
  -r, --root &amp;lt;ROOT&amp;gt;                   Root path from where the module resolver will try to load the modules [default: .]
  -h, --help                          Print help (see more with '--help')
  -V, --version                       Print version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🧭 Roadmap&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/boa-dev/boa/milestones"&gt;Milestones&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📊 Benchmarks&lt;/h2&gt; 
&lt;p&gt;The current benchmarks are taken from v8's benchmark that you can find &lt;a href="https://github.com/boa-dev/data/tree/benchmarks/bench"&gt;here&lt;/a&gt;. You can also view the results of nightly benchmark runs comparing Boa with other JavaScript engines &lt;a href="https://boajs.dev/benchmarks"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you wish to run the benchmarks locally, then run Boa in release using the &lt;code&gt;combined.js&lt;/code&gt; script which contains all the sub-benchmarks in the &lt;code&gt;bench-v8&lt;/code&gt; directory.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo run --release -p boa_cli -- bench-v8/combined.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;If you'd like to run only a subset of the benchmarks, you can modify the &lt;code&gt;Makefile&lt;/code&gt; located in the &lt;a href="https://github.com/boa-dev/data/tree/benchmarks/bench"&gt;&lt;code&gt;bench-v8&lt;/code&gt; directory&lt;/a&gt;. Comment out the benchmarks you don't want to include, then run &lt;code&gt;make&lt;/code&gt;. After that, you can run Boa using the same command as above.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;🧠 Profiling&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/boa-dev/boa/main/docs/profiling.md"&gt;Profiling&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📆 Changelog&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/boa-dev/boa/main/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;💬 Communication&lt;/h2&gt; 
&lt;p&gt;Feel free to contact us on &lt;a href="https://matrix.to/#/#boa:matrix.org"&gt;Matrix&lt;/a&gt; if you have any questions. Contributor discussions take place on the same Matrix Space if you're interested in contributing. We also have a &lt;a href="https://discord.gg/tUFFk9Y"&gt;Discord&lt;/a&gt; for any questions or issues.&lt;/p&gt; 
&lt;h2&gt;⚖️ License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/boa-dev/boa/main/LICENSE-UNLICENSE"&gt;Unlicense&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/boa-dev/boa/main/LICENSE-MIT"&gt;MIT&lt;/a&gt; licenses, at your option.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>clockworklabs/SpacetimeDB</title>
      <link>https://github.com/clockworklabs/SpacetimeDB</link>
      <description>&lt;p&gt;Multiplayer at the speed of light&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://spacetimedb.com#gh-dark-mode-only" target="_blank"&gt; &lt;img width="320" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/dark/logo.svg?sanitize=true" alt="SpacetimeDB Logo" /&gt; &lt;/a&gt; &lt;a href="https://spacetimedb.com#gh-light-mode-only" target="_blank"&gt; &lt;img width="320" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/light/logo.svg?sanitize=true" alt="SpacetimeDB Logo" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://spacetimedb.com#gh-dark-mode-only" target="_blank"&gt; &lt;img width="250" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/dark/logo-text.svg?sanitize=true" alt="SpacetimeDB" /&gt; &lt;/a&gt; &lt;a href="https://spacetimedb.com#gh-light-mode-only" target="_blank"&gt; &lt;img width="250" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/light/logo-text.svg?sanitize=true" alt="SpacetimeDB" /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;h3 align="center"&gt; Multiplayer at the speed of light. &lt;/h3&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/clockworklabs/spacetimedb"&gt;&lt;img src="https://img.shields.io/github/v/release/clockworklabs/spacetimedb?color=%23ff00a0&amp;amp;include_prereleases&amp;amp;label=version&amp;amp;sort=semver&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/clockworklabs/spacetimedb"&gt;&lt;img src="https://img.shields.io/badge/built_with-Rust-dca282.svg?style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/clockworklabs/spacetimedb/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/clockworklabs/spacetimedb/ci.yml?style=flat-square&amp;amp;branch=master" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://status.spacetimedb.com"&gt;&lt;img src="https://img.shields.io/uptimerobot/ratio/7/m784409192-e472ca350bb615372ededed7?label=cloud%20uptime&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://hub.docker.com/r/clockworklabs/spacetimedb"&gt;&lt;img src="https://img.shields.io/docker/pulls/clockworklabs/spacetimedb?style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/clockworklabs/spacetimedb/raw/master/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/badge/license-BSL_1.1-00bfff.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://crates.io/crates/spacetimedb"&gt;&lt;img src="https://img.shields.io/crates/d/spacetimedb?color=e45928&amp;amp;label=Rust%20Crate&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.nuget.org/packages/SpacetimeDB.Runtime"&gt;&lt;img src="https://img.shields.io/nuget/dt/spacetimedb.runtime?color=0b6cff&amp;amp;label=NuGet%20Package&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.gg/spacetimedb"&gt;&lt;img src="https://img.shields.io/discord/1037340874172014652?label=discord&amp;amp;style=flat-square&amp;amp;color=5a66f6" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/spacetime_db"&gt;&lt;img src="https://img.shields.io/badge/twitter-Follow_us-1d9bf0.svg?style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://clockworklabs.io/join"&gt;&lt;img src="https://img.shields.io/badge/careers-Join_us-86f7b7.svg?style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.linkedin.com/company/clockworklabs/"&gt;&lt;img src="https://img.shields.io/badge/linkedin-Connect_with_us-0a66c2.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.gg/spacetimedb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/discord.svg?sanitize=true" alt="Discord" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/spacetime_db"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/twitter.svg?sanitize=true" alt="Twitter" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/clockworklabs/spacetimedb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/github.svg?sanitize=true" alt="GitHub" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitch.tv/SpacetimeDB"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/twitch.svg?sanitize=true" alt="Twitch" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://youtube.com/@SpacetimeDB"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/youtube.svg?sanitize=true" alt="YouTube" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.linkedin.com/company/clockwork-labs/"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/linkedin.svg?sanitize=true" alt="LinkedIn" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://stackoverflow.com/questions/tagged/spacetimedb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/stackoverflow.svg?sanitize=true" alt="StackOverflow" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;What is &lt;a href="https://spacetimedb.com"&gt;SpacetimeDB&lt;/a&gt;?&lt;/h2&gt; 
&lt;p&gt;You can think of SpacetimeDB as both a database and server combined into one.&lt;/p&gt; 
&lt;p&gt;It is a relational database system that lets you upload your application logic directly into the database by way of fancy stored procedures called "modules."&lt;/p&gt; 
&lt;p&gt;Instead of deploying a web or game server that sits in between your clients and your database, your clients connect directly to the database and execute your application logic inside the database itself. You can write all of your permission and authorization logic right inside your module just as you would in a normal server.&lt;/p&gt; 
&lt;p&gt;This means that you can write your entire application in a single language, Rust, and deploy it as a single binary. No more microservices, no more containers, no more Kubernetes, no more Docker, no more VMs, no more DevOps, no more infrastructure, no more ops, no more servers.&lt;/p&gt; 
&lt;figure&gt; 
 &lt;img src="https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/basic-architecture-diagram.png" alt="SpacetimeDB Architecture" style="width:100%" /&gt; 
 &lt;figcaption align="center"&gt; 
  &lt;p align="center"&gt;&lt;b&gt;SpacetimeDB application architecture&lt;/b&gt;&lt;br /&gt;&lt;sup&gt;&lt;sub&gt;(elements in white are provided by SpacetimeDB)&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt; 
 &lt;/figcaption&gt; 
&lt;/figure&gt; 
&lt;p&gt;It's actually similar to the idea of smart contracts, except that SpacetimeDB is a database, has nothing to do with blockchain, and is orders of magnitude faster than any smart contract system.&lt;/p&gt; 
&lt;p&gt;So fast, in fact, that the entire backend of our MMORPG &lt;a href="https://bitcraftonline.com"&gt;BitCraft Online&lt;/a&gt; is just a SpacetimeDB module. We don't have any other servers or services running, which means that everything in the game, all of the chat messages, items, resources, terrain, and even the locations of the players are stored and processed by the database before being synchronized out to all of the clients in real-time.&lt;/p&gt; 
&lt;p&gt;SpacetimeDB is optimized for maximum speed and minimum latency rather than batch processing or OLAP workloads. It is designed to be used for real-time applications like games, chat, and collaboration tools.&lt;/p&gt; 
&lt;p&gt;This speed and latency is achieved by holding all of application state in memory, while persisting the data in a write-ahead-log (WAL) which is used to recover application state.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can run SpacetimeDB as a standalone database server via the &lt;code&gt;spacetime&lt;/code&gt; CLI tool. Install instructions for supported platforms are outlined below. The same install instructions can be found on our website at &lt;a href="https://spacetimedb.com/install"&gt;https://spacetimedb.com/install&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Install on macOS&lt;/h4&gt; 
&lt;p&gt;Installing on macOS is as simple as running our install script. After that you can use the spacetime command to manage versions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSf https://install.spacetimedb.com | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Install on Linux&lt;/h4&gt; 
&lt;p&gt;Installing on Linux is as simple as running our install script. After that you can use the spacetime command to manage versions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSf https://install.spacetimedb.com | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Install on Windows&lt;/h4&gt; 
&lt;p&gt;Installing on Windows is as simple as pasting the above snippet into PowerShell. If you would like to use WSL instead, please follow the Linux install instructions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ps1"&gt;iwr https://windows.spacetimedb.com -useb | iex
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installing from Source&lt;/h4&gt; 
&lt;p&gt;A quick note on installing from source: we recommend that you don't install from source unless there is a feature that is available in &lt;code&gt;master&lt;/code&gt; that hasn't been released yet, otherwise follow the official installation instructions.&lt;/p&gt; 
&lt;h5&gt;MacOS + Linux&lt;/h5&gt; 
&lt;p&gt;Installing on macOS + Linux is pretty straightforward. First we are going to build all of the binaries that we need:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install rustup, you can skip this step if you have cargo and the wasm32-unknown-unknown target already installed.
curl https://sh.rustup.rs -sSf | sh
# Clone SpacetimeDB
git clone https://github.com/clockworklabs/SpacetimeDB
# Build and install the CLI
cd SpacetimeDB
cargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli

# Create directories
mkdir -p ~/.local/bin
export STDB_VERSION="$(./target/release/spacetimedb-cli --version | sed -n 's/.*spacetimedb tool version \([0-9.]*\);.*/\1/p')"
mkdir -p ~/.local/share/spacetime/bin/$STDB_VERSION

# Install the update binary
cp target/release/spacetimedb-update ~/.local/bin/spacetime
cp target/release/spacetimedb-cli ~/.local/share/spacetime/bin/$STDB_VERSION
cp target/release/spacetimedb-standalone ~/.local/share/spacetime/bin/$STDB_VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At this stage you'll need to add ~/.local/bin to your path if you haven't already.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Please add the following line to your shell configuration and open a new shell session:
export PATH="$HOME/.local/bin:$PATH"

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then finally set your SpacetimeDB version:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
# Then, in a new shell, set the current version:
spacetime version use $STDB_VERSION

# If STDB_VERSION is not set anymore then you can use the following command to list your versions:
spacetime version list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify that the correct version has been installed via &lt;code&gt;spacetime --version&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Windows&lt;/h5&gt; 
&lt;p&gt;Building on windows is a bit more complicated. You'll need a slightly different version of perl compared to what comes pre-bundled in most Windows terminals. We recommend &lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;. You may also need access to an &lt;code&gt;openssl&lt;/code&gt; binary which actually comes pre-installed with &lt;a href="https://git-scm.com/downloads/win"&gt;Git for Windows&lt;/a&gt;. Also, you'll need to install &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt; for Windows.&lt;/p&gt; 
&lt;p&gt;In a Git for Windows shell you should have something that looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ which perl
/c/Strawberry/perl/bin/perl
$ which openssl
/mingw64/bin/openssl
$ which cargo 
/c/Users/&amp;lt;user&amp;gt;/.cargo/bin/cargo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If that looks correct then you're ready to proceed!&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;# Clone SpacetimeDB
git clone https://github.com/clockworklabs/SpacetimeDB

# Build and install the CLI
cd SpacetimeDB
cargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli

# Create directories
$stdbDir = "$HOME\AppData\Local\SpacetimeDB"
$stdbVersion = &amp;amp; ".\target\release\spacetimedb-cli" --version | Select-String -Pattern 'spacetimedb tool version ([0-9.]+);' | ForEach-Object { $_.Matches.Groups[1].Value }
New-Item -ItemType Directory -Path "$stdbDir\bin\$stdbVersion" -Force | Out-Null

# Install the update binary
Copy-Item "target\release\spacetimedb-update.exe" "$stdbDir\spacetime.exe"
Copy-Item "target\release\spacetimedb-cli.exe" "$stdbDir\bin\$stdbVersion\"
Copy-Item "target\release\spacetimedb-standalone.exe" "$stdbDir\bin\$stdbVersion\"

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now add the directory we just created to your path. We recommend adding it to the system path because then it will be available to all of your applications (including Unity3D). After you do this, restart your shell!&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;%USERPROFILE%\AppData\Local\SpacetimeDB
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then finally, open a new shell and use the installed SpacetimeDB version:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;spacetime version use $stdbVersion

# If stdbVersion is no longer set, list versions using the following command:
spacetime version list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify that the correct version has been installed via &lt;code&gt;spacetime --version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you're using Git for Windows you can follow these instructions instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone SpacetimeDB
git clone https://github.com/clockworklabs/SpacetimeDB
# Build and install the CLI
cd SpacetimeDB
# Build the CLI binaries - this takes a while on windows so go grab a coffee :)
cargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli

# Create directories
export STDB_VERSION="$(./target/release/spacetimedb-cli --version | sed -n 's/.*spacetimedb tool version \([0-9.]*\);.*/\1/p')"
mkdir -p ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION

# Install the update binary
cp target/release/spacetimedb-update ~/AppData/Local/SpacetimeDB/spacetime
cp target/release/spacetimedb-cli ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION
cp target/release/spacetimedb-standalone ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION

# Now add the directory we just created to your path. We recommend adding it to the system path because then it will be available to all of your applications (including Unity3D). After you do this, restart your shell!
# %USERPROFILE%\AppData\Local\SpacetimeDB

# Set the current version
spacetime version use $STDB_VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify that the correct version has been installed via &lt;code&gt;spacetime --version&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Running with Docker&lt;/h4&gt; 
&lt;p&gt;If you prefer to run Spacetime in a container, you can use the following command to start a new instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm --pull always -p 3000:3000 clockworklabs/spacetime start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For more information about SpacetimeDB, getting started guides, game development guides, and reference material please see our &lt;a href="https://spacetimedb.com/docs"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We've prepared several getting started guides in each of our supported languages to help you get up and running with SpacetimeDB as quickly as possible. You can find them on our &lt;a href="https://spacetimedb.com/docs"&gt;docs page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In summary there are only 4 steps to getting started with SpacetimeDB.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the &lt;code&gt;spacetime&lt;/code&gt; CLI tool.&lt;/li&gt; 
 &lt;li&gt;Start a SpacetimeDB standalone node with &lt;code&gt;spacetime start&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Write and upload a module in one of our supported module languages.&lt;/li&gt; 
 &lt;li&gt;Connect to the database with one of our client libraries.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can see a summary of the supported languages below with a link to the getting started guide for each.&lt;/p&gt; 
&lt;h2&gt;Language Support&lt;/h2&gt; 
&lt;p&gt;You can write SpacetimeDB modules in several popular languages, with more to come in the future!&lt;/p&gt; 
&lt;h4&gt;Serverside Libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/modules/rust/quickstart"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/modules/c-sharp/quickstart"&gt;C#&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Client Libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/sdks/rust/quickstart"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/sdks/c-sharp/quickstart"&gt;C#&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://spacetimedb.com/docs/sdks/typescript/quickstart"&gt;Typescript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;SpacetimeDB is licensed under the BSL 1.1 license. This is not an open source or free software license, however, it converts to the AGPL v3.0 license with a linking exception after a few years.&lt;/p&gt; 
&lt;p&gt;Note that the AGPL v3.0 does not typically include a linking exception. We have added a custom linking exception to the AGPL license for SpacetimeDB. Our motivation for choosing a free software license is to ensure that contributions made to SpacetimeDB are propagated back to the community. We are expressly not interested in forcing users of SpacetimeDB to open source their own code if they link with SpacetimeDB, so we needed to include a linking exception.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>oxc-project/oxc</title>
      <link>https://github.com/oxc-project/oxc</link>
      <description>&lt;p&gt;⚓ A collection of JavaScript tools written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="OXC Logo" src="https://cdn.jsdelivr.net/gh/oxc-project/oxc-assets/preview-universal.png" width="700" /&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/oxc-project/oxc/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=event%3Apush+branch%3Amain"&gt;&lt;img src="https://github.com/oxc-project/oxc/actions/workflows/ci.yml/badge.svg?event=push&amp;amp;branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/oxc-project/oxc"&gt;&lt;img src="https://codecov.io/gh/oxc-project/oxc/graph/badge.svg?token=FVHEH0BQLJ" alt="Code Coverage" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/oxc-project/oxc"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="CodSpeed Badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sponsors/Boshen"&gt;&lt;img src="https://img.shields.io/github/sponsors/Boshen" alt="Sponsors" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/9uXCAwqQZW"&gt;&lt;img src="https://img.shields.io/discord/1079625926024900739?logo=discord&amp;amp;label=Discord" alt="Discord chat" /&gt;&lt;/a&gt; &lt;a href="https://playground.oxc.rs/"&gt;&lt;img src="https://img.shields.io/badge/Playground-blue?color=9BE4E0" alt="Playground" /&gt;&lt;/a&gt; &lt;a href="https://oxc.rs"&gt;&lt;img src="https://img.shields.io/badge/Website-blue" alt="Website" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;⚓ Oxc&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;/oʊ ɛks siː/&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;The Oxidation Compiler is a collection of high-performance tools for JavaScript and TypeScript written in Rust.&lt;/p&gt; 
&lt;p&gt;Oxc is part of &lt;a href="https://voidzero.dev/"&gt;VoidZero&lt;/a&gt;'s vision for a unified, high-performance toolchain for JavaScript. It powers &lt;a href="https://rolldown.rs"&gt;Rolldown&lt;/a&gt; (&lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt;'s future bundler) and enables the next generation of ultra-fast development tools that work seamlessly together.&lt;/p&gt; 
&lt;p&gt;For more information, check out our website at &lt;a href="https://oxc.rs"&gt;oxc.rs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;* Oxidation is the chemical process that creates rust&lt;/sub&gt;&lt;/p&gt; 
&lt;h2&gt;🏗️ Design Principles&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Through rigorous performance engineering.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Correctness&lt;/strong&gt;: Through conformance testing to standards and similar projects.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Developer Experience&lt;/strong&gt;: Clear APIs, comprehensive documentation, and sensible configuration.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modular composability&lt;/strong&gt;: Use individual components independently or compose them into complete toolchains.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about our &lt;a href="https://oxc.rs/docs/learn/architecture"&gt;architecture&lt;/a&gt; and &lt;a href="https://oxc.rs/docs/learn/performance"&gt;performance philosophy&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📦 Tools &amp;amp; Packages&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;npm&lt;/th&gt; 
   &lt;th&gt;crates.io&lt;/th&gt; 
   &lt;th&gt;Downloads&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linter&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/oxlint"&gt;oxlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/npm/dw/oxlint" alt="npm" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Formatter&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/oxfmt"&gt;oxfmt&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/npm/dw/oxfmt" alt="npm" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Parser&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/oxc-parser"&gt;oxc-parser&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/oxc_parser"&gt;oxc_parser&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/npm/dw/oxc-parser" alt="npm" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Transformer&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/oxc-transform"&gt;oxc-transform&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/oxc_transformer"&gt;oxc_transformer&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/npm/dw/oxc-transform" alt="npm" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Minifier&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/oxc-minify"&gt;oxc-minify&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/oxc_minifier"&gt;oxc_minifier&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/npm/dw/oxc-minify" alt="npm" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Resolver&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/oxc-resolver"&gt;oxc-resolver&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/oxc_resolver"&gt;oxc_resolver&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/npm/dw/oxc-resolver" alt="npm" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;See &lt;a href="https://oxc.rs/docs/guide/usage"&gt;documentation&lt;/a&gt; for detailed usage guides for each tool.&lt;/p&gt; 
&lt;h2&gt;⚡️ Quick Start&lt;/h2&gt; 
&lt;h3&gt;Linter&lt;/h3&gt; 
&lt;p&gt;The production-ready linter catches mistakes for you with sensible defaults and optional configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx oxlint@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To give you an idea of its capabilities, here is an example from the &lt;a href="https://github.com/microsoft/vscode"&gt;vscode&lt;/a&gt; repository, which finishes linting 4800+ files in 0.7 seconds:&lt;/p&gt; 
&lt;p float="left" align="left"&gt; &lt;img src="https://cdn.jsdelivr.net/gh/oxc-project/oxc-assets/linter-screenshot.png" width="60%" /&gt; &lt;/p&gt; 
&lt;p&gt;→ &lt;a href="https://oxc.rs/docs/guide/usage/linter/cli.html"&gt;oxlint documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Formatter&lt;/h3&gt; 
&lt;p&gt;Fast, opinionated code formatter compatible with &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx oxfmt@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;→ &lt;a href="https://oxc.rs/docs/guide/usage/formatter"&gt;Formatter documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Parser (Node.js)&lt;/h3&gt; 
&lt;p&gt;The fastest JavaScript/TypeScript parser written in Rust:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install oxc-parser
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import { parseSync } from 'oxc-parser';
const result = parseSync('const x = 1;');
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;→ &lt;a href="https://oxc.rs/docs/guide/usage/parser"&gt;Parser documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Transformer (Node.js)&lt;/h3&gt; 
&lt;p&gt;TypeScript, React, and modern JavaScript transformation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install oxc-transform
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import { transform } from 'oxc-transform';
const result = transform('source.tsx', code, { typescript: true });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;→ &lt;a href="https://oxc.rs/docs/guide/usage/transformer"&gt;Transformer documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Minifier (Node.js)&lt;/h3&gt; 
&lt;p&gt;High-performance JavaScript minifier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install oxc-minify
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import { minify } from 'oxc-minify';
const result = minify(code, { mangle: true });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;→ &lt;a href="https://oxc.rs/docs/guide/usage/minifier"&gt;Minifier documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Rust&lt;/h3&gt; 
&lt;p&gt;Individual crates are published for building your own JavaScript tools:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
oxc = "0.x"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;→ &lt;a href="https://docs.rs/oxc"&gt;Rust documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;VoidZero Inc.&lt;/h2&gt; 
&lt;p&gt;Oxc is a project of &lt;a href="https://voidzero.dev/"&gt;VoidZero&lt;/a&gt;, see our announcement &lt;a href="https://voidzero.dev/blog"&gt;Announcing VoidZero - Next Generation Toolchain for JavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have requirements for JavaScript tools at scale, please &lt;a href="https://forms.gle/WQgjyzYJpwurpxWKA"&gt;get in touch&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;🙋 Who's using Oxc?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://rolldown.rs"&gt;Rolldown&lt;/a&gt; and &lt;a href="https://nuxt.com/"&gt;Nuxt&lt;/a&gt; use Oxc for parsing. &lt;a href="https://rolldown.rs"&gt;Rolldown&lt;/a&gt; also uses Oxc for transformation and minification. &lt;a href="https://trynova.dev/"&gt;Nova&lt;/a&gt;, &lt;a href="https://github.com/swc-project/swc-node"&gt;swc-node&lt;/a&gt;, and &lt;a href="https://github.com/webpro/knip"&gt;knip&lt;/a&gt; use &lt;a href="https://docs.rs/oxc_resolver"&gt;oxc_resolver&lt;/a&gt; for module resolution. &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt;, &lt;a href="https://shopify.com/"&gt;Shopify&lt;/a&gt;, &lt;a href="https://www.bytedance.com/"&gt;ByteDance&lt;/a&gt;, and &lt;a href="https://shopee.com/"&gt;Shopee&lt;/a&gt; use oxlint for linting.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://oxc.rs/docs/guide/projects.html"&gt;See more projects using Oxc →&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;✍️ Contribute&lt;/h2&gt; 
&lt;p&gt;Check out some of the &lt;a href="https://github.com/oxc-project/oxc/contribute"&gt;good first issues&lt;/a&gt; or ask us on &lt;a href="https://discord.gg/9uXCAwqQZW"&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for guidance, or read the complete &lt;a href="https://oxc.rs/docs/contribute"&gt;contributing guide on our website →&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you are unable to contribute by code, you can still participate by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add a &lt;a href="https://github.com/oxc-project/oxc/stargazers"&gt;GitHub Star&lt;/a&gt; to the project&lt;/li&gt; 
 &lt;li&gt;Join us on &lt;a href="https://discord.gg/9uXCAwqQZW"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/boshen_c"&gt;Follow me on X&lt;/a&gt; and post about this project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤝 Credits&lt;/h2&gt; 
&lt;p&gt;This project was incubated with the assistance of these exceptional mentors and their projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://biomejs.dev/"&gt;Biome&lt;/a&gt; - &lt;a href="https://github.com/ematipico"&gt;@ematipico&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://beta.ruff.rs"&gt;Ruff&lt;/a&gt; - &lt;a href="https://github.com/charliermarsh"&gt;@charliermarsh&lt;/a&gt;, &lt;a href="https://github.com/MichaReiser"&gt;@MichaReiser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quick-lint/quick-lint-js"&gt;quick-lint-js&lt;/a&gt; - &lt;a href="https://github.com/strager"&gt;@strager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://package.elm-lang.org/packages/jfmengels/elm-review/latest"&gt;elm-review&lt;/a&gt; - &lt;a href="https://github.com/jfmengels"&gt;@jfmengels&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Special thanks go to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/domonji"&gt;@domonji&lt;/a&gt; for bootstrapping this project together and also completing the TypeScript parser&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tongtong-lu"&gt;@tongtong-lu&lt;/a&gt; and &lt;a href="https://github.com/guan-wy"&gt;@guan-wy&lt;/a&gt; for designing the &lt;a href="https://github.com/oxc-project/oxc-assets"&gt;project logo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;❤ Who's &lt;a href="https://github.com/sponsors/Boshen"&gt;Sponsoring Oxc&lt;/a&gt;?&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/sponsors/Boshen"&gt; &lt;img src="https://raw.githubusercontent.com/Boshen/sponsors/main/sponsors.svg?sanitize=true" alt="My sponsors" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;📖 License&lt;/h2&gt; 
&lt;p&gt;Oxc is free and open-source software licensed under the &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Oxc ports or copies code from other open source projects, their licenses are listed in &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/THIRD-PARTY-LICENSE"&gt;&lt;strong&gt;Third-party library licenses&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>meilisearch/meilisearch</title>
      <link>https://github.com/meilisearch/meilisearch</link>
      <description>&lt;p&gt;A lightning-fast search engine API bringing AI-powered hybrid search to your sites and applications.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-light.svg?sanitize=true#gh-light-mode-only" /&gt; &lt;/a&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-dark.svg?sanitize=true#gh-dark-mode-only" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h4 align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Website&lt;/a&gt; | &lt;a href="https://roadmap.meilisearch.com/tabs/1-under-consideration"&gt;Roadmap&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/pricing?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Meilisearch Cloud&lt;/a&gt; | &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Blog&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Documentation&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs/faq?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;FAQ&lt;/a&gt; | &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Discord&lt;/a&gt; &lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://deps.rs/repo/github/meilisearch/meilisearch"&gt;&lt;img src="https://deps.rs/repo/github/meilisearch/meilisearch/status.svg?sanitize=true" alt="Dependency status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-informational" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/queue"&gt;&lt;img alt="Merge Queues enabled" src="https://img.shields.io/badge/Merge_Queues-enabled-%2357cf60?logo=github" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;⚡ A lightning-fast search engine that fits effortlessly into your apps, websites, and workflow 🔍&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=intro"&gt;Meilisearch&lt;/a&gt; helps you shape a delightful search experience in a snap, offering features that work out of the box to speed up your workflow.&lt;/p&gt; 
&lt;p align="center" name="demo"&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-light.gif#gh-light-mode-only" alt="A bright colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-dark.gif#gh-dark-mode-only" alt="A dark colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;🖥 Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=organization"&gt;&lt;strong&gt;Movies&lt;/strong&gt;&lt;/a&gt; — An application to help you find streaming platforms to watch movies using &lt;a href="https://www.meilisearch.com/solutions/hybrid-search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;hybrid search&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ecommerce.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Ecommerce&lt;/strong&gt;&lt;/a&gt; — Ecommerce website using disjunctive &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;facets&lt;/a&gt;, range and rating filtering, and pagination.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://music.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Songs&lt;/strong&gt;&lt;/a&gt; — Search through 47 million of songs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://saas.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;SaaS&lt;/strong&gt;&lt;/a&gt; — Search for contacts, deals, and companies in this &lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;multi-tenant&lt;/a&gt; CRM application.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the list of all our example apps in our &lt;a href="https://github.com/meilisearch/demos"&gt;demos repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hybrid search:&lt;/strong&gt; Combine the best of both &lt;a href="https://www.meilisearch.com/docs/learn/experimental/vector_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;semantic&lt;/a&gt; &amp;amp; full-text search to get the most relevant results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Search-as-you-type:&lt;/strong&gt; Find &amp;amp; display results in less than 50 milliseconds to provide an intuitive experience&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/typo_tolerance_settings?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Typo tolerance&lt;/a&gt;:&lt;/strong&gt; get relevant matches even when queries contain typos and misspellings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Filtering&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;faceted search&lt;/a&gt;:&lt;/strong&gt; enhance your users' search experience with custom filters and build a faceted search interface in a few lines of code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Sorting&lt;/a&gt;:&lt;/strong&gt; sort results based on price, date, or pretty much anything else your users need&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/synonyms?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Synonym support&lt;/a&gt;:&lt;/strong&gt; configure synonyms to include more relevant content in your search results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Geosearch&lt;/a&gt;:&lt;/strong&gt; filter and sort documents based on geographic data&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/language?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Extensive language support&lt;/a&gt;:&lt;/strong&gt; search datasets in any language, with optimized support for Chinese, Japanese, Hebrew, and languages using the Latin alphabet&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Security management&lt;/a&gt;:&lt;/strong&gt; control which users can access what data with API keys that allow fine-grained permissions handling&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Multi-Tenancy&lt;/a&gt;:&lt;/strong&gt; personalize search results for any number of application tenants&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly Customizable:&lt;/strong&gt; customize Meilisearch to your specific needs or use our out-of-the-box and hassle-free presets&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;RESTful API&lt;/a&gt;:&lt;/strong&gt; integrate Meilisearch in your technical stack with our plugins and SDKs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI-ready:&lt;/strong&gt; works out of the box with &lt;a href="https://www.meilisearch.com/with/langchain"&gt;langchain&lt;/a&gt; and the &lt;a href="https://github.com/meilisearch/meilisearch-mcp"&gt;model context protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy to install, deploy, and maintain&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;You can consult Meilisearch's documentation at &lt;a href="https://www.meilisearch.com/docs/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=docs"&gt;meilisearch.com/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🚀 Getting started&lt;/h2&gt; 
&lt;p&gt;For basic instructions on how to set up Meilisearch, add documents to an index, and search for documents, take a look at our &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=get-started"&gt;documentation&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;🌍 Supercharge your Meilisearch experience&lt;/h2&gt; 
&lt;p&gt;Say goodbye to server deployment and manual updates with &lt;a href="https://www.meilisearch.com/cloud?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch"&gt;Meilisearch Cloud&lt;/a&gt;. Additional features include analytics &amp;amp; monitoring in many regions around the world. No credit card is required.&lt;/p&gt; 
&lt;h2&gt;🧰 SDKs &amp;amp; integration tools&lt;/h2&gt; 
&lt;p&gt;Install one of our SDKs in your project for seamless integration between Meilisearch and your favorite language or framework!&lt;/p&gt; 
&lt;p&gt;Take a look at the complete &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-link"&gt;Meilisearch integration list&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-logos"&gt;&lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/integrations.png" alt="Logos belonging to different languages and frameworks supported by Meilisearch, including React, Ruby on Rails, Go, Rust, and PHP" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;⚙️ Advanced usage&lt;/h2&gt; 
&lt;p&gt;Experienced users will want to keep our &lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API Reference&lt;/a&gt; close at hand.&lt;/p&gt; 
&lt;p&gt;We also offer a wide range of dedicated guides to all Meilisearch features, such as &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;filtering&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;sorting&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;geosearch&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API keys&lt;/a&gt;, and &lt;a href="https://www.meilisearch.com/docs/learn/security/tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;tenant tokens&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, for more in-depth information, refer to our articles explaining fundamental Meilisearch concepts such as &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/documents?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;documents&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/indexes?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;indexes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🧾 Editions &amp;amp; Licensing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is available in two editions:&lt;/p&gt; 
&lt;h3&gt;🧪 Community Edition (CE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fully open source under the &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE"&gt;MIT license&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Core search engine with fast and relevant full-text, semantic or hybrid search&lt;/li&gt; 
 &lt;li&gt;Free to use for anyone, including commercial usage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🏢 Enterprise Edition (EE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Includes advanced features such as: 
  &lt;ul&gt; 
   &lt;li&gt;Sharding&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Governed by a &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE-EE"&gt;commercial license&lt;/a&gt; or the &lt;a href="https://mariadb.com/bsl11"&gt;Business Source License 1.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Not allowed in production without a commercial agreement with Meilisearch. 
  &lt;ul&gt; 
   &lt;li&gt;You may use, modify, and distribute the Licensed Work for non-production purposes only, such as testing, development, or evaluation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Want access to Enterprise features? → Contact us at &lt;a href="maito:sales@meilisearch.com"&gt;sales@meilisearch.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📊 Telemetry&lt;/h2&gt; 
&lt;p&gt;Meilisearch collects &lt;strong&gt;anonymized&lt;/strong&gt; user data to help us improve our product. You can &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;deactivate this&lt;/a&gt; whenever you want.&lt;/p&gt; 
&lt;p&gt;To request deletion of collected data, please write to us at &lt;a href="mailto:privacy@meilisearch.com"&gt;privacy@meilisearch.com&lt;/a&gt;. Remember to include your &lt;code&gt;Instance UID&lt;/code&gt; in the message, as this helps us quickly find and delete your data.&lt;/p&gt; 
&lt;p&gt;If you want to know more about the kind of data we collect and what we use it for, check the &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;telemetry section&lt;/a&gt; of our documentation.&lt;/p&gt; 
&lt;h2&gt;📫 Get in touch!&lt;/h2&gt; 
&lt;p&gt;Meilisearch is a search engine created by &lt;a href="https://www.meilisearch.com/careers"&gt;Meili&lt;/a&gt;, a software development company headquartered in France and with team members all over the world. Want to know more about us? &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Check out our blog!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🗞 &lt;a href="https://share-eu1.hsforms.com/1LN5N0x_GQgq7ss7tXmSykwfg3aq"&gt;Subscribe to our newsletter&lt;/a&gt; if you don't want to miss any updates! We promise we won't clutter your mailbox: we only send one edition every two months.&lt;/p&gt; 
&lt;p&gt;💌 Want to make a suggestion or give feedback? Here are some of the channels where you can reach us:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For feature requests, please visit our &lt;a href="https://github.com/meilisearch/product/discussions"&gt;product repository&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Found a bug? Open an &lt;a href="https://github.com/meilisearch/meilisearch/issues"&gt;issue&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Want to be part of our Discord community? &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Join us!&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you for your support!&lt;/p&gt; 
&lt;h2&gt;👩‍💻 Contributing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is, and will always be, open-source! If you want to contribute to the project, please look at &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/CONTRIBUTING.md"&gt;our contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📦 Versioning&lt;/h2&gt; 
&lt;p&gt;Meilisearch releases and their associated binaries are available on the project's &lt;a href="https://github.com/meilisearch/meilisearch/releases"&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The binaries are versioned following &lt;a href="https://semver.org/"&gt;SemVer conventions&lt;/a&gt;. To know more, read our &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/documentation/versioning-policy.md"&gt;versioning policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Differently from the binaries, crates in this repository are not currently available on &lt;a href="https://crates.io/"&gt;crates.io&lt;/a&gt; and do not follow &lt;a href="https://semver.org"&gt;SemVer conventions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rustfs/rustfs</title>
      <link>https://github.com/rustfs/rustfs</link>
      <description>&lt;p&gt;🚀 RustFS is an open-source, S3-compatible high-performance object storage system supporting migration and coexistence with other S3-compatible platforms such as MinIO and Ceph.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://rustfs.com"&gt;&lt;img src="https://rustfs.com/images/rustfs-github.png" alt="RustFS" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt;RustFS is a high-performance distributed object storage software built using Rust&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/rustfs/rustfs/actions/workflows/ci.yml"&gt;&lt;img alt="CI" src="https://github.com/rustfs/rustfs/actions/workflows/ci.yml/badge.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rustfs/rustfs/actions/workflows/docker.yml"&gt;&lt;img alt="Build and Push Docker Images" src="https://github.com/rustfs/rustfs/actions/workflows/docker.yml/badge.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;img alt="GitHub commit activity" src="https://img.shields.io/github/commit-activity/m/rustfs/rustfs" /&gt; &lt;img alt="Github Last Commit" src="https://img.shields.io/github/last-commit/rustfs/rustfs" /&gt; &lt;a href="https://hellogithub.com/repository/rustfs/rustfs" target="_blank"&gt;&lt;img src="https://abroad.hellogithub.com/v1/widgets/recommend.svg?rid=b95bcb72bdc340b68f16fdf6790b7d5b&amp;amp;claim_uid=MsbvjYeLDKAH457&amp;amp;theme=small" alt="Featured｜HelloGitHub" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://docs.rustfs.com/introduction.html"&gt;Getting Started&lt;/a&gt; · &lt;a href="https://docs.rustfs.com/"&gt;Docs&lt;/a&gt; · &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;Bug reports&lt;/a&gt; · &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;Discussions&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; English | &lt;a href="https://github.com/rustfs/rustfs/raw/main/README_ZH.md"&gt;简体中文&lt;/a&gt; | 
 &lt;!-- Keep these links. Translations will automatically update with the README. --&gt; &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=de"&gt;Deutsch&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=es"&gt;Español&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=fr"&gt;français&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ja"&gt;日本語&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ko"&gt;한국어&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=pt"&gt;Português&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ru"&gt;Русский&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;RustFS is a high-performance distributed object storage software built using Rust, one of the most popular languages worldwide. Along with MinIO, it shares a range of advantages such as simplicity, S3 compatibility, open-source nature, support for data lakes, AI, and big data. Furthermore, it has a better and more user-friendly open-source license in comparison to other storage systems, being constructed under the Apache license. As Rust serves as its foundation, RustFS provides faster speed and safer distributed features for high-performance object storage.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;⚠️ &lt;strong&gt;RustFS is under rapid development. Do NOT use in production environments!&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: Built with Rust, ensuring speed and efficiency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Distributed Architecture&lt;/strong&gt;: Scalable and fault-tolerant design for large-scale deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;S3 Compatibility&lt;/strong&gt;: Seamless integration with existing S3-compatible applications.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Lake Support&lt;/strong&gt;: Optimized for big data and AI workloads.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open Source&lt;/strong&gt;: Licensed under Apache 2.0, encouraging community contributions and transparency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User-Friendly&lt;/strong&gt;: Designed with simplicity in mind, making it easy to deploy and manage.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RustFS vs MinIO&lt;/h2&gt; 
&lt;p&gt;Stress test server parameters&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;parameter&lt;/th&gt; 
   &lt;th&gt;Remark&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CPU&lt;/td&gt; 
   &lt;td&gt;2 Core&lt;/td&gt; 
   &lt;td&gt;Intel Xeon(Sapphire Rapids) Platinum 8475B , 2.7/3.2 GHz&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Memory&lt;/td&gt; 
   &lt;td&gt;4GB&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Network&lt;/td&gt; 
   &lt;td&gt;15Gbp&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Driver&lt;/td&gt; 
   &lt;td&gt;40GB x 4&lt;/td&gt; 
   &lt;td&gt;IOPS 3800 / Driver&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/2e4979b5-260c-4f2c-ac12-c87fd558072a"&gt;https://github.com/user-attachments/assets/2e4979b5-260c-4f2c-ac12-c87fd558072a&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;RustFS vs Other object storage&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;RustFS&lt;/th&gt; 
   &lt;th&gt;Other object storage&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Powerful Console&lt;/td&gt; 
   &lt;td&gt;Simple and useless Console&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Developed based on Rust language, memory is safer&lt;/td&gt; 
   &lt;td&gt;Developed in Go or C, with potential issues like memory GC/leaks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Does not report logs to third-party countries&lt;/td&gt; 
   &lt;td&gt;Reporting logs to other third countries may violate national security laws&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Licensed under Apache, more business-friendly&lt;/td&gt; 
   &lt;td&gt;AGPL V3 License and other License, polluted open source and License traps, infringement of intellectual property rights&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Comprehensive S3 support, works with domestic and international cloud providers&lt;/td&gt; 
   &lt;td&gt;Full support for S3, but no local cloud vendor support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rust-based development, strong support for secure and innovative devices&lt;/td&gt; 
   &lt;td&gt;Poor support for edge gateways and secure innovative devices&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stable commercial prices, free community support&lt;/td&gt; 
   &lt;td&gt;High pricing, with costs up to $250,000 for 1PiB&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;No risk&lt;/td&gt; 
   &lt;td&gt;Intellectual property risks and risks of prohibited uses&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To get started with RustFS, follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;One-click installation script (Option 1)​​&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -O  https://rustfs.com/install_rustfs.sh &amp;amp;&amp;amp; bash install_rustfs.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;&lt;strong&gt;Docker Quick Start (Option 2)​​&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; # create data and logs directories
 mkdir -p data logs

 # using latest alpha version
 docker run -d -p 9000:9000 -v $(pwd)/data:/data -v $(pwd)/logs:/logs rustfs/rustfs:alpha

 # Specific version
 docker run -d -p 9000:9000 -v $(pwd)/data:/data -v $(pwd)/logs:/logs rustfs/rustfs:1.0.0.alpha.45
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For docker installation, you can also run the container with docker compose. With the &lt;code&gt;docker-compose.yml&lt;/code&gt; file under root directory, running the command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker compose --profile observability up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You should be better to have a look for &lt;code&gt;docker-compose.yaml&lt;/code&gt; file. Because, several services contains in the file. Grafan,prometheus,jaeger containers will be launched using docker compose file, which is helpful for rustfs observability. If you want to start redis as well as nginx container, you can specify the corresponding profiles.&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build from Source (Option 3) - Advanced Users&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For developers who want to build RustFS Docker images from source with multi-architecture support:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Build multi-architecture images locally
./docker-buildx.sh --build-arg RELEASE=latest

# Build and push to registry
./docker-buildx.sh --push

# Build specific version
./docker-buildx.sh --release v1.0.0 --push

# Build for custom registry
./docker-buildx.sh --registry your-registry.com --namespace yourname --push
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;docker-buildx.sh&lt;/code&gt; script supports:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Multi-architecture builds&lt;/strong&gt;: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Automatic version detection&lt;/strong&gt;: Uses git tags or commit hashes&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Registry flexibility&lt;/strong&gt;: Supports Docker Hub, GitHub Container Registry, etc.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Build optimization&lt;/strong&gt;: Includes caching and parallel builds&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can also use Make targets for convenience:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;make docker-buildx                    # Build locally
make docker-buildx-push               # Build and push
make docker-buildx-version VERSION=v1.0.0  # Build specific version
make help-docker                      # Show all Docker-related commands
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Access the Console&lt;/strong&gt;: Open your web browser and navigate to &lt;code&gt;http://localhost:9000&lt;/code&gt; to access the RustFS console, default username and password is &lt;code&gt;rustfsadmin&lt;/code&gt; .&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Bucket&lt;/strong&gt;: Use the console to create a new bucket for your objects.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Upload Objects&lt;/strong&gt;: You can upload files directly through the console or use S3-compatible APIs to interact with your RustFS instance.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you want to access RustFS instance with &lt;code&gt;https&lt;/code&gt;, you can refer to &lt;a href="https://docs.rustfs.com/integration/tls-configured.html"&gt;TLS configuration docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For detailed documentation, including configuration options, API references, and advanced usage, please visit our &lt;a href="https://docs.rustfs.com"&gt;Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you have any questions or need assistance, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check the &lt;a href="https://github.com/rustfs/rustfs/discussions/categories/q-a"&gt;FAQ&lt;/a&gt; for common issues and solutions.&lt;/li&gt; 
 &lt;li&gt;Join our &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt; to ask questions and share your experiences.&lt;/li&gt; 
 &lt;li&gt;Open an issue on our &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;GitHub Issues&lt;/a&gt; page for bug reports or feature requests.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.rustfs.com"&gt;Documentation&lt;/a&gt; - The manual you should read&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustfs/rustfs/releases"&gt;Changelog&lt;/a&gt; - What we broke and fixed&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt; - Where the community lives&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Bugs&lt;/strong&gt;: &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Business&lt;/strong&gt;: &lt;a href="mailto:hello@rustfs.com"&gt;hello@rustfs.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jobs&lt;/strong&gt;: &lt;a href="mailto:jobs@rustfs.com"&gt;jobs@rustfs.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;General Discussion&lt;/strong&gt;: &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/rustfs/rustfs/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;RustFS is a community-driven project, and we appreciate all contributions. Check out the &lt;a href="https://github.com/rustfs/rustfs/graphs/contributors"&gt;Contributors&lt;/a&gt; page to see the amazing people who have helped make RustFS better.&lt;/p&gt; 
&lt;a href="https://github.com/rustfs/rustfs/graphs/contributors"&gt; &lt;img src="https://opencollective.com/rustfs/contributors.svg?width=890&amp;amp;limit=500&amp;amp;button=false" alt="Contributors" /&gt; &lt;/a&gt; 
&lt;h2&gt;Github Trending Top&lt;/h2&gt; 
&lt;p&gt;🚀 RustFS is beloved by open-source enthusiasts and enterprise users worldwide, often appearing on the GitHub Trending top charts.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://trendshift.io/repositories/14181" target="_blank"&gt;&lt;img src="https://raw.githubusercontent.com/rustfs/rustfs/refs/heads/main/docs/rustfs-trending.jpg" alt="rustfs%2Frustfs | Trendshift" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#rustfs/rustfs&amp;amp;type=date&amp;amp;legend=top-left"&gt;&lt;img src="https://api.star-history.com/svg?repos=rustfs/rustfs&amp;amp;type=date&amp;amp;legend=top-left" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;RustFS&lt;/strong&gt; is a trademark of RustFS, Inc. All other trademarks are the property of their respective owners.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>slint-ui/slint</title>
      <link>https://github.com/slint-ui/slint</link>
      <description>&lt;p&gt;Slint is an open-source declarative GUI toolkit to build native user interfaces for Rust, C++, JavaScript, or Python apps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/slint-ui/slint/master/logo/slint-logo-full-light.svg#gh-light-mode-only" alt="Slint" /&gt; &lt;img src="https://raw.githubusercontent.com/slint-ui/slint/master/logo/slint-logo-full-dark.svg#gh-dark-mode-only" alt="Slint" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/slint-ui/slint/actions"&gt;&lt;img src="https://github.com/slint-ui/slint/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://api.reuse.software/info/github.com/slint-ui/slint"&gt;&lt;img src="https://api.reuse.software/badge/github.com/slint-ui/slint" alt="REUSE status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/slint-ui/slint/discussions"&gt;&lt;img src="https://img.shields.io/github/discussions/slint-ui/slint" alt="Discussions" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Slint&lt;/strong&gt; is an open-source declarative GUI toolkit for building native user interfaces for embedded systems, desktops, and mobile platforms.&lt;/p&gt; 
&lt;p&gt;Write your UI once in &lt;code&gt;.slint&lt;/code&gt;, a simple markup language. Connect it to business logic written in Rust, C++, JavaScript, or Python.&lt;/p&gt; 
&lt;h2&gt;Why Slint?&lt;/h2&gt; 
&lt;p&gt;The name &lt;em&gt;Slint&lt;/em&gt; is derived from our design goals:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Slint should support responsive UI design, allow cross-platform usage across operating systems and processor architectures and support multiple programming languages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;: Slint should require minimal resources, in terms of memory and processing power, and yet deliver a smooth, smartphone-like user experience on any device.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Intuitive&lt;/strong&gt;: Designers and developers should feel productive while enjoying the GUI design and development process. The design creation tools should be intuitive to use for the designers. Similarly for the developers, the APIs should be consistent and easy to use, no matter which programming language they choose.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Native&lt;/strong&gt;: GUI built with Slint should match the end users' expectations of a native application irrespective of the platform - desktop, mobile, web or embedded system. The UI design should be compiled to machine code and provide flexibility that only a native application can offer: Access full operating system APIs, utilize all CPU and GPU cores, connect to any peripheral.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Beyond the design goals, here’s what makes Slint stand out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Independent UI Design&lt;/strong&gt;: Use a declarative language similar to separate your UI from business logic. Designers can work in parallel with developers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tooling&lt;/strong&gt;: Iterate quickly with our Live Preview &amp;amp; editor integrations. Integrate from Figma with the &lt;a href="https://www.figma.com/community/plugin/1474418299182276871/figma-to-slint"&gt;Figma to Slint plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stable APIs&lt;/strong&gt;: Slint follows a stable 1.x API. We evolve carefully without breaking your code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See what others have built: &lt;a href="https://madewithslint.com"&gt;#MadeWithSlint&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;Embedded&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;RaspberryPi&lt;/th&gt; 
   &lt;th&gt;STM32&lt;/th&gt; 
   &lt;th&gt;RP2040&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=_BDbNHrjK7g"&gt;Video of Slint on Raspberry Pi&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=NNNOJJsOAis"&gt;Video of Slint on STM32&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=dkBwNocItGs"&gt;Video of Slint on RP2040&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Desktop&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Windows&lt;/th&gt; 
   &lt;th&gt;macOS&lt;/th&gt; 
   &lt;th&gt;Linux&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://slint.dev/resources/gallery_win_screenshot.png" alt="Screenshot of the Gallery on Windows" title="Gallery" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://slint.dev/resources/gallery_mac_screenshot.png" alt="Screenshot of the Gallery on macOS" title="Gallery" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://slint.dev/resources/gallery_linux_screenshot.png" alt="Screenshot of the Gallery on Linux" title="Gallery" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Web using WebAssembly&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Printer Demo&lt;/th&gt; 
   &lt;th&gt;Slide Puzzle&lt;/th&gt; 
   &lt;th&gt;Energy Monitor&lt;/th&gt; 
   &lt;th&gt;Widget Gallery&lt;/th&gt; 
   &lt;th&gt;Weather demo&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/printerdemo/"&gt;&lt;img src="https://slint.dev/resources/printerdemo_screenshot.png" alt="Screenshot of the Printer Demo" title="Printer Demo" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/slide_puzzle/"&gt;&lt;img src="https://slint.dev/resources/puzzle_screenshot.png" alt="Screenshot of the Slide Puzzle" title="Slide Puzzle" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/energy-monitor/"&gt;&lt;img src="https://slint.dev/resources/energy-monitor-screenshot.png" alt="Screenshot of the Energy Monitor Demo" title="Energy Monitor Demo" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/gallery/"&gt;&lt;img src="https://slint.dev/resources/gallery_screenshot.png" alt="Screenshot of the Gallery Demo" title="Gallery Demo" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/weather-demo/"&gt;&lt;img src="https://raw.githubusercontent.com/slint-ui/slint/master/demos/weather-demo/docs/img/desktop-preview.png" alt="Screenshot of the weather Demo" title="Weather Demo" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;More examples and demos in the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/examples#examples"&gt;examples folder&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;h3&gt;Hello World&lt;/h3&gt; 
&lt;p&gt;The UI is defined in a Domain Specific Language that is declarative, easy to use, intuitive, and provides a powerful way to describe graphical elements, their placement, their hierarchy, property bindings, and the flow of data through the different states.&lt;/p&gt; 
&lt;p&gt;Here's the obligatory "Hello World":&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-slint"&gt;export component HelloWorld inherits Window {
    width: 400px;
    height: 400px;

    Text {
       y: parent.width / 2;
       x: parent.x + 200px;
       text: "Hello, world";
       color: blue;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;For more details, check out the &lt;a href="https://slint.dev/docs/slint"&gt;Slint Language Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/examples"&gt;examples&lt;/a&gt; folder contains examples and demos, showing how to use the Slint markup language and how to interact with a Slint user interface from supported programming languages.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;docs&lt;/code&gt; folder contains a lot more information, including &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/docs/building.md"&gt;build instructions&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/docs/development.md"&gt;internal developer docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Refer to the README of each language directory in the &lt;code&gt;api&lt;/code&gt; folder:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/api/cpp"&gt;C++&lt;/a&gt; (&lt;a href="https://slint.dev/latest/docs/cpp"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/slint-ui/slint-cpp-template"&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/api/rs/slint"&gt;Rust&lt;/a&gt; &lt;a href="https://crates.io/crates/slint"&gt;&lt;img src="https://img.shields.io/crates/v/slint" alt="Crates.io" /&gt;&lt;/a&gt; (&lt;a href="https://slint.dev/latest/docs/rust/slint/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://youtu.be/WBcv4V-whHk"&gt;Tutorial Video&lt;/a&gt; | &lt;a href="https://github.com/slint-ui/slint-rust-template"&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/api/node"&gt;JavaScript/NodeJS (Beta)&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/slint-ui"&gt;&lt;img src="https://img.shields.io/npm/v/slint-ui" alt="npm" /&gt;&lt;/a&gt; (&lt;a href="https://slint.dev/latest/docs/node"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/slint-ui/slint-nodejs-template"&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/api/python/slint"&gt;Python (Beta)&lt;/a&gt; &lt;a href="https://pypi.org/project/slint/"&gt;&lt;img src="https://img.shields.io/pypi/v/slint" alt="pypi" /&gt;&lt;/a&gt; (&lt;a href="http://snapshots.slint.dev/master/docs/python/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/slint-ui/slint-python-template"&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;An application is composed of the business logic written in Rust, C++, or JavaScript and the &lt;code&gt;.slint&lt;/code&gt; user interface design markup, which is compiled to native code.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://slint.dev/resources/architecture.drawio.svg?sanitize=true" alt="Architecture Overview" /&gt;&lt;/p&gt; 
&lt;h3&gt;Compiler&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;.slint&lt;/code&gt; files are compiled ahead of time. The expressions in the &lt;code&gt;.slint&lt;/code&gt; are pure functions that the compiler can optimize. For example, the compiler could choose to "inline" properties and remove those that are constant or unchanged.&lt;/p&gt; 
&lt;p&gt;The compiler uses the typical compiler phases of lexing, parsing, optimization, and finally code generation. It provides different back-ends for code generation in the target language. The C++ code generator produces a C++ header file, the Rust generator produces Rust code, and so on. An interpreter for dynamic languages is also included.&lt;/p&gt; 
&lt;h3&gt;Runtime&lt;/h3&gt; 
&lt;p&gt;The runtime library consists of an engine that supports properties declared in the &lt;code&gt;.slint&lt;/code&gt; language. Components with their elements, items, and properties are laid out in a single memory region, to reduce memory allocations.&lt;/p&gt; 
&lt;p&gt;Rendering backends and styles are configurable at compile time:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;femtovg&lt;/code&gt; renderer uses OpenGL ES 2.0 for rendering.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;skia&lt;/code&gt; renderer uses &lt;a href="https://skia.org"&gt;Skia&lt;/a&gt; for rendering.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;software&lt;/code&gt; renderer uses the CPU with no additional dependencies.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;NOTE: When Qt is installed on the system, the &lt;code&gt;qt&lt;/code&gt; style becomes available, using Qt's QStyle to achieve native looking widgets.&lt;/p&gt; 
&lt;h3&gt;Tooling&lt;/h3&gt; 
&lt;p&gt;We have a few tools to help with the development of .slint files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/tools/lsp"&gt;&lt;strong&gt;LSP Server&lt;/strong&gt;&lt;/a&gt; that adds features like auto-complete and live preview of the .slint files to many editors.&lt;/li&gt; 
 &lt;li&gt;It is bundled in a &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/editors/vscode"&gt;&lt;strong&gt;Visual Studio Code Extension&lt;/strong&gt;&lt;/a&gt; available from the market place.&lt;/li&gt; 
 &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/tools/viewer"&gt;&lt;strong&gt;slint-viewer&lt;/strong&gt;&lt;/a&gt; tool which displays the .slint files. The &lt;code&gt;--auto-reload&lt;/code&gt; argument makes it easy to preview your UI while you are working on it (when using the LSP preview is not possible).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://slintpad.com/"&gt;&lt;strong&gt;SlintPad&lt;/strong&gt;&lt;/a&gt;, an online editor to try out .slint syntax without installing anything (&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/tools/slintpad"&gt;sources&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;A &lt;a href="https://www.figma.com/community/plugin/1474418299182276871/figma-to-slint"&gt;&lt;strong&gt;Figma to Slint&lt;/strong&gt;&lt;/a&gt; plugin.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please check our &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/editors/README.md"&gt;Editors README&lt;/a&gt; for tips on how to configure your favorite editor to work well with Slint.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;You can use Slint under &lt;em&gt;&lt;strong&gt;any&lt;/strong&gt;&lt;/em&gt; of the following licenses, at your choice:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Build proprietary desktop, mobile, or web applications for free with the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/LICENSES/LicenseRef-Slint-Royalty-free-2.0.md"&gt;Royalty-free License&lt;/a&gt;,&lt;/li&gt; 
 &lt;li&gt;Build open source embedded, desktop, mobile, or web applications for free with the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/LICENSES/GPL-3.0-only.txt"&gt;GNU GPLv3&lt;/a&gt;,&lt;/li&gt; 
 &lt;li&gt;Build proprietary embedded, desktop, mobile, or web applications with the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/LICENSES/LicenseRef-Slint-Software-3.0.md"&gt;Paid license&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See the &lt;a href="https://slint.dev/pricing.html"&gt;Slint licensing options on the website&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/FAQ.md#licensing"&gt;Licensing FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;We welcome your contributions: in the form of code, bug reports or feedback. For contribution guidelines see &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;p&gt;Please see our separate &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/FAQ.md"&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;About us (SixtyFPS GmbH)&lt;/h2&gt; 
&lt;p&gt;We are passionate about software - API design, cross-platform software development and user interface components. Our aim is to make developing user interfaces fun for everyone: from Python, JavaScript, C++, or Rust developers all the way to UI/UX designers. We believe that software grows organically and keeping it open source is the best way to sustain that growth. Our team members are located remotely in Germany, Finland, and US.&lt;/p&gt; 
&lt;h3&gt;Stay up to date&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow &lt;a href="https://twitter.com/slint_ui"&gt;@slint_ui&lt;/a&gt; on X/Twitter.&lt;/li&gt; 
 &lt;li&gt;Follow &lt;a href="https://mastodon.social/@slint@fosstodon.org"&gt;@slint@fosstodon.org&lt;/a&gt; on Mastodon.&lt;/li&gt; 
 &lt;li&gt;Follow &lt;a href="https://www.linkedin.com/company/slint-ui/"&gt;@slint-ui&lt;/a&gt; on LinkedIn.&lt;/li&gt; 
 &lt;li&gt;Follow &lt;a href="https://bsky.app/profile/slint.dev"&gt;@slint.dev&lt;/a&gt; on Bluesky&lt;/li&gt; 
 &lt;li&gt;Subscribe to our &lt;a href="https://www.youtube.com/@Slint-UI"&gt;YouTube channel&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contact us&lt;/h3&gt; 
&lt;p&gt;Feel free to join &lt;a href="https://github.com/slint-ui/slint/discussions"&gt;Github discussions&lt;/a&gt; for general chat or questions. Use &lt;a href="https://github.com/slint-ui/slint/issues"&gt;Github issues&lt;/a&gt; to report public suggestions or bugs.&lt;/p&gt; 
&lt;p&gt;We chat in &lt;a href="https://chat.slint.dev"&gt;our Mattermost instance&lt;/a&gt; where you are welcome to listen in or ask your questions.&lt;/p&gt; 
&lt;p&gt;You can of course also contact us privately via email to &lt;a href="mailto://info@slint.dev"&gt;info@slint.dev&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sharkdp/bat</title>
      <link>https://github.com/sharkdp/bat</link>
      <description>&lt;p&gt;A cat(1) clone with wings.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/sharkdp/bat/master/doc/logo-header.svg?sanitize=true" alt="bat - a cat clone with wings" /&gt;&lt;br /&gt; &lt;a href="https://github.com/sharkdp/bat/actions?query=workflow%3ACICD"&gt;&lt;img src="https://github.com/sharkdp/bat/workflows/CICD/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/l/bat.svg?sanitize=true" alt="license" /&gt; &lt;a href="https://crates.io/crates/bat"&gt;&lt;img src="https://img.shields.io/crates/v/bat.svg?colorB=319e8c" alt="Version info" /&gt;&lt;/a&gt;&lt;br /&gt; A &lt;i&gt;cat(1)&lt;/i&gt; clone with syntax highlighting and Git integration. &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#syntax-highlighting"&gt;Key Features&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#how-to-use"&gt;How To Use&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#installation"&gt;Installation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#customization"&gt;Customization&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#project-goals-and-alternatives"&gt;Project goals, alternatives&lt;/a&gt;&lt;br /&gt; [English] [&lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-zh.md"&gt;中文&lt;/a&gt;] [&lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-ja.md"&gt;日本語&lt;/a&gt;] [&lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-ko.md"&gt;한국어&lt;/a&gt;] [&lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-ru.md"&gt;Русский&lt;/a&gt;] &lt;/p&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;A special &lt;em&gt;thank you&lt;/em&gt; goes to our biggest &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors.md"&gt;sponsors&lt;/a&gt;:&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt; &lt;a href="https://www.warp.dev/bat"&gt; &lt;img src="https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors/warp-logo.png" width="200" alt="Warp" /&gt; &lt;br /&gt; &lt;strong&gt;Warp, the intelligent terminal&lt;/strong&gt; &lt;br /&gt; &lt;sub&gt;Available on MacOS, Linux, Windows&lt;/sub&gt; &lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://graphite.dev/?utm_source=github&amp;amp;utm_medium=repo&amp;amp;utm_campaign=bat"&gt; &lt;img src="https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors/graphite-logo.jpeg" width="200" alt="Graphite" /&gt; &lt;br /&gt; &lt;strong&gt;Graphite is the AI developer productivity platform helping&lt;br /&gt;teams on GitHub ship higher quality software, faster&lt;/strong&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3&gt;Syntax highlighting&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; supports syntax highlighting for a large number of programming and markup languages:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://imgur.com/rGsdnDe.png" alt="Syntax highlighting example" /&gt;&lt;/p&gt; 
&lt;h3&gt;Git integration&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; communicates with &lt;code&gt;git&lt;/code&gt; to show modifications with respect to the index (see left side bar):&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/2lSW4RE.png" alt="Git integration example" /&gt;&lt;/p&gt; 
&lt;h3&gt;Show non-printable characters&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;-A&lt;/code&gt;/&lt;code&gt;--show-all&lt;/code&gt; option to show and highlight non-printable characters:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/WndGp9H.png" alt="Non-printable character example" /&gt;&lt;/p&gt; 
&lt;h3&gt;Automatic paging&lt;/h3&gt; 
&lt;p&gt;By default, &lt;code&gt;bat&lt;/code&gt; pipes its own output to a pager (e.g. &lt;code&gt;less&lt;/code&gt;) if the output is too large for one screen. If you would rather &lt;code&gt;bat&lt;/code&gt; work like &lt;code&gt;cat&lt;/code&gt; all the time (never page output), you can set &lt;code&gt;--paging=never&lt;/code&gt; as an option, either on the command line or in your configuration file. If you intend to alias &lt;code&gt;cat&lt;/code&gt; to &lt;code&gt;bat&lt;/code&gt; in your shell configuration, you can use &lt;code&gt;alias cat='bat --paging=never'&lt;/code&gt; to preserve the default behavior.&lt;/p&gt; 
&lt;h4&gt;File concatenation&lt;/h4&gt; 
&lt;p&gt;Even with a pager set, you can still use &lt;code&gt;bat&lt;/code&gt; to concatenate files &lt;span&gt;😉&lt;/span&gt;. Whenever &lt;code&gt;bat&lt;/code&gt; detects a non-interactive terminal (i.e. when you pipe into another process or into a file), &lt;code&gt;bat&lt;/code&gt; will act as a drop-in replacement for &lt;code&gt;cat&lt;/code&gt; and fall back to printing the plain file contents, regardless of the &lt;code&gt;--pager&lt;/code&gt; option's value.&lt;/p&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;p&gt;Display a single file on the terminal&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat README.md
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Display multiple files at once&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat src/*.rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read from stdin, determine the syntax automatically (note, highlighting will only work if the syntax can be determined from the first line of the file, usually through a shebang such as &lt;code&gt;#!/bin/sh&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -s https://sh.rustup.rs | bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read from stdin, specify the language explicitly&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;yaml2json .travis.yml | json_pp | bat -l json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Show and highlight non-printable characters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat -A /etc/hosts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use it as a &lt;code&gt;cat&lt;/code&gt; replacement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat &amp;gt; note.md  # quickly create a new file

bat header.md content.md footer.md &amp;gt; document.md

bat -n main.rs  # show line numbers (only)

bat f - g  # output 'f', then stdin, then 'g'.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Integration with other tools&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;You can use &lt;code&gt;bat&lt;/code&gt; as a previewer for &lt;a href="https://github.com/junegunn/fzf"&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt;. To do this, use &lt;code&gt;bat&lt;/code&gt;'s &lt;code&gt;--color=always&lt;/code&gt; option to force colorized output. You can also use &lt;code&gt;--line-range&lt;/code&gt; option to restrict the load times for long files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fzf --preview "bat --color=always --style=numbers --line-range=:500 {}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information, see &lt;a href="https://github.com/junegunn/fzf#preview-window"&gt;&lt;code&gt;fzf&lt;/code&gt;'s &lt;code&gt;README&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;You can use the &lt;code&gt;-exec&lt;/code&gt; option of &lt;code&gt;find&lt;/code&gt; to preview all search results with &lt;code&gt;bat&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find … -exec bat {} +
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you happen to use &lt;a href="https://github.com/sharkdp/fd"&gt;&lt;code&gt;fd&lt;/code&gt;&lt;/a&gt;, you can use the &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--exec-batch&lt;/code&gt; option to do the same:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fd … -X bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;With &lt;a href="https://github.com/eth-p/bat-extras/raw/master/doc/batgrep.md"&gt;&lt;code&gt;batgrep&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;bat&lt;/code&gt; can be used as the printer for &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt; search results.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;batgrep needle src/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;tail -f&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; can be combined with &lt;code&gt;tail -f&lt;/code&gt; to continuously monitor a given file with syntax highlighting.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tail -f /var/log/pacman.log | bat --paging=never -l log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that we have to switch off paging in order for this to work. We have also specified the syntax explicitly (&lt;code&gt;-l log&lt;/code&gt;), as it can not be auto-detected in this case.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;git&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;You can combine &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;git show&lt;/code&gt; to view an older version of a given file with proper syntax highlighting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git show v0.6.0:src/main.rs | bat -l rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;You can combine &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;git diff&lt;/code&gt; to view lines around code changes with proper syntax highlighting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;batdiff() {
    git diff --name-only --relative --diff-filter=d -z | xargs -0 bat --diff
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you prefer to use this as a separate tool, check out &lt;code&gt;batdiff&lt;/code&gt; in &lt;a href="https://github.com/eth-p/bat-extras"&gt;&lt;code&gt;bat-extras&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are looking for more support for git and diff operations, check out &lt;a href="https://github.com/dandavison/delta"&gt;&lt;code&gt;delta&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;xclip&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The line numbers and Git modification markers in the output of &lt;code&gt;bat&lt;/code&gt; can make it hard to copy the contents of a file. To prevent this, you can call &lt;code&gt;bat&lt;/code&gt; with the &lt;code&gt;-p&lt;/code&gt;/&lt;code&gt;--plain&lt;/code&gt; option or simply pipe the output into &lt;code&gt;xclip&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat main.cpp | xclip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; will detect that the output is being redirected and print the plain file contents.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;man&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; can be used as a colorizing pager for &lt;code&gt;man&lt;/code&gt;, by setting the &lt;code&gt;MANPAGER&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export MANPAGER="sh -c 'awk '\''{ gsub(/\x1B\[[0-9;]*m/, \"\", \$0); gsub(/.\x08/, \"\", \$0); print }'\'' | bat -p -lman'"
man 2 select
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(replace &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;batcat&lt;/code&gt; if you are on Debian or Ubuntu)&lt;/p&gt; 
&lt;p&gt;If you prefer to have this bundled in a new command, you can also use &lt;a href="https://github.com/eth-p/bat-extras/raw/master/doc/batman.md"&gt;&lt;code&gt;batman&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;br /&gt; This will &lt;a href="https://github.com/sharkdp/bat/issues/1145"&gt;not work&lt;/a&gt; out of the box with Mandoc's &lt;code&gt;man&lt;/code&gt; implementation.&lt;/p&gt; 
 &lt;p&gt;Please either use &lt;code&gt;batman&lt;/code&gt;, or convert the shell script to a &lt;a href="https://en.wikipedia.org/wiki/Shebang_(Unix)"&gt;shebang executable&lt;/a&gt; and point &lt;code&gt;MANPAGER&lt;/code&gt; to that.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Note that the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/assets/syntaxes/02_Extra/Manpage.sublime-syntax"&gt;Manpage syntax&lt;/a&gt; is developed in this repository and still needs some work.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;prettier&lt;/code&gt; / &lt;code&gt;shfmt&lt;/code&gt; / &lt;code&gt;rustfmt&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The &lt;a href="https://github.com/eth-p/bat-extras/raw/master/doc/prettybat.md"&gt;&lt;code&gt;prettybat&lt;/code&gt;&lt;/a&gt; script is a wrapper that will format code and print it with &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;Warp&lt;/code&gt;&lt;/h4&gt; 
&lt;a href="https://app.warp.dev/drive/folder/-Bat-Warp-Pack-lxhe7HrEwgwpG17mvrFSz1"&gt; &lt;img src="https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors/warp-pack-header.png" alt="Warp" /&gt; &lt;/a&gt; 
&lt;h4&gt;Highlighting &lt;code&gt;--help&lt;/code&gt; messages&lt;/h4&gt; 
&lt;p&gt;You can use &lt;code&gt;bat&lt;/code&gt; to colorize help text: &lt;code&gt;$ cp --help | bat -plhelp&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can also use a wrapper around this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# in your .bashrc/.zshrc/*rc
alias bathelp='bat --plain --language=help'
help() {
    "$@" --help 2&amp;gt;&amp;amp;1 | bathelp
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can do &lt;code&gt;$ help cp&lt;/code&gt; or &lt;code&gt;$ help git commit&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When you are using &lt;code&gt;zsh&lt;/code&gt;, you can also use global aliases to override &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;--help&lt;/code&gt; entirely:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;alias -g -- -h='-h 2&amp;gt;&amp;amp;1 | bat --language=help --style=plain'
alias -g -- --help='--help 2&amp;gt;&amp;amp;1 | bat --language=help --style=plain'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;, you can use abbreviations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-fish"&gt;abbr -a --position anywhere -- --help '--help | bat -plhelp'
abbr -a --position anywhere -- -h '-h | bat -plhelp'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This way, you can keep on using &lt;code&gt;cp --help&lt;/code&gt;, but get colorized help pages.&lt;/p&gt; 
&lt;p&gt;Be aware that in some cases, &lt;code&gt;-h&lt;/code&gt; may not be a shorthand of &lt;code&gt;--help&lt;/code&gt; (for example with &lt;code&gt;ls&lt;/code&gt;). In cases where you need to use &lt;code&gt;-h&lt;/code&gt; as a command argument you can prepend &lt;code&gt;\&lt;/code&gt; to the argument (eg. &lt;code&gt;ls \-h&lt;/code&gt;) to escape the aliasing defined above.&lt;/p&gt; 
&lt;p&gt;Please report any issues with the help syntax in &lt;a href="https://github.com/victor-gp/cmd-help-sublime-syntax"&gt;this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;!--

Installation instructions need to:
* be for widely used systems
* be non-obvious
* be from somewhat official sources

--&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/bat-cat/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/bat-cat.svg?columns=3&amp;amp;exclude_unsupported=1" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;On Ubuntu (using &lt;code&gt;apt&lt;/code&gt;)&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;... and other Debian-based Linux distributions.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; is available on &lt;a href="https://packages.ubuntu.com/search?keywords=bat&amp;amp;exact=1"&gt;Ubuntu since 20.04 ("Focal")&lt;/a&gt; and &lt;a href="https://packages.debian.org/bullseye/bat"&gt;Debian since August 2021 (Debian 11 - "Bullseye")&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If your Ubuntu/Debian installation is new enough you can simply run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: If you install &lt;code&gt;bat&lt;/code&gt; this way, please note that the executable may be installed as &lt;code&gt;batcat&lt;/code&gt; instead of &lt;code&gt;bat&lt;/code&gt; (due to &lt;a href="https://github.com/sharkdp/bat/issues/982"&gt;a name clash with another package&lt;/a&gt;). You can set up a &lt;code&gt;bat -&amp;gt; batcat&lt;/code&gt; symlink or alias to prevent any issues that may come up because of this and to be consistent with other distributions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir -p ~/.local/bin
ln -s /usr/bin/batcat ~/.local/bin/bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;an example alias for &lt;code&gt;batcat&lt;/code&gt; as &lt;code&gt;bat&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;alias bat="batcat"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Ubuntu (using most recent &lt;code&gt;.deb&lt;/code&gt; packages)&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;... and other Debian-based Linux distributions.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;If the package has not yet been promoted to your Ubuntu/Debian installation, or you want the most recent release of &lt;code&gt;bat&lt;/code&gt;, download the latest &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href="https://github.com/sharkdp/bat/releases"&gt;release page&lt;/a&gt; and install it via:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo dpkg -i bat_0.18.3_amd64.deb  # adapt version number and architecture
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Alpine Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://pkgs.alpinelinux.org/packages?name=bat"&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official sources, provided you have the appropriate repository enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;apk add bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Arch Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://www.archlinux.org/packages/extra/x86_64/bat/"&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official sources:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pacman -S bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Fedora&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://koji.fedoraproject.org/koji/packageinfo?packageID=27506"&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official &lt;a href="https://docs.fedoraproject.org/en-US/modularity/using-modules/"&gt;Fedora Modular&lt;/a&gt; repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dnf install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Gentoo Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://packages.gentoo.org/packages/sys-apps/bat"&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official sources:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;emerge sys-apps/bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On FreeBSD&lt;/h3&gt; 
&lt;p&gt;You can install a precompiled &lt;a href="https://www.freshports.org/textproc/bat"&gt;&lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; with pkg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pkg install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or build it on your own from the FreeBSD ports:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd /usr/ports/textproc/bat
make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On OpenBSD&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; package using &lt;a href="https://man.openbsd.org/pkg_add.1"&gt;&lt;code&gt;pkg_add(1)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pkg_add bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Via nix&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; using the &lt;a href="https://nixos.org/nix"&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-env -i bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On openSUSE&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; with zypper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;zypper install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Via snap package&lt;/h3&gt; 
&lt;p&gt;There is currently no recommended snap package available. Existing packages may be available, but are not officially supported and may contain &lt;a href="https://github.com/sharkdp/bat/issues/1519"&gt;issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;On macOS (or Linux) via Homebrew&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; with &lt;a href="https://formulae.brew.sh/formula/bat"&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On macOS via MacPorts&lt;/h3&gt; 
&lt;p&gt;Or install &lt;code&gt;bat&lt;/code&gt; with &lt;a href="https://ports.macports.org/port/bat/summary"&gt;MacPorts&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;port install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;On Windows&lt;/h3&gt; 
&lt;p&gt;There are a few options to install &lt;code&gt;bat&lt;/code&gt; on Windows. Once you have installed &lt;code&gt;bat&lt;/code&gt;, take a look at the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#using-bat-on-windows"&gt;"Using &lt;code&gt;bat&lt;/code&gt; on Windows"&lt;/a&gt; section.&lt;/p&gt; 
&lt;h4&gt;Prerequisites&lt;/h4&gt; 
&lt;p&gt;You will need to install the &lt;a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist#latest-microsoft-visual-c-redistributable-version"&gt;Visual C++ Redistributable&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;With WinGet&lt;/h4&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via &lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/winget"&gt;WinGet&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;winget install sharkdp.bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;With Chocolatey&lt;/h4&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via &lt;a href="https://chocolatey.org/packages/Bat"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;choco install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;With Scoop&lt;/h4&gt; 
&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via &lt;a href="https://scoop.sh/"&gt;scoop&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;scoop install bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;From prebuilt binaries:&lt;/h4&gt; 
&lt;p&gt;You can download prebuilt binaries from the &lt;a href="https://github.com/sharkdp/bat/releases"&gt;Release page&lt;/a&gt;,&lt;/p&gt; 
&lt;p&gt;You will need to install the &lt;a href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads"&gt;Visual C++ Redistributable&lt;/a&gt; package.&lt;/p&gt; 
&lt;h3&gt;From binaries&lt;/h3&gt; 
&lt;p&gt;Check out the &lt;a href="https://github.com/sharkdp/bat/releases"&gt;Release page&lt;/a&gt; for prebuilt versions of &lt;code&gt;bat&lt;/code&gt; for many different architectures. Statically-linked binaries are also available: look for archives with &lt;code&gt;musl&lt;/code&gt; in the file name.&lt;/p&gt; 
&lt;h3&gt;From source&lt;/h3&gt; 
&lt;p&gt;If you want to build &lt;code&gt;bat&lt;/code&gt; from source, you need Rust 1.79.0 or higher. You can then use &lt;code&gt;cargo&lt;/code&gt; to build everything:&lt;/p&gt; 
&lt;h4&gt;From local source&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install --path . --locked
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The &lt;code&gt;--path .&lt;/code&gt; above specifies the directory of the source code and NOT where &lt;code&gt;bat&lt;/code&gt; will be installed. For more information see the docs for &lt;a href="https://doc.rust-lang.org/cargo/commands/cargo-install.html"&gt;&lt;code&gt;cargo install&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;From &lt;code&gt;crates.io&lt;/code&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install --locked bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that additional files like the man page or shell completion files can not be installed automatically in both these ways. If installing from a local source, they will be generated by &lt;code&gt;cargo&lt;/code&gt; and should be available in the cargo target folder under &lt;code&gt;build&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Furthermore, shell completions are also available by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat --completion &amp;lt;shell&amp;gt;
# see --help for supported shells
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;h3&gt;Highlighting theme&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;bat --list-themes&lt;/code&gt; to get a list of all available themes for syntax highlighting. By default, &lt;code&gt;bat&lt;/code&gt; uses &lt;code&gt;Monokai Extended&lt;/code&gt; or &lt;code&gt;Monokai Extended Light&lt;/code&gt; for dark and light themes respectively. To select the &lt;code&gt;TwoDark&lt;/code&gt; theme, call &lt;code&gt;bat&lt;/code&gt; with the &lt;code&gt;--theme=TwoDark&lt;/code&gt; option or set the &lt;code&gt;BAT_THEME&lt;/code&gt; environment variable to &lt;code&gt;TwoDark&lt;/code&gt;. Use &lt;code&gt;export BAT_THEME="TwoDark"&lt;/code&gt; in your shell's startup file to make the change permanent. Alternatively, use &lt;code&gt;bat&lt;/code&gt;'s &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#configuration-file"&gt;configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to preview the different themes on a custom file, you can use the following command (you need &lt;a href="https://github.com/junegunn/fzf"&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; for this):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat --list-themes | fzf --preview="bat --theme={} --color=always /path/to/file"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; automatically picks a fitting theme depending on your terminal's background color. You can use the &lt;code&gt;--theme-dark&lt;/code&gt; / &lt;code&gt;--theme-light&lt;/code&gt; options or the &lt;code&gt;BAT_THEME_DARK&lt;/code&gt; / &lt;code&gt;BAT_THEME_LIGHT&lt;/code&gt; environment variables to customize the themes used. This is especially useful if you frequently switch between dark and light mode.&lt;/p&gt; 
&lt;p&gt;You can also use a custom theme by following the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#adding-new-themes"&gt;'Adding new themes' section below&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;8-bit themes&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; has three themes that always use &lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors"&gt;8-bit colors&lt;/a&gt;, even when truecolor support is available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ansi&lt;/code&gt; looks decent on any terminal. It uses 3-bit colors: black, red, green, yellow, blue, magenta, cyan, and white.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base16&lt;/code&gt; is designed for &lt;a href="https://github.com/tinted-theming/home"&gt;base16&lt;/a&gt; terminal themes. It uses 4-bit colors (3-bit colors plus bright variants) in accordance with the &lt;a href="https://github.com/tinted-theming/home/raw/main/styling.md"&gt;base16 styling guidelines&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base16-256&lt;/code&gt; is designed for &lt;a href="https://github.com/tinted-theming/tinted-shell"&gt;tinted-shell&lt;/a&gt;. It replaces certain bright colors with 8-bit colors from 16 to 21. &lt;strong&gt;Do not&lt;/strong&gt; use this simply because you have a 256-color terminal but are not using tinted-shell.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Although these themes are more restricted, they have three advantages over truecolor themes. They:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enjoy maximum compatibility. Some terminal utilities do not support more than 3-bit colors.&lt;/li&gt; 
 &lt;li&gt;Adapt to terminal theme changes. Even for already printed output.&lt;/li&gt; 
 &lt;li&gt;Visually harmonize better with other terminal software.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Output style&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;--style&lt;/code&gt; option to control the appearance of &lt;code&gt;bat&lt;/code&gt;'s output. You can use &lt;code&gt;--style=numbers,changes&lt;/code&gt;, for example, to show only Git changes and line numbers but no grid and no file header. Set the &lt;code&gt;BAT_STYLE&lt;/code&gt; environment variable to make these changes permanent or use &lt;code&gt;bat&lt;/code&gt;'s &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#configuration-file"&gt;configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!tip] If you specify a default style in &lt;code&gt;bat&lt;/code&gt;'s config file, you can change which components are displayed during a single run of &lt;code&gt;bat&lt;/code&gt; using the &lt;code&gt;--style&lt;/code&gt; command-line argument. By prefixing a component with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, it can be added or removed from the current style.&lt;/p&gt; 
 &lt;p&gt;For example, if your config contains &lt;code&gt;--style=full,-snip&lt;/code&gt;, you can run bat with &lt;code&gt;--style=-grid,+snip&lt;/code&gt; to remove the grid and add back the &lt;code&gt;snip&lt;/code&gt; component. Or, if you want to override the styles completely, you use &lt;code&gt;--style=numbers&lt;/code&gt; to only show the line numbers.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Adding new syntaxes / language definitions&lt;/h3&gt; 
&lt;p&gt;Should you find that a particular syntax is not available within &lt;code&gt;bat&lt;/code&gt;, you can follow these instructions to easily add new syntaxes to your current &lt;code&gt;bat&lt;/code&gt; installation.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; uses the excellent &lt;a href="https://github.com/trishume/syntect/"&gt;&lt;code&gt;syntect&lt;/code&gt;&lt;/a&gt; library for syntax highlighting. &lt;code&gt;syntect&lt;/code&gt; can read any &lt;a href="https://www.sublimetext.com/docs/3/syntax.html"&gt;Sublime Text &lt;code&gt;.sublime-syntax&lt;/code&gt; file&lt;/a&gt; and theme.&lt;/p&gt; 
&lt;p&gt;A good resource for finding Sublime Syntax packages is &lt;a href="https://packagecontrol.io/"&gt;Package Control&lt;/a&gt;. Once you found a syntax:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create a folder with syntax definition files:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;mkdir -p "$(bat --config-dir)/syntaxes"
cd "$(bat --config-dir)/syntaxes"

# Put new '.sublime-syntax' language definition files
# in this folder (or its subdirectories), for example:
git clone https://github.com/tellnobody1/sublime-purescript-syntax
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now use the following command to parse these files into a binary cache:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;bat cache --build
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Finally, use &lt;code&gt;bat --list-languages&lt;/code&gt; to check if the new languages are available.&lt;/p&gt; &lt;p&gt;If you ever want to go back to the default settings, call:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;bat cache --clear
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you think that a specific syntax should be included in &lt;code&gt;bat&lt;/code&gt; by default, please consider opening a "syntax request" ticket after reading the policies and instructions &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/assets.md"&gt;here&lt;/a&gt;: &lt;a href="https://github.com/sharkdp/bat/issues/new?labels=syntax-request&amp;amp;template=syntax_request.md"&gt;Open Syntax Request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Adding new themes&lt;/h3&gt; 
&lt;p&gt;This works very similar to how we add new syntax definitions.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Themes are stored in &lt;a href="https://www.sublimetext.com/docs/color_schemes_tmtheme.html"&gt;&lt;code&gt;.tmTheme&lt;/code&gt; files&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;First, create a folder with the new syntax highlighting themes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir -p "$(bat --config-dir)/themes"
cd "$(bat --config-dir)/themes"

# Download a theme in '.tmTheme' format, for example:
git clone https://github.com/greggb/sublime-snazzy

# Update the binary cache
bat cache --build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, use &lt;code&gt;bat --list-themes&lt;/code&gt; to check if the new themes are available.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;code&gt;bat&lt;/code&gt; uses the name of the &lt;code&gt;.tmTheme&lt;/code&gt; file for the theme's name.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Adding or changing file type associations&lt;/h3&gt; 
&lt;p&gt;You can add new (or change existing) file name patterns using the &lt;code&gt;--map-syntax&lt;/code&gt; command line option. The option takes an argument of the form &lt;code&gt;pattern:syntax&lt;/code&gt; where &lt;code&gt;pattern&lt;/code&gt; is a glob pattern that is matched against the file name and the absolute file path. The &lt;code&gt;syntax&lt;/code&gt; part is the full name of a supported language (use &lt;code&gt;bat --list-languages&lt;/code&gt; for an overview).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You probably want to use this option as &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#configuration-file"&gt;an entry in &lt;code&gt;bat&lt;/code&gt;'s configuration file&lt;/a&gt; for persistence instead of passing it on the command line as a one-off. Generally you'd just use &lt;code&gt;-l&lt;/code&gt; if you want to manually specify a language for a file.&lt;/p&gt; 
&lt;p&gt;Example: To use "INI" syntax highlighting for all files with a &lt;code&gt;.conf&lt;/code&gt; file extension, use&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;--map-syntax='*.conf:INI'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: To open all files called &lt;code&gt;.ignore&lt;/code&gt; (exact match) with the "Git Ignore" syntax, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;--map-syntax='.ignore:Git Ignore'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: To open all &lt;code&gt;.conf&lt;/code&gt; files in subfolders of &lt;code&gt;/etc/apache2&lt;/code&gt; with the "Apache Conf" syntax, use (this mapping is already built in):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;--map-syntax='/etc/apache2/**/*.conf:Apache Conf'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using a different pager&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; uses the pager that is specified in the &lt;code&gt;PAGER&lt;/code&gt; environment variable. If this variable is not set, &lt;code&gt;less&lt;/code&gt; is used by default. You can also use bat's built-in pager with &lt;code&gt;--pager=builtin&lt;/code&gt; or by setting the &lt;code&gt;BAT_PAGER&lt;/code&gt; environment variable to "builtin".&lt;/p&gt; 
&lt;p&gt;If you want to use a different pager, you can either modify the &lt;code&gt;PAGER&lt;/code&gt; variable or set the &lt;code&gt;BAT_PAGER&lt;/code&gt; environment variable to override what is specified in &lt;code&gt;PAGER&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If &lt;code&gt;PAGER&lt;/code&gt; is &lt;code&gt;more&lt;/code&gt; or &lt;code&gt;most&lt;/code&gt;, &lt;code&gt;bat&lt;/code&gt; will silently use &lt;code&gt;less&lt;/code&gt; instead to ensure support for colors.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you want to pass command-line arguments to the pager, you can also set them via the &lt;code&gt;PAGER&lt;/code&gt;/&lt;code&gt;BAT_PAGER&lt;/code&gt; variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export BAT_PAGER="less -RFK"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Instead of using environment variables, you can also use &lt;code&gt;bat&lt;/code&gt;'s &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#configuration-file"&gt;configuration file&lt;/a&gt; to configure the pager (&lt;code&gt;--pager&lt;/code&gt; option).&lt;/p&gt; 
&lt;h3&gt;Using &lt;code&gt;less&lt;/code&gt; as a pager&lt;/h3&gt; 
&lt;p&gt;When using &lt;code&gt;less&lt;/code&gt; as a pager, &lt;code&gt;bat&lt;/code&gt; will automatically pass extra options along to &lt;code&gt;less&lt;/code&gt; to improve the experience. Specifically, &lt;code&gt;-R&lt;/code&gt;/&lt;code&gt;--RAW-CONTROL-CHARS&lt;/code&gt;, &lt;code&gt;-F&lt;/code&gt;/&lt;code&gt;--quit-if-one-screen&lt;/code&gt;, &lt;code&gt;-K&lt;/code&gt;/&lt;code&gt;--quit-on-intr&lt;/code&gt; and under certain conditions, &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--no-init&lt;/code&gt; and/or &lt;code&gt;-S&lt;/code&gt;/&lt;code&gt;--chop-long-lines&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] These options will not be added if:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The pager is not named &lt;code&gt;less&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;The &lt;code&gt;--pager&lt;/code&gt; argument contains any command-line arguments (e.g. &lt;code&gt;--pager="less -R"&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;The &lt;code&gt;BAT_PAGER&lt;/code&gt; environment variable contains any command-line arguments (e.g. &lt;code&gt;export BAT_PAGER="less -R"&lt;/code&gt;)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;The &lt;code&gt;--quit-if-one-screen&lt;/code&gt; option will not be added when:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The &lt;code&gt;--paging=always&lt;/code&gt; argument is used.&lt;/li&gt; 
  &lt;li&gt;The &lt;code&gt;BAT_PAGING&lt;/code&gt; environment is set to &lt;code&gt;always&lt;/code&gt;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;code&gt;-R&lt;/code&gt;/&lt;code&gt;--RAW-CONTROL-CHARS&lt;/code&gt; option is needed to interpret ANSI colors correctly.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;-F&lt;/code&gt;/&lt;code&gt;--quit-if-one-screen&lt;/code&gt; option instructs &lt;code&gt;less&lt;/code&gt; to exit immediately if the output size is smaller than the vertical size of the terminal. This is convenient for small files because you do not have to press &lt;code&gt;q&lt;/code&gt; to quit the pager.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;-K&lt;/code&gt;/&lt;code&gt;--quit-on-intr&lt;/code&gt; option instructs &lt;code&gt;less&lt;/code&gt; to exit immediately when an interrupt signal is received. This is useful to ensure that &lt;code&gt;less&lt;/code&gt; quits together with &lt;code&gt;bat&lt;/code&gt; on SIGINT.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--no-init&lt;/code&gt; option is added to versions of &lt;code&gt;less&lt;/code&gt; older than version 530 (older than 558 on Windows) to fix a bug with the &lt;code&gt;-F&lt;/code&gt;/&lt;code&gt;--quit-if-one-screen&lt;/code&gt; feature. Unfortunately, it also breaks mouse-wheel support in &lt;code&gt;less&lt;/code&gt;. If you want to enable mouse-wheel scrolling on older versions of &lt;code&gt;less&lt;/code&gt; and do not mind losing the quit-if-one-screen feature, you can set the pager (via &lt;code&gt;--pager&lt;/code&gt; or &lt;code&gt;BAT_PAGER&lt;/code&gt;) to &lt;code&gt;less -R&lt;/code&gt;. For &lt;code&gt;less&lt;/code&gt; 530 or newer, it should work out of the box.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;-S&lt;/code&gt;/&lt;code&gt;--chop-long-lines&lt;/code&gt; option is added when &lt;code&gt;bat&lt;/code&gt;'s &lt;code&gt;-S&lt;/code&gt;/&lt;code&gt;--chop-long-lines&lt;/code&gt; option is used. This tells &lt;code&gt;less&lt;/code&gt; to truncate any lines larger than the terminal width.&lt;/p&gt; 
&lt;h3&gt;Indentation&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; expands tabs to 4 spaces by itself, not relying on the pager. To change this, simply add the &lt;code&gt;--tabs&lt;/code&gt; argument with the number of spaces you want to be displayed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Defining tab stops for the pager (via the &lt;code&gt;--pager&lt;/code&gt; argument by &lt;code&gt;bat&lt;/code&gt;, or via the &lt;code&gt;LESS&lt;/code&gt; environment variable for &lt;code&gt;less&lt;/code&gt;) won't be taken into account because the pager will already get expanded spaces instead of tabs. This behaviour is added to avoid indentation issues caused by the sidebar. Calling &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;--tabs=0&lt;/code&gt; will override it and let tabs be consumed by the pager.&lt;/p&gt; 
&lt;h3&gt;Dark mode&lt;/h3&gt; 
&lt;p&gt;If you make use of the dark mode feature in &lt;strong&gt;macOS&lt;/strong&gt;, you might want to configure &lt;code&gt;bat&lt;/code&gt; to use a different theme based on the OS theme. The following snippet uses the &lt;code&gt;default&lt;/code&gt; theme when in the &lt;em&gt;dark mode&lt;/em&gt; and the &lt;code&gt;GitHub&lt;/code&gt; theme when in the &lt;em&gt;light mode&lt;/em&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;alias cat="bat --theme auto:system --theme-dark default --theme-light GitHub"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The same dark mode feature is now available in &lt;strong&gt;GNOME&lt;/strong&gt; and affects the &lt;code&gt;org.gnome.desktop.interface color-scheme&lt;/code&gt; setting. The following code converts the above to use said setting.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# .bashrc
sys_color_scheme_is_dark() {
    condition=$(gsettings get org.gnome.desktop.interface color-scheme)
    condition=$(echo "$condition" | tr -d "[:space:]'")
    if [ $condition == "prefer-dark" ]; then
        return 0
    else
        return 1
    fi
}

bat_alias_wrapper() {
    #get color scheme
    sys_color_scheme_is_dark
    if [[ $? -eq 0 ]]; then
        # bat command with dark color scheme
        bat --theme=default "$@"
    else
        # bat command with light color scheme
        bat --theme=GitHub "$@"
    fi
}
alias cat='bat_alias_wrapper'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration file&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; can also be customized with a configuration file. The location of the file is dependent on your operating system. To get the default path for your system, call&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat --config-file
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can use &lt;code&gt;BAT_CONFIG_PATH&lt;/code&gt; or &lt;code&gt;BAT_CONFIG_DIR&lt;/code&gt; environment variables to point &lt;code&gt;bat&lt;/code&gt; to a non-default location of the configuration file or the configuration directory respectively:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export BAT_CONFIG_PATH="/path/to/bat/bat.conf"
export BAT_CONFIG_DIR="/path/to/bat"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A default configuration file can be created with the &lt;code&gt;--generate-config-file&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat --generate-config-file
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is also now a systemwide configuration file, which is located under &lt;code&gt;/etc/bat/config&lt;/code&gt; on Linux and Mac OS and &lt;code&gt;C:\ProgramData\bat\config&lt;/code&gt; on windows. If the system wide configuration file is present, the content of the user configuration will simply be appended to it.&lt;/p&gt; 
&lt;h3&gt;Format&lt;/h3&gt; 
&lt;p&gt;The configuration file is a simple list of command line arguments. Use &lt;code&gt;bat --help&lt;/code&gt; to see a full list of possible options and values. In addition, you can add comments by prepending a line with the &lt;code&gt;#&lt;/code&gt; character.&lt;/p&gt; 
&lt;p&gt;Example configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Set the theme to "TwoDark"
--theme="TwoDark"

# Show line numbers, Git modifications and file header (but no grid)
--style="numbers,changes,header"

# Use italic text on the terminal (not supported on all terminals)
--italic-text=always

# Use C++ syntax for Arduino .ino files
--map-syntax "*.ino:C++"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Using &lt;code&gt;bat&lt;/code&gt; on Windows&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; mostly works out-of-the-box on Windows, but a few features may need extra configuration.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;You will need to install the &lt;a href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads"&gt;Visual C++ Redistributable&lt;/a&gt; package.&lt;/p&gt; 
&lt;h3&gt;Paging&lt;/h3&gt; 
&lt;p&gt;Windows only includes a very limited pager in the form of &lt;code&gt;more&lt;/code&gt;. You can download a Windows binary for &lt;code&gt;less&lt;/code&gt; &lt;a href="http://www.greenwoodsoftware.com/less/download.html"&gt;from its homepage&lt;/a&gt; or &lt;a href="https://chocolatey.org/packages/Less"&gt;through Chocolatey&lt;/a&gt;. To use it, place the binary in a directory in your &lt;code&gt;PATH&lt;/code&gt; or &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#using-a-different-pager"&gt;define an environment variable&lt;/a&gt;. The &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#on-windows"&gt;Chocolatey package&lt;/a&gt; installs &lt;code&gt;less&lt;/code&gt; automatically.&lt;/p&gt; 
&lt;h3&gt;Colors&lt;/h3&gt; 
&lt;p&gt;Windows 10 natively supports colors in both &lt;code&gt;conhost.exe&lt;/code&gt; (Command Prompt) and PowerShell since &lt;a href="https://en.wikipedia.org/wiki/Windows_10_version_history#Version_1511_(November_Update)"&gt;v1511&lt;/a&gt;, as well as in newer versions of bash. On earlier versions of Windows, you can use &lt;a href="http://cmder.app/"&gt;Cmder&lt;/a&gt;, which includes &lt;a href="https://conemu.github.io/"&gt;ConEmu&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Old versions of &lt;code&gt;less&lt;/code&gt; do not correctly interpret colors on Windows. To fix this, you can add the optional Unix tools to your PATH when installing Git. If you don’t have any other pagers installed, you can disable paging entirely by passing &lt;code&gt;--paging=never&lt;/code&gt; or by setting &lt;code&gt;BAT_PAGER&lt;/code&gt; to an empty string.&lt;/p&gt; 
&lt;h3&gt;Cygwin&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; on Windows does not natively support Cygwin's unix-style paths (&lt;code&gt;/cygdrive/*&lt;/code&gt;). When passed an absolute cygwin path as an argument, &lt;code&gt;bat&lt;/code&gt; will encounter the following error: &lt;code&gt;The system cannot find the path specified. (os error 3)&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This can be solved by creating a wrapper or adding the following function to your &lt;code&gt;.bash_profile&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bat() {
    local index
    local args=("$@")
    for index in $(seq 0 ${#args[@]}) ; do
        case "${args[index]}" in
        -*) continue;;
        *)  [ -e "${args[index]}" ] &amp;amp;&amp;amp; args[index]="$(cygpath --windows "${args[index]}")";;
        esac
    done
    command bat "${args[@]}"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;h3&gt;Garbled output&lt;/h3&gt; 
&lt;p&gt;If an input file contains color codes or other ANSI escape sequences or control characters, &lt;code&gt;bat&lt;/code&gt; will have problems performing syntax highlighting and text wrapping, and thus the output can become garbled.&lt;/p&gt; 
&lt;p&gt;If your version of &lt;code&gt;bat&lt;/code&gt; supports the &lt;code&gt;--strip-ansi=auto&lt;/code&gt; option, it can be used to remove such sequences before syntax highlighting. Alternatively, you may disable both syntax highlighting and wrapping by passing the &lt;code&gt;--color=never --wrap=never&lt;/code&gt; options to &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The &lt;code&gt;auto&lt;/code&gt; option of &lt;code&gt;--strip-ansi&lt;/code&gt; avoids removing escape sequences when the syntax is plain text.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Terminals &amp;amp; colors&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; handles terminals &lt;em&gt;with&lt;/em&gt; and &lt;em&gt;without&lt;/em&gt; truecolor support. However, the colors in most syntax highlighting themes are not optimized for 8-bit colors. It is therefore strongly recommended that you use a terminal with 24-bit truecolor support (&lt;code&gt;terminator&lt;/code&gt;, &lt;code&gt;konsole&lt;/code&gt;, &lt;code&gt;iTerm2&lt;/code&gt;, ...), or use one of the basic &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/#8-bit-themes"&gt;8-bit themes&lt;/a&gt; designed for a restricted set of colors. See &lt;a href="https://gist.github.com/XVilka/8346728"&gt;this article&lt;/a&gt; for more details and a full list of terminals with truecolor support.&lt;/p&gt; 
&lt;p&gt;Make sure that your truecolor terminal sets the &lt;code&gt;COLORTERM&lt;/code&gt; variable to either &lt;code&gt;truecolor&lt;/code&gt; or &lt;code&gt;24bit&lt;/code&gt;. Otherwise, &lt;code&gt;bat&lt;/code&gt; will not be able to determine whether or not 24-bit escape sequences are supported (and fall back to 8-bit colors).&lt;/p&gt; 
&lt;h3&gt;Line numbers and grid are hardly visible&lt;/h3&gt; 
&lt;p&gt;Please try a different theme (see &lt;code&gt;bat --list-themes&lt;/code&gt; for a list). The &lt;code&gt;OneHalfDark&lt;/code&gt; and &lt;code&gt;OneHalfLight&lt;/code&gt; themes provide grid and line colors that are brighter.&lt;/p&gt; 
&lt;h3&gt;File encodings&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; natively supports UTF-8 as well as UTF-16. For every other file encoding, you may need to convert to UTF-8 first because the encodings can typically not be auto-detected. You can &lt;code&gt;iconv&lt;/code&gt; to do so. Example: if you have a PHP file in Latin-1 (ISO-8859-1) encoding, you can call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;iconv -f ISO-8859-1 -t UTF-8 my-file.php | bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: you might have to use the &lt;code&gt;-l&lt;/code&gt;/&lt;code&gt;--language&lt;/code&gt; option if the syntax can not be auto-detected by &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Recursive clone to retrieve all submodules
git clone --recursive https://github.com/sharkdp/bat

# Build (debug version)
cd bat
cargo build --bins

# Run unit tests and integration tests
cargo test

# Install (release version)
cargo install --path . --locked

# Build a bat binary with modified syntaxes and themes
bash assets/create.sh
cargo install --path . --locked --force
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to build an application that uses &lt;code&gt;bat&lt;/code&gt;'s pretty-printing features as a library, check out the &lt;a href="https://docs.rs/bat/"&gt;the API documentation&lt;/a&gt;. Note that you have to use either &lt;code&gt;regex-onig&lt;/code&gt; or &lt;code&gt;regex-fancy&lt;/code&gt; as a feature when you depend on &lt;code&gt;bat&lt;/code&gt; as a library.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Take a look at the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sharkdp"&gt;sharkdp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/eth-p"&gt;eth-p&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/keith-hall"&gt;keith-hall&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Enselic"&gt;Enselic&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security vulnerabilities&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/SECURITY.md"&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Project goals and alternatives&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; tries to achieve the following goals:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Provide beautiful, advanced syntax highlighting&lt;/li&gt; 
 &lt;li&gt;Integrate with Git to show file modifications&lt;/li&gt; 
 &lt;li&gt;Be a drop-in replacement for (POSIX) &lt;code&gt;cat&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Offer a user-friendly command-line interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are a lot of alternatives, if you are looking for similar programs. See &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/doc/alternatives.md"&gt;this document&lt;/a&gt; for a comparison.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2018-2025 &lt;a href="https://github.com/sharkdp/bat"&gt;bat-developers&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; is made available under the terms of either the MIT License or the Apache License 2.0, at your option.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/sharkdp/bat/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; files for license details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stalwartlabs/stalwart</title>
      <link>https://github.com/stalwartlabs/stalwart</link>
      <description>&lt;p&gt;All-in-one Mail &amp; Collaboration server. Secure, scalable and fluent in every protocol (IMAP, JMAP, SMTP, CalDAV, CardDAV, WebDAV).&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://stalw.art"&gt; &lt;img src="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/img/logo-red.svg?sanitize=true" height="150" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt; Secure, scalable mail &amp;amp; collaboration server with comprehensive protocol support 🛡️ &lt;br /&gt;(IMAP, JMAP, SMTP, CalDAV, CardDAV, WebDAV) &lt;/h3&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/stalwartlabs/stalwart/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/stalwartlabs/stalwart/ci.yml?style=flat-square" alt="continuous integration" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.gnu.org/licenses/agpl-3.0"&gt;&lt;img src="https://img.shields.io/badge/License-AGPL_v3-blue.svg?label=license&amp;amp;style=flat-square" alt="License: AGPL v3" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://stalw.art/docs/install/get-started"&gt;&lt;img src="https://img.shields.io/badge/read_the-docs-red?style=flat-square" alt="Documentation" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://mastodon.social/@stalwartlabs"&gt;&lt;img src="https://img.shields.io/mastodon/follow/109929667531941122?style=flat-square&amp;amp;logo=mastodon&amp;amp;color=%236364ff&amp;amp;label=Follow%20on%20Mastodon" alt="Mastodon" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/stalwartlabs"&gt;&lt;img src="https://img.shields.io/twitter/follow/stalwartlabs?style=flat-square&amp;amp;logo=x&amp;amp;label=Follow%20on%20Twitter" alt="Twitter" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.com/servers/stalwart-923615863037390889"&gt;&lt;img src="https://img.shields.io/discord/923615863037390889?label=Join%20Discord&amp;amp;logo=discord&amp;amp;style=flat-square" alt="Discord" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.reddit.com/r/stalwartlabs/"&gt;&lt;img src="https://img.shields.io/reddit/subreddit-subscribers/stalwartlabs?label=Join%20%2Fr%2Fstalwartlabs&amp;amp;logo=reddit&amp;amp;style=flat-square" alt="Reddit" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Stalwart&lt;/strong&gt; is an open-source mail &amp;amp; collaboration server with JMAP, IMAP4, POP3, SMTP, CalDAV, CardDAV and WebDAV support and a wide range of modern features. It is written in Rust and designed to be secure, fast, robust and scalable.&lt;/p&gt; 
&lt;p&gt;Key features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt; server with complete protocol support: 
  &lt;ul&gt; 
   &lt;li&gt;JMAP: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8621"&gt;JMAP for Mail&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://www.ietf.org/archive/id/draft-ietf-jmap-sieve-22.html"&gt;JMAP for Sieve Scripts&lt;/a&gt;.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8887"&gt;WebSocket&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc9404.html"&gt;Blob Management&lt;/a&gt; and &lt;a href="https://www.rfc-editor.org/rfc/rfc9425.html"&gt;Quotas&lt;/a&gt; extensions.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;IMAP: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc9051"&gt;IMAP4rev2&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc3501"&gt;IMAP4rev1&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc5804"&gt;ManageSieve&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;Numerous &lt;a href="https://stalw.art/docs/development/rfcs#imap4-and-extensions"&gt;extensions&lt;/a&gt; supported.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;POP3: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc1939"&gt;POP3&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc2595"&gt;STLS&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc5034"&gt;SASL&lt;/a&gt; support as well as other &lt;a href="https://datatracker.ietf.org/doc/html/rfc2449"&gt;extensions&lt;/a&gt;.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;SMTP: 
    &lt;ul&gt; 
     &lt;li&gt;SMTP server with built-in &lt;a href="https://datatracker.ietf.org/doc/html/rfc7489"&gt;DMARC&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6376"&gt;DKIM&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc7208"&gt;SPF&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc8617"&gt;ARC&lt;/a&gt; support for message authentication.&lt;/li&gt; 
     &lt;li&gt;Strong transport security through &lt;a href="https://datatracker.ietf.org/doc/html/rfc6698"&gt;DANE&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc8461"&gt;MTA-STS&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc8460"&gt;SMTP TLS&lt;/a&gt; reporting.&lt;/li&gt; 
     &lt;li&gt;Inbound throttling and filtering with granular configuration rules, sieve scripting, MTA hooks and milter integration.&lt;/li&gt; 
     &lt;li&gt;Distributed virtual queues with delayed delivery, priority delivery, quotas, routing rules and throttling support.&lt;/li&gt; 
     &lt;li&gt;Envelope rewriting and message modification.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt; server: 
  &lt;ul&gt; 
   &lt;li&gt;Calendaring and scheduling: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc4791"&gt;CalDAV&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc6638"&gt;CalDAV Scheduling&lt;/a&gt; support.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/draft-ietf-jmap-calendars-24"&gt;JMAP for Calendars&lt;/a&gt; support.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Contact management: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc6352"&gt;CardDAV&lt;/a&gt; support.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc9610"&gt;JMAP for Contacts&lt;/a&gt; support.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;File storage: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc4918"&gt;WebDAV&lt;/a&gt; support.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/draft-ietf-jmap-filenode-03"&gt;JMAP for File Storage&lt;/a&gt; support.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Sharing with fine-grained access controls: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc3744"&gt;WebDAV ACL&lt;/a&gt; support.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc9670"&gt;JMAP Sharing&lt;/a&gt; support.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Spam&lt;/strong&gt; and &lt;strong&gt;Phishing&lt;/strong&gt; built-in filter: 
  &lt;ul&gt; 
   &lt;li&gt;Comprehensive set of filtering &lt;strong&gt;rules&lt;/strong&gt; on par with popular solutions.&lt;/li&gt; 
   &lt;li&gt;LLM-driven spam filtering and message analysis.&lt;/li&gt; 
   &lt;li&gt;Statistical &lt;strong&gt;spam classifier&lt;/strong&gt; with automatic training capabilities and address book integration.&lt;/li&gt; 
   &lt;li&gt;DNS Blocklists (&lt;strong&gt;DNSBLs&lt;/strong&gt;) checking of IP addresses, domains, and hashes.&lt;/li&gt; 
   &lt;li&gt;Collaborative digest-based spam filtering with &lt;strong&gt;Pyzor&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Phishing&lt;/strong&gt; protection against homographic URL attacks, sender spoofing and other techniques.&lt;/li&gt; 
   &lt;li&gt;Trusted &lt;strong&gt;reply&lt;/strong&gt; tracking to recognize and prioritize genuine e-mail replies.&lt;/li&gt; 
   &lt;li&gt;Sender &lt;strong&gt;reputation&lt;/strong&gt; monitoring by IP address, ASN, domain and email address.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Greylisting&lt;/strong&gt; to temporarily defer unknown senders.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Spam traps&lt;/strong&gt; to set up decoy email addresses that catch and analyze spam.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Pluggable storage backends with &lt;strong&gt;RocksDB&lt;/strong&gt;, &lt;strong&gt;FoundationDB&lt;/strong&gt;, &lt;strong&gt;PostgreSQL&lt;/strong&gt;, &lt;strong&gt;mySQL&lt;/strong&gt;, &lt;strong&gt;SQLite&lt;/strong&gt;, &lt;strong&gt;S3-Compatible&lt;/strong&gt;, &lt;strong&gt;Azure&lt;/strong&gt;, &lt;strong&gt;Redis&lt;/strong&gt; and &lt;strong&gt;ElasticSearch&lt;/strong&gt; support.&lt;/li&gt; 
   &lt;li&gt;Full-text search available in 17 languages.&lt;/li&gt; 
   &lt;li&gt;Sieve scripting language with support for all &lt;a href="https://www.iana.org/assignments/sieve-extensions/sieve-extensions.xhtml"&gt;registered extensions&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Email aliases, mailing lists, subaddressing and catch-all addresses support.&lt;/li&gt; 
   &lt;li&gt;Automatic account configuration and discovery with &lt;a href="https://www.ietf.org/id/draft-bucksch-autoconfig-02.html"&gt;autoconfig&lt;/a&gt; and &lt;a href="https://learn.microsoft.com/en-us/exchange/architecture/client-access/autodiscover?view=exchserver-2019"&gt;autodiscover&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Multi-tenancy support with domain and tenant isolation.&lt;/li&gt; 
   &lt;li&gt;Disk quotas per user and tenant.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure and robust&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Encryption at rest with &lt;strong&gt;S/MIME&lt;/strong&gt; or &lt;strong&gt;OpenPGP&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Automatic TLS certificate provisioning with &lt;a href="https://datatracker.ietf.org/doc/html/rfc8555"&gt;ACME&lt;/a&gt; using &lt;code&gt;TLS-ALPN-01&lt;/code&gt;, &lt;code&gt;DNS-01&lt;/code&gt; or &lt;code&gt;HTTP-01&lt;/code&gt; challenges.&lt;/li&gt; 
   &lt;li&gt;Automated blocking of IP addresses that attack, abuse or scan the server for exploits.&lt;/li&gt; 
   &lt;li&gt;Rate limiting.&lt;/li&gt; 
   &lt;li&gt;Security audited (read the &lt;a href="https://stalw.art/blog/security-audit"&gt;report&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;Memory safe (thanks to Rust).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scalable and fault-tolerant&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Designed to handle growth seamlessly, from small setups to large-scale deployments of thousands of nodes.&lt;/li&gt; 
   &lt;li&gt;Built with &lt;strong&gt;fault tolerance&lt;/strong&gt; and &lt;strong&gt;high availability&lt;/strong&gt; in mind, recovers from hardware or software failures with minimal operational impact.&lt;/li&gt; 
   &lt;li&gt;Peer-to-peer cluster coordination or with &lt;strong&gt;Kafka&lt;/strong&gt;, &lt;strong&gt;Redpanda&lt;/strong&gt;, &lt;strong&gt;NATS&lt;/strong&gt; or &lt;strong&gt;Redis&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;, &lt;strong&gt;Apache Mesos&lt;/strong&gt; and &lt;strong&gt;Docker Swarm&lt;/strong&gt; support for automated scaling and container orchestration.&lt;/li&gt; 
   &lt;li&gt;Read replicas, sharded blob storage and in-memory data stores for high performance and low latency.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Authentication and Authorization&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;OpenID Connect&lt;/strong&gt; authentication.&lt;/li&gt; 
   &lt;li&gt;OAuth 2.0 authorization with &lt;a href="https://www.rfc-editor.org/rfc/rfc8628"&gt;authorization code&lt;/a&gt; and &lt;a href="https://www.rfc-editor.org/rfc/rfc8628"&gt;device authorization&lt;/a&gt; flows.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;LDAP&lt;/strong&gt;, &lt;strong&gt;OIDC&lt;/strong&gt;, &lt;strong&gt;SQL&lt;/strong&gt; or built-in authentication backend support.&lt;/li&gt; 
   &lt;li&gt;Two-factor authentication with Time-based One-Time Passwords (&lt;code&gt;2FA-TOTP&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Application passwords (App Passwords).&lt;/li&gt; 
   &lt;li&gt;Roles and permissions.&lt;/li&gt; 
   &lt;li&gt;Access Control Lists (ACLs).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Logging and tracing with &lt;strong&gt;OpenTelemetry&lt;/strong&gt;, journald, log files and console support.&lt;/li&gt; 
   &lt;li&gt;Metrics with &lt;strong&gt;OpenTelemetry&lt;/strong&gt; and &lt;strong&gt;Prometheus&lt;/strong&gt; integration.&lt;/li&gt; 
   &lt;li&gt;Webhooks for event-driven automation.&lt;/li&gt; 
   &lt;li&gt;Alerts with email and webhook notifications.&lt;/li&gt; 
   &lt;li&gt;Live tracing and metrics.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web-based administration&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Dashboard with real-time statistics and monitoring.&lt;/li&gt; 
   &lt;li&gt;Account, domain, group and mailing list management.&lt;/li&gt; 
   &lt;li&gt;SMTP queue management for messages and outbound DMARC and TLS reports.&lt;/li&gt; 
   &lt;li&gt;Report visualization interface for received DMARC, TLS-RPT and Failure (ARF) reports.&lt;/li&gt; 
   &lt;li&gt;Configuration of every aspect of the mail server.&lt;/li&gt; 
   &lt;li&gt;Log viewer with search and filtering capabilities.&lt;/li&gt; 
   &lt;li&gt;Self-service portal for password reset and encryption-at-rest key management.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/img/screencast-setup.gif" /&gt; 
&lt;h2&gt;Presentation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Want a deeper dive?&lt;/strong&gt; Need to explain to your boss why Stalwart is the perfect fit? Whether you're evaluating options, making a case to your team, or simply curious about how it all works under the hood, these slides walk you through the key features, architecture, and benefits of Stalwart. Browse the &lt;a href="https://stalw.art/slides"&gt;slides&lt;/a&gt; to see what makes it stand out.&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;Install Stalwart on your server by following the instructions for your platform:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/linux"&gt;Linux / MacOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/windows"&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/docker"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All documentation is available at &lt;a href="https://stalw.art/docs/install/get-started"&gt;stalw.art/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you are having problems running Stalwart, you found a bug or just have a question, do not hesitate to reach us on &lt;a href="https://github.com/stalwartlabs/stalwart/discussions"&gt;GitHub Discussions&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/stalwartlabs"&gt;Reddit&lt;/a&gt; or &lt;a href="https://discord.com/servers/stalwart-923615863037390889"&gt;Discord&lt;/a&gt;. Additionally you may purchase an &lt;a href="https://stalw.art/enterprise"&gt;Enterprise License&lt;/a&gt; to obtain priority support from Stalwart Labs LLC.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Stalwart has reached an exciting point in its journey, it’s now &lt;strong&gt;feature complete&lt;/strong&gt;. All the core functionality and open standard email and collaboration protocols that we set out to support are in place. In other words, Stalwart already does everything you’d expect from a modern, standards-compliant mail and collaboration platform.&lt;/p&gt; 
&lt;p&gt;The next major milestone is all about refinement: finalizing the database schema and focusing on performance optimizations to ensure everything runs as efficiently and reliably as possible. Once that’s done, we’ll be ready to roll out version &lt;strong&gt;1.0&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Of course, development doesn’t stop there. The community has contributed hundreds of great ideas for improvements and new features, everything from subtle usability tweaks to entirely new integrations. You can see the full list of proposals over on our &lt;a href="https://github.com/stalwartlabs/stalwart/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3Aenhancement"&gt;GitHub issues&lt;/a&gt;. If there’s something you’d like to see prioritized, just give it a thumbs up as we plan to implement enhancements based on the community’s votes.&lt;/p&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;p&gt;Your support is crucial in helping us continue to improve the project, add new features, and maintain the highest level of quality. By &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;, you help fund the development and future of Stalwart. As a thank-you, sponsors who contribute $5 per month or more will automatically receive a &lt;a href="https://stalw.art/enterprise/"&gt;Enterprise edition&lt;/a&gt; license. And, sponsors who contribute $30 per month or more, also have access to &lt;a href="https://stalw.art/support"&gt;Premium Support&lt;/a&gt; from Stalwart Labs.&lt;/p&gt; 
&lt;p&gt;These are some of our open-source sponsors:&lt;/p&gt; 
&lt;!-- sponsors --&gt;
&lt;a href="https://github.com/kbjr"&gt;&lt;img src="https://github.com/kbjr.png" width="60px" alt="User avatar: James Brumond" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/MailRoute"&gt;&lt;img src="https://github.com/MailRoute.png" width="60px" alt="User avatar: MailRoute, Inc." /&gt;&lt;/a&gt;
&lt;a href="https://github.com/starsong-consulting"&gt;&lt;img src="https://github.com/starsong-consulting.png" width="60px" alt="User avatar: Starsong GmbH" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/mingfu-design"&gt;&lt;img src="https://github.com/mingfu-design.png" width="60px" alt="User avatar: Ming Fu Design Ltd. 明孚設計有限公司" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/tamwuff"&gt;&lt;img src="https://github.com/tamwuff.png" width="60px" alt="User avatar: Tamino" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/panascais"&gt;&lt;img src="https://github.com/panascais.png" width="60px" alt="User avatar: panascais" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/ToxicMushroom"&gt;&lt;img src="https://github.com/ToxicMushroom.png" width="60px" alt="User avatar: Merlijn" /&gt;&lt;/a&gt;
&lt;!-- sponsors --&gt; 
&lt;p&gt;&lt;br /&gt;If you would like to support our work, please consider &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Funding&lt;/h2&gt; 
&lt;p&gt;Part of the development of this project was funded through:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nlnet.nl/entrust"&gt;NGI0 Entrust Fund&lt;/a&gt;, a fund established by &lt;a href="https://nlnet.nl/"&gt;NLnet&lt;/a&gt; with financial support from the European Commission's &lt;a href="https://ngi.eu/"&gt;Next Generation Internet&lt;/a&gt; programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 101069594.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nlnet.nl/NGI0/"&gt;NGI Zero Core&lt;/a&gt;, a fund established by &lt;a href="https://nlnet.nl/"&gt;NLnet&lt;/a&gt; with financial support from the European Commission's programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 101092990.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you find the project useful you can help by &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;. Thank you!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is dual-licensed under the &lt;strong&gt;GNU Affero General Public License v3.0&lt;/strong&gt; (AGPL-3.0; as published by the Free Software Foundation) and the &lt;strong&gt;Stalwart Enterprise License v1 (SELv1)&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/AGPL-3.0-only.txt"&gt;GNU Affero General Public License v3.0&lt;/a&gt; is a free software license that ensures your freedom to use, modify, and distribute the software, with the condition that any modified versions of the software must also be distributed under the same license.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/LicenseRef-SEL.txt"&gt;Stalwart Enterprise License v1 (SELv1)&lt;/a&gt; is a proprietary license designed for commercial use. It offers additional features and greater flexibility for businesses that do not wish to comply with the AGPL-3.0 license requirements.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each file in this project contains a license notice at the top, indicating the applicable license(s). The license notice follows the &lt;a href="https://reuse.software/"&gt;REUSE guidelines&lt;/a&gt; to ensure clarity and consistency. The full text of each license is available in the &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/"&gt;LICENSES&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2020, Stalwart Labs LLC&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nushell/nushell</title>
      <link>https://github.com/nushell/nushell</link>
      <description>&lt;p&gt;A new type of shell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nushell 
 &lt;!-- omit in toc --&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/nu"&gt;&lt;img src="https://img.shields.io/crates/v/nu.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/nushell/nushell/ci.yml?branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/actions/workflows/nightly-build.yml"&gt;&lt;img src="https://github.com/nushell/nushell/actions/workflows/nightly-build.yml/badge.svg?sanitize=true" alt="Nightly Build" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NtAbbGn"&gt;&lt;img src="https://img.shields.io/discord/601130461678272522.svg?logo=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://changelog.com/podcast/363"&gt;&lt;img src="https://img.shields.io/badge/The%20Changelog-%23363-61c192.svg?sanitize=true" alt="The Changelog #363" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/graphs/commit-activity"&gt;&lt;img src="https://img.shields.io/github/commit-activity/m/nushell/nushell" alt="GitHub commit activity" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/nushell/nushell" alt="GitHub contributors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A new type of shell.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/nushell/nushell/main/assets/nushell-autocomplete6.gif" alt="Example of nushell" title="Example of nushell" /&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents 
 &lt;!-- omit in toc --&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#status"&gt;Status&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#learning-about-nu"&gt;Learning About Nu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#philosophy"&gt;Philosophy&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#pipelines"&gt;Pipelines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#opening-files"&gt;Opening files&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#goals"&gt;Goals&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#officially-supported-by"&gt;Officially Supported By&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;This project has reached a minimum-viable-product level of quality. Many people use it as their daily driver, but it may be unstable for some commands. Nu's design is subject to change as it matures.&lt;/p&gt; 
&lt;h2&gt;Learning About Nu&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://www.nushell.sh/book/"&gt;Nushell book&lt;/a&gt; is the primary source of Nushell documentation. You can find &lt;a href="https://www.nushell.sh/commands/"&gt;a full list of Nu commands in the book&lt;/a&gt;, and we have many examples of using Nu in our &lt;a href="https://www.nushell.sh/cookbook/"&gt;cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We're also active on &lt;a href="https://discord.gg/NtAbbGn"&gt;Discord&lt;/a&gt;; come and chat with us!&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To quickly install Nu:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Linux and macOS
brew install nushell
# Windows
winget install nushell
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use &lt;code&gt;Nu&lt;/code&gt; in GitHub Action, check &lt;a href="https://github.com/marketplace/actions/setup-nu"&gt;setup-nu&lt;/a&gt; for more detail.&lt;/p&gt; 
&lt;p&gt;Detailed installation instructions can be found in the &lt;a href="https://www.nushell.sh/book/installation.html"&gt;installation chapter of the book&lt;/a&gt;. Nu is available via many package managers:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/nushell/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/nushell.svg?columns=3" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For details about which platforms the Nushell team actively supports, see &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/devdocs/PLATFORM_SUPPORT.md"&gt;our platform support policy&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The default configurations can be found at &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/crates/nu-utils/src/default_files"&gt;sample_config&lt;/a&gt; which are the configuration files one gets when they startup Nushell for the first time.&lt;/p&gt; 
&lt;p&gt;It sets all of the default configuration to run Nushell. From here one can then customize this file for their specific needs.&lt;/p&gt; 
&lt;p&gt;To see where &lt;em&gt;config.nu&lt;/em&gt; is located on your system simply type this command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;$nu.config-path
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please see our &lt;a href="https://www.nushell.sh"&gt;book&lt;/a&gt; for all of the Nushell documentation.&lt;/p&gt; 
&lt;h2&gt;Philosophy&lt;/h2&gt; 
&lt;p&gt;Nu draws inspiration from projects like PowerShell, functional programming languages, and modern CLI tools. Rather than thinking of files and data as raw streams of text, Nu looks at each input as something with structure. For example, when you list the contents of a directory what you get back is a table of rows, where each row represents an item in that directory. These values can be piped through a series of steps, in a series of commands called a 'pipeline'.&lt;/p&gt; 
&lt;h3&gt;Pipelines&lt;/h3&gt; 
&lt;p&gt;In Unix, it's common to pipe between commands to split up a sophisticated command over multiple steps. Nu takes this a step further and builds heavily on the idea of &lt;em&gt;pipelines&lt;/em&gt;. As in the Unix philosophy, Nu allows commands to output to stdout and read from stdin. Additionally, commands can output structured data (you can think of this as a third kind of stream). Commands that work in the pipeline fit into one of three categories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Commands that produce a stream (e.g., &lt;code&gt;ls&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Commands that filter a stream (e.g., &lt;code&gt;where type == "dir"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Commands that consume the output of the pipeline (e.g., &lt;code&gt;table&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Commands are separated by the pipe symbol (&lt;code&gt;|&lt;/code&gt;) to denote a pipeline flowing left to right.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ls | where type == "dir" | table
# =&amp;gt; ╭────┬──────────┬──────┬─────────┬───────────────╮
# =&amp;gt; │ #  │   name   │ type │  size   │   modified    │
# =&amp;gt; ├────┼──────────┼──────┼─────────┼───────────────┤
# =&amp;gt; │  0 │ .cargo   │ dir  │     0 B │ 9 minutes ago │
# =&amp;gt; │  1 │ assets   │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  2 │ crates   │ dir  │ 4.0 KiB │ 2 weeks ago   │
# =&amp;gt; │  3 │ docker   │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  4 │ docs     │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  5 │ images   │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  6 │ pkg_mgrs │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  7 │ samples  │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  8 │ src      │ dir  │ 4.0 KiB │ 2 weeks ago   │
# =&amp;gt; │  9 │ target   │ dir  │     0 B │ a day ago     │
# =&amp;gt; │ 10 │ tests    │ dir  │ 4.0 KiB │ 2 weeks ago   │
# =&amp;gt; │ 11 │ wix      │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; ╰────┴──────────┴──────┴─────────┴───────────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because most of the time you'll want to see the output of a pipeline, &lt;code&gt;table&lt;/code&gt; is assumed. We could have also written the above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ls | where type == "dir"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Being able to use the same commands and compose them differently is an important philosophy in Nu. For example, we could use the built-in &lt;code&gt;ps&lt;/code&gt; command to get a list of the running processes, using the same &lt;code&gt;where&lt;/code&gt; as above.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ps | where cpu &amp;gt; 0
# =&amp;gt; ╭───┬───────┬───────────┬───────┬───────────┬───────────╮
# =&amp;gt; │ # │  pid  │   name    │  cpu  │    mem    │  virtual  │
# =&amp;gt; ├───┼───────┼───────────┼───────┼───────────┼───────────┤
# =&amp;gt; │ 0 │  2240 │ Slack.exe │ 16.40 │ 178.3 MiB │ 232.6 MiB │
# =&amp;gt; │ 1 │ 16948 │ Slack.exe │ 16.32 │ 205.0 MiB │ 197.9 MiB │
# =&amp;gt; │ 2 │ 17700 │ nu.exe    │  3.77 │  26.1 MiB │   8.8 MiB │
# =&amp;gt; ╰───┴───────┴───────────┴───────┴───────────┴───────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Opening files&lt;/h3&gt; 
&lt;p&gt;Nu can load file and URL contents as raw text or structured data (if it recognizes the format). For example, you can load a .toml file as structured data and explore it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml
# =&amp;gt; ╭──────────────────┬────────────────────╮
# =&amp;gt; │ bin              │ [table 1 row]      │
# =&amp;gt; │ dependencies     │ {record 25 fields} │
# =&amp;gt; │ dev-dependencies │ {record 8 fields}  │
# =&amp;gt; │ features         │ {record 10 fields} │
# =&amp;gt; │ package          │ {record 13 fields} │
# =&amp;gt; │ patch            │ {record 1 field}   │
# =&amp;gt; │ profile          │ {record 3 fields}  │
# =&amp;gt; │ target           │ {record 3 fields}  │
# =&amp;gt; │ workspace        │ {record 1 field}   │
# =&amp;gt; ╰──────────────────┴────────────────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can pipe this into a command that gets the contents of one of the columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml | get package
# =&amp;gt; ╭───────────────┬────────────────────────────────────╮
# =&amp;gt; │ authors       │ [list 1 item]                      │
# =&amp;gt; │ default-run   │ nu                                 │
# =&amp;gt; │ description   │ A new type of shell                │
# =&amp;gt; │ documentation │ https://www.nushell.sh/book/       │
# =&amp;gt; │ edition       │ 2018                               │
# =&amp;gt; │ exclude       │ [list 1 item]                      │
# =&amp;gt; │ homepage      │ https://www.nushell.sh             │
# =&amp;gt; │ license       │ MIT                                │
# =&amp;gt; │ metadata      │ {record 1 field}                   │
# =&amp;gt; │ name          │ nu                                 │
# =&amp;gt; │ repository    │ https://github.com/nushell/nushell │
# =&amp;gt; │ rust-version  │ 1.60                               │
# =&amp;gt; │ version       │ 0.72.0                             │
# =&amp;gt; ╰───────────────┴────────────────────────────────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And if needed we can drill down further:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml | get package.version
# =&amp;gt; 0.72.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Plugins&lt;/h3&gt; 
&lt;p&gt;Nu supports plugins that offer additional functionality to the shell and follow the same structured data model that built-in commands use. There are a few examples in the &lt;code&gt;crates/nu_plugins_*&lt;/code&gt; directories.&lt;/p&gt; 
&lt;p&gt;Plugins are binaries that are available in your path and follow a &lt;code&gt;nu_plugin_*&lt;/code&gt; naming convention. These binaries interact with nu via a simple JSON-RPC protocol where the command identifies itself and passes along its configuration, making it available for use. If the plugin is a filter, data streams to it one element at a time, and it can stream data back in return via stdin/stdout. If the plugin is a sink, it is given the full vector of final data and is given free reign over stdin/stdout to use as it pleases.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/nushell/awesome-nu#plugins"&gt;awesome-nu repo&lt;/a&gt; lists a variety of nu-plugins while the &lt;a href="https://github.com/nushell/showcase"&gt;showcase repo&lt;/a&gt; &lt;em&gt;shows&lt;/em&gt; off informative blog posts that have been written about Nushell along with videos that highlight technical topics that have been presented.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;Nu adheres closely to a set of goals that make up its design philosophy. As features are added, they are checked against these goals.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;First and foremost, Nu is cross-platform. Commands and techniques should work across platforms and Nu has &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/devdocs/PLATFORM_SUPPORT.md"&gt;first-class support for Windows, macOS, and Linux&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu ensures compatibility with existing platform-specific executables.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu's workflow and tools should have the usability expected of modern software in 2022 (and beyond).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu views data as either structured or unstructured. It is a structured shell like PowerShell.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Finally, Nu views data functionally. Rather than using mutation, pipelines act as a means to load, change, and save data without mutable state.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Officially Supported By&lt;/h2&gt; 
&lt;p&gt;Please submit an issue or PR to be added to this list.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/starship/starship"&gt;starship&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ohmyposh.dev"&gt;oh-my-posh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://couchbase.sh"&gt;Couchbase Shell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pypa/virtualenv"&gt;virtualenv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ellie/atuin"&gt;atuin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clap-rs/clap/tree/master/clap_complete_nushell"&gt;clap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://github.com/bevry/dorothy"&gt;Dorothy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/direnv/direnv/raw/master/docs/hook.md#nushell"&gt;Direnv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x-cmd.com/mod/nu"&gt;x-cmd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/version-fox/vfox"&gt;vfox&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt; for details. Thanks to all the people who already contributed!&lt;/p&gt; 
&lt;a href="https://github.com/nushell/nushell/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=nushell/nushell&amp;amp;max=750&amp;amp;columns=20" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The project is made available under the MIT license. See the &lt;code&gt;LICENSE&lt;/code&gt; file for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>surrealdb/surrealdb</title>
      <link>https://github.com/surrealdb/surrealdb</link>
      <description>&lt;p&gt;A scalable, distributed, collaborative, document-graph database, for the realtime web&lt;/p&gt;&lt;hr&gt;&lt;a href="https://surrealdb.com#gh-dark-mode-only" target="_blank"&gt; &lt;img width="100%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/white/hero.png" alt="SurrealDB Hero" /&gt; &lt;/a&gt; 
&lt;a href="https://surrealdb.com#gh-light-mode-only" target="_blank"&gt; &lt;img width="100%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/black/hero.png" alt="SurrealDB Hero" /&gt; &lt;/a&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/surrealdb/surrealdb"&gt;&lt;img src="https://img.shields.io/github/v/release/surrealdb/surrealdb?color=ff00a0&amp;amp;include_prereleases&amp;amp;label=version&amp;amp;sort=semver&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/surrealdb/surrealdb"&gt;&lt;img src="https://img.shields.io/badge/built_with-Rust-dca282.svg?style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/surrealdb/surrealdb/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/surrealdb/surrealdb/nightly.yml?style=flat-square&amp;amp;branch=main" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/surrealdb/license"&gt;&lt;img src="https://img.shields.io/badge/license-BSL_1.1-00bfff.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://hub.docker.com/repository/docker/surrealdb/surrealdb"&gt;&lt;img src="https://img.shields.io/docker/pulls/surrealdb/surrealdb?label=docker%20pulls&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://crates.io/crates/surrealdb"&gt;&lt;img src="https://img.shields.io/crates/d/surrealdb?color=dca282&amp;amp;label=rust&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.npmjs.com/package/surrealdb.js"&gt;&lt;img src="https://img.shields.io/npm/dt/surrealdb.js?color=f7df1e&amp;amp;label=javascript&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://pypi.org/project/surrealdb/"&gt;&lt;img src="https://img.shields.io/pepy/dt/surrealdb?color=426c99&amp;amp;label=python&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.nuget.org/packages/SurrealDb.Net"&gt;&lt;img src="https://img.shields.io/nuget/dt/surrealdb.net?color=4c2dcc&amp;amp;label=.NET&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://packagist.org/packages/surrealdb/surrealdb.php"&gt;&lt;img src="https://img.shields.io/packagist/dt/surrealdb/surrealdb.php?color=4d588b&amp;amp;label=php&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://hub.docker.com/repository/docker/surrealdb/surrealdb"&gt;&lt;img src="https://img.shields.io/github/downloads/surrealdb/surrealdb/total?color=8259dd&amp;amp;label=github%20downloads&amp;amp;style=flat-square" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://surrealdb.com/discord"&gt;&lt;img src="https://img.shields.io/discord/902568124350599239?label=discord&amp;amp;style=flat-square&amp;amp;color=5a66f6" alt="Discord" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://x.com/surrealdb"&gt;&lt;img src="https://img.shields.io/badge/x-follow_us-222222.svg?style=flat-square" alt="X" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://dev.to/surrealdb"&gt;&lt;img src="https://img.shields.io/badge/dev-join_us-86f7b7.svg?style=flat-square" alt="Dev" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.linkedin.com/company/surrealdb/"&gt;&lt;img src="https://img.shields.io/badge/linkedin-connect_with_us-0a66c2.svg?style=flat-square" alt="LinkedIn" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.youtube.com/@surrealdb"&gt;&lt;img src="https://img.shields.io/badge/youtube-subscribe-fc1c1c.svg?style=flat-square" alt="YouTube" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://surrealdb.com/blog"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/social/blog.svg?sanitize=true" alt="Blog" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/surrealdb/surrealdb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/social/github.svg?sanitize=true" alt="Github" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.linkedin.com/company/surrealdb/"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/social/linkedin.svg?sanitize=true" alt="LinkedIn" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://x.com/surrealdb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/social/x.svg?sanitize=true" alt="X" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.youtube.com/@surrealdb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/social/youtube.svg?sanitize=true" alt="YouTube" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://dev.to/surrealdb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/social/dev.svg?sanitize=true" alt="Dev" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/discord"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/social/discord.svg?sanitize=true" alt="Discord" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://stackoverflow.com/questions/tagged/surrealdb"&gt;&lt;img height="25" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/social/stack-overflow.svg?sanitize=true" alt="Stack Overflow" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/whatissurreal.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;What is SurrealDB?&lt;/h2&gt; 
&lt;p&gt;SurrealDB is an end-to-end cloud-native database designed for modern applications, including web, mobile, serverless, Jamstack, backend, and traditional applications. With SurrealDB, you can simplify your database and API infrastructure, reduce development time, and build secure, performant apps quickly and cost-effectively.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Key features of SurrealDB include:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Reduces development time&lt;/strong&gt;: SurrealDB simplifies your database and API stack by removing the need for most server-side components, allowing you to build secure, performant apps faster and cheaper.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Real-time collaborative API backend service:&lt;/strong&gt; SurrealDB functions as both a database and an API backend service, enabling real-time collaboration.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support for multiple querying languages:&lt;/strong&gt; SurrealDB supports SQL querying from client devices, GraphQL, ACID transactions, WebSocket connections, structured and unstructured data, graph querying, full-text indexing, and geospatial querying.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Granular access control&lt;/strong&gt;: SurrealDB provides row-level permissions-based access control, giving you the ability to manage data access with precision.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;View the &lt;a href="https://surrealdb.com/features"&gt;features&lt;/a&gt;, the latest &lt;a href="https://surrealdb.com/releases"&gt;releases&lt;/a&gt;, and &lt;a href="https://surrealdb.com/docs"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;img width="100%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/interface.png" alt="Surrealist" /&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/contents.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#getting-started"&gt;Getting started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#server-side-code"&gt;Server side code&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#client-side-apps"&gt;Client side apps&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#surreal-cloud"&gt;Surreal Cloud&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#install-on-macos"&gt;Install on macOS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#install-on-linux"&gt;Install on Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#install-on-windows"&gt;Install on Windows&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#run-using-docker"&gt;Run using Docker&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#quick-look"&gt;Quick look&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#why-surrealdb"&gt;Why SurrealDB&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#database-api-and-permissions"&gt;Database, API, and permissions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#tables-documents-and-graph"&gt;Tables, documents, and graph&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#advanced-inter-document-relations-and-analysis-no-joins-no-pain"&gt;Advanced inter-document relations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#simple-schema-definition-for-frontend-and-backend-development"&gt;Simple schema definition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#connect-and-query-directly-from-web-browsers-and-client-devices"&gt;Connect directly from web-browsers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#query-the-database-with-the-tools-you-want"&gt;Multiple different query methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#realtime-live-queries-and-data-changes-direct-to-application"&gt;Realtime live queries and data changes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#scale-effortlessly-to-hundreds-of-nodes-for-high-availability-and-scalability"&gt;Scale effortlessly for high-availability&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#extend-your-database-with-javascript-functions"&gt;Extend your database with JavaScript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#designed-to-be-embedded-or-to-run-distributed-in-the-cloud"&gt;Designed to be embedded or in the cloud&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#community"&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#security"&gt;Security&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/features.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Database server, or embedded library&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Multi-row, multi-table ACID transactions&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Single-node, or highly-scalable distributed mode&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Record links and directed typed graph connections&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Store structured and unstructured data&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Incrementally computed views for pre-computed advanced analytics&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Realtime-api layer, and security permissions built in&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Store and model data in any way with tables, documents, and graph&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Simple schema definition for frontend and backend development&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Connect and query directly from web-browsers and client devices&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Use embedded JavaScript functions for custom advanced functionality&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/documentation.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Documentation&lt;/h2&gt; 
&lt;p&gt;For guidance on installation, development, deployment, and administration, take a look at the following resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation: &lt;a href="https://surrealdb.com/docs"&gt;https://surrealdb.com/docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SurrealDB University: &lt;a href="https://surrealdb.com/learn/fundamentals"&gt;https://surrealdb.com/learn/fundamentals&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Aeon's Surreal Renaissance (interative book): &lt;a href="https://surrealdb.com/learn/book"&gt;https://surrealdb.com/learn/book&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/gettingstarted.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Getting started&lt;/h2&gt; 
&lt;p&gt;Getting started with SurrealDB is as easy as starting up the SurrealDB database server, choosing your platform, and integrating its SDK into your code. You can easily get started with your platform of choice by reading one of our tutorials.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Server side code&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt; &lt;a href="https://surrealdb.com/docs/integration/sdks/rust"&gt;&lt;img width="60" title="Rust" src="https://raw.githubusercontent.com/surrealdb/icons/main/rust.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/javascript"&gt;&lt;img width="60" title="JavaScript" src="https://raw.githubusercontent.com/surrealdb/icons/main/javascript.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/javascript"&gt;&lt;img width="60" title="WebAssembly" src="https://raw.githubusercontent.com/surrealdb/icons/main/webassembly.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/javascript"&gt;&lt;img width="60" title="Node.js" src="https://raw.githubusercontent.com/surrealdb/icons/main/nodejs.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/javascript"&gt;&lt;img width="60" title="Deno" src="https://raw.githubusercontent.com/surrealdb/icons/main/deno.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/python"&gt;&lt;img width="60" title="Python" src="https://raw.githubusercontent.com/surrealdb/icons/main/python.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/golang"&gt;&lt;img width="60" title="Golang" src="https://raw.githubusercontent.com/surrealdb/icons/main/golang.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/dotnet"&gt;&lt;img width="60" title=".NET" src="https://raw.githubusercontent.com/surrealdb/icons/main/dotnet.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/php"&gt;&lt;img width="60" title="PHP" src="https://raw.githubusercontent.com/surrealdb/icons/main/php.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/java"&gt;&lt;img width="60" title="Java" src="https://raw.githubusercontent.com/surrealdb/icons/main/java.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Client side apps&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt; &lt;a href="https://surrealdb.com/docs/integration/sdks/javascript"&gt;&lt;img width="60" title="JavaScript" src="https://raw.githubusercontent.com/surrealdb/icons/main/javascript.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/javascript"&gt;&lt;img width="60" title="WebAssembly" src="https://raw.githubusercontent.com/surrealdb/icons/main/webassembly.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/javascript"&gt;&lt;img width="60" title="React" src="https://raw.githubusercontent.com/surrealdb/icons/main/reactjs.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/javascript"&gt;&lt;img width="60" title="Next.js" src="https://raw.githubusercontent.com/surrealdb/icons/main/nextjs.svg?sanitize=true" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://surrealdb.com/docs/integration/sdks/ember"&gt;&lt;img width="60" title="Ember.js" src="https://raw.githubusercontent.com/surrealdb/icons/main/emberjs.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/cloud.svg?raw=true" /&gt;&amp;nbsp;&amp;nbsp;Surreal Cloud&lt;/h2&gt; 
&lt;a href="https://surrealdb.com/cloud#gh-dark-mode-only" target="_blank"&gt; &lt;img width="100%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/white/cloud.png" alt="Surreal Cloud" /&gt; &lt;/a&gt; 
&lt;a href="https://surrealdb.com/cloud#gh-light-mode-only" target="_blank"&gt; &lt;img width="100%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/black/cloud.png" alt="Surreal Cloud" /&gt; &lt;/a&gt; 
&lt;p&gt;SurrealDB is available as a &lt;a href="https://surrealist.app/cloud"&gt;hosted platform&lt;/a&gt;. Forget about infrastructure operations, monitoring, backups or capacity planning. &lt;a href="https://surrealdb.com/cloud"&gt;Surreal Cloud&lt;/a&gt; allows you to focus on building great products using the power and flexibility of SurrealDB in just a few clicks. Grow from prototype to enterprise-scale. The Surreal Cloud scalable architecture allows your database to evolve as your application grows, ensuring you are always ahead of demand. However if you want to deploy SurrealDB yourself, keep reading below.&lt;/p&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/installation.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Installation&lt;/h2&gt; 
&lt;p&gt;SurrealDB is designed to be simple to install and simple to run - using just one command from your terminal. In addition to traditional installation, SurrealDB can be installed and run with HomeBrew, Docker, or using any other container orchestration tool such as Docker Compose, Docker Swarm, Rancher, or in Kubernetes.&lt;/p&gt; 
&lt;h4&gt;&lt;a href="https://surrealdb.com/install"&gt;&lt;img width="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/apple.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp;Install on macOS&lt;/h4&gt; 
&lt;p&gt;The quickest way to get going with SurrealDB on macOS is to use Homebrew. This will install both the command-line tools, and the SurrealDB server as a single executable. If you don't use Homebrew, follow the instructions for Linux below to install SurrealDB.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew install surrealdb/tap/surreal
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to test a version with the latest features, published every night, install the &lt;code&gt;nightly&lt;/code&gt; version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew install surrealdb/tap/surreal-nightly
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="https://surrealdb.com/install"&gt;&lt;img width="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/linux.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp;Install on Linux&lt;/h4&gt; 
&lt;p&gt;The easiest and preferred way to get going with SurrealDB on Unix operating systems is to install and use the SurrealDB command-line tool. Run the following command in your terminal and follow the on-screen instructions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl --proto '=https' --tlsv1.2 -sSf https://install.surrealdb.com | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to run a beta release, before the next version is released, the &lt;code&gt;beta&lt;/code&gt; version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl --proto '=https' --tlsv1.2 -sSf https://install.surrealdb.com | sh -s -- --beta
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to test a version with the latest features, published every night, install the &lt;code&gt;nightly&lt;/code&gt; version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl --proto '=https' --tlsv1.2 -sSf https://install.surrealdb.com | sh -s -- --nightly
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="https://surrealdb.com/install"&gt;&lt;img width="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/windows.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp;Install on Windows&lt;/h4&gt; 
&lt;p&gt;The easiest and preferred way to get going with SurrealDB on Windows is to install and use the SurrealDB command-line tool. Run the following command in your terminal and follow the on-screen instructions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ps1"&gt;iwr https://windows.surrealdb.com -useb | iex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to test a version with the latest features, published every night, install the &lt;code&gt;nightly&lt;/code&gt; version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ps1"&gt;iex "&amp;amp; { $(irm https://windows.surrealdb.com) } -Nightly"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="https://surrealdb.com/install"&gt;&lt;img width="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/docker.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp;Run using Docker&lt;/h4&gt; 
&lt;p&gt;Docker can be used to manage and run SurrealDB database instances without the need to install any command-line tools. The SurrealDB docker container contains the full command-line tools for importing and exporting data from a running server, or for running a server itself.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm --pull always --name surrealdb -p 8000:8000 surrealdb/surrealdb:latest start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For just getting started with a development server running in memory, you can pass the container a basic initialization to set the user and password as root and enable logging.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm --pull always --name surrealdb -p 8000:8000 surrealdb/surrealdb:latest start --log info --user root --pass root memory
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/features.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Quick look&lt;/h2&gt; 
&lt;p&gt;With strongly-typed data types, data can be fully modelled right in the database.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;UPDATE person SET
    waist = &amp;lt;int&amp;gt; "34",
    height = &amp;lt;float&amp;gt; 201,
    score = &amp;lt;decimal&amp;gt; 0.3 + 0.3 + 0.3 + 0.1
;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Store dynamically computed fields which are calculated when retrieved.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;DEFINE FIELD can_drive ON TABLE person COMPUTED time::now() &amp;gt; birthday + 18y;
CREATE person SET birthday = d"2007-06-22";
;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Easily work with unstructured or structured data, in schema-less or schema-full mode.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;-- Create a schemafull table
DEFINE TABLE user SCHEMAFULL;

-- Specify fields on the user table
DEFINE FIELD name ON TABLE user TYPE object;
DEFINE FIELD name.first ON TABLE user TYPE string;
DEFINE FIELD name.last ON TABLE user TYPE string;
DEFINE FIELD email ON TABLE user TYPE string ASSERT string::is_email($value);

-- Add a unique index on the email field preventing duplicate values
DEFINE INDEX email ON TABLE user COLUMNS email UNIQUE;

-- Create a new event whenever a user changes their email address
DEFINE EVENT email ON TABLE user WHEN $before.email != $after.email THEN (
    CREATE event SET user = $value, time = time::now(), value = $after.email, action = 'email_changed'
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Connect records together with fully directed graph edge connections.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;-- Add a graph edge between user:tobie and article:surreal
RELATE user:tobie-&amp;gt;write-&amp;gt;article:surreal
    SET time.written = time::now()
;

-- Add a graph edge between specific users and developers
LET $from = (SELECT users FROM company:surrealdb);
LET $devs = (SELECT * FROM user WHERE tags CONTAINS 'developer');
RELATE $from-&amp;gt;like-&amp;gt;$devs UNIQUE
    SET time.connected = time::now()
;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Query data flexibly with advanced expressions and graph queries.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;-- Select a nested array, and filter based on an attribute
SELECT emails[WHERE active = true] FROM person;

-- Select all 1st, 2nd, and 3rd level people who this specific person record knows, or likes, as separate outputs
SELECT -&amp;gt;knows-&amp;gt;(? AS f1)-&amp;gt;knows-&amp;gt;(? AS f2)-&amp;gt;(knows, likes AS e3 WHERE influencer = true)-&amp;gt;(? AS f3) FROM person:tobie;

-- Select all person records (and their recipients), who have sent more than 5 emails
SELECT *, -&amp;gt;sent-&amp;gt;email-&amp;gt;to-&amp;gt;person FROM person WHERE count(-&amp;gt;sent-&amp;gt;email) &amp;gt; 5;

-- Select other products purchased by people who purchased this laptop
SELECT &amp;lt;-purchased&amp;lt;-person-&amp;gt;purchased-&amp;gt;product FROM product:laptop;

-- Select products purchased by people in the last 3 weeks who have purchased the same products that we purchased
SELECT -&amp;gt;purchased-&amp;gt;product&amp;lt;-purchased&amp;lt;-person-&amp;gt;(purchased WHERE created_at &amp;gt; time::now() - 3w)-&amp;gt;product FROM person:tobie;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Store GeoJSON geographical data types, including points, lines and polygons.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;UPDATE city:london SET
    centre = (-0.118092, 51.509865),
    boundary = {
        type: "Polygon",
        coordinates: [[
            [-0.38314819, 51.37692386], [0.1785278, 51.37692386],
            [0.1785278, 51.61460570], [-0.38314819, 51.61460570],
            [-0.38314819, 51.37692386]
        ]]
    }
;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Write custom embedded logic using JavaScript functions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;CREATE film SET
    ratings = [
        { rating: 6, user: user:bt8e39uh1ouhfm8ko8s0 },
        { rating: 8, user: user:bsilfhu88j04rgs0ga70 },
    ],
    featured = function() {
        return this.ratings.filter(r =&amp;gt; {
            return r.rating &amp;gt;= 7;
        }).map(r =&amp;gt; {
            return { ...r, rating: r.rating * 10 };
        });
    }
;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Specify granular access permissions for client and application access.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;-- Specify access permissions for the 'post' table
DEFINE TABLE post SCHEMALESS
    PERMISSIONS
        FOR select
            -- Published posts can be selected
            WHERE published = true
            -- A user can select all their own posts
            OR user = $auth.id
        FOR create, update
            -- A user can create or update their own posts
            WHERE user = $auth.id
        FOR delete
            -- A user can delete their own posts
            WHERE user = $auth.id
            -- Or an admin can delete any posts
            OR $auth.admin = true
;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/features.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Why SurrealDB?&lt;/h2&gt; 
&lt;p&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/database-api-security.jpg" /&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/multimodel-database.jpg" /&gt; &lt;/p&gt; 
&lt;h3&gt;Database, API, and permissions&lt;/h3&gt; 
&lt;p&gt;SurrealDB combines the database layer, the querying layer, and the API and authentication layer into one platform. Advanced table-based and row-based customisable access permissions allow for granular data access patterns for different types of users. There's no need for custom backend code and security rules with complicated database development.&lt;/p&gt; 
&lt;h3&gt;Tables, documents, and graph&lt;/h3&gt; 
&lt;p&gt;As a multi-model database, SurrealDB enables developers to use multiple techniques to store and model data, without having to choose a method in advance. With the use of tables, SurrealDB has similarities with relational databases, but with the added functionality and flexibility of advanced nested fields and arrays. Inter-document record links allow for simple to understand and highly-performant related queries without the use of JOINs, eliminating the N+1 query problem.&lt;/p&gt; 
&lt;p&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/graph-database.jpg" /&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/schema-direct-to-client.jpg" /&gt; &lt;/p&gt; 
&lt;h3&gt;Advanced inter-document relations and analysis. No JOINs. No pain.&lt;/h3&gt; 
&lt;p&gt;With full graph database functionality SurrealDB enables more advanced querying and analysis. Records (or vertices) can be connected to one another with edges, each with its own record properties and metadata. Simple extensions to traditional SQL queries allow for multi-table, multi-depth document retrieval, efficiently in the database, without the use of complicated JOINs and without bringing the data down to the client.&lt;/p&gt; 
&lt;h3&gt;Simple schema definition for frontend and backend development&lt;/h3&gt; 
&lt;p&gt;With SurrealDB, specify your database and API schema in one place, and define column rules and constraints just once. Once a schema is defined, database access is automatically granted to the relevant users. No more custom API code, and no more GraphQL integration. Simple, flexible, and ready for production in minutes not months.&lt;/p&gt; 
&lt;p&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/browser-sync.jpg" /&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/multiple-integrations.jpg" /&gt; &lt;/p&gt; 
&lt;h3&gt;Connect and query directly from web-browsers and client devices&lt;/h3&gt; 
&lt;p&gt;Connect directly to SurrealDB from any end-user client device. Run SurrealQL queries directly within web-browsers, ensuring that users can only view or modify the data that they are allowed to access. Highly-performant WebSocket connections allow for efficient bi-directional queries, responses and notifications.&lt;/p&gt; 
&lt;h3&gt;Query the database with the tools you want&lt;/h3&gt; 
&lt;p&gt;Your data, your choice. SurrealDB is designed to be flexible to use, with support for SurrealQL, GraphQL (coming soon), CRUD support over REST, and JSON-RPC querying and modification over WebSockets. With direct-to-client connection with in-built permissions, SurrealDB speeds up the development process, and fits in seamlessly into any tech stack.&lt;/p&gt; 
&lt;p&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/realtime-live-queries.jpg" /&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/scale-up.jpg" /&gt; &lt;/p&gt; 
&lt;h3&gt;Realtime live queries and data changes direct to application&lt;/h3&gt; 
&lt;p&gt;SurrealDB keeps every client device in-sync with data modifications pushed in realtime to the clients, applications, end-user devices, and server-side libraries. Live SQL queries allow for advanced filtering of the changes to which a client subscribes, and efficient data formats, including DIFFing and PATCHing enable highly-performant web-based data syncing.&lt;/p&gt; 
&lt;h3&gt;Scale effortlessly to hundreds of nodes for high-availability and scalability&lt;/h3&gt; 
&lt;p&gt;SurrealDB can be run as a single in-memory node, or as part of a distributed cluster - offering highly-available and highly-scalable system characteristics. Designed from the ground up to run in a distributed environment, SurrealDB makes use of special techniques when handling multi-table transactions, and document record IDs - with no use of table or row locks.&lt;/p&gt; 
&lt;p&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/database-plugins.jpg" /&gt; &lt;img width="49%" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/illustrations/cloud-or-embedded.jpg" /&gt; &lt;/p&gt; 
&lt;h3&gt;Extend your database with JavaScript functions&lt;/h3&gt; 
&lt;p&gt;Embedded JavaScript functions allow for advanced, custom functionality, with computation logic being moved to the data layer. This improves upon the traditional approach of moving data to the client devices before applying any computation logic, ensuring that only the necessary data is transferred remotely. These advanced JavaScript functions, with support for the ES2020 standard, allow any developer to analyse the data in ever more simple-yet-advanced ways.&lt;/p&gt; 
&lt;h3&gt;Designed to be embedded or to run distributed in the cloud&lt;/h3&gt; 
&lt;p&gt;Built entirely in Rust as a single library, SurrealDB is designed to be used as both an embedded database library with advanced querying functionality, and as a database server which can operate in a distributed cluster. With low memory usage and cpu requirements, the system requirements have been specifically thought through for running in all types of environment.&lt;/p&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/community.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Community&lt;/h2&gt; 
&lt;p&gt;Join our growing community around the world, for help, ideas, and discussions regarding SurrealDB.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;View our official &lt;a href="https://surrealdb.com/blog"&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chat live with us on &lt;a href="https://surrealdb.com/discord"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Follow us on &lt;a href="https://x.com/surrealdb"&gt;X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Connect with us on &lt;a href="https://www.linkedin.com/company/surrealdb/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Visit us on &lt;a href="https://www.youtube.com/@surrealdb"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join our &lt;a href="https://dev.to/surrealdb"&gt;Dev community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Questions tagged #surrealdb on &lt;a href="https://stackoverflow.com/questions/tagged/surrealdb"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/contributing.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Contributing&lt;/h2&gt; 
&lt;p&gt;We would &amp;nbsp;&lt;img width="15" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/love.svg?sanitize=true" /&gt;&amp;nbsp; for you to get involved with SurrealDB development! If you wish to help, you can learn more about how you can contribute to this project in the &lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/security.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;Security&lt;/h2&gt; 
&lt;p&gt;For security issues, view our &lt;a href="https://github.com/surrealdb/surrealdb/security/policy"&gt;vulnerability policy&lt;/a&gt;, view our &lt;a href="https://surrealdb.com/legal/security"&gt;security policy&lt;/a&gt;, and kindly email us at &lt;a href="mailto:security@surrealdb.com"&gt;security@surrealdb.com&lt;/a&gt; instead of posting a public issue on GitHub.&lt;/p&gt; 
&lt;h2&gt;&lt;img height="20" src="https://raw.githubusercontent.com/surrealdb/surrealdb/main/img/license.svg?sanitize=true" /&gt;&amp;nbsp;&amp;nbsp;License&lt;/h2&gt; 
&lt;p&gt;Source code for SurrealDB is variously licensed under a number of different licenses. A copy of each license can be found in &lt;a href="https://github.com/surrealdb"&gt;each repository&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Libraries and SDKs, each located in its own distinct repository, are released under either the &lt;a href="https://github.com/surrealdb/license/raw/main/APL.txt"&gt;Apache License 2.0&lt;/a&gt; or &lt;a href="https://github.com/surrealdb/license/raw/main/MIT.txt"&gt;MIT License&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Certain core database components, each located in its own distinct repository, are released under the &lt;a href="https://github.com/surrealdb/license/raw/main/APL.txt"&gt;Apache License 2.0&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Core database code for SurrealDB, located in &lt;a href="https://github.com/surrealdb/surrealdb"&gt;this repository&lt;/a&gt;, is released under the &lt;a href="https://raw.githubusercontent.com/surrealdb/surrealdb/main/LICENSE"&gt;Business Source License 1.1&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information, see the &lt;a href="https://github.com/surrealdb/license"&gt;licensing information&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zorp-corp/nockchain</title>
      <link>https://github.com/zorp-corp/nockchain</link>
      <description>&lt;p&gt;Nockchain protocol monorepo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nockchain&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Nockchain is programmable sound money that scales.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Nockchain is a ZK-Proof of Work L1 that combines sound money incentives with modern research into data availability, app-rollups, and intent-based composability.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Nockchain is entirely experimental and many parts are unaudited. We make no representations or guarantees as to the behavior of this software.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;Install &lt;code&gt;rustup&lt;/code&gt; by following their instructions at: &lt;a href="https://rustup.rs/"&gt;https://rustup.rs/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Ensure you have these dependencies installed if running on Debian/Ubuntu:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install clang llvm-dev libclang-dev make protobuf-compiler
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Clone the repo and cd into it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/zorp-corp/nockchain.git &amp;amp;&amp;amp; cd nockchain
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Copy the example environment file and rename it to &lt;code&gt;.env&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cp .env_example .env
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install &lt;code&gt;hoonc&lt;/code&gt;, the Hoon compiler:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make install-hoonc
export PATH="$HOME/.cargo/bin:$PATH"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(If you build manually with &lt;code&gt;cargo build&lt;/code&gt;, be sure to use &lt;code&gt;--release&lt;/code&gt; for &lt;code&gt;hoonc&lt;/code&gt;.)&lt;/p&gt; 
&lt;h2&gt;Install Wallet&lt;/h2&gt; 
&lt;p&gt;After you've run the setup and build commands, install the wallet:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make install-nockchain-wallet
export PATH="$HOME/.cargo/bin:$PATH"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the nockchain-wallet &lt;a href="https://raw.githubusercontent.com/zorp-corp/nockchain/master/crates/nockchain-wallet/README.md"&gt;README&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Install Nockchain&lt;/h2&gt; 
&lt;p&gt;After you've run the setup and build commands, install Nockchain:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make install-nockchain
export PATH="$HOME/.cargo/bin:$PATH"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Setup Keys&lt;/h2&gt; 
&lt;p&gt;To generate a new key pair:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nockchain-wallet keygen
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will print a new public/private key pair + chain code to the console, as well as the seed phrase for the private key.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;.env_example&lt;/code&gt; as a template and copy the public key to the &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;MINING_PUBKEY=&amp;lt;public-key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When the v1 protocol cut-off block-height is reached, the miner will automatically generate v1 coinbases for blocks that it mines. You will need to supply a pkh for the coinbase ahead of time by generating a v1 key using the latest wallet. pkhs cannot be generated from v0 keys.&lt;/p&gt; 
&lt;p&gt;Generate the v1 pkh by running &lt;code&gt;nockchain-wallet generate-mining-pkh&lt;/code&gt; on the latest version of the wallet. The pkh should be listed as the &lt;code&gt;Address&lt;/code&gt;. Then, in your &lt;code&gt;.env&lt;/code&gt; file, set the &lt;code&gt;MINING_PKH&lt;/code&gt; variable to the address of the v1 key you generated.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;MINING_PKH=&amp;lt;address&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To reiterate, before the upgrade cutoff, the miner will generate v0 coinbases spendable by the &lt;code&gt;MINING_PUBKEY&lt;/code&gt;. After the cutoff, it will generate v1 coinbases spendable by the &lt;code&gt;MINING_PKH&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Backup Keys&lt;/h2&gt; 
&lt;p&gt;To backup your keys, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nockchain-wallet export-keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will save your keys to a file called &lt;code&gt;keys.export&lt;/code&gt; in the current directory.&lt;/p&gt; 
&lt;p&gt;They can be imported later with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nockchain-wallet import-keys --file keys.export
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Running Nodes&lt;/h2&gt; 
&lt;p&gt;Make sure your current directory is nockchain.&lt;/p&gt; 
&lt;p&gt;To run a Nockchain node without mining.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash ./scripts/run_nockchain_node.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run a Nockchain node and mine to a pubkey:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash ./scripts/run_nockchain_miner.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For launch, make sure you run in a fresh working directory that does not include a .data.nockchain file from testing.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Can I use same pubkey if running multiple miners?&lt;/h3&gt; 
&lt;p&gt;Yes, you can use the same pubkey if running multiple miners.&lt;/p&gt; 
&lt;h3&gt;How do I change the mining pubkey?&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;nockchain-wallet keygen&lt;/code&gt; to generate a new key pair.&lt;/p&gt; 
&lt;p&gt;If you are using the Makefile workflow, copy the public key to the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; 
&lt;h3&gt;How do I run a testnet?&lt;/h3&gt; 
&lt;p&gt;To run a testnet on your machine, follow the same instructions as above, except use the fakenet scripts provided in the &lt;code&gt;scripts&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;Here's how to set it up:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;Make sure you have the most up-to-date version of Nockchain installed.

Inside of the nockchain directory:

# Create directories for each instance
mkdir fakenet-hub fakenet-node

# Copy .env to each directory
cp .env fakenet-hub/
cp .env fakenet-node/

# Run each instance in its own directory with .env loaded
cd fakenet-hub &amp;amp;&amp;amp; sh ../scripts/run_nockchain_node_fakenet.sh
cd fakenet-node &amp;amp;&amp;amp; sh ../scripts/run_nockchain_miner_fakenet.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The hub script is bound to a fixed multiaddr and the node script sets that multiaddr as an initial peer so that nodes have a way of discovering eachother initially.&lt;/p&gt; 
&lt;p&gt;You can run multiple instances using &lt;code&gt;run_nockchain_miner_fakenet.sh&lt;/code&gt;, just make sure that you are running them from different directories because the checkpoint data is located in the working directory of the script.&lt;/p&gt; 
&lt;h3&gt;What are the networking requirements?&lt;/h3&gt; 
&lt;p&gt;Nockchain requires:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Internet.&lt;/li&gt; 
 &lt;li&gt;If you are behind a firewall, you need to specify the p2p ports to use and open them.. 
  &lt;ul&gt; 
   &lt;li&gt;Example: &lt;code&gt;nockchain --bind /ip4/0.0.0.0/udp/$PEER_PORT/quic-v1&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;NAT Configuration (if you are behind one)&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;If behind NAT, configure port forwarding for the peer port&lt;/li&gt; 
   &lt;li&gt;Use &lt;code&gt;--bind&lt;/code&gt; to specify your public IP/domain&lt;/li&gt; 
   &lt;li&gt;Example: &lt;code&gt;nockchain --bind /ip4/1.2.3.4/udp/$PEER_PORT/quic-v1&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Why aren't Zorp peers connecting?&lt;/h3&gt; 
&lt;p&gt;Common reasons for peer connection failures:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Network Issues&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Firewall blocking P2P port&lt;/li&gt; 
   &lt;li&gt;NAT not properly configured&lt;/li&gt; 
   &lt;li&gt;Incorrect bind address&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configuration Issues&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Invalid peer IDs&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Debug Steps&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Check logs for connection errors&lt;/li&gt; 
   &lt;li&gt;Verify port forwarding&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;What do outgoing connection failures mean?&lt;/h3&gt; 
&lt;p&gt;Outgoing connection failures can occur due to:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Network Issues&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Peer is offline&lt;/li&gt; 
   &lt;li&gt;Firewall blocking connection&lt;/li&gt; 
   &lt;li&gt;NAT traversal failure&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Peer Issues&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Peer has reached connection limit&lt;/li&gt; 
   &lt;li&gt;Peer is blocking your IP&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Debug Steps&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Check peer's status&lt;/li&gt; 
   &lt;li&gt;Verify network connectivity&lt;/li&gt; 
   &lt;li&gt;Check logs for specific error messages&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;How do I know if it's mining?&lt;/h3&gt; 
&lt;p&gt;You can check the logs for mining activity.&lt;/p&gt; 
&lt;p&gt;If you see a line that looks like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;[%mining-on 12.040.301.481.503.404.506 17.412.404.101.022.637.021 1.154.757.196.846.835.552 12.582.351.418.886.020.622 6.726.267.510.179.724.279]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How do I check block height?&lt;/h3&gt; 
&lt;p&gt;You can check the logs for a line like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;block Vo3d2Qjy1YHMoaHJBeuQMgi4Dvi3Z2GrcHNxvNYAncgzwnQYLWnGVE added to validated blocks at 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That last number is the block height.&lt;/p&gt; 
&lt;h3&gt;What do common errors mean?&lt;/h3&gt; 
&lt;p&gt;Common errors and their solutions:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Connection Errors&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;Failed to dial peer&lt;/code&gt;: Network connectivity issues, you may still be connected though.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Handshake with the remote timed out&lt;/code&gt;: Peer might be offline, not a fatal issue.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;How do I check wallet balance?&lt;/h3&gt; 
&lt;p&gt;To check your wallet balance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# List all notes by pubkey
nockchain-wallet list-notes-by-address &amp;lt;your-base58-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How do I configure logging levels?&lt;/h3&gt; 
&lt;p&gt;To reduce logging verbosity, you can set the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable before running nockchain:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Show only info and above
RUST_LOG=info nockchain

# Show only errors
RUST_LOG=error nockchain

# Show specific module logs (e.g. only p2p events)
RUST_LOG=nockchain_libp2p_io=info nockchain

# Multiple modules with different levels
RUST_LOG=nockchain_libp2p_io=info,nockchain=warn nockchain
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Common log levels from most to least verbose:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;trace&lt;/code&gt;: Very detailed debugging information&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;: Debugging information&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;info&lt;/code&gt;: General operational information&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;warn&lt;/code&gt;: Warning messages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;error&lt;/code&gt;: Error messages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also add this to your &lt;code&gt;.env&lt;/code&gt; file if you're running with the Makefile:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;RUST_LOG=info
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How do profile for performance?&lt;/h3&gt; 
&lt;p&gt;Here's a demo video for the Tracy integration in Nockchain: &lt;a href="https://x.com/nockchain/status/1948109668171051363"&gt;https://x.com/nockchain/status/1948109668171051363&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The main change since the video is tracing is now enabled by default. If you want to disable it you can &lt;a href="https://doc.rust-lang.org/cargo/reference/features.html#the-default-feature"&gt;disable&lt;/a&gt; the &lt;code&gt;tracing-tracy&lt;/code&gt; feature here. The tracing is &lt;a href="https://www.google.com/search?q=inhibit+definition&amp;amp;sca_esv=677f3ddbc8bf65e8&amp;amp;ei=hnSCaJuSGIGlqtsP96qM0QE&amp;amp;ved=0ahUKEwib7Z60idaOAxWBkmoFHXcVIxoQ4dUDCBA&amp;amp;uact=5&amp;amp;oq=inhibit+definition&amp;amp;gs_lp=Egxnd3Mtd2l6LXNlcnAiEmluaGliaXQgZGVmaW5pdGlvbjITEAAYgAQYkQIYsQMYigUYRhj5ATIGEAAYFhgeMgYQABgWGB4yBhAAGBYYHjIGEAAYFhgeMgYQABgWGB4yBhAAGBYYHjIGEAAYFhgeMgYQABgWGB4yBhAAGBYYHjItEAAYgAQYkQIYsQMYigUYRhj5ARiXBRiMBRjdBBhGGPkBGPQDGPUDGPYD2AEBSIgaUMgFWIgZcAR4AJABAJgBeaAB7AqqAQQxOS4yuAEDyAEA-AEBmAIZoAKpC8ICDhAAGIAEGLADGIYDGIoFwgILEAAYgAQYsAMYogTCAhAQABiABBiRAhiKBRhGGPkBwgIKEAAYgAQYQxiKBcICCxAAGIAEGJECGIoFwgILEAAYgAQYsQMYgwHCAg4QABiABBixAxiDARiKBcICBRAuGIAEwgIREC4YgAQYsQMY0QMYgwEYxwHCAioQABiABBiRAhiKBRhGGPkBGJcFGIwFGN0EGEYY-QEY9AMY9QMY9gPYAQHCAg8QABiABBhDGIoFGEYY-QHCAikQABiABBhDGIoFGEYY-QEYlwUYjAUY3QQYRhj5ARj0Axj1Axj2A9gBAcICCBAuGIAEGLEDwgIIEAAYgAQYsQPCAi0QABiABBiRAhixAxiKBRhGGPkBGJcFGIwFGN0EGEYY-QEY9AMY9QMY9gPYAQHCAg0QABiABBixAxhDGIoFwgIFEAAYgATCAhEQABiABBiRAhixAxiDARiKBcICChAuGIAEGLEDGArCAgcQABiABBgKwgIKEAAYgAQYsQMYCsICBxAuGIAEGArCAg0QABiABBixAxiDARgKwgIOEAAYgAQYkQIYsQMYigXCAggQABgWGAoYHpgDAIgGAZAGBboGBggBEAEYE5IHBDIzLjKgB_ePArIHBDE5LjK4B6ALwgcGMC4yNC4xyAc5&amp;amp;sclient=gws-wiz-serp"&gt;inhibited&lt;/a&gt; by default, it only collects traces when a &lt;a href="https://github.com/wolfpld/tracy"&gt;Tracy profiler client&lt;/a&gt; connects to the application. This means minimal (9% or less for the nockvm, shouldn't impact jetted mining) performance impact but the profiling data is available any time you'd like to connect your Nockchain instance.&lt;/p&gt; 
&lt;p&gt;There are two main kinds of performance data Tracy will gather from your application. Instrumentation and samples. Instrumentation comes from the &lt;a href="https://docs.rs/tracing/latest/tracing/"&gt;tracing crate's&lt;/a&gt; spans. The integration with &lt;a href="https://github.com/zorp-corp/nockchain/tree/master/crates/nockvm"&gt;nockvm&lt;/a&gt; is via the same &lt;code&gt;tracing&lt;/code&gt; spans. Samples are &lt;em&gt;stack samples&lt;/em&gt;, so it's not a perfectly and minutely traced picture of where your time was spent. However, the default sampling rate for Tracy is &lt;em&gt;very&lt;/em&gt; high but very efficient. You should expect a problematic performance impact from connecting Tracy to an instance if every single core and hyperthread is maxed out on your machine. You should be leaving some spare threads unoccupied even on a mining instance for the Serf thread and the kernel anyway. We (Zorp Corp) generally left 4 threads unused on each mining server.&lt;/p&gt; 
&lt;p&gt;Stack samples are roughly speaking the "native" or Rust part of the application whereas instrumentation is the nockvm spans showing how much time you're spending in your Hoon arms plus any Rust functions that were also instrumented. You can tell them apart because the spans for Hoon will have weird paths like &lt;code&gt;blart/boop/snoot/goof/slam/woof&lt;/code&gt; and no source location in the Tracy profiler UI. The Rust spans will have much plainer names mapping onto whatever the function was named, so a function like &lt;code&gt;fn slam()&lt;/code&gt; will show up in the instrumentation as &lt;code&gt;slam&lt;/code&gt; and have a source location path ending in a &lt;code&gt;*.rs&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;What makes this especially powerful is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The profiling data is now unified into a single tool. Previously we used &lt;code&gt;samply&lt;/code&gt; for Rust/native code and the JSON (nockvm) traces for the Hoon.&lt;/li&gt; 
 &lt;li&gt;Tracy can attribute what native stack samples&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;OK, but how do I get started?&lt;/h4&gt; 
&lt;p&gt;Build the application like normal, it's enabled by default. No special CLI arguments, it's &lt;em&gt;enabled by default&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Get a copy of the Tracy profiler client, it's a GUI C++ application that uses dear imgui. They may not have a release binary for your platform so you may need to build it yourself. Here's a tip: steal the build commands for Linux/macOS &lt;a href="https://github.com/wolfpld/tracy/raw/6f3a023df871e180151d2e86fb656e8122e274eb/.github/workflows/linux.yml#L24-L25"&gt;from here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;They're using Arch Linux, so make sure you have these equivalent packages installed for your platform:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pacman -Syu --noconfirm &amp;amp;&amp;amp; pacman -S --noconfirm --needed freetype2 debuginfod wayland dbus libxkbcommon libglvnd meson cmake git wayland-protocols nodejs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then to build the GUI app:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -B profiler/build -S profiler -DCMAKE_BUILD_TYPE=Release -DGIT_REV=${{ github.sha }}
cmake --build profiler/build --parallel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that your Tracy profiler GUI version and the &lt;a href="https://github.com/nagisa/rust_tracy_client?tab=readme-ov-file#version-support-table"&gt;Tracy client library version &lt;em&gt;must&lt;/em&gt; match&lt;/a&gt; or it will not work and will refuse to connect. It'll tell you why too.&lt;/p&gt; 
&lt;p&gt;If your Nockchain instance is running locally on the same machine as your Tracy profiler client GUI it will pop up in the connect menu automatically. If you're using &lt;code&gt;ssh&lt;/code&gt; to connect to a remote server (see below re: security) then you will need to add the port to &lt;code&gt;127.0.0.1&lt;/code&gt; like so: &lt;code&gt;127.0.0.1:8087&lt;/code&gt; and hit connect after establishing the ssh connection with the port mapping.&lt;/p&gt; 
&lt;p&gt;By default you'll only get instrumentation, not the stack samples, generally speaking. To enable stack samples you need to change some security parameters on your Linux server. Stack sampling doesn't work on macOS natively at all, if you want to profile something with stack samples on macOS, run it in Docker with a permissive seccomp profile.&lt;/p&gt; 
&lt;p&gt;Here's what you'd need to do on a typical Linux server running Ubuntu LTS to enable stack samples:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
echo 1 | sudo tee /proc/sys/kernel/perf_event_paranoid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Nerfing &lt;code&gt;perf_event_paranoid&lt;/code&gt; might be enough by itself, ymmv. This commands only set these &lt;code&gt;sysctl&lt;/code&gt; parameters until the server gets rebooted. Create a permanent &lt;code&gt;sysctl&lt;/code&gt; config in &lt;code&gt;/etc&lt;/code&gt; if you want to make it permanent. You might need to restart the process after changing the parameters as well.&lt;/p&gt; 
&lt;h4&gt;Tracy, profiling, and security&lt;/h4&gt; 
&lt;p&gt;Do &lt;em&gt;not&lt;/em&gt; expose the port the tracy server binds to from the Nockchain application instance to servers or networks you do not control end-to-end. If you have a server hosted in the cloud or a leased dedicated server, leave it private and use &lt;code&gt;ssh&lt;/code&gt; to create a local proxy for the port on your dev machine.&lt;/p&gt; 
&lt;p&gt;When I demo'd Tracy here's the ssh command I used:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ssh -L 8087:backbone-us-south-mig:8086 backbone-us-south-mig
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;backbone-us-south-mig&lt;/code&gt; is a hostname reference from my &lt;code&gt;~/.ssh/config&lt;/code&gt; that we generate from a script I wrote to inject an Ansible inventory into the local SSH configuration. I'm using port &lt;code&gt;8087&lt;/code&gt; for the local binding because running the Tracy profiler GUI binds port 8086.&lt;/p&gt; 
&lt;h3&gt;Troubleshooting Common Issues&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Node Won't Start&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Check port availability&lt;/li&gt; 
   &lt;li&gt;Verify .env configuration&lt;/li&gt; 
   &lt;li&gt;Check for existing .data.nockchain file&lt;/li&gt; 
   &lt;li&gt;Ensure proper permissions&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Peers Connecting&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Verify port forwarding&lt;/li&gt; 
   &lt;li&gt;Check firewall settings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mining Not Working&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Verify mining pubkey&lt;/li&gt; 
   &lt;li&gt;Check --mine flag&lt;/li&gt; 
   &lt;li&gt;Ensure peers are connected&lt;/li&gt; 
   &lt;li&gt;Check system resources&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wallet Issues&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Verify key import/export&lt;/li&gt; 
   &lt;li&gt;Check socket connection&lt;/li&gt; 
   &lt;li&gt;Ensure proper permissions&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as below, without any additional terms or conditions.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Licensed under either of&lt;/p&gt; 
&lt;p&gt;Apache License, Version 2.0 (LICENSE-APACHE or &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;) MIT license (LICENSE-MIT or &lt;a href="https://opensource.org/licenses/MIT"&gt;https://opensource.org/licenses/MIT&lt;/a&gt;) at your option.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jj-vcs/jj</title>
      <link>https://github.com/jj-vcs/jj</link>
      <description>&lt;p&gt;A Git-compatible VCS that is both simple and powerful&lt;/p&gt;&lt;hr&gt;&lt;div class="title-block" style="text-align: center;" align="center"&gt; 
 &lt;h1&gt;Jujutsu—a version control system&lt;/h1&gt; 
 &lt;p&gt;&lt;img title="jj logo" src="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/jj-logo.svg?sanitize=true" width="320" height="320" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/martinvonz/jj" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/release-date/martinvonz/jj" alt="Release date" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/jj-vcs/jj/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/martinvonz/jj" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;img src="https://img.shields.io/badge/irc-%23jujutsu-blue.svg?sanitize=true" alt="IRC" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj"&gt;Homepage&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;Installation&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/roadmap"&gt;Development Roadmap&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Jujutsu is a powerful &lt;a href="https://en.wikipedia.org/wiki/Version_control"&gt;version control system&lt;/a&gt; for software projects. You use it to get a copy of your code, track changes to the code, and finally publish those changes for others to see and use. It is designed from the ground up to be easy to use—whether you're new or experienced, working on brand new projects alone, or large scale software projects with large histories and teams.&lt;/p&gt; 
&lt;p&gt;Jujutsu is unlike most other systems, because internally it abstracts the user interface and version control algorithms from the &lt;em&gt;storage systems&lt;/em&gt; used to serve your content. This allows it to serve as a VCS with many possible physical backends, that may have their own data or networking models—like &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt; or &lt;a href="https://www.breezy-vcs.org/"&gt;Breezy&lt;/a&gt;, or hybrid systems like Google's cloud-based design, &lt;a href="https://youtu.be/W71BTkUbdqE?t=645"&gt;Piper/CitC&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Today, we use Git repositories as a storage layer to serve and track content, making it &lt;strong&gt;compatible with many of your favorite Git-based tools, right now!&lt;/strong&gt; All core developers use Jujutsu to develop Jujutsu, right here on GitHub. But it should hopefully work with your favorite Git forges, too.&lt;/p&gt; 
&lt;p&gt;We combine many distinct design choices and concepts from other version control systems into a single tool. Some of those sources of inspiration include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;: We make an effort to &lt;a href="https://github.com/jj-vcs/jj/discussions/49"&gt;be fast&lt;/a&gt;—with a snappy UX, efficient algorithms, correct data structures, and good-old-fashioned attention to detail. The default storage backend uses Git repositories for "physical storage", for wide interoperability and ease of onboarding.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mercurial &amp;amp; Sapling&lt;/strong&gt;: There are many Mercurial-inspired features, such as the &lt;a href="https://jj-vcs.github.io/jj/latest/revsets/"&gt;revset&lt;/a&gt; language to select commits. There is &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison/#the-index"&gt;no explicit index&lt;/a&gt; or staging area. Branches are "anonymous" like Mercurial, so you don't need to make up a name for each small change. Primitives for rewriting history are powerful and simple. Formatting output is done with a robust template language that can be configured by the user.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Darcs&lt;/strong&gt;: Jujutsu keeps track of conflicts as &lt;a href="https://jj-vcs.github.io/jj/latest/conflicts/"&gt;first-class objects&lt;/a&gt; in its model; they are first-class in the same way commits are, while alternatives like Git simply think of conflicts as textual diffs. While not as rigorous as systems like Darcs (which is based on a formalized theory of patches, as opposed to snapshots), the effect is that many forms of conflict resolution can be performed and propagated automatically.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And it adds several innovative, useful features of its own:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Working-copy-as-a-commit&lt;/strong&gt;: Changes to files are &lt;a href="https://jj-vcs.github.io/jj/latest/working-copy/"&gt;recorded automatically&lt;/a&gt; as normal commits, and amended on every subsequent change. This "snapshot" design simplifies the user-facing data model (commits are the only visible object), simplifies internal algorithms, and completely subsumes features like Git's stashes or the index/staging-area.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Operation log &amp;amp; undo&lt;/strong&gt;: Jujutsu records every operation that is performed on the repository, from commits, to pulls, to pushes. This makes debugging problems like "what just happened?" or "how did I end up here?" easier, &lt;em&gt;especially&lt;/em&gt; when you're helping your coworker answer those questions about their repository! And because everything is recorded, you can undo that mistake you just made with ease. Version control has finally entered &lt;a href="https://en.wikipedia.org/wiki/Undo#History"&gt;the 1960s&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic rebase and conflict resolution&lt;/strong&gt;: When you modify a commit, every descendent is automatically rebased on top of the freshly-modified one. This makes "patch-based" workflows a breeze. If you resolve a conflict in a commit, the &lt;em&gt;resolution&lt;/em&gt; of that conflict is also propagated through descendants as well. In effect, this is a completely transparent version of &lt;code&gt;git rebase --update-refs&lt;/code&gt; combined with &lt;code&gt;git rerere&lt;/code&gt;, supported by design.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The following features are available for use, but experimental; they may have bugs, backwards incompatible storage changes, and user-interface changes!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Safe, concurrent replication&lt;/strong&gt;: Have you ever wanted to store your version controlled repositories inside a Dropbox folder? Or continuously backup repositories to S3? No? Well, now you can!&lt;/p&gt; &lt;p&gt;The fundamental problem with using filesystems like Dropbox and backup tools like &lt;code&gt;rsync&lt;/code&gt; on your typical Git/Mercurial repositories is that they rely on &lt;em&gt;local filesystem operations&lt;/em&gt; being atomic, serialized, and non-concurrent with respect to other reads and writes—which is &lt;em&gt;not&lt;/em&gt; true when operating on distributed file systems, or when operations like concurrent file copies (for backup) happen while lock files are being held.&lt;/p&gt; &lt;p&gt;Jujutsu is instead designed to be &lt;a href="https://jj-vcs.github.io/jj/latest/technical/concurrency/"&gt;safe under concurrent scenarios&lt;/a&gt;; simply using rsync or Dropbox and then using that resulting repository should never result in a repository in a &lt;em&gt;corrupt state&lt;/em&gt;. The worst that &lt;em&gt;should&lt;/em&gt; happen is that it will expose conflicts between the local and remote state, leaving you to resolve them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The command-line tool is called &lt;code&gt;jj&lt;/code&gt; for now because it's easy to type and easy to replace (rare in English). The project is called "Jujutsu" because it matches "jj".&lt;/p&gt; 
&lt;p&gt;Jujutsu is relatively young, with lots of work to still be done. If you have any questions, or want to talk about future plans, please join us on Discord &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt;, start a &lt;a href="https://github.com/jj-vcs/jj/discussions"&gt;GitHub Discussion&lt;/a&gt;, or send an IRC message to &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;code&gt;#jujutsu&lt;/code&gt; on Libera Chat&lt;/a&gt;. The developers monitor all of these channels[^bridge].&lt;/p&gt; 
&lt;p&gt;[^bridge]: To be more precise, the &lt;code&gt;#jujutsu&lt;/code&gt; Libera IRC channel is bridged to one of the channels on jj's Discord. Some of the developers stay on Discord and use the bridge to follow IRC.&lt;/p&gt; 
&lt;h3&gt;News and Updates 📣&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;December 2024&lt;/strong&gt;: The &lt;code&gt;jj&lt;/code&gt; Repository has moved to the &lt;code&gt;jj-vcs&lt;/code&gt; GitHub organization.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;November 2024&lt;/strong&gt;: Version 0.24 is released which adds &lt;code&gt;jj file annotate&lt;/code&gt;, which is equivalent to &lt;code&gt;git blame&lt;/code&gt; or &lt;code&gt;hg annotate&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;September 2024&lt;/strong&gt;: Martin gave a &lt;a href="https://www.youtube.com/watch?v=LV0JzI8IcCY"&gt;presentation about Jujutsu&lt;/a&gt; at Git Merge 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Version 0.14 is released, which deprecates &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/CHANGELOG.md#0140---2024-02-07"&gt;"jj checkout" and "jj merge"&lt;/a&gt;, as well as &lt;code&gt;jj init --git&lt;/code&gt;, which is now just called &lt;code&gt;jj git init&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Oct 2023&lt;/strong&gt;: Version 0.10.0 is released! Now includes a bundled merge and diff editor for all platforms, "immutable revsets" to avoid accidentally &lt;code&gt;edit&lt;/code&gt;-ing the wrong revisions, and lots of polish.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin gave a presentation about Google's plans for Jujutsu at Git Merge 2022! See the &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt; or the &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;recording&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Related Media&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mar 2024&lt;/strong&gt;: Chris Krycho started &lt;a href="https://www.youtube.com/playlist?list=PLelyiwKWHHAq01Pvmpf6x7J0y-yQpmtxp"&gt;a YouTube series about Jujutsu&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Chris Krycho published an article about Jujutsu called &lt;a href="https://v5.chriskrycho.com/essays/jj-init/"&gt;jj init&lt;/a&gt; and Steve Klabnik followed up with the &lt;a href="https://steveklabnik.github.io/jujutsu-tutorial/"&gt;Jujutsu Tutorial&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2024&lt;/strong&gt;: Jujutsu was featured in an LWN.net article called &lt;a href="https://lwn.net/Articles/958468/"&gt;Jujutsu: a new, Git-compatible version control system&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin's Talk about Jujutsu at Git Merge 2022, &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;video&lt;/a&gt; and the associated &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The wiki also contains a more extensive list of &lt;a href="https://github.com/jj-vcs/jj/wiki/Media"&gt;media references&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Jujutsu is an &lt;strong&gt;experimental version control system&lt;/strong&gt;. While Git compatibility is stable, and most developers use it daily for all their needs, there may still be work-in-progress features, suboptimal UX, and workflow gaps that make it unusable for your particular use.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Follow the &lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;installation instructions&lt;/a&gt; to obtain and configure &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The best way to get started is probably to go through &lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;the tutorial&lt;/a&gt;. Also see the &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison"&gt;Git comparison&lt;/a&gt;, which includes a table of &lt;code&gt;jj&lt;/code&gt; vs. &lt;code&gt;git&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;As you become more familiar with Jujutsu, the following resources may be helpful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/FAQ"&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/glossary"&gt;Glossary&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help&lt;/code&gt; command (e.g. &lt;code&gt;jj help rebase&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help -k &amp;lt;keyword&amp;gt;&lt;/code&gt; command (e.g. &lt;code&gt;jj help -k config&lt;/code&gt;). Use &lt;code&gt;jj help --help&lt;/code&gt; to see what keywords are available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are using a &lt;strong&gt;prerelease&lt;/strong&gt; version of &lt;code&gt;jj&lt;/code&gt;, you would want to consult &lt;a href="https://jj-vcs.github.io/jj/prerelease/"&gt;the docs for the prerelease (main branch) version&lt;/a&gt;. You can also get there from the docs for the latest release by using the website's version switcher. The version switcher is visible in the header of the website when you scroll to the top of any page.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Compatible with Git&lt;/h3&gt; 
&lt;p&gt;Jujutsu is designed so that the underlying data and storage model is abstract. Today, only the Git backend is production-ready. The Git backend uses the &lt;a href="https://github.com/Byron/gitoxide"&gt;gitoxide&lt;/a&gt; Rust library.&lt;/p&gt; 
&lt;p&gt;The Git backend is fully featured and maintained, and allows you to use Jujutsu with any Git remote. The commits you create will look like regular Git commits. You can fetch branches from a regular Git remote and push branches to the remote. You can always switch back to Git.&lt;/p&gt; 
&lt;p&gt;Here is how you can explore a GitHub repository with &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/git_compat.png" /&gt; 
&lt;p&gt;You can even have a &lt;a href="https://jj-vcs.github.io/jj/latest/git-compatibility#colocated-jujutsugit-repos"&gt;colocated local repository&lt;/a&gt; where you can use both &lt;code&gt;jj&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; commands interchangeably.&lt;/p&gt; 
&lt;h3&gt;The working copy is automatically committed&lt;/h3&gt; 
&lt;p&gt;Jujutsu uses a real commit to represent the working copy. Checking out a commit results a new working-copy commit on top of the target commit. Almost all commands automatically amend the working-copy commit.&lt;/p&gt; 
&lt;p&gt;The working-copy being a commit means that commands never fail because the working copy is dirty (no "error: Your local changes to the following files..."), and there is no need for &lt;code&gt;git stash&lt;/code&gt;. Also, because the working copy is a commit, commands work the same way on the working-copy commit as on any other commit, so you can set the commit message before you're done with the changes.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/working_copy.png" /&gt; 
&lt;h3&gt;The repo is the source of truth&lt;/h3&gt; 
&lt;p&gt;With Jujutsu, the working copy plays a smaller role than with Git. Commands snapshot the working copy before they start, then they update the repo, and then the working copy is updated (if the working-copy commit was modified). Almost all commands (even checkout!) operate on the commits in the repo, leaving the common functionality of snapshotting and updating of the working copy to centralized code. For example, &lt;code&gt;jj restore&lt;/code&gt; (similar to &lt;code&gt;git restore&lt;/code&gt;) can restore from any commit and into any commit, and &lt;code&gt;jj describe&lt;/code&gt; can set the commit message of any commit (defaults to the working-copy commit).&lt;/p&gt; 
&lt;h3&gt;Entire repo is under version control&lt;/h3&gt; 
&lt;p&gt;All operations you perform in the repo are recorded, along with a snapshot of the repo state after the operation. This means that you can easily restore to an earlier repo state, simply undo your operations one-by-one or even &lt;em&gt;revert&lt;/em&gt; a particular operation which does not have to be the most recent one.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/operation_log.png" /&gt; 
&lt;h3&gt;Conflicts can be recorded in commits&lt;/h3&gt; 
&lt;p&gt;If an operation results in &lt;a href="https://jj-vcs.github.io/jj/latest/glossary#conflict"&gt;conflicts&lt;/a&gt;, information about those conflicts will be recorded in the commit(s). The operation will succeed. You can then resolve the conflicts later. One consequence of this design is that there's no need to continue interrupted operations. Instead, you get a single workflow for resolving conflicts, regardless of which command caused them. This design also lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).&lt;/p&gt; 
&lt;p&gt;Basic conflict resolution:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/resolve_conflicts.png" /&gt; 
&lt;p&gt;Juggling conflicts:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/juggle_conflicts.png" /&gt; 
&lt;h3&gt;Automatic rebase&lt;/h3&gt; 
&lt;p&gt;Whenever you modify a commit, any descendants of the old commit will be rebased onto the new commit. Thanks to the conflict design described above, that can be done even if there are conflicts. Bookmarks pointing to rebased commits will be updated. So will the working copy if it points to a rebased commit.&lt;/p&gt; 
&lt;h3&gt;Comprehensive support for rewriting history&lt;/h3&gt; 
&lt;p&gt;Besides the usual rebase command, there's &lt;code&gt;jj describe&lt;/code&gt; for editing the description (commit message) of an arbitrary commit. There's also &lt;code&gt;jj diffedit&lt;/code&gt;, which lets you edit the changes in a commit without checking it out. To split a commit into two, use &lt;code&gt;jj split&lt;/code&gt;. You can even move part of the changes in a commit to any other commit using &lt;code&gt;jj squash -i --from X --into Y&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;The tool is fairly feature-complete, but some important features like support for Git submodules are not yet completed. There are also several performance bugs. It's likely that workflows and setups different from what the core developers use are not well supported, e.g. there is no native support for email-based workflows.&lt;/p&gt; 
&lt;p&gt;Today, all core developers use &lt;code&gt;jj&lt;/code&gt; to work on &lt;code&gt;jj&lt;/code&gt;. I (Martin von Zweigbergk) have almost exclusively used &lt;code&gt;jj&lt;/code&gt; to develop the project itself since early January 2021. I haven't had to re-clone from source (I don't think I've even had to restore from backup).&lt;/p&gt; 
&lt;p&gt;There &lt;em&gt;will&lt;/em&gt; be changes to workflows and backward-incompatible changes to the on-disk formats before version 1.0.0. For any format changes, we'll try to implement transparent upgrades (as we've done with recent changes), or provide upgrade commands or scripts if requested.&lt;/p&gt; 
&lt;h2&gt;Related work&lt;/h2&gt; 
&lt;p&gt;There are several tools trying to solve similar problems as Jujutsu. See &lt;a href="https://jj-vcs.github.io/jj/latest/related-work"&gt;related work&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome outside contributions, and there's plenty of things to do, so don't be shy. Please ask if you want a pointer on something you can help with, and hopefully we can all figure something out.&lt;/p&gt; 
&lt;p&gt;We do have &lt;a href="https://jj-vcs.github.io/jj/prerelease/contributing/"&gt;a few policies and suggestions&lt;/a&gt; for contributors. The broad TL;DR:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug reports are very welcome!&lt;/li&gt; 
 &lt;li&gt;Every commit that lands in the &lt;code&gt;main&lt;/code&gt; branch is code reviewed.&lt;/li&gt; 
 &lt;li&gt;Please behave yourself, and obey the Community Guidelines.&lt;/li&gt; 
 &lt;li&gt;There &lt;strong&gt;is&lt;/strong&gt; a mandatory CLA you must agree to. Importantly, it &lt;strong&gt;does not&lt;/strong&gt; transfer copyright ownership to Google or anyone else; it simply gives us the right to safely redistribute and use your changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mandatory Google Disclaimer&lt;/h3&gt; 
&lt;p&gt;I (Martin von Zweigbergk, &lt;a href="mailto:martinvonz@google.com"&gt;martinvonz@google.com&lt;/a&gt;) started Jujutsu as a hobby project in late 2019, and it has evolved into my full-time project at Google, with several other Googlers (now) assisting development in various capacities. That said, &lt;strong&gt;this is not a Google product&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Jujutsu is available as Open Source Software, under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details about copyright and redistribution.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;jj&lt;/code&gt; logo was contributed by J. Jennings and is licensed under a Creative Commons License, see &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/LICENSE"&gt;&lt;code&gt;docs/images/LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>katanemo/archgw</title>
      <link>https://github.com/katanemo/archgw</link>
      <description>&lt;p&gt;The data plane for agents. Arch is a models-native proxy server that handles the plumbing work in AI: agent routing &amp; hand off, guardrails, zero-code logs and traces, unified access to LLMs from OpenAI, Anthropic, Ollama, etc. Build agents faster, and scale them reliably.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/katanemo/archgw/main/docs/source/_static/img/arch-logo.png" alt="Arch Logo" width="75%" height="auto" /&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;em&gt;Arch is a models-native (edge and service) proxy server for agents.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt; Arch handles the &lt;em&gt;pesky plumbing work&lt;/em&gt; in building AI agents — like applying guardrails, routing prompts to the right agent, generating hyper-rich information traces for RL, and unifying access to any LLM. It’s a language and framework friendly infrastructure layer designed to help you build and ship agentic apps faster.&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/#Quickstart"&gt;Quickstart&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/#Demos"&gt;Demos&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/#use-arch-as-a-llm-router"&gt;Route LLMs&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/#Build-Agentic-Apps-with-Arch"&gt;Build agentic apps with Arch&lt;/a&gt; • &lt;a href="https://docs.archgw.com"&gt;Documentation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/#Contact"&gt;Contact&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/katanemo/arch/actions/workflows/pre-commit.yml"&gt;&lt;img src="https://github.com/katanemo/arch/actions/workflows/pre-commit.yml/badge.svg?sanitize=true" alt="pre-commit" /&gt;&lt;/a&gt; &lt;a href="https://github.com/katanemo/arch/actions/workflows/rust_tests.yml"&gt;&lt;img src="https://github.com/katanemo/arch/actions/workflows/rust_tests.yml/badge.svg?sanitize=true" alt="rust tests (prompt and llm gateway)" /&gt;&lt;/a&gt; &lt;a href="https://github.com/katanemo/arch/actions/workflows/e2e_tests.yml"&gt;&lt;img src="https://github.com/katanemo/arch/actions/workflows/e2e_tests.yml/badge.svg?sanitize=true" alt="e2e tests" /&gt;&lt;/a&gt; &lt;a href="https://github.com/katanemo/arch/actions/workflows/static.yml"&gt;&lt;img src="https://github.com/katanemo/arch/actions/workflows/static.yml/badge.svg?sanitize=true" alt="Build and Deploy Documentation" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;About The Latest Release:&lt;/h1&gt; 
&lt;p&gt;[0.3.17] &lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/demos/use_cases/claude_code_router/README.md"&gt;Preference-aware multi LLM routing for Claude Code 2.0&lt;/a&gt; &lt;br /&gt;&lt;img src="https://raw.githubusercontent.com/katanemo/archgw/main/docs/source/_static/img/claude_code_router.png" alt="high-level network architecture for ArchGW" width="50%" /&gt;&lt;/p&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/arch-3?embed=true&amp;amp;utm_source=badge-top-post-badge&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-arch-3" target="_blank"&gt;&lt;img src="https://api.producthunt.com/widgets/embed-image/v1/top-post-badge.svg?post_id=565761&amp;amp;theme=dark&amp;amp;period=daily&amp;amp;t=1742359429995" alt="Arch - Build fast, hyper-personalized agents with intelligent infra | Product Hunt" style="width: 188px; height: 41px;" width="188" height="41" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;AI demos are easy to hack. But once you move past a prototype, you’re stuck building and maintaining low-level plumbing code that slows down real innovation. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Routing &amp;amp; orchestration.&lt;/strong&gt; Put routing in code and you’ve got two choices: maintain it yourself or live with a framework’s baked-in logic. Either way, keeping routing consistent means pushing code changes across all your agents, slowing iteration and turning every policy tweak into a refactor instead of a config flip.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Model integration churn.&lt;/strong&gt; Frameworks wire LLM integrations directly into code abstractions, making it hard to add or swap models without touching application code — meaning you’ll have to do codewide search/replace every time you want to experiment with a new model or version.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Observability &amp;amp; governance.&lt;/strong&gt; Logging, tracing, and guardrails are baked in as tightly coupled features, so bringing in best-of-breed solutions is painful and often requires digging through the guts of a framework.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Prompt engineering overhead&lt;/strong&gt;. Input validation, clarifying vague user input, and coercing outputs into the right schema all pile up, turning what should be design work into low-level plumbing work.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Brittle upgrades&lt;/strong&gt;. Every change (new model, new guardrail, new trace format) means patching and redeploying application servers. Contrast that with bouncing a central proxy—one upgrade, instantly consistent everywhere.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With Arch, you can move faster by focusing on higher-level objectives in a language and framework agnostic way. &lt;strong&gt;Arch&lt;/strong&gt; was built by the contributors of &lt;a href="https://www.envoyproxy.io/"&gt;Envoy Proxy&lt;/a&gt; with the belief that:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Prompts are nuanced and opaque user requests, which require the same capabilities as traditional HTTP requests including secure handling, intelligent routing, robust observability, and integration with backend (API) systems to improve speed and accuracy for common agentic scenarios – all outside core application logic.*&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Core Features&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;🚦 Route to Agents&lt;/code&gt;: Engineered with purpose-built &lt;a href="https://huggingface.co/collections/katanemo/arch-function-66f209a693ea8df14317ad68"&gt;LLMs&lt;/a&gt; for fast (&amp;lt;100ms) agent routing and hand-off&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;🔗 Route to LLMs&lt;/code&gt;: Unify access to LLMs with support for &lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/#use-arch-as-a-llm-router"&gt;three routing strategies&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;⛨ Guardrails&lt;/code&gt;: Centrally configure and prevent harmful outcomes and ensure safe user interactions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;⚡ Tools Use&lt;/code&gt;: For common agentic scenarios let Arch instantly clarify and convert prompts to tools/API calls&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;🕵 Observability&lt;/code&gt;: W3C compatible request tracing and LLM metrics that instantly plugin with popular tools&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;🧱 Built on Envoy&lt;/code&gt;: Arch runs alongside app servers as a containerized process, and builds on top of &lt;a href="https://envoyproxy.io"&gt;Envoy's&lt;/a&gt; proven HTTP management and scalability features to handle ingress and egress traffic related to prompts and LLMs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;High-Level Sequence Diagram&lt;/strong&gt;: &lt;img src="https://raw.githubusercontent.com/katanemo/archgw/main/docs/source/_static/img/arch_network_diagram_high_level.png" alt="high-level network architecture for ArchGW" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Jump to our &lt;a href="https://docs.archgw.com"&gt;docs&lt;/a&gt;&lt;/strong&gt; to learn how you can use Arch to improve the speed, security and personalization of your GenAI apps.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Today, the function calling LLM (Arch-Function) designed for the agentic and RAG scenarios is hosted free of charge in the US-central region. To offer consistent latencies and throughput, and to manage our expenses, we will enable access to the hosted version via developers keys soon, and give you the option to run that LLM locally. For more details see this issue &lt;a href="https://github.com/katanemo/archgw/issues/258"&gt;#258&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;To get in touch with us, please join our &lt;a href="https://discord.gg/pGZf2gcwEc"&gt;discord server&lt;/a&gt;. We will be monitoring that actively and offering support there.&lt;/p&gt; 
&lt;h2&gt;Demos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/demos/samples_python/weather_forecast/README.md"&gt;Sample App: Weather Forecast Agent&lt;/a&gt; - A sample agentic weather forecasting app that highlights core function calling capabilities of Arch.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/demos/samples_python/network_switch_operator_agent/README.md"&gt;Sample App: Network Operator Agent&lt;/a&gt; - A simple network device switch operator agent that can retrieve device statistics and reboot them.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/demos/use_cases/spotify_bearer_auth"&gt;Use Case: Connecting to SaaS APIs&lt;/a&gt; - Connect 3rd party SaaS APIs to your agentic chat experience.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Follow this quickstart guide to use Arch as a router for local or hosted LLMs, including dynamic routing. Later in the section we will see how you can Arch to build highly capable agentic applications, and to provide e2e observability.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;Before you begin, ensure you have the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/get-started/get-docker/"&gt;Docker System&lt;/a&gt; (v24)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;Docker compose&lt;/a&gt; (v2.29)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; (v3.13)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Arch's CLI allows you to manage and interact with the Arch gateway efficiently. To install the CLI, simply run the following command:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] We recommend that developers create a new Python virtual environment to isolate dependencies before installing Arch. This ensures that archgw and its dependencies do not interfere with other packages on your system.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ python3.12 -m venv venv
$ source venv/bin/activate   # On Windows, use: venv\Scripts\activate
$ pip install archgw==0.3.17
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Use Arch as a LLM Router&lt;/h3&gt; 
&lt;p&gt;Arch supports three powerful routing strategies for LLMs: model-based routing, alias-based routing, and preference-based routing. Each strategy offers different levels of abstraction and control for managing your LLM infrastructure.&lt;/p&gt; 
&lt;h4&gt;Model-based Routing&lt;/h4&gt; 
&lt;p&gt;Model-based routing allows you to configure specific models with static routing. This is ideal when you need direct control over which models handle specific requests. Arch supports 11+ LLM providers including OpenAI, Anthropic, DeepSeek, Mistral, Groq, and more.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v0.1.0

listeners:
  egress_traffic:
    address: 0.0.0.0
    port: 12000
    message_format: openai
    timeout: 30s

llm_providers:
  - model: openai/gpt-4o
    access_key: $OPENAI_API_KEY
    default: true

  - model: anthropic/claude-3-5-sonnet-20241022
    access_key: $ANTHROPIC_API_KEY

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can then route to specific models using any OpenAI-compatible client:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from openai import OpenAI

client = OpenAI(base_url="http://127.0.0.1:12000/v1", api_key="test")

# Route to specific model
response = client.chat.completions.create(
    model="anthropic/claude-3-5-sonnet-20241022",
    messages=[{"role": "user", "content": "Explain quantum computing"}]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Alias-based Routing&lt;/h4&gt; 
&lt;p&gt;Alias-based routing lets you create semantic model names that map to underlying providers. This approach decouples your application code from specific model names, making it easy to experiment with different models or handle provider changes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v0.1.0

listeners:
  egress_traffic:
    address: 0.0.0.0
    port: 12000
    message_format: openai
    timeout: 30s

llm_providers:
  - model: openai/gpt-4o
    access_key: $OPENAI_API_KEY

  - model: anthropic/claude-3-5-sonnet-20241022
    access_key: $ANTHROPIC_API_KEY

model_aliases:
  # Model aliases - friendly names that map to actual model names
  fast-model:
    target: gpt-4o-mini

  reasoning-model:
    target: gpt-4o

  creative-model:
    target: claude-3-5-sonnet-20241022
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use semantic aliases in your application code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# Your code uses semantic names instead of provider-specific ones
response = client.chat.completions.create(
    model="reasoning-model",  # Routes to best available reasoning model
    messages=[{"role": "user", "content": "Solve this complex problem..."}]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Preference-aligned Routing&lt;/h4&gt; 
&lt;p&gt;Preference-aligned routing provides intelligent, dynamic model selection based on natural language descriptions of tasks and preferences. Instead of hardcoded routing logic, you describe what each model is good at using plain English.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v0.1.0

listeners:
  egress_traffic:
    address: 0.0.0.0
    port: 12000
    message_format: openai
    timeout: 30s

llm_providers:
  - model: openai/gpt-4o
    access_key: $OPENAI_API_KEY
    routing_preferences:
      - name: complex_reasoning
        description: deep analysis, mathematical problem solving, and logical reasoning
      - name: creative_writing
        description: storytelling, creative content, and artistic writing

  - model: deepseek/deepseek-coder
    access_key: $DEEPSEEK_API_KEY
    routing_preferences:
      - name: code_generation
        description: generating new code, writing functions, and creating scripts
      - name: code_review
        description: analyzing existing code for bugs, improvements, and optimization
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Arch uses a lightweight 1.5B autoregressive model to intelligently map user prompts to these preferences, automatically selecting the best model for each request. This approach adapts to intent drift, supports multi-turn conversations, and avoids brittle embedding-based classifiers or manual if/else chains. No retraining required when adding models or updating policies — routing is governed entirely by human-readable rules.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Learn More&lt;/strong&gt;: Check our &lt;a href="https://docs.archgw.com/concepts/llm_providers/llm_providers.html"&gt;documentation&lt;/a&gt; for comprehensive provider setup guides and routing strategies. You can learn more about the design, benchmarks, and methodology behind preference-based routing in our paper:&lt;/p&gt; 
&lt;div align="left"&gt; 
 &lt;a href="https://arxiv.org/abs/2506.16655" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/katanemo/archgw/main/docs/source/_static/img/arch_router_paper_preview.png" alt="Arch Router Paper Preview" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h3&gt;Build Agentic Apps with Arch&lt;/h3&gt; 
&lt;p&gt;In following quickstart we will show you how easy it is to build AI agent with Arch gateway. We will build a currency exchange agent using following simple steps. For this demo we will use &lt;code&gt;https://api.frankfurter.dev/&lt;/code&gt; to fetch latest price for currencies and assume USD as base currency.&lt;/p&gt; 
&lt;h4&gt;Step 1. Create arch config file&lt;/h4&gt; 
&lt;p&gt;Create &lt;code&gt;arch_config.yaml&lt;/code&gt; file with following content,&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v0.1.0

listeners:
  ingress_traffic:
    address: 0.0.0.0
    port: 10000
    message_format: openai
    timeout: 30s

llm_providers:
  - access_key: $OPENAI_API_KEY
    model: openai/gpt-4o

system_prompt: |
  You are a helpful assistant.

prompt_guards:
  input_guards:
    jailbreak:
      on_exception:
        message: Looks like you're curious about my abilities, but I can only provide assistance for currency exchange.

prompt_targets:
  - name: currency_exchange
    description: Get currency exchange rate from USD to other currencies
    parameters:
      - name: currency_symbol
        description: the currency that needs conversion
        required: true
        type: str
        in_path: true
    endpoint:
      name: frankfurter_api
      path: /v1/latest?base=USD&amp;amp;symbols={currency_symbol}
    system_prompt: |
      You are a helpful assistant. Show me the currency symbol you want to convert from USD.

  - name: get_supported_currencies
    description: Get list of supported currencies for conversion
    endpoint:
      name: frankfurter_api
      path: /v1/currencies

endpoints:
  frankfurter_api:
    endpoint: api.frankfurter.dev:443
    protocol: https
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Step 2. Start arch gateway with currency conversion config&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;
$ archgw up arch_config.yaml
2024-12-05 16:56:27,979 - cli.main - INFO - Starting archgw cli version: 0.3.17
2024-12-05 16:56:28,485 - cli.utils - INFO - Schema validation successful!
2024-12-05 16:56:28,485 - cli.main - INFO - Starting arch model server and arch gateway
2024-12-05 16:56:51,647 - cli.core - INFO - Container is healthy!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the gateway is up you can start interacting with at port 10000 using openai chat completion API.&lt;/p&gt; 
&lt;p&gt;Some of the sample queries you can ask could be &lt;code&gt;what is currency rate for gbp?&lt;/code&gt; or &lt;code&gt;show me list of currencies for conversion&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Step 3. Interacting with gateway using curl command&lt;/h4&gt; 
&lt;p&gt;Here is a sample curl command you can use to interact,&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ curl --header 'Content-Type: application/json' \
  --data '{"messages": [{"role": "user","content": "what is exchange rate for gbp"}], "model": "none"}' \
  http://localhost:10000/v1/chat/completions | jq ".choices[0].message.content"

"As of the date provided in your context, December 5, 2024, the exchange rate for GBP (British Pound) from USD (United States Dollar) is 0.78558. This means that 1 USD is equivalent to 0.78558 GBP."

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And to get list of supported currencies,&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ curl --header 'Content-Type: application/json' \
  --data '{"messages": [{"role": "user","content": "show me list of currencies that are supported for conversion"}], "model": "none"}' \
  http://localhost:10000/v1/chat/completions | jq ".choices[0].message.content"

"Here is a list of the currencies that are supported for conversion from USD, along with their symbols:\n\n1. AUD - Australian Dollar\n2. BGN - Bulgarian Lev\n3. BRL - Brazilian Real\n4. CAD - Canadian Dollar\n5. CHF - Swiss Franc\n6. CNY - Chinese Renminbi Yuan\n7. CZK - Czech Koruna\n8. DKK - Danish Krone\n9. EUR - Euro\n10. GBP - British Pound\n11. HKD - Hong Kong Dollar\n12. HUF - Hungarian Forint\n13. IDR - Indonesian Rupiah\n14. ILS - Israeli New Sheqel\n15. INR - Indian Rupee\n16. ISK - Icelandic Króna\n17. JPY - Japanese Yen\n18. KRW - South Korean Won\n19. MXN - Mexican Peso\n20. MYR - Malaysian Ringgit\n21. NOK - Norwegian Krone\n22. NZD - New Zealand Dollar\n23. PHP - Philippine Peso\n24. PLN - Polish Złoty\n25. RON - Romanian Leu\n26. SEK - Swedish Krona\n27. SGD - Singapore Dollar\n28. THB - Thai Baht\n29. TRY - Turkish Lira\n30. USD - United States Dollar\n31. ZAR - South African Rand\n\nIf you want to convert USD to any of these currencies, you can select the one you are interested in."

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a href="https://docs.archgw.com/guides/observability/observability.html"&gt;Observability&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Arch is designed to support best-in class observability by supporting open standards. Please read our &lt;a href="https://docs.archgw.com/guides/observability/observability.html"&gt;docs&lt;/a&gt; on observability for more details on tracing, metrics, and logs. The screenshot below is from our integration with Signoz (among others)&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/katanemo/archgw/main/docs/source/_static/img/tracing.png" alt="alt text" /&gt;&lt;/p&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;p&gt;When debugging issues / errors application logs and access logs provide key information to give you more context on whats going on with the system. Arch gateway runs in info log level and following is a typical output you could see in a typical interaction between developer and arch gateway,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ archgw up --service archgw --foreground
...
[2025-03-26 18:32:01.350][26][info] prompt_gateway: on_http_request_body: sending request to model server
[2025-03-26 18:32:01.851][26][info] prompt_gateway: on_http_call_response: model server response received
[2025-03-26 18:32:01.852][26][info] prompt_gateway: on_http_call_response: dispatching api call to developer endpoint: weather_forecast_service, path: /weather, method: POST
[2025-03-26 18:32:01.882][26][info] prompt_gateway: on_http_call_response: developer api call response received: status code: 200
[2025-03-26 18:32:01.882][26][info] prompt_gateway: on_http_call_response: sending request to upstream llm
[2025-03-26 18:32:01.883][26][info] llm_gateway: on_http_request_body: provider: gpt-4o-mini, model requested: None, model selected: gpt-4o-mini
[2025-03-26 18:32:02.818][26][info] llm_gateway: on_http_response_body: time to first token: 1468ms
[2025-03-26 18:32:04.532][26][info] llm_gateway: on_http_response_body: request latency: 3183ms
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Log level can be changed to debug to get more details. To enable debug logs edit (supervisord.conf)[arch/supervisord.conf], change the log level &lt;code&gt;--component-log-level wasm:info&lt;/code&gt; to &lt;code&gt;--component-log-level wasm:debug&lt;/code&gt;. And after that you need to rebuild docker image and restart the arch gateway using following set of commands,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# make sure you are at the root of the repo
$ archgw build
# go to your service that has arch_config.yaml file and issue following command,
$ archgw up --service archgw --foreground
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;We would love feedback on our &lt;a href="https://github.com/orgs/katanemo/projects/1"&gt;Roadmap&lt;/a&gt; and we welcome contributions to &lt;strong&gt;Arch&lt;/strong&gt;! Whether you're fixing bugs, adding new features, improving documentation, or creating tutorials, your help is much appreciated. Please visit our &lt;a href="https://raw.githubusercontent.com/katanemo/archgw/main/CONTRIBUTING.md"&gt;Contribution Guide&lt;/a&gt; for more details&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenDevicePartnership/patina</title>
      <link>https://github.com/OpenDevicePartnership/patina</link>
      <description>&lt;p&gt;Patina Firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Patina&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/OpenDevicePartnership/patina/releases/latest"&gt;&lt;img src="https://img.shields.io/crates/v/patina" alt="release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/OpenDevicePartnership/patina/commits/main/"&gt;&lt;img src="https://img.shields.io/github/commits-since/OpenDevicePartnership/patina/latest/main?include_prereleases" alt="commit" /&gt;&lt;/a&gt; &lt;a href="https://github.com/OpenDevicePartnership/patina/actions/workflows/ci-workflow.yml"&gt;&lt;img src="https://github.com/OpenDevicePartnership/patina/actions/workflows/ci-workflow.yml/badge.svg?branch=main&amp;amp;event=push" alt="ci" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/OpenDevicePartnership/patina"&gt;&lt;img src="https://codecov.io/gh/OpenDevicePartnership/patina/graph/badge.svg?token=CWHWOUUGY6" alt="cov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository hosts the Patina project - a Rust implementation of UEFI firmware.&lt;/p&gt; 
&lt;p&gt;The goal of this project is to serve as a replacement for core UEFI firmware components so they are written in Pure Rust as opposed to Rust wrappers around core implementation still written in C.&lt;/p&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;p&gt;There have been various &lt;a href="https://www.microsoft.com/en-us/msrc/blog/2019/11/using-rust-in-windows"&gt;instances of advocacy&lt;/a&gt; for building system level software in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This repository contains a Rust &lt;a href="https://uefi.org/"&gt;UEFI&lt;/a&gt; firmware implementation called Patina. We plan to enable an incremental migration of today's firmware components largely written in C to Rust starting with the core. The primary objective for this effort is to improve the security and stability of system firmware by leveraging the memory safety offered by Rust while retaining similar boot performance.&lt;/p&gt; 
&lt;h2&gt;Important Notes&lt;/h2&gt; 
&lt;p&gt;This repository is still considered to be in a "beta" stage at this time. Platform testing and integration feedback is very welcome.&lt;/p&gt; 
&lt;p&gt;Before making pull requests at a minimum, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make all
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Performing a Release&lt;/h2&gt; 
&lt;p&gt;Below is the information required to perform a release that publishes to the registry feed:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Review the current draft release on the github repo: &lt;a href="https://github.com/OpenDevicePartnership/patina/releases"&gt;Releases&lt;/a&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If something is incorrect, update it in the draft release&lt;/li&gt; 
   &lt;li&gt;If you need to manually change the version, make sure you update the associated git tag value in the draft release&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;Publish the release&lt;/li&gt; 
 &lt;li&gt;Monitor the publish release workflow that is automatically triggered on the release being published: &lt;a href="https://github.com/OpenDevicePartnership/patina/actions/workflows/publish-release.yml"&gt;Publish Release Workflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Once completed successfully, click on the "Notify Branch Creation Step" and click the provided link to create the PR to update all versions in all Cargo.toml files across the repository.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;We have "Getting Started" documentation located in this repository at &lt;code&gt;docs/*&lt;/code&gt;. The latest documentation can be found at &lt;a href="https://OpenDevicePartnership.github.io/patina/"&gt;https://OpenDevicePartnership.github.io/patina/&lt;/a&gt;, however this documentation can also be self-hosted via (&lt;a href="https://github.com/rust-lang/mdBook"&gt;mdbook&lt;/a&gt;). Once you all dependencies installed as specified below, you can run &lt;code&gt;mdbook serve docs&lt;/code&gt; to self host the getting started book.&lt;/p&gt; 
&lt;p&gt;You can also generate API documentation for the project using &lt;code&gt;cargo make doc&lt;/code&gt;. This will eventually be hosted on docs.rs once we begin uploading to crates.io. You can have the documentation opened in your browser by running &lt;code&gt;cargo make doc-open&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;First-Time Tool Setup Instructions&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Follow the steps outlined by &lt;a href="https://www.rust-lang.org/learn/get-started"&gt;Getting Started - Rust Programming Language (rust-lang.org)&lt;/a&gt; to install, update (if needed), and test cargo/rust.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;[toolchain]&lt;/code&gt; section of the &lt;a href="https://github.com/OpenDevicePartnership/patina/raw/HEAD/rust-toolchain.toml"&gt;rust-toolchain.toml&lt;/a&gt; file contains the tools necessary to compile and can be installed through rustup.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;rustup toolchain install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;[tools]&lt;/code&gt; section of the &lt;a href="https://github.com/OpenDevicePartnership/patina/raw/HEAD/rust-toolchain.toml"&gt;rust-toolchain.toml&lt;/a&gt; file contains tools to support commands such as &lt;code&gt;cargo make coverage&lt;/code&gt; and must be installed manually. A local build does not need them all, but at a minimum, cargo-make and cargo-llvm-cov should be installed.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install cargo-make
cargo install cargo-llvm-cov
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Another optional tool that has proven useful for speeding up the build process is 'cargo-binstall', located on &lt;a href="https://github.com/cargo-bins/cargo-binstall"&gt;GitHub&lt;/a&gt;. See the readme.md file in that repository for installation and usage instructions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;All of the Patina crates can be compiled in one of 3 supported targets; aarch64, x64, or native.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make build-aarch64
   - or -
cargo make build-x64
   - or -
cargo make build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, the make compiles a developer build, but development or release can be indicated by using the "-p" flag&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make -p development build-aarch64
   - or -
cargo make -p release build-aarch64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Test&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run all unit tests in the workspace:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run tests in an individual package:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make test -p patina
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build on-platform tests in the workspace:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make patina-test
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Build on-platform tests in an individual package:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make patina-test -p patina
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Rust Version Updates&lt;/h2&gt; 
&lt;p&gt;Rust is released on a regular six week cadence. The Rust project maintains a site with &lt;a href="https://forge.rust-lang.org/"&gt;dates for upcoming releases&lt;/a&gt;. While there is no hard requirement to update the Rust version used by Patina in a given timeframe, it is recommended to do so at least once per quarter. Updates to the latest stable version should not happen immediately after the stable version release as Patina consumers may need time to update their internal toolchains to migrate to the latest stable version.&lt;/p&gt; 
&lt;p&gt;A pull request that updates the Rust version should always be created against the &lt;code&gt;main&lt;/code&gt; branch. The pull request should include the &lt;code&gt;OpenDevicePartnership/patina-contributors&lt;/code&gt; team as reviewers and remain open for at least three full business days to ensure that stakeholders have an opportunity to review and provide feedback.&lt;/p&gt; 
&lt;h3&gt;Updating the Minimum Supported Rust Version&lt;/h3&gt; 
&lt;p&gt;The Rust toolchain used in this repo is specified in &lt;code&gt;rust-toolchain.toml&lt;/code&gt;. The minimum supported Rust version for the crates in the workspace is specified in the &lt;code&gt;rust-version&lt;/code&gt; field of each crate's &lt;code&gt;Cargo.toml&lt;/code&gt; file. When updating the Rust toolchain version, the minimum supported Rust version should be evaluated to determine if it also needs to be updated.&lt;/p&gt; 
&lt;p&gt;A non-exhaustive list of reasons the minimum version might need to change includes:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;An unstable feature has been stabilized and the corresponding &lt;code&gt;#![feature(...)]&lt;/code&gt; has been removed&lt;/li&gt; 
 &lt;li&gt;A feature introduced in the release is immediately being used in the repository&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If the minimum supported Rust version does need to change, please add a comment explaining wny. Note that formatting and linting changes to satisfy tools like rustfmt or clippy do not alone necessitate a minimum Rust version change.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;A quick way to check if the minimum supported Rust version needs to change is to keep the changes made for the new release in your workspace and then revert the Rust toolchain to the previous version. If the project fails to build, then the minimum supported Rust version needs to be updated.&lt;/p&gt; 
&lt;h2&gt;Coverage&lt;/h2&gt; 
&lt;p&gt;The coverage command will generate test coverage data for all crates in the project. To target a single crate, the name can be added to the command line.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo make coverage
   - or -
cargo make coverage dxe_core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;Various crates have benchmarks setup that can be executed using the &lt;code&gt;cargo make bench&lt;/code&gt; command. Any arguments provided will be passed along to the bench command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cmd"&gt;cargo make bench -p patina
cargo make bench -p patina --bench bench_component
cargo make bench -p patina --bench bench_component -- with_component
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Benchmarks utilize the &lt;a href="https://crates.io/crates/criterion"&gt;criterion&lt;/a&gt; benchmarking library, so if new benchmarks are to be added, they should follow that documentation. Benchmarks can be added to any crate to test performance by following the same layout as existing benchmarks, and adding the benchmark to the appropriate crate's Cargo.toml file.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;This project uses a makefile that sets the "RUSTC_BOOTSTRAP=1" environment variable due to internal requirements which puts us in parity with the nightly features that exist on the toolchain targeted. The "nightly" toolchain may be used in place of this.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;High-Level Patina Roadmap&lt;/h2&gt; 
&lt;p&gt;Patina's upcoming work falls into three main categories:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Stabilization&lt;/strong&gt; - Bug fixes, performance improvements, and feature completion for existing functionality. This work is focused on ensuring that everything in Patina's main branch is stable and ready for production use. This is the primary focus for the next several months.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Expansion&lt;/strong&gt; - Expansion of Patina's capabilities and this falls into two sub-categories: 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Component Growth&lt;/strong&gt; - Adding new components to Patina to replace equivalent C-based UEFI components. As new components are made available, it is expected that platforms adopting Patina will incrementally remove their C-based UEFI components as the equivalent Rust-based functionality is now available in their Patina build.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;MM Core Support&lt;/strong&gt; - Similar to the DXE Core support in Patina today, adding a Patina Standalone MM Core such that the Management Mode (MM) core environment is written in Rust and a larger portion of MM drivers can be ported to Patina MM components.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ecosystem Integration&lt;/strong&gt; - This is broken down into two sub-categories: 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Firmware Ecosystem&lt;/strong&gt; - Patina adopters working together to ensure Patina works in their platforms and use cases. This includes things like platform bring-up, integration with existing firmware components, and validation against various hardware configurations.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Rust Ecosystem&lt;/strong&gt; - Engaging with the broader Rust community to ensure Patina aligns with Rust's best practices and leverages the latest Rust features. This includes things like contributing to Rust libraries, participating in Rust forums, and collaborating with other Rust projects.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Stabilization&lt;/strong&gt; - In Progress&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Expansion&lt;/strong&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Component Growth&lt;/strong&gt; - In Progress&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;MM Core Support&lt;/strong&gt; - Planned&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ecosystem Integration&lt;/strong&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Firmware Ecosystem&lt;/strong&gt; - In Progress&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Rust Ecosystem&lt;/strong&gt; - In Progress&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Patina welcomes and encourages community contributions to help accelerate progress in these focus areas. We also value your ideas and feedback on additional priorities that matter to the community.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review Rust Documentation in the &lt;a href="https://github.com/OpenDevicePartnership/patina/raw/HEAD/docs/src/introduction.md"&gt;/docs&lt;/a&gt; directory.&lt;/li&gt; 
 &lt;li&gt;Run unit tests and ensure all pass.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>tauri-apps/tauri</title>
      <link>https://github.com/tauri-apps/tauri</link>
      <description>&lt;p&gt;Build smaller, faster, and more secure desktop and mobile applications with a web frontend.&lt;/p&gt;&lt;hr&gt;&lt;img src="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/splash.png" alt="Tauri" /&gt; 
&lt;p&gt;&lt;a href="https://github.com/tauri-apps/tauri/tree/dev"&gt;&lt;img src="https://img.shields.io/badge/status-stable-blue.svg?sanitize=true" alt="status" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tauri"&gt;&lt;img src="https://img.shields.io/badge/License-MIT%20or%20Apache%202-green.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tauri-apps/tauri/actions/workflows/test-core.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/tauri-apps/tauri/test-core.yml?label=test%20core&amp;amp;logo=github" alt="test core" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/tauri"&gt;&lt;img src="https://img.shields.io/badge/chat-discord-7289da.svg?sanitize=true" alt="Chat Server" /&gt;&lt;/a&gt; &lt;a href="https://tauri.app"&gt;&lt;img src="https://img.shields.io/badge/website-tauri.app-purple.svg?sanitize=true" alt="website" /&gt;&lt;/a&gt; &lt;a href="https://good-labs.github.io/greater-good-affirmation"&gt;&lt;img src="https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg?sanitize=true" alt="https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tauri"&gt;&lt;img src="https://img.shields.io/badge/sponsor-Open%20Collective-blue.svg?sanitize=true" alt="support" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Tauri is a framework for building tiny, blazingly fast binaries for all major desktop platforms. Developers can integrate any front-end framework that compiles to HTML, JS and CSS for building their user interface. The backend of the application is a rust-sourced binary with an API that the front-end can interact with.&lt;/p&gt; 
&lt;p&gt;The user interface in Tauri apps currently leverages &lt;a href="https://docs.rs/tao"&gt;&lt;code&gt;tao&lt;/code&gt;&lt;/a&gt; as a window handling library on macOS, Windows, Linux, Android and iOS. To render your application, Tauri uses &lt;a href="https://github.com/tauri-apps/wry"&gt;WRY&lt;/a&gt;, a library which provides a unified interface to the system webview, leveraging WKWebView on macOS &amp;amp; iOS, WebView2 on Windows, WebKitGTK on Linux and Android System WebView on Android.&lt;/p&gt; 
&lt;p&gt;To learn more about the details of how all of these pieces fit together, please consult this &lt;a href="https://github.com/tauri-apps/tauri/raw/dev/ARCHITECTURE.md"&gt;ARCHITECTURE.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;If you are interested in making a tauri app, please visit the &lt;a href="https://tauri.app"&gt;documentation website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The quickest way to get started is to install the &lt;a href="https://v2.tauri.app/start/prerequisites/"&gt;prerequisites&lt;/a&gt; for your system and create a new project with &lt;a href="https://github.com/tauri-apps/create-tauri-app/#usage"&gt;&lt;code&gt;create-tauri-app&lt;/code&gt;&lt;/a&gt;. For example with &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm create tauri-app@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The list of Tauri's features includes, but is not limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in app bundler to create app bundles in formats like &lt;code&gt;.app&lt;/code&gt;, &lt;code&gt;.dmg&lt;/code&gt;, &lt;code&gt;.deb&lt;/code&gt;, &lt;code&gt;.rpm&lt;/code&gt;, &lt;code&gt;.AppImage&lt;/code&gt; and Windows installers like &lt;code&gt;.exe&lt;/code&gt; (via NSIS) and &lt;code&gt;.msi&lt;/code&gt; (via WiX).&lt;/li&gt; 
 &lt;li&gt;Built-in self updater (desktop only)&lt;/li&gt; 
 &lt;li&gt;System tray icons&lt;/li&gt; 
 &lt;li&gt;Native notifications&lt;/li&gt; 
 &lt;li&gt;Native WebView Protocol (tauri doesn't create a localhost http(s) server to serve the WebView contents)&lt;/li&gt; 
 &lt;li&gt;GitHub action for streamlined CI&lt;/li&gt; 
 &lt;li&gt;VS Code extension&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Platforms&lt;/h3&gt; 
&lt;p&gt;Tauri currently supports development and distribution on the following platforms:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Versions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Windows&lt;/td&gt; 
   &lt;td align="left"&gt;7 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;macOS&lt;/td&gt; 
   &lt;td align="left"&gt;10.15 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Linux&lt;/td&gt; 
   &lt;td align="left"&gt;webkit2gtk 4.0 for Tauri v1 (for example Ubuntu 18.04). webkit2gtk 4.1 for Tauri v2 (for example Ubuntu 22.04).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;iOS/iPadOS&lt;/td&gt; 
   &lt;td align="left"&gt;9 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Android&lt;/td&gt; 
   &lt;td align="left"&gt;7 and above (currently 8 and above)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before you start working on something, it's best to check if there is an existing issue first. It's also a good idea to stop by the Discord server and confirm with the team if it makes sense or if someone else is already working on it.&lt;/p&gt; 
&lt;p&gt;Please make sure to read the &lt;a href="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; 
&lt;p&gt;Thank you to everyone contributing to Tauri!&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;Documentation in a polyglot system is a tricky proposition. To this end, we prefer to use inline documentation in the Rust &amp;amp; JS source code as much as possible. Check out the hosting repository for the documentation site for further information: &lt;a href="https://github.com/tauri-apps/tauri-docs"&gt;https://github.com/tauri-apps/tauri-docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="middle"&gt; &lt;a href="https://crabnebula.dev" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/sponsors/crabnebula.svg?sanitize=true" alt="CrabNebula" width="283" /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For the complete list of sponsors please visit our &lt;a href="https://tauri.app#sponsors"&gt;website&lt;/a&gt; and &lt;a href="https://opencollective.com/tauri"&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Organization&lt;/h2&gt; 
&lt;p&gt;Tauri aims to be a sustainable collective based on principles that guide sustainable free and open software communities. To this end it has become a Programme within the &lt;a href="https://commonsconservancy.org/"&gt;Commons Conservancy&lt;/a&gt;, and you can contribute financially via &lt;a href="https://opencollective.com/tauri"&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;Code: (c) 2015 - Present - The Tauri Programme within The Commons Conservancy.&lt;/p&gt; 
&lt;p&gt;MIT or MIT/Apache 2.0 where applicable.&lt;/p&gt; 
&lt;p&gt;Logo: CC-BY-NC-ND&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Original Tauri Logo Designs by &lt;a href="https://alve.io/"&gt;Alve Larsson&lt;/a&gt;, &lt;a href="https://github.com/nothingismagick"&gt;Daniel Thompson-Yvetot&lt;/a&gt; and &lt;a href="https://github.com/akryum"&gt;Guillaume Chau&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_large"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://zed.dev"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/zed-industries/zed/main/assets/badge/v0.json" alt="Zed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zed-industries/zed/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href="https://github.com/atom/atom"&gt;Atom&lt;/a&gt; and &lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;On macOS, Linux, and Windows you can &lt;a href="https://zed.dev/download"&gt;download Zed directly&lt;/a&gt; or &lt;a href="https://zed.dev/docs/linux#installing-via-a-package-manager"&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Web (&lt;a href="https://github.com/zed-industries/zed/issues/5396"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md"&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md"&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md"&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md"&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we're hiring! Check out our &lt;a href="https://zed.dev/jobs"&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href="https://github.com/EmbarkStudios/cargo-about"&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you've created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate's Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license's requirements. If you're unsure, ask a lawyer. Once you've verified that this system is acceptable add the license's SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href="https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration"&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>astral-sh/uv</title>
      <link>https://github.com/astral-sh/uv</link>
      <description>&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uv&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json" alt="uv" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/v/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/l/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://github.com/astral-sh/uv/actions"&gt;&lt;img src="https://github.com/astral-sh/uv/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Actions status" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/astral-sh"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d" /&gt; 
  &lt;img alt="Shows a bar chart with benchmark results." src="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt;Installing &lt;a href="https://trio.readthedocs.io/"&gt;Trio&lt;/a&gt;'s dependencies with a warm cache.&lt;/i&gt; &lt;/p&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 A single tool to replace &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, &lt;code&gt;pipx&lt;/code&gt;, &lt;code&gt;poetry&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;twine&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and more.&lt;/li&gt; 
 &lt;li&gt;⚡️ &lt;a href="https://github.com/astral-sh/uv/raw/main/BENCHMARKS.md"&gt;10-100x faster&lt;/a&gt; than &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🗂️ Provides &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#projects"&gt;comprehensive project management&lt;/a&gt;, with a &lt;a href="https://docs.astral.sh/uv/concepts/projects/layout#the-lockfile"&gt;universal lockfile&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;❇️ &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#scripts"&gt;Runs scripts&lt;/a&gt;, with support for &lt;a href="https://docs.astral.sh/uv/guides/scripts#declaring-script-dependencies"&gt;inline dependency metadata&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;🐍 &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#python-versions"&gt;Installs and manages&lt;/a&gt; Python versions.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#tools"&gt;Runs and installs&lt;/a&gt; tools published as Python packages.&lt;/li&gt; 
 &lt;li&gt;🔩 Includes a &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#the-pip-interface"&gt;pip-compatible interface&lt;/a&gt; for a performance boost with a familiar CLI.&lt;/li&gt; 
 &lt;li&gt;🏢 Supports Cargo-style &lt;a href="https://docs.astral.sh/uv/concepts/projects/workspaces"&gt;workspaces&lt;/a&gt; for scalable projects.&lt;/li&gt; 
 &lt;li&gt;💾 Disk-space efficient, with a &lt;a href="https://docs.astral.sh/uv/concepts/cache"&gt;global cache&lt;/a&gt; for dependency deduplication.&lt;/li&gt; 
 &lt;li&gt;⏬ Installable without Rust or Python via &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🖥️ Supports macOS, Linux, and Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uv is backed by &lt;a href="https://astral.sh"&gt;Astral&lt;/a&gt;, the creators of &lt;a href="https://github.com/astral-sh/ruff"&gt;Ruff&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install uv with our standalone installers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# On macOS and Linux.
curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# On Windows.
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, from &lt;a href="https://pypi.org/project/uv/"&gt;PyPI&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With pip.
pip install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Or pipx.
pipx install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If installed via the standalone installer, uv can update itself to the latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv self update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/getting-started/installation/"&gt;installation documentation&lt;/a&gt; for details and alternative installation methods.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;uv's documentation is available at &lt;a href="https://docs.astral.sh/uv"&gt;docs.astral.sh/uv&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, the command line reference documentation can be viewed with &lt;code&gt;uv help&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Projects&lt;/h3&gt; 
&lt;p&gt;uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to &lt;code&gt;rye&lt;/code&gt; or &lt;code&gt;poetry&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv init example
Initialized project `example` at `/home/user/example`

$ cd example

$ uv add ruff
Creating virtual environment at: .venv
Resolved 2 packages in 170ms
   Built example @ file:///home/user/example
Prepared 2 packages in 627ms
Installed 2 packages in 1ms
 + example==0.1.0 (from file:///home/user/example)
 + ruff==0.5.0

$ uv run ruff check
All checks passed!

$ uv lock
Resolved 2 packages in 0.33ms

$ uv sync
Resolved 2 packages in 0.70ms
Audited 1 package in 0.02ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/projects/"&gt;project documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;uv also supports building and publishing projects, even if they're not managed with uv. See the &lt;a href="https://docs.astral.sh/uv/guides/publish/"&gt;publish guide&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h3&gt;Scripts&lt;/h3&gt; 
&lt;p&gt;uv manages dependencies and environments for single-file scripts.&lt;/p&gt; 
&lt;p&gt;Create a new script and add inline metadata declaring its dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ echo 'import requests; print(requests.get("https://astral.sh"))' &amp;gt; example.py

$ uv add --script example.py requests
Updated `example.py`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run the script in an isolated virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv run example.py
Reading inline script metadata from: example.py
Installed 5 packages in 12ms
&amp;lt;Response [200]&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/scripts/"&gt;scripts documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;uv executes and installs command-line tools provided by Python packages, similar to &lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Run a tool in an ephemeral environment using &lt;code&gt;uvx&lt;/code&gt; (an alias for &lt;code&gt;uv tool run&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uvx pycowsay 'hello world!'
Resolved 1 package in 167ms
Installed 1 package in 9ms
 + pycowsay==0.0.0.2
  """

  ------------
&amp;lt; hello world! &amp;gt;
  ------------
   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install a tool with &lt;code&gt;uv tool install&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv tool install ruff
Resolved 1 package in 6ms
Installed 1 package in 2ms
 + ruff==0.5.0
Installed 1 executable: ruff

$ ruff --version
ruff 0.5.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/tools/"&gt;tools documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Python versions&lt;/h3&gt; 
&lt;p&gt;uv installs Python and allows quickly switching between versions.&lt;/p&gt; 
&lt;p&gt;Install multiple Python versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv python install 3.10 3.11 3.12
Searching for Python versions matching: Python 3.10
Searching for Python versions matching: Python 3.11
Searching for Python versions matching: Python 3.12
Installed 3 versions in 3.42s
 + cpython-3.10.14-macos-aarch64-none
 + cpython-3.11.9-macos-aarch64-none
 + cpython-3.12.4-macos-aarch64-none
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Download Python versions as needed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv venv --python 3.12.0
Using Python 3.12.0
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate

$ uv run --python pypy@3.8 -- python --version
Python 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)
[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use a specific Python version in the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv python pin 3.11
Pinned `.python-version` to `3.11`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/install-python/"&gt;Python installation documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;The pip interface&lt;/h3&gt; 
&lt;p&gt;uv provides a drop-in replacement for common &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more.&lt;/p&gt; 
&lt;p&gt;Migrate to uv without changing your existing workflows — and experience a 10-100x speedup — with the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;Compile requirements into a platform-independent requirements file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv pip compile docs/requirements.in \
   --universal \
   --output-file docs/requirements.txt
Resolved 43 packages in 12ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv venv
Using Python 3.12.3
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install the locked requirements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv pip sync docs/requirements.txt
Resolved 43 packages in 11ms
Installed 43 packages in 208ms
 + babel==2.15.0
 + black==24.4.2
 + certifi==2024.7.4
 ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/pip/index/"&gt;pip interface documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;See uv's &lt;a href="https://docs.astral.sh/uv/reference/platforms/"&gt;platform support&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Versioning policy&lt;/h2&gt; 
&lt;p&gt;See uv's &lt;a href="https://docs.astral.sh/uv/reference/versioning/"&gt;versioning policy&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the &lt;a href="https://github.com/astral-sh/uv/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h4&gt;How do you pronounce uv?&lt;/h4&gt; 
&lt;p&gt;It's pronounced as "you - vee" (&lt;a href="https://en.wikipedia.org/wiki/Help:IPA/English#Key"&gt;&lt;code&gt;/juː viː/&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt; 
&lt;h4&gt;How should I stylize uv?&lt;/h4&gt; 
&lt;p&gt;Just "uv", please. See the &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/STYLE.md#styling-uv"&gt;style guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;uv's dependency resolver uses &lt;a href="https://github.com/pubgrub-rs/pubgrub"&gt;PubGrub&lt;/a&gt; under the hood. We're grateful to the PubGrub maintainers, especially &lt;a href="https://github.com/Eh2406"&gt;Jacob Finkelman&lt;/a&gt;, for their support.&lt;/p&gt; 
&lt;p&gt;uv's Git implementation is based on &lt;a href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Some of uv's optimizations are inspired by the great work we've seen in &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt;, &lt;a href="https://github.com/orogene/orogene"&gt;Orogene&lt;/a&gt;, and &lt;a href="https://github.com/oven-sh/bun"&gt;Bun&lt;/a&gt;. We've also learned a lot from Nathaniel J. Smith's &lt;a href="https://github.com/njsmith/posy"&gt;Posy&lt;/a&gt; and adapted its &lt;a href="https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline"&gt;trampoline&lt;/a&gt; for Windows support.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uv is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="https://opensource.org/licenses/MIT"&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a target="_blank" href="https://astral.sh" style="background:none"&gt; &lt;img src="https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg?sanitize=true" alt="Made by Astral" /&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>PyO3/pyo3</title>
      <link>https://github.com/PyO3/pyo3</link>
      <description>&lt;p&gt;Rust bindings for the Python interpreter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PyO3&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/PyO3/pyo3/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/PyO3/pyo3/ci.yml?branch=main&amp;amp;logo=github&amp;amp;style=" alt="actions status" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/PyO3/pyo3"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="benchmark" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/PyO3/pyo3"&gt;&lt;img src="https://img.shields.io/codecov/c/gh/PyO3/pyo3?logo=codecov" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/pyo3"&gt;&lt;img src="https://img.shields.io/crates/v/pyo3?logo=rust" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://rust-lang.github.io/rfcs/2495-min-rust-version.html"&gt;&lt;img src="https://img.shields.io/badge/rustc-1.83+-blue?logo=rust" alt="minimum rustc 1.83" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/33kcChzH7f"&gt;&lt;img src="https://img.shields.io/discord/1209263839632424990?logo=discord" alt="discord server" /&gt;&lt;/a&gt; &lt;a href="https://github.com/PyO3/pyo3/raw/main/Contributing.md"&gt;&lt;img src="https://img.shields.io/badge/contribute-on%20github-Green?logo=github" alt="contributing notes" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; bindings for &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;, including tools for creating native Python extension modules. Running and interacting with Python code from a Rust binary is also supported.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;User Guide: &lt;a href="https://pyo3.rs"&gt;stable&lt;/a&gt; | &lt;a href="https://pyo3.rs/main"&gt;main&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;API Documentation: &lt;a href="https://docs.rs/pyo3/"&gt;stable&lt;/a&gt; | &lt;a href="https://pyo3.rs/main/doc"&gt;main&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Requires Rust 1.83 or greater.&lt;/p&gt; 
&lt;p&gt;PyO3 supports the following Python distributions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CPython 3.7 or greater&lt;/li&gt; 
 &lt;li&gt;PyPy 7.3 (Python 3.11+)&lt;/li&gt; 
 &lt;li&gt;GraalPy 25.0 or greater (Python 3.12+)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use PyO3 to write a native Python module in Rust, or to embed Python in a Rust binary. The following sections explain each of these in turn.&lt;/p&gt; 
&lt;h3&gt;Using Rust from Python&lt;/h3&gt; 
&lt;p&gt;PyO3 can be used to generate a native Python module. The easiest way to try this out for the first time is to use &lt;a href="https://github.com/PyO3/maturin"&gt;&lt;code&gt;maturin&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;maturin&lt;/code&gt; is a tool for building and publishing Rust-based Python packages with minimal configuration. The following steps install &lt;code&gt;maturin&lt;/code&gt;, use it to generate and build a new Python package, and then launch Python to import and execute a function from the package.&lt;/p&gt; 
&lt;p&gt;First, follow the commands below to create a new directory containing a new Python &lt;code&gt;virtualenv&lt;/code&gt;, and install &lt;code&gt;maturin&lt;/code&gt; into the virtualenv using Python's package manager, &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# (replace string_sum with the desired package name)
$ mkdir string_sum
$ cd string_sum
$ python -m venv .env
$ source .env/bin/activate
$ pip install maturin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Still inside this &lt;code&gt;string_sum&lt;/code&gt; directory, now run &lt;code&gt;maturin init&lt;/code&gt;. This will generate the new package source. When given the choice of bindings to use, select pyo3 bindings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ maturin init
✔ 🤷 What kind of bindings to use? · pyo3
  ✨ Done! New project created string_sum
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The most important files generated by this command are &lt;code&gt;Cargo.toml&lt;/code&gt; and &lt;code&gt;lib.rs&lt;/code&gt;, which will look roughly like the following:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[package]
name = "string_sum"
version = "0.1.0"
edition = "2021"

[lib]
# The name of the native library. This is the name which will be used in Python to import the
# library (i.e. `import string_sum`). If you change this, you must also change the name of the
# `#[pymodule]` in `src/lib.rs`.
name = "string_sum"
# "cdylib" is necessary to produce a shared library for Python to import from.
#
# Downstream Rust code (including code in `bin/`, `examples/`, and `tests/`) will not be able
# to `use string_sum;` unless the "rlib" or "lib" crate type is also included, e.g.:
# crate-type = ["cdylib", "rlib"]
crate-type = ["cdylib"]

[dependencies]
pyo3 = { version = "0.27.0", features = ["extension-module"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/lib.rs&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;/// A Python module implemented in Rust. The name of this module must match
/// the `lib.name` setting in the `Cargo.toml`, else Python will not be able to
/// import the module.
#[pyo3::pymodule]
mod string_sum {
  use pyo3::prelude::*;

  /// Formats the sum of two numbers as string.
  #[pyfunction]
  fn sum_as_string(a: usize, b: usize) -&amp;gt; PyResult&amp;lt;String&amp;gt; {
    Ok((a + b).to_string())
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, run &lt;code&gt;maturin develop&lt;/code&gt;. This will build the package and install it into the Python virtualenv previously created and activated. The package is then ready to be used from &lt;code&gt;python&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ maturin develop
# lots of progress output as maturin runs the compilation...
$ python
&amp;gt;&amp;gt;&amp;gt; import string_sum
&amp;gt;&amp;gt;&amp;gt; string_sum.sum_as_string(5, 20)
'25'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To make changes to the package, just edit the Rust source code and then re-run &lt;code&gt;maturin develop&lt;/code&gt; to recompile.&lt;/p&gt; 
&lt;p&gt;To run this all as a single copy-and-paste, use the bash script below (replace &lt;code&gt;string_sum&lt;/code&gt; in the first command with the desired package name):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir string_sum &amp;amp;&amp;amp; cd "$_"
python -m venv .env
source .env/bin/activate
pip install maturin
maturin init --bindings pyo3
maturin develop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to be able to run &lt;code&gt;cargo test&lt;/code&gt; or use this project in a Cargo workspace and are running into linker issues, there are some workarounds in &lt;a href="https://pyo3.rs/latest/faq.html#i-cant-run-cargo-test-or-i-cant-build-in-a-cargo-workspace-im-having-linker-issues-like-symbol-not-found-or-undefined-reference-to-_pyexc_systemerror"&gt;the FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;As well as with &lt;code&gt;maturin&lt;/code&gt;, it is possible to build using &lt;a href="https://github.com/PyO3/setuptools-rust"&gt;&lt;code&gt;setuptools-rust&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://pyo3.rs/latest/building-and-distribution.html#manual-builds"&gt;manually&lt;/a&gt;. Both offer more flexibility than &lt;code&gt;maturin&lt;/code&gt; but require more configuration to get started.&lt;/p&gt; 
&lt;h3&gt;Using Python from Rust&lt;/h3&gt; 
&lt;p&gt;To embed Python into a Rust binary, you need to ensure that your Python installation contains a shared library. The following steps demonstrate how to ensure this (for Ubuntu), and then give some example code which runs an embedded Python interpreter.&lt;/p&gt; 
&lt;p&gt;To install the Python shared library on Ubuntu:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt install python3-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install the Python shared library on RPM based distributions (e.g. Fedora, Red Hat, SuSE), install the &lt;code&gt;python3-devel&lt;/code&gt; package.&lt;/p&gt; 
&lt;p&gt;Start a new project with &lt;code&gt;cargo new&lt;/code&gt; and add &lt;code&gt;pyo3&lt;/code&gt; to the &lt;code&gt;Cargo.toml&lt;/code&gt; like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies.pyo3]
version = "0.27.0"
features = ["auto-initialize"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example program displaying the value of &lt;code&gt;sys.version&lt;/code&gt; and the current user name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use pyo3::prelude::*;
use pyo3::types::IntoPyDict;

fn main() -&amp;gt; PyResult&amp;lt;()&amp;gt; {
    Python::attach(|py| {
        let sys = py.import("sys")?;
        let version: String = sys.getattr("version")?.extract()?;

        let locals = [("os", py.import("os")?)].into_py_dict(py)?;
        let code = c"os.getenv('USER') or os.getenv('USERNAME') or 'Unknown'";
        let user: String = py.eval(code, None, Some(&amp;amp;locals))?.extract()?;

        println!("Hello {}, I'm Python {}", user, version);
        Ok(())
    })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The guide has &lt;a href="https://pyo3.rs/latest/python-from-rust.html"&gt;a section&lt;/a&gt; with lots of examples about this topic.&lt;/p&gt; 
&lt;h2&gt;Tools and libraries&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/maturin"&gt;maturin&lt;/a&gt; &lt;em&gt;Build and publish crates with pyo3, rust-cpython or cffi bindings as well as rust binaries as python packages&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/setuptools-rust"&gt;setuptools-rust&lt;/a&gt; &lt;em&gt;Setuptools plugin for Rust support&lt;/em&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/pyo3-built"&gt;pyo3-built&lt;/a&gt; &lt;em&gt;Simple macro to expose metadata obtained with the &lt;a href="https://crates.io/crates/built"&gt;&lt;code&gt;built&lt;/code&gt;&lt;/a&gt; crate as a &lt;a href="https://docs.rs/pyo3/*/pyo3/types/struct.PyDict.html"&gt;&lt;code&gt;PyDict&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/rust-numpy"&gt;rust-numpy&lt;/a&gt; &lt;em&gt;Rust binding of NumPy C-API&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gperinazzo/dict-derive"&gt;dict-derive&lt;/a&gt; &lt;em&gt;Derive FromPyObject to automatically transform Python dicts into Rust structs&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vorner/pyo3-log"&gt;pyo3-log&lt;/a&gt; &lt;em&gt;Bridge from Rust to Python logging&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/davidhewitt/pythonize"&gt;pythonize&lt;/a&gt; &lt;em&gt;Serde serializer for converting Rust objects to JSON-compatible Python objects&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/pyo3-async-runtimes"&gt;pyo3-async-runtimes&lt;/a&gt; &lt;em&gt;Utilities for interoperability with Python's Asyncio library and Rust's async runtimes.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mityax/rustimport"&gt;rustimport&lt;/a&gt; &lt;em&gt;Directly import Rust files or crates from Python, without manual compilation step. Provides pyo3 integration by default and generates pyo3 binding code automatically.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/pyo3-arrow"&gt;pyo3-arrow&lt;/a&gt; &lt;em&gt;Lightweight &lt;a href="https://arrow.apache.org/"&gt;Apache Arrow&lt;/a&gt; integration for pyo3.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/pyo3-bytes"&gt;pyo3-bytes&lt;/a&gt; &lt;em&gt;Integration between &lt;a href="https://crates.io/crates/bytes"&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and pyo3.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/developmentseed/obstore/tree/main/pyo3-object_store"&gt;pyo3-object_store&lt;/a&gt; &lt;em&gt;Integration between &lt;a href="https://docs.rs/object_store"&gt;&lt;code&gt;object_store&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/PyO3/pyo3"&gt;&lt;code&gt;pyo3&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kylebarron/arro3"&gt;arro3&lt;/a&gt; &lt;em&gt;A minimal Python library for Apache Arrow, connecting to the Rust arrow crate.&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kylebarron/arro3/tree/main/arro3-compute"&gt;arro3-compute&lt;/a&gt; &lt;em&gt;&lt;code&gt;arro3-compute&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kylebarron/arro3/tree/main/arro3-core"&gt;arro3-core&lt;/a&gt; &lt;em&gt;&lt;code&gt;arro3-core&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kylebarron/arro3/tree/main/arro3-io"&gt;arro3-io&lt;/a&gt; &lt;em&gt;&lt;code&gt;arro3-io&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fastlmm/bed-reader"&gt;bed-reader&lt;/a&gt; &lt;em&gt;Read and write the PLINK BED format, simply and efficiently.&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Shows Rayon/ndarray::parallel (including capturing errors, controlling thread num), Python types to Rust generics, Github Actions&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oconnor663/blake3-py"&gt;blake3-py&lt;/a&gt; &lt;em&gt;Python bindings for the &lt;a href="https://github.com/BLAKE3-team/BLAKE3"&gt;BLAKE3&lt;/a&gt; cryptographic hash function.&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Parallelized &lt;a href="https://github.com/oconnor663/blake3-py/raw/master/.github/workflows/dists.yml"&gt;builds&lt;/a&gt; on GitHub Actions for MacOS, Linux, Windows, including free-threaded 3.13t wheels.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cellular-raza.com"&gt;cellular_raza&lt;/a&gt; &lt;em&gt;A cellular agent-based simulation framework for building complex models from a clean slate.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sfu-db/connector-x/tree/main/connectorx-python"&gt;connector-x&lt;/a&gt; &lt;em&gt;Fastest library to load data from DB to DataFrames in Rust and Python.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pyca/cryptography/tree/main/src/rust"&gt;cryptography&lt;/a&gt; &lt;em&gt;Python cryptography library with some functionality in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Stranger6667/css-inline/tree/master/bindings/python"&gt;css-inline&lt;/a&gt; &lt;em&gt;CSS inlining for Python implemented in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/arrow-datafusion-python"&gt;datafusion-python&lt;/a&gt; &lt;em&gt;A Python library that binds to Apache Arrow in-memory query engine DataFusion.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/delta-io/delta-rs/tree/main/python"&gt;deltalake-python&lt;/a&gt; &lt;em&gt;Native Delta Lake Python binding based on delta-rs with Pandas integration.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yankun1992/fastbloom"&gt;fastbloom&lt;/a&gt; &lt;em&gt;A fast &lt;a href="https://github.com/yankun1992/fastbloom#BloomFilter"&gt;bloom filter&lt;/a&gt; | &lt;a href="https://github.com/yankun1992/fastbloom#countingbloomfilter"&gt;counting bloom filter&lt;/a&gt; implemented by Rust for Rust and Python!&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thedrow/fastuuid/"&gt;fastuuid&lt;/a&gt; &lt;em&gt;Python bindings to Rust's UUID library.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/feos-org/feos"&gt;feos&lt;/a&gt; &lt;em&gt;Lightning fast thermodynamic modeling in Rust with fully developed Python interface.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Nnamdi-sys/finalytics"&gt;finalytics&lt;/a&gt; &lt;em&gt;Investment Analysis library in Rust | Python.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jinlow/forust"&gt;forust&lt;/a&gt; &lt;em&gt;A lightweight gradient boosted decision tree library written in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kylebarron/geo-index"&gt;geo-index&lt;/a&gt; &lt;em&gt;A Rust crate and &lt;a href="https://github.com/kylebarron/geo-index/tree/main/python"&gt;Python library&lt;/a&gt; for packed, immutable, zero-copy spatial indexes.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emmett-framework/granian"&gt;granian&lt;/a&gt; &lt;em&gt;A Rust HTTP server for Python applications.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BooleanCat/haem"&gt;haem&lt;/a&gt; &lt;em&gt;A Python library for working on Bioinformatics problems.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deedy5/html2text_rs"&gt;html2text-rs&lt;/a&gt; &lt;em&gt;Python library for converting HTML to markup or plain text.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/setuptools-rust/tree/main/examples/html-py-ever"&gt;html-py-ever&lt;/a&gt; &lt;em&gt;Using &lt;a href="https://github.com/servo/html5ever"&gt;html5ever&lt;/a&gt; through &lt;a href="https://github.com/kuchiki-rs/kuchiki"&gt;kuchiki&lt;/a&gt; to speed up html parsing and css-selecting.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/hudi-rs"&gt;hudi-rs&lt;/a&gt; &lt;em&gt;The native Rust implementation for Apache Hudi, with C++ &amp;amp; Python API bindings.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/m-ou-se/inline-python"&gt;inline-python&lt;/a&gt; &lt;em&gt;Inline Python code directly in your Rust code.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kushaldas/johnnycanencrypt"&gt;johnnycanencrypt&lt;/a&gt; OpenPGP library with Yubikey support.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema/tree/master/crates/jsonschema-py"&gt;jsonschema&lt;/a&gt; &lt;em&gt;A high-performance JSON Schema validator for Python.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cds-astro/mocpy"&gt;mocpy&lt;/a&gt; &lt;em&gt;Astronomical Python library offering data structures for describing any arbitrary coverage regions on the unit sphere.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/developmentseed/obstore"&gt;obstore&lt;/a&gt; &lt;em&gt;The simplest, highest-throughput Python interface to Amazon S3, Google Cloud Storage, Azure Storage, &amp;amp; other S3-compliant APIs, powered by Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/opendal/tree/main/bindings/python"&gt;opendal&lt;/a&gt; &lt;em&gt;A data access layer that allows users to easily and efficiently retrieve data from various storage services in a unified way.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ijl/orjson"&gt;orjson&lt;/a&gt; &lt;em&gt;Fast Python JSON library.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aviramha/ormsgpack"&gt;ormsgpack&lt;/a&gt; &lt;em&gt;Fast Python msgpack library.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pola-rs/polars"&gt;polars&lt;/a&gt; &lt;em&gt;Fast multi-threaded DataFrame library in Rust | Python | Node.js.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jupyter-server/pycrdt"&gt;pycrdt&lt;/a&gt; &lt;em&gt;Python bindings for the Rust CRDT implementation &lt;a href="https://github.com/y-crdt/y-crdt"&gt;Yrs&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pydantic/pydantic-core"&gt;pydantic-core&lt;/a&gt; &lt;em&gt;Core validation logic for pydantic written in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deedy5/primp"&gt;primp&lt;/a&gt; &lt;em&gt;The fastest python HTTP client that can impersonate web browsers by mimicking their headers and TLS/JA3/JA4/HTTP2 fingerprints.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/attack68/rateslib"&gt;rateslib&lt;/a&gt; &lt;em&gt;A fixed income library for Python using Rust extensions.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/online-ml/river"&gt;river&lt;/a&gt; &lt;em&gt;Online machine learning in python, the computationally heavy statistics algorithms are implemented in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sparckles/Robyn"&gt;robyn&lt;/a&gt; A Super Fast Async Python Web Framework with a Rust runtime.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cjermain/rust-python-coverage"&gt;rust-python-coverage&lt;/a&gt; &lt;em&gt;Example PyO3 project with automated test coverage for Rust and Python.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x676e67/rnet"&gt;rnet&lt;/a&gt; Asynchronous Python HTTP Client with Black Magic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lakehq/sail"&gt;sail&lt;/a&gt; &lt;em&gt;Unifying stream, batch, and AI workloads with Apache Spark compatibility.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openai/tiktoken"&gt;tiktoken&lt;/a&gt; &lt;em&gt;A fast BPE tokeniser for use with OpenAI's models.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/tokenizers/tree/main/bindings/python"&gt;tokenizers&lt;/a&gt; &lt;em&gt;Python bindings to the Hugging Face tokenizers (NLP) written in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://github.com/ringsaturn/tzfpy"&gt;tzfpy&lt;/a&gt; &lt;em&gt;A fast package to convert longitude/latitude to timezone name.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jessekrubin/utiles"&gt;utiles&lt;/a&gt; &lt;em&gt;Fast Python web-map tile utilities&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Articles and other media&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=J7phN_M4GLM"&gt;(Video) Using Rust in Free-Threaded vs Regular Python 3.13&lt;/a&gt; - Jun 4, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KTQn_PTHNCw"&gt;(Video) Techniques learned from five years finding the way for Rust in Python&lt;/a&gt; - Feb 26, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=P47JUMSQagU"&gt;(Podcast) Bridging Python and Rust: An Interview with PyO3 Maintainer David Hewitt&lt;/a&gt; - Aug 30, 2024&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UmL_CA-v3O8"&gt;(Video) PyO3: From Python to Rust and Back Again&lt;/a&gt; - Jul 3, 2024&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust"&gt;Parsing Python ASTs 20x Faster with Rust&lt;/a&gt; - Jun 17, 2024&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UilujdubqVU"&gt;(Video) How Python Harnesses Rust through PyO3&lt;/a&gt; - May 18, 2024&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lyG6AKzu4ew"&gt;(Video) Combining Rust and Python: The Best of Both Worlds?&lt;/a&gt; - Mar 1, 2024&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=T45ZEmSR1-s"&gt;(Video) Extending Python with Rust using PyO3&lt;/a&gt; - Dec 16, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://terencezl.github.io/blog/2023/06/06/a-week-of-pyo3-rust-numpy/"&gt;A Week of PyO3 + rust-numpy (How to Speed Up Your Data Pipeline X Times)&lt;/a&gt; - Jun 6, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rustacean-station.org/episode/david-hewitt/"&gt;(Podcast) PyO3 with David Hewitt&lt;/a&gt; - May 19, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ohadravid.github.io/posts/2023-03-rusty-python/"&gt;Making Python 100x faster with less than 100 lines of Rust&lt;/a&gt; - Mar 28, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://fosdem.org/2023/schedule/event/rust_how_pydantic_v2_leverages_rusts_superpowers/"&gt;How Pydantic V2 leverages Rust's Superpowers&lt;/a&gt; - Feb 4, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://boring-guy.sh/posts/river-rust/"&gt;How we extended the River stats module with Rust using PyO3&lt;/a&gt; - Dec 23, 2022&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://towardsdatascience.com/nine-rules-for-writing-python-extensions-in-rust-d35ea3a4ec29?sk=f8d808d5f414154fdb811e4137011437"&gt;Nine Rules for Writing Python Extensions in Rust&lt;/a&gt; - Dec 31, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://saidvandeklundert.net/learn/2021-11-18-calling-rust-from-python-using-pyo3/"&gt;Calling Rust from Python using PyO3&lt;/a&gt; - Nov 18, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-XyWG_klSAw&amp;amp;t=320s"&gt;davidhewitt's 2021 talk at Rust Manchester meetup&lt;/a&gt; - Aug 19, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.waleedkhan.name/port-python-to-rust/"&gt;Incrementally porting a small Python project to Rust&lt;/a&gt; - Apr 29, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.vortexa.com/blog/integrating-rust-into-python"&gt;Vortexa - Integrating Rust into Python&lt;/a&gt; - Apr 12, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.yossarian.net/2020/08/02/Writing-and-publishing-a-python-module-in-rust"&gt;Writing and publishing a Python module in Rust&lt;/a&gt; - Aug 2, 2020&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Everyone is welcomed to contribute to PyO3! There are many ways to support the project, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;help PyO3 users with issues on GitHub and &lt;a href="https://discord.gg/33kcChzH7f"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;improve documentation&lt;/li&gt; 
 &lt;li&gt;write features and bugfixes&lt;/li&gt; 
 &lt;li&gt;publish blogs and examples of how to use PyO3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/PyO3/pyo3/raw/main/Contributing.md"&gt;contributing notes&lt;/a&gt; and &lt;a href="https://github.com/PyO3/pyo3/raw/main/Architecture.md"&gt;architecture guide&lt;/a&gt; have more resources if you wish to volunteer time for PyO3 and are searching where to start.&lt;/p&gt; 
&lt;p&gt;If you don't have time to contribute yourself but still wish to support the project's future success, some of our maintainers have GitHub sponsorship pages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sponsors/davidhewitt"&gt;davidhewitt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sponsors/messense"&gt;messense&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;PyO3 is licensed under the &lt;a href="https://raw.githubusercontent.com/PyO3/pyo3/main/LICENSE-APACHE"&gt;Apache-2.0 license&lt;/a&gt; or the &lt;a href="https://raw.githubusercontent.com/PyO3/pyo3/main/LICENSE-MIT"&gt;MIT license&lt;/a&gt;, at your option.&lt;/p&gt; 
&lt;p&gt;Python is licensed under the &lt;a href="https://docs.python.org/3/license.html"&gt;Python License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in PyO3 by you, as defined in the Apache License, shall be dual-licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.netlify.com"&gt; &lt;img src="https://www.netlify.com/v3/img/components/netlify-color-accent.svg?sanitize=true" alt="Deploys by Netlify" /&gt; &lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BurntSushi/ripgrep</title>
      <link>https://github.com/BurntSushi/ripgrep</link>
      <description>&lt;p&gt;ripgrep recursively searches directories for a regex pattern while respecting your gitignore&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ripgrep (rg)&lt;/h2&gt; 
&lt;p&gt;ripgrep is a line-oriented search tool that recursively searches the current directory for a regex pattern. By default, ripgrep will respect gitignore rules and automatically skip hidden files/directories and binary files. (To disable all automatic filtering by default, use &lt;code&gt;rg -uuu&lt;/code&gt;.) ripgrep has first class support on Windows, macOS and Linux, with binary downloads available for &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;every release&lt;/a&gt;. ripgrep is similar to other popular search tools like The Silver Searcher, ack and grep.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/actions"&gt;&lt;img src="https://github.com/BurntSushi/ripgrep/workflows/ci/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/ripgrep"&gt;&lt;img src="https://img.shields.io/crates/v/ripgrep.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://repology.org/project/ripgrep/badges"&gt;&lt;img src="https://repology.org/badge/tiny-repos/ripgrep.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Dual-licensed under MIT or the &lt;a href="https://unlicense.org"&gt;UNLICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CHANGELOG&lt;/h3&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt; for a release history.&lt;/p&gt; 
&lt;h3&gt;Documentation quick links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md"&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/regex/1/regex/#syntax"&gt;Regex syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;Configuration files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#complete"&gt;Shell completions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#building"&gt;Building&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#translations"&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Screenshot of search results&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://burntsushi.net/stuff/ripgrep1.png"&gt;&lt;img src="https://burntsushi.net/stuff/ripgrep1.png" alt="A screenshot of a sample search with ripgrep" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Quick examples comparing tools&lt;/h3&gt; 
&lt;p&gt;This example searches the entire &lt;a href="https://github.com/BurntSushi/linux"&gt;Linux kernel source tree&lt;/a&gt; (after running &lt;code&gt;make defconfig &amp;amp;&amp;amp; make -j8&lt;/code&gt;) for &lt;code&gt;[A-Z]+_SUSPEND&lt;/code&gt;, where all matches must be words. Timings were collected on a system with an Intel i9-12900K 5.2 GHz.&lt;/p&gt; 
&lt;p&gt;Please remember that a single benchmark is never enough! See my &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;blog post on ripgrep&lt;/a&gt; for a very detailed comparison with more benchmarks and analysis.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.082s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/p-ranav/hypergrep"&gt;hypergrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hgrep -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.167s (2.04x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;git grep -P -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.273s (3.34x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;The Silver Searcher&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ag -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;534&lt;/td&gt; 
   &lt;td&gt;0.443s (5.43x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r --ignore-files --no-hidden -I -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.639s (7.82x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.727s (8.91x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;2.670s (32.70x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/beyondgrep/ack3"&gt;ack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ack -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;2677&lt;/td&gt; 
   &lt;td&gt;2.935s (35.94x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Here's another benchmark on the same corpus as above that disregards gitignore files and searches with a whitelist instead. The corpus is the same as in the previous benchmark, and the flags passed to each command ensure that they are doing equivalent work:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -uuu -tc -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.063s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.607s (9.62x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grep -E -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.674s (10.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Now we'll move to searching on single large file. Here is a straight-up comparison between ripgrep, ugrep and GNU grep on a file cached in memory (~13GB, &lt;a href="http://opus.nlpl.eu/download.php?f=OpenSubtitles/v2018/mono/OpenSubtitles.raw.en.gz"&gt;&lt;code&gt;OpenSubtitles.raw.en.gz&lt;/code&gt;&lt;/a&gt;, decompressed):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.042s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;1.339s (1.28x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 egrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;6.577s (6.31x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;In the above benchmark, passing the &lt;code&gt;-n&lt;/code&gt; flag (for showing line numbers) increases the times to &lt;code&gt;1.664s&lt;/code&gt; for ripgrep and &lt;code&gt;9.484s&lt;/code&gt; for GNU grep. ugrep times are unaffected by the presence or absence of &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Beware of performance cliffs though:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.053s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;6.234s (5.92x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;28.973s (27.51x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;And performance can drop precipitously across the board when searching big files for patterns without any opportunities for literal optimizations:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;15.569s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;21.857s (1.40x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;32.409s (2.08x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6795&lt;/td&gt; 
   &lt;td&gt;8m30s (32.74x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Finally, high match counts also tend to both tank performance and smooth out the differences between tools (because performance is dominated by how quickly one can handle a match and not the algorithm used to detect the match, generally speaking):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;6.948s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;11.721s (1.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;15.217s (2.19x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Why should I use ripgrep?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;It can replace many use cases served by other search tools because it contains most of their features and is generally faster. (See &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#posix4ever"&gt;the FAQ&lt;/a&gt; for more details on whether ripgrep can truly replace grep.)&lt;/li&gt; 
 &lt;li&gt;Like other tools specialized to code search, ripgrep defaults to &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#recursive-search"&gt;recursive search&lt;/a&gt; and does &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#automatic-filtering"&gt;automatic filtering&lt;/a&gt;. Namely, ripgrep won't search files ignored by your &lt;code&gt;.gitignore&lt;/code&gt;/&lt;code&gt;.ignore&lt;/code&gt;/&lt;code&gt;.rgignore&lt;/code&gt; files, it won't search hidden files and it won't search binary files. Automatic filtering can be disabled with &lt;code&gt;rg -uuu&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;ripgrep can &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#manual-filtering-file-types"&gt;search specific types of files&lt;/a&gt;. For example, &lt;code&gt;rg -tpy foo&lt;/code&gt; limits your search to Python files and &lt;code&gt;rg -Tjs foo&lt;/code&gt; excludes JavaScript files from your search. ripgrep can be taught about new file types with custom matching rules.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports many features found in &lt;code&gt;grep&lt;/code&gt;, such as showing the context of search results, searching multiple patterns, highlighting matches with color and full Unicode support. Unlike GNU grep, ripgrep stays fast while supporting Unicode (which is always on).&lt;/li&gt; 
 &lt;li&gt;ripgrep has optional support for switching its regex engine to use PCRE2. Among other things, this makes it possible to use look-around and backreferences in your patterns, which are not supported in ripgrep's default regex engine. PCRE2 support can be enabled with &lt;code&gt;-P/--pcre2&lt;/code&gt; (use PCRE2 always) or &lt;code&gt;--auto-hybrid-regex&lt;/code&gt; (use PCRE2 only if needed). An alternative syntax is provided via the &lt;code&gt;--engine (default|pcre2|auto)&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;ripgrep has &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#replacements"&gt;rudimentary support for replacements&lt;/a&gt;, which permit rewriting output based on what was matched.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#file-encoding"&gt;searching files in text encodings&lt;/a&gt; other than UTF-8, such as UTF-16, latin-1, GBK, EUC-JP, Shift_JIS and more. (Some support for automatically detecting UTF-16 is provided. Other text encodings must be specifically specified with the &lt;code&gt;-E/--encoding&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;ripgrep supports searching files compressed in a common format (brotli, bzip2, gzip, lz4, lzma, xz, or zstandard) with the &lt;code&gt;-z/--search-zip&lt;/code&gt; flag.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#preprocessor"&gt;arbitrary input preprocessing filters&lt;/a&gt; which could be PDF text extraction, less supported decompression, decrypting, automatic encoding detection and so on.&lt;/li&gt; 
 &lt;li&gt;ripgrep can be configured via a &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;configuration file&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In other words, use ripgrep if you like speed, filtering by default, fewer bugs and Unicode support.&lt;/p&gt; 
&lt;h3&gt;Why shouldn't I use ripgrep?&lt;/h3&gt; 
&lt;p&gt;Despite initially not wanting to add every feature under the sun to ripgrep, over time, ripgrep has grown support for most features found in other file searching tools. This includes searching for results spanning across multiple lines, and opt-in support for PCRE2, which provides look-around and backreference support.&lt;/p&gt; 
&lt;p&gt;At this point, the primary reasons not to use ripgrep probably consist of one or more of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need a portable and ubiquitous tool. While ripgrep works on Windows, macOS and Linux, it is not ubiquitous and it does not conform to any standard such as POSIX. The best tool for this job is good old grep.&lt;/li&gt; 
 &lt;li&gt;There still exists some other feature (or bug) not listed in this README that you rely on that's in another tool that isn't in ripgrep.&lt;/li&gt; 
 &lt;li&gt;There is a performance edge case where ripgrep doesn't do well where another tool does do well. (Please file a bug report!)&lt;/li&gt; 
 &lt;li&gt;ripgrep isn't possible to install on your machine or isn't available for your platform. (Please file a bug report!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Is it really faster than everything else?&lt;/h3&gt; 
&lt;p&gt;Generally, yes. A large number of benchmarks with detailed analysis for each is &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;available on my blog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Summarizing, ripgrep is fast because:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is built on top of &lt;a href="https://github.com/rust-lang/regex"&gt;Rust's regex engine&lt;/a&gt;. Rust's regex engine uses finite automata, SIMD and aggressive literal optimizations to make searching very fast. (PCRE2 support can be opted into with the &lt;code&gt;-P/--pcre2&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;Rust's regex library maintains performance with full Unicode support by building UTF-8 decoding directly into its deterministic finite automaton engine.&lt;/li&gt; 
 &lt;li&gt;It supports searching with either memory maps or by searching incrementally with an intermediate buffer. The former is better for single files and the latter is better for large directories. ripgrep chooses the best searching strategy for you automatically.&lt;/li&gt; 
 &lt;li&gt;Applies your ignore patterns in &lt;code&gt;.gitignore&lt;/code&gt; files using a &lt;a href="https://docs.rs/regex/1/regex/struct.RegexSet.html"&gt;&lt;code&gt;RegexSet&lt;/code&gt;&lt;/a&gt;. That means a single file path can be matched against multiple glob patterns simultaneously.&lt;/li&gt; 
 &lt;li&gt;It uses a lock-free parallel recursive directory iterator, courtesy of &lt;a href="https://docs.rs/crossbeam"&gt;&lt;code&gt;crossbeam&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.rs/ignore"&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature comparison&lt;/h3&gt; 
&lt;p&gt;Andy Lester, author of &lt;a href="https://beyondgrep.com/"&gt;ack&lt;/a&gt;, has published an excellent table comparing the features of ack, ag, git-grep, GNU grep and ripgrep: &lt;a href="https://beyondgrep.com/feature-comparison/"&gt;https://beyondgrep.com/feature-comparison/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Note that ripgrep has grown a few significant new features recently that are not yet present in Andy's table. This includes, but is not limited to, configuration files, passthru, support for searching compressed files, multiline search and opt-in fancy regex support via PCRE2.&lt;/p&gt; 
&lt;h3&gt;Playground&lt;/h3&gt; 
&lt;p&gt;If you'd like to try ripgrep before installing, there's an unofficial &lt;a href="https://codapi.org/ripgrep/"&gt;playground&lt;/a&gt; and an &lt;a href="https://codapi.org/try/ripgrep/"&gt;interactive tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have any questions about these, please open an issue in the &lt;a href="https://github.com/nalgeon/tryxinyminutes"&gt;tutorial repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;The binary name for ripgrep is &lt;code&gt;rg&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;Archives of precompiled binaries for ripgrep are available for Windows, macOS and Linux.&lt;/a&gt;&lt;/strong&gt; Linux and Windows binaries are static executables. Users of platforms not explicitly mentioned below are advised to download one of these archives.&lt;/p&gt; 
&lt;p&gt;If you're a &lt;strong&gt;macOS Homebrew&lt;/strong&gt; or a &lt;strong&gt;Linuxbrew&lt;/strong&gt; user, then you can install ripgrep from homebrew-core:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;MacPorts&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.macports.org/ports.php?by=name&amp;amp;substr=ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo port install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Chocolatey&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://chocolatey.org/packages/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ choco install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Scoop&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/ripgrep.json"&gt;official bucket&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Winget&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/b/BurntSushi/ripgrep"&gt;winget-pkgs&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ winget install BurntSushi.ripgrep.MSVC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Arch Linux&lt;/strong&gt; user, then you can install ripgrep from the official repos:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -S ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Gentoo&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.gentoo.org/packages/sys-apps/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo emerge sys-apps/ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Fedora&lt;/strong&gt; user, you can install ripgrep from official repositories.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;openSUSE&lt;/strong&gt; user, ripgrep is included in &lt;strong&gt;openSUSE Tumbleweed&lt;/strong&gt; and &lt;strong&gt;openSUSE Leap&lt;/strong&gt; since 15.1.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo zypper install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;CentOS Stream 10&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://docs.fedoraproject.org/en-US/epel/getting-started/"&gt;EPEL&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf config-manager --set-enabled crb
$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm
$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Red Hat 10&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://docs.fedoraproject.org/en-US/epel/getting-started/"&gt;EPEL&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo subscription-manager repos --enable codeready-builder-for-rhel-10-$(arch)-rpms
$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm
$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Rocky Linux 10&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://docs.fedoraproject.org/en-US/epel/getting-started/"&gt;EPEL&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm
$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Nix&lt;/strong&gt; user, you can install ripgrep from &lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/ri/ripgrep/package.nix"&gt;nixpkgs&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ nix-env --install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Flox&lt;/strong&gt; user, you can install ripgrep as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ flox install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Guix&lt;/strong&gt; user, you can install ripgrep from the official package collection:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ guix install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Debian&lt;/strong&gt; user (or a user of a Debian derivative like &lt;strong&gt;Ubuntu&lt;/strong&gt;), then ripgrep can be installed using a binary &lt;code&gt;.deb&lt;/code&gt; file provided in each &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;ripgrep release&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ curl -LO https://github.com/BurntSushi/ripgrep/releases/download/14.1.1/ripgrep_14.1.1-1_amd64.deb
$ sudo dpkg -i ripgrep_14.1.1-1_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you run Debian stable, ripgrep is &lt;a href="https://tracker.debian.org/pkg/rust-ripgrep"&gt;officially maintained by Debian&lt;/a&gt;, although its version may be older than the &lt;code&gt;deb&lt;/code&gt; package available in the previous step.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Ubuntu Cosmic (18.10)&lt;/strong&gt; (or newer) user, ripgrep is &lt;a href="https://launchpad.net/ubuntu/+source/rust-ripgrep"&gt;available&lt;/a&gt; using the same packaging as Debian:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(N.B. Various snaps for ripgrep on Ubuntu are also available, but none of them seem to work right and generate a number of very strange bug reports that I don't know how to fix and don't have the time to fix. Therefore, it is no longer a recommended installation option.)&lt;/p&gt; 
&lt;p&gt;If you're an &lt;strong&gt;ALT&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.altlinux.org/en/search?name=ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;FreeBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.freshports.org/textproc/ripgrep/"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkg install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;OpenBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://openports.se/textproc/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ doas pkg_add ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;NetBSD&lt;/strong&gt; user, then you can install ripgrep from &lt;a href="https://pkgsrc.se/textproc/ripgrep"&gt;pkgsrc&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgin install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_64&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/haikuports/haikuports/tree/master/sys-apps/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_gcc2&lt;/strong&gt; user, then you can install ripgrep from the same port as Haiku x86_64 using the x86 secondary architecture build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep_x86
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Void Linux&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://voidlinux.org/packages/?arch=x86_64&amp;amp;q=ripgrep"&gt;official repository&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo xbps-install -Syv ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Rust programmer&lt;/strong&gt;, ripgrep can be installed with &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Note that the minimum supported version of Rust for ripgrep is &lt;strong&gt;1.85.0&lt;/strong&gt;, although ripgrep may work with older versions.&lt;/li&gt; 
 &lt;li&gt;Note that the binary may be bigger than expected because it contains debug symbols. This is intentional. To remove debug symbols and therefore reduce the file size, run &lt;code&gt;strip&lt;/code&gt; on the binary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, one can use &lt;a href="https://github.com/cargo-bins/cargo-binstall"&gt;&lt;code&gt;cargo binstall&lt;/code&gt;&lt;/a&gt; to install a ripgrep binary directly from GitHub:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo binstall ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;ripgrep is written in Rust, so you'll need to grab a &lt;a href="https://www.rust-lang.org/"&gt;Rust installation&lt;/a&gt; in order to compile it. ripgrep compiles with Rust 1.85.0 (stable) or newer. In general, ripgrep tracks the latest stable release of the Rust compiler.&lt;/p&gt; 
&lt;p&gt;To build ripgrep:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/BurntSushi/ripgrep
$ cd ripgrep
$ cargo build --release
$ ./target/release/rg --version
0.1.3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the past, ripgrep supported a &lt;code&gt;simd-accel&lt;/code&gt; Cargo feature when using a Rust nightly compiler. This only benefited UTF-16 transcoding. Since it required unstable features, this build mode was prone to breakage. Because of that, support for it has been removed. If you want SIMD optimizations for UTF-16 transcoding, then you'll have to petition the &lt;a href="https://github.com/hsivonen/encoding_rs"&gt;&lt;code&gt;encoding_rs&lt;/code&gt;&lt;/a&gt; project to use stable APIs.&lt;/p&gt; 
&lt;p&gt;Finally, optional PCRE2 support can be built with ripgrep by enabling the &lt;code&gt;pcre2&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo build --release --features 'pcre2'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enabling the PCRE2 feature works with a stable Rust compiler and will attempt to automatically find and link with your system's PCRE2 library via &lt;code&gt;pkg-config&lt;/code&gt;. If one doesn't exist, then ripgrep will build PCRE2 from source using your system's C compiler and then statically link it into the final executable. Static linking can be forced even when there is an available PCRE2 system library by either building ripgrep with the MUSL target or by setting &lt;code&gt;PCRE2_SYS_STATIC=1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;ripgrep can be built with the MUSL target on Linux by first installing the MUSL library on your system (consult your friendly neighborhood package manager). Then you just need to add MUSL support to your Rust toolchain and rebuild ripgrep, which yields a fully static executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ rustup target add x86_64-unknown-linux-musl
$ cargo build --release --target x86_64-unknown-linux-musl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Applying the &lt;code&gt;--features&lt;/code&gt; flag from above works as expected. If you want to build a static executable with MUSL and with PCRE2, then you will need to have &lt;code&gt;musl-gcc&lt;/code&gt; installed, which might be in a separate package from the actual MUSL library, depending on your Linux distribution.&lt;/p&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;p&gt;ripgrep is relatively well-tested, including both unit tests and integration tests. To run the full test suite, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo test --all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;from the repository root.&lt;/p&gt; 
&lt;h3&gt;Related tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dandavison/delta"&gt;delta&lt;/a&gt; is a syntax highlighting pager that supports the &lt;code&gt;rg --json&lt;/code&gt; output format. So all you need to do to make it work is &lt;code&gt;rg --json pattern | delta&lt;/code&gt;. See &lt;a href="https://dandavison.github.io/delta/grep.html"&gt;delta's manual section on grep&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Vulnerability reporting&lt;/h3&gt; 
&lt;p&gt;For reporting a security vulnerability, please &lt;a href="https://blog.burntsushi.net/about/"&gt;contact Andrew Gallant&lt;/a&gt;. The contact page has my email address and PGP public key if you wish to send an encrypted message.&lt;/p&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;p&gt;The following is a list of known translations of ripgrep's documentation. These are unofficially maintained and may not be up to date.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chinanf-boy/ripgrep-zh#%E6%9B%B4%E6%96%B0-"&gt;Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/UltiRequiem/traducciones/tree/master/ripgrep"&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>atuinsh/atuin</title>
      <link>https://github.com/atuinsh/atuin</link>
      <description>&lt;p&gt;✨ Magical shell history&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/atuinsh/atuin/assets/53315310/13216a1d-1ac0-4c99-b0eb-d88290fe0efd" /&gt; 
  &lt;img alt="Text changing depending on mode. Light: 'So light!' Dark: 'So dark!'" src="https://github.com/atuinsh/atuin/assets/53315310/08bc86d4-a781-4aaa-8d7e-478ae6bcd129" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;em&gt;magical shell history&lt;/em&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/atuinsh/atuin/actions?query=workflow%3ARust"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/atuinsh/atuin/rust.yml?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/atuin"&gt;&lt;img src="https://img.shields.io/crates/v/atuin.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/atuin"&gt;&lt;img src="https://img.shields.io/crates/d/atuin.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/atuinsh/atuin/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/atuin.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/Fq8bJSKPHh"&gt;&lt;img src="https://img.shields.io/discord/954121165239115808" /&gt;&lt;/a&gt; &lt;a rel="me" href="https://hachyderm.io/@atuin"&gt;&lt;img src="https://img.shields.io/mastodon/follow/109944632283122560?domain=https%3A%2F%2Fhachyderm.io&amp;amp;style=social" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/atuinsh"&gt;&lt;img src="https://img.shields.io/twitter/follow/atuinsh?style=social" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/atuinsh/atuin/main/README.md"&gt;English&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/atuinsh/atuin/main/docs/zh-CN/README.md"&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Atuin replaces your existing shell history with a SQLite database, and records additional context for your commands. Additionally, it provides optional and &lt;em&gt;fully encrypted&lt;/em&gt; synchronisation of your history between machines, via an Atuin server.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/atuinsh/atuin/main/demo.gif" alt="animated" width="80%" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;em&gt;exit code, duration, time and command shown&lt;/em&gt; &lt;/p&gt; 
&lt;p&gt;As well as the search UI, it can do things like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# search for all successful `make` commands, recorded after 3pm yesterday
atuin search --exit 0 --after "yesterday 3pm" make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may use either the server I host, or host your own! Or just don't use sync at all. As all history sync is encrypted, I couldn't access your data even if I wanted to. And I &lt;strong&gt;really&lt;/strong&gt; don't want to.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;rebind &lt;code&gt;ctrl-r&lt;/code&gt; and &lt;code&gt;up&lt;/code&gt; (configurable) to a full screen history search UI&lt;/li&gt; 
 &lt;li&gt;store shell history in a sqlite database&lt;/li&gt; 
 &lt;li&gt;back up and sync &lt;strong&gt;encrypted&lt;/strong&gt; shell history&lt;/li&gt; 
 &lt;li&gt;the same history across terminals, across sessions, and across machines&lt;/li&gt; 
 &lt;li&gt;log exit code, cwd, hostname, session, command duration, etc&lt;/li&gt; 
 &lt;li&gt;calculate statistics such as "most used command"&lt;/li&gt; 
 &lt;li&gt;old history file is not replaced&lt;/li&gt; 
 &lt;li&gt;quick-jump to previous items with &lt;kbd&gt;Alt-&amp;lt;num&amp;gt;&lt;/kbd&gt;&lt;/li&gt; 
 &lt;li&gt;switch filter modes via ctrl-r; search history just from the current session, directory, or globally&lt;/li&gt; 
 &lt;li&gt;enter to execute a command, tab to edit&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/atuinsh/atuin/main/#quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/installation/"&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/sync/"&gt;Setting up sync&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/import/"&gt;Import history&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/basic-usage/"&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Shells&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;zsh&lt;/li&gt; 
 &lt;li&gt;bash&lt;/li&gt; 
 &lt;li&gt;fish&lt;/li&gt; 
 &lt;li&gt;nushell&lt;/li&gt; 
 &lt;li&gt;xonsh&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;h3&gt;Forum&lt;/h3&gt; 
&lt;p&gt;Atuin has a community forum, please ask here for help and support: &lt;a href="https://forum.atuin.sh/"&gt;https://forum.atuin.sh/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Discord&lt;/h3&gt; 
&lt;p&gt;Atuin also has a community Discord, available &lt;a href="https://discord.gg/jR3tfchVvW"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Quickstart&lt;/h1&gt; 
&lt;p&gt;This will sign you up for the Atuin Cloud sync server. Everything is end-to-end encrypted, so your secrets are safe!&lt;/p&gt; 
&lt;p&gt;Read more in the &lt;a href="https://docs.atuin.sh"&gt;docs&lt;/a&gt; for an offline setup, self hosted server, and more.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh

atuin register -u &amp;lt;USERNAME&amp;gt; -e &amp;lt;EMAIL&amp;gt;
atuin import auto
atuin sync
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then restart your shell!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;For Bash users&lt;/strong&gt;: The above sets up &lt;code&gt;bash-preexec&lt;/code&gt; for necessary hooks, but &lt;code&gt;bash-preexec&lt;/code&gt; has limitations. For details, please see the &lt;a href="https://docs.atuin.sh/guide/installation/#installing-the-shell-plugin"&gt;Bash&lt;/a&gt; section of the shell plugin documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Security&lt;/h1&gt; 
&lt;p&gt;If you find any security issues, we'd appreciate it if you could alert &lt;a href="mailto:ellie@atuin.sh"&gt;ellie@atuin.sh&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;a href="https://github.com/atuinsh/atuin/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=atuinsh/atuin&amp;amp;max=300" /&gt; &lt;/a&gt; 
&lt;p&gt;Made with &lt;a href="https://contrib.rocks"&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>