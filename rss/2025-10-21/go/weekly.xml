<rss version="2.0">
  <channel>
    <title>GitHub Go Weekly Trending</title>
    <description>Weekly Trending of Go in GitHub</description>
    <pubDate>Mon, 20 Oct 2025 01:42:04 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>wavetermdev/waveterm</title>
      <link>https://github.com/wavetermdev/waveterm</link>
      <description>&lt;p&gt;An open-source, cross-platform terminal for seamless workflows&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://www.waveterm.dev"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="./assets/wave-dark.png" /&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="./assets/wave-light.png" /&gt; 
   &lt;img alt="Wave Terminal Logo" src="https://raw.githubusercontent.com/wavetermdev/waveterm/main/assets/wave-light.png" width="240" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;br /&gt; &lt;/p&gt; 
&lt;h1&gt;Wave Terminal&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fwavetermdev%2Fwaveterm?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fwavetermdev%2Fwaveterm.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Wave is an open-source terminal that combines traditional terminal features with graphical capabilities like file previews, web browsing, and AI assistance. It runs on MacOS, Linux, and Windows.&lt;/p&gt; 
&lt;p&gt;Modern development involves constantly switching between terminals and browsers - checking documentation, previewing files, monitoring systems, and using AI tools. Wave brings these graphical tools directly into the terminal, letting you control them from the command line. This means you can stay in your terminal workflow while still having access to the visual interfaces you need.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/wavetermdev/waveterm/main/assets/wave-screenshot.webp" alt="WaveTerm Screenshot" /&gt;&lt;/p&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Flexible drag &amp;amp; drop interface to organize terminal blocks, editors, web browsers, and AI assistants&lt;/li&gt; 
 &lt;li&gt;Built-in editor for seamlessly editing remote files with syntax highlighting and modern editor features&lt;/li&gt; 
 &lt;li&gt;Rich file preview system for remote files (markdown, images, video, PDFs, CSVs, directories)&lt;/li&gt; 
 &lt;li&gt;Integrated AI chat with support for multiple models (OpenAI, Claude, Azure, Perplexity, Ollama)&lt;/li&gt; 
 &lt;li&gt;Command Blocks for isolating and monitoring individual commands with auto-close options&lt;/li&gt; 
 &lt;li&gt;One-click remote connections with full terminal and file system access&lt;/li&gt; 
 &lt;li&gt;Rich customization including tab themes, terminal styles, and background images&lt;/li&gt; 
 &lt;li&gt;Powerful &lt;code&gt;wsh&lt;/code&gt; command system for managing your workspace from the CLI and sharing data between terminal sessions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Wave Terminal works on macOS, Linux, and Windows.&lt;/p&gt; 
&lt;p&gt;Platform-specific installation instructions can be found &lt;a href="https://docs.waveterm.dev/gettingstarted"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also install Wave Terminal directly from: &lt;a href="https://www.waveterm.dev/download"&gt;www.waveterm.dev/download&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Minimum requirements&lt;/h3&gt; 
&lt;p&gt;Wave Terminal runs on the following platforms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 11 or later (arm64, x64)&lt;/li&gt; 
 &lt;li&gt;Windows 10 1809 or later (x64)&lt;/li&gt; 
 &lt;li&gt;Linux based on glibc-2.28 or later (Debian 10, RHEL 8, Ubuntu 20.04, etc.) (arm64, x64)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The WSH helper runs on the following platforms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 11 or later (arm64, x64)&lt;/li&gt; 
 &lt;li&gt;Windows 10 or later (arm64, x64)&lt;/li&gt; 
 &lt;li&gt;Linux Kernel 2.6.32 or later (x64), Linux Kernel 3.1 or later (arm64)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Wave is constantly improving! Our roadmap will be continuously updated with our goals for each release. You can find it &lt;a href="https://raw.githubusercontent.com/wavetermdev/waveterm/main/ROADMAP.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Want to provide input to our future releases? Connect with us on &lt;a href="https://discord.gg/XfvZ334gwU"&gt;Discord&lt;/a&gt; or open a &lt;a href="https://github.com/wavetermdev/waveterm/issues/new/choose"&gt;Feature Request&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Homepage — &lt;a href="https://www.waveterm.dev"&gt;https://www.waveterm.dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Download Page — &lt;a href="https://www.waveterm.dev/download"&gt;https://www.waveterm.dev/download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Documentation — &lt;a href="https://docs.waveterm.dev"&gt;https://docs.waveterm.dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Legacy Documentation — &lt;a href="https://legacydocs.waveterm.dev"&gt;https://legacydocs.waveterm.dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Blog — &lt;a href="https://blog.waveterm.dev"&gt;https://blog.waveterm.dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;X — &lt;a href="https://x.com/wavetermdev"&gt;https://x.com/wavetermdev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Discord Community — &lt;a href="https://discord.gg/XfvZ334gwU"&gt;https://discord.gg/XfvZ334gwU&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building from Source&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/wavetermdev/waveterm/main/BUILD.md"&gt;Building Wave Terminal&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Wave uses GitHub Issues for issue tracking.&lt;/p&gt; 
&lt;p&gt;Find more information in our &lt;a href="https://raw.githubusercontent.com/wavetermdev/waveterm/main/CONTRIBUTING.md"&gt;Contributions Guide&lt;/a&gt;, which includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wavetermdev/waveterm/main/CONTRIBUTING.md#contributing-to-wave-terminal"&gt;Ways to contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wavetermdev/waveterm/main/CONTRIBUTING.md#before-you-start"&gt;Contribution guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.waveterm.dev/storybook"&gt;Storybook&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Wave Terminal is licensed under the Apache-2.0 License. For more information on our dependencies, see &lt;a href="https://raw.githubusercontent.com/wavetermdev/waveterm/main/ACKNOWLEDGEMENTS.md"&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>junegunn/fzf</title>
      <link>https://github.com/junegunn/fzf</link>
      <description>&lt;p&gt;🌸 A command-line fuzzy finder&lt;/p&gt;&lt;hr&gt;&lt;div align="center" markdown="1"&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;a href="https://tuple.app/fzf"&gt; &lt;img alt="Tuple's sponsorship image" src="https://raw.githubusercontent.com/junegunn/i/master/tuple.png" width="400" /&gt; &lt;/a&gt; 
 &lt;h3&gt;&lt;a href="https://tuple.app/fzf"&gt;Tuple, the premier screen sharing app for developers&lt;/a&gt;&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://tuple.app/fzf"&gt;Available for MacOS &amp;amp; Windows&lt;/a&gt;&lt;br /&gt;&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;sup&gt;Special thanks to:&lt;/sup&gt; &lt;br /&gt; &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=fzf"&gt; &lt;img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae" /&gt; &lt;/a&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=fzf"&gt;Warp, the intelligent terminal for developers&lt;/a&gt;&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=fzf"&gt;Available for MacOS, Linux, &amp;amp; Windows&lt;/a&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-color.png" alt="fzf - a command-line fuzzy finder" /&gt; 
 &lt;a href="https://github.com/junegunn/fzf/actions"&gt;&lt;img src="https://github.com/junegunn/fzf/actions/workflows/linux.yml/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt; 
 &lt;a href="http://github.com/junegunn/fzf/releases"&gt;&lt;img src="https://img.shields.io/github/v/tag/junegunn/fzf" alt="Version" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/junegunn/fzf?tab=MIT-1-ov-file#readme"&gt;&lt;img src="https://img.shields.io/github/license/junegunn/fzf" alt="License" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/junegunn/fzf/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/junegunn/fzf" alt="Contributors" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/sponsors/junegunn"&gt;&lt;img src="https://img.shields.io/github/sponsors/junegunn" alt="Sponsors" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/junegunn/fzf/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/junegunn/fzf?style=flat" alt="Stars" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;fzf is a general-purpose command-line fuzzy finder.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png" width="640" /&gt; 
&lt;p&gt;It's an interactive filter program for any kind of list; files, command history, processes, hostnames, bookmarks, git commits, etc. It implements a "fuzzy" matching algorithm, so you can quickly type in patterns with omitted characters and still get the results you want.&lt;/p&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt; — Distributed as a single binary for easy installation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; — Optimized to process millions of items instantly&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Versatile&lt;/strong&gt; — Fully customizable through an event-action binding mechanism&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;All-inclusive&lt;/strong&gt; — Comes with integrations for Bash, Zsh, Fish, Vim, and Neovim&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;!-- vim-markdown-toc GFM --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#using-homebrew"&gt;Using Homebrew&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#linux-packages"&gt;Linux packages&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#windows-packages"&gt;Windows packages&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#using-git"&gt;Using git&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#binary-releases"&gt;Binary releases&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#setting-up-shell-integration"&gt;Setting up shell integration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#vimneovim-plugin"&gt;Vim/Neovim plugin&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#upgrading-fzf"&gt;Upgrading fzf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#building-fzf"&gt;Building fzf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#usage"&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#using-the-finder"&gt;Using the finder&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#display-modes"&gt;Display modes&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#--height-mode"&gt;&lt;code&gt;--height&lt;/code&gt; mode&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#--tmux-mode"&gt;&lt;code&gt;--tmux&lt;/code&gt; mode&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#search-syntax"&gt;Search syntax&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#environment-variables"&gt;Environment variables&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#customizing-the-look"&gt;Customizing the look&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#options"&gt;Options&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#demo"&gt;Demo&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#key-bindings-for-command-line"&gt;Key bindings for command-line&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#fuzzy-completion-for-bash-and-zsh"&gt;Fuzzy completion for bash and zsh&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#files-and-directories"&gt;Files and directories&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#process-ids"&gt;Process IDs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#host-names"&gt;Host names&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#environment-variables--aliases"&gt;Environment variables / Aliases&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#customizing-fzf-options-for-completion"&gt;Customizing fzf options for completion&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#customizing-completion-source-for-paths-and-directories"&gt;Customizing completion source for paths and directories&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#supported-commands"&gt;Supported commands&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#custom-fuzzy-completion"&gt;Custom fuzzy completion&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#vim-plugin"&gt;Vim plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#advanced-topics"&gt;Advanced topics&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#customizing-for-different-types-of-input"&gt;Customizing for different types of input&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#performance"&gt;Performance&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#executing-external-programs"&gt;Executing external programs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#turning-into-a-different-process"&gt;Turning into a different process&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#reloading-the-candidate-list"&gt;Reloading the candidate list&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#1-update-the-list-of-processes-by-pressing-ctrl-r"&gt;1. Update the list of processes by pressing CTRL-R&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#2-switch-between-sources-by-pressing-ctrl-d-or-ctrl-f"&gt;2. Switch between sources by pressing CTRL-D or CTRL-F&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#3-interactive-ripgrep-integration"&gt;3. Interactive ripgrep integration&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#preview-window"&gt;Preview window&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#previewing-an-image"&gt;Previewing an image&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#tips"&gt;Tips&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#respecting-gitignore"&gt;Respecting &lt;code&gt;.gitignore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#fish-shell"&gt;Fish shell&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#fzf-theme-playground"&gt;fzf Theme Playground&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#related-projects"&gt;Related projects&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#sponsors-heart"&gt;Sponsors &lt;span&gt;❤️&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- vim-markdown-toc --&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Using Homebrew&lt;/h3&gt; 
&lt;p&gt;You can use &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt; (on macOS or Linux) to install fzf.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install fzf
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] To set up shell integration (key bindings and fuzzy completion), see &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#setting-up-shell-integration"&gt;the instructions below&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;fzf is also available &lt;a href="https://github.com/macports/macports-ports/raw/master/sysutils/fzf/Portfile"&gt;via MacPorts&lt;/a&gt;: &lt;code&gt;sudo port install fzf&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Linux packages&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Linux Distribution&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;APK&lt;/td&gt; 
   &lt;td&gt;Alpine Linux&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sudo apk add fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;APT&lt;/td&gt; 
   &lt;td&gt;Debian 9+/Ubuntu 19.10+&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sudo apt install fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Conda&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;conda install -c conda-forge fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DNF&lt;/td&gt; 
   &lt;td&gt;Fedora&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sudo dnf install fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Nix&lt;/td&gt; 
   &lt;td&gt;NixOS, etc.&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Pacman&lt;/td&gt; 
   &lt;td&gt;Arch Linux&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sudo pacman -S fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pkg&lt;/td&gt; 
   &lt;td&gt;FreeBSD&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pkg install fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pkgin&lt;/td&gt; 
   &lt;td&gt;NetBSD&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pkgin install fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pkg_add&lt;/td&gt; 
   &lt;td&gt;OpenBSD&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pkg_add fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Portage&lt;/td&gt; 
   &lt;td&gt;Gentoo&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;emerge --ask app-shells/fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Spack&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;spack install fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;XBPS&lt;/td&gt; 
   &lt;td&gt;Void Linux&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sudo xbps-install -S fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Zypper&lt;/td&gt; 
   &lt;td&gt;openSUSE&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sudo zypper install fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] To set up shell integration (key bindings and fuzzy completion), see &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#setting-up-shell-integration"&gt;the instructions below&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/fzf/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/fzf.svg?columns=3" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Windows packages&lt;/h3&gt; 
&lt;p&gt;On Windows, fzf is available via &lt;a href="https://chocolatey.org/packages/fzf"&gt;Chocolatey&lt;/a&gt;, &lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/fzf.json"&gt;Scoop&lt;/a&gt;, &lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/j/junegunn/fzf"&gt;Winget&lt;/a&gt;, and &lt;a href="https://packages.msys2.org/base/mingw-w64-fzf"&gt;MSYS2&lt;/a&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package manager&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Chocolatey&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;choco install fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Scoop&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;scoop install fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Winget&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;winget install fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MSYS2 (pacman)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pacman -S $MINGW_PACKAGE_PREFIX-fzf&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Using git&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can "git clone" this repository to any directory and run &lt;a href="https://github.com/junegunn/fzf/raw/master/install"&gt;install&lt;/a&gt; script.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The install script will add lines to your shell configuration file to modify &lt;code&gt;$PATH&lt;/code&gt; and set up shell integration.&lt;/p&gt; 
&lt;h3&gt;Binary releases&lt;/h3&gt; 
&lt;p&gt;You can download the official fzf binaries from the releases page.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/junegunn/fzf/releases"&gt;https://github.com/junegunn/fzf/releases&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Setting up shell integration&lt;/h3&gt; 
&lt;p&gt;Add the following line to your shell configuration file.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;bash &lt;pre&gt;&lt;code class="language-sh"&gt;# Set up fzf key bindings and fuzzy completion
eval "$(fzf --bash)"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;zsh &lt;pre&gt;&lt;code class="language-sh"&gt;# Set up fzf key bindings and fuzzy completion
source &amp;lt;(fzf --zsh)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;fish &lt;pre&gt;&lt;code class="language-fish"&gt;# Set up fzf key bindings
fzf --fish | source
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;code&gt;--bash&lt;/code&gt;, &lt;code&gt;--zsh&lt;/code&gt;, and &lt;code&gt;--fish&lt;/code&gt; options are only available in fzf 0.48.0 or later. If you have an older version of fzf, or want finer control, you can source individual script files in the &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/shell"&gt;/shell&lt;/a&gt; directory. The location of the files may vary depending on the package manager you use. Please refer to the package documentation for more information. (e.g. &lt;code&gt;apt show fzf&lt;/code&gt;)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] You can disable CTRL-T, CTRL-R, or ALT-C bindings by setting the corresponding &lt;code&gt;*_COMMAND&lt;/code&gt; variable to an empty string when sourcing the script. For example, to disable CTRL-R and ALT-C:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;bash: &lt;code&gt;FZF_CTRL_R_COMMAND= FZF_ALT_C_COMMAND= eval "$(fzf --bash)"&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;zsh: &lt;code&gt;FZF_CTRL_R_COMMAND= FZF_ALT_C_COMMAND= source &amp;lt;(fzf --zsh)&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;fish: &lt;code&gt;fzf --fish | FZF_CTRL_R_COMMAND= FZF_ALT_C_COMMAND= source&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Setting the variables after sourcing the script will have no effect.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Vim/Neovim plugin&lt;/h3&gt; 
&lt;p&gt;If you use &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;, add this to your Vim configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-vim"&gt;Plug 'junegunn/fzf', { 'do': { -&amp;gt; fzf#install() } }
Plug 'junegunn/fzf.vim'
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;junegunn/fzf&lt;/code&gt; provides the basic library functions 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;fzf#install()&lt;/code&gt; makes sure that you have the latest binary&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;junegunn/fzf.vim&lt;/code&gt; is &lt;a href="https://github.com/junegunn/fzf.vim"&gt;a separate project&lt;/a&gt; that provides a variety of useful commands&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To learn more about the Vim integration, see &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/README-VIM.md"&gt;README-VIM.md&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] If you use Neovim and prefer Lua-based plugins, check out &lt;a href="https://github.com/ibhagwan/fzf-lua"&gt;fzf-lua&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Upgrading fzf&lt;/h2&gt; 
&lt;p&gt;fzf is being actively developed, and you might want to upgrade it once in a while. Please follow the instruction below depending on the installation method used.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;git: &lt;code&gt;cd ~/.fzf &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; ./install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;brew: &lt;code&gt;brew update; brew upgrade fzf&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;macports: &lt;code&gt;sudo port upgrade fzf&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;chocolatey: &lt;code&gt;choco upgrade fzf&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;vim-plug: &lt;code&gt;:PlugUpdate fzf&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building fzf&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/BUILD.md"&gt;BUILD.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;fzf will launch interactive finder, read the list from STDIN, and write the selected item to STDOUT.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;find * -type f | fzf &amp;gt; selected
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Without STDIN pipe, fzf will traverse the file system under the current directory to get the list of files.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;vim $(fzf)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You can override the default behavior&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Either by setting &lt;code&gt;$FZF_DEFAULT_COMMAND&lt;/code&gt; to a command that generates the desired list&lt;/li&gt; 
  &lt;li&gt;Or by setting &lt;code&gt;--walker&lt;/code&gt;, &lt;code&gt;--walker-root&lt;/code&gt;, and &lt;code&gt;--walker-skip&lt;/code&gt; options in &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] A more robust solution would be to use &lt;code&gt;xargs&lt;/code&gt; but we've presented the above as it's easier to grasp&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;fzf --print0 | xargs -0 -o vim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] fzf also has the ability to turn itself into a different process.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;fzf --bind 'enter:become(vim {})'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;em&gt;See &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#turning-into-a-different-process"&gt;Turning into a different process&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Using the finder&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CTRL-K&lt;/code&gt; / &lt;code&gt;CTRL-J&lt;/code&gt; (or &lt;code&gt;CTRL-P&lt;/code&gt; / &lt;code&gt;CTRL-N&lt;/code&gt;) to move cursor up and down&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Enter&lt;/code&gt; key to select the item, &lt;code&gt;CTRL-C&lt;/code&gt; / &lt;code&gt;CTRL-G&lt;/code&gt; / &lt;code&gt;ESC&lt;/code&gt; to exit&lt;/li&gt; 
 &lt;li&gt;On multi-select mode (&lt;code&gt;-m&lt;/code&gt;), &lt;code&gt;TAB&lt;/code&gt; and &lt;code&gt;Shift-TAB&lt;/code&gt; to mark multiple items&lt;/li&gt; 
 &lt;li&gt;Emacs style key bindings&lt;/li&gt; 
 &lt;li&gt;Mouse: scroll, click, double-click; shift-click and shift-scroll on multi-select mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Display modes&lt;/h3&gt; 
&lt;p&gt;fzf by default runs in fullscreen mode, but there are other display modes.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;--height&lt;/code&gt; mode&lt;/h4&gt; 
&lt;p&gt;With &lt;code&gt;--height HEIGHT[%]&lt;/code&gt;, fzf will start below the cursor with the given height.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;fzf --height 40%
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;reverse&lt;/code&gt; layout and &lt;code&gt;--border&lt;/code&gt; goes well with this option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;fzf --height 40% --layout reverse --border
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By prepending &lt;code&gt;~&lt;/code&gt; to the height, you're setting the maximum height.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Will take as few lines as possible to display the list
seq 3 | fzf --height ~100%
seq 3000 | fzf --height ~100%
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Height value can be a negative number.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Screen height - 3
fzf --height -3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;--tmux&lt;/code&gt; mode&lt;/h4&gt; 
&lt;p&gt;With &lt;code&gt;--tmux&lt;/code&gt; option, fzf will start in a tmux popup.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# --tmux [center|top|bottom|left|right][,SIZE[%]][,SIZE[%][,border-native]]

fzf --tmux center         # Center, 50% width and height
fzf --tmux 80%            # Center, 80% width and height
fzf --tmux 100%,50%       # Center, 100% width and 50% height
fzf --tmux left,40%       # Left, 40% width
fzf --tmux left,40%,90%   # Left, 40% width, 90% height
fzf --tmux top,40%        # Top, 40% height
fzf --tmux bottom,80%,40% # Bottom, 80% width, 40% height
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;--tmux&lt;/code&gt; is silently ignored when you're not on tmux.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you're stuck with an old version of tmux that doesn't support popup, or if you want to open fzf in a regular tmux pane, check out &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux"&gt;fzf-tmux&lt;/a&gt; script.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] You can add these options to &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt; so that they're applied by default. For example,&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;# Open in tmux popup if on tmux, otherwise use --height mode
export FZF_DEFAULT_OPTS='--height 40% --tmux bottom,40% --layout reverse --border top'
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Search syntax&lt;/h3&gt; 
&lt;p&gt;Unless otherwise specified, fzf starts in "extended-search mode" where you can type in multiple search terms delimited by spaces. e.g. &lt;code&gt;^music .mp3$ sbtrkt !fire&lt;/code&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Token&lt;/th&gt; 
   &lt;th&gt;Match type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;sbtrkt&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;fuzzy-match&lt;/td&gt; 
   &lt;td&gt;Items that match &lt;code&gt;sbtrkt&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;'wild&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;exact-match (quoted)&lt;/td&gt; 
   &lt;td&gt;Items that include &lt;code&gt;wild&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;'wild'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;exact-boundary-match (quoted both ends)&lt;/td&gt; 
   &lt;td&gt;Items that include &lt;code&gt;wild&lt;/code&gt; at word boundaries&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;^music&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;prefix-exact-match&lt;/td&gt; 
   &lt;td&gt;Items that start with &lt;code&gt;music&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;.mp3$&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;suffix-exact-match&lt;/td&gt; 
   &lt;td&gt;Items that end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;!fire&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;inverse-exact-match&lt;/td&gt; 
   &lt;td&gt;Items that do not include &lt;code&gt;fire&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;!^music&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;inverse-prefix-exact-match&lt;/td&gt; 
   &lt;td&gt;Items that do not start with &lt;code&gt;music&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;!.mp3$&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;inverse-suffix-exact-match&lt;/td&gt; 
   &lt;td&gt;Items that do not end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;If you don't prefer fuzzy matching and do not wish to "quote" every word, start fzf with &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--exact&lt;/code&gt; option. Note that when &lt;code&gt;--exact&lt;/code&gt; is set, &lt;code&gt;'&lt;/code&gt;-prefix "unquotes" the term.&lt;/p&gt; 
&lt;p&gt;A single bar character term acts as an OR operator. For example, the following query matches entries that start with &lt;code&gt;core&lt;/code&gt; and end with either &lt;code&gt;go&lt;/code&gt;, &lt;code&gt;rb&lt;/code&gt;, or &lt;code&gt;py&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;^core go$ | rb$ | py$
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Environment variables&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;FZF_DEFAULT_COMMAND&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Default command to use when input is tty&lt;/li&gt; 
   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_COMMAND='fd --type f'&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FZF_DEFAULT_OPTS&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Default options&lt;/li&gt; 
   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_OPTS="--layout=reverse --inline-info"&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FZF_DEFAULT_OPTS_FILE&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If you prefer to manage default options in a file, set this variable to point to the location of the file&lt;/li&gt; 
   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_OPTS_FILE=~/.fzfrc&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] &lt;code&gt;FZF_DEFAULT_COMMAND&lt;/code&gt; is not used by shell integration due to the slight difference in requirements.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;CTRL-T&lt;/code&gt; runs &lt;code&gt;$FZF_CTRL_T_COMMAND&lt;/code&gt; to get a list of files and directories&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;ALT-C&lt;/code&gt; runs &lt;code&gt;$FZF_ALT_C_COMMAND&lt;/code&gt; to get a list of directories&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;vim ~/**&amp;lt;tab&amp;gt;&lt;/code&gt; runs &lt;code&gt;fzf_compgen_path()&lt;/code&gt; with the prefix (&lt;code&gt;~/&lt;/code&gt;) as the first argument&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;cd foo**&amp;lt;tab&amp;gt;&lt;/code&gt; runs &lt;code&gt;fzf_compgen_dir()&lt;/code&gt; with the prefix (&lt;code&gt;foo&lt;/code&gt;) as the first argument&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;The available options are described later in this document.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Customizing the look&lt;/h3&gt; 
&lt;p&gt;The user interface of fzf is fully customizable with a large number of configuration options. For a quick setup, you can start with one of the style presets — &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;minimal&lt;/code&gt; — using the &lt;code&gt;--style&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;fzf --style full \
    --preview 'fzf-preview.sh {}' --bind 'focus:transform-header:file --brief {}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Preset&lt;/th&gt; 
   &lt;th align="left"&gt;Screenshot&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;default&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-style-default.png" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;full&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-style-full.png" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;minimal&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-style-minimal.png" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Here's an example based on the &lt;code&gt;full&lt;/code&gt; preset:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-4-borders.png" /&gt; 
&lt;details&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;git ls-files | fzf --style full \
    --border --padding 1,2 \
    --border-label ' Demo ' --input-label ' Input ' --header-label ' File Type ' \
    --preview 'fzf-preview.sh {}' \
    --bind 'result:transform-list-label:
        if [[ -z $FZF_QUERY ]]; then
          echo " $FZF_MATCH_COUNT items "
        else
          echo " $FZF_MATCH_COUNT matches for [$FZF_QUERY] "
        fi
        ' \
    --bind 'focus:transform-preview-label:[[ -n {} ]] &amp;amp;&amp;amp; printf " Previewing [%s] " {}' \
    --bind 'focus:+transform-header:file --brief {} || echo "No file selected"' \
    --bind 'ctrl-r:change-list-label( Reloading the list )+reload(sleep 2; git ls-files)' \
    --color 'border:#aaaaaa,label:#cccccc' \
    --color 'preview-border:#9999cc,preview-label:#ccccff' \
    --color 'list-border:#669966,list-label:#99cc99' \
    --color 'input-border:#996666,input-label:#ffcccc' \
    --color 'header-border:#6699cc,header-label:#99ccff'
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Options&lt;/h3&gt; 
&lt;p&gt;See the man page (&lt;code&gt;fzf --man&lt;/code&gt; or &lt;code&gt;man fzf&lt;/code&gt;) for the full list of options.&lt;/p&gt; 
&lt;h3&gt;Demo&lt;/h3&gt; 
&lt;p&gt;If you learn by watching videos, check out this screencast by &lt;a href="https://github.com/samoshkin"&gt;@samoshkin&lt;/a&gt; to explore &lt;code&gt;fzf&lt;/code&gt; features.&lt;/p&gt; 
&lt;a title="fzf - command-line fuzzy finder" href="https://www.youtube.com/watch?v=qgG5Jhi_Els"&gt; &lt;img src="https://i.imgur.com/vtG8olE.png" width="640" /&gt; &lt;/a&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/junegunn/fzf/wiki/examples"&gt;Wiki page of examples&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;em&gt;Disclaimer: The examples on this page are maintained by the community and are not thoroughly tested&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/junegunn/fzf/raw/master/ADVANCED.md"&gt;Advanced fzf examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Key bindings for command-line&lt;/h2&gt; 
&lt;p&gt;By &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/#setting-up-shell-integration"&gt;setting up shell integration&lt;/a&gt;, you can use the following key bindings in bash, zsh, and fish.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CTRL-T&lt;/code&gt; - Paste the selected files and directories onto the command-line 
  &lt;ul&gt; 
   &lt;li&gt;The list is generated using &lt;code&gt;--walker file,dir,follow,hidden&lt;/code&gt; option 
    &lt;ul&gt; 
     &lt;li&gt;You can override the behavior by setting &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt; to a custom command that generates the desired list&lt;/li&gt; 
     &lt;li&gt;Or you can set &lt;code&gt;--walker*&lt;/code&gt; options in &lt;code&gt;FZF_CTRL_T_OPTS&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_T_OPTS&lt;/code&gt; to pass additional options to fzf &lt;pre&gt;&lt;code class="language-sh"&gt;# Preview file content using bat (https://github.com/sharkdp/bat)
export FZF_CTRL_T_OPTS="
  --walker-skip .git,node_modules,target
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;Can be disabled by setting &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt; to an empty string when sourcing the script&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CTRL-R&lt;/code&gt; - Paste the selected command from history onto the command-line 
  &lt;ul&gt; 
   &lt;li&gt;If you want to see the commands in chronological order, press &lt;code&gt;CTRL-R&lt;/code&gt; again which toggles sorting by relevance&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;ALT-R&lt;/code&gt; to toggle "raw" mode where you can see the surrounding items of a match. In this mode, you can press &lt;code&gt;CTRL-N&lt;/code&gt; and &lt;code&gt;CTRL-P&lt;/code&gt; to move between the matching items only.&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;CTRL-/&lt;/code&gt; or &lt;code&gt;ALT-/&lt;/code&gt; to toggle line wrapping&lt;/li&gt; 
   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_R_OPTS&lt;/code&gt; to pass additional options to fzf &lt;pre&gt;&lt;code class="language-sh"&gt;# CTRL-Y to copy the command into clipboard using pbcopy
export FZF_CTRL_R_OPTS="
  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
  --color header:italic
  --header 'Press CTRL-Y to copy command into clipboard'"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;Can be disabled by setting &lt;code&gt;FZF_CTRL_R_COMMAND&lt;/code&gt; to an empty string when sourcing the script&lt;/li&gt; 
   &lt;li&gt;Custom override via a non-empty &lt;code&gt;FZF_CTRL_R_COMMAND&lt;/code&gt; is not yet supported and will emit a warning&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ALT-C&lt;/code&gt; - cd into the selected directory 
  &lt;ul&gt; 
   &lt;li&gt;The list is generated using &lt;code&gt;--walker dir,follow,hidden&lt;/code&gt; option&lt;/li&gt; 
   &lt;li&gt;Set &lt;code&gt;FZF_ALT_C_COMMAND&lt;/code&gt; to override the default command 
    &lt;ul&gt; 
     &lt;li&gt;Or you can set &lt;code&gt;--walker-*&lt;/code&gt; options in &lt;code&gt;FZF_ALT_C_OPTS&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Set &lt;code&gt;FZF_ALT_C_OPTS&lt;/code&gt; to pass additional options to fzf &lt;pre&gt;&lt;code class="language-sh"&gt;# Print tree structure in the preview window
export FZF_ALT_C_OPTS="
  --walker-skip .git,node_modules,target
  --preview 'tree -C {}'"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;Can be disabled by setting &lt;code&gt;FZF_ALT_C_COMMAND&lt;/code&gt; to an empty string when sourcing the script&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Display modes for these bindings can be separately configured via &lt;code&gt;FZF_{CTRL_T,CTRL_R,ALT_C}_OPTS&lt;/code&gt; or globally via &lt;code&gt;FZF_DEFAULT_OPTS&lt;/code&gt;. (e.g. &lt;code&gt;FZF_CTRL_R_OPTS='--tmux bottom,60% --height 60% --border top'&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;More tips can be found on &lt;a href="https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings"&gt;the wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Fuzzy completion for bash and zsh&lt;/h2&gt; 
&lt;h3&gt;Files and directories&lt;/h3&gt; 
&lt;p&gt;Fuzzy completion for files and directories can be triggered if the word before the cursor ends with the trigger sequence, which is by default &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;COMMAND [DIRECTORY/][FUZZY_PATTERN]**&amp;lt;TAB&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Files under the current directory
# - You can select multiple items with TAB key
vim **&amp;lt;TAB&amp;gt;

# Files under parent directory
vim ../**&amp;lt;TAB&amp;gt;

# Files under parent directory that match `fzf`
vim ../fzf**&amp;lt;TAB&amp;gt;

# Files under your home directory
vim ~/**&amp;lt;TAB&amp;gt;


# Directories under current directory (single-selection)
cd **&amp;lt;TAB&amp;gt;

# Directories under ~/github that match `fzf`
cd ~/github/fzf**&amp;lt;TAB&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Process IDs&lt;/h3&gt; 
&lt;p&gt;Fuzzy completion for PIDs is provided for kill command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Can select multiple processes with &amp;lt;TAB&amp;gt; or &amp;lt;Shift-TAB&amp;gt; keys
kill -9 **&amp;lt;TAB&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Host names&lt;/h3&gt; 
&lt;p&gt;For ssh and telnet commands, fuzzy completion for hostnames is provided. The names are extracted from /etc/hosts and ~/.ssh/config.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ssh **&amp;lt;TAB&amp;gt;
telnet **&amp;lt;TAB&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Environment variables / Aliases&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;unset **&amp;lt;TAB&amp;gt;
export **&amp;lt;TAB&amp;gt;
unalias **&amp;lt;TAB&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing fzf options for completion&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Use ~~ as the trigger sequence instead of the default **
export FZF_COMPLETION_TRIGGER='~~'

# Options to fzf command
export FZF_COMPLETION_OPTS='--border --info=inline'

# Options for path completion (e.g. vim **&amp;lt;TAB&amp;gt;)
export FZF_COMPLETION_PATH_OPTS='--walker file,dir,follow,hidden'

# Options for directory completion (e.g. cd **&amp;lt;TAB&amp;gt;)
export FZF_COMPLETION_DIR_OPTS='--walker dir,follow'

# Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments ($@) to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'tree -C {} | head -200'   "$@" ;;
    export|unset) fzf --preview "eval 'echo \$'{}"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview 'bat -n --color=always {}' "$@" ;;
  esac
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing completion source for paths and directories&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Use fd (https://github.com/sharkdp/fd) for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Supported commands&lt;/h3&gt; 
&lt;p&gt;On bash, fuzzy completion is enabled only for a predefined set of commands (&lt;code&gt;complete | grep _fzf&lt;/code&gt; to see the list). But you can enable it for other commands as well by using &lt;code&gt;_fzf_setup_completion&lt;/code&gt; helper function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# usage: _fzf_setup_completion path|dir|var|alias|host COMMANDS...
_fzf_setup_completion path ag git kubectl
_fzf_setup_completion dir tree
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom fuzzy completion&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;(Custom completion API is experimental and subject to change)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;For a command named &lt;em&gt;"COMMAND"&lt;/em&gt;, define &lt;code&gt;_fzf_complete_COMMAND&lt;/code&gt; function using &lt;code&gt;_fzf_complete&lt;/code&gt; helper.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Custom fuzzy completion for "doge" command
#   e.g. doge **&amp;lt;TAB&amp;gt;
_fzf_complete_doge() {
  _fzf_complete --multi --reverse --prompt="doge&amp;gt; " -- "$@" &amp;lt; &amp;lt;(
    echo very
    echo wow
    echo such
    echo doge
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;The arguments before &lt;code&gt;--&lt;/code&gt; are the options to fzf.&lt;/li&gt; 
 &lt;li&gt;After &lt;code&gt;--&lt;/code&gt;, simply pass the original completion arguments unchanged (&lt;code&gt;"$@"&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;Then, write a set of commands that generates the completion candidates and feed its output to the function using process substitution (&lt;code&gt;&amp;lt; &amp;lt;(...)&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;zsh will automatically pick up the function using the naming convention but in bash you have to manually associate the function with the command using the &lt;code&gt;complete&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;[ -n "$BASH" ] &amp;amp;&amp;amp; complete -F _fzf_complete_doge -o default -o bashdefault doge
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need to post-process the output from fzf, define &lt;code&gt;_fzf_complete_COMMAND_post&lt;/code&gt; as follows.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;_fzf_complete_foo() {
  _fzf_complete --multi --reverse --header-lines=3 -- "$@" &amp;lt; &amp;lt;(
    ls -al
  )
}

_fzf_complete_foo_post() {
  awk '{print $NF}'
}

[ -n "$BASH" ] &amp;amp;&amp;amp; complete -F _fzf_complete_foo -o default -o bashdefault foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Vim plugin&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/README-VIM.md"&gt;README-VIM.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Advanced topics&lt;/h2&gt; 
&lt;h3&gt;Customizing for different types of input&lt;/h3&gt; 
&lt;p&gt;Since fzf is a general-purpose text filter, its algorithm was designed to "generally" work well with any kind of input. However, admittedly, there is no true one-size-fits-all solution, and you may want to tweak the algorithm and some of the settings depending on the type of the input. To make this process easier, fzf provides a set of "scheme"s for some common input types.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Scheme&lt;/th&gt; 
   &lt;th align="left"&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;--scheme=default&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Generic scheme designed to work well with any kind of input&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;--scheme=path&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Suitable for file paths&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;--scheme=history&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Suitable for command history or any input where chronological ordering is important&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;(See &lt;code&gt;fzf --man&lt;/code&gt; for the details)&lt;/p&gt; 
&lt;h3&gt;Performance&lt;/h3&gt; 
&lt;p&gt;fzf is fast. Performance should not be a problem in most use cases. However, you might want to be aware of the options that can affect performance.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--ansi&lt;/code&gt; tells fzf to extract and parse ANSI color codes in the input, and it makes the initial scanning slower. So it's not recommended that you add it to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--nth&lt;/code&gt; makes fzf slower because it has to tokenize each line.&lt;/li&gt; 
 &lt;li&gt;A plain string &lt;code&gt;--delimiter&lt;/code&gt; should be preferred over a regular expression delimiter.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--with-nth&lt;/code&gt; makes fzf slower as fzf has to tokenize and reassemble each line.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Executing external programs&lt;/h3&gt; 
&lt;p&gt;You can set up key bindings for starting external processes without leaving fzf (&lt;code&gt;execute&lt;/code&gt;, &lt;code&gt;execute-silent&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Press F1 to open the file with less without leaving fzf
# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)
fzf --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;em&gt;KEY/EVENT BINDINGS&lt;/em&gt; section of the man page for details.&lt;/p&gt; 
&lt;h3&gt;Turning into a different process&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;become(...)&lt;/code&gt; is similar to &lt;code&gt;execute(...)&lt;/code&gt;/&lt;code&gt;execute-silent(...)&lt;/code&gt; described above, but instead of executing the command and coming back to fzf on complete, it turns fzf into a new process for the command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;fzf --bind 'enter:become(vim {})'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compared to the seemingly equivalent command substitution &lt;code&gt;vim "$(fzf)"&lt;/code&gt;, this approach has several advantages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vim will not open an empty file when you terminate fzf with &lt;kbd&gt;CTRL-C&lt;/kbd&gt;&lt;/li&gt; 
 &lt;li&gt;Vim will not open an empty file when you press &lt;kbd&gt;ENTER&lt;/kbd&gt; on an empty result&lt;/li&gt; 
 &lt;li&gt;Can handle multiple selections even when they have whitespaces &lt;pre&gt;&lt;code class="language-sh"&gt;fzf --multi --bind 'enter:become(vim {+})'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To be fair, running &lt;code&gt;fzf --print0 | xargs -0 -o vim&lt;/code&gt; instead of &lt;code&gt;vim "$(fzf)"&lt;/code&gt; resolves all of the issues mentioned. Nonetheless, &lt;code&gt;become(...)&lt;/code&gt; still offers additional benefits in different scenarios.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can set up multiple bindings to handle the result in different ways without any wrapping script &lt;pre&gt;&lt;code class="language-sh"&gt;fzf --bind 'enter:become(vim {}),ctrl-e:become(emacs {})'
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Previously, you would have to use &lt;code&gt;--expect=ctrl-e&lt;/code&gt; and check the first line of the output of fzf&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;You can easily build the subsequent command using the field index expressions of fzf &lt;pre&gt;&lt;code class="language-sh"&gt;# Open the file in Vim and go to the line
git grep --line-number . |
    fzf --delimiter : --nth 3.. --bind 'enter:become(vim {1} +{2})'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Reloading the candidate list&lt;/h3&gt; 
&lt;p&gt;By binding &lt;code&gt;reload&lt;/code&gt; action to a key or an event, you can make fzf dynamically reload the candidate list. See &lt;a href="https://github.com/junegunn/fzf/issues/1750"&gt;https://github.com/junegunn/fzf/issues/1750&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h4&gt;1. Update the list of processes by pressing CTRL-R&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ps -ef |
  fzf --bind 'ctrl-r:reload(ps -ef)' \
      --header 'Press CTRL-R to reload' --header-lines=1 \
      --height=50% --layout=reverse
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. Switch between sources by pressing CTRL-D or CTRL-F&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;FZF_DEFAULT_COMMAND='find . -type f' \
  fzf --bind 'ctrl-d:reload(find . -type d),ctrl-f:reload(eval "$FZF_DEFAULT_COMMAND")' \
      --height=50% --layout=reverse
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. Interactive ripgrep integration&lt;/h4&gt; 
&lt;p&gt;The following example uses fzf as the selector interface for ripgrep. We bound &lt;code&gt;reload&lt;/code&gt; action to &lt;code&gt;change&lt;/code&gt; event, so every time you type on fzf, the ripgrep process will restart with the updated query string denoted by the placeholder expression &lt;code&gt;{q}&lt;/code&gt;. Also, note that we used &lt;code&gt;--disabled&lt;/code&gt; option so that fzf doesn't perform any secondary filtering.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;: | rg_prefix='rg --column --line-number --no-heading --color=always --smart-case' \
    fzf --bind 'start:reload:$rg_prefix ""' \
        --bind 'change:reload:$rg_prefix {q} || true' \
        --bind 'enter:become(vim {1} +{2})' \
        --ansi --disabled \
        --height=50% --layout=reverse
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If ripgrep doesn't find any matches, it will exit with a non-zero exit status, and fzf will warn you about it. To suppress the warning message, we added &lt;code&gt;|| true&lt;/code&gt; to the command, so that it always exits with 0.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/junegunn/fzf/raw/master/ADVANCED.md#using-fzf-as-interactive-ripgrep-launcher"&gt;"Using fzf as interactive Ripgrep launcher"&lt;/a&gt; for more sophisticated examples.&lt;/p&gt; 
&lt;h3&gt;Preview window&lt;/h3&gt; 
&lt;p&gt;When the &lt;code&gt;--preview&lt;/code&gt; option is set, fzf automatically starts an external process with the current line as the argument and shows the result in the split window. Your &lt;code&gt;$SHELL&lt;/code&gt; is used to execute the command with &lt;code&gt;$SHELL -c COMMAND&lt;/code&gt;. The window can be scrolled using the mouse or custom key bindings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# {} is replaced with the single-quoted string of the focused line
fzf --preview 'cat {}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Preview window supports ANSI colors, so you can use any program that syntax-highlights the content of a file, such as &lt;a href="https://github.com/sharkdp/bat"&gt;Bat&lt;/a&gt; or &lt;a href="https://gitlab.com/saalen/highlight"&gt;Highlight&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fzf --preview 'bat --color=always {}' --preview-window '~3'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can customize the size, position, and border of the preview window using &lt;code&gt;--preview-window&lt;/code&gt; option, and the foreground and background color of it with &lt;code&gt;--color&lt;/code&gt; option. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fzf --height 40% --layout reverse --info inline --border \
    --preview 'file {}' --preview-window up,1,border-horizontal \
    --bind 'ctrl-/:change-preview-window(50%|hidden|)' \
    --color 'fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the man page (&lt;code&gt;man fzf&lt;/code&gt;) for the full list of options.&lt;/p&gt; 
&lt;p&gt;More advanced examples can be found &lt;a href="https://github.com/junegunn/fzf/raw/master/ADVANCED.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Since fzf is a general-purpose text filter rather than a file finder, &lt;strong&gt;it is not a good idea to add &lt;code&gt;--preview&lt;/code&gt; option to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;# *********************
# ** DO NOT DO THIS! **
# *********************
export FZF_DEFAULT_OPTS='--preview "bat --style=numbers --color=always --line-range :500 {}"'

# bat doesn't work with any input other than the list of files
ps -ef | fzf
seq 100 | fzf
history | fzf
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Previewing an image&lt;/h3&gt; 
&lt;p&gt;fzf can display images in the preview window using one of the following protocols:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://sw.kovidgoyal.net/kitty/graphics-protocol/"&gt;Kitty graphics protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;iTerm2 inline images protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Sixel"&gt;Sixel&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-preview.sh"&gt;bin/fzf-preview.sh&lt;/a&gt; script for more information.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;fzf --preview 'fzf-preview.sh {}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tips&lt;/h2&gt; 
&lt;h3&gt;Respecting &lt;code&gt;.gitignore&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;You can use &lt;a href="https://github.com/sharkdp/fd"&gt;fd&lt;/a&gt;, &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt;, or &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;the silver searcher&lt;/a&gt; to traverse the file system while respecting &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Feed the output of fd into fzf
fd --type f --strip-cwd-prefix | fzf

# Setting fd as the default source for fzf
export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix'

# Now fzf (w/o pipe) will use the fd command to generate the list
fzf

# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want the command to follow symbolic links and don't want it to exclude hidden files, use the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix --hidden --follow --exclude .git'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fish shell&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;CTRL-T&lt;/code&gt; key binding of fish, unlike those of bash and zsh, will use the last token on the command-line as the root directory for the recursive search. For instance, hitting &lt;code&gt;CTRL-T&lt;/code&gt; at the end of the following command-line&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ls /var/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will list all files and directories under &lt;code&gt;/var/&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When using a custom &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt;, use the unexpanded &lt;code&gt;$dir&lt;/code&gt; variable to make use of this feature. &lt;code&gt;$dir&lt;/code&gt; defaults to &lt;code&gt;.&lt;/code&gt; when the last token is not a valid directory. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;set -g FZF_CTRL_T_COMMAND "command find -L \$dir -type f 2&amp;gt; /dev/null | sed '1d; s#^\./##'"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;fzf Theme Playground&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://vitormv.github.io/fzf-themes/"&gt;fzf Theme Playground&lt;/a&gt; created by &lt;a href="https://github.com/vitormv"&gt;Vitor Mello&lt;/a&gt; is a webpage where you can interactively create fzf themes.&lt;/p&gt; 
&lt;h2&gt;Related projects&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/junegunn/fzf/wiki/Related-projects"&gt;https://github.com/junegunn/fzf/wiki/Related-projects&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/junegunn/fzf/master/LICENSE"&gt;License&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;The MIT License (MIT)&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2013-2025 Junegunn Choi&lt;/p&gt; 
&lt;h2&gt;Sponsors &lt;span&gt;❤️&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;I would like to thank all the sponsors of this project who make it possible for me to continue to improve fzf.&lt;/p&gt; 
&lt;p&gt;If you'd like to sponsor this project, please visit &lt;a href="https://github.com/sponsors/junegunn"&gt;https://github.com/sponsors/junegunn&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- sponsors --&gt;
&lt;a href="https://github.com/miyanokomiya"&gt;&lt;img src="https://github.com/miyanokomiya.png" width="60px" alt="User avatar: miyanokomiya" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/AceofSpades5757"&gt;&lt;img src="https://github.com/AceofSpades5757.png" width="60px" alt="User avatar: Kyle L. Davis" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/Frederick888"&gt;&lt;img src="https://github.com/Frederick888.png" width="60px" alt="User avatar: Frederick Zhang" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/moritzdietz"&gt;&lt;img src="https://github.com/moritzdietz.png" width="60px" alt="User avatar: Moritz Dietz" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/pldubouilh"&gt;&lt;img src="https://github.com/pldubouilh.png" width="60px" alt="User avatar: Pierre Dubouilh" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/trantor"&gt;&lt;img src="https://github.com/trantor.png" width="60px" alt="User avatar: Fulvio Scapin" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/rcorre"&gt;&lt;img src="https://github.com/rcorre.png" width="60px" alt="User avatar: Ryan Roden-Corrent" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/blissdev"&gt;&lt;img src="https://github.com/blissdev.png" width="60px" alt="User avatar: Jordan Arentsen" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/aexvir"&gt;&lt;img src="https://github.com/aexvir.png" width="60px" alt="User avatar: Alex Viscreanu" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/moobar"&gt;&lt;img src="https://github.com/moobar.png" width="60px" alt="User avatar: " /&gt;&lt;/a&gt;
&lt;a href="https://github.com/benelan"&gt;&lt;img src="https://github.com/benelan.png" width="60px" alt="User avatar: Ben Elan" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/pawelduda"&gt;&lt;img src="https://github.com/pawelduda.png" width="60px" alt="User avatar: Paweł Kolonko-Duda" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/mckellygit"&gt;&lt;img src="https://github.com/mckellygit.png" width="60px" alt="User avatar: M Kelly" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/pyrho"&gt;&lt;img src="https://github.com/pyrho.png" width="60px" alt="User avatar: Damien Rajon" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/ArtBIT"&gt;&lt;img src="https://github.com/ArtBIT.png" width="60px" alt="User avatar: ArtBIT" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/da-moon"&gt;&lt;img src="https://github.com/da-moon.png" width="60px" alt="User avatar: " /&gt;&lt;/a&gt;
&lt;a href="https://github.com/hovissimo"&gt;&lt;img src="https://github.com/hovissimo.png" width="60px" alt="User avatar: Hovis" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/cristiand391"&gt;&lt;img src="https://github.com/cristiand391.png" width="60px" alt="User avatar: Cristian Dominguez" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/eliangcs"&gt;&lt;img src="https://github.com/eliangcs.png" width="60px" alt="User avatar: Chang-Hung Liang" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/asphaltbuffet"&gt;&lt;img src="https://github.com/asphaltbuffet.png" width="60px" alt="User avatar: Ben Lechlitner" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/looshch"&gt;&lt;img src="https://github.com/looshch.png" width="60px" alt="User avatar: george looshch" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/kg8m"&gt;&lt;img src="https://github.com/kg8m.png" width="60px" alt="User avatar: Takumi KAGIYAMA" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/polm"&gt;&lt;img src="https://github.com/polm.png" width="60px" alt="User avatar: Paul OLeary McCann" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/rbeeger"&gt;&lt;img src="https://github.com/rbeeger.png" width="60px" alt="User avatar: Robert Beeger" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/scalisi"&gt;&lt;img src="https://github.com/scalisi.png" width="60px" alt="User avatar: Josh Scalisi" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/alecbcs"&gt;&lt;img src="https://github.com/alecbcs.png" width="60px" alt="User avatar: Alec Scott" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/artursapek"&gt;&lt;img src="https://github.com/artursapek.png" width="60px" alt="User avatar: Artur Sapek" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/ramnes"&gt;&lt;img src="https://github.com/ramnes.png" width="60px" alt="User avatar: Guillaume Gelin" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/jyc"&gt;&lt;img src="https://github.com/jyc.png" width="60px" alt="User avatar: " /&gt;&lt;/a&gt;
&lt;a href="https://github.com/roblevy"&gt;&lt;img src="https://github.com/roblevy.png" width="60px" alt="User avatar: Rob Levy" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/glozow"&gt;&lt;img src="https://github.com/glozow.png" width="60px" alt="User avatar: Gloria Zhao" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/toupeira"&gt;&lt;img src="https://github.com/toupeira.png" width="60px" alt="User avatar: Markus Koller" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/rkpatel33"&gt;&lt;img src="https://github.com/rkpatel33.png" width="60px" alt="User avatar: " /&gt;&lt;/a&gt;
&lt;a href="https://github.com/jamesob"&gt;&lt;img src="https://github.com/jamesob.png" width="60px" alt="User avatar: jamesob" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/jlebray"&gt;&lt;img src="https://github.com/jlebray.png" width="60px" alt="User avatar: Johan Le Bray" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/panosl1"&gt;&lt;img src="https://github.com/panosl1.png" width="60px" alt="User avatar: Panos Lampropoulos" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/bespinian"&gt;&lt;img src="https://github.com/bespinian.png" width="60px" alt="User avatar: bespinian" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/scosu"&gt;&lt;img src="https://github.com/scosu.png" width="60px" alt="User avatar: Markus Schneider-Pargmann" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/smithbm2316"&gt;&lt;img src="https://github.com/smithbm2316.png" width="60px" alt="User avatar: Ben Smith" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/charlieegan3"&gt;&lt;img src="https://github.com/charlieegan3.png" width="60px" alt="User avatar: Charlie Egan" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/thobbs"&gt;&lt;img src="https://github.com/thobbs.png" width="60px" alt="User avatar: Tyler Hobbs" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/neilparikh"&gt;&lt;img src="https://github.com/neilparikh.png" width="60px" alt="User avatar: Neil Parikh" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/shkm"&gt;&lt;img src="https://github.com/shkm.png" width="60px" alt="User avatar: Jamie Schembri" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/BasedScience"&gt;&lt;img src="https://github.com/BasedScience.png" width="60px" alt="User avatar: dockien" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/RussellGilmore"&gt;&lt;img src="https://github.com/RussellGilmore.png" width="60px" alt="User avatar: Russell Gilmore" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/meribold"&gt;&lt;img src="https://github.com/meribold.png" width="60px" alt="User avatar: Lukas Waymann" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/terminaldweller"&gt;&lt;img src="https://github.com/terminaldweller.png" width="60px" alt="User avatar: Farzad Sadeghi" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/jaydee-coder"&gt;&lt;img src="https://github.com/jaydee-coder.png" width="60px" alt="User avatar: " /&gt;&lt;/a&gt;
&lt;a href="https://github.com/brpaz"&gt;&lt;img src="https://github.com/brpaz.png" width="60px" alt="User avatar: Bruno Paz" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/timobenn"&gt;&lt;img src="https://github.com/timobenn.png" width="60px" alt="User avatar: Timothy Bennett" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/danhorner"&gt;&lt;img src="https://github.com/danhorner.png" width="60px" alt="User avatar: Daniel Horner" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/syeo66"&gt;&lt;img src="https://github.com/syeo66.png" width="60px" alt="User avatar: Red Ochsenbein" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/nekhaevskiy"&gt;&lt;img src="https://github.com/nekhaevskiy.png" width="60px" alt="User avatar: Yury" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/lajarre"&gt;&lt;img src="https://github.com/lajarre.png" width="60px" alt="User avatar: " /&gt;&lt;/a&gt;
&lt;a href="https://github.com/NightsPaladin"&gt;&lt;img src="https://github.com/NightsPaladin.png" width="60px" alt="User avatar: Chris G." /&gt;&lt;/a&gt;
&lt;a href="https://github.com/lzell"&gt;&lt;img src="https://github.com/lzell.png" width="60px" alt="User avatar: Lou Zell" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/3ximus"&gt;&lt;img src="https://github.com/3ximus.png" width="60px" alt="User avatar: Fabio" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/justinlubin"&gt;&lt;img src="https://github.com/justinlubin.png" width="60px" alt="User avatar: Justin Lubin" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/mieubrisse"&gt;&lt;img src="https://github.com/mieubrisse.png" width="60px" alt="User avatar: Kevin Today" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/Coko7"&gt;&lt;img src="https://github.com/Coko7.png" width="60px" alt="User avatar: Coko" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/neogeographica"&gt;&lt;img src="https://github.com/neogeographica.png" width="60px" alt="User avatar: Joel B" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/fabridamicelli"&gt;&lt;img src="https://github.com/fabridamicelli.png" width="60px" alt="User avatar: Fabrizio Damicelli" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/petercool"&gt;&lt;img src="https://github.com/petercool.png" width="60px" alt="User avatar: Sonami" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/jksolbakken"&gt;&lt;img src="https://github.com/jksolbakken.png" width="60px" alt="User avatar: Jan-Kåre Solbakken" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/Trash-Nothing"&gt;&lt;img src="https://github.com/Trash-Nothing.png" width="60px" alt="User avatar: Trash Nothing" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/PairWithTuple"&gt;&lt;img src="https://github.com/PairWithTuple.png" width="60px" alt="User avatar: Tuple" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/justrajdeep"&gt;&lt;img src="https://github.com/justrajdeep.png" width="60px" alt="User avatar: " /&gt;&lt;/a&gt;
&lt;a href="https://github.com/jpc"&gt;&lt;img src="https://github.com/jpc.png" width="60px" alt="User avatar: Jakub Piotr Cłapa" /&gt;&lt;/a&gt;
&lt;!-- sponsors --&gt;</description>
    </item>
    
    <item>
      <title>DataDog/datadog-agent</title>
      <link>https://github.com/DataDog/datadog-agent</link>
      <description>&lt;p&gt;Main repository for Datadog Agent&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Datadog Agent&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/github/v/release/DataDog/datadog-agent?style=flat&amp;amp;logo=datadog&amp;amp;logoColor=%23632CA6&amp;amp;labelColor=%23FFF&amp;amp;color=%23632CA6" alt="GitHub Release" /&gt; &lt;a href="https://codecov.io/github/DataDog/datadog-agent?branch=main"&gt;&lt;img src="https://codecov.io/github/DataDog/datadog-agent/coverage.svg?branch=main" alt="Coverage status" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/DataDog/datadog-agent"&gt;&lt;img src="https://godoc.org/github.com/DataDog/datadog-agent?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains the source code of the Datadog Agent version 7 and version 6. Please refer to the &lt;a href="https://docs.datadoghq.com/agent/"&gt;Agent user documentation&lt;/a&gt; for information about differences between Agent v5, Agent v6 and Agent v7. Additionally, we provide a list of prepackaged binaries for an easy install process &lt;a href="https://app.datadoghq.com/fleet/install-agent/latest?platform=overview"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://datadoghq.dev/datadog-agent/setup/"&gt;developer docs site&lt;/a&gt; contains information about how to develop the Datadog Agent itself.&lt;/p&gt; 
&lt;p&gt;The source of the content is located under &lt;a href="https://raw.githubusercontent.com/DataDog/datadog-agent/main/docs"&gt;the docs directory&lt;/a&gt; and may contain pages that are not yet published.&lt;/p&gt; 
&lt;h2&gt;Contributing code&lt;/h2&gt; 
&lt;p&gt;You'll find information and help on how to contribute code to this project under &lt;a href="https://raw.githubusercontent.com/DataDog/datadog-agent/main/docs/dev"&gt;the &lt;code&gt;docs/dev&lt;/code&gt; directory&lt;/a&gt; of the present repo.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The Datadog Agent user space components are licensed under the &lt;a href="https://raw.githubusercontent.com/DataDog/datadog-agent/main/LICENSE"&gt;Apache License, Version 2.0&lt;/a&gt;. The BPF code is licensed under the &lt;a href="https://raw.githubusercontent.com/DataDog/datadog-agent/main/pkg/ebpf/c/COPYING"&gt;General Public License, Version 2.0&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XTLS/Xray-core</title>
      <link>https://github.com/XTLS/Xray-core</link>
      <description>&lt;p&gt;Xray, Penetrates Everything. Also the best v2ray-core. Where the magic happens. An open platform for various uses.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Project X&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/XTLS"&gt;Project X&lt;/a&gt; originates from XTLS protocol, providing a set of network tools such as &lt;a href="https://github.com/XTLS/Xray-core"&gt;Xray-core&lt;/a&gt; and &lt;a href="https://github.com/XTLS/REALITY"&gt;REALITY&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/XTLS/Xray-core#readme"&gt;README&lt;/a&gt; is open, so feel free to submit your project &lt;a href="https://github.com/XTLS/Xray-core/pulls"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Donation &amp;amp; NFTs&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/1"&gt;Collect a Project X NFT to support the development of Project X!&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/1"&gt;&lt;img alt="Project X NFT" width="150px" src="https://raw2.seadn.io/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/7fa9ce900fb39b44226348db330e32/8b7fa9ce900fb39b44226348db330e32.svg?sanitize=true" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ETH/USDT/USDC: &lt;code&gt;0xDc3Fe44F0f25D13CACb1C4896CD0D321df3146Ee&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Project X NFT: &lt;a href="https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/1"&gt;https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/1&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;VLESS NFT: &lt;a href="https://opensea.io/collection/vless"&gt;https://opensea.io/collection/vless&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;REALITY NFT: &lt;a href="https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/2"&gt;https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/2&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Related links: &lt;a href="https://github.com/XTLS/Xray-core/pull/5067"&gt;VLESS Post-Quantum Encryption&lt;/a&gt;, &lt;a href="https://github.com/XTLS/Xray-core/discussions/4113"&gt;XHTTP: Beyond REALITY&lt;/a&gt;, &lt;a href="https://github.com/XTLS/Xray-core/discussions/3633"&gt;Announcement of NFTs by Project X&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/XTLS/Xray-core/raw/main/LICENSE"&gt;Mozilla Public License Version 2.0&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://xtls.github.io"&gt;Project X Official Website&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Telegram&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://t.me/projectXray"&gt;Project X&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://t.me/projectXtls"&gt;Project X Channel&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://t.me/projectVless"&gt;Project VLESS&lt;/a&gt; (Русский)&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://t.me/projectXhttp"&gt;Project XHTTP&lt;/a&gt; (Persian)&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux Script 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/XTLS/Xray-install"&gt;XTLS/Xray-install&lt;/a&gt; (&lt;strong&gt;Official&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/team-cloudchaser/tempest"&gt;tempest&lt;/a&gt; (supports &lt;a href="https://systemd.io"&gt;&lt;code&gt;systemd&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/OpenRC/openrc"&gt;OpenRC&lt;/a&gt;; Linux-only)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Docker 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://ghcr.io/xtls/xray-core"&gt;ghcr.io/xtls/xray-core&lt;/a&gt; (&lt;strong&gt;Official&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://hub.docker.com/r/teddysun/xray"&gt;teddysun/xray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/wulabing/xray_docker"&gt;wulabing/xray_docker&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Web Panel - &lt;strong&gt;WARNING: Please DO NOT USE plain HTTP panels like 3X-UI&lt;/strong&gt;, as they are believed to be bribed by Iran GFW for supporting plain HTTP by default and refused to change (&lt;a href="https://github.com/XTLS/Xray-core/pull/3884#issuecomment-2439595331"&gt;https://github.com/XTLS/Xray-core/pull/3884#issuecomment-2439595331&lt;/a&gt;), which has already put many users' data security in danger in the past few years. &lt;strong&gt;If you are already using 3X-UI, please switch to the following panels, which are verified to support HTTPS and SSH port forwarding only:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/xeefei/X-Panel"&gt;X-Panel&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/PasarGuard/panel"&gt;PasarGuard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/remnawave/panel"&gt;Remnawave&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Gozargah/Marzban"&gt;Marzban&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qist/xray-ui"&gt;Xray-UI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hiddify/Hiddify-Manager"&gt;Hiddify&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;One Click 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zxcvos/Xray-script"&gt;Xray-REALITY&lt;/a&gt;, &lt;a href="https://github.com/sajjaddg/xray-reality"&gt;xray-reality&lt;/a&gt;, &lt;a href="https://github.com/aleskxyz/reality-ezpz"&gt;reality-ezpz&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hello-yunshu/Xray_bash_onekey"&gt;Xray_bash_onekey&lt;/a&gt;, &lt;a href="https://github.com/LordPenguin666/XTool"&gt;XTool&lt;/a&gt;, &lt;a href="https://github.com/vpainless/vpainless"&gt;VPainLess&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mack-a/v2ray-agent"&gt;v2ray-agent&lt;/a&gt;, &lt;a href="https://github.com/wulabing/Xray_onekey"&gt;Xray_onekey&lt;/a&gt;, &lt;a href="https://github.com/proxysu/ProxySU"&gt;ProxySU&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Magisk 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Asterisk4Magisk/Xray4Magisk"&gt;Xray4Magisk&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/E7KMbb/Xray_For_Magisk"&gt;Xray_For_Magisk&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Homebrew 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;brew install xray&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Example 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/XTLS/REALITY#readme"&gt;VLESS-XTLS-uTLS-REALITY&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/XTLS/Xray-examples/tree/main/VLESS-TCP-XTLS-Vision"&gt;VLESS-TCP-XTLS-Vision&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/XTLS/Xray-examples/tree/main/All-in-One-fallbacks-Nginx"&gt;All-in-One-fallbacks-Nginx&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Xray-examples 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/XTLS/Xray-examples"&gt;XTLS/Xray-examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/chika0801/Xray-examples"&gt;chika0801/Xray-examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lxhao61/integrated-examples"&gt;lxhao61/integrated-examples&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Tutorial 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/chika0801/Xray-install"&gt;XTLS Vision&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://cscot.pages.dev/2023/03/02/Xray-REALITY-tutorial/"&gt;REALITY (English)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SasukeFreestyle/XTLS-Iran-Reality"&gt;XTLS-Iran-Reality (English)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://computerscot.github.io/vless-xtls-utls-reality-steal-oneself.html"&gt;Xray REALITY with 'steal oneself' (English)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://g800.pages.dev/wireguard"&gt;Xray with WireGuard inbound (English)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;GUI Clients&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;OpenWrt 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/xiaorouji/openwrt-passwall"&gt;PassWall&lt;/a&gt;, &lt;a href="https://github.com/xiaorouji/openwrt-passwall2"&gt;PassWall 2&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fw876/helloworld"&gt;ShadowSocksR Plus+&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/yichya/luci-app-xray"&gt;luci-app-xray&lt;/a&gt; (&lt;a href="https://github.com/yichya/openwrt-xray"&gt;openwrt-xray&lt;/a&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Asuswrt-Merlin 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/DanielLavrushin/asuswrt-merlin-xrayui"&gt;XRAYUI&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Windows 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/2dust/v2rayN"&gt;v2rayN&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LorenEteval/Furious"&gt;Furious&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/InvisibleManVPN/InvisibleMan-XRayClient"&gt;Invisible Man - Xray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AnyPortal/AnyPortal"&gt;AnyPortal&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Android 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/2dust/v2rayNG"&gt;v2rayNG&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/XTLS/X-flutter"&gt;X-flutter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SaeedDev94/Xray"&gt;SaeedDev94/Xray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lhear/SimpleXray"&gt;SimpleXray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AnyPortal/AnyPortal"&gt;AnyPortal&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;iOS &amp;amp; macOS arm64 &amp;amp; tvOS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://apps.apple.com/app/happ-proxy-utility/id6504287215"&gt;Happ&lt;/a&gt; (&lt;a href="https://apps.apple.com/us/app/happ-proxy-utility-for-tv/id6748297274"&gt;tvOS&lt;/a&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://apps.apple.com/app/streisand/id6450534064"&gt;Streisand&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/OneXray/OneXray"&gt;OneXray&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;macOS arm64 &amp;amp; x64 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://apps.apple.com/app/happ-proxy-utility/id6504287215"&gt;Happ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/yanue/V2rayU"&gt;V2rayU&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tzmax/V2RayXS"&gt;V2RayXS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LorenEteval/Furious"&gt;Furious&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/OneXray/OneXray"&gt;OneXray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/goxray/desktop"&gt;GoXRay&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AnyPortal/AnyPortal"&gt;AnyPortal&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Linux 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/v2rayA/v2rayA"&gt;v2rayA&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LorenEteval/Furious"&gt;Furious&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ketetefid/GorzRay"&gt;GorzRay&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/goxray/desktop"&gt;GoXRay&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AnyPortal/AnyPortal"&gt;AnyPortal&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Others that support VLESS, XTLS, REALITY, XUDP, PLUX...&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS &amp;amp; macOS arm64 &amp;amp; tvOS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://apps.apple.com/app/shadowrocket/id932747118"&gt;Shadowrocket&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://apps.apple.com/us/app/loon/id1373567447"&gt;Loon&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Xray Tools 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lilendian0x00/xray-knife"&gt;xray-knife&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kutovoys/xray-checker"&gt;xray-checker&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Xray Wrapper 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/XTLS/libXray"&gt;XTLS/libXray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/remnawave/xtls-sdk"&gt;xtls-sdk&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hiddify/xtlsapi"&gt;xtlsapi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/2dust/AndroidLibXrayLite"&gt;AndroidLibXrayLite&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LorenEteval/Xray-core-python"&gt;Xray-core-python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/XVGuardian/xray-api"&gt;xray-api&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/XrayR-project/XrayR"&gt;XrayR&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/XrayR-project/XrayR-release"&gt;XrayR-release&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/missuo/XrayR-V2Board"&gt;XrayR-V2Board&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Cores 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/amnezia-vpn"&gt;Amnezia VPN&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/MetaCubeX/mihomo"&gt;mihomo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SagerNet/sing-box"&gt;sing-box&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/XTLS/Xray-core/raw/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://deepwiki.com/XTLS/Xray-core"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/XTLS/Xray-core/releases/tag/v1.0.0"&gt;Xray-core v1.0.0&lt;/a&gt; was forked from &lt;a href="https://github.com/v2fly/v2ray-core/commit/9a03cc5c98d04cc28320fcee26dbc236b3291256"&gt;v2fly-core 9a03cc5&lt;/a&gt;, and we have made &amp;amp; accumulated a huge number of enhancements over time, check &lt;a href="https://github.com/XTLS/Xray-core/releases"&gt;the release notes for each version&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;For third-party projects used in &lt;a href="https://github.com/XTLS/Xray-core"&gt;Xray-core&lt;/a&gt;, check your local or &lt;a href="https://github.com/XTLS/Xray-core/raw/main/go.mod"&gt;the latest go.mod&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;One-line Compilation&lt;/h2&gt; 
&lt;h3&gt;Windows (PowerShell)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;$env:CGO_ENABLED=0
go build -o xray.exe -trimpath -buildvcs=false -ldflags="-s -w -buildid=" -v ./main
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux / macOS&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;CGO_ENABLED=0 go build -o xray -trimpath -buildvcs=false -ldflags="-s -w -buildid=" -v ./main
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Reproducible Releases&lt;/h3&gt; 
&lt;p&gt;Make sure that you are using the same Go version, and remember to set the git commit id (7 bytes):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;CGO_ENABLED=0 go build -o xray -trimpath -buildvcs=false -gcflags="all=-l=4" -ldflags="-X github.com/xtls/xray-core/core.build=REPLACE -s -w -buildid=" -v ./main
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are compiling a 32-bit MIPS/MIPSLE target, use this command instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;CGO_ENABLED=0 go build -o xray -trimpath -buildvcs=false -gcflags="-l=4" -ldflags="-X github.com/xtls/xray-core/core.build=REPLACE -s -w -buildid=" -v ./main
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://starchart.cc/XTLS/Xray-core"&gt;&lt;img src="https://starchart.cc/XTLS/Xray-core.svg?sanitize=true" alt="Stargazers over time" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>minio/minio</title>
      <link>https://github.com/minio/minio</link>
      <description>&lt;p&gt;MinIO is a high-performance, S3 compatible object store, open sourced under GNU AGPLv3 license.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MinIO Quickstart Guide&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://slack.min.io"&gt;&lt;img src="https://slack.min.io/slack?type=svg" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/minio/minio/"&gt;&lt;img src="https://img.shields.io/docker/pulls/minio/minio.svg?maxAge=604800" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://github.com/minio/minio/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-AGPL%20V3-blue" alt="license" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://min.io"&gt;&lt;img src="https://raw.githubusercontent.com/minio/minio/master/.github/logo.svg?sanitize=true" alt="MinIO" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;MinIO is a high-performance, S3-compatible object storage solution released under the GNU AGPL v3.0 license. Designed for speed and scalability, it powers AI/ML, analytics, and data-intensive workloads with industry-leading performance.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;S3 API Compatible – Seamless integration with existing S3 tools&lt;/li&gt; 
 &lt;li&gt;Built for AI &amp;amp; Analytics – Optimized for large-scale data pipelines&lt;/li&gt; 
 &lt;li&gt;High Performance – Ideal for demanding storage workloads.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This README provides instructions for building MinIO from source and deploying onto baremetal hardware. Use the &lt;a href="https://github.com/minio/docs"&gt;MinIO Documentation&lt;/a&gt; project to build and host a local copy of the documentation.&lt;/p&gt; 
&lt;h2&gt;MinIO is Open Source Software&lt;/h2&gt; 
&lt;p&gt;We designed MinIO as Open Source software for the Open Source software community. We encourage the community to remix, redesign, and reshare MinIO under the terms of the AGPLv3 license.&lt;/p&gt; 
&lt;p&gt;All usage of MinIO in your application stack requires validation against AGPLv3 obligations, which include but are not limited to the release of modified code to the community from which you have benefited. Any commercial/proprietary usage of the AGPLv3 software, including repackaging or reselling services/features, is done at your own risk.&lt;/p&gt; 
&lt;p&gt;The AGPLv3 provides no obligation by any party to support, maintain, or warranty the original or any modified work. All support is provided on a best-effort basis through Github and our &lt;a href="https://raw.githubusercontent.com/minio/minio/master/https//slack.min.io"&gt;Slack&lt;/a&gt; channel, and any member of the community is welcome to contribute and assist others in their usage of the software.&lt;/p&gt; 
&lt;p&gt;MinIO &lt;a href="https://www.min.io/product/aistor"&gt;AIStor&lt;/a&gt; includes enterprise-grade support and licensing for workloads which require commercial or proprietary usage and production-level SLA/SLO-backed support. For more information, &lt;a href="https://min.io/pricing"&gt;reach out for a quote&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Source-Only Distribution&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; The MinIO community edition is now distributed as source code only. We will no longer provide pre-compiled binary releases for the community version.&lt;/p&gt; 
&lt;h3&gt;Installing Latest MinIO Community Edition&lt;/h3&gt; 
&lt;p&gt;To use MinIO community edition, you have two options:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Install from source&lt;/strong&gt; using &lt;code&gt;go install github.com/minio/minio@latest&lt;/code&gt; (recommended)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Build a Docker image&lt;/strong&gt; from the provided Dockerfile&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See the sections below for detailed instructions on each method.&lt;/p&gt; 
&lt;h3&gt;Legacy Binary Releases&lt;/h3&gt; 
&lt;p&gt;Historical pre-compiled binary releases remain available for reference but are no longer maintained:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GitHub Releases: &lt;a href="https://github.com/minio/minio/releases"&gt;https://github.com/minio/minio/releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Direct downloads: &lt;a href="https://dl.min.io/server/minio/release/"&gt;https://dl.min.io/server/minio/release/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;These legacy binaries will not receive updates.&lt;/strong&gt; We strongly recommend using source builds for access to the latest features, bug fixes, and security updates.&lt;/p&gt; 
&lt;h2&gt;Install from Source&lt;/h2&gt; 
&lt;p&gt;Use the following commands to compile and run a standalone MinIO server from source. If you do not have a working Golang environment, please follow &lt;a href="https://golang.org/doc/install"&gt;How to install Golang&lt;/a&gt;. Minimum version required is &lt;a href="https://golang.org/dl/#stable"&gt;go1.24&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install github.com/minio/minio@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can alternatively run &lt;code&gt;go build&lt;/code&gt; and use the &lt;code&gt;GOOS&lt;/code&gt; and &lt;code&gt;GOARCH&lt;/code&gt; environment variables to control the OS and architecture target. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;env GOOS=linux GOARCh=arm64 go build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Start MinIO by running &lt;code&gt;minio server PATH&lt;/code&gt; where &lt;code&gt;PATH&lt;/code&gt; is any empty folder on your local filesystem.&lt;/p&gt; 
&lt;p&gt;The MinIO deployment starts using default root credentials &lt;code&gt;minioadmin:minioadmin&lt;/code&gt;. You can test the deployment using the MinIO Console, an embedded web-based object browser built into MinIO Server. Point a web browser running on the host machine to &lt;a href="http://127.0.0.1:9000"&gt;http://127.0.0.1:9000&lt;/a&gt; and log in with the root credentials. You can use the Browser to create buckets, upload objects, and browse the contents of the MinIO server.&lt;/p&gt; 
&lt;p&gt;You can also connect using any S3-compatible tool, such as the MinIO Client &lt;code&gt;mc&lt;/code&gt; commandline tool:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;mc alias set local http://localhost:9000 minioadmin minioadmin
mc admin info local
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/minio/minio/master/#test-using-minio-client-mc"&gt;Test using MinIO Client &lt;code&gt;mc&lt;/code&gt;&lt;/a&gt; for more information on using the &lt;code&gt;mc&lt;/code&gt; commandline tool. For application developers, see &lt;a href="https://docs.min.io/community/minio-object-store/developers/minio-drivers.html"&gt;https://docs.min.io/community/minio-object-store/developers/minio-drivers.html&lt;/a&gt; to view MinIO SDKs for supported languages.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Production environments using compiled-from-source MinIO binaries do so at their own risk. The AGPLv3 license provides no warranties nor liabilites for any such usage.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Build Docker Image&lt;/h2&gt; 
&lt;p&gt;You can use the &lt;code&gt;docker build .&lt;/code&gt; command to build a Docker image on your local host machine. You must first &lt;a href="https://raw.githubusercontent.com/minio/minio/master/#install-from-source"&gt;build MinIO&lt;/a&gt; and ensure the &lt;code&gt;minio&lt;/code&gt; binary exists in the project root.&lt;/p&gt; 
&lt;p&gt;The following command builds the Docker image using the default &lt;code&gt;Dockerfile&lt;/code&gt; in the root project directory with the repository and image tag &lt;code&gt;myminio:minio&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t myminio:minio .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use &lt;code&gt;docker image ls&lt;/code&gt; to confirm the image exists in your local repository. You can run the server using standard Docker invocation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run -p 9000:9000 -p 9001:9001 myminio:minio server /tmp/minio --console-address :9001
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Complete documentation for building Docker containers, managing custom images, or loading images into orchestration platforms is out of scope for this documentation. You can modify the &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;dockerscripts/socker-entrypoint.sh&lt;/code&gt; as-needed to reflect your specific image requirements.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://docs.min.io/community/minio-object-store/operations/deployments/baremetal-deploy-minio-as-a-container.html#deploy-minio-container"&gt;MinIO Container&lt;/a&gt; documentation for more guidance on running MinIO within a Container image.&lt;/p&gt; 
&lt;h2&gt;Install using Helm Charts&lt;/h2&gt; 
&lt;p&gt;There are two paths for installing MinIO onto Kubernetes infrastructure:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use the &lt;a href="https://github.com/minio/operator"&gt;MinIO Operator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Use the community-maintained &lt;a href="https://github.com/minio/minio/tree/master/helm/minio"&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href="https://docs.min.io/community/minio-object-store/operations/deployments/kubernetes.html"&gt;MinIO Documentation&lt;/a&gt; for guidance on deploying using the Operator. The Community Helm chart has instructions in the folder-level README.&lt;/p&gt; 
&lt;h2&gt;Test MinIO Connectivity&lt;/h2&gt; 
&lt;h3&gt;Test using MinIO Console&lt;/h3&gt; 
&lt;p&gt;MinIO Server comes with an embedded web based object browser. Point your web browser to &lt;a href="http://127.0.0.1:9000"&gt;http://127.0.0.1:9000&lt;/a&gt; to ensure your server has started successfully.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] MinIO runs console on random port by default, if you wish to choose a specific port use &lt;code&gt;--console-address&lt;/code&gt; to pick a specific interface and port.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Test using MinIO Client &lt;code&gt;mc&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;mc&lt;/code&gt; provides a modern alternative to UNIX commands like ls, cat, cp, mirror, diff etc. It supports filesystems and Amazon S3 compatible cloud storage services.&lt;/p&gt; 
&lt;p&gt;The following commands set a local alias, validate the server information, create a bucket, copy data to that bucket, and list the contents of the bucket.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;mc alias set local http://localhost:9000 minioadmin minioadmin
mc admin info
mc mb data
mc cp ~/Downloads/mydata data/
mc ls data/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Follow the MinIO Client &lt;a href="https://docs.min.io/community/minio-object-store/reference/minio-mc.html#quickstart"&gt;Quickstart Guide&lt;/a&gt; for further instructions.&lt;/p&gt; 
&lt;h2&gt;Explore Further&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.min.io/community/minio-object-store/index.html"&gt;The MinIO documentation website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.min.io/community/minio-object-store/operations/concepts/erasure-coding.html"&gt;MinIO Erasure Code Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.min.io/community/minio-object-store/reference/minio-mc.html"&gt;Use &lt;code&gt;mc&lt;/code&gt; with MinIO Server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.min.io/community/minio-object-store/developers/go/minio-go.html"&gt;Use &lt;code&gt;minio-go&lt;/code&gt; SDK with MinIO Server&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribute to MinIO Project&lt;/h2&gt; 
&lt;p&gt;Please follow MinIO &lt;a href="https://github.com/minio/minio/raw/master/CONTRIBUTING.md"&gt;Contributor's Guide&lt;/a&gt; for guidance on making new contributions to the repository.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;MinIO source is licensed under the &lt;a href="https://github.com/minio/minio/raw/master/LICENSE"&gt;GNU AGPLv3&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;MinIO &lt;a href="https://github.com/minio/minio/tree/master/docs"&gt;documentation&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;CC BY 4.0&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/minio/minio/raw/master/COMPLIANCE.md"&gt;License Compliance&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>sjzar/chatlog</title>
      <link>https://github.com/sjzar/chatlog</link>
      <description>&lt;p&gt;chat log tool, easily use your own chat data. 聊天记录工具，轻松使用自己的聊天数据&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/e085d3a2-e009-4463-b2fd-8bd7df2b50c3" alt="chatlog" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;聊天记录工具，帮助大家轻松使用自己的聊天数据&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://imgmcp.com"&gt;&lt;img src="https://cdn.imgmcp.com/imgmcp-logo-small.png" alt="ImgMCP" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/sjzar/chatlog"&gt;&lt;img src="https://goreportcard.com/badge/github.com/sjzar/chatlog" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/sjzar/chatlog"&gt;&lt;img src="https://godoc.org/github.com/sjzar/chatlog?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sjzar/chatlog/releases"&gt;&lt;img src="https://img.shields.io/github/release/sjzar/chatlog.svg?sanitize=true" alt="GitHub release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sjzar/chatlog/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/sjzar/chatlog.svg?sanitize=true" alt="GitHub license" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Feature&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;从本地数据库文件中获取聊天数据&lt;/li&gt; 
 &lt;li&gt;支持 Windows / macOS 系统，兼容微信 3.x / 4.x 版本&lt;/li&gt; 
 &lt;li&gt;支持获取数据与图片密钥 (Windows &amp;lt; 4.0.3.36 / macOS &amp;lt; 4.0.3.80)&lt;/li&gt; 
 &lt;li&gt;支持图片、语音等多媒体数据解密，支持 wxgf 格式解析&lt;/li&gt; 
 &lt;li&gt;支持自动解密数据库，并提供新消息 Webhook 回调&lt;/li&gt; 
 &lt;li&gt;提供 Terminal UI 界面，同时支持命令行工具和 Docker 镜像部署&lt;/li&gt; 
 &lt;li&gt;提供 HTTP API 服务，可轻松查询聊天记录、联系人、群聊、最近会话等信息&lt;/li&gt; 
 &lt;li&gt;支持 MCP Streamable HTTP 协议，可与 AI 助手无缝集成&lt;/li&gt; 
 &lt;li&gt;支持多账号管理，可在不同账号间切换&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;基本步骤&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;安装 Chatlog&lt;/strong&gt;：&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#%E4%B8%8B%E8%BD%BD%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC"&gt;下载预编译版本&lt;/a&gt; 或 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#%E4%BB%8E%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85"&gt;使用 Go 安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;运行程序&lt;/strong&gt;：执行 &lt;code&gt;chatlog&lt;/code&gt; 启动 Terminal UI 界面&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;解密数据&lt;/strong&gt;：选择 &lt;code&gt;解密数据&lt;/code&gt; 菜单项&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;开启 HTTP 服务&lt;/strong&gt;：选择 &lt;code&gt;开启 HTTP 服务&lt;/code&gt; 菜单项&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;访问数据&lt;/strong&gt;：通过 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#http-api"&gt;HTTP API&lt;/a&gt; 或 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#mcp-%E9%9B%86%E6%88%90"&gt;MCP 集成&lt;/a&gt; 访问聊天记录&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;: 如果电脑端微信聊天记录不全，可以&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#%E4%BB%8E%E6%89%8B%E6%9C%BA%E8%BF%81%E7%A7%BB%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95"&gt;从手机端迁移数据&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;常见问题快速解决&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS 用户&lt;/strong&gt;：获取密钥前需&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#macos-%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E"&gt;临时关闭 SIP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows 用户&lt;/strong&gt;：遇到界面显示问题请&lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#windows-%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E"&gt;使用 Windows Terminal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;集成 AI 助手&lt;/strong&gt;：查看 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/#mcp-%E9%9B%86%E6%88%90"&gt;MCP 集成指南&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;无法获取密钥&lt;/strong&gt;：查看 &lt;a href="https://github.com/sjzar/chatlog/issues/197"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;安装指南&lt;/h2&gt; 
&lt;h3&gt;从源码安装&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go install github.com/sjzar/chatlog@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;: 部分功能有 cgo 依赖，编译前需确认本地有 C 编译环境。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;下载预编译版本&lt;/h3&gt; 
&lt;p&gt;访问 &lt;a href="https://github.com/sjzar/chatlog/releases"&gt;Releases&lt;/a&gt; 页面下载适合您系统的预编译版本。&lt;/p&gt; 
&lt;h2&gt;使用指南&lt;/h2&gt; 
&lt;h3&gt;Terminal UI 模式&lt;/h3&gt; 
&lt;p&gt;最简单的使用方式是通过 Terminal UI 界面操作：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;chatlog
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;操作方法：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用 &lt;code&gt;↑&lt;/code&gt; &lt;code&gt;↓&lt;/code&gt; 键选择菜单项&lt;/li&gt; 
 &lt;li&gt;按 &lt;code&gt;Enter&lt;/code&gt; 确认选择&lt;/li&gt; 
 &lt;li&gt;按 &lt;code&gt;Esc&lt;/code&gt; 返回上级菜单&lt;/li&gt; 
 &lt;li&gt;按 &lt;code&gt;Ctrl+C&lt;/code&gt; 退出程序&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;命令行模式&lt;/h3&gt; 
&lt;p&gt;对于熟悉命令行的用户，可以直接使用以下命令：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 获取微信数据密钥
chatlog key

# 解密数据库文件
chatlog decrypt

# 启动 HTTP 服务
chatlog server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker 部署&lt;/h3&gt; 
&lt;p&gt;由于 Docker 部署时，程序运行环境与宿主机隔离，所以不支持获取密钥等操作，需要提前获取密钥数据。&lt;/p&gt; 
&lt;p&gt;一般用于 NAS 等设备部署，详细指南可参考 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/docs/docker.md"&gt;Docker 部署指南&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0. 获取密钥信息&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# 从本机运行 chatlog 获取密钥信息
$ chatlog key
Data Key: [c0163e***ac3dc6]
Image Key: [38636***653361]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;1. 拉取镜像&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;chatlog 提供了两个镜像源：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker pull sjzar/chatlog:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;GitHub Container Registry (ghcr)&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker pull ghcr.io/sjzar/chatlog:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 &lt;strong&gt;镜像地址&lt;/strong&gt;:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Docker Hub: &lt;a href="https://hub.docker.com/r/sjzar/chatlog"&gt;https://hub.docker.com/r/sjzar/chatlog&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;GitHub Container Registry: &lt;a href="https://ghcr.io/sjzar/chatlog"&gt;https://ghcr.io/sjzar/chatlog&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;2. 运行容器&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ docker run -d \
  --name chatlog \
  -p 5030:5030 \
  -v /path/to/your/wechat/data:/app/data \
  sjzar/chatlog:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;从手机迁移聊天记录&lt;/h3&gt; 
&lt;p&gt;如果电脑端微信聊天记录不全，可以从手机端迁移数据：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;打开手机微信，进入 &lt;code&gt;我 - 设置 - 通用 - 聊天记录迁移与备份&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;选择 &lt;code&gt;迁移 - 迁移到电脑&lt;/code&gt;，按照提示操作&lt;/li&gt; 
 &lt;li&gt;完成迁移后，重新运行 &lt;code&gt;chatlog&lt;/code&gt; 获取密钥并解密数据&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;此操作不会影响手机上的聊天记录，只是将数据复制到电脑端&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;平台特定说明&lt;/h2&gt; 
&lt;h3&gt;Windows 版本说明&lt;/h3&gt; 
&lt;p&gt;如遇到界面显示异常（如花屏、乱码等），请使用 &lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt; 运行程序&lt;/p&gt; 
&lt;h3&gt;macOS 版本说明&lt;/h3&gt; 
&lt;p&gt;macOS 用户在获取密钥前需要临时关闭 SIP（系统完整性保护）：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;关闭 SIP&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;# 进入恢复模式
# Intel Mac: 重启时按住 Command + R
# Apple Silicon: 重启时长按电源键

# 在恢复模式中打开终端并执行
csrutil disable

# 重启系统
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;安装必要工具&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;# 安装 Xcode Command Line Tools
xcode-select --install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;获取密钥后&lt;/strong&gt;：可以重新启用 SIP（&lt;code&gt;csrutil enable&lt;/code&gt;），不影响后续使用&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Apple Silicon 用户注意：确保微信、chatlog 和终端都不在 Rosetta 模式下运行&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;HTTP API&lt;/h2&gt; 
&lt;p&gt;启动 HTTP 服务后（默认地址 &lt;code&gt;http://127.0.0.1:5030&lt;/code&gt;），可通过以下 API 访问数据：&lt;/p&gt; 
&lt;h3&gt;聊天记录查询&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;GET /api/v1/chatlog?time=2023-01-01&amp;amp;talker=wxid_xxx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;参数说明：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;time&lt;/code&gt;: 时间范围，格式为 &lt;code&gt;YYYY-MM-DD&lt;/code&gt; 或 &lt;code&gt;YYYY-MM-DD~YYYY-MM-DD&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;talker&lt;/code&gt;: 聊天对象标识（支持 wxid、群聊 ID、备注名、昵称等）&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;limit&lt;/code&gt;: 返回记录数量&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;offset&lt;/code&gt;: 分页偏移量&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;format&lt;/code&gt;: 输出格式，支持 &lt;code&gt;json&lt;/code&gt;、&lt;code&gt;csv&lt;/code&gt; 或纯文本&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;其他 API 接口&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;联系人列表&lt;/strong&gt;：&lt;code&gt;GET /api/v1/contact&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;群聊列表&lt;/strong&gt;：&lt;code&gt;GET /api/v1/chatroom&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;会话列表&lt;/strong&gt;：&lt;code&gt;GET /api/v1/session&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;多媒体内容&lt;/h3&gt; 
&lt;p&gt;聊天记录中的多媒体内容会通过 HTTP 服务进行提供，可通过以下路径访问：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;图片内容&lt;/strong&gt;：&lt;code&gt;GET /image/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;视频内容&lt;/strong&gt;：&lt;code&gt;GET /video/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;文件内容&lt;/strong&gt;：&lt;code&gt;GET /file/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;语音内容&lt;/strong&gt;：&lt;code&gt;GET /voice/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;多媒体内容&lt;/strong&gt;：&lt;code&gt;GET /data/&amp;lt;data dir relative path&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;当请求图片、视频、文件内容时，将返回 302 跳转到多媒体内容 URL。&lt;br /&gt; 当请求语音内容时，将直接返回语音内容，并对原始 SILK 语音做了实时转码 MP3 处理。&lt;br /&gt; 多媒体内容 URL 地址为基于&lt;code&gt;数据目录&lt;/code&gt;的相对地址，请求多媒体内容将直接返回对应文件，并针对加密图片做了实时解密处理。&lt;/p&gt; 
&lt;h2&gt;Webhook&lt;/h2&gt; 
&lt;p&gt;需开启自动解密功能，当收到特定新消息时，可以通过 HTTP POST 请求将消息推送到指定的 URL。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;延迟测试: 本地服务消息回调延迟约 13 秒; 远程同步消息回调延迟约 45 秒。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;0. 回调配置&lt;/h4&gt; 
&lt;p&gt;使用 TUI 模式的话，在 &lt;code&gt;$HOME/.chatlog/chatlog.json&lt;/code&gt; 配置文件中，新增 &lt;code&gt;webhook&lt;/code&gt; 配置。&lt;br /&gt; （Windows 用户的配置文件在 &lt;code&gt;%USERPROFILE%/.chatlog/chatlog.json&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "history": [],
  "last_account": "wxuser_x",
  "webhook": {
    "host": "localhost:5030",                   # 消息中的图片、文件等 URL host
    "items": [
      {
        "url": "http://localhost:8080/webhook", # 必填，webhook 请求的URL，可配置为 n8n 等 webhook 入口 
        "talker": "wxid_123",                   # 必填，需要监控的私聊、群聊名称
        "sender": "",                           # 选填，消息发送者
        "keyword": ""                           # 选填，关键词
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;使用 server 模式的话，可以通过 &lt;code&gt;CHATLOG_WEBHOOK&lt;/code&gt; 环境变量进行设置。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# 方案 1
CHATLOG_WEBHOOK='{"host":"localhost:5030","items":[{"url":"http://localhost:8080/proxy","talker":"wxid_123","sender":"","keyword":""}]}'

# 方案 2（任选一种）
CHATLOG_WEBHOOK_HOST="localhost:5030"
CHATLOG_WEBHOOK_ITEMS='[{"url":"http://localhost:8080/proxy","talker":"wxid_123","sender":"","keyword":""}]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1. 测试效果&lt;/h4&gt; 
&lt;p&gt;启动 chatlog 并开启自动解密功能，测试回调效果&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;POST /webhook HTTP/1.1
Host: localhost:8080
Accept-Encoding: gzip
Content-Length: 386
Content-Type: application/json
User-Agent: Go-http-client/1.1

Body:
{
  "keyword": "",
  "lastTime": "2025-08-27 00:00:00",
  "length": 1,
  "messages": [
    {
      "seq": 1756225000000,
      "time": "2025-08-27T00:00:00+08:00",
      "talker": "wxid_123",
      "talkerName": "",
      "isChatRoom": false,
      "sender": "wxid_123",
      "senderName": "Name",
      "isSelf": false,
      "type": 1,
      "subType": 0,
      "content": "测试消息",
      "contents": {
        "host": "localhost:5030"
      }
    }
  ],
  "sender": "",
  "talker": "wxid_123"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;MCP 集成&lt;/h2&gt; 
&lt;p&gt;Chatlog 支持 MCP (Model Context Protocol) 协议，可与支持 MCP 的 AI 助手无缝集成。&lt;br /&gt; 启动 HTTP 服务后，通过 Streamable HTTP Endpoint 访问服务：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;GET /mcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;快速集成&lt;/h3&gt; 
&lt;p&gt;Chatlog 可以与多种支持 MCP 的 AI 助手集成，包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ChatWise&lt;/strong&gt;: 直接支持 Streamable HTTP，在工具设置中添加 &lt;code&gt;http://127.0.0.1:5030/mcp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cherry Studio&lt;/strong&gt;: 直接支持 Streamable HTTP，在 MCP 服务器设置中添加 &lt;code&gt;http://127.0.0.1:5030/mcp&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;对于不直接支持 Streamable HTTP 的客户端，可以使用 &lt;a href="https://github.com/sparfenyuk/mcp-proxy"&gt;mcp-proxy&lt;/a&gt; 工具转发请求：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Claude Desktop&lt;/strong&gt;: 通过 mcp-proxy 支持，需要配置 &lt;code&gt;claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Monica Code&lt;/strong&gt;: 通过 mcp-proxy 支持，需要配置 VSCode 插件设置&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;详细集成指南&lt;/h3&gt; 
&lt;p&gt;查看 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/docs/mcp.md"&gt;MCP 集成指南&lt;/a&gt; 获取各平台的详细配置步骤和注意事项。&lt;/p&gt; 
&lt;h2&gt;Prompt 示例&lt;/h2&gt; 
&lt;p&gt;为了帮助大家更好地利用 Chatlog 与 AI 助手，我们整理了一些 prompt 示例。希望这些 prompt 可以启发大家更有效地查询和分析聊天记录，获取更精准的信息。&lt;/p&gt; 
&lt;p&gt;查看 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/docs/prompt.md"&gt;Prompt 指南&lt;/a&gt; 获取详细示例。&lt;/p&gt; 
&lt;p&gt;同时欢迎大家分享使用经验和 prompt！如果您有好的 prompt 示例或使用技巧，请通过 &lt;a href="https://github.com/sjzar/chatlog/discussions"&gt;Discussions&lt;/a&gt; 进行分享，共同进步。&lt;/p&gt; 
&lt;h2&gt;免责声明&lt;/h2&gt; 
&lt;p&gt;⚠️ &lt;strong&gt;重要提示：使用本项目前，请务必阅读并理解完整的 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/DISCLAIMER.md"&gt;免责声明&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本项目仅供学习、研究和个人合法使用，禁止用于任何非法目的或未授权访问他人数据。下载、安装或使用本工具即表示您同意遵守免责声明中的所有条款，并自行承担使用过程中的全部风险和法律责任。&lt;/p&gt; 
&lt;h3&gt;摘要（请阅读完整免责声明）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;仅限处理您自己合法拥有的聊天数据或已获授权的数据&lt;/li&gt; 
 &lt;li&gt;严禁用于未经授权获取、查看或分析他人聊天记录&lt;/li&gt; 
 &lt;li&gt;开发者不对使用本工具可能导致的任何损失承担责任&lt;/li&gt; 
 &lt;li&gt;使用第三方 LLM 服务时，您应遵守这些服务的使用条款和隐私政策&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;本项目完全免费开源，任何以本项目名义收费的行为均与本项目无关。&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;本项目基于 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/LICENSE"&gt;Apache-2.0 许可证&lt;/a&gt; 开源。&lt;/p&gt; 
&lt;h2&gt;隐私政策&lt;/h2&gt; 
&lt;p&gt;本项目不收集任何用户数据。所有数据处理均在用户本地设备上进行。使用第三方服务时，请参阅相应服务的隐私政策。&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xlane"&gt;@0xlane&lt;/a&gt; 的 &lt;a href="https://github.com/0xlane/wechat-dump-rs"&gt;wechat-dump-rs&lt;/a&gt; 项目&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xaoyaoo"&gt;@xaoyaoo&lt;/a&gt; 的 &lt;a href="https://github.com/xaoyaoo/PyWxDump"&gt;PyWxDump&lt;/a&gt; 项目&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/git-jiadong"&gt;@git-jiadong&lt;/a&gt; 的 &lt;a href="https://github.com/git-jiadong/go-lame"&gt;go-lame&lt;/a&gt; 和 &lt;a href="https://github.com/git-jiadong/go-silk"&gt;go-silk&lt;/a&gt; 项目&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.anthropic.com/"&gt;Anthropic&lt;/a&gt; 的 &lt;a href="https://raw.githubusercontent.com/sjzar/chatlog/main/(https://github.com/modelcontextprotocol)"&gt;MCP&lt;/a&gt; 协议&lt;/li&gt; 
 &lt;li&gt;各个 Go 开源库的贡献者们&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>tulir/whatsmeow</title>
      <link>https://github.com/tulir/whatsmeow</link>
      <description>&lt;p&gt;Go library for the WhatsApp web multidevice API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;whatsmeow&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow"&gt;&lt;img src="https://pkg.go.dev/badge/go.mau.fi/whatsmeow.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;whatsmeow is a Go library for the WhatsApp web multidevice API.&lt;/p&gt; 
&lt;h2&gt;Discussion&lt;/h2&gt; 
&lt;p&gt;Matrix room: &lt;a href="https://matrix.to/#/#whatsmeow:maunium.net"&gt;#whatsmeow:maunium.net&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For questions about the WhatsApp protocol (like how to send a specific type of message), you can also use the &lt;a href="https://github.com/tulir/whatsmeow/discussions/categories/whatsapp-protocol-q-a"&gt;WhatsApp protocol Q&amp;amp;A&lt;/a&gt; section on GitHub discussions.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow"&gt;godoc&lt;/a&gt; includes docs for all methods and event types. There's also a &lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow#example-package"&gt;simple example&lt;/a&gt; at the top.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Most core features are already present:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sending messages to private chats and groups (both text and media)&lt;/li&gt; 
 &lt;li&gt;Receiving all messages&lt;/li&gt; 
 &lt;li&gt;Managing groups and receiving group change events&lt;/li&gt; 
 &lt;li&gt;Joining via invite messages, using and creating invite links&lt;/li&gt; 
 &lt;li&gt;Sending and receiving typing notifications&lt;/li&gt; 
 &lt;li&gt;Sending and receiving delivery and read receipts&lt;/li&gt; 
 &lt;li&gt;Reading and writing app state (contact list, chat pin/mute status, etc)&lt;/li&gt; 
 &lt;li&gt;Sending and handling retry receipts if message decryption fails&lt;/li&gt; 
 &lt;li&gt;Sending status messages (experimental, may not work for large contact lists)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Things that are not yet implemented:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sending broadcast list messages (this is not supported on WhatsApp web either)&lt;/li&gt; 
 &lt;li&gt;Calls&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jesseduffield/lazydocker</title>
      <link>https://github.com/jesseduffield/lazydocker</link>
      <description>&lt;p&gt;The lazier way to manage everything docker&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=lazydocker_20231023"&gt; 
  &lt;div&gt; 
   &lt;img src="https://github.com/warpdotdev/brand-assets/raw/main/Github/Sponsor/Warp-Github-LG-02.png?raw=true" width="400" alt="Warp" /&gt; 
  &lt;/div&gt; &lt;b&gt;Warp, the intelligent terminal&lt;/b&gt; &lt;br /&gt; &lt;b&gt;Available for MacOS and Linux&lt;/b&gt; &lt;br /&gt; 
  &lt;div&gt; 
   &lt;sup&gt;Visit&amp;nbsp;warp.dev&amp;nbsp;to learn more.&lt;/sup&gt; 
  &lt;/div&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;a href="https://tuple.app/lazydocker"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/assets/tuple.png" width="400" alt="Tuple" /&gt; 
  &lt;/div&gt; &lt;b&gt;Tuple, the premier screen sharing app for developers on macOS and Windows.&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.subble.com"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/assets/subble.webp" width="400" alt="Subble" /&gt; 
  &lt;/div&gt; &lt;b&gt;I (Jesse) co-founded Subble to save your company time and money by finding unused and over-provisioned SaaS licences. Check it out!&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;img src="https://user-images.githubusercontent.com/8456633/59972109-8e9c8480-95cc-11e9-8350-38f7f86ba76d.png" /&gt; &lt;/p&gt; 
&lt;p&gt;A simple terminal UI for both docker and docker-compose, written in Go with the &lt;a href="https://github.com/jroimartin/gocui" title="gocui"&gt;gocui&lt;/a&gt; library.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/jesseduffield/lazygit/workflows/Continuous%20Integration/badge.svg?sanitize=true" alt="CI" /&gt; &lt;a href="https://goreportcard.com/report/github.com/jesseduffield/lazydocker"&gt;&lt;img src="https://goreportcard.com/badge/github.com/jesseduffield/lazydocker" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://golangci.com"&gt;&lt;img src="https://golangci.com/badges/github.com/jesseduffield/lazydocker.svg?sanitize=true" alt="GolangCI" /&gt;&lt;/a&gt; &lt;a href="http://godoc.org/github.com/jesseduffield/lazydocker"&gt;&lt;img src="https://godoc.org/github.com/jesseduffield/lazydocker?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/repo-size/jesseduffield/lazydocker" alt="GitHub repo size" /&gt; &lt;a href="https://github.com/jesseduffield/lazydocker/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/jesseduffield/lazydocker/total" alt="GitHub Releases" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jesseduffield/lazydocker/releases/latest"&gt;&lt;img src="https://img.shields.io/github/tag/jesseduffield/lazydocker.svg?sanitize=true" alt="GitHub tag" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Homebrew/homebrew-core/raw/master/Formula/lazydocker.rb"&gt;&lt;img src="https://img.shields.io/homebrew/v/lazydocker" alt="homebrew" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/demo3.gif" alt="Gif" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/NICqQPxwJWw"&gt;Demo&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p align="center"&gt; Maintenance of this project is made possible by all the &lt;a href="https://github.com/jesseduffield/lazydocker/graphs/contributors"&gt;contributors&lt;/a&gt; and &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsors&lt;/a&gt;. If you'd like to sponsor this project and have your avatar or company logo appear below &lt;a href="https://github.com/sponsors/jesseduffield"&gt;click here&lt;/a&gt;. 💙 &lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;!-- sponsors --&gt;&lt;a href="https://github.com/intabulas"&gt;&lt;img src="https://github.com/intabulas.png" width="60px" alt="Mark Lussier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/peppy"&gt;&lt;img src="https://github.com/peppy.png" width="60px" alt="Dean Herbert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/piot"&gt;&lt;img src="https://github.com/piot.png" width="60px" alt="Peter Bjorklund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/rgwood"&gt;&lt;img src="https://github.com/rgwood.png" width="60px" alt="Reilly Wood" /&gt;&lt;/a&gt;&lt;a href="https://github.com/oliverguenther"&gt;&lt;img src="https://github.com/oliverguenther.png" width="60px" alt="Oliver Günther" /&gt;&lt;/a&gt;&lt;a href="https://github.com/pawanjay176"&gt;&lt;img src="https://github.com/pawanjay176.png" width="60px" alt="Pawan Dhananjay" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bdach"&gt;&lt;img src="https://github.com/bdach.png" width="60px" alt="Bartłomiej Dach" /&gt;&lt;/a&gt;&lt;a href="https://github.com/davidklsn"&gt;&lt;img src="https://github.com/davidklsn.png" width="60px" alt="David Karlsson" /&gt;&lt;/a&gt;&lt;a href="https://github.com/carstengehling"&gt;&lt;img src="https://github.com/carstengehling.png" width="60px" alt="Carsten Gehling" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ceuk"&gt;&lt;img src="https://github.com/ceuk.png" width="60px" alt="CEUK" /&gt;&lt;/a&gt;&lt;a href="https://github.com/akospwc"&gt;&lt;img src="https://github.com/akospwc.png" width="60px" alt="Akos Putz" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Xetera"&gt;&lt;img src="https://github.com/Xetera.png" width="60px" alt="Xetera" /&gt;&lt;/a&gt;&lt;a href="https://github.com/HoldenLucas"&gt;&lt;img src="https://github.com/HoldenLucas.png" width="60px" alt="Holden Lucas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nartc"&gt;&lt;img src="https://github.com/nartc.png" width="60px" alt="Chau Tran" /&gt;&lt;/a&gt;&lt;a href="https://github.com/matejcik"&gt;&lt;img src="https://github.com/matejcik.png" width="60px" alt="matejcik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lucatume"&gt;&lt;img src="https://github.com/lucatume.png" width="60px" alt="theAverageDev (Luca Tumedei)" /&gt;&lt;/a&gt;&lt;a href="https://github.com/IvanZuy"&gt;&lt;img src="https://github.com/IvanZuy.png" width="60px" alt="Ivan Zaitsev" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nicholascloud"&gt;&lt;img src="https://github.com/nicholascloud.png" width="60px" alt="Nicholas Cloud" /&gt;&lt;/a&gt;&lt;a href="https://github.com/PhotonQuantum"&gt;&lt;img src="https://github.com/PhotonQuantum.png" width="60px" alt="LightQuantum" /&gt;&lt;/a&gt;&lt;a href="https://github.com/GitSquared"&gt;&lt;img src="https://github.com/GitSquared.png" width="60px" alt="Gabriel Saillard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ava1ar"&gt;&lt;img src="https://github.com/ava1ar.png" width="60px" alt="Aliaksandr Stelmachonak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/minidfx"&gt;&lt;img src="https://github.com/minidfx.png" width="60px" alt="Burgy Benjamin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/JoeKlemmer"&gt;&lt;img src="https://github.com/JoeKlemmer.png" width="60px" alt="Joe Klemmer" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tobi"&gt;&lt;img src="https://github.com/tobi.png" width="60px" alt="Tobias Lütke" /&gt;&lt;/a&gt;&lt;a href="https://github.com/benbfortis"&gt;&lt;img src="https://github.com/benbfortis.png" width="60px" alt="Ben Beaumont" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jakewarren"&gt;&lt;img src="https://github.com/jakewarren.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tgpholly"&gt;&lt;img src="https://github.com/tgpholly.png" width="60px" alt="Holly" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jisantuc"&gt;&lt;img src="https://github.com/jisantuc.png" width="60px" alt="James Santucci" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bitprophet"&gt;&lt;img src="https://github.com/bitprophet.png" width="60px" alt="Jeff Forcier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tayleighr"&gt;&lt;img src="https://github.com/tayleighr.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Novakov"&gt;&lt;img src="https://github.com/Novakov.png" width="60px" alt="Maciej T. Nowak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/farzadmf"&gt;&lt;img src="https://github.com/farzadmf.png" width="60px" alt="Farzad Majidfayyaz" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nekhaevskiy"&gt;&lt;img src="https://github.com/nekhaevskiy.png" width="60px" alt="Yury" /&gt;&lt;/a&gt;&lt;a href="https://github.com/reivilibre"&gt;&lt;img src="https://github.com/reivilibre.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/andreaskurth"&gt;&lt;img src="https://github.com/andreaskurth.png" width="60px" alt="Andreas Kurth" /&gt;&lt;/a&gt;&lt;a href="https://github.com/BSteffaniak"&gt;&lt;img src="https://github.com/BSteffaniak.png" width="60px" alt="Braden Steffaniak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jordan-gillard"&gt;&lt;img src="https://github.com/jordan-gillard.png" width="60px" alt="Jordan Gillard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/smangels"&gt;&lt;img src="https://github.com/smangels.png" width="60px" alt="Sebastian" /&gt;&lt;/a&gt;&lt;a href="https://github.com/George-Spanos"&gt;&lt;img src="https://github.com/George-Spanos.png" width="60px" alt="George Spanos" /&gt;&lt;/a&gt;&lt;a href="https://github.com/frantisekstanko"&gt;&lt;img src="https://github.com/frantisekstanko.png" width="60px" alt="Frantisek Stanko" /&gt;&lt;/a&gt;&lt;a href="https://github.com/amslezak"&gt;&lt;img src="https://github.com/amslezak.png" width="60px" alt="Andy Slezak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mkock"&gt;&lt;img src="https://github.com/mkock.png" width="60px" alt="Martin Kock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/illarionvk"&gt;&lt;img src="https://github.com/illarionvk.png" width="60px" alt="Illarion Koperski" /&gt;&lt;/a&gt;&lt;a href="https://github.com/WhiteBlackGoose"&gt;&lt;img src="https://github.com/WhiteBlackGoose.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jessealama"&gt;&lt;img src="https://github.com/jessealama.png" width="60px" alt="Jesse Alama" /&gt;&lt;/a&gt;&lt;a href="https://github.com/codacy"&gt;&lt;img src="https://github.com/codacy.png" width="60px" alt="Codacy" /&gt;&lt;/a&gt;&lt;a href="https://github.com/colbr"&gt;&lt;img src="https://github.com/colbr.png" width="60px" alt="Brett" /&gt;&lt;/a&gt;&lt;a href="https://github.com/heijmans"&gt;&lt;img src="https://github.com/heijmans.png" width="60px" alt="Jan Heijmans" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Vesther"&gt;&lt;img src="https://github.com/Vesther.png" width="60px" alt="Kevin Nowald" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sempruijs"&gt;&lt;img src="https://github.com/sempruijs.png" width="60px" alt="sem pruijs" /&gt;&lt;/a&gt;&lt;a href="https://github.com/omarluq"&gt;&lt;img src="https://github.com/omarluq.png" width="60px" alt="Omar Luq " /&gt;&lt;/a&gt;&lt;a href="https://github.com/ethanjli"&gt;&lt;img src="https://github.com/ethanjli.png" width="60px" alt="Ethan Li" /&gt;&lt;/a&gt;&lt;a href="https://github.com/phubaba"&gt;&lt;img src="https://github.com/phubaba.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/fomrat"&gt;&lt;img src="https://github.com/fomrat.png" width="60px" alt="Brian MacAskill" /&gt;&lt;/a&gt;&lt;a href="https://github.com/canhazcodez"&gt;&lt;img src="https://github.com/canhazcodez.png" width="60px" alt="Maxi" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nikbrunner"&gt;&lt;img src="https://github.com/nikbrunner.png" width="60px" alt="nbr" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neunkasulle"&gt;&lt;img src="https://github.com/neunkasulle.png" width="60px" alt="Jan Zenkner" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ahkohd"&gt;&lt;img src="https://github.com/ahkohd.png" width="60px" alt="Victor Aremu" /&gt;&lt;/a&gt;&lt;a href="https://github.com/RVxLab"&gt;&lt;img src="https://github.com/RVxLab.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/igor-ramazanov"&gt;&lt;img src="https://github.com/igor-ramazanov.png" width="60px" alt="Igor Ramazanov" /&gt;&lt;/a&gt;&lt;a href="https://github.com/glotchimo"&gt;&lt;img src="https://github.com/glotchimo.png" width="60px" alt="Elliott Maguire" /&gt;&lt;/a&gt;&lt;a href="https://github.com/n8nio"&gt;&lt;img src="https://github.com/n8nio.png" width="60px" alt="n8n - Workflow Automation" /&gt;&lt;/a&gt;&lt;a href="https://github.com/kaleballmon"&gt;&lt;img src="https://github.com/kaleballmon.png" width="60px" alt="kaleb allmon" /&gt;&lt;/a&gt;&lt;a href="https://github.com/joshuadavidthomas"&gt;&lt;img src="https://github.com/joshuadavidthomas.png" width="60px" alt="Josh Thomas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/josephjacks"&gt;&lt;img src="https://github.com/josephjacks.png" width="60px" alt="JJ" /&gt;&lt;/a&gt;&lt;a href="https://github.com/FrederickGeek8"&gt;&lt;img src="https://github.com/FrederickGeek8.png" width="60px" alt="Frederick Morlock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/agrippanux"&gt;&lt;img src="https://github.com/agrippanux.png" width="60px" alt="Darren Craine" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ezdac"&gt;&lt;img src="https://github.com/ezdac.png" width="60px" alt="Maximilian Langenfeld" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sarzhann"&gt;&lt;img src="https://github.com/sarzhann.png" width="60px" alt="Nurzhan" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dbuls"&gt;&lt;img src="https://github.com/dbuls.png" width="60px" alt="Davis Buls" /&gt;&lt;/a&gt;&lt;a href="https://github.com/MGreek"&gt;&lt;img src="https://github.com/MGreek.png" width="60px" alt="Grec Marc" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sainu"&gt;&lt;img src="https://github.com/sainu.png" width="60px" alt="sainu" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mguellsegarra"&gt;&lt;img src="https://github.com/mguellsegarra.png" width="60px" alt="Marc Güell Segarra" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lppassos"&gt;&lt;img src="https://github.com/lppassos.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/chrisolsen"&gt;&lt;img src="https://github.com/chrisolsen.png" width="60px" alt="Chris Olsen" /&gt;&lt;/a&gt;&lt;a href="https://github.com/vladimir-popov"&gt;&lt;img src="https://github.com/vladimir-popov.png" width="60px" alt="Vladimir Popov" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neilcode"&gt;&lt;img src="https://github.com/neilcode.png" width="60px" alt="Neil Lambert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/shaungarwood"&gt;&lt;img src="https://github.com/shaungarwood.png" width="60px" alt="Shaun Garwood" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dhh"&gt;&lt;img src="https://github.com/dhh.png" width="60px" alt="David Heinemeier Hansson" /&gt;&lt;/a&gt;&lt;a href="https://github.com/wayanjimmy"&gt;&lt;img src="https://github.com/wayanjimmy.png" width="60px" alt="Wayan jimmy" /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;h2&gt;Elevator Pitch&lt;/h2&gt; 
&lt;p&gt;Minor rant incoming: Something's not working? Maybe a service is down. &lt;code&gt;docker-compose ps&lt;/code&gt;. Yep, it's that microservice that's still buggy. No issue, I'll just restart it: &lt;code&gt;docker-compose restart&lt;/code&gt;. Okay now let's try again. Oh wait the issue is still there. Hmm. &lt;code&gt;docker-compose ps&lt;/code&gt;. Right so the service must have just stopped immediately after starting. I probably would have known that if I was reading the log stream, but there is a lot of clutter in there from other services. I could get the logs for just that one service with &lt;code&gt;docker compose logs --follow myservice&lt;/code&gt; but that dies everytime the service dies so I'd need to run that command every time I restart the service. I could alternatively run &lt;code&gt;docker-compose up myservice&lt;/code&gt; and in that terminal window if the service is down I could just &lt;code&gt;up&lt;/code&gt; it again, but now I've got one service hogging a terminal window even after I no longer care about its logs. I guess when I want to reclaim the terminal realestate I can do &lt;code&gt;ctrl+P,Q&lt;/code&gt;, but... wait, that's not working for some reason. Should I use ctrl+C instead? I can't remember if that closes the foreground process or kills the actual service.&lt;/p&gt; 
&lt;p&gt;What a headache!&lt;/p&gt; 
&lt;p&gt;Memorising docker commands is hard. Memorising aliases is slightly less hard. Keeping track of your containers across multiple terminal windows is near impossible. What if you had all the information you needed in one terminal window with every common command living one keypress away (and the ability to add custom commands as well). Lazydocker's goal is to make that dream a reality.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings"&gt;Keybindings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#cool-features"&gt;Cool Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/NICqQPxwJWw"&gt;Video Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md"&gt;Config Docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.twitch.tv/jesseduffield"&gt;Twitch Stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker &amp;gt;= &lt;strong&gt;1.13&lt;/strong&gt; (API &amp;gt;= &lt;strong&gt;1.25&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Docker-Compose &amp;gt;= &lt;strong&gt;1.23.2&lt;/strong&gt; (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;Normally &lt;code&gt;lazydocker&lt;/code&gt; formula can be found in the Homebrew core but we suggest you to tap our formula to get frequently updated one. It works with Linux, too.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tap&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install jesseduffield/lazydocker/lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Core&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href="https://scoop.sh/"&gt;scoop&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;scoop install lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;asdf-vm&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://github.com/comdotlinux/asdf-lazydocker"&gt;asdf-lazydocker plugin&lt;/a&gt; using &lt;a href="https://asdf-vm.com/"&gt;asdf-vm&lt;/a&gt;:&lt;/p&gt; 
&lt;h4&gt;Setup (Once)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;asdf plugin add lazydocker https://github.com/comdotlinux/asdf-lazydocker.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;For Install / Upgrade&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;asdf list all lazydocker
asdf install lazydocker latest
asdf global lazydocker latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Binary Release (Linux/OSX/Windows)&lt;/h3&gt; 
&lt;p&gt;You can manually download a binary release from &lt;a href="https://github.com/jesseduffield/lazydocker/releases"&gt;the release page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Automated install/update, don't forget to always verify what you're piping into bash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The script installs downloaded binary to &lt;code&gt;$HOME/.local/bin&lt;/code&gt; directory by default, but it can be changed by setting &lt;code&gt;DIR&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;h3&gt;Go&lt;/h3&gt; 
&lt;p&gt;Required Go Version &amp;gt;= &lt;strong&gt;1.19&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install github.com/jesseduffield/lazydocker@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Required Go version &amp;gt;= &lt;strong&gt;1.8&lt;/strong&gt;, &amp;lt;= &lt;strong&gt;1.17&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get github.com/jesseduffield/lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch Linux AUR&lt;/h3&gt; 
&lt;p&gt;You can install lazydocker using the &lt;a href="https://aur.archlinux.org/packages/lazydocker"&gt;AUR&lt;/a&gt; by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;yay -S lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://hub.docker.com/r/lazyteam/lazydocker"&gt;&lt;img src="https://img.shields.io/docker/pulls/lazyteam/lazydocker.svg?sanitize=true" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/lazyteam/lazydocker"&gt;&lt;img src="https://img.shields.io/docker/stars/lazyteam/lazydocker.svg?sanitize=true" alt="Docker Stars" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/lazyteam/lazydocker"&gt;&lt;img src="https://img.shields.io/docker/cloud/automated/lazyteam/lazydocker.svg?sanitize=true" alt="Docker Automated" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;details&gt;
   &lt;summary&gt;Click if you have an ARM device&lt;/summary&gt;
   &lt;p&gt; &lt;/p&gt;
   &lt;ul&gt; 
    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v6 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t lazyteam/lazydocker \
--build-arg BASE_IMAGE_BUILDER=arm32v6/golang \
--build-arg GOARCH=arm \
--build-arg GOARM=6 \
https://github.com/jesseduffield/lazydocker.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v7 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t lazyteam/lazydocker \
--build-arg BASE_IMAGE_BUILDER=arm32v7/golang \
--build-arg GOARCH=arm \
--build-arg GOARM=7 \
https://github.com/jesseduffield/lazydocker.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;li&gt; &lt;p&gt;If you have a ARM 64 bit v8 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t lazyteam/lazydocker \
--build-arg BASE_IMAGE_BUILDER=arm64v8/golang \
--build-arg GOARCH=arm64 \
https://github.com/jesseduffield/lazydocker.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p&gt;&lt;/p&gt;
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the container&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v \
/var/run/docker.sock:/var/run/docker.sock \
-v /yourpath:/.config/jesseduffield/lazydocker \
lazyteam/lazydocker
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Don't forget to change &lt;code&gt;/yourpath&lt;/code&gt; to an actual path you created to store lazydocker's config&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use this &lt;a href="https://github.com/jesseduffield/lazydocker/raw/master/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You might want to create an alias, for example:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;echo "alias lzd='docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v /yourpath/config:/.config/jesseduffield/lazydocker lazyteam/lazydocker'" &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For development, you can build the image using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/jesseduffield/lazydocker.git
cd lazydocker
docker build -t lazyteam/lazydocker \
    --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
    --build-arg VCS_REF=`git rev-parse --short HEAD` \
    --build-arg VERSION=`git describe --abbrev=0 --tag` \
    .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you encounter a compatibility issue with Docker bundled binary, try rebuilding the image with the build argument &lt;code&gt;--build-arg DOCKER_VERSION="v$(docker -v | cut -d" " -f3 | rev | cut -c 2- | rev)"&lt;/code&gt; so that the bundled docker binary matches your host docker binary version.&lt;/p&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You'll need to &lt;a href="https://golang.org/doc/install"&gt;install Go&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/jesseduffield/lazydocker.git
cd lazydocker
go install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;go run main.go&lt;/code&gt; to compile and run in one go (pun definitely intended)&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Call &lt;code&gt;lazydocker&lt;/code&gt; in your terminal. I personally use this a lot so I've made an alias for it like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo "alias lzd='lazydocker'" &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(you can substitute .zshrc for whatever rc file you're using)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic video tutorial &lt;a href="https://youtu.be/NICqQPxwJWw"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;List of keybindings &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings"&gt;here&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Cool features&lt;/h2&gt; 
&lt;p&gt;everything is one keypress away (or one click away! Mouse support FTW):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;viewing the state of your docker or docker-compose container environment at a glance&lt;/li&gt; 
 &lt;li&gt;viewing logs for a container/service&lt;/li&gt; 
 &lt;li&gt;viewing ascii graphs of your containers' metrics so that you can not only feel but also look like a developer&lt;/li&gt; 
 &lt;li&gt;customising those graphs to measure nearly any metric you want&lt;/li&gt; 
 &lt;li&gt;attaching to a container/service&lt;/li&gt; 
 &lt;li&gt;restarting/removing/rebuilding containers/services&lt;/li&gt; 
 &lt;li&gt;viewing the ancestor layers of a given image&lt;/li&gt; 
 &lt;li&gt;pruning containers, images, or volumes that are hogging up disk space&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;There is still a lot of work to go! Please check out the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;. For contributor discussion about things not better discussed here in the repo, join the discord channel&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/ehwFt2t4wt"&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/discord.png" width="75" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you would like to support the development of lazydocker, consider &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsoring me&lt;/a&gt; (github is matching all donations dollar-for-dollar for 12 months)&lt;/p&gt; 
&lt;h2&gt;Social&lt;/h2&gt; 
&lt;p&gt;If you want to see what I (Jesse) am up to in terms of development, follow me on &lt;a href="https://twitter.com/DuffieldJesse"&gt;twitter&lt;/a&gt; or watch me program on &lt;a href="https://www.twitch.tv/jesseduffield"&gt;twitch&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;How do I edit my config?&lt;/h3&gt; 
&lt;p&gt;By opening lazydocker, clicking on the 'project' panel in the top left, and pressing 'o' (or 'e' if your editor is vim). See &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md"&gt;Config Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do I get text to wrap in my main panel?&lt;/h3&gt; 
&lt;p&gt;In the future I want to make this the default, but for now there are some CPU issues that arise with wrapping. If you want to enable wrapping, use &lt;code&gt;gui.wrapMainPanel: true&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;How do you select text?&lt;/h3&gt; 
&lt;p&gt;Because we support mouse events, you will need to hold option while dragging the mouse to indicate you're trying to select text rather than click on something. Alternatively you can disable mouse events via the &lt;code&gt;gui.ignoreMouseEvents&lt;/code&gt; config value.&lt;/p&gt; 
&lt;p&gt;Mac Users: See &lt;a href="https://github.com/jesseduffield/lazydocker/issues/190"&gt;Issue #190&lt;/a&gt; for other options.&lt;/p&gt; 
&lt;h3&gt;Why can't I see my container's logs?&lt;/h3&gt; 
&lt;p&gt;By default we only show logs from the last hour, so that we're not putting too much strain on the machine. This may be why you can't see logs when you first start lazydocker. This can be overwritten in the config's &lt;code&gt;commandTemplates&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;If you are running lazydocker in Docker container, it is a know bug, that you can't see logs or CPU usage.&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/skanehira/docui"&gt;docui&lt;/a&gt; - Skanehira beat me to the punch on making a docker terminal UI, so definitely check out that repo as well! I think the two repos can live in harmony though: lazydocker is more about managing existing containers/services, and docui is more about creating and configuring them.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/portainer/portainer"&gt;Portainer&lt;/a&gt; - Portainer tries to solve the same problem but it's accessed via your browser rather than your terminal. It also supports docker swarm.&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://github.com/veggiemonk/awesome-docker/raw/master/README.md#terminal"&gt;Awesome Docker list&lt;/a&gt; for similar tools to work with Docker.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jackc/pgx</title>
      <link>https://github.com/jackc/pgx</link>
      <description>&lt;p&gt;PostgreSQL driver and toolkit for Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/jackc/pgx/v5"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/jackc/pgx/v5.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jackc/pgx/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/jackc/pgx/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;pgx - PostgreSQL Driver and Toolkit&lt;/h1&gt; 
&lt;p&gt;pgx is a pure Go driver and toolkit for PostgreSQL.&lt;/p&gt; 
&lt;p&gt;The pgx driver is a low-level, high performance interface that exposes PostgreSQL-specific features such as &lt;code&gt;LISTEN&lt;/code&gt; / &lt;code&gt;NOTIFY&lt;/code&gt; and &lt;code&gt;COPY&lt;/code&gt;. It also includes an adapter for the standard &lt;code&gt;database/sql&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;The toolkit component is a related set of packages that implement PostgreSQL functionality such as parsing the wire protocol and type mapping between PostgreSQL and Go. These underlying packages can be used to implement alternative drivers, proxies, load balancers, logical replication clients, etc.&lt;/p&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"
	"os"

	"github.com/jackc/pgx/v5"
)

func main() {
	// urlExample := "postgres://username:password@localhost:5432/database_name"
	conn, err := pgx.Connect(context.Background(), os.Getenv("DATABASE_URL"))
	if err != nil {
		fmt.Fprintf(os.Stderr, "Unable to connect to database: %v\n", err)
		os.Exit(1)
	}
	defer conn.Close(context.Background())

	var name string
	var weight int64
	err = conn.QueryRow(context.Background(), "select name, weight from widgets where id=$1", 42).Scan(&amp;amp;name, &amp;amp;weight)
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		os.Exit(1)
	}

	fmt.Println(name, weight)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/jackc/pgx/wiki/Getting-started-with-pgx"&gt;getting started guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for approximately 70 different PostgreSQL types&lt;/li&gt; 
 &lt;li&gt;Automatic statement preparation and caching&lt;/li&gt; 
 &lt;li&gt;Batch queries&lt;/li&gt; 
 &lt;li&gt;Single-round trip query mode&lt;/li&gt; 
 &lt;li&gt;Full TLS connection control&lt;/li&gt; 
 &lt;li&gt;Binary format support for custom types (allows for much quicker encoding/decoding)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;COPY&lt;/code&gt; protocol support for faster bulk data loads&lt;/li&gt; 
 &lt;li&gt;Tracing and logging support&lt;/li&gt; 
 &lt;li&gt;Connection pool with after-connect hook for arbitrary connection setup&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;LISTEN&lt;/code&gt; / &lt;code&gt;NOTIFY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Conversion of PostgreSQL arrays to Go slice mappings for integers, floats, and strings&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hstore&lt;/code&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;json&lt;/code&gt; and &lt;code&gt;jsonb&lt;/code&gt; support&lt;/li&gt; 
 &lt;li&gt;Maps &lt;code&gt;inet&lt;/code&gt; and &lt;code&gt;cidr&lt;/code&gt; PostgreSQL types to &lt;code&gt;netip.Addr&lt;/code&gt; and &lt;code&gt;netip.Prefix&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Large object support&lt;/li&gt; 
 &lt;li&gt;NULL mapping to pointer to pointer&lt;/li&gt; 
 &lt;li&gt;Supports &lt;code&gt;database/sql.Scanner&lt;/code&gt; and &lt;code&gt;database/sql/driver.Valuer&lt;/code&gt; interfaces for custom types&lt;/li&gt; 
 &lt;li&gt;Notice response handling&lt;/li&gt; 
 &lt;li&gt;Simulated nested transactions with savepoints&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Choosing Between the pgx and database/sql Interfaces&lt;/h2&gt; 
&lt;p&gt;The pgx interface is faster. Many PostgreSQL specific features such as &lt;code&gt;LISTEN&lt;/code&gt; / &lt;code&gt;NOTIFY&lt;/code&gt; and &lt;code&gt;COPY&lt;/code&gt; are not available through the &lt;code&gt;database/sql&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;The pgx interface is recommended when:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The application only targets PostgreSQL.&lt;/li&gt; 
 &lt;li&gt;No other libraries that require &lt;code&gt;database/sql&lt;/code&gt; are in use.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;It is also possible to use the &lt;code&gt;database/sql&lt;/code&gt; interface and convert a connection to the lower-level pgx interface as needed.&lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/jackc/pgx/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for setup instructions.&lt;/p&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;See the presentation at Golang Estonia, &lt;a href="https://www.youtube.com/watch?v=sXMSWhcHCf8"&gt;PGX Top to Bottom&lt;/a&gt; for a description of pgx architecture.&lt;/p&gt; 
&lt;h2&gt;Supported Go and PostgreSQL Versions&lt;/h2&gt; 
&lt;p&gt;pgx supports the same versions of Go and PostgreSQL that are supported by their respective teams. For &lt;a href="https://golang.org/doc/devel/release.html#policy"&gt;Go&lt;/a&gt; that is the two most recent major releases and for &lt;a href="https://www.postgresql.org/support/versioning/"&gt;PostgreSQL&lt;/a&gt; the major releases in the last 5 years. This means pgx supports Go 1.24 and higher and PostgreSQL 13 and higher. pgx also is tested against the latest version of &lt;a href="https://www.cockroachlabs.com/product/"&gt;CockroachDB&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Version Policy&lt;/h2&gt; 
&lt;p&gt;pgx follows semantic versioning for the documented public API on stable releases. &lt;code&gt;v5&lt;/code&gt; is the latest stable major version.&lt;/p&gt; 
&lt;h2&gt;PGX Family Libraries&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://github.com/jackc/pglogrepl"&gt;github.com/jackc/pglogrepl&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;pglogrepl provides functionality to act as a client for PostgreSQL logical replication.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/jackc/pgmock"&gt;github.com/jackc/pgmock&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;pgmock offers the ability to create a server that mocks the PostgreSQL wire protocol. This is used internally to test pgx by purposely inducing unusual errors. pgproto3 and pgmock together provide most of the foundational tooling required to implement a PostgreSQL proxy or MitM (such as for a custom connection pooler).&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/jackc/tern"&gt;github.com/jackc/tern&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;tern is a stand-alone SQL migration system.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/jackc/pgerrcode"&gt;github.com/jackc/pgerrcode&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;pgerrcode contains constants for the PostgreSQL error codes.&lt;/p&gt; 
&lt;h2&gt;Adapters for 3rd Party Types&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jackc/pgx-gofrs-uuid"&gt;github.com/jackc/pgx-gofrs-uuid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jackc/pgx-shopspring-decimal"&gt;github.com/jackc/pgx-shopspring-decimal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/twpayne/pgx-geos"&gt;github.com/twpayne/pgx-geos&lt;/a&gt; (&lt;a href="https://postgis.net/"&gt;PostGIS&lt;/a&gt; and &lt;a href="https://libgeos.org/"&gt;GEOS&lt;/a&gt; via &lt;a href="https://github.com/twpayne/go-geos"&gt;go-geos&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vgarvardt/pgx-google-uuid"&gt;github.com/vgarvardt/pgx-google-uuid&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Adapters for 3rd Party Tracers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jackhopner/pgx-xray-tracer"&gt;github.com/jackhopner/pgx-xray-tracer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/exaring/otelpgx"&gt;github.com/exaring/otelpgx&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Adapters for 3rd Party Loggers&lt;/h2&gt; 
&lt;p&gt;These adapters can be used with the tracelog package.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jackc/pgx-go-kit-log"&gt;github.com/jackc/pgx-go-kit-log&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jackc/pgx-log15"&gt;github.com/jackc/pgx-log15&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jackc/pgx-logrus"&gt;github.com/jackc/pgx-logrus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jackc/pgx-zap"&gt;github.com/jackc/pgx-zap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jackc/pgx-zerolog"&gt;github.com/jackc/pgx-zerolog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mcosta74/pgx-slog"&gt;github.com/mcosta74/pgx-slog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kataras/pgx-golog"&gt;github.com/kataras/pgx-golog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;3rd Party Libraries with PGX Support&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://github.com/pashagolub/pgxmock"&gt;github.com/pashagolub/pgxmock&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;pgxmock is a mock library implementing pgx interfaces. pgxmock has one and only purpose - to simulate pgx behavior in tests, without needing a real database connection.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/georgysavva/scany"&gt;github.com/georgysavva/scany&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Library for scanning data from a database into Go structs and more.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/vingarcia/ksql"&gt;github.com/vingarcia/ksql&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A carefully designed SQL client for making using SQL easier, more productive, and less error-prone on Golang.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/otan/gopgkrb5"&gt;github.com/otan/gopgkrb5&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Adds GSSAPI / Kerberos authentication support.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/wcamarao/pmx"&gt;github.com/wcamarao/pmx&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Explicit data mapping and scanning library for Go structs and slices.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/stephenafamo/scan"&gt;github.com/stephenafamo/scan&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Type safe and flexible package for scanning database data into Go types. Supports, structs, maps, slices and custom mapping functions.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/z0ne-dev/mgx"&gt;github.com/z0ne-dev/mgx&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Code first migration library for native pgx (no database/sql abstraction).&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/amirsalarsafaei/sqlc-pgx-monitoring"&gt;github.com/amirsalarsafaei/sqlc-pgx-monitoring&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A database monitoring/metrics library for pgx and sqlc. Trace, log and monitor your sqlc query performance using OpenTelemetry.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/nikolayk812/pgx-outbox"&gt;https://github.com/nikolayk812/pgx-outbox&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Simple Golang implementation for transactional outbox pattern for PostgreSQL using jackc/pgx driver.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/Arlandaren/pgxWrappy"&gt;https://github.com/Arlandaren/pgxWrappy&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Simplifies working with the pgx library, providing convenient scanning of nested structures.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/KoNekoD/pgx-colon-query-rewriter"&gt;https://github.com/KoNekoD/pgx-colon-query-rewriter&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Implementation of the pgx query rewriter to use ':' instead of '@' in named query parameters.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>quic-go/quic-go</title>
      <link>https://github.com/quic-go/quic-go</link>
      <description>&lt;p&gt;A production-ready QUIC implementation in pure Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A QUIC implementation in pure Go&lt;/h1&gt; 
&lt;img src="https://raw.githubusercontent.com/quic-go/quic-go/master/docs/quic.png" width="303" height="124" /&gt; 
&lt;p&gt;&lt;a href="https://quic-go.net/docs/"&gt;&lt;img src="https://img.shields.io/badge/docs-quic--go.net-red?style=flat" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/quic-go/quic-go"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/quic-go/quic-go" alt="PkgGoDev" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/quic-go/quic-go/"&gt;&lt;img src="https://img.shields.io/codecov/c/github/quic-go/quic-go/master.svg?style=flat-square" alt="Code Coverage" /&gt;&lt;/a&gt; &lt;a href="https://issues.oss-fuzz.com/issues?q=quic-go"&gt;&lt;img src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/quic-go.svg?sanitize=true" alt="Fuzzing Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;quic-go is an implementation of the QUIC protocol (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9000"&gt;RFC 9000&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc9001"&gt;RFC 9001&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc9002"&gt;RFC 9002&lt;/a&gt;) in Go. It has support for HTTP/3 (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9114"&gt;RFC 9114&lt;/a&gt;), including QPACK (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9204"&gt;RFC 9204&lt;/a&gt;) and HTTP Datagrams (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9297"&gt;RFC 9297&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;In addition to these base RFCs, it also implements the following RFCs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unreliable Datagram Extension (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9221"&gt;RFC 9221&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Datagram Packetization Layer Path MTU Discovery (DPLPMTUD, &lt;a href="https://datatracker.ietf.org/doc/html/rfc8899"&gt;RFC 8899&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;QUIC Version 2 (&lt;a href="https://datatracker.ietf.org/doc/html/rfc9369"&gt;RFC 9369&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;QUIC Event Logging using qlog (&lt;a href="https://datatracker.ietf.org/doc/draft-ietf-quic-qlog-main-schema/"&gt;draft-ietf-quic-qlog-main-schema&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/draft-ietf-quic-qlog-quic-events/"&gt;draft-ietf-quic-qlog-quic-events&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;QUIC Stream Resets with Partial Delivery (&lt;a href="https://datatracker.ietf.org/doc/html/draft-ietf-quic-reliable-stream-reset-07"&gt;draft-ietf-quic-reliable-stream-reset&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Support for WebTransport over HTTP/3 (&lt;a href="https://datatracker.ietf.org/doc/draft-ietf-webtrans-http3/"&gt;draft-ietf-webtrans-http3&lt;/a&gt;) is implemented in &lt;a href="https://github.com/quic-go/webtransport-go"&gt;webtransport-go&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Detailed documentation can be found on &lt;a href="https://quic-go.net/docs/"&gt;quic-go.net&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Projects using quic-go&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Project&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Stars&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/AdguardTeam/AdGuardHome"&gt;AdGuardHome&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Free and open source, powerful network-wide ads &amp;amp; trackers blocking DNS server.&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/AdguardTeam/AdGuardHome?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/xyproto/algernon"&gt;algernon&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Small self-contained pure-Go web server with Lua, Markdown, HTTP/2, QUIC, Redis and PostgreSQL support&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/xyproto/algernon?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/caddyserver/caddy/"&gt;caddy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Fast, multi-platform web server with automatic HTTPS&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/caddyserver/caddy?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/cloudflare/cloudflared"&gt;cloudflared&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A tunneling daemon that proxies traffic from the Cloudflare network to your origins&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/cloudflare/cloudflared?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/fatedier/frp"&gt;frp&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/fatedier/frp?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/libp2p/go-libp2p"&gt;go-libp2p&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;libp2p implementation in Go, powering &lt;a href="https://github.com/ipfs/kubo"&gt;Kubo&lt;/a&gt; (IPFS) and &lt;a href="https://github.com/filecoin-project/lotus"&gt;Lotus&lt;/a&gt; (Filecoin), among others&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/libp2p/go-libp2p?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/go-gost/gost"&gt;gost&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A simple security tunnel written in Go&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/go-gost/gost?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/apernet/hysteria"&gt;Hysteria&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A powerful, lightning fast and censorship resistant proxy&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/apernet/hysteria?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/dunglas/mercure"&gt;Mercure&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;An open, easy, fast, reliable and battery-efficient solution for real-time communications&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/dunglas/mercure?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ooni/probe-cli"&gt;OONI Probe&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Next generation OONI Probe. Library and CLI tool.&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/ooni/probe-cli?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/flipt-io/reverst"&gt;reverst&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Reverse Tunnels in Go over HTTP/3 and QUIC&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/flipt-io/reverst?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/roadrunner-server/roadrunner"&gt;RoadRunner&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;High-performance PHP application server, process manager written in Go and powered with plugins&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/roadrunner-server/roadrunner?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/syncthing/syncthing/"&gt;syncthing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open Source Continuous File Synchronization&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/syncthing/syncthing?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/traefik/traefik"&gt;traefik&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The Cloud Native Application Proxy&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/traefik/traefik?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/v2fly/v2ray-core"&gt;v2ray-core&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A platform for building proxies to bypass network restrictions&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/v2fly/v2ray-core?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/yomorun/yomo"&gt;YoMo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Streaming Serverless Framework for Geo-distributed System&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/github/stars/yomorun/yomo?style=flat-square" alt="GitHub Repo stars" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;If you'd like to see your project added to this list, please send us a PR.&lt;/p&gt; 
&lt;h2&gt;Release Policy&lt;/h2&gt; 
&lt;p&gt;quic-go always aims to support the latest two Go releases.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are always happy to welcome new contributors! We have a number of self-contained issues that are suitable for first-time contributors, they are tagged with &lt;a href="https://github.com/quic-go/quic-go/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;. If you have any questions, please feel free to reach out by opening an issue or leaving a comment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>samber/lo</title>
      <link>https://github.com/samber/lo</link>
      <description>&lt;p&gt;💥 A Lodash-style Go library based on Go 1.18+ Generics (map, filter, contains, find...)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lo - Iterate over slices, maps, channels...&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/samber/lo/releases"&gt;&lt;img src="https://img.shields.io/github/tag/samber/lo.svg?sanitize=true" alt="tag" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/Go-%3E%3D%201.18-%23007d9c" alt="Go Version" /&gt; &lt;a href="https://pkg.go.dev/github.com/samber/lo"&gt;&lt;img src="https://godoc.org/github.com/samber/lo?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;img src="https://github.com/samber/lo/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt; &lt;a href="https://goreportcard.com/report/github.com/samber/lo"&gt;&lt;img src="https://goreportcard.com/badge/github.com/samber/lo" alt="Go report" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/samber/lo"&gt;&lt;img src="https://img.shields.io/codecov/c/github/samber/lo" alt="Coverage" /&gt;&lt;/a&gt; &lt;a href="https://github.com/samber/lo/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/samber/lo" alt="Contributors" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/samber/lo/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/samber/lo" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;✨ &lt;strong&gt;&lt;code&gt;samber/lo&lt;/code&gt; is a Lodash-style Go library based on Go 1.18+ Generics.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A utility library based on Go 1.18+ generics that makes it easier to work with slices, maps, strings, channels, and functions. It provides dozens of handy methods to simplify common coding tasks and improve code readability. It may look like &lt;a href="https://github.com/lodash/lodash"&gt;Lodash&lt;/a&gt; in some aspects.&lt;/p&gt; 
&lt;p&gt;5 to 10 helpers may overlap with those from the Go standard library, in packages &lt;code&gt;slices&lt;/code&gt; and &lt;code&gt;maps&lt;/code&gt;. I feel this library is legitimate and offers many more valuable abstractions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samber/ro"&gt;samber/ro&lt;/a&gt;: Reactive Programming for Go: declarative and composable API for event-driven applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samber/do"&gt;samber/do&lt;/a&gt;: A dependency injection toolkit based on Go 1.18+ Generics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samber/mo"&gt;samber/mo&lt;/a&gt;: Monads based on Go 1.18+ Generics (Option, Result, Either...)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;samber/lo&lt;/code&gt; vs &lt;code&gt;samber/ro&lt;/code&gt; ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Both libraries have &lt;code&gt;Map()&lt;/code&gt;, &lt;code&gt;Filter()&lt;/code&gt;... helpers. How are they different?&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;samber/lo&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;samber/ro&lt;/code&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;loop over in-memory objects&lt;/td&gt; 
   &lt;td&gt;manipulate event driven objects, produced asynchronously&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Data structure&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;slices, maps, iterator...&lt;/td&gt; 
   &lt;td&gt;stream, observables, observers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;synchronous&lt;/td&gt; 
   &lt;td&gt;asynchronous&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;finite sequence&lt;/td&gt; 
   &lt;td&gt;infinite stream&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Flow control&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;pull-based (iterators)&lt;/td&gt; 
   &lt;td&gt;push-based&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;code&gt;lo&lt;/code&gt; is a bunch of helpers for looping across finite sequences (maps, slices...)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ro&lt;/code&gt; is focused on processing of infinite data streams in event-driven applications.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3 align="center"&gt;💖 Support This Project&lt;/h3&gt; 
&lt;p align="center"&gt; I’m going all-in on open-source for the coming months. &lt;br /&gt; Help sustain development: Become an &lt;a href="http://github.com/sponsors/samber"&gt;individual sponsor&lt;/a&gt; or join as a &lt;a href="mailto:hey@samuel-berthe.fr"&gt;corporate sponsor&lt;/a&gt;. &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Why this name?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;I wanted a &lt;strong&gt;short name&lt;/strong&gt;, similar to "Lodash", and no Go package uses this name.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/samber/lo/master/img/logo-full.png" alt="lo" /&gt;&lt;/p&gt; 
&lt;h2&gt;🚀 Install&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get github.com/samber/lo@v1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This library is v1 and follows SemVer strictly.&lt;/p&gt; 
&lt;p&gt;No breaking changes will be made to exported APIs before v2.0.0.&lt;/p&gt; 
&lt;p&gt;This library has no dependencies outside the Go standard library.&lt;/p&gt; 
&lt;h2&gt;💡 Usage&lt;/h2&gt; 
&lt;p&gt;You can import &lt;code&gt;lo&lt;/code&gt; using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    "github.com/samber/lo"
    lop "github.com/samber/lo/parallel"
    lom "github.com/samber/lo/mutable"
    loi "github.com/samber/lo/it"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then use one of the helpers below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;names := lo.Uniq([]string{"Samuel", "John", "Samuel"})
// []string{"Samuel", "John"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Tips for lazy developers&lt;/h3&gt; 
&lt;p&gt;I cannot recommend it, but in case you are too lazy for repeating &lt;code&gt;lo.&lt;/code&gt; everywhere, you can import the entire library into the namespace.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    . "github.com/samber/lo"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I take no responsibility for this junk. 😁 💩&lt;/p&gt; 
&lt;h2&gt;🤠 Spec&lt;/h2&gt; 
&lt;p&gt;GoDoc: &lt;a href="https://godoc.org/github.com/samber/lo"&gt;godoc.org/github.com/samber/lo&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Documentation: &lt;a href="https://lo.samber.dev/docs/about"&gt;lo.samber.dev&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Supported helpers for slices:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filter"&gt;Filter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#map"&gt;Map&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqmap"&gt;UniqMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filtermap"&gt;FilterMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#flatmap"&gt;FlatMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reduce"&gt;Reduce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reduceright"&gt;ReduceRight&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#foreach"&gt;ForEach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#foreachwhile"&gt;ForEachWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#times"&gt;Times&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniq"&gt;Uniq&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqby"&gt;UniqBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#groupby"&gt;GroupBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#groupbymap"&gt;GroupByMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#chunk"&gt;Chunk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#partitionby"&gt;PartitionBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#flatten"&gt;Flatten&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#interleave"&gt;Interleave&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#shuffle"&gt;Shuffle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reverse"&gt;Reverse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fill"&gt;Fill&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#repeat"&gt;Repeat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#repeatby"&gt;RepeatBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#keyby"&gt;KeyBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#slicetomap-alias-associate"&gt;SliceToMap / Associate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filterslicetomap"&gt;FilterSliceToMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#keyify"&gt;Keyify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#drop"&gt;Drop&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#dropright"&gt;DropRight&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#dropwhile"&gt;DropWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#droprightwhile"&gt;DropRightWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#DropByIndex"&gt;DropByIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reject"&gt;Reject&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#rejectmap"&gt;RejectMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filterreject"&gt;FilterReject&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#count"&gt;Count&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#countby"&gt;CountBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#countvalues"&gt;CountValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#countvaluesby"&gt;CountValuesBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#subset"&gt;Subset&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#slice"&gt;Slice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#replace"&gt;Replace&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#replaceall"&gt;ReplaceAll&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#compact"&gt;Compact&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#issorted"&gt;IsSorted&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#issortedbykey"&gt;IsSortedByKey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#Splice"&gt;Splice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#Cut"&gt;Cut&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#CutPrefix"&gt;CutPrefix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#CutSuffix"&gt;CutSuffix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#Trim"&gt;Trim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#TrimLeft"&gt;TrimLeft&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#TrimPrefix"&gt;TrimPrefix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#TrimRight"&gt;TrimRight&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#TrimSuffix"&gt;TrimSuffix&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for maps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#keys"&gt;Keys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqkeys"&gt;UniqKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#haskey"&gt;HasKey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#valueor"&gt;ValueOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#values"&gt;Values&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqvalues"&gt;UniqValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pickby"&gt;PickBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pickbykeys"&gt;PickByKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pickbyvalues"&gt;PickByValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#omitby"&gt;OmitBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#omitbykeys"&gt;OmitByKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#omitbyvalues"&gt;OmitByValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#entries-alias-topairs"&gt;Entries / ToPairs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromentries-alias-frompairs"&gt;FromEntries / FromPairs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#invert"&gt;Invert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#assign"&gt;Assign (merge of maps)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#chunkentries"&gt;ChunkEntries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mapkeys"&gt;MapKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mapvalues"&gt;MapValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mapentries"&gt;MapEntries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maptoslice"&gt;MapToSlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FilterMapToSlice"&gt;FilterMapToSlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FilterKeys"&gt;FilterKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FilterValues"&gt;FilterValues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported math helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#range--rangefrom--rangewithsteps"&gt;Range / RangeFrom / RangeWithSteps&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#clamp"&gt;Clamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sum"&gt;Sum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sumby"&gt;SumBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#product"&gt;Product&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#productby"&gt;ProductBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mean"&gt;Mean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#meanby"&gt;MeanBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mode"&gt;Mode&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for strings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#randomstring"&gt;RandomString&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#substring"&gt;Substring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#chunkstring"&gt;ChunkString&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#runelength"&gt;RuneLength&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pascalcase"&gt;PascalCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#camelcase"&gt;CamelCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#kebabcase"&gt;KebabCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#snakecase"&gt;SnakeCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#words"&gt;Words&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#capitalize"&gt;Capitalize&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ellipsis"&gt;Ellipsis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for tuples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#t2---t9"&gt;T2 -&amp;gt; T9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#unpack2---unpack9"&gt;Unpack2 -&amp;gt; Unpack9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#zip2---zip9"&gt;Zip2 -&amp;gt; Zip9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#zipby2---zipby9"&gt;ZipBy2 -&amp;gt; ZipBy9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#unzip2---unzip9"&gt;Unzip2 -&amp;gt; Unzip9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#unzipby2---unzipby9"&gt;UnzipBy2 -&amp;gt; UnzipBy9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#crossjoin2---crossjoin9"&gt;CrossJoin2 -&amp;gt; CrossJoin2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#crossjoinby2---crossjoinby9"&gt;CrossJoinBy2 -&amp;gt; CrossJoinBy2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for time and duration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#duration"&gt;Duration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#duration0---duration10"&gt;Duration0 -&amp;gt; Duration10&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#channeldispatcher"&gt;ChannelDispatcher&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#slicetochannel"&gt;SliceToChannel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#channeltoslice"&gt;ChannelToSlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#generator"&gt;Generator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#buffer"&gt;Buffer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#bufferwithcontext"&gt;BufferWithContext&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#bufferwithtimeout"&gt;BufferWithTimeout&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fanin"&gt;FanIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fanout"&gt;FanOut&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported intersection helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#contains"&gt;Contains&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#containsby"&gt;ContainsBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#every"&gt;Every&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#everyby"&gt;EveryBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#some"&gt;Some&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#someby"&gt;SomeBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#none"&gt;None&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#noneby"&gt;NoneBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#intersect"&gt;Intersect&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#difference"&gt;Difference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#union"&gt;Union&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#without"&gt;Without&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#withoutby"&gt;WithoutBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#withoutempty"&gt;WithoutEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#withoutnth"&gt;WithoutNth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ElementsMatch"&gt;ElementsMatch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ElementsMatchBy"&gt;ElementsMatchBy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported search helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#indexof"&gt;IndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#lastindexof"&gt;LastIndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#hasprefix"&gt;HasPrefix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#hassuffix"&gt;HasSuffix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#find"&gt;Find&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findindexof"&gt;FindIndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findlastindexof"&gt;FindLastIndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findorelse"&gt;FindOrElse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findkey"&gt;FindKey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findkeyby"&gt;FindKeyBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#finduniques"&gt;FindUniques&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#finduniquesby"&gt;FindUniquesBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findduplicates"&gt;FindDuplicates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findduplicatesby"&gt;FindDuplicatesBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#min"&gt;Min&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#minindex"&gt;MinIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#minby"&gt;MinBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#minindexby"&gt;MinIndexBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#earliest"&gt;Earliest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#earliestby"&gt;EarliestBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#max"&gt;Max&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maxindex"&gt;MaxIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maxby"&gt;MaxBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maxindexby"&gt;MaxIndexBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#latest"&gt;Latest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#latestby"&gt;LatestBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#first"&gt;First&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FirstOrEmpty"&gt;FirstOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FirstOr"&gt;FirstOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#last"&gt;Last&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#LastOrEmpty"&gt;LastOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#LastOr"&gt;LastOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nth"&gt;Nth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nthor"&gt;NthOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nthorempty"&gt;NthOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sample"&gt;Sample&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sampleby"&gt;SampleBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#samples"&gt;Samples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#samplesby"&gt;SamplesBy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Conditional helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ternary"&gt;Ternary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ternaryf"&gt;TernaryF&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#if--elseif--else"&gt;If / ElseIf / Else&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#switch--case--default"&gt;Switch / Case / Default&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Type manipulation helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isnil"&gt;IsNil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isnotnil"&gt;IsNotNil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#toptr"&gt;ToPtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nil"&gt;Nil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#emptyabletoptr"&gt;EmptyableToPtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromptr"&gt;FromPtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromptror"&gt;FromPtrOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#tosliceptr"&gt;ToSlicePtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromsliceptr"&gt;FromSlicePtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromsliceptror"&gt;FromSlicePtrOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#toanyslice"&gt;ToAnySlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromanyslice"&gt;FromAnySlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#empty"&gt;Empty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isempty"&gt;IsEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isnotempty"&gt;IsNotEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalesce"&gt;Coalesce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalesceorempty"&gt;CoalesceOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalesceslice"&gt;CoalesceSlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalescesliceorempty"&gt;CoalesceSliceOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalescemap"&gt;CoalesceMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalescemaporempty"&gt;CoalesceMapOrEmpty&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Function helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#partial"&gt;Partial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#partial2---partial5"&gt;Partial2 -&amp;gt; Partial5&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Concurrency helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attempt"&gt;Attempt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attemptwhile"&gt;AttemptWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attemptwithdelay"&gt;AttemptWithDelay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attemptwhilewithdelay"&gt;AttemptWhileWithDelay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#debounce"&gt;Debounce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#debounceby"&gt;DebounceBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;Throttle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;ThrottleWithCount&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;ThrottleBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;ThrottleByWithCount&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#synchronize"&gt;Synchronize&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#async"&gt;Async&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#async0-6"&gt;Async{0-&amp;gt;6}&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#transaction"&gt;Transaction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#waitfor"&gt;WaitFor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#waitforwithcontext"&gt;WaitForWithContext&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Error handling:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#validate"&gt;Validate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#must"&gt;Must&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#try"&gt;Try&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#try0-6"&gt;Try1 -&amp;gt; Try6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#tryor"&gt;TryOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#tryor0-6"&gt;TryOr1 -&amp;gt; TryOr6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#trycatch"&gt;TryCatch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#trywitherrorvalue"&gt;TryWithErrorValue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#trycatchwitherrorvalue"&gt;TryCatchWithErrorValue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#errorsas"&gt;ErrorsAs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#assert"&gt;Assert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#assertf"&gt;Assertf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Constraints:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clonable&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Filter&lt;/h3&gt; 
&lt;p&gt;Iterates over a collection and returns a slice of all the elements the predicate function returns &lt;code&gt;true&lt;/code&gt; for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;even := lo.Filter([]int{1, 2, 3, 4}, func(x int, index int) bool {
    return x%2 == 0
})
// []int{2, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Apjg3WeSi7K"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Mutable: like &lt;code&gt;lo.Filter()&lt;/code&gt;, but the slice is updated in place.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{1, 2, 3, 4}
newList := lom.Filter(list, func(x int) bool {
    return x%2 == 0
})

list
// []int{2, 4, 3, 4}

newList
// []int{2, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Map&lt;/h3&gt; 
&lt;p&gt;Manipulates a slice of one type and transforms it into a slice of another type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/samber/lo"

lo.Map([]int64{1, 2, 3, 4}, func(x int64, index int) string {
    return strconv.FormatInt(x, 10)
})
// []string{"1", "2", "3", "4"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/OkPcYAhBo0D"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.Map()&lt;/code&gt;, but the mapper function is called in a goroutine. Results are returned in the same order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.Map([]int64{1, 2, 3, 4}, func(x int64, _ int) string {
    return strconv.FormatInt(x, 10)
})
// []string{"1", "2", "3", "4"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/sCJaB3quRMC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Mutable: like &lt;code&gt;lo.Map()&lt;/code&gt;, but the slice is updated in place.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{1, 2, 3, 4}
lom.Map(list, func(x int) int {
    return x*2
})
// []int{2, 4, 6, 8}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/0jY3Z0B7O_5"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqMap&lt;/h3&gt; 
&lt;p&gt;Manipulates a slice and transforms it to a slice of another type with unique values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type User struct {
    Name string
    Age  int
}
users := []User{{Name: "Alex", Age: 10}, {Name: "Alex", Age: 12}, {Name: "Bob", Age: 11}, {Name: "Alice", Age: 20}}

names := lo.UniqMap(users, func(u User, index int) string {
    return u.Name
})
// []string{"Alex", "Bob", "Alice"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/fygzLBhvUdB"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FilterMap&lt;/h3&gt; 
&lt;p&gt;Returns a slice obtained after both filtering and mapping using the given callback function.&lt;/p&gt; 
&lt;p&gt;The callback function should return two values: the result of the mapping operation and whether the result element should be included or not.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;matching := lo.FilterMap([]string{"cpu", "gpu", "mouse", "keyboard"}, func(x string, _ int) (string, bool) {
    if strings.HasSuffix(x, "pu") {
        return "xpu", true
    }
    return "", false
})
// []string{"xpu", "xpu"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-AuYXfy7opz"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FlatMap&lt;/h3&gt; 
&lt;p&gt;Manipulates a slice and transforms and flattens it to a slice of another type. The transform function can either return a slice or a &lt;code&gt;nil&lt;/code&gt;, and in the &lt;code&gt;nil&lt;/code&gt; case no value is added to the final slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.FlatMap([]int64{0, 1, 2}, func(x int64, _ int) []string {
    return []string{
        strconv.FormatInt(x, 10),
        strconv.FormatInt(x, 10),
    }
})
// []string{"0", "0", "1", "1", "2", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/YSoYmQTA8-U"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Reduce&lt;/h3&gt; 
&lt;p&gt;Reduces a collection to a single value. The value is calculated by accumulating the result of running each element in the collection through an accumulator function. Each successive invocation is supplied with the return value returned by the previous call.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;sum := lo.Reduce([]int{1, 2, 3, 4}, func(agg int, item int, _ int) int {
    return agg + item
}, 0)
// 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/R4UHXZNaaUG"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ReduceRight&lt;/h3&gt; 
&lt;p&gt;Like &lt;code&gt;lo.Reduce&lt;/code&gt; except that it iterates over elements of collection from right to left.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.ReduceRight([][]int{{0, 1}, {2, 3}, {4, 5}}, func(agg []int, item []int, _ int) []int {
    return append(agg, item...)
}, []int{})
// []int{4, 5, 2, 3, 0, 1}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Fq3W70l7wXF"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ForEach&lt;/h3&gt; 
&lt;p&gt;Iterates over elements of a collection and invokes the function over each element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/samber/lo"

lo.ForEach([]string{"hello", "world"}, func(x string, _ int) {
    println(x)
})
// prints "hello\nworld\n"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/oofyiUPRf8t"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.ForEach()&lt;/code&gt;, but the callback is called as a goroutine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.ForEach([]string{"hello", "world"}, func(x string, _ int) {
    println(x)
})
// prints "hello\nworld\n" or "world\nhello\n"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ForEachWhile&lt;/h3&gt; 
&lt;p&gt;Iterates over collection elements and invokes iteratee for each element collection return value decide to continue or break, like do while().&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int64{1, 2, -42, 4}

lo.ForEachWhile(list, func(x int64, _ int) bool {
	if x &amp;lt; 0 {
		return false
	}
	fmt.Println(x)
	return true
})
// 1
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/QnLGt35tnow"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Times&lt;/h3&gt; 
&lt;p&gt;Times invokes the iteratee n times, returning a slice of the results of each invocation. The iteratee is invoked with index as argument.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/samber/lo"

lo.Times(3, func(i int) string {
    return strconv.FormatInt(int64(i), 10)
})
// []string{"0", "1", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/vgQj3Glr6lT"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.Times()&lt;/code&gt;, but callback is called in goroutine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.Times(3, func(i int) string {
    return strconv.FormatInt(int64(i), 10)
})
// []string{"0", "1", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Uniq&lt;/h3&gt; 
&lt;p&gt;Returns a duplicate-free version of a slice, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqValues := lo.Uniq([]int{1, 2, 2, 1})
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/DTzbeXZ6iEN"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqBy&lt;/h3&gt; 
&lt;p&gt;Returns a duplicate-free version of a slice, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the slice. It accepts &lt;code&gt;iteratee&lt;/code&gt; which is invoked for each element in the slice to generate the criterion by which uniqueness is computed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqValues := lo.UniqBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {
    return i%3
})
// []int{0, 1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/g42Z3QSb53u"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;GroupBy&lt;/h3&gt; 
&lt;p&gt;Returns an object composed of keys generated from the results of running each element of collection through iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lo "github.com/samber/lo"

groups := lo.GroupBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {
    return i%3
})
// map[int][]int{0: []int{0, 3}, 1: []int{1, 4}, 2: []int{2, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/XnQBd_v6brd"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.GroupBy()&lt;/code&gt;, but callback is called in goroutine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.GroupBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {
    return i%3
})
// map[int][]int{0: []int{0, 3}, 1: []int{1, 4}, 2: []int{2, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GroupByMap&lt;/h3&gt; 
&lt;p&gt;Returns an object composed of keys generated from the results of running each element of collection through iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lo "github.com/samber/lo"

groups := lo.GroupByMap([]int{0, 1, 2, 3, 4, 5}, func(i int) (int, int) {
    return i%3, i*2
})
// map[int][]int{0: []int{0, 6}, 1: []int{2, 8}, 2: []int{4, 10}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/iMeruQ3_W80"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Chunk&lt;/h3&gt; 
&lt;p&gt;Returns a slice of elements split into groups of length size. If the slice can't be split evenly, the final chunk will be the remaining elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Chunk([]int{0, 1, 2, 3, 4, 5}, 2)
// [][]int{{0, 1}, {2, 3}, {4, 5}}

lo.Chunk([]int{0, 1, 2, 3, 4, 5, 6}, 2)
// [][]int{{0, 1}, {2, 3}, {4, 5}, {6}}

lo.Chunk([]int{}, 2)
// [][]int{}

lo.Chunk([]int{0}, 2)
// [][]int{{0}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/kEMkFbdu85g"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PartitionBy&lt;/h3&gt; 
&lt;p&gt;Returns a slice of elements split into groups. The order of grouped values is determined by the order they occur in collection. The grouping is generated from the results of running each element of collection through iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lo "github.com/samber/lo"

partitions := lo.PartitionBy([]int{-2, -1, 0, 1, 2, 3, 4, 5}, func(x int) string {
    if x &amp;lt; 0 {
        return "negative"
    } else if x%2 == 0 {
        return "even"
    }
    return "odd"
})
// [][]int{{-2, -1}, {0, 2, 4}, {1, 3, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/NfQ_nGjkgXW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.PartitionBy()&lt;/code&gt;, but callback is called in goroutine. Results are returned in the same order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

partitions := lop.PartitionBy([]int{-2, -1, 0, 1, 2, 3, 4, 5}, func(x int) string {
    if x &amp;lt; 0 {
        return "negative"
    } else if x%2 == 0 {
        return "even"
    }
    return "odd"
})
// [][]int{{-2, -1}, {0, 2, 4}, {1, 3, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Flatten&lt;/h3&gt; 
&lt;p&gt;Returns a slice a single level deep.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;flat := lo.Flatten([][]int{{0, 1}, {2, 3, 4, 5}})
// []int{0, 1, 2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/rbp9ORaMpjw"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Interleave&lt;/h3&gt; 
&lt;p&gt;Round-robin alternating input slices and sequentially appending value at index into result.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;interleaved := lo.Interleave([]int{1, 4, 7}, []int{2, 5, 8}, []int{3, 6, 9})
// []int{1, 2, 3, 4, 5, 6, 7, 8, 9}

interleaved := lo.Interleave([]int{1}, []int{2, 5, 8}, []int{3, 6}, []int{4, 7, 9, 10})
// []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-RJkTLQEDVt"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Shuffle&lt;/h3&gt; 
&lt;p&gt;Returns a slice of shuffled values. Uses the Fisher-Yates shuffle algorithm.&lt;/p&gt; 
&lt;p&gt;⚠️ This helper is &lt;strong&gt;mutable&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{0, 1, 2, 3, 4, 5}
lom.Shuffle(list)

list
// []int{1, 4, 0, 3, 5, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2xb3WdLjeSJ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Reverse&lt;/h3&gt; 
&lt;p&gt;Reverses a slice so that the first element becomes the last, the second element becomes the second to last, and so on.&lt;/p&gt; 
&lt;p&gt;⚠️ This helper is &lt;strong&gt;mutable&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{0, 1, 2, 3, 4, 5}
lom.Reverse(list)

list
// []int{5, 4, 3, 2, 1, 0}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/O-M5pmCRgzV"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Fill&lt;/h3&gt; 
&lt;p&gt;Fills elements of a slice with &lt;code&gt;initial&lt;/code&gt; value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
  bar string
}

func (f foo) Clone() foo {
  return foo{f.bar}
}

initializedSlice := lo.Fill([]foo{foo{"a"}, foo{"a"}}, foo{"b"})
// []foo{foo{"b"}, foo{"b"}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/VwR34GzqEub"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Repeat&lt;/h3&gt; 
&lt;p&gt;Builds a slice with N copies of initial value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
  bar string
}

func (f foo) Clone() foo {
  return foo{f.bar}
}

slice := lo.Repeat(2, foo{"a"})
// []foo{foo{"a"}, foo{"a"}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/g3uHXbmc3b6"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;RepeatBy&lt;/h3&gt; 
&lt;p&gt;Builds a slice with values returned by N calls of callback.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := lo.RepeatBy(0, func (i int) string {
    return strconv.FormatInt(int64(math.Pow(float64(i), 2)), 10)
})
// []string{}

slice := lo.RepeatBy(5, func(i int) string {
    return strconv.FormatInt(int64(math.Pow(float64(i), 2)), 10)
})
// []string{"0", "1", "4", "9", "16"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ozZLCtX_hNU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;KeyBy&lt;/h3&gt; 
&lt;p&gt;Transforms a slice or a slice of structs to a map based on a pivot callback.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.KeyBy([]string{"a", "aa", "aaa"}, func(str string) int {
    return len(str)
})
// map[int]string{1: "a", 2: "aa", 3: "aaa"}

type Character struct {
  dir  string
  code int
}
characters := []Character{
    {dir: "left", code: 97},
    {dir: "right", code: 100},
}
result := lo.KeyBy(characters, func(char Character) string {
    return string(rune(char.code))
})
//map[a:{dir:left code:97} d:{dir:right code:100}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mdaClUAT-zZ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SliceToMap (alias: Associate)&lt;/h3&gt; 
&lt;p&gt;Returns a map containing key-value pairs provided by transform function applied to elements of the given slice. If any of two pairs have the same key the last one gets added to the map.&lt;/p&gt; 
&lt;p&gt;The order of keys in returned map is not specified and is not guaranteed to be the same from the original slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []*foo{{baz: "apple", bar: 1}, {baz: "banana", bar: 2}}

aMap := lo.SliceToMap(in, func (f *foo) (string, int) {
    return f.baz, f.bar
})
// map[string][int]{ "apple":1, "banana":2 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/WHa2CfMO3Lr"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FilterSliceToMap&lt;/h3&gt; 
&lt;p&gt;Returns a map containing key-value pairs provided by transform function applied to elements of the given slice.&lt;/p&gt; 
&lt;p&gt;If any of two pairs have the same key the last one gets added to the map.&lt;/p&gt; 
&lt;p&gt;The order of keys in returned map is not specified and is not guaranteed to be the same from the original slice.&lt;/p&gt; 
&lt;p&gt;The third return value of the transform function is a boolean that indicates whether the key-value pair should be included in the map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []string{"a", "aa", "aaa"}

result := lo.FilterSliceToMap(list, func(str string) (string, int, bool) {
    return str, len(str), len(str) &amp;gt; 1
})
// map[string][int]{"aa":2 "aaa":3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2z0rDz2ZSGU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Keyify&lt;/h3&gt; 
&lt;p&gt;Returns a map with each unique element of the slice as a key.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;set := lo.Keyify([]int{1, 1, 2, 3, 4})
// map[int]struct{}{1:{}, 2:{}, 3:{}, 4:{}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/RYhhM_csqIG"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Drop&lt;/h3&gt; 
&lt;p&gt;Drops n elements from the beginning of a slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.Drop([]int{0, 1, 2, 3, 4, 5}, 2)
// []int{2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/JswS7vXRJP2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropRight&lt;/h3&gt; 
&lt;p&gt;Drops n elements from the end of a slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropRight([]int{0, 1, 2, 3, 4, 5}, 2)
// []int{0, 1, 2, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/GG0nXkSJJa3"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropWhile&lt;/h3&gt; 
&lt;p&gt;Drop elements from the beginning of a slice while the predicate returns true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropWhile([]string{"a", "aa", "aaa", "aa", "aa"}, func(val string) bool {
    return len(val) &amp;lt;= 2
})
// []string{"aaa", "aa", "aa"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/7gBPYw2IK16"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropRightWhile&lt;/h3&gt; 
&lt;p&gt;Drop elements from the end of a slice while the predicate returns true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropRightWhile([]string{"a", "aa", "aaa", "aa", "aa"}, func(val string) bool {
    return len(val) &amp;lt;= 2
})
// []string{"a", "aa", "aaa"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/3-n71oEC0Hz"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropByIndex&lt;/h3&gt; 
&lt;p&gt;Drops elements from a slice by the index. A negative index will drop elements from the end of the slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropByIndex([]int{0, 1, 2, 3, 4, 5}, 2, 4, -1)
// []int{0, 1, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/JswS7vXRJP2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Reject&lt;/h3&gt; 
&lt;p&gt;The opposite of Filter, this method returns the elements of collection that predicate does not return true for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;odd := lo.Reject([]int{1, 2, 3, 4}, func(x int, _ int) bool {
    return x%2 == 0
})
// []int{1, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/YkLMODy1WEL"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;RejectMap&lt;/h3&gt; 
&lt;p&gt;The opposite of FilterMap, this method returns a slice obtained after both filtering and mapping using the given callback function.&lt;/p&gt; 
&lt;p&gt;The callback function should return two values:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the result of the mapping operation and&lt;/li&gt; 
 &lt;li&gt;whether the result element should be included or not.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;items := lo.RejectMap([]int{1, 2, 3, 4}, func(x int, _ int) (int, bool) {
    return x*10, x%2 == 0
})
// []int{10, 30}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FilterReject&lt;/h3&gt; 
&lt;p&gt;Mixes Filter and Reject, this method returns two slices, one for the elements of collection that predicate returns true for and one for the elements that predicate does not return true for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;kept, rejected := lo.FilterReject([]int{1, 2, 3, 4}, func(x int, _ int) bool {
    return x%2 == 0
})
// []int{2, 4}
// []int{1, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Count&lt;/h3&gt; 
&lt;p&gt;Counts the number of elements in the collection that equal value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count := lo.Count([]int{1, 5, 1}, 1)
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Y3FlK54yveC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CountBy&lt;/h3&gt; 
&lt;p&gt;Counts the number of elements in the collection for which predicate is true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count := lo.CountBy([]int{1, 5, 1}, func(i int) bool {
    return i &amp;lt; 4
})
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ByQbNYQQi4X"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CountValues&lt;/h3&gt; 
&lt;p&gt;Counts the number of each element in the collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.CountValues([]int{})
// map[int]int{}

lo.CountValues([]int{1, 2})
// map[int]int{1: 1, 2: 1}

lo.CountValues([]int{1, 2, 2})
// map[int]int{1: 1, 2: 2}

lo.CountValues([]string{"foo", "bar", ""})
// map[string]int{"": 1, "foo": 1, "bar": 1}

lo.CountValues([]string{"foo", "bar", "bar"})
// map[string]int{"foo": 1, "bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-p-PyLT4dfy"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CountValuesBy&lt;/h3&gt; 
&lt;p&gt;Counts the number of each element in the collection. It is equivalent to chaining lo.Map and lo.CountValues.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;isEven := func(v int) bool {
    return v%2==0
}

lo.CountValuesBy([]int{}, isEven)
// map[bool]int{}

lo.CountValuesBy([]int{1, 2}, isEven)
// map[bool]int{false: 1, true: 1}

lo.CountValuesBy([]int{1, 2, 2}, isEven)
// map[bool]int{false: 1, true: 2}

length := func(v string) int {
    return len(v)
}

lo.CountValuesBy([]string{"foo", "bar", ""}, length)
// map[int]int{0: 1, 3: 2}

lo.CountValuesBy([]string{"foo", "bar", "bar"}, length)
// map[int]int{3: 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2U0dG1SnOmS"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Subset&lt;/h3&gt; 
&lt;p&gt;Returns a copy of a slice from &lt;code&gt;offset&lt;/code&gt; up to &lt;code&gt;length&lt;/code&gt; elements. Like &lt;code&gt;slice[start:start+length]&lt;/code&gt;, but does not panic on overflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 2, 3, 4}

sub := lo.Subset(in, 2, 3)
// []int{2, 3, 4}

sub := lo.Subset(in, -4, 3)
// []int{1, 2, 3}

sub := lo.Subset(in, -2, math.MaxUint)
// []int{3, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tOQu1GhFcog"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Slice&lt;/h3&gt; 
&lt;p&gt;Returns a copy of a slice from &lt;code&gt;start&lt;/code&gt; up to, but not including &lt;code&gt;end&lt;/code&gt;. Like &lt;code&gt;slice[start:end]&lt;/code&gt;, but does not panic on overflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 2, 3, 4}

slice := lo.Slice(in, 0, 5)
// []int{0, 1, 2, 3, 4}

slice := lo.Slice(in, 2, 3)
// []int{2}

slice := lo.Slice(in, 2, 6)
// []int{2, 3, 4}

slice := lo.Slice(in, 4, 3)
// []int{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/8XWYhfMMA1h"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Replace&lt;/h3&gt; 
&lt;p&gt;Returns a copy of the slice with the first n non-overlapping instances of old replaced by new.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 0, 1, 2, 3, 0}

slice := lo.Replace(in, 0, 42, 1)
// []int{42, 1, 0, 1, 2, 3, 0}

slice := lo.Replace(in, -1, 42, 1)
// []int{0, 1, 0, 1, 2, 3, 0}

slice := lo.Replace(in, 0, 42, 2)
// []int{42, 1, 42, 1, 2, 3, 0}

slice := lo.Replace(in, 0, 42, -1)
// []int{42, 1, 42, 1, 2, 3, 42}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/XfPzmf9gql6"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ReplaceAll&lt;/h3&gt; 
&lt;p&gt;Returns a copy of the slice with all non-overlapping instances of old replaced by new.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 0, 1, 2, 3, 0}

slice := lo.ReplaceAll(in, 0, 42)
// []int{42, 1, 42, 1, 2, 3, 42}

slice := lo.ReplaceAll(in, -1, 42)
// []int{0, 1, 0, 1, 2, 3, 0}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/a9xZFUHfYcV"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Compact&lt;/h3&gt; 
&lt;p&gt;Returns a slice of all non-zero elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []string{"", "foo", "", "bar", ""}

slice := lo.Compact(in)
// []string{"foo", "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tXiy-iK6PAc"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;IsSorted&lt;/h3&gt; 
&lt;p&gt;Checks if a slice is sorted.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := lo.IsSorted([]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mc3qR-t4mcx"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;IsSortedByKey&lt;/h3&gt; 
&lt;p&gt;Checks if a slice is sorted by iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := lo.IsSortedByKey([]string{"a", "bb", "ccc"}, func(s string) int {
    return len(s)
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/wiG6XyBBu49"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Splice&lt;/h3&gt; 
&lt;p&gt;Splice inserts multiple elements at index i. A negative index counts back from the end of the slice. The helper is protected against overflow errors.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Splice([]string{"a", "b"}, 1, "1", "2")
// []string{"a", "1", "2", "b"}

// negative
result = lo.Splice([]string{"a", "b"}, -1, "1", "2")
// []string{"a", "1", "2", "b"}

// overflow
result = lo.Splice([]string{"a", "b"}, 42, "1", "2")
// []string{"a", "b", "1", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/G5_GhkeSUBA"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Cut&lt;/h3&gt; 
&lt;p&gt;Slices collection around the first instance of separator, returning the part of collection before and after separator. The found result reports whether separator appears in collection. If separator does not appear in s, cut returns collection, empty slice of []T, false.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;actualLeft, actualRight, result = lo.Cut([]string{"a", "b", "c", "d", "e", "f", "g"}, []string{"b", "c", "d"})
// actualLeft: []string{"a"}
// actualRight: []string{"e", "f", "g"}
// result: true

result = lo.Cut([]string{"a", "b", "c", "d", "e", "f", "g"}, []string{"z"})
// actualLeft: []string{"a", "b", "c", "d", "e", "f", "g"}
// actualRight: []string{}
// result: false

result = lo.Cut([]string{"a", "b", "c", "d", "e", "f", "g"}, []string{"a", "b"})
// actualLeft: []string{}
// actualRight: []string{"c", "d", "e", "f", "g"}
// result: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/GiL3qhpIP3f"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CutPrefix&lt;/h3&gt; 
&lt;p&gt;Returns collection without the provided leading prefix []T and reports whether it found the prefix. If s doesn't start with prefix, CutPrefix returns collection, false. If prefix is the empty []T, CutPrefix returns collection, true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;actualRight, result = lo.CutPrefix([]string{"a", "b", "c", "d", "e", "f", "g"}, []string{"a", "b", "c"})
// actualRight: []string{"d", "e", "f", "g"}
// result: true

result = lo.CutPrefix([]string{"a", "b", "c", "d", "e", "f", "g"}, []string{"b"})
// actualRight: []string{"a", "b", "c", "d", "e", "f", "g"}
// result: false

result = lo.CutPrefix([]string{"a", "b", "c", "d", "e", "f", "g"}, []string{})
// actualRight: []string{"a", "b", "c", "d", "e", "f", "g"}
// result: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/7Plak4a1ICl"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CutSuffix&lt;/h3&gt; 
&lt;p&gt;Returns collection without the provided ending suffix []T and reports whether it found the suffix. If it doesn't end with suffix, CutSuffix returns collection, false. If suffix is the empty []T, CutSuffix returns collection, true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;actualLeft, result = lo.CutSuffix([]string{"a", "b", "c", "d", "e", "f", "g"}, []string{"f", "g"})
// actualLeft: []string{"a", "b", "c", "d", "e"}
// result: true

actualLeft, result = lo.CutSuffix([]string{"a", "b", "c", "d", "e", "f", "g"}, []string{"b"})
// actualLeft: []string{"a", "b", "c", "d", "e", "f", "g"}
// result: false

actualLeft, result = lo.CutSuffix([]string{"a", "b", "c", "d", "e", "f", "g"}, []string{})
// actualLeft: []string{"a", "b", "c", "d", "e", "f", "g"}
// result: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/7FKfBFvPTaT"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Trim&lt;/h3&gt; 
&lt;p&gt;Removes all the leading and trailing cutset from the collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Trim([]int{0, 1, 2, 0, 3, 0}, []int{1, 0})
// []int{2, 0, 3}

result := lo.Trim([]string{"hello", "world", " "}, []string{" ", ""})
// []string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/1an9mxLdRG5"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TrimLeft&lt;/h3&gt; 
&lt;p&gt;Removes all the leading cutset from the collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.TrimLeft([]int{0, 1, 2, 0, 3, 0}, []int{1, 0})
// []int{2, 0, 3, 0}

result := lo.TrimLeft([]string{"hello", "world", " "}, []string{" ", ""})
// []string{"hello", "world", " "}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/74aqfAYLmyi"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TrimPrefix&lt;/h3&gt; 
&lt;p&gt;Removes all the leading prefix from the collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.TrimPrefix([]int{1, 2, 1, 2, 3, 1, 2, 4}, []int{1, 2})
// []int{3, 1, 2, 4}

result := lo.TrimPrefix([]string{"hello", "world", "hello", "test"}, []string{"hello"})
// []string{"world", "hello", "test"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/SHO6X-YegPg"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TrimRight&lt;/h3&gt; 
&lt;p&gt;Removes all the trailing cutset from the collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.TrimRight([]int{0, 1, 2, 0, 3, 0}, []int{0, 3})
// []int{0, 1, 2}

result := lo.TrimRight([]string{"hello", "world", "  "}, []string{" ", ""})
// []string{"hello", "world", ""}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/MRpAfR6sf0g"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TrimSuffix&lt;/h3&gt; 
&lt;p&gt;Removes all the trailing suffix from the collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.TrimSuffix([]int{1, 2, 3, 1, 2, 4, 2, 4, 2, 4}, []int{2, 4})
// []int{1, 2, 3, 1}

result := lo.TrimSuffix([]string{"hello", "world", "hello", "test"}, []string{"test"})
// []string{"hello", "world", "hello"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/IjEUrV0iofq"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Keys&lt;/h3&gt; 
&lt;p&gt;Creates a slice of the map keys.&lt;/p&gt; 
&lt;p&gt;Use the UniqKeys variant to deduplicate common keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;keys := lo.Keys(map[string]int{"foo": 1, "bar": 2})
// []string{"foo", "bar"}

keys := lo.Keys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []string{"foo", "bar", "baz"}

keys := lo.Keys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 3})
// []string{"foo", "bar", "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Uu11fHASqrU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqKeys&lt;/h3&gt; 
&lt;p&gt;Creates a slice of unique map keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;keys := lo.UniqKeys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []string{"foo", "bar", "baz"}

keys := lo.UniqKeys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 3})
// []string{"foo", "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TPKAb6ILdHk"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;HasKey&lt;/h3&gt; 
&lt;p&gt;Returns whether the given key exists.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;exists := lo.HasKey(map[string]int{"foo": 1, "bar": 2}, "foo")
// true

exists := lo.HasKey(map[string]int{"foo": 1, "bar": 2}, "baz")
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/aVwubIvECqS"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Values&lt;/h3&gt; 
&lt;p&gt;Creates a slice of the map values.&lt;/p&gt; 
&lt;p&gt;Use the UniqValues variant to deduplicate common values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;values := lo.Values(map[string]int{"foo": 1, "bar": 2})
// []int{1, 2}

values := lo.Values(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []int{1, 2, 3}

values := lo.Values(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 2})
// []int{1, 2, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/nnRTQkzQfF6"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqValues&lt;/h3&gt; 
&lt;p&gt;Creates a slice of unique map values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;values := lo.UniqValues(map[string]int{"foo": 1, "bar": 2})
// []int{1, 2}

values := lo.UniqValues(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []int{1, 2, 3}

values := lo.UniqValues(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 2})
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/nf6bXMh7rM3"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ValueOr&lt;/h3&gt; 
&lt;p&gt;Returns the value of the given key or the fallback value if the key is not present.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;value := lo.ValueOr(map[string]int{"foo": 1, "bar": 2}, "foo", 42)
// 1

value := lo.ValueOr(map[string]int{"foo": 1, "bar": 2}, "baz", 42)
// 42
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/bAq9mHErB4V"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PickBy&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given predicate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.PickBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(key string, value int) bool {
    return value%2 == 1
})
// map[string]int{"foo": 1, "baz": 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/kdg8GR_QMmf"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PickByKeys&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.PickByKeys(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []string{"foo", "baz"})
// map[string]int{"foo": 1, "baz": 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/R1imbuci9qU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PickByValues&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.PickByValues(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []int{1, 3})
// map[string]int{"foo": 1, "baz": 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/1zdzSvbfsJc"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;OmitBy&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given predicate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.OmitBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(key string, value int) bool {
    return value%2 == 1
})
// map[string]int{"bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/EtBsR43bdsd"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;OmitByKeys&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.OmitByKeys(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []string{"foo", "baz"})
// map[string]int{"bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/t1QjCrs-ysk"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;OmitByValues&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.OmitByValues(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []int{1, 3})
// map[string]int{"bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/9UYZi-hrs8j"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Entries (alias: ToPairs)&lt;/h3&gt; 
&lt;p&gt;Transforms a map into a slice of key/value pairs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;entries := lo.Entries(map[string]int{"foo": 1, "bar": 2})
// []lo.Entry[string, int]{
//     {
//         Key: "foo",
//         Value: 1,
//     },
//     {
//         Key: "bar",
//         Value: 2,
//     },
// }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/_t4Xe34-Nl5"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FromEntries (alias: FromPairs)&lt;/h3&gt; 
&lt;p&gt;Transforms a slice of key/value pairs into a map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.FromEntries([]lo.Entry[string, int]{
    {
        Key: "foo",
        Value: 1,
    },
    {
        Key: "bar",
        Value: 2,
    },
})
// map[string]int{"foo": 1, "bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/oIr5KHFGCEN"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Invert&lt;/h3&gt; 
&lt;p&gt;Creates a map composed of the inverted keys and values. If map contains duplicate values, subsequent values overwrite property assignments of previous values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m1 := lo.Invert(map[string]int{"a": 1, "b": 2})
// map[int]string{1: "a", 2: "b"}

m2 := lo.Invert(map[string]int{"a": 1, "b": 2, "c": 1})
// map[int]string{1: "c", 2: "b"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/rFQ4rak6iA1"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Assign&lt;/h3&gt; 
&lt;p&gt;Merges multiple maps from left to right.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mergedMaps := lo.Assign(
    map[string]int{"a": 1, "b": 2},
    map[string]int{"b": 3, "c": 4},
)
// map[string]int{"a": 1, "b": 3, "c": 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/VhwfJOyxf5o"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ChunkEntries&lt;/h3&gt; 
&lt;p&gt;Splits a map into a slice of elements in groups of length equal to its size. If the map cannot be split evenly, the final chunk will contain the remaining elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;maps := lo.ChunkEntries(
    map[string]int{
        "a": 1,
        "b": 2,
        "c": 3,
        "d": 4,
        "e": 5,
    },
    3,
)
// []map[string]int{
//    {"a": 1, "b": 2, "c": 3},
//    {"d": 4, "e": 5},
// }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/X_YQL6mmoD-"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapKeys&lt;/h3&gt; 
&lt;p&gt;Manipulates map keys and transforms it to a map of another type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m2 := lo.MapKeys(map[int]int{1: 1, 2: 2, 3: 3, 4: 4}, func(_ int, v int) string {
    return strconv.FormatInt(int64(v), 10)
})
// map[string]int{"1": 1, "2": 2, "3": 3, "4": 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/9_4WPIqOetJ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapValues&lt;/h3&gt; 
&lt;p&gt;Manipulates map values and transforms it to a map of another type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m1 := map[int]int64{1: 1, 2: 2, 3: 3}

m2 := lo.MapValues(m1, func(x int64, _ int) string {
    return strconv.FormatInt(x, 10)
})
// map[int]string{1: "1", 2: "2", 3: "3"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/T_8xAfvcf0W"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapEntries&lt;/h3&gt; 
&lt;p&gt;Manipulates map entries and transforms it to a map of another type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := map[string]int{"foo": 1, "bar": 2}

out := lo.MapEntries(in, func(k string, v int) (int, string) {
    return v,k
})
// map[int]string{1: "foo", 2: "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/VuvNQzxKimT"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapToSlice&lt;/h3&gt; 
&lt;p&gt;Transforms a map into a slice based on specified iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := map[int]int64{1: 4, 2: 5, 3: 6}

s := lo.MapToSlice(m, func(k int, v int64) string {
    return fmt.Sprintf("%d_%d", k, v)
})
// []string{"1_4", "2_5", "3_6"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ZuiCZpDt6LD"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FilterMapToSlice&lt;/h3&gt; 
&lt;p&gt;Transforms a map into a slice based on specified iteratee. The iteratee returns a value and a boolean. If the boolean is true, the value is added to the result slice.&lt;/p&gt; 
&lt;p&gt;If the boolean is false, the value is not added to the result slice. The order of the keys in the input map is not specified and the order of the keys in the output slice is not guaranteed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;kv := map[int]int64{1: 1, 2: 2, 3: 3, 4: 4}

result := lo.FilterMapToSlice(kv, func(k int, v int64) (string, bool) {
    return fmt.Sprintf("%d_%d", k, v), k%2 == 0
})
// []{"2_2", "4_4"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FilterKeys&lt;/h3&gt; 
&lt;p&gt;Transforms a map into a slice based on predicate returns true for specific elements. It is a mix of &lt;code&gt;lo.Filter()&lt;/code&gt; and &lt;code&gt;lo.Keys()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;kv := map[int]string{1: "foo", 2: "bar", 3: "baz"}

result := FilterKeys(kv, func(k int, v string) bool {
    return v == "foo"
})
// [1]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/OFlKXlPrBAe"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FilterValues&lt;/h3&gt; 
&lt;p&gt;Transforms a map into a slice based on predicate returns true for specific elements. It is a mix of &lt;code&gt;lo.Filter()&lt;/code&gt; and &lt;code&gt;lo.Values()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;kv := map[int]string{1: "foo", 2: "bar", 3: "baz"}

result := FilterValues(kv, func(k int, v string) bool {
    return v == "foo"
})
// ["foo"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/YVD5r_h-LX-"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Range / RangeFrom / RangeWithSteps&lt;/h3&gt; 
&lt;p&gt;Creates a slice of numbers (positive and/or negative) progressing from start up to, but not including end.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Range(4)
// [0, 1, 2, 3]

result := lo.Range(-4)
// [0, -1, -2, -3]

result := lo.RangeFrom(1, 5)
// [1, 2, 3, 4, 5]

result := lo.RangeFrom[float64](1.0, 5)
// [1.0, 2.0, 3.0, 4.0, 5.0]

result := lo.RangeWithSteps(0, 20, 5)
// [0, 5, 10, 15]

result := lo.RangeWithSteps[float32](-1.0, -4.0, -1.0)
// [-1.0, -2.0, -3.0]

result := lo.RangeWithSteps(1, 4, -1)
// []

result := lo.Range(0)
// []
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/0r6VimXAi9H"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Clamp&lt;/h3&gt; 
&lt;p&gt;Clamps number within the inclusive lower and upper bounds.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;r1 := lo.Clamp(0, -10, 10)
// 0

r2 := lo.Clamp(-42, -10, 10)
// -10

r3 := lo.Clamp(42, -10, 10)
// 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/RU4lJNC2hlI"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Sum&lt;/h3&gt; 
&lt;p&gt;Sums the values in a collection.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}
sum := lo.Sum(list)
// 15
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/upfeJVqs4Bt"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SumBy&lt;/h3&gt; 
&lt;p&gt;Summarizes the values in a collection using the given return value from the iteration function.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;strings := []string{"foo", "bar"}
sum := lo.SumBy(strings, func(item string) int {
    return len(item)
})
// 6
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Product&lt;/h3&gt; 
&lt;p&gt;Calculates the product of the values in a collection.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}
product := lo.Product(list)
// 120
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2_kjM_smtAH"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ProductBy&lt;/h3&gt; 
&lt;p&gt;Calculates the product of the values in a collection using the given return value from the iteration function.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;strings := []string{"foo", "bar"}
product := lo.ProductBy(strings, func(item string) int {
    return len(item)
})
// 9
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/wadzrWr9Aer"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Mean&lt;/h3&gt; 
&lt;p&gt;Calculates the mean of a collection of numbers.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mean := lo.Mean([]int{2, 3, 4, 5})
// 3

mean := lo.Mean([]float64{2, 3, 4, 5})
// 3.5

mean := lo.Mean([]float64{})
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MeanBy&lt;/h3&gt; 
&lt;p&gt;Calculates the mean of a collection of numbers using the given return value from the iteration function.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []string{"aa", "bbb", "cccc", "ddddd"}
mapper := func(item string) float64 {
    return float64(len(item))
}

mean := lo.MeanBy(list, mapper)
// 3.5

mean := lo.MeanBy([]float64{}, mapper)
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/j7TsVwBOZ7P"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Mode&lt;/h3&gt; 
&lt;p&gt;Calculates the mode (most frequent value) of a collection of numbers.&lt;/p&gt; 
&lt;p&gt;If multiple values have the same highest frequency, then multiple values are returned.&lt;/p&gt; 
&lt;p&gt;If the collection is empty, the zero value of &lt;code&gt;T[]&lt;/code&gt; is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mode := lo.Mode([]int{2, 2, 3, 4})
// [2]

mode := lo.Mode([]float64{2, 2, 3, 3})
// [2, 3]

mode := lo.Mode([]float64{})
// []

mode := lo.Mode([]int{1, 2, 3, 4, 5, 6, 7, 8, 9})
// [1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RandomString&lt;/h3&gt; 
&lt;p&gt;Returns a random string of the specified length and made of the specified charset.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.RandomString(5, lo.LettersCharset)
// example: "eIGbt"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/rRseOQVVum4"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Substring&lt;/h3&gt; 
&lt;p&gt;Return part of a string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;sub := lo.Substring("hello", 2, 3)
// "llo"

sub := lo.Substring("hello", -4, 3)
// "ell"

sub := lo.Substring("hello", -2, math.MaxUint)
// "lo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TQlxQi82Lu1"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ChunkString&lt;/h3&gt; 
&lt;p&gt;Returns a slice of strings split into groups of length size. If the string can't be split evenly, the final chunk will be the remaining characters.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.ChunkString("123456", 2)
// []string{"12", "34", "56"}

lo.ChunkString("1234567", 2)
// []string{"12", "34", "56", "7"}

lo.ChunkString("", 2)
// []string{""}

lo.ChunkString("1", 2)
// []string{"1"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/__FLTuJVz54"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;RuneLength&lt;/h3&gt; 
&lt;p&gt;An alias to utf8.RuneCountInString which returns the number of runes in string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;sub := lo.RuneLength("hellô")
// 5

sub := len("hellô")
// 6
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tuhgW_lWY8l"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PascalCase&lt;/h3&gt; 
&lt;p&gt;Converts string to pascal case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.PascalCase("hello_world")
// HelloWorld
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Dy_V_6DUYhe"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CamelCase&lt;/h3&gt; 
&lt;p&gt;Converts string to camel case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.CamelCase("hello_world")
// helloWorld
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Go6aKwUiq59"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;KebabCase&lt;/h3&gt; 
&lt;p&gt;Converts string to kebab case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.KebabCase("helloWorld")
// hello-world
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/96gT_WZnTVP"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SnakeCase&lt;/h3&gt; 
&lt;p&gt;Converts string to snake case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.SnakeCase("HelloWorld")
// hello_world
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ziB0V89IeVH"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Words&lt;/h3&gt; 
&lt;p&gt;Splits string into a slice of its words.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.Words("helloWorld")
// []string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-f3VIQqiaVw"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Capitalize&lt;/h3&gt; 
&lt;p&gt;Converts the first character of string to upper case and the remaining to lower case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.Capitalize("heLLO")
// Hello
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/uLTZZQXqnsa"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Ellipsis&lt;/h3&gt; 
&lt;p&gt;Trims and truncates a string to a specified length in &lt;code&gt;bytes&lt;/code&gt; and appends an ellipsis if truncated. If the string contains non-ASCII characters (which may occupy multiple bytes in UTF-8), truncating by byte length may split a character in the middle, potentially resulting in garbled output.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.Ellipsis("  Lorem Ipsum  ", 5)
// Lo...

str := lo.Ellipsis("Lorem Ipsum", 100)
// Lorem Ipsum

str := lo.Ellipsis("Lorem Ipsum", 3)
// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/qE93rgqe1TW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;T2 -&amp;gt; T9&lt;/h3&gt; 
&lt;p&gt;Creates a tuple from a list of values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;tuple1 := lo.T2("x", 1)
// Tuple2[string, int]{A: "x", B: 1}

func example() (string, int) { return "y", 2 }
tuple2 := lo.T2(example())
// Tuple2[string, int]{A: "y", B: 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/IllL3ZO4BQm"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Unpack2 -&amp;gt; Unpack9&lt;/h3&gt; 
&lt;p&gt;Returns values contained in a tuple.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;r1, r2 := lo.Unpack2(lo.Tuple2[string, int]{"a", 1})
// "a", 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unpack is also available as a method of TupleX.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;tuple2 := lo.T2("a", 1)
a, b := tuple2.Unpack()
// "a", 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/xVP_k0kJ96W"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Zip2 -&amp;gt; Zip9&lt;/h3&gt; 
&lt;p&gt;Zip creates a slice of grouped elements, the first of which contains the first elements of the given slices, the second of which contains the second elements of the given slices, and so on.&lt;/p&gt; 
&lt;p&gt;When collections are different sizes, the Tuple attributes are filled with zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;tuples := lo.Zip2([]string{"a", "b"}, []int{1, 2})
// []Tuple2[string, int]{{A: "a", B: 1}, {A: "b", B: 2}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/jujaA6GaJTp"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ZipBy2 -&amp;gt; ZipBy9&lt;/h3&gt; 
&lt;p&gt;ZipBy creates a slice of transformed elements, the first of which contains the first elements of the given slices, the second of which contains the second elements of the given slices, and so on.&lt;/p&gt; 
&lt;p&gt;When collections are different sizes, the Tuple attributes are filled with zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;items := lo.ZipBy2([]string{"a", "b"}, []int{1, 2}, func(a string, b int) string {
    return fmt.Sprintf("%s-%d", a, b)
})
// []string{"a-1", "b-2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Unzip2 -&amp;gt; Unzip9&lt;/h3&gt; 
&lt;p&gt;Unzip accepts a slice of grouped elements and creates a slice regrouping the elements to their pre-zip configuration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;a, b := lo.Unzip2([]Tuple2[string, int]{{A: "a", B: 1}, {A: "b", B: 2}})
// []string{"a", "b"}
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ciHugugvaAW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UnzipBy2 -&amp;gt; UnzipBy9&lt;/h3&gt; 
&lt;p&gt;UnzipBy2 iterates over a collection and creates a slice regrouping the elements to their pre-zip configuration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;a, b := lo.UnzipBy2([]string{"hello", "john", "doe"}, func(str string) (string, int) {
    return str, len(str)
})
// []string{"hello", "john", "doe"}
// []int{5, 4, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CrossJoin2 -&amp;gt; CrossJoin9&lt;/h3&gt; 
&lt;p&gt;Combines every item from one list with every item from others. It is the cartesian product of lists received as arguments. Returns an empty list if a list is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CrossJoin2([]string{"hello", "john", "doe"}, []int{1, 2})
// lo.Tuple2{"hello", 1}
// lo.Tuple2{"hello", 2}
// lo.Tuple2{"john", 1}
// lo.Tuple2{"john", 2}
// lo.Tuple2{"doe", 1}
// lo.Tuple2{"doe", 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CrossJoinBy2 -&amp;gt; CrossJoinBy9&lt;/h3&gt; 
&lt;p&gt;Combines every item from one list with every item from others. It is the cartesian product of lists received as arguments. The project function is used to create the output values. Returns an empty list if a list is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CrossJoinBy2([]string{"hello", "john", "doe"}, []int{1, 2}, func(a A, b B) string {
    return fmt.Sprintf("%s - %d", a, b)
})
// "hello - 1"
// "hello - 2"
// "john - 1"
// "john - 2"
// "doe - 1"
// "doe - 2"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Duration&lt;/h3&gt; 
&lt;p&gt;Returns the time taken to execute a function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duration := lo.Duration(func() {
    // very long job
})
// 3s
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/HQfbBbAXaFP"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Duration0 -&amp;gt; Duration10&lt;/h3&gt; 
&lt;p&gt;Returns the time taken to execute a function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duration := lo.Duration0(func() {
    // very long job
})
// 3s

err, duration := lo.Duration1(func() error {
    // very long job
    return errors.New("an error")
})
// an error
// 3s

str, nbr, err, duration := lo.Duration3(func() (string, int, error) {
    // very long job
    return "hello", 42, nil
})
// hello
// 42
// nil
// 3s
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ChannelDispatcher&lt;/h3&gt; 
&lt;p&gt;Distributes messages from input channels into N child channels. Close events are propagated to children.&lt;/p&gt; 
&lt;p&gt;Underlying channels can have a fixed buffer capacity or be unbuffered when cap is 0.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := make(chan int, 42)
for i := 0; i &amp;lt;= 10; i++ {
    ch &amp;lt;- i
}

children := lo.ChannelDispatcher(ch, 5, 10, DispatchingStrategyRoundRobin[int])
// []&amp;lt;-chan int{...}

consumer := func(c &amp;lt;-chan int) {
    for {
        msg, ok := &amp;lt;-c
        if !ok {
            println("closed")

            break
        }

        println(msg)
    }
}

for i := range children {
    go consumer(children[i])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/UZGu2wVg3J2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Many distributions strategies are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyRoundRobin&lt;/a&gt;: Distributes messages in a rotating sequential manner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyRandom&lt;/a&gt;: Distributes messages in a random manner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyWeightedRandom&lt;/a&gt;: Distributes messages in a weighted manner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyFirst&lt;/a&gt;: Distributes messages in the first non-full channel.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyLeast&lt;/a&gt;: Distributes messages in the emptiest channel.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyMost&lt;/a&gt;: Distributes to the fullest channel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some strategies bring fallback, in order to favor non-blocking behaviors. See implementations.&lt;/p&gt; 
&lt;p&gt;For custom strategies, just implement the &lt;code&gt;lo.DispatchingStrategy&lt;/code&gt; prototype:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type DispatchingStrategy[T any] func(message T, messageIndex uint64, channels []&amp;lt;-chan T) int
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Eg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type Message struct {
    TenantID uuid.UUID
}

func hash(id uuid.UUID) int {
    h := fnv.New32a()
    h.Write([]byte(id.String()))
    return int(h.Sum32())
}

// Routes messages per TenantID.
customStrategy := func(message string, messageIndex uint64, channels []&amp;lt;-chan string) int {
    destination := hash(message) % len(channels)

    // check if channel is full
    if len(channels[destination]) &amp;lt; cap(channels[destination]) {
        return destination
    }

    // fallback when child channel is full
    return utils.DispatchingStrategyRoundRobin(message, uint64(destination), channels)
}

children := lo.ChannelDispatcher(ch, 5, 10, customStrategy)
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SliceToChannel&lt;/h3&gt; 
&lt;p&gt;Returns a read-only channel of collection elements. Channel is closed after last element. Channel capacity can be customized.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}

for v := range lo.SliceToChannel(2, list) {
    println(v)
}
// prints 1, then 2, then 3, then 4, then 5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/lIbSY3QmiEg"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ChannelToSlice&lt;/h3&gt; 
&lt;p&gt;Returns a slice built from channel items. Blocks until channel closes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}
ch := lo.SliceToChannel(2, list)

items := ChannelToSlice(ch)
// []int{1, 2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Generator&lt;/h3&gt; 
&lt;p&gt;Implements the generator design pattern. Channel is closed after last element. Channel capacity can be customized.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;generator := func(yield func(int)) {
    yield(1)
    yield(2)
    yield(3)
}

for v := range lo.Generator(2, generator) {
    println(v)
}
// prints 1, then 2, then 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Buffer&lt;/h3&gt; 
&lt;p&gt;Creates a slice of n elements from a channel. Returns the slice, the slice length, the read time and the channel status (opened/closed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := lo.SliceToChannel(2, []int{1, 2, 3, 4, 5})

items1, length1, duration1, ok1 := lo.Buffer(ch, 3)
// []int{1, 2, 3}, 3, 0s, true
items2, length2, duration2, ok2 := lo.Buffer(ch, 3)
// []int{4, 5}, 2, 0s, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: RabbitMQ consumer 👇&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := readFromQueue()

for {
    // read 1k items
    items, length, _, ok := lo.Buffer(ch, 1000)

    // do batching stuff

    if !ok {
        break
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;BufferWithContext&lt;/h3&gt; 
&lt;p&gt;Creates a slice of n elements from a channel, with timeout. Returns the slice, the slice length, the read time and the channel status (opened/closed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ctx, cancel := context.WithCancel(context.TODO())
go func() {
    ch &amp;lt;- 0
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 1
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 2
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 3
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 4
    time.Sleep(10*time.Millisecond)
    cancel()
}()

items1, length1, duration1, ok1 := lo.BufferWithContext(ctx, ch, 3)
// []int{0, 1, 2}, 3, 20ms, true
items2, length2, duration2, ok2 := lo.BufferWithContext(ctx, ch, 3)
// []int{3, 4}, 2, 30ms, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;BufferWithTimeout&lt;/h3&gt; 
&lt;p&gt;Creates a slice of n elements from a channel, with timeout. Returns the slice, the slice length, the read time and the channel status (opened/closed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;generator := func(yield func(int)) {
    for i := 0; i &amp;lt; 5; i++ {
        yield(i)
        time.Sleep(35*time.Millisecond)
    }
}

ch := lo.Generator(0, generator)

items1, length1, duration1, ok1 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)
// []int{1, 2}, 2, 100ms, true
items2, length2, duration2, ok2 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)
// []int{3, 4, 5}, 3, 75ms, true
items3, length3, duration2, ok3 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)
// []int{}, 0, 10ms, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: RabbitMQ consumer 👇&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := readFromQueue()

for {
    // read 1k items
    // wait up to 1 second
    items, length, _, ok := lo.BufferWithTimeout(ch, 1000, 1*time.Second)

    // do batching stuff

    if !ok {
        break
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: Multithreaded RabbitMQ consumer 👇&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := readFromQueue()

// 5 workers
// prefetch 1k messages per worker
children := lo.ChannelDispatcher(ch, 5, 1000, lo.DispatchingStrategyFirst[int])

consumer := func(c &amp;lt;-chan int) {
    for {
        // read 1k items
        // wait up to 1 second
        items, length, _, ok := lo.BufferWithTimeout(ch, 1000, 1*time.Second)

        // do batching stuff

        if !ok {
            break
        }
    }
}

for i := range children {
    go consumer(children[i])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FanIn&lt;/h3&gt; 
&lt;p&gt;Merge messages from multiple input channels into a single buffered channel. Output messages have no priority. When all upstream channels reach EOF, downstream channel closes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;stream1 := make(chan int, 42)
stream2 := make(chan int, 42)
stream3 := make(chan int, 42)

all := lo.FanIn(100, stream1, stream2, stream3)
// &amp;lt;-chan int
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FanOut&lt;/h3&gt; 
&lt;p&gt;Broadcasts all the upstream messages to multiple downstream channels. When upstream channel reaches EOF, downstream channels close. If any downstream channels is full, broadcasting is paused.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;stream := make(chan int, 42)

all := lo.FanOut(5, 100, stream)
// [5]&amp;lt;-chan int
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Contains&lt;/h3&gt; 
&lt;p&gt;Returns true if an element is present in a collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;present := lo.Contains([]int{0, 1, 2, 3, 4, 5}, 5)
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/W1EvyqY6t9j"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ContainsBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate function returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;present := lo.ContainsBy([]int{0, 1, 2, 3, 4, 5}, func(x int) bool {
    return x == 3
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Every&lt;/h3&gt; 
&lt;p&gt;Returns true if all elements of a subset are contained in a collection or if the subset is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Every([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})
// true

ok := lo.Every([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;EveryBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate returns true for all elements in the collection or if the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := EveryBy([]int{1, 2, 3, 4}, func(x int) bool {
    return x &amp;lt; 5
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/dn1-vhHsq9x"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Some&lt;/h3&gt; 
&lt;p&gt;Returns true if at least 1 element of a subset is contained in a collection. If the subset is empty Some returns false.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Some([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Lj4ceFkeT9V"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;ok := lo.Some([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6}) // false&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
### SomeBy

Returns true if the predicate returns true for any of the elements in the collection.
If the collection is empty SomeBy returns false.

```go
b := SomeBy([]int{1, 2, 3, 4}, func(x int) bool {
    return x &amp;lt; 3
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;None&lt;/h3&gt; 
&lt;p&gt;Returns true if no element of a subset is contained in a collection or if the subset is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := None([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})
// false
b := None([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/fye7JsmxzPV"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;NoneBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate returns true for none of the elements in the collection or if the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := NoneBy([]int{1, 2, 3, 4}, func(x int) bool {
    return x &amp;lt; 0
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/O64WZ32H58S"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Intersect&lt;/h3&gt; 
&lt;p&gt;Returns the intersection between two collections.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result1 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})
// []int{0, 2}

result2 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})
// []int{0}

result3 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})
// []int{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Difference&lt;/h3&gt; 
&lt;p&gt;Returns the difference between two collections.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The first value is the collection of elements absent from list2.&lt;/li&gt; 
 &lt;li&gt;The second value is the collection of elements absent from list1.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;left, right := lo.Difference([]int{0, 1, 2, 3, 4, 5}, []int{0, 2, 6})
// []int{1, 3, 4, 5}, []int{6}

left, right := lo.Difference([]int{0, 1, 2, 3, 4, 5}, []int{0, 1, 2, 3, 4, 5})
// []int{}, []int{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/pKE-JgzqRpz"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Union&lt;/h3&gt; 
&lt;p&gt;Returns all distinct elements from given collections. Result will not change the order of elements relatively.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;union := lo.Union([]int{0, 1, 2, 3, 4, 5}, []int{0, 2}, []int{0, 10})
// []int{0, 1, 2, 3, 4, 5, 10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Without&lt;/h3&gt; 
&lt;p&gt;Returns a slice excluding all given values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;subset := lo.Without([]int{0, 2, 10}, 2)
// []int{0, 10}

subset := lo.Without([]int{0, 2, 10}, 0, 1, 2, 3, 4, 5)
// []int{10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WithoutBy&lt;/h3&gt; 
&lt;p&gt;Filters a slice by excluding elements whose extracted keys match any in the exclude list.&lt;/p&gt; 
&lt;p&gt;Returns a new slice containing only the elements whose keys are not in the exclude list.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type struct User {
    ID int
    Name string
}

// original users
users := []User{
    {ID: 1, Name: "Alice"},
    {ID: 2, Name: "Bob"},
    {ID: 3, Name: "Charlie"},
}

// extract function to get the user ID
getID := func(user User) int {
    return user.ID
}

// exclude users with IDs 2 and 3
excludedIDs := []int{2, 3}

// filtering users
filteredUsers := lo.WithoutBy(users, getID, excludedIDs...)
// []User[{ID: 1, Name: "Alice"}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WithoutEmpty&lt;/h3&gt; 
&lt;p&gt;Returns a slice excluding zero values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;subset := lo.WithoutEmpty([]int{0, 2, 10})
// []int{2, 10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WithoutNth&lt;/h3&gt; 
&lt;p&gt;Returns a slice excluding the nth value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;subset := lo.WithoutNth([]int{-2, -1, 0, 1, 2}, 3, -42, 1)
// []int{-2, 0, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ElementsMatch&lt;/h3&gt; 
&lt;p&gt;Returns true if lists contain the same set of elements (including empty set).&lt;/p&gt; 
&lt;p&gt;If there are duplicate elements, the number of occurrences in each list should match.&lt;/p&gt; 
&lt;p&gt;The order of elements is not checked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := lo.ElementsMatch([]int{1, 1, 2}, []int{2, 1, 1})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ElementsMatchBy&lt;/h3&gt; 
&lt;p&gt;Returns true if lists contain the same set of elements' keys (including empty set).&lt;/p&gt; 
&lt;p&gt;If there are duplicate keys, the number of occurrences in each list should match.&lt;/p&gt; 
&lt;p&gt;The order of elements is not checked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := lo.ElementsMatchBy(
    []someType{a, b},
    []someType{b, a},
    func(item someType) string { return item.ID() },
)
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IndexOf&lt;/h3&gt; 
&lt;p&gt;Returns the index at which the first occurrence of a value is found in a slice or -1 if the value cannot be found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;found := lo.IndexOf([]int{0, 1, 2, 1, 2, 3}, 2)
// 2

notFound := lo.IndexOf([]int{0, 1, 2, 1, 2, 3}, 6)
// -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Eo7W0lvKTky"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;LastIndexOf&lt;/h3&gt; 
&lt;p&gt;Returns the index at which the last occurrence of a value is found in a slice or -1 if the value cannot be found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;found := lo.LastIndexOf([]int{0, 1, 2, 1, 2, 3}, 2)
// 4

notFound := lo.LastIndexOf([]int{0, 1, 2, 1, 2, 3}, 6)
// -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;HasPrefix&lt;/h3&gt; 
&lt;p&gt;Returns true if the collection has the prefix.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.HasPrefix([]int{1, 2, 3, 4}, []int{42})
// false

ok := lo.HasPrefix([]int{1, 2, 3, 4}, []int{1, 2})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/SrljzVDpMQM"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;HasSuffix&lt;/h3&gt; 
&lt;p&gt;Returns true if the collection has the suffix.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.HasSuffix([]int{1, 2, 3, 4}, []int{42})
// false

ok := lo.HasSuffix([]int{1, 2, 3, 4}, []int{3, 4})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/bJeLetQNAON"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Find&lt;/h3&gt; 
&lt;p&gt;Searches for an element in a slice based on a predicate. Returns element and true if element was found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, ok := lo.Find([]string{"a", "b", "c", "d"}, func(i string) bool {
    return i == "b"
})
// "b", true

str, ok := lo.Find([]string{"foobar"}, func(i string) bool {
    return i == "b"
})
// "", false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Eo7W0lvKTky"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FindIndexOf&lt;/h3&gt; 
&lt;p&gt;FindIndexOf searches for an element in a slice based on a predicate and returns the index and true. Returns -1 and false if the element is not found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, index, ok := lo.FindIndexOf([]string{"a", "b", "a", "b"}, func(i string) bool {
    return i == "b"
})
// "b", 1, true

str, index, ok := lo.FindIndexOf([]string{"foobar"}, func(i string) bool {
    return i == "b"
})
// "", -1, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/XWSEM4Ic_t0"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FindLastIndexOf&lt;/h3&gt; 
&lt;p&gt;FindLastIndexOf searches for the last element in a slice based on a predicate and returns the index and true. Returns -1 and false if the element is not found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, index, ok := lo.FindLastIndexOf([]string{"a", "b", "a", "b"}, func(i string) bool {
    return i == "b"
})
// "b", 4, true

str, index, ok := lo.FindLastIndexOf([]string{"foobar"}, func(i string) bool {
    return i == "b"
})
// "", -1, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/dPiMRtJ6cUx"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FindOrElse&lt;/h3&gt; 
&lt;p&gt;Searches for an element in a slice based on a predicate. Returns the element if found or a given fallback value otherwise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.FindOrElse([]string{"a", "b", "c", "d"}, "x", func(i string) bool {
    return i == "b"
})
// "b"

str := lo.FindOrElse([]string{"foobar"}, "x", func(i string) bool {
    return i == "b"
})
// "x"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindKey&lt;/h3&gt; 
&lt;p&gt;Returns the key of the first value matching.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result1, ok1 := lo.FindKey(map[string]int{"foo": 1, "bar": 2, "baz": 3}, 2)
// "bar", true

result2, ok2 := lo.FindKey(map[string]int{"foo": 1, "bar": 2, "baz": 3}, 42)
// "", false

type test struct {
    foobar string
}
result3, ok3 := lo.FindKey(map[string]test{"foo": test{"foo"}, "bar": test{"bar"}, "baz": test{"baz"}}, test{"foo"})
// "foo", true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindKeyBy&lt;/h3&gt; 
&lt;p&gt;Returns the key of the first element predicate returns true for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result1, ok1 := lo.FindKeyBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(k string, v int) bool {
    return k == "foo"
})
// "foo", true

result2, ok2 := lo.FindKeyBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(k string, v int) bool {
    return false
})
// "", false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindUniques&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all the elements that appear in the collection only once. The order of result values is determined by the order they occur in the slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqueValues := lo.FindUniques([]int{1, 2, 2, 1, 2, 3})
// []int{3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindUniquesBy&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all the elements that appear in the collection only once. The order of result values is determined by the order they occur in the slice. It accepts &lt;code&gt;iteratee&lt;/code&gt; which is invoked for each element in the slice to generate the criterion by which uniqueness is computed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqueValues := lo.FindUniquesBy([]int{3, 4, 5, 6, 7}, func(i int) int {
    return i%3
})
// []int{5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindDuplicates&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the first occurrence of each duplicated element in the collection. The order of result values is determined by the order they occur in the slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duplicatedValues := lo.FindDuplicates([]int{1, 2, 2, 1, 2, 3})
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindDuplicatesBy&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the first occurrence of each duplicated element in the collection. The order of result values is determined by the order they occur in the slice. It accepts &lt;code&gt;iteratee&lt;/code&gt; which is invoked for each element in the slice to generate the criterion by which uniqueness is computed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duplicatedValues := lo.FindDuplicatesBy([]int{3, 4, 5, 6, 7}, func(i int) int {
    return i%3
})
// []int{3, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Min&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min := lo.Min([]int{1, 2, 3})
// 1

min := lo.Min([]int{})
// 0

min := lo.Min([]time.Duration{time.Second, time.Hour})
// 1s
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/r6e-Z8JozS8"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MinIndex&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection and the index of the minimum value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min, index := lo.MinIndex([]int{1, 2, 3})
// 1, 0

min, index := lo.MinIndex([]int{})
// 0, -1

min, index := lo.MinIndex([]time.Duration{time.Second, time.Hour})
// 1s, 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MinBy&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection using the given comparison function.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the smallest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min := lo.MinBy([]string{"s1", "string2", "s3"}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// "s1"

min := lo.MinBy([]string{}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MinIndexBy&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection using the given comparison function and the index of the minimum value.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the smallest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min, index := lo.MinIndexBy([]string{"s1", "string2", "s3"}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// "s1", 0

min, index := lo.MinIndexBy([]string{}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// "", -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Earliest&lt;/h3&gt; 
&lt;p&gt;Search the minimum time.Time of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;earliest := lo.Earliest(time.Now(), time.Time{})
// 0001-01-01 00:00:00 +0000 UTC
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;EarliestBy&lt;/h3&gt; 
&lt;p&gt;Search the minimum time.Time of a collection using the given iteratee function.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
    bar time.Time
}

earliest := lo.EarliestBy([]foo{{time.Now()}, {}}, func(i foo) time.Time {
    return i.bar
})
// {bar:{2023-04-01 01:02:03 +0000 UTC}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Max&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max := lo.Max([]int{1, 2, 3})
// 3

max := lo.Max([]int{})
// 0

max := lo.Max([]time.Duration{time.Second, time.Hour})
// 1h
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MaxIndex&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection and the index of the maximum value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max, index := lo.MaxIndex([]int{1, 2, 3})
// 3, 2

max, index := lo.MaxIndex([]int{})
// 0, -1

max, index := lo.MaxIndex([]time.Duration{time.Second, time.Hour})
// 1h, 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MaxBy&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection using the given comparison function.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the greatest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max := lo.MaxBy([]string{"string1", "s2", "string3"}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// "string1"

max := lo.MaxBy([]string{}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MaxIndexBy&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection using the given comparison function and the index of the maximum value.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the greatest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max, index := lo.MaxIndexBy([]string{"string1", "s2", "string3"}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// "string1", 0

max, index := lo.MaxIndexBy([]string{}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// "", -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Latest&lt;/h3&gt; 
&lt;p&gt;Search the maximum time.Time of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;latest := lo.Latest(time.Now(), time.Time{})
// 2023-04-01 01:02:03 +0000 UTC
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LatestBy&lt;/h3&gt; 
&lt;p&gt;Search the maximum time.Time of a collection using the given iteratee function.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
    bar time.Time
}

latest := lo.LatestBy([]foo{{time.Now()}, {}}, func(i foo) time.Time {
    return i.bar
})
// {bar:{2023-04-01 01:02:03 +0000 UTC}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;First&lt;/h3&gt; 
&lt;p&gt;Returns the first element of a collection and check for availability of the first element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;first, ok := lo.First([]int{1, 2, 3})
// 1, true

first, ok := lo.First([]int{})
// 0, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FirstOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first element of a collection or zero value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;first := lo.FirstOrEmpty([]int{1, 2, 3})
// 1

first := lo.FirstOrEmpty([]int{})
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FirstOr&lt;/h3&gt; 
&lt;p&gt;Returns the first element of a collection or the fallback value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;first := lo.FirstOr([]int{1, 2, 3}, 245)
// 1

first := lo.FirstOr([]int{}, 31)
// 31
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Last&lt;/h3&gt; 
&lt;p&gt;Returns the last element of a collection or error if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;last, ok := lo.Last([]int{1, 2, 3})
// 3
// true

last, ok := lo.Last([]int{})
// 0
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LastOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the last element of a collection or zero value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;last := lo.LastOrEmpty([]int{1, 2, 3})
// 3

last := lo.LastOrEmpty([]int{})
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LastOr&lt;/h3&gt; 
&lt;p&gt;Returns the last element of a collection or the fallback value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;last := lo.LastOr([]int{1, 2, 3}, 245)
// 3

last := lo.LastOr([]int{}, 31)
// 31
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Nth&lt;/h3&gt; 
&lt;p&gt;Returns the element at index &lt;code&gt;nth&lt;/code&gt; of collection. If &lt;code&gt;nth&lt;/code&gt; is negative, the nth element from the end is returned. An error is returned when nth is out of slice bounds.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;nth, err := lo.Nth([]int{0, 1, 2, 3}, 2)
// 2

nth, err := lo.Nth([]int{0, 1, 2, 3}, -2)
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NthOr&lt;/h3&gt; 
&lt;p&gt;Returns the element at index &lt;code&gt;nth&lt;/code&gt; of the collection. If &lt;code&gt;nth&lt;/code&gt; is negative, it returns the &lt;code&gt;nth&lt;/code&gt; element from the end. If &lt;code&gt;nth&lt;/code&gt; is out of slice bounds, it returns the provided fallback value&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;nth := lo.NthOr([]int{10, 20, 30, 40, 50}, 2, -1)
// 30

nth := lo.NthOr([]int{10, 20, 30, 40, 50}, -1, -1)
// 50

nth := lo.NthOr([]int{10, 20, 30, 40, 50}, 5, -1)
// -1 (fallback value)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NthOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the element at index &lt;code&gt;nth&lt;/code&gt; of the collection. If &lt;code&gt;nth&lt;/code&gt; is negative, it returns the &lt;code&gt;nth&lt;/code&gt; element from the end. If &lt;code&gt;nth&lt;/code&gt; is out of slice bounds, it returns the zero value for the element type (e.g., 0 for integers, "" for strings, etc).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;nth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, 2)
// 30

nth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, -1)
// 50

nth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, 5)
// 0 (zero value for int)

nth := lo.NthOrEmpty([]string{"apple", "banana", "cherry"}, 2)
// "cherry"

nth := lo.NthOrEmpty([]string{"apple", "banana", "cherry"}, 5)
// "" (zero value for string)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sample&lt;/h3&gt; 
&lt;p&gt;Returns a random item from collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Sample([]string{"a", "b", "c"})
// a random string from []string{"a", "b", "c"}

lo.Sample([]string{})
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/FYA45LcpfM2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SampleBy&lt;/h3&gt; 
&lt;p&gt;Returns a random item from collection, using a given random integer generator.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "math/rand"

r := rand.New(rand.NewSource(42))
lo.SampleBy([]string{"a", "b", "c"}, r.Intn)
// a random string from []string{"a", "b", "c"}, using a seeded random generator

lo.SampleBy([]string{}, r.Intn)
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Samples&lt;/h3&gt; 
&lt;p&gt;Returns N random unique items from collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Samples([]string{"a", "b", "c"}, 3)
// []string{"a", "b", "c"} in random order
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SamplesBy&lt;/h3&gt; 
&lt;p&gt;Returns N random unique items from collection, using a given random integer generator.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;r := rand.New(rand.NewSource(42))
lo.SamplesBy([]string{"a", "b", "c"}, 3, r.Intn)
// []string{"a", "b", "c"} in random order, using a seeded random generator
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Ternary&lt;/h3&gt; 
&lt;p&gt;A single line if/else statement.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Ternary(true, "a", "b")
// "a"

result := lo.Ternary(false, "a", "b")
// "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Take care to avoid dereferencing potentially nil pointers in your A/B expressions, because they are both evaluated. See TernaryF to avoid this problem.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/t-D7WBL44h2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TernaryF&lt;/h3&gt; 
&lt;p&gt;A single line if/else statement whose options are functions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.TernaryF(true, func() string { return "a" }, func() string { return "b" })
// "a"

result := lo.TernaryF(false, func() string { return "a" }, func() string { return "b" })
// "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Useful to avoid nil-pointer dereferencing in initializations, or avoid running unnecessary code&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var s *string

someStr := TernaryF(s == nil, func() string { return uuid.New().String() }, func() string { return *s })
// ef782193-c30c-4e2e-a7ae-f8ab5e125e02
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/AO4VW20JoqM"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;If / ElseIf / Else&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.If(true, 1).
    ElseIf(false, 2).
    Else(3)
// 1

result := lo.If(false, 1).
    ElseIf(true, 2).
    Else(3)
// 2

result := lo.If(false, 1).
    ElseIf(false, 2).
    Else(3)
// 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using callbacks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.IfF(true, func () int {
        return 1
    }).
    ElseIfF(false, func () int {
        return 2
    }).
    ElseF(func () int {
        return 3
    })
// 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Mixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.IfF(true, func () int {
        return 1
    }).
    Else(42)
// 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/WSw3ApMxhyW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Switch / Case / Default&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Switch(1).
    Case(1, "1").
    Case(2, "2").
    Default("3")
// "1"

result := lo.Switch(2).
    Case(1, "1").
    Case(2, "2").
    Default("3")
// "2"

result := lo.Switch(42).
    Case(1, "1").
    Case(2, "2").
    Default("3")
// "3"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using callbacks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Switch(1).
    CaseF(1, func() string {
        return "1"
    }).
    CaseF(2, func() string {
        return "2"
    }).
    DefaultF(func() string {
        return "3"
    })
// "1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Mixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Switch(1).
    CaseF(1, func() string {
        return "1"
    }).
    Default("42")
// "1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TGbKUMAeRUd"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;IsNil&lt;/h3&gt; 
&lt;p&gt;Checks if a value is nil or if it's a reference type with a nil underlying value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var x int
lo.IsNil(x)
// false

var k struct{}
lo.IsNil(k)
// false

var i *int
lo.IsNil(i)
// true

var ifaceWithNilValue any = (*string)(nil)
lo.IsNil(ifaceWithNilValue)
// true
ifaceWithNilValue == nil
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IsNotNil&lt;/h3&gt; 
&lt;p&gt;Checks if a value is not nil or if it's not a reference type with a nil underlying value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var x int
lo.IsNotNil(x)
// true

var k struct{}
lo.IsNotNil(k)
// true

var i *int
lo.IsNotNil(i)
// false

var ifaceWithNilValue any = (*string)(nil)
lo.IsNotNil(ifaceWithNilValue)
// false
ifaceWithNilValue == nil
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ToPtr&lt;/h3&gt; 
&lt;p&gt;Returns a pointer copy of the value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.ToPtr("hello world")
// *string{"hello world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/P2sD0PMXw4F"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Nil&lt;/h3&gt; 
&lt;p&gt;Returns a nil pointer of type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.Nil[float64]()
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;EmptyableToPtr&lt;/h3&gt; 
&lt;p&gt;Returns a pointer copy of value if it's nonzero. Otherwise, returns nil pointer.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.EmptyableToPtr(nil)
// nil

ptr := lo.EmptyableToPtr("")
// nil

ptr := lo.EmptyableToPtr([]int{})
// *[]int{}

ptr := lo.EmptyableToPtr("hello world")
// *string{"hello world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromPtr&lt;/h3&gt; 
&lt;p&gt;Returns the pointer value or empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := "hello world"
value := lo.FromPtr(&amp;amp;str)
// "hello world"

value := lo.FromPtr(nil)
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromPtrOr&lt;/h3&gt; 
&lt;p&gt;Returns the pointer value or the fallback value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := "hello world"
value := lo.FromPtrOr(&amp;amp;str, "empty")
// "hello world"

value := lo.FromPtrOr(nil, "empty")
// "empty"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ToSlicePtr&lt;/h3&gt; 
&lt;p&gt;Returns a slice of pointers to each value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.ToSlicePtr([]string{"hello", "world"})
// []*string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromSlicePtr&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the pointer values. Returns a zero value in case of a nil pointer element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str1 := "hello"
str2 := "world"

ptr := lo.FromSlicePtr[string]([]*string{&amp;amp;str1, &amp;amp;str2, nil})
// []string{"hello", "world", ""}

ptr := lo.Compact(
    lo.FromSlicePtr[string]([]*string{&amp;amp;str1, &amp;amp;str2, nil}),
)
// []string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromSlicePtrOr&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the pointer values or the fallback value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str1 := "hello"
str2 := "world"

ptr := lo.FromSlicePtrOr([]*string{&amp;amp;str1, nil, &amp;amp;str2}, "fallback value")
// []string{"hello", "fallback value", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/CuXGVzo9G65"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ToAnySlice&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all elements mapped to &lt;code&gt;any&lt;/code&gt; type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;elements := lo.ToAnySlice([]int{1, 5, 1})
// []any{1, 5, 1}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromAnySlice&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all elements mapped to a type. Returns false in case of type conversion failure.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;elements, ok := lo.FromAnySlice([]any{"foobar", 42})
// []string{}, false

elements, ok := lo.FromAnySlice([]any{"foobar", "42"})
// []string{"foobar", "42"}, true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Empty&lt;/h3&gt; 
&lt;p&gt;Returns the &lt;a href="https://go.dev/ref/spec#The_zero_value"&gt;zero value&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Empty[int]()
// 0
lo.Empty[string]()
// ""
lo.Empty[bool]()
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IsEmpty&lt;/h3&gt; 
&lt;p&gt;Returns true if argument is a zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.IsEmpty(0)
// true
lo.IsEmpty(42)
// false

lo.IsEmpty("")
// true
lo.IsEmpty("foobar")
// false

type test struct {
    foobar string
}

lo.IsEmpty(test{foobar: ""})
// true
lo.IsEmpty(test{foobar: "foobar"})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IsNotEmpty&lt;/h3&gt; 
&lt;p&gt;Returns true if argument is a zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.IsNotEmpty(0)
// false
lo.IsNotEmpty(42)
// true

lo.IsNotEmpty("")
// false
lo.IsNotEmpty("foobar")
// true

type test struct {
    foobar string
}

lo.IsNotEmpty(test{foobar: ""})
// false
lo.IsNotEmpty(test{foobar: "foobar"})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Coalesce&lt;/h3&gt; 
&lt;p&gt;Returns the first non-empty arguments. Arguments must be comparable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result, ok := lo.Coalesce(0, 1, 2, 3)
// 1 true

result, ok := lo.Coalesce("")
// "" false

var nilStr *string
str := "foobar"
result, ok := lo.Coalesce(nil, nilStr, &amp;amp;str)
// &amp;amp;"foobar" true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first non-empty arguments. Arguments must be comparable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CoalesceOrEmpty(0, 1, 2, 3)
// 1

result := lo.CoalesceOrEmpty("")
// ""

var nilStr *string
str := "foobar"
result := lo.CoalesceOrEmpty(nil, nilStr, &amp;amp;str)
// &amp;amp;"foobar"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceSlice&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result, ok := lo.CoalesceSlice([]int{1, 2, 3}, []int{4, 5, 6})
// [1, 2, 3]
// true

result, ok := lo.CoalesceSlice(nil, []int{})
// []
// true

result, ok := lo.CoalesceSlice([]int(nil))
// []
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceSliceOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CoalesceSliceOrEmpty([]int{1, 2, 3}, []int{4, 5, 6})
// [1, 2, 3]

result := lo.CoalesceSliceOrEmpty(nil, []int{})
// []
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceMap&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result, ok := lo.CoalesceMap(map[string]int{"1": 1, "2": 2, "3": 3}, map[string]int{"4": 4, "5": 5, "6": 6})
// {"1": 1, "2": 2, "3": 3}
// true

result, ok := lo.CoalesceMap(nil, map[string]int{})
// {}
// true

result, ok := lo.CoalesceMap(map[string]int(nil))
// {}
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceMapOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CoalesceMapOrEmpty(map[string]int{"1": 1, "2": 2, "3": 3}, map[string]int{"4": 4, "5": 5, "6": 6})
// {"1": 1, "2": 2, "3": 3}

result := lo.CoalesceMapOrEmpty(nil, map[string]int{})
// {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Partial&lt;/h3&gt; 
&lt;p&gt;Returns new function that, when called, has its first argument set to the provided value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;add := func(x, y int) int { return x + y }
f := lo.Partial(add, 5)

f(10)
// 15

f(42)
// 47
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Sy1gAQiQZ3v"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Partial2 -&amp;gt; Partial5&lt;/h3&gt; 
&lt;p&gt;Returns new function that, when called, has its first argument set to the provided value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;add := func(x, y, z int) int { return x + y + z }
f := lo.Partial2(add, 42)

f(10, 5)
// 57

f(42, -4)
// 80
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-xiPjy4JChJ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Attempt&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output. Returns either the caught error or nil.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;iter, err := lo.Attempt(42, func(i int) error {
    if i == 5 {
        return nil
    }

    return errors.New("failed")
})
// 6
// nil

iter, err := lo.Attempt(2, func(i int) error {
    if i == 5 {
        return nil
    }

    return errors.New("failed")
})
// 2
// error "failed"

iter, err := lo.Attempt(0, func(i int) error {
    if i &amp;lt; 42 {
        return errors.New("failed")
    }

    return nil
})
// 43
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look at &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/3ggJZ2ZKcMj"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;AttemptWithDelay&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output, with a pause between each call. Returns either the caught error or nil.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;iter, duration, err := lo.AttemptWithDelay(5, 2*time.Second, func(i int, duration time.Duration) error {
    if i == 2 {
        return nil
    }

    return errors.New("failed")
})
// 3
// ~ 4 seconds
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look at &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tVs6CygC7m1"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;AttemptWhile&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output. Returns either the caught error or nil, along with a bool value to determine whether the function should be invoked again. It will terminate the invoke immediately if the second return value is false.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count1, err1 := lo.AttemptWhile(5, func(i int) (error, bool) {
    err := doMockedHTTPRequest(i)
    if err != nil {
        if errors.Is(err, ErrBadRequest) { // let's assume ErrBadRequest is a critical error that needs to terminate the invoke
            return err, false // flag the second return value as false to terminate the invoke
        }

        return err, true
    }

    return nil, false
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look at &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/1VS7HxlYMOG"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;AttemptWhileWithDelay&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output, with a pause between each call. Returns either the caught error or nil, along with a bool value to determine whether the function should be invoked again. It will terminate the invoke immediately if the second return value is false.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count1, time1, err1 := lo.AttemptWhileWithDelay(5, time.Millisecond, func(i int, d time.Duration) (error, bool) {
    err := doMockedHTTPRequest(i)
    if err != nil {
        if errors.Is(err, ErrBadRequest) { // let's assume ErrBadRequest is a critical error that needs to terminate the invoke
            return err, false // flag the second return value as false to terminate the invoke
        }

        return err, true
    }

    return nil, false
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look at &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mhufUjJfLEF"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Debounce&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;NewDebounce&lt;/code&gt; creates a debounced instance that delays invoking functions given until after wait milliseconds have elapsed, until &lt;code&gt;cancel&lt;/code&gt; is called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func() {
    println("Called once after 100ms when debounce stopped invoking!")
}

debounce, cancel := lo.NewDebounce(100 * time.Millisecond, f)
for j := 0; j &amp;lt; 10; j++ {
    debounce()
}

time.Sleep(1 * time.Second)
cancel()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mz32VMK2nqe"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DebounceBy&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;NewDebounceBy&lt;/code&gt; creates a debounced instance for each distinct key, that delays invoking functions given until after wait milliseconds have elapsed, until &lt;code&gt;cancel&lt;/code&gt; is called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func(key string, count int) {
    println(key + ": Called once after 100ms when debounce stopped invoking!")
}

debounce, cancel := lo.NewDebounceBy(100 * time.Millisecond, f)
for j := 0; j &amp;lt; 10; j++ {
    debounce("first key")
    debounce("second key")
}

time.Sleep(1 * time.Second)
cancel("first key")
cancel("second key")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/d3Vpt6pxhY8"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Throttle&lt;/h3&gt; 
&lt;p&gt;Creates a throttled instance that invokes given functions only once in every interval.&lt;/p&gt; 
&lt;p&gt;This returns 2 functions, First one is throttled function and Second one is a function to reset interval.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func() {
	println("Called once in every 100ms")
}

throttle, reset := lo.NewThrottle(100 * time.Millisecond, f)

for j := 0; j &amp;lt; 10; j++ {
	throttle()
	time.Sleep(30 * time.Millisecond)
}

reset()
throttle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;NewThrottleWithCount&lt;/code&gt; is NewThrottle with count limit, throttled function will be invoked count times in every interval.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func() {
	println("Called three times in every 100ms")
}

throttle, reset := lo.NewThrottleWithCount(100 * time.Millisecond, f)

for j := 0; j &amp;lt; 10; j++ {
	throttle()
	time.Sleep(30 * time.Millisecond)
}

reset()
throttle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;NewThrottleBy&lt;/code&gt; and &lt;code&gt;NewThrottleByWithCount&lt;/code&gt; are NewThrottle with sharding key, throttled function will be invoked count times in every interval.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func(key string) {
	println(key, "Called three times in every 100ms")
}

throttle, reset := lo.NewThrottleByWithCount(100 * time.Millisecond, f)

for j := 0; j &amp;lt; 10; j++ {
	throttle("foo")
	time.Sleep(30 * time.Millisecond)
}

reset()
throttle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Synchronize&lt;/h3&gt; 
&lt;p&gt;Wraps the underlying callback in a mutex. It receives an optional mutex.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;s := lo.Synchronize()

for i := 0; i &amp;lt; 10; i++ {
    go s.Do(func () {
        println("will be called sequentially")
    })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is equivalent to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mu := sync.Mutex{}

func foobar() {
    mu.Lock()
    defer mu.Unlock()

    // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Async&lt;/h3&gt; 
&lt;p&gt;Executes a function in a goroutine and returns the result in a channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := lo.Async(func() error { time.Sleep(10 * time.Second); return nil })
// chan error (nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Async{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;Executes a function in a goroutine and returns the result in a channel. For functions with multiple return values, the results will be returned as a tuple inside the channel. For functions without return, struct{} will be returned in the channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := lo.Async0(func() { time.Sleep(10 * time.Second) })
// chan struct{}

ch := lo.Async1(func() int {
  time.Sleep(10 * time.Second);
  return 42
})
// chan int (42)

ch := lo.Async2(func() (int, string) {
  time.Sleep(10 * time.Second);
  return 42, "Hello"
})
// chan lo.Tuple2[int, string] ({42, "Hello"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Transaction&lt;/h3&gt; 
&lt;p&gt;Implements a Saga pattern.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;transaction := NewTransaction().
    Then(
        func(state int) (int, error) {
            fmt.Println("step 1")
            return state + 10, nil
        },
        func(state int) int {
            fmt.Println("rollback 1")
            return state - 10
        },
    ).
    Then(
        func(state int) (int, error) {
            fmt.Println("step 2")
            return state + 15, nil
        },
        func(state int) int {
            fmt.Println("rollback 2")
            return state - 15
        },
    ).
    Then(
        func(state int) (int, error) {
            fmt.Println("step 3")

            if true {
                return state, errors.New("error")
            }

            return state + 42, nil
        },
        func(state int) int {
            fmt.Println("rollback 3")
            return state - 42
        },
    )

_, _ = transaction.Process(-5)

// Output:
// step 1
// step 2
// step 3
// rollback 2
// rollback 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WaitFor&lt;/h3&gt; 
&lt;p&gt;Runs periodically until a condition is validated.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;alwaysTrue := func(i int) bool { return true }
alwaysFalse := func(i int) bool { return false }
laterTrue := func(i int) bool {
    return i &amp;gt; 5
}

iterations, duration, ok := lo.WaitFor(alwaysTrue, 10*time.Millisecond, 2 * time.Millisecond)
// 1
// 1ms
// true

iterations, duration, ok := lo.WaitFor(alwaysFalse, 10*time.Millisecond, time.Millisecond)
// 10
// 10ms
// false

iterations, duration, ok := lo.WaitFor(laterTrue, 10*time.Millisecond, time.Millisecond)
// 7
// 7ms
// true

iterations, duration, ok := lo.WaitFor(laterTrue, 10*time.Millisecond, 5*time.Millisecond)
// 2
// 10ms
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/t_wTDmubbK3"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;WaitForWithContext&lt;/h3&gt; 
&lt;p&gt;Runs periodically until a condition is validated or context is invalid.&lt;/p&gt; 
&lt;p&gt;The condition receives also the context, so it can invalidate the process in the condition checker&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ctx := context.Background()

alwaysTrue := func(_ context.Context, i int) bool { return true }
alwaysFalse := func(_ context.Context, i int) bool { return false }
laterTrue := func(_ context.Context, i int) bool {
    return i &amp;gt;= 5
}

iterations, duration, ok := lo.WaitForWithContext(ctx, alwaysTrue, 10*time.Millisecond, 2 * time.Millisecond)
// 1
// 1ms
// true

iterations, duration, ok := lo.WaitForWithContext(ctx, alwaysFalse, 10*time.Millisecond, time.Millisecond)
// 10
// 10ms
// false

iterations, duration, ok := lo.WaitForWithContext(ctx, laterTrue, 10*time.Millisecond, time.Millisecond)
// 5
// 5ms
// true

iterations, duration, ok := lo.WaitForWithContext(ctx, laterTrue, 10*time.Millisecond, 5*time.Millisecond)
// 2
// 10ms
// false

expiringCtx, cancel := context.WithTimeout(ctx, 5*time.Millisecond)
iterations, duration, ok := lo.WaitForWithContext(expiringCtx, alwaysFalse, 100*time.Millisecond, time.Millisecond)
// 5
// 5.1ms
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/t_wTDmubbK3"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Validate&lt;/h3&gt; 
&lt;p&gt;Helper function that creates an error when a condition is not met.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := []string{"a"}
val := lo.Validate(len(slice) == 0, "Slice should be empty but contains %v", slice)
// error("Slice should be empty but contains [a]")

slice := []string{}
val := lo.Validate(len(slice) == 0, "Slice should be empty but contains %v", slice)
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/vPyh51XpCBt"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Must&lt;/h3&gt; 
&lt;p&gt;Wraps a function call and panics if second argument is &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, returns the value otherwise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;val := lo.Must(time.Parse("2006-01-02", "2022-01-15"))
// 2022-01-15

val := lo.Must(time.Parse("2006-01-02", "bad-value"))
// panics
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TMoWrRp3DyC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Must{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;Must* has the same behavior as Must but returns multiple values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func example0() (error)
func example1() (int, error)
func example2() (int, string, error)
func example3() (int, string, time.Date, error)
func example4() (int, string, time.Date, bool, error)
func example5() (int, string, time.Date, bool, float64, error)
func example6() (int, string, time.Date, bool, float64, byte, error)

lo.Must0(example0())
val1 := lo.Must1(example1())    // alias to Must
val1, val2 := lo.Must2(example2())
val1, val2, val3 := lo.Must3(example3())
val1, val2, val3, val4 := lo.Must4(example4())
val1, val2, val3, val4, val5 := lo.Must5(example5())
val1, val2, val3, val4, val5, val6 := lo.Must6(example6())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can wrap functions like &lt;code&gt;func (...) (..., ok bool)&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// math.Signbit(float64) bool
lo.Must0(math.Signbit(v))

// bytes.Cut([]byte,[]byte) ([]byte, []byte, bool)
before, after := lo.Must2(bytes.Cut(s, sep))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can give context to the panic message by adding some printf-like arguments.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;val, ok := lo.Find(myString, func(i string) bool {
    return i == requiredChar
})
lo.Must0(ok, "'%s' must always contain '%s'", myString, requiredChar)

list := []int{0, 1, 2}
item := 5
lo.Must0(lo.Contains(list, item), "'%s' must always contain '%s'", list, item)
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TMoWrRp3DyC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Try&lt;/h3&gt; 
&lt;p&gt;Calls the function and returns false in case of error and panic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Try(func() error {
    panic("error")
    return nil
})
// false

ok := lo.Try(func() error {
    return nil
})
// true

ok := lo.Try(func() error {
    return errors.New("error")
})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mTyyWUvn9u4"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Try{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;Try&lt;/code&gt;, but the callback returns 2 variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Try2(func() (string, error) {
    panic("error")
    return "", nil
})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mTyyWUvn9u4"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryOr&lt;/h3&gt; 
&lt;p&gt;Calls the function and return a default value in case of error and on panic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, ok := lo.TryOr(func() (string, error) {
    panic("error")
    return "hello", nil
}, "world")
// world
// false

str, ok := lo.TryOr(func() error {
    return "hello", nil
}, "world")
// hello
// true

str, ok := lo.TryOr(func() error {
    return "hello", errors.New("error")
}, "world")
// world
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/B4F7Wg2Zh9X"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryOr{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;TryOr&lt;/code&gt;, but the callback returns &lt;code&gt;X&lt;/code&gt; variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, nbr, ok := lo.TryOr2(func() (string, int, error) {
    panic("error")
    return "hello", 42, nil
}, "world", 21)
// world
// 21
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/B4F7Wg2Zh9X"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryWithErrorValue&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;Try&lt;/code&gt;, but also returns the value passed to panic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;err, ok := lo.TryWithErrorValue(func() error {
    panic("error")
    return nil
})
// "error", false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Kc7afQIT2Fs"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryCatch&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;Try&lt;/code&gt;, but calls the catch function in case of error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;caught := false

ok := lo.TryCatch(func() error {
    panic("error")
    return nil
}, func() {
    caught = true
})
// false
// caught == true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/PnOON-EqBiU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryCatchWithErrorValue&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;TryWithErrorValue&lt;/code&gt;, but calls the catch function in case of error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;caught := false

ok := lo.TryCatchWithErrorValue(func() error {
    panic("error")
    return nil
}, func(val any) {
    caught = val == "error"
})
// false
// caught == true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/8Pc9gwX_GZO"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ErrorsAs&lt;/h3&gt; 
&lt;p&gt;A shortcut for:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;err := doSomething()

var rateLimitErr *RateLimitError
if ok := errors.As(err, &amp;amp;rateLimitErr); ok {
    // retry later
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;single line &lt;code&gt;lo&lt;/code&gt; helper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;err := doSomething()

if rateLimitErr, ok := lo.ErrorsAs[*RateLimitError](err); ok {
    // retry later
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/8wk5rH8UfrE"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Assert&lt;/h3&gt; 
&lt;p&gt;Does nothing when the condition is &lt;code&gt;true&lt;/code&gt;, otherwise it panics with an optional message.&lt;/p&gt; 
&lt;p&gt;Think twice before using it, given that &lt;a href="https://go.dev/doc/faq#assertions"&gt;Go intentionally omits assertions from its standard library&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;age := getUserAge()

lo.Assert(age &amp;gt;= 15)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;age := getUserAge()

lo.Assert(age &amp;gt;= 15, "user age must be &amp;gt;= 15")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Xv8LLKBMNwI"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Assertf&lt;/h3&gt; 
&lt;p&gt;Like &lt;code&gt;Assert&lt;/code&gt;, but with &lt;code&gt;fmt.Printf&lt;/code&gt;-like formatting.&lt;/p&gt; 
&lt;p&gt;Think twice before using it, given that &lt;a href="https://go.dev/doc/faq#assertions"&gt;Go intentionally omits assertions from its standard library&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;age := getUserAge()

lo.Assertf(age &amp;gt;= 15, "user age must be &amp;gt;= 15, got %d", age)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TVPEmVcyrdY"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h2&gt;🛩 Benchmark&lt;/h2&gt; 
&lt;p&gt;We executed a simple benchmark with a dead-simple &lt;code&gt;lo.Map&lt;/code&gt; loop:&lt;/p&gt; 
&lt;p&gt;See the full implementation &lt;a href="https://raw.githubusercontent.com/samber/lo/master/map_benchmark_test.go"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;_ = lo.Map[int64](arr, func(x int64, i int) string {
    return strconv.FormatInt(x, 10)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Here is a comparison between &lt;code&gt;lo.Map&lt;/code&gt;, &lt;code&gt;lop.Map&lt;/code&gt;, &lt;code&gt;go-funk&lt;/code&gt; library and a simple Go &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go test -benchmem -bench ./...
goos: linux
goarch: amd64
pkg: github.com/samber/lo
cpu: Intel(R) Core(TM) i5-7267U CPU @ 3.10GHz
cpu: Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz
BenchmarkMap/lo.Map-8         	       8	 132728237 ns/op	39998945 B/op	 1000002 allocs/op
BenchmarkMap/lop.Map-8        	       2	 503947830 ns/op	119999956 B/op	 3000007 allocs/op
BenchmarkMap/reflect-8        	       2	 826400560 ns/op	170326512 B/op	 4000042 allocs/op
BenchmarkMap/for-8            	       9	 126252954 ns/op	39998674 B/op	 1000001 allocs/op
PASS
ok  	github.com/samber/lo	6.657s
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lo.Map&lt;/code&gt; is way faster (x7) than &lt;code&gt;go-funk&lt;/code&gt;, a reflection-based Map implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lo.Map&lt;/code&gt; has the same allocation profile as &lt;code&gt;for&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lo.Map&lt;/code&gt; is 4% slower than &lt;code&gt;for&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lop.Map&lt;/code&gt; is slower than &lt;code&gt;lo.Map&lt;/code&gt; because it implies more memory allocation and locks. &lt;code&gt;lop.Map&lt;/code&gt; is useful for long-running callbacks, such as i/o bound processing.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;for&lt;/code&gt; beats other implementations for memory and CPU.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ping me on Twitter &lt;a href="https://twitter.com/samuelberthe"&gt;@samuelberthe&lt;/a&gt; (DMs, mentions, whatever :))&lt;/li&gt; 
 &lt;li&gt;Fork the &lt;a href="https://github.com/samber/lo"&gt;project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fix &lt;a href="https://github.com/samber/lo/issues"&gt;open issues&lt;/a&gt; or request new features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Don't hesitate ;)&lt;/p&gt; 
&lt;p&gt;Helper naming: helpers must be self-explanatory and respect standards (other languages, libraries...). Feel free to suggest many names in your contributions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install some dev dependencies
make tools

# Run tests
make test
# or
make watch-test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;👤 Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://contrib.rocks/image?repo=samber/lo" alt="Contributors" /&gt;&lt;/p&gt; 
&lt;h2&gt;💫 Show your support&lt;/h2&gt; 
&lt;p&gt;Give a ⭐️ if this project helped you!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/sponsors/samber"&gt;&lt;img src="https://img.shields.io/github/sponsors/samber?style=for-the-badge" alt="GitHub Sponsors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📝 License&lt;/h2&gt; 
&lt;p&gt;Copyright © 2022 &lt;a href="https://github.com/samber"&gt;Samuel Berthe&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project is under &lt;a href="https://raw.githubusercontent.com/samber/lo/master/LICENSE"&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rclone/rclone</title>
      <link>https://github.com/rclone/rclone</link>
      <description>&lt;p&gt;"rsync for cloud storage" - Google Drive, S3, Dropbox, Backblaze B2, One Drive, Swift, Hubic, Wasabi, Google Cloud Storage, Azure Blob, Azure Files, Yandex Files&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://rclone.org/#gh-light-mode-only"&gt;&lt;img src="https://rclone.org/img/logo_on_light__horizontal_color.svg?sanitize=true" width="50%" alt="rclone logo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- markdownlint-disable-next-line no-inline-html --&gt; 
&lt;p&gt;&lt;a href="https://rclone.org/#gh-dark-mode-only"&gt;&lt;img src="https://rclone.org/img/logo_on_dark__horizontal_color.svg?sanitize=true" width="50%" alt="rclone logo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://rclone.org"&gt;Website&lt;/a&gt; | &lt;a href="https://rclone.org/docs/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://rclone.org/downloads/"&gt;Download&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/rclone/rclone/master/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt; | &lt;a href="https://rclone.org/changelog/"&gt;Changelog&lt;/a&gt; | &lt;a href="https://rclone.org/install/"&gt;Installation&lt;/a&gt; | &lt;a href="https://forum.rclone.org/"&gt;Forum&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rclone/rclone/actions?query=workflow%3Abuild"&gt;&lt;img src="https://github.com/rclone/rclone/workflows/build/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/rclone/rclone"&gt;&lt;img src="https://goreportcard.com/badge/github.com/rclone/rclone" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/rclone/rclone"&gt;&lt;img src="https://godoc.org/github.com/rclone/rclone?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/rclone/rclone"&gt;&lt;img src="https://img.shields.io/docker/pulls/rclone/rclone" alt="Docker Pulls" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Rclone&lt;/h1&gt; 
&lt;p&gt;Rclone &lt;em&gt;("rsync for cloud storage")&lt;/em&gt; is a command-line program to sync files and directories to and from different cloud storage providers.&lt;/p&gt; 
&lt;h2&gt;Storage providers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;1Fichier &lt;a href="https://rclone.org/fichier/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Akamai Netstorage &lt;a href="https://rclone.org/netstorage/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Alibaba Cloud (Aliyun) Object Storage System (OSS) &lt;a href="https://rclone.org/s3/#alibaba-oss"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Amazon S3 &lt;a href="https://rclone.org/s3/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ArvanCloud Object Storage (AOS) &lt;a href="https://rclone.org/s3/#arvan-cloud-object-storage-aos"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Backblaze B2 &lt;a href="https://rclone.org/b2/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Box &lt;a href="https://rclone.org/box/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ceph &lt;a href="https://rclone.org/s3/#ceph"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;China Mobile Ecloud Elastic Object Storage (EOS) &lt;a href="https://rclone.org/s3/#china-mobile-ecloud-eos"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Cloudflare R2 &lt;a href="https://rclone.org/s3/#cloudflare-r2"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Citrix ShareFile &lt;a href="https://rclone.org/sharefile/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;DigitalOcean Spaces &lt;a href="https://rclone.org/s3/#digitalocean-spaces"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Digi Storage &lt;a href="https://rclone.org/koofr/#digi-storage"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dreamhost &lt;a href="https://rclone.org/s3/#dreamhost"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dropbox &lt;a href="https://rclone.org/dropbox/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Enterprise File Fabric &lt;a href="https://rclone.org/filefabric/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Exaba &lt;a href="https://rclone.org/s3/#exaba"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fastmail Files &lt;a href="https://rclone.org/webdav/#fastmail-files"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;FileLu &lt;a href="https://rclone.org/filelu/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Files.com &lt;a href="https://rclone.org/filescom/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;FlashBlade &lt;a href="https://rclone.org/s3/#pure-storage-flashblade"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;FTP &lt;a href="https://rclone.org/ftp/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GoFile &lt;a href="https://rclone.org/gofile/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google Cloud Storage &lt;a href="https://rclone.org/googlecloudstorage/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google Drive &lt;a href="https://rclone.org/drive/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google Photos &lt;a href="https://rclone.org/googlephotos/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HDFS (Hadoop Distributed Filesystem) &lt;a href="https://rclone.org/hdfs/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hetzner Object Storage &lt;a href="https://rclone.org/s3/#hetzner"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hetzner Storage Box &lt;a href="https://rclone.org/sftp/#hetzner-storage-box"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HiDrive &lt;a href="https://rclone.org/hidrive/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HTTP &lt;a href="https://rclone.org/http/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Huawei Cloud Object Storage Service(OBS) &lt;a href="https://rclone.org/s3/#huawei-obs"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;iCloud Drive &lt;a href="https://rclone.org/iclouddrive/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ImageKit &lt;a href="https://rclone.org/imagekit/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Internet Archive &lt;a href="https://rclone.org/internetarchive/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jottacloud &lt;a href="https://rclone.org/jottacloud/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;IBM COS S3 &lt;a href="https://rclone.org/s3/#ibm-cos-s3"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Intercolo Object Storage &lt;a href="https://rclone.org/s3/#intercolo"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;IONOS Cloud &lt;a href="https://rclone.org/s3/#ionos"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Koofr &lt;a href="https://rclone.org/koofr/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Leviia Object Storage &lt;a href="https://rclone.org/s3/#leviia"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Liara Object Storage &lt;a href="https://rclone.org/s3/#liara-object-storage"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Linkbox &lt;a href="https://rclone.org/linkbox"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Linode Object Storage &lt;a href="https://rclone.org/s3/#linode"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Magalu Object Storage &lt;a href="https://rclone.org/s3/#magalu"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mail.ru Cloud &lt;a href="https://rclone.org/mailru/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Memset Memstore &lt;a href="https://rclone.org/swift/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;MEGA &lt;a href="https://rclone.org/mega/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;MEGA S4 Object Storage &lt;a href="https://rclone.org/s3/#mega"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Memory &lt;a href="https://rclone.org/memory/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Microsoft Azure Blob Storage &lt;a href="https://rclone.org/azureblob/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Microsoft Azure Files Storage &lt;a href="https://rclone.org/azurefiles/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Microsoft OneDrive &lt;a href="https://rclone.org/onedrive/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Minio &lt;a href="https://rclone.org/s3/#minio"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nextcloud &lt;a href="https://rclone.org/webdav/#nextcloud"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Blomp Cloud Storage &lt;a href="https://rclone.org/swift/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OpenDrive &lt;a href="https://rclone.org/opendrive/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OpenStack Swift &lt;a href="https://rclone.org/swift/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Oracle Cloud Storage &lt;a href="https://rclone.org/swift/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Oracle Object Storage &lt;a href="https://rclone.org/oracleobjectstorage/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Outscale &lt;a href="https://rclone.org/s3/#outscale"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OVHcloud Object Storage (Swift) &lt;a href="https://rclone.org/swift/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OVHcloud Object Storage (S3-compatible) &lt;a href="https://rclone.org/s3/#ovhcloud"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ownCloud &lt;a href="https://rclone.org/webdav/#owncloud"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;pCloud &lt;a href="https://rclone.org/pcloud/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Petabox &lt;a href="https://rclone.org/s3/#petabox"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PikPak &lt;a href="https://rclone.org/pikpak/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pixeldrain &lt;a href="https://rclone.org/pixeldrain/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;premiumize.me &lt;a href="https://rclone.org/premiumizeme/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;put.io &lt;a href="https://rclone.org/putio/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Proton Drive &lt;a href="https://rclone.org/protondrive/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;QingStor &lt;a href="https://rclone.org/qingstor/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Qiniu Cloud Object Storage (Kodo) &lt;a href="https://rclone.org/s3/#qiniu"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rabata Cloud Storage &lt;a href="https://rclone.org/s3/#Rabata"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Quatrix &lt;a href="https://rclone.org/quatrix/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rackspace Cloud Files &lt;a href="https://rclone.org/swift/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RackCorp Object Storage &lt;a href="https://rclone.org/s3/#RackCorp"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;rsync.net &lt;a href="https://rclone.org/sftp/#rsync-net"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Scaleway &lt;a href="https://rclone.org/s3/#scaleway"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Seafile &lt;a href="https://rclone.org/seafile/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Seagate Lyve Cloud &lt;a href="https://rclone.org/s3/#lyve"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SeaweedFS &lt;a href="https://rclone.org/s3/#seaweedfs"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Selectel Object Storage &lt;a href="https://rclone.org/s3/#selectel"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Servercore Object Storage &lt;a href="https://rclone.org/s3/#servercore"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SFTP &lt;a href="https://rclone.org/sftp/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SMB / CIFS &lt;a href="https://rclone.org/smb/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Spectra Logic &lt;a href="https://rclone.org/s3/#spectralogic"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;StackPath &lt;a href="https://rclone.org/s3/#stackpath"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Storj &lt;a href="https://rclone.org/storj/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SugarSync &lt;a href="https://rclone.org/sugarsync/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Synology C2 Object Storage &lt;a href="https://rclone.org/s3/#synology-c2"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tencent Cloud Object Storage (COS) &lt;a href="https://rclone.org/s3/#tencent-cos"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Uloz.to &lt;a href="https://rclone.org/ulozto/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Wasabi &lt;a href="https://rclone.org/s3/#wasabi"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WebDAV &lt;a href="https://rclone.org/webdav/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Yandex Disk &lt;a href="https://rclone.org/yandex/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Zoho WorkDrive &lt;a href="https://rclone.org/zoho/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Zata.ai &lt;a href="https://rclone.org/s3/#Zata"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The local filesystem &lt;a href="https://rclone.org/local/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see &lt;a href="https://rclone.org/overview/"&gt;the full list of all storage providers and their features&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Virtual storage providers&lt;/h3&gt; 
&lt;p&gt;These backends adapt or modify other storage providers&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Alias: rename existing remotes &lt;a href="https://rclone.org/alias/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Cache: cache remotes (DEPRECATED) &lt;a href="https://rclone.org/cache/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chunker: split large files &lt;a href="https://rclone.org/chunker/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Combine: combine multiple remotes into a directory tree &lt;a href="https://rclone.org/combine/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Compress: compress files &lt;a href="https://rclone.org/compress/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Crypt: encrypt files &lt;a href="https://rclone.org/crypt/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hasher: hash files &lt;a href="https://rclone.org/hasher/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Union: join multiple remotes to work together &lt;a href="https://rclone.org/union/"&gt;&lt;span&gt;📄&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;MD5/SHA-1 hashes checked at all times for file integrity&lt;/li&gt; 
 &lt;li&gt;Timestamps preserved on files&lt;/li&gt; 
 &lt;li&gt;Partial syncs supported on a whole file basis&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/commands/rclone_copy/"&gt;Copy&lt;/a&gt; mode to just copy new/changed files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/commands/rclone_sync/"&gt;Sync&lt;/a&gt; (one way) mode to make a directory identical&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/bisync/"&gt;Bisync&lt;/a&gt; (two way) to keep two directories in sync bidirectionally&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/commands/rclone_check/"&gt;Check&lt;/a&gt; mode to check for file hash equality&lt;/li&gt; 
 &lt;li&gt;Can sync to and from network, e.g. two different cloud accounts&lt;/li&gt; 
 &lt;li&gt;Optional large file chunking (&lt;a href="https://rclone.org/chunker/"&gt;Chunker&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Optional transparent compression (&lt;a href="https://rclone.org/compress/"&gt;Compress&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Optional encryption (&lt;a href="https://rclone.org/crypt/"&gt;Crypt&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Optional FUSE mount (&lt;a href="https://rclone.org/commands/rclone_mount/"&gt;rclone mount&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Multi-threaded downloads to local disk&lt;/li&gt; 
 &lt;li&gt;Can &lt;a href="https://rclone.org/commands/rclone_serve/"&gt;serve&lt;/a&gt; local or remote files over HTTP/WebDAV/FTP/SFTP/DLNA&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation &amp;amp; documentation&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://rclone.org/"&gt;rclone website&lt;/a&gt; for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/install/"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/docs/"&gt;Documentation &amp;amp; configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/changelog/"&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/faq/"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/overview/"&gt;Storage providers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://forum.rclone.org/"&gt;Forum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;...and more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Downloads&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://rclone.org/downloads/"&gt;https://rclone.org/downloads/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This is free software under the terms of the MIT license (check the &lt;a href="https://raw.githubusercontent.com/rclone/rclone/master/COPYING"&gt;COPYING file&lt;/a&gt; included in this package).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker/compose</title>
      <link>https://github.com/docker/compose</link>
      <description>&lt;p&gt;Define and run multi-container applications with Docker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/docker/compose/main/#docker-compose-v2"&gt;Docker Compose v2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/docker/compose/main/#where-to-get-docker-compose"&gt;Where to get Docker Compose&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/docker/compose/main/#windows-and-macos"&gt;Windows and macOS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/docker/compose/main/#linux"&gt;Linux&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/docker/compose/main/#quick-start"&gt;Quick Start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/docker/compose/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/docker/compose/main/#legacy"&gt;Legacy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Docker Compose v2&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/docker/compose/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/docker/compose.svg?style=flat-square" alt="GitHub release" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/docker/compose/v2"&gt;&lt;img src="https://img.shields.io/badge/go.dev-docs-007d9c?style=flat-square&amp;amp;logo=go&amp;amp;logoColor=white" alt="PkgGoDev" /&gt;&lt;/a&gt; &lt;a href="https://github.com/docker/compose/actions?query=workflow%3Aci"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/docker/compose/ci.yml?label=ci&amp;amp;logo=github&amp;amp;style=flat-square" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/docker/compose/v2"&gt;&lt;img src="https://goreportcard.com/badge/github.com/docker/compose/v2?style=flat-square" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/docker/compose"&gt;&lt;img src="https://codecov.io/gh/docker/compose/branch/main/graph/badge.svg?token=HP3K4Y4ctu" alt="Codecov" /&gt;&lt;/a&gt; &lt;a href="https://api.securityscorecards.dev/projects/github.com/docker/compose"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/docker/compose/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;img src="https://raw.githubusercontent.com/docker/compose/main/logo.png?raw=true" alt="Docker Compose" title="Docker Compose Logo" /&gt;&lt;/p&gt; 
&lt;p&gt;Docker Compose is a tool for running multi-container applications on Docker defined using the &lt;a href="https://compose-spec.io"&gt;Compose file format&lt;/a&gt;. A Compose file is used to define how one or more containers that make up your application are configured. Once you have a Compose file, you can create and start your application with a single command: &lt;code&gt;docker compose up&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: About Docker Swarm Docker Swarm used to rely on the legacy compose file format but did not adopted the compose specification so is missing some of the recent enhancements in the compose syntax. After &lt;a href="https://www.mirantis.com/software/swarm/"&gt;acquisition by Mirantis&lt;/a&gt; swarm isn't maintained by Docker Inc, and as such some Docker Compose features aren't accessible to swarm users.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Where to get Docker Compose&lt;/h1&gt; 
&lt;h3&gt;Windows and macOS&lt;/h3&gt; 
&lt;p&gt;Docker Compose is included in &lt;a href="https://www.docker.com/products/docker-desktop/"&gt;Docker Desktop&lt;/a&gt; for Windows and macOS.&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;You can download Docker Compose binaries from the &lt;a href="https://github.com/docker/compose/releases"&gt;release page&lt;/a&gt; on this repository.&lt;/p&gt; 
&lt;p&gt;Rename the relevant binary for your OS to &lt;code&gt;docker-compose&lt;/code&gt; and copy it to &lt;code&gt;$HOME/.docker/cli-plugins&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Or copy it into one of these folders to install it system-wide:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;/usr/local/lib/docker/cli-plugins&lt;/code&gt; OR &lt;code&gt;/usr/local/libexec/docker/cli-plugins&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/usr/lib/docker/cli-plugins&lt;/code&gt; OR &lt;code&gt;/usr/libexec/docker/cli-plugins&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(might require making the downloaded file executable with &lt;code&gt;chmod +x&lt;/code&gt;)&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Using Docker Compose is a three-step process:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Define your app's environment with a &lt;code&gt;Dockerfile&lt;/code&gt; so it can be reproduced anywhere.&lt;/li&gt; 
 &lt;li&gt;Define the services that make up your app in &lt;code&gt;compose.yaml&lt;/code&gt; so they can be run together in an isolated environment.&lt;/li&gt; 
 &lt;li&gt;Lastly, run &lt;code&gt;docker compose up&lt;/code&gt; and Compose will start and run your entire app.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;A Compose file looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/code
  redis:
    image: redis
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Want to help develop Docker Compose? Check out our &lt;a href="https://raw.githubusercontent.com/docker/compose/main/CONTRIBUTING.md"&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you find an issue, please report it on the &lt;a href="https://github.com/docker/compose/issues/new/choose"&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Legacy&lt;/h2&gt; 
&lt;p&gt;The Python version of Compose is available under the &lt;code&gt;v1&lt;/code&gt; &lt;a href="https://github.com/docker/compose/tree/v1"&gt;branch&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>binwiederhier/ntfy</title>
      <link>https://github.com/binwiederhier/ntfy</link>
      <description>&lt;p&gt;Send push notifications to your phone or desktop using PUT/POST&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/binwiederhier/ntfy/main/web/public/static/images/ntfy.png" alt="ntfy" /&gt;&lt;/p&gt; 
&lt;h1&gt;ntfy.sh | Send push notifications to your phone or desktop via PUT/POST&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/binwiederhier/ntfy/releases/latest"&gt;&lt;img src="https://img.shields.io/github/release/binwiederhier/ntfy.svg?color=success&amp;amp;style=flat-square" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/heckel.io/ntfy/v2"&gt;&lt;img src="https://pkg.go.dev/badge/heckel.io/ntfy.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt; &lt;a href="https://github.com/binwiederhier/ntfy/actions"&gt;&lt;img src="https://github.com/binwiederhier/ntfy/workflows/test/badge.svg?sanitize=true" alt="Tests" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/binwiederhier/ntfy"&gt;&lt;img src="https://goreportcard.com/badge/github.com/binwiederhier/ntfy" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/binwiederhier/ntfy"&gt;&lt;img src="https://codecov.io/gh/binwiederhier/ntfy/branch/main/graph/badge.svg?token=A597KQ463G" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/cT7ECsZj9w"&gt;&lt;img src="https://img.shields.io/discord/874398661709295626?label=Discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/#ntfy:matrix.org"&gt;&lt;img src="https://img.shields.io/matrix/ntfy:matrix.org?label=Matrix" alt="Matrix" /&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/#ntfy-space:matrix.org"&gt;&lt;img src="https://img.shields.io/matrix/ntfy-space:matrix.org?label=Matrix+space" alt="Matrix space" /&gt;&lt;/a&gt; &lt;a href="https://ntfy.statuspage.io/"&gt;&lt;img src="https://healthchecks.io/badge/68b65976-b3b0-4102-aec9-980921/kcoEgrLY.svg?sanitize=true" alt="Healthcheck" /&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/binwiederhier/ntfy"&gt;&lt;img src="https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod" alt="Gitpod" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ntfy&lt;/strong&gt; (pronounced "&lt;em&gt;notify&lt;/em&gt;") is a simple HTTP-based &lt;a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern"&gt;pub-sub&lt;/a&gt; notification service. With ntfy, you can &lt;strong&gt;send notifications to your phone or desktop via scripts&lt;/strong&gt; from any computer, &lt;strong&gt;without having to sign up or pay any fees&lt;/strong&gt;. If you'd like to run your own instance of the service, you can easily do so since ntfy is open source.&lt;/p&gt; 
&lt;p&gt;You can access the free version of ntfy at &lt;strong&gt;&lt;a href="https://ntfy.sh"&gt;ntfy.sh&lt;/a&gt;&lt;/strong&gt;. There is also an &lt;a href="https://github.com/binwiederhier/ntfy-android"&gt;open-source Android app&lt;/a&gt; available on &lt;a href="https://play.google.com/store/apps/details?id=io.heckel.ntfy"&gt;Google Play&lt;/a&gt; or &lt;a href="https://f-droid.org/en/packages/io.heckel.ntfy/"&gt;F-Droid&lt;/a&gt;, as well as an &lt;a href="https://github.com/binwiederhier/ntfy-ios"&gt;open source iOS app&lt;/a&gt; available on the &lt;a href="https://apps.apple.com/us/app/ntfy/id1625396347"&gt;App Store&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt; &lt;img src="https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-curl.png" height="180" /&gt; &lt;img src="https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-web-detail.png" height="180" /&gt; &lt;img src="https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-phone-main.jpg" height="180" /&gt; &lt;img src="https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-phone-detail.jpg" height="180" /&gt; &lt;img src="https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-phone-notification.jpg" height="180" /&gt; &lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://ntfy.sh/app"&gt;ntfy Pro&lt;/a&gt; 💸 🎉&lt;/h2&gt; 
&lt;p&gt;I now offer paid plans for &lt;a href="https://ntfy.sh/"&gt;ntfy.sh&lt;/a&gt; if you don't want to self-host, or you want to support the development of ntfy (→ &lt;a href="https://ntfy.sh/app"&gt;Purchase via web app&lt;/a&gt;). You can &lt;strong&gt;buy a plan for as low as $5/month&lt;/strong&gt;. You can also donate via &lt;a href="https://github.com/sponsors/binwiederhier"&gt;GitHub Sponsors&lt;/a&gt;, and &lt;a href="https://liberapay.com/ntfy"&gt;Liberapay&lt;/a&gt;. I would be very humbled by your sponsorship. ❤️&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;&lt;a href="https://ntfy.sh/docs/"&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://ntfy.sh/docs/"&gt;Getting started&lt;/a&gt; | &lt;a href="https://ntfy.sh/docs/subscribe/phone/"&gt;Android/iOS&lt;/a&gt; | &lt;a href="https://ntfy.sh/docs/publish/"&gt;API&lt;/a&gt; | &lt;a href="https://ntfy.sh/docs/install/"&gt;Install / Self-hosting&lt;/a&gt; | &lt;a href="https://ntfy.sh/docs/develop/"&gt;Building&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Chat/forum&lt;/h2&gt; 
&lt;p&gt;There are a few ways to get in touch with me and/or the rest of the community. Feel free to use any of these methods. Whatever works best for you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/cT7ECsZj9w"&gt;Discord server&lt;/a&gt; - direct chat with the community&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://matrix.to/#/#ntfy:matrix.org"&gt;Matrix room #ntfy&lt;/a&gt; (+ &lt;a href="https://matrix.to/#/#ntfy-space:matrix.org"&gt;Matrix space&lt;/a&gt;) - same chat, bridged from Discord&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/binwiederhier/ntfy/issues"&gt;GitHub issues&lt;/a&gt; - questions, features, bugs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Announcements/beta testers&lt;/h2&gt; 
&lt;p&gt;For announcements of new releases and cutting-edge beta versions, please subscribe to the &lt;a href="https://ntfy.sh/announcements"&gt;ntfy.sh/announcements&lt;/a&gt; topic. If you'd like to test the iOS app, join &lt;a href="https://testflight.apple.com/join/P1fFnAm9"&gt;TestFlight&lt;/a&gt;. For Android betas, join Discord/Matrix (I'll eventually make a testing channel in Google Play).&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;If you'd like to support the ntfy maintainers, please consider donating to &lt;a href="https://github.com/sponsors/binwiederhier"&gt;GitHub Sponsors&lt;/a&gt; or and &lt;a href="https://liberapay.com/ntfy"&gt;Liberapay&lt;/a&gt;. We would be humbled if you helped carry the server and developer account costs. Even small donations are very much appreciated.&lt;/p&gt; 
&lt;p&gt;Thank you to our commercial sponsors, who help keep the service running and the development going:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://m.do.co/c/442b929528db"&gt;&lt;img src="https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_blue.svg?sanitize=true" width="201px" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.magicbell.com/?utm_source=ntfy"&gt;&lt;img src="https://raw.githubusercontent.com/binwiederhier/ntfy/main/assets/sponsors/magicbell.png" width="180px" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;And a big fat &lt;strong&gt;Thank You&lt;/strong&gt; to the individuals who have sponsored ntfy in the past, or are still sponsoring ntfy:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/neutralinsomniac"&gt;&lt;img src="https://github.com/neutralinsomniac.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aspyct"&gt;&lt;img src="https://github.com/aspyct.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nickexyz"&gt;&lt;img src="https://github.com/nickexyz.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qcasey"&gt;&lt;img src="https://github.com/qcasey.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mckay115"&gt;&lt;img src="https://github.com/mckay115.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Salamafet"&gt;&lt;img src="https://github.com/Salamafet.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/codinghipster"&gt;&lt;img src="https://github.com/codinghipster.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/HinFort"&gt;&lt;img src="https://github.com/HinFort.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Lexevolution"&gt;&lt;img src="https://github.com/Lexevolution.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/johnnyip"&gt;&lt;img src="https://github.com/johnnyip.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/JonDerThan"&gt;&lt;img src="https://github.com/JonDerThan.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/12nick12"&gt;&lt;img src="https://github.com/12nick12.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/eanplatter"&gt;&lt;img src="https://github.com/eanplatter.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/fnoelscher"&gt;&lt;img src="https://github.com/fnoelscher.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bnorick"&gt;&lt;img src="https://github.com/bnorick.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/snh"&gt;&lt;img src="https://github.com/snh.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/hen-x"&gt;&lt;img src="https://github.com/hen-x.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/JamieGoodson"&gt;&lt;img src="https://github.com/JamieGoodson.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cremesk"&gt;&lt;img src="https://github.com/cremesk.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dangowans"&gt;&lt;img src="https://github.com/dangowans.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mnault"&gt;&lt;img src="https://github.com/mnault.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nwithan8"&gt;&lt;img src="https://github.com/nwithan8.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/peterleiser"&gt;&lt;img src="https://github.com/peterleiser.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/portothree"&gt;&lt;img src="https://github.com/portothree.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/finngreig"&gt;&lt;img src="https://github.com/finngreig.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/skrollme"&gt;&lt;img src="https://github.com/skrollme.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gergepalfi"&gt;&lt;img src="https://github.com/gergepalfi.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tonyakwei"&gt;&lt;img src="https://github.com/tonyakwei.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/crosbyh"&gt;&lt;img src="https://github.com/crosbyh.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mdlnr"&gt;&lt;img src="https://github.com/mdlnr.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/p-samuel"&gt;&lt;img src="https://github.com/p-samuel.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zugaldia"&gt;&lt;img src="https://github.com/zugaldia.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/NathanSweet"&gt;&lt;img src="https://github.com/NathanSweet.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/msdeibel"&gt;&lt;img src="https://github.com/msdeibel.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ksurl"&gt;&lt;img src="https://github.com/ksurl.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/CodingTimeDEV"&gt;&lt;img src="https://github.com/CodingTimeDEV.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Terrormixer3000"&gt;&lt;img src="https://github.com/Terrormixer3000.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/voroskoi"&gt;&lt;img src="https://github.com/voroskoi.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Nickwasused"&gt;&lt;img src="https://github.com/Nickwasused.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bahur142"&gt;&lt;img src="https://github.com/bahur142.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/vinhdizzo"&gt;&lt;img src="https://github.com/vinhdizzo.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Ge0rg3"&gt;&lt;img src="https://github.com/Ge0rg3.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/biopsin"&gt;&lt;img src="https://github.com/biopsin.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/thebino"&gt;&lt;img src="https://github.com/thebino.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sky4055"&gt;&lt;img src="https://github.com/sky4055.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/julianlam"&gt;&lt;img src="https://github.com/julianlam.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/andreapx"&gt;&lt;img src="https://github.com/andreapx.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/billycao"&gt;&lt;img src="https://github.com/billycao.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zoic21"&gt;&lt;img src="https://github.com/zoic21.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/IanKulin"&gt;&lt;img src="https://github.com/IanKulin.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Joachim256"&gt;&lt;img src="https://github.com/Joachim256.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/overtone1000"&gt;&lt;img src="https://github.com/overtone1000.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/oakd"&gt;&lt;img src="https://github.com/oakd.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/KucharczykL"&gt;&lt;img src="https://github.com/KucharczykL.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/hansbickhofe"&gt;&lt;img src="https://github.com/hansbickhofe.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/caseodilla"&gt;&lt;img src="https://github.com/caseodilla.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/0xAF"&gt;&lt;img src="https://github.com/0xAF.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/soonoo"&gt;&lt;img src="https://github.com/soonoo.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nichu42"&gt;&lt;img src="https://github.com/nichu42.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/samliebow"&gt;&lt;img src="https://github.com/samliebow.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/johman10"&gt;&lt;img src="https://github.com/johman10.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/R-Gld"&gt;&lt;img src="https://github.com/R-Gld.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FingerlessGlov3s"&gt;&lt;img src="https://github.com/FingerlessGlov3s.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Twisterado"&gt;&lt;img src="https://github.com/Twisterado.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ScrumpyJack"&gt;&lt;img src="https://github.com/ScrumpyJack.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/andrejarrell"&gt;&lt;img src="https://github.com/andrejarrell.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/oaustegard"&gt;&lt;img src="https://github.com/oaustegard.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/CreativeWarlock"&gt;&lt;img src="https://github.com/CreativeWarlock.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/darkdragon-001"&gt;&lt;img src="https://github.com/darkdragon-001.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jonathan-kosgei"&gt;&lt;img src="https://github.com/jonathan-kosgei.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/KevinWang15"&gt;&lt;img src="https://github.com/KevinWang15.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/darkmattercoder"&gt;&lt;img src="https://github.com/darkmattercoder.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bmcgonag"&gt;&lt;img src="https://github.com/bmcgonag.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/skorokithakis"&gt;&lt;img src="https://github.com/skorokithakis.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/eenturk"&gt;&lt;img src="https://github.com/eenturk.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/spirossi"&gt;&lt;img src="https://github.com/spirossi.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/teomarcdhio"&gt;&lt;img src="https://github.com/teomarcdhio.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/MarcMichalsky"&gt;&lt;img src="https://github.com/MarcMichalsky.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/LuckVintage"&gt;&lt;img src="https://github.com/LuckVintage.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/spartan"&gt;&lt;img src="https://github.com/spartan.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/alexandzors"&gt;&lt;img src="https://github.com/alexandzors.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dkramer95"&gt;&lt;img src="https://github.com/dkramer95.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/YezGotIt"&gt;&lt;img src="https://github.com/YezGotIt.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/thomasskou"&gt;&lt;img src="https://github.com/thomasskou.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/surfernv"&gt;&lt;img src="https://github.com/surfernv.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/richardleach"&gt;&lt;img src="https://github.com/richardleach.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bear"&gt;&lt;img src="https://github.com/bear.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cminter"&gt;&lt;img src="https://github.com/cminter.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bahur142"&gt;&lt;img src="https://github.com/bahur142.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/pgwiebes"&gt;&lt;img src="https://github.com/pgwiebes.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ralhei"&gt;&lt;img src="https://github.com/ralhei.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/TechMDW"&gt;&lt;img src="https://github.com/TechMDW.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ubipo"&gt;&lt;img src="https://github.com/ubipo.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tka85"&gt;&lt;img src="https://github.com/tka85.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/beekeeb"&gt;&lt;img src="https://github.com/beekeeb.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Emiliaaah"&gt;&lt;img src="https://github.com/Emiliaaah.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zark0s"&gt;&lt;img src="https://github.com/zark0s.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tomershvueli"&gt;&lt;img src="https://github.com/tomershvueli.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/CataIana"&gt;&lt;img src="https://github.com/CataIana.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ajay-actuary"&gt;&lt;img src="https://github.com/ajay-actuary.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mursec"&gt;&lt;img src="https://github.com/mursec.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FrameXX"&gt;&lt;img src="https://github.com/FrameXX.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/vovayartsev"&gt;&lt;img src="https://github.com/vovayartsev.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dwain-lab"&gt;&lt;img src="https://github.com/dwain-lab.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/brookmg"&gt;&lt;img src="https://github.com/brookmg.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/siebej"&gt;&lt;img src="https://github.com/siebej.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rxsantos"&gt;&lt;img src="https://github.com/rxsantos.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/hermannx5"&gt;&lt;img src="https://github.com/hermannx5.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rwxd"&gt;&lt;img src="https://github.com/rwxd.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Integral-Tech"&gt;&lt;img src="https://github.com/Integral-Tech.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/TheTomik1"&gt;&lt;img src="https://github.com/TheTomik1.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dav23r"&gt;&lt;img src="https://github.com/dav23r.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/stannynuytkens"&gt;&lt;img src="https://github.com/stannynuytkens.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/danbartram"&gt;&lt;img src="https://github.com/danbartram.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/arthurgleckler"&gt;&lt;img src="https://github.com/arthurgleckler.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tomroth04"&gt;&lt;img src="https://github.com/tomroth04.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Circenn5130"&gt;&lt;img src="https://github.com/Circenn5130.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jceloria"&gt;&lt;img src="https://github.com/jceloria.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/afunworm"&gt;&lt;img src="https://github.com/afunworm.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/PTR-inc"&gt;&lt;img src="https://github.com/PTR-inc.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/spudooli"&gt;&lt;img src="https://github.com/spudooli.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/IMarkoMC"&gt;&lt;img src="https://github.com/IMarkoMC.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rubund"&gt;&lt;img src="https://github.com/rubund.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Riolku"&gt;&lt;img src="https://github.com/Riolku.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/arnbrhm"&gt;&lt;img src="https://github.com/arnbrhm.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/herzkerl"&gt;&lt;img src="https://github.com/herzkerl.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/0x45796164"&gt;&lt;img src="https://github.com/0x45796164.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/madchr1st"&gt;&lt;img src="https://github.com/madchr1st.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/avalentic"&gt;&lt;img src="https://github.com/avalentic.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/TheCraiggers"&gt;&lt;img src="https://github.com/TheCraiggers.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sheetd"&gt;&lt;img src="https://github.com/sheetd.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dlt-green"&gt;&lt;img src="https://github.com/dlt-green.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/suhlig"&gt;&lt;img src="https://github.com/suhlig.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Proximus888"&gt;&lt;img src="https://github.com/Proximus888.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wielandp"&gt;&lt;img src="https://github.com/wielandp.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/chxseh"&gt;&lt;img src="https://github.com/chxseh.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/user8446"&gt;&lt;img src="https://github.com/user8446.png" width="40px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cdf-eagles"&gt;&lt;img src="https://github.com/cdf-eagles.png" width="40px" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;I welcome any contributions. Just create a PR or an issue. For larger features/ideas, please reach out on Discord/Matrix first to see if I'd accept them. To contribute code, check out the &lt;a href="https://ntfy.sh/docs/develop/"&gt;build instructions&lt;/a&gt; for the server and the Android app. Or, if you'd like to help translate 🇩🇪 🇺🇸 🇧🇬, you can start immediately in &lt;a href="https://hosted.weblate.org/projects/ntfy/"&gt;Hosted Weblate&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://hosted.weblate.org/engage/ntfy/"&gt; &lt;img src="https://hosted.weblate.org/widgets/ntfy/-/multi-blue.svg?sanitize=true" alt="Translation status" /&gt; &lt;/a&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Please be sure to read the complete &lt;a href="https://raw.githubusercontent.com/binwiederhier/ntfy/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Made with ❤️ by &lt;a href="https://heckel.io"&gt;Philipp C. Heckel&lt;/a&gt;.&lt;br /&gt; The project is dual licensed under the &lt;a href="https://raw.githubusercontent.com/binwiederhier/ntfy/main/LICENSE"&gt;Apache License 2.0&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/binwiederhier/ntfy/main/LICENSE.GPLv2"&gt;GPLv2 License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Third-party libraries and resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/urfave/cli"&gt;github.com/urfave/cli&lt;/a&gt; (MIT) is used to drive the CLI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mixkit.co/free-sound-effects/notification/"&gt;Mixkit sounds&lt;/a&gt; (Mixkit Free License) are used as notification sounds&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://notificationsounds.com"&gt;Sounds from notificationsounds.com&lt;/a&gt; (Creative Commons Attribution) are used as notification sounds&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Roboto"&gt;Roboto Font&lt;/a&gt; (Apache 2.0) is used as a font in everything web&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; (MIT) is used for the web app&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mui.com/"&gt;Material UI components&lt;/a&gt; (MIT) are used in the web app&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mui/material-ui/tree/master/docs/data/material/getting-started/templates/dashboard"&gt;MUI dashboard template&lt;/a&gt; (MIT) was used as a basis for the web app&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dexie/Dexie.js"&gt;Dexie.js&lt;/a&gt; (Apache 2.0) is used for web app persistence in IndexedDB&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goreleaser.com/"&gt;GoReleaser&lt;/a&gt; (MIT) is used to create releases&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emersion/go-smtp"&gt;go-smtp&lt;/a&gt; (MIT) is used to receive e-mails&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stretchr/testify"&gt;stretchr/testify&lt;/a&gt; (MIT) is used for unit and integration tests&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mattn/go-sqlite3"&gt;github.com/mattn/go-sqlite3&lt;/a&gt; (MIT) is used to provide the persistent message cache&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/firebase/firebase-admin-go"&gt;Firebase Admin SDK&lt;/a&gt; (Apache 2.0) is used to send FCM messages&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/github/gemoji"&gt;github/gemoji&lt;/a&gt; (MIT) is used for emoji support (specifically the &lt;a href="https://raw.githubusercontent.com/github/gemoji/master/db/emoji.json"&gt;emoji.json&lt;/a&gt; file)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://yossiabramov.com/blog/vanilla-js-lightbox"&gt;Lightbox with vanilla JS&lt;/a&gt; as a lightbox on the landing page&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/CJEnright/bc2d8b8dc0c1389a9feeddb110f822d7"&gt;HTTP middleware for gzip compression&lt;/a&gt; (MIT) is used for serving static files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bryanwoods/autolink-js"&gt;Regex for auto-linking&lt;/a&gt; (MIT) is used to highlight links (the library is not used)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.arp242.net/static-go.html"&gt;Statically linking go-sqlite3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/tabbed/#linked-tabs"&gt;Linked tabs in mkdocs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SherClockHolmes/webpush-go"&gt;webpush-go&lt;/a&gt; (MIT) is used to send web push notifications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Masterminds/sprig"&gt;Sprig&lt;/a&gt; (MIT) is used to add template parsing functions&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>cloudnative-pg/cloudnative-pg</title>
      <link>https://github.com/cloudnative-pg/cloudnative-pg</link>
      <description>&lt;p&gt;CloudNativePG is a comprehensive platform designed to seamlessly manage PostgreSQL databases within Kubernetes environments, covering the entire operational lifecycle from initial deployment to ongoing maintenance&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://landscape.cncf.io/?item=app-definition-and-development--database--cloudnativepg"&gt;&lt;img src="https://img.shields.io/badge/CNCF%20Landscape-5699C6" alt="CNCF Landscape" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudnative-pg/cloudnative-pg/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/cloudnative-pg/cloudnative-pg.svg?sanitize=true" alt="Latest Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudnative-pg/cloudnative-pg?tab=Apache-2.0-1-ov-file#readme"&gt;&lt;img src="https://img.shields.io/github/license/cloudnative-pg/cloudnative-pg" alt="GitHub License" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/9933"&gt;&lt;img src="https://www.bestpractices.dev/projects/9933/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/cloudnative-pg/cloudnative-pg"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/cloudnative-pg/cloudnative-pg/badge" alt="OpenSSF Scorecard Badge" /&gt;&lt;/a&gt; &lt;a href="https://cloudnative-pg.io/documentation/current/"&gt;&lt;img src="https://img.shields.io/badge/Documentation-white?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAGN0lEQVR4nJRXXWwcVxU%2B8%2F%2BzP%2BPZtR2v7dqy07jUJUALNaiK6lZyUVVKWgGKaIv8QCMekBAVQlQICcEzVZFQVYFKQhASEBHlISJPCRJEshTFChgrIYHEiYMh69jetffHM7Mzc%2B9Bs7vjnTs7yZpZWbt37s%2F5zne%2Bc861CD0eXRkbHc3NfjeffvxNAGEAgULD2756v35%2B3qe1Nc4fnQVEXlA2LnOcXlCF8S%2B6vvVgq%2FL3M65X3e51PvfQCU4WJgZe%2B8GQ8fS7AKgjBB8KEHwjDXZSjkf0CREAaXM2eI9c65siqWxWl360Xl74ANHz%2Fy8AitxnTBfmz%2BhyYS4wGhwObQCIHSA0AigOMBzvOsXzd4pnjyL6NMmWEH8hi2b28Og3%2FqRJA0ewfQy0v1vGO2NovwPo%2FEU%2FwVgSU1PI%2BSu79v3lJAB8HM%2BTI%2FO%2FUUXzM4xHIe0xI4DdRqOAwnF%2F38ePPyzaDIDh%2FMxcWh462m08aojuGY97C0nrAEHg9BlF0fmeAPr0J15vbaKsp0BZQzEDEAlP9B209UIIVXUta%2FQEQHwxgxFjTc%2BRskAwrgVWmHtg22vMPJwLDqGUNJIAMHVAkGu3WdpZz6NAkgSXpINSycluV28er1a3rJ4M3F2%2F9AtCvXKycRrTQttrjINjxxxIL9jevxdaDHU%2FTBr6pL5ruzuLZubgUQBOY2hPij3GBUe7tBCMBRE2KrXVSz0BBI%2FtPVgtV%2F%2FxkZ5WSjI%2F%2BFIXC3sHJwgT4yFqrZFFTSlVrp3sGYLwcfxSmXCbS00j2Ms4K7qkOsFx6qdTuiHtG4AimfmM8NyvOvR2G48qXtZ2fsfrN7%2BqpcRyUp0glKiimDm4TwAcHBp%2B9WeA4ki0GMWNR9OVF8BZvn7xtI%2FF09H8jzLEgz6yLwCDuelnFXHkTZZOytCOEdqDOtGwsm%2BNj00fXt%2B6%2Bj4vcA7bwNrZwENmXwAKuZnvsNRThs5ozMPfPiHyoDF7xiduHcXb70A8dRFheHjiySQATBZk0nl9MHPkBEWUoEtYjyrPFNwGzfdlD37Zdu98KCv%2BMmD2BYpUCvcST39e0%2BS1Wr249FAAg7mPzWrS5NstEbE0xrsiA6QN1PfRFLnhr%2BspxVJTlY8Mw1DqNXeyCQFREEXz9cHB0QOev73QaNhOF4B%2B45PHFHFgDhJTqjuubJFqX1KQco7NTTuW8kq95k2G4eLEGzM7lfItnjNeTKcOfV%2FT8hOuV77A9IK0XjgMpCO0ZiuV3L%2F6njCFAOmucGB3OII5XgCXEJTDdZLElVbu3Vz0fWexvL30k0B6ggBACOmIUBAEUKX0dDTvW7RCYcdZPq6n%2FSsQnUO2RuyBRgQ9Rc5mMvJ6CNIj1nXfd9qWAsCkaZzJAk1L8UjVqY737dSjfCGrPHWqXL32Q0mB%2F2BXnke00WaEYv2aTzAbnuV5pcWkDGAAGJmhSafh6hjr%2BW2SVYHrP7bb%2BOdPW%2FUgflGlTM2gaK%2Ft7tp6%2BN6yixdN89DcIwGktIFPABfNbwoQqQWEUnDJzg1g0jDeK5p7Kp7nensXFI7uyAr%2FLyM7fYLnpa6LYScE8vDnot5hrKlslm%2BfE3nVxJgO4o3KcYu%2FF8XM8yFQ27n%2F65Te%2FzKl3Jhpjj6TCIDneRD5%2FItxr1vdkALw7p1qfeWPpjHxMtsXaPxu6FLc%2BrnbSB1r7fcrlr36nqwMzQfnplJDryQCGOh%2FbLjhcM%2FEvQ4Pdund9xRV5m1LfTXaF%2BK9gsLGB9nsgddcz8thM%2FarPzYM8%2FFazf9sMFaU%2Fi%2FwvNANwEhPvUGR8ozn7d%2BiDKXixtKpbHp81nV9E7puRy31ixKUbOe%2Fv3Ud891ghhDrL5Z975eaOvV%2BCNRp0Gfz%2BcJjDABdTwlpdfKbId0t5XYAcHz5D5ZVtWUp9%2Flog2L7PgVJqZx0HOE5Cqghemv1%2Bt%2FeGBmZ%2BdB2yNN72UEpnzXG32YADA186i3bIpPxMhuKrFK%2Fd77JUnbkKbYvRJlC8DzKSZK76Lq1he2dKy%2BZuSfesSz5a2xHDbLJ%2BJaqdv5H4EUY%2BzbG2m9HgN7mg81bfw4W1uu7AjvHaqDhqF%2FZ3Fq5XFy%2FcESSDsx5fvZ7wLEsNfXk%2BjlVHfpSCOB%2FAQAA%2F%2F8zd8orZc2N9AAAAABJRU5ErkJggg%3D%3D" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/tagged/cloudnative-pg"&gt;&lt;img src="https://img.shields.io/badge/stackoverflow-cloudnative--pg-blue?logo=stackoverflow&amp;amp;logoColor=%23F48024&amp;amp;link=https%3A%2F%2Fstackoverflow.com%2Fquestions%2Ftagged%2Fcloudnative-pg" alt="Stack Overflow" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fcloudnative-pg%2Fcloudnative-pg?ref=badge_small"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fcloudnative-pg%2Fcloudnative-pg.svg?type=small" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Welcome to the CloudNativePG Project!&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;CloudNativePG (CNPG)&lt;/strong&gt; is an open-source platform designed to seamlessly manage &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; databases in Kubernetes environments. It covers the entire operational lifecycle—from deployment to ongoing maintenance—through its core component, the CloudNativePG operator.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudnative-pg/governance/raw/main/GOVERNANCE.md"&gt;Governance Policies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/ADOPTERS.md"&gt;Adopters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnative-pg.io/support/"&gt;Commercial Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/LICENSE"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;The best way to get started is the &lt;a href="https://cloudnative-pg.io/documentation/current/quickstart/"&gt;Quickstart Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Scope&lt;/h2&gt; 
&lt;h3&gt;Mission&lt;/h3&gt; 
&lt;p&gt;CloudNativePG aims to increase PostgreSQL adoption within Kubernetes by making it an integral part of the development process and GitOps-driven CI/CD automation.&lt;/p&gt; 
&lt;h3&gt;Core Principles &amp;amp; Features&lt;/h3&gt; 
&lt;p&gt;Designed by PostgreSQL experts for Kubernetes administrators, CloudNativePG follows a Kubernetes-native approach to PostgreSQL primary/standby cluster management. Instead of relying on external high-availability tools (like Patroni, repmgr, or Stolon), it integrates directly with the Kubernetes API to automate database operations that a skilled DBA would perform manually.&lt;/p&gt; 
&lt;p&gt;Key design decisions include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Direct integration with Kubernetes API: The PostgreSQL cluster’s status is available directly in the &lt;code&gt;Cluster&lt;/code&gt; resource, allowing users to inspect it via the Kubernetes API.&lt;/li&gt; 
 &lt;li&gt;Operator pattern: The operator ensures that the desired PostgreSQL state is reconciled automatically, following Kubernetes best practices.&lt;/li&gt; 
 &lt;li&gt;Immutable application containers: Updates follow an immutable infrastructure model, as explained in &lt;a href="https://www.enterprisedb.com/blog/why-edb-chose-immutable-application-containers"&gt;"Why EDB Chose Immutable Application Containers"&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How CloudNativePG Works&lt;/h3&gt; 
&lt;p&gt;The operator continuously monitors and updates the PostgreSQL cluster state. Examples of automated actions include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Failover management: If the primary instance fails, the operator elects a new primary, updates the cluster status, and orchestrates the transition.&lt;/li&gt; 
 &lt;li&gt;Scaling read replicas: When the number of desired replicas changes, the operator provisions or removes resources such as persistent volumes, secrets, and config maps while managing streaming replication.&lt;/li&gt; 
 &lt;li&gt;Service updates: Kubernetes remains the single source of truth, ensuring that PostgreSQL service endpoints are always up to date.&lt;/li&gt; 
 &lt;li&gt;Rolling updates: When an image is updated, the operator follows a rolling strategy—first updating replica pods before performing a controlled switchover for the primary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;CloudNativePG manages additional Kubernetes resources to enhance PostgreSQL management, including: &lt;code&gt;Backup&lt;/code&gt;, &lt;code&gt;ClusterImageCatalog&lt;/code&gt;, &lt;code&gt;Database&lt;/code&gt;, &lt;code&gt;ImageCatalog&lt;/code&gt;, &lt;code&gt;Pooler&lt;/code&gt;, &lt;code&gt;Publication&lt;/code&gt;, &lt;code&gt;ScheduledBackup&lt;/code&gt;, and &lt;code&gt;Subscription&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Out of Scope&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Kubernetes only:&lt;/strong&gt; CloudNativePG is dedicated to vanilla Kubernetes maintained by the &lt;a href="https://kubernetes.io/"&gt;Cloud Native Computing Foundation (CNCF)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PostgreSQL only:&lt;/strong&gt; CloudNativePG is dedicated to vanilla PostgreSQL maintained by the &lt;a href="https://www.postgresql.org/about/"&gt;PostgreSQL Global Development Group (PGDG)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No support for forks:&lt;/strong&gt; Features from PostgreSQL forks will only be considered if they can be integrated as extensions or pluggable frameworks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Not a general-purpose database operator:&lt;/strong&gt; CloudNativePG does not support other databases (e.g., MariaDB).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;CloudNativePG can be extended via the &lt;a href="https://github.com/cloudnative-pg/cnpg-i"&gt;CNPG-I plugin interface&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Communications&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudnative-pg/cloudnative-pg/discussions"&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud-native.slack.com/archives/C08MAUJ7NPM"&gt;Slack&lt;/a&gt; (join the &lt;a href="https://communityinviter.com/apps/cloud-native/cncf"&gt;CNCF Slack Workspace&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/CloudNativePg"&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mastodon.social/@CloudNativePG"&gt;Mastodon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bsky.app/profile/cloudnativepg.bsky.social"&gt;Bluesky&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orgs/cloudnative-pg/projects/1"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnative-pg.io"&gt;Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/faq.md"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnative-pg.io/blog/"&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudnative-pg/cnpg-i"&gt;CloudNativePG plugin Interface (CNPG-I)&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;A list of publicly known users of the CloudNativePG operator is in &lt;a href="https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/ADOPTERS.md"&gt;ADOPTERS.md&lt;/a&gt;. Help us grow our community and CloudNativePG by adding yourself and your organization to this list!&lt;/p&gt; 
&lt;h3&gt;CloudNativePG at KubeCon&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;April 4 2025, KubeCon Europe in London: &lt;a href="https://sched.co/1tx8g"&gt;"Consistent Volume Group Snapshots, Unraveling the Magic"&lt;/a&gt; - Leonardo Cecchi (EDB) and Xing Yang (VMware)&lt;/li&gt; 
 &lt;li&gt;November 11 2024, Cloud Native Rejekts NA 2024: &lt;a href="https://www.youtube.com/watch?v=uBzl_stoxoc&amp;amp;ab_channel=CloudNativeRejekts"&gt;"Maximising Microservice Databases with Kubernetes, Postgres, and CloudNativePG"&lt;/a&gt; - Gabriele Bartolini (EDB) and Leonardo Cecchi (EDB)&lt;/li&gt; 
 &lt;li&gt;March 21 2024, KubeCon Europe 2024 in Paris: &lt;a href="https://kccnceu2024.sched.com/event/1YeM4/scaling-heights-mastering-postgres-database-vertical-scalability-with-kubernetes-storage-magic-gabriele-bartolini-edb-gari-singh-google"&gt;"Scaling Heights: Mastering Postgres Database Vertical Scalability with Kubernetes Storage Magic"&lt;/a&gt; - Gari Singh, Google &amp;amp; Gabriele Bartolini, EDB&lt;/li&gt; 
 &lt;li&gt;March 19 2024, Data on Kubernetes Day at KubeCon Europe 2024 in Paris: &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFha/from-zero-to-hero-scaling-postgres-in-kubernetes-using-the-power-of-cloudnativepg-gabriele-bartolini-edb"&gt;"From Zero to Hero: Scaling Postgres in Kubernetes Using the Power of CloudNativePG"&lt;/a&gt; - Gabriele Bartolini, EDB&lt;/li&gt; 
 &lt;li&gt;7 November 2023, KubeCon North America 2023 in Chicago: &lt;a href="https://kccncna2023.sched.com/event/1R2ml/disaster-recovery-with-very-large-postgres-databases-gabriele-bartolini-edb-michelle-au-google"&gt;"Disaster Recovery with Very Large Postgres Databases (in Kubernetes)"&lt;/a&gt; - Michelle Au, Google &amp;amp; Gabriele Bartolini, EDB&lt;/li&gt; 
 &lt;li&gt;27 October 2022, KubeCon North America 2022 in Detroit: &lt;a href="https://kccncna2022.sched.com/event/182GB/data-on-kubernetes-deploying-and-running-postgresql-and-patterns-for-databases-in-a-kubernetes-cluster-chris-milsted-ondat-gabriele-bartolini-edb"&gt;"Data On Kubernetes, Deploying And Running PostgreSQL And Patterns For Databases In a Kubernetes Cluster"&lt;/a&gt; - Chris Milsted, Ondat &amp;amp; Gabriele Bartolini, EDB&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Useful links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dok.community/"&gt;Data on Kubernetes (DoK) Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cncf.io/blog/2024/11/20/cloud-neutral-postgres-databases-with-kubernetes-and-cloudnativepg/"&gt;"Cloud Neutral Postgres Databases with Kubernetes and CloudNativePG" by Gabriele Bartolini&lt;/a&gt; (November 2024)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gabrielebartolini.it/articles/2024/03/cloudnativepg-recipe-5-how-to-migrate-your-postgresql-database-in-kubernetes-with-~0-downtime-from-anywhere/"&gt;"How to migrate your PostgreSQL database in Kubernetes with ~0 downtime from anywhere" by Gabriele Bartolini&lt;/a&gt; (March 2024)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gabrielebartolini.it/articles/2024/02/maximizing-microservice-databases-with-kubernetes-postgres-and-cloudnativepg/"&gt;"Maximizing Microservice Databases with Kubernetes, Postgres, and CloudNativePG" by Gabriele Bartolini&lt;/a&gt; (February 2024)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cncf.io/blog/2023/09/29/recommended-architectures-for-postgresql-in-kubernetes/"&gt;"Recommended Architectures for PostgreSQL in Kubernetes" by Gabriele Bartolini&lt;/a&gt; (September 2023)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.enterprisedb.com/blog/current-state-major-postgresql-upgrades-cloudnativepg-kubernetes"&gt;"The Current State of Major PostgreSQL Upgrades with CloudNativePG" by Gabriele Bartolini&lt;/a&gt; (August 2023)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://thenewstack.io/the-rise-of-the-kubernetes-native-database/"&gt;"The Rise of the Kubernetes Native Database" by Jeff Carpenter&lt;/a&gt; (December 2022)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudnativenow.com/kubecon-cnc-eu-2022/why-run-postgres-in-kubernetes/"&gt;"Why Run Postgres in Kubernetes?" by Gabriele Bartolini&lt;/a&gt; (May 2022)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tfir.io/shift-left-security-the-path-to-postgresql-on-kubernetes/"&gt;"Shift-Left Security: The Path To PostgreSQL On Kubernetes" by Gabriele Bartolini&lt;/a&gt; (April 2021)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.2ndquadrant.com/en/blog/local-persistent-volumes-and-postgresql-usage-in-kubernetes/"&gt;"Local Persistent Volumes and PostgreSQL usage in Kubernetes" by Gabriele Bartolini&lt;/a&gt; (June 2020)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; We are a &lt;a href="https://www.cncf.io/sandbox-projects/"&gt;Cloud Native Computing Foundation Sandbox project&lt;/a&gt;. &lt;/p&gt; 
&lt;p style="text-align:center;" align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/cncf/artwork/blob/main/other/cncf/horizontal/white/cncf-white.svg?raw=true" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/cncf/artwork/blob/main/other/cncf/horizontal/color/cncf-color.svg?raw=true" /&gt; 
  &lt;img align="center" src="https://github.com/cncf/artwork/raw/main/other/cncf/horizontal/color/cncf-color.svg?raw=true" alt="CNCF logo" width="50%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; CloudNativePG was originally built and sponsored by &lt;a href="https://www.enterprisedb.com"&gt;EDB&lt;/a&gt;. &lt;/p&gt; 
&lt;p style="text-align:center;" align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/cloudnative-pg/.github/main/logo/edb_landscape_color_white.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/cloudnative-pg/.github/main/logo/edb_landscape_color_grey.svg" /&gt; 
  &lt;img align="center" src="https://raw.githubusercontent.com/cloudnative-pg/.github/main/logo/edb_landscape_color_grey.svg?sanitize=true" alt="EDB logo" width="25%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.postgresql.org/about/policies/trademarks/"&gt;Postgres, PostgreSQL, and the Slonik Logo&lt;/a&gt; are trademarks or registered trademarks of the PostgreSQL Community Association of Canada, and used with their permission. &lt;/p&gt; 
&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>gravitational/teleport</title>
      <link>https://github.com/gravitational/teleport</link>
      <description>&lt;p&gt;The easiest, and most secure way to access and protect all of your infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Teleport provides connectivity, authentication, access controls and audit for infrastructure.&lt;/p&gt; 
&lt;p&gt;Here is why you might use Teleport:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set up SSO for all of your cloud infrastructure [1].&lt;/li&gt; 
 &lt;li&gt;Protect access to cloud and on-prem services using mTLS endpoints and short-lived certificates.&lt;/li&gt; 
 &lt;li&gt;Establish tunnels to access services behind NATs and firewalls.&lt;/li&gt; 
 &lt;li&gt;Provide an audit log with session recording and replay for various protocols.&lt;/li&gt; 
 &lt;li&gt;Unify Role-Based Access Control (RBAC) and enforce the principle of least privilege with &lt;a href="https://goteleport.com/features/access-requests/"&gt;access requests&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[1] The open source version supports only GitHub SSO.&lt;/p&gt; 
&lt;p&gt;Teleport works with SSH, Kubernetes, databases, RDP, and web services.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Architecture: &lt;a href="https://goteleport.com/docs/reference/architecture/"&gt;https://goteleport.com/docs/reference/architecture/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Getting Started: &lt;a href="https://goteleport.com/docs/get-started/"&gt;https://goteleport.com/docs/get-started/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://goteleport.com/download"&gt; &lt;img src="https://raw.githubusercontent.com/gravitational/teleport/master/assets/img/hero-teleport-platform.png" width="750/" /&gt; &lt;/a&gt; 
 &lt;div align="center" style="padding: 25px"&gt; 
  &lt;a href="https://goteleport.com/download"&gt; &lt;img src="https://img.shields.io/github/v/release/gravitational/teleport?sort=semver&amp;amp;label=Release&amp;amp;color=651FFF" /&gt; &lt;/a&gt; 
  &lt;a href="https://golang.org/"&gt; &lt;img src="https://img.shields.io/github/go-mod/go-version/gravitational/teleport?color=7fd5ea" /&gt; &lt;/a&gt; 
  &lt;a href="https://github.com/gravitational/teleport/raw/master/CODE_OF_CONDUCT.md"&gt; &lt;img src="https://img.shields.io/badge/Contribute-🙌-green.svg" /&gt; &lt;/a&gt; 
  &lt;a href="https://www.gnu.org/licenses/agpl-3.0.en.html"&gt; &lt;img src="https://img.shields.io/badge/AGPL-3.0-red.svg?sanitize=true" /&gt; &lt;/a&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#installing-and-running"&gt;Installing and Running&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#building-teleport"&gt;Building Teleport&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#why-did-we-build-teleport"&gt;Why Did We Build Teleport?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#more-information"&gt;More Information&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#support-and-contributing"&gt;Support and Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#is-teleport-secure-and-production-ready"&gt;Is Teleport Secure and Production Ready?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#who-built-teleport"&gt;Who Built Teleport?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Teleport includes an identity-aware access proxy, a CA that issues short-lived certificates, a unified access control system and a tunneling system to access resources behind the firewall.&lt;/p&gt; 
&lt;p&gt;We have implemented Teleport as a single Go binary that integrates with multiple protocols and cloud services:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/server-access/introduction/"&gt;SSH nodes&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/kubernetes-access/introduction/"&gt;Kubernetes clusters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/database-access/"&gt;PostgreSQL, MongoDB, CockroachDB and MySQL databases&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/application-access/introduction/"&gt;Internal Web apps&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/desktop-access/introduction/"&gt;Windows Hosts&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/enroll-resources/server-access/introduction/"&gt;Networked servers&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can set up Teleport as a &lt;a href="https://goteleport.com/docs/admin-guides/deploy-a-cluster/linux-demo"&gt;Linux daemon&lt;/a&gt; or a &lt;a href="https://goteleport.com/docs/admin-guides/deploy-a-cluster/helm-deployments/"&gt;Kubernetes deployment&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Teleport focuses on best practices for infrastructure security:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;No need to manage shared secrets such as SSH keys or Kubernetes tokens: it uses certificate-based auth with certificate expiration for all protocols.&lt;/li&gt; 
 &lt;li&gt;Two-factor authentication (2FA) for everything.&lt;/li&gt; 
 &lt;li&gt;Collaboratively troubleshoot issues through session sharing.&lt;/li&gt; 
 &lt;li&gt;Single sign-on (SSO) for everything via GitHub Auth, OpenID Connect, or SAML with endpoints like Okta or Microsoft Entra ID.&lt;/li&gt; 
 &lt;li&gt;Infrastructure introspection: Use Teleport via the CLI or Web UI to view the status of every SSH node, database instance, Kubernetes cluster, or internal web app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Teleport uses &lt;a href="https://godoc.org/golang.org/x/crypto"&gt;Go crypto&lt;/a&gt;. It is &lt;em&gt;fully compatible with OpenSSH&lt;/em&gt;, &lt;code&gt;sshd&lt;/code&gt; servers, and &lt;code&gt;ssh&lt;/code&gt; clients, Kubernetes clusters and more.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Project Links&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/"&gt;Teleport Website&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The official website of the project.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/docs/"&gt;Documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Admin guide, user manual and more.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/blog/"&gt;Blog&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Our blog where we publish Teleport news.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gravitational/teleport/discussions"&gt;Forum&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Ask us a setup question, post your tutorial, feedback, or idea on our forum.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/slack"&gt;Slack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Need help with your setup? Ping us in our Slack channel.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://goteleport.com/pricing"&gt;Cloud-hosted&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;We offer Enterprise with a Cloud-hosted option. For teams that require easy and secure access to their computing environments.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Installing and Running&lt;/h2&gt; 
&lt;p&gt;To set up a single-instance Teleport cluster, follow our &lt;a href="https://goteleport.com/docs/admin-guides/deploy-a-cluster/linux-demo/"&gt;getting started guide&lt;/a&gt;. You can then register your servers, Kubernetes clusters, and other infrastructure with your Teleport cluster.&lt;/p&gt; 
&lt;p&gt;You can also get started with Teleport Enterprise Cloud, a managed Teleport deployment that makes it easier to enable secure access to your infrastructure.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://goteleport.com/signup"&gt;Sign up for a free trial&lt;/a&gt; of Teleport Enterprise Cloud.&lt;/p&gt; 
&lt;p&gt;Follow our guide to &lt;a href="https://goteleport.com/docs/get-started/"&gt;registering your first server&lt;/a&gt; with Teleport Enterprise Cloud.&lt;/p&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;h3&gt;Deploy Teleport&lt;/h3&gt; 
&lt;p&gt;If you wish to deploy Teleport inside a Docker container see the &lt;a href="https://goteleport.com/docs/installation/#running-teleport-on-docker"&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;For Local Testing and Development&lt;/h3&gt; 
&lt;p&gt;To run a full test suite locally, see &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/BUILD_macos.md#local-tests-dependencies"&gt;the test dependencies list&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Building Teleport&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;teleport&lt;/code&gt; repository contains the Teleport daemon binary (written in Go) and a web UI written in TypeScript.&lt;/p&gt; 
&lt;p&gt;If your intention is to build and deploy for use in a production infrastructure a released tag should be used. The default branch, &lt;code&gt;master&lt;/code&gt;, is the current development branch for an upcoming major version. Get the latest release tags listed at &lt;a href="https://goteleport.com/download/"&gt;https://goteleport.com/download/&lt;/a&gt; and then use that tag in the &lt;code&gt;git clone&lt;/code&gt;. For example &lt;code&gt;git clone https://github.com/gravitational/teleport.git -b v16.0.0&lt;/code&gt; gets release v16.0.0.&lt;/p&gt; 
&lt;h3&gt;Dockerized Build&lt;/h3&gt; 
&lt;p&gt;It is often easiest to build with Docker, which ensures that all required tooling is available for the build. To execute a dockerized build, ensure that docker is installed and running, and execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make -C build.assets build-binaries
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Local Build&lt;/h3&gt; 
&lt;h4&gt;Dependencies&lt;/h4&gt; 
&lt;p&gt;The following dependencies are required to build Teleport from source. For maximum compatibility, install the versions of these dependencies using the versions listed in &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/build.assets/versions.mk"&gt;&lt;code&gt;build.assets/versions.mk&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://golang.org/dl/"&gt;&lt;code&gt;Go&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;&lt;code&gt;Rust&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nodejs.org/en/download/"&gt;&lt;code&gt;Node.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yubico/libfido2"&gt;&lt;code&gt;libfido2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.freedesktop.org/wiki/Software/pkg-config/"&gt;&lt;code&gt;pkg-config&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For an example of Dev Environment setup on a Mac, see &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/BUILD_macos.md"&gt;these instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Perform a build&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The Go compiler is somewhat sensitive to the amount of memory: you will need &lt;strong&gt;at least&lt;/strong&gt; 1GB of virtual memory to compile Teleport. A 512MB instance without swap will &lt;strong&gt;not&lt;/strong&gt; work.&lt;/li&gt; 
  &lt;li&gt;This will build the latest version of Teleport, &lt;strong&gt;regardless&lt;/strong&gt; of whether it is stable. If you want to build the latest stable release, run &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git submodule update --recursive&lt;/code&gt; to the corresponding tag (for example,&lt;/li&gt; 
  &lt;li&gt;run &lt;code&gt;git checkout v8.0.0&lt;/code&gt;) &lt;strong&gt;before&lt;/strong&gt; performing a build.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Get the source&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/gravitational/teleport.git
cd teleport
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To perform a build&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;tsh&lt;/code&gt; dynamically links against libfido2 by default, to support development environments, as long as the library itself can be found:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ brew install libfido2 pkg-config  # Replace with your package manager of choice

$ make build/tsh
&amp;gt; libfido2 found, setting FIDO2=dynamic
&amp;gt; (...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Release binaries are linked statically against libfido2. You may switch the linking mode using the FIDO2 variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make build/tsh FIDO2=dynamic # dynamic linking
make build/tsh FIDO2=static  # static linking, for an easy setup use `make enter`
                             # or `build.assets/macos/build-fido2-macos.sh`.
make build/tsh FIDO2=off     # doesn't link libfido2 in any way
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;tsh&lt;/code&gt; builds with Touch ID support require access to an Apple Developer account. If you are a Teleport maintainer, ask the team for access.&lt;/p&gt; 
&lt;h4&gt;Build output and run locally&lt;/h4&gt; 
&lt;p&gt;If the build succeeds, the installer will place the binaries in the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;Before starting, create default data directories:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo mkdir -p -m0700 /var/lib/teleport
sudo chown $USER /var/lib/teleport
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running Teleport in a hot reload mode&lt;/h4&gt; 
&lt;p&gt;To speed up your development process, you can run Teleport using &lt;a href="https://github.com/githubnemo/CompileDaemon"&gt;&lt;code&gt;CompileDaemon&lt;/code&gt;&lt;/a&gt;. This will build and run the Teleport binary, and then rebuild and restart it whenever any Go source files change.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install CompileDaemon:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;go install github.com/githubnemo/CompileDaemon@latest
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that we use &lt;code&gt;go install&lt;/code&gt; instead of the suggested &lt;code&gt;go get&lt;/code&gt;, because we don't want CompileDaemon to become a dependency of the project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build and run the Teleport binary:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;make teleport-hot-reload
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, this runs a &lt;code&gt;teleport start&lt;/code&gt; command. If you want to customize the command, for example by providing a custom config file location, you can use the &lt;code&gt;TELEPORT_ARGS&lt;/code&gt; parameter:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;make teleport-hot-reload TELEPORT_ARGS='start --config=/path/to/config.yaml'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note that you still need to run &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/api/proto/README.md"&gt;&lt;code&gt;make grpc&lt;/code&gt;&lt;/a&gt; if you modify any Protocol Buffers files to regenerate the generated Go sources; regenerating these sources should in turn cause the CompileDaemon to rebuild and restart Teleport.&lt;/p&gt; 
&lt;h3&gt;Web UI&lt;/h3&gt; 
&lt;p&gt;The Teleport Web UI resides in the &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/web"&gt;web&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h4&gt;Rebuilding Web UI for development&lt;/h4&gt; 
&lt;p&gt;To rebuild the Teleport UI package, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make docker-ui
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can replace Teleport Web UI files with the files from the newly-generated &lt;code&gt;/dist&lt;/code&gt; folder.&lt;/p&gt; 
&lt;p&gt;To enable speedy iterations on the Web UI, you can run a &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/web#web-ui"&gt;local web-dev server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also tell Teleport to load the Web UI assets from the source directory. To enable this behavior, set the environment variable &lt;code&gt;DEBUG=1&lt;/code&gt; and rebuild with the default target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run Teleport as a single-node cluster in development mode:
DEBUG=1 ./build/teleport start -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Keep the server running in this mode, and make your UI changes in &lt;code&gt;/dist&lt;/code&gt; directory. For instructions about how to update the Web UI, read &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/web#readme"&gt;the &lt;code&gt;web&lt;/code&gt; README&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Managing dependencies&lt;/h3&gt; 
&lt;p&gt;All dependencies are managed using &lt;a href="https://blog.golang.org/using-go-modules"&gt;Go modules&lt;/a&gt;. Here are the instructions for some common tasks:&lt;/p&gt; 
&lt;h4&gt;Add a new dependency&lt;/h4&gt; 
&lt;p&gt;Latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get github.com/new/dependency
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and update the source to use this dependency.&lt;/p&gt; 
&lt;p&gt;To get a specific version, use &lt;code&gt;go get github.com/new/dependency@version&lt;/code&gt; instead.&lt;/p&gt; 
&lt;h4&gt;Set dependency to a specific version&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get github.com/new/dependency@version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Update dependency to the latest version&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get -u github.com/new/dependency
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Update all dependencies&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get -u all
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Debugging dependencies&lt;/h4&gt; 
&lt;p&gt;Why is a specific package imported?&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;go mod why $pkgname&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Why is a specific module imported?&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;go mod why -m $modname&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Why is a specific version of a module imported?&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;go mod graph | grep $modname&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Why did We Build Teleport?&lt;/h2&gt; 
&lt;p&gt;The Teleport creators used to work together at Rackspace. We noticed that most cloud computing users struggle with setting up and configuring infrastructure security because popular tools, while flexible, are complex to understand and expensive to maintain. Additionally, most organizations use multiple infrastructure form factors such as several cloud providers, multiple cloud accounts, servers in colocation, and even smart devices. Some of those devices run on untrusted networks, behind third-party firewalls. This only magnifies complexity and increases operational overhead.&lt;/p&gt; 
&lt;p&gt;We had a choice, either start a security consulting business or build a solution that's dead-easy to use and understand. A real-time representation of all of your servers in the same room as you, as if they were magically &lt;em&gt;teleported&lt;/em&gt;. Thus, Teleport was born!&lt;/p&gt; 
&lt;h2&gt;More Information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/get-started/"&gt;Teleport Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/reference/architecture/"&gt;Teleport Architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/reference/"&gt;Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://goteleport.com/docs/faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support and Contributing&lt;/h2&gt; 
&lt;p&gt;We offer a few different options for support. First of all, we try to provide clear and comprehensive documentation. The docs are also in GitHub, so feel free to create a PR or file an issue if you have ideas for improvements. If you still have questions after reviewing our docs, you can also:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join &lt;a href="https://github.com/gravitational/teleport/discussions"&gt;Teleport Discussions&lt;/a&gt; to ask questions. Our engineers are available there to help you.&lt;/li&gt; 
 &lt;li&gt;If you want to contribute to Teleport or file a bug report/issue, you can create an issue here in GitHub.&lt;/li&gt; 
 &lt;li&gt;If you are interested in Teleport Enterprise or more responsive support during a POC, we can also create a dedicated Slack channel for you during your POC. You can &lt;a href="https://goteleport.com/pricing/"&gt;reach out to us through our website&lt;/a&gt; to arrange for a POC.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Is Teleport Secure and Production-Ready?&lt;/h2&gt; 
&lt;p&gt;Yes -- Teleport is production-ready and designed to protect and facilitate access to the most precious and mission-critical applications.&lt;/p&gt; 
&lt;p&gt;Teleport has completed several security audits from nationally and internationally recognized technology security companies.&lt;/p&gt; 
&lt;p&gt;We publicize some of our audit results, security philosophy and related information on our &lt;a href="https://trust.goteleport.com/"&gt;trust page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can see the list of companies that use Teleport in production on the Teleport &lt;a href="https://goteleport.com/case-study/"&gt;product page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Who Built Teleport?&lt;/h2&gt; 
&lt;p&gt;Teleport was created by &lt;a href="https://goteleport.com"&gt;Gravitational, Inc.&lt;/a&gt;. We have built Teleport by borrowing from our previous experiences at Rackspace. &lt;a href="https://goteleport.com/about/"&gt;Learn more about Teleport and our history&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Teleport is distributed in multiple forms with different licensing implications.&lt;/p&gt; 
&lt;p&gt;The Teleport API module (all code in this repository under &lt;code&gt;/api&lt;/code&gt;) is available under the &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/api/LICENSE"&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The remainder of the source code in this repository is available under the &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/LICENSE"&gt;GNU Affero General Public License&lt;/a&gt;. Users compiling Teleport from source must comply with the terms of this license.&lt;/p&gt; 
&lt;p&gt;Teleport Community Edition builds distributed on &lt;a href="http://goteleport.com/download"&gt;http://goteleport.com/download&lt;/a&gt; are available under a &lt;a href="https://raw.githubusercontent.com/gravitational/teleport/master/build.assets/LICENSE-community"&gt;modified Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>netbirdio/netbird</title>
      <link>https://github.com/netbirdio/netbird</link>
      <description>&lt;p&gt;Connect your devices into a secure WireGuard®-based overlay network with SSO, MFA and granular access controls.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;p align="center"&gt; &lt;img width="234" src="https://raw.githubusercontent.com/netbirdio/netbird/main/docs/media/logo-full.png" /&gt; &lt;/p&gt; 
 &lt;p&gt; &lt;a href="https://img.shields.io/badge/license-BSD--3-blue)"&gt; &lt;img src="https://sonarcloud.io/api/project_badges/measure?project=netbirdio_netbird&amp;amp;metric=alert_status" /&gt; &lt;/a&gt; &lt;a href="https://github.com/netbirdio/netbird/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/badge/license-BSD--3-blue" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://docs.netbird.io/slack-url"&gt; &lt;img src="https://img.shields.io/badge/slack-@netbird-red.svg?logo=slack" /&gt; &lt;/a&gt; &lt;a href="https://forum.netbird.io"&gt; &lt;img src="https://img.shields.io/badge/community forum-@netbird-red.svg?logo=discourse" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://gurubase.io/g/netbird"&gt; &lt;img src="https://img.shields.io/badge/Gurubase-Ask%20NetBird%20Guru-006BFF" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;strong&gt; Start using NetBird at &lt;a href="https://netbird.io/pricing"&gt;netbird.io&lt;/a&gt; &lt;br /&gt; See &lt;a href="https://netbird.io/docs/"&gt;Documentation&lt;/a&gt; &lt;br /&gt; Join our &lt;a href="https://docs.netbird.io/slack-url"&gt;Slack channel&lt;/a&gt; or our &lt;a href="https://forum.netbird.io"&gt;Community forum&lt;/a&gt; &lt;br /&gt; &lt;/strong&gt; &lt;br /&gt; &lt;a href="https://registry.terraform.io/providers/netbirdio/netbird/latest"&gt; New: NetBird terraform provider &lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;strong&gt;NetBird combines a configuration-free peer-to-peer private network and a centralized access control system in a single platform, making it easy to create secure private networks for your organization or home.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Connect.&lt;/strong&gt; NetBird creates a WireGuard-based overlay network that automatically connects your machines over an encrypted tunnel, leaving behind the hassle of opening ports, complex firewall rules, VPN gateways, and so forth.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Secure.&lt;/strong&gt; NetBird enables secure remote access by applying granular access policies while allowing you to manage them intuitively from a single place. Works universally on any infrastructure.&lt;/p&gt; 
&lt;h3&gt;Open Source Network Security in a Single Platform&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/10cec749-bb56-4ab3-97af-4e38850108d2"&gt;https://github.com/user-attachments/assets/10cec749-bb56-4ab3-97af-4e38850108d2&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;NetBird on Lawrence Systems (Video)&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kwrff6h0rEw"&gt;&lt;img src="https://img.youtube.com/vi/Kwrff6h0rEw/0.jpg" alt="Watch the video" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Key features&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Connectivity&lt;/th&gt; 
   &lt;th&gt;Management&lt;/th&gt; 
   &lt;th&gt;Security&lt;/th&gt; 
   &lt;th&gt;Automation&lt;/th&gt; 
   &lt;th&gt;Platforms&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Kernel WireGuard&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://github.com/netbirdio/dashboard"&gt;Admin Web UI&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/installation#running-net-bird-with-sso-login"&gt;SSO &amp;amp; MFA support&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/api"&gt;Public API&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Linux&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Peer-to-peer connections&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Auto peer discovery and configuration&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/manage-network-access"&gt;Access control - groups &amp;amp; rules&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/register-machines-using-setup-keys"&gt;Setup keys for bulk network provisioning&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Mac&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Connection relay fallback&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/selfhosted/identity-providers"&gt;IdP integrations&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/audit-events-logging"&gt;Activity logging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/selfhosted/selfhosted-quickstart"&gt;Self-hosting quickstart script&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Windows&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/routing-traffic-to-private-networks"&gt;Routes to external networks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/manage-dns-in-your-network"&gt;Private DNS&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/manage-posture-checks"&gt;Device posture checks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] IdP groups sync with JWT&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Android&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] NAT traversal with BPF&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/add-users-to-your-network"&gt;Multiuser support&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Peer-to-peer encryption&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] iOS&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://netbird.io/knowledge-hub/the-first-quantum-resistant-mesh-vpn"&gt;Quantum-resistance with Rosenpass&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] OpenWRT&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/enforce-periodic-user-authentication"&gt;Periodic re-authentication&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/netbird-on-faas"&gt;Serverless&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Docker&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Quickstart with NetBird Cloud&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download and install NetBird at &lt;a href="https://app.netbird.io/install"&gt;https://app.netbird.io/install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Follow the steps to sign-up with Google, Microsoft, GitHub or your email address.&lt;/li&gt; 
 &lt;li&gt;Check NetBird &lt;a href="https://app.netbird.io/"&gt;admin UI&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Add more machines.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Quickstart with self-hosted NetBird&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This is the quickest way to try self-hosted NetBird. It should take around 5 minutes to get started if you already have a public domain and a VM. Follow the &lt;a href="https://docs.netbird.io/selfhosted/selfhosted-guide#advanced-guide-with-a-custom-identity-provider"&gt;Advanced guide with a custom identity provider&lt;/a&gt; for installations with different IDPs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Infrastructure requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A Linux VM with at least &lt;strong&gt;1CPU&lt;/strong&gt; and &lt;strong&gt;2GB&lt;/strong&gt; of memory.&lt;/li&gt; 
 &lt;li&gt;The VM should be publicly accessible on TCP ports &lt;strong&gt;80&lt;/strong&gt; and &lt;strong&gt;443&lt;/strong&gt; and UDP ports: &lt;strong&gt;3478&lt;/strong&gt;, &lt;strong&gt;49152-65535&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Public domain&lt;/strong&gt; name pointing to the VM.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Software requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker installed on the VM with the docker-compose plugin (&lt;a href="https://docs.docker.com/engine/install/"&gt;Docker installation guide&lt;/a&gt;) or docker with docker-compose in version 2 or higher.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://jqlang.github.io/jq/"&gt;jq&lt;/a&gt; installed. In most distributions Usually available in the official repositories and can be installed with &lt;code&gt;sudo apt install jq&lt;/code&gt; or &lt;code&gt;sudo yum install jq&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://curl.se/"&gt;curl&lt;/a&gt; installed. Usually available in the official repositories and can be installed with &lt;code&gt;sudo apt install curl&lt;/code&gt; or &lt;code&gt;sudo yum install curl&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download and run the installation script:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export NETBIRD_DOMAIN=netbird.example.com; curl -fsSL https://github.com/netbirdio/netbird/releases/latest/download/getting-started-with-zitadel.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Once finished, you can manage the resources via &lt;code&gt;docker-compose&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;A bit on NetBird internals&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Every machine in the network runs &lt;a href="https://raw.githubusercontent.com/netbirdio/netbird/main/client/"&gt;NetBird Agent (or Client)&lt;/a&gt; that manages WireGuard.&lt;/li&gt; 
 &lt;li&gt;Every agent connects to &lt;a href="https://raw.githubusercontent.com/netbirdio/netbird/main/management/"&gt;Management Service&lt;/a&gt; that holds network state, manages peer IPs, and distributes network updates to agents (peers).&lt;/li&gt; 
 &lt;li&gt;NetBird agent uses WebRTC ICE implemented in &lt;a href="https://github.com/pion/ice"&gt;pion/ice library&lt;/a&gt; to discover connection candidates when establishing a peer-to-peer connection between machines.&lt;/li&gt; 
 &lt;li&gt;Connection candidates are discovered with the help of &lt;a href="https://en.wikipedia.org/wiki/STUN"&gt;STUN&lt;/a&gt; servers.&lt;/li&gt; 
 &lt;li&gt;Agents negotiate a connection through &lt;a href="https://raw.githubusercontent.com/netbirdio/netbird/main/signal/"&gt;Signal Service&lt;/a&gt; passing p2p encrypted messages with candidates.&lt;/li&gt; 
 &lt;li&gt;Sometimes the NAT traversal is unsuccessful due to strict NATs (e.g. mobile carrier-grade NAT) and a p2p connection isn't possible. When this occurs the system falls back to a relay server called &lt;a href="https://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT"&gt;TURN&lt;/a&gt;, and a secure WireGuard tunnel is established via the TURN server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://github.com/coturn/coturn"&gt;Coturn&lt;/a&gt; is the one that has been successfully used for STUN and TURN in NetBird setups.&lt;/p&gt; 
&lt;p float="left" align="middle"&gt; &lt;img src="https://docs.netbird.io/docs-static/img/architecture/high-level-dia.png" width="700" /&gt; &lt;/p&gt; 
&lt;p&gt;See a complete &lt;a href="https://docs.netbird.io/about-netbird/how-netbird-works#architecture"&gt;architecture overview&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Community projects&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/physk/netbird-installer"&gt;NetBird installer script&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://galaxy.ansible.com/ui/repo/published/dominion_solutions/netbird/"&gt;NetBird ansible collection by Dominion Solutions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;main&lt;/code&gt; branch may be in an &lt;em&gt;unstable or even broken state&lt;/em&gt; during development. For stable versions, see &lt;a href="https://github.com/netbirdio/netbird/releases"&gt;releases&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Support acknowledgement&lt;/h3&gt; 
&lt;p&gt;In November 2022, NetBird joined the &lt;a href="https://www.forschung-it-sicherheit-kommunikationssysteme.de/foerderung/bekanntmachungen/startup-secure"&gt;StartUpSecure program&lt;/a&gt; sponsored by The Federal Ministry of Education and Research of The Federal Republic of Germany. Together with &lt;a href="https://cispa.de/en"&gt;CISPA Helmholtz Center for Information Security&lt;/a&gt; NetBird brings the security best practices and simplicity to private networking.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/700848/203091324-c6d311a0-22b5-4b05-a288-91cbc6cdcc46.png" alt="CISPA_Logo_BLACK_EN_RZ_RGB (1)" /&gt;&lt;/p&gt; 
&lt;h3&gt;Testimonials&lt;/h3&gt; 
&lt;p&gt;We use open-source technologies like &lt;a href="https://www.wireguard.com/"&gt;WireGuard®&lt;/a&gt;, &lt;a href="https://github.com/pion/ice"&gt;Pion ICE (WebRTC)&lt;/a&gt;, &lt;a href="https://github.com/coturn/coturn"&gt;Coturn&lt;/a&gt;, and &lt;a href="https://rosenpass.eu"&gt;Rosenpass&lt;/a&gt;. We very much appreciate the work these guys are doing and we'd greatly appreciate if you could support them in any way (e.g., by giving a star or a contribution).&lt;/p&gt; 
&lt;h3&gt;Legal&lt;/h3&gt; 
&lt;p&gt;This repository is licensed under BSD-3-Clause license that applies to all parts of the repository except for the directories management/, signal/ and relay/. Those directories are licensed under the GNU Affero General Public License version 3.0 (AGPLv3). See the respective LICENSE files inside each directory.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;WireGuard&lt;/em&gt; and the &lt;em&gt;WireGuard&lt;/em&gt; logo are &lt;a href="https://www.wireguard.com/trademark-policy/"&gt;registered trademarks&lt;/a&gt; of Jason A. Donenfeld.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qax-os/excelize</title>
      <link>https://github.com/qax-os/excelize</link>
      <description>&lt;p&gt;Go language library for reading and writing Microsoft Excel™ (XLAM / XLSM / XLSX / XLTM / XLTX) spreadsheets&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt;&lt;img width="650" src="https://raw.githubusercontent.com/qax-os/excelize/master/excelize.svg?sanitize=true" alt="Excelize logo" /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/xuri/excelize/actions/workflows/go.yml"&gt;&lt;img src="https://github.com/xuri/excelize/actions/workflows/go.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/qax-os/excelize"&gt;&lt;img src="https://codecov.io/gh/qax-os/excelize/branch/master/graph/badge.svg?sanitize=true" alt="Code Coverage" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/xuri/excelize/v2"&gt;&lt;img src="https://goreportcard.com/badge/github.com/xuri/excelize/v2" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/xuri/excelize/v2"&gt;&lt;img src="https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white" alt="go.dev" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/BSD-3-Clause"&gt;&lt;img src="https://img.shields.io/badge/license-bsd-orange.svg?sanitize=true" alt="Licenses" /&gt;&lt;/a&gt; &lt;a href="https://www.paypal.com/paypalme/xuri"&gt;&lt;img src="https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true" alt="Donate" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Excelize&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Excelize is a library written in pure Go providing a set of functions that allow you to write to and read from XLAM / XLSM / XLSX / XLTM / XLTX files. Supports reading and writing spreadsheet documents generated by Microsoft Excel™ 2007 and later. Supports complex components by high compatibility, and provided streaming API for generating or reading data from a worksheet with huge amounts of data. This library needs Go version 1.24.0 or later. The full docs can be seen using go's built-in documentation tool, or online at &lt;a href="https://pkg.go.dev/github.com/xuri/excelize/v2"&gt;go.dev&lt;/a&gt; and &lt;a href="https://xuri.me/excelize/"&gt;docs reference&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get github.com/xuri/excelize
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;If your packages are managed using &lt;a href="https://go.dev/blog/using-go-modules"&gt;Go Modules&lt;/a&gt;, please install with following command.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get github.com/xuri/excelize/v2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Create spreadsheet&lt;/h3&gt; 
&lt;p&gt;Here is a minimal example usage that will create spreadsheet file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "fmt"

    "github.com/xuri/excelize/v2"
)

func main() {
    f := excelize.NewFile()
    defer func() {
        if err := f.Close(); err != nil {
            fmt.Println(err)
        }
    }()
    // Create a new sheet.
    index, err := f.NewSheet("Sheet2")
    if err != nil {
        fmt.Println(err)
        return
    }
    // Set value of a cell.
    f.SetCellValue("Sheet2", "A2", "Hello world.")
    f.SetCellValue("Sheet1", "B2", 100)
    // Set active sheet of the workbook.
    f.SetActiveSheet(index)
    // Save spreadsheet by the given path.
    if err := f.SaveAs("Book1.xlsx"); err != nil {
        fmt.Println(err)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Reading spreadsheet&lt;/h3&gt; 
&lt;p&gt;The following constitutes the bare to read a spreadsheet document.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "fmt"

    "github.com/xuri/excelize/v2"
)

func main() {
    f, err := excelize.OpenFile("Book1.xlsx")
    if err != nil {
        fmt.Println(err)
        return
    }
    defer func() {
        // Close the spreadsheet.
        if err := f.Close(); err != nil {
            fmt.Println(err)
        }
    }()
    // Get value from cell by given worksheet name and cell reference.
    cell, err := f.GetCellValue("Sheet1", "B2")
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(cell)
    // Get all the rows in the Sheet1.
    rows, err := f.GetRows("Sheet1")
    if err != nil {
        fmt.Println(err)
        return
    }
    for _, row := range rows {
        for _, colCell := range row {
            fmt.Print(colCell, "\t")
        }
        fmt.Println()
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Add chart to spreadsheet file&lt;/h3&gt; 
&lt;p&gt;With Excelize chart generation and management is as easy as a few lines of code. You can build charts based on data in your worksheet or generate charts without any data in your worksheet at all.&lt;/p&gt; 
&lt;p align="center"&gt;&lt;img width="650" src="https://raw.githubusercontent.com/qax-os/excelize/master/test/images/chart.png" alt="Excelize" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "fmt"

    "github.com/xuri/excelize/v2"
)

func main() {
    f := excelize.NewFile()
    defer func() {
        if err := f.Close(); err != nil {
            fmt.Println(err)
        }
    }()
    for idx, row := range [][]interface{}{
        {nil, "Apple", "Orange", "Pear"}, {"Small", 2, 3, 3},
        {"Normal", 5, 2, 4}, {"Large", 6, 7, 8},
    } {
        cell, err := excelize.CoordinatesToCellName(1, idx+1)
        if err != nil {
            fmt.Println(err)
            return
        }
        f.SetSheetRow("Sheet1", cell, &amp;amp;row)
    }
    if err := f.AddChart("Sheet1", "E1", &amp;amp;excelize.Chart{
        Type: excelize.Col3DClustered,
        Series: []excelize.ChartSeries{
            {
                Name:       "Sheet1!$A$2",
                Categories: "Sheet1!$B$1:$D$1",
                Values:     "Sheet1!$B$2:$D$2",
            },
            {
                Name:       "Sheet1!$A$3",
                Categories: "Sheet1!$B$1:$D$1",
                Values:     "Sheet1!$B$3:$D$3",
            },
            {
                Name:       "Sheet1!$A$4",
                Categories: "Sheet1!$B$1:$D$1",
                Values:     "Sheet1!$B$4:$D$4",
            }},
        Title: []excelize.RichTextRun{
            {
                Text: "Fruit 3D Clustered Column Chart",
            },
        },
    }); err != nil {
        fmt.Println(err)
        return
    }
    // Save spreadsheet by the given path.
    if err := f.SaveAs("Book1.xlsx"); err != nil {
        fmt.Println(err)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Add picture to spreadsheet file&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "fmt"
    _ "image/gif"
    _ "image/jpeg"
    _ "image/png"

    "github.com/xuri/excelize/v2"
)

func main() {
    f, err := excelize.OpenFile("Book1.xlsx")
    if err != nil {
        fmt.Println(err)
        return
    }
    defer func() {
        // Close the spreadsheet.
        if err := f.Close(); err != nil {
            fmt.Println(err)
        }
    }()
    // Insert a picture.
    if err := f.AddPicture("Sheet1", "A2", "image.png", nil); err != nil {
        fmt.Println(err)
    }
    // Insert a picture to worksheet with scaling.
    if err := f.AddPicture("Sheet1", "D2", "image.jpg",
        &amp;amp;excelize.GraphicOptions{ScaleX: 0.5, ScaleY: 0.5}); err != nil {
        fmt.Println(err)
    }
    // Insert a picture offset in the cell with printing support.
    enable, disable := true, false
    if err := f.AddPicture("Sheet1", "H2", "image.gif",
        &amp;amp;excelize.GraphicOptions{
            PrintObject:     &amp;amp;enable,
            LockAspectRatio: false,
            OffsetX:         15,
            OffsetY:         10,
            Locked:          &amp;amp;disable,
        }); err != nil {
        fmt.Println(err)
    }
    // Save the spreadsheet with the origin path.
    if err = f.Save(); err != nil {
        fmt.Println(err)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Open a pull request to fix a bug, or open an issue to discuss a new feature or change. XML is compliant with &lt;a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-376/"&gt;part 1 of the 5th edition of the ECMA-376 Standard for Office Open XML&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;This program is under the terms of the BSD 3-Clause License. See &lt;a href="https://opensource.org/licenses/BSD-3-Clause"&gt;https://opensource.org/licenses/BSD-3-Clause&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Excel logo is a trademark of &lt;a href="https://aka.ms/trademarks-usage"&gt;Microsoft Corporation&lt;/a&gt;. This artwork is an adaptation.&lt;/p&gt; 
&lt;p&gt;The Go gopher was created by &lt;a href="https://go.dev/doc/gopher/README"&gt;Renee French&lt;/a&gt;. Licensed under the &lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons 4.0 Attributions license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wailsapp/wails</title>
      <link>https://github.com/wailsapp/wails</link>
      <description>&lt;p&gt;Create beautiful applications using Go&lt;/p&gt;&lt;hr&gt;&lt;p align="center" style="text-align: center"&gt; &lt;img src="https://raw.githubusercontent.com/wailsapp/wails/master/assets/images/logo-universal.png" width="55%" /&gt;&lt;br /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; Build desktop applications using Go &amp;amp; Web Technologies. &lt;br /&gt; &lt;br /&gt; &lt;a href="https://github.com/wailsapp/wails/raw/master/LICENSE"&gt; &lt;img alt="GitHub" src="https://img.shields.io/github/license/wailsapp/wails" /&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/wailsapp/wails"&gt; &lt;img src="https://goreportcard.com/badge/github.com/wailsapp/wails" /&gt; &lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/wailsapp/wails"&gt; &lt;img src="https://pkg.go.dev/badge/github.com/wailsapp/wails.svg?sanitize=true" alt="Go Reference" /&gt; &lt;/a&gt; &lt;a href="https://github.com/wailsapp/wails/issues"&gt; &lt;img src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" alt="CodeFactor" /&gt; &lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fwailsapp%2Fwails?ref=badge_shield" alt="FOSSA Status"&gt; &lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fwailsapp%2Fwails.svg?type=shield" /&gt; &lt;/a&gt; &lt;a href="https://github.com/avelino/awesome-go" rel="nofollow"&gt; &lt;img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true" alt="Awesome" /&gt; &lt;/a&gt; &lt;a href="https://discord.gg/BrRSWTaxVK"&gt; &lt;img alt="Discord" src="https://dcbadge.vercel.app/api/server/BrRSWTaxVK?style=flat" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/wailsapp/wails/actions/workflows/build-and-test.yml" rel="nofollow"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/wailsapp/wails/build-and-test.yml?branch=master&amp;amp;logo=Github" alt="Build" /&gt; &lt;/a&gt; &lt;a href="https://github.com/wailsapp/wails/tags" rel="nofollow"&gt; &lt;img alt="GitHub tag (latest SemVer pre-release)" src="https://img.shields.io/github/v/tag/wailsapp/wails?include_prereleases&amp;amp;label=version" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;strong&gt; &lt;samp&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.md"&gt;English&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.zh-Hans.md"&gt;简体中文&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.ja.md"&gt;日本語&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.ko.md"&gt;한국어&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.es.md"&gt;Español&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.pt-br.md"&gt;Português&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.ru.md"&gt;Русский&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.fr.md"&gt;Francais&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.uz.md"&gt;Uzbek&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.de.md"&gt;Deutsch&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.tr.md"&gt;Türkçe&lt;/a&gt;&lt;/p&gt; &lt;/samp&gt; &lt;/strong&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#features"&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#sponsors"&gt;Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#stargazers-over-time"&gt;Stargazers over time&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#inspiration"&gt;Inspiration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;The traditional method of providing web interfaces to Go programs is via a built-in web server. Wails offers a different approach: it provides the ability to wrap both Go code and a web frontend into a single binary. Tools are provided to make this easy for you by handling project creation, compilation and bundling. All you have to do is get creative!&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use standard Go for the backend&lt;/li&gt; 
 &lt;li&gt;Use any frontend technology you are already familiar with to build your UI&lt;/li&gt; 
 &lt;li&gt;Quickly create rich frontends for your Go programs using pre-built templates&lt;/li&gt; 
 &lt;li&gt;Easily call Go methods from Javascript&lt;/li&gt; 
 &lt;li&gt;Auto-generated Typescript definitions for your Go structs and methods&lt;/li&gt; 
 &lt;li&gt;Native Dialogs &amp;amp; Menus&lt;/li&gt; 
 &lt;li&gt;Native Dark / Light mode support&lt;/li&gt; 
 &lt;li&gt;Supports modern translucency and "frosted window" effects&lt;/li&gt; 
 &lt;li&gt;Unified eventing system between Go and Javascript&lt;/li&gt; 
 &lt;li&gt;Powerful cli tool to quickly generate and build your projects&lt;/li&gt; 
 &lt;li&gt;Multiplatform&lt;/li&gt; 
 &lt;li&gt;Uses native rendering engines - &lt;em&gt;no embedded browser&lt;/em&gt;!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Roadmap&lt;/h3&gt; 
&lt;p&gt;The project roadmap may be found &lt;a href="https://github.com/wailsapp/wails/discussions/1484"&gt;here&lt;/a&gt;. Please consult it before creating an enhancement request.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;The installation instructions are on the &lt;a href="https://wails.io/docs/gettingstarted/installation"&gt;official website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;This project is supported by these kind people / companies: &lt;img src="https://raw.githubusercontent.com/wailsapp/wails/master/website/static/img/sponsors.svg?sanitize=true" style="width:100%;max-width:800px;" /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://wails.io/img/sponsor/jetbrains-grayscale.webp" style="width: 100px" /&gt; &lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Is this an alternative to Electron?&lt;/p&gt; &lt;p&gt;Depends on your requirements. It's designed to make it easy for Go programmers to make lightweight desktop applications or add a frontend to their existing applications. Wails does offer native elements such as menus and dialogs, so it could be considered a lightweight electron alternative.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Who is this project aimed at?&lt;/p&gt; &lt;p&gt;Go programmers who want to bundle an HTML/JS/CSS frontend with their applications, without resorting to creating a server and opening a browser to view it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;What's with the name?&lt;/p&gt; &lt;p&gt;When I saw WebView, I thought "What I really want is tooling around building a WebView app, a bit like Rails is to Ruby". So initially it was a play on words (Webview on Rails). It just so happened to also be a homophone of the English name for the &lt;a href="https://en.wikipedia.org/wiki/Wales"&gt;Country&lt;/a&gt; I am from. So it stuck.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;a href="https://star-history.com/#wailsapp/wails&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=wailsapp/wails&amp;amp;type=Date&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=wailsapp/wails&amp;amp;type=Date" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=wailsapp/wails&amp;amp;type=Date" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;The contributors list is getting too big for the readme! All the amazing people who have contributed to this project have their own page &lt;a href="https://wails.io/credits#contributors"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fwailsapp%2Fwails?ref=badge_large"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fwailsapp%2Fwails.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;This project was mainly coded to the following albums:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/1R2rsEUqXjIvAbzM0yHrxA"&gt;Manic Street Preachers - Resistance Is Futile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/4VzCL9kjhgGQeKCiojK1YN"&gt;Manic Street Preachers - This Is My Truth, Tell Me Yours&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/4Krg8zvprquh7TVn9OxZn8"&gt;The Midnight - Endless Summer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/3kMfsD07Q32HRWKRrpcexr"&gt;Gary Newman - Savage (Songs from a Broken World)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/0oL0OhrE2rYVns4IGj8h2m"&gt;Steve Vai - Passion &amp;amp; Warfare&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/1nJsbWm3Yy2DW1KIc1OKle"&gt;Ben Howard - Every Kingdom&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/6astw05cTiXEc2OvyByaPs"&gt;Ben Howard - Noonday Dream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/2vBE40Rp60tl7rNqIZjaXM"&gt;Adwaith - Melyn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/3v2hrfNGINPLuDP0YDTOjm"&gt;Gwidaith Hen Fran - Cedors Hen Wrach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/2Kh43m04B1UkVcpcRa1Zug"&gt;Metallica - Metallica&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/6SsIdN05HQg2GwYLfXuzLB"&gt;Bloc Party - Silent Alarm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/3tklE2Fgw1hCIUstIwPBJF"&gt;Maxthor - Another World&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/0c32OywcLpdJCWWMC6vB8v"&gt;Alun Tan Lan - Y Distawrwydd&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>go-gorm/gorm</title>
      <link>https://github.com/go-gorm/gorm</link>
      <description>&lt;p&gt;The fantastic ORM library for Golang, aims to be developer friendly&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GORM&lt;/h1&gt; 
&lt;p&gt;The fantastic ORM library for Golang, aims to be developer friendly.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/go-gorm/gorm"&gt;&lt;img src="https://goreportcard.com/badge/github.com/go-gorm/gorm" alt="go report card" title="go report card" /&gt;&lt;/a&gt; &lt;a href="https://github.com/go-gorm/gorm/actions"&gt;&lt;img src="https://github.com/go-gorm/gorm/workflows/tests/badge.svg?branch=master" alt="test status" title="test status" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/MIT"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true" alt="MIT license" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/gorm.io/gorm?tab=doc"&gt;&lt;img src="https://img.shields.io/badge/go.dev-reference-blue?logo=go&amp;amp;logoColor=white" alt="Go.Dev reference" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full-Featured ORM&lt;/li&gt; 
 &lt;li&gt;Associations (Has One, Has Many, Belongs To, Many To Many, Polymorphism, Single-table inheritance)&lt;/li&gt; 
 &lt;li&gt;Hooks (Before/After Create/Save/Update/Delete/Find)&lt;/li&gt; 
 &lt;li&gt;Eager loading with &lt;code&gt;Preload&lt;/code&gt;, &lt;code&gt;Joins&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Transactions, Nested Transactions, Save Point, RollbackTo to Saved Point&lt;/li&gt; 
 &lt;li&gt;Context, Prepared Statement Mode, DryRun Mode&lt;/li&gt; 
 &lt;li&gt;Batch Insert, FindInBatches, Find To Map&lt;/li&gt; 
 &lt;li&gt;SQL Builder, Upsert, Locking, Optimizer/Index/Comment Hints, NamedArg, Search/Update/Create with SQL Expr&lt;/li&gt; 
 &lt;li&gt;Composite Primary Key&lt;/li&gt; 
 &lt;li&gt;Auto Migrations&lt;/li&gt; 
 &lt;li&gt;Logger&lt;/li&gt; 
 &lt;li&gt;Extendable, flexible plugin API: Database Resolver (Multiple Databases, Read/Write Splitting) / Prometheus…&lt;/li&gt; 
 &lt;li&gt;Every feature comes with tests&lt;/li&gt; 
 &lt;li&gt;Developer Friendly&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;GORM Guides &lt;a href="https://gorm.io"&gt;https://gorm.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Gen Guides &lt;a href="https://gorm.io/gen/index.html"&gt;https://gorm.io/gen/index.html&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://gorm.io/contribute.html"&gt;You can help to deliver a better GORM, check out things you can do&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/go-gorm/gorm/graphs/contributors"&gt;Thank you&lt;/a&gt; for contributing to the GORM framework!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;© Jinzhu, 2013~time.Now&lt;/p&gt; 
&lt;p&gt;Released under the &lt;a href="https://github.com/go-gorm/gorm/raw/master/LICENSE"&gt;MIT License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>alibaba/higress</title>
      <link>https://github.com/alibaba/higress</link>
      <description>&lt;p&gt;🤖 AI Gateway | AI Native API Gateway&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name="readme-top"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1 align="center"&gt; &lt;img src="https://img.alicdn.com/imgextra/i2/O1CN01NwxLDd20nxfGBjxmZ_!!6000000006895-2-tps-960-290.png" alt="Higress" width="240" height="72.5" /&gt; &lt;br /&gt; AI Gateway &lt;/h1&gt; 
&lt;h4 align="center"&gt; AI Native API Gateway &lt;/h4&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/alibaba/higress/actions"&gt;&lt;img src="https://github.com/alibaba/higress/actions/workflows/build-and-test.yaml/badge.svg?branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://www.apache.org/licenses/LICENSE-2.0.html"&gt;&lt;img src="https://img.shields.io/github/license/alibaba/higress.svg?sanitize=true" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/tSbww9VDaM"&gt;&lt;img src="https://img.shields.io/discord/1364956090566971515?color=5865F2&amp;amp;label=discord&amp;amp;labelColor=black&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square" alt="discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://trendshift.io/repositories/10918" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/10918" alt="alibaba%2Fhigress | Trendshift" style="width: 250px; height: 55px;" width="250" height="55" /&gt;&lt;/a&gt; &lt;a href="https://www.producthunt.com/posts/higress?embed=true&amp;amp;utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-higress" target="_blank"&gt;&lt;img src="https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=951287&amp;amp;theme=light&amp;amp;t=1745492822283" alt="Higress - Global APIs as MCP powered by AI Gateway | Product Hunt" style="width: 250px; height: 54px;" width="250" height="54" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://higress.ai/en/"&gt;&lt;strong&gt;Official Site&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href="https://higress.cn/en/docs/latest/overview/what-is-higress/"&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href="https://higress.cn/en/blog/"&gt;&lt;strong&gt;Blog&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href="https://higress.cn/en/ai/mcp-quick-start/"&gt;&lt;strong&gt;MCP Server QuickStart&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href="https://higress.cn/en/docs/latest/dev/architecture/"&gt;&lt;strong&gt;Developer Guide&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href="https://higress.cn/en/plugin/"&gt;&lt;strong&gt;Wasm Plugin Hub&lt;/strong&gt;&lt;/a&gt; &amp;nbsp; |&lt;/p&gt; 
&lt;p&gt; English | &lt;a href="https://raw.githubusercontent.com/alibaba/higress/main/README_ZH.md"&gt;中文&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/alibaba/higress/main/README_JP.md"&gt;日本語&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;What is Higress?&lt;/h2&gt; 
&lt;p&gt;Higress is a cloud-native API gateway based on Istio and Envoy, which can be extended with Wasm plugins written in Go/Rust/JS. It provides dozens of ready-to-use general-purpose plugins and an out-of-the-box console (try the &lt;a href="http://demo.higress.io/"&gt;demo here&lt;/a&gt;).&lt;/p&gt; 
&lt;h3&gt;Core Use Cases&lt;/h3&gt; 
&lt;p&gt;Higress's AI gateway capabilities support all &lt;a href="https://github.com/alibaba/higress/tree/main/plugins/wasm-go/extensions/ai-proxy/provider"&gt;mainstream model providers&lt;/a&gt; both domestic and international. It also supports hosting MCP (Model Context Protocol) Servers through its plugin mechanism, enabling AI Agents to easily call various tools and services. With the &lt;a href="https://github.com/higress-group/openapi-to-mcpserver"&gt;openapi-to-mcp tool&lt;/a&gt;, you can quickly convert OpenAPI specifications into remote MCP servers for hosting. Higress provides unified management for both LLM API and MCP API.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;🌟 Try it now at &lt;a href="https://mcp.higress.ai/"&gt;https://mcp.higress.ai/&lt;/a&gt;&lt;/strong&gt; to experience Higress-hosted Remote MCP Servers firsthand:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://img.alicdn.com/imgextra/i2/O1CN01nmVa0a1aChgpyyWOX_!!6000000003294-0-tps-3430-1742.jpg" alt="Higress MCP Server Platform" /&gt;&lt;/p&gt; 
&lt;h3&gt;Enterprise Adoption&lt;/h3&gt; 
&lt;p&gt;Higress was born within Alibaba to solve the issues of Tengine reload affecting long-connection services and insufficient load balancing capabilities for gRPC/Dubbo. Within Alibaba Cloud, Higress's AI gateway capabilities support core AI applications such as Tongyi Bailian model studio, machine learning PAI platform, and other critical AI services. Alibaba Cloud has built its cloud-native API gateway product based on Higress, providing 99.99% gateway high availability guarantee service capabilities for a large number of enterprise customers.&lt;/p&gt; 
&lt;h2&gt;Summary&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/alibaba/higress/main/#quick-start"&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/alibaba/higress/main/#feature-showcase"&gt;&lt;strong&gt;Feature Showcase&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/alibaba/higress/main/#use-cases"&gt;&lt;strong&gt;Use Cases&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/alibaba/higress/main/#core-advantages"&gt;&lt;strong&gt;Core Advantages&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/alibaba/higress/main/#community"&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Higress can be started with just Docker, making it convenient for individual developers to set up locally for learning or for building simple sites:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create a working directory
mkdir higress; cd higress
# Start higress, configuration files will be written to the working directory
docker run -d --rm --name higress-ai -v ${PWD}:/data \
        -p 8001:8001 -p 8080:8080 -p 8443:8443  \
        higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/all-in-one:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Port descriptions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Port 8001: Higress UI console entry&lt;/li&gt; 
 &lt;li&gt;Port 8080: Gateway HTTP protocol entry&lt;/li&gt; 
 &lt;li&gt;Port 8443: Gateway HTTPS protocol entry&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;All Higress Docker images use Higress's own image repository and are not affected by Docker Hub rate limits. In addition, the submission and updates of the images are protected by a security scanning mechanism (powered by Alibaba Cloud ACR), making them very secure for use in production environments.&lt;/p&gt; 
 &lt;p&gt;If you experience a timeout when pulling image from &lt;code&gt;higress-registry.cn-hangzhou.cr.aliyuncs.com&lt;/code&gt;, you can try replacing it with the following docker registry mirror source:&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Southeast Asia&lt;/strong&gt;: &lt;code&gt;higress-registry.ap-southeast-7.cr.aliyuncs.com&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For other installation methods such as Helm deployment under K8s, please refer to the official &lt;a href="https://higress.io/en-us/docs/user/quickstart"&gt;Quick Start documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Use Cases&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;MCP Server Hosting&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress hosts MCP Servers through its plugin mechanism, enabling AI Agents to easily call various tools and services. With the &lt;a href="https://github.com/higress-group/openapi-to-mcpserver"&gt;openapi-to-mcp tool&lt;/a&gt;, you can quickly convert OpenAPI specifications into remote MCP servers.&lt;/p&gt; &lt;p&gt;&lt;img src="https://img.alicdn.com/imgextra/i1/O1CN01wv8H4g1mS4MUzC1QC_!!6000000004952-2-tps-1764-597.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;Key benefits of hosting MCP Servers with Higress:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Unified authentication and authorization mechanisms&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Fine-grained rate limiting to prevent abuse&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Comprehensive audit logs for all tool calls&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Rich observability for monitoring performance&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Simplified deployment through Higress's plugin mechanism&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Dynamic updates without disruption or connection drops&lt;/p&gt; &lt;p&gt;&lt;a href="https://higress.cn/en/ai/mcp-quick-start/?spm=36971b57.7beea2de.0.0.d85f20a94jsWGm"&gt;Learn more...&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;AI Gateway&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress connects to all LLM model providers using a unified protocol, with AI observability, multi-model load balancing, token rate limiting, and caching capabilities:&lt;/p&gt; &lt;p&gt;&lt;img src="https://img.alicdn.com/imgextra/i2/O1CN01izmBNX1jbHT7lP3Yr_!!6000000004566-0-tps-1920-1080.jpg" alt="" /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kubernetes ingress controller&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress can function as a feature-rich ingress controller, which is compatible with many annotations of K8s' nginx ingress controller.&lt;/p&gt; &lt;p&gt;&lt;a href="https://gateway-api.sigs.k8s.io/"&gt;Gateway API&lt;/a&gt; support is coming soon and will support smooth migration from Ingress API to Gateway API.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Microservice gateway&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress can function as a microservice gateway, which can discovery microservices from various service registries, such as Nacos, ZooKeeper, Consul, Eureka, etc.&lt;/p&gt; &lt;p&gt;It deeply integrates with &lt;a href="https://github.com/apache/dubbo"&gt;Dubbo&lt;/a&gt;, &lt;a href="https://github.com/alibaba/nacos"&gt;Nacos&lt;/a&gt;, &lt;a href="https://github.com/alibaba/Sentinel"&gt;Sentinel&lt;/a&gt; and other microservice technology stacks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security gateway&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Higress can be used as a security gateway, supporting WAF and various authentication strategies, such as key-auth, hmac-auth, jwt-auth, basic-auth, oidc, etc.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Core Advantages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Production Grade&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Born from Alibaba's internal product with over 2 years of production validation, supporting large-scale scenarios with hundreds of thousands of requests per second.&lt;/p&gt; &lt;p&gt;Completely eliminates traffic jitter caused by Nginx reload, configuration changes take effect in milliseconds and are transparent to business. Especially friendly to long-connection scenarios such as AI businesses.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Streaming Processing&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Supports true complete streaming processing of request/response bodies, Wasm plugins can easily customize the handling of streaming protocols such as SSE (Server-Sent Events).&lt;/p&gt; &lt;p&gt;In high-bandwidth scenarios such as AI businesses, it can significantly reduce memory overhead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy to Extend&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Provides a rich official plugin library covering AI, traffic management, security protection and other common functions, meeting more than 90% of business scenario requirements.&lt;/p&gt; &lt;p&gt;Focuses on Wasm plugin extensions, ensuring memory safety through sandbox isolation, supporting multiple programming languages, allowing plugin versions to be upgraded independently, and achieving traffic-lossless hot updates of gateway logic.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Secure and Easy to Use&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Based on Ingress API and Gateway API standards, provides out-of-the-box UI console, WAF protection plugin, IP/Cookie CC protection plugin ready to use.&lt;/p&gt; &lt;p&gt;Supports connecting to Let's Encrypt for automatic issuance and renewal of free certificates, and can be deployed outside of K8s, started with a single Docker command, convenient for individual developers to use.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our Discord community! This is where you can connect with developers and other enthusiastic users of Higress.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/tSbww9VDaM"&gt;&lt;img src="https://img.shields.io/discord/1364956090566971515?color=5865F2&amp;amp;label=discord&amp;amp;labelColor=black&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=for-the-badge" alt="discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Thanks&lt;/h3&gt; 
&lt;p&gt;Higress would not be possible without the valuable open-source work of projects in the community. We would like to extend a special thank you to Envoy and Istio.&lt;/p&gt; 
&lt;h3&gt;Related Repositories&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Higress Console: &lt;a href="https://github.com/higress-group/higress-console"&gt;https://github.com/higress-group/higress-console&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Higress Standalone: &lt;a href="https://github.com/higress-group/higress-standalone"&gt;https://github.com/higress-group/higress-standalone&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;a href="https://github.com/alibaba/higress/graphs/contributors"&gt; &lt;img alt="contributors" src="https://contrib.rocks/image?repo=alibaba/higress" /&gt; &lt;/a&gt; 
&lt;h3&gt;Star History&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://star-history.com/#alibaba/higress&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=alibaba/higress&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="right" style="font-size: 14px; color: #555; margin-top: 20px;"&gt; &lt;a href="https://raw.githubusercontent.com/alibaba/higress/main/#readme-top" style="text-decoration: none; color: #007bff; font-weight: bold;"&gt; ↑ Back to Top ↑ &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grafana/k6</title>
      <link>https://github.com/grafana/k6</link>
      <description>&lt;p&gt;A modern load testing tool, using Go and JavaScript&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://grafana.com/oss/k6/"&gt; 
  &lt;picture&gt; 
   &lt;img src="https://raw.githubusercontent.com/grafana/k6/master/assets/logo.svg?sanitize=true" alt="Grafana k6" width="210" height="210" /&gt;
   &lt;br /&gt; 
  &lt;/picture&gt; &lt;br /&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="assets/grafana-labs-dark-theme.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="assets/grafana-labs.svg" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/grafana/k6/master/assets/grafana-labs.svg?sanitize=true" alt="Grafana Labs" width="210" /&gt; 
  &lt;/picture&gt; &lt;br /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt;Like unit testing, for performance&lt;/h3&gt; 
&lt;p align="center"&gt;Modern load testing for developers and testers in the DevOps era.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/grafana/k6/releases"&gt;&lt;img src="https://img.shields.io/github/release/grafana/k6.svg?sanitize=true" alt="Github release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/grafana/k6/actions/workflows/all.yml"&gt;&lt;img src="https://github.com/grafana/k6/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/grafana/k6"&gt;&lt;img src="https://goreportcard.com/badge/github.com/grafana/k6" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/grafana/k6"&gt;&lt;img src="https://img.shields.io/codecov/c/github/grafana/k6/master.svg?sanitize=true" alt="Codecov branch" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://twitter.com/k6_io"&gt;&lt;img src="https://img.shields.io/badge/twitter-@k6_io-55acee.svg?sanitize=true" alt="@k6_io on Twitter" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/grafana/k6/releases"&gt;Download&lt;/a&gt; · &lt;a href="https://grafana.com/docs/k6/latest/"&gt;Documentation&lt;/a&gt; · &lt;a href="https://community.grafana.com/c/grafana-k6/70"&gt;Community Forum&lt;/a&gt; · &lt;a href="https://github.com/orgs/grafana/projects/443/views/1"&gt;Public Roadmap&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;img src="https://raw.githubusercontent.com/grafana/k6/master/assets/github-hr.png" alt="---" /&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;strong&gt;k6&lt;/strong&gt; is a modern load-testing tool, built on &lt;a href="https://k6.io/about"&gt;our years of experience&lt;/a&gt; in the performance and testing industries. It's built to be powerful, extensible, and full-featured. The key design goal is to provide &lt;strong&gt;the best developer experience&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Its core features are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Configurable load generation.&lt;/strong&gt; Even lower-end machines can simulate lots of traffic.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tests as code.&lt;/strong&gt; Reuse scripts, modularize logic, version control, and integrate tests with your CI.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;A full-featured API.&lt;/strong&gt; The scripting API is packed with features that help you simulate real application traffic.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;An embedded JavaScript engine.&lt;/strong&gt; The performance of Go, the scripting familiarity of JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multiple Protocol support&lt;/strong&gt;. HTTP, WebSockets, gRPC, Browser, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Large extension ecosystem.&lt;/strong&gt; You can extend k6 to support your needs. And many people have already shared their extensions with the community!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible metrics storage and visualization&lt;/strong&gt;. Summary statistics or granular metrics, exported to the service of your choice.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Native integration with Grafana cloud&lt;/strong&gt;. &lt;a href="https://grafana.com/products/cloud/k6/"&gt;SaaS solution&lt;/a&gt; for test execution, metrics correlation, data analysis, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This is what load testing looks like in the 21st century.&lt;/p&gt; 
&lt;h2&gt;Example script&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import http from "k6/http";
import { check, sleep } from "k6";

// Test configuration
export const options = {
  thresholds: {
    // Assert that 99% of requests finish within 3000ms.
    http_req_duration: ["p(99) &amp;lt; 3000"],
  },
  // Ramp the number of virtual users up and down
  stages: [
    { duration: "30s", target: 15 },
    { duration: "1m", target: 15 },
    { duration: "20s", target: 0 },
  ],
};

// Simulated user behavior
export default function () {
  let res = http.get("https://quickpizza.grafana.com");
  // Validate response status
  check(res, { "status was 200": (r) =&amp;gt; r.status == 200 });
  sleep(1);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run scripts like this on the CLI, or in your CI, or across a Kubernetes cluster.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Don't want to write code ?&lt;/p&gt; 
 &lt;p&gt;We got you! Meet &lt;a href="https://github.com/grafana/k6-studio"&gt;k6 Studio&lt;/a&gt;, a desktop application made to help you generate k6 scripts without having to touch code!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The docs cover all aspects of using k6. Some highlights include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/"&gt;Get Started&lt;/a&gt;. Install, run a test, inspect results.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/http-requests/"&gt;HTTP requests&lt;/a&gt;. Have your virtual users use HTTP methods. Or, check the other &lt;a href="https://grafana.com/docs/k6/latest/using-k6/protocols/"&gt;Protocols&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/thresholds/"&gt;Thresholds&lt;/a&gt;. Set goals for your test, and codify your SLOs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/k6-options/"&gt;Options&lt;/a&gt;. Configure your load, duration, TLS certificates, and much, much more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/scenarios/"&gt;Scenarios&lt;/a&gt;. Choose how to model your workload: open models, closed models, constant RPS, fixed iterations, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/results-output/"&gt;Results output&lt;/a&gt;. Study, filter, and export your test results.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/javascript-api/"&gt;JavaScript API&lt;/a&gt;. Reference and examples of all k6 modules.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/extensions/"&gt;Extensions&lt;/a&gt;. Extend k6 for new protocols and use cases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These links barely scratch the surface! If you're looking for conceptual information, you can read about &lt;a href="https://grafana.com/docs/k6/latest/testing-guides/test-types/"&gt;Test types&lt;/a&gt;, &lt;a href="https://grafana.com/docs/k6/latest/testing-guides/"&gt;Test strategies&lt;/a&gt;, or one of the many informative &lt;a href="https://k6.io/blog"&gt;Blog posts&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Our team is dedicated to continuously improving and providing the best user experience possible. The &lt;a href="https://github.com/orgs/grafana/projects/443/views/1"&gt;public roadmap&lt;/a&gt; covers user-oriented features, UX improvements and JavaScript support that our team will focus on. Remember that timeframes and priorities may shift, but we believe it's important to share our vision.&lt;/p&gt; 
&lt;p&gt;We hope it provides a clear overview of our plans for future development. We welcome feedback, corrections, and suggestions via GitHub to make it more comprehensive, accessible, and valuable for the community.&lt;/p&gt; 
&lt;p&gt;It's worth mentioning that we consider &lt;a href="https://github.com/grafana/k6/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc"&gt;upvotes (thumbs-up)&lt;/a&gt; to be one of the essential metrics for determining community needs. If you want to show us the importance of a feature, please give it a thumbs-up.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;If you want to contribute or help with the development of k6, start by reading &lt;a href="https://raw.githubusercontent.com/grafana/k6/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;. Before you start coding, it might be a good idea to first discuss your plans and implementation details with the k6 maintainers—especially when it comes to big changes and features. You can do this in the &lt;a href="https://github.com/grafana/k6/issues"&gt;GitHub issue&lt;/a&gt; for the problem you're solving (create one if it doesn't exist).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To disclose security issues, refer to &lt;a href="https://raw.githubusercontent.com/grafana/k6/master/SECURITY.md"&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;To get help, report bugs, suggest features, and discuss k6 with others, refer to &lt;a href="https://raw.githubusercontent.com/grafana/k6/master/SUPPORT.md"&gt;SUPPORT.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;k6 is distributed under the &lt;a href="https://github.com/grafana/k6/raw/master/LICENSE.md"&gt;AGPL-3.0 license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>majd/ipatool</title>
      <link>https://github.com/majd/ipatool</link>
      <description>&lt;p&gt;Command-line tool that allows searching and downloading app packages (known as ipa files) from the iOS App Store&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IPATool&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://GitHub.com/majd/ipatool/releases/"&gt;&lt;img src="https://img.shields.io/github/release/majd/ipatool.svg?label=Release" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/majd/ipatool/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ipatool&lt;/code&gt; is a command line tool that allows you to search for iOS apps on the &lt;a href="https://apps.apple.com"&gt;App Store&lt;/a&gt; and download a copy of the app package, known as an &lt;em&gt;ipa&lt;/em&gt; file.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/majd/ipatool/main/resources/demo.gif" alt="Demo" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#manual"&gt;Manual&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#package-manager-macos"&gt;Package Manager (macOS)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#compiling"&gt;Compiling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/majd/ipatool/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/majd/ipatool/releases"&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/majd/ipatool/wiki/FAQ"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported operating system (Windows, Linux or macOS).&lt;/li&gt; 
 &lt;li&gt;Apple ID set up to use the App Store.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You can grab the latest version of &lt;code&gt;ipatool&lt;/code&gt; from &lt;a href="https://github.com/majd/ipatool/releases"&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Package Manager (macOS)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;ipatool&lt;/code&gt; using &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ brew install ipatool
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To authenticate with the App Store, use the &lt;code&gt;auth&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Authenticate with the App Store

Usage:
  ipatool auth [command]

Available Commands:
  info        Show current account info
  login       Login to the App Store
  revoke      Revoke your App Store credentials

Flags:
  -h, --help   help for auth

Global Flags:
      --format format     sets output format for command; can be 'text', 'json' (default text)
      --non-interactive   run in non-interactive session
      --verbose           enables verbose logs

Use "ipatool auth [command] --help" for more information about a command.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To search for apps on the App Store, use the &lt;code&gt;search&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Search for iOS apps available on the App Store

Usage:
  ipatool search &amp;lt;term&amp;gt; [flags]

Flags:
  -h, --help        help for search
  -l, --limit int   maximum amount of search results to retrieve (default 5)

Global Flags:
      --format format     sets output format for command; can be 'text', 'json' (default text)
      --non-interactive   run in non-interactive session
      --verbose           enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To obtain a license for an app, use the &lt;code&gt;purchase&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Obtain a license for the app from the App Store

Usage:
  ipatool purchase [flags]

Flags:
  -b, --bundle-identifier string   Bundle identifier of the target iOS app (required)
  -h, --help                       help for purchase

Global Flags:
      --format format     sets output format for command; can be 'text', 'json' (default text)
      --non-interactive   run in non-interactive session
      --verbose           enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To obtain a list of availble app versions to download, use the &lt;code&gt;list-versions&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;List the available versions of an iOS app

Usage:
  ipatool list-versions [flags]

Flags:
  -i, --app-id int                 ID of the target iOS app (required)
  -b, --bundle-identifier string   The bundle identifier of the target iOS app (overrides the app ID)
  -h, --help                       help for list-versions

Global Flags:
      --format format                sets output format for command; can be 'text', 'json' (default text)
      --keychain-passphrase string   passphrase for unlocking keychain
      --non-interactive              run in non-interactive session
      --verbose                      enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To download a copy of the ipa file, use the &lt;code&gt;download&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Download (encrypted) iOS app packages from the App Store

Usage:
  ipatool download [flags]

Flags:
  -i, --app-id int                   ID of the target iOS app (required)
  -b, --bundle-identifier string     The bundle identifier of the target iOS app (overrides the app ID)
      --external-version-id string   External version identifier of the target iOS app (defaults to latest version when not specified)
  -h, --help                         help for download
  -o, --output string                The destination path of the downloaded app package
      --purchase                     Obtain a license for the app if needed

Global Flags:
      --format format                sets output format for command; can be 'text', 'json' (default text)
      --keychain-passphrase string   passphrase for unlocking keychain
      --non-interactive              run in non-interactive session
      --verbose                      enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To resolve an external version identifier, returned by the &lt;code&gt;list-versions&lt;/code&gt; command, use the &lt;code&gt;get-version-metadata&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Retrieves the metadata for a specific version of an app

Usage:
  ipatool get-version-metadata [flags]

Flags:
  -i, --app-id int                   ID of the target iOS app (required)
  -b, --bundle-identifier string     The bundle identifier of the target iOS app (overrides the app ID)
      --external-version-id string   External version identifier of the target iOS app (required)
  -h, --help                         help for get-version-metadata

Global Flags:
      --format format                sets output format for command; can be 'text', 'json' (default text)
      --keychain-passphrase string   passphrase for unlocking keychain
      --non-interactive              run in non-interactive session
      --verbose                      enables verbose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the tool runs in interactive mode by default. Use the &lt;code&gt;--non-interactive&lt;/code&gt; flag if running in an automated environment.&lt;/p&gt; 
&lt;h2&gt;Compiling&lt;/h2&gt; 
&lt;p&gt;The tool can be compiled using the Go toolchain.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go build -o ipatool
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unit tests can be executed with the following commands.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go generate github.com/majd/ipatool/...
$ go test -v github.com/majd/ipatool/...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;IPATool is released under the &lt;a href="https://github.com/majd/ipatool/raw/main/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>