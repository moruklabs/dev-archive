<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Mon, 15 Sep 2025 02:06:09 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>rust-lang/rustlings</title>
      <link>https://github.com/rust-lang/rustlings</link>
      <description>&lt;p&gt;ü¶Ä Small exercises to get you used to reading and writing Rust code!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://rustlings.rust-lang.org"&gt;Rustlings&lt;/a&gt; ü¶Ä&lt;/h1&gt; 
&lt;p&gt;Small exercises to get you used to reading and writing &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt; code - &lt;em&gt;Recommended in parallel to reading &lt;a href="https://doc.rust-lang.org/book"&gt;the official Rust book&lt;/a&gt; üìöÔ∏è&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Visit the &lt;strong&gt;website&lt;/strong&gt; for a demo, info about setup and more:&lt;/p&gt; 
&lt;h2&gt;‚û°Ô∏è &lt;a href="https://rustlings.rust-lang.org"&gt;rustlings.rust-lang.org&lt;/a&gt; ‚¨ÖÔ∏è&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>DioxusLabs/dioxus</title>
      <link>https://github.com/DioxusLabs/dioxus</link>
      <description>&lt;p&gt;Fullstack app framework for web, desktop, and mobile.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;/p&gt;
&lt;p align="center"&gt; 
 &lt;!-- &lt;img src="./notes/header-light-updated.svg#gh-light-mode-only" &gt;
      &lt;img src="./notes/header-dark-updated.svg#gh-dark-mode-only" &gt; --&gt; 
 &lt;!-- &lt;a href="https://dioxuslabs.com"&gt;
          &lt;img src="./notes/flat-splash.avif"&gt;
      &lt;/a&gt; --&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/splash-header-darkmode.svg#gh-dark-mode-only" style="width: 80%; height: auto;" /&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/splash-header.svg#gh-light-mode-only" style="width: 80%; height: auto;" /&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/image-splash.avif" /&gt; &lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;!-- Crates version --&gt; 
 &lt;a href="https://crates.io/crates/dioxus"&gt; &lt;img src="https://img.shields.io/crates/v/dioxus.svg?style=flat-square" alt="Crates.io version" /&gt; &lt;/a&gt; 
 &lt;!-- Downloads --&gt; 
 &lt;a href="https://crates.io/crates/dioxus"&gt; &lt;img src="https://img.shields.io/crates/d/dioxus.svg?style=flat-square" alt="Download" /&gt; &lt;/a&gt; 
 &lt;!-- docs --&gt; 
 &lt;a href="https://docs.rs/dioxus"&gt; &lt;img src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square" alt="docs.rs docs" /&gt; &lt;/a&gt; 
 &lt;!-- CI --&gt; 
 &lt;a href="https://github.com/jkelleyrtp/dioxus/actions"&gt; &lt;img src="https://github.com/dioxuslabs/dioxus/actions/workflows/main.yml/badge.svg?sanitize=true" alt="CI status" /&gt; &lt;/a&gt; 
 &lt;!--Awesome --&gt; 
 &lt;a href="https://dioxuslabs.com/awesome"&gt; &lt;img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true" alt="Awesome Page" /&gt; &lt;/a&gt; 
 &lt;!-- Discord --&gt; 
 &lt;a href="https://discord.gg/XgGxMSkvUM"&gt; &lt;img src="https://img.shields.io/discord/899851952891002890.svg?logo=discord&amp;amp;style=flat-square" alt="Discord Link" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h3&gt; &lt;a href="https://dioxuslabs.com"&gt; Website &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/tree/main/examples"&gt; Examples &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://dioxuslabs.com/learn/0.6/guide"&gt; Guide &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/zh-cn/README.md"&gt; ‰∏≠Êñá &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/pt-br/README.md"&gt; PT-BR &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/ja-jp/README.md"&gt; Êó•Êú¨Ë™û &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/tr-tr"&gt; T√ºrk√ße &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/ko-kr"&gt; ÌïúÍµ≠Ïñ¥ &lt;/a&gt; &lt;/h3&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/releases/tag/v0.7.0-alpha.0"&gt;‚ú® Dioxus 0.7 is in alpha - test it out! ‚ú®&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;Build for web, desktop, and mobile, and more with a single codebase. Zero-config setup, integrated hot-reloading, and signals-based state management. Add backend functionality with Server Functions and bundle with our CLI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn app() -&amp;gt; Element {
    let mut count = use_signal(|| 0);

    rsx! {
        h1 { "High-Five counter: {count}" }
        button { onclick: move |_| count += 1, "Up high!" }
        button { onclick: move |_| count -= 1, "Down low!" }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;‚≠êÔ∏è Unique features:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cross-platform apps in three lines of code (web, desktop, mobile, server, and more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dioxuslabs.com/blog/release-050"&gt;Ergonomic state management&lt;/a&gt; combines the best of React, Solid, and Svelte&lt;/li&gt; 
 &lt;li&gt;Built-in featureful, type-safe, fullstack web framework&lt;/li&gt; 
 &lt;li&gt;Integrated bundler for deploying to the web, macOS, Linux, and Windows&lt;/li&gt; 
 &lt;li&gt;Subsecond Rust hot-patching and asset hot-reloading&lt;/li&gt; 
 &lt;li&gt;And more! &lt;a href="https://dioxuslabs.com/learn/0.6/"&gt;Take a tour of Dioxus&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Instant hot-reloading&lt;/h2&gt; 
&lt;p&gt;With one command, &lt;code&gt;dx serve&lt;/code&gt; and your app is running. Edit your markup, styles, and see changes in milliseconds. Use our experimental &lt;code&gt;dx serve --hotpatch&lt;/code&gt; to update Rust code in real time.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/hotreload-video.webp" /&gt; 
 &lt;!-- &lt;video src="https://private-user-images.githubusercontent.com/10237910/386919031-6da371d5-3340-46da-84ff-628216851ba6.mov" width="500"&gt;&lt;/video&gt; --&gt; 
 &lt;!-- &lt;video src="https://private-user-images.githubusercontent.com/10237910/386919031-6da371d5-3340-46da-84ff-628216851ba6.mov" width="500"&gt;&lt;/video&gt; --&gt; 
&lt;/div&gt; 
&lt;h2&gt;Build Beautiful Apps&lt;/h2&gt; 
&lt;p&gt;Dioxus apps are styled with HTML and CSS. Use the built-in TailwindCSS support or load your favorite CSS library. Easily call into native code (objective-c, JNI, Web-Sys) for a perfect native touch.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/ebou2.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Experimental Native Renderer&lt;/h2&gt; 
&lt;p&gt;Render using web-sys, webview, server-side-rendering, liveview, or even with our experimental WGPU-based renderer. Embed Dioxus in Bevy, WGPU, or even run on embedded Linux!&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/native-blitz-wgpu.webp" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;First-party primitive components&lt;/h2&gt; 
&lt;p&gt;Get started quickly with a complete set of primitives modeled after shadcn/ui and Radix-Primitives.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/primitive-components.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;First-class Android and iOS support&lt;/h2&gt; 
&lt;p&gt;Dioxus is the fastest way to build native mobile apps with Rust. Simply run &lt;code&gt;dx serve --platform android&lt;/code&gt; and your app is running in an emulator or on device in seconds. Call directly into JNI and Native APIs.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/android_and_ios2.avif" width="500" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Productive, typesafe, fullstack web framework&lt;/h2&gt; 
&lt;p&gt;Directly call your backend from your frontend with our built-in type-safe RPC using &lt;a href="http://crates.io/crates/server_fn"&gt;&lt;code&gt;server_fn&lt;/code&gt;&lt;/a&gt;. Supports streaming, suspense, bundle splitting, websockets, and more.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn app() -&amp;gt; Element {
  let mut fortune = use_signal(|| "Fetch a fortune!");
  rsx! {
    h1 { "{fortune}" }
    button {
      onclick: move |_| async move {
        fortune.set(fetch_fortune().await.unwrap());
      }
    }
  }
}

#[server]
async fn fetch_fortune() -&amp;gt; ServerFnResult&amp;lt;String&amp;gt; {
  "Dioxus is super productive!".to_string()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Bundle for web, desktop, and mobile&lt;/h2&gt; 
&lt;p&gt;Simply run &lt;code&gt;dx bundle&lt;/code&gt; and your app will be built and bundled with maximization optimizations. On the web, take advantage of &lt;a href="https://dioxuslabs.com/learn/0.6/guides/assets"&gt;&lt;code&gt;.avif&lt;/code&gt; generation, &lt;code&gt;.wasm&lt;/code&gt; compression, minification&lt;/a&gt;, and more. Build WebApps weighing &lt;a href="https://github.com/ealmloff/tiny-dioxus/"&gt;less than 50kb&lt;/a&gt; and desktop/mobile apps less than 5mb.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/bundle.gif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Fantastic documentation&lt;/h2&gt; 
&lt;p&gt;We've put a ton of effort into building clean, readable, and comprehensive documentation. All html elements and listeners are documented with MDN docs, and our Docs runs continuous integration with Dioxus itself to ensure that the docs are always up to date. Check out the &lt;a href="https://dioxuslabs.com/learn/0.6/"&gt;Dioxus website&lt;/a&gt; for guides, references, recipes, and more. Fun fact: we use the Dioxus website as a testbed for new Dioxus features - &lt;a href="https://github.com/dioxusLabs/docsite"&gt;check it out!&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/docs.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Modular and Customizable&lt;/h2&gt; 
&lt;p&gt;Build your own renderer, or use a community renderer like &lt;a href="http://freyaui.dev"&gt;Freya&lt;/a&gt;. Use our modular components like RSX, VirtualDom, Blitz, Taffy, and Subsecond.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/freya-todo-example.webp" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Dioxus is a community-driven project, with a very active &lt;a href="https://discord.gg/XgGxMSkvUM"&gt;Discord&lt;/a&gt; and &lt;a href="https://github.com/DioxusLabs/dioxus/issues"&gt;GitHub&lt;/a&gt; community. We're always looking for help, and we're happy to answer questions and help you get started. &lt;a href="https://github.com/DioxusLabs/dioxus-std"&gt;Our SDK&lt;/a&gt; is community-run and we even have a &lt;a href="https://github.com/dioxus-community/"&gt;GitHub organization&lt;/a&gt; for the best Dioxus crates that receive free upgrades and support.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/dioxus-community.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Full-time core team&lt;/h2&gt; 
&lt;p&gt;Dioxus has grown from a side project to a small team of fulltime engineers. Thanks to the generous support of FutureWei, Satellite.im, the GitHub Accelerator program, we're able to work on Dioxus full-time. Our long term goal is for Dioxus to become self-sustaining by providing paid high-quality enterprise tools. If your company is interested in adopting Dioxus and would like to work with us, please reach out!&lt;/p&gt; 
&lt;h2&gt;Supported Platforms&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;table style="width:100%"&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Web&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render directly to the DOM using WebAssembly&lt;/li&gt; 
      &lt;li&gt;Pre-render with SSR and rehydrate on the client&lt;/li&gt; 
      &lt;li&gt;Simple "hello world" at about 50kb, comparable to React&lt;/li&gt; 
      &lt;li&gt;Built-in dev server and hot reloading for quick iteration&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Desktop&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render using Webview or - experimentally - with WGPU or &lt;a href="https://freyaui.dev"&gt;Freya&lt;/a&gt; (Skia) &lt;/li&gt; 
      &lt;li&gt;Zero-config setup. Simply `cargo run` or `dx serve` to build your app &lt;/li&gt; 
      &lt;li&gt;Full support for native system access without IPC &lt;/li&gt; 
      &lt;li&gt;Supports macOS, Linux, and Windows. Portable &amp;lt;3mb binaries &lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Mobile&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render using Webview or - experimentally - with WGPU or Skia &lt;/li&gt; 
      &lt;li&gt;Build .ipa and .apk files for iOS and Android &lt;/li&gt; 
      &lt;li&gt;Call directly into Java and Objective-C with minimal overhead&lt;/li&gt; 
      &lt;li&gt;From "hello world" to running on device in seconds&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Server-side Rendering&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Suspense, hydration, and server-side rendering&lt;/li&gt; 
      &lt;li&gt;Quickly drop in backend functionality with server functions&lt;/li&gt; 
      &lt;li&gt;Extractors, middleware, and routing integrations&lt;/li&gt; 
      &lt;li&gt;Static-site generation and incremental regeneration&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;h2&gt;Running the examples&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The examples in the main branch of this repository target the git version of dioxus and the CLI. If you are looking for examples that work with the latest stable release of dioxus, check out the &lt;a href="https://github.com/DioxusLabs/dioxus/tree/v0.6/examples"&gt;0.6 branch&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The examples in the top level of this repository can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo run --example &amp;lt;example&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, we encourage you to download the dioxus-cli to test out features like hot-reloading. To install the most recent binary CLI, you can use cargo binstall.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo binstall dioxus-cli@0.7.0-rc.0 --force
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If this CLI is out-of-date, you can install it directly from git&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo install --git https://github.com/DioxusLabs/dioxus dioxus-cli --locked
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the CLI, you can also run examples with the web platform. You will need to disable the default desktop feature and enable the web feature with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;dx serve --example &amp;lt;example&amp;gt; --platform web -- --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out the website &lt;a href="https://dioxuslabs.com/learn/0.6/contributing"&gt;section on contributing&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Report issues on our &lt;a href="https://github.com/dioxuslabs/dioxus/issues"&gt;issue tracker&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/XgGxMSkvUM"&gt;Join&lt;/a&gt; the discord and ask questions!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;a href="https://github.com/dioxuslabs/dioxus/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=dioxuslabs/dioxus&amp;amp;max=30&amp;amp;columns=10" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under either the &lt;a href="https://github.com/DioxusLabs/dioxus/raw/master/LICENSE-MIT"&gt;MIT license&lt;/a&gt; or the &lt;a href="https://github.com/DioxusLabs/dioxus/raw/master/LICENSE-APACHE"&gt;Apache-2 License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Dioxus by you, shall be licensed as MIT or Apache-2, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>librespot-org/librespot</title>
      <link>https://github.com/librespot-org/librespot</link>
      <description>&lt;p&gt;Open Source Spotify client library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/librespot-org/librespot/actions"&gt;&lt;img src="https://github.com/librespot-org/librespot/workflows/build/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;&lt;img src="https://badges.gitter.im/librespot-org/librespot.png" alt="Gitter chat" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/librespot"&gt;&lt;img src="https://img.shields.io/crates/v/librespot.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Current maintainers are &lt;a href="https://github.com/orgs/librespot-org/people"&gt;listed on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;librespot&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;librespot&lt;/em&gt; is an open source client library for Spotify. It enables applications to use Spotify's service to control and play music via various backends, and to act as a Spotify Connect receiver. It is an alternative to the official and &lt;a href="https://pyspotify.mopidy.com/en/latest/#libspotify-s-deprecation"&gt;now deprecated&lt;/a&gt; closed-source &lt;code&gt;libspotify&lt;/code&gt;. Additionally, it will provide extra features which are not available in the official library.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note: librespot only works with Spotify Premium. This will remain the case. We will not support any features to make librespot compatible with free accounts, such as limited skips and adverts.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;We're available on &lt;a href="https://crates.io/crates/librespot"&gt;crates.io&lt;/a&gt; as the &lt;em&gt;librespot&lt;/em&gt; package. Simply run &lt;code&gt;cargo install librespot&lt;/code&gt; to install librespot on your system. Check the wiki for more info and possible &lt;a href="https://github.com/librespot-org/librespot/wiki/Options"&gt;usage options&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;After installation, you can run librespot from the CLI using a command such as &lt;code&gt;librespot -n "Librespot Speaker" -b 160&lt;/code&gt; to create a speaker called &lt;em&gt;Librespot Speaker&lt;/em&gt; serving 160 kbps audio.&lt;/p&gt; 
&lt;h2&gt;This fork&lt;/h2&gt; 
&lt;p&gt;As the origin by &lt;a href="https://github.com/plietar/"&gt;plietar&lt;/a&gt; is no longer actively maintained, this organisation and repository have been set up so that the project may be maintained and upgraded in the future.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Documentation is currently a work in progress, contributions are welcome!&lt;/p&gt; 
&lt;p&gt;There is some brief documentation on how the protocol works in the &lt;a href="https://github.com/librespot-org/librespot/tree/master/docs"&gt;docs&lt;/a&gt; folder.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/librespot-org/librespot/raw/master/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; contains detailed instructions on setting up a development environment, and compiling librespot. More general usage and compilation information is available on the &lt;a href="https://github.com/librespot-org/librespot/wiki"&gt;wiki&lt;/a&gt;. &lt;a href="https://github.com/librespot-org/librespot/raw/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; also contains our contributing guidelines.&lt;/p&gt; 
&lt;p&gt;If you wish to learn more about how librespot works overall, the best way is to simply read the code, and ask any questions you have in our &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;Gitter Room&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Issues &amp;amp; Discussions&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;We have recently started using Github discussions for general questions and feature requests, as they are a more natural medium for such cases, and allow for upvoting to prioritize feature development. Check them out &lt;a href="https://github.com/librespot-org/librespot/discussions"&gt;here&lt;/a&gt;. Bugs and issues with the underlying library should still be reported as issues.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you run into a bug when using librespot, please search the existing issues before opening a new one. Chances are, we've encountered it before, and have provided a resolution. If not, please open a new one, and where possible, include the backtrace librespot generates on crashing, along with anything we can use to reproduce the issue, e.g. the Spotify URI of the song that caused the crash.&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;p&gt;A quick walkthrough of the build process is outlined below, while a detailed compilation guide can be found &lt;a href="https://github.com/librespot-org/librespot/raw/master/COMPILING.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Additional Dependencies&lt;/h2&gt; 
&lt;p&gt;We recently switched to using &lt;a href="https://github.com/tomaka/rodio"&gt;Rodio&lt;/a&gt; for audio playback by default, hence for macOS and Windows, you should just be able to clone and build librespot (with the command below). For Linux, you will need to run the additional commands below, depending on your distro.&lt;/p&gt; 
&lt;p&gt;On Debian/Ubuntu, the following command will install these dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo apt-get install build-essential libasound2-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora systems, the following command will install these dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo dnf install alsa-lib-devel make gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;librespot currently offers the following selection of &lt;a href="https://github.com/librespot-org/librespot/wiki/Audio-Backends"&gt;audio backends&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Rodio (default)
ALSA
GStreamer
PortAudio
PulseAudio
JACK
JACK over Rodio
SDL
Pipe
Subprocess
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please check &lt;a href="https://raw.githubusercontent.com/librespot-org/librespot/dev/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; for detailed information on TLS, audio, and discovery backend dependencies, or the &lt;a href="https://github.com/librespot-org/librespot/wiki/Compiling#general-dependencies"&gt;Compiling&lt;/a&gt; entry on the wiki for additional backend specific dependencies.&lt;/p&gt; 
&lt;p&gt;Once you've installed the dependencies and cloned this repository you can build &lt;em&gt;librespot&lt;/em&gt; with the default features using Cargo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, this builds with native-tls (system TLS), rodio audio backend, and libmdns discovery. See &lt;a href="https://raw.githubusercontent.com/librespot-org/librespot/dev/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; for information on selecting different TLS, audio, and discovery backends.&lt;/p&gt; 
&lt;h1&gt;Packages&lt;/h1&gt; 
&lt;p&gt;librespot is also available via official package system on various operating systems such as Linux, FreeBSD, NetBSD. &lt;a href="https://repology.org/project/librespot/versions"&gt;Repology&lt;/a&gt; offers a good overview.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/librespot/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/librespot.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;A sample program implementing a headless Spotify Connect receiver is provided. Once you've built &lt;em&gt;librespot&lt;/em&gt;, run it using :&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;target/release/librespot --name DEVICENAME
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above is a minimal example. Here is a more fully fledged one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;target/release/librespot -n "Librespot" -b 320 -c ./cache --enable-volume-normalisation --initial-volume 75 --device-type avr
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above command will create a receiver named &lt;code&gt;Librespot&lt;/code&gt;, with bitrate set to 320 kbps, initial volume at 75%, with volume normalisation enabled, and the device displayed in the app as an Audio/Video Receiver. A folder named &lt;code&gt;cache&lt;/code&gt; will be created/used in the current directory, and be used to cache audio data and credentials.&lt;/p&gt; 
&lt;p&gt;A full list of runtime options is available &lt;a href="https://github.com/librespot-org/librespot/wiki/Options"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Please Note: When using the cache feature, an authentication blob is stored for your account in the cache directory. For security purposes, we recommend that you set directory permissions on the cache directory to &lt;code&gt;700&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Come and hang out on gitter if you need help or want to offer some: &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;https://gitter.im/librespot-org/spotify-connect-resources&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;Using this code to connect to Spotify's API is probably forbidden by them. Use at your own risk.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Everything in this repository is licensed under the MIT license.&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;This is a non exhaustive list of projects that either use or have modified librespot. If you'd like to include yours, submit a PR.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/librespot-org/librespot-golang"&gt;librespot-golang&lt;/a&gt; - A golang port of librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcelveldt/plugin.audio.spotify"&gt;plugin.audio.spotify&lt;/a&gt; - A Kodi plugin for Spotify.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dtcooper/raspotify"&gt;raspotify&lt;/a&gt; - A Spotify Connect client that mostly Just Works‚Ñ¢&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Spotifyd/spotifyd"&gt;Spotifyd&lt;/a&gt; - A stripped down librespot UNIX daemon.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nicokaiser/rpi-audio-receiver"&gt;rpi-audio-receiver&lt;/a&gt; - easy Raspbian install scripts for Spotifyd, Bluetooth, Shairport and other audio receivers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/badfortrains/spotcontrol"&gt;Spotcontrol&lt;/a&gt; - A golang implementation of a Spotify Connect controller. No Playback functionality.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/devgianlu/librespot-java"&gt;librespot-java&lt;/a&gt; - A Java port of librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hrkfdn/ncspot"&gt;ncspot&lt;/a&gt; - Cross-platform ncurses Spotify client.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xMordax/ansible-role-librespot/tree/master"&gt;ansible-role-librespot&lt;/a&gt; - Ansible role that will build, install and configure Librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xou816/spot"&gt;Spot&lt;/a&gt; - Gtk/Rust native Spotify client for the GNOME desktop.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/badaix/snapcast"&gt;Snapcast&lt;/a&gt; - synchronised multi-room audio player that uses librespot as its source for Spotify content&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mupibox.de/"&gt;MuPiBox&lt;/a&gt; - Portable music box for Spotify and local media based on Raspberry Pi. Operated via touchscreen. Suitable for children and older people.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>GyulyVGC/sniffnet</title>
      <link>https://github.com/GyulyVGC/sniffnet</link>
      <description>&lt;p&gt;Comfortably monitor your Internet traffic üïµÔ∏è‚Äç‚ôÇÔ∏è&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;img alt="" title="Sniffnet" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/header_repository.png" width="95%" /&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/#download"&gt;&lt;img alt="" title="Download" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/download.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/ROADMAP.md"&gt;&lt;img alt="" title="Roadmap" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/roadmap.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://sniffnet.net"&gt;&lt;img alt="" title="Website" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/website.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki"&gt;&lt;img alt="" title="Wiki" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/wiki.svg?sanitize=true" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Application to comfortably monitor your Internet traffic.&lt;br /&gt; Cross-platform. Intuitive. Reliable.&lt;/p&gt; 
 &lt;p&gt;Translated in:&lt;br /&gt; üá®üá≥ üá©üá™ üá´üá∑ üá∑üá∫ üáµüáπ üá™üá¶ üáÆüáπ üáµüá± &lt;a href="https://github.com/GyulyVGC/sniffnet/issues/60"&gt;+&amp;nbsp;15&amp;nbsp;more&amp;nbsp;languages&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;img alt="" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/hr.png" width="100%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img alt="" title="Overview page" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/overview.png" width="95%" /&gt; 
 &lt;img alt="" title="Inspect page" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/inspect.png" width="47%" /&gt; 
 &lt;img alt="" title="Notifications page" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/notifications.png" width="47%" /&gt; 
 &lt;img alt="" title="Custom theme" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/deep_cosmos.png" width="47%" /&gt; 
 &lt;img alt="" title="Thumbnail mode" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/thumbnail.png" width="47%" /&gt; 
&lt;/div&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;img alt="" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/hr.png" width="100%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;h2&gt;&lt;em&gt;Support Sniffnet's development&lt;/em&gt; üíñ&lt;/h2&gt; 
&lt;p&gt;&lt;i&gt;Sniffnet is completely free, open-source software which needs lots of effort and time to develop and maintain.&lt;/i&gt;&lt;/p&gt; 
&lt;p&gt;&lt;i&gt;If you appreciate Sniffnet, &lt;a href="https://github.com/sponsors/GyulyVGC"&gt;consider sponsoring&lt;/a&gt;: your support will enable a constant growth with &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/ROADMAP.md"&gt;new features and functionalities&lt;/a&gt;.&lt;br /&gt; Do you want to help the project in an alternative way? You can also head to the &lt;a href="https://grindhouse.dev/collections/sniffnet"&gt;official store&lt;/a&gt; and put your hands on some cool merchandise!&lt;/i&gt;&lt;/p&gt; 
&lt;p&gt;&lt;i&gt;A special mention goes to these awesome organizations and folks who are sponsoring Sniffnet:&lt;/i&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/github" title="GitHub"&gt;&lt;img src="https://avatars.githubusercontent.com/github?v=4" width="60px" alt="GitHub" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://nlnet.nl" title="NLnet"&gt;&lt;img src="https://nlnet.nl/logo/logo.svg?sanitize=true" width="60px" alt="NLnet" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://ipinfo.io" title="IPinfo"&gt;&lt;img src="https://avatars.githubusercontent.com/ipinfo?v=4" width="60px" alt="IPinfo" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Cthulu201" title="Cthulu201"&gt;&lt;img src="https://avatars.githubusercontent.com/Cthulu201?v=4" width="60px" alt="Cthulu201" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/0x0177b11f" title="Tiansheng Li"&gt;&lt;img src="https://avatars.githubusercontent.com/0x0177b11f?v=4" width="60px" alt="Tiansheng Li" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ZEROF" title="ZEROF"&gt;&lt;img src="https://avatars.githubusercontent.com/ZEROF?v=4" width="60px" alt="ZEROF" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://www.janwalter.org/" title="Jan Walter"&gt;&lt;img src="https://avatars.githubusercontent.com/wahn?v=4" width="60px" alt="Jan Walter" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; 
    &lt;picture&gt;
     &lt;img alt="Windows" title="Windows" height="85px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/windows.svg?sanitize=true" /&gt;
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_Windows_64-bit.msi"&gt;64-bit&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_Windows_32-bit.msi"&gt;32-bit&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; 
    &lt;picture&gt;
     &lt;img alt="macOS" title="macOS" height="85px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/macos.svg?sanitize=true" /&gt;
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_macOS_Intel.dmg"&gt;Intel&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_macOS_AppleSilicon.dmg"&gt;Apple silicon&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; 
    &lt;picture&gt;
     &lt;img alt="Linux" title="Linux" height="85px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/linux.svg?sanitize=true" /&gt;
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt; AppImage: &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxAppImage_amd64.AppImage"&gt;amd64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxAppImage_arm64.AppImage"&gt;arm64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxAppImage_i386.AppImage"&gt;i386&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxAppImage_armhf.AppImage"&gt;armhf&lt;/a&gt; &lt;br /&gt; DEB: &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_amd64.deb"&gt;amd64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_arm64.deb"&gt;arm64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_i386.deb"&gt;i386&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_armhf.deb"&gt;armhf&lt;/a&gt; &lt;br /&gt; RPM: &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxRPM_x86_64.rpm"&gt;x86_64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxRPM_aarch64.rpm"&gt;aarch64&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;Links in the table above will download the latest version of Sniffnet directly from &lt;a href="https://github.com/GyulyVGC/sniffnet/releases"&gt;GitHub releases&lt;/a&gt;. &lt;br /&gt; Not what you're looking for? Check out &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki/Alternative-installation-methods"&gt;alternative installation methods&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Remember to also install the &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki/Required-dependencies"&gt;required dependencies&lt;/a&gt; for your operating system.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üíª choose a &lt;strong&gt;network adapter&lt;/strong&gt; of your PC to inspect&lt;/li&gt; 
 &lt;li&gt;üè∑Ô∏è select a set of &lt;strong&gt;filters&lt;/strong&gt; to apply to the observed traffic&lt;/li&gt; 
 &lt;li&gt;üìñ view overall &lt;strong&gt;statistics&lt;/strong&gt; about your Internet traffic&lt;/li&gt; 
 &lt;li&gt;üìà view &lt;strong&gt;real-time charts&lt;/strong&gt; about traffic intensity&lt;/li&gt; 
 &lt;li&gt;üìå keep an eye on your network even when the application is &lt;strong&gt;minimized&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;üìÅ &lt;strong&gt;import&lt;/strong&gt; and &lt;strong&gt;export&lt;/strong&gt; comprehensive capture reports as &lt;strong&gt;PCAP files&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;üîé identify &lt;strong&gt;6000+ upper layer services&lt;/strong&gt;, protocols, trojans, and worms&lt;/li&gt; 
 &lt;li&gt;üåê find out &lt;strong&gt;domain name&lt;/strong&gt; and &lt;strong&gt;ASN&lt;/strong&gt; of the hosts you are exchanging traffic with&lt;/li&gt; 
 &lt;li&gt;üè† identify connections in your &lt;strong&gt;local network&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;üåç discover the &lt;strong&gt;geographical location&lt;/strong&gt; of remote hosts&lt;/li&gt; 
 &lt;li&gt;‚≠ê save your &lt;strong&gt;favorite&lt;/strong&gt; network hosts&lt;/li&gt; 
 &lt;li&gt;üïµÔ∏è‚Äç‚ôÇÔ∏è search and &lt;strong&gt;inspect&lt;/strong&gt; each of your network connections in real time&lt;/li&gt; 
 &lt;li&gt;üîâ set custom &lt;strong&gt;notifications&lt;/strong&gt; to inform you when defined network events occur&lt;/li&gt; 
 &lt;li&gt;üé® choose the &lt;strong&gt;style&lt;/strong&gt; that fits you the most, including custom themes support&lt;/li&gt; 
 &lt;li&gt;...and more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;User manual&lt;/h2&gt; 
&lt;p&gt;Do you want to &lt;strong&gt;learn more&lt;/strong&gt;? &lt;br /&gt; Check out the &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki"&gt;&lt;strong&gt;Sniffnet Wiki&lt;/strong&gt;&lt;/a&gt;, a comprehensive manual to help you thoroughly master the application from a basic setup to the most advanced functionalities. &lt;br /&gt; The Wiki includes step-by-step guides, tips, examples of usage, and answers to frequent questions.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki"&gt; &lt;img alt="" title="Sniffnet Wiki" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/logos/wiki/wikilogo.svg?sanitize=true" width="300px" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;See details&lt;/summary&gt; 
 &lt;h3&gt;Missing dependencies&lt;/h3&gt; 
 &lt;p&gt;Most of the errors that may arise are likely due to your system missing dependencies required to correctly analyze a network adapter. &lt;br /&gt; Check the &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki/Required-dependencies"&gt;required dependencies page&lt;/a&gt; for instructions on how to proceed depending on your operating system.&lt;/p&gt; 
 &lt;h3&gt;Rendering problems&lt;/h3&gt; 
 &lt;p&gt;In some circumstances, especially if you are running on an old architecture or your graphical drivers are not updated, the &lt;code&gt;wgpu&lt;/code&gt; default renderer used by &lt;a href="https://github.com/iced-rs/iced"&gt;iced&lt;/a&gt; may manifest bugs (the interface glitches, color gradients are unsupported, or some icons are completely black). &lt;br /&gt; In these cases you can set an environment variable to switch to the &lt;code&gt;tiny-skia&lt;/code&gt; renderer, a CPU-only software renderer that should work properly on every environment:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;ICED_BACKEND=tiny-skia
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;em&gt;&lt;strong&gt;In any case, don't hesitate to &lt;a href="https://github.com/GyulyVGC/sniffnet/issues/new/choose"&gt;open an issue&lt;/a&gt;, and I will do my best to help you!&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt; 
&lt;/details&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;A big shout-out to &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/CONTRIBUTORS.md"&gt;all the contributors&lt;/a&gt; of Sniffnet!&lt;/li&gt; 
 &lt;li&gt;The graphical user interface has been realized with &lt;a href="https://github.com/iced-rs/iced"&gt;iced&lt;/a&gt;, a cross-platform GUI library for Rust focused on simplicity and type-safety&lt;/li&gt; 
 &lt;li&gt;IP geolocation and ASN data are provided by &lt;a href="https://www.maxmind.com"&gt;MaxMind&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Free code signing for Windows Installer is provided by &lt;a href="https://about.signpath.io/"&gt;SignPath.io&lt;/a&gt;, certificate by &lt;a href="https://signpath.org/"&gt;SignPath Foundation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ads.fund/token/0xadfc251f8ef00ceaeca2b5c1882dabe5db0833df"&gt;Sniffnet&lt;/a&gt; project is supported by ADS.FUND&lt;/li&gt; 
 &lt;li&gt;Last but not least, thanks to &lt;a href="https://github.com/GyulyVGC/sniffnet/stargazers"&gt;every single stargazer&lt;/a&gt;: all forms of support made it possible to keep improving Sniffnet!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Stay in the loop&lt;/h2&gt; 
&lt;p&gt;Wait... there's more!&lt;br /&gt;Sniffnet is rapidly evolving, and new features are added on a regular basis.&lt;br /&gt; Follow the &lt;a href="https://sniffnet.net/news"&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt; and Sniffnet socials to never miss an update.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://bsky.app/profile/sniffnet.net"&gt;&lt;img width="48" height="48" alt="Bluesky" title="Bluesky" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/bluesky.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://www.linkedin.com/company/sniffnet"&gt;&lt;img width="48" height="48" alt="LinkedIn" title="LinkedIn" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/linkedin.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://mastodon.social/@sniffnet"&gt;&lt;img width="48" height="48" alt="Mastodon" title="Mastodon" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/mastodon.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://t.me/sniffnet"&gt;&lt;img width="48" height="48" alt="Telegram" title="Telegram" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/telegram.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://x.com/sniffnet"&gt;&lt;img width="48" height="48" alt="Twitter / X" title="Twitter / X" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/x.svg?sanitize=true" /&gt;&lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>diesel-rs/diesel</title>
      <link>https://github.com/diesel-rs/diesel</link>
      <description>&lt;p&gt;A safe, extensible ORM and Query Builder for Rust&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://diesel.rs"&gt;&lt;img src="https://diesel.rs/assets/images/diesel_logo_stacked_black.png" alt="diesel logo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;A safe, extensible ORM and Query Builder for Rust&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/diesel-rs/diesel/actions?query=workflow%3A%22CI+Tests%22+branch%3Amaster"&gt;&lt;img src="https://github.com/diesel-rs/diesel/workflows/CI%20Tests/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/diesel"&gt;&lt;img src="https://img.shields.io/crates/v/diesel.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;API Documentation: &lt;a href="https://docs.rs/diesel"&gt;latest release&lt;/a&gt; ‚Äì &lt;a href="https://docs.diesel.rs/master/diesel/index.html"&gt;master branch&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://diesel.rs"&gt;Homepage&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Diesel gets rid of the boilerplate for database interaction and eliminates runtime errors without sacrificing performance. It takes full advantage of Rust's type system to create a low overhead query builder that "feels like Rust."&lt;/p&gt; 
&lt;p&gt;Supported databases:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://docs.diesel.rs/master/diesel/pg/index.html"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.diesel.rs/master/diesel/mysql/index.html"&gt;MySQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.diesel.rs/master/diesel/sqlite/index.html"&gt;SQLite&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can configure the database backend in &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
diesel = { version = "&amp;lt;version&amp;gt;", features = ["&amp;lt;postgres|mysql|sqlite&amp;gt;"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Find our extensive Getting Started tutorial at &lt;a href="https://diesel.rs/guides/getting-started"&gt;https://diesel.rs/guides/getting-started&lt;/a&gt;. Guides on more specific features are coming soon.&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;If you run into problems, you can come ask for help at in our &lt;a href="https://github.com/diesel-rs/diesel/discussions"&gt;GitHub Discussions&lt;/a&gt; forum. This is also the right place to propose new features or show your applications.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Simple queries&lt;/h3&gt; 
&lt;p&gt;Simple queries are a complete breeze. Loading all users from a database:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;users::table.load(&amp;amp;mut connection)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * FROM users;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Loading all the posts for a user:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;Post::belonging_to(user).load(&amp;amp;mut connection)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * FROM posts WHERE user_id = 1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Complex queries&lt;/h3&gt; 
&lt;p&gt;Diesel's powerful query builder helps you construct queries as simple or complex as you need, at zero cost.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let versions = Version::belonging_to(krate)
  .select(id)
  .order(num.desc())
  .limit(5);
let downloads = version_downloads
  .filter(date.gt(now - 90.days()))
  .filter(version_id.eq_any(versions))
  .order(date)
  .load::&amp;lt;Download&amp;gt;(&amp;amp;mut conn)?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT version_downloads.* FROM version_downloads
  WHERE date &amp;gt; (NOW() - '90 days')
    AND version_id = ANY(
      SELECT id FROM versions
        WHERE crate_id = 1
        ORDER BY num DESC
        LIMIT 5
    )
  ORDER BY date
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Less boilerplate&lt;/h3&gt; 
&lt;p&gt;Diesel codegen generates boilerplate for you. It lets you focus on your business logic, not mapping to and from SQL rows.&lt;/p&gt; 
&lt;p&gt;That means you can write this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Queryable, Selectable)]
#[diesel(table_name = downloads)]
pub struct Download {
    id: i32,
    version_id: i32,
    downloads: i32,
    counted: i32,
    date: SystemTime,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Instead of this without Diesel:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;pub struct Download {
    id: i32,
    version_id: i32,
    downloads: i32,
    counted: i32,
    date: SystemTime,
}

impl Download {
    fn from_row(row: &amp;amp;Row) -&amp;gt; Download {
        Download {
            id: row.get("id"),
            version_id: row.get("version_id"),
            downloads: row.get("downloads"),
            counted: row.get("counted"),
            date: row.get("date"),
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Inserting data&lt;/h3&gt; 
&lt;p&gt;It's not just about reading data. Diesel makes it easy to use structs for new records.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Insertable)]
#[diesel(table_name = users)]
struct NewUser&amp;lt;'a&amp;gt; {
    name: &amp;amp;'a str,
    hair_color: Option&amp;lt;&amp;amp;'a str&amp;gt;,
}

let new_users = vec![
    NewUser { name: "Sean", hair_color: Some("Black") },
    NewUser { name: "Gordon", hair_color: None },
];

insert_into(users)
    .values(&amp;amp;new_users)
    .execute(&amp;amp;mut connection);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;INSERT INTO users (name, hair_color) VALUES
  ('Sean', 'Black'),
  ('Gordon', DEFAULT)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need data from the rows you inserted, just change &lt;code&gt;execute&lt;/code&gt; to &lt;code&gt;get_result&lt;/code&gt; or &lt;code&gt;get_results&lt;/code&gt;. Diesel will take care of the rest.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let new_users = vec![
    NewUser { name: "Sean", hair_color: Some("Black") },
    NewUser { name: "Gordon", hair_color: None },
];

let inserted_users = insert_into(users)
    .values(&amp;amp;new_users)
    .get_results::&amp;lt;User&amp;gt;(&amp;amp;mut connection);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;INSERT INTO users (name, hair_color) VALUES
  ('Sean', 'Black'),
  ('Gordon', DEFAULT)
  RETURNING *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Updating data&lt;/h3&gt; 
&lt;p&gt;Diesel's codegen can generate several ways to update a row, letting you encapsulate your logic in the way that makes sense for your app.&lt;/p&gt; 
&lt;p&gt;Modifying a struct:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;post.published = true;
post.save_changes(&amp;amp;mut connection);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One-off batch changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;update(users.filter(email.like("%@spammer.com")))
    .set(banned.eq(true))
    .execute(&amp;amp;mut connection)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using a struct for encapsulation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;update(Settings::belonging_to(current_user))
    .set(&amp;amp;settings_form)
    .execute(&amp;amp;mut connection)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Raw SQL&lt;/h3&gt; 
&lt;p&gt;There will always be certain queries that are just easier to write as raw SQL, or can't be expressed with the query builder. Even in these cases, Diesel provides an easy to use API for writing raw SQL.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(QueryableByName)]
#[diesel(table_name = users)]
struct User {
    id: i32,
    name: String,
    organization_id: i32,
}

// Using `include_str!` allows us to keep the SQL in a
// separate file, where our editor can give us SQL specific
// syntax highlighting.
sql_query(include_str!("complex_users_by_organization.sql"))
    .bind::&amp;lt;Integer, _&amp;gt;(organization_id)
    .bind::&amp;lt;BigInt, _&amp;gt;(offset)
    .bind::&amp;lt;BigInt, _&amp;gt;(limit)
    .load::&amp;lt;User&amp;gt;(&amp;amp;mut conn)?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Code of conduct&lt;/h2&gt; 
&lt;p&gt;Anyone who interacts with Diesel in any space, including but not limited to this GitHub repository, must follow our &lt;a href="https://github.com/diesel-rs/diesel/raw/master/code_of_conduct.md"&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under either of these:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://raw.githubusercontent.com/diesel-rs/diesel/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/diesel-rs/diesel/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="https://opensource.org/licenses/MIT"&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Before contributing, please read the &lt;a href="https://github.com/diesel-rs/diesel/raw/master/CONTRIBUTING.md"&gt;contributors guide&lt;/a&gt; for useful information about setting up Diesel locally, coding style and common abbreviations.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution you intentionally submit for inclusion in the work, as defined in the Apache-2.0 license, shall be dual-licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;h3&gt;Notable Sponsors and Supporters&lt;/h3&gt; 
&lt;p&gt;We would like to thank all of the sponsors supporting the work on Diesel. Notable large sponsors are:&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://nlnet.nl/project/Diesel/"&gt; &lt;img src="https://diesel.rs/assets/images/nl_net_foundation_logo.svg?sanitize=true" width="50%" /&gt; &lt;br /&gt; NLNet Foundation &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://nlnet.nl/project/Diesel/"&gt; &lt;img src="https://diesel.rs/assets/images/NGI0Core_tag.svg?sanitize=true" width="50%" /&gt; &lt;br /&gt; NGI Zero Core &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.prototypefund.de/projects/diesel-databaseviews"&gt; &lt;img src="https://diesel.rs/assets/images/PrototypeFund_logo_dark.png" width="50%" /&gt; &lt;br /&gt; Prototype Fund &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.prototypefund.de/projects/diesel-databaseviews"&gt; &lt;img src="https://diesel.rs/assets/images/bmbf_logo.jpg" width="50%" /&gt; &lt;br /&gt; Federal Ministry of Research, Technology and Space (Germany) &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.blog/open-source/maintainers/securing-the-supply-chain-at-scale-starting-with-71-important-open-source-projects/"&gt; &lt;img src="https://diesel.rs/assets/images/GitHub_Logo.png" width="50%" /&gt; GitHub Secure Open Source Fund &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://giga-infosystems.com/"&gt; &lt;img src="https://diesel.rs/assets/images/logo_giga.svg?sanitize=true" width="35%" /&gt; &lt;br /&gt; GiGa Infosystems GmbH &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Additionally we would like to thank all persons sponsoring the project on &lt;a href="https://github.com/sponsors/weiznich#sponsors"&gt;GitHub&lt;/a&gt;. Without them developing Diesel wouldn't be possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitoxideLabs/gitoxide</title>
      <link>https://github.com/GitoxideLabs/gitoxide</link>
      <description>&lt;p&gt;An idiomatic, lean, fast &amp; safe pure Rust implementation of Git&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/actions"&gt;&lt;img src="https://github.com/GitoxideLabs/gitoxide/workflows/ci/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/gitoxide"&gt;&lt;img src="https://img.shields.io/crates/v/gitoxide.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;img src="https://raw.githubusercontent.com/GitoxideLabs/gitoxide/main/etc/msrv-badge.svg?sanitize=true" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;gitoxide&lt;/code&gt; is an implementation of &lt;code&gt;git&lt;/code&gt; written in Rust for developing future-proof applications which strive for correctness and performance while providing a pleasant and unsurprising developer experience.&lt;/p&gt; 
&lt;p&gt;There are two primary ways to use &lt;code&gt;gitoxide&lt;/code&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;As Rust library&lt;/strong&gt;: Use the &lt;a href="https://docs.rs/gix"&gt;&lt;code&gt;gix&lt;/code&gt;&lt;/a&gt; crate as a Cargo dependency for API access.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;As command-line tool&lt;/strong&gt;: The &lt;code&gt;gix&lt;/code&gt; binary as development tool to help testing the API in real repositories, and the &lt;code&gt;ein&lt;/code&gt; binary with workflow-enhancing tools. Both binaries may forever be unstable, &lt;em&gt;do not rely on them in scripts&lt;/em&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;a href="https://asciinema.org/a/542159"&gt;&lt;img src="https://raw.githubusercontent.com/GitoxideLabs/gitoxide/main/etc/gix-asciicast.svg?sanitize=true" alt="asciicast" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development Status&lt;/h2&gt; 
&lt;p&gt;The command-line tools as well as the status of each crate is described in &lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md"&gt;the crate status document&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For use in applications, look for the &lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix"&gt;&lt;code&gt;gix&lt;/code&gt;&lt;/a&gt; crate, which serves as entrypoint to the functionality provided by various lower-level plumbing crates like &lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-config"&gt;&lt;code&gt;gix-config&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Feature Discovery&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Can &lt;code&gt;gix&lt;/code&gt; do what I need it to do?&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The above can be hard to answer and this paragraph is here to help with feature discovery.&lt;/p&gt; 
&lt;p&gt;Look at &lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md"&gt;&lt;code&gt;crate-status.md&lt;/code&gt;&lt;/a&gt; for a rather exhaustive document that contains both implemented and planned features.&lt;/p&gt; 
&lt;p&gt;Further, the &lt;a href="https://docs.rs/gix/latest/gix?search=git2"&gt;&lt;code&gt;gix&lt;/code&gt; crate documentation with the &lt;code&gt;git2&lt;/code&gt; search term&lt;/a&gt; helps to find all currently known &lt;code&gt;git2&lt;/code&gt; equivalent method calls. Please note that this list is definitely not exhaustive yet, but might help if you are coming from &lt;code&gt;git2&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;What follows is a high-level list of features and those which are planned:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; clone&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; fetch&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; push&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; blame (&lt;em&gt;plumbing&lt;/em&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; status&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; blob and tree-diff&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; merge 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; blobs&lt;/li&gt; 
   &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; trees&lt;/li&gt; 
   &lt;li&gt;&lt;input type="checkbox" disabled /&gt; commits&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; commit 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type="checkbox" disabled /&gt; hooks&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; commit-graph traversal&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; rebase&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; worktree checkout and worktree stream&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; reset&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; reading and writing of objects&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; reading and writing of refs&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; reading and writing of &lt;code&gt;.git/index&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; reading and writing of git configuration&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; pathspecs&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; revspecs&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;code&gt;.gitignore&lt;/code&gt; and &lt;code&gt;.gitattributes&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Crates&lt;/h3&gt; 
&lt;p&gt;Follow linked crate name for detailed status. Please note that all crates follow &lt;a href="https://semver.org"&gt;semver&lt;/a&gt; as well as the &lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/STABILITY.md"&gt;stability guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Production Grade&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stability Tier 1&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/gix-lock/README.md"&gt;gix-lock&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stability Tier 2&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/gix-tempfile/README.md"&gt;gix-tempfile&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Stabilization Candidates&lt;/h3&gt; 
&lt;p&gt;Crates that seem feature complete and need to see some more use before they can be released as 1.0. Documentation is complete and was reviewed at least once.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-mailmap"&gt;gix-mailmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-chunk"&gt;gix-chunk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-ref"&gt;gix-ref&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-config"&gt;gix-config&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-config-value"&gt;gix-config-value&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-glob"&gt;gix-glob&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-actor"&gt;gix-actor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-hash"&gt;gix-hash&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Initial Development&lt;/h3&gt; 
&lt;p&gt;These crates may be missing some features and thus are somewhat incomplete, but what's there is usable to some extent.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;usable&lt;/strong&gt; &lt;em&gt;(with rough but complete docs, possibly incomplete functionality)&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix"&gt;gix&lt;/a&gt; (&lt;strong&gt;‚¨Ö entrypoint&lt;/strong&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-object"&gt;gix-object&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-validate"&gt;gix-validate&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-url"&gt;gix-url&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-packetline"&gt;gix-packetline&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-packetline"&gt;gix-packetline-blocking&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-transport"&gt;gix-transport&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-protocol"&gt;gix-protocol&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-pack"&gt;gix-pack&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-odb"&gt;gix-odb&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-commitgraph"&gt;gix-commitgraph&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-diff"&gt;gix-diff&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-traverse"&gt;gix-traverse&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-features"&gt;gix-features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-credentials"&gt;gix-credentials&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-sec"&gt;gix-sec&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-quote"&gt;gix-quote&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-discover"&gt;gix-discover&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-path"&gt;gix-path&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-attributes"&gt;gix-attributes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-ignore"&gt;gix-ignore&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-pathspec"&gt;gix-pathspec&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-index"&gt;gix-index&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-revision"&gt;gix-revision&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-revwalk"&gt;gix-revwalk&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-command"&gt;gix-command&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-prompt"&gt;gix-prompt&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-refspec"&gt;gix-refspec&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-fs"&gt;gix-fs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-utils"&gt;gix-utils&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-hashtable"&gt;gix-hashtable&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-worktree"&gt;gix-worktree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-bitmap"&gt;gix-bitmap&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-negotiate"&gt;gix-negotiate&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-filter"&gt;gix-filter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-worktree-stream"&gt;gix-worktree-stream&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-archive"&gt;gix-archive&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-submodule"&gt;gix-submodule&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-status"&gt;gix-status&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-worktree-state"&gt;gix-worktree-state&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-date"&gt;gix-date&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-dir"&gt;gix-dir&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-merge"&gt;gix-merge&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-shallow"&gt;gix-shallow&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;gitoxide-core&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;very early&lt;/strong&gt; &lt;em&gt;(possibly without any documentation and many rough edges)&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-blame"&gt;gix-blame&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;idea&lt;/strong&gt; &lt;em&gt;(just a name placeholder)&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-note"&gt;gix-note&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-fetchhead"&gt;gix-fetchhead&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-lfs"&gt;gix-lfs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-rebase"&gt;gix-rebase&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-sequencer"&gt;gix-sequencer&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-tui"&gt;gix-tui&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-tix"&gt;gix-tix&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-bundle"&gt;gix-bundle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-fsck"&gt;gix-fsck&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Stress Testing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Verify huge packs&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Explode a pack to disk&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Generate and verify large commit graphs&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Generate huge pack from a lot of loose objects&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Stability and MSRV&lt;/h3&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/STABILITY.md"&gt;stability guide&lt;/a&gt; helps to judge how much churn can be expected when depending on crates in this workspace.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Download a Binary Release&lt;/h3&gt; 
&lt;p&gt;Using &lt;code&gt;cargo binstall&lt;/code&gt;, one is able to fetch &lt;a href="https://github.com/GitoxideLabs/gitoxide/releases"&gt;binary releases&lt;/a&gt;. You can install it via &lt;code&gt;cargo install cargo-binstall&lt;/code&gt;, assuming the &lt;a href="https://rustup.rs"&gt;rust toolchain&lt;/a&gt; is present.&lt;/p&gt; 
&lt;p&gt;Then install gitoxide with &lt;code&gt;cargo binstall gitoxide&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/GitoxideLabs/gitoxide/releases"&gt;releases section&lt;/a&gt; for manual installation and various alternative builds that are &lt;em&gt;slimmer&lt;/em&gt; or &lt;em&gt;smaller&lt;/em&gt;, depending on your needs, for &lt;em&gt;Linux&lt;/em&gt;, &lt;em&gt;MacOS&lt;/em&gt; and &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt; 
&lt;h3&gt;Download from Arch Linux repository&lt;/h3&gt; 
&lt;p&gt;For Arch Linux you can download &lt;code&gt;gitoxide&lt;/code&gt; from &lt;code&gt;community&lt;/code&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pacman -S gitoxide
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Download from Exherbo Linux Rust repository&lt;/h3&gt; 
&lt;p&gt;For Exherbo Linux you can download &lt;code&gt;gitoxide&lt;/code&gt; from the &lt;a href="https://gitlab.exherbo.org/exherbo/rust/-/tree/master/packages/dev-scm/gitoxide"&gt;Rust&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cave resolve -x repository/rust
cave resolve -x gitoxide
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From Source via Cargo&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; is the Rust package manager which can easily be obtained through &lt;a href="https://rustup.rs"&gt;rustup&lt;/a&gt;. With it, you can build your own binary effortlessly and for your particular CPU for additional performance gains.&lt;/p&gt; 
&lt;p&gt;The minimum supported Rust version is &lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/.github/workflows/msrv.yml#L23"&gt;documented in the CI configuration&lt;/a&gt;, the latest stable one will work as well.&lt;/p&gt; 
&lt;p&gt;There are various build configurations, all of them are &lt;a href="https://docs.rs/crate/gitoxide/latest"&gt;documented here&lt;/a&gt;. The documentation should also be useful for packagers who need to tune external dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# A way to install `gitoxide` with just Rust and a C compiler installed.
# If there are problems with SSL certificates during clones, try to omit `--locked`.
cargo install gitoxide --locked --no-default-features --features max-pure

# The default installation, 'max', is the fastest, but also needs `cmake` to build successfully.
# Installing it is platform-dependent.
cargo install gitoxide

# For smaller binaries and even faster build times that are traded for a less fancy CLI implementation,
# use the `lean` feature.
cargo install gitoxide --locked --no-default-features --features lean
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following installs the latest unpublished &lt;code&gt;max&lt;/code&gt; release directly from git:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo install --git https://github.com/GitoxideLabs/gitoxide gitoxide
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;How to deal with build failures&lt;/h4&gt; 
&lt;p&gt;On some platforms, installation may fail due to lack of tools required by &lt;em&gt;C&lt;/em&gt; toolchains. This can generally be avoided by installation with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo install gitoxide --no-default-features --features max-pure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;What follows is a list of known failures.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;On Fedora, &lt;code&gt;perl&lt;/code&gt; needs to be installed for &lt;code&gt;OpenSSL&lt;/code&gt; to build properly. This can be done with the following command (see &lt;a href="https://github.com/GitoxideLabs/gitoxide/issues/592"&gt;issue #592&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;dnf install perl
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Using Docker&lt;/h3&gt; 
&lt;p&gt;Some CI/CD pipelines leverage repository cloning. Below is a copy-paste-able example to build docker images for such workflows. As no official image exists (at this time), an image must first be built.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The dockerfile isn't continuously tested as it costs too much time and thus might already be broken. PRs are welcome.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Building the most compatible base image&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker build -f etc/docker/Dockerfile.alpine -t gitoxide:latest --compress . --target=pipeline
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Basic usage in a Pipeline&lt;/h4&gt; 
&lt;p&gt;For example, if a &lt;code&gt;Dockerfile&lt;/code&gt; currently uses something like &lt;code&gt;RUN git clone https://github.com/GitoxideLabs/gitoxide&lt;/code&gt;, first build the image:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker build -f etc/docker/Dockerfile.alpine -t gitoxide:latest --compress .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then copy the binaries into your image and replace the &lt;code&gt;git&lt;/code&gt; directive with a &lt;code&gt;gix&lt;/code&gt; equivalent.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-dockerfile"&gt;COPY --from gitoxide:latest /bin/gix /usr/local/bin/
COPY --from gitoxide:latest /bin/ein /usr/local/bin/

RUN /usr/local/bin/gix clone --depth 1 https://github.com/GitoxideLabs/gitoxide gitoxide
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Once installed, there are two binaries:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ein&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;high level commands, &lt;em&gt;porcelain&lt;/em&gt;, for every-day use, optimized for a pleasant user experience&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;gix&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;low level commands, &lt;em&gt;plumbing&lt;/em&gt;, for use in more specialized cases and to validate newly written code in real-world scenarios&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Goals&lt;/h2&gt; 
&lt;p&gt;Project goals can change over time as we learn more, and they can be challenged.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;a pure-rust implementation of git&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;including &lt;em&gt;transport&lt;/em&gt;, &lt;em&gt;object database&lt;/em&gt;, &lt;em&gt;references&lt;/em&gt;, &lt;em&gt;cli&lt;/em&gt; and &lt;em&gt;tui&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;a simple command-line interface is provided for the most common git operations, optimized for user experience. A &lt;em&gt;simple-git&lt;/em&gt; if you so will.&lt;/li&gt; 
   &lt;li&gt;be the go-to implementation for anyone who wants to solve problems around git, and become &lt;em&gt;the&lt;/em&gt; alternative to &lt;code&gt;GitPython&lt;/code&gt; and &lt;em&gt;libgit2&lt;/em&gt; in the process.&lt;/li&gt; 
   &lt;li&gt;become the foundation for a distributed alternative to GitHub, and maybe even for use within GitHub itself&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;learn from the best to write the best possible idiomatic Rust&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;em&gt;libgit2&lt;/em&gt; is a fantastic resource to see what abstractions work, we will use them&lt;/li&gt; 
   &lt;li&gt;use Rust's type system to make misuse impossible&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;be the best performing implementation&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;use Rust's type system to optimize for work not done without being hard to use&lt;/li&gt; 
   &lt;li&gt;make use of parallelism from the get go&lt;/li&gt; 
   &lt;li&gt;&lt;em&gt;sparse checkout&lt;/em&gt; support from day one&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;assure on-disk consistency&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;assure reads never interfere with concurrent writes&lt;/li&gt; 
   &lt;li&gt;assure multiple concurrent writes don't cause trouble&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;take shortcuts, but not in quality&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;binaries may use &lt;code&gt;anyhow::Error&lt;/code&gt; exhaustively, knowing these errors are solely user-facing.&lt;/li&gt; 
   &lt;li&gt;libraries use light-weight custom errors implemented using &lt;code&gt;quick-error&lt;/code&gt; or &lt;code&gt;thiserror&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;internationalization is nothing we are concerned with right now.&lt;/li&gt; 
   &lt;li&gt;IO errors due to insufficient amount of open file handles don't always lead to operation failure&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cross platform support, including Windows&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;With the tools and experience available here there is no reason not to support Windows.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/df66d74aa2a8cb62d8a03383135f08c8e8c579a8/.github/workflows/rust.yml#L34"&gt;Windows is tested on CI&lt;/a&gt; and failures do prevent releases.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Non-Goals&lt;/h2&gt; 
&lt;p&gt;Project non-goals can change over time as we learn more, and they can be challenged.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;replicate &lt;code&gt;git&lt;/code&gt; command functionality perfectly&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;git&lt;/code&gt; is &lt;code&gt;git&lt;/code&gt;, and there is no reason to not use it. Our path is the one of simplicity to make getting started with git easy.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;be incompatible to git&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;the on-disk format must remain compatible, and we will never contend with it.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;use async IO everywhere&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;for the most part, git operations are heavily reliant on memory mapped IO as well as CPU to decompress data, which doesn't lend itself well to async IO out of the box.&lt;/li&gt; 
   &lt;li&gt;Use &lt;code&gt;blocking&lt;/code&gt; as well as &lt;code&gt;gix-features::interrupt&lt;/code&gt; to bring operations into the async world and to control long running operations.&lt;/li&gt; 
   &lt;li&gt;When connecting or streaming over TCP connections, especially when receiving on the server, async seems like a must though, but behind a feature flag.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;If what you have seen so far sparked your interest to contribute, then let us say: We are happy to have you and help you to get started.&lt;/p&gt; 
&lt;p&gt;We recommend running &lt;code&gt;just test&lt;/code&gt; during the development process to assure CI is green before pushing.&lt;/p&gt; 
&lt;p&gt;A backlog for work ready to be picked up is &lt;a href="https://github.com/GitoxideLabs/gitoxide/projects"&gt;available in the Project's Kanban board&lt;/a&gt;, which contains instructions on how to pick a task. If it's empty or you have other questions, feel free to &lt;a href="https://github.com/GitoxideLabs/gitoxide/discussions"&gt;start a discussion&lt;/a&gt; or reach out to @Byron &lt;a href="https://keybase.io/byronbates"&gt;privately&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For additional details, also take a look at the &lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/COLLABORATING.md"&gt;collaboration guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Getting started with Video Tutorials&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://youtube.com/playlist?list=PLMHbQxe1e9Mk5kOHrm9v20-umkE2ck_gE"&gt;Learning Rust with Gitoxide&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;In 17 episodes you can learn all you need to meaningfully contribute to &lt;code&gt;gitoxide&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtube.com/playlist?list=PLMHbQxe1e9MkEmuj9csczEK1O06l0Npy5"&gt;Getting into Gitoxide&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Get an introduction to &lt;code&gt;gitoxide&lt;/code&gt; itself which should be a good foundation for any contribution, but isn't a requirement for contributions either.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLMHbQxe1e9MlhyyZQXPi_dc-bKudE-WUw"&gt;Gifting Gitoxide&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;See how PRs are reviewed along with a lot of inner monologue.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Other Media&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://rustacean-station.org/episode/055-sebastian-thiel/"&gt;Rustacean Station Podcast&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;h3&gt;Features for 1.0&lt;/h3&gt; 
&lt;p&gt;Provide a CLI to for the most basic user journey:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; initialize a repository&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; fetch 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type="checkbox" disabled /&gt; and update worktree&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;clone a repository 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type="checkbox" disabled /&gt; bare&lt;/li&gt; 
   &lt;li&gt;&lt;input type="checkbox" disabled /&gt; with working tree&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; create a commit after adding worktree files&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; add a remote&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; push 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; create (thin) pack&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Ideas for Examples&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; &lt;code&gt;gix tool open-remote&lt;/code&gt; open the URL of the remote, possibly after applying known transformations to go from &lt;code&gt;ssh&lt;/code&gt; to &lt;code&gt;https&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; &lt;code&gt;tix&lt;/code&gt; as example implementation of &lt;code&gt;tig&lt;/code&gt;, displaying a version of the commit graph, useful for practicing how highly responsive GUIs can be made.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Something like &lt;a href="https://github.com/github/git-sizer"&gt;&lt;code&gt;git-sizer&lt;/code&gt;&lt;/a&gt;, but leveraging extreme decompression speeds of indexed packs.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Open up SQL for git using &lt;a href="https://github.com/rusqlite/rusqlite/raw/master/tests/vtab.rs"&gt;sqlite virtual tables&lt;/a&gt;. Check out gitqlite as well. What would an MVP look like? Maybe even something that could ship with gitoxide. See &lt;a href="https://github.com/filhodanuvem/gitql"&gt;this go implementation as example&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; A truly awesome history rewriter which makes it easy to understand what happened while avoiding all pitfalls. Think BFG, but more awesome, if that's possible.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; &lt;code&gt;gix-tui&lt;/code&gt; should learn a lot from &lt;a href="https://www.fossil-scm.org"&gt;fossil-scm&lt;/a&gt; regarding the presentation of data. Maybe &lt;a href="https://github.com/Lutetium-Vanadium/requestty/"&gt;this&lt;/a&gt; can be used for prompts. Probably &lt;a href="https://magit.vc"&gt;magit&lt;/a&gt; has a lot to offer, too.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Ideas for Spin-Offs&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; A system to integrate tightly with &lt;code&gt;gix-lfs&lt;/code&gt; to allow a multi-tier architecture so that assets can be stored in git and are accessible quickly from an intranet location (for example by accessing the storage read-only over the network) while changes are pushed immediately by the server to other edge locations, like &lt;em&gt;the cloud&lt;/em&gt; or backups. Sparse checkouts along with explorer/finder integrations make it convenient to only work on a small subset of files locally. Clones can contain all configuration somebody would need to work efficiently from their location, and authentication for the git history as well as LFS resources make the system secure. One could imagine encryption support for untrusted locations in &lt;em&gt;the cloud&lt;/em&gt; even though more research would have to be done to make it truly secure.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; A &lt;a href="https://github.com/syncthing/syncthing"&gt;syncthing&lt;/a&gt; like client/server application. This is to demonstrate how lower-level crates can be combined into custom applications that use only part of git's technology to achieve their very own thing. Watch out for big file support, multi-device cross-syncing, the possibility for untrusted destinations using full-encryption, case-insensitive and sensitive filesystems, and extended file attributes as well as ignore files.&lt;/li&gt; 
 &lt;li&gt;An event-based database that uses commit messages to store deltas, while occasionally aggregating the actual state in a tree. Of course it's distributed by nature, allowing people to work offline. 
  &lt;ul&gt; 
   &lt;li&gt;It's abstracted to completely hide the actual data model behind it, allowing for all kinds of things to be implemented on top.&lt;/li&gt; 
   &lt;li&gt;Commits probably need a nanosecond component for the timestamp, which can be added via custom header field.&lt;/li&gt; 
   &lt;li&gt;having recording all changes allows for perfect merging, both on the client or on the server, while keeping a natural audit log which makes it useful for mission critical databases in business.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Applications&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Can markdown be used as database so issue-trackers along with meta-data could just be markdown files which are mostly human-editable? Could user interfaces be meta-data aware and just hide the meta-data chunks which are now editable in the GUI itself? Doing this would make conflicts easier to resolve than an &lt;code&gt;sqlite&lt;/code&gt; database.&lt;/li&gt; 
     &lt;li&gt;A time tracker - simple data, very likely naturally conflict free, and interesting to see it in terms of teams or companies using it with maybe GitHub as Backing for authentication. 
      &lt;ul&gt; 
       &lt;li&gt;How about supporting multiple different trackers, as in different remotes?&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Shortcomings &amp;amp; Limitations&lt;/h2&gt; 
&lt;p&gt;Please take a look at the &lt;a href="https://github.com/GitoxideLabs/gitoxide/raw/main/SHORTCOMINGS.md"&gt;&lt;code&gt;SHORTCOMINGS.md&lt;/code&gt; file&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;itertools&lt;/strong&gt; &lt;em&gt;(MIT Licensed)&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;We use the &lt;code&gt;izip!&lt;/code&gt; macro in code&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;flate2&lt;/strong&gt; &lt;em&gt;(MIT Licensed)&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;We use the high-level &lt;code&gt;flate2&lt;/code&gt; library to implement decompression and compression, which builds on the high-performance &lt;code&gt;zlib-rs&lt;/code&gt; crate.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üôè Special Thanks üôè&lt;/h2&gt; 
&lt;p&gt;At least for now this section is exclusive to highlight the incredible support that &lt;a href="https://github.com/joshtriplett"&gt;Josh Triplett&lt;/a&gt; has provided to me in the form of advice, sponsorship and countless other benefits that were incredibly meaningful. Going full time with &lt;code&gt;gitoxide&lt;/code&gt; would hardly have been feasible without his involvement, and I couldn't be more grateful üòå.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://raw.githubusercontent.com/GitoxideLabs/gitoxide/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/GitoxideLabs/gitoxide/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;h2&gt;Fun facts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Originally @Byron was really fascinated by &lt;a href="https://github.com/gitpython-developers/GitPython/issues/765#issuecomment-396072153"&gt;this problem&lt;/a&gt; and believes that with &lt;code&gt;gitoxide&lt;/code&gt; it will be possible to provide the fastest solution for it.&lt;/li&gt; 
 &lt;li&gt;@Byron has been absolutely blown away by &lt;code&gt;git&lt;/code&gt; from the first time he experienced git more than 13 years ago, and tried to implement it in &lt;a href="https://github.com/gitpython-developers/GitPython/pull/1028"&gt;various shapes&lt;/a&gt; and &lt;a href="https://github.com/byron/gogit"&gt;forms&lt;/a&gt; multiple &lt;a href="https://github.com/Byron/gitplusplus"&gt;times&lt;/a&gt;. Now with Rust @Byron finally feels to have found the right tool for the job!&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>servo/servo</title>
      <link>https://github.com/servo/servo</link>
      <description>&lt;p&gt;Servo aims to empower developers with a lightweight, high-performance alternative for embedding web technologies in applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Servo Parallel Browser Engine Project&lt;/h1&gt; 
&lt;p&gt;Servo is a prototype web browser engine written in the &lt;a href="https://github.com/rust-lang/rust"&gt;Rust&lt;/a&gt; language. It is currently developed on 64-bit macOS, 64-bit Linux, 64-bit Windows, 64-bit OpenHarmony, and Android.&lt;/p&gt; 
&lt;p&gt;Servo welcomes contribution from everyone. Check out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://book.servo.org"&gt;Servo Book&lt;/a&gt; for documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://servo.org/"&gt;servo.org&lt;/a&gt; for news and guides&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Coordination of Servo development happens:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Here in the Github Issues&lt;/li&gt; 
 &lt;li&gt;On the &lt;a href="https://servo.zulipchat.com/"&gt;Servo Zulip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;In video calls advertised in the &lt;a href="https://github.com/servo/project/issues"&gt;Servo Project&lt;/a&gt; repo.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;For more detailed build instructions, see the Servo book under &lt;a href="https://book.servo.org/hacking/setting-up-your-environment.html"&gt;Setting up your environment&lt;/a&gt;, &lt;a href="https://book.servo.org/hacking/building-servo.html"&gt;Building Servo&lt;/a&gt;, &lt;a href="https://book.servo.org/hacking/building-for-android.html"&gt;Building for Android&lt;/a&gt; and &lt;a href="https://book.servo.org/hacking/building-for-openharmony.html"&gt;Building for OpenHarmony&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download and install &lt;a href="https://developer.apple.com/xcode/"&gt;Xcode&lt;/a&gt; and &lt;a href="https://brew.sh/"&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt;: &lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;rustup&lt;/code&gt;: &lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;./mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;curl&lt;/code&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Arch: &lt;code&gt;sudo pacman -S --needed curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Debian, Ubuntu: &lt;code&gt;sudo apt install curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Fedora: &lt;code&gt;sudo dnf install curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Gentoo: &lt;code&gt;sudo emerge net-misc/curl&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt;: &lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;rustup&lt;/code&gt;: &lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;./mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download &lt;a href="https://docs.astral.sh/uv/getting-started/installation/#standalone-installer"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://chocolatey.org/install#individual"&gt;&lt;code&gt;choco&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://win.rustup.rs/"&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Be sure to select &lt;em&gt;Quick install via the Visual Studio Community installer&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;In the Visual Studio Installer, ensure the following components are installed: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Windows 10/11 SDK (anything &amp;gt;= 10.0.19041.0)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.Windows{10, 11}SDK.{&amp;gt;=19041}&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;MSVC v143 - VS 2022 C++ x64/x86 build tools (Latest)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.Tools.x86.x64&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;C++ ATL for latest v143 build tools (x86 &amp;amp; x64)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.ATL&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;C++ MFC for latest v143 build tools (x86 &amp;amp; x64)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.ATLMFC&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;.\mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;.\mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Android&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure that the following environment variables are set: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ANDROID_NDK_ROOT&lt;/code&gt;: &lt;code&gt;$ANDROID_SDK_ROOT/ndk/26.2.11394342/&lt;/code&gt; &lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt; can be any directory (such as &lt;code&gt;~/android-sdk&lt;/code&gt;). All of the Android build dependencies will be installed there.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install the latest version of the &lt;a href="https://developer.android.com/studio#command-tools"&gt;Android command-line tools&lt;/a&gt; to &lt;code&gt;$ANDROID_SDK_ROOT/cmdline-tools/latest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Run the following command to install the necessary components: &lt;pre&gt;&lt;code class="language-shell"&gt;sudo $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install \
 "build-tools;34.0.0" \
 "emulator" \
 "ndk;26.2.11394342" \
 "platform-tools" \
 "platforms;android-33" \
 "system-images;android-33;google_apis;x86_64"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Follow the instructions above for the platform you are building on&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;OpenHarmony&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow the instructions above for the platform you are building on to prepare the environment.&lt;/li&gt; 
 &lt;li&gt;Depending on the target distribution (e.g. &lt;code&gt;HarmonyOS NEXT&lt;/code&gt; vs pure &lt;code&gt;OpenHarmony&lt;/code&gt;) the build configuration will differ slightly.&lt;/li&gt; 
 &lt;li&gt;Ensure that the following environment variables are set 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DEVECO_SDK_HOME&lt;/code&gt; (Required when targeting &lt;code&gt;HarmonyOS NEXT&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;OHOS_BASE_SDK_HOME&lt;/code&gt; (Required when targeting &lt;code&gt;OpenHarmony&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;OHOS_SDK_NATIVE&lt;/code&gt; (e.g. &lt;code&gt;${DEVECO_SDK_HOME}/default/openharmony/native&lt;/code&gt; or &lt;code&gt;${OHOS_BASE_SDK_HOME}/${API_VERSION}/native&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;SERVO_OHOS_SIGNING_CONFIG&lt;/code&gt;: Path to json file containing a valid signing configuration for the demo app.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Review the detailed instructions at &lt;a href="https://book.servo.org/hacking/building-for-openharmony.html"&gt;Building for OpenHarmony&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The target distribution can be modified by passing &lt;code&gt;--flavor=&amp;lt;default|harmonyos&amp;gt;&lt;/code&gt; to &lt;code&gt;mach &amp;lt;build|package|install&amp;gt;&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>starship/starship</title>
      <link>https://github.com/starship/starship</link>
      <description>&lt;p&gt;‚òÑüååÔ∏è The minimal, blazing-fast, and infinitely customizable prompt for any shell!&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img width="400" src="https://raw.githubusercontent.com/starship/starship/master/media/logo.png" alt="Starship ‚Äì Cross-shell prompt" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/starship/starship/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/starship/starship/workflow.yml?branch=master&amp;amp;label=workflow&amp;amp;style=flat-square" alt="GitHub Actions workflow status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/starship"&gt;&lt;img src="https://img.shields.io/crates/v/starship?style=flat-square" alt="Crates.io version" /&gt;&lt;/a&gt; &lt;a href="https://repology.org/project/starship/versions"&gt;&lt;img src="https://img.shields.io/repology/repositories/starship?label=in%20repositories&amp;amp;style=flat-square" alt="Packaging status" /&gt;&lt;/a&gt;&lt;br /&gt; &lt;a href="https://discord.gg/starship"&gt;&lt;img src="https://img.shields.io/discord/567163873606500352?label=discord&amp;amp;logoColor=white&amp;amp;style=flat-square" alt="Chat on Discord" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/StarshipPrompt"&gt;&lt;img src="https://img.shields.io/badge/twitter-@StarshipPrompt-1DA1F3?style=flat-square" alt="Follow @StarshipPrompt on Twitter" /&gt;&lt;/a&gt; &lt;a href="https://stand-with-ukraine.pp.ua"&gt;&lt;img src="https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraineFlat.svg?sanitize=true" alt="Stand With Ukraine" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://starship.rs"&gt;Website&lt;/a&gt; ¬∑ &lt;a href="#üöÄ-installation"&gt;Installation&lt;/a&gt; ¬∑ &lt;a href="https://starship.rs/config/"&gt;Configuration&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/starship/starship/raw/master/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-us.png" alt="English" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/de-DE/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-de.png" alt="Deutsch" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/es-ES/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-es.png" alt="Espa√±ol" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/fr-FR/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-fr.png" alt="Fran√ßais" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/id-ID/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-id.png" alt="Bahasa Indonesia" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/it-IT/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-it.png" alt="Italiano" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/ja-JP/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-jp.png" alt="Êó•Êú¨Ë™û" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/pt-BR/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-br.png" alt="Portugu√™s do Brasil" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/ru-RU/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-ru.png" alt="–†—É—Å—Å–∫–∏–π" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/uk-UA/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-ua.png" alt="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/vi-VN/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-vn.png" alt="Ti·∫øng Vi·ªát" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/zh-CN/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-cn.png" alt="ÁÆÄ‰Ωì‰∏≠Êñá" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/starship/starship/raw/master/docs/zh-TW/guide/README.md"&gt;&lt;img height="20" src="https://raw.githubusercontent.com/starship/starship/master/media/flag-tw.png" alt="ÁπÅÈ´î‰∏≠Êñá" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/starship/starship/master/media/demo.gif" alt="Starship with iTerm2 and the Snazzy theme" width="50%" align="right" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The minimal, blazing-fast, and infinitely customizable prompt for any shell!&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fast:&lt;/strong&gt; it's fast ‚Äì &lt;em&gt;really really&lt;/em&gt; fast! üöÄ&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable:&lt;/strong&gt; configure every aspect of your prompt.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Universal:&lt;/strong&gt; works on any shell, on any operating system.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Intelligent:&lt;/strong&gt; shows relevant information at a glance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feature rich:&lt;/strong&gt; support for all your favorite tools.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy:&lt;/strong&gt; quick to install ‚Äì&amp;nbsp;start using it in minutes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="center"&gt; &lt;a href="https://starship.rs/config/"&gt;&lt;strong&gt;Explore the Starship docs&amp;nbsp;&amp;nbsp;‚ñ∂&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a name="üöÄ-installation"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;üöÄ Installation&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A &lt;a href="https://www.nerdfonts.com/"&gt;Nerd Font&lt;/a&gt; installed and enabled in your terminal (for example, try the &lt;a href="https://www.nerdfonts.com/font-downloads"&gt;FiraCode Nerd Font&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Step 1. Install Starship&lt;/h3&gt; 
&lt;p&gt;Select your operating system from the list below to view installation instructions:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Android&lt;/summary&gt; 
 &lt;p&gt;Install Starship using any of the following package managers:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Repository&lt;/th&gt; 
    &lt;th&gt;Instructions&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href="https://github.com/termux/termux-packages/tree/master/packages/starship"&gt;Termux&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;pkg install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;BSD&lt;/summary&gt; 
 &lt;p&gt;Install Starship using any of the following package managers:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Distribution&lt;/th&gt; 
    &lt;th&gt;Repository&lt;/th&gt; 
    &lt;th&gt;Instructions&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;&lt;a href="https://crates.io/crates/starship"&gt;crates.io&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;cargo install starship --locked&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FreeBSD&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://www.freshports.org/shells/starship"&gt;FreshPorts&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;pkg install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;NetBSD&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://pkgsrc.se/shells/starship"&gt;pkgsrc&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;pkgin install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Linux&lt;/summary&gt; 
 &lt;p&gt;Install the latest version for your system:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;curl -sS https://starship.rs/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Alternatively, install Starship using any of the following package managers:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Distribution&lt;/th&gt; 
    &lt;th&gt;Repository&lt;/th&gt; 
    &lt;th&gt;Instructions&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;strong&gt;&lt;a href="https://crates.io/crates/starship"&gt;crates.io&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;cargo install starship --locked&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://anaconda.org/conda-forge/starship"&gt;conda-forge&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;conda install -c conda-forge starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://formulae.brew.sh/formula/starship"&gt;Linuxbrew&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;brew install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Alpine Linux 3.13+&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://pkgs.alpinelinux.org/packages?name=starship"&gt;Alpine Linux Packages&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;apk add starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Arch Linux&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/starship"&gt;Arch Linux Extra&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;pacman -S starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;CentOS 7+&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://copr.fedorainfracloud.org/coprs/atim/starship"&gt;Copr&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;dnf copr enable atim/starship&lt;/code&gt; &lt;br /&gt; &lt;code&gt;dnf install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Debian 13+&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://sources.debian.org/src/starship/1.22.1-1/"&gt;Debian Main&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;apt install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Fedora 40+&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://copr.fedorainfracloud.org/coprs/atim/starship"&gt;Copr&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;dnf copr enable atim/starship&lt;/code&gt; &lt;br /&gt; &lt;code&gt;dnf install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Gentoo&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://packages.gentoo.org/packages/app-shells/starship"&gt;Gentoo Packages&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;emerge app-shells/starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Manjaro&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;pacman -S starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;NixOS&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/st/starship/package.nix"&gt;nixpkgs&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;openSUSE&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://software.opensuse.org/package/starship"&gt;OSS&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;zypper in starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Ubuntu 25.04+&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://packages.ubuntu.com/source/plucky/starship"&gt;Ubuntu Universe&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;apt install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Void Linux&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://github.com/void-linux/void-packages/tree/master/srcpkgs/starship"&gt;Void Linux Packages&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;xbps-install -S starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;macOS&lt;/summary&gt; 
 &lt;p&gt;Install the latest version for your system:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;curl -sS https://starship.rs/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Alternatively, install Starship using any of the following package managers:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Repository&lt;/th&gt; 
    &lt;th&gt;Instructions&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;&lt;a href="https://crates.io/crates/starship"&gt;crates.io&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;cargo install starship --locked&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href="https://anaconda.org/conda-forge/starship"&gt;conda-forge&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;conda install -c conda-forge starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href="https://formulae.brew.sh/formula/starship"&gt;Homebrew&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;brew install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href="https://ports.macports.org/port/starship"&gt;MacPorts&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;port install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Windows&lt;/summary&gt; 
 &lt;p&gt;Install the latest version for your system with the MSI-installers from the &lt;a href="https://github.com/starship/starship/releases/latest"&gt;releases section&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;Install Starship using any of the following package managers:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Repository&lt;/th&gt; 
    &lt;th&gt;Instructions&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;&lt;a href="https://crates.io/crates/starship"&gt;crates.io&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;cargo install starship --locked&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href="https://community.chocolatey.org/packages/starship"&gt;Chocolatey&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;choco install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href="https://anaconda.org/conda-forge/starship"&gt;conda-forge&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;conda install -c conda-forge starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/starship.json"&gt;Scoop&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;scoop install starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/s/Starship/Starship"&gt;winget&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;winget install --id Starship.Starship&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h3&gt;Step 2. Set up your shell to use Starship&lt;/h3&gt; 
&lt;p&gt;Configure your shell to initialize starship. Select yours from the list below:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Bash&lt;/summary&gt; 
 &lt;p&gt;Add the following to the end of &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;eval "$(starship init bash)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Cmd&lt;/summary&gt; 
 &lt;p&gt;You need to use &lt;a href="https://chrisant996.github.io/clink/clink.html"&gt;Clink&lt;/a&gt; (v1.2.30+) with Cmd. Create a file at this path &lt;code&gt;%LocalAppData%\clink\starship.lua&lt;/code&gt; with the following contents:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-lua"&gt;load(io.popen('starship init cmd'):read("*a"))()
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Elvish&lt;/summary&gt; 
 &lt;p&gt;Add the following to the end of &lt;code&gt;~/.elvish/rc.elv&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;eval (starship init elvish)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Note: Only Elvish v0.18+ is supported&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Fish&lt;/summary&gt; 
 &lt;p&gt;Add the following to the end of &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-fish"&gt;starship init fish | source
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Ion&lt;/summary&gt; 
 &lt;p&gt;Add the following to the end of &lt;code&gt;~/.config/ion/initrc&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;eval $(starship init ion)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Nushell&lt;/summary&gt; 
 &lt;p&gt;Add the following to the end of your Nushell configuration (find it by running &lt;code&gt;$nu.config-path&lt;/code&gt; in Nushell):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;mkdir ($nu.data-dir | path join "vendor/autoload")
starship init nu | save -f ($nu.data-dir | path join "vendor/autoload/starship.nu")
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Note: Only Nushell v0.96+ is supported&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;PowerShell&lt;/summary&gt; 
 &lt;p&gt;Add the following to the end of your PowerShell configuration (find it by running &lt;code&gt;$PROFILE&lt;/code&gt;):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-powershell"&gt;Invoke-Expression (&amp;amp;starship init powershell)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tcsh&lt;/summary&gt; 
 &lt;p&gt;Add the following to the end of &lt;code&gt;~/.tcshrc&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;eval `starship init tcsh`
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Xonsh&lt;/summary&gt; 
 &lt;p&gt;Add the following to the end of &lt;code&gt;~/.xonshrc&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;execx($(starship init xonsh))
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Zsh&lt;/summary&gt; 
 &lt;p&gt;Add the following to the end of &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;eval "$(starship init zsh)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Step 3. Configure Starship&lt;/h3&gt; 
&lt;p&gt;Start a new shell instance, and you should see your beautiful new shell prompt. If you're happy with the defaults, enjoy!&lt;/p&gt; 
&lt;p&gt;If you're looking to further customize Starship:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://starship.rs/config/"&gt;Configuration&lt;/a&gt;&lt;/strong&gt; ‚Äì learn how to configure Starship to tweak your prompt to your liking&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://starship.rs/presets/"&gt;Presets&lt;/a&gt;&lt;/strong&gt; ‚Äì get inspired by the pre-built configuration of others&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; 
&lt;p&gt;We are always looking for contributors of &lt;strong&gt;all skill levels&lt;/strong&gt;! If you're looking to ease your way into the project, try out a &lt;a href="https://github.com/starship/starship/labels/%22%F0%9F%8C%B1%20good%20first%20issue%22"&gt;good first issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are fluent in a non-English language, we greatly appreciate any help keeping our docs translated and up-to-date in other languages. If you would like to help, translations can be contributed on the &lt;a href="https://translate.starship.rs/"&gt;Starship Crowdin&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are interested in helping contribute to starship, please take a look at our &lt;a href="https://github.com/starship/starship/raw/master/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt;. Also, feel free to drop into our &lt;a href="https://discord.gg/8Jzqu3T"&gt;Discord server&lt;/a&gt; and say hi. üëã&lt;/p&gt; 
&lt;h2&gt;üí≠ Inspired By&lt;/h2&gt; 
&lt;p&gt;Please check out these previous works that helped inspire the creation of starship. üôè&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/denysdovhan/spaceship-prompt"&gt;denysdovhan/spaceship-prompt&lt;/a&gt;&lt;/strong&gt; ‚Äì A ZSH prompt for astronauts.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/denysdovhan/robbyrussell-node"&gt;denysdovhan/robbyrussell-node&lt;/a&gt;&lt;/strong&gt; ‚Äì Cross-shell robbyrussell theme written in JavaScript.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/reujab/silver"&gt;reujab/silver&lt;/a&gt;&lt;/strong&gt; ‚Äì A cross-shell customizable powerline-like prompt with icons.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ù§Ô∏è Sponsors&lt;/h2&gt; 
&lt;p&gt;Support this project by &lt;a href="https://github.com/sponsors/starship"&gt;becoming a sponsor&lt;/a&gt;. Your name or logo will show up here with a link to your website.&lt;/p&gt; 
&lt;h2&gt;üîí Code Signing Policy&lt;/h2&gt; 
&lt;p&gt;Free code signing provided by &lt;a href="https://signpath.io"&gt;SignPath.io&lt;/a&gt;, certificate by &lt;a href="https://signpath.org"&gt;SignPath Foundation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Code Signing Roles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Reviewers: &lt;a href="https://github.com/orgs/starship/teams/astronauts"&gt;Astronauts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Approvers and Authors: &lt;a href="https://github.com/orgs/starship/teams/mission-control"&gt;Mission Control&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This program will not transfer any information to other networked systems unless specifically requested by the user or the person installing or operating it.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;br /&gt; &lt;img width="100" src="https://raw.githubusercontent.com/starship/starship/master/media/icon.png" alt="Starship rocket icon" /&gt; &lt;/p&gt; 
&lt;h2&gt;üìù License&lt;/h2&gt; 
&lt;p&gt;Copyright ¬© 2019-present, &lt;a href="https://github.com/starship/starship/graphs/contributors"&gt;Starship Contributors&lt;/a&gt;.&lt;br /&gt; This project is &lt;a href="https://github.com/starship/starship/raw/master/LICENSE"&gt;ISC&lt;/a&gt; licensed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mainmatter/100-exercises-to-learn-rust</title>
      <link>https://github.com/mainmatter/100-exercises-to-learn-rust</link>
      <description>&lt;p&gt;A self-paced course to learn Rust, one exercise at a time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learn Rust, one exercise at a time&lt;/h1&gt; 
&lt;p&gt;You've heard about Rust, but you never had the chance to try it out?&lt;br /&gt; This course is for you!&lt;/p&gt; 
&lt;p&gt;You'll learn Rust by solving 100 exercises.&lt;br /&gt; You'll go from knowing nothing about Rust to being able to start writing your own programs, one exercise at a time.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This course has been written by &lt;a href="https://mainmatter.com/rust-consulting/"&gt;Mainmatter&lt;/a&gt;.&lt;br /&gt; It's one of the trainings in &lt;a href="https://mainmatter.com/services/workshops/rust/"&gt;our portfolio of Rust workshops&lt;/a&gt;.&lt;br /&gt; Check out our &lt;a href="https://mainmatter.com/rust-consulting/"&gt;landing page&lt;/a&gt; if you're looking for Rust consulting or training!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;Go to &lt;a href="https://rust-exercises.com"&gt;rust-exercises.com&lt;/a&gt; and follow the instructions there to get started with the course.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt; (follow instructions &lt;a href="https://www.rust-lang.org/tools/install"&gt;here&lt;/a&gt;).&lt;br /&gt; If &lt;code&gt;rustup&lt;/code&gt; is already installed on your system, run &lt;code&gt;rustup update&lt;/code&gt; (or another appropriate command depending on how you installed Rust on your system) to make sure you're running on the latest stable version.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;(Optional but recommended)&lt;/em&gt; An IDE with Rust autocompletion support. We recommend one of the following: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://www.jetbrains.com/rust/"&gt;RustRover&lt;/a&gt;;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer"&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/a&gt; extension.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Solutions&lt;/h2&gt; 
&lt;p&gt;You can find the solutions to the exercises in the &lt;a href="https://github.com/mainmatter/100-exercises-to-learn-rust/tree/solutions"&gt;&lt;code&gt;solutions&lt;/code&gt; branch&lt;/a&gt; of this repository.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Copyright ¬© 2024- Mainmatter GmbH (&lt;a href="https://mainmatter.com"&gt;https://mainmatter.com&lt;/a&gt;), released under the &lt;a href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;Creative Commons Attribution-NonCommercial 4.0 International license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LGUG2Z/komorebi</title>
      <link>https://github.com/LGUG2Z/komorebi</link>
      <description>&lt;p&gt;A tiling window manager for Windows üçâ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;komorebi&lt;/h1&gt; 
&lt;p&gt;Tiling Window Management for Windows.&lt;/p&gt; 
&lt;p&gt; &lt;a href="https://techforpalestine.org/learn-more"&gt; &lt;img alt="Tech for Palestine" src="https://badge.techforpalestine.org/default" /&gt; &lt;/a&gt; &lt;img alt="GitHub Workflow Status" src="https://img.shields.io/github/actions/workflow/status/LGUG2Z/komorebi/.github/workflows/windows.yaml" /&gt; &lt;img alt="GitHub all releases" src="https://img.shields.io/github/downloads/LGUG2Z/komorebi/total" /&gt; &lt;img alt="GitHub commits since latest release (by date) for a branch" src="https://img.shields.io/github/commits-since/LGUG2Z/komorebi/latest" /&gt; &lt;img alt="Active Individual Commercial Use Licenses" src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Flgug2z-ecstaticmagentacheetah.web.val.run&amp;amp;query=%24.&amp;amp;label=active%20individual%20commercial%20use%20licenses&amp;amp;cacheSeconds=3600&amp;amp;link=https%3A%2F%2Flgug2z.com%2Fsoftware%2Fkomorebi" /&gt; &lt;a href="https://discord.gg/mGkn66PHkx"&gt; &lt;img alt="Discord" src="https://img.shields.io/discord/898554690126630914" /&gt; &lt;/a&gt; &lt;a href="https://github.com/sponsors/LGUG2Z"&gt; &lt;img alt="GitHub Sponsors" src="https://img.shields.io/github/sponsors/LGUG2Z" /&gt; &lt;/a&gt; &lt;a href="https://ko-fi.com/lgug2z"&gt; &lt;img alt="Ko-fi" src="https://img.shields.io/badge/kofi-tip-green" /&gt; &lt;/a&gt; &lt;a href="https://notado.app/feeds/jado/software-development"&gt; &lt;img alt="Notado Feed" src="https://img.shields.io/badge/Notado-Subscribe-informational" /&gt; &lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UCeai3-do-9O4MNy9_xjO6mg?sub_confirmation=1"&gt; &lt;img alt="YouTube" src="https://img.shields.io/youtube/channel/subscribers/UCeai3-do-9O4MNy9_xjO6mg" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/13164844/184027064-f5a6cec2-2865-4d65-a549-a1f1da589abf.png" alt="screenshot" /&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;komorebi&lt;/em&gt; is a tiling window manager that works as an extension to Microsoft's &lt;a href="https://docs.microsoft.com/en-us/windows/win32/dwm/dwm-overview"&gt;Desktop Window Manager&lt;/a&gt; in Windows 10 and above.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;komorebi&lt;/em&gt; allows you to control application windows, virtual workspaces and display monitors with a CLI which can be used with third-party software such as &lt;a href="https://github.com/LGUG2Z/whkd"&gt;&lt;code&gt;whkd&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/Lexikos/AutoHotkey_L"&gt;AutoHotKey&lt;/a&gt; to set user-defined keyboard shortcuts.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;komorebi&lt;/em&gt; aims to make &lt;em&gt;as few modifications as possible&lt;/em&gt; to the operating system and desktop environment by default. Users are free to make such modifications in their own configuration files for &lt;em&gt;komorebi&lt;/em&gt;, but these will remain opt-in and off-by-default for the foreseeable future.&lt;/p&gt; 
&lt;p&gt;Please refer to the &lt;a href="https://lgug2z.github.io/komorebi"&gt;documentation&lt;/a&gt; for instructions on how to &lt;a href="https://lgug2z.github.io/komorebi/installation.html"&gt;install&lt;/a&gt; and &lt;a href="https://lgug2z.github.io/komorebi/example-configurations.html"&gt;configure&lt;/a&gt; &lt;em&gt;komorebi&lt;/em&gt;, &lt;a href="https://lgug2z.github.io/komorebi/common-workflows/komorebi-config-home.html"&gt;common workflows&lt;/a&gt;, a complete &lt;a href="https://komorebi.lgug2z.com/schema"&gt;configuration schema reference&lt;/a&gt; and a complete &lt;a href="https://lgug2z.github.io/komorebi/cli/quickstart.html"&gt;CLI reference&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;There is a &lt;a href="https://discord.gg/mGkn66PHkx"&gt;Discord server&lt;/a&gt; available for &lt;em&gt;komorebi&lt;/em&gt;-related discussion, help, troubleshooting etc. If you have any specific feature requests or bugs to report, please create an issue in this repository.&lt;/p&gt; 
&lt;p&gt;There is a &lt;a href="https://www.youtube.com/channel/UCeai3-do-9O4MNy9_xjO6mg"&gt;YouTube channel&lt;/a&gt; where I post &lt;em&gt;komorebi&lt;/em&gt; development videos, feature previews and release overviews. Subscribing to the channel (which is monetized as part of the YouTube Partner Program) and watching videos is a really simple and passive way to contribute financially to the development and maintenance of &lt;em&gt;komorebi&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;There is an &lt;a href="https://github.com/LGUG2Z/awesome-komorebi"&gt;Awesome List&lt;/a&gt; which showcases the many awesome projects that exist in the &lt;em&gt;komorebi&lt;/em&gt; ecosystem.&lt;/p&gt; 
&lt;h2&gt;Licensing for Personal Use&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;komorebi&lt;/code&gt; is &lt;a href="https://lgug2z.com/articles/educational-source-software/"&gt;educational source software&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;komorebi&lt;/code&gt; is licensed under the &lt;a href="https://github.com/LGUG2Z/komorebi-license"&gt;Komorebi 2.0.0 license&lt;/a&gt;, which is a fork of the &lt;a href="https://polyformproject.org/licenses/strict/1.0.0"&gt;PolyForm Strict 1.0.0 license&lt;/a&gt;. On a high level this means that you are free to do whatever you want with &lt;code&gt;komorebi&lt;/code&gt; for personal use other than redistribution, or distribution of new works (i.e. hard-forks) based on the software.&lt;/p&gt; 
&lt;p&gt;Anyone is free to make their own fork of &lt;code&gt;komorebi&lt;/code&gt; with changes intended either for personal use or for integration back upstream via pull requests.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/LGUG2Z/komorebi-license"&gt;Komorebi 2.0.0 License&lt;/a&gt; does not permit any kind of commercial use (i.e. using &lt;code&gt;komorebi&lt;/code&gt; at work).&lt;/p&gt; 
&lt;h2&gt;Sponsorship for Personal Use&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;komorebi&lt;/em&gt; is a free and educational source project, and one that encourages you to make charitable donations if you find the software to be useful and have the financial means.&lt;/p&gt; 
&lt;p&gt;I encourage you to make a charitable donation to the &lt;a href="https://pcrf1.app.neoncrm.com/forms/gaza-recovery"&gt;Palestine Children's Relief Fund&lt;/a&gt; or to contribute to a &lt;a href="https://gazafunds.com"&gt;Gaza Funds campaign&lt;/a&gt; before you consider sponsoring me on GitHub.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/sponsors/LGUG2Z"&gt;GitHub Sponsors is enabled for this project&lt;/a&gt;. Sponsors can claim custom roles on the Discord server, get shout outs at the end of &lt;em&gt;komorebi&lt;/em&gt;-related videos on YouTube, gain the ability to submit feature requests on the issue tracker, and receive releases of komorebi with "easter eggs" on physical media.&lt;/p&gt; 
&lt;p&gt;If you would like to tip or sponsor the project but are unable to use GitHub Sponsors, you may also sponsor through &lt;a href="https://ko-fi.com/lgug2z"&gt;Ko-fi&lt;/a&gt;, or make an anonymous Bitcoin donation to &lt;code&gt;bc1qv73wzspc77k46uty4vp85x8sdp24mphvm58f6q&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Licensing for Commercial Use&lt;/h2&gt; 
&lt;p&gt;A dedicated Individual Commercial Use License is available for those who want to use &lt;code&gt;komorebi&lt;/code&gt; at work.&lt;/p&gt; 
&lt;p&gt;The Individual Commerical Use License adds ‚ÄúCommercial Use‚Äù as a ‚ÄúPermitted Use‚Äù for the licensed individual only, for the duration of a valid paid license subscription only. All provisions and restrictions enumerated in the &lt;a href="https://github.com/LGUG2Z/komorebi-license"&gt;Komorebi License&lt;/a&gt; continue to apply.&lt;/p&gt; 
&lt;p&gt;More information, pricing and purchase links for Individual Commercial Use Licenses &lt;a href="https://lgug2z.com/software/komorebi"&gt;can be found here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;A &lt;a href="https://lgug2z.github.io/komorebi/installation.html"&gt;detailed installation and quickstart guide&lt;/a&gt; is available which shows how to get started using &lt;code&gt;scoop&lt;/code&gt;, &lt;code&gt;winget&lt;/code&gt; or building from source.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=MMZUAtHbTYY"&gt;&lt;img src="https://img.youtube.com/vi/MMZUAtHbTYY/hqdefault.jpg" alt="Watch the quickstart walkthrough video" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Comparison With Fancy Zones&lt;/h1&gt; 
&lt;p&gt;Community member &lt;a href="https://www.youtube.com/@polle5555"&gt;Olge&lt;/a&gt; has created an excellent video which compares the default window management features of Windows 11, Fancy Zones and komorebi.&lt;/p&gt; 
&lt;p&gt;If you are not familiar with tiling window managers or if you are looking at komorebi and wondering "how is this different from Fancy Zones? ü§î", this short video will answer the majority of your questions.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=0LCbS_gm0RA"&gt;&lt;img src="https://img.youtube.com/vi/0LCbS_gm0RA/hqdefault.jpg" alt="Watch the comparison video" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Demonstrations&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/amnweb"&gt;@amnweb&lt;/a&gt; showing &lt;em&gt;komorebi&lt;/em&gt; &lt;code&gt;v0.1.28&lt;/code&gt; running on Windows 11 with window borders, unfocused window transparency and animations enabled, using a custom status bar integrated using &lt;em&gt;komorebi&lt;/em&gt;' s &lt;a href="https://github.com/LGUG2Z/komorebi?tab=readme-ov-file#window-manager-event-subscriptions"&gt;Window Manager Event Subscriptions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/LGUG2Z/komorebi/assets/13164844/21be8dc4-fa76-4f70-9b37-1d316f4b40c2"&gt;https://github.com/LGUG2Z/komorebi/assets/13164844/21be8dc4-fa76-4f70-9b37-1d316f4b40c2&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/haxibami"&gt;@haxibami&lt;/a&gt; showing &lt;em&gt;komorebi&lt;/em&gt; running on Windows 11 with a terminal emulator, a web browser and a code editor. The original video can be viewed &lt;a href="https://twitter.com/haxibami/status/1501560766578659332"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/13164844/163496447-20c3ff0a-c5d8-40d1-9cc8-156c4cebf12e.mp4"&gt;https://user-images.githubusercontent.com/13164844/163496447-20c3ff0a-c5d8-40d1-9cc8-156c4cebf12e.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/aik2mlj"&gt;@aik2mlj&lt;/a&gt; showing &lt;em&gt;komorebi&lt;/em&gt; running on Windows 11 with multiple workspaces, terminal emulators, a web browser, and the &lt;a href="https://github.com/DenBot/yasb"&gt;yasb&lt;/a&gt; status bar with the &lt;em&gt;komorebi&lt;/em&gt; workspace widget enabled. The original video can be viewed &lt;a href="https://zhuanlan.zhihu.com/p/455064481"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/13164844/163496414-a9cde3d1-b8a7-4a7a-96fb-a8985380bc70.mp4"&gt;https://user-images.githubusercontent.com/13164844/163496414-a9cde3d1-b8a7-4a7a-96fb-a8985380bc70.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contribution Guidelines&lt;/h1&gt; 
&lt;p&gt;If you would like to contribute to &lt;code&gt;komorebi&lt;/code&gt; please take the time to carefully read the guidelines below.&lt;/p&gt; 
&lt;p&gt;Please see &lt;a href="https://raw.githubusercontent.com/LGUG2Z/komorebi/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more information about how code contributions to &lt;code&gt;komorebi&lt;/code&gt; are licensed.&lt;/p&gt; 
&lt;h2&gt;Commit hygiene&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Flatten all &lt;code&gt;use&lt;/code&gt; statements&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;cargo +stable clippy&lt;/code&gt; and ensure that all lints and suggestions have been addressed before committing&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;cargo +nightly fmt --all&lt;/code&gt; to ensure consistent formatting before committing&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;git cz&lt;/code&gt; with the &lt;a href="https://github.com/commitizen/cz-cli#conventional-commit-messages-as-a-global-utility"&gt;Commitizen CLI&lt;/a&gt; to prepare commit messages&lt;/li&gt; 
 &lt;li&gt;Provide &lt;strong&gt;at least&lt;/strong&gt; one short sentence or paragraph in your commit message body to describe your thought process for the changes being committed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;PRs should contain only a single feature or bug fix&lt;/h2&gt; 
&lt;p&gt;It is very difficult to review pull requests which touch multiple unrelated features and parts of the codebase.&lt;/p&gt; 
&lt;p&gt;Please do not submit pull requests like this; you will be asked to separate them into smaller PRs that deal only with one feature or bug fix at a time.&lt;/p&gt; 
&lt;p&gt;If you are working on multiple features and bug fixes, I suggest that you cut a branch called &lt;code&gt;local-trunk&lt;/code&gt; from &lt;code&gt;master&lt;/code&gt; which you keep up to date, and rebase the various independent branches you are working on onto that branch if you want to test them together or create a build with everything integrated.&lt;/p&gt; 
&lt;h2&gt;Refactors to the codebase must have prior approval&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;komorebi&lt;/code&gt; is a mature codebase with an internal consistency and structure that has developed organically over close to half a decade.&lt;/p&gt; 
&lt;p&gt;There are &lt;a href="https://youtube.com/@LGUG2Z"&gt;countless hours of live coding videos&lt;/a&gt; demonstrating work on this project and showing new contributors how to do everything from basic tasks like implementing new &lt;code&gt;komorebic&lt;/code&gt; commands to distinguishing monitors by manufacturer hardware identifiers and video card ports.&lt;/p&gt; 
&lt;p&gt;Refactors to the structure of the codebase are not taken lightly and require prior discussion and approval.&lt;/p&gt; 
&lt;p&gt;Please do not start refactoring the codebase with the expectation of having your changes integrated until you receive an explicit approval or a request to do so.&lt;/p&gt; 
&lt;p&gt;Similarly, when implementing features and bug fixes, please stick to the structure of the codebase as much as possible and do not take this as an opportunity to do some "refactoring along the way".&lt;/p&gt; 
&lt;p&gt;It is extremely difficult to review PRs for features and bug fixes if they are lost in sweeping changes to the structure of the codebase.&lt;/p&gt; 
&lt;h2&gt;Breaking changes to user-facing interfaces are unacceptable&lt;/h2&gt; 
&lt;p&gt;This includes but is not limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All &lt;code&gt;komorebic&lt;/code&gt; commands&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;komorebi.json&lt;/code&gt; schema&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/LGUG2Z/komorebi-application-specific-configuration"&gt; &lt;code&gt;komorebi-application-specific-configuration&lt;/code&gt;&lt;/a&gt; schema&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;No user should ever find that their configuration file has stopped working after upgrading to a new version of &lt;code&gt;komorebi&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;More often than not there are ways to reformulate changes that may initially seem like they require breaking user-facing interfaces into additive changes.&lt;/p&gt; 
&lt;p&gt;For some inspiration please take a look at &lt;a href="https://github.com/LGUG2Z/komorebi/commit/e7d928a065eb63bb4ea1fb864c69c1cae8cc763b"&gt;this commit&lt;/a&gt; which added the ability for users to specify colours in &lt;code&gt;komorebi.json&lt;/code&gt; in Hex format alongside RGB.&lt;/p&gt; 
&lt;p&gt;There is also a process in place for graceful, non-breaking, deprecation of configuration options that are no longer required.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;p&gt;If you use IntelliJ, you should enable the following settings to ensure that code generated by macros is recognised by the IDE for completions and navigation:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set &lt;code&gt;Expand declarative macros&lt;/code&gt; to &lt;code&gt;Use new engine&lt;/code&gt; under "Settings &amp;gt; Langauges &amp;amp; Frameworks &amp;gt; Rust"&lt;/li&gt; 
 &lt;li&gt;Enable the following experimental features: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;org.rust.cargo.evaluate.build.scripts&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;org.rust.macros.proc&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Logs and Debugging&lt;/h1&gt; 
&lt;p&gt;Logs from &lt;code&gt;komorebi&lt;/code&gt; will be appended to &lt;code&gt;%LOCALAPPDATA%/komorebi/komorebi.log&lt;/code&gt;; this file is never rotated or overwritten, so it will keep growing until it is deleted by the user.&lt;/p&gt; 
&lt;p&gt;Whenever running the &lt;code&gt;komorebic stop&lt;/code&gt; command or sending a Ctrl-C signal to &lt;code&gt;komorebi&lt;/code&gt; directly, the &lt;code&gt;komorebi&lt;/code&gt; process ensures that all hidden windows are restored before termination.&lt;/p&gt; 
&lt;p&gt;If however, you ever end up with windows that are hidden and cannot be restored, a list of window handles known to &lt;code&gt;komorebi&lt;/code&gt; are stored and continuously updated in &lt;code&gt;%LOCALAPPDATA%/komorebi//komorebi.hwnd.json&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Restoring Windows&lt;/h2&gt; 
&lt;p&gt;Running &lt;code&gt;komorebic restore-windows&lt;/code&gt; will read the list of window handles and forcibly restore them, regardless of whether the main &lt;code&gt;komorebi&lt;/code&gt; process is running.&lt;/p&gt; 
&lt;h2&gt;Panics and Deadlocks&lt;/h2&gt; 
&lt;p&gt;If &lt;code&gt;komorebi&lt;/code&gt; ever stops responding, it is most likely either due to either a panic or a deadlock. In the case of a panic, this will be reported in the log. In the case of a deadlock, there will not be any errors in the log, but the process and the log will appear frozen.&lt;/p&gt; 
&lt;p&gt;If you believe you have encountered a deadlock, you can compile &lt;code&gt;komorebi&lt;/code&gt; with &lt;code&gt;--features deadlock_detection&lt;/code&gt; and try reproducing the deadlock again. This will check for deadlocks every 5 seconds in the background, and if a deadlock is found, information about it will appear in the log which can be shared when opening an issue.&lt;/p&gt; 
&lt;h1&gt;Window Manager State and Integrations&lt;/h1&gt; 
&lt;p&gt;The current state of the window manager can be queried using the &lt;code&gt;komorebic state&lt;/code&gt; command, which returns a JSON representation of the &lt;code&gt;State&lt;/code&gt; struct.&lt;/p&gt; 
&lt;p&gt;This may also be polled to build further integrations and widgets on top of.&lt;/p&gt; 
&lt;h1&gt;Window Manager Event Subscriptions&lt;/h1&gt; 
&lt;h2&gt;Named Pipes&lt;/h2&gt; 
&lt;p&gt;It is possible to subscribe to notifications of every &lt;code&gt;WindowManagerEvent&lt;/code&gt; and &lt;code&gt;SocketMessage&lt;/code&gt; handled by &lt;code&gt;komorebi&lt;/code&gt; using &lt;a href="https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes"&gt;Named Pipes&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;First, your application must create a named pipe. Once the named pipe has been created, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;komorebic.exe subscribe-pipe &amp;lt;your pipe name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you do not have to include the full path of the named pipe, just the name.&lt;/p&gt; 
&lt;p&gt;If the named pipe exists, &lt;code&gt;komorebi&lt;/code&gt; will start pushing JSON data of successfully handled events and messages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{"event":{"type":"AddSubscriber","content":"yasb"},"state":{}}
{"event":{"type":"FocusWindow","content":"Left"},"state":{}}
{"event":{"type":"FocusChange","content":["SystemForeground",{"hwnd":131444,"title":"komorebi ‚Äì README.md","exe":"idea64.exe","class":"SunAwtFrame","rect":{"left":13,"top":60,"right":1520,"bottom":1655}}]},"state":{}}
{"event":{"type":"MonitorPoll","content":["ObjectCreate",{"hwnd":5572450,"title":"OLEChannelWnd","exe":"explorer.exe","class":"OleMainThreadWndClass","rect":{"left":0,"top":0,"right":0,"bottom":0}}]},"state":{}}
{"event":{"type":"FocusWindow","content":"Right"},"state":{}}
{"event":{"type":"FocusChange","content":["SystemForeground",{"hwnd":132968,"title":"Windows PowerShell","exe":"WindowsTerminal.exe","class":"CASCADIA_HOSTING_WINDOW_CLASS","rect":{"left":1539,"top":60,"right":1520,"bottom":821}}]},"state":{}}
{"event":{"type":"FocusWindow","content":"Down"},"state":{}}
{"event":{"type":"FocusChange","content":["SystemForeground",{"hwnd":329264,"title":"den ‚Äî Mozilla Firefox","exe":"firefox.exe","class":"MozillaWindowClass","rect":{"left":1539,"top":894,"right":1520,"bottom":821}}]},"state":{}}
{"event":{"type":"FocusWindow","content":"Up"},"state":{}}
{"event":{"type":"FocusChange","content":["SystemForeground",{"hwnd":132968,"title":"Windows PowerShell","exe":"WindowsTerminal.exe","class":"CASCADIA_HOSTING_WINDOW_CLASS","rect":{"left":1539,"top":60,"right":1520,"bottom":821}}]},"state":{}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may then filter on the &lt;code&gt;type&lt;/code&gt; key to listen to the events that you are interested in. For a full list of possible notification types, refer to the enum variants of &lt;code&gt;WindowManagerEvent&lt;/code&gt; in &lt;code&gt;komorebi&lt;/code&gt; and &lt;code&gt;SocketMessage&lt;/code&gt; in &lt;code&gt;komorebi::core&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Below is an example of how you can subscribe to and filter on events using a named pipe in &lt;code&gt;nodejs&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const { exec } = require("child_process");
const net = require("net");

const pipeName = "\\\\.\\pipe\\komorebi-js";
const server = net.createServer((stream) =&amp;gt; {
  console.log("Client connected");

  // Every time there is a workspace-related event, let's log the names of all
  // workspaces on the currently focused monitor, and then log the name of the
  // currently focused workspace on that monitor

  stream.on("data", (data) =&amp;gt; {
    let json = JSON.parse(data.toString());
    let event = json.event;

    if (event.type.includes("Workspace")) {
      let monitors = json.state.monitors;
      let current_monitor = monitors.elements[monitors.focused];
      let workspaces = monitors.elements[monitors.focused].workspaces;
      let current_workspace = workspaces.elements[workspaces.focused];

      console.log(
        workspaces.elements
          .map((workspace) =&amp;gt; workspace.name)
          .filter((name) =&amp;gt; name !== null)
      );
      console.log(current_workspace.name);
    }
  });

  stream.on("end", () =&amp;gt; {
    console.log("Client disconnected");
  });
});

server.listen(pipeName, () =&amp;gt; {
  console.log("Named pipe server listening");
});

const command = "komorebic subscribe-pipe komorebi-js";

exec(command, (error, stdout, stderr) =&amp;gt; {
  if (error) {
    console.error(`Error executing command: ${error}`);
    return;
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Unix Domain Sockets&lt;/h2&gt; 
&lt;p&gt;It is possible to subscribe to notifications of every &lt;code&gt;WindowManagerEvent&lt;/code&gt; and &lt;code&gt;SocketMessage&lt;/code&gt; handled by &lt;code&gt;komorebi&lt;/code&gt; using &lt;a href="https://devblogs.microsoft.com/commandline/af_unix-comes-to-windows/"&gt;Unix Domain Sockets&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;UDS are also the only mode of communication between &lt;code&gt;komorebi&lt;/code&gt; and &lt;code&gt;komorebic&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;First, your application must create a socket in &lt;code&gt;$ENV:LocalAppData\komorebi&lt;/code&gt;. Once the socket has been created, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;komorebic.exe subscribe-socket &amp;lt;your socket name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the socket exists, komorebi will start pushing JSON data of successfully handled events and messages as in the example above in the Named Pipes section.&lt;/p&gt; 
&lt;h2&gt;Rust Client&lt;/h2&gt; 
&lt;p&gt;As of &lt;code&gt;v0.1.22&lt;/code&gt; it is possible to use the &lt;code&gt;komorebi-client&lt;/code&gt; crate to subscribe to notifications of every &lt;code&gt;WindowManagerEvent&lt;/code&gt; and &lt;code&gt;SocketMessage&lt;/code&gt; handled by &lt;code&gt;komorebi&lt;/code&gt; in a Rust codebase.&lt;/p&gt; 
&lt;p&gt;Below is a simple example of how to use &lt;code&gt;komorebi-client&lt;/code&gt; in a basic Rust application.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// komorebi-client = { git = "https://github.com/LGUG2Z/komorebi", tag = "v0.1.38"}

use anyhow::Result;
use komorebi_client::Notification;
use komorebi_client::NotificationEvent;
use komorebi_client::UnixListener;
use komorebi_client::WindowManagerEvent;
use std::io::BufRead;
use std::io::BufReader;
use std::io::Read;

pub fn main() -&amp;gt; anyhow::Result&amp;lt;()&amp;gt; {
  let socket = komorebi_client::subscribe(NAME)?;

  for incoming in socket.incoming() {
    match incoming {
      Ok(data) =&amp;gt; {
        let reader = BufReader::new(data.try_clone()?);

        for line in reader.lines().flatten() {
          let notification: Notification = match serde_json::from_str(&amp;amp;line) {
            Ok(notification) =&amp;gt; notification,
            Err(error) =&amp;gt; {
              log::debug!("discarding malformed komorebi notification: {error}");
              continue;
            }
          };

          // match and filter on desired notifications
        }
      }
      Err(error) =&amp;gt; {
        log::debug!("{error}");
      }
    }
  }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A read-world example can be found in &lt;a href="https://github.com/LGUG2Z/komokana/raw/feature/komorebi-uds/src/main.rs"&gt;komokana&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Subscription Event Notification Schema&lt;/h2&gt; 
&lt;p&gt;A &lt;a href="https://json-schema.org/"&gt;JSON Schema&lt;/a&gt; of the event notifications emitted to subscribers can be generated with the &lt;code&gt;komorebic notification-schema&lt;/code&gt; command. The output of this command can be redirected to the clipboard or a file, which can be used with services such as &lt;a href="https://app.quicktype.io/"&gt;Quicktype&lt;/a&gt; to generate type definitions in different programming languages.&lt;/p&gt; 
&lt;h2&gt;Communication over TCP&lt;/h2&gt; 
&lt;p&gt;A TCP listener can optionally be exposed on a port of your choosing with the &lt;code&gt;--tcp-port=N&lt;/code&gt; flag. If this flag is not provided to &lt;code&gt;komorebi&lt;/code&gt; or &lt;code&gt;komorebic start&lt;/code&gt;, no TCP listener will be created.&lt;/p&gt; 
&lt;p&gt;Once created, your client may send any &lt;a href="https://github.com/LGUG2Z/komorebi/raw/master/komorebi/src/core/mod.rs#L37"&gt;SocketMessage&lt;/a&gt; to &lt;code&gt;komorebi&lt;/code&gt; in the same way that &lt;code&gt;komorebic&lt;/code&gt; would.&lt;/p&gt; 
&lt;p&gt;This can be used if you would like to create your own alternative to &lt;code&gt;komorebic&lt;/code&gt; which incorporates scripting and various middleware layers, and similarly it can be used if you would like to integrate &lt;code&gt;komorebi&lt;/code&gt; with a &lt;a href="https://github.com/LGUG2Z/komorebi/issues/176#issue-1302643961"&gt;custom input handler&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If a client sends an unrecognized message, it will be disconnected and have to reconnect before trying to communicate again.&lt;/p&gt; 
&lt;h2&gt;Socket Message Schema&lt;/h2&gt; 
&lt;p&gt;A &lt;a href="https://json-schema.org/"&gt;JSON Schema&lt;/a&gt; of socket messages used to send instructions to &lt;code&gt;komorebi&lt;/code&gt; can be generated with the &lt;code&gt;komorebic socket-schema&lt;/code&gt; command. The output of this command can be redirected to the clipboard or a file, which can be used with services such as &lt;a href="https://app.quicktype.io/"&gt;Quicktype&lt;/a&gt; to generate type definitions in different programming languages.&lt;/p&gt; 
&lt;h1&gt;Appreciations&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;First and foremost, thank you to my wife, both for naming this project and for her patience throughout its never-ending development&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Thank you to &lt;a href="https://github.com/sitiom"&gt;@sitiom&lt;/a&gt; for being &lt;a href="https://jeezy.substack.com/p/the-open-source-contributions-i-appreciate"&gt;an exemplary open source community leader&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Thank you to the developers of &lt;a href="https://github.com/TimUntersberger/nog"&gt;nog&lt;/a&gt; who came before me and whose work taught me more than I can ever hope to repay&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Thank you to the developers of &lt;a href="https://github.com/lars-berger/GlazeWM"&gt;GlazeWM&lt;/a&gt; for pushing the boundaries of tiling window management on Windows with me and having an excellent spirit of collaboration&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Thank you to &lt;a href="https://github.com/Ciantic"&gt;@Ciantic&lt;/a&gt; for helping me bring the &lt;a href="https://github.com/Ciantic/AltTabAccessor/issues/1"&gt;hidden Virtual Desktops cloaking function&lt;/a&gt; to &lt;code&gt;komorebi&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>sxyazi/yazi</title>
      <link>https://github.com/sxyazi/yazi</link>
      <description>&lt;p&gt;üí• Blazing fast terminal file manager written in Rust, based on async I/O.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://go.warp.dev/yazi" target="_blank"&gt; &lt;sup&gt;Special thanks to:&lt;/sup&gt; &lt;br /&gt; &lt;img alt="Warp sponsorship" width="400" src="https://github.com/warpdotdev/brand-assets/raw/main/Github/Sponsor/Warp-Github-LG-02.png" /&gt; &lt;br /&gt; 
  &lt;h&gt;
   Warp, built for coding with multiple AI agents 
   &lt;br /&gt; 
   &lt;sup&gt;Available for macOS, Linux and Windows&lt;/sup&gt; 
  &lt;/h&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;Yazi - ‚ö°Ô∏è Blazing Fast Terminal File Manager&lt;/h2&gt; 
&lt;p&gt;Yazi (means "duck") is a terminal file manager written in Rust, based on non-blocking async I/O. It aims to provide an efficient, user-friendly, and customizable file management experience.&lt;/p&gt; 
&lt;p&gt;üí° A new article explaining its internal workings: &lt;a href="https://yazi-rs.github.io/blog/why-is-yazi-fast"&gt;Why is Yazi Fast?&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;üöÄ &lt;strong&gt;Full Asynchronous Support&lt;/strong&gt;: All I/O operations are asynchronous, CPU tasks are spread across multiple threads, making the most of available resources.&lt;/li&gt; 
 &lt;li&gt;üí™ &lt;strong&gt;Powerful Async Task Scheduling and Management&lt;/strong&gt;: Provides real-time progress updates, task cancellation, and internal task priority assignment.&lt;/li&gt; 
 &lt;li&gt;üñºÔ∏è &lt;strong&gt;Built-in Support for Multiple Image Protocols&lt;/strong&gt;: Also integrated with √úberzug++ and Chafa, covering almost all terminals.&lt;/li&gt; 
 &lt;li&gt;üåü &lt;strong&gt;Built-in Code Highlighting and Image Decoding&lt;/strong&gt;: Combined with the pre-loading mechanism, greatly accelerates image and normal file loading.&lt;/li&gt; 
 &lt;li&gt;üîå &lt;strong&gt;Concurrent Plugin System&lt;/strong&gt;: UI plugins (rewriting most of the UI), functional plugins, custom previewer/preloader/spotter/fetcher; Just some pieces of Lua.&lt;/li&gt; 
 &lt;li&gt;üì° &lt;strong&gt;Data Distribution Service&lt;/strong&gt;: Built on a client-server architecture (no additional server process required), integrated with a Lua-based publish-subscribe model, achieving cross-instance communication and state persistence.&lt;/li&gt; 
 &lt;li&gt;üì¶ &lt;strong&gt;Package Manager&lt;/strong&gt;: Install plugins and themes with one command, keeping them up-to-date, or pin them to a specific version.&lt;/li&gt; 
 &lt;li&gt;üß∞ Integration with ripgrep, fd, fzf, zoxide&lt;/li&gt; 
 &lt;li&gt;üí´ Vim-like input/pick/confirm/which/notify component, auto-completion for cd paths&lt;/li&gt; 
 &lt;li&gt;üè∑Ô∏è Multi-Tab Support, Cross-directory selection, Scrollable Preview (for videos, PDFs, archives, code, directories, etc.)&lt;/li&gt; 
 &lt;li&gt;üîÑ Bulk Renaming, Archive Extraction, Visual Mode, File Chooser, &lt;a href="https://github.com/yazi-rs/plugins/tree/main/git.yazi"&gt;Git Integration&lt;/a&gt;, &lt;a href="https://github.com/yazi-rs/plugins/tree/main/mount.yazi"&gt;Mount Manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üé® Theme System, Mouse Support, Trash Bin, Custom Layouts, Virtual Filesystem, CSI u, OSC 52&lt;/li&gt; 
 &lt;li&gt;... and more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://github.com/sxyazi/yazi/assets/17523360/92ff23fa-0cd5-4f04-b387-894c12265cc7"&gt;https://github.com/sxyazi/yazi/assets/17523360/92ff23fa-0cd5-4f04-b387-894c12265cc7&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Project status&lt;/h2&gt; 
&lt;p&gt;Public beta, can be used as a daily driver.&lt;/p&gt; 
&lt;p&gt;Yazi is currently in heavy development, expect breaking changes.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usage: &lt;a href="https://yazi-rs.github.io/docs/installation"&gt;https://yazi-rs.github.io/docs/installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Features: &lt;a href="https://yazi-rs.github.io/features"&gt;https://yazi-rs.github.io/features&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Discussion&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Discord Server (English mainly): &lt;a href="https://discord.gg/qfADduSdJu"&gt;https://discord.gg/qfADduSdJu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Telegram Group (Chinese mainly): &lt;a href="https://t.me/yazi_rs"&gt;https://t.me/yazi_rs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Image Preview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Protocol&lt;/th&gt; 
   &lt;th&gt;Support&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/kovidgoyal/kitty"&gt;kitty&lt;/a&gt; (&amp;gt;= 0.28.0)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://sw.kovidgoyal.net/kitty/graphics-protocol/#unicode-placeholders"&gt;Kitty unicode placeholders&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com"&gt;iTerm2&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/wez/wezterm"&gt;WezTerm&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://invent.kde.org/utilities/konsole"&gt;Konsole&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/sxyazi/yazi/raw/main/yazi-adapter/src/drivers/kgp_old.rs"&gt;Kitty old protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://codeberg.org/dnkl/foot"&gt;foot&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.vt100.net/docs/vt3xx-gp/chapter14.html"&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ghostty-org/ghostty"&gt;Ghostty&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://sw.kovidgoyal.net/kitty/graphics-protocol/#unicode-placeholders"&gt;Kitty unicode placeholders&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt; (&amp;gt;= v1.22.10352.0)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.vt100.net/docs/vt3xx-gp/chapter14.html"&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/bakkeby/st-flexipatch"&gt;st with Sixel patch&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.vt100.net/docs/vt3xx-gp/chapter14.html"&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.warp.dev"&gt;Warp&lt;/a&gt; (macOS/Linux only)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Eugeny/tabby"&gt;Tabby&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/microsoft/vscode"&gt;VSCode&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/raphamorim/rio"&gt;Rio&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://gitlab.gnome.org/raggesilver/blackbox"&gt;Black Box&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.vt100.net/docs/vt3xx-gp/chapter14.html"&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vercel/hyper"&gt;Hyper&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ismail-yilmaz/Bobcat"&gt;Bobcat&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://iterm2.com/documentation-images.html"&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;X11 / Wayland&lt;/td&gt; 
   &lt;td&gt;Window system protocol&lt;/td&gt; 
   &lt;td&gt;‚òëÔ∏è &lt;a href="https://github.com/jstkdng/ueberzugpp"&gt;√úberzug++&lt;/a&gt; required&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fallback&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/ASCII_art"&gt;ASCII art (Unicode block)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;‚òëÔ∏è &lt;a href="https://hpjansson.org/chafa/"&gt;Chafa&lt;/a&gt; required&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;See &lt;a href="https://yazi-rs.github.io/docs/image-preview"&gt;https://yazi-rs.github.io/docs/image-preview&lt;/a&gt; for details.&lt;/p&gt; 
&lt;!-- Protocols --&gt; 
&lt;!-- Dependencies --&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Yazi is MIT-licensed. For more information check the &lt;a href="https://raw.githubusercontent.com/sxyazi/yazi/main/LICENSE"&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ReFirmLabs/binwalk</title>
      <link>https://github.com/ReFirmLabs/binwalk</link>
      <description>&lt;p&gt;Firmware Analysis Tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Binwalk v3&lt;/h1&gt; 
&lt;p&gt;This is an updated version of the Binwalk firmware analysis tool, re-written in Rust for speed and accuracy.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ReFirmLabs/binwalk/master/images/binwalk_animated.svg?sanitize=true" alt="binwalk v3" /&gt;&lt;/p&gt; 
&lt;h2&gt;What does it do?&lt;/h2&gt; 
&lt;p&gt;Binwalk can identify, and optionally extract, files and data that have been embedded inside of other files.&lt;/p&gt; 
&lt;p&gt;While its primary focus is firmware analysis, it supports a &lt;a href="https://github.com/ReFirmLabs/binwalk/wiki/Supported-Signatures"&gt;wide variety&lt;/a&gt; of file and data types.&lt;/p&gt; 
&lt;p&gt;Through &lt;a href="https://github.com/ReFirmLabs/binwalk/wiki/Generating-Entropy-Graphs"&gt;entropy analysis&lt;/a&gt;, it can even help to identify unknown compression or encryption!&lt;/p&gt; 
&lt;p&gt;Binwalk can be customized and &lt;a href="https://github.com/ReFirmLabs/binwalk/wiki/Using-the-Rust-Library"&gt;integrated&lt;/a&gt; into your own Rust projects.&lt;/p&gt; 
&lt;h2&gt;How do I get it?&lt;/h2&gt; 
&lt;p&gt;The easiest way to install Binwalk and all dependencies is to &lt;a href="https://github.com/ReFirmLabs/binwalk/wiki/Building-A-Binwalk-Docker-Image"&gt;build a Docker image&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Binwalk can also be &lt;a href="https://github.com/ReFirmLabs/binwalk/wiki/Cargo-Installation"&gt;installed&lt;/a&gt; via the Rust package manager.&lt;/p&gt; 
&lt;p&gt;Or, you can &lt;a href="https://github.com/ReFirmLabs/binwalk/wiki/Compile-From-Source"&gt;compile from source&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;How do I use it?&lt;/h2&gt; 
&lt;p&gt;Usage is &lt;em&gt;&lt;strong&gt;simple&lt;/strong&gt;&lt;/em&gt;, analysis is &lt;em&gt;&lt;strong&gt;fast&lt;/strong&gt;&lt;/em&gt;, and results are &lt;em&gt;&lt;strong&gt;detailed&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;binwalk DIR-890L_AxFW110b07.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ReFirmLabs/binwalk/master/images/output.png" alt="example output" /&gt;&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;--help&lt;/code&gt;, or check out the &lt;a href="https://github.com/ReFirmLabs/binwalk/wiki#usage"&gt;Wiki&lt;/a&gt; for more advanced options!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust</title>
      <link>https://github.com/rust-lang/rust</link>
      <description>&lt;p&gt;Empowering everyone to build reliable and efficient software.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-dark.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg" /&gt; 
  &lt;img alt="The Rust Programming Language: A language empowering everyone to build reliable and efficient software" src="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg?sanitize=true" width="50%" /&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Website&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn/get-started"&gt;Getting started&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn"&gt;Learn&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn#learn-use"&gt;Documentation&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;This is the main source code repository for &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;. It contains the compiler, standard library, and documentation.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Fast and memory-efficient, suitable for critical services, embedded devices, and easily integrated with other languages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliability:&lt;/strong&gt; Our rich type system and ownership model ensure memory and thread safety, reducing bugs at compile-time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Productivity:&lt;/strong&gt; Comprehensive documentation, a compiler committed to providing great diagnostics, and advanced tooling including package manager and build tool (&lt;a href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt;), auto-formatter (&lt;a href="https://github.com/rust-lang/rustfmt"&gt;rustfmt&lt;/a&gt;), linter (&lt;a href="https://github.com/rust-lang/rust-clippy"&gt;Clippy&lt;/a&gt;) and editor support (&lt;a href="https://github.com/rust-lang/rust-analyzer"&gt;rust-analyzer&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Read &lt;a href="https://doc.rust-lang.org/book/ch01-01-installation.html"&gt;"Installation"&lt;/a&gt; from &lt;a href="https://doc.rust-lang.org/book/index.html"&gt;The Book&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing from Source&lt;/h2&gt; 
&lt;p&gt;If you really want to install from source (though this is not recommended), see &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/INSTALL.md"&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://www.rust-lang.org/community"&gt;https://www.rust-lang.org/community&lt;/a&gt; for a list of chat platforms and forums.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rust is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/COPYRIGHT"&gt;COPYRIGHT&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Trademark&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://rustfoundation.org/"&gt;The Rust Foundation&lt;/a&gt; owns and protects the Rust and Cargo trademarks and logos (the "Rust Trademarks").&lt;/p&gt; 
&lt;p&gt;If you want to use these names or brands, please read the &lt;a href="https://rustfoundation.org/policy/rust-trademark-policy/"&gt;Rust language trademark policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Third-party logos may be subject to third-party copyrights and trademarks. See &lt;a href="https://www.rust-lang.org/policies/licenses"&gt;Licenses&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ankitects/anki</title>
      <link>https://github.com/ankitects/anki</link>
      <description>&lt;p&gt;Anki is a smart spaced repetition flashcard program&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anki¬Æ&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://buildkite.com/ankitects/anki-ci"&gt;&lt;img src="https://badge.buildkite.com/c9edf020a4aec976f9835e54751cc5409d843adbb66d043bd3.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo contains the source code for the computer version of &lt;a href="https://apps.ankiweb.net"&gt;Anki&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;About&lt;/h1&gt; 
&lt;p&gt;Anki is a spaced repetition program. Please see the &lt;a href="https://apps.ankiweb.net"&gt;website&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;h3&gt;Anki Betas&lt;/h3&gt; 
&lt;p&gt;If you'd like to try development builds of Anki but don't feel comfortable building the code, please see &lt;a href="https://betas.ankiweb.net/"&gt;Anki betas&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Developing&lt;/h3&gt; 
&lt;p&gt;For more information on building and developing, please see &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/development.md"&gt;Development&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Want to contribute to Anki? Check out the &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/contributing.md"&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Anki Contributors&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/CONTRIBUTORS"&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Anki's license: &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bevyengine/bevy</title>
      <link>https://github.com/bevyengine/bevy</link>
      <description>&lt;p&gt;A refreshingly simple data-driven game engine built in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://bevy.org"&gt;&lt;img src="https://raw.githubusercontent.com/bevyengine/bevy/main/assets/branding/bevy_logo_light_dark_and_dimmed.svg?sanitize=true" alt="Bevy" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/bevyengine/bevy#license"&gt;&lt;img src="https://img.shields.io/badge/license-MIT%2FApache-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/v/bevy.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/d/bevy.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/bevy/latest/bevy/"&gt;&lt;img src="https://docs.rs/bevy/badge.svg?sanitize=true" alt="Docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bevyengine/bevy/actions"&gt;&lt;img src="https://github.com/bevyengine/bevy/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/bevy"&gt;&lt;img src="https://img.shields.io/discord/691052431525675048.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Bevy?&lt;/h2&gt; 
&lt;p&gt;Bevy is a refreshingly simple data-driven game engine built in Rust. It is free and open-source forever!&lt;/p&gt; 
&lt;h2&gt;WARNING&lt;/h2&gt; 
&lt;p&gt;Bevy is still in the early stages of development. Important features are missing. Documentation is sparse. A new version of Bevy containing breaking changes to the API is released &lt;a href="https://bevy.org/news/bevy-0-6/#the-train-release-schedule"&gt;approximately once every 3 months&lt;/a&gt;. We provide &lt;a href="https://bevy.org/learn/migration-guides/"&gt;migration guides&lt;/a&gt;, but we can't guarantee migrations will always be easy. Use only if you are willing to work in this environment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; Bevy relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally close to "the latest stable release" of Rust.&lt;/p&gt; 
&lt;h2&gt;Design Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Capable&lt;/strong&gt;: Offer a complete 2D and 3D feature set&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Easy for newbies to pick up, but infinitely flexible for power users&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Focused&lt;/strong&gt;: Data-oriented architecture using the Entity Component System paradigm&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modular&lt;/strong&gt;: Use only what you need. Replace what you don't like&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: App logic should run quickly, and when possible, in parallel&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Productive&lt;/strong&gt;: Changes should compile quickly ... waiting isn't fun&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org"&gt;Features&lt;/a&gt;:&lt;/strong&gt; A quick overview of Bevy's features.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/news/"&gt;News&lt;/a&gt;&lt;/strong&gt;: A development blog that covers our progress, plans and shiny new features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt;:&lt;/strong&gt; Bevy's official Quick Start Guide. The best place to start learning Bevy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.rs/bevy"&gt;Bevy Rust API Docs&lt;/a&gt;:&lt;/strong&gt; Bevy's Rust API docs, which are automatically generated from the doc comments in this repo.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;Official Examples&lt;/a&gt;:&lt;/strong&gt; Bevy's dedicated, runnable examples, which are great for digging into specific concepts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/#learning"&gt;Community-Made Learning Resources&lt;/a&gt;&lt;/strong&gt;: More tutorials, documentation, and examples made by the Bevy community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Before contributing or participating in discussions with the community, you should familiarize yourself with our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CODE_OF_CONDUCT.md"&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://discord.gg/bevy"&gt;Discord&lt;/a&gt;:&lt;/strong&gt; Bevy's official discord server.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://reddit.com/r/bevy"&gt;Reddit&lt;/a&gt;:&lt;/strong&gt; Bevy's official subreddit.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/discussions"&gt;GitHub Discussions&lt;/a&gt;:&lt;/strong&gt; The best place for questions about Bevy, answered right here!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/"&gt;Bevy Assets&lt;/a&gt;:&lt;/strong&gt; A collection of awesome Bevy projects, tools, plugins and learning materials.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you'd like to help build Bevy, check out the &lt;strong&gt;&lt;a href="https://bevy.org/learn/contribute/introduction"&gt;Contributor's Guide&lt;/a&gt;&lt;/strong&gt;. For simple problems, feel free to &lt;a href="https://github.com/bevyengine/bevy/issues"&gt;open an issue&lt;/a&gt; or &lt;a href="https://github.com/bevyengine/bevy/pulls"&gt;PR&lt;/a&gt; and tackle it yourself!&lt;/p&gt; 
&lt;p&gt;For more complex architecture decisions and experimental mad science, please open an &lt;a href="https://github.com/bevyengine/rfcs"&gt;RFC&lt;/a&gt; (Request For Comments) so we can brainstorm together effectively!&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We recommend checking out the &lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt; for a brief introduction.&lt;/p&gt; 
&lt;p&gt;Follow the &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;Setup guide&lt;/a&gt; to ensure your development environment is set up correctly. Once set up, you can quickly try out the &lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;examples&lt;/a&gt; by cloning this repo and running the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Switch to the correct version (latest release, default is main development branch)
git checkout latest
# Runs the "breakout" example
cargo run --example breakout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To draw a window with standard functionality enabled, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use bevy::prelude::*;

fn main() {
    App::new()
        .add_plugins(DefaultPlugins)
        .run();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fast Compiles&lt;/h3&gt; 
&lt;p&gt;Bevy can be built just fine using default configuration on stable Rust. However for really fast iterative compiles, you should enable the "fast compiles" setup by &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;following the instructions here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;Bevy Cargo Features&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;This &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;list&lt;/a&gt; outlines the different cargo features supported by Bevy. These allow you to customize the Bevy feature set for your use-case.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Bevy is the result of the hard work of many people. A huge thanks to all Bevy contributors, the many open source projects that have come before us, the &lt;a href="https://arewegameyet.rs/"&gt;Rust gamedev ecosystem&lt;/a&gt;, and the many libraries we build on.&lt;/p&gt; 
&lt;p&gt;A huge thanks to Bevy's &lt;a href="https://bevy.org"&gt;generous sponsors&lt;/a&gt;. Bevy will always be free and open source, but it isn't free to make. Please consider &lt;a href="https://bevy.org/donate/"&gt;sponsoring our work&lt;/a&gt; if you like what we're building.&lt;/p&gt; 
&lt;!-- This next line need to stay exactly as is. It is required for BrowserStack sponsorship. --&gt; 
&lt;p&gt;This project is tested with BrowserStack.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Bevy is free, open source and permissively licensed! Except where noted (below and/or in individual files), all code in this repository is dual-licensed under either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MIT License (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option. This means you can select the license you prefer! This dual-licensing approach is the de-facto standard in the Rust ecosystem and there are &lt;a href="https://github.com/bevyengine/bevy/issues/2373"&gt;very good reasons&lt;/a&gt; to include both.&lt;/p&gt; 
&lt;p&gt;Some of the engine's code carries additional copyright notices and license terms due to their external origins. These are generally BSD-like, but exact details vary by crate: If the README of a crate contains a 'License' header (or similar), the additional copyright notices and license terms applicable to that crate will be listed. The above licensing requirement still applies to contributions to those crates, and sections of those crates will carry those license terms. The &lt;a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields"&gt;license&lt;/a&gt; field of each crate will also reflect this.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/assets"&gt;assets&lt;/a&gt; included in this repository (for our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/examples/README.md"&gt;examples&lt;/a&gt;) typically fall under different open licenses. These will not be included in your game (unless copied in by you), and they are not distributed in the published bevy crates. See &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CREDITS.md"&gt;CREDITS.md&lt;/a&gt; for the details of the licenses of those files.&lt;/p&gt; 
&lt;h3&gt;Your contributions&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/book</title>
      <link>https://github.com/rust-lang/book</link>
      <description>&lt;p&gt;The Rust Programming Language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Rust Programming Language&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/rust-lang/book/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains the source of "The Rust Programming Language" book.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://nostarch.com/rust-programming-language-2nd-edition"&gt;The book is available in dead-tree form from No Starch Press&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also read the book for free online. Please see the book as shipped with the latest &lt;a href="https://doc.rust-lang.org/stable/book/"&gt;stable&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/beta/book/"&gt;beta&lt;/a&gt;, or &lt;a href="https://doc.rust-lang.org/nightly/book/"&gt;nightly&lt;/a&gt; Rust releases. Be aware that issues in those versions may have been fixed in this repository already, as those releases are updated less frequently.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/book/releases"&gt;releases&lt;/a&gt; to download just the code of all the code listings that appear in the book.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Building the book requires &lt;a href="https://github.com/rust-lang/mdBook"&gt;mdBook&lt;/a&gt;, ideally the same version that rust-lang/rust uses in &lt;a href="https://github.com/rust-lang/rust/raw/master/src/tools/rustbook/Cargo.toml"&gt;this file&lt;/a&gt;. To get it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo install mdbook --locked --version &amp;lt;version_num&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The book also uses two mdbook plugins which are part of this repository. If you do not install them, you will see warnings when building and the output will not look right, but you &lt;em&gt;will&lt;/em&gt; still be able to build the book. To use the plugins, you should run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo install --locked --path packages/mdbook-trpl --force
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;To build the book, type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ mdbook build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The output will be in the &lt;code&gt;book&lt;/code&gt; subdirectory. To check it out, open it in your web browser.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Firefox:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ firefox book/index.html                       # Linux
$ open -a "Firefox" book/index.html             # OS X
$ Start-Process "firefox.exe" .\book\index.html # Windows (PowerShell)
$ start firefox.exe .\book\index.html           # Windows (Cmd)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Chrome:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ google-chrome book/index.html                 # Linux
$ open -a "Google Chrome" book/index.html       # OS X
$ Start-Process "chrome.exe" .\book\index.html  # Windows (PowerShell)
$ start chrome.exe .\book\index.html            # Windows (Cmd)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cd packages/trpl
$ mdbook test --library-path packages/trpl/target/debug/deps
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We'd love your help! Please see &lt;a href="https://github.com/rust-lang/book/raw/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; to learn about the kinds of contributions we're looking for.&lt;/p&gt; 
&lt;p&gt;Because the book is &lt;a href="https://nostarch.com/rust-programming-language-2nd-edition"&gt;printed&lt;/a&gt;, and because we want to keep the online version of the book close to the print version when possible, it may take longer than you're used to for us to address your issue or pull request.&lt;/p&gt; 
&lt;p&gt;So far, we've been doing a larger revision to coincide with &lt;a href="https://doc.rust-lang.org/edition-guide/"&gt;Rust Editions&lt;/a&gt;. Between those larger revisions, we will only be correcting errors. If your issue or pull request isn't strictly fixing an error, it might sit until the next time that we're working on a large revision: expect on the order of months or years. Thank you for your patience!&lt;/p&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;p&gt;We'd love help translating the book! See the &lt;a href="https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations"&gt;Translations&lt;/a&gt; label to join in efforts that are currently in progress. Open a new issue to start working on a new language! We're waiting on &lt;a href="https://github.com/rust-lang/mdBook/issues/5"&gt;mdbook support&lt;/a&gt; for multiple languages before we merge any in, but feel free to start!&lt;/p&gt; 
&lt;h2&gt;Spellchecking&lt;/h2&gt; 
&lt;p&gt;To scan source files for spelling errors, you can use the &lt;code&gt;spellcheck.sh&lt;/code&gt; script available in the &lt;code&gt;ci&lt;/code&gt; directory. It needs a dictionary of valid words, which is provided in &lt;code&gt;ci/dictionary.txt&lt;/code&gt;. If the script produces a false positive (say, you used the word &lt;code&gt;BTreeMap&lt;/code&gt; which the script considers invalid), you need to add this word to &lt;code&gt;ci/dictionary.txt&lt;/code&gt; (keep the sorted order for consistency).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>carthage-software/mago</title>
      <link>https://github.com/carthage-software/mago</link>
      <description>&lt;p&gt;Mago is a toolchain for PHP that aims to provide a set of tools to help developers write better code.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/carthage-software/mago/main/docs/public/assets/banner.svg?sanitize=true" alt="Mago Banner" width="600" /&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;strong&gt;An extremely fast PHP linter, formatter, and static analyzer, written in Rust.&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/carthage-software/mago/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/carthage-software/mago/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/carthage-software/mago/actions/workflows/cd.yml"&gt;&lt;img src="https://github.com/carthage-software/mago/actions/workflows/cd.yml/badge.svg?sanitize=true" alt="CD Status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/mago"&gt;&lt;img src="https://img.shields.io/crates/v/mago.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://packagist.org/packages/carthage-software/mago"&gt;&lt;img src="https://poser.pugx.org/carthage-software/mago/v" alt="Latest Stable Version for PHP" /&gt;&lt;/a&gt; &lt;a href="https://packagist.org/packages/carthage-software/mago"&gt;&lt;img src="https://poser.pugx.org/carthage-software/mago/v/unstable" alt="Latest Unstable Version for PHP" /&gt;&lt;/a&gt; &lt;a href="https://packagist.org/packages/carthage-software/mago"&gt;&lt;img src="http://poser.pugx.org/carthage-software/mago/downloads" alt="Total Composer Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/carthage-software/mago/raw/main/LICENSE-MIT"&gt;&lt;img src="https://img.shields.io/crates/l/mago.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;Mago&lt;/strong&gt; is a comprehensive toolchain for PHP that helps developers write better code. Inspired by the Rust ecosystem, Mago brings speed, reliability, and an exceptional developer experience to PHP projects of all sizes.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/#features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/#our-sponsors"&gt;Our Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/#inspiration--acknowledgements"&gt;Inspiration &amp;amp; Acknowledgements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The most common way to install Mago on macOS and Linux is by using our shell script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf https://carthage.software/mago.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For all other installation methods, including Homebrew, Composer, and Cargo, please refer to our official &lt;strong&gt;&lt;a href="https://mago.carthage.software/guide/installation"&gt;Installation Guide&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;To get started with Mago and learn how to configure your project, please visit our &lt;strong&gt;&lt;a href="https://mago.carthage.software/guide/getting-started"&gt;Getting Started Guide&lt;/a&gt;&lt;/strong&gt; in the official documentation.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚ö°Ô∏è Extremely Fast: Built in Rust for maximum performance.&lt;/li&gt; 
 &lt;li&gt;üîç Lint: Identify issues in your codebase with customizable rules.&lt;/li&gt; 
 &lt;li&gt;üî¨ Static Analysis: Perform deep analysis of your codebase to catch potential type errors and bugs.&lt;/li&gt; 
 &lt;li&gt;üõ†Ô∏è Automated Fixes: Apply fixes for many lint issues automatically.&lt;/li&gt; 
 &lt;li&gt;üìú Formatting: Automatically format your code to adhere to best practices and style guides.&lt;/li&gt; 
 &lt;li&gt;üß† Semantic Checks: Ensure code correctness with robust semantic analysis.&lt;/li&gt; 
 &lt;li&gt;üå≥ AST Visualization: Explore your code‚Äôs structure with Abstract Syntax Tree (AST) parsing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- START-SPONSORS --&gt; 
&lt;h2&gt;Our Sponsors&lt;/h2&gt; 
&lt;p align="center"&gt;&lt;a href="https://github.com/jasonrm" title="Jason R. McNeil"&gt;&lt;kbd&gt;&lt;img src="https://avatars.githubusercontent.com/u/39949?u=69c0e4fb08c439250978d41dbc3371d2f0609b98&amp;amp;v=4&amp;amp;s=160" width="80" height="80" alt="Jason R. McNeil" /&gt;&lt;/kbd&gt;&lt;/a&gt;&lt;a href="https://github.com/vvvinceocam" title="Vincent Berset"&gt;&lt;kbd&gt;&lt;img src="https://avatars.githubusercontent.com/u/5173120?u=95efc76cd8fc804536dc6dd25781a95b650bf902&amp;amp;v=4&amp;amp;s=160" width="80" height="80" alt="Vincent Berset" /&gt;&lt;/kbd&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;&lt;a href="https://github.com/TicketSwap" title="TicketSwap"&gt;&lt;kbd&gt;&lt;img src="https://avatars.githubusercontent.com/u/5766233?v=4&amp;amp;s=120" width="60" height="60" alt="TicketSwap" /&gt;&lt;/kbd&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/SPONSORS.md"&gt;See all sponsors&lt;/a&gt;&lt;/p&gt; 
&lt;!-- END-SPONSORS --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Mago is a community-driven project, and we welcome contributions! Whether you're reporting bugs, suggesting features, writing documentation, or submitting code, your help is valued.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;See our &lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; to get started.&lt;/li&gt; 
 &lt;li&gt;Join the discussion on &lt;a href="https://discord.gg/mwyyjr27eu"&gt;Discord&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Inspiration &amp;amp; Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Mago stands on the shoulders of giants. Our design and functionality are heavily inspired by pioneering tools in both the Rust and PHP ecosystems.&lt;/p&gt; 
&lt;h3&gt;Inspirations:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy"&gt;Clippy&lt;/a&gt;: For its comprehensive linting approach.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oxc-project/oxc/"&gt;OXC&lt;/a&gt;: A major inspiration for building a high-performance toolchain in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/slackhq/hakana/"&gt;Hakana&lt;/a&gt;: For its deep static analysis capabilities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Acknowledgements:&lt;/h3&gt; 
&lt;p&gt;We deeply respect the foundational work of tools like &lt;a href="https://github.com/PHP-CS-Fixer/PHP-CS-Fixer"&gt;PHP-CS-Fixer&lt;/a&gt;, &lt;a href="https://github.com/vimeo/psalm"&gt;Psalm&lt;/a&gt;, &lt;a href="https://github.com/phpstan/phpstan"&gt;PHPStan&lt;/a&gt;, and &lt;a href="https://github.com/PHPCSStandards/PHP_CodeSniffer"&gt;PHP_CodeSniffer&lt;/a&gt;. While Mago aims to offer a unified and faster alternative, these tools paved the way for modern PHP development.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Mago is dual-licensed under your choice of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MIT License (&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/carthage-software/mago/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/cargo</title>
      <link>https://github.com/rust-lang/cargo</link>
      <description>&lt;p&gt;The Rust package manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cargo&lt;/h1&gt; 
&lt;p&gt;Cargo downloads your Rust project‚Äôs dependencies and compiles your project.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To start using Cargo&lt;/strong&gt;, learn more at &lt;a href="https://doc.rust-lang.org/cargo/"&gt;The Cargo Book&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To start developing Cargo itself&lt;/strong&gt;, read the &lt;a href="https://rust-lang.github.io/cargo/contrib/"&gt;Cargo Contributor Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The Cargo binary distributed through with Rust is maintained by the Cargo team for use by the wider ecosystem. For all other uses of this crate (as a binary or library) this is maintained by the Cargo team, primarily for use by Cargo and not intended for external use (except as a transitive dependency). This crate may make major changes to its APIs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Code Status&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/rust-lang/cargo/actions/workflows/main.yml"&gt;&lt;img src="https://github.com/rust-lang/cargo/actions/workflows/main.yml/badge.svg?branch=auto-cargo" alt="CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Code documentation: &lt;a href="https://doc.rust-lang.org/nightly/nightly-rustc/cargo/"&gt;https://doc.rust-lang.org/nightly/nightly-rustc/cargo/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Compiling from Source&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;Cargo requires the following tools and packages to build:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;rustc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;A C compiler &lt;a href="https://github.com/rust-lang/cc-rs#compile-time-requirements"&gt;for your platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;git&lt;/code&gt; (to clone this repository)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Other requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The following are optional based on your platform and needs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;pkg-config&lt;/code&gt; ‚Äî This is used to help locate system packages, such as &lt;code&gt;libssl&lt;/code&gt; headers/libraries. This may not be required in all cases, such as using vendored OpenSSL, or on Windows.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OpenSSL ‚Äî Only needed on Unix-like systems and only if the &lt;code&gt;vendored-openssl&lt;/code&gt; Cargo feature is not used.&lt;/p&gt; &lt;p&gt;This requires the development headers, which can be obtained from the &lt;code&gt;libssl-dev&lt;/code&gt; package on Ubuntu or &lt;code&gt;openssl-devel&lt;/code&gt; with apk or yum or the &lt;code&gt;openssl&lt;/code&gt; package from Homebrew on macOS.&lt;/p&gt; &lt;p&gt;If using the &lt;code&gt;vendored-openssl&lt;/code&gt; Cargo feature, then a static copy of OpenSSL will be built from source instead of using the system OpenSSL. This may require additional tools such as &lt;code&gt;perl&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;On macOS, common installation directories from Homebrew, MacPorts, or pkgsrc will be checked. Otherwise it will fall back to &lt;code&gt;pkg-config&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;On Windows, the system-provided Schannel will be used instead.&lt;/p&gt; &lt;p&gt;LibreSSL is also supported.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Optional system libraries:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The build will automatically use vendored versions of the following libraries. However, if they are provided by the system and can be found with &lt;code&gt;pkg-config&lt;/code&gt;, then the system libraries will be used instead:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://curl.se/libcurl/"&gt;&lt;code&gt;libcurl&lt;/code&gt;&lt;/a&gt; ‚Äî Used for network transfers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://libgit2.org/"&gt;&lt;code&gt;libgit2&lt;/code&gt;&lt;/a&gt; ‚Äî Used for fetching git dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.libssh2.org/"&gt;&lt;code&gt;libssh2&lt;/code&gt;&lt;/a&gt; ‚Äî Used for SSH access to git repositories.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://zlib.net/"&gt;&lt;code&gt;libz&lt;/code&gt;&lt;/a&gt; (AKA zlib) ‚Äî Used by the above C libraries for data compression. (Rust code uses &lt;a href="https://github.com/trifectatechfoundation/zlib-rs"&gt;&lt;code&gt;zlib-rs&lt;/code&gt;&lt;/a&gt; instead.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It is recommended to use the vendored versions as they are the versions that are tested to work with Cargo.&lt;/p&gt; 
&lt;h3&gt;Compiling&lt;/h3&gt; 
&lt;p&gt;First, you'll want to check out this repository&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/rust-lang/cargo.git
cd cargo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;cargo&lt;/code&gt; already installed, you can simply run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Adding new subcommands to Cargo&lt;/h2&gt; 
&lt;p&gt;Cargo is designed to be extensible with new subcommands without having to modify Cargo itself. See &lt;a href="https://github.com/rust-lang/cargo/wiki/Third-party-cargo-subcommands"&gt;the Wiki page&lt;/a&gt; for more details and a list of known community-developed subcommands.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;Cargo releases coincide with Rust releases. High level release notes are available as part of &lt;a href="https://github.com/rust-lang/rust/raw/master/RELEASES.md"&gt;Rust's release notes&lt;/a&gt;. Detailed release notes are available in the &lt;a href="https://doc.rust-lang.org/nightly/cargo/CHANGELOG.html"&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Reporting issues&lt;/h2&gt; 
&lt;p&gt;Found a bug? We'd love to know about it!&lt;/p&gt; 
&lt;p&gt;Please report all issues on the GitHub &lt;a href="https://github.com/rust-lang/cargo/issues"&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;strong&gt;&lt;a href="https://rust-lang.github.io/cargo/contrib/"&gt;Cargo Contributor Guide&lt;/a&gt;&lt;/strong&gt; for a complete introduction to contributing to Cargo.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Cargo is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/cargo/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/rust-lang/cargo/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Third party software&lt;/h3&gt; 
&lt;p&gt;This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit (&lt;a href="https://www.openssl.org/"&gt;https://www.openssl.org/&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;In binary form, this product includes software that is licensed under the terms of the GNU General Public License, version 2, with a linking exception, which can be obtained from the &lt;a href="https://github.com/libgit2/libgit2"&gt;upstream repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/cargo/master/LICENSE-THIRD-PARTY"&gt;LICENSE-THIRD-PARTY&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fish-shell/fish-shell</title>
      <link>https://github.com/fish-shell/fish-shell</link>
      <description>&lt;p&gt;The user-friendly command line shell.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. |Cirrus CI| image:: &lt;a href="https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master"&gt;https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master&lt;/a&gt; :target: &lt;a href="https://cirrus-ci.com/github/fish-shell/fish-shell"&gt;https://cirrus-ci.com/github/fish-shell/fish-shell&lt;/a&gt; :alt: Cirrus CI Build Status&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;fish &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ - the friendly interactive shell |Build Status| |Cirrus CI|&lt;/h1&gt; 
&lt;p&gt;fish is a smart and user-friendly command line shell for macOS, Linux, and the rest of the family. fish includes features like syntax highlighting, autosuggest-as-you-type, and fancy tab completions that just work, with no configuration required.&lt;/p&gt; 
&lt;p&gt;For downloads, screenshots and more, go to &lt;a href="https://fishshell.com/"&gt;https://fishshell.com/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;fish generally works like other shells, like bash or zsh. A few important differences can be found at &lt;a href="https://fishshell.com/docs/current/tutorial.html"&gt;https://fishshell.com/docs/current/tutorial.html&lt;/a&gt; by searching for the magic phrase ‚Äúunlike other shells‚Äù.&lt;/p&gt; 
&lt;p&gt;Detailed user documentation is available by running &lt;code&gt;help&lt;/code&gt; within fish, and also at &lt;a href="https://fishshell.com/docs/current/index.html"&gt;https://fishshell.com/docs/current/index.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting fish&lt;/h2&gt; 
&lt;p&gt;macOS&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
fish can be installed:

-  using `Homebrew &amp;lt;http://brew.sh/&amp;gt;`__: ``brew install fish``
-  using `MacPorts &amp;lt;https://www.macports.org/&amp;gt;`__:
   ``sudo port install fish``
-  using the `installer from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__
-  as a `standalone app from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__

Note: The minimum supported macOS version is 10.10 "Yosemite".

Packages for Linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Packages for Debian, Fedora, openSUSE, and Red Hat Enterprise Linux/CentOS are available from the &lt;code&gt;openSUSE Build Service &amp;lt;https://software.opensuse.org/download.html?project=shells%3Afish&amp;amp;package=fish&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;p&gt;Packages for Ubuntu are available from the &lt;code&gt;fish PPA &amp;lt;https://launchpad.net/~fish-shell/+archive/ubuntu/release-4&amp;gt;&lt;/code&gt;__, and can be installed using the following commands:&lt;/p&gt; 
&lt;p&gt;::&lt;/p&gt; 
&lt;p&gt;sudo apt-add-repository ppa:fish-shell/release-4 sudo apt update sudo apt install fish&lt;/p&gt; 
&lt;p&gt;Instructions for other distributions may be found at &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;p&gt;Windows&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
-  On Windows 10/11, fish can be installed under the WSL Windows Subsystem
   for Linux with the instructions for the appropriate distribution
   listed above under ‚ÄúPackages for Linux‚Äù, or from source with the
   instructions below.
-  Fish can also be installed on all versions of Windows using
   `Cygwin &amp;lt;https://cygwin.com/&amp;gt;`__ or `MSYS2 &amp;lt;https://github.com/Berrysoft/fish-msys2&amp;gt;`__.

Building from source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If packages are not available for your platform, GPG-signed tarballs are available from &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ and &lt;code&gt;fish-shell on GitHub &amp;lt;https://github.com/fish-shell/fish-shell/releases&amp;gt;&lt;/code&gt;__. See the &lt;code&gt;Building &amp;lt;#building&amp;gt;&lt;/code&gt;_ section for instructions.&lt;/p&gt; 
&lt;h2&gt;Running fish&lt;/h2&gt; 
&lt;p&gt;Once installed, run &lt;code&gt;fish&lt;/code&gt; from your current shell to try fish out!&lt;/p&gt; 
&lt;p&gt;Dependencies&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
Running fish requires:

-  some common \*nix system utilities (currently ``mktemp``), in
   addition to the basic POSIX utilities (``cat``, ``cut``, ``dirname``,
   ``file``, ``ls``, ``mkdir``, ``mkfifo``, ``rm``, ``sh``, ``sort``, ``tee``, ``tr``,
   ``uname`` and ``sed`` at least, but the full coreutils plus ``find`` and
   ``awk`` is preferred)
-  The gettext library, if compiled with
   translation support

The following optional features also have specific requirements:

-  builtin commands that have the ``--help`` option or print usage
   messages require ``nroff`` or ``mandoc`` for
   display
-  automated completion generation from manual pages requires Python 3.5+
-  the ``fish_config`` web configuration tool requires Python 3.5+ and a web browser
-  system clipboard integration (with the default Ctrl-V and Ctrl-X
   bindings) require either the ``xsel``, ``xclip``,
   ``wl-copy``/``wl-paste`` or ``pbcopy``/``pbpaste`` utilities
-  full completions for ``yarn`` and ``npm`` require the
   ``all-the-package-names`` NPM module
-  ``colorls`` is used, if installed, to add color when running ``ls`` on platforms
   that do not have color support (such as OpenBSD)

Building
--------

.. _dependencies-1:

Dependencies
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compiling fish requires:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Rust (version 1.70 or later)&lt;/li&gt; 
 &lt;li&gt;CMake (version 3.15 or later)&lt;/li&gt; 
 &lt;li&gt;a C compiler (for system feature detection and the test helper binary)&lt;/li&gt; 
 &lt;li&gt;PCRE2 (headers and libraries) - optional, this will be downloaded if missing&lt;/li&gt; 
 &lt;li&gt;gettext (headers and libraries) - optional, for translation support&lt;/li&gt; 
 &lt;li&gt;an Internet connection, as other dependencies will be downloaded automatically&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sphinx is also optionally required to build the documentation from a cloned git repository.&lt;/p&gt; 
&lt;p&gt;Additionally, running the full test suite requires Python 3.5+, tmux, and the pexpect package.&lt;/p&gt; 
&lt;p&gt;Building from source with CMake&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
Rather than building from source, consider using a packaged build for your platform. Using the
steps below makes fish difficult to uninstall or upgrade. Release packages are available from the
links above, and up-to-date `development builds of fish are available for many platforms
&amp;lt;https://github.com/fish-shell/fish-shell/wiki/Development-builds&amp;gt;`__

To install into ``/usr/local``, run:

.. code:: bash

   mkdir build; cd build
   cmake ..
   cmake --build .
   sudo cmake --install .

The install directory can be changed using the
``-DCMAKE_INSTALL_PREFIX`` parameter for ``cmake``.

CMake Build options
~~~~~~~~~~~~~~~~~~~

In addition to the normal CMake build options (like ``CMAKE_INSTALL_PREFIX``), fish's CMake build has some other options available to customize it.

- Rust_COMPILER=path - the path to rustc. If not set, cmake will check $PATH and ~/.cargo/bin
- Rust_CARGO=path - the path to cargo. If not set, cmake will check $PATH and ~/.cargo/bin
- Rust_CARGO_TARGET=target - the target to pass to cargo. Set this for cross-compilation.
- BUILD_DOCS=ON|OFF - whether to build the documentation. This is automatically set to OFF when Sphinx isn't installed.
- INSTALL_DOCS=ON|OFF - whether to install the docs. This is automatically set to on when BUILD_DOCS is or prebuilt documentation is available (like when building in-tree from a tarball).
- FISH_USE_SYSTEM_PCRE2=ON|OFF - whether to use an installed pcre2. This is normally autodetected.
- MAC_CODESIGN_ID=String|OFF - the codesign ID to use on Mac, or "OFF" to disable codesigning.
- WITH_GETTEXT=ON|OFF - whether to build with gettext support for translations.
- extra_functionsdir, extra_completionsdir and extra_confdir - to compile in an additional directory to be searched for functions, completions and configuration snippets

Building fish with embedded data (experimental)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also build fish with the data files embedded.&lt;/p&gt; 
&lt;p&gt;This will include all the datafiles like the included functions or web configuration tool in the main &lt;code&gt;fish&lt;/code&gt; binary.&lt;/p&gt; 
&lt;p&gt;Fish will then read these right from its own binary, and print them out when needed. Some files, like the webconfig tool and the manpage completion generator, will be extracted to a temporary directory on-demand. You can list the files with &lt;code&gt;status list-files&lt;/code&gt; and print one with &lt;code&gt;status get-file path/to/file&lt;/code&gt; (e.g. &lt;code&gt;status get-file functions/fish_prompt.fish&lt;/code&gt; to get the default prompt).&lt;/p&gt; 
&lt;p&gt;To install fish with embedded files, just use &lt;code&gt;cargo&lt;/code&gt;, like::&lt;/p&gt; 
&lt;p&gt;cargo install --path /path/to/fish # if you have a git clone cargo install --git &lt;a href="https://github.com/fish-shell/fish-shell"&gt;https://github.com/fish-shell/fish-shell&lt;/a&gt; --tag 4.0.0 # to build from git with a specific version cargo install --git &lt;a href="https://github.com/fish-shell/fish-shell"&gt;https://github.com/fish-shell/fish-shell&lt;/a&gt; # to build the current development snapshot without cloning&lt;/p&gt; 
&lt;p&gt;This will place the binaries in &lt;code&gt;~/.cargo/bin/&lt;/code&gt;, but you can place them wherever you want.&lt;/p&gt; 
&lt;p&gt;This build won't have the HTML docs (&lt;code&gt;help&lt;/code&gt; will open the online version) or translations.&lt;/p&gt; 
&lt;p&gt;It will try to build the man pages with sphinx-build. If that is not available and you would like to include man pages, you need to install it and retrigger the build script, e.g. by setting FISH_BUILD_DOCS=1::&lt;/p&gt; 
&lt;p&gt;FISH_BUILD_DOCS=1 cargo install --path .&lt;/p&gt; 
&lt;p&gt;Setting it to "0" disables the inclusion of man pages.&lt;/p&gt; 
&lt;p&gt;You can also link this build statically (but not against glibc) and move it to other computers.&lt;/p&gt; 
&lt;h2&gt;Contributing Changes to the Code&lt;/h2&gt; 
&lt;p&gt;See the &lt;code&gt;Guide for Developers &amp;lt;CONTRIBUTING.rst&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;h2&gt;Contact Us&lt;/h2&gt; 
&lt;p&gt;Questions, comments, rants and raves can be posted to the official fish mailing list at &lt;a href="https://lists.sourceforge.net/lists/listinfo/fish-users"&gt;https://lists.sourceforge.net/lists/listinfo/fish-users&lt;/a&gt; or join us on our &lt;code&gt;matrix channel &amp;lt;https://matrix.to/#/#fish-shell:matrix.org&amp;gt;&lt;/code&gt;&lt;strong&gt;. Or use the &lt;code&gt;fish tag on Unix &amp;amp; Linux Stackexchange &amp;lt;https://unix.stackexchange.com/questions/tagged/fish&amp;gt;&lt;/code&gt;&lt;/strong&gt;. There is also a fish tag on Stackoverflow, but it is typically a poor fit.&lt;/p&gt; 
&lt;p&gt;Found a bug? Have an awesome idea? Please &lt;code&gt;open an issue &amp;lt;https://github.com/fish-shell/fish-shell/issues/new&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;p&gt;.. |Build Status| image:: &lt;a href="https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg"&gt;https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg&lt;/a&gt; :target: &lt;a href="https://github.com/fish-shell/fish-shell/actions"&gt;https://github.com/fish-shell/fish-shell/actions&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emilk/egui</title>
      <link>https://github.com/emilk/egui</link>
      <description>&lt;p&gt;egui: an easy-to-use immediate mode GUI in Rust that runs on both web and native&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üñå egui: an easy-to-use GUI in pure Rust&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/emilk/egui"&gt;&lt;img alt="github" src="https://img.shields.io/badge/github-emilk/egui-8da0cb?logo=github" height="20" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/egui"&gt;&lt;img src="https://img.shields.io/crates/v/egui.svg?sanitize=true" alt="Latest version" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/egui"&gt;&lt;img src="https://docs.rs/egui/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rust-secure-code/safety-dance/"&gt;&lt;img src="https://img.shields.io/badge/unsafe-forbidden-success.svg?sanitize=true" alt="unsafe forbidden" /&gt;&lt;/a&gt; &lt;a href="https://github.com/emilk/egui/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/emilk/egui/workflows/Rust/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/emilk/egui/raw/main/LICENSE-MIT"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT" /&gt;&lt;/a&gt; &lt;a href="https://github.com/emilk/egui/raw/main/LICENSE-APACHE"&gt;&lt;img src="https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true" alt="Apache" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/JFcEma9bJq"&gt;&lt;img src="https://img.shields.io/discord/900275882684477440?label=egui%20discord" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.rerun.io/"&gt;&lt;img src="https://github.com/user-attachments/assets/78e79463-4357-461b-bbd1-31aa5ef5e1a2" width="250" /&gt;&lt;/a&gt; 
 &lt;p&gt;egui development is sponsored by &lt;a href="https://www.rerun.io/"&gt;Rerun&lt;/a&gt;, a startup building&lt;br /&gt; an SDK for visualizing streams of multimodal data.&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;üëâ &lt;a href="https://www.egui.rs/#demo"&gt;Click to run the web demo&lt;/a&gt; üëà&lt;/p&gt; 
&lt;p&gt;egui (pronounced "e-gooey") is a simple, fast, and highly portable immediate mode GUI library for Rust. egui runs on the web, natively, and &lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#integrations"&gt;in your favorite game engine&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;egui aims to be the easiest-to-use Rust GUI library, and the simplest way to make a web app in Rust.&lt;/p&gt; 
&lt;p&gt;egui can be used anywhere you can draw textured triangles, which means you can easily integrate it into your game engine of choice.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; is the official egui framework, which supports writing apps for Web, Linux, Mac, Windows, and Android.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;ui.heading("My egui Application");
ui.horizontal(|ui| {
    ui.label("Your name: ");
    ui.text_edit_singleline(&amp;amp;mut name);
});
ui.add(egui::Slider::new(&amp;amp;mut age, 0..=120).text("age"));
if ui.button("Increment").clicked() {
    age += 1;
}
ui.label(format!("Hello '{name}', age {age}"));
ui.image(egui::include_image!("ferris.png"));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img alt="Dark mode" src="https://github.com/user-attachments/assets/3b446d29-99d8-4c82-86bb-4d8ef0516017" /&gt; &amp;nbsp; &amp;nbsp; &lt;img alt="Light mode" src="https://github.com/user-attachments/assets/a5e7da93-89a8-4ba0-86b8-0fa2228a4f62" height="278" /&gt;&lt;/p&gt; 
&lt;h2&gt;Sections:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#example"&gt;Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#quick-start"&gt;Quick start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#demo"&gt;Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#goals"&gt;Goals&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#state"&gt;State / features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#dependencies"&gt;Dependencies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#who-is-egui-for"&gt;Who is egui for?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#integrations"&gt;Integrations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#why-immediate-mode"&gt;Why immediate mode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#other"&gt;Other&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(&lt;a href="https://github.com/Re-Ch-Love/egui-doc-cn/raw/main/README_zh-hans.md"&gt;egui ÁöÑ‰∏≠ÊñáÁøªËØëÊñáÊ°£ / chinese translation&lt;/a&gt;)&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;There are simple examples in &lt;a href="https://github.com/emilk/egui/raw/main/examples/"&gt;the &lt;code&gt;examples/&lt;/code&gt; folder&lt;/a&gt;. If you want to write a web app, then go to &lt;a href="https://github.com/emilk/eframe_template/"&gt;https://github.com/emilk/eframe_template/&lt;/a&gt; and follow the instructions. The official docs are at &lt;a href="https://docs.rs/egui"&gt;https://docs.rs/egui&lt;/a&gt;. For inspiration and more examples, check out the &lt;a href="https://www.egui.rs/#demo"&gt;the egui web demo&lt;/a&gt; and follow the links in it to its source code.&lt;/p&gt; 
&lt;p&gt;If you want to integrate egui into an existing engine, go to the &lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#integrations"&gt;Integrations&lt;/a&gt; section.&lt;/p&gt; 
&lt;p&gt;If you have questions, use &lt;a href="https://github.com/emilk/egui/discussions"&gt;GitHub Discussions&lt;/a&gt;. There is also &lt;a href="https://discord.gg/JFcEma9bJq"&gt;an egui discord server&lt;/a&gt;. If you want to contribute to egui, please read the &lt;a href="https://github.com/emilk/egui/raw/main/CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.egui.rs/#demo"&gt;Click to run egui web demo&lt;/a&gt; (works in any browser with Wasm and WebGL support). Uses &lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To test the demo app locally, run &lt;code&gt;cargo run --release -p egui_demo_app&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The native backend is &lt;a href="https://github.com/emilk/egui/tree/main/crates/egui_glow"&gt;&lt;code&gt;egui_glow&lt;/code&gt;&lt;/a&gt; (using &lt;a href="https://crates.io/crates/glow"&gt;&lt;code&gt;glow&lt;/code&gt;&lt;/a&gt;) and should work out-of-the-box on Mac and Windows, but on Linux you need to first run:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;On Fedora Rawhide you need to run:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;dnf install clang clang-devel clang-tools-extra libxkbcommon-devel pkg-config openssl-devel libxcb-devel gtk3-devel atk fontconfig-devel&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is just for the demo app - egui itself is completely platform agnostic!&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The easiest to use GUI library&lt;/li&gt; 
 &lt;li&gt;Responsive: target 60 Hz in debug build&lt;/li&gt; 
 &lt;li&gt;Friendly: difficult to make mistakes, and shouldn't panic&lt;/li&gt; 
 &lt;li&gt;Portable: the same code works on the web and as a native app&lt;/li&gt; 
 &lt;li&gt;Easy to integrate into any environment&lt;/li&gt; 
 &lt;li&gt;A simple 2D graphics API for custom painting (&lt;a href="https://docs.rs/epaint"&gt;&lt;code&gt;epaint&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;Pure immediate mode: no callbacks&lt;/li&gt; 
 &lt;li&gt;Extensible: &lt;a href="https://github.com/emilk/egui/raw/main/crates/egui_demo_lib/src/demo/toggle_switch.rs"&gt;easy to write your own widgets for egui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Modular: You should be able to use small parts of egui and combine them in new ways&lt;/li&gt; 
 &lt;li&gt;Safe: there is no &lt;code&gt;unsafe&lt;/code&gt; code in egui&lt;/li&gt; 
 &lt;li&gt;Minimal dependencies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;egui is &lt;em&gt;not&lt;/em&gt; a framework. egui is a library you call into, not an environment you program for.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: egui does not claim to have reached all these goals yet! egui is still work in progress.&lt;/p&gt; 
&lt;h3&gt;Non-goals&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Become the most powerful GUI library&lt;/li&gt; 
 &lt;li&gt;Native looking interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;State&lt;/h2&gt; 
&lt;p&gt;egui is in active development. It works well for what it does, but it lacks many features and the interfaces are still in flux. New releases will have breaking changes.&lt;/p&gt; 
&lt;p&gt;Still, egui can be used to create professional looking applications, like &lt;a href="https://app.rerun.io/"&gt;the Rerun Viewer&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Widgets: label, text button, hyperlink, checkbox, radio button, slider, draggable value, text editing, color picker, spinner&lt;/li&gt; 
 &lt;li&gt;Images&lt;/li&gt; 
 &lt;li&gt;Layouts: horizontal, vertical, columns, automatic wrapping&lt;/li&gt; 
 &lt;li&gt;Text editing: multiline, copy/paste, undo, emoji supports&lt;/li&gt; 
 &lt;li&gt;Windows: move, resize, name, minimize and close. Automatically sized and positioned.&lt;/li&gt; 
 &lt;li&gt;Regions: resizing, vertical scrolling, collapsing headers (sections), panels&lt;/li&gt; 
 &lt;li&gt;Rendering: Anti-aliased rendering of lines, circles, text and convex polygons.&lt;/li&gt; 
 &lt;li&gt;Tooltips on hover&lt;/li&gt; 
 &lt;li&gt;Accessibility via &lt;a href="https://accesskit.dev/"&gt;AccessKit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Label text selection&lt;/li&gt; 
 &lt;li&gt;And more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out the &lt;a href="https://github.com/emilk/egui/wiki/3rd-party-egui-crates"&gt;3rd party egui crates wiki&lt;/a&gt; for even more widgets and features, maintained by the community.&lt;/p&gt; 
&lt;img src="https://github.com/user-attachments/assets/13e73b76-e456-42bd-8ec9-220802834268" width="50%" /&gt; 
&lt;p&gt;Light Theme:&lt;/p&gt; 
&lt;img src="https://github.com/user-attachments/assets/2e38972c-a444-4894-b32f-47a2719cf369" width="50%" /&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; has a minimal set of default dependencies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/ab_glyph"&gt;&lt;code&gt;ab_glyph&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/ahash"&gt;&lt;code&gt;ahash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/bitflags"&gt;&lt;code&gt;bitflags&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/nohash-hasher"&gt;&lt;code&gt;nohash-hasher&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/parking_lot"&gt;&lt;code&gt;parking_lot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Heavier dependencies are kept out of &lt;code&gt;egui&lt;/code&gt;, even as opt-in. All code in &lt;code&gt;egui&lt;/code&gt; is Wasm-friendly (even outside a browser).&lt;/p&gt; 
&lt;p&gt;To load images into &lt;code&gt;egui&lt;/code&gt; you can use the official &lt;a href="https://github.com/emilk/egui/tree/main/crates/egui_extras"&gt;&lt;code&gt;egui_extras&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; on the other hand has a lot of dependencies, including &lt;a href="https://crates.io/crates/winit"&gt;&lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://crates.io/crates/image"&gt;&lt;code&gt;image&lt;/code&gt;&lt;/a&gt;, graphics crates, clipboard crates, etc,&lt;/p&gt; 
&lt;h2&gt;Who is egui for?&lt;/h2&gt; 
&lt;p&gt;egui aims to be the best choice when you want a simple way to create a GUI, or you want to add a GUI to a game engine.&lt;/p&gt; 
&lt;p&gt;If you are not using Rust, egui is not for you. If you want a GUI that looks native, egui is not for you. If you want something that doesn't break when you upgrade it, egui isn't for you (yet).&lt;/p&gt; 
&lt;p&gt;But if you are writing something interactive in Rust that needs a simple GUI, egui may be for you.&lt;/p&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;egui is built to be easy to integrate into any existing game engine or platform you are working on. egui itself doesn't know or care on what OS it is running or how to render things to the screen - that is the job of the egui integration.&lt;/p&gt; 
&lt;p&gt;An integration needs to do the following each frame:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Input&lt;/strong&gt;: Gather input (mouse, touches, keyboard, screen size, etc) and give it to egui&lt;/li&gt; 
 &lt;li&gt;Call into the application GUI code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: Handle egui output (cursor changes, paste, texture allocations, ‚Ä¶)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Painting&lt;/strong&gt;: Render the triangle mesh egui produces (see &lt;a href="https://github.com/emilk/egui/raw/main/crates/egui_glow/src/painter.rs"&gt;OpenGL example&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Official integrations&lt;/h3&gt; 
&lt;p&gt;These are the official egui integrations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; for compiling the same app to web/wasm and desktop/native. Uses &lt;code&gt;egui-winit&lt;/code&gt; and &lt;code&gt;egui_glow&lt;/code&gt; or &lt;code&gt;egui-wgpu&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/egui_glow"&gt;&lt;code&gt;egui_glow&lt;/code&gt;&lt;/a&gt; for rendering egui with &lt;a href="https://github.com/grovesNL/glow"&gt;glow&lt;/a&gt; on native and web, and for making native apps&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/egui-wgpu"&gt;&lt;code&gt;egui-wgpu&lt;/code&gt;&lt;/a&gt; for &lt;a href="https://crates.io/crates/wgpu"&gt;wgpu&lt;/a&gt; (WebGPU API)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/egui-winit"&gt;&lt;code&gt;egui-winit&lt;/code&gt;&lt;/a&gt; for integrating with &lt;a href="https://github.com/rust-windowing/winit"&gt;winit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3rd party integrations&lt;/h3&gt; 
&lt;p&gt;Check the wiki to find &lt;a href="https://github.com/emilk/egui/wiki/3rd-party-integrations"&gt;3rd party integrations&lt;/a&gt; and &lt;a href="https://github.com/emilk/egui/wiki/3rd-party-egui-crates"&gt;egui crates&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Writing your own egui integration&lt;/h3&gt; 
&lt;p&gt;Missing an integration for the thing you're working on? Create one, it's easy! See &lt;a href="https://docs.rs/egui/latest/egui/#integrating-with-egui"&gt;https://docs.rs/egui/latest/egui/#integrating-with-egui&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Why immediate mode&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; is an &lt;a href="https://en.wikipedia.org/wiki/Immediate_mode_GUI"&gt;immediate mode GUI library&lt;/a&gt;, as opposed to a &lt;em&gt;retained mode&lt;/em&gt; GUI library. The difference between retained mode and immediate mode is best illustrated with the example of a button: In a retained GUI you create a button, add it to some UI and install some on-click handler (callback). The button is retained in the UI, and to change the text on it you need to store some sort of reference to it. By contrast, in immediate mode you show the button and interact with it immediately, and you do so every frame (e.g. 60 times per second). This means there is no need for any on-click handler, nor to store any reference to it. In &lt;code&gt;egui&lt;/code&gt; this looks like this: &lt;code&gt;if ui.button("Save file").clicked() { save(file); }&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;A more detailed description of immediate mode can be found &lt;a href="https://docs.rs/egui/latest/egui/#understanding-immediate-mode"&gt;in the &lt;code&gt;egui&lt;/code&gt; docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are advantages and disadvantages to both systems.&lt;/p&gt; 
&lt;p&gt;The short of it is this: immediate mode GUI libraries are easier to use, but less powerful.&lt;/p&gt; 
&lt;h3&gt;Advantages of immediate mode&lt;/h3&gt; 
&lt;h4&gt;Usability&lt;/h4&gt; 
&lt;p&gt;The main advantage of immediate mode is that the application code becomes vastly simpler:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You never need to have any on-click handlers and callbacks that disrupts your code flow.&lt;/li&gt; 
 &lt;li&gt;You don't have to worry about a lingering callback calling something that is gone.&lt;/li&gt; 
 &lt;li&gt;Your GUI code can easily live in a simple function (no need for an object just for the UI).&lt;/li&gt; 
 &lt;li&gt;You don't have to worry about app state and GUI state being out-of-sync (i.e. the GUI showing something outdated), because the GUI isn't storing any state - it is showing the latest state &lt;em&gt;immediately&lt;/em&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In other words, a whole lot of code, complexity and bugs are gone, and you can focus your time on something more interesting than writing GUI code.&lt;/p&gt; 
&lt;h3&gt;Disadvantages of immediate mode&lt;/h3&gt; 
&lt;h4&gt;Layout&lt;/h4&gt; 
&lt;p&gt;The main disadvantage of immediate mode is it makes layout more difficult. Say you want to show a small dialog window in the center of the screen. To position the window correctly the GUI library must first know the size of it. To know the size of the window the GUI library must first layout the contents of the window. In retained mode this is easy: the GUI library does the window layout, positions the window, then checks for interaction ("was the OK button clicked?").&lt;/p&gt; 
&lt;p&gt;In immediate mode you run into a paradox: to know the size of the window, we must do the layout, but the layout code also checks for interaction ("was the OK button clicked?") and so it needs to know the window position &lt;em&gt;before&lt;/em&gt; showing the window contents. This means we must decide where to show the window &lt;em&gt;before&lt;/em&gt; we know its size!&lt;/p&gt; 
&lt;p&gt;This is a fundamental shortcoming of immediate mode GUIs, and any attempt to resolve it comes with its own downsides.&lt;/p&gt; 
&lt;p&gt;One workaround is to store the size and use it the next frame. This produces a frame-delay for the correct layout, producing occasional flickering the first frame something shows up. &lt;code&gt;egui&lt;/code&gt; does this for some things such as windows and grid layouts.&lt;/p&gt; 
&lt;p&gt;The "first-frame jitter" can be covered up with an extra &lt;em&gt;pass&lt;/em&gt;, which egui supports via &lt;code&gt;Context::request_discard&lt;/code&gt;. The downside of this is the added CPU cost of a second pass, so egui only does this in very rare circumstances (the majority of frames are single-pass).&lt;/p&gt; 
&lt;p&gt;For "atomic" widgets (e.g. a button) &lt;code&gt;egui&lt;/code&gt; knows the size before showing it, so centering buttons, labels etc is possible in &lt;code&gt;egui&lt;/code&gt; without any special workarounds.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/emilk/egui/issues/4378"&gt;this issue&lt;/a&gt; for more.&lt;/p&gt; 
&lt;h4&gt;CPU usage&lt;/h4&gt; 
&lt;p&gt;Since an immediate mode GUI does a full layout each frame, the layout code needs to be quick. If you have a very complex GUI this can tax the CPU. In particular, having a very large UI in a scroll area (with very long scrollback) can be slow, as the content needs to be laid out each frame.&lt;/p&gt; 
&lt;p&gt;If you design the GUI with this in mind and refrain from huge scroll areas (or only lay out the part that is in view) then the performance hit is generally pretty small. For most cases you can expect &lt;code&gt;egui&lt;/code&gt; to take up 1-2 ms per frame, but &lt;code&gt;egui&lt;/code&gt; still has a lot of room for optimization (it's not something I've focused on yet). &lt;code&gt;egui&lt;/code&gt; only repaints when there is interaction (e.g. mouse movement) or an animation, so if your app is idle, no CPU is wasted.&lt;/p&gt; 
&lt;p&gt;If your GUI is highly interactive, then immediate mode may actually be more performant compared to retained mode. Go to any web page and resize the browser window, and you'll notice that the browser is very slow to do the layout and eats a lot of CPU doing it. Resize a window in &lt;code&gt;egui&lt;/code&gt; by contrast, and you'll get smooth 60 FPS at no extra CPU cost.&lt;/p&gt; 
&lt;h4&gt;IDs&lt;/h4&gt; 
&lt;p&gt;There are some GUI state that you want the GUI library to retain, even in an immediate mode library such as &lt;code&gt;egui&lt;/code&gt;. This includes position and sizes of windows and how far the user has scrolled in some UI. In these cases you need to provide &lt;code&gt;egui&lt;/code&gt; with a seed of a unique identifier (unique within the parent UI). For instance: by default &lt;code&gt;egui&lt;/code&gt; uses the window titles as unique IDs to store window positions. If you want two windows with the same name (or one window with a dynamic name) you must provide some other ID source to &lt;code&gt;egui&lt;/code&gt; (some unique integer or string).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; also needs to track which widget is being interacted with (e.g. which slider is being dragged). &lt;code&gt;egui&lt;/code&gt; uses unique IDs for this as well, but in this case the IDs are automatically generated, so there is no need for the user to worry about it. In particular, having two buttons with the same name is no problem (this is in contrast with &lt;a href="https://github.com/ocornut/imgui"&gt;&lt;code&gt;Dear ImGui&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Overall, ID handling is a rare inconvenience, and not a big disadvantage.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;Also see &lt;a href="https://github.com/emilk/egui/discussions/categories/q-a"&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Can I use &lt;code&gt;egui&lt;/code&gt; with non-latin characters?&lt;/h3&gt; 
&lt;p&gt;Yes! But you need to install your own font (&lt;code&gt;.ttf&lt;/code&gt; or &lt;code&gt;.otf&lt;/code&gt;) using &lt;a href="https://docs.rs/egui/latest/egui/struct.Context.html#method.set_fonts"&gt;&lt;code&gt;Context::set_fonts&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Can I customize the look of egui?&lt;/h3&gt; 
&lt;p&gt;Yes! You can customize the colors, spacing, fonts and sizes of everything using &lt;code&gt;Context::set_style&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This is not yet as powerful as say CSS, &lt;a href="https://github.com/emilk/egui/issues/3284"&gt;but this is going to improve&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here is an example (from &lt;a href="https://github.com/a-liashenko/TinyPomodoro"&gt;https://github.com/a-liashenko/TinyPomodoro&lt;/a&gt;):&lt;/p&gt; 
&lt;img src="https://github.com/user-attachments/assets/e6107237-2547-41d6-996b-9a20ae0345ab" width="50%" /&gt; 
&lt;h3&gt;How do I use egui with &lt;code&gt;async&lt;/code&gt;?&lt;/h3&gt; 
&lt;p&gt;If you call &lt;code&gt;.await&lt;/code&gt; in your GUI code, the UI will freeze, which is very bad UX. Instead, keep the GUI thread non-blocking and communicate with any concurrent tasks (&lt;code&gt;async&lt;/code&gt; tasks or other threads) with something like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Channels (e.g. &lt;a href="https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html"&gt;&lt;code&gt;std::sync::mpsc::channel&lt;/code&gt;&lt;/a&gt;). Make sure to use &lt;a href="https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.try_recv"&gt;&lt;code&gt;try_recv&lt;/code&gt;&lt;/a&gt; so you don't block the gui thread!&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Arc&amp;lt;Mutex&amp;lt;Value&amp;gt;&amp;gt;&lt;/code&gt; (background thread sets a value; GUI thread reads it)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/poll-promise"&gt;&lt;code&gt;poll_promise::Promise&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/eventuals/latest/eventuals/struct.Eventual.html"&gt;&lt;code&gt;eventuals::Eventual&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/tokio/latest/tokio/sync/watch/fn.channel.html"&gt;&lt;code&gt;tokio::sync:&lt;span&gt;‚åö&lt;/span&gt;:channel&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I create a file dialog?&lt;/h3&gt; 
&lt;p&gt;The async version of &lt;a href="https://docs.rs/rfd/latest/rfd/"&gt;rfd&lt;/a&gt; supports both native and Wasm. See example app here &lt;a href="https://github.com/woelper/egui_pick_file"&gt;https://github.com/woelper/egui_pick_file&lt;/a&gt; which also has a demo available via &lt;a href="https://woelper.github.io/egui_pick_file/"&gt;gitub pages&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;What about accessibility, such as screen readers?&lt;/h3&gt; 
&lt;p&gt;egui includes optional support for &lt;a href="https://accesskit.dev/"&gt;AccessKit&lt;/a&gt;, which currently implements the native accessibility APIs on Windows and macOS. This feature is enabled by default in eframe. For platforms that AccessKit doesn't yet support, including web, there is an experimental built-in screen reader; in &lt;a href="https://www.egui.rs/#demo"&gt;the web demo&lt;/a&gt; you can enable it in the "Backend" tab.&lt;/p&gt; 
&lt;p&gt;The original discussion of accessibility in egui is at &lt;a href="https://github.com/emilk/egui/issues/167"&gt;https://github.com/emilk/egui/issues/167&lt;/a&gt;. Now that AccessKit support is merged, providing a strong foundation for future accessibility work, please open new issues on specific accessibility problems.&lt;/p&gt; 
&lt;h3&gt;What is the difference between &lt;a href="https://docs.rs/egui"&gt;egui&lt;/a&gt; and &lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;eframe&lt;/a&gt;?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; is a 2D user interface library for laying out and interacting with buttons, sliders, etc. &lt;code&gt;egui&lt;/code&gt; has no idea if it is running on the web or natively, and does not know how to collect input or show things on screen. That is the job of &lt;em&gt;the integration&lt;/em&gt; or &lt;em&gt;backend&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;It is common to use &lt;code&gt;egui&lt;/code&gt; from a game engine (using e.g. &lt;a href="https://docs.rs/bevy_egui"&gt;&lt;code&gt;bevy_egui&lt;/code&gt;&lt;/a&gt;), but you can also use &lt;code&gt;egui&lt;/code&gt; stand-alone using &lt;code&gt;eframe&lt;/code&gt;. &lt;code&gt;eframe&lt;/code&gt; has integration for web and native, and handles input and rendering. The &lt;em&gt;frame&lt;/em&gt; in &lt;code&gt;eframe&lt;/code&gt; stands both for the frame in which your egui app resides and also for "framework" (&lt;code&gt;eframe&lt;/code&gt; is a framework, &lt;code&gt;egui&lt;/code&gt; is a library).&lt;/p&gt; 
&lt;h3&gt;How do I render 3D stuff in an egui area?&lt;/h3&gt; 
&lt;p&gt;There are multiple ways to combine egui with 3D. The simplest way is to use a 3D library and have egui sit on top of the 3D view. See for instance &lt;a href="https://github.com/mvlabat/bevy_egui"&gt;&lt;code&gt;bevy_egui&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://github.com/asny/three-d"&gt;&lt;code&gt;three-d&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to embed 3D into an egui view there are two options:&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;Shape::Callback&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/raw/main/examples/custom_3d_glow/src/main.rs"&gt;https://github.com/emilk/egui/blob/main/examples/custom_3d_glow/src/main.rs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;Shape::Callback&lt;/code&gt; will call your code when egui gets painted, to show anything using whatever the background rendering context is. When using &lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; this will be &lt;a href="https://github.com/grovesNL/glow"&gt;&lt;code&gt;glow&lt;/code&gt;&lt;/a&gt;. Other integrations will give you other rendering contexts, if they support &lt;code&gt;Shape::Callback&lt;/code&gt; at all.&lt;/p&gt; 
&lt;h4&gt;Render-to-texture&lt;/h4&gt; 
&lt;p&gt;You can also render your 3D scene to a texture and display it using &lt;a href="https://docs.rs/egui/latest/egui/struct.Ui.html#method.image"&gt;&lt;code&gt;ui.image(‚Ä¶)&lt;/code&gt;&lt;/a&gt;. You first need to convert the native texture to an &lt;a href="https://docs.rs/egui/latest/egui/enum.TextureId.html"&gt;&lt;code&gt;egui::TextureId&lt;/code&gt;&lt;/a&gt;, and how to do this depends on the integration you use.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Using &lt;a href="https://github.com/not-fl3/egui-miniquad"&gt;&lt;code&gt;egui-miniquad&lt;/code&gt;&lt;/a&gt;: &lt;a href="https://github.com/not-fl3/egui-miniquad/raw/master/examples/render_to_egui_image.rs"&gt;https://github.com/not-fl3/egui-miniquad/blob/master/examples/render_to_egui_image.rs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Using &lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; + &lt;a href="https://vtk.org/"&gt;&lt;code&gt;VTK (C++)&lt;/code&gt;&lt;/a&gt;: &lt;a href="https://github.com/Gerharddc/vtk-egui-demo"&gt;https://github.com/Gerharddc/vtk-egui-demo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other&lt;/h2&gt; 
&lt;h3&gt;Conventions and design choices&lt;/h3&gt; 
&lt;p&gt;All coordinates are in screen space coordinates, with (0, 0) in the top left corner&lt;/p&gt; 
&lt;p&gt;All coordinates are in logical "points" which may consist of many physical pixels.&lt;/p&gt; 
&lt;p&gt;All colors have premultiplied alpha, unless otherwise stated.&lt;/p&gt; 
&lt;p&gt;egui uses the builder pattern for construction widgets. For instance: &lt;code&gt;ui.add(Label::new("Hello").text_color(RED));&lt;/code&gt; I am not a big fan of the builder pattern (it is quite verbose both in implementation and in use) but until Rust has named, default arguments it is the best we can do. To alleviate some of the verbosity there are common-case helper functions, like &lt;code&gt;ui.label("Hello");&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Instead of using matching &lt;code&gt;begin/end&lt;/code&gt; style function calls (which can be error prone) egui prefers to use &lt;code&gt;FnOnce&lt;/code&gt; closures passed to a wrapping function. Lambdas are a bit ugly though, so I'd like to find a nicer solution to this. More discussion of this at &lt;a href="https://github.com/emilk/egui/issues/1004#issuecomment-1001650754"&gt;https://github.com/emilk/egui/issues/1004#issuecomment-1001650754&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;egui uses a single &lt;code&gt;RwLock&lt;/code&gt; for short-time locks on each access of &lt;code&gt;Context&lt;/code&gt; data. This is to leave implementation simple and transactional and allow users to run their UI logic in parallel. Instead of creating mutex guards, egui uses closures passed to a wrapping function, e.g. &lt;code&gt;ctx.input(|i| i.key_down(Key::A))&lt;/code&gt;. This is to make it less likely that a user would accidentally double-lock the &lt;code&gt;Context&lt;/code&gt;, which would lead to a deadlock.&lt;/p&gt; 
&lt;h3&gt;Inspiration&lt;/h3&gt; 
&lt;p&gt;The one and only &lt;a href="https://github.com/ocornut/imgui"&gt;Dear ImGui&lt;/a&gt; is a great Immediate Mode GUI for C++ which works with many backends. That library revolutionized how I think about GUI code and turned GUI programming from something I hated to do to something I now enjoy.&lt;/p&gt; 
&lt;h3&gt;Name&lt;/h3&gt; 
&lt;p&gt;The name of the library and the project is "egui" and pronounced as "e-gooey". Please don't write it as "EGUI".&lt;/p&gt; 
&lt;p&gt;The library was originally called "Emigui", but was renamed to "egui" in 2020.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;egui author and maintainer: Emil Ernerfeldt (&lt;a href="https://github.com/emilk"&gt;@emilk&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Notable contributions by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n2"&gt;@n2&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/253"&gt;Mobile web input and IME support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/optozorax"&gt;@optozorax&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/257"&gt;Arbitrary widget data storage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quadruple-output"&gt;@quadruple-output&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/306"&gt;Multitouch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EmbersArc"&gt;@EmbersArc&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pulls?q=+is%3Apr+author%3AEmbersArc"&gt;Plots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AsmPrgmC3"&gt;@AsmPrgmC3&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/650"&gt;Proper sRGBA blending for web&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AlexApps99"&gt;@AlexApps99&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/685"&gt;&lt;code&gt;egui_glow&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mankinskin"&gt;@mankinskin&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/543"&gt;Context menus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KentaTheBugMaker"&gt;@KentaTheBugMaker&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/868"&gt;Port glow painter to web&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danielkeller"&gt;@danielkeller&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/1050"&gt;&lt;code&gt;Context&lt;/code&gt; refactor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MaximOsipenko"&gt;@MaximOsipenko&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/2625"&gt;&lt;code&gt;Context&lt;/code&gt; lock refactor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mwcampbell"&gt;@mwcampbell&lt;/a&gt;: &lt;a href="https://github.com/AccessKit/accesskit"&gt;AccessKit&lt;/a&gt; &lt;a href="https://github.com/emilk/egui/pull/2294"&gt;integration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hasenbanck"&gt;@hasenbanck&lt;/a&gt;, &lt;a href="https://github.com/s-nie"&gt;@s-nie&lt;/a&gt;, &lt;a href="https://github.com/Wumpf"&gt;@Wumpf&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/tree/main/crates/egui-wgpu"&gt;&lt;code&gt;egui-wgpu&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jprochazk"&gt;@jprochazk&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/issues/3291"&gt;egui image API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;And &lt;a href="https://github.com/emilk/egui/graphs/contributors?type=a"&gt;many more&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;egui is licensed under &lt;a href="https://raw.githubusercontent.com/emilk/egui/main/LICENSE-MIT"&gt;MIT&lt;/a&gt; OR &lt;a href="https://raw.githubusercontent.com/emilk/egui/main/LICENSE-APACHE"&gt;Apache-2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The flattening algorithm for the cubic bezier curve and quadratic bezier curve is from &lt;a href="https://docs.rs/lyon_geom/latest/lyon_geom/"&gt;lyon_geom&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Default fonts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;emoji-icon-font.ttf&lt;/code&gt;: &lt;a href="https://github.com/jslegers/emoji-icon-font"&gt;Copyright (c) 2014 John Slegers&lt;/a&gt; , MIT License&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Hack-Regular.ttf&lt;/code&gt;: &lt;a href="https://github.com/source-foundry/Hack"&gt;https://github.com/source-foundry/Hack&lt;/a&gt;, &lt;a href="https://github.com/source-foundry/Hack/raw/master/LICENSE.md"&gt;MIT Licence&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NotoEmoji-Regular.ttf&lt;/code&gt;: &lt;a href="https://google.com/get/noto"&gt;google.com/get/noto&lt;/a&gt;, &lt;a href="https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;amp;id=OFL"&gt;SIL Open Font License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Ubuntu-Light.ttf&lt;/code&gt; by &lt;a href="http://www.daltonmaag.com/"&gt;Dalton Maag&lt;/a&gt;: &lt;a href="https://ubuntu.com/legal/font-licence"&gt;Ubuntu font licence&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.rerun.io/"&gt;&lt;img src="https://github.com/user-attachments/assets/78e79463-4357-461b-bbd1-31aa5ef5e1a2" width="440" /&gt;&lt;/a&gt; 
 &lt;p&gt;egui development is sponsored by &lt;a href="https://www.rerun.io/"&gt;Rerun&lt;/a&gt;, a startup building&lt;br /&gt; an SDK for visualizing streams of multimodal data.&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>tracel-ai/burn</title>
      <link>https://github.com/tracel-ai/burn</link>
      <description>&lt;p&gt;Burn is a next generation Deep Learning Framework that doesn't compromise on flexibility, efficiency and portability.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/logo-burn-neutral.webp" width="350px" /&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/uPEBbYYDB6"&gt;&lt;img src="https://img.shields.io/discord/1038839012602941528.svg?color=7289da&amp;amp;&amp;amp;logo=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/burn"&gt;&lt;img src="https://img.shields.io/crates/v/burn.svg?sanitize=true" alt="Current Crates.io Version" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/burn"&gt;&lt;img src="https://img.shields.io/crates/msrv/burn" alt="Minimum Supported Rust Version" /&gt;&lt;/a&gt; &lt;a href="https://burn.dev/docs/burn"&gt;&lt;img src="https://img.shields.io/badge/docs-latest-blue" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tracel-ai/burn/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/tracel-ai/burn/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Test Status" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/#license"&gt;&lt;img src="https://shields.io/badge/license-MIT%2FApache--2.0-blue" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/tracel-ai/burn"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://www.runblaze.dev"&gt;&lt;img src="https://www.runblaze.dev/ci-blaze-powered.png" width="125px" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;Burn is a next generation Tensor Library and Deep Learning Framework that doesn't compromise on &lt;br /&gt; flexibility, efficiency and portability.&lt;/strong&gt;&lt;/p&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div align="left"&gt; 
 &lt;p&gt;Burn is both a tensor library and a deep learning framework optimized for numerical computing, model inference and model training. Burn leverages Rust to perform optimizations normally only available in static-graph frameworks, offering optimal speed without impacting flexibility.&lt;/p&gt; 
 &lt;h2&gt;Backend&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/backend-chip.png" height="96px" /&gt; 
  &lt;p&gt;Burn strives to be as fast as possible on as many hardwares as possible, with robust implementations. We believe this flexibility is crucial for modern needs where you may train your models in the cloud, then deploy on customer hardwares, which vary from user to user.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;Supported Backends&lt;/h3&gt; 
 &lt;p&gt;Most backends support all operating systems, so we don't mentioned them in the tables below.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;GPU Backends:&lt;/strong&gt;&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;&lt;/th&gt; 
    &lt;th&gt;CUDA&lt;/th&gt; 
    &lt;th&gt;ROCm&lt;/th&gt; 
    &lt;th&gt;Metal&lt;/th&gt; 
    &lt;th&gt;Vulkan&lt;/th&gt; 
    &lt;th&gt;WebGPU&lt;/th&gt; 
    &lt;th&gt;Candle&lt;/th&gt; 
    &lt;th&gt;LibTorch&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Nvidia&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;AMD&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Apple&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Intel&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Qualcom&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Wasm&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;strong&gt;CPU Backends:&lt;/strong&gt;&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;&lt;/th&gt; 
    &lt;th&gt;Cpu (CubeCL)&lt;/th&gt; 
    &lt;th&gt;NdArray&lt;/th&gt; 
    &lt;th&gt;Candle&lt;/th&gt; 
    &lt;th&gt;LibTorch&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;X86&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Arm&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Wasm&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;no-std&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;‚òëÔ∏è&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
    &lt;td&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;br /&gt; 
 &lt;p&gt;Compared to other frameworks, Burn has a very different approach to supporting many backends. By design, most code is generic over the Backend trait, which allows us to build Burn with swappable backends. This makes composing backend possible, augmenting them with additional functionalities such as autodifferentiation and automatic kernel fusion.&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Autodiff: Backend decorator that brings backpropagation to any backend üîÑ &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Contrary to the aforementioned backends, Autodiff is actually a backend &lt;em&gt;decorator&lt;/em&gt;. This means that it cannot exist by itself; it must encapsulate another backend.&lt;/p&gt; 
  &lt;p&gt;The simple act of wrapping a base backend with Autodiff transparently equips it with autodifferentiation support, making it possible to call backward on your model.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::backend::{Autodiff, Wgpu};
use burn::tensor::{Distribution, Tensor};

fn main() {
    type Backend = Autodiff&amp;lt;Wgpu&amp;gt;;

    let device = Default::default();

    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default, &amp;amp;device);
    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default, &amp;amp;device).require_grad();

    let tmp = x.clone() + y.clone();
    let tmp = tmp.matmul(x);
    let tmp = tmp.exp();

    let grads = tmp.backward();
    let y_grad = y.grad(&amp;amp;grads).unwrap();
    println!("{y_grad}");
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, it is impossible to make the mistake of calling backward on a model that runs on a backend that does not support autodiff (for inference), as this method is only offered by an Autodiff backend.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-autodiff/README.md"&gt;Autodiff Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Fusion: Backend decorator that brings kernel fusion to all first-party backends &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;This backend decorator enhances a backend with kernel fusion, provided that the inner backend supports it. Note that you can compose this backend with other backend decorators such as Autodiff. All first-party accelerated backends (like WGPU and CUDA) use Fusion by default (&lt;code&gt;burn/fusion&lt;/code&gt; feature flag), so you typically don't need to apply it manually.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;#[cfg(not(feature = "fusion"))]
pub type Cuda&amp;lt;F = f32, I = i32&amp;gt; = CubeBackend&amp;lt;CudaRuntime, F, I, u8&amp;gt;;

#[cfg(feature = "fusion")]
pub type Cuda&amp;lt;F = f32, I = i32&amp;gt; = burn_fusion::Fusion&amp;lt;CubeBackend&amp;lt;CudaRuntime, F, I, u8&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, we plan to implement automatic gradient checkpointing based on compute bound and memory bound operations, which will work gracefully with the fusion backend to make your code run even faster during training, see &lt;a href="https://github.com/tracel-ai/burn/issues/936"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-fusion/README.md"&gt;Fusion Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Router (Beta): Backend decorator that composes multiple backends into a single one &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;That backend simplifies hardware operability, if for instance you want to execute some operations on the CPU and other operations on the GPU.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::tensor::{Distribution, Tensor};
use burn::backend::{
    NdArray, Router, Wgpu, ndarray::NdArrayDevice, router::duo::MultiDevice, wgpu::WgpuDevice,
};

fn main() {
    type Backend = Router&amp;lt;(Wgpu, NdArray)&amp;gt;;

    let device_0 = MultiDevice::B1(WgpuDevice::DiscreteGpu(0));
    let device_1 = MultiDevice::B2(NdArrayDevice::Cpu);

    let tensor_gpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], burn::tensor::Distribution::Default, &amp;amp;device_0);
    let tensor_cpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], burn::tensor::Distribution::Default, &amp;amp;device_1);
}

&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Remote (Beta): Backend decorator for remote backend execution, useful for distributed computations &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;That backend has two parts, one client and one server. The client sends tensor operations over the network to a remote compute backend. You can use any first-party backend as server in a single line of code:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;fn main_server() {
    // Start a server on port 3000.
    burn::server::start::&amp;lt;burn::backend::Cuda&amp;gt;(Default::default(), 3000);
}

fn main_client() {
    // Create a client that communicate with the server on port 3000.
    use burn::backend::{Autodiff, RemoteBackend};

    type Backend = Autodiff&amp;lt;RemoteDevice&amp;gt;;

    let device = RemoteDevice::new("ws://localhost:3000");
    let tensor_gpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], Distribution::Default, &amp;amp;device);
}

&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;br /&gt; 
 &lt;h2&gt;Training &amp;amp; Inference&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-wall.png" height="96px" /&gt; 
  &lt;p&gt;The whole deep learning workflow is made easy with Burn, as you can monitor your training progress with an ergonomic dashboard, and run inference everywhere from embedded devices to large GPU clusters.&lt;/p&gt; 
  &lt;p&gt;Burn was built from the ground up with training and inference in mind. It's also worth noting how Burn, in comparison to frameworks like PyTorch, simplifies the transition from training to deployment, eliminating the need for code changes.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div align="center"&gt; 
  &lt;br /&gt; 
  &lt;a href="https://www.youtube.com/watch?v=N9RM5CQbNQc" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/burn-train-tui.png" alt="Burn Train TUI" width="75%" /&gt; &lt;/a&gt; 
 &lt;/div&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;strong&gt;Click on the following sections to expand üëá&lt;/strong&gt;&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Training Dashboard üìà &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;As you can see in the previous video (click on the picture!), a new terminal UI dashboard based on the &lt;a href="https://github.com/ratatui-org/ratatui"&gt;Ratatui&lt;/a&gt; crate allows users to follow their training with ease without having to connect to any external application.&lt;/p&gt; 
  &lt;p&gt;You can visualize your training and validation metrics updating in real-time and analyze the lifelong progression or recent history of any registered metrics using only the arrow keys. Break from the training loop without crashing, allowing potential checkpoints to be fully written or important pieces of code to complete without interruption üõ°&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; ONNX Support üê´ &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;ONNX (Open Neural Network Exchange) is an open-standard format that exports both the architecture and the weights of a deep learning model.&lt;/p&gt; 
  &lt;p&gt;Burn supports the importation of models that follow the ONNX standard so you can easily port a model you have written in another framework like TensorFlow or PyTorch to Burn to benefit from all the advantages our framework offers.&lt;/p&gt; 
  &lt;p&gt;Our ONNX support is further described in &lt;a href="https://burn.dev/books/burn/import/onnx-model.html"&gt;this section of the Burn Book üî•&lt;/a&gt;.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This crate is in active development and currently supports a &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-import/SUPPORTED-ONNX-OPS.md"&gt;limited set of ONNX operators&lt;/a&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Importing PyTorch or Safetensors Models üöö &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;You can load weights from PyTorch or Safetensors formats directly into your Burn-defined models. This makes it easy to reuse existing models while benefiting from Burn's performance and deployment features.&lt;/p&gt; 
  &lt;p&gt;Learn more:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://burn.dev/books/burn/import/pytorch-model.html"&gt;Import pre-trained PyTorch models into Burn&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://burn.dev/books/burn/import/safetensors-model.html"&gt;Load models from Safetensors format&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Inference in the Browser üåê &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Several of our backends can run in WebAssembly environments: Candle and NdArray for CPU execution, and WGPU for GPU acceleration via WebGPU. This means that you can run inference directly within a browser. We provide several examples of this:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web"&gt;MNIST&lt;/a&gt; where you can draw digits and a small convnet tries to find which one it is! 2Ô∏è‚É£ 7Ô∏è‚É£ üò∞&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web"&gt;Image Classification&lt;/a&gt; where you can upload images and classify them! üåÑ&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Embedded: &lt;i&gt;no_std&lt;/i&gt; support ‚öôÔ∏è &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Burn's core components support &lt;a href="https://docs.rust-embedded.org/book/intro/no-std.html"&gt;no_std&lt;/a&gt;. This means it can run in bare metal environment such as embedded devices without an operating system.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;As of now, only the NdArray backend can be used in a &lt;em&gt;no_std&lt;/em&gt; environment.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;br /&gt; 
 &lt;h3&gt;Benchmarks&lt;/h3&gt; 
 &lt;p&gt;To evaluate performance across different backends and track improvements over time, we provide a dedicated benchmarking suite.&lt;/p&gt; 
 &lt;p&gt;Run and compare benchmarks using &lt;a href="https://github.com/tracel-ai/burn-bench"&gt;burn-bench&lt;/a&gt;.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Warning&lt;/strong&gt; When using one of the &lt;code&gt;wgpu&lt;/code&gt; backends, you may encounter compilation errors related to recursive type evaluation. This is due to complex type nesting within the &lt;code&gt;wgpu&lt;/code&gt; dependency chain. To resolve this issue, add the following line at the top of your &lt;code&gt;main.rs&lt;/code&gt; or &lt;code&gt;lib.rs&lt;/code&gt; file:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;#![recursion_limit = "256"]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;The default recursion limit (128) is often just below the required depth (typically 130-150) due to deeply nested associated types and trait bounds.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h2&gt;Getting Started&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-walking.png" height="96px" /&gt; 
  &lt;p&gt;Just heard of Burn? You are at the right place! Just continue reading this section and we hope you can get on board really quickly.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;details&gt; 
  &lt;summary&gt; The Burn Book üî• &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;To begin working effectively with Burn, it is crucial to understand its key components and philosophy. This is why we highly recommend new users to read the first sections of &lt;a href="https://burn.dev/books/burn/"&gt;The Burn Book üî•&lt;/a&gt;. It provides detailed examples and explanations covering every facet of the framework, including building blocks like tensors, modules, and optimizers, all the way to advanced usage, like coding your own GPU kernels.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;The project is constantly evolving, and we try as much as possible to keep the book up to date with new additions. However, we might miss some details sometimes, so if you see something weird, let us know! We also gladly accept Pull Requests üòÑ&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Examples üôè &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Let's start with a code snippet that shows how intuitive the framework is to use! In the following, we declare a neural network module with some parameters along with its forward pass.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::nn;
use burn::module::Module;
use burn::tensor::backend::Backend;

#[derive(Module, Debug)]
pub struct PositionWiseFeedForward&amp;lt;B: Backend&amp;gt; {
    linear_inner: nn::Linear&amp;lt;B&amp;gt;,
    linear_outer: nn::Linear&amp;lt;B&amp;gt;,
    dropout: nn::Dropout,
    gelu: nn::Gelu,
}

impl&amp;lt;B: Backend&amp;gt; PositionWiseFeedForward&amp;lt;B&amp;gt; {
    pub fn forward&amp;lt;const D: usize&amp;gt;(&amp;amp;self, input: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {
        let x = self.linear_inner.forward(input);
        let x = self.gelu.forward(x);
        let x = self.dropout.forward(x);

        self.linear_outer.forward(x)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;We have a somewhat large amount of &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples"&gt;examples&lt;/a&gt; in the repository that shows how to use the framework in different scenarios.&lt;/p&gt; 
  &lt;p&gt;Following &lt;a href="https://burn.dev/books/burn/"&gt;the book&lt;/a&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/guide"&gt;Basic Workflow&lt;/a&gt; : Creates a custom CNN &lt;code&gt;Module&lt;/code&gt; to train on the MNIST dataset and use for inference.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-training-loop"&gt;Custom Training Loop&lt;/a&gt; : Implements a basic training loop instead of using the &lt;code&gt;Learner&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-wgpu-kernel"&gt;Custom WGPU Kernel&lt;/a&gt; : Learn how to create your own custom operation with the WGPU backend.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;Additional examples:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-csv-dataset"&gt;Custom CSV Dataset&lt;/a&gt; : Implements a dataset to parse CSV data for a regression task.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/simple-regression"&gt;Regression&lt;/a&gt; : Trains a simple MLP on the California Housing dataset to predict the median house value for a district.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-image-dataset"&gt;Custom Image Dataset&lt;/a&gt; : Trains a simple CNN on custom image dataset following a simple folder structure.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-renderer"&gt;Custom Renderer&lt;/a&gt; : Implements a custom renderer to display the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/building-blocks/learner.md"&gt;&lt;code&gt;Learner&lt;/code&gt;&lt;/a&gt; progress.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web"&gt;Image Classification Web&lt;/a&gt; : Image classification web browser demo using Burn, WGPU and WebAssembly.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web"&gt;MNIST Inference on Web&lt;/a&gt; : An interactive MNIST inference demo in the browser. The demo is available &lt;a href="https://burn.dev/demo/"&gt;online&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist"&gt;MNIST Training&lt;/a&gt; : Demonstrates how to train a custom &lt;code&gt;Module&lt;/code&gt; (MLP) with the &lt;code&gt;Learner&lt;/code&gt; configured to log metrics and keep training checkpoints.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/named-tensor"&gt;Named Tensor&lt;/a&gt; : Performs operations with the experimental &lt;code&gt;NamedTensor&lt;/code&gt; feature.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/onnx-inference"&gt;ONNX Import Inference&lt;/a&gt; : Imports an ONNX model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/import-model-weights"&gt;PyTorch Import Inference&lt;/a&gt; : Imports a PyTorch model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-classification"&gt;Text Classification&lt;/a&gt; : Trains a text classification transformer model on the AG News or DbPedia dataset. The trained model can then be used to classify a text sample.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-generation"&gt;Text Generation&lt;/a&gt; : Trains a text generation transformer model on the DbPedia dataset.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/wgan"&gt;Wasserstein GAN MNIST&lt;/a&gt; : Trains a WGAN model to generate new handwritten digits based on MNIST.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;For more practical insights, you can clone the repository and run any of them directly on your computer!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Pre-trained Models ü§ñ &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;We keep an updated and curated list of models and examples built with Burn, see the &lt;a href="https://github.com/tracel-ai/models"&gt;tracel-ai/models repository&lt;/a&gt; for more details.&lt;/p&gt; 
  &lt;p&gt;Don't see the model you want? Don't hesitate to open an issue, and we may prioritize it. Built a model using Burn and want to share it? You can also open a Pull Request and add your model under the community section!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Why use Rust for Deep Learning? ü¶Ä &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;Deep Learning is a special form of software where you need very high level abstractions as well as extremely fast execution time. Rust is the perfect candidate for that use case since it provides zero-cost abstractions to easily create neural network modules, and fine-grained control over memory to optimize every detail.&lt;/p&gt; 
  &lt;p&gt;It's important that a framework be easy to use at a high level so that its users can focus on innovating in the AI field. However, since running models relies so heavily on computations, performance can't be neglected.&lt;/p&gt; 
  &lt;p&gt;To this day, the mainstream solution to this problem has been to offer APIs in Python, but rely on bindings to low-level languages such as C/C++. This reduces portability, increases complexity and creates frictions between researchers and engineers. We feel like Rust's approach to abstractions makes it versatile enough to tackle this two languages dichotomy.&lt;/p&gt; 
  &lt;p&gt;Rust also comes with the Cargo package manager, which makes it incredibly easy to build, test, and deploy from any environment, which is usually a pain in Python.&lt;/p&gt; 
  &lt;p&gt;Although Rust has the reputation of being a difficult language at first, we strongly believe it leads to more reliable, bug-free solutions built faster (after some practice üòÖ)!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;br /&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Deprecation Note&lt;/strong&gt;&lt;br /&gt;Since &lt;code&gt;0.14.0&lt;/code&gt;, the internal structure for tensor data has changed. The previous &lt;code&gt;Data&lt;/code&gt; struct was deprecated and officially removed since &lt;code&gt;0.17.0&lt;/code&gt; in favor of the new &lt;code&gt;TensorData&lt;/code&gt; struct, which allows for more flexibility by storing the underlying data as bytes and keeping the data type as a field. If you are using &lt;code&gt;Data&lt;/code&gt; in your code, make sure to switch to &lt;code&gt;TensorData&lt;/code&gt;.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;!-- &gt;
&gt; In the event that you are trying to load a model record saved in a previous version, make sure to
&gt; enable the `record-backward-compat` feature using a previous version of burn (&lt;=0.16.0). Otherwise,
&gt; the record won't be deserialized correctly and you will get an error message (which will also point
&gt; you to the backward compatible feature flag). The backward compatibility was maintained for
&gt; deserialization (loading), so as soon as you have saved the record again it will be saved according
&gt; to the new structure and you will be able to upgrade to this version. Please note that binary formats
&gt; are not backward compatible. Thus, you will need to load your record in a previous version and save it
&gt; to another of the self-describing record formats before using a compatible version (as described) with the
&gt; `record-backward-compat` feature flag. --&gt; 
 &lt;details id="deprecation"&gt; 
  &lt;summary&gt; Loading Model Records From Previous Versions ‚ö†Ô∏è &lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;p&gt;In the event that you are trying to load a model record saved in a version older than &lt;code&gt;0.14.0&lt;/code&gt;, make sure to use a compatible version (&lt;code&gt;0.14&lt;/code&gt;, &lt;code&gt;0.15&lt;/code&gt; or &lt;code&gt;0.16&lt;/code&gt;) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
  &lt;pre&gt;&lt;code&gt;features = [..., "record-backward-compat"]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Otherwise, the record won't be deserialized correctly and you will get an error message. This error will also point you to the backward compatible feature flag.&lt;/p&gt; 
  &lt;p&gt;The backward compatibility was maintained for deserialization when loading records. Therefore, as soon as you have saved the record again it will be saved according to the new structure and you can upgrade back to the current version&lt;/p&gt; 
  &lt;p&gt;Please note that binary formats are not backward compatible. Thus, you will need to load your record in a previous version and save it in any of the other self-describing record format (e.g., using the &lt;code&gt;NamedMpkFileRecorder&lt;/code&gt;) before using a compatible version (as described) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;h2&gt;Community&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-community.png" height="96px" /&gt; 
  &lt;p&gt;If you are excited about the project, don't hesitate to join our &lt;a href="https://discord.gg/uPEBbYYDB6"&gt;Discord&lt;/a&gt;! We try to be as welcoming as possible to everybody from any background. You can ask your questions and share what you built with the community!&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Before contributing, please take a moment to review our &lt;a href="https://github.com/tracel-ai/burn/tree/main/CODE-OF-CONDUCT.md"&gt;code of conduct&lt;/a&gt;. It's also highly recommended to read the &lt;a href="https://github.com/tracel-ai/burn/tree/main/contributor-book/src/project-architecture"&gt;architecture overview&lt;/a&gt;, which explains some of our architectural decisions. Refer to our &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;h2&gt;Status&lt;/h2&gt; 
 &lt;p&gt;Burn is currently in active development, and there will be breaking changes. While any resulting issues are likely to be easy to fix, there are no guarantees at this stage.&lt;/p&gt; 
 &lt;h2&gt;License&lt;/h2&gt; 
 &lt;p&gt;Burn is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; for details. Opening a pull request is assumed to signal agreement with these licensing terms.&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>huggingface/tokenizers</title>
      <link>https://github.com/huggingface/tokenizers</link>
      <description>&lt;p&gt;üí• Fast State-of-the-Art Tokenizers optimized for Research and Production&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;br /&gt; &lt;img src="https://huggingface.co/landing/assets/tokenizers/tokenizers-logo.png" width="600" /&gt; &lt;br /&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p align="center"&gt; &lt;img alt="Build" src="https://github.com/huggingface/tokenizers/workflows/Rust/badge.svg?sanitize=true" /&gt; &lt;a href="https://github.com/huggingface/tokenizers/raw/main/LICENSE"&gt; &lt;img alt="GitHub" src="https://img.shields.io/github/license/huggingface/tokenizers.svg?color=blue&amp;amp;cachedrop" /&gt; &lt;/a&gt; &lt;a href="https://pepy.tech/project/tokenizers"&gt; &lt;img src="https://pepy.tech/badge/tokenizers/week" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Provides an implementation of today's most used tokenizers, with a focus on performance and versatility.&lt;/p&gt; 
&lt;h2&gt;Main features:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Train new vocabularies and tokenize, using today's most used tokenizers.&lt;/li&gt; 
 &lt;li&gt;Extremely fast (both training and tokenization), thanks to the Rust implementation. Takes less than 20 seconds to tokenize a GB of text on a server's CPU.&lt;/li&gt; 
 &lt;li&gt;Easy to use, but also extremely versatile.&lt;/li&gt; 
 &lt;li&gt;Designed for research and production.&lt;/li&gt; 
 &lt;li&gt;Normalization comes with alignments tracking. It's always possible to get the part of the original sentence that corresponds to a given token.&lt;/li&gt; 
 &lt;li&gt;Does all the pre-processing: Truncate, Pad, add the special tokens your model needs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Performances&lt;/h2&gt; 
&lt;p&gt;Performances can vary depending on hardware, but running the &lt;a href="https://raw.githubusercontent.com/huggingface/tokenizers/main/bindings/python/benches/test_tiktoken.py"&gt;~/bindings/python/benches/test_tiktoken.py&lt;/a&gt; should give the following on a g6 aws instance: &lt;img src="https://github.com/user-attachments/assets/2b913d4b-e488-4cbc-b542-f90a6c40643d" alt="image" /&gt;&lt;/p&gt; 
&lt;h2&gt;Bindings&lt;/h2&gt; 
&lt;p&gt;We provide bindings to the following languages (more to come!):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/tokenizers/tree/main/tokenizers"&gt;Rust&lt;/a&gt; (Original implementation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/tokenizers/tree/main/bindings/python"&gt;Python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/tokenizers/tree/main/bindings/node"&gt;Node.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ankane/tokenizers-ruby"&gt;Ruby&lt;/a&gt; (Contributed by @ankane, external repo)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can install from source using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install git+https://github.com/huggingface/tokenizers.git#subdirectory=bindings/python
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or install the released versions with&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install tokenizers
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Quick example using Python:&lt;/h2&gt; 
&lt;p&gt;Choose your model between Byte-Pair Encoding, WordPiece or Unigram and instantiate a tokenizer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from tokenizers import Tokenizer
from tokenizers.models import BPE

tokenizer = Tokenizer(BPE())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can customize how pre-tokenization (e.g., splitting into words) is done:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from tokenizers.pre_tokenizers import Whitespace

tokenizer.pre_tokenizer = Whitespace()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then training your tokenizer on a set of files just takes two lines of codes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from tokenizers.trainers import BpeTrainer

trainer = BpeTrainer(special_tokens=["[UNK]", "[CLS]", "[SEP]", "[PAD]", "[MASK]"])
tokenizer.train(files=["wiki.train.raw", "wiki.valid.raw", "wiki.test.raw"], trainer=trainer)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once your tokenizer is trained, encode any text with just one line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;output = tokenizer.encode("Hello, y'all! How are you üòÅ ?")
print(output.tokens)
# ["Hello", ",", "y", "'", "all", "!", "How", "are", "you", "[UNK]", "?"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check the &lt;a href="https://huggingface.co/docs/tokenizers/index"&gt;documentation&lt;/a&gt; or the &lt;a href="https://huggingface.co/docs/tokenizers/quicktour"&gt;quicktour&lt;/a&gt; to learn more!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-unofficial/awesome-rust</title>
      <link>https://github.com/rust-unofficial/awesome-rust</link>
      <description>&lt;p&gt;A curated list of Rust code and resources.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome Rust &lt;a href="https://github.com/rust-unofficial/awesome-rust/actions/workflows/lint.yml"&gt;&lt;img src="https://github.com/rust-unofficial/awesome-rust/actions/workflows/lint.yml/badge.svg?sanitize=true" alt="lint badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rust-unofficial/awesome-rust/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/rust-unofficial/awesome-rust/actions/workflows/rust.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt; &lt;a href="https://www.trackawesomelist.com/rust-unofficial/awesome-rust/"&gt;&lt;img src="https://www.trackawesomelist.com/badge.svg?sanitize=true" alt="Track Awesome List" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;A curated list of Rust code and resources.&lt;/p&gt; 
&lt;p&gt;If you want to contribute, please read &lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/CONTRIBUTING.md"&gt;this&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;!-- toc --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#applications"&gt;Applications&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#audio-and-music"&gt;Audio and Music&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#blockchain"&gt;Blockchain&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#database"&gt;Database&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#embedded"&gt;Embedded&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#emulators"&gt;Emulators&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#file-manager"&gt;File manager&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#finance"&gt;Finance&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#games"&gt;Games&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#graphics"&gt;Graphics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#image-processing"&gt;Image processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#industrial-automation"&gt;Industrial automation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#message-queue"&gt;Message Queue&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#mlops"&gt;MLOps&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#observability"&gt;Observability&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#operating-systems"&gt;Operating systems&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#package-managers"&gt;Package Managers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#payments"&gt;Payments&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#productivity"&gt;Productivity&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#routing-protocols"&gt;Routing protocols&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#security-tools"&gt;Security tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#social-networks"&gt;Social networks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#system-tools"&gt;System tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#task-scheduling"&gt;Task scheduling&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#text-editors"&gt;Text editors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#text-processing"&gt;Text processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#utilities"&gt;Utilities&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#video"&gt;Video&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#virtualization"&gt;Virtualization&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#web"&gt;Web&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#web-servers"&gt;Web Servers&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#development-tools"&gt;Development tools&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#build-system"&gt;Build system&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#debugging"&gt;Debugging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#deployment"&gt;Deployment&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#embedded-1"&gt;Embedded&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#ffi"&gt;FFI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#formatters"&gt;Formatters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#ides"&gt;IDEs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#profiling"&gt;Profiling&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#services"&gt;Services&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#static-analysis"&gt;Static analysis&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#transpiling"&gt;Transpiling&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#libraries"&gt;Libraries&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#artificial-intelligence"&gt;Artificial Intelligence&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#genetic-algorithms"&gt;Genetic algorithms&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#machine-learning"&gt;Machine learning&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#openai"&gt;OpenAI&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#tooling"&gt;Tooling&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#astronomy"&gt;Astronomy&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#asynchronous"&gt;Asynchronous&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#audio-and-music-1"&gt;Audio and Music&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#authentication"&gt;Authentication&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#automotive"&gt;Automotive&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#bioinformatics"&gt;Bioinformatics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#caching"&gt;Caching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#cloud"&gt;Cloud&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#command-line"&gt;Command-line&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#compression"&gt;Compression&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#computation"&gt;Computation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#concurrency"&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#cryptography"&gt;Cryptography&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#data-processing"&gt;Data processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#data-streaming"&gt;Data streaming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#data-structures"&gt;Data structures&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#data-visualization"&gt;Data visualization&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#database-1"&gt;Database&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#date-and-time"&gt;Date and time&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#distributed-systems"&gt;Distributed systems&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#domain-driven-design"&gt;Domain driven design&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#ebpf"&gt;eBPF&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#email"&gt;Email&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#encoding"&gt;Encoding&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#filesystem"&gt;Filesystem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#finance-1"&gt;Finance&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#functional-programming"&gt;Functional Programming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#game-development"&gt;Game development&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#geospatial"&gt;Geospatial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#graph-algorithms"&gt;Graph algorithms&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#graphics-1"&gt;Graphics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#gui"&gt;GUI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#image-processing-1"&gt;Image processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#language-specification"&gt;Language specification&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#licensing"&gt;Licensing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#macro"&gt;Macro&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#markup-language"&gt;Markup language&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#mobile"&gt;Mobile&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#network-programming"&gt;Network programming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#parsing"&gt;Parsing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#peripherals"&gt;Peripherals&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#platform-specific"&gt;Platform specific&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#reverse-engineering"&gt;Reverse engineering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#scripting"&gt;Scripting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#simulation"&gt;Simulation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#social-networks-1"&gt;Social networks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#system"&gt;System&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#task-scheduling-1"&gt;Task scheduling&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#template-engine"&gt;Template engine&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#text-processing-1"&gt;Text processing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#text-search"&gt;Text search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#unsafe"&gt;Unsafe&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#video-1"&gt;Video&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#virtualization-1"&gt;Virtualization&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#web-programming"&gt;Web programming&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#registries"&gt;Registries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- tocstop --&gt; 
&lt;h2&gt;Applications&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alacritty/alacritty"&gt;alacritty&lt;/a&gt; - A cross-platform, GPU enhanced terminal emulator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tryandromeda/andromeda"&gt;Andromeda&lt;/a&gt; - JavaScript &amp;amp; TypeScript runtime built from the ground up in Rust ü¶Ä and powered by The Nova Engine.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.torproject.org/tpo/core/arti"&gt;Arti&lt;/a&gt; - An implementation of Tor. (So far, it's a not-very-complete client. But watch this space!) &lt;a href="https://crates.io/crates/arti"&gt;&lt;img src="https://img.shields.io/crates/v/arti.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cch123/asm-cli-rust"&gt;asm-cli-rust&lt;/a&gt; - An interactive assembly shell.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clash-verge-rev/clash-verge-rev"&gt;clash-verge-rev/clash-verge-rev&lt;/a&gt; - A cross-platform, modern Clash GUI based on tauri &amp;amp; rust, supporting Windows, macOS, and Linux.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudflare/boringtun"&gt;cloudflare/boringtun&lt;/a&gt; - A Userspace WireGuard VPN Implementation &lt;a href="https://crates.io/crates/boringtun"&gt;&lt;img src="https://img.shields.io/crates/v/boringtun.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/defguard/defguard"&gt;defguard&lt;/a&gt; - Enterprise Open Source SSO &amp;amp; WireGuard VPN with real 2FA/MFA&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/denoland/deno"&gt;denoland/deno&lt;/a&gt; - A secure JavaScript/TypeScript runtime built with V8 and Tokio &lt;a href="https://github.com/denoland/deno/actions"&gt;&lt;img src="https://github.com/denoland/deno/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/doprz/dipc"&gt;doprz/dipc&lt;/a&gt; - Convert your favorite images and wallpapers with your favorite color palettes/themes &lt;a href="https://crates.io/crates/dipc"&gt;&lt;img src="https://img.shields.io/crates/v/dipc" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EasyTier/EasyTier"&gt;EasyTier&lt;/a&gt; - A simple, full-featured and decentralized mesh VPN with WireGuard support. &lt;a href="https://crates.io/crates/easytier"&gt;&lt;img src="https://img.shields.io/crates/v/easytier" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/actions/"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/core.yml/badge.svg?sanitize=true" alt="GitHub actions" /&gt;&lt;/a&gt;&lt;a href="https://github.com/EasyTier/EasyTier/actions/"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/gui.yml/badge.svg?sanitize=true" alt="GitHub actions" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/edit"&gt;Edit&lt;/a&gt; - A simple editor for simple needs. &lt;a href="https://github.com/microsoft/edit/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/microsoft/edit/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fcsonline/drill"&gt;fcsonline/drill&lt;/a&gt; - A HTTP load testing application inspired by Ansible syntax&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/printfn/fend"&gt;fend&lt;/a&gt; - Arbitrary-precision unit-aware calculator &lt;a href="https://github.com/printfn/fend/actions/workflows/actions.yml"&gt;&lt;img src="https://github.com/printfn/fend/workflows/build/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fractalide/fractalide"&gt;Fractalide&lt;/a&gt; - Simple microservices&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/habitat-sh/habitat"&gt;habitat&lt;/a&gt; - A tool created by Chef to build, deploy, and manage applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imjacobclark/Herd"&gt;Herd&lt;/a&gt; - an experimental HTTP load testing application&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/hickory-dns"&gt;hickory-dns&lt;/a&gt; - A DNS-server &lt;a href="https://github.com/hickory-dns/hickory-dns/actions?query=workflow%3Atest"&gt;&lt;img src="https://github.com/hickory-dns/hickory-dns/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tonarino/innernet"&gt;innernet&lt;/a&gt; - An overlay or private mesh network that uses Wireguard under the hood&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/awslabs/flowgger"&gt;jedisct1/flowgger&lt;/a&gt; - A fast, simple and lightweight data collector&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PaddiM8/kalker"&gt;kalker&lt;/a&gt; - A scientific calculator that supports math-like syntax with user-defined variables, functions, derivation, integration, and complex numbers. Cross-platform + WASM support &lt;a href="https://github.com/PaddiM8/kalker/actions"&gt;&lt;img src="https://github.com/PaddiM8/kalker/workflows/Release/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hcavarsan/kftray"&gt;kftray&lt;/a&gt; - A cross-platform system tray app for managing and sharing multiple kubectl port-forward configurations. &lt;a href="https://github.com/hcavarsan/kftray/actions"&gt;&lt;img src="https://github.com/hcavarsan/kftray/workflows/Release/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/changlan/kytan"&gt;kytan&lt;/a&gt; - High Performance Peer-to-Peer VPN&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linkerd/linkerd2-proxy"&gt;linkerd/linkerd2-proxy&lt;/a&gt; - Ultralight service mesh for Kubernetes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maidsafe"&gt;MaidSafe&lt;/a&gt; - A decentralized platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/mdBook"&gt;mdBook&lt;/a&gt; - A command line utility to create books from markdown files &lt;a href="https://github.com/rust-lang/mdBook/actions"&gt;&lt;img src="https://github.com/rust-lang/mdBook/actions/workflows/main.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/web3infra-foundation/mega"&gt;Mega&lt;/a&gt; - A monorepo &amp;amp; monolithic codebase management system that supports Git, also is an unofficial open source implementation of Google Piper.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/metalbear-co/mirrord"&gt;mirrord&lt;/a&gt; - Connect your local process and your cloud environment, and run local code in cloud conditions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nicohman/eidolon"&gt;nicohman/eidolon&lt;/a&gt; - A steam and drm-free game registry and launcher for linux and macosx&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pijul.org"&gt;Pijul&lt;/a&gt; - A patch-based distributed version control system&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sebadob/rauthy"&gt;Rauthy&lt;/a&gt; - OpenID Connect Single Sign-On Identity &amp;amp; Access Management&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/raphamorim/rio"&gt;Rio&lt;/a&gt; - A hardware-accelerated GPU terminal emulator powered by WebGPU, focusing to run in desktops and browsers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aguacero7/rkik"&gt;rkik&lt;/a&gt; - CLI tool designed for stateless and passive NTP inspection, just as dig or ping are for DNS and ICMP. It supports async requests and continuous monitoring. &lt;a href="https://crates.io/crates/rkik"&gt;&lt;img src="https://img.shields.io/crates/v/rkik?logo=rust" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iot-ecology/rust-iot-platform"&gt;Rust Iot Platform&lt;/a&gt; - A high-performance IoT development platform built with Rust, designed for multi-protocol support and real-time data processing. This platform supports MQTT, WebSockets (WS), TCP, and CoAP protocols, making it highly flexible for diverse IoT applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudhead/rx"&gt;rx&lt;/a&gt; - Vi inspired Modern Pixel Art Editor&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ignisda/ryot"&gt;Ryot&lt;/a&gt; - A self hosted application to track media consumption, fitness, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sopaco/saga-reader"&gt;Saga Reader&lt;/a&gt; - A Blazing-Fast and Extremely-Lightweight Internet Reader driven by AI.Supports fetching of search engine information and RSS.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/servo/servo"&gt;Servo&lt;/a&gt; - A prototype web browser engine&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cfal/shoes"&gt;shoes&lt;/a&gt; - A multi-protocol proxy server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/shuttle-hq/shuttle"&gt;shuttle&lt;/a&gt; - A serverless platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GyulyVGC/sniffnet"&gt;Sniffnet&lt;/a&gt; - Cross-platform application to monitor your network traffic with ease &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/.github/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/gyulyvgc/sniffnet/rust.yml?logo=github" alt="build badge" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/sniffnet"&gt;&lt;img src="https://img.shields.io/crates/v/sniffnet?logo=rust" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swc-project/swc"&gt;SWC&lt;/a&gt; - super-fast TypeScript / JavaScript compiler&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/osa1/tiny"&gt;tiny&lt;/a&gt; - A terminal IRC client&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/upvpn/upvpn-app"&gt;UpVPN&lt;/a&gt; - WireGuard VPN client for macOS, Linux, and Windows built on Tauri.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x676e67/vproxy"&gt;vproxy&lt;/a&gt; - A high-performance HTTP/HTTPS/SOCKS5 proxy server &lt;a href="https://crates.io/crates/vproxy"&gt;&lt;img src="https://img.shields.io/crates/v/vproxy.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wasmerio/wasmer"&gt;wasmer&lt;/a&gt; - A safe and fast WebAssembly runtime supporting WASI and Emscripten &lt;a href="https://github.com/wasmerio/wasmer/actions"&gt;&lt;img src="https://github.com/wasmerio/wasmer/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/serayuzgur/weld"&gt;Weld&lt;/a&gt; - Full fake REST API generator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wezterm/wezterm"&gt;wezterm&lt;/a&gt; - A GPU-accelerated cross-platform terminal emulator and multiplexer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wasmerio/winterjs"&gt;WinterJS&lt;/a&gt; - A secure JavaScript runtime built with SpiderMonkey and Axum&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zellij-org/zellij"&gt;zellij&lt;/a&gt; - A terminal multiplexer (workspace) with batteries included&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Audio and Music&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kimono-koans/dano"&gt;dano&lt;/a&gt; - A hashdeep/md5tree (but much more) for media files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DasEtwas/enginesound"&gt;enginesound&lt;/a&gt; - A GUI and command line application used to procedurally generate semi-realistic engine sounds. Featuring in-depth configuration, variable sample rate and a frequency analysis window.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hinto-janai/festival"&gt;Festival&lt;/a&gt; - A local music player/server/client &lt;a href="https://github.com/hinto-janai/festival/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/hinto-janai/festival/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/figsoda/mmtc"&gt;figsoda/mmtc&lt;/a&gt; [&lt;a href="https://crates.io/crates/mmtc"&gt;mmtc&lt;/a&gt;] - Minimal mpd terminal client that aims to be simple yet highly configurable &lt;a href="https://github.com/figsoda/mmtc/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/figsoda/mmtc/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chaosprint/glicol"&gt;Glicol&lt;/a&gt; - Graph-oriented live coding language, for collaborative musicking in browsers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hrkfdn/ncspot"&gt;ncspot&lt;/a&gt; - Cross-platform ncurses Spotify client, inspired by ncmpc and the likes. &lt;a href="https://github.com/hrkfdn/ncspot/actions?query=workflow%3ABuild"&gt;&lt;img src="https://github.com/hrkfdn/ncspot/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/madeofpendletonwool/PinePods"&gt;Pinepods&lt;/a&gt; - A rust based podcast management system with multi-user support. Pinepods utilizes a central database so aspects like listen time and themes follow from device to device. With clients built using Tauri, it's a full cross-platform listening solution! &lt;a href="https://github.com/madeofpendletonwool/PinePods/actions/workflows/docker-publish.yml"&gt;&lt;img src="https://github.com/madeofpendletonwool/PinePods/actions/workflows/docker-publish.yml/badge.svg?sanitize=true" alt="Docker Container Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/agersant/polaris"&gt;Polaris&lt;/a&gt; - A music streaming application.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aome510/spotify-player"&gt;Spotify Player&lt;/a&gt; - A Spotify player in the terminal with full feature parity.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Spotifyd/spotifyd"&gt;Spotifyd&lt;/a&gt; - An open source Spotify client running as a UNIX daemon. &lt;a href="https://github.com/Spotifyd/spotifyd/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/Spotifyd/spotifyd/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Continuous Integration" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tramhao/termusic"&gt;termusic&lt;/a&gt; - Music Player TUI written&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tsirysndr/tunein-cli"&gt;tunein-cli&lt;/a&gt; - Browse and listen to thousands of radio stations across the globe right from your terminal &lt;a href="https://github.com/tsirysndr/tunein-cli/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/tsirysndr/tunein-cli/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sergree/whatbpm"&gt;WhatBPM&lt;/a&gt; - A daily statically generated information resource for electronic dance music producers. Provides daily analytics on the most frequently used values for each EDM genre: tempos, keys, root notes, and so on, using publicly available data such as Beatport and Spotify.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Blockchain&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-foundation/anchor"&gt;Anchor&lt;/a&gt; - Anchor is the leading development framework for building secure Solana programs (smart contracts).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradigmxyz/artemis"&gt;artemis&lt;/a&gt; - A simple, modular, and fast framework for writing MEV bots.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/eigerco/beerus"&gt;beerus&lt;/a&gt; - Beerus is a trustless StarkNet Light Client, ‚ö°blazing fast ‚ö° &lt;a href="https://github.com/eigerco/beerus/actions/workflows/check.yml"&gt;&lt;img src="https://github.com/eigerco/beerus/actions/workflows/check.yml/badge.svg?sanitize=true" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brentongunning/rust-sv"&gt;Bitcoin Satoshi's Vision&lt;/a&gt; [&lt;a href="https://crates.io/crates/sv"&gt;sv&lt;/a&gt;] - A library for working with Bitcoin SV.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/starkware-libs/cairo"&gt;cairo&lt;/a&gt; - Cairo is the first Turing-complete language for creating provable programs for general computation. This is also the native language of &lt;a href="https://www.starknet.io"&gt;StarkNet&lt;/a&gt;, a ZK-Rollup using STARK proofs &lt;img src="https://img.shields.io/github/workflow/status/starkware-libs/cairo/CI?style=flat-square&amp;amp;logo=github" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lambdaclass/cairo-vm"&gt;cairo-vm&lt;/a&gt; - Implementation of the Cairo VM &lt;a href="https://github.com/lambdaclass/cairo-vm/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/lambdaclass/cairo-vm/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chainx-org/ChainX"&gt;ChainX&lt;/a&gt; - Fully Decentralized Interchain Crypto Asset Management on Polkadot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/citahub/cita"&gt;CITA&lt;/a&gt; - A high performance blockchain kernel for enterprise users.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inv2004/coinbase-pro-rs"&gt;coinbase-pro-rs&lt;/a&gt; - Coinbase pro client, supports sync/async/websocket&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/diem/diem"&gt;Diem&lt;/a&gt; - Diem‚Äôs mission is to enable a simple global currency and financial infrastructure that empowers billions of people.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dusk-network/rusk"&gt;dusk-network/rusk&lt;/a&gt; - Reference implementation of Dusk, a privacy-focused, scalable FMI for real-world assets (RWA) and compliant financial applications. &lt;a href="https://github.com/dusk-network/rusk/actions/workflows/rusk_ci.yml"&gt;&lt;img src="https://github.com/dusk-network/rusk/actions/workflows/rusk_ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/romanz/electrs"&gt;electrumrs&lt;/a&gt; - An efficient re-implementation of Electrum Server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-ethereum/ethabi"&gt;ethabi&lt;/a&gt; - Encode and decode smart contract invocations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Limeth/ethaddrgen"&gt;ethaddrgen&lt;/a&gt; - Custom Ethereum vanity address generator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quilt/etk"&gt;etk&lt;/a&gt; - etk is a collection of tools for writing, reading, and analyzing EVM bytecode.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ChainSafe/forest"&gt;Forest&lt;/a&gt; - Filecoin implementation &lt;a href="https://app.circleci.com/pipelines/github/ChainSafe/forest?branch=main"&gt;&lt;img src="https://img.shields.io/circleci/build/gh/ChainSafe/forest/main?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/foundry-rs/foundry"&gt;Foundry&lt;/a&gt; - Foundry is a blazing fast, portable and modular toolkit for Ethereum application development. &lt;img src="https://img.shields.io/github/workflow/status/foundry-rs/foundry/test?style=flat-square" alt="Build Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mimblewimble/grin/"&gt;Grin&lt;/a&gt; - Evolution of the MimbleWimble protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jjyr/hdwallet"&gt;hdwallet&lt;/a&gt; [&lt;a href="https://crates.io/crates/hdwallet"&gt;hdwallet&lt;/a&gt;] - BIP-32 HD wallet related key derivation utilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/holochain/holochain"&gt;Holochain&lt;/a&gt; - Scalable P2P alternative to blockchain for all those distributed apps you always wanted to build. &lt;a href="https://github.com/holochain/holochain/actions/"&gt;&lt;img src="https://github.com/holochain/holochain/actions/workflows/autorebase.yml/badge.svg?sanitize=true" alt="detect critical check failures" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hyperlane-xyz/hyperlane-monorepo"&gt;Hyperlane&lt;/a&gt; - Framework for permissionless, modular interoperability. The offchain clients are written in Rust, as well as the smart contracts for Solana VM and CosmWasm.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/informalsystems/hermes"&gt;ibc-rs&lt;/a&gt; - Implementation of the &lt;a href="https://ibc.cosmos.network/"&gt;Interblockchain Communication&lt;/a&gt; protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/infincia/bip39-rs"&gt;infincia/bip39-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/bip39"&gt;bip39&lt;/a&gt;] - Implementation of BIP39.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/interlay/interbtc"&gt;interBTC&lt;/a&gt; - Trustless and fully decentralized Bitcoin bridge to Polkadot and Kusama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Joystream/joystream"&gt;Joystream&lt;/a&gt; - A user governed video platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kaspanet/rusty-kaspa"&gt;Kaspa&lt;/a&gt; - The fastest, open-source, decentralized &amp;amp; fully scalable Layer-1 in the world.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigp/lighthouse"&gt;Lighthouse&lt;/a&gt; - Ethereum Consensus Layer (CL) Client &lt;a href="https://github.com/sigp/lighthouse/actions"&gt;&lt;img src="https://github.com/sigp/lighthouse/actions/workflows/test-suite.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/near/nearcore"&gt;near/nearcore&lt;/a&gt; - decentralized smart-contract platform for low-end mobile devices.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nervosnetwork/ckb"&gt;Nervos CKB&lt;/a&gt; - Nervos CKB is a public permissionless blockchain, the common knowledge layer of Nervos network.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gakonst/opensea-rs"&gt;opensea-rs&lt;/a&gt; - Bindings &amp;amp; CLI to the Opensea API and Contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paritytech/parity-bitcoin"&gt;Parity-Bitcoin&lt;/a&gt; - The Parity Bitcoin client&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Phala-Network/phala-blockchain"&gt;Phala-Network/phala-blockchain&lt;/a&gt; - Confidential smart contract blockchain based on Intel SGX and Substrate&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paritytech/polkadot-sdk"&gt;polkadot-sdk&lt;/a&gt; - The Parity Polkadot Blockchain SDK&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradigmxyz/reth"&gt;reth&lt;/a&gt; - Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bluealloy/revm"&gt;revm&lt;/a&gt; - Revolutionary Machine (revm) is a fast Ethereum virtual machine.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-bitcoin/rust-bitcoin"&gt;rust-bitcoin&lt;/a&gt; - Library with support for de/serialization, parsing and executing on data structures and network messages related to Bitcoin.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lightningdevkit/rust-lightning"&gt;rust-lightning&lt;/a&gt; &lt;a href="https://crates.io/crates/lightning"&gt;&lt;img src="https://img.shields.io/crates/v/lightning.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt; - Bitcoin Lightning library. The main crate,&lt;code&gt;lightning&lt;/code&gt;, does not handle networking, persistence, or any other I/O. Thus,it is runtime-agnostic, but users must implement basic networking logic, chain interactions, and disk storage.po on linking crate.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ergoplatform/sigma-rust"&gt;sigma-rust&lt;/a&gt; - ErgoTree interpreter and wallet-related features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/autonomys/subspace"&gt;Subspace&lt;/a&gt; - The first layer-one blockchain that can fully resolve the blockchain trilemma by simultaneously achieving scalability, security, and decentralization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MystenLabs/sui"&gt;Sui&lt;/a&gt; - A next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the Move programming language.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alloy-rs/svm-rs"&gt;svm-rs&lt;/a&gt; - Solidity-Compiler Version Manager.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cometbft/tendermint-rs"&gt;tendermint-rs&lt;/a&gt; - Tendermint blockchain data structures and clients&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/howardwu/wagyu"&gt;wagyu&lt;/a&gt; [&lt;a href="https://crates.io/crates/wagyu"&gt;wagyu&lt;/a&gt;] - Library for generating cryptocurrency wallets&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zcash/zcash"&gt;zcash&lt;/a&gt; - Zcash is an implementation of the "Zerocash" protocol.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apecloud/ape-dts"&gt;apecloud/ape-dts&lt;/a&gt; - Data Transfer Suite. Provides data replication between MySQL, PostgreSQL, Redis, MongoDB, Kafka, ClickHouse, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atomicdata-dev/atomic-server/"&gt;Atomic-Server&lt;/a&gt; [&lt;a href="https://crates.io/crates/atomic_server"&gt;atomic-server&lt;/a&gt;] - NoSQL graph database with realtime updates, dynamic indexing and easy-to-use GUI for CMS purposes. &lt;a href="https://github.com/atomicdata-dev/atomic-server/actions"&gt;&lt;img src="https://github.com/atomicdata-dev/atomic-server/actions/workflows/release_please.yml/badge.svg?sanitize=true" alt="Release" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cozodb/cozo"&gt;CozoDB&lt;/a&gt; - A transactional, relational database that uses Datalog and focuses on graph data and algorithms. Time-travel-capable, and fast! &lt;a href="https://github.com/cozodb/cozo/actions/workflows/build.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/cozodb/cozo/build.yml?branch=main" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Rustixir/darkbird"&gt;darkbird&lt;/a&gt; [&lt;a href="https://crates.io/crates/darkbird"&gt;darkbird&lt;/a&gt;] - HighConcurrency, RealTime, InMemory storage inspired by erlang mnesia&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/databendlabs/databend"&gt;Databend&lt;/a&gt; - A Modern Real-Time Data Processing &amp;amp; Analytics DBMS with Cloud-Native Architecture &lt;a href="https://github.com/databendlabs/databend/actions"&gt;&lt;img src="https://github.com/databendlabs/databend/actions/workflows/release.yml/badge.svg?sanitize=true" alt="Release" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dbpunk-labs/db3"&gt;DB3 Network&lt;/a&gt; - DB3 is a community-driven blockchain layer2 decentralized database network &lt;a href="https://github.com/dbpunk-labs/db3/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/dbpunk-labs/db3/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="GitHub Workflow Status (with event)" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/erikgrinaker/toydb"&gt;erikgrinaker/toydb&lt;/a&gt; - Distributed SQL database, written as a learning project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deuxfleurs-org/garage"&gt;Garage&lt;/a&gt; [&lt;a href="https://crates.io/crates/garage"&gt;garage&lt;/a&gt;] - S3-compatible distributed object storage service designed for self-hosting at a small-to-medium scale. &lt;a href="https://woodpecker.deuxfleurs.fr/repos/1"&gt;&lt;img src="https://woodpecker.deuxfleurs.fr/api/badges/1/status.svg?sanitize=true" alt="status-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gluesql/gluesql"&gt;GlueSQL&lt;/a&gt; - Rust library for SQL databases that includes a parser (sqlparser-rs), an execution layer, and a variety of storage options, both persistent and non-persistent, all in one package. &lt;a href="https://crates.io/crates/gluesql"&gt;&lt;img src="https://img.shields.io/crates/v/gluesql.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/grepTimeTeam/greptimedb/"&gt;GreptimeDB&lt;/a&gt; - An open-source, cloud-native, distributed time-series database with PromQL/SQL/Python supported.&lt;a href="https://github.com/greptimeTeam/greptimedb/actions/workflows/develop.yml"&gt;&lt;img src="https://github.com/greptimeTeam/greptimedb/actions/workflows/develop.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HelixDB/helix-db"&gt;HelixDB&lt;/a&gt; - A powerful, graph-vector database for intelligent data storage for RAG and AI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sebadob/hiqlite"&gt;Hiqlite&lt;/a&gt; - highly-available, embeddable, raft-based SQLite + cache&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/indradb"&gt;indradb&lt;/a&gt; - Graph database&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KipData/KiteSQL"&gt;KiteSQL&lt;/a&gt; - SQL as a Function for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lancedb/lancedb"&gt;lancedb&lt;/a&gt; [&lt;a href="https://crates.io/crates/vectordb"&gt;vectordb&lt;/a&gt;] - A serverless, low-latency vector database for AI applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lucid-kv/lucid"&gt;Lucid&lt;/a&gt; - High performance and distributed KV store accessible through a HTTP API. &lt;a href="https://github.com/lucid-kv/lucid/actions?workflow=Lucid"&gt;&lt;img src="https://github.com/lucid-kv/lucid/workflows/Lucid/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MaterializeInc/materialize"&gt;Materialize&lt;/a&gt; - Streaming SQL database powered by Timely Dataflow &lt;span&gt;üí≤&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vincent-herlemont/native_db"&gt;native_db&lt;/a&gt; [&lt;a href="https://crates.io/crates/native_db"&gt;native_db&lt;/a&gt;] - Drop-in, embedded database for multi-platform apps (server, desktop, mobile). Sync Rust types effortlessly&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neondatabase/neon"&gt;Neon&lt;/a&gt; - Serverless Postgres. We separated storage and compute to offer autoscaling, branching, and bottomless storage.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mit-pdos/noria"&gt;noria&lt;/a&gt; [&lt;a href="https://crates.io/crates/noria"&gt;noria&lt;/a&gt;] - Dynamically changing, partially-stateful data-flow for web application backends&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oxigraph/oxigraph"&gt;oxigraph/oxigraph&lt;/a&gt; [&lt;a href="https://crates.io/crates/oxigraph"&gt;oxigraph&lt;/a&gt;] - graph database implementing the &lt;a href="https://www.w3.org/TR/sparql11-overview/"&gt;SPARQL&lt;/a&gt; standard &lt;img src="https://img.shields.io/crates/v/oxigraph?logo=Rust" alt="Crates.io Version" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradedb/paradedb/"&gt;ParadeDB&lt;/a&gt; - ParadeDB is an Elasticsearch alternative built on Postgres, designed for real-time search and analytics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paritytech/parity-db"&gt;ParityDB&lt;/a&gt; - Fast and reliable database, optimised for read operation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PumpkinDB/PumpkinDB"&gt;PumpkinDB&lt;/a&gt; - an event sourcing database engine&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant"&gt;Qdrant&lt;/a&gt; - An open source vector similarity search engine with extended filtering support &lt;a href="https://github.com/qdrant/qdrant/actions"&gt;&lt;img src="https://github.com/qdrant/qdrant/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Qrlew/qrlew"&gt;Qrlew/qrlew&lt;/a&gt; [&lt;a href="https://crates.io/crates/qrlew"&gt;qrlew&lt;/a&gt;] - The SQL-to-SQL Differential Privacy layer &lt;a href="https://github.com/Qrlew/qrlew/actions"&gt;&lt;img src="https://github.com/Qrlew/qrlew/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Qrlew" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/v/qrlew?logo=Rust" alt="Crates.io Version" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RisingWaveLabs/risingwave"&gt;RisingWaveLabs/RisingWave&lt;/a&gt; - the next-generation streaming database in the cloud &lt;a href="https://github.com/risingwavelabs/risingwave/actions"&gt;&lt;img src="https://github.com/risingwavelabs/risingwave/actions/workflows/labeler.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/seppo0010/rsedis"&gt;seppo0010/rsedis&lt;/a&gt; - A Redis reimplementation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/skytable/skytable"&gt;Skytable&lt;/a&gt; - A multi-model NoSQL database &lt;img src="https://img.shields.io/github/workflow/status/skytable/skytable/Tests?style=flat-square" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/sled"&gt;sled&lt;/a&gt; - A (beta) modern embedded database &lt;a href="https://github.com/spacejam/sled/actions?workflow=Rust"&gt;&lt;img src="https://github.com/spacejam/sled/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orbitinghail/sqlsync"&gt;SQLSync&lt;/a&gt; - Multiplayer offline-first SQLite &lt;a href="https://github.com/orbitinghail/sqlsync/actions?query=branch%3Amain"&gt;&lt;img src="https://github.com/orbitinghail/sqlsync/actions/workflows/actions.yaml/badge.svg?branch=main" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/surrealdb/surrealdb"&gt;SurrealDB&lt;/a&gt; - A scalable, distributed, document-graph database &lt;a href="https://github.com/surrealdb/surrealdb/actions"&gt;&lt;img src="https://img.shields.io/github/workflow/status/surrealdb/surrealdb/Continuous%20integration/main" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/terminusdb/terminusdb-store"&gt;TerminusDB&lt;/a&gt; - open source graph database and document store &lt;a href="https://github.com/terminusdb/terminusdb-store/actions"&gt;&lt;img src="https://github.com/terminusdb/terminusdb-store/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tikv/tikv"&gt;tikv&lt;/a&gt; - A distributed KV database in Rust &lt;a href="https://ci.pingcap.net/job/tikv_ghpr_test/"&gt;&lt;img src="https://ci.pingcap.net/job/tikv_ghpr_test/badge/icon" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tonbo-io/tonbo"&gt;Tonbo&lt;/a&gt; - Tonbo is an embedded persistent database built on Apache Arrow &amp;amp; Parquet &lt;a href="https://crates.io/crates/tonbo"&gt;&lt;img src="https://img.shields.io/crates/v/tonbo.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trailbaseio/trailbase"&gt;TrailBase&lt;/a&gt; - A fast, lightweight, single-file FireBase alternative with type-safe APIs, built-in V8 JS/ES6/TS engine, auth and admin dashboard &lt;a href="https://github.com/trailbaseio/trailbase/actions?workflow=test"&gt;&lt;img src="https://github.com/trailbaseio/trailbase/workflows/test/badge.svg?sanitize=true" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tursodatabase/turso"&gt;Turso&lt;/a&gt; - Turso Database is an in-process SQL database, compatible with SQLite.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/unum-cloud/usearch"&gt;USearch&lt;/a&gt; - Similarity Search Engine for Vectors and Strings &lt;a href="https://crates.io/crates/usearch"&gt;&lt;img src="https://img.shields.io/crates/v/usearch.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kn0sys/valentinus"&gt;valentinus&lt;/a&gt; - Next generation vector database built with LMDB bindings &lt;a href="https://crates.io/crates/valentinus"&gt;&lt;img src="https://img.shields.io/crates/v/valentinus" alt="Crates.io Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vorot93/libmdbx-rs"&gt;vorot93/libmdbx-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/mdbx-sys"&gt;mdbx-sys&lt;/a&gt;] - Bindings for MDBX, a "fast, compact, powerful, embedded, transactional key-value database, with permissive license". This is a fork of mozilla/lmdb-rs with patches to make it work with libmdbx.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/naomijub/wooridb"&gt;WooriDB&lt;/a&gt; - General purpose time serial database inspired by Crux and Datomic.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Embedded&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/haobogu/rmk"&gt;rmk&lt;/a&gt; - A feature-rich keyboard firmware.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-osdev/uefi-rs"&gt;uefi-rs&lt;/a&gt; - Rusty wrapper for the Unified Extensible Firmware Interface. This crate makes it easy to develop Rust software that leverages safe, convenient, and performant abstractions for UEFI functionality.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Emulators&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://crates.io/keywords/emulator"&gt;crates matching keyword 'emulator'&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CHIP-8 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ColinEberhardt/wasm-rust-chip8"&gt;ColinEberhardt/wasm-rust-chip8&lt;/a&gt; - A WebAssembly CHIP-8 emulator.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/starrhorne/chip8-rust"&gt;starrhorne/chip8-rust&lt;/a&gt; - chip8 emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Commodore 64 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kondrak/rust64"&gt;kondrak/rust64&lt;/a&gt; - Commodore 64 emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Flash Player 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ruffle-rs/ruffle"&gt;Ruffle&lt;/a&gt; - Ruffle is an Adobe Flash Player emulator. Ruffle targets both the desktop and the web using WebAssembly. &lt;a href="https://github.com/ruffle-rs/ruffle/actions/workflows/test_rust.yml"&gt;&lt;img src="https://github.com/ruffle-rs/ruffle/actions/workflows/test_rust.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ruffle-rs/ruffle/actions/workflows/test_web.yml"&gt;&lt;img src="https://github.com/ruffle-rs/ruffle/actions/workflows/test_web.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Gameboy 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Gekkio/mooneye-gb"&gt;Gekkio/mooneye-gb&lt;/a&gt; - A Game Boy research project and emulator&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/joamag/boytacean"&gt;joamag/boytacean&lt;/a&gt; - GameBoy Color emulator that runs on the Web using WebAssembly.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mohanson/gameboy"&gt;mohanson/gameboy&lt;/a&gt; - Full featured Cross-platform GameBoy emulator. Forever boys!.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mvdnes/rboy"&gt;mvdnes/rboy&lt;/a&gt; - A Gameboy Emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Gameboy Advance 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/michelhe/rustboyadvance-ng"&gt;michelhe/rustboyadvance-ng&lt;/a&gt; - RustboyAdvance-ng is a Gameboy Advance emulator with desktop, android and &lt;a href="https://michelhe.github.io/rustboyadvance-ng/"&gt;WebAssembly&lt;/a&gt; support. &lt;a href="https://github.com/michelhe/rustboyadvance-ng/actions?query=workflow%3ADeploy"&gt;&lt;img src="https://github.com/michelhe/rustboyadvance-ng/actions/workflows/deploy.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;GameMaker 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/OpenGMK/OpenGMK"&gt;OpenGMK&lt;/a&gt; - OpenGMK is a modern rewrite of the proprietary GameMaker Classic engines, providing a full sourceport of the runner, a decompiler, a TASing framework, and libraries for working with gamedata yourself.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;IBM PC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dbalsom/martypc"&gt;MartyPC&lt;/a&gt; - An IBM PC/XT emulator written in Rust.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Intel 8080 CPU 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mohanson/i8080"&gt;mohanson/i8080&lt;/a&gt; - Intel 8080 CPU emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;iOS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/touchHLE/touchHLE"&gt;touchHLE&lt;/a&gt; - High-level emulator for iPhone OS apps&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;iPod 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/daniel5151/clicky"&gt;clicky&lt;/a&gt; - A clickwheel iPod emulator (WIP)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NES 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/koute/pinky"&gt;koute/pinky&lt;/a&gt; - A NES emulator&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pcwalton/sprocketnes"&gt;pcwalton/sprocketnes&lt;/a&gt; - A NES emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Nintendo 64 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gopher64/gopher64"&gt;gopher64&lt;/a&gt; - N64 emulator written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Nintendo DS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kelpsyberry/dust"&gt;dust&lt;/a&gt; - A Nintendo DS emulator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;PlayStation 4 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/obhq/obliteration"&gt;Obliteration&lt;/a&gt; - Experimental PS4 emulator for Windows, macOS and Linux &lt;a href="https://github.com/obhq/obliteration/actions/workflows/main.yml"&gt;&lt;img src="https://github.com/obhq/obliteration/actions/workflows/main.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Shockwave Player 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/igorlira/dirplayer-rs"&gt;DirPlayer&lt;/a&gt; - A web-compatible Shockwave Player emulator written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ZX Spectrum 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustzx/rustzx"&gt;rustzx/rustzx&lt;/a&gt; - &lt;a href="https://github.com/rustzx/rustzx/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/rustzx/rustzx/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="RustZX CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;File manager&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Canop/broot"&gt;broot&lt;/a&gt; - A new way to see and navigate directory trees (get an overview of a directory, even a big one; find a directory then &lt;code&gt;cd&lt;/code&gt; to it; never lose track of file hierarchy while you search; manipulate your files, ...), further reading &lt;a href="https://dystroy.org/broot/"&gt;dystroy.org/broot&lt;/a&gt; &lt;a href="https://crates.io/crates/broot"&gt;&lt;img src="https://img.shields.io/crates/v/broot.svg?sanitize=true" alt="Latest Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kamiyaa/joshuto"&gt;joshuto&lt;/a&gt; - ranger-like terminal file manager&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sayanarijit/xplr"&gt;xplr&lt;/a&gt; - A hackable, minimal, fast TUI file explorer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sxyazi/yazi"&gt;yazi&lt;/a&gt; - Blazing fast terminal file manager, based on async I/O.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Finance&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/#payments"&gt;Payments&lt;/a&gt; applications.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Sajjon/klirr"&gt;klirr&lt;/a&gt; [&lt;a href="https://crates.io/crates/klirr"&gt;klirr&lt;/a&gt;] - Zero-maintenance and smart FOSS generating beautiful invoices for services and expenses.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tackler-ng/tackler"&gt;tackler&lt;/a&gt; [&lt;a href="https://crates.io/crates/tackler"&gt;tackler&lt;/a&gt;] - Fast, reliable bookkeeping engine with native GIT SCM support for plain text accounting &lt;a href="https://github.com/tackler-ng/tackler/raw/main/.github/workflows/ci.yml"&gt;&lt;img src="https://github.com/tackler-ng/tackler/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI Badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tarkah/tickrs"&gt;tarkah/tickrs&lt;/a&gt; - Realtime ticker data in your terminal&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Games&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://github.com/PistonDevelopers/piston/wiki/Games-Made-With-Piston"&gt;Games Made With Piston&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/buxx/OpenCombat"&gt;buxx/OpenCombat&lt;/a&gt; - A realtime 2nd world war tactical game&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thomas-mauran/chess-tui"&gt;chess-tui&lt;/a&gt; - A Chess TUI implementation ‚ôüÔ∏è&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/citybound/citybound"&gt;citybound&lt;/a&gt; - The city sim you deserve&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cristicbz/rust-doom"&gt;cristicbz/rust-doom&lt;/a&gt; - A renderer for Doom, may progress to being a playable game&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/doukutsu-rs/doukutsu-rs"&gt;doukutsu-rs&lt;/a&gt; - Reimplementation of Cave Story engine with some enhancements.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/garkimasera/rusted-ruins"&gt;garkimasera/rusted-ruins&lt;/a&gt; - Extensible open world rogue like game with pixel art&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/unhappychoice/gittype"&gt;GitType&lt;/a&gt; - A CLI code-typing game that turns your source code into typing challenges&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla-devs/ferium"&gt;gorilla-devs/ferium&lt;/a&gt; - Ferium is a fast and feature rich CLI program for downloading and updating Minecraft mods from Modrinth, CurseForge, and GitHub Releases, and modpacks from Modrinth and CurseForge &lt;img src="https://github.com/gorilla-devs/ferium/actions/workflows/build.yml/badge.svg?branch=main" alt="ferium build" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HactarCE/Hyperspeedcube"&gt;HactarCE/Hyperspeedcube&lt;/a&gt; - A modern, beginner-friendly 3D and 4D Rubik's cube simulator with customizable mouse and keyboard controls and advanced features for speedsolving&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lifthrasiir/angolmois-rust"&gt;lifthrasiir/angolmois-rust&lt;/a&gt; - A minimalistic music video game which supports the BMS format&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maras-archive/rsnake"&gt;maras-archive/rsnake&lt;/a&gt; - Snake.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mcthesw/game-save-manager"&gt;mcthesw/game-save-manager&lt;/a&gt; - A user-friendly tool for managing game saves &lt;a href="https://github.com/mcthesw/game-save-manager/actions/workflows/tauri.yml"&gt;&lt;img src="https://github.com/mcthesw/game-save-manager/actions/workflows/tauri.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mtkennerly/ludusavi"&gt;mtkennerly/ludusavi&lt;/a&gt; - Backup tool for PC game saves &lt;a href="https://github.com/mtkennerly/ludusavi/actions/workflows/main.yaml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/mtkennerly/ludusavi/main.yaml?logo=github" alt="build badge" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/ludusavi"&gt;&lt;img src="https://img.shields.io/crates/v/ludusavi?logo=rust" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ozkriff/zemeroth"&gt;ozkriff/zemeroth&lt;/a&gt; - A small 2D turn-based hexagonal strategy game&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dpc/rhex"&gt;rhex&lt;/a&gt; - hexagonal ascii roguelike&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rsaarelm/magog"&gt;rsaarelm/magog&lt;/a&gt; - A roguelike game.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SoftbearStudios/mk48"&gt;SoftbearStudios/mk48&lt;/a&gt; - Mk48.io is an online multiplayer naval combat game&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swatteau/sokoban-rs"&gt;swatteau/sokoban-rs&lt;/a&gt; - A Sokoban implementation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thetawavegame/thetawave-legacy"&gt;thetawavegame/thetawave-legacy&lt;/a&gt; - A space shooter game that strives to be an entry point for new game developers to make their first contributions. &lt;img src="https://github.com/thetawavegame/thetawave-legacy/actions/workflows/ci.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Thinkofname/rust-quake"&gt;Thinkofname/rust-quake&lt;/a&gt; - Quake map renderer.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/topheman/snake-pipe-rust"&gt;topheman/snake-pipe-rust&lt;/a&gt; - A snake game in the terminal based on stdin/stdout (+tcp and unix domain sockets) &lt;a href="https://crates.io/crates/snakepipe"&gt;&lt;img src="https://img.shields.io/crates/v/snakepipe.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/ttyperacer/terminal-typeracer"&gt;ttyperacer/terminal-typeracer&lt;/a&gt; - Single player typing test game written for the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/veloren/veloren"&gt;Veloren&lt;/a&gt; - An open world, open source multiplayer voxel RPG game currently in alpha development &lt;a href="https://gitlab.com/veloren/veloren/-/pipelines"&gt;&lt;img src="https://gitlab.com/veloren/veloren/badges/master/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zipxing/rust_pixel"&gt;zipxing/rust_pixel&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust_pixel"&gt;rust_pixel&lt;/a&gt;] - A 2D pixel art game engine &amp;amp; rapid prototyping tools, supporting both text and graphical rendering modes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ozkriff/zoc"&gt;Zone of Control&lt;/a&gt; - A turn-based hexagonal strategy game&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graphics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dps/rust-raytracer"&gt;dps/rust-raytracer&lt;/a&gt; - An implementation of a very simple raytracer based on Ray Tracing in One Weekend by Peter Shirley.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flxzt/rnote"&gt;flxzt/rnote&lt;/a&gt; - Sketch and take handwritten notes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivanceras/svgbob"&gt;ivanceras/svgbob&lt;/a&gt; - converts ASCII diagrams into SVG graphics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KaminariOS/rustracer"&gt;KaminariOS/rustracer&lt;/a&gt; - A PBR glTF 2.0 renderer based on Vulkan ray-tracing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Limeth/euclider"&gt;Limeth/euclider&lt;/a&gt; - A real-time 4D CPU ray tracer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linebender/resvg"&gt;linebender/resvg&lt;/a&gt; - An SVG rendering library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rodrigorc/papercraft"&gt;rodrigorc/papercraft&lt;/a&gt; - A tool to unwrap 3D models and create them in paper with scissors and glue.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustq/vue-skia"&gt;rustq/vue-skia&lt;/a&gt; - Skia based 2d graphics vue rendering library. It is based on Rust to implement software rasterization to perform rendering.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/valora"&gt;turnage/valora&lt;/a&gt; - A library for generative fine art&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Twinklebear/tray_rust"&gt;Twinklebear/tray_rust&lt;/a&gt; - A ray tracer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wahn/rs_pbrt"&gt;wahn/rs_pbrt&lt;/a&gt; - Implements a counterpart to the PBRT book's (3rd edition) C++ code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Image processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imager-io/imager"&gt;Imager&lt;/a&gt; - Automated image optimization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oxipng/oxipng"&gt;oxipng&lt;/a&gt; [&lt;a href="https://crates.io/crates/oxipng"&gt;oxipng&lt;/a&gt;] - Multithreaded PNG optimizer written in Rust. &lt;a href="https://github.com/oxipng/oxipng/actions?query=branch%3Amaster"&gt;&lt;img src="https://github.com/oxipng/oxipng/workflows/oxipng/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/oxipng"&gt;&lt;img src="https://img.shields.io/crates/v/oxipng.svg?sanitize=true" alt="Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Industrial automation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/locka99/opcua"&gt;locka99/opcua&lt;/a&gt; - A &lt;a href="https://opcfoundation.org/about/opc-technologies/opc-ua/"&gt;OPC UA&lt;/a&gt; library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/slowtec/tokio-modbus"&gt;slowtec/tokio-modbus&lt;/a&gt; - A &lt;a href="https://tokio.rs"&gt;tokio&lt;/a&gt;-based &lt;a href="https://modbus.org"&gt;modbus&lt;/a&gt; library.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Message Queue&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/robustmq/robustmq"&gt;RobustMQ&lt;/a&gt; - Next generation cloud-native converged message queue.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mxsm/rocketmq-rust"&gt;Rocketmq-Rust&lt;/a&gt; - üöÄApache RocketMQ build in Rustü¶Ä. Faster, safer, and with lower memory usage.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MLOps&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tensorzero/tensorzero"&gt;TensorZero&lt;/a&gt; - data &amp;amp; learning flywheel for LLMs that unifies inference, observability, optimization, and experimentation &lt;img src="https://img.shields.io/github/check-runs/tensorzero/tensorzero/main" alt="TensorZero Build Status" /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Observability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/avito-tech/bioyino"&gt;avito-tech/bioyino&lt;/a&gt; - A high-performance scalable StatsD compatible server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MegaAntiCheat/client-backend"&gt;MegaAntiCheat/client-backend&lt;/a&gt; - The client app for &lt;a href="https://github.com/MegaAntiCheat"&gt;MAC&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openobserve/openobserve"&gt;openobserve&lt;/a&gt; - 10x easier, 140x lower storage cost, high performance, petabyte scale - Elasticsearch/Splunk/Datadog alternative.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/opentelemetry"&gt;OpenTelemetry&lt;/a&gt; - OpenTelemetry provides a single set of APIs, libraries, agents, and collector services to capture distributed traces and metrics from your application. You can analyze them using Prometheus, Jaeger, and other observability tools. &lt;a href="https://github.com/open-telemetry/opentelemetry-rust/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/open-telemetry/opentelemetry-rust/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="GitHub Actions CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quickwit-oss/quickwit"&gt;Quickwit-oss/quickwit&lt;/a&gt; - Cloud-native and highly cost-efficient search engine for log management. &lt;a href="https://github.com/quickwit-oss/quickwit/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/quickwit-oss/quickwit/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hubblo-org/scaphandre"&gt;Scaphandre&lt;/a&gt; - A power consumption monitoring agent, to track host and each service power consumption and enable designing systems and applications for more sustainability. Designed to fit any monitoring toolchain (already supports prometheus, warp10, riemann...).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vectordotdev/vector"&gt;vectordotdev/vector&lt;/a&gt; - A High-Performance, Logs, Metrics, &amp;amp; Events Router.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Operating systems&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://github.com/flosse/rust-os-comparison"&gt;A comparison of operating systems written in Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x59616e/SteinsOS"&gt;0x59616e/SteinsOS&lt;/a&gt; - An OS for armv8-a architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/adamperkowski/highlightos"&gt;adamperkowski/highlightos&lt;/a&gt; - x86_64 OS kernel written in Rust &amp;amp; Assembly.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Andy-Python-Programmer/aero"&gt;Andy-Python-Programmer/aero&lt;/a&gt; - A modern, unix-like operating system following the monolithic kernel design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/asterinas/asterinas"&gt;asterinas/asterinas&lt;/a&gt; - A secure, fast, and general-purpose OS kernel that provides Linux-compatible ABI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DragonOS-Community/DragonOS"&gt;DragonOS-Community/DragonOS&lt;/a&gt; - An operating system with a self-developed kernel from scratch and Linux compatibility.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.redox-os.org/redox-os/redox"&gt;redox-os/redox&lt;/a&gt; - A Unix-like general-purpose microkernel-based operating system with a focus on security, stability, performance, correctness, simplicity and pragmatism that aims to be a complete alternative for Linux and BSD.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thepowersgang/rust_os"&gt;thepowersgang/rust_os&lt;/a&gt; - An OS kernel written in rust. Non POSIX&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/theseus-os/Theseus"&gt;theseus-os/Theseus&lt;/a&gt; - A safe-language, single address space and single privilege level OS written from scratch - &lt;a href="https://www.theseus-os.com/Theseus/book/index.html"&gt;&lt;img src="https://img.shields.io/github/workflow/status/theseus-os/Theseus/Documentation?label=docs%20build" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tock/tock"&gt;tock/tock&lt;/a&gt; - A secure embedded operating system for Cortex-M based microcontrollers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vinc/moros"&gt;vinc/moros&lt;/a&gt; - A text-based hobby operating system targeting computers with a x86-64 architecture and a BIOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Package Managers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/helsing-ai/buffrs"&gt;helsing-ai/buffrs&lt;/a&gt; [&lt;a href="https://crates.io/crates/buffrs"&gt;buffrs&lt;/a&gt;] - A modern package manager for protocol buffers and gRPC architectures.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/rebos"&gt;rebos&lt;/a&gt; - A declarative way to automate package management on any linux distro &lt;a href="https://crates.io/crates/rebos"&gt;&lt;img src="https://img.shields.io/crates/v/rebos?logo=rust" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Payments&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch"&gt;hyperswitch&lt;/a&gt; - An open source payments orchestrator that lets you connect with multiple payment processors and route payment traffic effortlessly, all with a single API integration &lt;img src="https://img.shields.io/github/last-commit/juspay/hyperswitch?style=flat-square" alt="GitHub last commit" /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Productivity&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/jiggy"&gt;0xdea/jiggy&lt;/a&gt; [&lt;a href="https://crates.io/crates/jiggy"&gt;jiggy&lt;/a&gt;] - Minimalistic cross-platform mouse jiggler written in Rust &lt;a href="https://github.com/0xdea/oneiromancer/jiggy/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/jiggy/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigoden/aichat"&gt;aichat&lt;/a&gt; - All-in-one LLM CLI tool featuring Shell Assistant, Chat-REPL, RAG, AI Tools &amp;amp; Agents, with access to OpenAI, Claude, Gemini, Ollama, Groq, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ast-grep/ast-grep"&gt;ast-grep&lt;/a&gt; - A CLI tool for code structural search, lint and rewriting.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nikolassv/bartib"&gt;Bartib&lt;/a&gt; [&lt;a href="https://crates.io/crates/bartib"&gt;Bartib&lt;/a&gt;] - A simple timetracker for the command line &lt;a href="https://github.com/nikolassv/bartib/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/nikolassv/bartib/actions/workflows/test.yml/badge.svg?branch=master" alt="Tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/espanso/espanso"&gt;espanso&lt;/a&gt; - A cross-platform Text Expander. &lt;a href="https://github.com/espanso/espanso/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/espanso/espanso/actions/workflows/ci.yml/badge.svg?branch=dev&amp;amp;event=push" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/eureka"&gt;eureka&lt;/a&gt; - A CLI tool to input and store your ideas without leaving the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/unobserved-io/Furtherance"&gt;Furtherance&lt;/a&gt; - Time tracking app built with GTK4&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/illacloud/illa"&gt;illacloud/illa&lt;/a&gt; - Low-code internal tool builder.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kruseio/hygg"&gt;kruseio/hygg&lt;/a&gt; [&lt;a href="https://crates.io/crates/hygg"&gt;hygg&lt;/a&gt;] - üìö Simplifying the way you read. Minimalistic Vim-like TUI document reader.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lldap/lldap"&gt;LLDAP&lt;/a&gt; - Simplified LDAP interface for authentication.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pier-cli/pier"&gt;pier-cli/pier&lt;/a&gt; - A central repository to manage (add, search metadata, etc.) all your one-liners, scripts, tools, and CLIs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ShadoySV/work-break"&gt;ShadoySV/work-break&lt;/a&gt; [&lt;a href="https://crates.io/crates/work-break"&gt;work-break&lt;/a&gt;] - Work and rest time balancer taking into account your current and today strain &lt;a href="https://github.com/ShadoySV/work-break/actions/workflows/release.yml"&gt;&lt;img src="https://github.com/ShadoySV/work-break/actions/workflows/release.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yashs662/rust_kanban"&gt;yashs662/rust_kanban&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust-kanban"&gt;rust-kanban&lt;/a&gt;] &lt;a href="https://github.com/yashs662/rust_kanban/releases"&gt;&lt;img src="https://github.com/yashs662/rust_kanban/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt; - A Kanban App for the terminal&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Routing protocols&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/holo-routing/holo"&gt;Holo&lt;/a&gt; - Holo is a suite of routing protocols designed to support high-scale and automation-driven networks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/osrg/rustybgp"&gt;RustyBGP&lt;/a&gt; - BGP&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Security tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/augur"&gt;0xdea/augur&lt;/a&gt; [&lt;a href="https://crates.io/crates/augur"&gt;augur&lt;/a&gt;] - Reverse engineering assistant that extracts strings and related pseudo-code from a binary file &lt;a href="https://github.com/0xdea/augur/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/augur/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/haruspex"&gt;0xdea/haruspex&lt;/a&gt; [&lt;a href="https://crates.io/crates/haruspex"&gt;haruspex&lt;/a&gt;] - Vulnerability research assistant that extracts pseudo-code from the IDA Hex-Rays decompiler &lt;a href="https://github.com/0xdea/haruspex/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/haruspex/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/oneiromancer"&gt;0xdea/oneiromancer&lt;/a&gt; [&lt;a href="https://crates.io/crates/oneiromancer"&gt;oneiromancer&lt;/a&gt;] - Reverse engineering assistant that uses a locally running LLM to aid with source code analysis &lt;a href="https://github.com/0xdea/oneiromancer/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/oneiromancer/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xdea/rhabdomancer"&gt;0xdea/rhabdomancer&lt;/a&gt; [&lt;a href="https://crates.io/crates/rhabdomancer"&gt;rhabdomancer&lt;/a&gt;] - Vulnerability research assistant that locates all calls to potentially insecure API functions in a binary file &lt;a href="https://github.com/0xdea/rhabdomancer/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/0xdea/rhabdomancer/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Lissy93/AdGuardian-Term"&gt;AdGuardian-Term&lt;/a&gt; [&lt;a href="https://crates.io/crates/adguardian"&gt;adguardian&lt;/a&gt;] - Terminal-based, real-time traffic monitoring and statistics for your AdGuard Home instance&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AFLplusplus/LibAFL"&gt;AFLplusplus/LibAFL&lt;/a&gt; - Advanced Fuzzing Library - Slot your Fuzzer together in Rust! Scales across cores and machines. For Windows, Android, MacOS, Linux, no_std, etc. &lt;a href="https://github.com/AFLplusplus/LibAFL/actions/workflows/build_and_test.yml"&gt;&lt;img src="https://github.com/AFLplusplus/LibAFL/actions/workflows/build_and_test.yml/badge.svg?sanitize=true" alt="build and test" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kongbytes/arp-scan-rs"&gt;arp-scan-rs&lt;/a&gt; - A minimalistic ARP scan tool for fast local network scans&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-audit"&gt;cargo-audit&lt;/a&gt; - Audit Cargo.lock for crates with security vulnerabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-auditable"&gt;cargo-auditable&lt;/a&gt; - Make production Rust binaries auditable&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-crev"&gt;cargo-crev&lt;/a&gt; - A cryptographically verifiable code review system for the cargo package manager.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-deny"&gt;cargo-deny&lt;/a&gt; - Cargo plugin to help you manage large dependency graphs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blst-security/cherrybomb"&gt;Cherrybomb&lt;/a&gt; - Stop half-done API specifications with a CLI tool that helps you avoid undefined user behaviour by validating your API specifications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/replydev/cotp"&gt;cotp&lt;/a&gt; - Trustworthy, encrypted, command-line TOTP/HOTP authenticator app with import functionality.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/entropic-security/xgadget"&gt;entropic-security/xgadget&lt;/a&gt; [&lt;a href="https://crates.io/crates/xgadget"&gt;xgadget&lt;/a&gt;] - Fast, parallel, cross-variant ROP/JOP gadget search &lt;a href="https://github.com/entropic-security/xgadget/actions"&gt;&lt;img src="https://github.com/entropic-security/xgadget/workflows/test/badge.svg?sanitize=true" alt="GitHub Actions" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/epi052/feroxbuster"&gt;epi052/feroxbuster&lt;/a&gt; - A simple, fast, recursive content discovery tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inspektor-dev/inspektor"&gt;Inspektor&lt;/a&gt; - A database protocol-aware proxy that is used to enforce access policies üëÆ&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kpcyrd/authoscope"&gt;kpcyrd/authoscope&lt;/a&gt; - A scriptable network authentication cracker&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kpcyrd/rshijack"&gt;kpcyrd/rshijack&lt;/a&gt; - A TCP connection hijacker; rewrite of shijack&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kpcyrd/sn0int"&gt;kpcyrd/sn0int&lt;/a&gt; - A semi-automatic OSINT framework and package manager&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kpcyrd/sniffglue"&gt;kpcyrd/sniffglue&lt;/a&gt; - A secure multithreaded packet sniffer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mongodb/kingfisher"&gt;mongodb/kingfisher&lt;/a&gt; - A blazingly fast tool for secret detection and live validation across files, Git repos, S3, Jira, and Confluence&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emo-crab/observer_ward"&gt;observer_ward&lt;/a&gt; - Web application and service fingerprint identification tool&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Raspirus/Raspirus"&gt;Raspirus&lt;/a&gt; - User- and resources-friendly rules-based malware scanner &lt;a href="https://github.com/Raspirus/Raspirus/actions/workflows/testproject.yml"&gt;&lt;img src="https://github.com/Raspirus/Raspirus/actions/workflows/testproject.yml/badge.svg?sanitize=true" alt="status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cortex/ripasso/"&gt;ripasso&lt;/a&gt; - A password manager, filesystem compatible with pass&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bee-san/RustScan"&gt;rustscan&lt;/a&gt; - Make Nmap faster with this port scanning tool &lt;a href="https://github.com/bee-san/RustScan/actions"&gt;&lt;img src="https://github.com/bee-san/RustScan/actions/workflows/test.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Social networks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Mastodon 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustodon/rustodon"&gt;Rustodon&lt;/a&gt; - A Mastodon-compatible, ActivityPub-speaking server.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Telegram 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/FedericoBruzzone/tgt"&gt;tgt&lt;/a&gt; - A crossplatform TUI for Telegram &lt;a href="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-linux.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-linux.yml/badge.svg?sanitize=true" alt="ci-linux" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-macos.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-macos.yml/badge.svg?sanitize=true" alt="ci-macos" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-windows.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tgt/actions/workflows/ci-windows.yml/badge.svg?sanitize=true" alt="ci-windows" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;System tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ajeetdsouza/zoxide/"&gt;ajeetdsouza/zoxide&lt;/a&gt; - A fast alternative to &lt;code&gt;cd&lt;/code&gt; that learns your habits &lt;a href="https://github.com/ajeetdsouza/zoxide/actions"&gt;&lt;img src="https://github.com/ajeetdsouza/zoxide/actions/workflows/release.yml/badge.svg?sanitize=true" alt="release" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nohajc/anylinuxfs"&gt;anylinuxfs&lt;/a&gt; - CLI tool for mounting any linux-supported filesystem on a Mac - using NFS with a microVM&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atuinsh/atuin"&gt;atuin&lt;/a&gt; [&lt;a href="https://crates.io/crates/atuin"&gt;atuin&lt;/a&gt;] - Atuin replaces your existing shell history with a SQLite database, and records additional context for your commands. Additionally, it provides optional and fully encrypted synchronisation of your history between machines, via an Atuin server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imsnif/bandwhich"&gt;bandwhich&lt;/a&gt; - Terminal bandwidth utilization tool&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ClementTsang/bottom"&gt;bottom&lt;/a&gt; - Yet another cross-platform graphical process/system monitor. &lt;a href="https://github.com/ClementTsang/bottom/actions?query=branch%3Amaster"&gt;&lt;img src="https://img.shields.io/github/workflow/status/ClementTsang/bottom/ci/master" alt="GitHub Workflow Status (branch)" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brocode/fblog"&gt;brocode/fblog&lt;/a&gt; - Small command-line JSON Log viewer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reubeno/brush"&gt;brush-shell&lt;/a&gt; - bash/POSIX-compatible shell &lt;a href="https://github.com/reubeno/brush/actions/workflows/ci.yaml"&gt;&lt;img src="https://github.com/reubeno/brush/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="CICD" /&gt;&lt;/a&gt;&lt;a href="https://crates.io/crates/brush-shell"&gt;&lt;img src="https://img.shields.io/crates/v/brush-shell.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vrmiguel/bustd"&gt;bustd&lt;/a&gt; - Lightweight process killer daemon to handle out-of-memory scenarios on Linux. &lt;a href="https://github.com/vrmiguel/bustd/actions?query=branch%3Amaster"&gt;&lt;img src="https://img.shields.io/github/workflow/status/vrmiguel/bustd/build-and-test" alt="GitHub Workflow Status (branch)" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/buster/rrun"&gt;buster/rrun&lt;/a&gt; - A command launcher for Linux, similar to gmrun&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cantino/mcfly"&gt;cantino/mcfly&lt;/a&gt; - Fly through your shell history. Great Scott!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ChurchTao/clipboard-rs"&gt;ChurchTao/clipboard-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/clipboard-rs"&gt;clipboard-rs&lt;/a&gt;] - Cross-platform library written in Rust for getting and setting and monitoring changes the system-level clipboard content.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sstadick/crabz"&gt;crabz&lt;/a&gt; - Multi-threaded compression and decompression CLI tool &lt;a href="https://github.com/sstadick/crabz/actions?query=workflow%3ACheck"&gt;&lt;img src="https://github.com/sstadick/crabz/workflows/Check/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cristianoliveira/funzzy"&gt;cristianoliveira/funzzy&lt;/a&gt; - A configurable filesystem watcher inspired by &lt;a href="http://eradman.com/entrproject/"&gt;entr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalance/procs"&gt;dalance/procs&lt;/a&gt; - A modern replacement for 'ps' &lt;a href="https://github.com/dalance/procs/actions/workflows/regression.yml"&gt;&lt;img src="https://github.com/dalance/procs/actions/workflows/regression.yml/badge.svg?sanitize=true" alt="Regression" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/darakian/ddh"&gt;ddh&lt;/a&gt; - Fast duplicate file finder&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imsnif/diskonaut"&gt;diskonaut&lt;/a&gt; - Terminal visual disk space navigator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bootandy/dust"&gt;dust&lt;/a&gt; - A more intuitive version of du&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/eza-community/eza"&gt;eza-community/eza&lt;/a&gt; - A replacement for 'ls'&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fish-shell/fish-shell"&gt;fish-shell/fish-shell&lt;/a&gt; - The user-friendly command line shell&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/fselect"&gt;fselect&lt;/a&gt; - Find files with SQL-like queries&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gitui-org/gitui"&gt;gitui&lt;/a&gt; - Blazing fast terminal client for git. &lt;a href="https://github.com/gitui-org/gitui/actions"&gt;&lt;img src="https://github.com/gitui-org/gitui/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/amrdeveloper/gql"&gt;GQL&lt;/a&gt; - A SQL like query language to run on .git files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kimono-koans/httm"&gt;httm&lt;/a&gt; - Interactive, file-level Time Machine-like tool for ZFS/btrfs/nilfs2 (and even actual Time Machine backups!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/j0ru/kickoff"&gt;j0ru/kickoff&lt;/a&gt; - Fast and snappy wayland program launcher &lt;a href="https://github.com/j0ru/kickoff/actions"&gt;&lt;img src="https://github.com/j0ru/kickoff/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jacek-kurlit/pik"&gt;jacek-kurlit/pik&lt;/a&gt; [&lt;a href="https://crates.io/crates/pik"&gt;pik&lt;/a&gt;] - A TUI command line tool that helps to find and kill processes&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tbillington/kondo"&gt;Kondo&lt;/a&gt; - CLI &amp;amp; GUI tool for deleting software project artifacts and reclaiming disk space&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ilya-zlobintsev/LACT"&gt;LACT&lt;/a&gt; - Linux AMDGPU Controller&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lodosgroup/lpm"&gt;lodosgroup/lpm&lt;/a&gt; - An experimental system package manager&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lotabout/rargs"&gt;lotabout/rargs&lt;/a&gt; [&lt;a href="https://crates.io/crates/rargs"&gt;rargs&lt;/a&gt;] - xargs + awk with pattern matching support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lsd-rs/lsd"&gt;lsd&lt;/a&gt; - An ls with a lot of pretty colors and awesome icons &lt;a href="https://github.com/lsd-rs/lsd/actions"&gt;&lt;img src="https://github.com/lsd-rs/lsd/actions/workflows/CICD.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Luminarys/synapse"&gt;Luminarys/synapse&lt;/a&gt; - Flexible and fast BitTorrent daemon.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/m4b/bingrep"&gt;m4b/bingrep&lt;/a&gt; - Greps through binaries from various OSs and architectures, and colors them.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/matheus-git/systemd-manager-tui"&gt;matheus-git/systemd-manager-tui&lt;/a&gt; [&lt;a href="https://crates.io/crates/systemd-manager-tui"&gt;systemd-manager-tui&lt;/a&gt;] - A program for managing systemd services through a TUI (Terminal User Interfaces).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mdgaziur/findex"&gt;mdgaziur/findex&lt;/a&gt; - Findex is a highly customizable application finder using GTK3&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mitnk/cicada"&gt;mitnk/cicada&lt;/a&gt; - A bash-like Unix shell&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mmstick/concurr"&gt;mmstick/concurr&lt;/a&gt; - Alternative to GNU Parallel w/ a client-server architecture&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mmstick/fontfinder"&gt;mmstick/fontfinder&lt;/a&gt; - GTK3 application for previewing and installing Google's fonts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mmstick/tv-renamer"&gt;mmstick/tv-renamer&lt;/a&gt; - A tv series renaming application with an optional GTK3 frontend.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mxseev/logram"&gt;mxseev/logram&lt;/a&gt; - Push log files' updates to Telegram&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Chleba/netscanner"&gt;netscanner&lt;/a&gt; - TUI Network Scanner&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nickgerace/gfold"&gt;nickgerace/gfold&lt;/a&gt; [&lt;a href="https://crates.io/crates/gfold"&gt;gfold&lt;/a&gt;] - CLI tool to help keep track of multiple Git repositories &lt;a href="https://github.com/nickgerace/gfold/actions?query=workflow%3Amerge+branch%3Amain"&gt;&lt;img src="https://img.shields.io/github/workflow/status/nickgerace/gfold/merge/main" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nivekuil/rip"&gt;nivekuil/rip&lt;/a&gt; - A safe and ergonomic alternative to &lt;code&gt;rm&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nushell/nushell"&gt;nushell/nushell&lt;/a&gt; - A new type of shell&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nwiizo/tfmcp"&gt;nwiizo/tfmcp&lt;/a&gt; - Terraform MCP Tool - CLI for AI assistants to manage Terraform environments via Model Context Protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nwiizo/tfocus"&gt;nwiizo/tfocus&lt;/a&gt; - Interactive tool for selecting and executing Terraform plan/apply operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orhun/kmon"&gt;orhun/kmon&lt;/a&gt; - Linux Kernel Manager and Activity Monitor &lt;img src="https://img.shields.io/github/actions/workflow/status/orhun/kmon/ci.yml?branch=master&amp;amp;label=build" alt="https://github.com/orhun/kmon/actions" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orhun/systeroid"&gt;orhun/systeroid&lt;/a&gt; - A more powerful alternative to sysctl(8) with a terminal user interface &lt;img src="https://img.shields.io/github/actions/workflow/status/orhun/systeroid/ci.yml?branch=main&amp;amp;label=build" alt="https://github.com/orhun/systeroid/actions" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ouch-org/ouch"&gt;ouch&lt;/a&gt; - Painless compression and decompression on the command-line &lt;a href="https://github.com/ouch-org/ouch/actions?query=branch%3Amaster"&gt;&lt;img src="https://img.shields.io/github/workflow/status/ouch-org/ouch/build-and-test" alt="GitHub Workflow Status (branch)" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pkolaczk/fclones"&gt;pkolaczk/fclones&lt;/a&gt; - Efficient duplicate file finder and remover&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pop-os/popsicle"&gt;pop-os/popsicle&lt;/a&gt; - GTK3 &amp;amp; CLI utility for flashing multiple USB devices in parallel&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pop-os/system76-power/"&gt;pop-os/system76-power&lt;/a&gt; - Linux power management daemon (DBus-interface) with CLI tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nukesor/pueue"&gt;pueue&lt;/a&gt; - Manage your long running shell commands. &lt;a href="https://github.com/nukesor/pueue/actions"&gt;&lt;img src="https://github.com/Nukesor/pueue/actions/workflows/test.yml/badge.svg?sanitize=true" alt="GitHub Actions Workflow" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qarmin/czkawka"&gt;qarmin/czkawka&lt;/a&gt; - Multi-functional app to find duplicates, empty folders, similar images, etc. &lt;a href="https://github.com/qarmin/czkawka/actions"&gt;&lt;img src="https://github.com/qarmin/czkawka/actions/workflows/pages/pages-build-deployment/badge.svg?branch=master" alt="GitHub Actions Workflow" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/redox-os/ion"&gt;redox-os/ion&lt;/a&gt; - Next-generation system shell&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sharkdp/bat"&gt;sharkdp/bat&lt;/a&gt; - A cat(1) clone with wings. &lt;a href="https://github.com/sharkdp/bat/actions/workflows/CICD.yml"&gt;&lt;img src="https://github.com/sharkdp/bat/actions/workflows/CICD.yml/badge.svg?branch=master" alt="CICD" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sharkdp/fd"&gt;sharkdp/fd&lt;/a&gt; - A simple, fast and user-friendly alternative to find. &lt;a href="https://github.com/sharkdp/fd/actions/workflows/CICD.yml"&gt;&lt;img src="https://github.com/sharkdp/fd/actions/workflows/CICD.yml/badge.svg?sanitize=true" alt="CICD" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sitkevij/hex"&gt;sitkevij/hex&lt;/a&gt; - A colorized hexdump terminal utility.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/skim-rs/skim"&gt;skim&lt;/a&gt; - A fuzzy finder&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/supercilex/fuc"&gt;supercilex/fuc&lt;/a&gt; - Fast &lt;code&gt;cp&lt;/code&gt; and &lt;code&gt;rm&lt;/code&gt; commands&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/topheman/webassembly-component-model-experiments"&gt;topheman/webassembly-component-model-experiments&lt;/a&gt; - WebAssembly Component Model based REPL with sandboxed multi-language plugin system &lt;a href="https://crates.io/crates/pluginlab"&gt;&lt;img src="https://img.shields.io/crates/v/pluginlab.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fujiapple852/trippy"&gt;trippy&lt;/a&gt; - A network diagnostic tool &lt;a href="https://github.com/fujiapple852/trippy/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/fujiapple852/trippy/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/uutils/coreutils"&gt;uutils/coreutils&lt;/a&gt; - A cross-platform rewrite of the GNU coreutils &lt;a href="https://github.com/uutils/coreutils/actions/workflows/CICD.yml"&gt;&lt;img src="https://github.com/uutils/coreutils/actions/workflows/CICD.yml/badge.svg?sanitize=true" alt="CICD" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/watchexec/watchexec"&gt;watchexec&lt;/a&gt; - Executes commands in response to file modifications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/XAMPPRocky/tokei"&gt;XAMPPRocky/tokei&lt;/a&gt; - counts the lines of code&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ynqa/jnv"&gt;ynqa/jnv&lt;/a&gt; - Interactive JSON filter using jq &lt;a href="https://github.com/ynqa/jnv/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ynqa/jnv/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ynqa/logu"&gt;ynqa/logu&lt;/a&gt; - Extract patterns from (streaming) unstructured log messages &lt;a href="https://github.com/ynqa/logu/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ynqa/logu/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ynqa/sig"&gt;ynqa/sig&lt;/a&gt; - Interactive grep (for streaming) &lt;a href="https://github.com/ynqa/sig/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ynqa/sig/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Task scheduling&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stav121/tasklet"&gt;tasklet&lt;/a&gt; [&lt;a href="https://crates.io/crates/tasklet"&gt;tasklet&lt;/a&gt;] - A task scheduling library written in Rust &lt;img src="https://img.shields.io/github/actions/workflow/status/stav121/tasklet/rust.yml" alt="Build Status" /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Text editors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://amp.rs"&gt;amp&lt;/a&gt; - Inspired by Vi/Vim.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emacs-ng/emacs-ng"&gt;emacs-ng&lt;/a&gt; - Complementing the C codebase with rust code to introduce new features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gchp/iota"&gt;gchp/iota&lt;/a&gt; - A simple text editor&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/helix-editor/helix"&gt;helix&lt;/a&gt; - A post-modern modal text editor inspired by Neovim/Kakoune. &lt;a href="https://github.com/helix-editor/helix/actions"&gt;&lt;img src="https://github.com/helix-editor/helix/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ilai-deutel/kibi"&gt;ilai-deutel/kibi&lt;/a&gt; - A tiny (‚â§1024 LOC) text editor with syntax highlighting, incremental search and more. &lt;a href="https://github.com/ilai-deutel/kibi/actions?query=branch%3Amaster"&gt;&lt;img src="https://github.com/ilai-deutel/kibi/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lapce/lapce"&gt;Lapce&lt;/a&gt; - A modern editor with a backend. Taking inspiration from the discontinued &lt;a href="https://github.com/xi-editor/xi-editor"&gt;xi-editor&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mathall/rim"&gt;mathall/rim&lt;/a&gt; - Vim-like text editor.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/curlpipe/ox"&gt;ox&lt;/a&gt; - An independent Rust text editor that runs in your terminal!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://git.sr.ht/~lessa/pepper"&gt;vamolessa/pepper&lt;/a&gt; [&lt;a href="https://crates.io/crates/pepper"&gt;pepper&lt;/a&gt;] - An opinionated modal editor to simplify code editing from the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zed-industries/zed"&gt;zed&lt;/a&gt; - A high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Text processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ashvardanian/StringZilla"&gt;ashvardanian/stringzilla&lt;/a&gt; - SIMD-accelerated string search, sort, edit distances, alignments, and generators for x86 AVX2 &amp;amp; AVX-512, and Arm NEON &lt;a href="https://crates.io/crates/stringzilla"&gt;&lt;img src="https://img.shields.io/crates/v/stringzilla.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cchexcode/complate"&gt;cchexcode/complate&lt;/a&gt; - An in-terminal text templating tool designed for standardizing messages (like for GIT commits). &lt;a href="https://crates.io/crates/complate"&gt;&lt;img src="https://img.shields.io/crates/v/complate.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/complate"&gt;&lt;img src="https://img.shields.io/crates/d/complate?label=crates.io%20downloads" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cchexcode/complate/actions"&gt;&lt;img src="https://github.com/cchexcode/complate/actions/workflows/release.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dathere/qsv"&gt;dathere/qsv&lt;/a&gt; [&lt;a href="https://crates.io/crates/qsv"&gt;qsv&lt;/a&gt;] - A high performance CSV data-wrangling toolkit. Forked from xsv, with 34+ additional commands &amp;amp; more. &lt;a href="https://github.com/dathere/qsv/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/dathere/qsv/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Linux build status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dathere/qsv/actions/workflows/rust-windows.yml"&gt;&lt;img src="https://github.com/dathere/qsv/actions/workflows/rust-windows.yml/badge.svg?sanitize=true" alt="Windows build status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dathere/qsv/actions/workflows/rust-macos.yml"&gt;&lt;img src="https://github.com/dathere/qsv/actions/workflows/rust-macos.yml/badge.svg?sanitize=true" alt="macOS build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dominikwilkowski/cfonts"&gt;dominikwilkowski/cfonts&lt;/a&gt; [&lt;a href="https://crates.io/crates/cfonts"&gt;cfonts&lt;/a&gt;] - Sexy ANSI fonts for the console &lt;img src="https://github.com/dominikwilkowski/cfonts/actions/workflows/testing.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pemistahl/grex"&gt;grex&lt;/a&gt; - A command-line tool and library for generating regular expressions from user-provided test cases&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Lisprez/so_stupid_search"&gt;Lisprez/so_stupid_search&lt;/a&gt; - A simple and fast string search tool for human beings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/roquess/loki_text"&gt;loki_text&lt;/a&gt; [&lt;a href="https://crates.io/crates/loki_text"&gt;loki_text&lt;/a&gt;] - String manipulation library with pattern searching, text transformation, and multiple string search algorithms (KMP, Boyer-Moore, Aho-Corasick, etc.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yoav-lavi/melody"&gt;Melody&lt;/a&gt; - A language that compiles to regular expressions and aims to be more easily readable and maintainable &lt;a href="https://github.com/yoav-lavi/melody/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/yoav-lavi/melody/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/melody_compiler"&gt;&lt;img src="https://img.shields.io/crates/v/melody_compiler?label=compiler" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/phiresky/ripgrep-all"&gt;phiresky/ripgrep-all&lt;/a&gt; - ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/ripgrep"&gt;ripgrep&lt;/a&gt; - combines the usability of The Silver Searcher with the raw speed of grep&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/your-tools/ruplacer"&gt;ruplacer&lt;/a&gt; - Find and replace text in source files &lt;a href="https://github.com/your-tools/ruplacer/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/your-tools/ruplacer/actions/workflows/test.yml/badge.svg?branch=master" alt="Run tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thomasschafer/scooter"&gt;scooter&lt;/a&gt; - Interactive find and replace in the terminal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/sd"&gt;sd&lt;/a&gt; - Intuitive find &amp;amp; replace CLI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sstadick/hck"&gt;sstadick/hck&lt;/a&gt; - A faster and more featureful drop in replacement for &lt;code&gt;cut&lt;/code&gt; &lt;a href="https://github.com/sstadick/hck"&gt;&lt;img src="https://github.com/sstadick/hck/workflows/Check/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vishaltelangre/ff"&gt;vishaltelangre/ff&lt;/a&gt; - Find files (ff) by name!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/whitfin/bytelines"&gt;whitfin/bytelines&lt;/a&gt; [&lt;a href="https://crates.io/crates/bytelines"&gt;bytelines&lt;/a&gt;] - Read input lines as byte slices for high efficiency.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/whitfin/runiq"&gt;whitfin/runiq&lt;/a&gt; - an efficient way to filter duplicate lines from unsorted input.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/xsv"&gt;xsv&lt;/a&gt; - A fast CSV command line tool (slicing, indexing, selecting, searching, sampling, etc.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Utilities&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1History/1History"&gt;1History&lt;/a&gt; - Command line interface to backup Firefox/Chrome/Safari history to one SQLite file &lt;a href="https://github.com/1History/1History/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/1History/1History/actions/workflows/CI.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bloznelis/kbt"&gt;bloznelis/kbt&lt;/a&gt; [&lt;a href="https://crates.io/crates/kbt"&gt;kbt&lt;/a&gt;] - A simple TUI tool for keyboard testing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brycx/checkpwn"&gt;brycx/checkpwn&lt;/a&gt; - A Have I Been Pwned (HIBP) command-line utility tool that lets you easily check for compromised accounts and passwords.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cartesiancs/vessel"&gt;cartesiancs/vessel&lt;/a&gt; - C2 (Command &amp;amp; Control) software for orchestrating physical devices.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dcapal/dcapal"&gt;dcapal&lt;/a&gt; - DcaPal is a free, no registration, online tool to help you keep your portfolio balanced with dollar cost averaging investments.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Eoin-McMahon/Blindfold"&gt;Eoin-McMahon/Blindfold&lt;/a&gt; [&lt;a href="https://crates.io/crates/blindfold"&gt;Blindfold&lt;/a&gt;] - A simple CLI tool for generating &lt;code&gt;.gitignore&lt;/code&gt; files quickly and easily. &lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/%5Bhttps://github.com/nix-community/nurl/actions/workflows/ci.yml%5D(https://github.com/Eoin-McMahon/blindfold/actions/workflows/rust.yml)"&gt;&lt;img src="https://github.com/Eoin-McMahon/blindfold/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AchetaGames/Epic-Asset-Manager"&gt;Epic Asset Manager&lt;/a&gt; - An unofficial client to install Unreal Engine, download and manage purchased assets, projects, plugins and games from the Epic Games Store.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evansmurithi/cloak"&gt;evansmurithi/cloak&lt;/a&gt; - A Command Line OTP (One Time Password) Authenticator application. &lt;img src="https://github.com/evansmurithi/cloak/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt; &lt;a href="https://ci.appveyor.com/project/evansmurithi/cloak"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/9mlfpfru3ng4c689/branch/master?svg=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fcsonline/tmux-thumbs"&gt;fcsonline/tmux-thumbs&lt;/a&gt; - A lightning fast version of tmux-fingers, copy/pasting tmux like vimium/vimperator.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/guoxbin/dtool"&gt;guoxbin/dtool&lt;/a&gt; - A useful command-line tool collection to assist development including conversion, codec, hashing, encryption, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Linus-Mussmaecher/rucola"&gt;Linus-Mussmaecher/rucola&lt;/a&gt; - Terminal-based markdown note manager. &lt;a href="https://crates.io/crates/rucola-notes"&gt;&lt;img src="https://img.shields.io/crates/v/rucola-notes.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Linus-Mussmaecher/rucola/actions/workflows/continuous-testing.yml"&gt;&lt;img src="https://github.com/Linus-Mussmaecher/rucola/actions/workflows/continuous-testing.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thewh1teagle/mobslide"&gt;Mobslide&lt;/a&gt; - Desktop application that turns your smartphone into presentation remote controller.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pvolok/mprocs"&gt;mprocs&lt;/a&gt; - TUI for running multiple processes&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mrjackwills/oxker"&gt;mrjackwills/oxker&lt;/a&gt; [&lt;a href="https://crates.io/crates/oxker"&gt;oxker&lt;/a&gt;] - A simple tui to view &amp;amp; control docker containers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nix-community/nix-init"&gt;nix-community/nix-init&lt;/a&gt; - Generate Nix packages from URLs with hash prefetching, dependency inference, license detection, and more &lt;a href="https://github.com/nix-community/nix-init/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/nix-community/nix-init/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nix-community/nix-melt"&gt;nix-community/nix-melt&lt;/a&gt; - A ranger-like flake.lock viewer &lt;a href="https://github.com/nix-community/nix-melt/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/nix-community/nix-melt/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nix-community/nurl"&gt;nix-community/nurl&lt;/a&gt; [&lt;a href="https://crates.io/crates/nurl"&gt;nurl&lt;/a&gt;] - Generate Nix fetcher calls from repository URLs &lt;a href="https://github.com/nix-community/nurl/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/nix-community/nurl/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yaa110/nomino"&gt;nomino&lt;/a&gt; - Batch rename utility for developers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/raftario/licensor"&gt;raftario/licensor&lt;/a&gt; - write licenses to stdout &lt;a href="https://github.com/raftario/licensor/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/raftario/licensor/actions/workflows/build.yml/badge.svg?branch=master" alt="GitHub Actions" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/restsend/rustpbx"&gt;restsend/rustpbx&lt;/a&gt; - Software-Defined SIP Proxy including register, presence, b2bua. alternative to Freeswitch/FreePBX.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aaronriekenberg/rust-parallel"&gt;rust-parallel&lt;/a&gt; - Fast command line app using Tokio to execute commands in parallel. Similar interface to GNU Parallel or xargs. &lt;a href="https://crates.io/crates/rust-parallel"&gt;&lt;img src="https://img.shields.io/crates/v/rust-parallel.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aaronriekenberg/rust-parallel/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/aaronriekenberg/rust-parallel/actions/workflows/CI.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustdesk/rustdesk"&gt;rustdesk/rustdesk&lt;/a&gt; - A remote desktop software, great alternative to TeamViewer and AnyDesk.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustic-rs/rustic"&gt;rustic-rs/rustic&lt;/a&gt; [&lt;a href="https://crates.io/crates/rustic-rs"&gt;rustic-rs&lt;/a&gt;] - Fast, encrypted, deduplicated backups powered by Rust. &lt;a href="https://crates.io/crates/rustic-rs"&gt;&lt;img src="https://img.shields.io/crates/v/rustic-rs.svg?sanitize=true" alt="Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/qrtool"&gt;sorairolake/qrtool&lt;/a&gt; [&lt;a href="https://crates.io/crates/qrtool"&gt;qrtool&lt;/a&gt;] - A utility for encoding and decoding QR code images. &lt;a href="https://github.com/sorairolake/qrtool/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/qrtool/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/str4d/rage"&gt;str4d/rage&lt;/a&gt; [&lt;a href="https://crates.io/crates/rage"&gt;rage&lt;/a&gt;] - Rust implementation of &lt;a href="https://github.com/FiloSottile/age"&gt;age&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Skallwar/suckit"&gt;suckit&lt;/a&gt; - Recursively visit and download a website's content to your disk. &lt;a href="https://crates.io/crates/suckit"&gt;&lt;img src="https://img.shields.io/crates/v/suckit.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Skallwar/suckit/raw/master/.github/workflows/build_and_test.yml"&gt;&lt;img src="https://github.com/Skallwar/suckit/workflows/Build%20and%20test/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/shshemi/tabiew"&gt;Tabiew&lt;/a&gt; - A lightweight TUI app to view and query CSV files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/davidmoreno/tailtales"&gt;Tail Tales&lt;/a&gt; - A TUI log viewer with logfmt support. &lt;a href="https://crates.io/crates/tailtales"&gt;&lt;img src="https://img.shields.io/crates/v/tailtales.svg?logo=rust" alt="Crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alexpasmantier/television"&gt;television&lt;/a&gt; - A blazing fast general purpose fuzzy finder TUI &lt;img src="https://img.shields.io/github/check-runs/alexpasmantier/television/main" alt="GitHub branch check runs" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tversteeg/emplace"&gt;tversteeg/emplace&lt;/a&gt; - Synchronize installed packages on multiple machines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vamolessa/verco"&gt;vamolessa/verco&lt;/a&gt; [&lt;a href="https://crates.io/crates/verco"&gt;verco&lt;/a&gt;] - A simple Git/Hg tui client focused on keyboard shortcuts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dani-garcia/vaultwarden#readme"&gt;vaultwarden&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/dani-garcia/vaultwarden/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt; - Alternative implementation of the Bitwarden server API written in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thewh1teagle/vibe"&gt;Vibe&lt;/a&gt; - Transcribe audio or video in every language on every platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/warpdotdev/Warp"&gt;warpdotdev/Warp&lt;/a&gt; - &lt;span&gt;üí≤&lt;/span&gt; Warp is a blazingly-fast modern GPU-accelerated terminal built to make you and your team more productive.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alvaro17f/wrestic"&gt;wrestic&lt;/a&gt; - A wrapper around restic.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ttytm/wthrr-the-weathercrab"&gt;wthrr&lt;/a&gt; - Weather companion for the terminal. &lt;a href="https://crates.io/crates/wthrr"&gt;&lt;img src="https://img.shields.io/crates/v/wthrr?logo=rust" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Video&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dertuxmalwieder/yaydl"&gt;dertuxmalwieder/yaydl&lt;/a&gt; [&lt;a href="https://crates.io/crates/yaydl"&gt;yaydl&lt;/a&gt;] - A simple video downloader&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gyroflow/gyroflow"&gt;gyroflow/gyroflow&lt;/a&gt; - Video stabilization application using gyroscope data&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/harlanc/xiu"&gt;harlanc/xiu&lt;/a&gt; - A powerful and secure live server (rtmp/httpflv/hls/relay). &lt;a href="https://crates.io/crates/xiu"&gt;&lt;img src="https://img.shields.io/crates/v/xiu.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TGotwig/vidmerger"&gt;vidmerger&lt;/a&gt; - Merge video &amp;amp; audio files via CLI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xiph/rav1e"&gt;xiph/rav1e&lt;/a&gt; - The fastest and safest AV1 encoder.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Virtualization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/firecracker-microvm/firecracker"&gt;firecracker-microvm/firecracker&lt;/a&gt; - A lightweight virtual machine for container workload &lt;a href="https://firecracker-microvm.github.io/"&gt;Firecracker Microvm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kata-containers/kata-containers"&gt;kata-containers/kata-containers&lt;/a&gt; - A implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tailhook/vagga"&gt;tailhook/vagga&lt;/a&gt; - A containerization tool without daemons&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/youki-dev/youki"&gt;youki-dev/youki&lt;/a&gt; - A container runtime &lt;a href="https://github.com/youki-dev/youki/actions"&gt;&lt;img src="https://github.com/youki-dev/youki/actions/workflows/basic.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Web&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cfal/tobaru"&gt;cfal/tobaru&lt;/a&gt; - Port forwarder with allowlists, IP and TLS SNI/ALPN rule-based routing, iptables support, round-robin forwarding (load balancing), and hot reloading.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/importantimport/hatsu"&gt;importantimport/hatsu&lt;/a&gt; - ü©µ Self-hosted and fully-automated ActivityPub bridge for static sites. &lt;a href="https://github.com/importantimport/hatsu/actions/workflows/release.yml"&gt;&lt;img src="https://github.com/importantimport/hatsu/actions/workflows/release.yml/badge.svg?sanitize=true" alt="release" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/LemmyNet/lemmy"&gt;LemmyNet/lemmy&lt;/a&gt; - A link aggregator / reddit clone for the fediverse &lt;a href="https://cloud.drone.io/LemmyNet/lemmy"&gt;&lt;img src="https://cloud.drone.io/api/badges/LemmyNet/lemmy/status.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MASQ-Project/Node"&gt;MASQ-Project/Node&lt;/a&gt; - MASQ Node software provides a decentralized mesh-network of nodes for global users to access normal internet content - next evolution of tech beyond Tor &amp;amp; VPN &lt;a href="https://github.com/MASQ-Project/Node/actions"&gt;&lt;img src="https://github.com/MASQ-Project/Node/actions/workflows/ci-matrix.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Plume-org/Plume"&gt;Plume-org/Plume&lt;/a&gt; - ActivityPub federating blogging application&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/redlib-org/redlib"&gt;Redlib&lt;/a&gt; - An alternative private front-end to Reddit, with its origins in &lt;a href="https://github.com/libreddit/libreddit"&gt;Libreddit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/revoltchat/backend"&gt;Revolt/backend&lt;/a&gt; - User-first chat platform built with modern web technologies.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Web Servers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudflare/pingora"&gt;cloudflare/pingora&lt;/a&gt; - A library for building fast, reliable and evolvable network services.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emanuele-em/proxelar"&gt;emanuele-em/proxelar&lt;/a&gt; - A MITM Proxy ü¶Ä! Toolkit for HTTP/1, HTTP/2, and WebSockets with SSL/TLS Capabilities &lt;a href="https://github.com/emanuele-em/proxelar/actions"&gt;&lt;img src="https://github.com/emanuele-em/proxelar/actions/workflows/autofix.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bytedance/g3"&gt;g3proxy&lt;/a&gt; - Forward proxy server, support Proxy Chaining, Protocol Inspection, MITM Interception, ICAP Adaptation, Transparent Proxy &lt;a href="https://github.com/bytedance/g3/actions"&gt;&lt;img src="https://github.com/bytedance/g3/actions/workflows/codecov.yml/badge.svg?sanitize=true" alt="CodeCoverage" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcodpt/minirps"&gt;Mini RPS&lt;/a&gt; - Mini reverse proxy server, HTTPS, CORS, static file hosting and template engine (minijinja) &lt;a href="https://crates.io/crates/minirps"&gt;crates.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mu-arch/skyfolder"&gt;mu-arch/skyfolder&lt;/a&gt; - ü™Ç Beautiful HTTP/Bittorrent server without the hassle. Secure - GUI - Pretty - Fast&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mufeedvh/binserve"&gt;mufeedvh/binserve&lt;/a&gt; - A blazingly fast static web server with routing, templating, and security in a single binary you can set up with zero code &lt;a href="https://github.com/mufeedvh/binserve/actions"&gt;&lt;img src="https://github.com/mufeedvh/binserve/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orhun/rustypaste"&gt;orhun/rustypaste&lt;/a&gt; - A minimal file upload/pastebin service &lt;img src="https://img.shields.io/github/actions/workflow/status/orhun/rustypaste/ci.yml?branch=master&amp;amp;label=build" alt="https://github.com/orhun/rustypaste/actions" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/plabayo/rama"&gt;plabayo/rama&lt;/a&gt; - A modular service framework to move and transform your network packets, used to build web clients, servers and ‚Äî above all ‚Äî proxies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ronanyeah/rust-hasura"&gt;ronanyeah/rust-hasura&lt;/a&gt; - A demonstration of how a GraphQL server can be used as a remote schema with &lt;a href="https://hasura.io/"&gt;Hasura&lt;/a&gt; &lt;img src="https://github.com/ronanyeah/rust-hasura/workflows/Rust/badge.svg?branch=master" alt="Rust" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/static-web-server/static-web-server"&gt;static-web-server&lt;/a&gt; - A blazing fast and asynchronous web server for static files-serving. ‚ö° &lt;a href="https://github.com/static-web-server/static-web-server/actions/workflows/devel.yml?query=branch%3Amaster"&gt;&lt;img src="https://github.com/static-web-server/static-web-server/actions/workflows/devel.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/svenstaro/miniserve"&gt;svenstaro/miniserve&lt;/a&gt; - A small, self-contained cross-platform CLI tool that allows you to just grab the binary and serve some file(s) via HTTP &lt;a href="https://github.com/svenstaro/miniserve/actions"&gt;&lt;img src="https://github.com/svenstaro/miniserve/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thecoshman/http"&gt;thecoshman/http&lt;/a&gt; - Host These Things Please - A basic http server for hosting a folder fast and simply&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TheWaWaR/simple-http-server"&gt;TheWaWaR/simple-http-server&lt;/a&gt; - simple static http server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x676e67/vproxy"&gt;vproxy/0x676e67&lt;/a&gt; - An fast asynchronous Rust HTTP/Socks5 Proxy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development tools&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Julien-cpsn/ATAC"&gt;ATAC&lt;/a&gt; - A feature-full TUI API client made in Rust. ATAC is free, open-source, offline and account-less.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Canop/bacon"&gt;bacon&lt;/a&gt; - background rust code checker, similar to cargo-watch&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/clippy"&gt;clippy&lt;/a&gt; - Rust lints&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clog-tool/clog-cli"&gt;clog-tool/clog-cli&lt;/a&gt; - generates a changelog from git metadata (&lt;a href="https://blog.thoughtram.io/announcements/tools/2014/09/18/announcing-clog-a-conventional-changelog-generator-for-the-rest-of-us.html"&gt;conventional changelog&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudflare/foundations"&gt;cloudflare/foundations&lt;/a&gt; - Foundations is a modular Rust library, designed to help scale programs for distributed, production-grade systems.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/comtrya/comtrya"&gt;comtrya&lt;/a&gt; - A configuration management tool for localhost / dotfiles &lt;a href="https://github.com/comtrya/comtrya/actions"&gt;&lt;img src="https://github.com/comtrya/comtrya/actions/workflows/main.yaml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Wulf/create-rust-app"&gt;create-rust-app&lt;/a&gt; - Set up a modern rust+react web app by running one command. &lt;a href="https://crates.io/crates/create-rust-app"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dan-t/rusty-tags"&gt;dan-t/rusty-tags&lt;/a&gt; - create ctags/etags for a cargo project and all of its dependencies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/datanymizer/datanymizer"&gt;datanymizer/datanymizer&lt;/a&gt; - Powerful database anonymizer with flexible rules &lt;a href="https://github.com/datanymizer/datanymizer/actions?query=workflow%3ACI+branch%3Amain"&gt;&lt;img src="https://github.com/datanymizer/datanymizer/workflows/CI/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/git-delta"&gt;delta&lt;/a&gt; - A syntax-highlighter for git and diff output&lt;a href="https://github.com/dandavison/delta//actions"&gt;&lt;img src="https://github.com/dandavison/delta/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dotenv-linter/dotenv-linter"&gt;dotenv-linter&lt;/a&gt; - Linter for &lt;code&gt;.env&lt;/code&gt; files &lt;a href="https://github.com/dotenv-linter/dotenv-linter/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://github.com/dotenv-linter/dotenv-linter/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/envio-cli/envio"&gt;envio-cli/envio&lt;/a&gt; - A Modern And Secure CLI Tool For Managing Environment Variables &lt;a href="https://github.com/envio-cli/envio/actions/workflows/CICD.yml"&gt;&lt;img src="https://github.com/envio-cli/envio/actions/workflows/CICD.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flox/flox"&gt;Flox&lt;/a&gt; - Flox is a virtual environment and package manager all in one.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/antinomyhq/forge"&gt;Forge&lt;/a&gt; - A terminal-based AI pair programmer for code generation and editing. &lt;a href="https://forgecode.dev/"&gt;&lt;img src="https://img.shields.io/badge/website-forgecode.dev-blue" alt="Website" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/frolicflow/Frolic"&gt;frolic&lt;/a&gt; - An API layer to build customer facing dashboards 10x faster&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brocode/fw"&gt;fw&lt;/a&gt; - workspace productivity booster &lt;a href="https://github.com/brocode/fw/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/brocode/fw/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kyu08/fzf-make"&gt;fzf-make&lt;/a&gt; [&lt;a href="https://crates.io/crates/fzf-make"&gt;fzf-make&lt;/a&gt;] - A command line tool that executes make target using fuzzy finder with preview window. &lt;a href="https://crates.io/crates/fzf-make"&gt;&lt;img src="https://img.shields.io/crates/v/fzf-make?style=flatflat-square" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/geiger-rs/cargo-geiger"&gt;geiger&lt;/a&gt; - A program that list statistics related to usage of unsafe code in a crate and all its dependencies &lt;a href="https://dev.azure.com/cargo-geiger/cargo-geiger/_build/latest?definitionId=1&amp;amp;branchName=master"&gt;&lt;img src="https://dev.azure.com/cargo-geiger/cargo-geiger/_apis/build/status/geiger-rs.cargo-geiger?branchName=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orhun/git-cliff"&gt;git-cliff&lt;/a&gt; - A highly customizable Changelog Generator that follows Conventional Commit specifications &lt;img src="https://img.shields.io/github/actions/workflow/status/orhun/git-cliff/ci.yml?branch=main&amp;amp;label=build" alt="https://github.com/orhun/git-cliff/actions" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saschagrunert/git-journal/"&gt;git-journal&lt;/a&gt; - The Git Commit Message and Changelog Generation Framework&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rksm/hot-lib-reloader-rs"&gt;hot-lib-reloader&lt;/a&gt; - Hot reload Rust code &lt;a href="https://github.com/rksm/hot-lib-reloader-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/rksm/hot-lib-reloader-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lasantosr/intelli-shell"&gt;intelli-shell&lt;/a&gt; - Bookmark commands with placeholders and search or autocomplete at any time &lt;a href="https://crates.io/crates/intelli-shell"&gt;&lt;img src="https://img.shields.io/crates/v/intelli-shell.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/lasantosr/intelli-shell/actions/workflows/release.yml"&gt;&lt;img src="https://github.com/lasantosr/intelli-shell/actions/workflows/release.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/casey/just"&gt;just&lt;/a&gt; - A handy command runner for project-specific tasks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jacobdeichert/mask"&gt;mask&lt;/a&gt; - A CLI task runner defined by a simple markdown file &lt;a href="https://github.com/jacobdeichert/mask/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/jacobdeichert/mask/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fiatjaf/module-linker"&gt;Module Linker&lt;/a&gt; - Extension that adds &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; links to references in &lt;code&gt;mod&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;extern crate&lt;/code&gt; statements at GitHub.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalance/ptags"&gt;ptags&lt;/a&gt; - A parallel universal-ctags wrapper for git repository&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/racer-rust/racer"&gt;Racer&lt;/a&gt; - code completion for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huhu/rust-search-extension"&gt;Rust Search Extension&lt;/a&gt; - A handy browser extension to search crates and docs in address bar (omnibox). &lt;a href="https://github.com/huhu/rust-search-extension/actions"&gt;&lt;img src="https://github.com/huhu/rust-search-extension/workflows/build/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup"&gt;Rustup&lt;/a&gt; - the Rust toolchain installer &lt;a href="https://github.com/rust-lang/rustup/actions"&gt;&lt;img src="https://github.com/rust-lang/rustup/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/igor-petruk/scriptisto"&gt;scriptisto&lt;/a&gt; - A language-agnostic "shebang interpreter" that enables you to write one file scripts in compiled languages. &lt;a href="https://cloud.drone.io/igor-petruk/scriptisto"&gt;&lt;img src="https://cloud.drone.io/api/badges/igor-petruk/scriptisto/status.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/crate-ci/typos"&gt;typos&lt;/a&gt; [&lt;a href="https://crates.io/crates/typos-cli"&gt;typos-cli&lt;/a&gt;] - Source code spell checker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Build system&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/"&gt;Cargo&lt;/a&gt; - the Rust package manager 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/frewsxcv/cargo-all-features"&gt;cargo-all-features&lt;/a&gt; - A configurable subcommand to simplify testing, building and much more for all combinations of features &lt;a href="https://github.com/frewsxcv/cargo-all-features/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/frewsxcv/cargo-all-features/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-benchcmp"&gt;cargo-benchcmp&lt;/a&gt; - A utility to compare micro-benchmarks&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-bitbake"&gt;cargo-bitbake&lt;/a&gt; - A cargo extension that can generate BitBake recipes utilizing the classes from meta-rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-cache"&gt;cargo-cache&lt;/a&gt; - inspect/manage/clean your cargo cache (&lt;code&gt;~/.cargo/&lt;/code&gt;/&lt;code&gt;${CARGO_HOME}&lt;/code&gt;), print sizes etc &lt;a href="https://github.com/matthiaskrgr/cargo-cache/actions"&gt;&lt;img src="https://github.com/matthiaskrgr/cargo-cache/workflows/ci/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-check"&gt;cargo-check&lt;/a&gt; - A wrapper around &lt;code&gt;cargo rustc -- -Zno-trans&lt;/code&gt; which can be helpful for running a faster compile if you only need correctness checks&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-commander"&gt;cargo-commander&lt;/a&gt; - A subcommand for &lt;code&gt;cargo&lt;/code&gt; to run CLI commands similar to how the scripts section in &lt;code&gt;package.json&lt;/code&gt; works &lt;a href="https://github.com/simonhyll/cargo-commander/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/simonhyll/cargo-commander/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build and test" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-count"&gt;cargo-count&lt;/a&gt; - lists source code counts and details about cargo projects, including unsafe statistics&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-deb"&gt;cargo-deb&lt;/a&gt; - Generates binary Debian packages&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-depgraph"&gt;cargo-depgraph&lt;/a&gt; - Creates dependency graphs for cargo projects using cargo metadata and graphviz&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-do"&gt;cargo-do&lt;/a&gt; - run multiple cargo commands in a row&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-ebuild"&gt;cargo-ebuild&lt;/a&gt; - cargo extension that can generate ebuilds using the in-tree eclasses&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-edit"&gt;cargo-edit&lt;/a&gt; - allows you to add and list dependencies by reading/writing to your Cargo.toml file from the command line&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cargo-generate/cargo-generate"&gt;cargo-generate&lt;/a&gt; - A generator of a rust project by leveraging a pre-existing git repository as a template.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-info"&gt;cargo-info&lt;/a&gt; - queries crates.io for crates details from command line&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-license"&gt;cargo-license&lt;/a&gt; - A cargo subcommand to quickly view the licenses of all dependencies.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-limit"&gt;cargo-limit&lt;/a&gt; - Cargo with less noise: warnings are skipped until errors are fixed, Neovim integration, etc. &lt;a href="https://github.com/cargo-limit/cargo-limit/actions"&gt;&lt;img src="https://github.com/cargo-limit/cargo-limit/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-make"&gt;cargo-make&lt;/a&gt; - Task runner and build tool. &lt;a href="https://github.com/sagiegurari/cargo-make/actions"&gt;&lt;img src="https://github.com/sagiegurari/cargo-make/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-modules"&gt;cargo-modules&lt;/a&gt; - A cargo plugin for showing a tree-like overview of a crate's modules.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-multi"&gt;cargo-multi&lt;/a&gt; - runs specified cargo command on multiple crates&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-outdated"&gt;cargo-outdated&lt;/a&gt; - displays when newer versions of Rust dependencies are available, or out of date&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/orium/cargo-rdme"&gt;cargo-rdme&lt;/a&gt; [&lt;a href="https://crates.io/crates/cargo-rdme"&gt;cargo-rdme&lt;/a&gt;] - Cargo subcommand to create your README from your crate‚Äôs documentation. &lt;a href="https://github.com/orium/cargo-rdme/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/orium/cargo-rdme/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-release"&gt;cargo-release&lt;/a&gt; - tool for releasing git-managed cargo project, build, tag, publish, doc and push &lt;a href="https://github.com/crate-ci/cargo-release/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/crate-ci/cargo-release/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-script"&gt;cargo-script&lt;/a&gt; - lets people quickly and easily run Rust "scripts" which can make use of Cargo's package ecosystem&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/est31/cargo-udeps"&gt;cargo-udeps&lt;/a&gt; [&lt;a href="https://crates.io/crates/cargo-udeps"&gt;cargo-udeps&lt;/a&gt;] - find unused dependencies&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-update"&gt;cargo-update&lt;/a&gt; - cargo subcommand for checking and applying updates to installed executables&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-watch"&gt;cargo-watch&lt;/a&gt; - utility for cargo to compile projects when sources change&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dtolnay/cargo-expand"&gt;dtolnay/cargo-expand&lt;/a&gt; - Expand macros in your source code&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CMake 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Devolutions/CMakeRust"&gt;Devolutions/CMakeRust&lt;/a&gt; - useful for integrating a Rust library into a CMake project&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SiegeLord/RustCMake"&gt;SiegeLord/RustCMake&lt;/a&gt; - an example project showing usage of CMake with Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebook/buck2"&gt;facebook/buck2&lt;/a&gt; - &lt;a href="https://buck2.build/"&gt;Buck2&lt;/a&gt; is a large-scale build tool built in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/suptejas/fleet"&gt;Fleet&lt;/a&gt; [&lt;a href="https://crates.io/crates/fleet-rs"&gt;fleet-rs&lt;/a&gt;] - The blazing fast build tool for Rust.&lt;/li&gt; 
 &lt;li&gt;GitHub actions 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/icepuma/rust-action"&gt;icepuma/rust-action&lt;/a&gt; - rust github action&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/peaceiris/actions-mdbook"&gt;peaceiris/actions-mdbook&lt;/a&gt; - GitHub Actions for mdBook&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nixos.org/"&gt;Nix&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nix-community/fenix"&gt;nix-community/fenix&lt;/a&gt; - Rust toolchains and rust analyzer nightly for nix &lt;a href="https://github.com/nix-community/fenix/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/nix-community/fenix/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build-badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pantsbuild/pants"&gt;pantsbuild/pants&lt;/a&gt; - &lt;a href="https://www.pantsbuild.org/"&gt;Pants&lt;/a&gt; is a fast, scalable, user-friendly build system for codebases of all sizes built in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TraceMachina/nativelink"&gt;tracemachina/nativelink&lt;/a&gt; - &lt;a href="https://www.nativelink.com"&gt;NativeLink&lt;/a&gt; is a Backend Remote Execution platform written in rust for client build systems such as &lt;a href="https://buck2.build/"&gt;Buck2&lt;/a&gt;, &lt;a href="https://bazel.build/"&gt;Bazel&lt;/a&gt;, &lt;a href="https://www.pantsbuild.org/"&gt;Pants&lt;/a&gt;, etc.. &lt;a href="https://securityscorecards.dev/viewer/?uri=github.com/TraceMachina/nativelink"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/TraceMachina/nativelink/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/8050"&gt;&lt;img src="https://www.bestpractices.dev/projects/8050/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://nativelink.slack.com/join/shared_invite/zt-281qk1ho0-krT7HfTUIYfQMdwflRuq7A#/shared-invite/email"&gt;&lt;img src="https://img.shields.io/badge/slack--channel-blue?logo=slack" alt="Slack" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Debugging&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;GDB 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cs01/gdbgui"&gt;gdbgui&lt;/a&gt; - Browser based frontend for gdb to debug C, C++, Rust, and go.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/godzie44/BugStalker"&gt;godzie44/BugStalker&lt;/a&gt; - Modern debugger for Linux x86-64. Written in Rust for Rust programs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kxxt/tracexec"&gt;kxxt/tracexec&lt;/a&gt; [&lt;a href="https://crates.io/crates/tracexec"&gt;tracexec&lt;/a&gt;] - Tracer for execve{,at} and pre-exec behavior, launcher for debuggers.&lt;/li&gt; 
 &lt;li&gt;LLDB 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"&gt;CodeLLDB&lt;/a&gt; - A LLDB extension for &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Deployment&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/emk/rust-musl-builder"&gt;emk/rust-musl-builder&lt;/a&gt; - Docker images for compiling static Rust binaries using musl-libc and musl-gcc, with static versions of useful C libraries&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kpcyrd/mini-docker-rust"&gt;kpcyrd/mini-docker-rust&lt;/a&gt; - An example project for very small rust docker images&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/liuchong/docker-rustup"&gt;liuchong/docker-rustup&lt;/a&gt; - A multiple version (with musl tools) Rust Docker image&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LukeMathWalker/cargo-chef"&gt;LukeMathWalker/cargo-chef&lt;/a&gt; - A tool and pre-built images for caching compiling remote dependencies between Docker builds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-cross/rust-musl-cross"&gt;rust-cross/rust-musl-cross&lt;/a&gt; - Docker images for compiling static Rust binaries using musl-cross &lt;a href="https://github.com/rust-cross/rust-musl-cross/actions?query=workflow%3ABuild"&gt;&lt;img src="https://github.com/rust-cross/rust-musl-cross/workflows/Build/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/docker-rust"&gt;rust-lang-nursery/docker-rust&lt;/a&gt; - the official Rust Docker image&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stavrospanakakis/is_ready"&gt;Stavrospanakakis/is_ready&lt;/a&gt; - Wait for multiple services to become available &lt;img src="https://github.com/Stavrospanakakis/is_ready/actions/workflows/release.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Heroku 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/emk/heroku-buildpack-rust"&gt;emk/heroku-buildpack-rust&lt;/a&gt; - A buildpack for Rust applications on Heroku&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/release-plz/release-plz"&gt;release-plz&lt;/a&gt; [&lt;a href="https://crates.io/crates/release-plz"&gt;release-plz&lt;/a&gt;] - Release crates from CI, with changelog generation and semver check. &lt;a href="https://github.com/release-plz/release-plz/actions"&gt;&lt;img src="https://github.com/release-plz/release-plz/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Embedded&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://rust-embedded.org/"&gt;Rust Embedded&lt;/a&gt; focuses on improving the end-to-end experience of using Rust in resource-constrained environments and non-traditional platforms. See &lt;a href="https://github.com/rust-embedded/awesome-embedded-rust"&gt;awesome-embedded-rust&lt;/a&gt; for a curated, and more extended list of embedded Rust resources.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Arduino 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/avr-rust/ruduino"&gt;avr-rust/ruduino&lt;/a&gt; - Reusable components for the Arduino Uno.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Cross compiling 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/japaric/rust-cross"&gt;japaric/rust-cross&lt;/a&gt; - everything you need to know about cross compiling Rust programs&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/japaric/xargo"&gt;japaric/xargo&lt;/a&gt; - effortless cross compilation of Rust programs to custom bare-metal targets like ARM Cortex-M&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Espressif 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/esp-rs"&gt;esp-rs&lt;/a&gt; - home to a number of community projects enabling the use of the Rust programming language on various SoCs and modules produced by Espressif Systems.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Firmware 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/oreboot/oreboot"&gt;oreboot/oreboot&lt;/a&gt; - oreboot is a fork of coreboot, with C removed, written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;nRF 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nrf-rs/nrf-hal"&gt;nrf-rs/nrf-hal&lt;/a&gt; - A Rust HAL for the nRF family of devices&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;FFI&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://doc.rust-lang.org/book/first-edition/ffi.html"&gt;Foreign Function Interface&lt;/a&gt;, &lt;a href="http://jakegoulding.com/rust-ffi-omnibus/"&gt;The Rust FFI Omnibus&lt;/a&gt; (a collection of examples of using code written in Rust from other languages) and &lt;a href="https://github.com/alexcrichton/rust-ffi-examples"&gt;FFI examples written in Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;C 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mozilla/cbindgen"&gt;mozilla/cbindgen&lt;/a&gt; - generates C header files from Rust source files. Used in Gecko for WebRender&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Sean1708/rusty-cheddar"&gt;Sean1708/rusty-cheddar&lt;/a&gt; - generates C header files from Rust source files&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;C# 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Cysharp/csbindgen"&gt;csbindgen&lt;/a&gt; - generates C# bindings for Rust source files&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;C++ 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dtolnay/cxx"&gt;dtolnay/cxx&lt;/a&gt; - Safe interop between Rust and C++ &lt;a href="https://github.com/dtolnay/cxx"&gt;&lt;img src="https://img.shields.io/badge/github-dtolnay/cxx-8da0cb?style=for-the-badge&amp;amp;labelColor=555555&amp;amp;logo=github" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cpp"&gt;rust-cpp&lt;/a&gt; - Embed C++ code directly in Rust. &lt;a href="https://ci.appveyor.com/project/mystor/rust-cpp/branch/master"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/uu76vmcrwnjqra0u/branch/master?svg=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-bindgen"&gt;rust-lang/rust-bindgen&lt;/a&gt; - A Rust bindings generator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Erlang 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rusterlium/rustler"&gt;rusterlium/rustler&lt;/a&gt; - safe Rust bridge for creating Erlang NIF functions&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Java 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/benanders/rjni"&gt;bennettanderson/rjni&lt;/a&gt; - use Java from Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/drrb/java-rust-example"&gt;drrb/java-rust-example&lt;/a&gt; - use Rust from Java&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/j4rs"&gt;j4rs&lt;/a&gt; - use Java from Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/jni"&gt;jni&lt;/a&gt; - use Rust from Java&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/jni-sys"&gt;jni-sys&lt;/a&gt; - Rust definitions corresponding to jni.h&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/rucaja"&gt;rucaja&lt;/a&gt; - use Java from Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Lua 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jcmoyer/rust-lua53"&gt;jcmoyer/rust-lua53&lt;/a&gt; - Lua 5.3 bindings for Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lilyball/rust-lua"&gt;lilyball/rust-lua&lt;/a&gt; - Safe Rust bindings to Lua 5.1&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mlua-rs/mlua"&gt;mlua-rs/mlua&lt;/a&gt; - High level Lua 5.4/5.3/5.2/5.1 (including LuaJIT) and Roblox Luau bindings to Rust with async/await support &lt;a href="https://github.com/mlua-rs/mlua/actions"&gt;&lt;img src="https://github.com/mlua-rs/mlua/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tickbh/td_rlua"&gt;tickbh/td_rlua&lt;/a&gt; [&lt;a href="https://crates.io/crates/td_rlua"&gt;td_rlua&lt;/a&gt;] - Zero-cost high-level lua 5.3 wrapper for Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tomaka/hlua"&gt;tomaka/hlua&lt;/a&gt; - Rust library to interface with Lua&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;mruby 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/anima-engine/mrusty"&gt;anima-engine/mrusty&lt;/a&gt; - mruby safe bindings for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Node.js 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/infinyon/node-bindgen"&gt;infinyon/node-bindgen&lt;/a&gt; - Easy way to generate nodejs module using Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/neon-bindings/neon"&gt;neon-bindings/neon&lt;/a&gt; - Rust bindings for writing safe and fast native Node.js modules&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zhangyuang/node-ffi-rs"&gt;zhangyuang/node-ffi-rs&lt;/a&gt; - A module written in Rust and N-API provides interface (FFI) features for Node.js&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Objective-C 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SSheldon/rust-objc"&gt;SSheldon/rust-objc&lt;/a&gt; - Objective-C Runtime bindings and wrapper for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;PHP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/phper-framework/phper"&gt;phper-framework/phper&lt;/a&gt; - The framework that allows us to write PHP extensions using pure and safe Rust whenever possible&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Prolog 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mthom/scryer-prolog/"&gt;mthom/scryer-prolog&lt;/a&gt; - Scryer Prolog is a free software ISO Prolog system written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Python 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dgrunwald/rust-cpython"&gt;dgrunwald/rust-cpython&lt;/a&gt; - Python bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/getsentry/milksnake"&gt;getsentry/milksnake&lt;/a&gt; - extension for python setuptools that allows you to distribute dynamic linked libraries in Python wheels in the most portable way imaginable.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/PyO3/PyO3"&gt;PyO3/PyO3&lt;/a&gt; - Rust bindings for the Python interpreter&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RustPython/RustPython"&gt;RustPython&lt;/a&gt; - A Python Interpreter written in Rust &lt;a href="https://github.com/RustPython/RustPython/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/RustPython/RustPython/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ruby 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/d-unsed/ruru"&gt;d-unsed/ruru&lt;/a&gt; - native Ruby extensions written in Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/danielpclark/rutie"&gt;danielpclark/rutie&lt;/a&gt; - native Ruby extensions written in Rust and vice versa&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Web Assembly 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rhysd/wain"&gt;rhysd/wain&lt;/a&gt; - wain: WebAssembly INterpreter from scratch in Safe Rust with zero dependency &lt;a href="https://github.com/rhysd/wain/actions?query=workflow%3ACI+branch%3Amaster+event%3Apush"&gt;&lt;img src="https://github.com/rhysd/wain/workflows/CI/badge.svg?branch=master&amp;amp;event=push" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/wasm-bindgen/wasm-bindgen"&gt;wasm-bindgen&lt;/a&gt; - A project for facilitating high-level interactions between wasm modules and JS.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/drager/wasm-pack"&gt;wasm-pack&lt;/a&gt; - &lt;span&gt;üì¶&lt;/span&gt; &lt;span&gt;‚ú®&lt;/span&gt; pack up the wasm and publish it to npm!&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Formatters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dprint/dprint"&gt;dprint&lt;/a&gt; - A pluggable and configurable code formatting platform &lt;a href="https://github.com/dprint/dprint/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/dprint/dprint/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jinxdash/prettier-plugin-rust"&gt;Prettier Rust&lt;/a&gt; - An opinionated Rust code formatter that autofixes bad syntax (&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; community plugin)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt"&gt;rustfmt&lt;/a&gt; - Rust code formatter maintained by the Rust team and included in cargo&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;IDEs&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://areweideyet.com/"&gt;Are we (I)DE yet?&lt;/a&gt; and &lt;a href="https://www.rust-lang.org/tools"&gt;Rust Tools&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.eclipse.org/"&gt;Eclipse&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/eclipse-corrosion/corrosion"&gt;Eclipse Corrosion&lt;/a&gt; - a Rust development plugin for the Eclipse IDE, providing a rich edition experience through integration with the Rust Analyzer language server, Cargo runner and gdb debugger&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/racer-rust/emacs-racer"&gt;emacs-racer&lt;/a&gt; - Autocompletion (see also &lt;a href="https://company-mode.github.io"&gt;company&lt;/a&gt; and &lt;a href="https://github.com/auto-complete/auto-complete"&gt;auto-complete&lt;/a&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/flycheck/flycheck-rust"&gt;flycheck-rust&lt;/a&gt; - Rust support for &lt;a href="https://github.com/flycheck/flycheck"&gt;Flycheck&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-mode"&gt;rust-mode&lt;/a&gt; - Rust Major Mode&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/brotzeit/rustic"&gt;rustic&lt;/a&gt; - Rust development environment for Emacs &lt;a href="https://github.com/brotzeit/rustic/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/brotzeit/rustic/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitpod.io"&gt;gitpod.io&lt;/a&gt; - Online IDE with full Rust support based on Rust Language Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://wiki.gnome.org/Apps/Builder"&gt;gnome-builder&lt;/a&gt; - native support for rust and cargo since Version 3.22.2&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/intellij-rust/intellij-rust"&gt;intellij-rust/intellij-rust&lt;/a&gt; - Rust plugin for the IntelliJ Platform&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://kakoune.org/"&gt;Kakoune&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kakoune-lsp/kakoune-lsp/"&gt;kakoune-lsp&lt;/a&gt; - &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;LSP&lt;/a&gt; client. Implemented in Rust and supports rls out of the box.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lapce/lapce"&gt;lapce&lt;/a&gt; - Lightning-fast and Powerful Code Editor written in Rust. &lt;a href="https://github.com/lapce/lapce/actions/workflows/release.yml"&gt;&lt;img src="https://github.com/lapce/lapce/actions/workflows/release.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/madeso/ride"&gt;Ride&lt;/a&gt; - A Rust IDE&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.jetbrains.com/rust/"&gt;RustRover&lt;/a&gt; - A powerful Rust IDE by JetBrains, free for individual non-commercial use&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-enhanced"&gt;rust-lang/rust-enhanced&lt;/a&gt; - official Rust package&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://vim.sourceforge.io/"&gt;Vim&lt;/a&gt; - the ubiquitous text editor 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/autozimu/LanguageClient-neovim"&gt;autozimu/LanguageClient-neovim&lt;/a&gt; - &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;LSP&lt;/a&gt; client. Implemented in Rust and supports rls out of the box.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nwiizo/cargo.nvim"&gt;cargo.nvim&lt;/a&gt; - A Neovim plugin for seamless integration with Cargo commands.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Saecki/crates.nvim"&gt;crates.nvim&lt;/a&gt; - plugin that helps to managing crates.io dependencies.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust.vim"&gt;rust.vim&lt;/a&gt; - provides file detection, syntax highlighting, formatting, Syntastic integration, and more.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/racer-rust/vim-racer"&gt;vim-racer&lt;/a&gt; - allows vim to use &lt;a href="https://github.com/racer-rust/racer"&gt;Racer&lt;/a&gt; for Rust code completion and navigation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Visual Studio 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ZoeyR/rls-vs2017"&gt;dgriffen/rls-vs2017&lt;/a&gt; - Rust support for Visual Studio 2017 Preview &lt;a href="https://ci.appveyor.com/project/dgriffen/rls-vs2017"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/d2lxlincwninhsng?svg=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/VisualRust"&gt;PistonDevelopers/VisualRust&lt;/a&gt; - A Visual Studio extension for Rust &lt;a href="https://ci.appveyor.com/project/vosen/visualrust"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/5nw5no10jj0y4p3f?svg=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"&gt;CodeLLDB&lt;/a&gt; - A LLDB extension&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=fill-labs.dependi"&gt;Dependi&lt;/a&gt; - Manage your dependencies with ease&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml"&gt;Even Better TOML&lt;/a&gt; - TOML support in vscode&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jinxdash.prettier-rust"&gt;Prettier - Code formatter (Rust)&lt;/a&gt; - Opinionated Rust code formatter that autofixes bad syntax (&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; community plugin)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer"&gt;rust-analyzer&lt;/a&gt; - An alternative rust language server to the RLS&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Profiling&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bencherdev/bencher"&gt;Bencher&lt;/a&gt; - A suite of continuous benchmarking tools designed to catch performance regressions in CI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bheisler/criterion.rs"&gt;bheisler/criterion.rs&lt;/a&gt; - Statistics-driven benchmarking library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/koute/bytehound"&gt;Bytehound&lt;/a&gt; - A memory profiler for Linux&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nvzqz/divan"&gt;Divan&lt;/a&gt; - Simple yet powerful benchmarking library with allocation profiling&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ellisonch/rust-stopwatch"&gt;ellisonch/rust-stopwatch&lt;/a&gt; - A stopwatch library&lt;/li&gt; 
 &lt;li&gt;FlameGraphs 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/llogiq/flame"&gt;llogiq/flame&lt;/a&gt; - An intrusive flamegraph profiling tool for rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mrhooray/torch"&gt;mrhooray/torch&lt;/a&gt; - generates FlameGraphs based on DWARF Debug Info&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bytedance/g3"&gt;g3bench&lt;/a&gt; - A benchmark tool that supports HTTP 1.x, HTTP 2, HTTP 3, TLS Handshake, DNS and Cloudflare Keyless&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sharkdp/hyperfine"&gt;sharkdp/hyperfine&lt;/a&gt; - A command-line benchmarking tool&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Services&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deps-rs/deps.rs"&gt;deps.rs&lt;/a&gt; - Detect outdated or insecure dependencies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs"&gt;docs.rs&lt;/a&gt; - Automatic documentation generation of crates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Static analysis&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/assert"&gt;assert&lt;/a&gt;, &lt;a href="https://crates.io/keywords/static"&gt;static&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/endorlabs/mirai"&gt;MIRAI&lt;/a&gt; - an abstract interpreter operating on Rust's mid-level intermediate representation (MIR) &lt;a href="https://github.com/endorlabs/mirai/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/endorlabs/mirai/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Continuous Integration" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Artisan-Lab/RAPx"&gt;RAPx&lt;/a&gt; - A platform that helps Rust programmers develop and use advanced static analysis tools beyond those provided by the rustc compiler.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/static_assertions"&gt;static_assertions&lt;/a&gt; - Compile-time assertions to ensure that invariants are met&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/verus-lang/verus"&gt;verus-lang/verus&lt;/a&gt; - Verified Rust for low-level systems code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Testing&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/test"&gt;test&lt;/a&gt;, &lt;a href="https://crates.io/keywords/testing"&gt;testing&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Code Coverage 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-tarpaulin"&gt;tarpaulin&lt;/a&gt; - A code coverage tool&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Continuous Integration 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/japaric/trust"&gt;trust&lt;/a&gt; - A Travis CI and AppVeyor template to test your Rust crate on 5 architectures and publish binary releases of it for Linux, macOS and Windows&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Frameworks and Runners 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AlKass/polish"&gt;AlKass/polish&lt;/a&gt; - Mini Testing/Test-Driven Framework &lt;a href="https://crates.io/crates/polish"&gt;&lt;img src="https://img.shields.io/crates/v/polish.svg?sanitize=true" alt="Crates Package Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bitfield/cargo-testdox"&gt;bitfield/cargo-testdox&lt;/a&gt; [&lt;a href="https://crates.io/crates/cargo-testdox"&gt;cargo-testdox&lt;/a&gt;] - Turns your Rust tests into docs &lt;a href="https://github.com/bitfield/cargo-testdox/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/bitfield/cargo-testdox/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-dinghy/"&gt;cargo-dinghy&lt;/a&gt; - A cargo extension to simplify running library tests and benches on smartphones and other small processor devices.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cucumber"&gt;cucumber&lt;/a&gt; &lt;a href="https://crates.io/crates/cucumber"&gt;&lt;img src="https://img.shields.io/crates/v/cucumber.svg?sanitize=true" alt="Latest Version" /&gt;&lt;/a&gt; - An implementation of the Cucumber testing framework for Rust. Fully native, no external test runners or dependencies. &lt;a href="https://github.com/cucumber-rs/cucumber/actions"&gt;&lt;img src="https://github.com/cucumber-rs/cucumber/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/d-e-s-o/test-log"&gt;d-e-s-o/test-log&lt;/a&gt; [&lt;a href="https://crates.io/crates/test-log"&gt;test-log&lt;/a&gt;] - A replacement of the &lt;code&gt;#[test]&lt;/code&gt; attribute that initializes logging and/or tracing infrastructure before running tests. &lt;a href="https://github.com/d-e-s-o/test-log/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/d-e-s-o/test-log/actions/workflows/test.yml/badge.svg?branch=main" alt="GitHub Workflow Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/demonstrate"&gt;demonstrate&lt;/a&gt; - Declarative Testing Framework &lt;a href="https://github.com/aubaugh/demonstrate"&gt;&lt;img src="https://github.com/aubaugh/demonstrate/workflows/Continuous%20Integration/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/googletest"&gt;GoogleTest Rust&lt;/a&gt; - Powerful test assertion framework based on the C++ test library GoogleTest &lt;a href="https://github.com/google/googletest-rust/actions?query=workflow%3ACI+branch%3Amain"&gt;&lt;img src="https://github.com/google/googletest-rust/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/wfxr/rlt"&gt;rlt&lt;/a&gt; - A universal load testing framework, with real-time tui support.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/rstest"&gt;rstest&lt;/a&gt; - Fixture-based test framework &lt;a href="https://github.com/la10736/rstest/actions"&gt;&lt;img src="https://github.com/la10736/rstest/workflows/Test/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/speculate"&gt;speculate&lt;/a&gt; - An RSpec inspired minimal testing framework&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mocking and Test Data 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/asomers/mockall"&gt;asomers/mockall&lt;/a&gt; [&lt;a href="https://crates.io/crates/mockall"&gt;mockall&lt;/a&gt;] - A powerful mock object library. &lt;a href="https://cirrus-ci.com/github/asomers/mockall"&gt;&lt;img src="https://api.cirrus-ci.com/github/asomers/mockall.svg?sanitize=true" alt="Cirrus Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bcheidemann/fixtures-rs/tree/main/fixtures"&gt;bcheidemann/fixtures-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/fixtures"&gt;fixtures&lt;/a&gt;] - A proc macro for generating tests from fixtures using glob patterns&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cksac/fake-rs"&gt;fake-rs&lt;/a&gt; - A library for generating fake data&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/calder/rust-goldenfile"&gt;goldenfile&lt;/a&gt; [&lt;a href="https://crates.io/crates/goldenfile"&gt;goldenfile&lt;/a&gt;] - A library providing a simple API for goldenfile testing.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alexliesenfeld/httpmock"&gt;httpmock&lt;/a&gt; - HTTP mocking &lt;a href="https://dev.azure.com/alexliesenfeld/httpmock/_build/latest?definitionId=2&amp;amp;branchName=master"&gt;&lt;img src="https://dev.azure.com/alexliesenfeld/httpmock/_apis/build/status/alexliesenfeld.httpmock?branchName=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/mockiato"&gt;mockiato&lt;/a&gt; - A strict, yet friendly mocking library for unstable Rust 2018&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/mockito"&gt;mockito&lt;/a&gt; - HTTP mocking&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/IBM/mocktail"&gt;mocktail&lt;/a&gt; &lt;a href="https://crates.io/crates/mocktail"&gt;&lt;img src="https://img.shields.io/crates/v/mocktail" alt="mocktail" /&gt;&lt;/a&gt; - HTTP &amp;amp; gRPC server mocking for Rust &lt;img src="https://github.com/IBM/mocktail/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nrxus/faux/"&gt;nrxus/faux&lt;/a&gt; &lt;a href="https://crates.io/crates/faux"&gt;&lt;img src="https://img.shields.io/crates/v/faux.svg?sanitize=true" alt="Latest Version" /&gt;&lt;/a&gt; - A library to create mocks out of structs. &lt;img src="https://github.com/nrxus/faux/workflows/test/badge.svg?branch=master" alt="build" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/shuttle-hq/synth/"&gt;synth&lt;/a&gt; - Generate database data declaratively. &lt;a href="https://github.com/shuttle-hq/synth"&gt;&lt;img src="https://github.com/shuttle-hq/synth/actions/workflows/synth-test.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mutation Testing 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sourcefrog/cargo-mutants"&gt;cargo-mutants&lt;/a&gt; [&lt;a href="https://crates.io/crates/cargo-mutants"&gt;cargo-mutants&lt;/a&gt;] - Finds inadequately tested code by injecting mutations, no source changes required. &lt;a href="https://github.com/sourcefrog/cargo-mutants/actions/workflows/tests.yml?query=branch%3Amain"&gt;&lt;img src="https://github.com/sourcefrog/cargo-mutants/actions/workflows/tests.yml/badge.svg?branch=main&amp;amp;event=push" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/llogiq/mutagen"&gt;mutagen&lt;/a&gt; [&lt;a href="https://crates.io/crates/mutagen"&gt;mutagen&lt;/a&gt;] - A source-level mutation testing framework (nightly only)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Property Testing and Fuzzing 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/proptest"&gt;proptest&lt;/a&gt; - property testing framework inspired by the &lt;a href="https://hypothesis.works/"&gt;Hypothesis&lt;/a&gt; framework for Python&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/quickcheck"&gt;quickcheck&lt;/a&gt; - A Rust implementation of &lt;a href="https://wiki.haskell.org/Introduction_to_QuickCheck1"&gt;QuickCheck&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-fuzz/afl.rs"&gt;rust-fuzz/afl.rs&lt;/a&gt; - A Rust fuzzer, using &lt;a href="https://lcamtuf.coredump.cx/afl/"&gt;AFL&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Transpiling&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aleph-lang/aleph_ollama"&gt;aleph-lang/aleph_ollama&lt;/a&gt; [&lt;a href="https://crates.io/crates/aleph_ollama"&gt;aleph_ollama&lt;/a&gt;] - AI-powered source code translation tool using local Ollama API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BayesWitnesses/m2cgen"&gt;BayesWitnesses/m2cgen&lt;/a&gt; - A CLI tool to transpile trained classic machine learning models into a native Rust code with zero dependencies. &lt;a href="https://github.com/BayesWitnesses/m2cgen/actions"&gt;&lt;img src="https://github.com/BayesWitnesses/m2cgen/workflows/GitHub%20Actions/badge.svg?branch=master" alt="GitHub Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/immunant/c2rust"&gt;immunant/c2rust&lt;/a&gt; - C to Rust translator and cross checker built atop Clang/LLVM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jameysharp/corrode"&gt;jameysharp/corrode&lt;/a&gt; - A C to Rust translator written in Haskell.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Libraries&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/larksuite/perf-monitor-rs"&gt;perf-monitor-rs&lt;/a&gt; - A toolkit designed to be a foundation for applications to monitor their performance. &lt;a href="https://crates.io/crates/perf_monitor"&gt;&lt;img src="https://img.shields.io/crates/v/perf_monitor.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Artificial Intelligence&lt;/h3&gt; 
&lt;h4&gt;Genetic algorithms&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/innoave/genevo"&gt;innoave/genevo&lt;/a&gt; - Execute genetic algorithm (GA) simulations in a customizable and extensible way.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/m-decoster/RsGenetic"&gt;m-decoster/RsGenetic&lt;/a&gt; - Genetic Algorithm library. In maintenance mode.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Martin1887/oxigen"&gt;Martin1887/oxigen&lt;/a&gt; - Fast, parallel, extensible and adaptable genetic algorithm library. A example using this library solves the N Queens problem for N = 255 in only few seconds and using less than 1 MB of RAM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pkalivas/radiate"&gt;pkalivas/radiate&lt;/a&gt; - A customizable parallel genetic programming engine capable of evolving solutions for supervised, unsupervised, and reinforcement learning problems. Comes with complete and customizable implementation of NEAT and Evtree.&lt;img src="https://img.shields.io/crates/v/radiate" alt="Crates.io" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/willi-kappler/darwin-rs"&gt;willi-kappler/darwin-rs&lt;/a&gt; - Evolutionary algorithms&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Machine learning&lt;/h4&gt; 
&lt;p&gt;See [&lt;a href="https://crates.io/keywords/machine-learning"&gt;Machine learning&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;See also &lt;a href="https://medium.com/@autumn_eng/about-rust-s-machine-learning-community-4cda5ec8a790#.hvkp56j3f"&gt;About Rust‚Äôs Machine Learning Community&lt;/a&gt; and &lt;a href="https://www.arewelearningyet.com"&gt;Are we learning yet?&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/autumnai/leaf"&gt;autumnai/leaf&lt;/a&gt; - Open Machine Intelligence framework.. Abandoned project. The most updated fork is &lt;a href="https://github.com/fff-rs/juice"&gt;juice&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ave-Sergeev/Tictonix"&gt;ave-sergeev/tictonix&lt;/a&gt; [&lt;a href="https://crates.io/crates/tictonix"&gt;tictonix&lt;/a&gt;] - A library that provides the ability to convert tokens into embeddings, as well as to encode their positions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blackportal-ai/delta"&gt;blackportal-ai/delta&lt;/a&gt; - Œî An Open-Source Machine Learning Framework in Rust. &lt;img src="https://img.shields.io/crates/v/deltaml.svg?sanitize=true" alt="crates.io" /&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/blackportal-ai/delta/core.yml?branch=master" alt="build" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blackportal-ai/nebula"&gt;blackportal-ai/nebula&lt;/a&gt; - A Package Manager for Machine Learning Datasets and Models. &lt;img src="https://img.shields.io/github/actions/workflow/status/blackportal-ai/nebula/core.yml?branch=master" alt="build" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tracel-ai/burn"&gt;burn&lt;/a&gt; - A Flexible and Comprehensive Deep Learning Framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/coreylowman/dfdx"&gt;coreylowman/dfdx&lt;/a&gt; - CUDA accelerated machine learning framework that leverages many of Rust's unique features. &lt;img src="https://img.shields.io/crates/v/dfdx" alt="Crates.io" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/guillaume-be/rust-bert"&gt;guillaume-be/rust-bert&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust_bert"&gt;rust_bert&lt;/a&gt;] - Ready-to-use NLP pipelines and language models&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/candle"&gt;huggingface/candle&lt;/a&gt; [&lt;a href="https://crates.io/crates/candle-core"&gt;candle-core&lt;/a&gt;] - a minimalist ML framework with a focus on easiness of use and on performance (including GPU support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/tokenizers"&gt;huggingface/tokenizers&lt;/a&gt; - Hugging Face's tokenizers for modern NLP pipelines (original implementation) with bindings for Python. &lt;a href="https://github.com/huggingface/tokenizers/actions"&gt;&lt;img src="https://github.com/huggingface/tokenizers/workflows/Rust/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/LaurentMazare/tch-rs"&gt;LaurentMazare/tch-rs&lt;/a&gt; - Bindings for PyTorch.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maciejkula/rustlearn"&gt;maciejkula/rustlearn&lt;/a&gt; - Machine learning library. &lt;a href="https://app.circleci.com/pipelines/github/maciejkula/rustlearn"&gt;&lt;img src="https://circleci.com/gh/maciejkula/rustlearn.svg?style=svg" alt="Circle CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Mottl/lightgbm3-rs"&gt;Mottl/lightgb3-rs&lt;/a&gt; - Bindings for LightGBM &lt;a href="https://crates.io/crates/lightgbm3"&gt;&lt;img src="https://img.shields.io/crates/v/lightgbm3.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Mottl/lightgbm3-rs/actions"&gt;&lt;img src="https://github.com/Mottl/lightgbm3-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/perpetual-ml/perpetual"&gt;perpetual-ml/perpetual&lt;/a&gt; [&lt;a href="https://crates.io/crates/perpetual"&gt;perpetual&lt;/a&gt;] - A self-generalizing gradient boosting machine which doesn't need hyperparameter optimization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ramsyana/RustTensor"&gt;ramsyana/RustTensor&lt;/a&gt; - A learning-focused, high-performance tensor computation library built from scratch in Rust with automatic differentiation and CPU/CUDA backends.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-ml/linfa"&gt;rust-ml/linfa&lt;/a&gt; - Machine learning framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/smartcorelib/smartcore"&gt;smartcorelib/smartcore&lt;/a&gt; - Machine Learning Library [&lt;img src="https://img.shields.io/circleci/build/github/smartcorelib/smartcore" alt="Build Status" /&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tensorflow/rust"&gt;tensorflow/rust&lt;/a&gt; - Bindings for TensorFlow.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;OpenAI&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/64bit/async-openai"&gt;64bit/async-openai&lt;/a&gt; [&lt;a href="https://crates.io/crates/async-openai"&gt;async-openai&lt;/a&gt;] - Ergonomic Rust bindings for OpenAI API based on OpenAPI spec.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openai/harmony"&gt;openai/harmony&lt;/a&gt; [&lt;a href="https://crates.io/crates/openai-harmony/0.0.3"&gt;openai-harmony&lt;/a&gt;] - Renderer for the harmony response format to be used with gpt-oss.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zurawiki/tiktoken-rs"&gt;zurawiki/tiktoken-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/tiktoken-rs"&gt;tiktoken-rs&lt;/a&gt;] - Library for tokenizing text with OpenAI models using tiktoken. &lt;a href="https://github.com/zurawiki/tiktoken-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zurawiki/tiktoken-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Tooling&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BoundaryML/baml"&gt;BAML&lt;/a&gt; - A simple prompting language for building reliable AI workflows and agents. BAML's compiler is written in Rust!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Astronomy&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/astronomy"&gt;astronomy&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cds-astro/aladin-lite"&gt;cds-astro/aladin-lite&lt;/a&gt; - Web application for visualizing spatial and planetary image surveys in different projections&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/fitsio"&gt;fitsio&lt;/a&gt; - fits interface library wrapping cfitsio&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flosse/rust-sun"&gt;flosse/rust-sun&lt;/a&gt; [&lt;a href="https://crates.io/crates/sun"&gt;sun&lt;/a&gt;] - A rust port of the JS library suncalc&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saurvs/astro-rust"&gt;saurvs/astro-rust&lt;/a&gt; - astronomy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Asynchronous&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://async.rs/"&gt;async-std&lt;/a&gt; [&lt;a href="https://crates.io/crates/async-std"&gt;async-std&lt;/a&gt;] - Async version of the Rust standard library &lt;a href="https://github.com/async-rs/async-std/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/async-rs/async-std/actions/workflows/ci.yml/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dagrs-dev/dagrs"&gt;dagrs&lt;/a&gt; - A high-performance asynchronous task programming framework, which follows the concept of Flow based Programming.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dpc/mioco"&gt;dpc/mioco&lt;/a&gt; - Scalable, coroutine-based, asynchronous IO handling library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/igumnoff/gabriel2"&gt;igumnoff/gabriel2&lt;/a&gt; [&lt;a href="https://crates.io/crates/gabriel2"&gt;gabriel2&lt;/a&gt;] - Gabriel2: An actor-model library based on Tokio&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tokio-rs/mio"&gt;mio&lt;/a&gt; - MIO is a lightweight IO library, with a focus on adding as little overhead as possible over the OS abstractions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs"&gt;rust-lang/futures-rs&lt;/a&gt; - Zero-cost futures&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/t3hmrman/async-dropper"&gt;t3hmrman/async-dropper&lt;/a&gt; [&lt;a href="https://crates.io/crates/async-dropper"&gt;async-dropper&lt;/a&gt;] - Implementation of &lt;code&gt;AsyncDrop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TeaEntityLab/fpRust"&gt;TeaEntityLab/fpRust&lt;/a&gt; - Monad/MonadIO, Handler, Coroutine/doNotation, Functional Programming features for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tokio-rs/tokio"&gt;tokio-rs/tokio&lt;/a&gt; - A runtime for writing reliable, asynchronous, and slim applications with the Rust programming language.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tqwewe/kameo"&gt;tqwewe/kameo&lt;/a&gt; - Fault-tolerant Async Actors Built on Tokio&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Xudong-Huang/may"&gt;Xudong-Huang/may&lt;/a&gt; - Stackful coroutine library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zonyitoo/coio-rs"&gt;zonyitoo/coio-rs&lt;/a&gt; - A coroutine I/O library with a working-stealing scheduler&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Audio and Music&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/audio"&gt;audio&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aschey/stream-download-rs"&gt;aschey/stream-download-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/stream-download"&gt;stream-download&lt;/a&gt;] - A library for streaming audio, video, and other media content &lt;a href="https://github.com/aschey/stream-download-rs/actions"&gt;&lt;img src="https://github.com/aschey/stream-download-rs/actions/workflows/ci.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/hound"&gt;hound&lt;/a&gt; - A WAV encoding and decoding library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/insomnimus/nodi"&gt;insomnimus/nodi&lt;/a&gt; [&lt;a href="https://crates.io/crates/nodi"&gt;nodi&lt;/a&gt;] - A library for playback and abstraction of MIDI files. &lt;a href="https://github.com/insomnimus/nodi/actions"&gt;&lt;img src="https://github.com/insomnimus/nodi/actions/workflows/main.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jhasse/ears"&gt;jhasse/ears&lt;/a&gt; - A simple library to play Sounds and Musics, on top of OpenAL and libsndfile&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/musitdev/portmidi-rs"&gt;musitdev/portmidi-rs&lt;/a&gt; - &lt;a href="https://portmedia.sourceforge.net/portmidi/"&gt;PortMidi&lt;/a&gt; bindings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ozankasikci/rust-music-theory"&gt;ozankasikci/rust-music-theory&lt;/a&gt; - Music theory library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pdeljanov/Symphonia"&gt;pdeljanov/Symphonia&lt;/a&gt; - Audio decoding and media demuxing library supporting AAC, FLAC, MP3, MP4, OGG, Vorbis, and WAV.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RustAudio"&gt;RustAudio&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RustAudio/cpal"&gt;RustAudio/cpal&lt;/a&gt; - Low-level cross-platform audio I/O library. &lt;a href="https://github.com/RustAudio/cpal/actions"&gt;&lt;img src="https://github.com/RustAudio/cpal/workflows/cpal/badge.svg?branch=master" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RustAudio/rodio"&gt;RustAudio/rodio&lt;/a&gt; - Audio playback library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/RustAudio/rust-portaudio"&gt;RustAudio/rust-portaudio&lt;/a&gt; - PortAudio bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Serial-ATA/lofty-rs"&gt;Serial-ATA/lofty-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/lofty"&gt;lofty&lt;/a&gt;] - A library for reading and editing the metadata of various audio formats &lt;a href="https://github.com/Serial-ATA/lofty-rs/actions"&gt;&lt;img src="https://github.com/Serial-ATA/lofty-rs/actions/workflows/ci.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Authentication&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/constantoine/totp-rs"&gt;constantoine/totp-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/totp-rs"&gt;totp-rs&lt;/a&gt;] - 2fa library to generate and verify TOTP-based tokens &lt;img src="https://github.com/constantoine/totp-rs/workflows/Rust/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Keats/jsonwebtoken"&gt;Keats/jsonwebtoken&lt;/a&gt; - &lt;a href="https://en.wikipedia.org/wiki/JSON_Web_Token"&gt;JSON Web Token&lt;/a&gt; library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ramosbugs/oauth2-rs"&gt;oauth2&lt;/a&gt; - Extensible, strongly-typed OAuth2 client library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/197g/oxide-auth"&gt;oxide-auth&lt;/a&gt; - A OAuth2 server library, for use in combination with actix or other frontends, featuring a set of configurable and pluggable backends &lt;a href="https://cirrus-ci.com/github/HeroicKatora/oxide-auth"&gt;&lt;img src="https://api.cirrus-ci.com/github/197g/oxide-auth.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sgrust01/jwtvault"&gt;sgrust01/jwtvault&lt;/a&gt; - Async library to manage and orchestrate JWT workflow&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dermesser/yup-oauth2"&gt;yup-oauth2&lt;/a&gt; - An oauth2 client implementation providing the Device, Installed and Service Account flows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Automotive&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/idletea/tokio-socketcan"&gt;idletea/tokio-socketcan&lt;/a&gt; [&lt;a href="https://crates.io/crates/tokio-socketcan"&gt;tokio-socketcan&lt;/a&gt;] - Linux SocketCAN support for tokio based on the socketcan crate&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcelbuesing/can-dbc"&gt;marcelbuesing/can-dbc&lt;/a&gt; [&lt;a href="https://crates.io/crates/can-dbc"&gt;can-dbc&lt;/a&gt;] - A parser for the DBC format&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcelbuesing/tokio-socketcan-bcm"&gt;marcelbuesing/tokio-socketcan-bcm&lt;/a&gt; [&lt;a href="https://crates.io/crates/tokio-socketcan-bcm"&gt;tokio-socketcan-bcm&lt;/a&gt;] - Linux SocketCAN BCM support for tokio&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/socketcan-rs/socketcan-rs"&gt;mbr/socketcan&lt;/a&gt; [&lt;a href="https://crates.io/crates/socketcan"&gt;socketcan&lt;/a&gt;] - Linux SocketCAN library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Sensirion/lin-bus-rs"&gt;Sensirion/lin-bus&lt;/a&gt; [&lt;a href="https://crates.io/crates/lin-bus"&gt;lin-bus&lt;/a&gt;] - LIN bus driver traits and protocol implementation &lt;a href="https://app.circleci.com/pipelines/github/Sensirion/lin-bus-rs"&gt;&lt;img src="https://circleci.com/gh/Sensirion/lin-bus-rs.svg?style=svg" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Bioinformatics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/biodatageeks/polars-bio"&gt;polars-bio&lt;/a&gt; - Blazing-Fast Bioinformatic Operations on Python DataFrames &lt;img src="https://img.shields.io/pypi/v/polars-bio" alt="PyPI - Version" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-bio"&gt;Rust-Bio&lt;/a&gt; - bioinformatics libraries.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Caching&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/06chaynes/http-cache"&gt;06chaynes/http-cache&lt;/a&gt; [&lt;a href="https://crates.io/crates/http-cache"&gt;http-cache&lt;/a&gt;] - A caching middleware that follows HTTP caching rules &lt;a href="https://github.com/06chaynes/http-cache/actions/workflows/http-cache.yml"&gt;&lt;img src="https://github.com/06chaynes/http-cache/workflows/http-cache/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aisk/rust-memcache"&gt;aisk/rust-memcache&lt;/a&gt; - Memcached client library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/al8n/stretto"&gt;al8n/stretto&lt;/a&gt; - A high performance thread-safe memory-bound cache &lt;a href="https://github.com/al8n/stretto/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/al8n/stretto/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jaemk/cached"&gt;jaemk/cached&lt;/a&gt; - Simple function caching/memoization&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/moka-rs/moka"&gt;moka-rs/moka&lt;/a&gt; - A high performance concurrent caching library inspired by the Caffeine library for Java &lt;a href="https://github.com/moka-rs/moka/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/moka-rs/moka/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mozilla/sccache/"&gt;mozilla/sccache&lt;/a&gt; - Shared Compilation Cache, great compilation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zkat/cacache-rs"&gt;zkat/cacache-rs&lt;/a&gt; - A high-performance, concurrent, content-addressable disk cache, optimized for async APIs &lt;a href="https://github.com/zkat/cacache-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zkat/cacache-rs/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Cloud&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;AWS [&lt;a href="https://crates.io/keywords/aws"&gt;aws&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/awslabs/aws-lambda-rust-runtime"&gt;awslabs/aws-lambda-rust-runtime&lt;/a&gt; [&lt;a href="https://crates.io/crates/lambda_runtime"&gt;lambda_runtime&lt;/a&gt;] - Runtime for AWS Lambda &lt;a href="https://github.com/awslabs/aws-lambda-rust-runtime/actions"&gt;&lt;img src="https://github.com/awslabs/aws-lambda-rust-runtime/workflows/Rust/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/awslabs/aws-sdk-rust"&gt;awslabs/aws-sdk-rust&lt;/a&gt; - The new AWS SDK&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rusoto/rusoto"&gt;rusoto/rusoto&lt;/a&gt; - An AWS SDK for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Azure 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Azure/azure-sdk-for-rust"&gt;Azure/azure-sdk-for-rust&lt;/a&gt; - Official Azure SDK for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Load Balancer 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bparli/convey"&gt;Convey&lt;/a&gt; - Layer 4 Load Balancer with dynamic configuration loading.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Multi Cloud 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Qovery/engine"&gt;Qovery/engine&lt;/a&gt; - Abstraction layer library that turns easy application deployment on Cloud providers in just a few minutes&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Command-line&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Argument parsing 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/clap-rs/clap"&gt;clap-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/clap"&gt;clap&lt;/a&gt;] - A simple to use, full featured command-line argument parser&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cliparser"&gt;cliparser&lt;/a&gt; - Simple command line parser. &lt;a href="https://github.com/sagiegurari/cliparser/actions"&gt;&lt;img src="https://github.com/sagiegurari/cliparser/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/docopt/docopt.rs"&gt;docopt/docopt.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/docopt"&gt;docopt&lt;/a&gt;] - Implementation of &lt;a href="http://docopt.org"&gt;DocOpt&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/google/argh"&gt;google/argh&lt;/a&gt; [&lt;a href="https://crates.io/crates/argh"&gt;argh&lt;/a&gt;] - An opinionated Derive-based argument parser optimized for code size &lt;a href="https://github.com/google/argh/actions"&gt;&lt;img src="https://github.com/google/argh/workflows/Argh/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/killercup/quicli"&gt;killercup/quicli&lt;/a&gt; [&lt;a href="https://crates.io/crates/quicli"&gt;quicli&lt;/a&gt;] - quickly build cool CLI apps&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ksk001100/seahorse"&gt;ksk001100/seahorse&lt;/a&gt; [&lt;a href="https://crates.io/crates/seahorse"&gt;seahorse&lt;/a&gt;] - A minimal CLI framework &lt;a href="https://github.com/ksk001100/seahorse/actions"&gt;&lt;img src="https://github.com/ksk001100/seahorse/workflows/CI/badge.svg?branch=master" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/TeXitoi/structopt"&gt;TeXitoi/structopt&lt;/a&gt; [&lt;a href="https://crates.io/crates/structopt"&gt;structopt&lt;/a&gt;] - parse command line argument by defining a struct&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Data visualization 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nukesor/comfy-table"&gt;nukesor/comfy-table&lt;/a&gt; [&lt;a href="https://crates.io/crates/comfy-table"&gt;comfy-table&lt;/a&gt;] - Beautiful dynamic tables for your cli tools. &lt;a href="https://github.com/nukesor/comfy-table/actions"&gt;&lt;img src="https://github.com/Nukesor/comfy-table/workflows/Tests/badge.svg?branch=master" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zhiburt/tabled"&gt;zhiburt/tabled&lt;/a&gt; [&lt;a href="https://crates.io/crates/tabled"&gt;tabled&lt;/a&gt;] - An easy to use library for pretty print tables of structs and enums. &lt;a href="https://github.com/zhiburt/tabled/actions"&gt;&lt;img src="https://github.com/zhiburt/tabled/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Human-centered design 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-cli/human-panic"&gt;rust-cli/human-panic&lt;/a&gt; [&lt;a href="https://crates.io/crates/human-panic"&gt;human-panic&lt;/a&gt;] - panic messages for humans&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Line editor 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kkawakam/rustyline"&gt;kkawakam/rustyline&lt;/a&gt; [&lt;a href="https://crates.io/crates/rustyline"&gt;rustyline&lt;/a&gt;] - readline implementation&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/MovingtoMars/liner"&gt;MovingtoMars/liner&lt;/a&gt; [&lt;a href="https://crates.io/crates/liner"&gt;liner&lt;/a&gt;] - A library offering readline-like functionality&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/murarth/linefeed"&gt;murarth/linefeed&lt;/a&gt; [&lt;a href="https://crates.io/crates/linefeed"&gt;linefeed&lt;/a&gt;] - Configurable, extensible, interactive line reader&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/srijs/rust-copperline"&gt;srijs/rust-copperline&lt;/a&gt; [&lt;a href="https://crates.io/crates/copperline"&gt;copperline&lt;/a&gt;] - command line editing library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Other 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mgrachev/update-informer"&gt;mgrachev/update-informer&lt;/a&gt; [&lt;a href="https://crates.io/crates/update-informer"&gt;update-informer&lt;/a&gt;] - Update informer for CLI applications. It checks for a new version on Crates.io and GitHub &lt;a href="https://github.com/mgrachev/update-informer/actions"&gt;&lt;img src="https://github.com/mgrachev/update-informer/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Pipeline 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hniksic/rust-subprocess"&gt;hniksic/rust-subprocess&lt;/a&gt; [&lt;a href="https://crates.io/crates/subprocess"&gt;subprocess&lt;/a&gt;] - facilities for interaction with external pipelines&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/imp/pager-rs"&gt;imp/pager-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/pager"&gt;pager&lt;/a&gt;] - pipe your output through an external pager&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/oconnor663/duct.rs"&gt;oconnor663/duct.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/duct"&gt;duct&lt;/a&gt;] - A builder for subprocess pipelines and IO redirection&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-cli/rexpect"&gt;rust-cli/rexpect&lt;/a&gt; [&lt;a href="https://crates.io/crates/rexpect"&gt;rexpect&lt;/a&gt;] - automate interactive applications such as ssh, ftp, passwd, etc &lt;a href="https://github.com/rust-cli/rexpect/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/rust-cli/rexpect/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zhiburt/expectrl"&gt;zhiburt/expectrl&lt;/a&gt; [&lt;a href="https://crates.io/crates/expectrl"&gt;expectrl&lt;/a&gt;] - A library for controlling interactive programs in a pseudo-terminal &lt;a href="https://github.com/zhiburt/expectrl/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zhiburt/expectrl/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Progress 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/a8m/pb"&gt;a8m/pb&lt;/a&gt; [&lt;a href="https://crates.io/crates/pbr"&gt;pbr&lt;/a&gt;] - console progress bar&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/clitic/kdam"&gt;clitic/kdam&lt;/a&gt; [&lt;a href="https://crates.io/crates/kdam"&gt;kdam&lt;/a&gt;] - A console progress bar library inspired by tqdm &amp;amp; rich.progress &lt;a href="https://github.com/clitic/kdam/actions/workflows/tests.yml"&gt;&lt;img src="https://github.com/clitic/kdam/actions/workflows/tests.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/console-rs/indicatif"&gt;console-rs/indicatif&lt;/a&gt; [&lt;a href="https://crates.io/crates/indicatif"&gt;indicatif&lt;/a&gt;] - indicate progress to users&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/etienne-napoleone/spinach"&gt;etienne-napoleone/spinach&lt;/a&gt; [&lt;a href="https://crates.io/crates/spinach"&gt;spinach&lt;/a&gt;] - Practical spinner. &lt;a href="https://github.com/etienne-napoleone/spinach/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/etienne-napoleone/spinach/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/FGRibreau/spinners"&gt;FGRibreau/spinners&lt;/a&gt; [&lt;a href="https://crates.io/crates/spinners"&gt;spinners&lt;/a&gt;] - 60+ elegant terminal spinners&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Prompt 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hashmismatch/terminal_cli.rs"&gt;hashmismatch/terminal_cli.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/terminal_cli"&gt;terminal_cli&lt;/a&gt;] - build an interactive command prompt&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mikaelmello/inquire"&gt;mikaelmello/inquire&lt;/a&gt; [&lt;a href="https://crates.io/crates/inquire"&gt;inquire&lt;/a&gt;] - A library for building interactive prompts on terminals. &lt;a href="https://github.com/mikaelmello/inquire/actions"&gt;&lt;img src="https://github.com/mikaelmello/inquire/actions/workflows/build.yml/badge.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://starship.rs/"&gt;starship/starship&lt;/a&gt; [&lt;a href="https://crates.io/crates/starship"&gt;starship&lt;/a&gt;] - A minimal, blazing fast, and extremely customizable prompt for any shell &lt;a href="https://github.com/starship/starship/actions"&gt;&lt;img src="https://github.com/starship/starship/actions/workflows/workflow.yml/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ynqa/promkit"&gt;ynqa/promkit&lt;/a&gt; [&lt;a href="https://crates.io/crates/promkit"&gt;promkit&lt;/a&gt;] - A toolkit for building interactive command-line tools &lt;a href="https://github.com/ynqa/promkit/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ynqa/promkit/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Style 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/colored-rs/colored"&gt;colored&lt;/a&gt; [&lt;a href="https://crates.io/crates/colored"&gt;colored&lt;/a&gt;] - Coloring terminal so simple, you already know how to do it!&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/console-rs/dialoguer"&gt;console-rs/dialoguer&lt;/a&gt; [&lt;a href="https://crates.io/crates/dialoguer"&gt;dialoguer&lt;/a&gt;] - Library for command line prompts and similar things.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LukasKalbertodt/bunt"&gt;LukasKalbertodt/bunt&lt;/a&gt; [&lt;a href="https://crates.io/crates/bunt"&gt;bunt&lt;/a&gt;] - cross-platform terminal colors and styling with macros &lt;a href="https://github.com/LukasKalbertodt/bunt/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://github.com/LukasKalbertodt/bunt/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LukasKalbertodt/term-painter"&gt;LukasKalbertodt/term-painter&lt;/a&gt; [&lt;a href="https://crates.io/crates/term-painter"&gt;term-painter&lt;/a&gt;] - cross-platform styled terminal output&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ogham/rust-ansi-term"&gt;ogham/rust-ansi-term&lt;/a&gt; [&lt;a href="https://crates.io/crates/ansi_term"&gt;ansi_term&lt;/a&gt;] - control colours and formatting on ANSI terminals&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SergioBenitez/yansi"&gt;SergioBenitez/yansi&lt;/a&gt; [&lt;a href="https://crates.io/crates/yansi"&gt;yansi&lt;/a&gt;] - A dead simple ANSI terminal color painting library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;TUI 
  &lt;ul&gt; 
   &lt;li&gt;BearLibTerminal 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/nabijaczleweli/BearLibTerminal.rs"&gt;cfyzium/bearlibterminal&lt;/a&gt; [&lt;a href="https://crates.io/crates/bear-lib-terminal"&gt;bear-lib-terminal&lt;/a&gt;] - &lt;a href="https://github.com/tommyettinger/BearLibTerminal"&gt;BearLibTerminal&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ccbrown/iocraft"&gt;ccbrown/iocraft&lt;/a&gt; [&lt;a href="https://crates.io/crates/iocraft"&gt;iocraft&lt;/a&gt;] - A crate for beautiful, artisanally crafted CLIs, TUIs, and text-based IO. &lt;a href="https://github.com/ccbrown/iocraft/actions"&gt;&lt;img src="https://github.com/ccbrown/iocraft/actions/workflows/commit.yaml/badge.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/iocraft/"&gt;&lt;img src="https://img.shields.io/docsrs/iocraft" alt="docs.rs" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gyscos/Cursive"&gt;gyscos/Cursive&lt;/a&gt; [&lt;a href="https://crates.io/crates/cursive"&gt;cursive&lt;/a&gt;] - build rich TUI applications&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ivanceras/titik"&gt;ivanceras/titik&lt;/a&gt; - a crossplatform TUI widget library with the goal of providing interactive widgets&lt;/li&gt; 
   &lt;li&gt;ncurses 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/ihalila/pancurses"&gt;ihalila/pancurses&lt;/a&gt; [&lt;a href="https://crates.io/crates/pancurses"&gt;pancurses&lt;/a&gt;] - curses library, supports linux and windows&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/jeaye/ncurses-rs"&gt;jeaye/ncurses-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/ncurses"&gt;ncurses&lt;/a&gt;] - &lt;a href="https://invisible-island.net/ncurses/ncurses.html"&gt;ncurses&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ogham/rust-term-grid"&gt;ogham/rust-term-grid&lt;/a&gt; [&lt;a href="https://crates.io/crates/term_grid"&gt;term_grid&lt;/a&gt;] - Library for putting things in a grid&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ratatui/ratatui"&gt;ratatui-org/ratatui&lt;/a&gt; [&lt;a href="https://crates.io/crates/ratatui"&gt;ratatui&lt;/a&gt;] - Library that's all about cooking up terminal user interfaces (TUIs)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/redox-os/termion"&gt;redox-os/termion&lt;/a&gt; [&lt;a href="https://crates.io/crates/termion"&gt;termion&lt;/a&gt;] - bindless library for controlling terminals/TTY&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/ruterm"&gt;ruterm&lt;/a&gt; - tiny &amp;amp; simple library for working with TTY&lt;/li&gt; 
   &lt;li&gt;Termbox 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/gchp/rustbox"&gt;gchp/rustbox&lt;/a&gt; [&lt;a href="https://crates.io/crates/rustbox"&gt;rustbox&lt;/a&gt;] - bindings to &lt;a href="https://github.com/nsf/termbox"&gt;Termbox&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/crossterm-rs/crossterm"&gt;TimonPost/crossterm&lt;/a&gt; [&lt;a href="https://crates.io/crates/crossterm"&gt;crossterm&lt;/a&gt;] - crossplatform terminal library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compression&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://7-zip.org/7z.html"&gt;7z&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;[&lt;a href="https://crates.io/crates/sevenz-rust"&gt;sevenz-rust&lt;/a&gt;] - A 7z decompressor/compressor written in pure rust.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://opensource.googleblog.com/2015/09/introducing-brotli-new-compression.html"&gt;Brotli&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dropbox/rust-brotli"&gt;dropbox/rust-brotli&lt;/a&gt; - Brotli decompressor that optionally avoids the stdlib&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ende76/brotli-rs"&gt;ende76/brotli-rs&lt;/a&gt; - implementation of Brotli compression&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;bzip2 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/trifectatechfoundation/bzip2-rs"&gt;trifectatechfoundation/bzip2-rs&lt;/a&gt; - &lt;a href="https://www.sourceware.org/bzip2/"&gt;libbz2&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;gzip 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zopfli-rs/zopfli"&gt;zopfli&lt;/a&gt; [&lt;a href="https://crates.io/crates/zopfli"&gt;zopfli&lt;/a&gt;] - implementation of the Zopfli compression algorithm for higher quality deflate or zlib compression&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;gzp 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sstadick/gzp/"&gt;sstadick/gzp&lt;/a&gt; - multi-threaded encoding and decoding of deflate formats and snappy&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;miniz 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/flate2-rs"&gt;rust-lang/flate2-rs&lt;/a&gt; - &lt;a href="https://code.google.com/archive/p/miniz"&gt;miniz&lt;/a&gt; bindings &lt;a href="https://github.com/rust-lang/flate2-rs/actions"&gt;&lt;img src="https://github.com/rust-lang/flate2-rs/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/roquess/paxit"&gt;paxit&lt;/a&gt; [&lt;a href="https://crates.io/crates/paxit"&gt;paxit&lt;/a&gt;] - Flexible library for compressing and decompressing files using various algorithms (zip, tar, gzip, xz, zst, etc.) with modular design for easy extension&lt;/li&gt; 
 &lt;li&gt;tar 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alexcrichton/tar-rs"&gt;alexcrichton/tar-rs&lt;/a&gt; - tar archive reading/writing&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;zip 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zip-rs/zip2"&gt;zip-rs/zip2&lt;/a&gt; [&lt;a href="https://crates.io/crates/zip"&gt;zip&lt;/a&gt;] - read and write ZIP archives&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;zstd 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gyscos/zstd-rs"&gt;gyscos/zstd-rs&lt;/a&gt; - rust binding for the zstd compression library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Computation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/argmin-rs/argmin"&gt;argmin-rs/argmin&lt;/a&gt; [&lt;a href="https://crates.io/crates/argmin"&gt;argmin&lt;/a&gt;] - Optimization library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms"&gt;BLAS&lt;/a&gt; [&lt;a href="https://crates.io/keywords/blas"&gt;blas&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mikkyang/rust-blas"&gt;mikkyang/rust-blas&lt;/a&gt; - BLAS bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/calebwin/emu"&gt;calebwin/emu&lt;/a&gt; - A language for GPGPU numerical computing&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dimforge/nalgebra"&gt;dimforge/nalgebra&lt;/a&gt; - low-dimensional linear algebra library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sarah-quinones/faer-rs"&gt;faer-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/faer"&gt;faer&lt;/a&gt;] - Linear algebra foundation for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neogenie/fastnum"&gt;fastnum&lt;/a&gt; &lt;a href="https://crates.io/crates/fastnum"&gt;fastnum&lt;/a&gt; - Fast exact precision decimal numbers implemented in pure Rust. Suitable for financial, crypto and any other fixed-precision calculations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://www.gnu.org/software/gsl/"&gt;GSL&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GuillaumeGomez/rust-GSL"&gt;GuillaumeGomez/rust-GSL&lt;/a&gt; - GSL bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/LAPACK"&gt;LAPACK&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/blas-lapack-rs/lapack"&gt;stainless-steel/lapack&lt;/a&gt; - LAPACK bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Parallel 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/arrayfire/arrayfire-rust"&gt;arrayfire/arrayfire-rust&lt;/a&gt; - &lt;a href="https://github.com/arrayfire"&gt;Arrayfire&lt;/a&gt; bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/autumnai/collenchyma"&gt;autumnai/collenchyma&lt;/a&gt; - An extensible, pluggable, backend-agnostic framework for parallel, high-performance computations on CUDA, OpenCL and common host CPU.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/luqmana/rust-opencl"&gt;luqmana/rust-opencl&lt;/a&gt; - &lt;a href="https://www.khronos.org/opencl/"&gt;OpenCL&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Science 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Axect/Peroxide"&gt;Axect/Peroxide&lt;/a&gt; - Rust numeric library containing linear algebra, numerical analysis, statistics and machine learning tools in pure rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cpmech/russell"&gt;cpmech/russell&lt;/a&gt; - Rust Scientific Library for numerical mathematics, ordinary differential equations, special math functions, high-performance (sparse) linear algebra&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Ryan-D-Gast/differential-equations"&gt;Ryan-D-Gast/differential-equations&lt;/a&gt; - A high-performance library for numerically solving differential equations&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Statrs 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/statrs-dev/statrs"&gt;statrs-dev/statrs&lt;/a&gt; - Robust statistical computation library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Concurrency&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/crossbeam-rs/crossbeam"&gt;crossbeam-rs/crossbeam&lt;/a&gt; - Support for parallelism and low-level concurrency&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orium/archery"&gt;orium/archery&lt;/a&gt; [&lt;a href="https://crates.io/crates/archery"&gt;archery&lt;/a&gt;] - Library to abstract from &lt;code&gt;Rc&lt;/code&gt;/&lt;code&gt;Arc&lt;/code&gt; pointer types. &lt;a href="https://github.com/orium/archery/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/orium/archery/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/orx-parallel"&gt;orx-parallel&lt;/a&gt; - High performance, configurable and expressive parallel computation library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rayon-rs/rayon"&gt;Rayon&lt;/a&gt; - A data parallelism library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustcc/coroutine-rs"&gt;rustcc/coroutine-rs&lt;/a&gt; - Coroutine Library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zonyitoo/coio-rs"&gt;zonyitoo/coio-rs&lt;/a&gt; - Coroutine I/O&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andoriyu/uclicious"&gt;andoriyu/uclicious&lt;/a&gt; [&lt;a href="https://crates.io/crates/uclicious"&gt;uclicious&lt;/a&gt;] - &lt;a href="https://github.com/vstakhov/libucl"&gt;libUCL&lt;/a&gt; based feature-rich configuration library. &lt;a href="https://app.circleci.com/pipelines/github/vstakhov/libucl"&gt;&lt;img src="https://circleci.com/gh/vstakhov/libucl.svg?style=svg" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Kixunil/configure_me"&gt;Kixunil/configure_me&lt;/a&gt; [&lt;a href="https://crates.io/crates/configure_me"&gt;configure_me&lt;/a&gt;] - library for processing application configuration easily&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-cli/config-rs"&gt;rust-cli/config-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/config"&gt;config&lt;/a&gt;] - Layered configuration system (with strong support for 12-factor applications).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SergioBenitez/Figment"&gt;SergioBenitez/Figment&lt;/a&gt; [&lt;a href="https://crates.io/crates/figment"&gt;figment&lt;/a&gt;] - A configuration library so con-free, it's unreal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/softprops/envy"&gt;softprops/envy&lt;/a&gt; - deserialize env vars into typesafe structs &lt;a href="https://github.com/softprops/envy/actions/workflows/main.yml"&gt;&lt;img src="https://github.com/softprops/envy/actions/workflows/main.yml/badge.svg?sanitize=true" alt="Main" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Cryptography&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/crypto"&gt;crypto&lt;/a&gt;, &lt;a href="https://crates.io/keywords/cryptography"&gt;cryptography&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arkworks-rs/circom-compat"&gt;arkworks-rs/circom-compat&lt;/a&gt; - Arkworks bindings to Circom's R1CS, for Groth16 Proof and Witness generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/briansmith/ring"&gt;briansmith/ring&lt;/a&gt; - Safe, fast, small crypto using Rust and BoringSSL's cryptography primitives.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/briansmith/webpki"&gt;briansmith/webpki&lt;/a&gt; - Web PKI TLS X.509 certificate validation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/conradkleinespel/rooster"&gt;conradkleinespel/rooster&lt;/a&gt; [&lt;a href="https://crates.io/crates/rooster"&gt;rooster&lt;/a&gt;] - Simple password manager to use in your terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cossacklabs/themis"&gt;cossacklabs/themis&lt;/a&gt; [&lt;a href="https://crates.io/crates/themis"&gt;themis&lt;/a&gt;] - a high-level cryptographic library for solving typical data security tasks, best fit for multi-platform apps. &lt;a href="https://app.circleci.com/pipelines/github/cossacklabs/themis"&gt;&lt;img src="https://circleci.com/gh/cossacklabs/themis/tree/master.svg?style=shield" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DaGenix/rust-crypto"&gt;DaGenix/rust-crypto&lt;/a&gt; - cryptographic algorithms&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalek-cryptography/curve25519-dalek"&gt;dalek-cryptography/curve25519-dalek&lt;/a&gt; - Curve25519 operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalek-cryptography/ed25519-dalek"&gt;dalek-cryptography/ed25519-dalek&lt;/a&gt; - Ed25519 digital signatures&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dalek-cryptography/x25519-dalek"&gt;dalek-cryptography/x25519-dalek&lt;/a&gt; - X25519 key exchange&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/debris/tiny-keccak"&gt;debris/tiny-keccak&lt;/a&gt; - Keccak family (SHA3)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dusk-network/bls12_381"&gt;dusk-network/bls12-381&lt;/a&gt; - A Rust-native BLS12-381 with enhancements for zk performance: optimized multi-scalar multiplication, custom hashing, and serde support‚Äîideal for privacy-focused protocols and zero-knowledge applications. &lt;img src="https://github.com/dusk-network/bls12_381/workflows/Continuous%20integration/badge.svg?sanitize=true" alt="Build Status" /&gt; [&lt;a href="https://crates.io/crates/dusk-bls12_381"&gt;dusk-bls12_381&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dusk-network/plonk/"&gt;dusk-network/plonk&lt;/a&gt; - A high-performance, Rust-native implementation of the PLONK zk-SNARK over BLS12-381, optimized with custom gates and KZG10 polynomial commitment for efficient zero-knowledge proofs. &lt;img src="https://github.com/dusk-network/plonk/workflows/Continuous%20integration/badge.svg?sanitize=true" alt="Build Status" /&gt; [&lt;a href="https://crates.io/crates/dusk-plonk"&gt;PLONK&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dusk-network/Poseidon252"&gt;dusk-network/poseidon252&lt;/a&gt; - A Rust-native Poseidon hash over BLS12-381, Poseidon252 is built for zk-SNARK efficiency, ideal for privacy-focused protocols and zero-knowledge applications. &lt;img src="https://github.com/dusk-network/Poseidon252/workflows/Continuous%20integration/badge.svg?sanitize=true" alt="Build Status" /&gt; [&lt;a href="https://crates.io/crates/dusk-poseidon"&gt;Poseidon&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/exonum/exonum"&gt;exonum/exonum&lt;/a&gt; [&lt;a href="https://crates.io/crates/exonum"&gt;exonum&lt;/a&gt;] - extensible framework for blockchain projects&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebook/opaque-ke"&gt;facebook/opaque-ke&lt;/a&gt; - Implementation of the recent &lt;a href="https://datatracker.ietf.org/doc/draft-krawczyk-cfrg-opaque/"&gt;OPAQUE&lt;/a&gt; password-authenticated key exchange. &lt;a href="https://github.com/facebook/opaque-ke"&gt;&lt;img src="https://github.com/facebook/opaque-ke/workflows/Rust%20CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iddm/randomorg"&gt;iddm/randomorg&lt;/a&gt; - A random.org client library. &lt;a href="https://crates.io/crates/randomorg"&gt;&lt;img src="https://img.shields.io/crates/v/randomorg.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/klutzy/suruga"&gt;klutzy/suruga&lt;/a&gt; - Implementation of &lt;a href="https://datatracker.ietf.org/doc/html/rfc5246"&gt;TLS 1.2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kn0sys/ecc-rs"&gt;kn0sys/ecc-rs&lt;/a&gt; - Intuitive library for elliptic curve cryptography tutorials &lt;a href="https://crates.io/crates/kn0syseccrs"&gt;&lt;img src="https://img.shields.io/crates/v/kn0syseccrs" alt="Crates.io Version" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kornelski/rust-security-framework"&gt;kornelski/rust-security-framework&lt;/a&gt; - Bindings for Security Framework (OSX native)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/libOctavo/octavo"&gt;libOctavo/octavo&lt;/a&gt; - Modular hash and crypto library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orion-rs/orion"&gt;orion-rs/orion&lt;/a&gt; - This library aims to provide easy and usable crypto. 'Usable' meaning exposing high-level API's that are easy to use and hard to misuse. &lt;a href="https://github.com/orion-rs/orion/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/orion-rs/orion/actions/workflows/test.yml/badge.svg?branch=master" alt="Tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/racum/rust-djangohashers"&gt;racum/rust-djangohashers&lt;/a&gt; [&lt;a href="https://crates.io/crates/djangohashers"&gt;djangohashers&lt;/a&gt;] - Port of the password primitives used in the Django Project. It doesn't require Django, only hashes and validates passwords according to its style.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RustCrypto/hashes"&gt;RustCrypto/hashes&lt;/a&gt; - Collection of cryptographic hash functions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustls/rustls"&gt;rustls/rustls&lt;/a&gt; - Implementation of TLS&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sfackler/rust-native-tls"&gt;sfackler/rust-native-tls&lt;/a&gt; - Bindings for native TLS libraries&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sfackler/rust-openssl"&gt;sfackler/rust-openssl&lt;/a&gt; - &lt;a href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt; bindings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/abcrypt"&gt;sorairolake/abcrypt&lt;/a&gt; [&lt;a href="https://crates.io/crates/abcrypt"&gt;abcrypt&lt;/a&gt;] - A simple, modern and secure file encryption library. &lt;a href="https://github.com/sorairolake/abcrypt/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/abcrypt/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/scryptenc-rs"&gt;sorairolake/scryptenc-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/scryptenc"&gt;scryptenc&lt;/a&gt;] - An implementation of the scrypt encrypted data format. &lt;a href="https://github.com/sorairolake/scryptenc-rs/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/scryptenc-rs/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/w3f/schnorrkel"&gt;w3f/schnorrkel&lt;/a&gt; - Schnorr VRFs and signatures on the Ristretto group&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Data processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/amv-dev/yata"&gt;amv-dev/yata&lt;/a&gt; - high performance technical analysis library &lt;a href="https://github.com/amv-dev/yata/actions?query=workflow%3ARust"&gt;&lt;img src="https://img.shields.io/github/workflow/status/amv-dev/yata/Rust?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-ndarray/ndarray"&gt;bluss/ndarray&lt;/a&gt; - N-dimensional array with array views, multidimensional slicing, and efficient operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cocoindex-io/cocoindex"&gt;cocoindex&lt;/a&gt; - ETL framework to build fresh index&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion"&gt;datafusion&lt;/a&gt; - DataFusion is a very fast, extensible query engine for building high-quality data-centric systems in Rust, using the Apache Arrow in-memory format.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GoPlasmatic/datalogic-rs"&gt;GoPlasmatic/datalogic-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/datalogic-rs"&gt;datalogic-rs&lt;/a&gt;] - High-performance, type-safe JSONLogic evaluation engine in Rust, ideal for business rules and dynamic filtering.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kernelmachine/utah"&gt;kernelmachine/utah&lt;/a&gt; - Dataframe structure and operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradedb/paradedb/tree/dev/pg_analytics"&gt;pg_analytics&lt;/a&gt; - PostgreSQL extension that accelerates analytical query processing inside Postgres to a performance level comparable to dedicated OLAP databases.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradedb/paradedb/tree/dev/pg_lakehouse"&gt;pg_lakehouse&lt;/a&gt; - PostgreSQL extension that transforms Postgres into an analytical query engine over object stores like AWS S3/GCS and table formats like Delta Lake/Iceberg.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pola-rs/polars"&gt;pola-rs/polars&lt;/a&gt; - Fast feature complete DataFrame library &lt;a href="https://github.com/pola-rs/polars/actions"&gt;&lt;img src="https://github.com/pola-rs/polars/actions/workflows/lint-rust.yml/badge.svg?sanitize=true" alt="Lint Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/weld-project/weld"&gt;weld-project/weld&lt;/a&gt; - High-performance runtime for data analytics applications&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Data streaming&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arkflow-rs/arkflow"&gt;arkflow-rs/arkflow&lt;/a&gt; - High-performance Rust stream processing engine &lt;a href="https://github.com/arkflow-rs/arkflow/actions"&gt;&lt;img src="https://github.com/arkflow-rs/arkflow/actions/workflows/rust.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ArroyoSystems/arroyo"&gt;ArroyoSystems/arroyo&lt;/a&gt; - High-performance real-time analytics in Rust and SQL &lt;a href="https://github.com/ArroyoSystems/arroyo/actions"&gt;&lt;img src="https://github.com/ArroyoSystems/arroyo/actions/workflows/ci.yml/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/iggy"&gt;iggy&lt;/a&gt; [&lt;a href="https://crates.io/crates/iggy"&gt;iggy&lt;/a&gt;] - Persistent message streaming platform, supporting QUIC, TCP and HTTP transport protocols &lt;a href="https://github.com/apache/iggy/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/apache/iggy/actions/workflows/test.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/infinyon/fluvio"&gt;infinyon/fluvio&lt;/a&gt; - Programmable data streaming platform &lt;a href="https://github.com/infinyon/fluvio/actions"&gt;&lt;img src="https://github.com/infinyon/fluvio/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/graphform/swim-rust"&gt;swim-rust&lt;/a&gt; [&lt;a href="https://crates.io/crates/swimos"&gt;swim-rust&lt;/a&gt;] - Self-contained distributed software platform for building stateful, massively real-time streaming applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Data structures&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ashvardanian/SimSIMD"&gt;ashvardanian/simsimd&lt;/a&gt; - SIMD-accelerated vector distances and similarity functions for x86 AVX2 &amp;amp; AVX-512, and Arm NEON &lt;a href="https://crates.io/crates/simsimd"&gt;&lt;img src="https://img.shields.io/crates/v/simsimd.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/becheran/grid"&gt;becheran/grid&lt;/a&gt; [&lt;a href="https://crates.io/crates/grid"&gt;grid&lt;/a&gt;] - Provide a two dimensional data structure that is easy to use and fast. &lt;a href="https://github.com/becheran/grid/actions"&gt;&lt;img src="https://github.com/becheran/grid/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/billyevans/tst"&gt;billyevans/tst&lt;/a&gt; [&lt;a href="https://crates.io/crates/tst"&gt;tst&lt;/a&gt;] - Ternary search tree collection&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/contain-rs"&gt;contain-rs&lt;/a&gt; - Extension of Rust's std::collections&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danielpclark/array_tool"&gt;danielpclark/array_tool&lt;/a&gt; - Array helpers. Some of the most common methods you would use on Arrays made available on Vectors. Polymorphic implementations for handling most of your use cases.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fizyk20/generic-array"&gt;fizyk20/generic-array&lt;/a&gt; - a hack to allow for arrays sized by typenums&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/garro95/priority-queue"&gt;garro95/priority-queue&lt;/a&gt;[&lt;a href="https://crates.io/crates/priority-queue"&gt;priority-queue&lt;/a&gt;] - A priority queue that implements priority changes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/greyblake/nutype"&gt;greyblake/nutype&lt;/a&gt; [&lt;a href="https://crates.io/crates/nutype"&gt;nutype&lt;/a&gt;] - define newtype structures with validation constraints. &lt;a href="https://github.com/greyblake/nutype/actions"&gt;&lt;img src="https://github.com/greyblake/nutype/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mrhooray/kdtree-rs"&gt;mrhooray/kdtree-rs&lt;/a&gt; - K-dimensional tree for fast geospatial indexing and nearest neighbors lookup&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orium/rpds"&gt;orium/rpds&lt;/a&gt; [&lt;a href="https://crates.io/crates/rpds"&gt;rpds&lt;/a&gt;] - Persistent data structures. &lt;a href="https://github.com/orium/rpds/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/orium/rpds/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RoaringBitmap/roaring-rs"&gt;RoaringBitmap/roaring-rs&lt;/a&gt; - Roaring Bitmaps&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-itertools/itertools"&gt;rust-itertools/itertools&lt;/a&gt; - Extra iterator adaptors, functions and macros&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tnballo/scapegoat"&gt;tnballo/scapegoat&lt;/a&gt; [&lt;a href="https://crates.io/crates/scapegoat"&gt;scapegoat&lt;/a&gt;] - Safe, fallible, stack-only alternative to &lt;code&gt;BTreeSet&lt;/code&gt; and &lt;code&gt;BTreeMap&lt;/code&gt;. &lt;a href="https://github.com/tnballo/scapegoat/actions"&gt;&lt;img src="https://github.com/tnballo/scapegoat/workflows/test/badge.svg?branch=master" alt="GitHub Actions" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://codeberg.org/xfix/enum-map"&gt;xfix/enum-map&lt;/a&gt; [&lt;a href="https://crates.io/crates/enum-map"&gt;enum-map&lt;/a&gt;] - An optimized map implementation for enums using an array to store values.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yamafaktory/hypergraph"&gt;yamafaktory/hypergraph&lt;/a&gt; [&lt;a href="https://crates.io/crates/hypergraph"&gt;hypergraph&lt;/a&gt;] - Hypergraph is a data structure library to generate directed hypergraphs. &lt;a href="https://github.com/yamafaktory/hypergraph/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/yamafaktory/hypergraph/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Data visualization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blitzar-tech/egui_graphs"&gt;blitzar-tech/egui_graphs&lt;/a&gt; [&lt;a href="https://crates.io/crates/egui_graphs"&gt;egui_graphs&lt;/a&gt;] - Interactive graph visualization widget powered by egui and petgraph. &lt;a href="https://crates.io/crates/egui_graphs"&gt;&lt;img src="https://img.shields.io/crates/v/egui_graphs" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/egui_graphs"&gt;&lt;img src="https://img.shields.io/docsrs/egui_graphs" alt="docs.rs" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/djduque/pgfplots"&gt;djduque/pgfplots&lt;/a&gt; [&lt;a href="https://crates.io/crates/pgfplots"&gt;pgfplots&lt;/a&gt;] - Library to generate publication-quality figures. &lt;a href="https://github.com/DJDuque/pgfplots/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/DJDuque/pgfplots/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mazznoer/colorgrad-rs"&gt;mazznoer/colorgrad-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/colorgrad"&gt;colorgrad&lt;/a&gt;] - Color scales library for data visualization, charts, games, maps, generative art and others.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/milliams/plotlib"&gt;milliams/plotlib&lt;/a&gt; - Data plotting library for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/plotly/plotly.rs"&gt;plotly&lt;/a&gt; - Plotly for Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cpmech/plotpy"&gt;plotpy&lt;/a&gt; [&lt;a href="https://crates.io/crates/plotpy"&gt;plotpy&lt;/a&gt;] - Rust plotting library using Python (Matplotlib)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/plotters-rs/plotters"&gt;plotters&lt;/a&gt; - &lt;a href="https://github.com/plotters-rs/plotters/actions"&gt;&lt;img src="https://github.com/plotters-rs/plotters/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rerun-io/rerun"&gt;rerun&lt;/a&gt; - [&lt;a href="https://crates.io/crates/rerun"&gt;rerun&lt;/a&gt;] - An SDK for logging computer vision and robotics data (tensors, point clouds, etc) paired with a visualizer for exploring that data over time.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saresend/Gust"&gt;saresend/gust&lt;/a&gt; - A small charting/visualization tool and partial vega implementation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/database"&gt;database&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;NoSQL [&lt;a href="https://crates.io/keywords/nosql"&gt;nosql&lt;/a&gt;]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://arangodb.com"&gt;ArangoDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://gitlab.com/qonfucius/aragog"&gt;Aragog&lt;/a&gt; [&lt;a href="https://crates.io/crates/aragog"&gt;aragog&lt;/a&gt;] - A Lightweight ArangoDB Object document, relational and graph mapper &lt;a href="https://gitlab.com/qonfucius/aragog/-/commits/master"&gt;&lt;img src="https://gitlab.com/qonfucius/aragog/badges/master/pipeline.svg?sanitize=true" alt="pipeline status" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/fMeow/arangors"&gt;Arangors&lt;/a&gt; [&lt;a href="https://crates.io/crates/arangors"&gt;arangors&lt;/a&gt;] - An ArangoDB driver&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://cassandra.apache.org/_/index.html"&gt;Cassandra&lt;/a&gt; [&lt;a href="https://crates.io/keywords/cassandra"&gt;cassandra&lt;/a&gt;, &lt;a href="https://crates.io/keywords/cql"&gt;cql&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/AlexPikalov/cdrs"&gt;AlexPikalov/cdrs&lt;/a&gt; [&lt;a href="https://crates.io/crates/cdrs"&gt;cdrs&lt;/a&gt;] - native client&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/cassandra-rs/cassandra-rs"&gt;cassandra-rs&lt;/a&gt; - bindings to the DataStax C/C++&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/krojew/cdrs-tokio"&gt;krojew/cdrs-tokio&lt;/a&gt; - High-level async Cassandra client written in 100% Rust. &lt;a href="https://github.com/krojew/cdrs-tokio/actions"&gt;&lt;img src="https://github.com/krojew/cdrs-tokio/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;[&lt;a href="https://crates.io/crates/cassandra-protocol"&gt;cassandra-protocol&lt;/a&gt;] - Cassandra protocol implementation.&lt;/li&gt; 
       &lt;li&gt;[&lt;a href="https://crates.io/crates/cdrs-tokio"&gt;cdrs-tokio&lt;/a&gt;] - production-ready async Apache Cassandra driverclient&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;CouchDB [&lt;a href="https://crates.io/keywords/couchdb"&gt;couchdb&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/chill-rs/chill"&gt;chill-rs/chill&lt;/a&gt; [&lt;a href="https://crates.io/crates/chill"&gt;couchdb&lt;/a&gt;] - Client for the CouchDB REST API&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt; [&lt;a href="https://crates.io/keywords/dynamodb"&gt;dynamodb&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/softprops/dynomite"&gt;softprops/dynomite&lt;/a&gt; - A library for strongly-typed and convenient interaction with &lt;code&gt;rusoto_dynamodb&lt;/code&gt; &lt;a href="https://github.com/softprops/dynomite/actions"&gt;&lt;img src="https://github.com/softprops/dynomite/workflows/Main/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Elasticsearch [&lt;a href="https://crates.io/keywords/elasticsearch"&gt;elasticsearch&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/benashford/rs-es"&gt;benashford/rs-es&lt;/a&gt; [&lt;a href="https://crates.io/crates/rs-es"&gt;rs-es&lt;/a&gt;] - Client for the &lt;a href="https://www.elastic.co/"&gt;Elastic&lt;/a&gt; REST API&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/elastic-rs/elastic"&gt;elastic-rs/elastic&lt;/a&gt; [&lt;a href="https://crates.io/crates/elastic"&gt;elastic&lt;/a&gt;] - elastic is an efficient, modular API client for Elasticsearch written in Rust &lt;a href="https://ci.appveyor.com/project/KodrAus/elastic"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/csa78tcumdpnbur2?svg=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;etcd 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/jimmycuadra/rust-etcd"&gt;jimmycuadra/rust-etcd&lt;/a&gt; [&lt;a href="https://crates.io/crates/etcd"&gt;etcd&lt;/a&gt;] - A client library for CoreOS's etcd.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.influxdata.com/"&gt;InfluxDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/driftluo/InfluxDBClient-rs"&gt;driftluo/InfluxDBClient-rs&lt;/a&gt; - Synchronization interface&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;LevelDB 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/skade/leveldb"&gt;skade/leveldb&lt;/a&gt; - &lt;a href="https://github.com/google/leveldb"&gt;LevelDB&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;LMDB [&lt;a href="https://crates.io/keywords/lmdb"&gt;lmdb&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/meilisearch/heed"&gt;meilisearch/heed&lt;/a&gt; [&lt;a href="https://crates.io/crates/heed"&gt;heed&lt;/a&gt;] - Another &lt;a href="https://www.symas.com/symas-embedded-database-lmdb"&gt;LMDB&lt;/a&gt; binding&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/vhbit/lmdb-rs"&gt;vhbit/lmdb-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/lmdb-rs"&gt;lmdb-rs&lt;/a&gt;] - &lt;a href="https://www.symas.com/symas-embedded-database-lmdb"&gt;LMDB&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;MongoDB [&lt;a href="https://crates.io/keywords/mongodb"&gt;mongodb&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/mongodb/mongo-rust-driver"&gt;mongodb/mongo-rust-driver&lt;/a&gt; [&lt;a href="https://crates.io/crates/mongodb"&gt;mongodb&lt;/a&gt;] - &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://pythonhosted.org/pickleDB/"&gt;PickleDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/seladb/pickledb-rs"&gt;seladb/pickledb-rs&lt;/a&gt; - a lightweight and simple key-value store, heavily inspired by Python's PickleDB.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.polodb.org/"&gt;PoloDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/PoloDB/PoloDB"&gt;PoloDB&lt;/a&gt; - An embedded JSON-based database has API similar to MongoDB. &lt;img src="https://img.shields.io/github/actions/workflow/status/PoloDB/PoloDB/rust.yml" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.redb.org/"&gt;Redb&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/cberner/redb"&gt;Redb&lt;/a&gt; - An embedded key-value database. It provides a similar interface to other embedded key-value stores such as rocksdb and lmdb. &lt;img src="https://github.com/cberner/redb/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Redis [&lt;a href="https://crates.io/keywords/redis"&gt;redis&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/aembke/fred.rs"&gt;aembke/fred&lt;/a&gt; [&lt;a href="https://crates.io/crates/fred"&gt;fred&lt;/a&gt;] - A high level async &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; client for Rust with Tokio. &lt;a href="https://raw.githubusercontent.com/rust-unofficial/awesome-rust/main/%5Bhttps://circleci.com/gh/aembke/fred.rs/tree/main%5D(https://app.circleci.com/pipelines/github/aembke/fred.rs?branch=main)"&gt;&lt;img src="https://circleci.com/gh/aembke/fred.rs/tree/main.svg?style=svg" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/redis-rs/redis-rs"&gt;redis-rs&lt;/a&gt; - &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; library &lt;a href="https://github.com/redis-rs/redis-rs/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/redis-rs/redis-rs/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rocksdb.org/"&gt;RocksDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/rust-rocksdb/rust-rocksdb"&gt;rust-rocksdb/rust-rocksdb&lt;/a&gt; - RocksDB bindings &lt;a href="https://github.com/rust-rocksdb/rust-rocksdb/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/rust-rocksdb/rust-rocksdb/actions/workflows/rust.yml/badge.svg?branch=master" alt="RocksDB CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://surrealdb.com/"&gt;SurrealDB&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/surrealdb/surrealdb"&gt;surrealdb/surrealdb&lt;/a&gt; - SurrealDB embedded document-graph database&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/symisc/unqlite"&gt;UnQLite&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/zitsen/unqlite.rs"&gt;zitsen/unqlite.rs&lt;/a&gt; - UnQLite bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://zookeeper.apache.org/"&gt;ZooKeeper&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/bonifaido/rust-zookeeper"&gt;bonifaido/rust-zookeeper&lt;/a&gt; [&lt;a href="https://crates.io/crates/zookeeper"&gt;zookeeper&lt;/a&gt;] - A client library for Apache ZooKeeper.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/krojew/rust-zookeeper"&gt;krojew/rust-zookeeper&lt;/a&gt; [&lt;a href="https://crates.io/crates/zookeeper-async"&gt;zookeeper-async&lt;/a&gt;] - Async Zookeeper client, based on tokio. &lt;img src="https://github.com/krojew/rust-zookeeper/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OGM [&lt;a href="https://crates.io/keywords/ogm"&gt;ogm&lt;/a&gt;]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/qonfucius/aragog"&gt;Aragog&lt;/a&gt; [&lt;a href="https://crates.io/crates/aragog"&gt;aragog&lt;/a&gt;] - A Lightweight ArangoDB Object document, relational and graph mapper &lt;a href="https://gitlab.com/qonfucius/aragog/-/commits/master"&gt;&lt;img src="https://gitlab.com/qonfucius/aragog/badges/master/pipeline.svg?sanitize=true" alt="pipeline status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ORM [&lt;a href="https://crates.io/keywords/orm"&gt;orm&lt;/a&gt;]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/diesel-rs/diesel"&gt;diesel-rs/diesel&lt;/a&gt; - an ORM and Query builder&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ivanceras/rustorm"&gt;ivanceras/rustorm&lt;/a&gt; - an ORM&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/njord-rs/njord"&gt;njord&lt;/a&gt; - ‚õµ A versatile, feature-rich Rust ORM &lt;a href="https://github.com/njord-rs/njord/actions/workflows/core.yml"&gt;&lt;img src="https://github.com/njord-rs/njord/actions/workflows/core.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/v/njord.svg?sanitize=true" alt="crates.io" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rbatis/rbatis"&gt;rbatis/rbatis&lt;/a&gt; - ORM Framework High Performance(JSON based)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SeaQL/sea-orm"&gt;SeaQL/sea-orm&lt;/a&gt; - üêö An async &amp;amp; dynamic ORM &lt;a href="https://crates.io/crates/sea-orm"&gt;&lt;img src="https://img.shields.io/crates/v/sea-orm.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/sea-orm"&gt;&lt;img src="https://img.shields.io/docsrs/sea-orm/latest" alt="docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SeaQL/seaography"&gt;SeaQL/seaography&lt;/a&gt; - üß≠ GraphQL framework for SeaORM &lt;a href="https://crates.io/crates/seaography"&gt;&lt;img src="https://img.shields.io/crates/v/seaography.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/seaography"&gt;&lt;img src="https://img.shields.io/docsrs/seaography/latest" alt="docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SeaQL/seaography/actions/workflows/tests.yaml"&gt;&lt;img src="https://github.com/SeaQL/seaography/actions/workflows/tests.yaml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/thegenius/taitan-orm"&gt;thegenius/taitan-orm&lt;/a&gt; - The State of Art ORM for Rust, Async &amp;amp; Compile Time Generation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/sfackler/r2d2"&gt;sfackler/r2d2&lt;/a&gt; - generic connection pool&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SQL [&lt;a href="https://crates.io/keywords/sql"&gt;sql&lt;/a&gt;]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Generic 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/launchbadge/sqlx"&gt;launchbadge/sqlx&lt;/a&gt; - async PostgreSQL/MySQL/SQLite connection pool with strong typing support &lt;a href="https://github.com/launchbadge/sqlx"&gt;&lt;img src="https://img.shields.io/github/workflow/status/launchbadge/sqlx/Rust/master?style=flat-square" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/SeaQL/sea-query"&gt;SeaQL/sea-query&lt;/a&gt; - üî± A dynamic SQL query builder for MySQL, Postgres and SQLite &lt;a href="https://crates.io/crates/sea-query"&gt;&lt;img src="https://img.shields.io/crates/v/sea-query.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/sea-query"&gt;&lt;img src="https://img.shields.io/docsrs/sea-query/latest" alt="docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SeaQL/sea-query/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/SeaQL/sea-query/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/SeaQL/sea-schema"&gt;SeaQL/sea-schema&lt;/a&gt; - üåø SQL schema definition and discovery &lt;a href="https://crates.io/crates/sea-schema"&gt;&lt;img src="https://img.shields.io/crates/v/sea-schema.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/sea-schema"&gt;&lt;img src="https://img.shields.io/docsrs/sea-schema/latest" alt="docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SeaQL/sea-schema/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/SeaQL/sea-schema/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Microsoft SQL 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/prisma/tiberius"&gt;prisma/tiberius&lt;/a&gt; - &lt;a href="https://github.com/prisma/tiberius/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/prisma/tiberius/actions/workflows/test.yml/badge.svg?branch=master" alt="Cargo tests" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;MySql [&lt;a href="https://crates.io/keywords/mysql"&gt;mysql&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/AgilData/mysql-proxy-rs"&gt;AgilData/mysql-proxy-rs&lt;/a&gt; - A MySQL Proxy &lt;a href="https://app.circleci.com/pipelines/github/AgilData/mysql-proxy-rs?branch=master"&gt;&lt;img src="https://circleci.com/gh/AgilData/mysql-proxy-rs/tree/master.svg?style=svg" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/blackbeam/mysql_async"&gt;blackbeam/mysql_async&lt;/a&gt; [&lt;a href="https://crates.io/crates/mysql_async"&gt;mysql_async&lt;/a&gt;] - asynchronous Mysql driver based on Tokio. &lt;a href="https://app.circleci.com/pipelines/github/blackbeam/mysql_async?branch=master"&gt;&lt;img src="https://circleci.com/gh/blackbeam/mysql_async/tree/master.svg?style=shield" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/blackbeam/rust-mysql-simple"&gt;blackbeam/rust-mysql-simple&lt;/a&gt; [&lt;a href="https://crates.io/crates/mysql"&gt;mysql&lt;/a&gt;] - A native MySql client&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Oracle 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/kubo/rust-oracle"&gt;kubo/rust-oracle&lt;/a&gt; [&lt;a href="https://crates.io/crates/oracle"&gt;oracle&lt;/a&gt;] - Oracle driver &lt;a href="https://github.com/kubo/rust-oracle/actions/workflows/run-tests.yml"&gt;&lt;img src="https://github.com/kubo/rust-oracle/actions/workflows/run-tests.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;PostgreSql [&lt;a href="https://crates.io/keywords/postgres"&gt;postgres&lt;/a&gt;, &lt;a href="https://crates.io/keywords/postgresql"&gt;postgresql&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx"&gt;c410-f3r/wtx&lt;/a&gt; - Fast implementation with a low set of external dependencies.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://github.com/sfackler/rust-postgres"&gt;sfackler/rust-postgres&lt;/a&gt; [&lt;a href="https://crates.io/crates/postgres"&gt;postgres&lt;/a&gt;] - A native &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; client&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Sqlite [&lt;a href="https://crates.io/keywords/sqlite"&gt;sqlite&lt;/a&gt;] 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://github.com/rusqlite/rusqlite"&gt;rusqlite&lt;/a&gt; - &lt;a href="https://sqlite.org/index.html"&gt;Sqlite3&lt;/a&gt; bindings&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://venndb.rs/"&gt;VennDB&lt;/a&gt; [&lt;a href="https://github.com/plabayo/venndb"&gt;venndb&lt;/a&gt;] - An append-only in-memory database in Rust for rows queried using bit (flag) columns.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Date and time&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/date"&gt;date&lt;/a&gt;, &lt;a href="https://crates.io/keywords/time"&gt;time&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arthurhenrique/rusti-cal"&gt;arthurhenrique/rusti-cal&lt;/a&gt; [&lt;a href="https://crates.io/crates/rusti-cal"&gt;rusti-cal&lt;/a&gt;] - A cal(1) clone lightning-fast ~ more than 9999 years ~ Written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurntSushi/jiff"&gt;burntSushi/jiff&lt;/a&gt; - A date-time library for Rust that encourages you to jump into the pit of success. &lt;a href="https://github.com/BurntSushi/jiff/actions"&gt;&lt;img src="https://github.com/BurntSushi/jiff/workflows/ci/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chronotope/chrono"&gt;chronotope/chrono&lt;/a&gt; - Date and time library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Mnwa/ms"&gt;Mnwa/ms&lt;/a&gt; [&lt;a href="https://crates.io/crates/ms-converter"&gt;ms-converter&lt;/a&gt;] - it's a library for converting human-like times to milliseconds &lt;a href="https://github.com/Mnwa/ms/actions?query=workflow%3Abuild"&gt;&lt;img src="https://github.com/Mnwa/ms/workflows/build/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/nt-time"&gt;sorairolake/nt-time&lt;/a&gt; [&lt;a href="https://crates.io/crates/nt-time"&gt;nt-time&lt;/a&gt;] - A Windows file time library. &lt;a href="https://github.com/sorairolake/nt-time/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/nt-time/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/time-rs/time"&gt;time-rs/time&lt;/a&gt; - &lt;a href="https://github.com/time-rs/time/actions"&gt;&lt;img src="https://github.com/time-rs/time/workflows/Build/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Distributed systems&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Antimony 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/antimonyproject/antimony"&gt;antimonyproject/antimony&lt;/a&gt; [&lt;a href="https://crates.io/crates/antimony"&gt;antimony&lt;/a&gt;] - stream processing / distributed computation platform&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Apache Kafka 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fede1024/rust-rdkafka"&gt;fede1024/rust-rdkafka&lt;/a&gt; [&lt;a href="https://crates.io/crates/rdkafka"&gt;rdkafka&lt;/a&gt;] - &lt;a href="https://github.com/confluentinc/librdkafka"&gt;librdkafka&lt;/a&gt; bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gklijs/schema_registry_converter"&gt;gklijs/schema_registry_converter&lt;/a&gt; [&lt;a href="https://crates.io/crates/schema_registry_converter"&gt;schema_registry_converter&lt;/a&gt;] - to integrate with &lt;a href="https://www.confluent.io/product/confluent-platform/data-compatibility/"&gt;confluent schema registry&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kafka-rust/kafka-rust"&gt;kafka-rust/kafka-rust&lt;/a&gt; - Rust client for Apache Kafka&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HDFS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hyunsik/hdfs-rs"&gt;hyunsik/hdfs-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/hdfs"&gt;hdfs&lt;/a&gt;] - libhdfs bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Other 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/build-trust/ockam"&gt;build-trust/ockam&lt;/a&gt; [&lt;a href="https://crates.io/crates/ockam"&gt;ockam&lt;/a&gt;] - End-to-End Encryption, Mutual Authentication, and ABAC for distributed applications &lt;a href="https://github.com/build-trust/ockam"&gt;&lt;img src="https://github.com/build-trust/ockam/workflows/Rust/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Domain driven design&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/serverlesstechnology/cqrs"&gt;serverlesstechnology/cqrs&lt;/a&gt; [&lt;a href="https://crates.io/crates/cqrs-es"&gt;cqrs-es&lt;/a&gt;] - A framework for CQRS and event sourcing with &lt;a href="https://doc.rust-cqrs.org/"&gt;user guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;eBPF&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aya-rs/aya"&gt;aya/aya-rs&lt;/a&gt; - Built with a focus on developer experience and operability.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/libbpf/libbpf-rs"&gt;libbpf/libbpf-rs&lt;/a&gt; - A minimal and opinionated eBPF tooling.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Email&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/email"&gt;email&lt;/a&gt;, &lt;a href="https://crates.io/keywords/imap"&gt;imap&lt;/a&gt;, &lt;a href="https://crates.io/keywords/smtp"&gt;smtp&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/duesee/imap-codec"&gt;duesee/imap-codec&lt;/a&gt; [&lt;a href="https://crates.io/crates/imap-codec"&gt;imap-codec&lt;/a&gt;] - Rock-solid and complete codec for IMAP &lt;a href="https://github.com/duesee/imap-codec/actions/workflows/build_and_test.yml"&gt;&lt;img src="https://github.com/duesee/imap-codec/actions/workflows/build_and_test.yml/badge.svg?sanitize=true" alt="Build &amp;amp; Test" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gsquire/sendgrid-rs"&gt;gsquire/sendgrid-rs&lt;/a&gt; - Library for SendGrid API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jdrouet/catapulte"&gt;jdrouet/catapulte&lt;/a&gt; - A microservice to send emails using &lt;a href="https://github.com/jdrouet/mrml"&gt;MRML&lt;/a&gt; templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jdrouet/jolimail"&gt;jdrouet/jolimail&lt;/a&gt; - A web application to build &lt;a href="https://github.com/jdrouet/mrml"&gt;MRML&lt;/a&gt; templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jdrouet/mrml"&gt;jdrouet/mrml&lt;/a&gt; - A library to generate nice email templates working on any mail client.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lettre/lettre"&gt;lettre/lettre&lt;/a&gt; - an SMTP-library &lt;a href="https://github.com/lettre/lettre/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/lettre/lettre/actions/workflows/test.yml/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mailtutan/mailtutan"&gt;mailtutan/mailtutan&lt;/a&gt; - An SMTP server for test and development environment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meli/meli"&gt;meli/meli&lt;/a&gt; - üêù terminal mail client&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/staktrace/mailparse"&gt;staktrace/mailparse&lt;/a&gt; [&lt;a href="https://crates.io/crates/mailparse"&gt;mailparse&lt;/a&gt;] - A library for parsing real-world email files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stalwartlabs/mail-auth"&gt;stalwartlabs/mail-auth&lt;/a&gt; [&lt;a href="https://crates.io/crates/mail-auth"&gt;mail-auth&lt;/a&gt;] - DKIM, ARC, SPF and DMARC message authentication library &lt;a href="https://github.com/stalwartlabs/mail-auth/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/stalwartlabs/mail-auth/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stalwartlabs/mail-parser"&gt;stalwartlabs/mail-parser&lt;/a&gt; [&lt;a href="https://crates.io/crates/mail-parser"&gt;mail-parser&lt;/a&gt;] - A fast and robust e-mail parsing library with full MIME support &lt;a href="https://github.com/stalwartlabs/mail-parser/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/stalwartlabs/mail-parser/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stalwartlabs/mail-send"&gt;stalwartlabs/mail-send&lt;/a&gt; [&lt;a href="https://crates.io/crates/mail-send"&gt;mail-send&lt;/a&gt;] - E-mail builder and SMTP client library with DKIM support &lt;a href="https://github.com/stalwartlabs/mail-send/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/stalwartlabs/mail-send/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tweedegolf/mailcrab"&gt;tweedegolf/mailcrab&lt;/a&gt; - Email test server for development.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Encoding&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/encoding"&gt;encoding&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ASN.1 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alex/rust-asn1"&gt;alex/rust-asn1&lt;/a&gt; - ASN.1 (DER) serializer&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Binary 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bincode-org/bincode"&gt;bincode-org/bincode&lt;/a&gt; - A binary encoder/decoder &lt;a href="https://github.com/bincode-org/bincode/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/bincode-org/bincode/actions/workflows/rust.yml/badge.svg?branch=trunk" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jamesmunns/postcard"&gt;jamesmunns/postcard&lt;/a&gt; [&lt;a href="https://crates.io/crates/postcard"&gt;postcard&lt;/a&gt;] - Postcard is a #![no_std] focused serializer and deserializer for Serde.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/m4b/goblin"&gt;m4b/goblin&lt;/a&gt; [&lt;a href="https://crates.io/crates/goblin"&gt;goblin&lt;/a&gt;] - cross-platform, zero-copy, and endian-aware binary parsing&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;BSON 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mongodb/bson-rust"&gt;mongodb/bson-rust&lt;/a&gt; - Encoding and decoding support for BSON&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Byte swapping 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/BurntSushi/byteorder"&gt;BurntSushi/byteorder&lt;/a&gt; - Supports big-endian, little-endian and native byte orders&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Cap'n Proto 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/capnproto/capnproto-rust"&gt;capnproto/capnproto-rust&lt;/a&gt; - Cap'n Proto is a type system for distributed systems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CBOR 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/serde_cbor"&gt;serde_cbor&lt;/a&gt; - CBOR support for serde&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Character Encoding 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hsivonen/encoding_rs"&gt;hsivonen/encoding_rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/encoding_rs"&gt;encoding_rs&lt;/a&gt;] - A Gecko-oriented implementation of the Encoding Standard&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lifthrasiir/rust-encoding"&gt;lifthrasiir/rust-encoding&lt;/a&gt; - Character encoding support for Rust. (also known as rust-encoding) It is based on WHATWG Encoding Standard, and also provides an advanced interface for error detection and recovery.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CRC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mrhooray/crc-rs"&gt;mrhooray/crc-rs&lt;/a&gt; - Rust implementation of CRC(16, 32, 64) with support of various standards&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CSV 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/BurntSushi/rust-csv"&gt;BurntSushi/rust-csv&lt;/a&gt; - A fast and flexible CSV reader and writer, with support for Serde&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;EDN 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/naomijub/edn-rs"&gt;edn-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/edn-rs"&gt;edn-rs&lt;/a&gt;] - crate to parse and emit EDN format into Rust types.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://flatbuffers.dev/"&gt;FlatBuffers&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/frol/flatc-rust"&gt;frol/flatc-rust&lt;/a&gt; - FlatBuffers compiler (flatc) integration for Cargo build scripts&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HAR 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mandrean/har-rs"&gt;mandrean/har-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/har"&gt;har&lt;/a&gt;] - A HTTP Archive Format (HAR) serialization &amp;amp; deserialization library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/servo/html5ever"&gt;servo/html5ever&lt;/a&gt; - High-performance browser-grade HTML5 parser&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;JSON 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cloudwego/sonic-rs"&gt;cloudwego/sonic-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/sonic-rs"&gt;sonic-rs&lt;/a&gt;] - A fast Rust JSON library based on SIMD.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/importcjj/rust-ajson"&gt;importcjj/rust-ajson&lt;/a&gt; [&lt;a href="https://crates.io/crates/ajson"&gt;ajson&lt;/a&gt;] - Get JSON values quickly&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustadopt/jzon-rs/"&gt;rustadopt/jzon-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/jzon"&gt;jzon&lt;/a&gt;] - JSON implementation&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/serde-rs/json"&gt;serde-rs/json&lt;/a&gt; [&lt;a href="https://crates.io/crates/serde_json"&gt;serde_json&lt;/a&gt;] - JSON support for &lt;a href="https://github.com/serde-rs/serde"&gt;Serde&lt;/a&gt; framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/simd-lite/simd-json"&gt;simd-lite/simd-json&lt;/a&gt; [&lt;a href="https://crates.io/crates/simd-json"&gt;simd-json&lt;/a&gt;] - High performance JSON parser based on a port of simdjson&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;MsgPack 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/3Hren/msgpack-rust"&gt;3Hren/msgpack-rust&lt;/a&gt; - Low/high level MessagePack implementation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NetCDF 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/georust/netcdf"&gt;georust/netcdf&lt;/a&gt; [&lt;a href="https://crates.io/crates/netcdf"&gt;netcdf&lt;/a&gt;] - Medium-level netCDF bindings, allowing easy reading and writing of array-like structures to a file.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;PEM 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jcreekmore/pem-rs"&gt;jcreekmore/pem-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/pem"&gt;pem&lt;/a&gt;] - Parse and encode PEM-encoded data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ProtocolBuffers 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/stepancheg/rust-protobuf"&gt;stepancheg/rust-protobuf&lt;/a&gt; - Rust implementation of Google protocol buffers&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tokio-rs/prost"&gt;tokio-rs/prost&lt;/a&gt; - &lt;a href="https://github.com/tokio-rs/prost/actions"&gt;&lt;img src="https://github.com/tokio-rs/prost/workflows/continuous%20integration/badge.svg?branch=master" alt="continuous integration" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;rkyv 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rkyv/rkyv"&gt;rkyv/rkyv&lt;/a&gt; [&lt;a href="https://crates.io/crates/rkyv"&gt;rkyv&lt;/a&gt;] - rkyv (archive) is a zero-copy deserialization framework&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;RON (Rusty Object Notation) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ron-rs/ron"&gt;https://github.com/ron-rs/ron&lt;/a&gt; - Rusty Object Notation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Serde 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/serde-aux/"&gt;iddm/serde-aux&lt;/a&gt; - additional tools for using with the serde library. &lt;a href="https://github.com/iddm/serde-aux/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/serde-aux/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/serde-aux"&gt;&lt;img src="https://img.shields.io/crates/v/serde-aux.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;TOML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tamasfe/taplo"&gt;tamasfe/taplo&lt;/a&gt; [&lt;a href="https://crates.io/crates/taplo"&gt;taplo&lt;/a&gt;] - A TOML toolkit &lt;a href="https://github.com/tamasfe/taplo/actions?query=workflow%3A%22Continuous+integration%22"&gt;&lt;img src="https://github.com/tamasfe/taplo/workflows/Continuous%20integration/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/toml-rs/toml"&gt;toml-rs/toml&lt;/a&gt; - &lt;a href="https://github.com/toml-rs/toml/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/toml-rs/toml/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vitiral/stfu8"&gt;vitiral/stfu8&lt;/a&gt; [&lt;a href="https://crates.io/crates/stfu8"&gt;stfu8&lt;/a&gt;] - Sorta Text Format in UTF-8&lt;/li&gt; 
 &lt;li&gt;XML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Florob/RustyXML"&gt;Florob/RustyXML&lt;/a&gt; - an XML parser&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/netvl/xml-rs"&gt;netvl/xml-rs&lt;/a&gt; - A streaming XML library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/shepmaster/sxd-document"&gt;shepmaster/sxd-document&lt;/a&gt; - An XML library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/shepmaster/sxd-xpath"&gt;shepmaster/sxd-xpath&lt;/a&gt; - An XPath library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tafia/quick-xml"&gt;tafia/quick-xml&lt;/a&gt; - High performance XML pull reader/writer&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/luminvent/yaserde"&gt;yaserde&lt;/a&gt; - Yet Another Serializer/Deserializer specialized for XML&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;YAML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/chyh1990/yaml-rust"&gt;chyh1990/yaml-rust&lt;/a&gt; - The missing YAML 1.2 implementation.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/saphyr-rs/saphyr"&gt;saphyr&lt;/a&gt; - A set of crates dedicated to parsing YAML.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Filesystem&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/filesystem"&gt;filesystem&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Operations 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/camino-rs/camino"&gt;Camino&lt;/a&gt; [&lt;a href="https://crates.io/crates/camino"&gt;camino&lt;/a&gt;] - Like Rust's std::path::Path, but UTF-8.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/apache/opendal"&gt;OpenDAL&lt;/a&gt; [&lt;a href="https://crates.io/crates/opendal"&gt;opendal&lt;/a&gt;] - A unified data access layer, empowering users to seamlessly and efficiently retrieve data from diverse storage services. &lt;a href="https://github.com/apache/opendal/actions?query=branch%3Amain"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/apache/opendal/ci_core.yml?branch=main" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ParthJadhav/Rust_Search"&gt;ParthJadhav/Rust_Search&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust_search"&gt;rust_search&lt;/a&gt;] - Blazingly fast file search library.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pop-os/dbus-udisks2"&gt;pop-os/dbus-udisks2&lt;/a&gt; [&lt;a href="https://crates.io/crates/dbus-udisks2"&gt;dbus-udisks2&lt;/a&gt;] - UDisks2 DBus API&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pop-os/sys-mount"&gt;pop-os/sys-mount&lt;/a&gt; [&lt;a href="https://crates.io/crates/sys-mount"&gt;sys-mount&lt;/a&gt;] - High level abstraction for the &lt;code&gt;mount&lt;/code&gt; / &lt;code&gt;umount2&lt;/code&gt; system calls.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vitiral/path_abs"&gt;vitiral/path_abs&lt;/a&gt; [&lt;a href="https://crates.io/crates/path_abs"&gt;path_abs&lt;/a&gt;] - Absolute serializable path types and associated methods.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/webdesus/fs_extra"&gt;webdesus/fs_extra&lt;/a&gt; - expanding opportunities standard library std::fs and std::io&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Temporary Files 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stebalien/tempfile"&gt;Stebalien/tempfile&lt;/a&gt; - temporary file library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stebalien/xattr"&gt;Stebalien/xattr&lt;/a&gt; [&lt;a href="https://crates.io/crates/xattr"&gt;xattr&lt;/a&gt;] - list and manipulate unix extended file attributes&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zboxfs/zbox"&gt;zboxfs/zbox&lt;/a&gt; [&lt;a href="https://crates.io/crates/zbox"&gt;zbox&lt;/a&gt;] - Zero-details, privacy-focused embeddable file system.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Finance&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/avhz/RustQuant"&gt;avhz/RustQuant&lt;/a&gt; [&lt;a href="https://crates.io/crates/RustQuant"&gt;RustQuant&lt;/a&gt;] - A quantitative finance library. &lt;img src="https://img.shields.io/github/actions/workflow/status/avhz/RustQuant/build.yml" alt="GitHub Workflow Status (with event)" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/d-e-s-o/apca"&gt;d-e-s-o/apca&lt;/a&gt; [&lt;a href="https://crates.io/crates/apca"&gt;apca&lt;/a&gt;] - Opinionated and comprehensive bindings to the &lt;a href="https://alpaca.markets/"&gt;Alpaca API&lt;/a&gt; for stock trading and more. &lt;img src="https://github.com/d-e-s-o/apca/actions/workflows/test.yml/badge.svg?branch=main" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-dd/stochastic-rs"&gt;stochastic-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/stochastic-rs"&gt;stochastic-rs&lt;/a&gt;] - High-performance data generation library for stochastic process with quant finance tools. &lt;img src="https://github.com/rust-dd/stochastic-rs/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="GitHub Workflow Status" /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Functional Programming&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/fp"&gt;functional programming&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Prelude 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/JasonShin/fp-core.rs"&gt;JasonShin/fp-core.rs&lt;/a&gt; - A library for functional programming&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/myrrlyn/tap"&gt;myrrlyn/tap&lt;/a&gt; - Suffix-Position Pipeline Behavior&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Game development&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://arewegameyet.rs"&gt;Are we game yet?&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Allegro 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/SiegeLord/RustAllegro"&gt;SiegeLord/RustAllegro&lt;/a&gt; - &lt;a href="https://liballeg.org/"&gt;Allegro 5&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ozkriff/awesome-quads"&gt;Awesome Quads&lt;/a&gt; - A curated list of links to miniquad/macroquad-related code &amp;amp; resources&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rofrol/awesome-wgpu"&gt;Awesome wgpu&lt;/a&gt; - A curated list of wgpu code and resources&lt;/li&gt; 
 &lt;li&gt;bracket-lib (previously RLTK) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/amethyst/bracket-lib"&gt;bracket-lib&lt;/a&gt; [&lt;a href="https://crates.io/crates/bracket-lib"&gt;bracket-lib&lt;/a&gt;] - The Roguelike Toolkit (RLTK). &lt;a href="https://github.com/amethyst/bracket-lib/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/amethyst/bracket-lib/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Challonge 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/challonge-rs"&gt;iddm/challonge-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/challonge"&gt;challonge&lt;/a&gt;] - Client library for the Challonge REST API. Helps to organize tournaments. &lt;a href="https://github.com/iddm/challonge-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/challonge-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Entity-Component Systems (ECS) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/amethyst/specs"&gt;amethyst/specs&lt;/a&gt; - Specs Parallel ECS&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/amethyst/legion"&gt;legion&lt;/a&gt; - A feature rich high performance ECS library with minimal boilerplate &lt;a href="https://github.com/amethyst/legion/actions"&gt;&lt;img src="https://github.com/amethyst/legion/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Game Engines 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bevyengine/bevy"&gt;Bevy&lt;/a&gt; - is a refreshingly simple data-driven game engine. - &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/v/bevy.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/d/bevy.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://fyrox.rs/"&gt;Fyrox&lt;/a&gt; - Game engine 3D &lt;a href="https://crates.io/crates/fyrox"&gt;&lt;img src="https://img.shields.io/crates/v/fyrox.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FyroxEngine/Fyrox/raw/master/LICENSE.md"&gt;&lt;img src="https://img.shields.io/crates/l/fyrox.svg?sanitize=true" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/fyrox"&gt;&lt;img src="https://img.shields.io/crates/d/fyrox.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ggez/ggez"&gt;ggez&lt;/a&gt; - A lightweight game framework for making 2D games with minimum friction - &lt;a href="https://crates.io/crates/ggez"&gt;&lt;img src="https://img.shields.io/crates/v/ggez.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ggez/ggez/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/ggez"&gt;&lt;img src="https://img.shields.io/crates/d/ggez.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sebcrozet/kiss3d"&gt;Kiss3d&lt;/a&gt; - A Keep It Simple, Stupid 3d graphics engine &lt;a href="https://crates.io/crates/kiss3d"&gt;&lt;img src="https://img.shields.io/crates/d/kiss3d.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Ruddle/oxidator"&gt;oxidator&lt;/a&gt; - A real time strategy game/engine supporting WebGPU&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.piston.rs/"&gt;Piston&lt;/a&gt; - &lt;a href="https://crates.io/crates/piston"&gt;&lt;img src="https://img.shields.io/crates/v/piston.svg?style=flat-square" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/PistonDevelopers/piston/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/piston.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/piston"&gt;&lt;img src="https://img.shields.io/crates/d/piston.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/unrust/unrust"&gt;Unrust&lt;/a&gt; - Webgl 2.0 / native game engine&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Game Servers 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gamedig/rust-gamedig"&gt;gamedig/rust-gamedig&lt;/a&gt; [&lt;a href="https://crates.io/crates/gamedig"&gt;gamedig&lt;/a&gt;] - Query game servers for informations such as name, players online, max players count etc. &lt;a href="https://crates.io/crates/gamedig"&gt;&lt;img src="https://img.shields.io/crates/v/gamedig.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/gamedig"&gt;&lt;img src="https://img.shields.io/crates/d/gamedig.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://godotengine.org/"&gt;Godot&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/godot-rust/gdext"&gt;godot-rust/gdext&lt;/a&gt; [&lt;a href="https://crates.io/crates/gdext"&gt;gdext&lt;/a&gt;] - Bindings to the Godot 4+ game engine &lt;a href="https://github.com/godot-rust/gdext/actions/workflows/full-ci.yml"&gt;&lt;img src="https://github.com/godot-rust/gdext/actions/workflows/full-ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/godot-rust/gdnative"&gt;godot-rust/gdnative&lt;/a&gt; [&lt;a href="https://crates.io/crates/gdnative"&gt;gdnative&lt;/a&gt;] - Bindings to the Godot 3+ game engine &lt;a href="https://github.com/godot-rust/gdnative/actions/workflows/full-ci.yml"&gt;&lt;img src="https://github.com/godot-rust/gdnative/actions/workflows/full-ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Minecraft 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bedrock-crustaceans/bedrock-rs"&gt;bedrock-crustaceans/bedrock-rs&lt;/a&gt; - Universal toolkit for Minecraft Bedrock Edition development in Rust. &lt;a href="https://github.com/bedrock-crustaceans/bedrock-rs"&gt;&lt;img src="https://img.shields.io/github/stars/bedrock-crustaceans/bedrock-rs" alt="GitHub stars" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bedrock-crustaceans/bedrock-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/bedrock-crustaceans/bedrock-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ferrumc-rs/ferrumc"&gt;FerrumC&lt;/a&gt; - A upgrade of the original Minecraft server in Rust [&lt;img src="https://github.com/ferrumc-rs/ferrumc/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;]&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pumpkin-mc/pumpkin"&gt;Pumpkin&lt;/a&gt; - A high-performance Minecraft server Software fully written in Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.raylib.com/"&gt;Raylib&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/deltaphc/raylib-rs"&gt;deltaphc/raylib-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/raylib"&gt;raylib&lt;/a&gt;] - Bindings for raylib&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.libsdl.org/"&gt;SDL&lt;/a&gt; [&lt;a href="https://crates.io/keywords/sdl"&gt;sdl&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/brson/rust-sdl"&gt;brson/rust-sdl&lt;/a&gt; - SDL1 bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Rust-SDL2/rust-sdl2"&gt;Rust-SDL2/rust-sdl2&lt;/a&gt; - SDL2 bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;SFML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jeremyletang/rust-sfml"&gt;jeremyletang/rust-sfml&lt;/a&gt; - &lt;a href="https://www.sfml-dev.org/"&gt;SFML&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Skillratings 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/atomflunder/skillratings"&gt;atomflunder/skillratings&lt;/a&gt; [&lt;a href="https://crates.io/crates/skillratings"&gt;skillratings&lt;/a&gt;] - Collection of skill rating algorithms for multiplayer games like Elo, Glicko-2, TrueSkill etc. &lt;a href="https://crates.io/crates/skillratings"&gt;&lt;img src="https://img.shields.io/crates/v/skillratings" alt="crates.io badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/atomflunder/skillratings/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/atomflunder/skillratings/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Tatami 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/giraffekey/tatami"&gt;giraffekey/tatami&lt;/a&gt; [&lt;a href="https://crates.io/crates/tatami-dungeon"&gt;tatami&lt;/a&gt;] - A roguelike dungeon generation algorithm.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Toornament-rs 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/toornament-rs"&gt;iddm/toornament-rs&lt;/a&gt; - Toornament.com API bindings. &lt;a href="https://github.com/iddm/toornament-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/toornament-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/toornament"&gt;&lt;img src="https://img.shields.io/crates/v/toornament.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Victorem 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/VictoremWinbringer/Victorem"&gt;VictoremWinbringer/Victorem&lt;/a&gt; [&lt;a href="https://crates.io/crates/Victorem"&gt;Victorem&lt;/a&gt;] - Easy UDP Game Server and UDP Client framework for creating simple 2D and 3D online game prototype&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Geospatial&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/geo"&gt;geo&lt;/a&gt;, &lt;a href="https://crates.io/keywords/gis"&gt;gis&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DaveKram/coord_transforms"&gt;DaveKram/coord_transforms&lt;/a&gt; [&lt;a href="https://crates.io/crates/coord_transforms"&gt;coord_transforms&lt;/a&gt;] - coordinate transformations (2-d, 3-d, and geospatial)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/georust"&gt;Georust&lt;/a&gt; - geospatial tools and libraries written&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maplibre/martin"&gt;MapLibre/Martin&lt;/a&gt; - Map tile server with PostGIS, MBTiles, PMTiles, and sprites support. &lt;a href="https://github.com/maplibre/martin/actions"&gt;&lt;img src="https://github.com/maplibre/martin/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI build" /&gt;&lt;/a&gt;&lt;a href="https://crates.io/crates/martin"&gt;&lt;img src="https://img.shields.io/crates/v/martin.svg?sanitize=true" alt="crates.io version" /&gt;&lt;/a&gt;&lt;a href="https://maplibre.org/martin/"&gt;&lt;img src="https://img.shields.io/badge/docs-Book-informational" alt="Book" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gx0r/rrgeo"&gt;rust-reverse-geocoder&lt;/a&gt; - A fast, offline reverse geocoder, inspired by &lt;a href="https://github.com/thampiman/reverse-geocoder"&gt;thampiman/reverse-geocoder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vlopes11/geomorph"&gt;vlopes11/geomorph&lt;/a&gt; [&lt;a href="https://crates.io/crates/geomorph"&gt;geomorph&lt;/a&gt;] - conversion between UTM, LatLon and MGRS coordinates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graph algorithms&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neo4j-labs/graph"&gt;neo4j-labs/graph&lt;/a&gt; - A library for high-performant graph algorithms &lt;a href="https://github.com/neo4j-labs/graph/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/workflow/status/neo4j-labs/graph/CI/main?label=CI" alt="graph CI status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/petgraph/petgraph"&gt;petgraph/petgraph&lt;/a&gt; - Graph data structure library. &lt;a href="https://github.com/petgraph/petgraph/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/petgraph/petgraph/workflows/Continuous%20integration/badge.svg?branch=master" alt="graph CI status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graphics&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/graphics"&gt;graphics&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fonts 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/redox-os/rusttype"&gt;redox-os/rusttype&lt;/a&gt; - Alternative to libraries like FreeType&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/harfbuzz/rustybuzz"&gt;rustybuzz&lt;/a&gt; - An incremental harfbuzz port&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gfx-rs/gfx"&gt;gfx-rs/gfx&lt;/a&gt; - A high-performance, bindless graphics API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gfx-rs/wgpu"&gt;gfx-rs/wgpu&lt;/a&gt; - Native WebGPU implementation based on gfx-hal. &lt;a href="https://github.com/gfx-rs/wgpu/actions"&gt;&lt;img src="https://github.com/gfx-rs/wgpu/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OpenGL [&lt;a href="https://crates.io/keywords/opengl"&gt;opengl&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-windowing/gl-rs"&gt;gl-rs&lt;/a&gt; - An OpenGL function pointer loader&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/glium/glium"&gt;glium/glium&lt;/a&gt; - safe OpenGL wrapper.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/glutin"&gt;glutin&lt;/a&gt; - Alternative to &lt;a href="https://www.glfw.org/"&gt;GLFW&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/glfw-rs"&gt;PistonDevelopers/glfw-rs&lt;/a&gt; - GLFW3 bindings and idiomatic wrapper&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;PDF 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bastibense/libharu_ng"&gt;bastibense/libharu_ng&lt;/a&gt; [&lt;a href="https://crates.io/crates/libharu_ng"&gt;libharu_ng&lt;/a&gt;] - Easily generate PDFs from your Rust app.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fschutt/printpdf"&gt;fschutt/printpdf&lt;/a&gt; - PDF writing library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/J-F-Liu/lopdf"&gt;J-F-Liu/lopdf&lt;/a&gt; - PDF document manipulation&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kaj/rust-pdf"&gt;kaj/rust-pdf&lt;/a&gt; - Generating PDF files in pure Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.vulkan.org/"&gt;Vulkan&lt;/a&gt; [&lt;a href="https://crates.io/keywords/vulkan"&gt;vulkan&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/Friz64/erupt"&gt;erupt&lt;/a&gt; [&lt;a href="https://crates.io/crates/erupt"&gt;erupt&lt;/a&gt;] - &lt;a href="https://gitlab.com/Friz64/erupt/-/pipelines"&gt;&lt;img src="https://gitlab.com/Friz64/erupt/badges/main/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vulkano-rs/vulkano"&gt;vulkano&lt;/a&gt; [&lt;a href="https://crates.io/crates/vulkano"&gt;vulkano&lt;/a&gt;] - Safe and rich Rust wrapper around the Vulkan API&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;GUI&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/gui"&gt;gui&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/autopilot-rs/autopilot-rs"&gt;autopilot-rs/autopilot-rs&lt;/a&gt; - A simple, cross-platform GUI automation library.&lt;/li&gt; 
 &lt;li&gt;Cocoa 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/servo/core-foundation-rs"&gt;servo/core-foundation-rs&lt;/a&gt; - Rust bindings to Core Foundation and other low level libraries on Mac OS X and iOS&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dioxuslabs/dioxus"&gt;DioxusLabs/dioxus&lt;/a&gt; - a portable, performant, and ergonomic framework for building cross-platform user interfaces in Rust. &lt;img src="https://github.com/dioxuslabs/dioxus/actions/workflows/main.yml/badge.svg?sanitize=true" alt="rust ci" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui"&gt;emilk/egui&lt;/a&gt; - Simple, fast, and highly portable immediate mode GUI library. egui runs on the web, natively, and in your favorite game engine. &lt;a href="https://github.com/emilk/egui/actions?workflow=CI"&gt;&lt;img src="https://github.com/emilk/egui/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emoon/rust_minifb"&gt;emoon/rust_minifb&lt;/a&gt; - minifb is a cross-platform window setup with optional bitmap rendering. It also comes with easy mouse and keyboard input. Primarily designed for prototyping&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.fltk.org/"&gt;FLTK&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fltk-rs/fltk-rs"&gt;fltk-rs&lt;/a&gt; - FLTK bindings &lt;a href="https://github.com/fltk-rs/fltk-rs/actions"&gt;&lt;img src="https://github.com/fltk-rs/fltk-rs/workflows/Build/badge.svg?branch=master" alt="Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://flutter.dev/"&gt;Flutter&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cunarist/rinf"&gt;cunarist/rinf&lt;/a&gt; - Rust as your Flutter backend, Flutter as your Rust frontend &lt;a href="https://github.com/cunarist/rinf/actions/workflows/build_test.yaml?query=branch%3Amain"&gt;&lt;img src="https://github.com/cunarist/rinf/actions/workflows/build_test.yaml/badge.svg?sanitize=true" alt="Build Test" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/flutter-rs/flutter-rs"&gt;flutter-rs&lt;/a&gt; - Build flutter desktop app in dart &amp;amp; rust.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fzyzcjy/flutter_rust_bridge"&gt;fzyzcjy/flutter_rust_bridge&lt;/a&gt; - High-level memory-safe binding generator for Flutter/Dart &amp;lt;-&amp;gt; Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fschutt/azul"&gt;fschutt/azul&lt;/a&gt; - A free, functional, IMGUI-oriented GUI framework for rapid development of desktop applications written in Rust, supported by the Mozilla WebRender rendering engine.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.gtk.org/"&gt;GTK+&lt;/a&gt; [&lt;a href="https://crates.io/keywords/gtk"&gt;gtk&lt;/a&gt;] 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gtk-rs/gtk4-rs"&gt;gtk-rs/gtk4-rs&lt;/a&gt; - GTK4 binding &lt;img src="https://github.com/gtk-rs/gtk4-rs/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/antoyo/relm"&gt;relm&lt;/a&gt; - Asynchronous, GTK+-based, GUI library, inspired by Elm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iced-rs/iced"&gt;iced-rs/iced&lt;/a&gt; [&lt;a href="https://crates.io/crates/iced"&gt;iced&lt;/a&gt;] - A cross-platform GUI library, focused on simplicity and type-safety. Inspired by Elm.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ocornut/imgui"&gt;ImGui&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/imgui-rs/imgui-rs"&gt;imgui-rs&lt;/a&gt; - Bindings for ImGui &lt;a href="https://github.com/imgui-rs/imgui-rs/actions"&gt;&lt;img src="https://github.com/imgui-rs/imgui-rs/workflows/ci/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://webserver2.tecgraf.puc-rio.br/iup/"&gt;IUP&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/KISS-UI/kiss-ui"&gt;Kiss-ui&lt;/a&gt; - A simple UI framework built on IUP&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivanceras/sauron-native"&gt;ivanceras/sauron-native&lt;/a&gt; - A truly native and cross platform GUI library. One unified code can be run as native GUI, Html Web and TUI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andlabs/libui"&gt;libui&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-native-ui/libui-rs"&gt;rust-native-ui/libui-rs&lt;/a&gt; - libui bindings.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/makepad/makepad"&gt;makepad/makepad&lt;/a&gt; [&lt;a href="https://crates.io/crates/makepad-widgets"&gt;makepad-widgets&lt;/a&gt;] - Makepad is a creative software development platform that compiles to wasm/webGL, osx/metal, windows/dx11 linux/opengl.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Immediate-Mode-UI/Nuklear"&gt;Nuklear&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/snuk182/nuklear-rust"&gt;nuklear-rust&lt;/a&gt; - Bindings for Nuklear&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/redox-os/orbtk"&gt;OrbTk&lt;/a&gt; - The Orbital Widget Toolkit is a multi platform (G)UI toolkit using SDL2 &lt;a href="https://github.com/redox-os/orbtk/actions"&gt;&lt;img src="https://github.com/redox-os/orbtk/workflows/build/badge.svg?branch=develop" alt="Build and test" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/conrod/"&gt;PistonDevelopers/conrod&lt;/a&gt; - An easy-to-use, immediate-mode, 2D GUI library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://doc.qt.io"&gt;Qt&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cyndis/qmlrs"&gt;cyndis/qmlrs&lt;/a&gt; - QtQuick bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-qt"&gt;rust-qt&lt;/a&gt; - Qt bindings for Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/woboq/qmetaobject-rs"&gt;woboq/qmetaobject-rs&lt;/a&gt; - Integrate Qml and Rust by building the QMetaObject at compile time.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RibirX/Ribir"&gt;Ribir&lt;/a&gt; - Ribir is a Rust GUI framework that helps you build beautiful and native multi-platform applications from a single codebase.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rise-ui/rise"&gt;rise-ui&lt;/a&gt; - Simple component-based cross-Platform GUI Toolkit for developing beautiful and user-friendly interfaces.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saurvs/nfd-rs"&gt;saurvs/nfd-rs&lt;/a&gt; - &lt;a href="https://github.com/mlabbe/nativefiledialog"&gt;nativefiledialog&lt;/a&gt; bindings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://sciter.com/"&gt;Sciter&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sciter-sdk/rust-sciter"&gt;sciter-sdk/rust-sciter&lt;/a&gt; - Sciter bindings &lt;a href="https://ci.appveyor.com/project/sciter-sdk/rust-sciter"&gt;&lt;img src="https://ci.appveyor.com/api/projects/status/github/sciter-sdk/rust-sciter?svg=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/slint-ui/slint"&gt;slint-ui/slint&lt;/a&gt; &lt;a href="https://crates.io/crates/slint"&gt;slint&lt;/a&gt; - &lt;a href="https://slint.dev/"&gt;Slint&lt;/a&gt; is a toolkit to efficiently develop fluid graphical user interfaces for embedded devices and desktop applications. &lt;a href="https://github.com/slint-ui/slint/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/slint-ui/slint/workflows/CI/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tauri-apps/tauri"&gt;tauri-apps/tauri&lt;/a&gt; - Build smaller, faster, and more secure desktop applications with a web frontend, powered by &lt;a href="https://github.com/tauri-apps/wry"&gt;WRY&lt;/a&gt;. &lt;a href="https://github.com/tauri-apps/tauri/actions?query=workflow%3A%22test+library%22"&gt;&lt;img src="https://img.shields.io/github/workflow/status/tauri-apps/tauri/test%20library?label=test%20library" alt="test library" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tauri-apps/wry"&gt;tauri-apps/wry&lt;/a&gt; - Webview Rendering librarY.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linebender/xilem"&gt;xilem&lt;/a&gt; - Successor of the data-first UI design toolkit &lt;a href="https://github.com/linebender/druid"&gt;druid&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Image processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/abonander/img_hash"&gt;abonander/img_hash&lt;/a&gt; - Perceptual image hashing and comparison for equality and similarity.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Enet4/dicom-rs"&gt;Enet4/dicom-rs&lt;/a&gt; - A pure Rust implementation of the DICOM standard, allowing users to work with DICOM objects and interact with DICOM applications, while aiming to be fast, safe, and intuitive to use.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/image-rs/image"&gt;image-rs/image&lt;/a&gt; - Basic imaging processing functions and methods for converting to and from image formats&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/image-rs/imageproc"&gt;image-rs/imageproc&lt;/a&gt; - An image processing library, based on the &lt;code&gt;image&lt;/code&gt; library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marekm4/dominant_color"&gt;marekm4/dominant_color&lt;/a&gt; [&lt;a href="https://crates.io/crates/dominant_color"&gt;dominant_color&lt;/a&gt;] - Dominant color extractor &lt;img src="https://github.com/marekm4/dominant_color/actions/workflows/rust.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-cv/cv"&gt;rust-cv/cv&lt;/a&gt; - Implement computer vision algorithms, abstractions, and systems. &lt;code&gt;#[no_std]&lt;/code&gt; is supported where possible. &lt;img src="https://github.com/rust-cv/cv/workflows/tests/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/teovoinea/steganography"&gt;teovoinea/steganography&lt;/a&gt; [&lt;a href="https://crates.io/crates/steganography"&gt;steganography&lt;/a&gt;] - A simple steganography library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/twistedfall/opencv-rust"&gt;twistedfall/opencv-rust&lt;/a&gt; - Bindings for OpenCV&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Language specification&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/shnewto/bnf"&gt;shnewto/bnf&lt;/a&gt; - A library for parsing Backus‚ÄìNaur form context-free grammars.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/WyvernIXTL/license-fetcher"&gt;WyvernIXTL/license-fetcher&lt;/a&gt; [&lt;a href="https://crates.io/crates/license-fetcher"&gt;license-fetcher&lt;/a&gt;] - Fetch licenses of dependencies at build time and embed them into your program.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Logging&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/log"&gt;log&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/donnie4w/tklog" title="donnie4w/tklog"&gt;donnie4w/tklog&lt;/a&gt; - lightweight and efficient rust structured log library with support for log levels, file segmentation, compressed archiving.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/estk/log4rs"&gt;estk/log4rs&lt;/a&gt; - highly configurable logging framework modeled after Java's Logback and log4j libraries &lt;a href="https://app.circleci.com/pipelines/github/estk/log4rs"&gt;&lt;img src="https://circleci.com/gh/estk/log4rs.svg?style=shield" alt="CircleCI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rbatis/fast_log"&gt;rbatis/fast_log&lt;/a&gt; - Async log High-performance asynchronous logging&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/log"&gt;rust-lang/log&lt;/a&gt; - Logging implementation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/seanmonstar/pretty-env-logger"&gt;seanmonstar/pretty-env-logger&lt;/a&gt; - A pretty, easy-to-use logger.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/slog-rs/slog"&gt;slog-rs/slog&lt;/a&gt; - Structured, composable logging&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tokio-rs/tracing"&gt;tokio-rs/tracing&lt;/a&gt; - An application level tracing framework for async-aware structured logging, error handling, metrics, and more &lt;a href="https://github.com/tokio-rs/tracing/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/tokio-rs/tracing/workflows/CI/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Macro&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;cute 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mattgathu/cute"&gt;mattgathu/cute&lt;/a&gt; - Macro for Python-esque list comprehensions.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/elastio/bon"&gt;elastio/bon&lt;/a&gt; [&lt;a href="https://crates.io/crates/bon"&gt;bon&lt;/a&gt;] - generate compile-time-checked builders for structs and functions, provides partial application, optional and named parameters for functions and methods. &lt;a href="https://github.com/elastio/bon/actions"&gt;&lt;img src="https://github.com/elastio/bon/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StardustDL/Linq-in-Rust"&gt;Linq-in-Rust&lt;/a&gt; - Macro and methods for C#-LINQ-like expressions. &lt;a href="https://github.com/StardustDL/Linq-in-Rust/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/StardustDL/Linq-in-Rust/workflows/CI/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Markup language&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;CommonMark 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pulldown-cmark/pulldown-cmark"&gt;pulldown-cmark/pulldown-cmark&lt;/a&gt; - &lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt; parser&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/insomnimus/tidier"&gt;insomnimus/tidier&lt;/a&gt; [&lt;a href="https://crates.io/crates/tidier"&gt;tidier&lt;/a&gt;] - A library to format HTML, XHTML and XML documents. &lt;a href="https://github.com/insomnimus/tidier/actions"&gt;&lt;img src="https://github.com/insomnimus/tidier/actions/workflows/main.yml/badge.svg?branch=main" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mobile&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Android / iOS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ivnsch/rust_android_ios"&gt;ivnsch/rust_android_ios&lt;/a&gt; - An example of using a shared lib for Android and iOS using rust-swig and cbindgen respectively.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Generic 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Geal/rust_on_mobile"&gt;Geal/rust_on_mobile&lt;/a&gt; - iOS CocoaPods / Android JNI&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/redbadger/crux"&gt;redbadger/crux&lt;/a&gt; [&lt;a href="https://crates.io/crates/crux_core"&gt;crux_core&lt;/a&gt;] - Cross-platform app development. Crux helps you share your app's business logic and behavior across mobile (iOS/Android) and web - as a single reusable core. &lt;a href="https://github.com/redbadger/crux/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/redbadger/crux/build.yaml" alt="Build status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;iOS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/TimNN/cargo-lipo"&gt;TimNN/cargo-lipo&lt;/a&gt; - A cargo lipo subcommand which automatically creates a universal library for use with your iOS application.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Network programming&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bluetooth 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bluez/bluer"&gt;bluez/bluer&lt;/a&gt; [&lt;a href="https://crates.io/crates/bluer"&gt;bluer&lt;/a&gt;] - Official BlueZ bindings. &lt;a href="https://github.com/bluez/bluer/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/bluez/bluer/actions/workflows/rust.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CoAP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Covertness/coap-rs"&gt;Covertness/coap-rs&lt;/a&gt; - A &lt;a href="https://datatracker.ietf.org/doc/html/rfc7252"&gt;Constrained Application Protocol(CoAP)&lt;/a&gt; library.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Docker 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fussybeaver/bollard"&gt;fussybeaver/bollard&lt;/a&gt; - Docker daemon API&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;FTP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mattnenterprise/rust-ftp"&gt;mattnenterprise/rust-ftp&lt;/a&gt; - an &lt;a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol"&gt;FTP&lt;/a&gt; client&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;gRPC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hyperium/tonic"&gt;hyperium/tonic&lt;/a&gt; - A native gRPC client &amp;amp; server implementation with async/await support &lt;a href="https://crates.io/crates/tonic"&gt;&lt;img src="https://img.shields.io/crates/v/tonic" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tikv/grpc-rs"&gt;tikv/grpc-rs&lt;/a&gt; - The gRPC library built on C Core library and futures&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl"&gt;Hurl&lt;/a&gt; - Run and test HTTP requests with plain text and libcurl &lt;a href="https://github.com/Orange-OpenSource/hurl/actions"&gt;&lt;img src="https://github.com/Orange-OpenSource/hurl/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;IPNetwork 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/achanda/ipnetwork"&gt;achanda/ipnetwork&lt;/a&gt; - A library to work with IP networks&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/canndrew/netsim"&gt;candrew/netsim&lt;/a&gt; - A library for network simulation and testing&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Low level 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/actix/actix"&gt;actix/actix&lt;/a&gt; - Actor library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/dylanmckay/protocol"&gt;dylanmckay/protocol&lt;/a&gt; - Custom TCP/UDP protocol definitions&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/libpnet/libpnet"&gt;libpnet/libpnet&lt;/a&gt; - A cross-platform, low level networking&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/smoltcp-rs/smoltcp"&gt;smoltcp-rs/smoltcp&lt;/a&gt; - A standalone, event-driven TCP/IP stack that is designed for bare-metal, real-time systems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;message-io 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lemunozm/message-io"&gt;lemunozm/message-io&lt;/a&gt; - Event-driven message library to build network applications easy and fast. Supports TCP, UDP and WebSockets. &lt;a href="https://github.com/lemunozm/message-io/actions?query=workflow%3A%22message-io+ci%22"&gt;&lt;img src="https://img.shields.io/github/workflow/status/lemunozm/message-io/message-io%20ci" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;MQTT 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bytebeamio/rumqtt"&gt;bytebeamio/rumqtt&lt;/a&gt; - A library for developers to build applications that communicate with the &lt;a href="https://mqtt.org"&gt;MQTT protocol&lt;/a&gt; over TCP and WebSockets, with or without TLS. &lt;a href="https://github.com/bytebeamio/rumqtt/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/bytebeamio/rumqtt/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build and Test" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rmqtt/rmqtt"&gt;rmqtt/rmqtt&lt;/a&gt; - MQTT Server/MQTT Broker - Scalable Distributed MQTT Message Broker for IoT in the 5G Era&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NanoMsg 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/thehydroimpulse/nanomsg.rs"&gt;thehydroimpulse/nanomsg.rs&lt;/a&gt; - &lt;a href="https://nanomsg.org/"&gt;nanomsg&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NATS 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nats-io/nats.rs"&gt;nats-io/nats.rs&lt;/a&gt; - Client for NATS, the cloud native messaging system. &lt;a href="https://github.com/nats-io/nats.rs/actions"&gt;&lt;img src="https://github.com/nats-io/nats.rs/workflows/Rust/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Nng 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/neachdainn/nng-rs"&gt;neachdainn/nng-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/nng"&gt;Nng&lt;/a&gt;] - &lt;a href="https://nng.nanomsg.org/index.html"&gt;Nng (nanomsg v2)&lt;/a&gt; bindings &lt;a href="https://gitlab.com/neachdainn/nng-rs/-/pipelines"&gt;&lt;img src="https://gitlab.com/neachdainn/nng-rs/badges/master/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NNTP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mattnenterprise/rust-nntp"&gt;mattnenterprise/rust-nntp&lt;/a&gt; [&lt;a href="https://crates.io/crates/nntp"&gt;nntp&lt;/a&gt;] - an &lt;a href="https://en.wikipedia.org/wiki/Network_News_Transfer_Protocol"&gt;NNTP&lt;/a&gt; client&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;P2P 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/libp2p/rust-libp2p"&gt;libp2p/rust-libp2p&lt;/a&gt; - Implementation of libp2p networking stack. &lt;a href="https://app.circleci.com/pipelines/github/libp2p/rust-libp2p"&gt;&lt;img src="https://circleci.com/gh/libp2p/rust-libp2p.svg?style=svg" alt="Circle CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/n0-computer/iroh"&gt;n0-computer/iroh&lt;/a&gt; [&lt;a href="https://crates.io/crates/iroh"&gt;iroh&lt;/a&gt;] - crate for building on direct connections between devices &lt;a href="https://github.com/n0-computer/iroh/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/n0-computer/iroh/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;POP3 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mattnenterprise/rust-pop3"&gt;mattnenterprise/rust-pop3&lt;/a&gt; [&lt;a href="https://crates.io/crates/pop3"&gt;pop3&lt;/a&gt;] - A &lt;a href="https://en.wikipedia.org/wiki/Post_Office_Protocol"&gt;POP3&lt;/a&gt; client&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;QUIC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/aws/s2n-quic"&gt;aws/s2n-quic&lt;/a&gt; - An implementation of the IETF QUIC protocol &lt;img src="https://img.shields.io/github/actions/workflow/status/aws/s2n-quic/ci.yml?branch=main" alt="ci" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cloudflare/quiche"&gt;cloudflare/quiche&lt;/a&gt; - cloudflare implementation of the QUIC transport protocol and HTTP/3 &lt;img src="https://img.shields.io/github/actions/workflow/status/cloudflare/quiche/stable.yml?branch=master" alt="build" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mozilla/neqo"&gt;mozilla/neqo&lt;/a&gt; - an Implementation of QUIC&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/quinn-rs/quinn"&gt;quinn-rs/quinn&lt;/a&gt; - Futures-based QUIC implementation &lt;a href="https://dev.azure.com/dochtman/Projects/_build"&gt;&lt;img src="https://dev.azure.com/dochtman/Projects/_apis/build/status/Quinn?branchName=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Tencent/tquic"&gt;tencent/tquic&lt;/a&gt; - A high-performance, lightweight, and cross-platform QUIC library &lt;a href="https://github.com/Tencent/tquic/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/tencent/tquic/rust.yml" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Raknet 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/b23r0/rust-raknet"&gt;b23r0/rust-raknet&lt;/a&gt; - RakNet Protocol implementation &lt;a href="https://github.com/b23r0/rust-raknet/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/workflow/status/b23r0/rust-raknet/Rust" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;RPC 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ENQT-GmbH/remoc"&gt;ENQT-GmbH/remoc&lt;/a&gt; [&lt;a href="https://crates.io/crates/remoc"&gt;remoc&lt;/a&gt;] - Remoc provides channels (broadcast, mpsc, oneshot, watch) similar to Tokio's and trait calling over any remote transport. &lt;a href="https://github.com/ENQT-GmbH/remoc/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/ENQT-GmbH/remoc/actions/workflows/rust.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/smallnest/rpcx-rs"&gt;smallnest/rpcx-rs&lt;/a&gt; - A RPC library for developing microservices in easy and simple way.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;SIP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/restsend/rsipstack"&gt;restsend/rsipstack&lt;/a&gt; - A RFC 3261 compliant SIP stack&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Socket.io 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/1c3t3a/rust-socketio"&gt;1c3t3a/rust-socketio&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust_socketio"&gt;rust_socketio&lt;/a&gt;] - an implementation of a &lt;a href="https://socket.io"&gt;socket.io&lt;/a&gt; client written in Rust. &lt;a href="https://github.com/1c3t3a/rust-socketio/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/1c3t3a/rust-socketio/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;SSH 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alexcrichton/ssh2-rs"&gt;alexcrichton/ssh2-rs&lt;/a&gt; - &lt;a href="https://libssh2.org/"&gt;libssh2&lt;/a&gt; bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://pijul.org/thrussh"&gt;Thrussh&lt;/a&gt; [&lt;a href="https://crates.io/crates/thrussh"&gt;thrussh&lt;/a&gt;] - an SSH library, backed by &lt;a href="https://doc.libsodium.org/"&gt;libsodium&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Stomp 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zslayton/stomp-rs"&gt;zslayton/stomp-rs&lt;/a&gt; - A &lt;a href="http://stomp.github.io/stomp-specification-1.2.html"&gt;STOMP 1.2&lt;/a&gt; client implementation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;VPN 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/DefGuard/wireguard-rs"&gt;defguard/wireguard-rs&lt;/a&gt; - A multi-platform library providing a unified high-level API for managing WireGuard interfaces using native OS kernel and userspace WireGuard protocol implementations&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Zenoh 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/eclipse-zenoh-flow/zenoh-flow"&gt;eclipse-zenoh-flow/zenoh-flow&lt;/a&gt; - A declarative framework for computations that span from the &lt;em&gt;Cloud&lt;/em&gt; to the &lt;em&gt;Thing&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/eclipse-zenoh/zenoh"&gt;eclipse-zenoh/zenoh&lt;/a&gt; - Zero Overhead Network Protocol&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ZeroMQ 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/erickt/rust-zmq"&gt;erickt/rust-zmq&lt;/a&gt; - &lt;a href="https://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Parsing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xlane/pe-sign"&gt;0xlane/pe-sign&lt;/a&gt; &lt;a href="https://crates.io/crates/pe-sign"&gt;[pe-sign]&lt;/a&gt; - A cross-platform rust no-std library for verifying and extracting signature information from PE files. &lt;a href="https://crates.io/crates/pe-sign"&gt;&lt;img src="https://img.shields.io/crates/v/pe-sign" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/0xlane/pe-sign/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/0xlane/pe-sign/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cchexcode/wavefront_rs"&gt;cchexcode/wavefront_rs&lt;/a&gt; - A parser for the Wavefront OBJ format. &lt;a href="https://crates.io/crates/wavefront_rs"&gt;&lt;img src="https://img.shields.io/crates/v/wavefront_rs.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/wavefront_rs"&gt;&lt;img src="https://img.shields.io/crates/d/wavefront_rs?label=crates.io%20downloads" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cchexcode/wavefront_rs/actions"&gt;&lt;img src="https://github.com/cchexcode/wavefront_rs/workflows/pipeline/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/comex/rust-shlex"&gt;comex/rust-shlex&lt;/a&gt; [&lt;a href="https://crates.io/crates/shlex"&gt;shlex&lt;/a&gt;] - Split a string into shell words, like Python's shlex. &lt;a href="https://github.com/comex/rust-shlex/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/comex/rust-shlex/actions/workflows/test.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Eliah-Lakhin/lady-deirdre"&gt;Eliah-Lakhin/lady-deirdre&lt;/a&gt; - A framework for new programming languages and LSP servers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Folyd/robotstxt"&gt;Folyd/robotstxt&lt;/a&gt; - Port of Google's robots.txt parser and matcher C++ library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/freestrings/jsonpath"&gt;freestrings/jsonpath&lt;/a&gt; - &lt;a href="https://goessner.net/articles/JsonPath/"&gt;JsonPath&lt;/a&gt; engine. Webassembly and Javascript support too&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/stl_io"&gt;hmeyer/stl_io&lt;/a&gt; - A parser for STL (STereoLithography) files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/igumnoff/shiva"&gt;igumnoff/shiva&lt;/a&gt; - Shiva library: Implementation in Rust of a parser and generator for documents of any type (Plain text, Markdown, HTML, PDF and etc)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kevinmehall/rust-peg"&gt;kevinmehall/rust-peg&lt;/a&gt; - Parsing Expression Grammar (PEG) parser generator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lalrpop/lalrpop"&gt;lalrpop/lalrpop&lt;/a&gt; - LR(1) parser generator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/m4rw3r/chomp"&gt;m4rw3r/chomp&lt;/a&gt; - A fast monadic-style parser combinator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Marwes/combine"&gt;Marwes/combine&lt;/a&gt; - parser combinator library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nrc/zero"&gt;nrc/zero&lt;/a&gt; [&lt;a href="https://crates.io/crates/zero/"&gt;zero&lt;/a&gt;] - zero-allocation parsing of binary data&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pest-parser/pest"&gt;pest-parser/pest&lt;/a&gt; - The Elegant Parser&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ptal/oak"&gt;ptal/oak&lt;/a&gt; - A typed PEG parser generator (compiler plugin)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-bakery/nom"&gt;rust-bakery/nom&lt;/a&gt; - parser combinator library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/s-panferov/queryst"&gt;s-panferov/queryst&lt;/a&gt; - A query string parsing library inspired by &lt;a href="https://github.com/ljharb/qs#readme"&gt;gs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/softdevteam/grmtools/"&gt;softdevteam/grmtools&lt;/a&gt; - A LR parser with better error correction&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;tree-sitter/tree-sitter&lt;/a&gt; - A parser generator tool and an incremental parsing library geared towards programming tools&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Peripherals&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fingerprint reader 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alvaroparker/libfprint-rs"&gt;alvaroparker/libfprint-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/libfprint-rs"&gt;libfprint-rs&lt;/a&gt;] - Libfprint-rs provides a wrapper around the Linux libfprint library.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Serial Port 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/serialport/serialport-rs"&gt;serialport/serialport-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/serialport"&gt;serialport&lt;/a&gt;] - A cross-platform library that provides access to a serial port&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Platform specific&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cross-platform 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/thread-priority/"&gt;iddm/thread-priority&lt;/a&gt; - Simple, crossplatform thread priority management. &lt;a href="https://github.com/iddm/thread-priority/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/thread-priority/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/thread-priority"&gt;&lt;img src="https://img.shields.io/crates/v/thread-priority.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/battery"&gt;svartalf/rust-battery&lt;/a&gt; - Cross-platform information about the notebook batteries&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;FreeBSD 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/fubarnetes/libjail-rs/"&gt;fubarnetes/libjail-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/jail"&gt;jail&lt;/a&gt;] - FreeBSD jail library&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Linux 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hannobraun/inotify-rs"&gt;hannobraun/inotify-rs&lt;/a&gt; - &lt;a href="https://en.wikipedia.org/wiki/Inotify"&gt;inotify&lt;/a&gt; bindings &lt;a href="https://github.com/hannobraun/inotify-rs/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/hannobraun/inotify-rs/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/pop-os/distinst/"&gt;pop-os/distinst&lt;/a&gt; - Linux distribution installer&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/yaa110/rust-iptables"&gt;yaa110/rust-iptables&lt;/a&gt; [&lt;a href="https://crates.io/crates/iptables"&gt;iptables&lt;/a&gt;] - &lt;a href="https://www.netfilter.org/projects/iptables/index.html"&gt;iptables&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Unix-like 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nix-rust/nix"&gt;nix-rust/nix&lt;/a&gt; - Unix-like API bindings &lt;a href="https://cirrus-ci.com/github/nix-rust/nix"&gt;&lt;img src="https://api.cirrus-ci.com/github/nix-rust/nix.svg?sanitize=true" alt="Cirrus Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/bytecodealliance/rustix"&gt;rustix&lt;/a&gt; - Safe bindings to POSIX/Unix/Linux/Winsock2 syscalls &lt;a href="https://github.com/bytecodealliance/rustix/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/bytecodealliance/rustix/workflows/CI/badge.svg?sanitize=true" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zargony/fuse-rs"&gt;zargony/fuse-rs&lt;/a&gt; - &lt;a href="https://github.com/libfuse/libfuse"&gt;FUSE&lt;/a&gt; bindings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Windows 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/microsoft/windows-rs"&gt;microsoft/windows-rs&lt;/a&gt; - Rust for Windows &lt;a href="https://github.com/microsoft/windows-rs/actions"&gt;&lt;img src="https://github.com/microsoft/windows-rs/workflows/CI/badge.svg?sanitize=true" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/retep998/winapi-rs"&gt;retep998/winapi-rs&lt;/a&gt; - Windows API bindings &lt;a href="https://github.com/retep998/winapi-rs/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/retep998/winapi-rs/actions/workflows/rust.yml/badge.svg?branch=dev" alt="Rust" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Reverse engineering&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/binarly-io/idalib"&gt;binarly-io/idalib&lt;/a&gt; [&lt;a href="https://crates.io/crates/idalib"&gt;idalib&lt;/a&gt;] - Rust bindings for the IDA SDK, enabling the development of standalone analysis tools using IDA v9.0‚Äôs idalib&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/encounter/objdiff"&gt;objdiff&lt;/a&gt; - A local diffing tool for decompilation projects&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Scripting&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/scripting"&gt;scripting&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustq/3body-lang"&gt;3body-lang&lt;/a&gt; - The Three Body Language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cel-rust/cel-rust"&gt;cel-rust&lt;/a&gt; [&lt;a href="https://crates.io/crates/cel-interpreter"&gt;cel-interpreter&lt;/a&gt;] - Common expression language parser and interpreter&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/duckscript"&gt;duckscript&lt;/a&gt; - &lt;a href="https://github.com/sagiegurari/duckscript"&gt;Simple, extendable and embeddable scripting language.&lt;/a&gt; &lt;a href="https://github.com/sagiegurari/duckscript/actions"&gt;&lt;img src="https://github.com/sagiegurari/duckscript/workflows/CI/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebook/starlark-rust"&gt;facebook/starlark-rust&lt;/a&gt; - A small, deterministic, thread-safe language with Python syntax&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fleabitdev/glsp"&gt;fleabitdev/gamelisp&lt;/a&gt; - A Lisp-like scripting language for game development&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/giraffekey/xylo"&gt;giraffekey/xylo&lt;/a&gt; [&lt;a href="https://crates.io/crates/xylo-lang"&gt;xylo-lang&lt;/a&gt;] - A functional programming language for procedural art. &lt;a href="https://github.com/giraffekey/xylo/actions"&gt;&lt;img src="https://github.com/giraffekey/xylo/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gluon-lang/gluon"&gt;gluon-lang/gluon&lt;/a&gt; - A small, statically-typed, functional programming language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kcl-lang/kcl"&gt;kcl&lt;/a&gt; - A constraint-based record &amp;amp; functional language mainly used in configuration and policy scenarios.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/metacall/core"&gt;metacall/core&lt;/a&gt; [&lt;a href="https://crates.io/crates/metacall"&gt;metacall&lt;/a&gt;] - Cross-platform Polyglot Runtime which supports NodeJS, JavaScript, TypeScript, Python, Ruby, C#, Wasm, Java, Cobol and more. &lt;a href="https://gitlab.com/metacall/core"&gt;&lt;img src="https://gitlab.com/metacall/core/badges/master/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mun-lang/mun"&gt;mun&lt;/a&gt; - A compiled, statically-typed scripting language with first class hot reloading support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/murarth/ketos"&gt;murarth/ketos&lt;/a&gt; - A Lisp dialect functional programming language serving as a scripting and extension language for rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/dyon"&gt;PistonDevelopers/dyon&lt;/a&gt; - A rusty dynamically typed scripting language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rhaiscript/rhai"&gt;rhaiscript/rhai&lt;/a&gt; - A tiny and fast embedded scripting language resembling a combination of JavaScript and Rust &lt;a href="https://github.com/rhaiscript/rhai/actions"&gt;&lt;img src="https://github.com/rhaiscript/rhai/workflows/Build/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rune-rs/rune"&gt;rune-rs/rune&lt;/a&gt; - An embeddable dynamic programming language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trynova/nova"&gt;trynova/nova&lt;/a&gt; - JavaScript engine written entirely in Rust&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Simulation&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://crates.io/keywords/simulation"&gt;simulation&lt;/a&gt;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/nyx-space"&gt;nyx-space&lt;/a&gt; - High fidelity, fast, reliable and validated astrodynamical toolkit library, used for spacecraft mission design and orbit determination &lt;a href="https://gitlab.com/nyx-space/nyx/-/pipelines"&gt;&lt;img src="https://gitlab.com/nyx-space/nyx/badges/master/pipeline.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Social networks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Telegram 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/FedericoBruzzone/tdlib-rs"&gt;tdilb-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/tdlib-rs"&gt;tdilb-rs&lt;/a&gt;] - Crossplatform Rust wrapper around the Telegram Database Library (TDLib) &lt;a href="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-linux.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-linux.yml/badge.svg?sanitize=true" alt="CI Linux" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-macos.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-macos.yml/badge.svg?sanitize=true" alt="CI macOS" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-windows.yml"&gt;&lt;img src="https://github.com/FedericoBruzzone/tdlib-rs/actions/workflows/ci-windows.yml/badge.svg?sanitize=true" alt="CI Windows" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;System&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ardaku/whoami"&gt;ardaku/whoami&lt;/a&gt; [&lt;a href="https://crates.io/crates/whoami"&gt;whoami&lt;/a&gt;] - crate to get the current user and environment. &lt;a href="https://github.com/ardaku/whoami/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/ardaku/whoami/actions/workflows/ci.yml/badge.svg?branch=stable" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GuillaumeGomez/sysinfo"&gt;GuillaumeGomez/sysinfo&lt;/a&gt; [&lt;a href="https://crates.io/crates/sysinfo"&gt;sysinfo&lt;/a&gt;] - Cross-platform library to fetch system information &lt;a href="https://github.com/GuillaumeGomez/sysinfo/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/GuillaumeGomez/sysinfo/actions/workflows/CI.yml/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/navidys/procsys"&gt;navidys/procsys&lt;/a&gt; [&lt;a href="https://crates.io/crates/procsys"&gt;procsys&lt;/a&gt;] - A library to retrieve system, kernel, and process metrics from the pseudo-filesystems /proc and /sys.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Phate6660/nixinfo"&gt;Phate6660/nixinfo&lt;/a&gt; [&lt;a href="https://crates.io/crates/nixinfo"&gt;nixinfo&lt;/a&gt;] - A lib crate for gathering system info such as cpu, distro, environment, kernel, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sorairolake/sysexits-rs"&gt;sorairolake/sysexits-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/sysexits"&gt;sysexits&lt;/a&gt;] - The system exit codes as defined by &lt;a href="https://man.openbsd.org/sysexits"&gt;&lt;code&gt;&amp;lt;sysexits.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. &lt;a href="https://github.com/sorairolake/sysexits-rs/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/sorairolake/sysexits-rs/workflows/CI/badge.svg?branch=develop" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Task scheduling&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BinChengZhao/delay-timer"&gt;delay-timer&lt;/a&gt; - Time-manager of delayed tasks. Like crontab, but asynchronous tasks are possible. &lt;a href="https://github.com/BinChengZhao/delay-timer/actions"&gt;&lt;img src="https://github.com/BinChengZhao/delay-timer/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustmailer/persistent-scheduler"&gt;persistent-scheduler&lt;/a&gt; [&lt;a href="https://crates.io/crates/persistent-scheduler"&gt;persistent-scheduler&lt;/a&gt;] - A high-performance task scheduling system built with Tokio, offering task persistence, repeatable tasks, and Cron-based scheduling for reliable time-based operations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Template engine&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Handlebars 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sunng87/handlebars-rust"&gt;sunng87/handlebars-rust&lt;/a&gt; - Handlebars template engine with inheritance, custom helper support.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zzau13/yarte"&gt;zzau13/yarte&lt;/a&gt; - Yarte stands for &lt;strong&gt;Y&lt;/strong&gt;et &lt;strong&gt;A&lt;/strong&gt;nother &lt;strong&gt;R&lt;/strong&gt;ust &lt;strong&gt;T&lt;/strong&gt;emplate &lt;strong&gt;E&lt;/strong&gt;ngine, is the fastest template engine.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTML 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/askama-rs/askama"&gt;askama&lt;/a&gt; - template rendering engine based on Jinja&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kaj/ructe"&gt;kaj/ructe&lt;/a&gt; - HTML template system&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Keats/tera"&gt;Keats/tera&lt;/a&gt; - template engine based on Jinja2 and the Django template language. &lt;a href="https://github.com/Keats/tera/actions"&gt;&lt;img src="https://github.com/Keats/tera/workflows/ci/badge.svg?branch=master" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/lambda-fairy/maud"&gt;lambda-fairy/maud&lt;/a&gt; - compile-time HTML templates&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stebalien/horrorshow-rs"&gt;Stebalien/horrorshow-rs&lt;/a&gt; - compile-time HTML templates&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mustache 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustache/rustache"&gt;rustache/rustache&lt;/a&gt; - a Rust implementation of the Mustache spec&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Text processing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/becheran/wildmatch"&gt;becheran/wildmatch&lt;/a&gt; [&lt;a href="https://crates.io/crates/wildmatch"&gt;wildmatch&lt;/a&gt;] - Simple string matching with questionmark- and star-wildcard operator &lt;a href="https://github.com/becheran/wildmatch/actions"&gt;&lt;img src="https://github.com/becheran/wildmatch/workflows/Build/badge.svg?branch=master" alt="Actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurntSushi/suffix"&gt;BurntSushi/suffix&lt;/a&gt; - Linear time suffix array construction (with Unicode support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurntSushi/tabwriter"&gt;BurntSushi/tabwriter&lt;/a&gt; - Elastic tab stops (i.e., text column alignment)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/probablykasper/cpc"&gt;cpc&lt;/a&gt; - Parses and calculates strings of math with support for units and unit conversion, from &lt;code&gt;1+2&lt;/code&gt; to &lt;code&gt;1% of round(1 lightyear / 14!s to km/h)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Daniel-Liu-c0deb0t/triple_accel"&gt;Daniel-Liu-c0deb0t/triple_accel&lt;/a&gt; [&lt;a href="https://crates.io/crates/triple_accel"&gt;triple_accel&lt;/a&gt;] - Rust edit distance routines accelerated using SIMD; supports fast Hamming, Levenshtein, restricted Damerau-Levenshtein, etc. distance calculations and string search &lt;a href="https://github.com/Daniel-Liu-c0deb0t/triple_accel/actions"&gt;&lt;img src="https://github.com/Daniel-Liu-c0deb0t/triple_accel/workflows/Test/badge.svg?branch=master" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fancy-regex/fancy-regex"&gt;fancy-regex/fancy-regex&lt;/a&gt; [&lt;a href="https://crates.io/crates/fancy-regex"&gt;fancy-regex&lt;/a&gt;] - Regular expressions implementation designed to support a relatively rich set of features such as look-around and backtracking. &lt;a href="https://crates.io/crates/fancy-regex"&gt;&lt;img src="https://img.shields.io/crates/v/fancy-regex.svg?sanitize=true" alt="crates" /&gt;&lt;/a&gt; &lt;a href="https://github.com/fancy-regex/fancy-regex/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/fancy-regex/fancy-regex/workflows/ci/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/greyblake/whatlang-rs"&gt;greyblake/whatlang-rs&lt;/a&gt; - Natural language detection library based on trigrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Lucretiel/joinery"&gt;Lucretiel/joinery&lt;/a&gt; [&lt;a href="https://crates.io/crates/joinery"&gt;joinery&lt;/a&gt;] - Generic string + iterable joining&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mgeisler/textwrap"&gt;mgeisler/textwrap&lt;/a&gt; [&lt;a href="https://crates.io/crates/textwrap"&gt;textwrap&lt;/a&gt;] - Word wrap text (with support for hyphenation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/null8626/decancer"&gt;null8626/decancer&lt;/a&gt; [&lt;a href="https://crates.io/crates/decancer"&gt;decancer&lt;/a&gt;] - A tiny package that removes common unicode confusables/homoglyphs from strings. &lt;a href="https://crates.io/crates/decancer"&gt;&lt;img src="https://img.shields.io/crates/v/decancer.svg?sanitize=true" alt="crates" /&gt;&lt;/a&gt; &lt;a href="https://github.com/null8626/decancer/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/null8626/decancer/workflows/CI/badge.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ps1dr3x/easy_reader"&gt;ps1dr3x/easy_reader&lt;/a&gt; - A reader that allows forwards, backwards and random navigations through the lines of huge files without consuming iterators&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pwoolcoc/ngrams"&gt;pwoolcoc/ngrams&lt;/a&gt; [&lt;a href="https://crates.io/crates/ngrams"&gt;ngrams&lt;/a&gt;] - Construct &lt;a href="https://en.wikipedia.org/wiki/N-gram"&gt;n-grams&lt;/a&gt; from arbitrary iterators&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/regex"&gt;rust-lang/regex&lt;/a&gt; - Regular expressions (RE2 style)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/strsim"&gt;strsim-rs&lt;/a&gt; - String similarity metrics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yaa110/rake-rs"&gt;yaa110/rake-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/rake"&gt;rake&lt;/a&gt;] - Multilingual implementation of RAKE algorithm for Rust&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Text search&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andylokandy/simsearch-rs"&gt;andylokandy/simsearch-rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/simsearch"&gt;simsearch&lt;/a&gt;] - A simple and lightweight fuzzy search engine that works in memory, searching for similar strings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurntSushi/fst"&gt;BurntSushi/fst&lt;/a&gt; [&lt;a href="https://crates.io/crates/fst"&gt;fst&lt;/a&gt;] - a fast implementation of ordered sets and maps using finite state machines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CurrySoftware/perlin"&gt;CurrySoftware/perlin&lt;/a&gt; [&lt;a href="https://crates.io/crates/perlin"&gt;perlin&lt;/a&gt;] - A lazy, zero-allocation and data-agnostic Information Retrieval library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meilisearch/MeiliSearch"&gt;meilisearch/MeiliSearch&lt;/a&gt; - Ultra relevant, instant and typo-tolerant full-text search API. &lt;a href="https://github.com/meilisearch/MeiliSearch/actions"&gt;&lt;img src="https://github.com/meilisearch/MeiliSearch/workflows/Cargo%20test/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradedb/paradedb/tree/dev/pg_search"&gt;pg_search&lt;/a&gt; - PostgreSQL extension that enables full-text search over SQL tables using the BM25 algorithm, the state-of-the-art ranking function for full-text search.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SeekStorm/SeekStorm"&gt;SeekStorm&lt;/a&gt; [&lt;a href="https://crates.io/crates/seekstorm"&gt;SeekStorm&lt;/a&gt;] - sub-millisecond full-text search library &amp;amp; multi-tenancy server in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quickwit-oss/tantivy"&gt;tantivy&lt;/a&gt; [&lt;a href="https://crates.io/crates/tantivy"&gt;tantivy&lt;/a&gt;] - A horse-speed full-text search engine library written in Rust. &lt;a href="https://github.com/quickwit-oss/tantivy/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/quickwit-oss/tantivy/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Unsafe&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/zerocopy"&gt;zerocopy&lt;/a&gt; - "Zerocopy makes zero-cost memory manipulation effortless. We write &lt;code&gt;unsafe&lt;/code&gt; so you don‚Äôt have to."&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Video&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nathanbabcock/ffmpeg-sidecar"&gt;ffmpeg-sidecar&lt;/a&gt; - Wrap a standalone FFmpeg binary in an intuitive Iterator interface. &lt;a href="https://github.com/nathanbabcock/ffmpeg-sidecar/actions"&gt;&lt;img src="https://github.com/nathanbabcock/ffmpeg-sidecar/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Virtualization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/beneills/quantum"&gt;beneills/quantum&lt;/a&gt; - Advanced quantum computer simulator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bytecodealliance/wasmtime"&gt;bytecodealliance/wasmtime&lt;/a&gt; - A standalone runtime for WebAssembly &lt;a href="https://github.com/bytecodealliance/wasmtime/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/bytecodealliance/wasmtime/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://chromium.googlesource.com/chromiumos/platform/crosvm/"&gt;chromium/chromiumos/platform/crosvm&lt;/a&gt; - CrOSVM Enables Chrome OS to run Linux apps inside a fast, secure virtualized environment&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oxidecomputer/propolis"&gt;oxidecomputer/propolis&lt;/a&gt; - Userspace program for illumos bhyve kernel modules&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/saurvs/hypervisor-rs"&gt;saurvs/hypervisor-rs&lt;/a&gt; - Hardware-accelerated virtualization on OS X&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Web programming&lt;/h3&gt; 
&lt;p&gt;See also &lt;a href="https://www.arewewebyet.org"&gt;Are we web yet?&lt;/a&gt; and &lt;a href="https://github.com/flosse/rust-web-framework-comparison"&gt;Rust web framework comparison&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Client-side / WASM 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/cargo-web"&gt;cargo-web&lt;/a&gt; - A Cargo subcommand for the client-side Web&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/leptos-rs/leptos"&gt;leptos&lt;/a&gt; - Leptos is a full-stack, isomorphic web framework leveraging fine-grained reactivity to build declarative user interfaces.&lt;a href="https://crates.io/crates/leptos"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ivanceras/sauron"&gt;sauron&lt;/a&gt; - Client side web framework which closely adheres to The Elm Architecture.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/seed-rs/seed"&gt;seed&lt;/a&gt; - A framework for creating web apps&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/stdweb"&gt;stdweb&lt;/a&gt; - A standard library for the client-side Web&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/LiveDuo/tinyweb"&gt;tinyweb&lt;/a&gt; - A minimal Rust web framework for wasm in 800 lines of code&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/yew"&gt;yew&lt;/a&gt; - A framework for making client web apps&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP Client 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/0x676e67/wreq"&gt;0x676e67/wreq&lt;/a&gt; - An ergonomic Rust HTTP Client with TLS fingerprint. &lt;a href="https://github.com/0x676e67/wreq/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/0x676e67/wreq/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/wreq"&gt;&lt;img src="https://img.shields.io/crates/v/wreq.svg?logo=rust" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/alexcrichton/curl-rust"&gt;alexcrichton/curl-rust&lt;/a&gt; - &lt;a href="https://curl.se/libcurl/"&gt;libcurl&lt;/a&gt; bindings&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/async-graphql/async-graphql"&gt;async-graphql&lt;/a&gt; - A GraphQL server library &lt;a href="https://dev.azure.com/graphql-rust/GraphQL%20Rust/_build/latest?definitionId=1"&gt;&lt;img src="https://dev.azure.com/graphql-rust/GraphQL%20Rust/_apis/build/status/graphql-rust.juniper" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx"&gt;c410-f3r/wtx&lt;/a&gt; - HTTP/2 client framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/Douman/yukikaze"&gt;DoumanAsh/yukikaze&lt;/a&gt; [&lt;a href="https://crates.io/crates/yukikaze"&gt;yukikaze&lt;/a&gt;] - Beautiful and elegant Yukikaze is little HTTP client library based on hyper. &lt;a href="https://gitlab.com/Douman/yukikaze"&gt;&lt;img src="https://gitlab.com/Douman/yukikaze/badges/master/pipeline.svg?sanitize=true" alt="build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ducaale/xh"&gt;ducaale/xh&lt;/a&gt; - Friendly and fast tool for sending HTTP requests &lt;a href="https://crates.io/crates/xh"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ducaale/xh/actions"&gt;&lt;img src="https://github.com/ducaale/xh/workflows/CI/badge.svg?branch=master" alt="GitHub actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/graphql-rust/graphql-client"&gt;graphql-client&lt;/a&gt; - Typed, correct GraphQL requests and responses. &lt;a href="https://github.com/graphql-rust/graphql-client/actions"&gt;&lt;img src="https://github.com/graphql-rust/graphql-client/workflows/CI/badge.svg?branch=master" alt="GitHub actions Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hyperium/hyper"&gt;hyperium/hyper&lt;/a&gt; - an HTTP implementation &lt;a href="https://github.com/hyperium/hyper/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/hyperium/hyper/workflows/CI/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/plabayo/rama"&gt;plabayo/rama&lt;/a&gt; - A modular service framework to move and transform your network packets, can be used among other things, to build clients with TLS, JA3/JA4, H2 and QUIC/H3 fingerprint impersonation&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/seanmonstar/reqwest"&gt;seanmonstar/reqwest&lt;/a&gt; - an ergonomic HTTP Client.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP Server 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/actix/actix-web"&gt;actix/actix-web&lt;/a&gt; - A lightweight async web framework with websocket support&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/saru-tora/anansi"&gt;Anansi&lt;/a&gt; - A simple full-stack web framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://crates.io/crates/branca"&gt;branca&lt;/a&gt; - Implementation of Branca for Authenticated and Encrypted API tokens.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx"&gt;c410-f3r/wtx&lt;/a&gt; - Low and high level HTTP/2 server&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/carllerche/tower-web"&gt;carllerche/tower-web&lt;/a&gt; [&lt;a href="https://crates.io/crates/tower-web"&gt;tower-web&lt;/a&gt;] - A fast, boilerplate free, web framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cot-rs/cot"&gt;Cot&lt;/a&gt; - The Rust web framework for lazy developers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/GildedHonour/frank_jwt"&gt;GildedHonour/frank_jwt&lt;/a&gt; - JSON Web Token implementation.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/gotham-rs/gotham"&gt;Gotham&lt;/a&gt; - A flexible web framework that does not sacrifice safety, security or speed.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/graphul-rs/graphul"&gt;Graphul&lt;/a&gt; - An Express-inspired web framework. &lt;a href="https://crates.io/crates/graphul"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sunng87/handlebars-rust"&gt;handlebars-rust&lt;/a&gt; - an Iron web framework middleware.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hyperium/hyper"&gt;hyperium/hyper&lt;/a&gt; - an HTTP implementation &lt;a href="https://github.com/hyperium/hyper/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/hyperium/hyper/workflows/CI/badge.svg?branch=master" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iron/iron"&gt;Iron&lt;/a&gt; - A middleware-based server framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/graphql-rust/juniper"&gt;Juniper&lt;/a&gt; - GraphQL server library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/miketang84/sapper"&gt;miketang84/sapper&lt;/a&gt; - A lightweight web framework built on async hyper.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/nickel-org/nickel.rs/"&gt;Nickel&lt;/a&gt; - inspired by &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/plabayo/rama"&gt;plabayo/rama&lt;/a&gt; - A modular service framework to move and transform your network packets, can also be used to fingerprint incoming clients&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/poem-web/poem"&gt;poem-web/poem&lt;/a&gt; - A full-featured and easy-to-use web framework. &lt;a href="https://github.com/poem-web/poem/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/poem-web/poem/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rwf2/Rocket"&gt;Rocket&lt;/a&gt; - Rocket is a web framework with a focus on ease-of-use, expressability, and speed&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rustless/rustless"&gt;Rustless&lt;/a&gt; - A REST-like API micro-framework inspired by &lt;a href="https://github.com/ruby-grape/grape"&gt;Grape&lt;/a&gt; and &lt;a href="https://github.com/hyperium/hyper"&gt;Hyper&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/salvo-rs/salvo"&gt;Salvo&lt;/a&gt; - an easy to use webframework base on hyper and tokio. &lt;a href="https://github.com/salvo-rs/salvo/actions"&gt;&lt;img src="https://github.com/salvo-rs/salvo/actions/workflows/release.yml/badge.svg?sanitize=true" alt="build build" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/richerarc/saphir"&gt;Saphir&lt;/a&gt; - A progressive web framework with low-level control, without the pain.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/seanmonstar/warp"&gt;seanmonstar/warp&lt;/a&gt; - A super-easy, composable, web server framework for warp speeds. &lt;a href="https://crates.io/crates/warp"&gt;&lt;img src="https://img.shields.io/crates/v/create-rust-app.svg?sanitize=true" alt="crate" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/spring-rs/spring-rs"&gt;spring-rs&lt;/a&gt; - spring-rs is a application framework written in rust inspired by java's spring-boot.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tiny-http/tiny-http"&gt;tiny-http&lt;/a&gt; - Low level HTTP server library&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tokio-rs/axum"&gt;tokio/axum&lt;/a&gt; - Ergonomic and modular web framework built with Tokio, Tower, and Hyper &lt;a href="https://github.com/tokio-rs/axum/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/tokio-rs/axum/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tomaka/rouille"&gt;tomaka/rouille&lt;/a&gt; - Web framework&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/zino-rs/zino"&gt;Zino&lt;/a&gt; - Next-generation framework for composable applications&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Miscellaneous 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cargonauts-rs/cargonauts"&gt;cargonauts&lt;/a&gt; - A web framework intended for building maintainable, well-factored web apps.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/edezhic/prest"&gt;edezhic/prest&lt;/a&gt; [&lt;a href="https://crates.io/crates/prest"&gt;prest&lt;/a&gt;] - Progressive RESTful framework aimed to simplify fullstack development&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hominee/dyer"&gt;hominee/dyer&lt;/a&gt; [&lt;a href="https://crates.io/crates/dyer"&gt;dyer&lt;/a&gt;] - dyer is designed for reliable, flexible and fast Request-Response based service, including data processing, web-crawling and so on, providing some friendly, flexible, comprehensive features without compromising speed.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/osohq/oso"&gt;osohq/oso&lt;/a&gt; [&lt;a href="https://crates.io/crates/oso"&gt;oso&lt;/a&gt;] - A policy engine for authorization that's embedded in your application. &lt;a href="https://github.com/osohq/oso/actions?query=branch%3Amain+workflow%3ADevelopment"&gt;&lt;img src="https://github.com/osohq/oso/workflows/Development/badge.svg?branch=main" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/pwoolcoc/soup"&gt;pwoolcoc/soup&lt;/a&gt; [&lt;a href="https://crates.io/crates/soup"&gt;soup&lt;/a&gt;] - A library similar to Python's BeautifulSoup, designed to enable quick and easy manipulation and querying of HTML documents. &lt;a href="https://gitlab.com/pwoolcoc/soup/badges/master/pipeline.svg"&gt;&lt;img src="https://gitlab.com/pwoolcoc/soup/badges/master/pipeline.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://git.sr.ht/~pyrossh/rust-embed"&gt;pyrossh/rust-embed&lt;/a&gt; [&lt;a href="https://crates.io/crates/rust-embed"&gt;rust-embed&lt;/a&gt;] - A macro to embed static assets into the rust binary&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/thewh1teagle/rookie"&gt;rookie&lt;/a&gt; - Load cookies from any browser on any platform. &lt;img src="https://img.shields.io/crates/v/rookie.svg?sanitize=true" alt="crates.io" /&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-scraper/scraper"&gt;rust-scraper/scraper&lt;/a&gt; [&lt;a href="https://crates.io/crates/scraper"&gt;scraper&lt;/a&gt;] - HTML parsing and querying with CSS selectors. &lt;a href="https://github.com/rust-scraper/scraper/actions"&gt;&lt;img src="https://github.com/rust-scraper/scraper/actions/workflows/test.yml/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/serenity-rs/serenity"&gt;serenity-rs/serenity&lt;/a&gt; [&lt;a href="https://crates.io/crates/serenity"&gt;serenity&lt;/a&gt;] - A library for the Discord API&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/softprops/openapi"&gt;softprops/openapi&lt;/a&gt; - A library for processing openapi spec files&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/svix/svix-webhooks"&gt;svix/svix-webhooks&lt;/a&gt; [&lt;a href="https://crates.io/crates/svix"&gt;svix&lt;/a&gt;] - A library for sending webhooks and verifying signatures.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com/SnejUgal/tbot"&gt;tbot&lt;/a&gt; [&lt;a href="https://crates.io/crates/tbot"&gt;tbot&lt;/a&gt;] - Make cool Telegram bots easily &lt;a href="https://gitlab.com/SnejUgal/tbot/-/commits/master"&gt;&lt;img src="https://gitlab.com/SnejUgal/tbot/badges/master/pipeline.svg?sanitize=true" alt="pipeline status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/teloxide/teloxide/"&gt;teloxide/teloxide&lt;/a&gt; - An elegant Telegram bots framework &lt;a href="https://github.com/teloxide/teloxide/actions"&gt;&lt;img src="https://github.com/teloxide/teloxide/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tu6ge/valitron"&gt;tu6ge/valitron&lt;/a&gt; [&lt;a href="https://crates.io/crates/valitron"&gt;valitron&lt;/a&gt;] - An ergonomic, functional and configurable validator&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/utkarshkukreti/select.rs"&gt;utkarshkukreti/select.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/select"&gt;select&lt;/a&gt;] - A library to extract useful data from HTML documents, suitable for web scraping.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/juhaku/utoipa"&gt;Utoipa&lt;/a&gt; - Simple, Fast, Code first and Compile time generated OpenAPI documentation &lt;a href="https://crates.io/crates/utoipa"&gt;&lt;img src="https://img.shields.io/crates/v/utoipa.svg?label=crates.io&amp;amp;color=orange&amp;amp;logo=rust" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/juhaku/utoipa/actions/workflows/build.yaml"&gt;&lt;img src="https://github.com/juhaku/utoipa/actions/workflows/build.yaml/badge.svg?sanitize=true" alt="Utoipa build" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ProbablyClem/utoipauto"&gt;Utoipauto&lt;/a&gt; - Rust Macros to automate the addition of Paths/Schemas to Utoipa &lt;a href="https://crates.io/crates/utoipauto"&gt;&lt;img src="https://img.shields.io/crates/v/utoipauto.svg?label=crates.io&amp;amp;color=orange&amp;amp;logo=rust" alt="crates.io" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Reverse Proxy 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/sozu-proxy/sozu"&gt;sozu-proxy/sozu&lt;/a&gt; [&lt;a href="https://crates.io/crates/sozu"&gt;sozu&lt;/a&gt;] - A HTTP reverse proxy. &lt;a href="https://github.com/sozu-proxy/sozu/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/sozu-proxy/sozu/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Static Site Generators 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cobalt-org/cobalt.rs"&gt;cobalt-org/cobalt.rs&lt;/a&gt; - Static site generator &lt;a href="https://dev.azure.com/cobalt-org/cobalt-org/_build?definitionId=2"&gt;&lt;img src="https://dev.azure.com/cobalt-org/cobalt-org/_apis/build/status/cobalt.rs?branchName=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/FuGangqiang/mdblog.rs"&gt;FuGangqiang/mdblog.rs&lt;/a&gt; [&lt;a href="https://crates.io/crates/mdblog"&gt;mdblog&lt;/a&gt;] - Static site generator from markdown files.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/getzola/zola"&gt;getzola/zola&lt;/a&gt; [&lt;a href="https://www.getzola.org/"&gt;zola&lt;/a&gt;] - An opinionated static site generator with everything built-in. &lt;a href="https://dev.azure.com/getzola/zola/_build"&gt;&lt;img src="https://dev.azure.com/getzola/zola/_apis/build/status/getzola.zola?branchName=master" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/grego/blades"&gt;grego/blades&lt;/a&gt; [&lt;a href="https://www.getblades.org/"&gt;blades&lt;/a&gt;] - Blazing fast dead simple static site generator.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/leven-the-blog/leven"&gt;leven-the-blog/leven&lt;/a&gt; [&lt;a href="https://crates.io/crates/leven"&gt;leven&lt;/a&gt;] - A simple, parallelized blog generator.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rochacbruno/marmite/"&gt;rochacbruno/marmite&lt;/a&gt; [&lt;a href="https://marmite.blog/"&gt;Marmite&lt;/a&gt;] - Zero config blog generator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/rfc6455/"&gt;WebSocket&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx"&gt;c410-f3r/wtx&lt;/a&gt; - Client and server with encryption support.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/housleyjk/ws-rs"&gt;housleyjk/ws-rs&lt;/a&gt; - lightweight, event-driven WebSockets&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/iddm/urlshortener-rs"&gt;iddm/urlshortener-rs&lt;/a&gt; - A very simple urlshortener library. &lt;a href="https://github.com/iddm/urlshortener-rs/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/iddm/urlshortener-rs/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/urlshortener"&gt;&lt;img src="https://img.shields.io/crates/v/urlshortener.svg?sanitize=true" alt="Crates badge" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/graphform/ratchet"&gt;ratchet&lt;/a&gt; [&lt;a href="https://crates.io/crates/ratchet_rs"&gt;ratchet_rs&lt;/a&gt;] - Ratchet is a fast, lightweight and fully asynchronous implementation of the WebSocket protocol with support for extensions and Deflate.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/websockets-rs/rust-websocket"&gt;rust-websocket&lt;/a&gt; - A framework for dealing with WebSocket connections (both clients and servers)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/snapview/tungstenite-rs"&gt;snapview/tungstenite-rs&lt;/a&gt; - Lightweight stream-based WebSocket implementation.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vi/websocat"&gt;vi/websocat&lt;/a&gt; - CLI for interacting with WebSockets, with functionality of Netcat, Curl and Socat.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Registries&lt;/h2&gt; 
&lt;p&gt;A registry allows you to publish your Rust libraries as crate packages, to share them with others publicly and privately.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cenotelie/cratery"&gt;cenotelie/cratery&lt;/a&gt; - A lightweight private cargo registry with batteries included, built for organisations, including features similar to &lt;a href="https://docs.rs"&gt;docs.rs&lt;/a&gt; and &lt;a href="https://deps.rs"&gt;deps.rs&lt;/a&gt;. &lt;a href="https://github.com/cenotelie/cratery/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/cenotelie/cratery/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloudsmith.com/product/formats/cargo-registry"&gt;Cloudsmith &lt;span&gt;üí≤&lt;/span&gt;&lt;/a&gt; - A fully managed package management SaaS, with first-class support for public and private Cargo/Rust registries (plus many others). Has a generous free-tier and is also completely free for open-source.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io"&gt;Crates&lt;/a&gt; - The official public registry for Rust/Cargo.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.repoflow.io"&gt;RepoFlow&lt;/a&gt; - A simple and modern repository platform that can host Rust crate repositories and proxy crates.io. Also supports other package types like Docker, PyPI, Maven, npm, and RubyGems. Available as a cloud service or self-hosted.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/w4/chartered"&gt;w4/chartered&lt;/a&gt; - A private, authenticated, permissioned Cargo registry &lt;a href="https://github.com/w4/chartered/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/w4/chartered/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/rustaceans/make-it-mandatory-a-brief-history-of-rust-part-1-805459c60c6b"&gt;A Brief History of Rust. Part 1&lt;/a&gt; - From a developer's pursuit of software stability to a project that nearly destabilized its creator. &lt;a href="https://medium.com/rustaceans/make-it-mandatory-a-brief-history-of-rust-part-2-981d61451aa5"&gt;Part 2&lt;/a&gt;. &lt;a href="https://medium.com/rustaceans/make-it-mandatory-a-brief-history-of-rust-part-2-b8c0f7a7e781?sk=c0e7fe5fde11a62edc23f284f125aa18"&gt;Part 3&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Benchmarks 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/c410-f3r/wtx-bench"&gt;c410-f3r/wtx-bench&lt;/a&gt; - Web benchmarks&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/TeXitoi/benchmarksgame-rs"&gt;TeXitoi/benchmarksgame-rs&lt;/a&gt; - Implementations for the &lt;a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/"&gt;The Computer Language Benchmarks Game&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Decks &amp;amp; Presentations 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://speakerdeck.com/jvns/learning-systems-programming-with-rust"&gt;Learning systems programming with Rust&lt;/a&gt; - Presented by &lt;a href="https://twitter.com/@b0rk"&gt;Julia Evans&lt;/a&gt; @ Rustconf 2016.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lO1z-7cuRYI"&gt;Rust: Hack Without Fear!&lt;/a&gt; - Presented by &lt;a href="https://github.com/nikomatsakis"&gt;Nicholas Matsakis&lt;/a&gt; @ C++Now 2018&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=t4CyEKb-ywA"&gt;Shipping a Solid Rust Crate&lt;/a&gt; - Presented by &lt;a href="https://github.com/mgattozzi"&gt;Michael Gattozzi&lt;/a&gt; @ RustConf 2017&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Learning 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://rust-exercises.com"&gt;100 Exercises To Learn Rust&lt;/a&gt; - Learn Rust through 100 hands-on exercises, covering syntax, types, and more&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cognitive-engineering-lab/aquascope"&gt;Aquascope&lt;/a&gt; - Interactive visualizations of Rust at compile-time and run-time&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jamesmunns/awesome-rust-streaming"&gt;Awesome Rust Streaming&lt;/a&gt; - A community curated list of livestreams.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rustbeginners.github.io/awesome-rust-mentors/"&gt;awesome-rust-mentors&lt;/a&gt; - A list of helpful mentors willing to take mentees and educate them about Rust and programming.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="http://cis198-2016s.github.io/schedule/"&gt;CIS 198: Rust Programming&lt;/a&gt; - University of Pennsylvania's Comp Sci Rust Programming Course&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://app.codecrafters.io/tracks/rust"&gt;CodeCrafters.io&lt;/a&gt; - Build your own Redis, Git, Docker, or SQLite&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://google.github.io/comprehensive-rust/"&gt;Comprehensive Rust ü¶Ä&lt;/a&gt; - A 3-day course on Rust Fundamentals plus 1-day courses on Android, Bare-metal Rust, and Concurrency. Available in English, &lt;a href="https://google.github.io/comprehensive-rust/pt-BR/"&gt;Brazilian Portuguese&lt;/a&gt;, and &lt;a href="https://google.github.io/comprehensive-rust/ko/"&gt;Korean&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Dhghomon/easy_rust"&gt;Easy Rust&lt;/a&gt; - Learn Rust in easy English.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://exercism.org/tracks/rust"&gt;exercism.org&lt;/a&gt; - programming exercises that help you learn new concepts in Rust.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://pragprog.com/titles/hwrust/hands-on-rust/"&gt;Hands-on Rust&lt;/a&gt; - A hands-on guide to learning Rust by making games - by &lt;a href="https://github.com/thebracket/"&gt;Herbert Wolverson&lt;/a&gt; (paid)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/mre/idiomatic-rust"&gt;Idiomatic Rust&lt;/a&gt; - A peer-reviewed collection of articles/talks/repos which teach idiomatic Rust.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://labex.io/skilltrees/rust"&gt;LabEx Rust Skill Tree&lt;/a&gt; - A structured Rust learning path with hands-on labs, designed for beginners to master Rust step by step.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rust-lang.guide/"&gt;Learn Rust 101&lt;/a&gt; - A guide to aid you in your journey of becoming a Rustacean (Rust developer)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/cuppar/rtd"&gt;Learn Rust by 500 lines code&lt;/a&gt; - Learn Rust by 500 lines code, build a Todo Cli Application from scratch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rust-unofficial.github.io/too-many-lists/"&gt;Learning Rust With Entirely Too Many Linked Lists&lt;/a&gt; - in-depth exploration of Rust's memory management rules, through implementing a few different types of list structures.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://lborb.github.io/book/"&gt;Little Book of Rust Books&lt;/a&gt; - Curated list of rust books and how-tos.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://hackr.io/tutorials/learn-rust"&gt;Programming Community Curated Resources for Learning Rust&lt;/a&gt; - A list of recommended resources voted by the programming community.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.manning.com/books/refactoring-to-rust"&gt;Refactoring to Rust&lt;/a&gt; - A book that introduces to Rust language.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://doc.rust-lang.org/rust-by-example/"&gt;Rust by Example&lt;/a&gt; - a collection of runnable examples that illustrate various Rust concepts and standard libraries.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rust-lang-nursery.github.io/rust-cookbook/"&gt;Rust Cookbook&lt;/a&gt; - A collection of simple examples that demonstrate good practices to accomplish common programming tasks, using the crates of the Rust ecosystem.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ad-si/Rust-Flashcards"&gt;Rust Flashcards&lt;/a&gt; - Over 550 flashcards to learn Rust from first principles.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://overexact.com/rust-for-professionals/"&gt;Rust for professionals&lt;/a&gt; - A quick introduction to Rust for experienced software developers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/warycat/rustgym"&gt;Rust Gym&lt;/a&gt; - A big collection of coding interview problems solved in Rust.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.manning.com/books/rust-in-action"&gt;Rust in Action&lt;/a&gt; - A hands-on guide to systems programming with Rust by &lt;a href="https://github.com/timClicks"&gt;Tim McNamara&lt;/a&gt; (paid)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.manning.com/livevideo/rust-in-motion?a_aid=cnichols&amp;amp;a_bid=6a993c2e"&gt;Rust in Motion&lt;/a&gt; - A video series by &lt;a href="https://github.com/carols10cents"&gt;Carol Nichols&lt;/a&gt; and &lt;a href="https://github.com/shepmaster"&gt;Jake Goulding&lt;/a&gt; (paid)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://cheats.rs/"&gt;Rust Language Cheat Sheet&lt;/a&gt; - Rust Language Cheat Sheet&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rust-tieng-viet.github.io/"&gt;Rust Ti·∫øng Vi·ªát&lt;/a&gt; - Learn Rust in Vietnamese.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/jondot/rust-how-do-i-start"&gt;rust-how-do-i-start&lt;/a&gt; - A repo dedicated to answering the question: "So, Rust. How do I &lt;em&gt;start&lt;/em&gt;?". A beginner only hand-picked resources and learning track.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ctjhoa/rust-learning"&gt;rust-learning&lt;/a&gt; - A collection of useful resources to learn Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.rustfinity.com"&gt;Rustfinity&lt;/a&gt; - Interactive platform for practicing Rust through hands-on exercises and challenges&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/rust-lang/rustlings"&gt;Rustlings&lt;/a&gt; - small exercises to get you used to reading and writing Rust code&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AbdesamedBendjeddou/Rusty-CS"&gt;Rusty CS&lt;/a&gt; - A Computer Science Curriculum that helps practice the acquired academic knowledge in Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/brson/stdx"&gt;stdx&lt;/a&gt; - Learn these crates first as an extension to std&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://tourofrust.com"&gt;Tour of Rust&lt;/a&gt; - This is meant to be an interactive step by step guide through the features of the Rust programming language.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Podcasts 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://newrustacean.com"&gt;New Rustacean&lt;/a&gt; - A podcast about learning Rust&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://rustacean-station.org/"&gt;Rustacean Station&lt;/a&gt; - A community project for creating podcast content for Rust&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-unofficial/patterns"&gt;Rust Design Patterns&lt;/a&gt; - A catalogue of Rust design patterns, anti-patterns and idioms&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://aturon.github.io/"&gt;Rust Guidelines&lt;/a&gt; - Aaron Turon's blog posts on rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.manning.com/books/rust-servers-services-and-apps"&gt;Rust Servers, Services and Apps - MEAP&lt;/a&gt; - Build backend servers, services, and front-ends in Rust to get fast, reliable, and maintainable applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/"&gt;Rust Subreddit&lt;/a&gt; - A subreddit(forum) where rust related questions, articles and resources are posted and discussed&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sger/RustBooks"&gt;RustBooks&lt;/a&gt; - list of RustBooks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLE7tQUdRKcybdIw61JpCoo89i4pWU5f_t"&gt;RustCamp 2015 Talks&lt;/a&gt; - Recorded talks from RustCamp 2015&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustviz/rustviz"&gt;RustViz&lt;/a&gt; - generates visualizations from simple Rust programs to assist users in better understanding the Rust Lifetime and Borrowing mechanism.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jf_ddGnum_4"&gt;Watch Jon Gjengset Implement BitTorrent in Rust&lt;/a&gt; - Implementing (part of) a BitTorrent client in Rust&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://creativecommons.org/publicdomain/zero/1.0/"&gt;&lt;img src="https://licensebuttons.net/p/zero/1.0/88x31.png" alt="CC0" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>