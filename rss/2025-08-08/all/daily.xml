<rss version="2.0">
  <channel>
    <title>GitHub All Languages Daily Trending</title>
    <description>Daily Trending of All Languages in GitHub</description>
    <pubDate>Thu, 07 Aug 2025 01:29:38 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>themactep/thingino-firmware</title>
      <link>https://github.com/themactep/thingino-firmware</link>
      <description>&lt;p&gt;Open-source firmware for Ingenic SoC IP cameras&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Thingino&lt;/h2&gt; 
&lt;p&gt;Thingino is an open-source firmware for Ingenic SoC IP cameras.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/6fe68e13-eb49-4c33-8836-af1e97bf8b4e" alt="Thingino Web UI"&gt;&lt;/p&gt; 
&lt;h3&gt;Supported Hardware&lt;/h3&gt; 
&lt;p&gt;Please find &lt;a href="https://raw.githubusercontent.com/themactep/thingino-firmware/master/docs/supported_hardware.md"&gt;the full list of supported cameras&lt;/a&gt; in a separate document. Visit &lt;a href="https://thingino.com/"&gt;our website&lt;/a&gt; for an illustrated version of the list.&lt;/p&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/themactep/thingino-firmware
cd thingino-firmware
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read &lt;a href="https://github.com/themactep/thingino-firmware/wiki/Building-from-sources"&gt;Building from sources&lt;/a&gt; article for more info.&lt;/p&gt; 
&lt;h3&gt;Resources&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://thingino.com/"&gt;Project Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/themactep/thingino-firmware/wiki"&gt;Project Wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Buildroot Manual &lt;a href="https://buildroot.org/downloads/manual/manual.html"&gt;HTML&lt;/a&gt; &lt;a href="https://nightly.buildroot.org/manual.pdf"&gt;PDF&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/xDmqS944zr"&gt;Discord channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://t.me/thingino"&gt;Telegram group&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;GitHub CI Status&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/themactep/thingino-firmware/actions/workflows/toolchain.yaml"&gt;&lt;img src="https://github.com/themactep/thingino-firmware/actions/workflows/toolchain-x86_64.yaml/badge.svg?sanitize=true" alt="toolchain-x86_64"&gt;&lt;/a&gt; &lt;a href="https://github.com/themactep/thingino-firmware/actions/workflows/firmware.yaml"&gt;&lt;img src="https://github.com/themactep/thingino-firmware/actions/workflows/firmware-x86_64.yaml/badge.svg?sanitize=true" alt="firmware-x86_64"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dstotijn/hetty</title>
      <link>https://github.com/dstotijn/hetty</link>
      <description>&lt;p&gt;An HTTP toolkit for security research.&lt;/p&gt;&lt;hr&gt;&lt;img src="https://user-images.githubusercontent.com/983924/156430531-6193e187-7400-436b-81c6-f86862783ea5.svg#gh-light-mode-only" width="240"&gt; 
&lt;img src="https://user-images.githubusercontent.com/983924/156430660-9d5bd555-dcfd-47e2-ba70-54294c20c1b4.svg#gh-dark-mode-only" width="240"&gt; 
&lt;p&gt;&lt;a href="https://github.com/dstotijn/hetty/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/dstotijn/hetty?color=25ae8f" alt="Latest GitHub release"&gt;&lt;/a&gt; &lt;a href="https://github.com/dstotijn/hetty/actions/workflows/build-test.yml"&gt;&lt;img src="https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fdstotijn%2Fhetty%2Fbadge%3Fref%3Dmain&amp;amp;label=build&amp;amp;color=24ae8f" alt="Build Status"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/downloads/dstotijn/hetty/total?color=25ae8f" alt="GitHub download count"&gt; &lt;a href="https://github.com/dstotijn/hetty/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/dstotijn/hetty?color=25ae8f" alt="GitHub"&gt;&lt;/a&gt; &lt;a href="https://hetty.xyz/"&gt;&lt;img src="https://img.shields.io/badge/hetty-docs-25ae8f" alt="Documentation"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Hetty&lt;/strong&gt; is an HTTP toolkit for security research. It aims to become an open source alternative to commercial software like Burp Suite Pro, with powerful features tailored to the needs of the infosec and bug bounty community.&lt;/p&gt; 
&lt;img src="https://hetty.xyz/img/hero.png" width="907" alt="Hetty proxy logs (screenshot)"&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Machine-in-the-middle (MITM) HTTP proxy, with logs and advanced search&lt;/li&gt; 
 &lt;li&gt;HTTP client for manually creating/editing requests, and replay proxied requests&lt;/li&gt; 
 &lt;li&gt;Intercept requests and responses for manual review (edit, send/receive, cancel)&lt;/li&gt; 
 &lt;li&gt;Scope support, to help keep work organized&lt;/li&gt; 
 &lt;li&gt;Easy-to-use web based admin interface&lt;/li&gt; 
 &lt;li&gt;Project based database storage, to help keep work organized&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;üë∑‚Äç‚ôÇÔ∏è Hetty is under active development. Check the &lt;a href="https://github.com/dstotijn/hetty/projects/1"&gt;backlog&lt;/a&gt; for the current status.&lt;/p&gt; 
&lt;p&gt;üì£ Are you pen testing professionaly in a team? I would love to hear your thoughts on tooling via &lt;a href="https://forms.gle/36jtgNc3TJ2imi5A8"&gt;this 5 minute survey&lt;/a&gt;. Thank you!&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;üí° The &lt;a href="https://hetty.xyz/docs/getting-started"&gt;Getting started&lt;/a&gt; doc has more detailed install and usage instructions.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;The quickest way to install and update Hetty is via a package manager:&lt;/p&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install hettysoft/tap/hetty
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo snap install hetty
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;scoop bucket add hettysoft https://github.com/hettysoft/scoop-bucket.git
scoop install hettysoft/hetty
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Other&lt;/h4&gt; 
&lt;p&gt;Alternatively, you can &lt;a href="https://github.com/dstotijn/hetty/releases/latest"&gt;download the latest release from GitHub&lt;/a&gt; for your OS and architecture, and move the binary to a directory in your &lt;code&gt;$PATH&lt;/code&gt;. If your OS is not available for one of the package managers or not listed in the GitHub releases, you can compile from source &lt;em&gt;(link coming soon)&lt;/em&gt;.&lt;/p&gt; 
&lt;h4&gt;Docker&lt;/h4&gt; 
&lt;p&gt;Docker images are distributed via &lt;a href="https://github.com/dstotijn/hetty/pkgs/container/hetty"&gt;GitHub's Container registry&lt;/a&gt; and &lt;a href="https://hub.docker.com/r/dstotijn/hetty"&gt;Docker Hub&lt;/a&gt;. To run Hetty via with a volume for database and certificate storage, and port 8080 forwarded:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run -v $HOME/.hetty:/root/.hetty -p 8080:8080 \
  ghcr.io/dstotijn/hetty:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;Once installed, start Hetty via:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;hetty
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;üí° Read the &lt;a href="https://hetty.xyz/docs/getting-started"&gt;Getting started&lt;/a&gt; doc for more details.&lt;/p&gt; 
&lt;p&gt;To list all available options, run: &lt;code&gt;hetty --help&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ hetty --help

Usage:
    hetty [flags] [subcommand] [flags]

Runs an HTTP server with (MITM) proxy, GraphQL service, and a web based admin interface.

Options:
    --cert         Path to root CA certificate. Creates file if it doesn't exist. (Default: "~/.hetty/hetty_cert.pem")
    --key          Path to root CA private key. Creates file if it doesn't exist. (Default: "~/.hetty/hetty_key.pem")
    --db           Database file path. Creates file if it doesn't exist. (Default: "~/.hetty/hetty.db")
    --addr         TCP address for HTTP server to listen on, in the form \"host:port\". (Default: ":8080")
    --chrome       Launch Chrome with proxy settings applied and certificate errors ignored. (Default: false)
    --verbose      Enable verbose logging.
    --json         Encode logs as JSON, instead of pretty/human readable output.
    --version, -v  Output version.
    --help, -h     Output this usage text.

Subcommands:
    - cert  Certificate management

Run `hetty &amp;lt;subcommand&amp;gt; --help` for subcommand specific usage instructions.

Visit https://hetty.xyz to learn more about Hetty.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;üìñ &lt;a href="https://hetty.xyz/docs"&gt;Read the docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Use &lt;a href="https://github.com/dstotijn/hetty/issues"&gt;issues&lt;/a&gt; for bug reports and feature requests, and &lt;a href="https://github.com/dstotijn/hetty/discussions"&gt;discussions&lt;/a&gt; for questions and troubleshooting.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;üí¨ &lt;a href="https://discord.gg/3HVsj5pTFP"&gt;Join the Hetty Discord server&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Want to contribute? Great! Please check the &lt;a href="https://raw.githubusercontent.com/dstotijn/hetty/main/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Thanks to the &lt;a href="https://www.hacker101.com/discord"&gt;Hacker101 community on Discord&lt;/a&gt; for the encouragement and early feedback.&lt;/li&gt; 
 &lt;li&gt;The font used in the logo and admin interface is &lt;a href="https://www.jetbrains.com/lp/mono/"&gt;JetBrains Mono&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;üíñ Are you enjoying Hetty? You can &lt;a href="https://github.com/sponsors/dstotijn"&gt;sponsor me&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/dstotijn/hetty/main/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;¬© 2019‚Äì2025 Hetty Software&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openssl/openssl</title>
      <link>https://github.com/openssl/openssl</link>
      <description>&lt;p&gt;TLS/SSL and crypto library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the OpenSSL Project&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://www.openssl.org" title="OpenSSL Homepage"&gt;&lt;img src="https://raw.githubusercontent.com/openssl/openssl/master/doc/images/openssl.svg?sanitize=true" alt="openssl logo" title="OpenSSL Logo"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/openssl/openssl/actions/workflows/ci.yml" title="GitHub Actions CI"&gt;&lt;img src="https://github.com/openssl/openssl/workflows/GitHub%20CI/badge.svg?sanitize=true" alt="github actions ci badge" title="GitHub Actions CI Status"&gt;&lt;/a&gt; &lt;a href="https://github.com/openssl/openssl/actions/workflows/os-zoo.yml"&gt;&lt;img src="https://github.com/openssl/openssl/actions/workflows/os-zoo.yml/badge.svg?sanitize=true" alt="Nightly OS Zoo ci badge"&gt;&lt;/a&gt; &lt;a href="https://github.com/openssl/openssl/actions/workflows/provider-compatibility.yml"&gt;&lt;img src="https://github.com/openssl/openssl/actions/workflows/provider-compatibility.yml/badge.svg?sanitize=true" alt="Provider Compatibility"&gt;&lt;/a&gt; &lt;a href="https://github.com/openssl/openssl/actions/workflows/run_quic_interop.yml"&gt;&lt;img src="https://github.com/openssl/openssl/actions/workflows/run_quic_interop.yml/badge.svg?sanitize=true" alt="Quic Interop"&gt;&lt;/a&gt; &lt;a href="https://github.com/openssl/openssl/actions/workflows/run-checker-daily.yml"&gt;&lt;img src="https://github.com/openssl/openssl/actions/workflows/run-checker-daily.yml/badge.svg?sanitize=true" alt="Daily checks"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenSSL is a robust, commercial-grade, full-featured Open Source Toolkit for the TLS (formerly SSL), DTLS and QUIC protocols.&lt;/p&gt; 
&lt;p&gt;The protocol implementations are based on a full-strength general purpose cryptographic library, which can also be used stand-alone. Also included is a cryptographic module validated to conform with FIPS standards.&lt;/p&gt; 
&lt;p&gt;OpenSSL is descended from the SSLeay library developed by Eric A. Young and Tim J. Hudson.&lt;/p&gt; 
&lt;p&gt;The official Home Page of the OpenSSL Project is &lt;a href="https://www.openssl.org" title="OpenSSL Homepage"&gt;www.openssl.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/#download"&gt;Download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/#build-and-install"&gt;Build and Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/#support"&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/#legalities"&gt;Legalities&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;The OpenSSL toolkit includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libssl&lt;/strong&gt; an implementation of all TLS protocol versions up to TLSv1.3 (&lt;a href="https://tools.ietf.org/html/rfc8446"&gt;RFC 8446&lt;/a&gt;), DTLS protocol versions up to DTLSv1.2 (&lt;a href="https://tools.ietf.org/html/rfc6347"&gt;RFC 6347&lt;/a&gt;) and the QUIC version 1 protocol (&lt;a href="https://tools.ietf.org/html/rfc9000"&gt;RFC 9000&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libcrypto&lt;/strong&gt; a full-strength general purpose cryptographic library. It constitutes the basis of the TLS implementation, but can also be used independently.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;openssl&lt;/strong&gt; the OpenSSL command line tool, a swiss army knife for cryptographic tasks, testing and analyzing. It can be used for&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;creation of key parameters&lt;/li&gt; 
   &lt;li&gt;creation of X.509 certificates, CSRs and CRLs&lt;/li&gt; 
   &lt;li&gt;calculation of message digests&lt;/li&gt; 
   &lt;li&gt;encryption and decryption&lt;/li&gt; 
   &lt;li&gt;SSL/TLS/DTLS and client and server tests&lt;/li&gt; 
   &lt;li&gt;QUIC client tests&lt;/li&gt; 
   &lt;li&gt;handling of S/MIME signed or encrypted mail&lt;/li&gt; 
   &lt;li&gt;and more...&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Download&lt;/h1&gt; 
&lt;h2&gt;For Production Use&lt;/h2&gt; 
&lt;p&gt;Source code tarballs of the official releases can be downloaded from &lt;a href="https://openssl-library.org/source/"&gt;openssl-library.org/source/&lt;/a&gt;. The OpenSSL project does not distribute the toolkit in binary form.&lt;/p&gt; 
&lt;p&gt;However, for a large variety of operating systems precompiled versions of the OpenSSL toolkit are available. In particular, on Linux and other Unix operating systems, it is normally recommended to link against the precompiled shared libraries provided by the distributor or vendor.&lt;/p&gt; 
&lt;p&gt;We also maintain a list of third parties that produce OpenSSL binaries for various Operating Systems (including Windows) on the &lt;a href="https://github.com/openssl/openssl/wiki/Binaries" title="List of third party OpenSSL binaries"&gt;Binaries&lt;/a&gt; page on our wiki.&lt;/p&gt; 
&lt;h2&gt;For Testing and Development&lt;/h2&gt; 
&lt;p&gt;Although testing and development could in theory also be done using the source tarballs, having a local copy of the git repository with the entire project history gives you much more insight into the code base.&lt;/p&gt; 
&lt;p&gt;The main OpenSSL Git repository is private. There is a public GitHub mirror of it at &lt;a href="https://github.com/openssl/openssl" title="OpenSSL GitHub Mirror"&gt;github.com/openssl/openssl&lt;/a&gt;, which is updated automatically from the former on every commit.&lt;/p&gt; 
&lt;p&gt;A local copy of the Git repository can be obtained by cloning it from the GitHub mirror using&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/openssl/openssl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you intend to contribute to OpenSSL, either to fix bugs or contribute new features, you need to fork the GitHub mirror and clone your public fork instead.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/yourname/openssl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is necessary because all development of OpenSSL nowadays is done via GitHub pull requests. For more details, see &lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/#contributing"&gt;Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Build and Install&lt;/h1&gt; 
&lt;p&gt;After obtaining the Source, have a look at the &lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/INSTALL.md"&gt;INSTALL&lt;/a&gt; file for detailed instructions about building and installing OpenSSL. For some platforms, the installation instructions are amended by a platform specific document.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/NOTES-UNIX.md"&gt;Notes for UNIX-like platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/NOTES-ANDROID.md"&gt;Notes for Android platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/NOTES-WINDOWS.md"&gt;Notes for Windows platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/NOTES-DJGPP.md"&gt;Notes for the DOS platform with DJGPP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VMS.md"&gt;Notes for the OpenVMS platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/NOTES-PERL.md"&gt;Notes on Perl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VALGRIND.md"&gt;Notes on Valgrind&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Specific notes on upgrading to OpenSSL 3.x from previous versions can be found in the &lt;a href="https://docs.openssl.org/master/man7/ossl-guide-migration" title="OpenSSL Migration Guide"&gt;ossl-guide-migration(7ossl)&lt;/a&gt; manual page.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;h2&gt;README Files&lt;/h2&gt; 
&lt;p&gt;There are some README.md files in the top level of the source distribution containing additional information on specific topics.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/README-QUIC.md"&gt;Information about the OpenSSL QUIC protocol implementation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/README-PROVIDERS.md"&gt;Information about the OpenSSL Provider architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/README-FIPS.md"&gt;Information about using the OpenSSL FIPS validated module&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/README-ENGINES.md"&gt;Information about the legacy OpenSSL Engine architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The OpenSSL Guide&lt;/h2&gt; 
&lt;p&gt;There are some tutorial and introductory pages on some important OpenSSL topics within the &lt;a href="https://docs.openssl.org/master/man7/ossl-guide-introduction" title="An introduction to OpenSSL"&gt;OpenSSL Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual Pages&lt;/h2&gt; 
&lt;p&gt;The manual pages for the master branch and all current stable releases are available online.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.openssl.org/master/"&gt;OpenSSL master&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.openssl.org/3.5/"&gt;OpenSSL 3.5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.openssl.org/3.4/"&gt;OpenSSL 3.4&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.openssl.org/3.3/"&gt;OpenSSL 3.3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.openssl.org/3.2/"&gt;OpenSSL 3.2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.openssl.org/3.0/"&gt;OpenSSL 3.0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demos&lt;/h2&gt; 
&lt;p&gt;There are numerous source code demos for using various OpenSSL capabilities in the &lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/demos"&gt;demos subfolder&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Wiki&lt;/h2&gt; 
&lt;p&gt;There is a &lt;a href="https://github.com/openssl/openssl/wiki" title="OpenSSL Wiki"&gt;GitHub Wiki&lt;/a&gt; which is currently not very active.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;OpenSSL is licensed under the Apache License 2.0, which means that you are free to get and use it for commercial and non-commercial purposes as long as you fulfill its conditions.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/LICENSE.txt"&gt;LICENSE.txt&lt;/a&gt; file for more details.&lt;/p&gt; 
&lt;h1&gt;Support&lt;/h1&gt; 
&lt;p&gt;There are various ways to get in touch. The correct channel depends on your requirement. See the &lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/SUPPORT.md"&gt;SUPPORT&lt;/a&gt; file for more details.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;If you are interested and willing to contribute to the OpenSSL project, please take a look at the &lt;a href="https://raw.githubusercontent.com/openssl/openssl/master/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; 
&lt;h1&gt;Legalities&lt;/h1&gt; 
&lt;p&gt;A number of nations restrict the use or export of cryptography. If you are potentially subject to such restrictions, you should seek legal advice before attempting to develop or distribute cryptographic code.&lt;/p&gt; 
&lt;h1&gt;Copyright&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 1998-2025 The OpenSSL Project Authors&lt;/p&gt; 
&lt;p&gt;Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson&lt;/p&gt; 
&lt;p&gt;All rights reserved.&lt;/p&gt; 
&lt;!-- Links  --&gt; 
&lt;!-- Logos and Badges --&gt;</description>
    </item>
    
    <item>
      <title>openai/openai-cookbook</title>
      <link>https://github.com/openai/openai-cookbook</link>
      <description>&lt;p&gt;Examples and guides for using the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;a href="https://cookbook.openai.com" target="_blank"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="/images/openai-cookbook-white.png" style="max-width: 100%; width: 400px; margin-bottom: 20px"&gt; 
  &lt;img alt="OpenAI Cookbook Logo" src="https://raw.githubusercontent.com/openai/openai-cookbook/main/images/openai-cookbook.png" width="400px"&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h3&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ú® Navigate at &lt;a href="https://cookbook.openai.com"&gt;cookbook.openai.com&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Example code and guides for accomplishing common tasks with the &lt;a href="https://platform.openai.com/docs/introduction"&gt;OpenAI API&lt;/a&gt;. To run these examples, you'll need an OpenAI account and associated API key (&lt;a href="https://platform.openai.com/signup"&gt;create a free account here&lt;/a&gt;). Set an environment variable called &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; with your API key. Alternatively, in most IDEs such as Visual Studio Code, you can create an &lt;code&gt;.env&lt;/code&gt; file at the root of your repo containing &lt;code&gt;OPENAI_API_KEY=&amp;lt;your API key&amp;gt;&lt;/code&gt;, which will be picked up by the notebooks.&lt;/p&gt; 
&lt;p&gt;Most code examples are written in Python, though the concepts can be applied in any language.&lt;/p&gt; 
&lt;p&gt;For other useful tools, guides and courses, check out these &lt;a href="https://cookbook.openai.com/related_resources"&gt;related resources from around the web&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prisma/prisma</title>
      <link>https://github.com/prisma/prisma</link>
      <description>&lt;p&gt;Next-generation ORM for Node.js &amp; TypeScript | PostgreSQL, MySQL, MariaDB, SQL Server, SQLite, MongoDB and CockroachDB&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://i.imgur.com/h6UIYTu.png" alt="Prisma"&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;h1&gt;Prisma&lt;/h1&gt; 
 &lt;a href="https://www.npmjs.com/package/prisma"&gt;&lt;img src="https://img.shields.io/npm/v/prisma.svg?style=flat"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/prisma/prisma/raw/main/CONTRIBUTING.md"&gt;&lt;img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/prisma/prisma/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%202-blue"&gt;&lt;/a&gt; 
 &lt;a href="https://pris.ly/discord"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/937751382725886062?label=Discord"&gt;&lt;/a&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;a href="https://www.prisma.io/docs/getting-started/quickstart"&gt;Quickstart&lt;/a&gt; 
 &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
 &lt;a href="https://www.prisma.io/"&gt;Website&lt;/a&gt; 
 &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
 &lt;a href="https://www.prisma.io/docs/"&gt;Docs&lt;/a&gt; 
 &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
 &lt;a href="https://github.com/prisma/prisma-examples/"&gt;Examples&lt;/a&gt; 
 &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
 &lt;a href="https://www.prisma.io/blog"&gt;Blog&lt;/a&gt; 
 &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
 &lt;a href="https://pris.ly/discord?utm_source=github&amp;amp;utm_medium=prisma&amp;amp;utm_content=repo_readme"&gt;Discord&lt;/a&gt; 
 &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
 &lt;a href="https://pris.ly/x?utm_source=github&amp;amp;utm_medium=prisma&amp;amp;utm_content=repo_readme"&gt;Twitter&lt;/a&gt; 
 &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
 &lt;a href="https://pris.ly/youtube?utm_source=github&amp;amp;utm_medium=prisma&amp;amp;utm_content=repo_readme"&gt;Youtube&lt;/a&gt; 
 &lt;br&gt; 
 &lt;hr&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is Prisma?&lt;/h2&gt; 
&lt;p&gt;Prisma ORM is a &lt;strong&gt;next-generation ORM&lt;/strong&gt; that consists of these tools:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client"&gt;&lt;strong&gt;Prisma Client&lt;/strong&gt;&lt;/a&gt;: Auto-generated and type-safe query builder for Node.js &amp;amp; TypeScript&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.prisma.io/docs/concepts/components/prisma-migrate"&gt;&lt;strong&gt;Prisma Migrate&lt;/strong&gt;&lt;/a&gt;: Declarative data modeling &amp;amp; migration system&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/prisma/studio"&gt;&lt;strong&gt;Prisma Studio&lt;/strong&gt;&lt;/a&gt;: GUI to view and edit data in your database&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Prisma Client can be used in &lt;em&gt;any&lt;/em&gt; Node.js or TypeScript backend application (including serverless applications and microservices). This can be a &lt;a href="https://www.prisma.io/docs/concepts/overview/prisma-in-your-stack/rest"&gt;REST API&lt;/a&gt;, a &lt;a href="https://www.prisma.io/docs/concepts/overview/prisma-in-your-stack/graphql"&gt;GraphQL API&lt;/a&gt;, a gRPC API, or anything else that needs a database.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;If you need a database to use with Prisma ORM, check out &lt;a href="https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres?utm_source=github&amp;amp;utm_medium=prisma-readme"&gt;Prisma Postgres&lt;/a&gt; or if you are looking for our MCP Server, head &lt;a href="https://github.com/prisma/mcp"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;h3&gt;Quickstart (5min)&lt;/h3&gt; 
&lt;p&gt;The fastest way to get started with Prisma is by following the quickstart guides. You can choose either of two databases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres"&gt;Prisma Postgres&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.prisma.io/docs/getting-started/quickstart-sqlite"&gt;SQLite&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Bring your own database&lt;/h3&gt; 
&lt;p&gt;If you already have your own database, you can follow these guides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql"&gt;Add Prisma to an existing project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql"&gt;Set up a new project with Prisma from scratch&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How Prisma ORM works&lt;/h2&gt; 
&lt;p&gt;This section provides a high-level overview of how Prisma ORM works and its most important technical components. For a more thorough introduction, visit the &lt;a href="https://www.prisma.io/docs/"&gt;Prisma documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;The Prisma schema&lt;/h3&gt; 
&lt;p&gt;Every project that uses a tool from the Prisma toolkit starts with a &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema"&gt;Prisma schema file&lt;/a&gt;. The Prisma schema allows developers to define their &lt;em&gt;application models&lt;/em&gt; in an intuitive data modeling language. It also contains the connection to a database and defines a &lt;em&gt;generator&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-prisma"&gt;// Data source
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator
generator client {
  provider = "prisma-client-js"
}

// Data model
model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields:  [authorId], references: [id])
  authorId  Int?
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this schema, you configure three things:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Data source&lt;/strong&gt;: Specifies your database connection (via an environment variable)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Generator&lt;/strong&gt;: Indicates that you want to generate Prisma Client&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data model&lt;/strong&gt;: Defines your application models&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;The Prisma data model&lt;/h3&gt; 
&lt;p&gt;On this page, the focus is on the data model. You can learn more about &lt;a href="https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/data-sources"&gt;Data sources&lt;/a&gt; and &lt;a href="https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/generators"&gt;Generators&lt;/a&gt; on the respective docs pages.&lt;/p&gt; 
&lt;h4&gt;Functions of Prisma models&lt;/h4&gt; 
&lt;p&gt;The data model is a collection of &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#defining-models"&gt;models&lt;/a&gt;. A model has two major functions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Represent a table in the underlying database&lt;/li&gt; 
 &lt;li&gt;Provide the foundation for the queries in the Prisma Client API&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Getting a data model&lt;/h4&gt; 
&lt;p&gt;There are two major workflows for "getting" a data model into your Prisma schema:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generate the data model from &lt;a href="https://www.prisma.io/docs/concepts/components/introspection"&gt;introspecting&lt;/a&gt; a database&lt;/li&gt; 
 &lt;li&gt;Manually writing the data model and mapping it to the database with &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-migrate"&gt;Prisma Migrate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Once the data model is defined, you can &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client/generating-prisma-client"&gt;generate Prisma Client&lt;/a&gt; which will expose CRUD and more queries for the defined models. If you're using TypeScript, you'll get full type-safety for all queries (even when only retrieving the subsets of a model's fields).&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Accessing your database with Prisma Client&lt;/h3&gt; 
&lt;h4&gt;Generating Prisma Client&lt;/h4&gt; 
&lt;p&gt;The first step when using Prisma Client is installing its npm package:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install @prisma/client
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the installation of this package invokes the &lt;code&gt;prisma generate&lt;/code&gt; command which reads your Prisma schema and &lt;em&gt;generates&lt;/em&gt; the Prisma Client code. The code will be located in &lt;code&gt;node_modules/.prisma/client&lt;/code&gt;, which is exported by &lt;code&gt;node_modules/@prisma/client/index.d.ts&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;After you change your data model, you'll need to manually re-generate Prisma Client to ensure the code inside &lt;code&gt;node_modules/.prisma/client&lt;/code&gt; gets updated:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npx prisma generate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the documentation for more information about &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client/generating-prisma-client"&gt;"generating the Prisma client"&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Using Prisma Client to send queries to your database&lt;/h4&gt; 
&lt;p&gt;Once the Prisma Client is generated, you can import it in your code and send queries to your database. This is what the setup code looks like.&lt;/p&gt; 
&lt;h5&gt;Import and instantiate Prisma Client&lt;/h5&gt; 
&lt;p&gt;You can import and instantiate Prisma Client as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can start sending queries via the generated Prisma Client API, here are a few sample queries. Note that all Prisma Client queries return &lt;em&gt;plain old JavaScript objects&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Learn more about the available operations in the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client"&gt;Prisma Client docs&lt;/a&gt; or watch this &lt;a href="https://www.youtube.com/watch?v=LggrE5kJ75I&amp;amp;list=PLn2e1F9Rfr6k9PnR_figWOcSHgc_erDr5&amp;amp;index=4"&gt;demo video&lt;/a&gt; (2 min).&lt;/p&gt; 
&lt;h5&gt;Retrieve all &lt;code&gt;User&lt;/code&gt; records from the database&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;const allUsers = await prisma.user.findMany()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Include the &lt;code&gt;posts&lt;/code&gt; relation on each returned &lt;code&gt;User&lt;/code&gt; object&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;const allUsers = await prisma.user.findMany({
  include: { posts: true },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Filter all &lt;code&gt;Post&lt;/code&gt; records that contain &lt;code&gt;"prisma"&lt;/code&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;const filteredPosts = await prisma.post.findMany({
  where: {
    OR: [{ title: { contains: 'prisma' } }, { content: { contains: 'prisma' } }],
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Create a new &lt;code&gt;User&lt;/code&gt; and a new &lt;code&gt;Post&lt;/code&gt; record in the same query&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;const user = await prisma.user.create({
  data: {
    name: 'Alice',
    email: 'alice@prisma.io',
    posts: {
      create: { title: 'Join us for Prisma Day 2021' },
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Update an existing &lt;code&gt;Post&lt;/code&gt; record&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;const post = await prisma.post.update({
  where: { id: 42 },
  data: { published: true },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Usage with TypeScript&lt;/h4&gt; 
&lt;p&gt;Note that when using TypeScript, the result of this query will be &lt;em&gt;statically typed&lt;/em&gt; so that you can't accidentally access a property that doesn't exist (and any typos are caught at compile-time). Learn more about leveraging Prisma Client's generated types on the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client/advanced-usage-of-generated-types"&gt;Advanced usage of generated types&lt;/a&gt; page in the docs.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Prisma has a large and supportive &lt;a href="https://www.prisma.io/community"&gt;community&lt;/a&gt; of enthusiastic application developers. You can join us on &lt;a href="https://pris.ly/discord"&gt;Discord&lt;/a&gt; and here on &lt;a href="https://github.com/prisma/prisma/discussions"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://prisma.io"&gt;&lt;img src="http://made-with.prisma.io/dark.svg?sanitize=true" alt="Made with Prisma"&gt;&lt;/a&gt; &lt;a href="https://prisma.io"&gt;&lt;img src="http://made-with.prisma.io/indigo.svg?sanitize=true" alt="Made with Prisma"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Built something awesome with Prisma? üåü Show it off with these &lt;a href="https://github.com/prisma/presskit?tab=readme-ov-file#badges"&gt;badges&lt;/a&gt;, perfect for your readme or website.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![Made with Prisma](http://made-with.prisma.io/dark.svg)](https://prisma.io)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;[![Made with Prisma](http://made-with.prisma.io/indigo.svg)](https://prisma.io)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you have a security issue to report, please contact us at &lt;a href="mailto:security@prisma.io?subject=%5BGitHub%5D%20Prisma%202%20Security%20Report%20"&gt;security@prisma.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;h3&gt;Ask a question about Prisma&lt;/h3&gt; 
&lt;p&gt;You can ask questions and initiate &lt;a href="https://github.com/prisma/prisma/discussions/"&gt;discussions&lt;/a&gt; about Prisma-related topics in the &lt;code&gt;prisma&lt;/code&gt; repository on GitHub.&lt;/p&gt; 
&lt;p&gt;üëâ &lt;a href="https://github.com/prisma/prisma/discussions/new"&gt;&lt;strong&gt;Ask a question&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Create a bug report for Prisma&lt;/h3&gt; 
&lt;p&gt;If you see an error message or run into an issue, please make sure to create a bug report! You can find &lt;a href="https://www.prisma.io/docs/guides/other/troubleshooting-orm/creating-bug-reports"&gt;best practices for creating bug reports&lt;/a&gt; (like including additional debugging output) in the docs.&lt;/p&gt; 
&lt;p&gt;üëâ &lt;a href="https://pris.ly/prisma-prisma-bug-report"&gt;&lt;strong&gt;Create bug report&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Submit a feature request&lt;/h3&gt; 
&lt;p&gt;If Prisma currently doesn't have a certain feature, be sure to check out the &lt;a href="https://www.prisma.io/docs/more/roadmap"&gt;roadmap&lt;/a&gt; to see if this is already planned for the future.&lt;/p&gt; 
&lt;p&gt;If the feature on the roadmap is linked to a GitHub issue, please make sure to leave a üëç reaction on the issue and ideally a comment with your thoughts about the feature!&lt;/p&gt; 
&lt;p&gt;üëâ &lt;a href="https://github.com/prisma/prisma/issues/new?assignees=&amp;amp;labels=&amp;amp;template=feature_request.md&amp;amp;title="&gt;&lt;strong&gt;Submit feature request&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Refer to our &lt;a href="https://github.com/prisma/prisma/raw/main/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt; and &lt;a href="https://github.com/prisma/prisma/raw/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct for contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Tests Status&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Prisma Tests Status: &lt;a href="https://github.com/prisma/prisma/actions/workflows/test.yml?query=branch%3Amain"&gt;&lt;img src="https://github.com/prisma/prisma/workflows/CI/badge.svg?sanitize=true" alt="Prisma Tests Status"&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ecosystem Tests Status: &lt;a href="https://github.com/prisma/ecosystem-tests/actions/workflows/test.yaml?query=branch%3Adev"&gt;&lt;img src="https://github.com/prisma/ecosystem-tests/workflows/test/badge.svg?sanitize=true" alt="Ecosystem Tests Status"&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>JetBrains/intellij-community</title>
      <link>https://github.com/JetBrains/intellij-community</link>
      <description>&lt;p&gt;IntelliJ IDEA &amp; IntelliJ Platform&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/JetBrains/.github/raw/main/profile/README.md"&gt;&lt;img src="http://jb.gg/badges/official.svg?sanitize=true" alt="official JetBrains project"&gt;&lt;/a&gt; &lt;a href="https://github.com/JetBrains/intellij-community/actions/workflows/IntelliJ_IDEA.yml"&gt;&lt;img src="https://github.com/JetBrains/intellij-community/workflows/IntelliJ%20IDEA/badge.svg?sanitize=true" alt="Build status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;IntelliJ IDEA Open Source&lt;/h1&gt; 
&lt;p&gt;This repository is the open-source part of the IntelliJ IDEA codebase. It also serves as the basis for&amp;nbsp;&lt;a href="https://www.jetbrains.com/opensource/idea"&gt;IntelliJ Platform development&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;These instructions will help you build IntelliJ IDEA from source code.&lt;/p&gt; 
&lt;p&gt;If you are new to the community and would like to contribute code or help others learn, see&amp;nbsp;&lt;a href="https://github.com/JetBrains/intellij-community/raw/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&amp;nbsp;to get started.&lt;/p&gt; 
&lt;p&gt;The following conventions will be used to refer to directories on your machine:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;USER_HOME&amp;gt;&lt;/code&gt; is your OS user's home directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;IDEA_HOME&amp;gt;&lt;/code&gt; is the root directory for the &lt;strong&gt;IntelliJ source code&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Getting the IntelliJ IDEA Source Code&lt;/h2&gt; 
&lt;p&gt;This section will guide you through getting the project sources and help avoid common issues in git config and other steps before opening it in the IDE.&lt;/p&gt; 
&lt;h4&gt;Prerequisites&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; installed&lt;/li&gt; 
 &lt;li&gt;~2GB free disk space&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://www.jetbrains.com/idea/download"&gt;IntelliJ IDEA 2023.2&lt;/a&gt; or higher.&lt;/li&gt; 
 &lt;li&gt;For &lt;strong&gt;Windows&lt;/strong&gt; set these git config to avoid common issues during cloning: &lt;pre&gt;&lt;code&gt;git config --global core.longpaths true
git config --global core.autocrlf input
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Clone Main Repository&lt;/h4&gt; 
&lt;p&gt;IntelliJ IDEA source code is available from the &lt;a href="https://github.com/JetBrains/intellij-community"&gt;GitHub repository&lt;/a&gt;, which can be cloned or downloaded as a zip file (based on a branch) into &lt;code&gt;&amp;lt;IDEA_HOME&amp;gt;&lt;/code&gt;. The &lt;strong&gt;master&lt;/strong&gt; (&lt;em&gt;default&lt;/em&gt;) branch contains the source code which will be used to create the next major version of IntelliJ IDEA. The branch names and build numbers for older releases of IntelliJ IDEA can be found on the &lt;a href="https://plugins.jetbrains.com/docs/intellij/build-number-ranges.html"&gt;Build Number Ranges&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;You can &lt;a href="https://www.jetbrains.com/help/idea/manage-projects-hosted-on-github.html#clone-from-GitHub"&gt;clone this project&lt;/a&gt; directly using IntelliJ IDEA.&lt;/p&gt; 
&lt;p&gt;Alternatively, follow the steps below in a terminal:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/JetBrains/intellij-community.git
cd intellij-community
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;For faster download&lt;/strong&gt;: If the complete repository history isn't needed, create &lt;a href="https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---depthdepth"&gt;shallow clone&lt;/a&gt; To download only the latest revision of the repository, add &lt;code&gt;--depth 1&lt;/code&gt; option after &lt;code&gt;clone&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Cloning in IntelliJ IDEA also supports creating shallow clone.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Get Android Modules&lt;/h4&gt; 
&lt;p&gt;IntelliJ IDEA requires additional Android modules from separate Git repositories.&lt;/p&gt; 
&lt;p&gt;Run the following script from project root &lt;code&gt;&amp;lt;IDEA_HOME&amp;gt;&lt;/code&gt; to get the required modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux/macOS: &lt;code&gt;./getPlugins.sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Windows: &lt;code&gt;getPlugins.bat&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;Always &lt;code&gt;git checkout&lt;/code&gt; the &lt;code&gt;intellij-community&lt;/code&gt; and &lt;code&gt;android&lt;/code&gt; Git repositories to the same branches/tags.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h2&gt;Building IntelliJ IDEA&lt;/h2&gt; 
&lt;p&gt;These instructions will help you build IntelliJ IDEA from source code, which is the basis for IntelliJ Platform development. IntelliJ IDEA '&lt;strong&gt;2023.2&lt;/strong&gt;' or newer is required.&lt;/p&gt; 
&lt;h3&gt;Opening the IntelliJ IDEA Source Code in the IDE&lt;/h3&gt; 
&lt;p&gt;Using the latest IntelliJ IDEA, click '&lt;strong&gt;File | Open&lt;/strong&gt;', select the &lt;code&gt;&amp;lt;IDEA_HOME&amp;gt;&lt;/code&gt; directory. If IntelliJ IDEA displays a message about a missing or out-of-date required plugin (e.g. Kotlin), &lt;a href="https://www.jetbrains.com/help/idea/managing-plugins.html"&gt;enable, upgrade, or install that plugin&lt;/a&gt; and restart IntelliJ IDEA.&lt;/p&gt; 
&lt;h3&gt;Build Configuration Steps&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;JDK Setup&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use JetBrains Runtime 17 (without JCEF) to compile&lt;/li&gt; 
 &lt;li&gt;IDE will prompt to download it on the first build&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;JetBrains Runtime &lt;strong&gt;without&lt;/strong&gt; JCEF is required. If &lt;code&gt;jbr-17&lt;/code&gt; SDK points to JCEF version, change it to the non-JCEF version:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add &lt;code&gt;idea.is.internal=true&lt;/code&gt; to &lt;code&gt;idea.properties&lt;/code&gt; and restart the IDE.&lt;/li&gt; 
  &lt;li&gt;Go to '&lt;strong&gt;Project Structure | SDKs&lt;/strong&gt;'&lt;/li&gt; 
  &lt;li&gt;Click 'Browse' ‚Üí 'Download...'&lt;/li&gt; 
  &lt;li&gt;Select version 17 and vendor 'JetBrains Runtime'&lt;/li&gt; 
  &lt;li&gt;To confirm if the JDK is correct, navigate to the SDK page with jbr-17 selected. Search for &lt;code&gt;jcef&lt;/code&gt;, it should &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; yield a result.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Maven Configuration&lt;/strong&gt; : If the&amp;nbsp;&lt;strong&gt;Maven&lt;/strong&gt;&amp;nbsp;plugin is disabled,&amp;nbsp;&lt;a href="https://www.jetbrains.com/help/idea/absolute-path-variables.html"&gt;add the path variable&lt;/a&gt;&amp;nbsp;"&lt;strong&gt;MAVEN_REPOSITORY&lt;/strong&gt;" pointing to&amp;nbsp;&lt;code&gt;&amp;lt;USER_HOME&amp;gt;/.m2/repository&lt;/code&gt;&amp;nbsp;directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Memory Settings&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure a minimum &lt;strong&gt;8GB&lt;/strong&gt; RAM on your computer.&lt;/li&gt; 
 &lt;li&gt;With the minimum RAM, disable "&lt;strong&gt;Compile independent modules in parallel&lt;/strong&gt;" in '&lt;strong&gt;Settings | Build, Execution, Deployment | Compiler&lt;/strong&gt;'.&lt;/li&gt; 
 &lt;li&gt;With notably higher available RAM, Increase "&lt;strong&gt;User-local heap size&lt;/strong&gt;" to &lt;code&gt;3000&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building the IntelliJ IDEA Application from Source&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;To build IntelliJ IDEA from source&lt;/strong&gt;, choose '&lt;strong&gt;Build | Build Project&lt;/strong&gt;' from the main menu.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To build installation packages&lt;/strong&gt;, run the &lt;a href="https://raw.githubusercontent.com/JetBrains/intellij-community/master/installers.cmd"&gt;installers.cmd&lt;/a&gt; script in &lt;code&gt;&amp;lt;IDEA_HOME&amp;gt;&lt;/code&gt; directory. &lt;code&gt;installers.cmd&lt;/code&gt; will work on both Windows and Unix systems. Options to build installers are passed as system properties to &lt;code&gt;installers.cmd&lt;/code&gt; command. You may find the list of available properties in &lt;a href="https://raw.githubusercontent.com/JetBrains/intellij-community/master/platform/build-scripts/src/org/jetbrains/intellij/build/BuildOptions.kt"&gt;BuildOptions.kt&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Installer build examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Build installers only for current operating system:
./installers.cmd -Dintellij.build.target.os=current
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Build source code _incrementally_ (do not build what was already built before):
./installers.cmd -Dintellij.build.incremental.compilation=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;installers.cmd&lt;/code&gt; is used to run &lt;a href="https://raw.githubusercontent.com/JetBrains/intellij-community/master/build/src/OpenSourceCommunityInstallersBuildTarget.kt"&gt;OpenSourceCommunityInstallersBuildTarget&lt;/a&gt; from the command line. You can also call it directly from IDEA, using run configuration &lt;code&gt;Build IDEA Community Installers (current OS)&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Dockerized Build Environment&lt;/h4&gt; 
&lt;p&gt;To build installation packages inside a Docker container with preinstalled dependencies and tools, run the following command in &lt;code&gt;&amp;lt;IDEA_HOME&amp;gt;&lt;/code&gt; directory (on Windows, use PowerShell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it --user "$(id -u)" --volume "${PWD}:/community" "$(docker build --quiet . --target intellij_idea)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Please remember to specify the &lt;code&gt;--user "$(id -u)"&lt;/code&gt; argument for the container's user to match the host's user. This prevents issues with permissions for the checked-out repository, the build output, and the mounted Maven cache, if any.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To reuse the existing Maven cache from the host system, add the following option to &lt;code&gt;docker run&lt;/code&gt; command: &lt;code&gt;--volume "$HOME/.m2:/home/ide_builder/.m2"&lt;/code&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Running IntelliJ IDEA&lt;/h2&gt; 
&lt;p&gt;To run the IntelliJ IDEA that was built from source, choose '&lt;strong&gt;Run | Run&lt;/strong&gt;' from the main menu. This will use the preconfigured run configuration &lt;code&gt;IDEA&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To run tests on the build, apply these settings to the '&lt;strong&gt;Run | Edit Configurations... | Templates | JUnit&lt;/strong&gt;' configuration tab:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Working dir: &lt;code&gt;&amp;lt;IDEA_HOME&amp;gt;/bin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;VM options: &lt;code&gt;-ea&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Running IntelliJ IDEA in CI/CD environment&lt;/h4&gt; 
&lt;p&gt;To run tests outside of IntelliJ IDEA, run the &lt;code&gt;tests.cmd&lt;/code&gt; command in &lt;code&gt;&amp;lt;IDEA_HOME&amp;gt;&lt;/code&gt; directory.&lt;code&gt;tests.cmd&lt;/code&gt; can be used in both Windows and Unix systems. Options to run tests are passed as system properties to &lt;code&gt;tests.cmd&lt;/code&gt; command. You may find the list of available properties in &lt;a href="https://raw.githubusercontent.com/JetBrains/intellij-community/master/platform/build-scripts/src/org/jetbrains/intellij/build/TestingOptions.kt"&gt;TestingOptions.kt&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Build source code _incrementally_ (do not build what was already built before): `
./tests.cmd -Dintellij.build.incremental.compilation=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;#Run a specific test: 
./tests.cmd -Dintellij.build.test.patterns=com.intellij.util.ArrayUtilTest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;tests.cmd&lt;/code&gt; is used just to run &lt;a href="https://raw.githubusercontent.com/JetBrains/intellij-community/master/build/src/CommunityRunTestsBuildTarget.kt"&gt;CommunityRunTestsBuildTarget&lt;/a&gt; from the command line. You can also call it directly from IDEA, see run configuration &lt;code&gt;tests in community&lt;/code&gt; for an example.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>confident-ai/deepeval</title>
      <link>https://github.com/confident-ai/deepeval</link>
      <description>&lt;p&gt;The LLM Evaluation Framework&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://github.com/confident-ai/deepeval/raw/main/docs/static/img/deepeval.png" alt="DeepEval Logo" width="100%"&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;/p&gt;
&lt;h1 align="center"&gt;The LLM Evaluation Framework&lt;/h1&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://trendshift.io/repositories/5917" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/5917" alt="confident-ai%2Fdeepeval | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.gg/3SEyvpgu2f"&gt; &lt;img alt="discord-invite" src="https://dcbadge.vercel.app/api/server/3SEyvpgu2f?style=flat"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h4 align="center"&gt; &lt;p&gt; &lt;a href="https://deepeval.com/docs/getting-started?utm_source=GitHub"&gt;Documentation&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/confident-ai/deepeval/main/#-metrics-and-features"&gt;Metrics and Features&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/confident-ai/deepeval/main/#-quickstart"&gt;Getting Started&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/confident-ai/deepeval/main/#-integrations"&gt;Integrations&lt;/a&gt; | &lt;a href="https://confident-ai.com?utm_source=GitHub"&gt;DeepEval Platform&lt;/a&gt; &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/confident-ai/deepeval/releases"&gt; &lt;img alt="GitHub release" src="https://img.shields.io/github/release/confident-ai/deepeval.svg?color=violet"&gt; &lt;/a&gt; &lt;a href="https://colab.research.google.com/drive/1PPxYEBa6eu__LquGoFFJZkhYgWVYE6kh?usp=sharing"&gt; &lt;img alt="Try Quickstart in Colab" src="https://colab.research.google.com/assets/colab-badge.svg?sanitize=true"&gt; &lt;/a&gt; &lt;a href="https://github.com/confident-ai/deepeval/raw/master/LICENSE.md"&gt; &lt;img alt="License" src="https://img.shields.io/github/license/confident-ai/deepeval.svg?color=yellow"&gt; &lt;/a&gt; &lt;a href="https://x.com/deepeval"&gt; &lt;img alt="Twitter Follow" src="https://img.shields.io/twitter/follow/deepeval?style=social&amp;amp;logo=x"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;!-- Keep these links. Translations will automatically update with the README. --&gt; &lt;a href="https://www.readme-i18n.com/confident-ai/deepeval?lang=de"&gt;Deutsch&lt;/a&gt; | &lt;a href="https://www.readme-i18n.com/confident-ai/deepeval?lang=es"&gt;Espa√±ol&lt;/a&gt; | &lt;a href="https://www.readme-i18n.com/confident-ai/deepeval?lang=fr"&gt;fran√ßais&lt;/a&gt; | &lt;a href="https://www.readme-i18n.com/confident-ai/deepeval?lang=ja"&gt;Êó•Êú¨Ë™û&lt;/a&gt; | &lt;a href="https://www.readme-i18n.com/confident-ai/deepeval?lang=ko"&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt; | &lt;a href="https://www.readme-i18n.com/confident-ai/deepeval?lang=pt"&gt;Portugu√™s&lt;/a&gt; | &lt;a href="https://www.readme-i18n.com/confident-ai/deepeval?lang=ru"&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt; | &lt;a href="https://www.readme-i18n.com/confident-ai/deepeval?lang=zh"&gt;‰∏≠Êñá&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;DeepEval&lt;/strong&gt; is a simple-to-use, open-source LLM evaluation framework, for evaluating and testing large-language model systems. It is similar to Pytest but specialized for unit testing LLM outputs. DeepEval incorporates the latest research to evaluate LLM outputs based on metrics such as G-Eval, hallucination, answer relevancy, RAGAS, etc., which uses LLMs and various other NLP models that runs &lt;strong&gt;locally on your machine&lt;/strong&gt; for evaluation.&lt;/p&gt; 
&lt;p&gt;Whether your LLM applications are RAG pipelines, chatbots, AI agents, implemented via LangChain or LlamaIndex, DeepEval has you covered. With it, you can easily determine the optimal models, prompts, and architecture to improve your RAG pipeline, agentic workflows, prevent prompt drifting, or even transition from OpenAI to hosting your own Deepseek R1 with confidence.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Need a place for your DeepEval testing data to live üè°‚ù§Ô∏è? &lt;a href="https://confident-ai.com?utm_source=GitHub"&gt;Sign up to the DeepEval platform&lt;/a&gt; to compare iterations of your LLM app, generate &amp;amp; share testing reports, and more.&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/confident-ai/deepeval/main/assets/demo.gif" alt="Demo GIF"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Want to talk LLM evaluation, need help picking metrics, or just to say hi? &lt;a href="https://discord.com/invite/3SEyvpgu2f"&gt;Come join our discord.&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br&gt; 
&lt;h1&gt;üî• Metrics and Features&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;ü•≥ You can now share DeepEval's test results on the cloud directly on &lt;a href="https://confident-ai.com?utm_source=GitHub"&gt;Confident AI&lt;/a&gt;'s infrastructure&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports both end-to-end and component-level LLM evaluation.&lt;/li&gt; 
 &lt;li&gt;Large variety of ready-to-use LLM evaluation metrics (all with explanations) powered by &lt;strong&gt;ANY&lt;/strong&gt; LLM of your choice, statistical methods, or NLP models that runs &lt;strong&gt;locally on your machine&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;G-Eval&lt;/li&gt; 
   &lt;li&gt;DAG (&lt;a href="https://deepeval.com/docs/metrics-dag"&gt;deep acyclic graph&lt;/a&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;RAG metrics:&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Answer Relevancy&lt;/li&gt; 
     &lt;li&gt;Faithfulness&lt;/li&gt; 
     &lt;li&gt;Contextual Recall&lt;/li&gt; 
     &lt;li&gt;Contextual Precision&lt;/li&gt; 
     &lt;li&gt;Contextual Relevancy&lt;/li&gt; 
     &lt;li&gt;RAGAS&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Agentic metrics:&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Task Completion&lt;/li&gt; 
     &lt;li&gt;Tool Correctness&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Others:&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Hallucination&lt;/li&gt; 
     &lt;li&gt;Summarization&lt;/li&gt; 
     &lt;li&gt;Bias&lt;/li&gt; 
     &lt;li&gt;Toxicity&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Conversational metrics:&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Knowledge Retention&lt;/li&gt; 
     &lt;li&gt;Conversation Completeness&lt;/li&gt; 
     &lt;li&gt;Conversation Relevancy&lt;/li&gt; 
     &lt;li&gt;Role Adherence&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Build your own custom metrics that are automatically integrated with DeepEval's ecosystem.&lt;/li&gt; 
 &lt;li&gt;Generate synthetic datasets for evaluation.&lt;/li&gt; 
 &lt;li&gt;Integrates seamlessly with &lt;strong&gt;ANY&lt;/strong&gt; CI/CD environment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://deepeval.com/docs/red-teaming-introduction"&gt;Red team your LLM application&lt;/a&gt; for 40+ safety vulnerabilities in a few lines of code, including: 
  &lt;ul&gt; 
   &lt;li&gt;Toxicity&lt;/li&gt; 
   &lt;li&gt;Bias&lt;/li&gt; 
   &lt;li&gt;SQL Injection&lt;/li&gt; 
   &lt;li&gt;etc., using advanced 10+ attack enhancement strategies such as prompt injections.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Easily benchmark &lt;strong&gt;ANY&lt;/strong&gt; LLM on popular LLM benchmarks in &lt;a href="https://deepeval.com/docs/benchmarks-introduction?utm_source=GitHub"&gt;under 10 lines of code.&lt;/a&gt;, which includes: 
  &lt;ul&gt; 
   &lt;li&gt;MMLU&lt;/li&gt; 
   &lt;li&gt;HellaSwag&lt;/li&gt; 
   &lt;li&gt;DROP&lt;/li&gt; 
   &lt;li&gt;BIG-Bench Hard&lt;/li&gt; 
   &lt;li&gt;TruthfulQA&lt;/li&gt; 
   &lt;li&gt;HumanEval&lt;/li&gt; 
   &lt;li&gt;GSM8K&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://confident-ai.com?utm_source=GitHub"&gt;100% integrated with Confident AI&lt;/a&gt; for the full evaluation lifecycle: 
  &lt;ul&gt; 
   &lt;li&gt;Curate/annotate evaluation datasets on the cloud&lt;/li&gt; 
   &lt;li&gt;Benchmark LLM app using dataset, and compare with previous iterations to experiment which models/prompts works best&lt;/li&gt; 
   &lt;li&gt;Fine-tune metrics for custom results&lt;/li&gt; 
   &lt;li&gt;Debug evaluation results via LLM traces&lt;/li&gt; 
   &lt;li&gt;Monitor &amp;amp; evaluate LLM responses in product to improve datasets with real-world data&lt;/li&gt; 
   &lt;li&gt;Repeat until perfection&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Confident AI is the DeepEval platform. Create an account &lt;a href="https://app.confident-ai.com?utm_source=GitHub"&gt;here.&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br&gt; 
&lt;h1&gt;üîå Integrations&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;ü¶Ñ LlamaIndex, to &lt;a href="https://www.deepeval.com/integrations/frameworks/llamaindex?utm_source=GitHub"&gt;&lt;strong&gt;unit test RAG applications in CI/CD&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ü§ó Hugging Face, to &lt;a href="https://www.deepeval.com/integrations/frameworks/huggingface?utm_source=GitHub"&gt;&lt;strong&gt;enable real-time evaluations during LLM fine-tuning&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;h1&gt;üöÄ QuickStart&lt;/h1&gt; 
&lt;p&gt;Let's pretend your LLM application is a RAG based customer support chatbot; here's how DeepEval can help test what you've built.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;pip install -U deepeval
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Create an account (highly recommended)&lt;/h2&gt; 
&lt;p&gt;Using the &lt;code&gt;deepeval&lt;/code&gt; platform will allow you to generate sharable testing reports on the cloud. It is free, takes no additional code to setup, and we highly recommend giving it a try.&lt;/p&gt; 
&lt;p&gt;To login, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;deepeval login
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Follow the instructions in the CLI to create an account, copy your API key, and paste it into the CLI. All test cases will automatically be logged (find more information on data privacy &lt;a href="https://deepeval.com/docs/data-privacy?utm_source=GitHub"&gt;here&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;Writing your first test case&lt;/h2&gt; 
&lt;p&gt;Create a test file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;touch test_chatbot.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open &lt;code&gt;test_chatbot.py&lt;/code&gt; and write your first test case to run an &lt;strong&gt;end-to-end&lt;/strong&gt; evaluation using DeepEval, which treats your LLM app as a black-box:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import pytest
from deepeval import assert_test
from deepeval.metrics import GEval
from deepeval.test_case import LLMTestCase, LLMTestCaseParams

def test_case():
    correctness_metric = GEval(
        name="Correctness",
        criteria="Determine if the 'actual output' is correct based on the 'expected output'.",
        evaluation_params=[LLMTestCaseParams.ACTUAL_OUTPUT, LLMTestCaseParams.EXPECTED_OUTPUT],
        threshold=0.5
    )
    test_case = LLMTestCase(
        input="What if these shoes don't fit?",
        # Replace this with the actual output from your LLM application
        actual_output="You have 30 days to get a full refund at no extra cost.",
        expected_output="We offer a 30-day full refund at no extra costs.",
        retrieval_context=["All customers are eligible for a 30 day full refund at no extra costs."]
    )
    assert_test(test_case, [correctness_metric])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Set your &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; as an environment variable (you can also evaluate using your own custom model, for more details visit &lt;a href="https://deepeval.com/docs/metrics-introduction#using-a-custom-llm?utm_source=GitHub"&gt;this part of our docs&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export OPENAI_API_KEY="..."
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And finally, run &lt;code&gt;test_chatbot.py&lt;/code&gt; in the CLI:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;deepeval test run test_chatbot.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Congratulations! Your test case should have passed ‚úÖ&lt;/strong&gt; Let's breakdown what happened.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The variable &lt;code&gt;input&lt;/code&gt; mimics a user input, and &lt;code&gt;actual_output&lt;/code&gt; is a placeholder for what your application's supposed to output based on this input.&lt;/li&gt; 
 &lt;li&gt;The variable &lt;code&gt;expected_output&lt;/code&gt; represents the ideal answer for a given &lt;code&gt;input&lt;/code&gt;, and &lt;a href="https://deepeval.com/docs/metrics-llm-evals"&gt;&lt;code&gt;GEval&lt;/code&gt;&lt;/a&gt; is a research-backed metric provided by &lt;code&gt;deepeval&lt;/code&gt; for you to evaluate your LLM output's on any custom with human-like accuracy.&lt;/li&gt; 
 &lt;li&gt;In this example, the metric &lt;code&gt;criteria&lt;/code&gt; is correctness of the &lt;code&gt;actual_output&lt;/code&gt; based on the provided &lt;code&gt;expected_output&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;All metric scores range from 0 - 1, which the &lt;code&gt;threshold=0.5&lt;/code&gt; threshold ultimately determines if your test have passed or not.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://deepeval.com/docs/getting-started?utm_source=GitHub"&gt;Read our documentation&lt;/a&gt; for more information on more options to run end-to-end evaluation, how to use additional metrics, create your own custom metrics, and tutorials on how to integrate with other tools like LangChain and LlamaIndex.&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Evaluating Nested Components&lt;/h2&gt; 
&lt;p&gt;If you wish to evaluate individual components within your LLM app, you need to run &lt;strong&gt;component-level&lt;/strong&gt; evals - a powerful way to evaluate any component within an LLM system.&lt;/p&gt; 
&lt;p&gt;Simply trace "components" such as LLM calls, retrievers, tool calls, and agents within your LLM application using the &lt;code&gt;@observe&lt;/code&gt; decorator to apply metrics on a component-level. Tracing with &lt;code&gt;deepeval&lt;/code&gt; is non-instrusive (learn more &lt;a href="https://deepeval.com/docs/evaluation-llm-tracing#dont-be-worried-about-tracing"&gt;here&lt;/a&gt;) and helps you avoid rewriting your codebase just for evals:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from deepeval.tracing import observe, update_current_span
from deepeval.test_case import LLMTestCase
from deepeval.dataset import Golden
from deepeval.metrics import GEval
from deepeval import evaluate

correctness = GEval(name="Correctness", criteria="Determine if the 'actual output' is correct based on the 'expected output'.", evaluation_params=[LLMTestCaseParams.ACTUAL_OUTPUT, LLMTestCaseParams.EXPECTED_OUTPUT])

@observe(metrics=[correctness])
def inner_component():
    # Component can be anything from an LLM call, retrieval, agent, tool use, etc.
    update_current_span(test_case=LLMTestCase(input="...", actual_output="..."))
    return

@observe
def llm_app(input: str):
    inner_component()
    return

evaluate(observed_callback=llm_app, goldens=[Golden(input="Hi!")])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can learn everything about component-level evaluations &lt;a href="https://www.deepeval.com/docs/evaluation-component-level-llm-evals"&gt;here.&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Evaluating Without Pytest Integration&lt;/h2&gt; 
&lt;p&gt;Alternatively, you can evaluate without Pytest, which is more suited for a notebook environment.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from deepeval import evaluate
from deepeval.metrics import AnswerRelevancyMetric
from deepeval.test_case import LLMTestCase

answer_relevancy_metric = AnswerRelevancyMetric(threshold=0.7)
test_case = LLMTestCase(
    input="What if these shoes don't fit?",
    # Replace this with the actual output from your LLM application
    actual_output="We offer a 30-day full refund at no extra costs.",
    retrieval_context=["All customers are eligible for a 30 day full refund at no extra costs."]
)
evaluate([test_case], [answer_relevancy_metric])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Using Standalone Metrics&lt;/h2&gt; 
&lt;p&gt;DeepEval is extremely modular, making it easy for anyone to use any of our metrics. Continuing from the previous example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from deepeval.metrics import AnswerRelevancyMetric
from deepeval.test_case import LLMTestCase

answer_relevancy_metric = AnswerRelevancyMetric(threshold=0.7)
test_case = LLMTestCase(
    input="What if these shoes don't fit?",
    # Replace this with the actual output from your LLM application
    actual_output="We offer a 30-day full refund at no extra costs.",
    retrieval_context=["All customers are eligible for a 30 day full refund at no extra costs."]
)

answer_relevancy_metric.measure(test_case)
print(answer_relevancy_metric.score)
# All metrics also offer an explanation
print(answer_relevancy_metric.reason)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that some metrics are for RAG pipelines, while others are for fine-tuning. Make sure to use our docs to pick the right one for your use case.&lt;/p&gt; 
&lt;h2&gt;Evaluating a Dataset / Test Cases in Bulk&lt;/h2&gt; 
&lt;p&gt;In DeepEval, a dataset is simply a collection of test cases. Here is how you can evaluate these in bulk:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import pytest
from deepeval import assert_test
from deepeval.dataset import EvaluationDataset, Golden
from deepeval.metrics import AnswerRelevancyMetric
from deepeval.test_case import LLMTestCase

dataset = EvaluationDataset(goldens=[Golden(input="What's the weather like today?")])

for golden in dataset.goldens:
    test_case = LLMTestCase(
        input=golden.input,
        actual_output=your_llm_app(golden.input)
    )
    dataset.add_test_case(test_case)

@pytest.mark.parametrize(
    "test_case",
    dataset,
)
def test_customer_chatbot(test_case: LLMTestCase):
    answer_relevancy_metric = AnswerRelevancyMetric(threshold=0.5)
    assert_test(test_case, [answer_relevancy_metric])
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run this in the CLI, you can also add an optional -n flag to run tests in parallel
deepeval test run test_&amp;lt;filename&amp;gt;.py -n 4
&lt;/code&gt;&lt;/pre&gt; 
&lt;br&gt; 
&lt;p&gt;Alternatively, although we recommend using &lt;code&gt;deepeval test run&lt;/code&gt;, you can evaluate a dataset/test cases without using our Pytest integration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from deepeval import evaluate
...

evaluate(dataset, [answer_relevancy_metric])
# or
dataset.evaluate([answer_relevancy_metric])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;LLM Evaluation With Confident AI&lt;/h1&gt; 
&lt;p&gt;The correct LLM evaluation lifecycle is only achievable with &lt;a href="https://confident-ai.com?utm_source=Github"&gt;the DeepEval platform&lt;/a&gt;. It allows you to:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Curate/annotate evaluation datasets on the cloud&lt;/li&gt; 
 &lt;li&gt;Benchmark LLM app using dataset, and compare with previous iterations to experiment which models/prompts works best&lt;/li&gt; 
 &lt;li&gt;Fine-tune metrics for custom results&lt;/li&gt; 
 &lt;li&gt;Debug evaluation results via LLM traces&lt;/li&gt; 
 &lt;li&gt;Monitor &amp;amp; evaluate LLM responses in product to improve datasets with real-world data&lt;/li&gt; 
 &lt;li&gt;Repeat until perfection&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Everything on Confident AI, including how to use Confident is available &lt;a href="https://documentation.confident-ai.com/docs?utm_source=GitHub"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To begin, login from the CLI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;deepeval login
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Follow the instructions to log in, create your account, and paste your API key into the CLI.&lt;/p&gt; 
&lt;p&gt;Now, run your test file again:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;deepeval test run test_chatbot.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should see a link displayed in the CLI once the test has finished running. Paste it into your browser to view the results!&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/confident-ai/deepeval/main/assets/demo.gif" alt="Demo GIF"&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;Please read &lt;a href="https://github.com/confident-ai/deepeval/raw/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for details on our code of conduct, and the process for submitting pull requests to us.&lt;/p&gt; 
&lt;br&gt; 
&lt;h1&gt;Roadmap&lt;/h1&gt; 
&lt;p&gt;Features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Integration with Confident AI&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Implement G-Eval&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Implement RAG metrics&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Implement Conversational metrics&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Evaluation Dataset Creation&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Red-Teaming&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; DAG custom metrics&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Guardrails&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;h1&gt;Authors&lt;/h1&gt; 
&lt;p&gt;Built by the founders of Confident AI. Contact &lt;a href="mailto:jeffreyip@confident-ai.com"&gt;jeffreyip@confident-ai.com&lt;/a&gt; for all enquiries.&lt;/p&gt; 
&lt;br&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;DeepEval is licensed under Apache 2.0 - see the &lt;a href="https://github.com/confident-ai/deepeval/raw/main/LICENSE.md"&gt;LICENSE.md&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>blakeblackshear/frigate</title>
      <link>https://github.com/blakeblackshear/frigate</link>
      <description>&lt;p&gt;NVR with realtime local object detection for IP cameras&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img align="center" alt="logo" src="https://raw.githubusercontent.com/blakeblackshear/frigate/dev/docs/static/img/frigate.png"&gt; &lt;/p&gt; 
&lt;h1&gt;Frigate - NVR With Realtime Object Detection for IP Cameras&lt;/h1&gt; 
&lt;a href="https://hosted.weblate.org/engage/frigate-nvr/"&gt; &lt;img src="https://hosted.weblate.org/widget/frigate-nvr/language-badge.svg?sanitize=true" alt="Translation status"&gt; &lt;/a&gt; 
&lt;p&gt;[English] | &lt;a href="https://github.com/blakeblackshear/frigate/raw/dev/README_CN.md"&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A complete and local NVR designed for &lt;a href="https://www.home-assistant.io"&gt;Home Assistant&lt;/a&gt; with AI object detection. Uses OpenCV and Tensorflow to perform realtime object detection locally for IP cameras.&lt;/p&gt; 
&lt;p&gt;Use of a GPU or AI accelerator such as a &lt;a href="https://coral.ai/products/"&gt;Google Coral&lt;/a&gt; or &lt;a href="https://hailo.ai/"&gt;Hailo&lt;/a&gt; is highly recommended. AI accelerators will outperform even the best CPUs with very little overhead.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tight integration with Home Assistant via a &lt;a href="https://github.com/blakeblackshear/frigate-hass-integration"&gt;custom component&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Designed to minimize resource use and maximize performance by only looking for objects when and where it is necessary&lt;/li&gt; 
 &lt;li&gt;Leverages multiprocessing heavily with an emphasis on realtime over processing every frame&lt;/li&gt; 
 &lt;li&gt;Uses a very low overhead motion detection to determine where to run object detection&lt;/li&gt; 
 &lt;li&gt;Object detection with TensorFlow runs in separate processes for maximum FPS&lt;/li&gt; 
 &lt;li&gt;Communicates over MQTT for easy integration into other systems&lt;/li&gt; 
 &lt;li&gt;Records video with retention settings based on detected objects&lt;/li&gt; 
 &lt;li&gt;24/7 recording&lt;/li&gt; 
 &lt;li&gt;Re-streaming via RTSP to reduce the number of connections to your camera&lt;/li&gt; 
 &lt;li&gt;WebRTC &amp;amp; MSE support for low-latency live view&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;View the documentation at &lt;a href="https://docs.frigate.video"&gt;https://docs.frigate.video&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Donations&lt;/h2&gt; 
&lt;p&gt;If you would like to make a donation to support development, please use &lt;a href="https://github.com/sponsors/blakeblackshear"&gt;Github Sponsors&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;h3&gt;Live dashboard&lt;/h3&gt; 
&lt;div&gt; 
 &lt;img width="800" alt="Live dashboard" src="https://github.com/blakeblackshear/frigate/assets/569905/5e713cb9-9db5-41dc-947a-6937c3bc376e"&gt; 
&lt;/div&gt; 
&lt;h3&gt;Streamlined review workflow&lt;/h3&gt; 
&lt;div&gt; 
 &lt;img width="800" alt="Streamlined review workflow" src="https://github.com/blakeblackshear/frigate/assets/569905/6fed96e8-3b18-40e5-9ddc-31e6f3c9f2ff"&gt; 
&lt;/div&gt; 
&lt;h3&gt;Multi-camera scrubbing&lt;/h3&gt; 
&lt;div&gt; 
 &lt;img width="800" alt="Multi-camera scrubbing" src="https://github.com/blakeblackshear/frigate/assets/569905/d6788a15-0eeb-4427-a8d4-80b93cae3d74"&gt; 
&lt;/div&gt; 
&lt;h3&gt;Built-in mask and zone editor&lt;/h3&gt; 
&lt;div&gt; 
 &lt;img width="800" alt="Multi-camera scrubbing" src="https://github.com/blakeblackshear/frigate/assets/569905/d7885fc3-bfe6-452f-b7d0-d957cb3e31f5"&gt; 
&lt;/div&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;We use &lt;a href="https://hosted.weblate.org/projects/frigate-nvr/"&gt;Weblate&lt;/a&gt; to support language translations. Contributions are always welcome.&lt;/p&gt; 
&lt;a href="https://hosted.weblate.org/engage/frigate-nvr/"&gt; &lt;img src="https://hosted.weblate.org/widget/frigate-nvr/multi-auto.svg?sanitize=true" alt="Translation status"&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>ethereum/solidity</title>
      <link>https://github.com/ethereum/solidity</link>
      <description>&lt;p&gt;Solidity, the Smart Contract Programming Language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Solidity Contract-Oriented Programming Language&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://matrix.to/#/%23ethereum_solidity:gitter.im"&gt;&lt;img src="https://img.shields.io/badge/Matrix%20-chat-brightgreen?style=plastic&amp;amp;logo=matrix" alt="Matrix Chat"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/ethereum/solidity"&gt;&lt;img src="https://img.shields.io/badge/Gitter%20-chat-brightgreen?style=plastic&amp;amp;logo=gitter" alt="Gitter Chat"&gt;&lt;/a&gt; &lt;a href="https://forum.soliditylang.org/"&gt;&lt;img src="https://img.shields.io/badge/Solidity_Forum%20-discuss-brightgreen?style=plastic&amp;amp;logo=discourse" alt="Solidity&amp;nbsp;Forum"&gt;&lt;/a&gt; &lt;a href="https://X.com/solidity_lang"&gt;&lt;img src="https://img.shields.io/twitter/follow/solidity_lang?style=plastic&amp;amp;logo=x" alt="X Follow"&gt;&lt;/a&gt; &lt;a href="https://fosstodon.org/@solidity"&gt;&lt;img src="https://img.shields.io/mastodon/follow/000335908?domain=https%3A%2F%2Ffosstodon.org%2F&amp;amp;logo=mastodon&amp;amp;style=plastic" alt="Mastodon Follow"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can talk to us on Gitter and Matrix, tweet at us on X (previously Twitter) or create a new topic in the Solidity forum. Questions, feedback, and suggestions are welcome!&lt;/p&gt; 
&lt;p&gt;Solidity is a statically-typed, contract-oriented, high-level language for implementing smart contracts on the Ethereum platform.&lt;/p&gt; 
&lt;p&gt;For a good overview and starting point, please check out the official &lt;a href="https://soliditylang.org"&gt;Solidity Language Portal&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/#background"&gt;Background&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/#build-and-install"&gt;Build and Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/#example"&gt;Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/#development"&gt;Development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/#maintainers"&gt;Maintainers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/#security"&gt;Security&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;p&gt;Solidity is a statically-typed curly-braces programming language designed for developing smart contracts that run on the Ethereum Virtual Machine. Smart contracts are programs that are executed inside a peer-to-peer network where nobody has special authority over the execution, and thus they allow anyone to implement tokens of value, ownership, voting, and other kinds of logic.&lt;/p&gt; 
&lt;p&gt;When deploying contracts, you should use the latest released version of Solidity. This is because breaking changes, as well as new features and bug fixes, are introduced regularly. We currently use a 0.x version number &lt;a href="https://semver.org/#spec-item-4"&gt;to indicate this fast pace of change&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Build and Install&lt;/h2&gt; 
&lt;p&gt;Instructions about how to build and install the Solidity compiler can be found in the &lt;a href="https://docs.soliditylang.org/en/latest/installing-solidity.html#building-from-source"&gt;Solidity documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;A "Hello World" program in Solidity is of even less use than in other languages, but still:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-solidity"&gt;// SPDX-License-Identifier: MIT
pragma solidity &amp;gt;=0.6.0 &amp;lt;0.9.0;

contract HelloWorld {
    function helloWorld() external pure returns (string memory) {
        return "Hello, World!";
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get started with Solidity, you can use &lt;a href="https://remix.ethereum.org/"&gt;Remix&lt;/a&gt;, which is a browser-based IDE. Here are some example contracts:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://docs.soliditylang.org/en/latest/solidity-by-example.html#voting"&gt;Voting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.soliditylang.org/en/latest/solidity-by-example.html#blind-auction"&gt;Blind Auction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.soliditylang.org/en/latest/solidity-by-example.html#safe-remote-purchase"&gt;Safe remote purchase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.soliditylang.org/en/latest/solidity-by-example.html#micropayment-channel"&gt;Micropayment Channel&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The Solidity documentation is hosted using &lt;a href="https://docs.soliditylang.org"&gt;Read the Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;Solidity is still under development. Contributions are always welcome! Please follow the &lt;a href="https://docs.soliditylang.org/en/latest/contributing.html"&gt;Developer's Guide&lt;/a&gt; if you want to help.&lt;/p&gt; 
&lt;p&gt;You can find our current feature and bug priorities for forthcoming releases in the &lt;a href="https://github.com/ethereum/solidity/projects"&gt;projects section&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;p&gt;The Solidity programming language and compiler are open-source community projects governed by a core team. The core team is sponsored by the &lt;a href="https://ethereum.foundation/"&gt;Ethereum Foundation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Solidity is licensed under &lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/LICENSE.txt"&gt;GNU General Public License v3.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Some third-party code has its &lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/cmake/templates/license.h.in"&gt;own licensing terms&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;The security policy may be &lt;a href="https://raw.githubusercontent.com/ethereum/solidity/develop/SECURITY.md"&gt;found here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python-poetry/poetry</title>
      <link>https://github.com/python-poetry/poetry</link>
      <description>&lt;p&gt;Python packaging and dependency management made easy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Poetry: Python packaging and dependency management made easy&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://python-poetry.org/badge/v0.json" alt="Poetry"&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/poetry/#history"&gt;&lt;img src="https://img.shields.io/pypi/v/poetry?label=stable" alt="Stable Version"&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/poetry/#history"&gt;&lt;img src="https://img.shields.io/github/v/release/python-poetry/poetry?label=pre-release&amp;amp;include_prereleases&amp;amp;sort=semver" alt="Pre-release Version"&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/poetry/"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/poetry" alt="Python Versions"&gt;&lt;/a&gt; &lt;a href="https://pypistats.org/packages/poetry"&gt;&lt;img src="https://img.shields.io/pypi/dm/poetry" alt="Download Stats"&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/awxPgve"&gt;&lt;img src="https://img.shields.io/discord/487711540787675139?logo=discord" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Poetry helps you declare, manage and install dependencies of Python projects, ensuring you have the right stack everywhere.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/python-poetry/poetry/main/assets/install.gif" alt="Poetry Install"&gt;&lt;/p&gt; 
&lt;p&gt;Poetry replaces &lt;code&gt;setup.py&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt;, &lt;code&gt;MANIFEST.in&lt;/code&gt; and &lt;code&gt;Pipfile&lt;/code&gt; with a simple &lt;code&gt;pyproject.toml&lt;/code&gt; based project format.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[project]
name = "my-package"
version = "0.1.0"
description = "The description of the package"

license = { text = "MIT" }
readme = "README.md"

# No python upper bound for package metadata
requires-python = "&amp;gt;=3.9"

authors = [
    { name = "SeÃÅbastien Eustace", email = "sebastien@eustace.io" },
]

# Keywords (translated to tags on the package index)
keywords = ["packaging", "poetry"]

dependencies = [
    # equivalent to ^3.8.1 with semver constraints
    "aiohttp (&amp;gt;=3.8.1,&amp;lt;4.0.0)",
    # dependency with extras
    "requests[security] (&amp;gt;=2.28,&amp;lt;3.0)",
    # version-specific dependency with prereleases allowed (see below)
    "tomli (&amp;gt;=2.0.1,&amp;lt;3.0.0) ; python_version &amp;lt; '3.11'",
    # git dependency with branch specified
    "cleo @ git+https://github.com/python-poetry/cleo.git@main",
]

[project.urls]
repository = "https://github.com/python-poetry/poetry"
homepage = "https://python-poetry.org"

# Scripts are easily expressed
[project.scripts]
my_package_cli = 'my_package.console:run'

[project.optional-dependencies]
# optional dependency to be installed via 'poetry install -E my-extra'
my-extra = ["pendulum (&amp;gt;=3.1.0,&amp;lt;4.0.0)"]

[tool.poetry.dependencies]
# Python upper bound for locking
python = "&amp;gt;=3.9,&amp;lt;4.0"
# Version-specific dependencies with prereleases allowed
tomli = { allow-prereleases = true }

# Dependency groups are supported for organizing your dependencies
[tool.poetry.group.dev.dependencies]
pytest = "^7.1.2"
pytest-cov = "^3.0"

# ...and can be installed only when explicitly requested
# via 'poetry install --with docs'
[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
Sphinx = "^5.1.1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Poetry supports multiple installation methods, including a simple script found at &lt;a href="https://install.python-poetry.org"&gt;install.python-poetry.org&lt;/a&gt;. For full installation instructions, including advanced usage of the script, alternate install methods, and CI best practices, see the full &lt;a href="https://python-poetry.org/docs/#installation"&gt;installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://python-poetry.org/docs/"&gt;Documentation&lt;/a&gt; for the current version of Poetry (as well as the development branch and recently out of support versions) is available from the &lt;a href="https://python-poetry.org"&gt;official website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;Poetry is a large, complex project always in need of contributors. For those new to the project, a list of &lt;a href="https://github.com/python-poetry/poetry/contribute"&gt;suggested issues&lt;/a&gt; to work on in Poetry and poetry-core is available. The full &lt;a href="https://python-poetry.org/docs/contributing"&gt;contributing documentation&lt;/a&gt; also provides helpful guidance.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/poetry/#history"&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://python-poetry.org"&gt;Official Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://python-poetry.org/docs/"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python-poetry/poetry/issues"&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.com/invite/awxPgve"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python-poetry/poetry-core"&gt;poetry-core&lt;/a&gt;: PEP 517 build-system for Poetry projects, and dependency-free core functionality of the Poetry frontend&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python-poetry/poetry-plugin-export"&gt;poetry-plugin-export&lt;/a&gt;: Export Poetry projects/lock files to foreign formats like requirements.txt&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python-poetry/poetry-plugin-bundle"&gt;poetry-plugin-bundle&lt;/a&gt;: Install Poetry projects/lock files to external formats like virtual environments&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python-poetry/install.python-poetry.org"&gt;install.python-poetry.org&lt;/a&gt;: The official Poetry installation script&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/python-poetry/website"&gt;website&lt;/a&gt;: The official Poetry website and blog&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supporters&lt;/h2&gt; 
&lt;p&gt;Thanks to &lt;a href="https://www.jetbrains.com"&gt;JetBrains&lt;/a&gt; for supporting us with licenses for their tools.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.jetbrains.com"&gt;&lt;img src="https://resources.jetbrains.com/storage/products/company/brand/logos/jetbrains.svg?sanitize=true" width="150" alt="JetBrains logo."&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MaaAssistantArknights/MaaAssistantArknights</title>
      <link>https://github.com/MaaAssistantArknights/MaaAssistantArknights</link>
      <description>&lt;p&gt;„ÄäÊòéÊó•ÊñπËàü„ÄãÂ∞èÂä©ÊâãÔºåÂÖ®Êó•Â∏∏‰∏ÄÈîÆÈïøËçâÔºÅ| A one-click tool for the daily tasks of Arknights, supporting all clients.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img alt="LOGO" src="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/docs/.vuepress/public/images/maa-logo_512x512.png" width="256" height="256"&gt; 
 &lt;h1&gt;MaaAssistantArknights&lt;/h1&gt; 
 &lt;br&gt; 
 &lt;div&gt; 
  &lt;img alt="C++" src="https://img.shields.io/badge/C++-20-%2300599C?logo=cplusplus"&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img alt="platform" src="https://img.shields.io/badge/platform-Windows%20%7C%20Linux%20%7C%20macOS-blueviolet"&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img alt="license" src="https://img.shields.io/github/license/MaaAssistantArknights/MaaAssistantArknights"&gt; 
  &lt;img alt="commit" src="https://img.shields.io/github/commit-activity/m/MaaAssistantArknights/MaaAssistantArknights?color=%23ff69b4"&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img alt="stars" src="https://img.shields.io/github/stars/MaaAssistantArknights/MaaAssistantArknights?style=social"&gt; 
  &lt;img alt="GitHub all releases" src="https://img.shields.io/github/downloads/MaaAssistantArknights/MaaAssistantArknights/total?style=social"&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;!-- markdownlint-restore --&gt; 
 &lt;p&gt;&lt;a href="https://maa.plus/docs/zh-cn/"&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; | &lt;a href="https://maa.plus/docs/zh-tw/"&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/a&gt; | &lt;a href="https://maa.plus/docs/en-us/"&gt;English&lt;/a&gt; | &lt;a href="https://maa.plus/docs/ja-jp/"&gt;Êó•Êú¨Ë™û&lt;/a&gt; | &lt;a href="https://maa.plus/docs/ko-kr/"&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;MAA ÁöÑÊÑèÊÄùÊòØ MAA Assistant Arknights&lt;/p&gt; 
 &lt;p&gt;‰∏ÄÊ¨æÊòéÊó•ÊñπËàüÊ∏∏ÊàèÂ∞èÂä©Êâã&lt;/p&gt; 
 &lt;p&gt;Âü∫‰∫éÂõæÂÉèËØÜÂà´ÊäÄÊúØÔºå‰∏ÄÈîÆÂÆåÊàêÂÖ®ÈÉ®Êó•Â∏∏‰ªªÂä°ÔºÅ&lt;/p&gt; 
 &lt;p&gt;ÁªùËµûÊõ¥Êñ∞‰∏≠ ‚úø‚úø„ÉΩ(¬∞‚ñΩ¬∞)„Éé‚úø&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;‰∏ãËΩΩ‰∏éÂÆâË£Ö&lt;/h2&gt; 
&lt;p&gt;ËØ∑ÈòÖËØª &lt;a href="https://maa.plus/docs/zh-cn/manual/newbie.html"&gt;ÊñáÊ°£&lt;/a&gt; ÂêéÂâçÂæÄ &lt;a href="https://maa.plus"&gt;ÂÆòÁΩë&lt;/a&gt; Êàñ &lt;a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/releases"&gt;Releases&lt;/a&gt; ‰∏ãËΩΩÔºåÂπ∂ÂèÇËÄÉ &lt;a href="https://maa.plus/docs/zh-cn/manual/newbie.html"&gt;Êñ∞Êâã‰∏äË∑Ø&lt;/a&gt; ËøõË°åÂÆâË£Ö„ÄÇ&lt;/p&gt; 
&lt;h2&gt;‰∫ÆÁÇπÂäüËÉΩ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Âà∑ÁêÜÊô∫ÔºåÊéâËêΩËØÜÂà´Âèä‰∏ä‰º† &lt;a href="https://penguin-stats.cn/"&gt;‰ºÅÈπÖÁâ©ÊµÅ&lt;/a&gt;Ôºå&lt;a href="https://ark.yituliu.cn/"&gt;‰∏ÄÂõæÊµÅ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Êô∫ËÉΩÂü∫Âª∫Êç¢Áè≠ÔºåËá™Âä®ËÆ°ÁÆóÂπ≤ÂëòÊïàÁéáÔºåÂçïËÆæÊñΩÂÜÖÊúÄ‰ºòËß£ÔºõÂêåÊó∂‰πüÊîØÊåÅ &lt;a href="https://maa.plus/docs/zh-cn/protocol/base-scheduling-schema.html"&gt;Ëá™ÂÆö‰πâÊéíÁè≠&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ëá™Âä®ÂÖ¨ÊãõÔºåÂèØÈÄâ‰ΩøÁî®Âä†ÊÄ•ËÆ∏ÂèØÔºå‰∏ÄÊ¨°ÂÖ®ÈÉ®Âà∑ÂÆåÔºÅÂÖ¨ÊãõÊï∞ÊçÆËá™Âä®‰∏ä‰º† &lt;a href="https://penguin-stats.cn/result/stage/recruit/recruit"&gt;‰ºÅÈπÖÁâ©ÊµÅ&lt;/a&gt;Ôºå&lt;a href="https://ark.yituliu.cn/survey/maarecruitdata"&gt;‰∏ÄÂõæÊµÅ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ÊîØÊåÅÊâãÂä®ËØÜÂà´ÂÖ¨ÊãõÁïåÈù¢ÔºåÊñπ‰æøÂØπÈ´òÊòüÂÖ¨ÊãõÂÅöÂá∫ÈÄâÊã© &lt;del&gt;Ôºà‰Ω†ÁöÑËøô‰∏™È´òËµÑÂõûË¥πÂá∫ÁöÑÊòØÊé®ÁéãÂë¢ËøòÊòØÊé®ÁéãÂë¢Ôºâ&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;ÊîØÊåÅËØÜÂà´Âπ≤ÂëòÂàóË°®ÔºåÁªüËÆ°Â∑≤ÊúâÂíåÊú™ÊúâÂπ≤ÂëòÂèäÊΩúËÉΩÔºåÂπ∂Âú®ÂÖ¨ÊãõËØÜÂà´ÊòæÁ§∫&lt;/li&gt; 
 &lt;li&gt;ÊîØÊåÅËØÜÂà´ÂÖªÊàêÊùêÊñôÔºåÂπ∂ÂØºÂá∫Ëá≥ &lt;a href="https://penguin-stats.cn/planner"&gt;‰ºÅÈπÖÁâ©ÊµÅÂà∑ÂõæËßÑÂàí&lt;/a&gt;„ÄÅ&lt;a href="https://arkntools.app/#/material"&gt;ÊòéÊó•ÊñπËàüÂ∑•ÂÖ∑ÁÆ±&lt;/a&gt;„ÄÅ&lt;a href="https://ark-nights.com/settings"&gt;ARK-NIGHTS Âπ≤ÂëòÂüπÂÖªË°®&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ËÆøÈóÆÂ•ΩÂèã„ÄÅÊî∂Âèñ‰ø°Áî®ÂèäË¥≠Áâ©„ÄÅÈ¢ÜÂèñÊó•Â∏∏Â•ñÂä±Á≠âÔºå‰∏ÄÈîÆÂÖ®Êó•Â∏∏Ëá™Âä®ÈïøËçâ&lt;/li&gt; 
 &lt;li&gt;ËÇâÈ∏ΩÂÖ®Ëá™Âä®Âà∑Ê∫êÁü≥Èî≠ÂíåÁ≠âÁ∫ßÔºåËá™Âä®ÁÉßÊ∞¥ÂíåÂáπÁõ¥ÂçáÔºåÊô∫ËÉΩËØÜÂà´Âπ≤ÂëòÂèäÁªÉÂ∫¶&lt;/li&gt; 
 &lt;li&gt;ÈÄâÊã©‰Ωú‰∏ö JSON Êñá‰ª∂ÔºåËá™Âä®ÊäÑ‰Ωú‰∏öÔºå &lt;a href="https://www.bilibili.com/video/BV1H841177Fk/"&gt;ËßÜÈ¢ëÊºîÁ§∫&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ÊîØÊåÅ C, Python, Java, Rust, Golang, Java HTTP, Rust HTTP Á≠âÂ§öÁßçÊé•Âè£ÔºåÊñπ‰æøÈõÜÊàêË∞ÉÁî®ÔºåËá™ÂÆö‰πâ‰Ω†ÁöÑ MAAÔºÅ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;details&gt;
 &lt;summary&gt;ËØù‰∏çÂ§öËØ¥ÔºåÁúãÂõæÔºÅ&lt;/summary&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="./docs/.vuepress/public/images/zh-cn/readme/1-dark.png"&gt; 
  &lt;img alt="zh1" src="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/docs/.vuepress/public/images/zh-cn/readme/1-light.png"&gt; 
 &lt;/picture&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="./docs/.vuepress/public/images/zh-cn/readme/2-dark.png"&gt; 
  &lt;img alt="zh2" src="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/docs/.vuepress/public/images/zh-cn/readme/2-light.png"&gt; 
 &lt;/picture&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="./docs/.vuepress/public/images/zh-cn/readme/3-dark.png"&gt; 
  &lt;img alt="zh3" src="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/docs/.vuepress/public/images/zh-cn/readme/3-light.png"&gt; 
 &lt;/picture&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="./docs/.vuepress/public/images/zh-cn/readme/4-dark.png"&gt; 
  &lt;img alt="zh4" src="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/docs/.vuepress/public/images/zh-cn/readme/4-light.png"&gt; 
 &lt;/picture&gt; 
&lt;/details&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;h2&gt;‰ΩøÁî®ËØ¥Êòé&lt;/h2&gt; 
&lt;h3&gt;ÂäüËÉΩ‰ªãÁªç&lt;/h3&gt; 
&lt;p&gt;ËØ∑ÂèÇÈòÖ &lt;a href="https://maa.plus/docs/zh-cn/manual/"&gt;Áî®Êà∑ÊâãÂÜå&lt;/a&gt;„ÄÇ&lt;/p&gt; 
&lt;h3&gt;Â§ñÊúçÊîØÊåÅ&lt;/h3&gt; 
&lt;p&gt;ÁõÆÂâçÂõΩÈôÖÊúçÔºàÁæéÊúçÔºâ„ÄÅÊó•Êúç„ÄÅÈü©Êúç„ÄÅÁπÅ‰∏≠ÊúçÁöÑÁªùÂ§ßÈÉ®ÂàÜÂäüËÉΩÂùáÂ∑≤ÊîØÊåÅ„ÄÇ‰ΩÜÁî±‰∫éÂ§ñÊúçÁî®Êà∑ËæÉÂ∞ëÂèäÈ°πÁõÆ‰∫∫Êâã‰∏çË∂≥ÔºåÂæàÂ§öÂäüËÉΩÂπ∂Ê≤°ÊúâËøõË°åÂÖ®Èù¢ÁöÑÊµãËØïÔºåÊâÄ‰ª•ËØ∑Ëá™Ë°å‰ΩìÈ™å„ÄÇ&lt;br&gt; Ëã•ÊÇ®ÈÅáÂà∞‰∫Ü BugÔºåÊàñÂØπÊüê‰∏™ÂäüËÉΩÊúâÂº∫ÈúÄÊ±ÇÔºåÊ¨¢ËøéÂú® &lt;a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/issues"&gt;Issues&lt;/a&gt; Âíå &lt;a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/discussions"&gt;ËÆ®ËÆ∫Âå∫&lt;/a&gt; ÂÇ¨Êõ¥ÔºõÊàñÂä†ÂÖ•Êàë‰ª¨‰∏ÄËµ∑Âª∫ËÆæ MAAÔºÅËØ∑ÂèÇÈòÖ &lt;a href="https://maa.plus/docs/zh-cn/develop/overseas-client-adaptation.html"&gt;Â§ñÊúçÈÄÇÈÖçÊïôÁ®ã&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;CLI ÊîØÊåÅ&lt;/h3&gt; 
&lt;p&gt;MAA ÊîØÊåÅÂëΩ‰ª§Ë°åÁïåÈù¢ÔºàCLIÔºâÊìç‰ΩúÔºåÊîØÊåÅ LinuxÔºåmacOS Âíå WindowsÔºåÂèØÁî®‰∫éËá™Âä®ÂåñËÑöÊú¨ÊàñÂú®Êó†ÂõæÂΩ¢ÁïåÈù¢ÁöÑÊúçÂä°Âô®‰∏ä‰ΩøÁî®„ÄÇËØ∑ÂèÇÈòÖ &lt;a href="https://maa.plus/docs/zh-cn/manual/cli/"&gt;CLI ‰ΩøÁî®ÊåáÂçó&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Âä†ÂÖ•Êàë‰ª¨&lt;/h2&gt; 
&lt;h3&gt;‰∏ªË¶ÅÂÖ≥ËÅîÈ°πÁõÆ&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;ÁõÆÂâçÈ°πÁõÆÁªÑÈùûÂ∏∏Áº∫ÂâçÁ´ØÂ§ß‰Ω¨ÔºåËã•ÊÇ®ÊúâÁõ∏ÂÖ≥ÁªèÈ™åÔºåÊ¨¢ËøéÂä†ÂÖ•Êàë‰ª¨ÔºÅ&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÂÖ®Êñ∞Ê°ÜÊû∂Ôºö&lt;a href="https://github.com/MaaXYZ/MaaFramework"&gt;MaaFramework&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://prts.plus"&gt;‰Ωú‰∏öÁ´ô&lt;/a&gt; ÂâçÁ´ØÔºö&lt;a href="https://github.com/MaaAssistantArknights/maa-copilot-frontend"&gt;maa-copilot-frontend&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://prts.plus"&gt;‰Ωú‰∏öÁ´ô&lt;/a&gt; ÂêéÁ´ØÔºö&lt;a href="https://github.com/MaaAssistantArknights/MaaBackendCenter"&gt;MaaBackendCenter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://maa.plus"&gt;ÂÆòÁΩë&lt;/a&gt;Ôºö&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/website"&gt;ÂâçÁ´Ø&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ê∑±Â∫¶Â≠¶‰π†Ôºö&lt;a href="https://github.com/MaaAssistantArknights/MaaAI"&gt;MaaAI&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Â§öËØ≠Ë®Ä (i18n)&lt;/h3&gt; 
&lt;p&gt;MAA ÊîØÊåÅÂ§öÂõΩËØ≠Ë®ÄÔºåÂπ∂‰ΩøÁî® Weblate ËøõË°åÊú¨Âú∞ÂåñÁÆ°ÁêÜ„ÄÇÂ¶ÇÊûúÊÇ®ÈÄöÊôìÂ§öÈó®ËØ≠Ë®ÄÔºåÊ¨¢ËøéÂâçÂæÄ &lt;a href="https://weblate.maa-org.net"&gt;MAA Weblate&lt;/a&gt; Â∏ÆÂä©Êàë‰ª¨ËøõË°åÁøªËØë„ÄÇ&lt;/p&gt; 
&lt;p&gt;MAA ‰ª•‰∏≠ÊñáÔºàÁÆÄ‰ΩìÔºâ‰∏∫Á¨¨‰∏ÄËØ≠Ë®ÄÔºåÁøªËØëËØçÊù°Âùá‰ª•‰∏≠ÊñáÔºàÁÆÄ‰ΩìÔºâ‰∏∫ÂáÜ„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://weblate.maa-org.net/engage/maa/"&gt;&lt;img src="https://weblate.maa-org.net/widget/maa/wpf-gui/multi-auto.svg?sanitize=true" alt="Weblate"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;ÂèÇ‰∏éÂºÄÂèë&lt;/h3&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;ËØ∑ÂèÇÈòÖ &lt;a href="https://maa.plus/docs/zh-cn/develop/development.html"&gt;ÂºÄÂßãÂºÄÂèë&lt;/a&gt;„ÄÇ&lt;/p&gt; 
&lt;h4&gt;Linux | macOS&lt;/h4&gt; 
&lt;p&gt;ËØ∑ÂèÇÈòÖ &lt;a href="https://maa.plus/docs/zh-cn/develop/linux-tutorial.html"&gt;Linux ÁºñËØëÊïôÁ®ã&lt;/a&gt;„ÄÇ&lt;/p&gt; 
&lt;h4&gt;API&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/include/AsstCaller.h"&gt;C Êé•Âè£&lt;/a&gt;Ôºö&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Cpp/main.cpp"&gt;ÈõÜÊàêÁ§∫‰æã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Python/asst/asst.py"&gt;Python Êé•Âè£&lt;/a&gt;Ôºö&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Python/sample.py"&gt;ÈõÜÊàêÁ§∫‰æã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Golang"&gt;Golang Êé•Âè£&lt;/a&gt;Ôºö&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Golang/maa/maa.go"&gt;ÈõÜÊàêÁ§∫‰æã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Dart"&gt;Dart Êé•Âè£&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Java/src/main/java/com/iguigui/maaj/easySample/MaaCore.java"&gt;Java Êé•Âè£&lt;/a&gt;Ôºö&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Java/src/main/java/com/iguigui/maaj/easySample/MaaJavaSample.java"&gt;ÈõÜÊàêÁ§∫‰æã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Java/Readme.md"&gt;Java HTTP Êé•Âè£&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Rust/src/maa_sys"&gt;Rust Êé•Âè£&lt;/a&gt;Ôºö&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Rust"&gt;HTTP Êé•Âè£&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MaaAssistantArknights/MaaX/tree/main/packages/main/coreLoader"&gt;TypeScript Êé•Âè£&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Woolang/maa.wo"&gt;Woolang Êé•Âè£&lt;/a&gt;Ôºö&lt;a href="https://raw.githubusercontent.com/MaaAssistantArknights/MaaAssistantArknights/dev/src/Woolang/demo.wo"&gt;ÈõÜÊàêÁ§∫‰æã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://maa.plus/docs/zh-cn/protocol/integration.html"&gt;ÈõÜÊàêÊñáÊ°£&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://maa.plus/docs/zh-cn/protocol/callback-schema.html"&gt;ÂõûË∞ÉÊ∂àÊÅØÂçèËÆÆ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://maa.plus/docs/zh-cn/protocol/task-schema.html"&gt;‰ªªÂä°ÊµÅÁ®ãÂçèËÆÆ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://maa.plus/docs/zh-cn/protocol/copilot-schema.html"&gt;Ëá™Âä®ÊäÑ‰Ωú‰∏öÂçèËÆÆ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Â§ñÊúçÈÄÇÈÖç&lt;/h4&gt; 
&lt;p&gt;ËØ∑ÂèÇÈòÖ &lt;a href="https://maa.plus/docs/zh-cn/develop/overseas-client-adaptation.html"&gt;Â§ñÊúçÈÄÇÈÖçÊïôÁ®ã&lt;/a&gt;ÔºåÂØπ‰∫éÂõΩÊúçÂ∑≤ÊîØÊåÅÁöÑÂäüËÉΩÔºåÁªùÂ§ßÈÉ®ÂàÜÁöÑÂ§ñÊúçÈÄÇÈÖçÂ∑•‰Ωú‰ªÖÈúÄË¶ÅÊà™Âõæ + ÁÆÄÂçïÁöÑ JSON ‰øÆÊîπÂç≥ÂèØ„ÄÇ&lt;/p&gt; 
&lt;h4&gt;ÊÉ≥ÂèÇ‰∏éÂºÄÂèëÔºå‰ΩÜ‰∏çÂ§™‰ºöÁî® GitHub?&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://maa.plus/docs/zh-cn/develop/development.html#github-pull-request-%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0"&gt;GitHub Pull Request ÊµÅÁ®ãÁÆÄËø∞&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Issue bot&lt;/h4&gt; 
&lt;p&gt;ËØ∑ÂèÇÈòÖ &lt;a href="https://maa.plus/docs/zh-cn/develop/issue-bot-usage.html"&gt;Issue Bot ‰ΩøÁî®ÊñπÊ≥ï&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Ëá¥Ë∞¢&lt;/h2&gt; 
&lt;h3&gt;ÂºÄÊ∫êÂ∫ì&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÂõæÂÉèËØÜÂà´Â∫ìÔºö&lt;a href="https://github.com/opencv/opencv.git"&gt;opencv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;ÊñáÂ≠óËØÜÂà´Â∫ìÔºö&lt;a href="https://github.com/DayBreak-u/chineseocr_lite.git"&gt;chineseocr_lite&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;ÊñáÂ≠óËØÜÂà´Â∫ìÔºö&lt;a href="https://github.com/PaddlePaddle/PaddleOCR"&gt;PaddleOCR&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ê∑±Â∫¶Â≠¶‰π†ÈÉ®ÁΩ≤Â∫ìÔºö&lt;a href="https://github.com/PaddlePaddle/FastDeploy"&gt;FastDeploy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Êú∫Âô®Â≠¶‰π†Âä†ÈÄüÂô®Ôºö&lt;a href="https://github.com/microsoft/onnxruntime"&gt;onnxruntime&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;ÂÖ≥Âç°ÊéâËêΩËØÜÂà´Ôºö&lt;a href="https://github.com/penguin-statistics/recognizer"&gt;‰ºÅÈπÖÁâ©ÊµÅËØÜÂà´&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;Âú∞ÂõæÊ†ºÂ≠êËØÜÂà´Ôºö&lt;a href="https://github.com/yuanyan3060/Arknights-Tile-Pos"&gt;Arknights-Tile-Pos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;C++ JSON Â∫ìÔºö&lt;a href="https://github.com/MistEO/meojson.git"&gt;meojson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;C++ ËøêÁÆóÁ¨¶Ëß£ÊûêÂô®Ôºö&lt;a href="https://github.com/kimwalisch/calculator"&gt;calculator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C++ base64 ÁºñËß£Á†ÅÔºö&lt;a href="https://github.com/ReneNyffenegger/cpp-base64"&gt;cpp-base64&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;C++ Ëß£ÂéãÂéãÁº©Â∫ìÔºö&lt;a href="https://github.com/madler/zlib"&gt;zlib&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;C++ Gzip Â∞ÅË£ÖÔºö&lt;a href="https://github.com/mapbox/gzip-hpp"&gt;gzip-hpp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ÂÆâÂçìËß¶Êéß‰∫ã‰ª∂Âô®Ôºö&lt;a href="https://github.com/DeviceFarmer/minitouch"&gt;Minitouch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ÂÆâÂçìËß¶Êéß‰∫ã‰ª∂Âô®Ôºö&lt;a href="https://github.com/MaaAssistantArknights/MaaTouch"&gt;MaaTouch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WPF MVVM Ê°ÜÊû∂Ôºö&lt;a href="https://github.com/canton7/Stylet"&gt;Stylet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WPF Êéß‰ª∂Â∫ìÔºö&lt;a href="https://github.com/HandyOrg/HandyControl"&gt;HandyControl&lt;/a&gt; -&amp;gt; &lt;a href="https://github.com/ghost1372/HandyControls"&gt;HandyControls&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;C# Êó•ÂøóÔºö&lt;a href="https://github.com/serilog/serilog"&gt;Serilog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;C# JSON Â∫ìÔºö&lt;a href="https://github.com/JamesNK/Newtonsoft.Json"&gt;Newtonsoft.Json&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/dotnet/runtime"&gt;System.Text.Json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;‰∏ãËΩΩÂô®Ôºö&lt;a href="https://github.com/aria2/aria2"&gt;aria2&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Êï∞ÊçÆÊ∫ê&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;ÂÖ¨ÂºÄÊãõÂãüÊï∞ÊçÆÔºö&lt;a href="https://www.bigfun.cn/tools/aktools/hr"&gt;ÊòéÊó•ÊñπËàüÂ∑•ÂÖ∑ÁÆ±&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;Âπ≤ÂëòÂèäÂü∫Âª∫Êï∞ÊçÆÔºö&lt;a href="http://prts.wiki/"&gt;PRTS Wiki&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;ÂÖ≥Âç°Êï∞ÊçÆÔºö&lt;a href="https://penguin-stats.cn/"&gt;‰ºÅÈπÖÁâ©ÊµÅÊï∞ÊçÆÁªüËÆ°&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ê∏∏ÊàèÊï∞ÊçÆÂèäËµÑÊ∫êÔºö&lt;a href="https://github.com/yuanyan3060/ArknightsGameResource"&gt;ÊòéÊó•ÊñπËàüÂÆ¢Êà∑Á´ØÁ¥†Êùê&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ê∏∏ÊàèÊï∞ÊçÆÔºö&lt;a href="https://github.com/ArknightsAssets/ArknightsGamedata"&gt;„ÄäÊòéÊó•ÊñπËàü„ÄãYostarÊ∏∏ÊàèÊï∞ÊçÆ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Ë¥°ÁåÆ/ÂèÇ‰∏éËÄÖ&lt;/h3&gt; 
&lt;p&gt;ÊÑüË∞¢ÊâÄÊúâÂèÇ‰∏éÂà∞ÂºÄÂèë/ÊµãËØï‰∏≠ÁöÑÊúãÂèã‰ª¨ÔºåÊòØÂ§ßÂÆ∂ÁöÑÂ∏ÆÂä©ËÆ© MAA Ë∂äÊù•Ë∂äÂ•ΩÔºÅ (*¬¥‚ñΩÔΩÄ)„Éé„Éé&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/graphs/contributors"&gt;&lt;img src="https://contributors-img.web.app/image?repo=MaaAssistantArknights/MaaAssistantArknights&amp;amp;max=105&amp;amp;columns=15" alt="Contributors"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Â£∞Êòé&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Êú¨ËΩØ‰ª∂‰ΩøÁî® &lt;a href="https://spdx.org/licenses/AGPL-3.0-only.html"&gt;GNU Affero General Public License v3.0 only&lt;/a&gt; ÂºÄÊ∫êÔºåÂπ∂ÈôÑÂ∏¶È¢ùÂ§ñ &lt;a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/raw/dev/terms-of-service.md"&gt;Áî®Êà∑ÂçèËÆÆ&lt;/a&gt;„ÄÇ&lt;/li&gt; 
 &lt;li&gt;Êú¨ËΩØ‰ª∂ logo Âπ∂Èùû‰ΩøÁî® AGPL 3.0 ÂçèËÆÆÂºÄÊ∫êÔºå&lt;a href="https://weibo.com/u/3251357314"&gt;ËÄóÊØõ&lt;/a&gt;„ÄÅvie ‰∏§‰ΩçÁîªÂ∏àÂèäËΩØ‰ª∂ÂÖ®‰ΩìÂºÄÂèëËÄÖ‰øùÁïôÊâÄÊúâÊùÉÂà©„ÄÇ‰∏çÂæó‰ª• AGPL 3.0 ÂçèËÆÆÂ∑≤ÊéàÊùÉ‰∏∫Áî±Âú®Êú™ÁªèÊéàÊùÉÁöÑÊÉÖÂÜµ‰∏ã‰ΩøÁî®Êú¨ËΩØ‰ª∂ logoÔºå‰∏çÂæóÂú®Êú™ÁªèÊéàÊùÉÁöÑÊÉÖÂÜµ‰∏ãÂ∞ÜÊú¨ËΩØ‰ª∂ logo Áî®‰∫é‰ªª‰ΩïÂïÜ‰∏öÁî®ÈÄî„ÄÇ&lt;/li&gt; 
 &lt;li&gt;Êú¨ËΩØ‰ª∂ÂºÄÊ∫ê„ÄÅÂÖçË¥πÔºå‰ªÖ‰æõÂ≠¶‰π†‰∫§ÊµÅ‰ΩøÁî®„ÄÇËã•ÊÇ®ÈÅáÂà∞ÂïÜÂÆ∂‰ΩøÁî®Êú¨ËΩØ‰ª∂ËøõË°å‰ª£ÁªÉÂπ∂Êî∂Ë¥πÔºåÂèØËÉΩÊòØËÆæÂ§á‰∏éÊó∂Èó¥Á≠âË¥πÁî®Ôºå‰∫ßÁîüÁöÑÈóÆÈ¢òÂèäÂêéÊûú‰∏éÊú¨ËΩØ‰ª∂Êó†ÂÖ≥„ÄÇ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;DirectML ÊîØÊåÅËØ¥Êòé&lt;/h3&gt; 
&lt;p&gt;Êú¨ËΩØ‰ª∂ÊîØÊåÅ GPU Âä†ÈÄüÂäüËÉΩÔºåÂÖ∂Âú® Windows Âπ≥Âè∞‰∏ä‰æùËµñ‰∫é Microsoft Êèê‰æõÁöÑÁã¨Á´ãÁªÑ‰ª∂ &lt;a href="https://learn.microsoft.com/en-us/windows/ai/directml/"&gt;DirectML&lt;/a&gt;„ÄÇDirectML Âπ∂ÈùûÊú¨È°πÁõÆÁöÑÂºÄÊ∫êÈÉ®ÂàÜÔºå‰πü‰∏çÂèó AGPL 3.0 ÁöÑÁ∫¶Êùü„ÄÇ‰∏∫Êñπ‰æøÁî®Êà∑ÔºåÊàë‰ª¨ÈöèÂÆâË£ÖÂåÖÈôÑÂ∏¶‰∫Ü‰∏Ä‰∏™Êú™Áªè‰øÆÊîπÁöÑ DirectML.dll Êñá‰ª∂„ÄÇÂ¶ÇÊûúÊÇ®Êó†ÈúÄ GPU Âä†ÈÄüÂäüËÉΩÔºåÂèØÂÆâÂÖ®Âà†Èô§ËØ• DLL Êñá‰ª∂ÔºåËΩØ‰ª∂ÁöÑÊ†∏ÂøÉÂäüËÉΩ‰ªçÂèØÊ≠£Â∏∏ËøêË°å„ÄÇ&lt;/p&gt; 
&lt;h2&gt;ÂπøÂëä&lt;/h2&gt; 
&lt;p&gt;Áî®Êà∑‰∫§ÊµÅ QQ Áæ§Ôºö&lt;a href="https://api.maa.plus/MaaAssistantArknights/api/qqgroup/index.html"&gt;MAA ‰ΩøÁî® &amp;amp; Á≤•Ê∏∏‰∫§ÊµÅ QQ Áæ§&lt;/a&gt;&lt;br&gt; Discord ÊúçÂä°Âô®: &lt;a href="https://discord.gg/23DfZ9uA4V"&gt;ÈÇÄËØ∑ÈìæÊé•&lt;/a&gt;&lt;br&gt; Áî®Êà∑‰∫§ÊµÅ TG Áæ§Ôºö&lt;a href="https://t.me/+Mgc2Zngr-hs3ZjU1"&gt;Telegram Áæ§&lt;/a&gt;&lt;br&gt; Ëá™Âä®ÊàòÊñó JSON ‰Ωú‰∏öÂàÜ‰∫´Ôºö&lt;a href="https://prts.plus"&gt;prts.plus&lt;/a&gt;&lt;br&gt; Bilibili Áõ¥Êí≠Èó¥Ôºö&lt;a href="https://live.bilibili.com/2808861"&gt;MrEO Áõ¥Êí≠Èó¥&lt;/a&gt; Áõ¥Êí≠Êï≤‰ª£Á†Å &amp;amp; &lt;a href="https://live.bilibili.com/27548877"&gt;MAA-Official Áõ¥Êí≠Èó¥&lt;/a&gt; Ê∏∏Êàè/ÊùÇË∞à&lt;/p&gt; 
&lt;p&gt;ÊäÄÊúØÁæ§ÔºàËàüÊó†ÂÖ≥„ÄÅÁ¶ÅÊ∞¥ÔºâÔºö&lt;a href="https://jq.qq.com/?_wv=1027&amp;amp;k=ypbzXcA2"&gt;ÂÜÖÂç∑Âú∞Áã±ÔºÅ(QQ Áæ§)&lt;/a&gt;&lt;br&gt; ÂºÄÂèëËÄÖÁæ§Ôºö&lt;a href="https://jq.qq.com/?_wv=1027&amp;amp;k=JM9oCk3C"&gt;QQ Áæ§&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Â¶ÇÊûúËßâÂæóËΩØ‰ª∂ÂØπ‰Ω†ÊúâÂ∏ÆÂä©ÔºåÂ∏ÆÂøôÁÇπ‰∏™ Star ÂêßÔºÅ~ÔºàÁΩëÈ°µÊúÄ‰∏äÊñπÂè≥‰∏äËßíÁöÑÂ∞èÊòüÊòüÔºâÔºåËøôÂ∞±ÊòØÂØπÊàë‰ª¨ÊúÄÂ§ßÁöÑÊîØÊåÅ‰∫ÜÔºÅ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>browserbase/stagehand</title>
      <link>https://github.com/browserbase/stagehand</link>
      <description>&lt;p&gt;The AI Browser Automation Framework&lt;/p&gt;&lt;hr&gt;&lt;div id="toc" align="center" style="margin-bottom: 0;"&gt; 
 &lt;ul style="list-style: none; margin: 0; padding: 0;"&gt; 
  &lt;a href="https://stagehand.dev"&gt; 
   &lt;picture&gt; 
    &lt;source media="(prefers-color-scheme: dark)" srcset="media/dark_logo.png"&gt; 
    &lt;img alt="Stagehand" src="https://raw.githubusercontent.com/browserbase/stagehand/main/media/light_logo.png" width="200" style="margin-right: 30px;"&gt; 
   &lt;/picture&gt; &lt;/a&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;strong&gt;The AI Browser Automation Framework&lt;/strong&gt;&lt;br&gt; &lt;a href="https://docs.stagehand.dev"&gt;Read the Docs&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/browserbase/stagehand/tree/main?tab=MIT-1-ov-file#MIT-1-ov-file"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="media/dark_license.svg"&gt; 
   &lt;img alt="MIT License" src="https://raw.githubusercontent.com/browserbase/stagehand/main/media/light_license.svg?sanitize=true"&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;a href="https://join.slack.com/t/stagehand-dev/shared_invite/zt-38khc8iv5-T2acb50_0OILUaX7lxeBOg"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="media/dark_slack.svg"&gt; 
   &lt;img alt="Slack Community" src="https://raw.githubusercontent.com/browserbase/stagehand/main/media/light_slack.svg?sanitize=true"&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://trendshift.io/repositories/12122" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/12122" alt="browserbase%2Fstagehand | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; If you're looking for the Python implementation, you can find it &lt;a href="https://github.com/browserbase/stagehand-python"&gt; here&lt;/a&gt; &lt;/p&gt; 
&lt;div align="center" style="display: flex; align-items: center; justify-content: center; gap: 4px; margin-bottom: 0;"&gt; 
 &lt;b&gt;Vibe code&lt;/b&gt; 
 &lt;span style="font-size: 1.05em;"&gt; Stagehand with &lt;/span&gt; 
 &lt;a href="https://director.ai" style="display: flex; align-items: center;"&gt; &lt;span&gt;Director&lt;/span&gt; &lt;/a&gt; 
 &lt;span&gt; &lt;/span&gt; 
 &lt;picture&gt; 
  &lt;img alt="Director" src="https://raw.githubusercontent.com/browserbase/stagehand/main/media/director_icon.svg?sanitize=true" width="25"&gt; 
 &lt;/picture&gt; 
&lt;/div&gt; 
&lt;h2&gt;Why Stagehand?&lt;/h2&gt; 
&lt;p&gt;Most existing browser automation tools either require you to write low-level code in a framework like Selenium, Playwright, or Puppeteer, or use high-level agents that can be unpredictable in production. By letting developers choose what to write in code vs. natural language, Stagehand is the natural choice for browser automations in production.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Choose when to write code vs. natural language&lt;/strong&gt;: use AI when you want to navigate unfamiliar pages, and use code (&lt;a href="https://playwright.dev/"&gt;Playwright&lt;/a&gt;) when you know exactly what you want to do.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Preview and cache actions&lt;/strong&gt;: Stagehand lets you preview AI actions before running them, and also helps you easily cache repeatable actions to save time and tokens.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Computer use models with one line of code&lt;/strong&gt;: Stagehand lets you integrate SOTA computer use models from OpenAI and Anthropic into the browser with one line of code.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;Here's how to build a sample browser automation with Stagehand:&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;div style="max-width:300px;"&gt; 
  &lt;img src="https://raw.githubusercontent.com/browserbase/stagehand/main/media/github_demo.gif" alt="See Stagehand in Action"&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;// Use Playwright functions on the page object
const page = stagehand.page;
await page.goto("https://github.com/browserbase");

// Use act() to execute individual actions
await page.act("click on the stagehand repo");

// Use Computer Use agents for larger actions
const agent = stagehand.agent({
    provider: "openai",
    model: "computer-use-preview",
});
await agent.execute("Get to the latest PR");

// Use extract() to read data from the page
const { author, title } = await page.extract({
  instruction: "extract the author and title of the PR",
  schema: z.object({
    author: z.string().describe("The username of the PR author"),
    title: z.string().describe("The title of the PR"),
  }),
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href="https://docs.stagehand.dev"&gt;docs.stagehand.dev&lt;/a&gt; to view the full documentation.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Start with Stagehand with one line of code, or check out our &lt;a href="https://docs.stagehand.dev/get_started/quickstart"&gt;Quickstart Guide&lt;/a&gt; for more information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx create-browser-app
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.loom.com/share/f5107f86d8c94fa0a8b4b1e89740f7a7"&gt; &lt;p&gt;Watch Anirudh demo create-browser-app to create a Stagehand project!&lt;/p&gt; &lt;/a&gt; 
 &lt;a href="https://www.loom.com/share/f5107f86d8c94fa0a8b4b1e89740f7a7"&gt; &lt;img style="max-width:300px;" src="https://cdn.loom.com/sessions/thumbnails/f5107f86d8c94fa0a8b4b1e89740f7a7-ec3f428b6775ceeb-full-play.gif"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h3&gt;Build and Run from Source&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/browserbase/stagehand.git
cd stagehand
pnpm install
pnpm playwright install
pnpm run build
pnpm run example # run the blank script at ./examples/example.ts
pnpm run example 2048 # run the 2048 example at ./examples/2048.ts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Stagehand is best when you have an API key for an LLM provider and Browserbase credentials. To add these to your project, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cp .env.example .env
nano .env # Edit the .env file to add API keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br&gt; We highly value contributions to Stagehand! For questions or support, please join our &lt;a href="https://join.slack.com/t/stagehand-dev/shared_invite/zt-38khc8iv5-T2acb50_0OILUaX7lxeBOg"&gt;Slack community&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;At a high level, we're focused on improving reliability, speed, and cost in that order of priority. If you're interested in contributing, we strongly recommend reaching out to &lt;a href="https://x.com/miguel_gonzf"&gt;Miguel Gonzalez&lt;/a&gt; or &lt;a href="https://x.com/pk_iv"&gt;Paul Klein&lt;/a&gt; in our &lt;a href="https://join.slack.com/t/stagehand-dev/shared_invite/zt-38khc8iv5-T2acb50_0OILUaX7lxeBOg"&gt;Slack community&lt;/a&gt; before starting to ensure that your contribution aligns with our goals.&lt;/p&gt; 
&lt;p&gt;For more information, please see our &lt;a href="https://docs.stagehand.dev/examples/contributing"&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;This project heavily relies on &lt;a href="https://playwright.dev/"&gt;Playwright&lt;/a&gt; as a resilient backbone to automate the web. It also would not be possible without the awesome techniques and discoveries made by &lt;a href="https://github.com/reworkd/tarsier"&gt;tarsier&lt;/a&gt;, &lt;a href="https://github.com/jbeoris/gemini-zod"&gt;gemini-zod&lt;/a&gt;, and &lt;a href="https://github.com/normal-computing/fuji-web"&gt;fuji-web&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We'd like to thank the following people for their major contributions to Stagehand:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pkiv"&gt;Paul Klein&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kamath"&gt;Anirudh Kamath&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/seanmcguire12"&gt;Sean McGuire&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/miguelg719"&gt;Miguel Gonzalez&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sameelarif"&gt;Sameel Arif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/filip-michalsky"&gt;Filip Michalsky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/jeremypress"&gt;Jeremy Press&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/navidpour"&gt;Navid Pour&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under the MIT License.&lt;/p&gt; 
&lt;p&gt;Copyright 2025 Browserbase, Inc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nautechsystems/nautilus_trader</title>
      <link>https://github.com/nautechsystems/nautilus_trader</link>
      <description>&lt;p&gt;A high-performance algorithmic trading platform and event-driven backtester&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader-logo.png" width="500"&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://codecov.io/gh/nautechsystems/nautilus_trader"&gt;&lt;img src="https://codecov.io/gh/nautechsystems/nautilus_trader/branch/master/graph/badge.svg?token=DXO9QQI40H" alt="codecov"&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/nautechsystems/nautilus_trader"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="codspeed"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/pypi/pyversions/nautilus_trader" alt="pythons"&gt; &lt;img src="https://img.shields.io/pypi/v/nautilus_trader" alt="pypi-version"&gt; &lt;img src="https://img.shields.io/pypi/format/nautilus_trader?color=blue" alt="pypi-format"&gt; &lt;a href="https://pepy.tech/project/nautilus-trader"&gt;&lt;img src="https://pepy.tech/badge/nautilus-trader" alt="Downloads"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NautilusTrader"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Branch&lt;/th&gt; 
   &lt;th align="left"&gt;Version&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fmaster%2Fversion.json" alt="version"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly" alt="build"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fnightly%2Fversion.json" alt="version"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly" alt="build"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fdevelop%2Fversion.json" alt="version"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=develop" alt="build"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Rust&lt;/th&gt; 
   &lt;th align="left"&gt;Python&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13*&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;* Windows builds are currently pinned to CPython 3.13.2, see &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/docs/getting_started/installation.md"&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href="https://nautilustrader.io/docs/"&gt;https://nautilustrader.io/docs/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: &lt;a href="mailto:support@nautilustrader.io"&gt;support@nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is an open-source, high-performance, production-grade algorithmic trading platform, providing quantitative traders with the ability to backtest portfolios of automated trading strategies on historical data with an event-driven engine, and also deploy those same strategies live, with no code changes.&lt;/p&gt; 
&lt;p&gt;The platform is &lt;em&gt;AI-first&lt;/em&gt;, designed to develop and deploy algorithmic trading strategies within a highly performant and robust Python-native environment. This helps to address the parity challenge of keeping the Python research/backtest environment consistent with the production live trading environment.&lt;/p&gt; 
&lt;p&gt;NautilusTrader's design, architecture, and implementation philosophy prioritizes software correctness and safety at the highest level, with the aim of supporting Python-native, mission-critical, trading system backtesting and live deployment workloads.&lt;/p&gt; 
&lt;p&gt;The platform is also universal, and asset-class-agnostic ‚Äî with any REST API or WebSocket feed able to be integrated via modular adapters. It supports high-frequency trading across a wide range of asset classes and instrument types including FX, Equities, Futures, Options, Crypto and Betting, enabling seamless operations across multiple venues simultaneously.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader.png" alt="nautilus-trader" title="nautilus-trader"&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Core is written in Rust with asynchronous networking using &lt;a href="https://crates.io/crates/tokio"&gt;tokio&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Rust-powered type- and thread-safety, with optional Redis-backed state persistence.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt;: OS independent, runs on Linux, macOS, and Windows. Deploy using Docker.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Modular adapters mean any REST API or WebSocket feed can be integrated.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt;: Time in force &lt;code&gt;IOC&lt;/code&gt;, &lt;code&gt;FOK&lt;/code&gt;, &lt;code&gt;GTC&lt;/code&gt;, &lt;code&gt;GTD&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, &lt;code&gt;AT_THE_OPEN&lt;/code&gt;, &lt;code&gt;AT_THE_CLOSE&lt;/code&gt;, advanced order types and conditional triggers. Execution instructions &lt;code&gt;post-only&lt;/code&gt;, &lt;code&gt;reduce-only&lt;/code&gt;, and icebergs. Contingency orders including &lt;code&gt;OCO&lt;/code&gt;, &lt;code&gt;OUO&lt;/code&gt;, &lt;code&gt;OTO&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Add user-defined custom components, or assemble entire systems from scratch leveraging the &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; and &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtesting&lt;/strong&gt;: Run with multiple venues, instruments and strategies simultaneously using historical quote tick, trade tick, bar, order book and custom data with nanosecond resolution.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: Use identical strategy implementations between backtesting and live deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-venue&lt;/strong&gt;: Multiple venue capabilities facilitate market-making and statistical arbitrage strategies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Training&lt;/strong&gt;: Backtest engine fast enough to be used to train AI trading agents (RL/ES).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-art.png" alt="Alt text" title="nautilus"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;nautilus - from ancient Greek 'sailor' and naus 'ship'.&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;The nautilus shell consists of modular chambers with a growth factor which approximates a logarithmic spiral. The idea is that this can be translated to the aesthetics of design and architecture.&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Why NautilusTrader?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Highly performant event-driven Python&lt;/strong&gt;: Native binary core components.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parity between backtesting and live trading&lt;/strong&gt;: Identical strategy code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reduced operational risk&lt;/strong&gt;: Enhanced risk management functionality, logical accuracy, and type safety.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly extendable&lt;/strong&gt;: Message bus, custom components and actors, custom data, custom adapters.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Traditionally, trading strategy research and backtesting might be conducted in Python using vectorized methods, with the strategy then needing to be reimplemented in a more event-driven way using C++, C#, Java or other statically typed language(s). The reasoning here is that vectorized backtesting code cannot express the granular time and event dependent complexity of real-time trading, where compiled languages have proven to be more suitable due to their inherently higher performance, and type safety.&lt;/p&gt; 
&lt;p&gt;One of the key advantages of NautilusTrader here, is that this reimplementation step is now circumvented - as the critical core components of the platform have all been written entirely in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; or &lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;. This means we're using the right tools for the job, where systems programming languages compile performant binaries, with CPython C extension modules then able to offer a Python-native environment, suitable for professional quantitative traders and trading firms.&lt;/p&gt; 
&lt;h2&gt;Why Python?&lt;/h2&gt; 
&lt;p&gt;Python was originally created decades ago as a simple scripting language with a clean straightforward syntax. It has since evolved into a fully fledged general purpose object-oriented programming language. Based on the TIOBE index, Python is currently the most popular programming language in the world. Not only that, Python has become the &lt;em&gt;de facto lingua franca&lt;/em&gt; of data science, machine learning, and artificial intelligence.&lt;/p&gt; 
&lt;p&gt;developer/user communities. However, Python has performance and typing limitations for large-scale, latency-sensitive systems. Cython addresses many of these issues by introducing static typing into Python's rich ecosystem of libraries and communities.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is "blazingly fast" and memory-efficient (comparable to C and C++) with no garbage collector. It can power mission-critical systems, run on embedded devices, and easily integrates with other languages.&lt;/p&gt; 
&lt;p&gt;Rust‚Äôs rich type system and ownership model guarantees memory-safety and thread-safety deterministically ‚Äî eliminating many classes of bugs at compile-time.&lt;/p&gt; 
&lt;p&gt;The project increasingly utilizes Rust for core performance-critical components. Python bindings are implemented via Cython and &lt;a href="https://pyo3.rs"&gt;PyO3&lt;/a&gt;‚Äîno Rust toolchain is required at install time.&lt;/p&gt; 
&lt;p&gt;This project makes the &lt;a href="https://raphlinus.github.io/rust/2020/01/18/soundness-pledge.html"&gt;Soundness Pledge&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ÄúThe intent of this project is to be free of soundness bugs. The developers will do their best to avoid them, and welcome help in analyzing and fixing them.‚Äù&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; NautilusTrader relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally equal to the latest stable release of Rust.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is modularly designed to work with &lt;em&gt;adapters&lt;/em&gt;, enabling connectivity to trading venues and data providers by translating their raw APIs into a unified interface and normalized domain model.&lt;/p&gt; 
&lt;p&gt;The following integrations are currently supported; see &lt;a href="https://nautilustrader.io/docs/latest/integrations/"&gt;docs/integrations/&lt;/a&gt; for details:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Name&lt;/th&gt; 
   &lt;th align="left"&gt;ID&lt;/th&gt; 
   &lt;th align="left"&gt;Type&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
   &lt;th align="left"&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://betfair.com"&gt;Betfair&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BETFAIR&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Sports Betting Exchange&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/betfair.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://binance.com"&gt;Binance&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://binance.us"&gt;Binance US&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.binance.com/en/futures"&gt;Binance Futures&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.bybit.com"&gt;Bybit&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BYBIT&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/bybit.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.coinbase.com/en/international-exchange"&gt;Coinbase International&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;COINBASE_INTX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/coinbase_intx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://databento.com"&gt;Databento&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DATABENTO&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/databento.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://dydx.exchange/"&gt;dYdX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DYDX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/dydx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://hyperliquid.xyz"&gt;Hyperliquid&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;HYPERLIQUID&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/building-orange" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/hyperliquid.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.interactivebrokers.com"&gt;Interactive Brokers&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;INTERACTIVE_BROKERS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Brokerage (multi-venue)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/ib.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://okx.com"&gt;OKX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;OKX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/beta-yellow" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/okx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://polymarket.com"&gt;Polymarket&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;POLYMARKET&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Prediction Market (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/polymarket.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://tardis.dev"&gt;Tardis&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;TARDIS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/tardis.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ID&lt;/strong&gt;: The default client ID for the integrations adapter clients.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: The type of integration (often the venue type).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;building&lt;/code&gt;: Under construction and likely not in a usable state.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;beta&lt;/code&gt;: Completed to a minimally working state and in a beta testing phase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: Stabilized feature set and API, the integration has been tested by both developers and users to a reasonable level (some bugs may still remain).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/integrations/index.html"&gt;Integrations&lt;/a&gt; documentation for further details.&lt;/p&gt; 
&lt;h2&gt;Versioning and releases&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;NautilusTrader is still under active development&lt;/strong&gt;. Some features may be incomplete, and while the API is becoming more stable, breaking changes can occur between releases. We strive to document these changes in the release notes on a &lt;strong&gt;best-effort basis&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;We aim to follow a &lt;strong&gt;bi-weekly release schedule&lt;/strong&gt;, though experimental or larger features may cause delays.&lt;/p&gt; 
&lt;h3&gt;Branches&lt;/h3&gt; 
&lt;p&gt;We aim to maintain a stable, passing build across all branches.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: Reflects the source code for the latest released version; recommended for production use.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;: Daily snapshots of the &lt;code&gt;develop&lt;/code&gt; branch for early testing; merged at &lt;strong&gt;14:00 UTC&lt;/strong&gt; or on demand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt;: Active development branch for contributors and feature work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Our &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md"&gt;roadmap&lt;/a&gt; aims to achieve a &lt;strong&gt;stable API for version 2.x&lt;/strong&gt; (likely after the Rust port). Once this milestone is reached, we plan to implement a formal deprecation process for any API changes. This approach allows us to maintain a rapid development pace for now.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Precision mode&lt;/h2&gt; 
&lt;p&gt;NautilusTrader supports two precision modes for its core value types (&lt;code&gt;Price&lt;/code&gt;, &lt;code&gt;Quantity&lt;/code&gt;, &lt;code&gt;Money&lt;/code&gt;), which differ in their internal bit-width and maximum decimal precision.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High-precision&lt;/strong&gt;: 128-bit integers with up to 16 decimals of precision, and a larger value range.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Standard-precision&lt;/strong&gt;: 64-bit integers with up to 9 decimals of precision, and a smaller value range.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;By default, the official Python wheels &lt;strong&gt;ship&lt;/strong&gt; in high-precision (128-bit) mode on Linux and macOS. On Windows, only standard-precision (64-bit) is available due to the lack of native 128-bit integer support. For the Rust crates, the default is standard-precision unless you explicitly enable the &lt;code&gt;high-precision&lt;/code&gt; feature flag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Rust feature flag&lt;/strong&gt;: To enable high-precision mode in Rust, add the &lt;code&gt;high-precision&lt;/code&gt; feature to your Cargo.toml:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
nautilus_model = { version = "*", features = ["high-precision"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;We recommend using the latest supported version of Python and installing &lt;a href="https://pypi.org/project/nautilus_trader/"&gt;nautilus_trader&lt;/a&gt; inside a virtual environment to isolate dependencies.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;There are two supported ways to install&lt;/strong&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Pre-built binary wheel from PyPI &lt;em&gt;or&lt;/em&gt; the Nautech Systems package index.&lt;/li&gt; 
 &lt;li&gt;Build from source.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;We highly recommend installing using the &lt;a href="https://docs.astral.sh/uv"&gt;uv&lt;/a&gt; package manager with a "vanilla" CPython.&lt;/p&gt; 
 &lt;p&gt;Conda and other Python distributions &lt;em&gt;may&lt;/em&gt; work but aren‚Äôt officially supported.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;From PyPI&lt;/h3&gt; 
&lt;p&gt;To install the latest binary wheel (or sdist package) from PyPI using Python's pip package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From the Nautech Systems package index&lt;/h3&gt; 
&lt;p&gt;The Nautech Systems package index (&lt;code&gt;packages.nautechsystems.io&lt;/code&gt;) complies with &lt;a href="https://peps.python.org/pep-0503/"&gt;PEP-503&lt;/a&gt; and hosts both stable and development binary wheels for &lt;code&gt;nautilus_trader&lt;/code&gt;. This enables users to install either the latest stable release or pre-release versions for testing.&lt;/p&gt; 
&lt;h4&gt;Stable wheels&lt;/h4&gt; 
&lt;p&gt;Stable wheels correspond to official releases of &lt;code&gt;nautilus_trader&lt;/code&gt; on PyPI, and use standard versioning.&lt;/p&gt; 
&lt;p&gt;To install the latest stable release:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Development wheels&lt;/h4&gt; 
&lt;p&gt;Development wheels are published from both the &lt;code&gt;nightly&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branches, allowing users to test features and fixes ahead of stable releases.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Wheels from the &lt;code&gt;develop&lt;/code&gt; branch are only built for the Linux x86_64 platform to save time and compute resources, while &lt;code&gt;nightly&lt;/code&gt; wheels support additional platforms as shown below.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Nightly&lt;/th&gt; 
   &lt;th align="left"&gt;Develop&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;‚úì&lt;/td&gt; 
   &lt;td align="left"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;‚úì&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;‚úì&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;‚úì&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;This process also helps preserve compute resources and ensures easy access to the exact binaries tested in CI pipelines, while adhering to &lt;a href="https://peps.python.org/pep-0440/"&gt;PEP-440&lt;/a&gt; versioning standards:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; wheels use the version format &lt;code&gt;dev{date}+{build_number}&lt;/code&gt; (e.g., &lt;code&gt;1.208.0.dev20241212+7001&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; wheels use the version format &lt;code&gt;a{date}&lt;/code&gt; (alpha) (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;We do not recommend using development wheels in production environments, such as live trading controlling real capital.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Installation commands&lt;/h4&gt; 
&lt;p&gt;By default, pip will install the latest stable release. Adding the &lt;code&gt;--pre&lt;/code&gt; flag ensures that pre-release versions, including development wheels, are considered.&lt;/p&gt; 
&lt;p&gt;To install the latest available pre-release (including development wheels):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --pre --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install a specific development wheel (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt; for December 12, 2024):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install nautilus_trader==1.208.0a20241212 --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Available versions&lt;/h4&gt; 
&lt;p&gt;You can view all available versions of &lt;code&gt;nautilus_trader&lt;/code&gt; on the &lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;package index&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To programmatically fetch and list available versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -s https://packages.nautechsystems.io/simple/nautilus-trader/index.html | grep -oP '(?&amp;lt;=&amp;lt;a href=")[^"]+(?=")' | awk -F'#' '{print $1}' | sort
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Branch updates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): Build and publish continuously with every merged commit.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): Build and publish daily when we automatically merge the &lt;code&gt;develop&lt;/code&gt; branch at &lt;strong&gt;14:00 UTC&lt;/strong&gt; (if there are changes).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Retention policies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): We retain only the most recent wheel build.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): We retain only the 10 most recent wheel builds.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;From Source&lt;/h3&gt; 
&lt;p&gt;It's possible to install from source using pip if you first install the build dependencies as specified in the &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt; (the Rust toolchain installer):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl https://sh.rustup.rs -sSf | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Download and install &lt;a href="https://win.rustup.rs/x86_64"&gt;&lt;code&gt;rustup-init.exe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;Install "Desktop development with C++" with &lt;a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16"&gt;Build Tools for Visual Studio 2019&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;rustc --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;cargo&lt;/code&gt; in the current shell:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Start a new PowerShell&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://clang.llvm.org/"&gt;clang&lt;/a&gt; (a C language frontend for LLVM):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get install clang
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ol&gt; 
     &lt;li&gt; &lt;p&gt;Add Clang to your &lt;a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16"&gt;Build Tools for Visual Studio 2019&lt;/a&gt;:&lt;/p&gt; 
      &lt;ul&gt; 
       &lt;li&gt;Start | Visual Studio Installer | Modify | C++ Clang tools for Windows (12.0.0 - x64‚Ä¶) = checked | Modify&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;clang&lt;/code&gt; in the current shell:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-powershell"&gt;[System.Environment]::SetEnvironmentVariable('path', "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\Llvm\x64\bin\;" + $env:Path,"User")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;clang --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install uv (see the &lt;a href="https://docs.astral.sh/uv/getting-started/installation"&gt;uv installation guide&lt;/a&gt; for more details):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the source with &lt;code&gt;git&lt;/code&gt;, and install from the project's root directory:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;git clone --branch develop --depth 1 https://github.com/nautechsystems/nautilus_trader
cd nautilus_trader
uv sync --all-extras
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;--depth 1&lt;/code&gt; flag fetches just the latest commit for a faster, lightweight clone.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start="6"&gt; 
 &lt;li&gt; &lt;p&gt;Set environment variables for PyO3 compilation (Linux and macOS only):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Set the library path for the Python interpreter (in this case Python 3.13.4)
export LD_LIBRARY_PATH="$HOME/.local/share/uv/python/cpython-3.13.4-linux-x86_64-gnu/lib:$LD_LIBRARY_PATH"

# Set the Python executable path for PyO3
export PYO3_PYTHON=$(pwd)/.venv/bin/python
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Adjust the Python version and architecture in the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to match your system. Use &lt;code&gt;uv python list&lt;/code&gt; to find the exact path for your Python installation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for other options and further details.&lt;/p&gt; 
&lt;h2&gt;Redis&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href="https://redis.io"&gt;Redis&lt;/a&gt; with NautilusTrader is &lt;strong&gt;optional&lt;/strong&gt; and only required if configured as the backend for a &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; database or &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;. See the &lt;strong&gt;Redis&lt;/strong&gt; section of the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation#redis"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h2&gt;Makefile&lt;/h2&gt; 
&lt;p&gt;A &lt;code&gt;Makefile&lt;/code&gt; is provided to automate most installation and build tasks for development. Some of the targets include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;make install&lt;/code&gt;: Installs in &lt;code&gt;release&lt;/code&gt; build mode with all dependency groups and extras.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-debug&lt;/code&gt;: Same as &lt;code&gt;make install&lt;/code&gt; but with &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-just-deps&lt;/code&gt;: Installs just the &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; dependencies (does not install package).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;: Runs the build script in &lt;code&gt;release&lt;/code&gt; build mode (default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-debug&lt;/code&gt;: Runs the build script in &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;release&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel-debug&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;debug&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make cargo-test&lt;/code&gt;: Runs all Rust crate tests using &lt;code&gt;cargo-nextest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Deletes all build results, such as &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt; files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make distclean&lt;/code&gt;: &lt;strong&gt;CAUTION&lt;/strong&gt; Removes all artifacts not in the git index from the repository. This includes source files which have not been &lt;code&gt;git add&lt;/code&gt;ed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make docs&lt;/code&gt;: Builds the documentation HTML using Sphinx.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pre-commit&lt;/code&gt;: Runs the pre-commit checks over all files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make ruff&lt;/code&gt;: Runs ruff over all files using the &lt;code&gt;pyproject.toml&lt;/code&gt; config (with autofix).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pytest&lt;/code&gt;: Runs all tests with &lt;code&gt;pytest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make test-performance&lt;/code&gt;: Runs performance tests with &lt;a href="https://codspeed.io"&gt;codspeed&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make help&lt;/code&gt; for documentation on all available make targets.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;See the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/crates/infrastructure/TESTS.md"&gt;crates/infrastructure/TESTS.md&lt;/a&gt; file for running the infrastructure integration tests.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Indicators and strategies can be developed in both Python and Cython. For performance and latency-sensitive applications, we recommend using Cython. Below are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/indicators/ema_python.py"&gt;indicator&lt;/a&gt; example written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/indicators/"&gt;indicator&lt;/a&gt; examples written in Cython.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/strategies/"&gt;strategy&lt;/a&gt; examples written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/examples/backtest/"&gt;backtest&lt;/a&gt; examples using a &lt;code&gt;BacktestEngine&lt;/code&gt; directly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;p&gt;Docker containers are built using the base image &lt;code&gt;python:3.12-slim&lt;/code&gt; with the following variant tags:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:latest&lt;/code&gt; has the latest release version installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:latest&lt;/code&gt; has the latest release version installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can pull the container images as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/&amp;lt;image_variant_tag&amp;gt; --platform linux/amd64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can launch the backtest example container by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/jupyterlab:nightly --platform linux/amd64
docker run -p 8888:8888 ghcr.io/nautechsystems/jupyterlab:nightly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open your browser at the following address:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;http://127.0.0.1:8888/lab
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader currently exceeds the rate limit for Jupyter notebook logging (stdout output). Therefore, we set the &lt;code&gt;log_level&lt;/code&gt; to &lt;code&gt;ERROR&lt;/code&gt; in the examples. Lowering this level to see more logging will cause the notebook to hang during cell execution. We are investigating a fix that may involve either raising the configured rate limits for Jupyter or throttling the log flushing from Nautilus.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab/issues/12845"&gt;https://github.com/jupyterlab/jupyterlab/issues/12845&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/deshaw/jupyterlab-limit-output"&gt;https://github.com/deshaw/jupyterlab-limit-output&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;We aim to provide the most pleasant developer experience possible for this hybrid codebase of Python, Cython and Rust. See the &lt;a href="https://nautilustrader.io/docs/latest/developer_guide/index.html"&gt;Developer Guide&lt;/a&gt; for helpful information.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make build-debug&lt;/code&gt; to compile after changes to Rust or Cython code for the most efficient development workflow.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Testing with Rust&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://nexte.st"&gt;cargo-nextest&lt;/a&gt; is the standard Rust test runner for NautilusTrader. Its key benefit is isolating each test in its own process, ensuring test reliability by avoiding interference.&lt;/p&gt; 
&lt;p&gt;You can install cargo-nextest by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install cargo-nextest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run Rust tests with &lt;code&gt;make cargo-test&lt;/code&gt;, which uses &lt;strong&gt;cargo-nextest&lt;/strong&gt; with an efficient profile.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you for considering contributing to NautilusTrader! We welcome any and all help to improve the project. If you have an idea for an enhancement or a bug fix, the first step is to open an &lt;a href="https://github.com/nautechsystems/nautilus_trader/issues"&gt;issue&lt;/a&gt; on GitHub to discuss it with the team. This helps to ensure that your contribution will be well-aligned with the goals of the project and avoids duplication of effort.&lt;/p&gt; 
&lt;p&gt;Before getting started, be sure to review the &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md#open-source-scope"&gt;open-source scope&lt;/a&gt; outlined in the project‚Äôs roadmap to understand what‚Äôs in and out of scope.&lt;/p&gt; 
&lt;p&gt;Once you're ready to start working on your contribution, make sure to follow the guidelines outlined in the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file. This includes signing a Contributor License Agreement (CLA) to ensure that your contributions can be included in the project.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Pull requests should target the &lt;code&gt;develop&lt;/code&gt; branch (the default branch). This is where new features and improvements are integrated before release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Thank you again for your interest in NautilusTrader! We look forward to reviewing your contributions and working with you to improve the project.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our community of users and contributors on &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord&lt;/a&gt; to chat and stay up-to-date with the latest announcements and features of NautilusTrader. Whether you're a developer looking to contribute or just want to learn more about the platform, all are welcome on our Discord server.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader does not issue, promote, or endorse any cryptocurrency tokens. Any claims or communications suggesting otherwise are unauthorized and false.&lt;/p&gt; 
 &lt;p&gt;All official updates and communications from NautilusTrader will be shared exclusively through &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;, our &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord server&lt;/a&gt;, or our X (Twitter) account: &lt;a href="https://x.com/NautilusTrader"&gt;@NautilusTrader&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;If you encounter any suspicious activity, please report it to the appropriate platform and contact us at &lt;a href="mailto:info@nautechsystems.io"&gt;info@nautechsystems.io&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The source code for NautilusTrader is available on GitHub under the &lt;a href="https://www.gnu.org/licenses/lgpl-3.0.en.html"&gt;GNU Lesser General Public License v3.0&lt;/a&gt;. Contributions to the project are welcome and require the completion of a standard &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CLA.md"&gt;Contributor License Agreement (CLA)&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;NautilusTrader‚Ñ¢ is developed and maintained by Nautech Systems, a technology company specializing in the development of high-performance trading systems. For more information, visit &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;¬© 2015-2025 Nautech Systems Pty Ltd. All rights reserved.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ns-logo.png" alt="nautechsystems" title="nautechsystems"&gt; &lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ferris.png" width="128"&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dyad-sh/dyad</title>
      <link>https://github.com/dyad-sh/dyad</link>
      <description>&lt;p&gt;Free, local, open-source AI app builder ‚ú® v0 / lovable / Bolt alternative üåü Star if you like it!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dyad&lt;/h1&gt; 
&lt;p&gt;Dyad is a local, open-source AI app builder. It's fast, private, and fully under your control ‚Äî like Lovable, v0, or Bolt, but running right on your machine.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://dyad.sh/"&gt;&lt;img src="https://github.com/user-attachments/assets/f6c83dfc-6ffd-4d32-93dd-4b9c46d17790" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;More info at: &lt;a href="http://dyad.sh/"&gt;http://dyad.sh/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;üöÄ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚ö°Ô∏è &lt;strong&gt;Local&lt;/strong&gt;: Fast, private and no lock-in.&lt;/li&gt; 
 &lt;li&gt;üõ† &lt;strong&gt;Bring your own keys&lt;/strong&gt;: Use your own AI API keys ‚Äî no vendor lock-in.&lt;/li&gt; 
 &lt;li&gt;üñ•Ô∏è &lt;strong&gt;Cross-platform&lt;/strong&gt;: Easy to run on Mac or Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üì¶ Download&lt;/h2&gt; 
&lt;p&gt;No sign-up required. Just download and go.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.dyad.sh/#download"&gt;üëâ Download for your platform&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Dyad&lt;/strong&gt; is open-source (Apache 2.0 licensed).&lt;/p&gt; 
&lt;p&gt;If you're interested in contributing to dyad, please read our &lt;a href="https://raw.githubusercontent.com/dyad-sh/dyad/main/CONTRIBUTING.md"&gt;contributing&lt;/a&gt; doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>open-edge-platform/anomalib</title>
      <link>https://github.com/open-edge-platform/anomalib</link>
      <description>&lt;p&gt;An anomaly detection library comprising state-of-the-art algorithms and features such as experiment management, hyper-parameter optimization, and edge inference.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/open-edge-platform/anomalib/main/docs/source/_static/images/logos/anomalib-wide-blue.png" width="600px" alt="Anomalib Logo - A deep learning library for anomaly detection"&gt; 
 &lt;p&gt;&lt;strong&gt;A library for benchmarking, developing and deploying deep learning anomaly detection algorithms&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/open-edge-platform/anomalib/main/#key-features"&gt;Key Features&lt;/a&gt; ‚Ä¢ &lt;a href="https://anomalib.readthedocs.io/en/latest/"&gt;Docs&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/open-edge-platform/anomalib/main/examples/notebooks"&gt;Notebooks&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/open-edge-platform/anomalib/main/LICENSE"&gt;License&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=""&gt;&lt;img src="https://img.shields.io/badge/python-3.10%2B-green" alt="python"&gt;&lt;/a&gt; &lt;a href=""&gt;&lt;img src="https://img.shields.io/badge/pytorch-2.0%2B-orange" alt="pytorch"&gt;&lt;/a&gt; &lt;a href=""&gt;&lt;img src="https://img.shields.io/badge/lightning-2.2%2B-blue" alt="lightning"&gt;&lt;/a&gt; &lt;a href=""&gt;&lt;img src="https://img.shields.io/badge/openvino-2024.0%2B-purple" alt="openvino"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/open-edge-platform/anomalib/actions/workflows/pre_merge.yml"&gt;&lt;img src="https://github.com/open-edge-platform/anomalib/actions/workflows/pre_merge.yml/badge.svg?sanitize=true" alt="Pre-Merge Checks"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/open-edge-platform/anomalib"&gt;&lt;img src="https://codecov.io/gh/open-edge-platform/anomalib/branch/main/graph/badge.svg?token=Z6A07N1BZK" alt="codecov"&gt;&lt;/a&gt; &lt;a href="https://pepy.tech/project/anomalib"&gt;&lt;img src="https://static.pepy.tech/personalized-badge/anomalib?period=total&amp;amp;units=international_system&amp;amp;left_color=grey&amp;amp;right_color=green&amp;amp;left_text=PyPI%20Downloads" alt="Downloads"&gt;&lt;/a&gt; &lt;a href="https://snyk.io/advisor/python/anomalib"&gt;&lt;img src="https://snyk.io/advisor/python/anomalib/badge.svg?sanitize=true" alt="snyk"&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/8330"&gt;&lt;img src="https://www.bestpractices.dev/projects/8330/badge" alt="OpenSSF Best Practices"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://anomalib.readthedocs.io/en/latest/?badge=latest"&gt;&lt;img src="https://readthedocs.org/projects/anomalib/badge/?version=latest" alt="ReadTheDocs"&gt;&lt;/a&gt; &lt;a href="https://gurubase.io/g/anomalib"&gt;&lt;img src="https://img.shields.io/badge/Gurubase-Ask%20Anomalib%20Guru-006BFF" alt="Anomalib - Gurubase docs"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://trendshift.io/repositories/6030" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/6030" alt="open-edge-platform%2Fanomalib | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;üåü &lt;strong&gt;Announcing v2.1.0 Release!&lt;/strong&gt; üåü&lt;/p&gt; 
 &lt;p&gt;We're excited to announce the release of Anomalib v2.1.0! This version brings several state-of-the-art models and anomaly detection datasets. Key features include:&lt;/p&gt; 
 &lt;p&gt;New models :&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;üñºÔ∏è UniNet (CVPR 2025)&lt;/strong&gt;: A contrastive learning-guided unified framework with feature selection for anomaly detection.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;üñºÔ∏è Dinomaly (CVPR 2025)&lt;/strong&gt;: A 'less is more philosophy' encoder-decoder architecture model leveraging pre-trained foundational models.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;üé• Fuvas (ICASSP 2025)&lt;/strong&gt;: Few-shot unsupervised video anomaly segmentation via low-rank factorization of spatio-temporal features.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;New datasets:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;MVTec AD 2&lt;/strong&gt; : A new version of the MVTec AD dataset with 8 categories of industrial anomaly detection.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;MVTec LOCO AD&lt;/strong&gt; : MVTec logical constraints anomaly detection dataset that includes both structural and logical anomalies.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Real-IAD&lt;/strong&gt; : A real-world multi-view dataset for benchmarking versatile industrial anomaly detection.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;VAD dataset&lt;/strong&gt; : Valeo Anomaly Dataset (VAD) showcasing a diverse range of defects, from highly obvious to extremely subtle.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;We value your input! Please share feedback via &lt;a href="https://github.com/open-edge-platform/anomalib/issues"&gt;GitHub Issues&lt;/a&gt; or our &lt;a href="https://github.com/open-edge-platform/anomalib/discussions"&gt;Discussions&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;üëã Introduction&lt;/h1&gt; 
&lt;p&gt;Anomalib is a deep learning library that aims to collect state-of-the-art anomaly detection algorithms for benchmarking on both public and private datasets. Anomalib provides several ready-to-use implementations of anomaly detection algorithms described in the recent literature, as well as a set of tools that facilitate the development and implementation of custom models. The library has a strong focus on visual anomaly detection, where the goal of the algorithm is to detect and/or localize anomalies within images or videos in a dataset. Anomalib is constantly updated with new algorithms and training/inference extensions, so keep checking!&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/open-edge-platform/anomalib/main/docs/source/_static/images/readme.png" width="1000" alt="A prediction made by anomalib"&gt; &lt;/p&gt; 
&lt;h2&gt;Key features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple and modular API and CLI for training, inference, benchmarking, and hyperparameter optimization.&lt;/li&gt; 
 &lt;li&gt;The largest public collection of ready-to-use deep learning anomaly detection algorithms and benchmark datasets.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.lightning.ai/"&gt;&lt;strong&gt;Lightning&lt;/strong&gt;&lt;/a&gt; based model implementations to reduce boilerplate code and limit the implementation efforts to the bare essentials.&lt;/li&gt; 
 &lt;li&gt;The majority of models can be exported to &lt;a href="https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/overview.html"&gt;&lt;strong&gt;OpenVINO&lt;/strong&gt;&lt;/a&gt; Intermediate Representation (IR) for accelerated inference on Intel hardware.&lt;/li&gt; 
 &lt;li&gt;A set of &lt;a href="https://raw.githubusercontent.com/open-edge-platform/anomalib/main/tools"&gt;inference tools&lt;/a&gt; for quick and easy deployment of the standard or custom anomaly detection models.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;üì¶ Installation&lt;/h1&gt; 
&lt;p&gt;Anomalib can be installed from PyPI. We recommend using a virtual environment and a modern package installer like &lt;code&gt;uv&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;üöÄ Quick Install&lt;/h2&gt; 
&lt;p&gt;For a standard installation, you can use &lt;code&gt;uv&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;. This will install the latest version of Anomalib with its core dependencies. PyTorch will be installed based on its default behavior, which usually works for CPU and standard CUDA setups.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With uv
uv pip install anomalib

# Or with pip
pip install anomalib
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more control over the installation, such as specifying the PyTorch backend (e.g., XPU, CUDA and ROCm) or installing extra dependencies for specific models, see the advanced options below.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;üí° Advanced Installation: Specify Hardware Backend&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;To ensure compatibility with your hardware, you can specify a backend during installation. This is the recommended approach for production environments and for hardware other than CPU or standard CUDA.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;uv&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# CPU support (default, works on all platforms)
uv pip install "anomalib[cpu]"

# CUDA 12.4 support (Linux/Windows with NVIDIA GPU)
uv pip install "anomalib[cu124]"

# CUDA 12.1 support (Linux/Windows with NVIDIA GPU)
uv pip install "anomalib[cu121]"

# CUDA 11.8 support (Linux/Windows with NVIDIA GPU)
uv pip install "anomalib[cu118]"

# ROCm support (Linux with AMD GPU)
uv pip install "anomalib[rocm]"

# Intel XPU support (Linux with Intel GPU)
uv pip install "anomalib[xpu]"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;pip&lt;/code&gt;:&lt;/strong&gt; The same extras can be used with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;pip install "anomalib[cu124]"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;üß© Advanced Installation: Additional Dependencies&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Anomalib includes most dependencies by default. For specialized features, you may need additional optional dependencies. Remember to include your hardware-specific extra.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Example: Install with OpenVINO support and CUDA 12.4
uv pip install "anomalib[openvino,cu124]"

# Example: Install all optional dependencies for a CPU-only setup
uv pip install "anomalib[full,cpu]"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Here is a list of available optional dependency groups:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th align="left"&gt;Extra&lt;/th&gt; 
    &lt;th align="left"&gt;Description&lt;/th&gt; 
    &lt;th align="left"&gt;Purpose&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td align="left"&gt;&lt;code&gt;[openvino]&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;Intel OpenVINO optimization&lt;/td&gt; 
    &lt;td align="left"&gt;For accelerated inference on Intel hardware&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align="left"&gt;&lt;code&gt;[clip]&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;Vision-language models&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;winclip&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align="left"&gt;&lt;code&gt;[vlm]&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;Vision-language model backends&lt;/td&gt; 
    &lt;td align="left"&gt;Advanced VLM features&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align="left"&gt;&lt;code&gt;[loggers]&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;Experiment tracking (wandb, comet, etc.)&lt;/td&gt; 
    &lt;td align="left"&gt;For experiment management&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align="left"&gt;&lt;code&gt;[notebooks]&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;Jupyter notebook support&lt;/td&gt; 
    &lt;td align="left"&gt;For running example notebooks&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align="left"&gt;&lt;code&gt;[full]&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;All optional dependencies&lt;/td&gt; 
    &lt;td align="left"&gt;All optional features&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;üîß Advanced Installation: Install from Source&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;For contributing to &lt;code&gt;anomalib&lt;/code&gt; or using a development version, you can install from source.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;uv&lt;/code&gt;:&lt;/strong&gt; This is the recommended method for developers as it uses the project's lock file for reproducible environments.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/open-edge-platform/anomalib.git
cd anomalib

# Create the virtual environment
uv venv

# Sync with the lockfile for a specific backend (e.g., CPU)
uv sync --extra cpu

# Or for a different backend like CUDA 12.4
uv sync --extra cu124

# To set up a full development environment
uv sync --extra dev --extra cpu
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;pip&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/open-edge-platform/anomalib.git
cd anomalib

# Install in editable mode with a specific backend
pip install -e ".[cpu]"

# Install with development dependencies
pip install -e ".[dev,cpu]"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h1&gt;üß† Training&lt;/h1&gt; 
&lt;p&gt;Anomalib supports both API and CLI-based training approaches:&lt;/p&gt; 
&lt;h2&gt;üîå Python API&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from anomalib.data import MVTecAD
from anomalib.models import Patchcore
from anomalib.engine import Engine

# Initialize components
datamodule = MVTecAD()
model = Patchcore()
engine = Engine()

# Train the model
engine.fit(datamodule=datamodule, model=model)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;‚å®Ô∏è Command Line&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Train with default settings
anomalib train --model Patchcore --data anomalib.data.MVTecAD

# Train with custom category
anomalib train --model Patchcore --data anomalib.data.MVTecAD --data.category transistor

# Train with config file
anomalib train --config path/to/config.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;ü§ñ Inference&lt;/h1&gt; 
&lt;p&gt;Anomalib provides multiple inference options including Torch, Lightning, Gradio, and OpenVINO. Here's how to get started:&lt;/p&gt; 
&lt;h2&gt;üîå Python API&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# Load model and make predictions
predictions = engine.predict(
    datamodule=datamodule,
    model=model,
    ckpt_path="path/to/checkpoint.ckpt",
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;‚å®Ô∏è Command Line&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Basic prediction
anomalib predict --model anomalib.models.Patchcore \
                 --data anomalib.data.MVTecAD \
                 --ckpt_path path/to/model.ckpt

# Prediction with results
anomalib predict --model anomalib.models.Patchcore \
                 --data anomalib.data.MVTecAD \
                 --ckpt_path path/to/model.ckpt \
                 --return_predictions
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;üìò &lt;strong&gt;Note:&lt;/strong&gt; For advanced inference options including Gradio and OpenVINO, check our &lt;a href="https://anomalib.readthedocs.io"&gt;Inference Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Training on Intel GPUs&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] Currently, only single GPU training is supported on Intel GPUs. These commands were tested on Arc 750 and Arc 770.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Ensure that you have PyTorch with XPU support installed. For more information, please refer to the &lt;a href="https://pytorch.org/docs/stable/notes/get_start_xpu.html"&gt;PyTorch XPU documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;üîå API&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from anomalib.data import MVTecAD
from anomalib.engine import Engine, SingleXPUStrategy, XPUAccelerator
from anomalib.models import Stfpm

engine = Engine(
    strategy=SingleXPUStrategy(),
    accelerator=XPUAccelerator(),
)
engine.train(Stfpm(), datamodule=MVTecAD())
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;‚å®Ô∏è CLI&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;anomalib train --model Padim --data MVTecAD --trainer.accelerator xpu --trainer.strategy xpu_single
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;‚öôÔ∏è Hyperparameter Optimization&lt;/h1&gt; 
&lt;p&gt;Anomalib supports hyperparameter optimization (HPO) using &lt;a href="https://wandb.ai/"&gt;Weights &amp;amp; Biases&lt;/a&gt; and &lt;a href="https://www.comet.com/"&gt;Comet.ml&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run HPO with Weights &amp;amp; Biases
anomalib hpo --backend WANDB --sweep_config tools/hpo/configs/wandb.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;üìò &lt;strong&gt;Note:&lt;/strong&gt; For detailed HPO configuration, check our &lt;a href="https://open-edge-platform.github.io/anomalib/tutorials/hyperparameter_optimization.html"&gt;HPO Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;üß™ Experiment Management&lt;/h1&gt; 
&lt;p&gt;Track your experiments with popular logging platforms through &lt;a href="https://pytorch-lightning.readthedocs.io/en/stable/extensions/logging.html"&gt;PyTorch Lightning loggers&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;üìä Weights &amp;amp; Biases&lt;/li&gt; 
 &lt;li&gt;üìà Comet.ml&lt;/li&gt; 
 &lt;li&gt;üìâ TensorBoard&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Enable logging in your config file to track:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Hyperparameters&lt;/li&gt; 
 &lt;li&gt;Metrics&lt;/li&gt; 
 &lt;li&gt;Model graphs&lt;/li&gt; 
 &lt;li&gt;Test predictions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;üìò &lt;strong&gt;Note:&lt;/strong&gt; For logging setup, see our &lt;a href="https://open-edge-platform.github.io/anomalib/tutorials/logging.html"&gt;Logging Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;üìä Benchmarking&lt;/h1&gt; 
&lt;p&gt;Evaluate and compare model performance across different datasets:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run benchmarking with default configuration
anomalib benchmark --config tools/experimental/benchmarking/sample.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;üí° &lt;strong&gt;Tip:&lt;/strong&gt; Check individual model performance in their respective README files:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/open-edge-platform/anomalib/main/src/anomalib/models/image/patchcore/README.md#mvtec-ad-dataset"&gt;Patchcore Results&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/open-edge-platform/anomalib/main/src/anomalib/models/"&gt;Other Models&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;‚úçÔ∏è Reference&lt;/h1&gt; 
&lt;p&gt;If you find Anomalib useful in your research or work, please cite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-tex"&gt;@inproceedings{akcay2022anomalib,
  title={Anomalib: A deep learning library for anomaly detection},
  author={Akcay, Samet and Ameln, Dick and Vaidya, Ashwin and Lakshmanan, Barath and Ahuja, Nilesh and Genc, Utku},
  booktitle={2022 IEEE International Conference on Image Processing (ICIP)},
  pages={1706--1710},
  year={2022},
  organization={IEEE}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;üë• Contributing&lt;/h1&gt; 
&lt;p&gt;We welcome contributions! Check out our &lt;a href="https://raw.githubusercontent.com/open-edge-platform/anomalib/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/open-edge-platform/anomalib/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=open-edge-platform/anomalib" alt="Contributors to open-edge-platform/anomalib"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;b&gt;Thank you to all our contributors!&lt;/b&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>simstudioai/sim</title>
      <link>https://github.com/simstudioai/sim</link>
      <description>&lt;p&gt;Sim is an open-source AI agent workflow builder. Sim Studio's interface is a lightweight, intuitive way to quickly build and deploy LLMs that connect with your favorite tools.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/simstudioai/sim/main/apps/sim/public/static/sim.png" alt="Sim Logo" width="500"&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true" alt="License: Apache-2.0"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/Hr4UWYEcTT"&gt;&lt;img src="https://img.shields.io/badge/Discord-Join%20Server-7289DA?logo=discord&amp;amp;logoColor=white" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://x.com/simdotai"&gt;&lt;img src="https://img.shields.io/twitter/follow/simstudioai?style=social" alt="Twitter"&gt;&lt;/a&gt; &lt;a href="https://github.com/simstudioai/sim/pulls"&gt;&lt;img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true" alt="PRs welcome"&gt;&lt;/a&gt; &lt;a href="https://docs.sim.ai"&gt;&lt;img src="https://img.shields.io/badge/Docs-visit%20documentation-blue.svg?sanitize=true" alt="Documentation"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt;Sim&lt;/strong&gt; is a lightweight, user-friendly platform for building AI agent workflows. &lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/simstudioai/sim/main/apps/sim/public/static/demo.gif" alt="Sim Demo" width="800"&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Use our &lt;a href="https://sim.ai"&gt;cloud-hosted version&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Self-host using one of the methods below&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Self-Hosting Options&lt;/h2&gt; 
&lt;h3&gt;Option 1: NPM Package (Simplest)&lt;/h3&gt; 
&lt;p&gt;The easiest way to run Sim locally is using our &lt;a href="https://www.npmjs.com/package/simstudio?activeTab=readme"&gt;NPM package&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx simstudio
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After running these commands, open &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in your browser.&lt;/p&gt; 
&lt;h4&gt;Options&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-p, --port &amp;lt;port&amp;gt;&lt;/code&gt;: Specify the port to run Sim on (default: 3000)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--no-pull&lt;/code&gt;: Skip pulling the latest Docker images&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Requirements&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker must be installed and running on your machine&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Option 2: Docker Compose&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone the repository
git clone https://github.com/simstudioai/sim.git

# Navigate to the project directory
cd sim

# Start Sim
docker compose -f docker-compose.prod.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Access the application at &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Using Local Models&lt;/h4&gt; 
&lt;p&gt;To use local models with Sim:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Pull models using our helper script:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./apps/sim/scripts/ollama_docker.sh pull &amp;lt;model_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Start Sim with local model support:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With NVIDIA GPU support
docker compose --profile local-gpu -f docker-compose.ollama.yml up -d

# Without GPU (CPU only)
docker compose --profile local-cpu -f docker-compose.ollama.yml up -d

# If hosting on a server, update the environment variables in the docker-compose.prod.yml file to include the server's public IP then start again (OLLAMA_URL to i.e. http://1.1.1.1:11434)
docker compose -f docker-compose.prod.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option 3: Dev Containers&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open VS Code with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;Remote - Containers extension&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open the project and click "Reopen in Container" when prompted&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bun run dev:full&lt;/code&gt; in the terminal or use the &lt;code&gt;sim-start&lt;/code&gt; alias 
  &lt;ul&gt; 
   &lt;li&gt;This starts both the main application and the realtime socket server&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Option 4: Manual Setup&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://bun.sh/"&gt;Bun&lt;/a&gt; runtime&lt;/li&gt; 
 &lt;li&gt;PostgreSQL 12+ with &lt;a href="https://github.com/pgvector/pgvector"&gt;pgvector extension&lt;/a&gt; (required for AI embeddings)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sim uses vector embeddings for AI features like knowledge bases and semantic search, which requires the &lt;code&gt;pgvector&lt;/code&gt; PostgreSQL extension.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone and install dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/simstudioai/sim.git
cd sim
bun install
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Set up PostgreSQL with pgvector:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You need PostgreSQL with the &lt;code&gt;vector&lt;/code&gt; extension for embedding support. Choose one option:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Option A: Using Docker (Recommended)&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start PostgreSQL with pgvector extension
docker run --name simstudio-db \
  -e POSTGRES_PASSWORD=your_password \
  -e POSTGRES_DB=simstudio \
  -p 5432:5432 -d \
  pgvector/pgvector:pg17
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Option B: Manual Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install PostgreSQL 12+ and the pgvector extension&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://github.com/pgvector/pgvector#installation"&gt;pgvector installation guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Set up environment:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd apps/sim
cp .env.example .env  # Configure with required variables (DATABASE_URL, BETTER_AUTH_SECRET, BETTER_AUTH_URL)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Update your &lt;code&gt;.env&lt;/code&gt; file with the database URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;DATABASE_URL="postgresql://postgres:your_password@localhost:5432/simstudio"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Set up the database:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bunx drizzle-kit migrate 
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="5"&gt; 
 &lt;li&gt;Start the development servers:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Recommended approach - run both servers together (from project root):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bun run dev:full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This starts both the main Next.js application and the realtime socket server required for full functionality.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Alternative - run servers separately:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Next.js app (from project root):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bun run dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Realtime socket server (from &lt;code&gt;apps/sim&lt;/code&gt; directory in a separate terminal):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd apps/sim
bun run dev:sockets
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tech Stack&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Framework&lt;/strong&gt;: &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; (App Router)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Runtime&lt;/strong&gt;: &lt;a href="https://bun.sh/"&gt;Bun&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: PostgreSQL with &lt;a href="https://orm.drizzle.team"&gt;Drizzle ORM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: &lt;a href="https://better-auth.com"&gt;Better Auth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;UI&lt;/strong&gt;: &lt;a href="https://ui.shadcn.com/"&gt;Shadcn&lt;/a&gt;, &lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;State Management&lt;/strong&gt;: &lt;a href="https://zustand-demo.pmnd.rs/"&gt;Zustand&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flow Editor&lt;/strong&gt;: &lt;a href="https://reactflow.dev/"&gt;ReactFlow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href="https://fumadocs.vercel.app/"&gt;Fumadocs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Monorepo&lt;/strong&gt;: &lt;a href="https://turborepo.org/"&gt;Turborepo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Realtime&lt;/strong&gt;: &lt;a href="https://socket.io/"&gt;Socket.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Background Jobs&lt;/strong&gt;: &lt;a href="https://trigger.dev/"&gt;Trigger.dev&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! Please see our &lt;a href="https://raw.githubusercontent.com/simstudioai/sim/main/.github/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the Apache License 2.0 - see the &lt;a href="https://raw.githubusercontent.com/simstudioai/sim/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;p align="center"&gt;Made with ‚ù§Ô∏è by the Sim Team&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>