<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Sat, 18 Oct 2025 01:36:54 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>rustdesk/rustdesk</title>
      <link>https://github.com/rustdesk/rustdesk</link>
      <description>&lt;p&gt;An open-source remote desktop application designed for self-hosting, as an alternative to TeamViewer.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rustdesk/rustdesk/master/res/logo-header.svg?sanitize=true" alt="RustDesk - Your remote desktop" /&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build"&gt;Build&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker"&gt;Docker&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure"&gt;Structure&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot"&gt;Snapshot&lt;/a&gt;&lt;br /&gt; [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-UA.md"&gt;Українська&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-CS.md"&gt;česky&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ZH.md"&gt;中文&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-HU.md"&gt;Magyar&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ES.md"&gt;Español&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FA.md"&gt;فارسی&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FR.md"&gt;Français&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DE.md"&gt;Deutsch&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PL.md"&gt;Polski&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ID.md"&gt;Indonesian&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FI.md"&gt;Suomi&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ML.md"&gt;മലയാളം&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-JP.md"&gt;日本語&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NL.md"&gt;Nederlands&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-IT.md"&gt;Italiano&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RU.md"&gt;Русский&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PTBR.md"&gt;Português (Brasil)&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-EO.md"&gt;Esperanto&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-KR.md"&gt;한국어&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-AR.md"&gt;العربي&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-VN.md"&gt;Tiếng Việt&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DA.md"&gt;Dansk&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-GR.md"&gt;Ελληνικά&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-TR.md"&gt;Türkçe&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NO.md"&gt;Norsk&lt;/a&gt;]&lt;br /&gt; &lt;b&gt;We need your help to translate this README, &lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/lang"&gt;RustDesk UI&lt;/a&gt; and &lt;a href="https://github.com/rustdesk/doc.rustdesk.com"&gt;RustDesk Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Caution] &lt;strong&gt;Misuse Disclaimer:&lt;/strong&gt; &lt;br /&gt; The developers of RustDesk do not condone or support any unethical or illegal use of this software. Misuse, such as unauthorized access, control or invasion of privacy, is strictly against our guidelines. The authors are not responsible for any misuse of the application.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Chat with us: &lt;a href="https://discord.gg/nDceKgxnkV"&gt;Discord&lt;/a&gt; | &lt;a href="https://twitter.com/rustdesk"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/rustdesk"&gt;Reddit&lt;/a&gt; | &lt;a href="https://www.youtube.com/@rustdesk"&gt;YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://rustdesk.com/pricing.html"&gt;&lt;img src="https://img.shields.io/badge/RustDesk%20Server%20Pro-Advanced%20Features-blue" alt="RustDesk Server Pro" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Yet another remote desktop solution, written in Rust. Works out of the box with no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href="https://rustdesk.com/server"&gt;set up your own&lt;/a&gt;, or &lt;a href="https://github.com/rustdesk/rustdesk-server-demo"&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for help getting started.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/wiki/FAQ"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases"&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases/tag/nightly"&gt;&lt;strong&gt;NIGHTLY BUILD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://f-droid.org/en/packages/com.carriez.flutter_hbb"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" height="80" /&gt;&lt;/a&gt; &lt;a href="https://flathub.org/apps/com.rustdesk.RustDesk"&gt;&lt;img src="https://flathub.org/api/badge?svg&amp;amp;locale=en" alt="Get it on Flathub" height="80" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;Desktop versions use Flutter or Sciter (deprecated) for GUI, this tutorial is for Sciter only, since it is easier and more friendly to start. Check out our &lt;a href="https://github.com/rustdesk/rustdesk/raw/master/.github/workflows/flutter-build.yml"&gt;CI&lt;/a&gt; for building Flutter version.&lt;/p&gt; 
&lt;p&gt;Please download Sciter dynamic library yourself.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"&gt;Windows&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so"&gt;Linux&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib"&gt;macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Raw Steps to build&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://github.com/microsoft/vcpkg"&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static&lt;/li&gt; 
   &lt;li&gt;Linux/macOS: vcpkg install libvpx libyuv opus aom&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://rustdesk.com/docs/en/dev/build/"&gt;Build&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;How to Build on Linux&lt;/h2&gt; 
&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y zip g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev \
        libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake make \
        libclang-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpam0g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libXfixes-devel cmake alsa-lib-devel gstreamer-devel gstreamer-plugins-base-devel xdotool-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel gstreamer1-devel gstreamer1-plugins-base-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pipewire
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install vcpkg&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/microsoft/vcpkg
cd vcpkg
git checkout 2023.04.15
cd ..
vcpkg/bootstrap-vcpkg.sh
export VCPKG_ROOT=$HOME/vcpkg
vcpkg/vcpkg install libvpx libyuv opus aom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd vcpkg/buildtrees/libvpx/src
cd *
./configure
sed -i 's/CFLAGS+=-I/CFLAGS+=-fPIC -I/g' Makefile
sed -i 's/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g' Makefile
make
cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/
cd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
git clone --recurse-submodules https://github.com/rustdesk/rustdesk
cd rustdesk
mkdir -p target/debug
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so
mv libsciter-gtk.so target/debug
VCPKG_ROOT=$HOME/vcpkg cargo run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build with Docker&lt;/h2&gt; 
&lt;p&gt;Begin by cloning the repository and building the Docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/rustdesk/rustdesk
cd rustdesk
git submodule update --init --recursive
docker build -t "rustdesk-builder" .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID="$(id -u)" -e PGID="$(id -g)" rustdesk-builder
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/debug/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you're running a release executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/release/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please ensure that you run these commands from the root of the RustDesk repository, or the application may not find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; 
&lt;h2&gt;File Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common"&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/scrap"&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/enigo"&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/clipboard"&gt;libs/clipboard&lt;/a&gt;&lt;/strong&gt;: file copy and paste implementation for Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/ui"&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: obsolete Sciter UI (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/server"&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/client.rs"&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs"&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href="https://github.com/rustdesk/rustdesk-server"&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/platform"&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter"&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for desktop and mobile&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter/web/v1/js"&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: JavaScript for Flutter web client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/db82d4e7-c4bc-4823-8e6f-6af7eadf7651" alt="Connection Manager" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/9baa91e9-3362-4d06-aa1a-7518edcbd7ea" alt="Connected to a Windows PC" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/39511ad3-aa9a-4f8c-8947-1cce286a46ad" alt="File Transfer" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/78e8708f-e87e-4570-8373-1360033ea6c5" alt="TCP Tunneling" /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>modelcontextprotocol/rust-sdk</title>
      <link>https://github.com/modelcontextprotocol/rust-sdk</link>
      <description>&lt;p&gt;The official Rust SDK for the Model Context Protocol&lt;/p&gt;&lt;hr&gt;&lt;div align="right"&gt; 
 &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/docs/readme/README.zh-cn.md"&gt;简体中文(待更新)&lt;/a&gt; 
&lt;/div&gt; 
&lt;h1&gt;RMCP&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/rmcp"&gt;&lt;img src="https://img.shields.io/crates/v/rmcp" alt="Crates.io Version" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- ![Release status](https://github.com/modelcontextprotocol/rust-sdk/actions/workflows/release.yml/badge.svg) --&gt; 
&lt;!-- [![docs.rs](todo)](todo) --&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/docs/coverage.svg?sanitize=true" alt="Coverage" /&gt;&lt;/p&gt; 
&lt;p&gt;An official Rust Model Context Protocol SDK implementation with tokio async runtime.&lt;/p&gt; 
&lt;p&gt;This repository contains the following crates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/crates/rmcp"&gt;rmcp&lt;/a&gt;: The core crate providing the RMCP protocol implementation (If you want to get more information, please visit &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/crates/rmcp/README.md"&gt;rmcp&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/crates/rmcp-macros"&gt;rmcp-macros&lt;/a&gt;: A procedural macro crate for generating RMCP tool implementations (If you want to get more information, please visit &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/crates/rmcp-macros/README.md"&gt;rmcp-macros&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Import the crate&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;rmcp = { version = "0.8.0", features = ["server"] }
## or dev channel
rmcp = { git = "https://github.com/modelcontextprotocol/rust-sdk", branch = "main" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Third Dependencies&lt;/h3&gt; 
&lt;p&gt;Basic dependencies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tokio-rs/tokio"&gt;tokio required&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/serde-rs/serde"&gt;serde required&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Build a Client&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Start a client&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-rust,"&gt;use rmcp::{ServiceExt, transport::{TokioChildProcess, ConfigureCommandExt}};
use tokio::process::Command;

#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let client = ().serve(TokioChildProcess::new(Command::new("npx").configure(|cmd| {
        cmd.arg("-y").arg("@modelcontextprotocol/server-everything");
    }))?).await?;
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Build a Server&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Build a transport&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-rust,"&gt;use tokio::io::{stdin, stdout};
let transport = (stdin(), stdout());
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Build a service&lt;/summary&gt; 
 &lt;p&gt;You can easily build a service by using &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/crates/rmcp/src/handler/server.rs"&gt;&lt;code&gt;ServerHandler&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/crates/rmcp/src/handler/client.rs"&gt;&lt;code&gt;ClientHandler&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-rust,"&gt;let service = common::counter::Counter::new();
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Start the server&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-rust,"&gt;// this call will finish the initialization process
let server = service.serve(transport).await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Interact with the server&lt;/summary&gt; 
 &lt;p&gt;Once the server is initialized, you can send requests or notifications:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-rust,"&gt;// request
let roots = server.list_roots().await?;

// or send notification
server.notify_cancelled(...).await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Waiting for service shutdown&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-rust,"&gt;let quit_reason = server.waiting().await?;
// or cancel it
let quit_reason = server.cancel().await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/examples/README.md"&gt;examples&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;OAuth Support&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/docs/OAUTH_SUPPORT.md"&gt;oauth_support&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Related Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://spec.modelcontextprotocol.io/specification/2024-11-05/"&gt;MCP Specification&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/specification/raw/main/schema/2024-11-05/schema.ts"&gt;Schema&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;h3&gt;Extending &lt;code&gt;rmcp&lt;/code&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/lx-industries/rmcp-actix-web"&gt;rmcp-actix-web&lt;/a&gt; - An &lt;code&gt;actix_web&lt;/code&gt; backend for &lt;code&gt;rmcp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/lx-industries/rmcp-openapi"&gt;rmcp-openapi&lt;/a&gt; - Transform OpenAPI definition endpoints into MCP tools&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Built with &lt;code&gt;rmcp&lt;/code&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustfs/rustfs/tree/main/crates/mcp"&gt;rustfs-mcp&lt;/a&gt; - High-performance MCP server providing S3-compatible object storage operations for AI/LLM integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jokemanfire/mcp-containerd"&gt;containerd-mcp-server&lt;/a&gt; - A containerd-based MCP server implementation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/lx-industries/rmcp-openapi/-/tree/main/crates/rmcp-openapi-server"&gt;rmcp-openapi-server&lt;/a&gt; - High-performance MCP server that exposes OpenAPI definition endpoints as MCP tools&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linw1995/nvim-mcp"&gt;nvim-mcp&lt;/a&gt; - A MCP server to interact with Neovim&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mediar-ai/terminator"&gt;terminator&lt;/a&gt; - AI-powered desktop automation MCP server with cross-platform support and &amp;gt;95% success rate&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Tips for Contributors&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/docs/CONTRIBUTE.MD"&gt;docs/CONTRIBUTE.MD&lt;/a&gt; to get some tips for contributing.&lt;/p&gt; 
&lt;h3&gt;Using Dev Container&lt;/h3&gt; 
&lt;p&gt;If you want to use dev container, see &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/rust-sdk/main/docs/DEVCONTAINER.md"&gt;docs/DEVCONTAINER.md&lt;/a&gt; for instructions on using Dev Container for development.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://zed.dev"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/zed-industries/zed/main/assets/badge/v0.json" alt="Zed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zed-industries/zed/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href="https://github.com/atom/atom"&gt;Atom&lt;/a&gt; and &lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;On macOS, Linux, and Windows you can &lt;a href="https://zed.dev/download"&gt;download Zed directly&lt;/a&gt; or &lt;a href="https://zed.dev/docs/linux#installing-via-a-package-manager"&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Web (&lt;a href="https://github.com/zed-industries/zed/issues/5396"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md"&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md"&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md"&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md"&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we're hiring! Check out our &lt;a href="https://zed.dev/jobs"&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href="https://github.com/EmbarkStudios/cargo-about"&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you've created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate's Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license's requirements. If you're unsure, ask a lawyer. Once you've verified that this system is acceptable add the license's SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href="https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration"&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>embassy-rs/embassy</title>
      <link>https://github.com/embassy-rs/embassy</link>
      <description>&lt;p&gt;Modern embedded framework, using Rust and async.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Embassy&lt;/h1&gt; 
&lt;p&gt;Embassy is the next-generation framework for embedded applications. Write safe, correct, and energy-efficient embedded code faster, using the Rust programming language, its async facilities, and the Embassy libraries.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://embassy.dev/book/index.html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.embassy.dev/"&gt;API reference&lt;/a&gt; - &lt;a href="https://embassy.dev/"&gt;Website&lt;/a&gt; - &lt;a href="https://matrix.to/#/#embassy-rs:matrix.org"&gt;Chat&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;Rust + async ❤️ embedded&lt;/h2&gt; 
&lt;p&gt;The Rust programming language is blazingly fast and memory-efficient, with no runtime, garbage collector, or OS. It catches a wide variety of bugs at compile time, thanks to its full memory- and thread-safety, and expressive type system.&lt;/p&gt; 
&lt;p&gt;Rust's &lt;a href="https://rust-lang.github.io/async-book/"&gt;async/await&lt;/a&gt; allows for unprecedentedly easy and efficient multitasking in embedded systems. Tasks get transformed at compile time into state machines that get run cooperatively. It requires no dynamic memory allocation and runs on a single stack, so no per-task stack size tuning is required. It obsoletes the need for a traditional RTOS with kernel context switching, and is &lt;a href="https://tweedegolf.nl/en/blog/65/async-rust-vs-rtos-showdown"&gt;faster and smaller than one!&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Batteries included&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hardware Abstraction Layers&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;HALs implement safe, idiomatic Rust APIs to use the hardware capabilities, so raw register manipulation is not needed. The Embassy project maintains HALs for select hardware, but you can still use HALs from other projects with Embassy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-stm32/"&gt;embassy-stm32&lt;/a&gt;, for all STM32 microcontroller families.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-nrf/"&gt;embassy-nrf&lt;/a&gt;, for the Nordic Semiconductor nRF52, nRF53, nRF54 and nRF91 series.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-rp/"&gt;embassy-rp&lt;/a&gt;, for the Raspberry Pi RP2040 and RP23xx microcontrollers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-mspm0/"&gt;embassy-mspm0&lt;/a&gt;, for the Texas Instruments MSPM0 microcontrollers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/esp-rs"&gt;esp-rs&lt;/a&gt;, for the Espressif Systems ESP32 series of chips. 
    &lt;ul&gt; 
     &lt;li&gt;Embassy HAL support for Espressif chips, as well as Async Wi-Fi, Bluetooth, and ESP-NOW, is being developed in the &lt;a href="https://github.com/esp-rs/esp-hal"&gt;esp-rs/esp-hal&lt;/a&gt; repository.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ch32-rs/ch32-hal"&gt;ch32-hal&lt;/a&gt;, for the WCH 32-bit RISC-V(CH32V) series of chips.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AlexCharlton/mpfs-hal"&gt;mpfs-hal&lt;/a&gt;, for the Microchip PolarFire SoC.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/py32-rs/py32-hal"&gt;py32-hal&lt;/a&gt;, for the Puya Semiconductor PY32 series of microcontrollers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Time that Just Works&lt;/strong&gt; - No more messing with hardware timers. &lt;a href="https://docs.embassy.dev/embassy-time"&gt;embassy_time&lt;/a&gt; provides Instant, Duration, and Timer types that are globally available and never overflow.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Real-time ready&lt;/strong&gt; - Tasks on the same async executor run cooperatively, but you can create multiple executors with different priorities so that higher priority tasks preempt lower priority ones. See the &lt;a href="https://github.com/embassy-rs/embassy/raw/master/examples/nrf52840/src/bin/multiprio.rs"&gt;example&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Low-power ready&lt;/strong&gt; - Easily build devices with years of battery life. The async executor automatically puts the core to sleep when there's no work to do. Tasks are woken by interrupts, there is no busy-loop polling while waiting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Networking&lt;/strong&gt; - The &lt;a href="https://docs.embassy.dev/embassy-net/"&gt;embassy-net&lt;/a&gt; network stack implements extensive networking functionality, including Ethernet, IP, TCP, UDP, ICMP, and DHCP. Async drastically simplifies managing timeouts and serving multiple connections concurrently.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bluetooth&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;a href="https://github.com/embassy-rs/trouble"&gt;trouble&lt;/a&gt; crate provides a Bluetooth Low Energy 4.x and 5.x Host that runs on any microcontroller implementing the &lt;a href="https://github.com/embassy-rs/bt-hci"&gt;bt-hci&lt;/a&gt; traits (currently &lt;code&gt;nRF52&lt;/code&gt;, &lt;code&gt;rp2040&lt;/code&gt;, &lt;code&gt;rp23xx&lt;/code&gt; and &lt;code&gt;esp32&lt;/code&gt; and &lt;code&gt;serial&lt;/code&gt; controllers are supported).&lt;/li&gt; 
   &lt;li&gt;The &lt;a href="https://github.com/embassy-rs/nrf-softdevice"&gt;nrf-softdevice&lt;/a&gt; crate provides Bluetooth Low Energy 4.x and 5.x support for nRF52 microcontrollers.&lt;/li&gt; 
   &lt;li&gt;The &lt;a href="https://github.com/embassy-rs/embassy/tree/main/embassy-stm32-wpan"&gt;embassy-stm32-wpan&lt;/a&gt; crate provides Bluetooth Low Energy 5.x support for stm32wb microcontrollers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;LoRa&lt;/strong&gt; - The &lt;a href="https://github.com/lora-rs/lora-rs"&gt;lora-rs&lt;/a&gt; project provides an async LoRa and LoRaWAN stack that works well on Embassy.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;USB&lt;/strong&gt; - &lt;a href="https://docs.embassy.dev/embassy-usb/"&gt;embassy-usb&lt;/a&gt; implements a device-side USB stack. Implementations for common classes such as USB serial (CDC ACM) and USB HID are available, and a rich builder API allows building your own.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bootloader and DFU&lt;/strong&gt; - &lt;a href="https://github.com/embassy-rs/embassy/tree/master/embassy-boot"&gt;embassy-boot&lt;/a&gt; is a lightweight bootloader supporting firmware application upgrades in a power-fail-safe way, with trial boots and rollbacks.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sneak peek&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-rust,ignore"&gt;use defmt::info;
use embassy_executor::Spawner;
use embassy_time::{Duration, Timer};
use embassy_nrf::gpio::{AnyPin, Input, Level, Output, OutputDrive, Pin, Pull};
use embassy_nrf::{Peri, Peripherals};

// Declare async tasks
#[embassy_executor::task]
async fn blink(pin: Peri&amp;lt;'static, AnyPin&amp;gt;) {
    let mut led = Output::new(pin, Level::Low, OutputDrive::Standard);

    loop {
        // Timekeeping is globally available, no need to mess with hardware timers.
        led.set_high();
        Timer::after_millis(150).await;
        led.set_low();
        Timer::after_millis(150).await;
    }
}

// Main is itself an async task as well.
#[embassy_executor::main]
async fn main(spawner: Spawner) {
    let p = embassy_nrf::init(Default::default());

    // Spawned tasks run in the background, concurrently.
    spawner.spawn(blink(p.P0_13.into()).unwrap());

    let mut button = Input::new(p.P0_11, Pull::Up);
    loop {
        // Asynchronously wait for GPIO events, allowing other tasks
        // to run, or the core to sleep.
        button.wait_for_low().await;
        info!("Button pressed!");
        button.wait_for_high().await;
        info!("Button released!");
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Examples are found in the &lt;code&gt;examples/&lt;/code&gt; folder separated by the chip manufacturer they are designed to run on. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;examples/nrf52840&lt;/code&gt; run on the &lt;code&gt;nrf52840-dk&lt;/code&gt; board (PCA10056) but should be easily adaptable to other nRF52 chips and boards.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/nrf5340&lt;/code&gt; run on the &lt;code&gt;nrf5340-dk&lt;/code&gt; board (PCA10095).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/stm32xx&lt;/code&gt; for the various STM32 families.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/rp&lt;/code&gt; are for the RP2040 chip.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/std&lt;/code&gt; are designed to run locally on your PC.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Running examples&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;probe-rs&lt;/code&gt; following the instructions at &lt;a href="https://probe.rs"&gt;https://probe.rs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Change directory to the sample's base directory. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd examples/nrf52840
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Ensure &lt;code&gt;Cargo.toml&lt;/code&gt; sets the right feature for the name of the chip you are programming. If this name is incorrect, the example may fail to run or immediately crash after being programmed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure &lt;code&gt;.cargo/config.toml&lt;/code&gt; contains the name of the chip you are programming.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the example&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo run --release --bin blinky
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more help getting started, see &lt;a href="https://github.com/embassy-rs/embassy/wiki/Getting-Started"&gt;Getting Started&lt;/a&gt; and &lt;a href="https://github.com/embassy-rs/embassy/wiki/Running-the-Examples"&gt;Running the Examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Developing Embassy with Rust Analyzer-based editors&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://rust-analyzer.github.io/"&gt;Rust Analyzer&lt;/a&gt; is used by &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; and others. Given the multiple targets that Embassy serves, there is no Cargo workspace file. Instead, the Rust Analyzer must be told of the target project to work with. In the case of Visual Studio Code, please refer to the &lt;code&gt;.vscode/settings.json&lt;/code&gt; file's &lt;code&gt;rust-analyzer.linkedProjects&lt;/code&gt;setting.&lt;/p&gt; 
&lt;h2&gt;Minimum supported Rust version (MSRV)&lt;/h2&gt; 
&lt;p&gt;Embassy is guaranteed to compile on stable Rust 1.75 and up. It &lt;em&gt;might&lt;/em&gt; compile with older versions, but that may change in any new patch release.&lt;/p&gt; 
&lt;h2&gt;Why the name?&lt;/h2&gt; 
&lt;p&gt;EMBedded ASYnc! :)&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Embassy is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/embassy-rs/embassy/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/embassy-rs/embassy/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>launchbadge/sqlx</title>
      <link>https://github.com/launchbadge/sqlx</link>
      <description>&lt;p&gt;🧰 The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL, MySQL, and SQLite.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;SQLx&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;strong&gt; 🧰 The Rust SQL Toolkit &lt;/strong&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt; 
 &lt;!-- Github Actions --&gt; 
 &lt;a href="https://github.com/launchbadge/sqlx/actions/workflows/sqlx.yml?query=branch%3Amain"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/launchbadge/sqlx/sqlx.yml?branch=main&amp;amp;style=flat-square" alt="actions status" /&gt;&lt;/a&gt; 
 &lt;!-- Version --&gt; 
 &lt;a href="https://crates.io/crates/sqlx"&gt; &lt;img src="https://img.shields.io/crates/v/sqlx.svg?style=flat-square" alt="Crates.io version" /&gt;&lt;/a&gt; 
 &lt;!-- Discord --&gt; 
 &lt;a href="https://discord.gg/uuruzJ7"&gt; &lt;img src="https://img.shields.io/discord/665528275556106240?style=flat-square" alt="chat" /&gt;&lt;/a&gt; 
 &lt;!-- Docs --&gt; 
 &lt;a href="https://docs.rs/sqlx"&gt; &lt;img src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square" alt="docs.rs docs" /&gt;&lt;/a&gt; 
 &lt;!-- Downloads --&gt; 
 &lt;a href="https://crates.io/crates/sqlx"&gt; &lt;img src="https://img.shields.io/crates/d/sqlx.svg?style=flat-square" alt="Download" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h4&gt; &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/#install"&gt; Install &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/#usage"&gt; Usage &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://docs.rs/sqlx"&gt; Docs &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/launchbadge/sqlx/wiki/Ecosystem"&gt; Ecosystem &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://discord.gg/uuruzJ7"&gt; Discord &lt;/a&gt; &lt;/h4&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt; 
 &lt;small&gt;Built with ❤️ by &lt;a href="https://launchbadge.com"&gt;The LaunchBadge team&lt;/a&gt;&lt;/small&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt; 
 &lt;h5&gt;Have a question? Be sure to &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/FAQ.md"&gt;check the FAQ first!&lt;/a&gt;&lt;/h5&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;SQLx is an async, pure Rust&lt;sub&gt;†&lt;/sub&gt; SQL crate featuring compile-time checked queries without a DSL.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Truly Asynchronous&lt;/strong&gt;. Built from the ground-up using async/await for maximum concurrency.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile-time checked queries&lt;/strong&gt; (if you want). See &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/#sqlx-is-not-an-orm"&gt;SQLx is not an ORM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Database Agnostic&lt;/strong&gt;. Support for &lt;a href="http://postgresql.org/"&gt;PostgreSQL&lt;/a&gt;, &lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt;, &lt;a href="https://www.mariadb.org/"&gt;MariaDB&lt;/a&gt;, &lt;a href="https://sqlite.org/"&gt;SQLite&lt;/a&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/sql-server"&gt;MSSQL&lt;/a&gt; was supported prior to version 0.7, but has been removed pending a full rewrite of the driver as part of our &lt;a href="https://github.com/launchbadge/sqlx/discussions/1616"&gt;SQLx Pro initiative&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pure Rust&lt;/strong&gt;. The Postgres and MySQL/MariaDB drivers are written in pure Rust using &lt;strong&gt;zero&lt;/strong&gt; unsafe&lt;sub&gt;††&lt;/sub&gt; code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Runtime Agnostic&lt;/strong&gt;. Works on different runtimes (&lt;a href="https://github.com/async-rs/async-std"&gt;&lt;code&gt;async-std&lt;/code&gt;&lt;/a&gt; / &lt;a href="https://github.com/tokio-rs/tokio"&gt;&lt;code&gt;tokio&lt;/code&gt;&lt;/a&gt; / &lt;a href="https://github.com/actix/actix-net"&gt;&lt;code&gt;actix&lt;/code&gt;&lt;/a&gt;) and TLS backends (&lt;a href="https://crates.io/crates/native-tls"&gt;&lt;code&gt;native-tls&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://crates.io/crates/rustls"&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;small&gt;&lt;small&gt;&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;
&lt;small&gt;&lt;small&gt; &lt;p&gt;† The SQLite driver uses the libsqlite3 C library as SQLite is an embedded database (the only way we could be pure Rust for SQLite is by porting &lt;em&gt;all&lt;/em&gt; of SQLite to Rust).&lt;/p&gt; &lt;p&gt;†† SQLx uses &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; unless the &lt;code&gt;sqlite&lt;/code&gt; feature is enabled. The SQLite driver directly invokes the SQLite3 API via &lt;code&gt;libsqlite3-sys&lt;/code&gt;, which requires &lt;code&gt;unsafe&lt;/code&gt;.&lt;/p&gt; &lt;/small&gt;&lt;/small&gt;
&lt;p&gt;&lt;small&gt;&lt;small&gt;&lt;/small&gt;&lt;/small&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Cross-platform. Being native Rust, SQLx will compile anywhere Rust is supported.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Built-in connection pooling with &lt;code&gt;sqlx::Pool&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Row streaming. Data is read asynchronously from the database and decoded on demand.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Automatic statement preparation and caching. When using the high-level query API (&lt;code&gt;sqlx::query&lt;/code&gt;), statements are prepared and cached per connection.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Simple (unprepared) query execution including fetching results into the same &lt;code&gt;Row&lt;/code&gt; types used by the high-level API. Supports batch execution and returns results from all statements.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Transport Layer Security (TLS) where supported (&lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt;, &lt;a href="https://www.mariadb.org/"&gt;MariaDB&lt;/a&gt; and &lt;a href="http://postgresql.org/"&gt;PostgreSQL&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Asynchronous notifications using &lt;code&gt;LISTEN&lt;/code&gt; and &lt;code&gt;NOTIFY&lt;/code&gt; for &lt;a href="http://postgresql.org/"&gt;PostgreSQL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nested transactions with support for save points.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Any&lt;/code&gt; database driver for changing the database driver at runtime. An &lt;code&gt;AnyPool&lt;/code&gt; connects to the driver indicated by the URL scheme.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;SQLx is compatible with the &lt;a href="https://github.com/async-rs/async-std"&gt;&lt;code&gt;async-std&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/tokio-rs/tokio"&gt;&lt;code&gt;tokio&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/actix/actix-net"&gt;&lt;code&gt;actix&lt;/code&gt;&lt;/a&gt; runtimes; and, the &lt;a href="https://crates.io/crates/native-tls"&gt;&lt;code&gt;native-tls&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/rustls"&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt; TLS backends. When adding the dependency, you must choose a runtime feature that is &lt;code&gt;runtime&lt;/code&gt; + &lt;code&gt;tls&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# Cargo.toml
[dependencies]
# PICK ONE OF THE FOLLOWING:

# tokio (no TLS)
sqlx = { version = "0.8", features = [ "runtime-tokio" ] }
# tokio + native-tls
sqlx = { version = "0.8", features = [ "runtime-tokio", "tls-native-tls" ] }
# tokio + rustls with ring and WebPKI CA certificates
sqlx = { version = "0.8", features = [ "runtime-tokio", "tls-rustls-ring-webpki" ] }
# tokio + rustls with ring and platform's native CA certificates
sqlx = { version = "0.8", features = [ "runtime-tokio", "tls-rustls-ring-native-roots" ] }
# tokio + rustls with aws-lc-rs
sqlx = { version = "0.8", features = [ "runtime-tokio", "tls-rustls-aws-lc-rs" ] }

# async-std (no TLS)
sqlx = { version = "0.8", features = [ "runtime-async-std" ] }
# async-std + native-tls
sqlx = { version = "0.8", features = [ "runtime-async-std", "tls-native-tls" ] }
# async-std + rustls with ring and WebPKI CA certificates
sqlx = { version = "0.8", features = [ "runtime-async-std", "tls-rustls-ring-webpki" ] }
# async-std + rustls with ring and platform's native CA certificates
sqlx = { version = "0.8", features = [ "runtime-async-std", "tls-rustls-ring-native-roots" ] }
# async-std + rustls with aws-lc-rs
sqlx = { version = "0.8", features = [ "runtime-async-std", "tls-rustls-aws-lc-rs" ] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Cargo Feature Flags&lt;/h4&gt; 
&lt;p&gt;For backward-compatibility reasons, the runtime and TLS features can either be chosen together as a single feature, or separately.&lt;/p&gt; 
&lt;p&gt;For forward compatibility, you should use the separate runtime and TLS features as the combination features may be removed in the future.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;runtime-async-std&lt;/code&gt;: Use the &lt;code&gt;async-std&lt;/code&gt; runtime without enabling a TLS backend.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;runtime-tokio&lt;/code&gt;: Use the &lt;code&gt;tokio&lt;/code&gt; runtime without enabling a TLS backend.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Actix-web is fully compatible with Tokio and so a separate runtime feature is no longer needed.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;tls-native-tls&lt;/code&gt;: Use the &lt;code&gt;native-tls&lt;/code&gt; TLS backend (OpenSSL on *nix, SChannel on Windows, Secure Transport on macOS).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;tls-rustls&lt;/code&gt;: Use the &lt;code&gt;rustls&lt;/code&gt; TLS backend (cross-platform backend, only supports TLS 1.2 and 1.3).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;postgres&lt;/code&gt;: Add support for the Postgres database server.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;mysql&lt;/code&gt;: Add support for the MySQL/MariaDB database server.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;mssql&lt;/code&gt;: Add support for the MSSQL database server.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sqlite&lt;/code&gt;: Add support for the self-contained &lt;a href="https://sqlite.org/"&gt;SQLite&lt;/a&gt; database engine with SQLite bundled and statically-linked.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sqlite-unbundled&lt;/code&gt;: The same as above (&lt;code&gt;sqlite&lt;/code&gt;), but link SQLite from the system instead of the bundled version.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Allows updating SQLite independently of SQLx or using forked versions.&lt;/li&gt; 
   &lt;li&gt;You must have SQLite installed on the system or provide a path to the library at build time. See &lt;a href="https://github.com/rusqlite/rusqlite?tab=readme-ov-file#notes-on-building-rusqlite-and-libsqlite3-sys"&gt;the &lt;code&gt;rusqlite&lt;/code&gt; README&lt;/a&gt; for details.&lt;/li&gt; 
   &lt;li&gt;May result in link errors if the SQLite version is too old. Version &lt;code&gt;3.20.0&lt;/code&gt; or newer is recommended.&lt;/li&gt; 
   &lt;li&gt;Can increase build time due to the use of bindgen.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sqlite-preupdate-hook&lt;/code&gt;: enables SQLite's &lt;a href="https://sqlite.org/c3ref/preupdate_count.html"&gt;preupdate hook&lt;/a&gt; API.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Exposed as a separate feature because it's generally not enabled by default.&lt;/li&gt; 
   &lt;li&gt;Using this feature with &lt;code&gt;sqlite-unbundled&lt;/code&gt; may cause linker failures if the system SQLite version does not support it.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;any&lt;/code&gt;: Add support for the &lt;code&gt;Any&lt;/code&gt; database driver, which can proxy to a database driver at runtime.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;derive&lt;/code&gt;: Add support for the derive family macros, those are &lt;code&gt;FromRow&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, &lt;code&gt;Encode&lt;/code&gt;, &lt;code&gt;Decode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;macros&lt;/code&gt;: Add support for the &lt;code&gt;query*!&lt;/code&gt; macros, which allows compile-time checked queries.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;migrate&lt;/code&gt;: Add support for the migration management and &lt;code&gt;migrate!&lt;/code&gt; macro, which allow compile-time embedded migrations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;uuid&lt;/code&gt;: Add support for UUID.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;chrono&lt;/code&gt;: Add support for date and time types from &lt;code&gt;chrono&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;time&lt;/code&gt;: Add support for date and time types from &lt;code&gt;time&lt;/code&gt; crate (alternative to &lt;code&gt;chrono&lt;/code&gt;, which is preferred by &lt;code&gt;query!&lt;/code&gt; macro, if both enabled)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;bstr&lt;/code&gt;: Add support for &lt;code&gt;bstr::BString&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;bigdecimal&lt;/code&gt;: Add support for &lt;code&gt;NUMERIC&lt;/code&gt; using the &lt;code&gt;bigdecimal&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;rust_decimal&lt;/code&gt;: Add support for &lt;code&gt;NUMERIC&lt;/code&gt; using the &lt;code&gt;rust_decimal&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipnet&lt;/code&gt;: Add support for &lt;code&gt;INET&lt;/code&gt; and &lt;code&gt;CIDR&lt;/code&gt; (in postgres) using the &lt;code&gt;ipnet&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipnetwork&lt;/code&gt;: Add support for &lt;code&gt;INET&lt;/code&gt; and &lt;code&gt;CIDR&lt;/code&gt; (in postgres) using the &lt;code&gt;ipnetwork&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt;: Add support for &lt;code&gt;JSON&lt;/code&gt; and &lt;code&gt;JSONB&lt;/code&gt; (in postgres) using the &lt;code&gt;serde_json&lt;/code&gt; crate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Offline mode is now always enabled. See &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/sqlx-cli/README.md#enable-building-in-offline-mode-with-query"&gt;sqlx-cli/README.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;SQLx is not an ORM!&lt;/h2&gt; 
&lt;p&gt;SQLx supports &lt;strong&gt;compile-time checked queries&lt;/strong&gt;. It does not, however, do this by providing a Rust API or DSL (domain-specific language) for building queries. Instead, it provides macros that take regular SQL as input and ensure that it is valid for your database. The way this works is that SQLx connects to your development DB at compile time to have the database itself verify (and return some info on) your SQL queries. This has some potentially surprising implications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Since SQLx never has to parse the SQL string itself, any syntax that the development DB accepts can be used (including things added by database extensions)&lt;/li&gt; 
 &lt;li&gt;Due to the different amount of information databases let you retrieve about queries, the extent of SQL verification you get from the query macros depends on the database&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;If you are looking for an (asynchronous) ORM,&lt;/strong&gt; you can check out our new &lt;a href="https://github.com/launchbadge/sqlx/wiki/Ecosystem#orms"&gt;Ecosystem wiki page&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;See the &lt;code&gt;examples/&lt;/code&gt; folder for more in-depth usage.&lt;/p&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use sqlx::postgres::PgPoolOptions;
// use sqlx::mysql::MySqlPoolOptions;
// etc.

#[async_std::main] // Requires the `attributes` feature of `async-std`
// or #[tokio::main]
// or #[actix_web::main]
async fn main() -&amp;gt; Result&amp;lt;(), sqlx::Error&amp;gt; {
    // Create a connection pool
    //  for MySQL/MariaDB, use MySqlPoolOptions::new()
    //  for SQLite, use SqlitePoolOptions::new()
    //  etc.
    let pool = PgPoolOptions::new()
        .max_connections(5)
        .connect("postgres://postgres:password@localhost/test").await?;

    // Make a simple query to return the given parameter (use a question mark `?` instead of `$1` for MySQL/MariaDB)
    let row: (i64,) = sqlx::query_as("SELECT $1")
        .bind(150_i64)
        .fetch_one(&amp;amp;pool).await?;

    assert_eq!(row.0, 150);

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Connecting&lt;/h3&gt; 
&lt;p&gt;A single connection can be established using any of the database connection types and calling &lt;code&gt;connect()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use sqlx::Connection;

let conn = SqliteConnection::connect("sqlite::memory:").await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Generally, you will want to instead create a connection pool (&lt;code&gt;sqlx::Pool&lt;/code&gt;) for the application to regulate how many server-side connections it's using.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let pool = MySqlPool::connect("mysql://user:pass@host/database").await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Querying&lt;/h3&gt; 
&lt;p&gt;In SQL, queries can be separated into prepared (parameterized) or unprepared (simple). Prepared queries have their query plan &lt;em&gt;cached&lt;/em&gt;, use a binary mode of communication (lower bandwidth and faster decoding), and utilize parameters to avoid SQL injection. Unprepared queries are simple and intended only for use where a prepared statement will not work, such as various database commands (e.g., &lt;code&gt;PRAGMA&lt;/code&gt; or &lt;code&gt;SET&lt;/code&gt; or &lt;code&gt;BEGIN&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;SQLx supports all operations with both types of queries. In SQLx, a &lt;code&gt;&amp;amp;str&lt;/code&gt; is treated as an unprepared query, and a &lt;code&gt;Query&lt;/code&gt; or &lt;code&gt;QueryAs&lt;/code&gt; struct is treated as a prepared query.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// low-level, Executor trait
conn.execute("BEGIN").await?; // unprepared, simple query
conn.execute(sqlx::query("DELETE FROM table")).await?; // prepared, cached query
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We should prefer to use the high-level &lt;code&gt;query&lt;/code&gt; interface whenever possible. To make this easier, there are finalizers on the type to avoid the need to wrap with an executor.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;sqlx::query("DELETE FROM table").execute(&amp;amp;mut conn).await?;
sqlx::query("DELETE FROM table").execute(&amp;amp;pool).await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;execute&lt;/code&gt; query finalizer returns the number of affected rows, if any, and drops all received results. In addition, there are &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;fetch_one&lt;/code&gt;, &lt;code&gt;fetch_optional&lt;/code&gt;, and &lt;code&gt;fetch_all&lt;/code&gt; to receive results.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;Query&lt;/code&gt; type returned from &lt;code&gt;sqlx::query&lt;/code&gt; will return &lt;code&gt;Row&amp;lt;'conn&amp;gt;&lt;/code&gt; from the database. Column values can be accessed by ordinal or by name with &lt;code&gt;row.get()&lt;/code&gt;. As the &lt;code&gt;Row&lt;/code&gt; retains an immutable borrow on the connection, only one &lt;code&gt;Row&lt;/code&gt; may exist at a time.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;fetch&lt;/code&gt; query finalizer returns a stream-like type that iterates through the rows in the result sets.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// provides `try_next`
use futures_util::TryStreamExt;
// provides `try_get`
use sqlx::Row;

let mut rows = sqlx::query("SELECT * FROM users WHERE email = ?")
    .bind(email)
    .fetch(&amp;amp;mut conn);

while let Some(row) = rows.try_next().await? {
    // map the row into a user-defined domain type
    let email: &amp;amp;str = row.try_get("email")?;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To assist with mapping the row into a domain type, one of two idioms may be used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let mut stream = sqlx::query("SELECT * FROM users")
    .map(|row: PgRow| {
        // map the row into a user-defined domain type
    })
    .fetch(&amp;amp;mut conn);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(sqlx::FromRow)]
struct User { name: String, id: i64 }

let mut stream = sqlx::query_as::&amp;lt;_, User&amp;gt;("SELECT * FROM users WHERE email = ? OR name = ?")
    .bind(user_email)
    .bind(user_name)
    .fetch(&amp;amp;mut conn);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Instead of a stream of results, we can use &lt;code&gt;fetch_one&lt;/code&gt; or &lt;code&gt;fetch_optional&lt;/code&gt; to request one required or optional result from the database.&lt;/p&gt; 
&lt;h3&gt;Compile-time verification&lt;/h3&gt; 
&lt;p&gt;We can use the macro, &lt;code&gt;sqlx::query!&lt;/code&gt; to achieve compile-time syntactic and semantic verification of the SQL, with an output to an anonymous record type where each SQL column is a Rust field (using raw identifiers where needed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let countries = sqlx::query!(
        "
SELECT country, COUNT(*) as count
FROM users
GROUP BY country
WHERE organization = ?
        ",
        organization
    )
    .fetch_all(&amp;amp;pool) // -&amp;gt; Vec&amp;lt;{ country: String, count: i64 }&amp;gt;
    .await?;

// countries[0].country
// countries[0].count
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Differences from &lt;code&gt;query()&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The input (or bind) parameters must be given all at once (and they are compile-time validated to be the right number and the right type).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The output type is an anonymous record. In the above example the type would be similar to:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-rust"&gt;{ country: String, count: i64 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable must be set at build time to a database which it can prepare queries against; the database does not have to contain any data but must be the same kind (MySQL, Postgres, etc.) and have the same schema as the database you will be connecting to at runtime.&lt;/p&gt; &lt;p&gt;For convenience, you can use &lt;a href="https://github.com/dotenv-rs/dotenv#examples"&gt;a &lt;code&gt;.env&lt;/code&gt; file&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; to set DATABASE_URL so that you don't have to pass it every time:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;DATABASE_URL=mysql://localhost/my_database
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The biggest downside to &lt;code&gt;query!()&lt;/code&gt; is that the output type cannot be named (due to Rust not officially supporting anonymous records). To address that, there is a &lt;code&gt;query_as!()&lt;/code&gt; macro that is mostly identical except that you can name the output type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// no traits are needed
struct Country { country: String, count: i64 }

let countries = sqlx::query_as!(Country,
        "
SELECT country, COUNT(*) as count
FROM users
GROUP BY country
WHERE organization = ?
        ",
        organization
    )
    .fetch_all(&amp;amp;pool) // -&amp;gt; Vec&amp;lt;Country&amp;gt;
    .await?;

// countries[0].country
// countries[0].count
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To avoid the need of having a development database around to compile the project even when no modifications (to the database-accessing parts of the code) are done, you can enable "offline mode" to cache the results of the SQL query analysis using the &lt;code&gt;sqlx&lt;/code&gt; command-line tool. See &lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/sqlx-cli/README.md#enable-building-in-offline-mode-with-query"&gt;sqlx-cli/README.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Compile-time verified queries do quite a bit of work at compile time. Incremental actions like &lt;code&gt;cargo check&lt;/code&gt; and &lt;code&gt;cargo build&lt;/code&gt; can be significantly faster when using an optimized build by putting the following in your &lt;code&gt;Cargo.toml&lt;/code&gt; (More information in the &lt;a href="https://doc.rust-lang.org/cargo/reference/profiles.html"&gt;Profiles section&lt;/a&gt; of The Cargo Book)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[profile.dev.package.sqlx-macros]
opt-level = 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; The &lt;code&gt;dotenv&lt;/code&gt; crate itself appears abandoned as of &lt;a href="https://github.com/dotenv-rs/dotenv/issues/74"&gt;December 2021&lt;/a&gt; so we now use the &lt;code&gt;dotenvy&lt;/code&gt; crate instead. The file format is the same.&lt;/p&gt; 
&lt;h2&gt;Safety&lt;/h2&gt; 
&lt;p&gt;This crate uses &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; to ensure everything is implemented in 100% Safe Rust.&lt;/p&gt; 
&lt;p&gt;If the &lt;code&gt;sqlite&lt;/code&gt; feature is enabled, this is downgraded to &lt;code&gt;#![deny(unsafe_code)]&lt;/code&gt; with &lt;code&gt;#![allow(unsafe_code)]&lt;/code&gt; on the &lt;code&gt;sqlx::sqlite&lt;/code&gt; module. There are several places where we interact with the C SQLite API. We try to document each call for the invariants we're assuming. We absolutely welcome auditing of, and feedback on, our unsafe code usage.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/launchbadge/sqlx/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any Contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>j178/prek</title>
      <link>https://github.com/j178/prek</link>
      <description>&lt;p&gt;⚡ Better `pre-commit`, re-engineered in Rust&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;prek&lt;/h1&gt; 
 &lt;img width="220" alt="prek" src="https://raw.githubusercontent.com/j178/prek/master/docs/assets/logo.webp" /&gt; 
 &lt;p&gt;&lt;a href="https://github.com/j178/prek/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/j178/prek/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/github/j178/prek"&gt;&lt;img src="https://codecov.io/github/j178/prek/graph/badge.svg?token=MP6TY24F43" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://github.com/j178/prek/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/j178/prek/total?logo=github" alt="GitHub Downloads" /&gt;&lt;/a&gt; &lt;a href="https://pepy.tech/projects/prek"&gt;&lt;img src="https://img.shields.io/pypi/dm/prek?logo=python" alt="PyPI Downloads" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/3NRJUqJz86"&gt;&lt;img src="https://img.shields.io/discord/1403581202102878289?logo=discord" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- description:start --&gt; 
&lt;p&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; is a framework to run hooks written in many languages, and it manages the language toolchain and dependencies for running the hooks.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;prek&lt;/em&gt; is a reimagined version of pre-commit, built in Rust. It is designed to be a faster, dependency-free and drop-in alternative for it, while also providing some additional long-requested features.&lt;/p&gt; 
&lt;!-- description:end --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] prek is not production-ready yet. Some subcommands and languages are not implemented. See the current gaps for drop-in parity: &lt;a href="https://prek.j178.dev/todo/"&gt;TODO&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;But it's already being adopted by &lt;a href="https://raw.githubusercontent.com/j178/prek/master/#who-is-using-prek"&gt;some projects&lt;/a&gt; like Airflow, so please give it a try - we'd love your feedback!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- features:start --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 A single binary with no dependencies, does not require Python or any other runtime.&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;a href="https://prek.j178.dev/benchmark/"&gt;Faster&lt;/a&gt; than &lt;code&gt;pre-commit&lt;/code&gt; and uses only half the disk space.&lt;/li&gt; 
 &lt;li&gt;🔄 Fully compatible with the original pre-commit configurations and hooks.&lt;/li&gt; 
 &lt;li&gt;🏗️ Built-in support for monorepos (i.e. &lt;a href="https://prek.j178.dev/workspace/"&gt;workspace mode&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;🐍 Integration with &lt;a href="https://github.com/astral-sh/uv"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; for managing Python virtual environments and dependencies.&lt;/li&gt; 
 &lt;li&gt;🛠️ Improved toolchain installations for Python, Node.js, Go, Rust and Ruby, shared between hooks.&lt;/li&gt; 
 &lt;li&gt;📦 &lt;a href="https://prek.j178.dev/builtin/"&gt;Built-in&lt;/a&gt; Rust-native implementation of some common hooks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- features:end --&gt; 
&lt;h2&gt;How to migrate&lt;/h2&gt; 
&lt;p&gt;prek is designed as a drop-in replacement:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/j178/prek/master/#installation"&gt;Install prek&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Replace &lt;code&gt;pre-commit&lt;/code&gt; with &lt;code&gt;prek&lt;/code&gt; in your commands&lt;/li&gt; 
 &lt;li&gt;Your existing &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; works unchanged&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ prek run
trim trailing whitespace.................................................Passed
fix end of files.........................................................Passed
typos....................................................................Passed
cargo fmt................................................................Passed
cargo clippy.............................................................Passed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For configuring &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; and writing hooks, you can refer to the &lt;a href="https://pre-commit.com/"&gt;pre-commit documentation&lt;/a&gt; as prek is fully compatible with it.&lt;/p&gt; 
&lt;!-- why:start --&gt; 
&lt;h2&gt;Why prek?&lt;/h2&gt; 
&lt;h3&gt;prek is faster&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is &lt;a href="https://prek.j178.dev/benchmark/"&gt;multiple times faster&lt;/a&gt; than &lt;code&gt;pre-commit&lt;/code&gt; and takes up half the disk space.&lt;/li&gt; 
 &lt;li&gt;It redesigned how hook environments and toolchains are managed, they are all shared between hooks, which reduces the disk space usage and speeds up the installation process.&lt;/li&gt; 
 &lt;li&gt;Repositories are cloned in parallel, and hooks are installed in parallel if their dependencies are disjoint.&lt;/li&gt; 
 &lt;li&gt;It uses &lt;a href="https://github.com/astral-sh/uv"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; for creating Python virtualenvs and installing dependencies, which is known for its speed and efficiency.&lt;/li&gt; 
 &lt;li&gt;It implements some common hooks in Rust, &lt;a href="https://prek.j178.dev/builtin/"&gt;built in prek&lt;/a&gt;, which are faster than their Python counterparts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;prek provides a better user experience&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;No need to install Python or any other runtime, just download a single binary.&lt;/li&gt; 
 &lt;li&gt;No hassle with your Python version or virtual environments, prek automatically installs the required Python version and creates a virtual environment for you.&lt;/li&gt; 
 &lt;li&gt;Built-in support for workspaces (or monorepos), each subproject can have its own &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prek run&lt;/code&gt; has some nifty improvements over &lt;code&gt;pre-commit run&lt;/code&gt;, such as: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;prek run --directory &amp;lt;dir&amp;gt;&lt;/code&gt; runs hooks for files in the specified directory, no need to use &lt;code&gt;git ls-files -- &amp;lt;dir&amp;gt; | xargs pre-commit run --files&lt;/code&gt; anymore.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;prek run --last-commit&lt;/code&gt; runs hooks for files changed in the last commit.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;prek run [HOOK] [HOOK]&lt;/code&gt; selects and runs multiple hooks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prek list&lt;/code&gt; command lists all available hooks, their ids, and descriptions, providing a better overview of the configured hooks.&lt;/li&gt; 
 &lt;li&gt;prek provides shell completions for &lt;code&gt;prek run &amp;lt;hook_id&amp;gt;&lt;/code&gt; command, making it easier to run specific hooks without remembering their ids.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more detailed improvements prek offers, take a look at &lt;a href="https://prek.j178.dev/diff/"&gt;Difference from pre-commit&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Who is using prek?&lt;/h2&gt; 
&lt;p&gt;prek is pretty new, but it is already being used or recommend by some projects and organizations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/airflow/issues/44995"&gt;Airflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pdm-project/pdm/pull/3593"&gt;PDM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DetachHead/basedpyright/pull/1413"&gt;basedpyright&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenLineage/OpenLineage/pull/3965"&gt;OpenLineage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/authlib/authlib/pull/804"&gt;Authlib&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://radiandevcore.gitlab.io/tools/pre-commit-crocodile/"&gt;pre-commit-crocodile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Future-House/paper-qa/pull/1098"&gt;PaperQA2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/requests-cache/requests-cache/pull/1116"&gt;requests-cache&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- why:end --&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Standalone installer&lt;/summary&gt; 
 &lt;p&gt;prek provides a standalone installer script to download and install the tool,&lt;/p&gt; 
 &lt;p&gt;On Linux and macOS:&lt;/p&gt; 
 &lt;!-- linux-standalone-install:start --&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl --proto '=https' --tlsv1.2 -LsSf https://github.com/j178/prek/releases/download/v0.2.9/prek-installer.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- linux-standalone-install:end --&gt; 
 &lt;p&gt;On Windows:&lt;/p&gt; 
 &lt;!-- windows-standalone-install:start --&gt; 
 &lt;pre&gt;&lt;code class="language-powershell"&gt;powershell -ExecutionPolicy ByPass -c "irm https://github.com/j178/prek/releases/download/v0.2.9/prek-installer.ps1 | iex"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- windows-standalone-install:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;PyPI&lt;/summary&gt; 
 &lt;!-- pypi-install:start --&gt; 
 &lt;p&gt;prek is published as Python binary wheel to PyPI, you can install it using &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;uv&lt;/code&gt; (recommended), or &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Using uv (recommended)
uv tool install prek

# Using pip
pip install prek

# Using pipx
pipx install prek
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- pypi-install:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Homebrew&lt;/summary&gt; 
 &lt;!-- homebrew-install:start --&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;brew install prek
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- homebrew-install:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;mise&lt;/summary&gt; 
 &lt;!-- mise-install:start --&gt; 
 &lt;p&gt;To use prek with &lt;a href="https://mise.jdx.dev"&gt;mise&lt;/a&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;mise use prek
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- mise-install:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Cargo binstall&lt;/summary&gt; 
 &lt;!-- cargo-binstall:start --&gt; 
 &lt;p&gt;Install pre-compiled binaries from GitHub using Cargo binstall (Rust 1.89+ is required):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo binstall prek --git https://github.com/j178/prek
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- cargo-binstall:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Cargo&lt;/summary&gt; 
 &lt;!-- cargo-install:start --&gt; 
 &lt;p&gt;Build from source using Cargo (Rust 1.89+ is required):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo install --locked --git https://github.com/j178/prek
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- cargo-install:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;npmjs&lt;/summary&gt; 
 &lt;!-- npmjs-install:start --&gt; 
 &lt;p&gt;prek is published as a Node.js package, you can install it using &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pnpm&lt;/code&gt;, or &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Using npm
npm add -D @j178/prek

# Using pnpm
pnpm add -D @j178/prek

# Using npx
npx @j178/prek --version

# or install globally
npm install -g @j178/prek

# then use `prek` command
prek --version
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- npmjs-install:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Nix&lt;/summary&gt; 
 &lt;!-- nix-install:start --&gt; 
 &lt;p&gt;prek is &lt;a href="https://search.nixos.org/packages?channel=unstable&amp;amp;show=prek&amp;amp;query=prek"&gt;available in Nix as &lt;code&gt;prek&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# Choose what's appropriate for your use case.
# One-off in a shell:
nix-shell -p prek
# NixOS or non-NixOS without flakes:
nix-env -iA nixos.prek
# Non-NixOS with flakes:
nix profile install nixpkgs#prek
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- nix-install:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Conda&lt;/summary&gt; 
 &lt;!-- conda-forge-install:start --&gt; 
 &lt;p&gt;prek is &lt;a href="https://anaconda.org/conda-forge/prek"&gt;available as &lt;code&gt;prek&lt;/code&gt; via conda-forge&lt;/a&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;conda install conda-forge::prek
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- conda-forge-install:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GitHub Releases&lt;/summary&gt; 
 &lt;!-- pre-built-binaries:start --&gt; 
 &lt;p&gt;Pre-built binaries are available for download from the &lt;a href="https://github.com/j178/prek/releases"&gt;GitHub releases&lt;/a&gt; page.&lt;/p&gt; 
 &lt;!-- pre-built-binaries:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GitHub Actions&lt;/summary&gt; 
 &lt;!-- github-actions:start --&gt; 
 &lt;p&gt;prek can be used in GitHub Actions via the &lt;a href="https://github.com/j178/prek-action"&gt;j178/prek-action&lt;/a&gt; repository.&lt;/p&gt; 
 &lt;p&gt;Example workflow:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;name: Prek checks
on: [push, pull_request]

jobs:
  prek:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: j178/prek-action@v1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This action installs prek and runs &lt;code&gt;prek run --all-files&lt;/code&gt; on your repository.&lt;/p&gt; 
 &lt;!-- github-actions:end --&gt; 
&lt;/details&gt; 
&lt;!-- self-update:start --&gt; 
&lt;p&gt;If installed via the standalone installer, prek can update itself to the latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;prek self update
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- self-update:end --&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;This project is heavily inspired by the original &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; tool, and it wouldn't be possible without the hard work of the maintainers and contributors of that project.&lt;/p&gt; 
&lt;p&gt;And a special thanks to the &lt;a href="https://github.com/astral-sh"&gt;Astral&lt;/a&gt; team for their remarkable projects, particularly &lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt;, from which I've learned a lot on how to write efficient and idiomatic Rust code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BurntSushi/ripgrep</title>
      <link>https://github.com/BurntSushi/ripgrep</link>
      <description>&lt;p&gt;ripgrep recursively searches directories for a regex pattern while respecting your gitignore&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ripgrep (rg)&lt;/h2&gt; 
&lt;p&gt;ripgrep is a line-oriented search tool that recursively searches the current directory for a regex pattern. By default, ripgrep will respect gitignore rules and automatically skip hidden files/directories and binary files. (To disable all automatic filtering by default, use &lt;code&gt;rg -uuu&lt;/code&gt;.) ripgrep has first class support on Windows, macOS and Linux, with binary downloads available for &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;every release&lt;/a&gt;. ripgrep is similar to other popular search tools like The Silver Searcher, ack and grep.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/actions"&gt;&lt;img src="https://github.com/BurntSushi/ripgrep/workflows/ci/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/ripgrep"&gt;&lt;img src="https://img.shields.io/crates/v/ripgrep.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://repology.org/project/ripgrep/badges"&gt;&lt;img src="https://repology.org/badge/tiny-repos/ripgrep.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Dual-licensed under MIT or the &lt;a href="https://unlicense.org"&gt;UNLICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CHANGELOG&lt;/h3&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt; for a release history.&lt;/p&gt; 
&lt;h3&gt;Documentation quick links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md"&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/regex/1/regex/#syntax"&gt;Regex syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;Configuration files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#complete"&gt;Shell completions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#building"&gt;Building&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#translations"&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Screenshot of search results&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://burntsushi.net/stuff/ripgrep1.png"&gt;&lt;img src="https://burntsushi.net/stuff/ripgrep1.png" alt="A screenshot of a sample search with ripgrep" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Quick examples comparing tools&lt;/h3&gt; 
&lt;p&gt;This example searches the entire &lt;a href="https://github.com/BurntSushi/linux"&gt;Linux kernel source tree&lt;/a&gt; (after running &lt;code&gt;make defconfig &amp;amp;&amp;amp; make -j8&lt;/code&gt;) for &lt;code&gt;[A-Z]+_SUSPEND&lt;/code&gt;, where all matches must be words. Timings were collected on a system with an Intel i9-12900K 5.2 GHz.&lt;/p&gt; 
&lt;p&gt;Please remember that a single benchmark is never enough! See my &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;blog post on ripgrep&lt;/a&gt; for a very detailed comparison with more benchmarks and analysis.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.082s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/p-ranav/hypergrep"&gt;hypergrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hgrep -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.167s (2.04x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;git grep -P -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.273s (3.34x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;The Silver Searcher&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ag -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;534&lt;/td&gt; 
   &lt;td&gt;0.443s (5.43x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r --ignore-files --no-hidden -I -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.639s (7.82x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.727s (8.91x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;2.670s (32.70x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/beyondgrep/ack3"&gt;ack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ack -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;2677&lt;/td&gt; 
   &lt;td&gt;2.935s (35.94x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Here's another benchmark on the same corpus as above that disregards gitignore files and searches with a whitelist instead. The corpus is the same as in the previous benchmark, and the flags passed to each command ensure that they are doing equivalent work:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -uuu -tc -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.063s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.607s (9.62x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grep -E -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.674s (10.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Now we'll move to searching on single large file. Here is a straight-up comparison between ripgrep, ugrep and GNU grep on a file cached in memory (~13GB, &lt;a href="http://opus.nlpl.eu/download.php?f=OpenSubtitles/v2018/mono/OpenSubtitles.raw.en.gz"&gt;&lt;code&gt;OpenSubtitles.raw.en.gz&lt;/code&gt;&lt;/a&gt;, decompressed):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.042s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;1.339s (1.28x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 egrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;6.577s (6.31x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;In the above benchmark, passing the &lt;code&gt;-n&lt;/code&gt; flag (for showing line numbers) increases the times to &lt;code&gt;1.664s&lt;/code&gt; for ripgrep and &lt;code&gt;9.484s&lt;/code&gt; for GNU grep. ugrep times are unaffected by the presence or absence of &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Beware of performance cliffs though:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.053s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;6.234s (5.92x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;28.973s (27.51x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;And performance can drop precipitously across the board when searching big files for patterns without any opportunities for literal optimizations:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;15.569s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;21.857s (1.40x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;32.409s (2.08x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6795&lt;/td&gt; 
   &lt;td&gt;8m30s (32.74x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Finally, high match counts also tend to both tank performance and smooth out the differences between tools (because performance is dominated by how quickly one can handle a match and not the algorithm used to detect the match, generally speaking):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;6.948s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;11.721s (1.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;15.217s (2.19x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Why should I use ripgrep?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;It can replace many use cases served by other search tools because it contains most of their features and is generally faster. (See &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#posix4ever"&gt;the FAQ&lt;/a&gt; for more details on whether ripgrep can truly replace grep.)&lt;/li&gt; 
 &lt;li&gt;Like other tools specialized to code search, ripgrep defaults to &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#recursive-search"&gt;recursive search&lt;/a&gt; and does &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#automatic-filtering"&gt;automatic filtering&lt;/a&gt;. Namely, ripgrep won't search files ignored by your &lt;code&gt;.gitignore&lt;/code&gt;/&lt;code&gt;.ignore&lt;/code&gt;/&lt;code&gt;.rgignore&lt;/code&gt; files, it won't search hidden files and it won't search binary files. Automatic filtering can be disabled with &lt;code&gt;rg -uuu&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;ripgrep can &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#manual-filtering-file-types"&gt;search specific types of files&lt;/a&gt;. For example, &lt;code&gt;rg -tpy foo&lt;/code&gt; limits your search to Python files and &lt;code&gt;rg -Tjs foo&lt;/code&gt; excludes JavaScript files from your search. ripgrep can be taught about new file types with custom matching rules.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports many features found in &lt;code&gt;grep&lt;/code&gt;, such as showing the context of search results, searching multiple patterns, highlighting matches with color and full Unicode support. Unlike GNU grep, ripgrep stays fast while supporting Unicode (which is always on).&lt;/li&gt; 
 &lt;li&gt;ripgrep has optional support for switching its regex engine to use PCRE2. Among other things, this makes it possible to use look-around and backreferences in your patterns, which are not supported in ripgrep's default regex engine. PCRE2 support can be enabled with &lt;code&gt;-P/--pcre2&lt;/code&gt; (use PCRE2 always) or &lt;code&gt;--auto-hybrid-regex&lt;/code&gt; (use PCRE2 only if needed). An alternative syntax is provided via the &lt;code&gt;--engine (default|pcre2|auto)&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;ripgrep has &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#replacements"&gt;rudimentary support for replacements&lt;/a&gt;, which permit rewriting output based on what was matched.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#file-encoding"&gt;searching files in text encodings&lt;/a&gt; other than UTF-8, such as UTF-16, latin-1, GBK, EUC-JP, Shift_JIS and more. (Some support for automatically detecting UTF-16 is provided. Other text encodings must be specifically specified with the &lt;code&gt;-E/--encoding&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;ripgrep supports searching files compressed in a common format (brotli, bzip2, gzip, lz4, lzma, xz, or zstandard) with the &lt;code&gt;-z/--search-zip&lt;/code&gt; flag.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#preprocessor"&gt;arbitrary input preprocessing filters&lt;/a&gt; which could be PDF text extraction, less supported decompression, decrypting, automatic encoding detection and so on.&lt;/li&gt; 
 &lt;li&gt;ripgrep can be configured via a &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;configuration file&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In other words, use ripgrep if you like speed, filtering by default, fewer bugs and Unicode support.&lt;/p&gt; 
&lt;h3&gt;Why shouldn't I use ripgrep?&lt;/h3&gt; 
&lt;p&gt;Despite initially not wanting to add every feature under the sun to ripgrep, over time, ripgrep has grown support for most features found in other file searching tools. This includes searching for results spanning across multiple lines, and opt-in support for PCRE2, which provides look-around and backreference support.&lt;/p&gt; 
&lt;p&gt;At this point, the primary reasons not to use ripgrep probably consist of one or more of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need a portable and ubiquitous tool. While ripgrep works on Windows, macOS and Linux, it is not ubiquitous and it does not conform to any standard such as POSIX. The best tool for this job is good old grep.&lt;/li&gt; 
 &lt;li&gt;There still exists some other feature (or bug) not listed in this README that you rely on that's in another tool that isn't in ripgrep.&lt;/li&gt; 
 &lt;li&gt;There is a performance edge case where ripgrep doesn't do well where another tool does do well. (Please file a bug report!)&lt;/li&gt; 
 &lt;li&gt;ripgrep isn't possible to install on your machine or isn't available for your platform. (Please file a bug report!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Is it really faster than everything else?&lt;/h3&gt; 
&lt;p&gt;Generally, yes. A large number of benchmarks with detailed analysis for each is &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;available on my blog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Summarizing, ripgrep is fast because:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is built on top of &lt;a href="https://github.com/rust-lang/regex"&gt;Rust's regex engine&lt;/a&gt;. Rust's regex engine uses finite automata, SIMD and aggressive literal optimizations to make searching very fast. (PCRE2 support can be opted into with the &lt;code&gt;-P/--pcre2&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;Rust's regex library maintains performance with full Unicode support by building UTF-8 decoding directly into its deterministic finite automaton engine.&lt;/li&gt; 
 &lt;li&gt;It supports searching with either memory maps or by searching incrementally with an intermediate buffer. The former is better for single files and the latter is better for large directories. ripgrep chooses the best searching strategy for you automatically.&lt;/li&gt; 
 &lt;li&gt;Applies your ignore patterns in &lt;code&gt;.gitignore&lt;/code&gt; files using a &lt;a href="https://docs.rs/regex/1/regex/struct.RegexSet.html"&gt;&lt;code&gt;RegexSet&lt;/code&gt;&lt;/a&gt;. That means a single file path can be matched against multiple glob patterns simultaneously.&lt;/li&gt; 
 &lt;li&gt;It uses a lock-free parallel recursive directory iterator, courtesy of &lt;a href="https://docs.rs/crossbeam"&gt;&lt;code&gt;crossbeam&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.rs/ignore"&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature comparison&lt;/h3&gt; 
&lt;p&gt;Andy Lester, author of &lt;a href="https://beyondgrep.com/"&gt;ack&lt;/a&gt;, has published an excellent table comparing the features of ack, ag, git-grep, GNU grep and ripgrep: &lt;a href="https://beyondgrep.com/feature-comparison/"&gt;https://beyondgrep.com/feature-comparison/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Note that ripgrep has grown a few significant new features recently that are not yet present in Andy's table. This includes, but is not limited to, configuration files, passthru, support for searching compressed files, multiline search and opt-in fancy regex support via PCRE2.&lt;/p&gt; 
&lt;h3&gt;Playground&lt;/h3&gt; 
&lt;p&gt;If you'd like to try ripgrep before installing, there's an unofficial &lt;a href="https://codapi.org/ripgrep/"&gt;playground&lt;/a&gt; and an &lt;a href="https://codapi.org/try/ripgrep/"&gt;interactive tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have any questions about these, please open an issue in the &lt;a href="https://github.com/nalgeon/tryxinyminutes"&gt;tutorial repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;The binary name for ripgrep is &lt;code&gt;rg&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;Archives of precompiled binaries for ripgrep are available for Windows, macOS and Linux.&lt;/a&gt;&lt;/strong&gt; Linux and Windows binaries are static executables. Users of platforms not explicitly mentioned below are advised to download one of these archives.&lt;/p&gt; 
&lt;p&gt;If you're a &lt;strong&gt;macOS Homebrew&lt;/strong&gt; or a &lt;strong&gt;Linuxbrew&lt;/strong&gt; user, then you can install ripgrep from homebrew-core:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;MacPorts&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.macports.org/ports.php?by=name&amp;amp;substr=ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo port install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Chocolatey&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://chocolatey.org/packages/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ choco install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Scoop&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/ripgrep.json"&gt;official bucket&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Winget&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/b/BurntSushi/ripgrep"&gt;winget-pkgs&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ winget install BurntSushi.ripgrep.MSVC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Arch Linux&lt;/strong&gt; user, then you can install ripgrep from the official repos:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -S ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Gentoo&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.gentoo.org/packages/sys-apps/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo emerge sys-apps/ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Fedora&lt;/strong&gt; user, you can install ripgrep from official repositories.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;openSUSE&lt;/strong&gt; user, ripgrep is included in &lt;strong&gt;openSUSE Tumbleweed&lt;/strong&gt; and &lt;strong&gt;openSUSE Leap&lt;/strong&gt; since 15.1.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo zypper install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;CentOS Stream 10&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://docs.fedoraproject.org/en-US/epel/getting-started/"&gt;EPEL&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf config-manager --set-enabled crb
$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm
$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Red Hat 10&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://docs.fedoraproject.org/en-US/epel/getting-started/"&gt;EPEL&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo subscription-manager repos --enable codeready-builder-for-rhel-10-$(arch)-rpms
$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm
$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Rocky Linux 10&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://docs.fedoraproject.org/en-US/epel/getting-started/"&gt;EPEL&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm
$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Nix&lt;/strong&gt; user, you can install ripgrep from &lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/ri/ripgrep/package.nix"&gt;nixpkgs&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ nix-env --install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Flox&lt;/strong&gt; user, you can install ripgrep as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ flox install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Guix&lt;/strong&gt; user, you can install ripgrep from the official package collection:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ guix install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Debian&lt;/strong&gt; user (or a user of a Debian derivative like &lt;strong&gt;Ubuntu&lt;/strong&gt;), then ripgrep can be installed using a binary &lt;code&gt;.deb&lt;/code&gt; file provided in each &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;ripgrep release&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ curl -LO https://github.com/BurntSushi/ripgrep/releases/download/14.1.1/ripgrep_14.1.1-1_amd64.deb
$ sudo dpkg -i ripgrep_14.1.1-1_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you run Debian stable, ripgrep is &lt;a href="https://tracker.debian.org/pkg/rust-ripgrep"&gt;officially maintained by Debian&lt;/a&gt;, although its version may be older than the &lt;code&gt;deb&lt;/code&gt; package available in the previous step.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Ubuntu Cosmic (18.10)&lt;/strong&gt; (or newer) user, ripgrep is &lt;a href="https://launchpad.net/ubuntu/+source/rust-ripgrep"&gt;available&lt;/a&gt; using the same packaging as Debian:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(N.B. Various snaps for ripgrep on Ubuntu are also available, but none of them seem to work right and generate a number of very strange bug reports that I don't know how to fix and don't have the time to fix. Therefore, it is no longer a recommended installation option.)&lt;/p&gt; 
&lt;p&gt;If you're an &lt;strong&gt;ALT&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.altlinux.org/en/search?name=ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;FreeBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.freshports.org/textproc/ripgrep/"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkg install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;OpenBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://openports.se/textproc/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ doas pkg_add ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;NetBSD&lt;/strong&gt; user, then you can install ripgrep from &lt;a href="https://pkgsrc.se/textproc/ripgrep"&gt;pkgsrc&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgin install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_64&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/haikuports/haikuports/tree/master/sys-apps/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_gcc2&lt;/strong&gt; user, then you can install ripgrep from the same port as Haiku x86_64 using the x86 secondary architecture build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep_x86
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Void Linux&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://voidlinux.org/packages/?arch=x86_64&amp;amp;q=ripgrep"&gt;official repository&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo xbps-install -Syv ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Rust programmer&lt;/strong&gt;, ripgrep can be installed with &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Note that the minimum supported version of Rust for ripgrep is &lt;strong&gt;1.85.0&lt;/strong&gt;, although ripgrep may work with older versions.&lt;/li&gt; 
 &lt;li&gt;Note that the binary may be bigger than expected because it contains debug symbols. This is intentional. To remove debug symbols and therefore reduce the file size, run &lt;code&gt;strip&lt;/code&gt; on the binary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, one can use &lt;a href="https://github.com/cargo-bins/cargo-binstall"&gt;&lt;code&gt;cargo binstall&lt;/code&gt;&lt;/a&gt; to install a ripgrep binary directly from GitHub:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo binstall ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;ripgrep is written in Rust, so you'll need to grab a &lt;a href="https://www.rust-lang.org/"&gt;Rust installation&lt;/a&gt; in order to compile it. ripgrep compiles with Rust 1.85.0 (stable) or newer. In general, ripgrep tracks the latest stable release of the Rust compiler.&lt;/p&gt; 
&lt;p&gt;To build ripgrep:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/BurntSushi/ripgrep
$ cd ripgrep
$ cargo build --release
$ ./target/release/rg --version
0.1.3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the past, ripgrep supported a &lt;code&gt;simd-accel&lt;/code&gt; Cargo feature when using a Rust nightly compiler. This only benefited UTF-16 transcoding. Since it required unstable features, this build mode was prone to breakage. Because of that, support for it has been removed. If you want SIMD optimizations for UTF-16 transcoding, then you'll have to petition the &lt;a href="https://github.com/hsivonen/encoding_rs"&gt;&lt;code&gt;encoding_rs&lt;/code&gt;&lt;/a&gt; project to use stable APIs.&lt;/p&gt; 
&lt;p&gt;Finally, optional PCRE2 support can be built with ripgrep by enabling the &lt;code&gt;pcre2&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo build --release --features 'pcre2'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enabling the PCRE2 feature works with a stable Rust compiler and will attempt to automatically find and link with your system's PCRE2 library via &lt;code&gt;pkg-config&lt;/code&gt;. If one doesn't exist, then ripgrep will build PCRE2 from source using your system's C compiler and then statically link it into the final executable. Static linking can be forced even when there is an available PCRE2 system library by either building ripgrep with the MUSL target or by setting &lt;code&gt;PCRE2_SYS_STATIC=1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;ripgrep can be built with the MUSL target on Linux by first installing the MUSL library on your system (consult your friendly neighborhood package manager). Then you just need to add MUSL support to your Rust toolchain and rebuild ripgrep, which yields a fully static executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ rustup target add x86_64-unknown-linux-musl
$ cargo build --release --target x86_64-unknown-linux-musl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Applying the &lt;code&gt;--features&lt;/code&gt; flag from above works as expected. If you want to build a static executable with MUSL and with PCRE2, then you will need to have &lt;code&gt;musl-gcc&lt;/code&gt; installed, which might be in a separate package from the actual MUSL library, depending on your Linux distribution.&lt;/p&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;p&gt;ripgrep is relatively well-tested, including both unit tests and integration tests. To run the full test suite, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo test --all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;from the repository root.&lt;/p&gt; 
&lt;h3&gt;Related tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dandavison/delta"&gt;delta&lt;/a&gt; is a syntax highlighting pager that supports the &lt;code&gt;rg --json&lt;/code&gt; output format. So all you need to do to make it work is &lt;code&gt;rg --json pattern | delta&lt;/code&gt;. See &lt;a href="https://dandavison.github.io/delta/grep.html"&gt;delta's manual section on grep&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Vulnerability reporting&lt;/h3&gt; 
&lt;p&gt;For reporting a security vulnerability, please &lt;a href="https://blog.burntsushi.net/about/"&gt;contact Andrew Gallant&lt;/a&gt;. The contact page has my email address and PGP public key if you wish to send an encrypted message.&lt;/p&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;p&gt;The following is a list of known translations of ripgrep's documentation. These are unofficially maintained and may not be up to date.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chinanf-boy/ripgrep-zh#%E6%9B%B4%E6%96%B0-"&gt;Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/UltiRequiem/traducciones/tree/master/ripgrep"&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>eclipse-zenoh/zenoh</title>
      <link>https://github.com/eclipse-zenoh/zenoh</link>
      <description>&lt;p&gt;zenoh unifies data in motion, data in-use, data at rest and computations. It carefully blends traditional pub/sub with geo-distributed storages, queries and computations, while retaining a level of time and space efficiency that is well beyond any of the mainstream stacks.&lt;/p&gt;&lt;hr&gt;&lt;img src="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/master/zenoh-dragon.png" height="150" /&gt; 
&lt;p&gt;&lt;a href="https://github.com/eclipse-zenoh/zenoh/actions?query=workflow%3ACI+branch%3Amain++"&gt;&lt;img src="https://github.com/eclipse-zenoh/zenoh/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://zenoh-rust.readthedocs.io/en/latest/?badge=latest"&gt;&lt;img src="https://readthedocs.org/projects/zenoh-rust/badge/?version=latest" alt="Documentation Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/github/eclipse-zenoh/zenoh"&gt;&lt;img src="https://codecov.io/github/eclipse-zenoh/zenoh/branch/main/graph/badge.svg?token=F8T4C8WPZD" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://github.com/eclipse-zenoh/roadmap/discussions"&gt;&lt;img src="https://img.shields.io/badge/discussion-on%20github-blue" alt="Discussion" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/2GJ958VuHs"&gt;&lt;img src="https://img.shields.io/badge/chat-on%20discord-blue" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://choosealicense.com/licenses/epl-2.0/"&gt;&lt;img src="https://img.shields.io/badge/License-EPL%202.0-blue" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Eclipse Zenoh&lt;/h1&gt; 
&lt;p&gt;Eclipse Zenoh: Zero Overhead Pub/Sub, Store/Query and Compute.&lt;/p&gt; 
&lt;p&gt;Zenoh (pronounced &lt;em&gt;/zeno/&lt;/em&gt;) unifies data in motion, data at rest, and computations. It carefully blends traditional pub/sub with geo-distributed storage, queries, and computations, while retaining a level of time and space efficiency that is well beyond any of the mainstream stacks.&lt;/p&gt; 
&lt;p&gt;Check the website &lt;a href="http://zenoh.io"&gt;zenoh.io&lt;/a&gt; for more information and &lt;a href="https://zenoh.io/docs/getting-started/installation/"&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See also the &lt;a href="https://github.com/eclipse-zenoh/roadmap"&gt;roadmap&lt;/a&gt; for more detailed technical information.&lt;/p&gt; 
&lt;h1&gt;Structure of the Repository&lt;/h1&gt; 
&lt;p&gt;This repository contains the following elements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/zenoh"&gt;zenoh&lt;/a&gt; Rust crate&lt;/p&gt; &lt;p&gt;This crate is the primary and reference implementation of the Zenoh protocol. The Zenoh libraries for other languages are bindings to this Rust implementation, except for the pure-C &lt;a href="https://github.com/eclipse-zenoh/zenoh-pico"&gt;zenoh-pico&lt;/a&gt; (see the "Language Support" section below).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/zenoh-ext"&gt;zenoh-ext&lt;/a&gt; Rust crate&lt;/p&gt; &lt;p&gt;This crate contains extended components of Zenoh:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;AdvancedPublisher&lt;/code&gt; / &lt;code&gt;AdvancedSubscriber&lt;/code&gt; - APIs for sending/receiving data with advanced delivery guarantees.&lt;/li&gt; 
   &lt;li&gt;Data serialization support. This serialization is lightweight and universal for all &lt;code&gt;zenoh&lt;/code&gt; bindings, which simplifies interoperability.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/zenohd"&gt;zenohd&lt;/a&gt; router binary&lt;/p&gt; &lt;p&gt;The Zenoh router is a standalone daemon used to support Zenoh network infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/plugins"&gt;plugins&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The crates related to plugin support in &lt;code&gt;zenohd&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/commons"&gt;commons&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The internal crates used by &lt;code&gt;zenoh&lt;/code&gt;. These crates are not intended to be imported directly, and their public APIs can be changed at any time. Stable APIs are provided by &lt;code&gt;zenoh&lt;/code&gt; and &lt;code&gt;zenoh-ext&lt;/code&gt; only.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/examples"&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Zenoh usage examples. These examples have a double purpose: they not only demonstrate writing Zenoh applications in Rust but also serve as a set of tools for experimenting with and testing Zenoh functionality.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://docs.rs/zenoh/latest/zenoh/"&gt;Docs.rs for Zenoh&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://docs.rs/zenoh/latest/zenoh-ext/"&gt;Docs.rs for Zenoh-ext&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Build and run&lt;/h1&gt; 
&lt;p&gt;Install &lt;a href="https://doc.rust-lang.org/cargo/getting-started/installation.html"&gt;Cargo and Rust&lt;/a&gt;. If you already have the Rust toolchain installed, make sure it is up to date with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;rustup update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Zenoh can be successfully compiled with Rust stable (&amp;gt;= 1.75.0), but some of its dependencies may require newer Rust versions. The &lt;code&gt;zenoh&lt;/code&gt; crate itself doesn't lock its dependencies with "=" to avoid conflicts. Instead, we provide the &lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/commons/zenoh-pinned-deps-1-75"&gt;zenoh-pinned-deps-1-75&lt;/a&gt; crate with &lt;code&gt;zenoh&lt;/code&gt; dependencies locked to Rust 1.75-compatible versions.&lt;/p&gt; 
&lt;p&gt;To build Zenoh, simply type the command below after having followed the previous instructions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo build --release --all-targets
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are multiple features in &lt;code&gt;zenoh&lt;/code&gt;; see the full list and descriptions on &lt;a href="https://docs.rs/zenoh/latest/zenoh/"&gt;docs.rs&lt;/a&gt;. For example, to use shared memory, it must be explicitly enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;zenoh = {version = "1.5.1", features = ["shared-memory"]}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/examples"&gt;Examples&lt;/a&gt; can be executed with Cargo, or directly from &lt;code&gt;target/release/examples&lt;/code&gt;. When running with Cargo, use &lt;code&gt;--&lt;/code&gt; to pass command line arguments to the examples:&lt;/p&gt; 
&lt;h3&gt;Publish/Subscribe&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo run --example z_sub
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo run --example z_pub
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Query/Reply&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo run --example z_queryable
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo run --example z_get
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Zenohd Router and Plugins&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/zenohd"&gt;zenohd&lt;/a&gt; router can be run with the command &lt;code&gt;cargo run&lt;/code&gt; or from &lt;code&gt;target/release/zenohd&lt;/code&gt;. When running with Cargo, use &lt;code&gt;--&lt;/code&gt; to pass command line arguments to &lt;code&gt;zenohd&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo run -- --config DEFAULT_CONFIG.json5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The router's purpose is to support Zenoh network infrastructure and provide additional services using &lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/plugins"&gt;plugins&lt;/a&gt;. See more details and a directory of available plugins in the &lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/zenohd"&gt;zenohd&lt;/a&gt; readme.&lt;/p&gt; 
&lt;h1&gt;Language Support&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt; - this repository&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;C&lt;/strong&gt; - there are two implementations with the same API: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/eclipse-zenoh/zenoh-c"&gt;zenoh-c&lt;/a&gt; - Rust library binding&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/eclipse-zenoh/zenoh-pico"&gt;zenoh-pico&lt;/a&gt; - pure C implementation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;C++&lt;/strong&gt; - &lt;a href="https://github.com/eclipse-zenoh/zenoh-cpp"&gt;zenoh-cpp&lt;/a&gt; - C++ wrapper over C libraries&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; - &lt;a href="https://github.com/eclipse-zenoh/zenoh-python"&gt;zenoh-python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kotlin&lt;/strong&gt; - &lt;a href="https://github.com/eclipse-zenoh/zenoh-kotlin"&gt;zenoh-kotlin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Java&lt;/strong&gt; - &lt;a href="https://github.com/eclipse-zenoh/zenoh-java"&gt;zenoh-java&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; - &lt;a href="https://github.com/eclipse-zenoh/zenoh-ts"&gt;zenoh-ts&lt;/a&gt; - WebSocket client for the plugin in &lt;a href="https://raw.githubusercontent.com/eclipse-zenoh/zenoh/main/zenohd"&gt;zenohd&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Troubleshooting&lt;/h1&gt; 
&lt;p&gt;In case of trouble, please first check &lt;a href="https://zenoh.io/docs/getting-started/troubleshooting/"&gt;this page&lt;/a&gt; to see if the issue and its cause are already known. Otherwise, you can ask a question on the &lt;a href="https://discord.gg/vSDSpqnbkm"&gt;Zenoh Discord server&lt;/a&gt;, or &lt;a href="https://github.com/eclipse-zenoh/zenoh/issues"&gt;create an issue&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>uutils/coreutils</title>
      <link>https://github.com/uutils/coreutils</link>
      <description>&lt;p&gt;Cross-platform Rust rewrite of the GNU coreutils&lt;/p&gt;&lt;hr&gt;&lt;div class="oranda-hide"&gt; 
 &lt;div align="center"&gt; 
  &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/logo.svg?sanitize=true" alt="uutils logo" /&gt;&lt;/p&gt; 
  &lt;h1&gt;uutils coreutils&lt;/h1&gt; 
  &lt;p&gt;&lt;a href="https://crates.io/crates/coreutils"&gt;&lt;img src="https://img.shields.io/crates/v/coreutils.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/wQVJbvJ"&gt;&lt;img src="https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&amp;amp;longCache=true&amp;amp;style=flat" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://github.com/uutils/coreutils/raw/main/LICENSE"&gt;&lt;img src="http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://deps.rs/repo/github/uutils/coreutils"&gt;&lt;img src="https://deps.rs/repo/github/uutils/coreutils/status.svg?sanitize=true" alt="dependency status" /&gt;&lt;/a&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;a href="https://codecov.io/gh/uutils/coreutils"&gt;&lt;img src="https://codecov.io/gh/uutils/coreutils/branch/master/graph/badge.svg?sanitize=true" alt="CodeCov" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/MSRV-1.85.0-brightgreen" alt="MSRV" /&gt; &lt;a href="https://hosted.weblate.org/projects/rust-coreutils/"&gt;&lt;img src="https://hosted.weblate.org/widget/rust-coreutils/svg-badge.svg?sanitize=true" alt="Weblate" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p&gt;uutils coreutils is a cross-platform reimplementation of the GNU coreutils in &lt;a href="http://www.rust-lang.org"&gt;Rust&lt;/a&gt;. While all programs have been implemented, some options might be missing or different behavior might be experienced.&lt;/p&gt; 
&lt;div class="oranda-hide"&gt; 
 &lt;p&gt;To install it:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install coreutils
~/.cargo/bin/coreutils
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;!-- markdownlint-disable-next-line MD026 --&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;uutils coreutils aims to be a drop-in replacement for the GNU utils. Differences with GNU are treated as bugs.&lt;/p&gt; 
&lt;p&gt;Our key objectives include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Matching GNU's output (stdout and error code) exactly&lt;/li&gt; 
 &lt;li&gt;Better error messages&lt;/li&gt; 
 &lt;li&gt;Providing comprehensive internationalization support (UTF-8)&lt;/li&gt; 
 &lt;li&gt;Improved performances&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/extensions.md"&gt;Extensions&lt;/a&gt; when relevant (example: --progress)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uutils aims to work on as many platforms as possible, to be able to use the same utils on Linux, macOS, Windows and other platforms. This ensures, for example, that scripts can be easily transferred between platforms.&lt;/p&gt; 
&lt;div class="oranda-hide"&gt; 
 &lt;h2&gt;Documentation&lt;/h2&gt; 
 &lt;p&gt;uutils has both user and developer documentation available:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://uutils.github.io/coreutils/docs/"&gt;User Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://docs.rs/crate/coreutils/"&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Both can also be generated locally, the instructions for that can be found in the &lt;a href="https://github.com/uutils/uutils.github.io"&gt;coreutils docs&lt;/a&gt; repository.&lt;/p&gt; 
 &lt;p&gt;Use &lt;a href="https://hosted.weblate.org/projects/rust-coreutils/"&gt;weblate/rust-coreutils&lt;/a&gt; to translate the Rust coreutils into your language.&lt;/p&gt; 
 &lt;!-- ANCHOR: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;Requirements&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Rust (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;GNU Make (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Rust Version&lt;/h3&gt; 
 &lt;p&gt;uutils follows Rust's release channels and is tested against stable, beta and nightly. The current Minimum Supported Rust Version (MSRV) is &lt;code&gt;1.85.0&lt;/code&gt;.&lt;/p&gt; 
 &lt;h2&gt;Building&lt;/h2&gt; 
 &lt;p&gt;There are currently two methods to build the uutils binaries: either Cargo or GNU Make.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Building the full package, including all documentation, requires both Cargo and GNU Make on a Unix platform.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;For either method, we first need to fetch the repository:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/uutils/coreutils
cd coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Cargo&lt;/h3&gt; 
 &lt;p&gt;Building uutils using Cargo is easy because the process is the same as for every other Rust program:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command builds the most portable common core set of uutils into a multicall (BusyBox-type) binary, named 'coreutils', on most Rust-supported platforms.&lt;/p&gt; 
 &lt;p&gt;Additional platform-specific uutils are often available. Building these expanded sets of uutils for a platform (on that platform) is as simple as specifying it as a feature:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release --features macos
# or ...
cargo build --release --features windows
# or ...
cargo build --release --features unix
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don't want to build every utility available on your platform into the final binary, you can also specify which ones you want to build manually. For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --features "base32 cat echo rm" --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don't want to build the multicall binary and would prefer to build the utilities as individual binaries, that is also possible. Each utility is contained in its own package within the main repository, named "uu_UTILNAME". To build individual utilities, use cargo to build just the specific packages (using the &lt;code&gt;--package&lt;/code&gt; [aka &lt;code&gt;-p&lt;/code&gt;] option). For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build -p uu_base32 -p uu_cat -p uu_echo -p uu_rm
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;GNU Make&lt;/h3&gt; 
 &lt;p&gt;Building using &lt;code&gt;make&lt;/code&gt; is a simple process as well.&lt;/p&gt; 
 &lt;p&gt;To simply build all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;In release mode:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROFILE=release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make SKIP_UTILS='UTILITY_1 UTILITY_2'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make UTILS='UTILITY_1 UTILITY_2'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Installation&lt;/h2&gt; 
 &lt;h3&gt;Install with Cargo&lt;/h3&gt; 
 &lt;p&gt;Likewise, installing can simply be done using:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install --path . --locked
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command will install uutils into Cargo's &lt;em&gt;bin&lt;/em&gt; folder (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;$HOME/.cargo/bin&lt;/code&gt;).&lt;/p&gt; 
 &lt;p&gt;This does not install files necessary for shell completion or manpages. For manpages or shell completion to work, use &lt;code&gt;GNU Make&lt;/code&gt; or see &lt;code&gt;Manually install shell completions&lt;/code&gt;/&lt;code&gt;Manually install manpages&lt;/code&gt;.&lt;/p&gt; 
 &lt;h3&gt;Install with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To install all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install using &lt;code&gt;sudo&lt;/code&gt; switch &lt;code&gt;-E&lt;/code&gt; must be used:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;sudo -E make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make SKIP_UTILS='UTILITY_1 UTILITY_2' install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make UTILS='UTILITY_1 UTILITY_2' install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install every program with a prefix (e.g. uu-echo uu-cat):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROG_PREFIX=PREFIX_GOES_HERE install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make MULTICALL=y install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Set install parent directory (default value is /usr/local):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# DESTDIR is also supported
make PREFIX=/my/path install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Installing with &lt;code&gt;make&lt;/code&gt; installs shell completions for all installed utilities for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;. Completions for &lt;code&gt;elvish&lt;/code&gt; and &lt;code&gt;powershell&lt;/code&gt; can also be generated; See &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;To skip installation of completions and manpages:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make COMPLETIONS=n MANPAGES=n install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install shell completions&lt;/h3&gt; 
 &lt;p&gt;The &lt;code&gt;coreutils&lt;/code&gt; binary can generate completions for the &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;elvish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; shells. It prints the result to stdout.&lt;/p&gt; 
 &lt;p&gt;The syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run completion &amp;lt;utility&amp;gt; &amp;lt;shell&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install completions for &lt;code&gt;ls&lt;/code&gt; on &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;/usr/local/share/bash-completion/completions/ls&lt;/code&gt;, run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run completion ls bash &amp;gt; /usr/local/share/bash-completion/completions/ls
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Completion for prefixed &lt;code&gt;cp&lt;/code&gt; with &lt;code&gt;uu-&lt;/code&gt; on &lt;code&gt;zsh&lt;/code&gt; is generated by&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;env PROG_PREFIX=uu- cargo run completion cp zsh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install manpages&lt;/h3&gt; 
 &lt;p&gt;To generate manpages, the syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo run manpage &amp;lt;utility&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install the manpage for &lt;code&gt;ls&lt;/code&gt; to &lt;code&gt;/usr/local/share/man/man1/ls.1&lt;/code&gt; run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo run manpage ls &amp;gt; /usr/local/share/man/man1/ls.1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Un-installation&lt;/h2&gt; 
 &lt;p&gt;Un-installation differs depending on how you have installed uutils. If you used Cargo to install, use Cargo to uninstall. If you used GNU Make to install, use Make to uninstall.&lt;/p&gt; 
 &lt;h3&gt;Uninstall with Cargo&lt;/h3&gt; 
 &lt;p&gt;To uninstall uutils:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo uninstall coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Uninstall with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To uninstall all utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall every program with a set prefix:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROG_PREFIX=PREFIX_GOES_HERE uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make MULTICALL=y uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall from a custom parent directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# DESTDIR is also supported
make PREFIX=/my/path uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- ANCHOR_END: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;GNU test suite compatibility&lt;/h2&gt; 
 &lt;p&gt;Below is the evolution of how many GNU tests uutils passes. A more detailed breakdown of the GNU test results of the main branch can be found &lt;a href="https://uutils.github.io/coreutils/docs/test_coverage.html"&gt;in the user manual&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href="https://github.com/orgs/uutils/projects/1"&gt;https://github.com/orgs/uutils/projects/1&lt;/a&gt; for the main meta bugs (many are missing).&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://github.com/uutils/coreutils-tracking/raw/main/gnu-results.svg?raw=true" alt="Evolution over time" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- close oranda-hide div --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To contribute to uutils, please see &lt;a href="https://raw.githubusercontent.com/uutils/coreutils/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uutils is licensed under the MIT License - see the &lt;code&gt;LICENSE&lt;/code&gt; file for details&lt;/p&gt; 
&lt;p&gt;GNU Coreutils is licensed under the GPL 3.0 or later.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nushell/nushell</title>
      <link>https://github.com/nushell/nushell</link>
      <description>&lt;p&gt;A new type of shell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nushell 
 &lt;!-- omit in toc --&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/nu"&gt;&lt;img src="https://img.shields.io/crates/v/nu.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/nushell/nushell/ci.yml?branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/actions/workflows/nightly-build.yml"&gt;&lt;img src="https://github.com/nushell/nushell/actions/workflows/nightly-build.yml/badge.svg?sanitize=true" alt="Nightly Build" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NtAbbGn"&gt;&lt;img src="https://img.shields.io/discord/601130461678272522.svg?logo=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://changelog.com/podcast/363"&gt;&lt;img src="https://img.shields.io/badge/The%20Changelog-%23363-61c192.svg?sanitize=true" alt="The Changelog #363" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/graphs/commit-activity"&gt;&lt;img src="https://img.shields.io/github/commit-activity/m/nushell/nushell" alt="GitHub commit activity" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nushell/nushell/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/nushell/nushell" alt="GitHub contributors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A new type of shell.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/nushell/nushell/main/assets/nushell-autocomplete6.gif" alt="Example of nushell" title="Example of nushell" /&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents 
 &lt;!-- omit in toc --&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#status"&gt;Status&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#learning-about-nu"&gt;Learning About Nu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#philosophy"&gt;Philosophy&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#pipelines"&gt;Pipelines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#opening-files"&gt;Opening files&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#goals"&gt;Goals&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#officially-supported-by"&gt;Officially Supported By&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;This project has reached a minimum-viable-product level of quality. Many people use it as their daily driver, but it may be unstable for some commands. Nu's design is subject to change as it matures.&lt;/p&gt; 
&lt;h2&gt;Learning About Nu&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://www.nushell.sh/book/"&gt;Nushell book&lt;/a&gt; is the primary source of Nushell documentation. You can find &lt;a href="https://www.nushell.sh/commands/"&gt;a full list of Nu commands in the book&lt;/a&gt;, and we have many examples of using Nu in our &lt;a href="https://www.nushell.sh/cookbook/"&gt;cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We're also active on &lt;a href="https://discord.gg/NtAbbGn"&gt;Discord&lt;/a&gt;; come and chat with us!&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To quickly install Nu:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Linux and macOS
brew install nushell
# Windows
winget install nushell
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use &lt;code&gt;Nu&lt;/code&gt; in GitHub Action, check &lt;a href="https://github.com/marketplace/actions/setup-nu"&gt;setup-nu&lt;/a&gt; for more detail.&lt;/p&gt; 
&lt;p&gt;Detailed installation instructions can be found in the &lt;a href="https://www.nushell.sh/book/installation.html"&gt;installation chapter of the book&lt;/a&gt;. Nu is available via many package managers:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/nushell/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/nushell.svg?columns=3" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For details about which platforms the Nushell team actively supports, see &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/devdocs/PLATFORM_SUPPORT.md"&gt;our platform support policy&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The default configurations can be found at &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/crates/nu-utils/src/default_files"&gt;sample_config&lt;/a&gt; which are the configuration files one gets when they startup Nushell for the first time.&lt;/p&gt; 
&lt;p&gt;It sets all of the default configuration to run Nushell. From here one can then customize this file for their specific needs.&lt;/p&gt; 
&lt;p&gt;To see where &lt;em&gt;config.nu&lt;/em&gt; is located on your system simply type this command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;$nu.config-path
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please see our &lt;a href="https://www.nushell.sh"&gt;book&lt;/a&gt; for all of the Nushell documentation.&lt;/p&gt; 
&lt;h2&gt;Philosophy&lt;/h2&gt; 
&lt;p&gt;Nu draws inspiration from projects like PowerShell, functional programming languages, and modern CLI tools. Rather than thinking of files and data as raw streams of text, Nu looks at each input as something with structure. For example, when you list the contents of a directory what you get back is a table of rows, where each row represents an item in that directory. These values can be piped through a series of steps, in a series of commands called a 'pipeline'.&lt;/p&gt; 
&lt;h3&gt;Pipelines&lt;/h3&gt; 
&lt;p&gt;In Unix, it's common to pipe between commands to split up a sophisticated command over multiple steps. Nu takes this a step further and builds heavily on the idea of &lt;em&gt;pipelines&lt;/em&gt;. As in the Unix philosophy, Nu allows commands to output to stdout and read from stdin. Additionally, commands can output structured data (you can think of this as a third kind of stream). Commands that work in the pipeline fit into one of three categories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Commands that produce a stream (e.g., &lt;code&gt;ls&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Commands that filter a stream (e.g., &lt;code&gt;where type == "dir"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Commands that consume the output of the pipeline (e.g., &lt;code&gt;table&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Commands are separated by the pipe symbol (&lt;code&gt;|&lt;/code&gt;) to denote a pipeline flowing left to right.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ls | where type == "dir" | table
# =&amp;gt; ╭────┬──────────┬──────┬─────────┬───────────────╮
# =&amp;gt; │ #  │   name   │ type │  size   │   modified    │
# =&amp;gt; ├────┼──────────┼──────┼─────────┼───────────────┤
# =&amp;gt; │  0 │ .cargo   │ dir  │     0 B │ 9 minutes ago │
# =&amp;gt; │  1 │ assets   │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  2 │ crates   │ dir  │ 4.0 KiB │ 2 weeks ago   │
# =&amp;gt; │  3 │ docker   │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  4 │ docs     │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  5 │ images   │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  6 │ pkg_mgrs │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  7 │ samples  │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; │  8 │ src      │ dir  │ 4.0 KiB │ 2 weeks ago   │
# =&amp;gt; │  9 │ target   │ dir  │     0 B │ a day ago     │
# =&amp;gt; │ 10 │ tests    │ dir  │ 4.0 KiB │ 2 weeks ago   │
# =&amp;gt; │ 11 │ wix      │ dir  │     0 B │ 2 weeks ago   │
# =&amp;gt; ╰────┴──────────┴──────┴─────────┴───────────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because most of the time you'll want to see the output of a pipeline, &lt;code&gt;table&lt;/code&gt; is assumed. We could have also written the above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ls | where type == "dir"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Being able to use the same commands and compose them differently is an important philosophy in Nu. For example, we could use the built-in &lt;code&gt;ps&lt;/code&gt; command to get a list of the running processes, using the same &lt;code&gt;where&lt;/code&gt; as above.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ps | where cpu &amp;gt; 0
# =&amp;gt; ╭───┬───────┬───────────┬───────┬───────────┬───────────╮
# =&amp;gt; │ # │  pid  │   name    │  cpu  │    mem    │  virtual  │
# =&amp;gt; ├───┼───────┼───────────┼───────┼───────────┼───────────┤
# =&amp;gt; │ 0 │  2240 │ Slack.exe │ 16.40 │ 178.3 MiB │ 232.6 MiB │
# =&amp;gt; │ 1 │ 16948 │ Slack.exe │ 16.32 │ 205.0 MiB │ 197.9 MiB │
# =&amp;gt; │ 2 │ 17700 │ nu.exe    │  3.77 │  26.1 MiB │   8.8 MiB │
# =&amp;gt; ╰───┴───────┴───────────┴───────┴───────────┴───────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Opening files&lt;/h3&gt; 
&lt;p&gt;Nu can load file and URL contents as raw text or structured data (if it recognizes the format). For example, you can load a .toml file as structured data and explore it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml
# =&amp;gt; ╭──────────────────┬────────────────────╮
# =&amp;gt; │ bin              │ [table 1 row]      │
# =&amp;gt; │ dependencies     │ {record 25 fields} │
# =&amp;gt; │ dev-dependencies │ {record 8 fields}  │
# =&amp;gt; │ features         │ {record 10 fields} │
# =&amp;gt; │ package          │ {record 13 fields} │
# =&amp;gt; │ patch            │ {record 1 field}   │
# =&amp;gt; │ profile          │ {record 3 fields}  │
# =&amp;gt; │ target           │ {record 3 fields}  │
# =&amp;gt; │ workspace        │ {record 1 field}   │
# =&amp;gt; ╰──────────────────┴────────────────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can pipe this into a command that gets the contents of one of the columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml | get package
# =&amp;gt; ╭───────────────┬────────────────────────────────────╮
# =&amp;gt; │ authors       │ [list 1 item]                      │
# =&amp;gt; │ default-run   │ nu                                 │
# =&amp;gt; │ description   │ A new type of shell                │
# =&amp;gt; │ documentation │ https://www.nushell.sh/book/       │
# =&amp;gt; │ edition       │ 2018                               │
# =&amp;gt; │ exclude       │ [list 1 item]                      │
# =&amp;gt; │ homepage      │ https://www.nushell.sh             │
# =&amp;gt; │ license       │ MIT                                │
# =&amp;gt; │ metadata      │ {record 1 field}                   │
# =&amp;gt; │ name          │ nu                                 │
# =&amp;gt; │ repository    │ https://github.com/nushell/nushell │
# =&amp;gt; │ rust-version  │ 1.60                               │
# =&amp;gt; │ version       │ 0.72.0                             │
# =&amp;gt; ╰───────────────┴────────────────────────────────────╯
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And if needed we can drill down further:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;open Cargo.toml | get package.version
# =&amp;gt; 0.72.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Plugins&lt;/h3&gt; 
&lt;p&gt;Nu supports plugins that offer additional functionality to the shell and follow the same structured data model that built-in commands use. There are a few examples in the &lt;code&gt;crates/nu_plugins_*&lt;/code&gt; directories.&lt;/p&gt; 
&lt;p&gt;Plugins are binaries that are available in your path and follow a &lt;code&gt;nu_plugin_*&lt;/code&gt; naming convention. These binaries interact with nu via a simple JSON-RPC protocol where the command identifies itself and passes along its configuration, making it available for use. If the plugin is a filter, data streams to it one element at a time, and it can stream data back in return via stdin/stdout. If the plugin is a sink, it is given the full vector of final data and is given free reign over stdin/stdout to use as it pleases.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/nushell/awesome-nu#plugins"&gt;awesome-nu repo&lt;/a&gt; lists a variety of nu-plugins while the &lt;a href="https://github.com/nushell/showcase"&gt;showcase repo&lt;/a&gt; &lt;em&gt;shows&lt;/em&gt; off informative blog posts that have been written about Nushell along with videos that highlight technical topics that have been presented.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;Nu adheres closely to a set of goals that make up its design philosophy. As features are added, they are checked against these goals.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;First and foremost, Nu is cross-platform. Commands and techniques should work across platforms and Nu has &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/devdocs/PLATFORM_SUPPORT.md"&gt;first-class support for Windows, macOS, and Linux&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu ensures compatibility with existing platform-specific executables.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu's workflow and tools should have the usability expected of modern software in 2022 (and beyond).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nu views data as either structured or unstructured. It is a structured shell like PowerShell.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Finally, Nu views data functionally. Rather than using mutation, pipelines act as a means to load, change, and save data without mutable state.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Officially Supported By&lt;/h2&gt; 
&lt;p&gt;Please submit an issue or PR to be added to this list.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/starship/starship"&gt;starship&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ohmyposh.dev"&gt;oh-my-posh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://couchbase.sh"&gt;Couchbase Shell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pypa/virtualenv"&gt;virtualenv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ellie/atuin"&gt;atuin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clap-rs/clap/tree/master/clap_complete_nushell"&gt;clap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://github.com/bevry/dorothy"&gt;Dorothy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/direnv/direnv/raw/master/docs/hook.md#nushell"&gt;Direnv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x-cmd.com/mod/nu"&gt;x-cmd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/version-fox/vfox"&gt;vfox&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/nushell/nushell/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt; for details. Thanks to all the people who already contributed!&lt;/p&gt; 
&lt;a href="https://github.com/nushell/nushell/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=nushell/nushell&amp;amp;max=750&amp;amp;columns=20" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The project is made available under the MIT license. See the &lt;code&gt;LICENSE&lt;/code&gt; file for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>0xPlaygrounds/rig</title>
      <link>https://github.com/0xPlaygrounds/rig</link>
      <description>&lt;p&gt;⚙️🦀 Build modular and scalable LLM Applications in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="img/rig-playgrounds-dark.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="img/rig-playgrounds-light.svg" /&gt; 
  &lt;img src="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/img/rig-playgrounds-light.svg?sanitize=true" style="width: 40%; height: 40%;" alt="Rig logo" /&gt; 
 &lt;/picture&gt; &lt;br /&gt; &lt;a href="https://docs.rig.rs"&gt;&lt;img src="https://img.shields.io/badge/📖 docs-rig.rs-dca282.svg" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://docs.rs/rig-core/latest/rig/"&gt;&lt;img src="https://img.shields.io/badge/docs-API Reference-dca282.svg" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://crates.io/crates/rig-core"&gt;&lt;img src="https://img.shields.io/crates/v/rig-core.svg?color=dca282" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://crates.io/crates/rig-core"&gt;&lt;img src="https://img.shields.io/crates/d/rig-core.svg?color=dca282" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://discord.gg/playgrounds"&gt;&lt;img src="https://img.shields.io/discord/511303648119226382?color=%236d82cc&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/0xPlaygrounds/rig"&gt;&lt;img src="https://img.shields.io/github/stars/0xPlaygrounds/rig?style=social" alt="stars - rig" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href=""&gt;&lt;img src="https://img.shields.io/badge/built_with-Rust-dca282.svg?logo=rust" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/ryzomeai"&gt;&lt;img src="https://img.shields.io/twitter/follow/ryzomeai" /&gt;&lt;/a&gt; &amp;nbsp; &lt;br /&gt; &lt;/p&gt; &amp;nbsp; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://docs.rig.rs"&gt;📑 Docs&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href="https://rig.rs"&gt;🌐 Website&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href="https://github.com/0xPlaygrounds/rig/issues/new"&gt;🤝 Contribute&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href="https://docs.rig.rs/guides"&gt;✍🏽 Blogs&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;✨ If you would like to help spread the word about Rig, please consider starring the repo!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Here be dragons! As we plan to ship a torrent of features in the following months, future updates &lt;strong&gt;will&lt;/strong&gt; contain &lt;strong&gt;breaking changes&lt;/strong&gt;. With Rig evolving, we'll annotate changes and highlight migration paths as we encounter them.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#table-of-contents"&gt;Table of contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#what-is-rig"&gt;What is Rig?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#high-level-features"&gt;High-level features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#who-is-using-rig-in-production"&gt;Who's using Rig in production?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#get-started"&gt;Get Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#simple-example"&gt;Simple example:&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#integrations"&gt;Integrations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is Rig?&lt;/h2&gt; 
&lt;p&gt;Rig is a Rust library for building scalable, modular, and ergonomic &lt;strong&gt;LLM-powered&lt;/strong&gt; applications.&lt;/p&gt; 
&lt;p&gt;More information about this crate can be found in the &lt;a href="https://docs.rig.rs"&gt;official&lt;/a&gt; &amp;amp; &lt;a href="https://docs.rs/rig-core/latest/rig/"&gt;crate&lt;/a&gt; (API Reference) documentations.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Agentic workflows that can handle multi-turn streaming and prompting&lt;/li&gt; 
 &lt;li&gt;Full &lt;a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/"&gt;GenAI Semantic Convention&lt;/a&gt; compatibility&lt;/li&gt; 
 &lt;li&gt;20+ model providers, all under one singular unified interface&lt;/li&gt; 
 &lt;li&gt;10+ vector store integrations, all under one singular unified interface&lt;/li&gt; 
 &lt;li&gt;Full support for LLM completion and embedding workflows&lt;/li&gt; 
 &lt;li&gt;Support for transcription, audio generation and image generation model capabilities&lt;/li&gt; 
 &lt;li&gt;Integrate LLMs in your app with minimal boilerplate&lt;/li&gt; 
 &lt;li&gt;Full WASM compatibility (core library only)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who is using Rig in production?&lt;/h2&gt; 
&lt;p&gt;Below is a non-exhaustive list of companies and people who are using Rig in production:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/firstbatchxyz/dkn-compute-node"&gt;Dria Compute Node&lt;/a&gt; - a node that serves computation results within the Dria Knowledge Network&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/rust-sdk"&gt;The MCP Rust SDK&lt;/a&gt; - the official Model Context Protocol Rust SDK. Has an example for usage with Rig.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/buger/probe"&gt;Probe&lt;/a&gt; - an AI-friendly, fully local semantic code search tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NethermindEth/nine"&gt;NINE&lt;/a&gt; - Neural Interconnected Nodes Engine, by &lt;a href="https://www.nethermind.io/"&gt;Nethermind.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xPlaygrounds/rig-onchain-kit"&gt;rig-onchain-kit&lt;/a&gt; - the Rig Onchain Kit. Intended to make interactions between Solana/EVM and Rig much easier to implement.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linera-io/linera-protocol"&gt;Linera Protocol&lt;/a&gt; - Decentralized blockchain infrastructure designed for highly scalable, secure, low-latency Web3 applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/piotrostr/listen"&gt;Listen&lt;/a&gt; - A framework aiming to become the go-to framework for AI portfolio management agents. Powers &lt;a href="https://app.listen-rs.com/"&gt;the Listen app.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vinhnx/vtcode"&gt;VT Code&lt;/a&gt; - VT Code is a Rust-based terminal coding agent with semantic code intelligence via Tree-sitter and ast-grep. VT Code uses &lt;code&gt;rig&lt;/code&gt; for simplifying LLM calls and implement model picker.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Are you also using Rig in production? &lt;a href="https://www.github.com/0xPlaygrounds/rig/issues"&gt;Open an issue&lt;/a&gt; to have your name added!&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo add rig-core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Simple example:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use rig::{completion::Prompt, providers::openai};

#[tokio::main]
async fn main() {
    // Create OpenAI client and model
    // This requires the `OPENAI_API_KEY` environment variable to be set.
    let openai_client = openai::Client::from_env();

    let gpt4 = openai_client.agent("gpt-4").build();

    // Prompt the model and print its response
    let response = gpt4
        .prompt("Who are you?")
        .await
        .expect("Failed to prompt GPT-4");

    println!("GPT-4: {response}");
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note using &lt;code&gt;#[tokio::main]&lt;/code&gt; requires you enable tokio's &lt;code&gt;macros&lt;/code&gt; and &lt;code&gt;rt-multi-thread&lt;/code&gt; features or just &lt;code&gt;full&lt;/code&gt; to enable all features (&lt;code&gt;cargo add tokio --features macros,rt-multi-thread&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;You can find more examples each crate's &lt;code&gt;examples&lt;/code&gt; (ie. &lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/rig-core/examples"&gt;&lt;code&gt;rig-core/examples&lt;/code&gt;&lt;/a&gt;) directory. More detailed use cases walkthroughs are regularly published on our &lt;a href="https://dev.to/0thtachi"&gt;Dev.to Blog&lt;/a&gt; and added to Rig's official documentation &lt;a href="http://docs.rig.rs"&gt;(docs.rig.rs)&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Integrations&lt;/h2&gt; 
&lt;p&gt;Vector stores are available as separate companion-crates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MongoDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-mongodb"&gt;&lt;code&gt;rig-mongodb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;LanceDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-lancedb"&gt;&lt;code&gt;rig-lancedb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Neo4j: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-neo4j"&gt;&lt;code&gt;rig-neo4j&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Qdrant: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-qdrant"&gt;&lt;code&gt;rig-qdrant&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SQLite: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-sqlite"&gt;&lt;code&gt;rig-sqlite&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SurrealDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-surrealdb"&gt;&lt;code&gt;rig-surrealdb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Milvus: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-milvus"&gt;&lt;code&gt;rig-milvus&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ScyllaDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-scylladb"&gt;&lt;code&gt;rig-scylladb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;AWS S3Vectors: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-s3vectors"&gt;&lt;code&gt;rig-s3vectors&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HelixDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-helixdb"&gt;&lt;code&gt;rig-helixdb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following providers are available as separate companion-crates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fastembed: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-fastembed"&gt;&lt;code&gt;rig-fastembed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Eternal AI: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-eternalai"&gt;&lt;code&gt;rig-eternalai&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="center"&gt; &lt;br /&gt; &lt;br /&gt; &lt;img src="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/img/built-by-playgrounds.svg?sanitize=true" alt="Build by Playgrounds" width="30%" /&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MystenLabs/sui</title>
      <link>https://github.com/MystenLabs/sui</link>
      <description>&lt;p&gt;Sui, a next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the Move programming language&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/MystenLabs/sui/refs/heads/main/docs/site/static/img/logo.svg?sanitize=true" alt="Logo" width="100" height="100" /&gt; &lt;/p&gt; 
&lt;h1&gt;Welcome to Sui&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/MystenLabs/sui/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/MystenLabs/sui.svg?sort=semver" alt="Github release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/MystenLabs/sui/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/MystenLabs/sui" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://sui.io"&gt;Sui&lt;/a&gt; is a next-generation smart contract platform with high throughput, low latency, and an asset-oriented programming model powered by the &lt;a href="https://github.com/MystenLabs/awesome-move"&gt;Move programming language&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sui Highlights&lt;/h2&gt; 
&lt;p&gt;Sui offers the following benefits and capabilities:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unmatched scalability, instant settlement&lt;/li&gt; 
 &lt;li&gt;A safe smart contract language accessible to mainstream developers&lt;/li&gt; 
 &lt;li&gt;Ability to define rich and composable on-chain assets&lt;/li&gt; 
 &lt;li&gt;Better user experience for web3 apps&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sui is the only blockchain today that can scale with the growth of web3 while achieving industry-leading performance, cost, programmability, and usability. Sui demonstrates capacity beyond the transaction processing capabilities of established systems – traditional and blockchain alike. Sui is the first internet-scale programmable blockchain platform, a foundational layer for web3.&lt;/p&gt; 
&lt;h2&gt;Sui Architecture&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart LR
    CC(CLI Client) --&amp;gt; ClientService
    RC(Rest Client) --&amp;gt; ClientService
    RPCC(RPC Client) --&amp;gt; ClientService
    ClientService --&amp;gt; AuthorityAggregator
    AuthorityAggregator --&amp;gt; AC1[AuthorityClient] &amp;amp; AC2[AuthorityClient]
    subgraph Authority1
      AS[AuthorityState]
    end
    subgraph Authority2
      AS2[AuthorityState]
    end
    AC1 &amp;lt;==&amp;gt;|Network TCP| Authority1
    AC2 &amp;lt;==&amp;gt;|Network TCP| Authority2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sui Overview&lt;/h2&gt; 
&lt;p&gt;Sui is a smart contract platform maintained by a permissionless set of authorities that play a role similar to validators or miners in other blockchain systems.&lt;/p&gt; 
&lt;p&gt;Sui offers scalability and unprecedented low-latency for common use cases. Sui makes the vast majority of transactions processable in parallel, which makes better use of processing resources, and offers the option to increase throughput with more resources. Sui forgoes consensus to instead use simpler and lower-latency primitives for common use cases, such as payment transactions and asset transfers. This is unprecedented in the blockchain world and enables a number of new latency-sensitive distributed applications, ranging from gaming to retail payment at physical points of sale.&lt;/p&gt; 
&lt;p&gt;Sui is written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt; and supports smart contracts written in the &lt;a href="https://github.com/move-language/move"&gt;Move programming language&lt;/a&gt; to define assets that may have an owner. Move programs define operations on these assets including custom rules for their creation, the transfer of these assets to new owners, and operations that mutate assets.&lt;/p&gt; 
&lt;p&gt;Sui has a native token called SUI, with a fixed supply. The SUI token is used to pay for gas, and is also used as &lt;a href="https://learn.bybit.com/blockchain/delegated-proof-of-stake-dpos/"&gt;delegated stake on authorities&lt;/a&gt; within an epoch. The voting power of authorities within this epoch is a function of this delegated stake. Authorities are periodically reconfigured according to the stake delegated to them. In any epoch, the set of authorities is &lt;a href="https://pmg.csail.mit.edu/papers/osdi99.pdf"&gt;Byzantine fault tolerant&lt;/a&gt;. At the end of the epoch, fees collected through all transactions processed are distributed to authorities according to their contribution to the operation of the system. Authorities can in turn share some of the fees as rewards to users that delegated stakes to them.&lt;/p&gt; 
&lt;p&gt;Sui is supported by several cutting-edge &lt;a href="https://github.com/MystenLabs/sui/raw/main/docs/content/concepts/research-papers.mdx"&gt;peer-reviewed studies&lt;/a&gt; and extensive years of open-source development.&lt;/p&gt; 
&lt;h2&gt;More About Sui&lt;/h2&gt; 
&lt;p&gt;Use the following links to learn more about Sui and the Sui ecosystem:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Learn more about working with Sui in the &lt;a href="https://docs.sui.io/"&gt;Sui Documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join the Sui community on &lt;a href="https://discord.gg/sui"&gt;Sui Discord&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Find out more about the Sui ecosystem on the &lt;a href="https://sui.io/resources/"&gt;Sui Resources&lt;/a&gt; page.&lt;/li&gt; 
 &lt;li&gt;Review information about Sui governance, &lt;a href="https://suifoundation.org/decentralization"&gt;decentralization&lt;/a&gt;, and &lt;a href="https://sui.io/grants-hub"&gt;Developer Grants Program&lt;/a&gt; on the &lt;a href="https://sui.io/about"&gt;Sui Foundation&lt;/a&gt; site.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; for details on how to contribute to Sui.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/CODE_OF_CONDUCT.MD"&gt;Code of Conduct&lt;/a&gt; for details on our code of conduct.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>block/goose</title>
      <link>https://github.com/block/goose</link>
      <description>&lt;p&gt;an open source, extensible AI agent that goes beyond code suggestions - install, execute, edit, and test with any LLM&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;goose&lt;/h1&gt; 
 &lt;p&gt;&lt;em&gt;a local, extensible, open source AI agent that automates engineering tasks&lt;/em&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt; &lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://discord.gg/7GaTvbDwga"&gt; &lt;img src="https://img.shields.io/discord/1287729918100246654?logo=discord&amp;amp;logoColor=white&amp;amp;label=Join+Us&amp;amp;color=blueviolet" alt="Discord" /&gt; &lt;/a&gt; &lt;a href="https://github.com/block/goose/actions/workflows/ci.yml"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/block/goose/ci.yml?branch=main" alt="CI" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;🎉 Hacktoberfest 2025 🎉&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;goose&lt;/code&gt; is a participating project in Hacktoberfest 2025! We’re so excited for your contributions, and have created a wide variety of issues so that anyone can contribute. Whether you're a seasoned developer or a first-time open source contributor, there's something for everyone.&lt;/p&gt; 
&lt;h3&gt;To get started:&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read the &lt;a href="https://github.com/block/goose/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href="https://github.com/block/.github/raw/main/CODE_OF_CONDUCT.md"&gt;code of conduct&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href="https://raw.githubusercontent.com/block/goose/main/ai-assisted-coding-guide.md"&gt;full Responsible AI-Assisted Coding Guide&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Choose a task from this project's Hacktoberfest issues in our &lt;a href="https://github.com/block/goose/issues/4705"&gt;Project Hub&lt;/a&gt; and follow the instructions. Each issue has the 🏷️ &lt;code&gt;hacktoberfest&lt;/code&gt; label.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Have questions? Connecting with us in our &lt;a href="https://discord.gg/block-opensource"&gt;Discord community&lt;/a&gt; in the &lt;code&gt;#hacktoberfest&lt;/code&gt; project channel.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;goose is your on-machine AI agent, capable of automating complex development tasks from start to finish. More than just code suggestions, goose can build entire projects from scratch, write and execute code, debug failures, orchestrate workflows, and interact with external APIs - &lt;em&gt;autonomously&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Whether you're prototyping an idea, refining existing code, or managing intricate engineering pipelines, goose adapts to your workflow and executes tasks with precision.&lt;/p&gt; 
&lt;p&gt;Designed for maximum flexibility, goose works with any LLM and supports multi-model configuration to optimize performance and cost, seamlessly integrates with MCP servers, and is available as both a desktop app as well as CLI - making it the ultimate AI assistant for developers who want to move faster and focus on innovation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/D-DpDunrbpo"&gt;&lt;img src="https://github.com/user-attachments/assets/ddc71240-3928-41b5-8210-626dfb28af7a" alt="Watch the video" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Quick Links&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/getting-started/installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/getting-started"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/block/goose/raw/main/GOVERNANCE.md"&gt;Governance&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;a little goose humor 🦢&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Why did the developer choose goose as their AI agent?&lt;/p&gt; 
 &lt;p&gt;Because it always helps them "migrate" their code to production! 🚀&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;goose around with us&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/block-opensource"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/@goose-oss"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/goose-oss"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/goose_oss"&gt;Twitter/X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bsky.app/profile/opensource.block.xyz"&gt;Bluesky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://njump.me/opensource@block.xyz"&gt;Nostr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>paradigmxyz/reth</title>
      <link>https://github.com/paradigmxyz/reth</link>
      <description>&lt;p&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol, in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reth&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/bench.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/actions/workflows/bench.yml/badge.svg?sanitize=true" alt="bench status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/unit.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/workflows/unit/badge.svg?sanitize=true" alt="CI status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/lint.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/actions/workflows/lint.yml/badge.svg?sanitize=true" alt="cargo-lint status" /&gt;&lt;/a&gt; &lt;a href="https://t.me/paradigm_reth"&gt;&lt;img src="https://img.shields.io/endpoint?color=neon&amp;amp;logo=telegram&amp;amp;label=chat&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fparadigm%5Freth" alt="Telegram Chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-prod.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://paradigmxyz.github.io/reth/installation/installation.html"&gt;Install&lt;/a&gt;&lt;/strong&gt; | &lt;a href="https://reth.rs"&gt;User Docs&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs"&gt;Developer Docs&lt;/a&gt; | &lt;a href="https://reth.rs/docs"&gt;Crate Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Reth?&lt;/h2&gt; 
&lt;p&gt;Reth (short for Rust Ethereum, &lt;a href="https://x.com/kelvinfichter/status/1597653609411268608"&gt;pronunciation&lt;/a&gt;) is a new Ethereum full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient. Reth is an Execution Layer (EL) and is compatible with all Ethereum Consensus Layer (CL) implementations that support the &lt;a href="https://github.com/ethereum/execution-apis/tree/a0d03086564ab1838b462befbc083f873dcf0c0f/src/engine"&gt;Engine API&lt;/a&gt;. It is originally built and driven forward by &lt;a href="https://paradigm.xyz/"&gt;Paradigm&lt;/a&gt;, and is licensed under the Apache and MIT licenses.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;As a full Ethereum node, Reth allows users to connect to the Ethereum network and interact with the Ethereum blockchain. This includes sending and receiving transactions/logs/traces, as well as accessing and interacting with smart contracts. Building a successful Ethereum node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software.&lt;/p&gt; 
&lt;p&gt;More concretely, our goals are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Every component of Reth is built to be used as a library: well-tested, heavily documented and benchmarked. We envision that developers will import the node's crates, mix and match, and innovate on top of them. Examples of such usage include but are not limited to spinning up standalone P2P networks, talking directly to a node's database, or "unbundling" the node into the components you need. To achieve that, we are licensing Reth under the Apache/MIT permissive license. You can learn more about the project's components &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Reth aims to be fast, so we use Rust and the &lt;a href="https://erigon.substack.com/p/erigon-stage-sync-and-control-flows"&gt;Erigon staged-sync&lt;/a&gt; node architecture. We also use our Ethereum libraries (including &lt;a href="https://github.com/alloy-rs/alloy/"&gt;Alloy&lt;/a&gt; and &lt;a href="https://github.com/bluealloy/revm/"&gt;revm&lt;/a&gt;) which we've battle-tested and optimized via &lt;a href="https://github.com/foundry-rs/foundry/"&gt;Foundry&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free for anyone to use any way they want&lt;/strong&gt;: Reth is free open source software, built for the community, by the community. By licensing the software under the Apache/MIT license, we want developers to use it without being bound by business licenses, or having to think about the implications of GPL-like licenses.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Client Diversity&lt;/strong&gt;: The Ethereum protocol becomes more antifragile when no node implementation dominates. This ensures that if there's a software bug, the network does not finalize a bad block. By building a new client, we hope to contribute to Ethereum's antifragility.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support as many EVM chains as possible&lt;/strong&gt;: We aspire that Reth can full-sync not only Ethereum, but also other chains like Optimism, Polygon, BNB Smart Chain, and more. If you're working on any of these projects, please reach out.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Configurability&lt;/strong&gt;: We want to solve for node operators that care about fast historical queries, but also for hobbyists who cannot operate on large hardware. We also want to support teams and individuals who want both sync from genesis and via "fast sync". We envision that Reth will be configurable enough and provide configurable "profiles" for the tradeoffs that each team faces.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. We also actively recommend professional node operators to switch to Reth in production for performance and cost reasons in use cases where high performance with great margins is required such as RPC, MEV, Indexing, Simulations, and P2P activities.&lt;/p&gt; 
&lt;p&gt;More historical context below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We released 1.0 "production-ready" stable Reth in June 2024. 
  &lt;ul&gt; 
   &lt;li&gt;Reth completed an audit with &lt;a href="https://sigmaprime.io/"&gt;Sigma Prime&lt;/a&gt;, the developers of &lt;a href="https://github.com/sigp/lighthouse"&gt;Lighthouse&lt;/a&gt;, the Rust Consensus Layer implementation. Find it &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/audit/sigma_prime_audit_v2.pdf"&gt;here&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Revm (the EVM used in Reth) underwent an audit with &lt;a href="https://x.com/guidovranken"&gt;Guido Vranken&lt;/a&gt; (#1 &lt;a href="https://ethereum.org/en/bug-bounty"&gt;Ethereum Bug Bounty&lt;/a&gt;). We will publish the results soon.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;We released multiple iterative beta versions, up to &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.9"&gt;beta.9&lt;/a&gt; on Monday June 3, 2024,the last beta release.&lt;/li&gt; 
 &lt;li&gt;We released &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1"&gt;beta&lt;/a&gt; on Monday March 4, 2024, our first breaking change to the database model, providing faster query speed, smaller database footprint, and allowing "history" to be mounted on separate drives.&lt;/li&gt; 
 &lt;li&gt;We shipped iterative improvements until the last alpha release on February 28, 2024, &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.21"&gt;0.1.0-alpha.21&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;We &lt;a href="https://www.paradigm.xyz/2023/06/reth-alpha"&gt;initially announced&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.1"&gt;0.1.0-alpha.1&lt;/a&gt; on June 20, 2023.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database compatibility&lt;/h3&gt; 
&lt;p&gt;We do not have any breaking database changes since beta.1, and we do not plan any in the near future.&lt;/p&gt; 
&lt;p&gt;Reth &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1"&gt;v0.2.0-beta.1&lt;/a&gt; includes a &lt;a href="https://github.com/paradigmxyz/reth/pull/5191"&gt;set of breaking database changes&lt;/a&gt; that makes it impossible to use database files produced by earlier versions.&lt;/p&gt; 
&lt;p&gt;If you had a database produced by alpha versions of Reth, you need to drop it with &lt;code&gt;reth db drop&lt;/code&gt; (using the same arguments such as &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;--datadir&lt;/code&gt; that you passed to &lt;code&gt;reth node&lt;/code&gt;), and resync using the same &lt;code&gt;reth node&lt;/code&gt; command you've used before.&lt;/p&gt; 
&lt;h2&gt;For Users&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://reth.rs/"&gt;Reth documentation&lt;/a&gt; for instructions on how to install and run Reth.&lt;/p&gt; 
&lt;h2&gt;For Developers&lt;/h2&gt; 
&lt;h3&gt;Using reth as a library&lt;/h3&gt; 
&lt;p&gt;You can use individual crates of reth in your project.&lt;/p&gt; 
&lt;p&gt;The crate docs can be found &lt;a href="https://reth.rs/docs/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For a general overview of the crates, see &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;Project Layout&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you want to contribute, or follow along with contributor discussion, you can use our &lt;a href="https://t.me/paradigm_reth"&gt;main telegram&lt;/a&gt; to chat with us about the development of Reth!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Our contributor guidelines can be found in &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;See our &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs"&gt;contributor docs&lt;/a&gt; for more information on the project. A good starting point is &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;Project Layout&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building and testing&lt;/h3&gt; 
&lt;!--
When updating this, also update:
- Cargo.toml
- .github/workflows/lint.yml
--&gt; 
&lt;p&gt;The Minimum Supported Rust Version (MSRV) of this project is &lt;a href="https://blog.rust-lang.org/2025/06/26/Rust-1.88.0/"&gt;1.88.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the docs for detailed instructions on how to &lt;a href="https://reth.rs/installation/source/"&gt;build from source&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To fully test Reth, you will need to have &lt;a href="https://geth.ethereum.org/docs/getting-started/installing-geth"&gt;Geth installed&lt;/a&gt;, but it is possible to run a subset of tests without Geth.&lt;/p&gt; 
&lt;p&gt;First, clone the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/paradigmxyz/reth
cd reth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, run the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo nextest run --workspace

# Run the Ethereum Foundation tests
make ef-tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We highly recommend using &lt;a href="https://nexte.st/"&gt;&lt;code&gt;cargo nextest&lt;/code&gt;&lt;/a&gt; to speed up testing. Using &lt;code&gt;cargo test&lt;/code&gt; to run tests may work fine, but this is not tested and does not support more advanced features like retries for spurious failures.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Some tests use random number generators to generate test data. If you want to use a deterministic seed, you can set the &lt;code&gt;SEED&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you have any questions, first see if the answer to your question can be found in the &lt;a href="https://reth.rs/"&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If the answer is not there:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join the &lt;a href="https://t.me/paradigm_reth"&gt;Telegram&lt;/a&gt; to get help, or&lt;/li&gt; 
 &lt;li&gt;Open a &lt;a href="https://github.com/paradigmxyz/reth/discussions/new"&gt;discussion&lt;/a&gt; with your question, or&lt;/li&gt; 
 &lt;li&gt;Open an issue with &lt;a href="https://github.com/paradigmxyz/reth/issues/new?assignees=&amp;amp;labels=C-bug%2CS-needs-triage&amp;amp;projects=&amp;amp;template=bug.yml"&gt;the bug&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/SECURITY.md"&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Reth is a new implementation of the Ethereum protocol. In the process of developing the node we investigated the design decisions other nodes have made to understand what is done well, what is not, and where we can improve the status quo.&lt;/p&gt; 
&lt;p&gt;None of this would have been possible without them, so big shoutout to the teams below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ethereum/go-ethereum/"&gt;Geth&lt;/a&gt;: We would like to express our heartfelt gratitude to the go-ethereum team for their outstanding contributions to Ethereum over the years. Their tireless efforts and dedication have helped to shape the Ethereum ecosystem and make it the vibrant and innovative community it is today. Thank you for your hard work and commitment to the project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ledgerwatch/erigon"&gt;Erigon&lt;/a&gt; (fka Turbo-Geth): Erigon pioneered the &lt;a href="https://erigon.substack.com/p/erigon-stage-sync-and-control-flows"&gt;"Staged Sync" architecture&lt;/a&gt; that Reth is using, as well as &lt;a href="https://github.com/ledgerwatch/erigon/wiki/Choice-of-storage-engine"&gt;introduced MDBX&lt;/a&gt; as the database of choice. We thank Erigon for pushing the state of the art research on the performance limits of Ethereum nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/akula-bft/akula/"&gt;Akula&lt;/a&gt;: Reth uses forks of the Apache versions of Akula's &lt;a href="https://github.com/paradigmxyz/reth/pull/132"&gt;MDBX Bindings&lt;/a&gt;, &lt;a href="https://github.com/paradigmxyz/reth/pull/63"&gt;FastRLP&lt;/a&gt; and &lt;a href="https://github.com/paradigmxyz/reth/pull/80"&gt;ECIES&lt;/a&gt;. Given that these packages were already released under the Apache License, and they implement standardized solutions, we decided not to reimplement them to iterate faster. We thank the Akula team for their contributions to the Rust Ethereum ecosystem and for publishing these packages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Warning&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;NippyJar&lt;/code&gt; and &lt;code&gt;Compact&lt;/code&gt; encoding formats and their implementations are designed for storing and retrieving data internally. They are not hardened to safely read potentially malicious data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>web-infra-dev/rspack</title>
      <link>https://github.com/web-infra-dev/rspack</link>
      <description>&lt;p&gt;The fast Rust-based web bundler with webpack-compatible API 🦀️&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;img alt="Rspack Banner" src="https://assets.rspack.rs/rspack/rspack-banner.png" /&gt; 
&lt;/picture&gt; 
&lt;h1&gt;Rspack&lt;/h1&gt; 
&lt;p&gt; &lt;a href="https://discord.gg/79ZZ66GH9E"&gt;&lt;img src="https://img.shields.io/badge/chat-discord-blue?style=flat-square&amp;amp;logo=discord&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="discord channel" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@rspack/core?activeTab=readme"&gt;&lt;img src="https://img.shields.io/npm/v/@rspack/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/rspack_core"&gt;&lt;img src="https://img.shields.io/crates/v/rspack_core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="crates version" /&gt;&lt;/a&gt; &lt;a href="https://npmcharts.com/compare/@rspack/core?minimal=true"&gt;&lt;img src="https://img.shields.io/npm/dm/@rspack/core.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="downloads" /&gt;&lt;/a&gt; &lt;a href="https://nodejs.org/en/about/previous-releases"&gt;&lt;img src="https://img.shields.io/node/v/@rspack/core.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="node version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/web-infra-dev/rspack/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/web-infra-dev/rspack"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fcodspeed.io%2Fbadge.json&amp;amp;style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="codspeed" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;English | &lt;a href="https://raw.githubusercontent.com/web-infra-dev/rspack/main/README.zh-CN.md"&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Rspack is a high performance JavaScript bundler written in Rust. It offers strong compatibility with the webpack ecosystem, allowing for seamless replacement of webpack, and provides lightning fast build speeds.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Fast Startup&lt;/strong&gt;: Based on Rust, the build speed is extremely fast, bringing you the ultimate development experience.&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Lightning HMR&lt;/strong&gt;: With a built-in incremental compilation mechanism, HMR is extremely fast and fully capable of developing large-scale projects.&lt;/li&gt; 
 &lt;li&gt;📦 &lt;strong&gt;Webpack Compatible&lt;/strong&gt;: Compatible with plugins and loaders in the webpack ecosystem, seamlessly integrating excellent libraries built by the community.&lt;/li&gt; 
 &lt;li&gt;🎨 &lt;strong&gt;Module Federation&lt;/strong&gt;: Provide first-class support for Module Federation to facilitate the development of large-scale web applications.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Production Optimization&lt;/strong&gt;: Various optimization strategies are built in by default, such as tree shaking, minification, etc.&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Framework Agnostic&lt;/strong&gt;: Not bound to any frontend framework, ensuring enough flexibility.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read &lt;a href="https://rspack.rs/guide/start/introduction"&gt;Introduction&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;🦀 Rstack&lt;/h2&gt; 
&lt;p&gt;Rstack is a unified JavaScript toolchain centered on Rspack, with high performance and consistent architecture.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspack"&gt;Rspack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Bundler&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rspack/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rspack/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rsbuild"&gt;Rsbuild&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Build tool&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rsbuild/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rsbuild/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rslib"&gt;Rslib&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Library development tool&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rslib/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rslib/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspress"&gt;Rspress&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Static site generator&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rspress/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rspress/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rsdoctor"&gt;Rsdoctor&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Build analyzer&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rsdoctor/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rsdoctor/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rstest"&gt;Rstest&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Testing framework&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rstest/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rstest/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rslint"&gt;Rslint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Linter&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rslint/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rslint/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt; &lt;a target="_blank" href="https://stackblitz.com/fork/github/rspack-contrib/rspack-stackblitz-example"&gt; &lt;img alt="Open in StackBlitz" src="https://developer.stackblitz.com/img/open_in_stackblitz.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://rspack.rs/guide/start/quick-start"&gt;Quick start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Please read the &lt;a href="https://raw.githubusercontent.com/web-infra-dev/rspack/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; and let's build Rspack together.&lt;/p&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;This repo has adopted the ByteDance Open Source Code of Conduct. Please check &lt;a href="https://raw.githubusercontent.com/web-infra-dev/rspack/main/CODE_OF_CONDUCT.md"&gt;Code of conduct&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Come chat with us on &lt;a href="https://discord.gg/79ZZ66GH9E"&gt;Discord&lt;/a&gt;! Rspack team and Rspack users are active there, and we're always looking for contributions.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/awesome-rspack"&gt;awesome-rspack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A curated list of awesome things related to Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://rspack.rs/"&gt;Rspack 1.x documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation for Rspack 1.x (latest)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://v0.rspack.rs/"&gt;Rspack 0.x documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation for Rspack 0.x version&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspack-dev-server"&gt;rspack-dev-server&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Dev server for Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/rspack-contrib/rstack-examples"&gt;rstack-examples&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Examples showcasing Rstack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspack-sources"&gt;rspack-sources&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Rust port of &lt;a href="https://www.npmjs.com/package/webpack-sources"&gt;webpack-sources&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/rspack-contrib/rstack-design-resources"&gt;rstack-design-resources&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Design resources for Rstack&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/web-infra-dev/rspack/graphs/contributors"&gt;&lt;img src="https://opencollective.com/rspack/contributors.svg?width=890&amp;amp;button=false" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://ecosystem-benchmark.rspack.rs/"&gt;Benchmark&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://webpack.js.org/"&gt;The webpack team and community&lt;/a&gt; for creating a great bundler and ecosystem from which we draw a lot of inspiration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sokra"&gt;@sokra&lt;/a&gt; for the great work on the &lt;a href="https://github.com/webpack/webpack"&gt;webpack&lt;/a&gt; project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ScriptedAlchemy"&gt;@ScriptedAlchemy&lt;/a&gt; for creating Module Federation and helping Rspack connect with the community.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/swc-project/swc"&gt;SWC&lt;/a&gt; project created by &lt;a href="https://github.com/kdy1"&gt;@kdy1&lt;/a&gt;, which powers Rspack's code parsing, transformation and minification.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/evanw/esbuild"&gt;esbuild&lt;/a&gt; project created by &lt;a href="https://github.com/evanw"&gt;@evanw&lt;/a&gt;, which inspired the concurrent architecture of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/napi-rs/napi-rs"&gt;NAPI-RS&lt;/a&gt; project created by &lt;a href="https://github.com/Brooooooklyn"&gt;@Brooooooklyn&lt;/a&gt;, which powers Rspack's node-binding implementation.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/parcel-bundler/parcel"&gt;Parcel&lt;/a&gt; project created by &lt;a href="https://github.com/devongovett"&gt;@devongovett&lt;/a&gt; which is the pioneer of rust bundler and inspired Rspack's incremental rebuild design.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/vitejs/vite"&gt;Vite&lt;/a&gt; project created by &lt;a href="https://github.com/yyx990803"&gt;Evan You&lt;/a&gt; which inspired Rspack's compatibility design of webpack's ecosystem.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;rolldown-legacy&lt;/code&gt; project created by old Rolldown team, It's the predecessor of the &lt;a href="https://github.com/rolldown"&gt;rolldown&lt;/a&gt; project, which explores the possibility of making a performant bundler in Rust with Rollup-compatible API. It inspires the design principles of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/jantimon/html-webpack-plugin"&gt;html-webpack-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/jantimon"&gt;@jantimon&lt;/a&gt;, &lt;code&gt;@rspack/html-plugin&lt;/code&gt; is a fork of &lt;a href="https://github.com/jantimon/html-webpack-plugin"&gt;html-webpack-plugin&lt;/a&gt; to avoid some webpack API usage not supported in Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/vercel/turbo"&gt;Turbopack&lt;/a&gt; project which inspired the AST path logic of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/pmmmwh/react-refresh-webpack-plugin"&gt;react-refresh-webpack-plugin&lt;/a&gt; created by &lt;a href="https://github.com/pmmmwh"&gt;@pmmmwh&lt;/a&gt;, which inspires implement &lt;a href="https://github.com/rspack-contrib/rspack-plugin-react-refresh"&gt;react refresh rspack plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/preactjs/prefresh"&gt;prefresh&lt;/a&gt; created by &lt;a href="https://github.com/JoviDeCroock"&gt;@Jovi De Croock&lt;/a&gt;, which inspires implement &lt;a href="https://github.com/rspack-contrib/rspack-plugin-preact-refresh"&gt;preact refresh rspack plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/webpack-contrib/mini-css-extract-plugin"&gt;mini-css-extract-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/sokra"&gt;@sokra&lt;/a&gt; which inspired implement css extract plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/webpack-contrib/copy-webpack-plugin"&gt;copy-webpack-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/kevlened"&gt;@kevlened&lt;/a&gt; which inspired implement copy rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/waysact/webpack-subresource-integrity"&gt;webpack-subresource-integrity&lt;/a&gt; project created by &lt;a href="https://github.com/jscheid"&gt;@jscheid&lt;/a&gt;, which inspires implement subresource integrity rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/aackerman/circular-dependency-plugin"&gt;circular-dependency-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/aackerman"&gt;@aackerman&lt;/a&gt;, which inspres implement circular dependency rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/thoren-d/tracing-chrome"&gt;tracing-chrome&lt;/a&gt; project created by &lt;a href="https://github.com/thoren-d"&gt;thoren-d&lt;/a&gt;, which inspires the implementation of Rspack tracing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rspack is &lt;a href="https://github.com/web-infra-dev/rspack/raw/main/LICENSE"&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>squidowl/halloy</title>
      <link>https://github.com/squidowl/halloy</link>
      <description>&lt;p&gt;IRC application written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Halloy - IRC Client&lt;/h1&gt; 
&lt;img src="https://raw.githubusercontent.com/squidowl/halloy/main/assets/banner.png" alt="banner" title="Icon by Rune Seir" /&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/squidowl/halloy/main/assets/animation.gif" alt="halloy" /&gt;&lt;/p&gt; 
&lt;p&gt;Halloy is an open-source IRC client written in Rust, with the Iced GUI library. It aims to provide a simple and fast client for Mac, Windows, and Linux platforms.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation for latest release: &lt;a href="https://halloy.chat"&gt;https://halloy.chat&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Documentation for main branch (when building from source): &lt;a href="https://unstable.halloy.chat"&gt;https://unstable.halloy.chat&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Join &lt;strong&gt;#halloy&lt;/strong&gt; on libera.chat if you have questions or looking for help.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://halloy.chat/installation.html"&gt;Installation documentation&lt;/a&gt;&lt;/p&gt; 
&lt;a href="https://repology.org/project/halloy/versions"&gt; &lt;img src="https://repology.org/badge/vertical-allrepos/halloy.svg?sanitize=true" alt="Packaging status" /&gt; &lt;/a&gt; 
&lt;p&gt;Halloy is also available from &lt;a href="https://flathub.org/apps/org.squidowl.halloy"&gt;Flathub&lt;/a&gt; and &lt;a href="https://snapcraft.io/halloy"&gt;Snap Store&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;IRCv3.2 capabilities 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/account-notify"&gt;account-notify&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/away-notify"&gt;away-notify&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/batch"&gt;batch&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/capability-negotiation.html#cap-notify"&gt;cap-notify&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/chathistory"&gt;chathistory&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/chghost"&gt;chghost&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/echo-message"&gt;echo-message&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/extended-join"&gt;extended-join&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/invite-notify"&gt;invite-notify&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/labeled-response"&gt;labeled-response&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/message-tags"&gt;message-tags&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/monitor"&gt;Monitor&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/message-ids"&gt;msgid&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/multi-prefix"&gt;multi-prefix&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/read-marker"&gt;read-marker&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/sasl-3.1"&gt;sasl-3.1&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/server-time"&gt;server-time&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/setname.html"&gt;setname&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/standard-replies"&gt;Standard Replies&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/userhost-in-names"&gt;userhost-in-names&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/utf8-only"&gt;&lt;code&gt;UTF8ONLY&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://ircv3.net/specs/extensions/whox"&gt;&lt;code&gt;WHOX&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;SASL support&lt;/li&gt; 
 &lt;li&gt;DCC Send&lt;/li&gt; 
 &lt;li&gt;Keyboard shortcuts&lt;/li&gt; 
 &lt;li&gt;Auto-completion for nicknames, commands, and channels&lt;/li&gt; 
 &lt;li&gt;Notifications support&lt;/li&gt; 
 &lt;li&gt;Multiple channels at the same time across servers&lt;/li&gt; 
 &lt;li&gt;Command bar for for quick actions&lt;/li&gt; 
 &lt;li&gt;Custom themes&lt;/li&gt; 
 &lt;li&gt;Portable mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why?&lt;/h2&gt; 
&lt;a href="https://xkcd.com/1782/"&gt; &lt;img src="https://imgs.xkcd.com/comics/team_chat.png" title="2078: He announces that he's finally making the jump from screen+irssi to tmux+weechat." /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Halloy is released under the GPL-3.0 License. For more details, see the &lt;a href="https://raw.githubusercontent.com/squidowl/halloy/main/LICENSE"&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;For any questions, suggestions, or issues, please open an issue on the &lt;a href="https://github.com/squidowl/halloy/issues"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://github.com/iced-rs/iced"&gt; &lt;img src="https://gist.githubusercontent.com/hecrj/ad7ecd38f6e47ff3688a38c79fd108f0/raw/74384875ecbad02ae2a926425e9bcafd0695bade/color.svg?sanitize=true" width="130px" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>meilisearch/meilisearch</title>
      <link>https://github.com/meilisearch/meilisearch</link>
      <description>&lt;p&gt;A lightning-fast search engine API bringing AI-powered hybrid search to your sites and applications.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-light.svg?sanitize=true#gh-light-mode-only" /&gt; &lt;/a&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-dark.svg?sanitize=true#gh-dark-mode-only" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h4 align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Website&lt;/a&gt; | &lt;a href="https://roadmap.meilisearch.com/tabs/1-under-consideration"&gt;Roadmap&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/pricing?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Meilisearch Cloud&lt;/a&gt; | &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Blog&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Documentation&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs/faq?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;FAQ&lt;/a&gt; | &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Discord&lt;/a&gt; &lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://deps.rs/repo/github/meilisearch/meilisearch"&gt;&lt;img src="https://deps.rs/repo/github/meilisearch/meilisearch/status.svg?sanitize=true" alt="Dependency status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-informational" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/queue"&gt;&lt;img alt="Merge Queues enabled" src="https://img.shields.io/badge/Merge_Queues-enabled-%2357cf60?logo=github" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;⚡ A lightning-fast search engine that fits effortlessly into your apps, websites, and workflow 🔍&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=intro"&gt;Meilisearch&lt;/a&gt; helps you shape a delightful search experience in a snap, offering features that work out of the box to speed up your workflow.&lt;/p&gt; 
&lt;p align="center" name="demo"&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-light.gif#gh-light-mode-only" alt="A bright colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-dark.gif#gh-dark-mode-only" alt="A dark colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;🖥 Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=organization"&gt;&lt;strong&gt;Movies&lt;/strong&gt;&lt;/a&gt; — An application to help you find streaming platforms to watch movies using &lt;a href="https://www.meilisearch.com/solutions/hybrid-search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;hybrid search&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ecommerce.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Ecommerce&lt;/strong&gt;&lt;/a&gt; — Ecommerce website using disjunctive &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;facets&lt;/a&gt;, range and rating filtering, and pagination.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://music.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Songs&lt;/strong&gt;&lt;/a&gt; — Search through 47 million of songs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://saas.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;SaaS&lt;/strong&gt;&lt;/a&gt; — Search for contacts, deals, and companies in this &lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;multi-tenant&lt;/a&gt; CRM application.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the list of all our example apps in our &lt;a href="https://github.com/meilisearch/demos"&gt;demos repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hybrid search:&lt;/strong&gt; Combine the best of both &lt;a href="https://www.meilisearch.com/docs/learn/experimental/vector_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;semantic&lt;/a&gt; &amp;amp; full-text search to get the most relevant results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Search-as-you-type:&lt;/strong&gt; Find &amp;amp; display results in less than 50 milliseconds to provide an intuitive experience&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/typo_tolerance_settings?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Typo tolerance&lt;/a&gt;:&lt;/strong&gt; get relevant matches even when queries contain typos and misspellings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Filtering&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;faceted search&lt;/a&gt;:&lt;/strong&gt; enhance your users' search experience with custom filters and build a faceted search interface in a few lines of code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Sorting&lt;/a&gt;:&lt;/strong&gt; sort results based on price, date, or pretty much anything else your users need&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/synonyms?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Synonym support&lt;/a&gt;:&lt;/strong&gt; configure synonyms to include more relevant content in your search results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Geosearch&lt;/a&gt;:&lt;/strong&gt; filter and sort documents based on geographic data&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/language?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Extensive language support&lt;/a&gt;:&lt;/strong&gt; search datasets in any language, with optimized support for Chinese, Japanese, Hebrew, and languages using the Latin alphabet&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Security management&lt;/a&gt;:&lt;/strong&gt; control which users can access what data with API keys that allow fine-grained permissions handling&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Multi-Tenancy&lt;/a&gt;:&lt;/strong&gt; personalize search results for any number of application tenants&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly Customizable:&lt;/strong&gt; customize Meilisearch to your specific needs or use our out-of-the-box and hassle-free presets&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;RESTful API&lt;/a&gt;:&lt;/strong&gt; integrate Meilisearch in your technical stack with our plugins and SDKs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI-ready:&lt;/strong&gt; works out of the box with &lt;a href="https://www.meilisearch.com/with/langchain"&gt;langchain&lt;/a&gt; and the &lt;a href="https://github.com/meilisearch/meilisearch-mcp"&gt;model context protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy to install, deploy, and maintain&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;You can consult Meilisearch's documentation at &lt;a href="https://www.meilisearch.com/docs/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=docs"&gt;meilisearch.com/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🚀 Getting started&lt;/h2&gt; 
&lt;p&gt;For basic instructions on how to set up Meilisearch, add documents to an index, and search for documents, take a look at our &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=get-started"&gt;documentation&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;🌍 Supercharge your Meilisearch experience&lt;/h2&gt; 
&lt;p&gt;Say goodbye to server deployment and manual updates with &lt;a href="https://www.meilisearch.com/cloud?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch"&gt;Meilisearch Cloud&lt;/a&gt;. Additional features include analytics &amp;amp; monitoring in many regions around the world. No credit card is required.&lt;/p&gt; 
&lt;h2&gt;🧰 SDKs &amp;amp; integration tools&lt;/h2&gt; 
&lt;p&gt;Install one of our SDKs in your project for seamless integration between Meilisearch and your favorite language or framework!&lt;/p&gt; 
&lt;p&gt;Take a look at the complete &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-link"&gt;Meilisearch integration list&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-logos"&gt;&lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/integrations.png" alt="Logos belonging to different languages and frameworks supported by Meilisearch, including React, Ruby on Rails, Go, Rust, and PHP" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;⚙️ Advanced usage&lt;/h2&gt; 
&lt;p&gt;Experienced users will want to keep our &lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API Reference&lt;/a&gt; close at hand.&lt;/p&gt; 
&lt;p&gt;We also offer a wide range of dedicated guides to all Meilisearch features, such as &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;filtering&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;sorting&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;geosearch&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API keys&lt;/a&gt;, and &lt;a href="https://www.meilisearch.com/docs/learn/security/tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;tenant tokens&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, for more in-depth information, refer to our articles explaining fundamental Meilisearch concepts such as &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/documents?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;documents&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/indexes?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;indexes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🧾 Editions &amp;amp; Licensing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is available in two editions:&lt;/p&gt; 
&lt;h3&gt;🧪 Community Edition (CE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fully open source under the &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE"&gt;MIT license&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Core search engine with fast and relevant full-text, semantic or hybrid search&lt;/li&gt; 
 &lt;li&gt;Free to use for anyone, including commercial usage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🏢 Enterprise Edition (EE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Includes advanced features such as: 
  &lt;ul&gt; 
   &lt;li&gt;Sharding&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Governed by a &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE-EE"&gt;commercial license&lt;/a&gt; or the &lt;a href="https://mariadb.com/bsl11"&gt;Business Source License 1.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Not allowed in production without a commercial agreement with Meilisearch. 
  &lt;ul&gt; 
   &lt;li&gt;You may use, modify, and distribute the Licensed Work for non-production purposes only, such as testing, development, or evaluation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Want access to Enterprise features? → Contact us at &lt;a href="maito:sales@meilisearch.com"&gt;sales@meilisearch.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📊 Telemetry&lt;/h2&gt; 
&lt;p&gt;Meilisearch collects &lt;strong&gt;anonymized&lt;/strong&gt; user data to help us improve our product. You can &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;deactivate this&lt;/a&gt; whenever you want.&lt;/p&gt; 
&lt;p&gt;To request deletion of collected data, please write to us at &lt;a href="mailto:privacy@meilisearch.com"&gt;privacy@meilisearch.com&lt;/a&gt;. Remember to include your &lt;code&gt;Instance UID&lt;/code&gt; in the message, as this helps us quickly find and delete your data.&lt;/p&gt; 
&lt;p&gt;If you want to know more about the kind of data we collect and what we use it for, check the &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;telemetry section&lt;/a&gt; of our documentation.&lt;/p&gt; 
&lt;h2&gt;📫 Get in touch!&lt;/h2&gt; 
&lt;p&gt;Meilisearch is a search engine created by &lt;a href="https://www.meilisearch.com/careers"&gt;Meili&lt;/a&gt;, a software development company headquartered in France and with team members all over the world. Want to know more about us? &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Check out our blog!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🗞 &lt;a href="https://share-eu1.hsforms.com/1LN5N0x_GQgq7ss7tXmSykwfg3aq"&gt;Subscribe to our newsletter&lt;/a&gt; if you don't want to miss any updates! We promise we won't clutter your mailbox: we only send one edition every two months.&lt;/p&gt; 
&lt;p&gt;💌 Want to make a suggestion or give feedback? Here are some of the channels where you can reach us:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For feature requests, please visit our &lt;a href="https://github.com/meilisearch/product/discussions"&gt;product repository&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Found a bug? Open an &lt;a href="https://github.com/meilisearch/meilisearch/issues"&gt;issue&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Want to be part of our Discord community? &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Join us!&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you for your support!&lt;/p&gt; 
&lt;h2&gt;👩‍💻 Contributing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is, and will always be, open-source! If you want to contribute to the project, please look at &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/CONTRIBUTING.md"&gt;our contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📦 Versioning&lt;/h2&gt; 
&lt;p&gt;Meilisearch releases and their associated binaries are available on the project's &lt;a href="https://github.com/meilisearch/meilisearch/releases"&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The binaries are versioned following &lt;a href="https://semver.org/"&gt;SemVer conventions&lt;/a&gt;. To know more, read our &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/documentation/versioning-policy.md"&gt;versioning policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Differently from the binaries, crates in this repository are not currently available on &lt;a href="https://crates.io/"&gt;crates.io&lt;/a&gt; and do not follow &lt;a href="https://semver.org"&gt;SemVer conventions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lancedb/lance</title>
      <link>https://github.com/lancedb/lance</link>
      <description>&lt;p&gt;Modern columnar data format for ML and LLMs implemented in Rust. Convert from parquet in 2 lines of code for 100x faster random access, vector index, and data versioning. Compatible with Pandas, DuckDB, Polars, Pyarrow, and PyTorch with more integrations coming..&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p align="center"&gt; &lt;img width="257" alt="Lance Logo" src="https://user-images.githubusercontent.com/917119/199353423-d3e202f7-0269-411d-8ff2-e747e419e492.png" /&gt; &lt;/p&gt;
 &lt;p&gt;&lt;strong&gt;Modern columnar data format for ML. Convert from Parquet in 2-lines of code for 100x faster random access, zero-cost schema evolution, rich secondary indices, versioning, and more.&lt;br /&gt;&lt;/strong&gt; &lt;strong&gt;Compatible with Pandas, DuckDB, Polars, Pyarrow, and Ray with more integrations on the way.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://lancedb.github.io/lance/"&gt;Documentation&lt;/a&gt; • &lt;a href="https://blog.lancedb.com/"&gt;Blog&lt;/a&gt; • &lt;a href="https://discord.gg/zMM32dvNtd"&gt;Discord&lt;/a&gt; • &lt;a href="https://x.com/lancedb"&gt;X&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/lancedb/lance/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/lancedb/lance/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="CI Badge" /&gt;&lt;/a&gt; &lt;a href="https://lancedb.github.io/lance/"&gt;&lt;img src="https://img.shields.io/badge/docs-passing-brightgreen" alt="Docs Badge" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/lance"&gt;&lt;img src="https://img.shields.io/crates/v/lance.svg?sanitize=true" alt="crates.io badge" /&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/pylance/"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/pylance" alt="Python versions badge" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;Lance is a modern columnar data format that is optimized for ML workflows and datasets. Lance is perfect for:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Building search engines and feature stores.&lt;/li&gt; 
 &lt;li&gt;Large-scale ML training requiring high performance IO and shuffles.&lt;/li&gt; 
 &lt;li&gt;Storing, querying, and inspecting deeply nested data for robotics or large blobs like images, point clouds, and more.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The key features of Lance include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;High-performance random access:&lt;/strong&gt; 100x faster than Parquet without sacrificing scan performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vector search:&lt;/strong&gt; find nearest neighbors in milliseconds and combine OLAP-queries with vector search.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Zero-copy, automatic versioning:&lt;/strong&gt; manage versions of your data without needing extra infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ecosystem integrations:&lt;/strong&gt; Apache Arrow, Pandas, Polars, DuckDB, Ray, Spark and more on the way.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Lance is in active development and we welcome contributions. Please see our &lt;a href="https://lancedb.github.io/lance/community/contributing"&gt;contributing guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;pip install pylance
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install a preview release:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;pip install --pre --extra-index-url https://pypi.fury.io/lancedb/ pylance
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Preview releases are released more often than full releases and contain the latest features and bug fixes. They receive the same level of testing as full releases. We guarantee they will remain published and available for download for at least 6 months. When you want to pin to a specific version, prefer a stable release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Converting to Lance&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import lance

import pandas as pd
import pyarrow as pa
import pyarrow.dataset

df = pd.DataFrame({"a": [5], "b": [10]})
uri = "/tmp/test.parquet"
tbl = pa.Table.from_pandas(df)
pa.dataset.write_dataset(tbl, uri, format='parquet')

parquet = pa.dataset.dataset(uri, format='parquet')
lance.write_dataset(parquet, "/tmp/test.lance")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Reading Lance data&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;dataset = lance.dataset("/tmp/test.lance")
assert isinstance(dataset, pa.dataset.Dataset)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Pandas&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;df = dataset.to_table().to_pandas()
df
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;DuckDB&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import duckdb

# If this segfaults, make sure you have duckdb v0.7+ installed
duckdb.query("SELECT * FROM dataset LIMIT 10").to_df()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Vector search&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Download the sift1m subset&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;wget ftp://ftp.irisa.fr/local/texmex/corpus/sift.tar.gz
tar -xzf sift.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Convert it to Lance&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import lance
from lance.vector import vec_to_table
import numpy as np
import struct

nvecs = 1000000
ndims = 128
with open("sift/sift_base.fvecs", mode="rb") as fobj:
    buf = fobj.read()
    data = np.array(struct.unpack("&amp;lt;128000000f", buf[4 : 4 + 4 * nvecs * ndims])).reshape((nvecs, ndims))
    dd = dict(zip(range(nvecs), data))

table = vec_to_table(dd)
uri = "vec_data.lance"
sift1m = lance.write_dataset(table, uri, max_rows_per_group=8192, max_rows_per_file=1024*1024)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build the index&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;sift1m.create_index("vector",
                    index_type="IVF_PQ",
                    num_partitions=256,  # IVF
                    num_sub_vectors=16)  # PQ
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Search the dataset&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# Get top 10 similar vectors
import duckdb

dataset = lance.dataset(uri)

# Sample 100 query vectors. If this segfaults, make sure you have duckdb v0.7+ installed
sample = duckdb.query("SELECT vector FROM dataset USING SAMPLE 100").to_df()
query_vectors = np.array([np.array(x) for x in sample.vector])

# Get nearest neighbors for all of them
rs = [dataset.to_table(nearest={"column": "vector", "k": 10, "q": q})
      for q in query_vectors]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Directory structure&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Directory&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/lancedb/lance/main/rust"&gt;rust&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Core Rust implementation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/lancedb/lance/main/python"&gt;python&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Python bindings (PyO3)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/lancedb/lance/main/java"&gt;java&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Java bindings (JNI)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/lancedb/lance/main/docs"&gt;docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation source&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;What makes Lance different&lt;/h2&gt; 
&lt;p&gt;Here we will highlight a few aspects of Lance’s design. For more details, see the full &lt;a href="https://lancedb.github.io/lance/format"&gt;Lance design document&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Vector index&lt;/strong&gt;: Vector index for similarity search over embedding space. Support both CPUs (&lt;code&gt;x86_64&lt;/code&gt; and &lt;code&gt;arm&lt;/code&gt;) and GPU (&lt;code&gt;Nvidia (cuda)&lt;/code&gt; and &lt;code&gt;Apple Silicon (mps)&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Encodings&lt;/strong&gt;: To achieve both fast columnar scan and sub-linear point queries, Lance uses custom encodings and layouts.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Nested fields&lt;/strong&gt;: Lance stores each subfield as a separate column to support efficient filters like “find images where detected objects include cats”.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Versioning&lt;/strong&gt;: A Manifest can be used to record snapshots. Currently we support creating new versions automatically via appends, overwrites, and index creation.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Fast updates&lt;/strong&gt; (ROADMAP): Updates will be supported via write-ahead logs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Rich secondary indices&lt;/strong&gt;: Support &lt;code&gt;BTree&lt;/code&gt;, &lt;code&gt;Bitmap&lt;/code&gt;, &lt;code&gt;Full text search&lt;/code&gt;, &lt;code&gt;Label list&lt;/code&gt;, &lt;code&gt;NGrams&lt;/code&gt;, and more.&lt;/p&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;h3&gt;Vector search&lt;/h3&gt; 
&lt;p&gt;We used the SIFT dataset to benchmark our results with 1M vectors of 128D&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;For 100 randomly sampled query vectors, we get &amp;lt;1ms average response time (on a 2023 m2 MacBook Air)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/lancedb/lance/main/docs/src/images/avg_latency.png" alt="avg_latency.png" /&gt;&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;ANNs are always a trade-off between recall and performance&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/lancedb/lance/main/docs/src/images/recall_vs_latency.png" alt="avg_latency.png" /&gt;&lt;/p&gt; 
&lt;h3&gt;Vs. parquet&lt;/h3&gt; 
&lt;p&gt;We create a Lance dataset using the Oxford Pet dataset to do some preliminary performance testing of Lance as compared to Parquet and raw image/XMLs. For analytics queries, Lance is 50-100x better than reading the raw metadata. For batched random access, Lance is 100x better than both parquet and raw files.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/lancedb/lance/main/docs/src/images/lance_perf.png" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;Why are you building yet another data format?!&lt;/h2&gt; 
&lt;p&gt;The machine learning development cycle involves the steps:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;graph LR
    A[Collection] --&amp;gt; B[Exploration];
    B --&amp;gt; C[Analytics];
    C --&amp;gt; D[Feature Engineer];
    D --&amp;gt; E[Training];
    E --&amp;gt; F[Evaluation];
    F --&amp;gt; C;
    E --&amp;gt; G[Deployment];
    G --&amp;gt; H[Monitoring];
    H --&amp;gt; A;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;People use different data representations to varying stages for the performance or limited by the tooling available. Academia mainly uses XML / JSON for annotations and zipped images/sensors data for deep learning, which is difficult to integrate into data infrastructure and slow to train over cloud storage. While industry uses data lakes (Parquet-based techniques, i.e., Delta Lake, Iceberg) or data warehouses (AWS Redshift or Google BigQuery) to collect and analyze data, they have to convert the data into training-friendly formats, such as &lt;a href="https://github.com/eto-ai/rikai"&gt;Rikai&lt;/a&gt;/&lt;a href="https://github.com/uber/petastorm"&gt;Petastorm&lt;/a&gt; or &lt;a href="https://www.tensorflow.org/tutorials/load_data/tfrecord"&gt;TFRecord&lt;/a&gt;. Multiple single-purpose data transforms, as well as syncing copies between cloud storage to local training instances have become a common practice.&lt;/p&gt; 
&lt;p&gt;While each of the existing data formats excels at the workload it was originally designed for, we need a new data format tailored for multistage ML development cycles to reduce and data silos.&lt;/p&gt; 
&lt;p&gt;A comparison of different data formats in each stage of ML development cycle.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;Lance&lt;/th&gt; 
   &lt;th&gt;Parquet &amp;amp; ORC&lt;/th&gt; 
   &lt;th&gt;JSON &amp;amp; XML&lt;/th&gt; 
   &lt;th&gt;TFRecord&lt;/th&gt; 
   &lt;th&gt;Database&lt;/th&gt; 
   &lt;th&gt;Warehouse&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Analytics&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Feature Engineering&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Good&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Training&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Exploration&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Slow&lt;/td&gt; 
   &lt;td&gt;Fast&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Infra Support&lt;/td&gt; 
   &lt;td&gt;Rich&lt;/td&gt; 
   &lt;td&gt;Rich&lt;/td&gt; 
   &lt;td&gt;Decent&lt;/td&gt; 
   &lt;td&gt;Limited&lt;/td&gt; 
   &lt;td&gt;Rich&lt;/td&gt; 
   &lt;td&gt;Rich&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Community Highlights&lt;/h2&gt; 
&lt;p&gt;Lance is currently used in production by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lancedb/lancedb"&gt;LanceDB&lt;/a&gt;, a serverless, low-latency vector database for ML applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.lancedb.com/enterprise/introduction"&gt;LanceDB Enterprise&lt;/a&gt;, hyperscale LanceDB with enterprise SLA.&lt;/li&gt; 
 &lt;li&gt;Leading multimodal Gen AI companies for training over petabyte-scale multimodal data.&lt;/li&gt; 
 &lt;li&gt;Self-driving car company for large-scale storage, retrieval and processing of multi-modal data.&lt;/li&gt; 
 &lt;li&gt;E-commerce company for billion-scale+ vector personalized search.&lt;/li&gt; 
 &lt;li&gt;and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Presentations, Blogs and Talks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://blog.lancedb.com/designing-a-table-format-for-ml-workloads/"&gt;Designing a Table Format for ML Workloads&lt;/a&gt;, Feb 2025.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xmTFEzAh8ho"&gt;Transforming Multimodal Data Management with LanceDB, Ray Summit&lt;/a&gt;, Oct 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.lancedb.com/lance-v2/"&gt;Lance v2: A columnar container format for modern data&lt;/a&gt;, Apr 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://drive.google.com/file/d/1Orh9rK0Mpj9zN_gnQF1eJJFpAc6lStGm/view?usp=drive_link"&gt;Lance Deep Dive&lt;/a&gt;. July 2023.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1a4nAiQAkPDBtOfXFpPg7lbeDAxcNDVKgoUkw3cUs2rE/edit#slide=id.p"&gt;Lance: A New Columnar Data Format&lt;/a&gt;, &lt;a href="https://www.scipy2022.scipy.org/posters"&gt;Scipy 2022, Austin, TX&lt;/a&gt;. July, 2022.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>zama-ai/fhevm</title>
      <link>https://github.com/zama-ai/fhevm</link>
      <description>&lt;p&gt;FHEVM, a full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/fhevm-header-dark.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/fhevm-header-light.png" /&gt; 
  &lt;img width="500" alt="fhevm" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt; 📃 Read white paper&lt;/a&gt; |&lt;a href="https://docs.zama.ai/protocol"&gt; 📒 Documentation&lt;/a&gt; | &lt;a href="https://zama.ai/community"&gt; 💛 Community support&lt;/a&gt; | &lt;a href="https://github.com/zama-ai/awesome-zama"&gt; 📚 FHE resources by Zama&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/zama-ai/fhevm/releases"&gt; &lt;img src="https://img.shields.io/github/v/release/zama-ai/fhevm?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/fhevm/raw/main/LICENSE"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/License-BSD--3--Clause--Clear-%23ffb243?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/bounty-program"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/Contribute-Zama%20Bounty%20Program-%23ffd208?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://slsa.dev"&gt;&lt;img alt="SLSA 3" src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;h3&gt;What is FHEVM?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;FHEVM&lt;/strong&gt; is the core framework of the &lt;em&gt;Zama Confidential Blockchain Protocol&lt;/em&gt;. It enables confidential smart contracts on EVM-compatible blockchains by leveraging Fully Homomorphic Encryption (FHE), allowing encrypted data to be processed directly onchain.&lt;/p&gt; 
&lt;p&gt;FHEVM ensures both confidentiality and composability, with the following guarantees:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;End-to-end encryption of transactions and state:&lt;/strong&gt; Data included in transactions is encrypted and never visible to anyone.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Composability and data availability on-chain:&lt;/strong&gt; States are updated while remaining encrypted at all times.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No impact on existing dApps and state:&lt;/strong&gt; Encrypted state co-exists alongside public one, and doesn't impact existing dApps. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Table of contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt;About&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#what-is-fhevm"&gt;What is FHEVM?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#project-structure"&gt;Project structure&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#main-features"&gt;Main features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#use-cases"&gt;Use cases&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#working-with-fhevm"&gt;Working with FHEVM&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#citations"&gt;Citations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#support"&gt;Support&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Project structure&lt;/h3&gt; 
&lt;p&gt;The directories of this repository are organized in the following way:&lt;/p&gt; 
&lt;h6&gt;FHEVM Contracts&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gateway-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart contracts managing the gateway between on-chain and off-chain components.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;host-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart Contracts deployed on the host chain for orchestrating FHE workflows.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Compute Engines&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;coprocessor/&lt;/code&gt;&lt;/strong&gt;: Rust-based coprocessor implementation for FHE operations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;kms-connector/&lt;/code&gt;&lt;/strong&gt;: Interface for integrating with Key Management Services (KMS) to handle encryption keys securely.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Utilities&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;charts/&lt;/code&gt;&lt;/strong&gt;: Helm charts and deployment configurations for the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;golden-container-images/&lt;/code&gt;&lt;/strong&gt;: Docker golden images for Node.js and Rust environments used as base images by the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;test-suite/&lt;/code&gt;&lt;/strong&gt;: Integration with docker-compose and tests covering end-to-end FHEVM stack behavior.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Main features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Privacy by design:&lt;/strong&gt; Building decentralized apps with full privacy and confidentiality on Ethereum, leveraging FHE.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Solidity integration:&lt;/strong&gt; Write FHEVM contracts like any standard Solidity contract using Solidity. Compatible with existing toolchains — such as Hardhat and Foundry (&lt;em&gt;coming soon&lt;/em&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Programmable privacy:&lt;/strong&gt; Define exactly what data is encrypted and write the access control logic directly in your smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High precision encrypted integers :&lt;/strong&gt; Up to 256 bits of precision for integers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Full range of operators:&lt;/strong&gt; All typical operators are available: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, ternary-if, boolean operations…. Consecutive FHE operations are not limited.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; The underlying FHE crypto-scheme of FHEVM is quantum-resistant. Decryption is managed via a key management system (KMS) using multi-party computation (MPC), ensuring security even if some parties are compromised or misbehaving.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Symbolic execution of FHE computations:&lt;/strong&gt; All FHE operations are executed symbolically on the host chain, significantly reducing execution time. The actual computations on encrypted data are offloaded asynchronously to our coprocessor, allowing for faster, efficient, and scalable processing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more about FHEVM features in the &lt;a href="https://docs.zama.ai/protocol"&gt;documentation&lt;/a&gt; and in our &lt;a href="https://github.com/zama-ai/fhevm/raw/main/fhevm-whitepaper.pdf"&gt;whitepaper&lt;/a&gt;.&lt;/em&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;Use cases&lt;/h3&gt; 
&lt;p&gt;FHEVM is built for developers to write confidential smart contracts without the need to learn cryptography. Leveraging FHEVM, you can unlock a myriad of new use cases such as DeFi, gaming, and more. For instance:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential transfers&lt;/strong&gt;: Keep balances and amounts private, without using mixers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tokenization&lt;/strong&gt;: Swap tokens and RWAs on-chain without others seeing the amounts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blind auctions&lt;/strong&gt;: Bid on items without revealing the amount or the winner.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;On-chain games&lt;/strong&gt;: Keep moves, selections, cards, or items hidden until ready to reveal.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential voting&lt;/strong&gt;: Prevents bribery and blackmailing by keeping votes private.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Encrypted DIDs&lt;/strong&gt;: Store identities on-chain and generate attestations without ZK.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more use cases in the &lt;a href="https://docs.zama.ai/protocol/examples"&gt;list of examples&lt;/a&gt;.&lt;/em&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol"&gt;Documentation&lt;/a&gt; — Official documentation of FHEVM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt;Whitepaper&lt;/a&gt; — Technical overview of FHEVM's cryptographic design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol/examples"&gt;Examples&lt;/a&gt; — Examples of building confidential smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/awesome-zama?tab=readme-ov-file#fhevm"&gt;Awesome Zama – FHEVM&lt;/a&gt; — Curated articles, talks, and ecosystem projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Working with FHEVM&lt;/h2&gt; 
&lt;h3&gt;Citations&lt;/h3&gt; 
&lt;p&gt;To cite FHEVM or the whitepaper in academic papers, please use the following entries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;@Misc{FHEVM,
title={{FHEVM: A full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications},
author={Zama},
year={2025},
note={\url{https://github.com/zama-ai/fhevm}},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;There are two ways to contribute to FHEVM:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/fhevm/issues/new/choose"&gt;Open issues&lt;/a&gt; to report bugs and typos, or to suggest new ideas&lt;/li&gt; 
 &lt;li&gt;Request to become an official contributor by emailing &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Becoming an approved contributor involves signing our Contributor License Agreement (CLA). Only approved contributors can send pull requests, so please make sure to get in touch before you do! &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;This software is distributed under the &lt;strong&gt;BSD-3-Clause-Clear&lt;/strong&gt; license. Read &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/LICENSE"&gt;this&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Is Zama’s technology free to use?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Zama’s libraries are free to use under the BSD 3-Clause Clear license only for development, research, prototyping, and experimentation purposes. However, for any commercial use of Zama's open source code, companies must purchase Zama’s commercial patent license.&lt;/p&gt; 
 &lt;p&gt;Everything we do is open source, and we are very transparent on what it means for our users, you can read more about how we monetize our open source products at Zama in &lt;a href="https://www.zama.ai/post/open-source"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;What do I need to do if I want to use Zama’s technology for commercial purposes?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;To commercially use Zama’s technology you need to be granted Zama’s patent license. Please contact us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Do you file IP on your technology?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Yes, all Zama’s technologies are patented.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Can you customize a solution for my specific use case?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We are open to collaborating and advancing the FHE space with our partners. If you have specific needs, please email us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;a target="_blank" href="https://community.zama.ai"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/support-banner-dark.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/support-banner-light.png" /&gt; 
  &lt;img alt="Support" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;p&gt;🌟 If you find this project helpful or interesting, please consider giving it a star on GitHub! Your support helps to grow the community and motivates further development.&lt;/p&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iced-rs/iced</title>
      <link>https://github.com/iced-rs/iced</link>
      <description>&lt;p&gt;A cross-platform GUI library for Rust, inspired by Elm&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/iced-rs/iced/master/docs/logo.svg?sanitize=true" width="140px" /&gt; 
 &lt;h1&gt;Iced&lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://docs.rs/iced/"&gt;&lt;img src="https://docs.rs/iced/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iced"&gt;&lt;img src="https://img.shields.io/crates/v/iced.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/iced-rs/iced/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/iced.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iced"&gt;&lt;img src="https://img.shields.io/crates/d/iced.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/iced-rs/iced/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/iced-rs/iced/test.yml?branch=master&amp;amp;event=push&amp;amp;label=test" alt="Test Status" /&gt;&lt;/a&gt; &lt;a href="https://discourse.iced.rs/"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscourse.iced.rs%2Fsite%2Fstatistics.json&amp;amp;query=%24.users_count&amp;amp;suffix=%20users&amp;amp;label=discourse&amp;amp;color=5e7ce2" alt="Discourse" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/3xZJ65GAhd"&gt;&lt;img src="https://img.shields.io/discord/628993209984614400?label=&amp;amp;labelColor=6A7EC2&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8" alt="Discord Server" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;A cross-platform GUI library for Rust focused on simplicity and type-safety. Inspired by &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt;.&lt;/p&gt; 
 &lt;a href="https://github.com/squidowl/halloy"&gt; &lt;img src="https://iced.rs/showcase/halloy.gif" width="460px" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/hecrj/icebreaker"&gt; &lt;img src="https://iced.rs/showcase/icebreaker.gif" width="360px" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple, easy-to-use, batteries-included API&lt;/li&gt; 
 &lt;li&gt;Type-safe, reactive programming model&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/docs/images/todos_desktop.jpg"&gt;Cross-platform support&lt;/a&gt; (Windows, macOS, Linux, and the Web)&lt;/li&gt; 
 &lt;li&gt;Responsive layout&lt;/li&gt; 
 &lt;li&gt;Built-in widgets (including &lt;a href="https://iced.rs/examples/text_input.mp4"&gt;text inputs&lt;/a&gt;, &lt;a href="https://iced.rs/examples/scrollable.mp4"&gt;scrollables&lt;/a&gt;, and more!)&lt;/li&gt; 
 &lt;li&gt;Custom widget support (create your own!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://iced.rs/examples/debug.mp4"&gt;Debug overlay with performance metrics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;First-class support for async actions (use futures!)&lt;/li&gt; 
 &lt;li&gt;Modular ecosystem split into reusable parts: 
  &lt;ul&gt; 
   &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/runtime/"&gt;renderer-agnostic native runtime&lt;/a&gt; enabling integration with existing systems&lt;/li&gt; 
   &lt;li&gt;Two built-in renderers leveraging &lt;a href="https://github.com/gfx-rs/wgpu"&gt;&lt;code&gt;wgpu&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/RazrFalcon/tiny-skia"&gt;&lt;code&gt;tiny-skia&lt;/code&gt;&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/wgpu/"&gt;&lt;code&gt;iced_wgpu&lt;/code&gt;&lt;/a&gt; supporting Vulkan, Metal and DX12&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/tiny_skia/"&gt;&lt;code&gt;iced_tiny_skia&lt;/code&gt;&lt;/a&gt; offering a software alternative as a fallback&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/winit/"&gt;windowing shell&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Iced is currently experimental software.&lt;/strong&gt; &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/ROADMAP.md"&gt;Take a look at the roadmap&lt;/a&gt; and &lt;a href="https://github.com/iced-rs/iced/issues"&gt;check out the issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Inspired by &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;, Iced expects you to split user interfaces into four different concepts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt; — the state of your application&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Messages&lt;/strong&gt; — user interactions or meaningful events that you care about&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View logic&lt;/strong&gt; — a way to display your &lt;strong&gt;state&lt;/strong&gt; as widgets that may produce &lt;strong&gt;messages&lt;/strong&gt; on user interaction&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update logic&lt;/strong&gt; — a way to react to &lt;strong&gt;messages&lt;/strong&gt; and update your &lt;strong&gt;state&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We can build something to see how this works! Let's say we want a simple counter that can be incremented and decremented using two buttons.&lt;/p&gt; 
&lt;p&gt;We start by modelling the &lt;strong&gt;state&lt;/strong&gt; of our application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Default)]
struct Counter {
    value: i32,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we need to define the possible user interactions of our counter: the button presses. These interactions are our &lt;strong&gt;messages&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Debug, Clone, Copy)]
pub enum Message {
    Increment,
    Decrement,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, let's show the actual counter by putting it all together in our &lt;strong&gt;view logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use iced::widget::{button, column, text, Column};

impl Counter {
    pub fn view(&amp;amp;self) -&amp;gt; Column&amp;lt;Message&amp;gt; {
        // We use a column: a simple vertical layout
        column![
            // The increment button. We tell it to produce an
            // `Increment` message when pressed
            button("+").on_press(Message::Increment),

            // We show the value of the counter here
            text(self.value).size(50),

            // The decrement button. We tell it to produce a
            // `Decrement` message when pressed
            button("-").on_press(Message::Decrement),
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, we need to be able to react to any produced &lt;strong&gt;messages&lt;/strong&gt; and change our &lt;strong&gt;state&lt;/strong&gt; accordingly in our &lt;strong&gt;update logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;impl Counter {
    // ...

    pub fn update(&amp;amp;mut self, message: Message) {
        match message {
            Message::Increment =&amp;gt; {
                self.value += 1;
            }
            Message::Decrement =&amp;gt; {
                self.value -= 1;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that's everything! We just wrote a whole user interface. Let's run it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn main() -&amp;gt; iced::Result {
    iced::run("A cool counter", Counter::update, Counter::view)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Iced will automatically:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Take the result of our &lt;strong&gt;view logic&lt;/strong&gt; and layout its widgets.&lt;/li&gt; 
 &lt;li&gt;Process events from our system and produce &lt;strong&gt;messages&lt;/strong&gt; for our &lt;strong&gt;update logic&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Draw the resulting user interface.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Read the &lt;a href="https://book.iced.rs/"&gt;book&lt;/a&gt;, the &lt;a href="https://docs.rs/iced/"&gt;documentation&lt;/a&gt;, and the &lt;a href="https://github.com/iced-rs/iced/tree/master/examples#examples"&gt;examples&lt;/a&gt; to learn more!&lt;/p&gt; 
&lt;h2&gt;Implementation details&lt;/h2&gt; 
&lt;p&gt;Iced was originally born as an attempt at bringing the simplicity of &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt; and &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt; into &lt;a href="https://github.com/hecrj/coffee"&gt;Coffee&lt;/a&gt;, a 2D game library I am working on.&lt;/p&gt; 
&lt;p&gt;The core of the library was implemented during May 2019 in &lt;a href="https://github.com/hecrj/coffee/pull/35"&gt;this pull request&lt;/a&gt;. &lt;a href="https://github.com/iced-rs/iced/tree/0.1.0-alpha"&gt;The first alpha version&lt;/a&gt; was eventually released as &lt;a href="https://www.reddit.com/r/rust/comments/czzjnv/iced_a_rendereragnostic_gui_library_focused_on/"&gt;a renderer-agnostic GUI library&lt;/a&gt;. The library did not provide a renderer and implemented the current &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/examples/README.md#tour"&gt;tour example&lt;/a&gt; on top of &lt;a href="https://github.com/ggez/ggez"&gt;&lt;code&gt;ggez&lt;/code&gt;&lt;/a&gt;, a game library.&lt;/p&gt; 
&lt;p&gt;Since then, the focus has shifted towards providing a batteries-included, end-user-oriented GUI library, while keeping the ecosystem modular.&lt;/p&gt; 
&lt;h2&gt;Contributing / Feedback&lt;/h2&gt; 
&lt;p&gt;If you want to contribute, please read our &lt;a href="https://github.com/iced-rs/iced/raw/master/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Feedback is also welcome! You can create a new topic in &lt;a href="https://discourse.iced.rs/"&gt;our Discourse forum&lt;/a&gt; or come chat to &lt;a href="https://discord.gg/3xZJ65GAhd"&gt;our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;The development of Iced is sponsored by the &lt;a href="https://cryptowat.ch/charts"&gt;Cryptowatch&lt;/a&gt; team at &lt;a href="https://kraken.com/"&gt;Kraken.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aws/amazon-q-developer-cli</title>
      <link>https://github.com/aws/amazon-q-developer-cli</link>
      <description>&lt;p&gt;✨ Agentic chat experience in your terminal. Build applications using natural language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amazon Q CLI&lt;/h1&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;DMG&lt;/strong&gt;: &lt;a href="https://desktop-release.q.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg"&gt;Download now&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;HomeBrew&lt;/strong&gt;: &lt;code&gt;brew install --cask amazon-q &lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-ubuntu"&gt;Ubuntu/Debian&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-appimage"&gt;AppImage&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-alternative-linux"&gt;Alternative Linux builds&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you so much for considering to contribute to Amazon Q.&lt;/p&gt; 
&lt;p&gt;Before getting started, see our &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/CONTRIBUTING.md#security-issue-notifications"&gt;contributing docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;MacOS 
  &lt;ul&gt; 
   &lt;li&gt;Xcode 13 or later&lt;/li&gt; 
   &lt;li&gt;Brew&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1. Clone repo&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/aws/amazon-q-developer-cli.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. Install the Rust toolchain using &lt;a href="https://rustup.rs"&gt;Rustup&lt;/a&gt;:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
rustup default stable
rustup toolchain install nightly
cargo install typos-cli
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. Develop locally&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;To compile and run: &lt;code&gt;cargo run --bin chat_cli&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run tests: &lt;code&gt;cargo test&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run lints: &lt;code&gt;cargo clippy&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To format rust files: &lt;code&gt;cargo +nightly fmt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run subcommands: &lt;code&gt;cargo run --bin chat_cli -- {subcommand}&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Login would then be: &lt;code&gt;cargo run --bin chat_cli -- login&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Layout&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/chat-cli/"&gt;&lt;code&gt;chat_cli&lt;/code&gt;&lt;/a&gt; - the &lt;code&gt;q&lt;/code&gt; CLI, allows users to interface with Amazon Q Developer from the command line&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/scripts/"&gt;&lt;code&gt;scripts/&lt;/code&gt;&lt;/a&gt; - Contains ops and build related scripts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/"&gt;&lt;code&gt;crates/&lt;/code&gt;&lt;/a&gt; - Contains all rust crates&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/docs/"&gt;&lt;code&gt;docs/&lt;/code&gt;&lt;/a&gt; - Contains technical documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;For security related concerns, see &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/SECURITY.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;This repo is dual licensed under MIT and Apache 2.0 licenses.&lt;/p&gt; 
&lt;p&gt;Those licenses can be found &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/LICENSE.MIT"&gt;here&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/LICENSE.APACHE"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;“Amazon Web Services” and all related marks, including logos, graphic designs, and service names, are trademarks or trade dress of AWS in the U.S. and other countries. AWS’s trademarks and trade dress may not be used in connection with any product or service that is not AWS’s, in any manner that is likely to cause confusion among customers, or in any manner that disparages or discredits AWS.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>