<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Thu, 11 Sep 2025 01:36:25 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>EFForg/rayhunter</title>
      <link>https://github.com/EFForg/rayhunter</link>
      <description>&lt;p&gt;Rust tool to detect cell site simulators on an orbic mobile hotspot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rayhunter&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/EFForg/rayhunter/actions/workflows/main.yml/badge.svg?sanitize=true" alt="Tests" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://www.eff.org/files/styles/media_browser_preview/public/banner_library/rayhunter-banner.png" alt="Rayhunter Logo - An Orca taking a bite out of a cellular signal bar" /&gt;&lt;/p&gt; 
&lt;p&gt;Rayhunter is a project for detecting IMSI catchers, also known as cell-site simulators or stingrays. It was first designed to run on a cheap mobile hotspot called the Orbic RC400L, but thanks to community efforts can &lt;a href="https://efforg.github.io/rayhunter/supported-devices.html"&gt;support some other devices as well&lt;/a&gt;. It's also designed to be as easy to install and use as possible, regardless of your level of technical skills, and to minimize false positives.&lt;/p&gt; 
&lt;p&gt;‚Üí Check out the &lt;a href="https://efforg.github.io/rayhunter/installation.html"&gt;installation guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;‚Üí To learn more about the aim of the project, and about IMSI catchers in general, please check out our &lt;a href="https://www.eff.org/deeplinks/2025/03/meet-rayhunter-new-open-source-tool-eff-detect-cellular-spying"&gt;introductory blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;‚Üí For discussion, help, or to join the mattermost channel and get involved with the project and community check out the &lt;a href="https://efforg.github.io/rayhunter/support-feedback-community.html"&gt;many ways listed here&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;‚Üí To learn more about the project in general check out the &lt;a href="https://efforg.github.io/rayhunter/"&gt;Rayhunter Book&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;LEGAL DISCLAIMER:&lt;/strong&gt; Use this program at your own risk. We believe running this program does not currently violate any laws or regulations in the United States. However, we are not responsible for civil or criminal liability resulting from the use of this software. If you are located outside of the US please consult with an attorney in your country to help you assess the legal risks of running this program.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Good Hunting!&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pythops/impala</title>
      <link>https://github.com/pythops/impala</link>
      <description>&lt;p&gt;üõú TUI for managing wifi on Linux&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h2&gt; TUI for managing wifi &lt;/h2&gt; 
&lt;/div&gt; 
&lt;h2&gt;üì∏ Demo&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/pythops/impala/assets/57548585/b96e7af4-cba4-49c7-a36f-12c83839134d" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;üí° Prerequisites&lt;/h2&gt; 
&lt;p&gt;A Linux based OS with &lt;a href="https://iwd.wiki.kernel.org/"&gt;iwd&lt;/a&gt; installed.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You might need to install &lt;a href="https://www.nerdfonts.com/"&gt;nerdfonts&lt;/a&gt; for the icons to be displayed correctly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;üöÄ Installation&lt;/h2&gt; 
&lt;h3&gt;üì• Binary release&lt;/h3&gt; 
&lt;p&gt;You can download the pre-built binaries from the release page &lt;a href="https://github.com/pythops/impala/releases"&gt;release page&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;üì¶ crates.io&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;impala&lt;/code&gt; from &lt;a href="https://crates.io/crates/impala"&gt;crates.io&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install impala
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;üêßArch Linux&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;impala&lt;/code&gt; from the &lt;a href="https://archlinux.org/packages/extra/x86_64/impala/"&gt;official repositories&lt;/a&gt; with using &lt;a href="https://wiki.archlinux.org/title/pacman"&gt;pacman&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pacman -S impala
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Nixpkgs&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;nix-env -iA nixpkgs.impala
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;‚öíÔ∏è Build from source&lt;/h3&gt; 
&lt;p&gt;Run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/pythops/impala
cd impala
cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will produce an executable file at &lt;code&gt;target/release/impala&lt;/code&gt; that you can copy to a directory in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;ü™Ñ Usage&lt;/h2&gt; 
&lt;h3&gt;Global&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;Tab&lt;/code&gt; or &lt;code&gt;Shift + Tab&lt;/code&gt;: Switch between different sections.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;j&lt;/code&gt; or &lt;code&gt;Down&lt;/code&gt; : Scroll down.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;k&lt;/code&gt; or &lt;code&gt;Up&lt;/code&gt;: Scroll up.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ctrl+r&lt;/code&gt;: Switch adapter mode.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;?&lt;/code&gt;: Show help.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;esc&lt;/code&gt;: Dismiss the different pop-ups.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;q&lt;/code&gt; or &lt;code&gt;ctrl+c&lt;/code&gt;: Quit the app.&lt;/p&gt; 
&lt;h3&gt;Device&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;i&lt;/code&gt;: Show device information.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;o&lt;/code&gt;: Toggle device power.&lt;/p&gt; 
&lt;h3&gt;Station&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;s&lt;/code&gt;: Start scanning.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Space&lt;/code&gt;: Connect/Disconnect the network.&lt;/p&gt; 
&lt;h3&gt;Known Networks&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;a&lt;/code&gt;: Enable/Disable auto-connect.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;d&lt;/code&gt;: Remove the network from the known networks list.&lt;/p&gt; 
&lt;h3&gt;Access Point&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;n&lt;/code&gt;: Start a new access point.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;: Stop the running access point.&lt;/p&gt; 
&lt;h2&gt;Custom keybindings&lt;/h2&gt; 
&lt;p&gt;Keybindings can be customized in the config file &lt;code&gt;$HOME/.config/impala/config.toml&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;
switch = "r"
mode = "station"

[device]
infos = "i"
toggle_power = "o"

[access_point]
start = 'n'
stop = 'x'

[station]
toggle_scanning = "s"
toggle_connect = " "

[station.known_network]
toggle_autoconnect = "a"
remove = "d"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;‚öñÔ∏è License&lt;/h2&gt; 
&lt;p&gt;GPLv3&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>oxc-project/oxc</title>
      <link>https://github.com/oxc-project/oxc</link>
      <description>&lt;p&gt;‚öì A collection of JavaScript tools written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="OXC Logo" src="https://cdn.jsdelivr.net/gh/oxc-project/oxc-assets/preview-universal.png" width="700" /&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/oxc-project/oxc/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=event%3Apush+branch%3Amain"&gt;&lt;img src="https://github.com/oxc-project/oxc/actions/workflows/ci.yml/badge.svg?event=push&amp;amp;branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/oxc-project/oxc"&gt;&lt;img src="https://codecov.io/gh/oxc-project/oxc/graph/badge.svg?token=FVHEH0BQLJ" alt="Code Coverage" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/oxc-project/oxc"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="CodSpeed Badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sponsors/Boshen"&gt;&lt;img src="https://img.shields.io/github/sponsors/Boshen" alt="Sponsors" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/9uXCAwqQZW"&gt;&lt;img src="https://img.shields.io/discord/1079625926024900739?logo=discord&amp;amp;label=Discord" alt="Discord chat" /&gt;&lt;/a&gt; &lt;a href="https://playground.oxc.rs/"&gt;&lt;img src="https://img.shields.io/badge/Playground-blue?color=9BE4E0" alt="Playground" /&gt;&lt;/a&gt; &lt;a href="https://oxc.rs"&gt;&lt;img src="https://img.shields.io/badge/Website-blue" alt="Website" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;‚öì Oxc&lt;/h2&gt; 
&lt;p&gt;The Oxidation Compiler is a collection of high-performance tools for JavaScript and TypeScript written in Rust.&lt;/p&gt; 
&lt;p&gt;Our goal is to enable a new generation of faster, more reliable development tools by providing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: 2-100x faster than existing JavaScript tools&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reliability&lt;/strong&gt;: 100% compatibility with JavaScript and TypeScript standards&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Use individual tools or compose them into complete toolchains&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Developer Experience&lt;/strong&gt;: Clear error messages and seamless editor integration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We are building a parser, linter, formatter, transformer, minifier, resolver ... all written in Rust.&lt;/p&gt; 
&lt;p&gt;For more information, check out our documentation at &lt;a href="https://oxc.rs"&gt;oxc.rs&lt;/a&gt; and architecture guide in &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/ARCHITECTURE.md"&gt;ARCHITECTURE.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;VoidZero Inc.&lt;/h2&gt; 
&lt;p&gt;Oxc is a project of &lt;a href="https://voidzero.dev/"&gt;VoidZero&lt;/a&gt;, see our announcement &lt;a href="https://voidzero.dev/blog"&gt;Announcing VoidZero - Next Generation Toolchain for JavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have requirements for JavaScript tools at scale, please &lt;a href="https://forms.gle/WQgjyzYJpwurpxWKA"&gt;get in touch&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;üôãWho's using Oxc?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://rolldown.rs"&gt;Rolldown&lt;/a&gt; uses the &lt;a href="https://docs.rs/oxc"&gt;oxc&lt;/a&gt; crate for parsing and transformation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://trynova.dev"&gt;Nova engine&lt;/a&gt; uses the &lt;a href="https://docs.rs/oxc"&gt;oxc&lt;/a&gt; crate for parsing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rolldown.rs"&gt;Rolldown&lt;/a&gt;, &lt;a href="https://github.com/swc-project/swc-node"&gt;swc-node&lt;/a&gt; and &lt;a href="https://github.com/webpro-nl/knip"&gt;knip&lt;/a&gt; use the &lt;a href="https://docs.rs/oxc_resolver"&gt;oxc_resolver&lt;/a&gt; crate for module resolution.&lt;/li&gt; 
 &lt;li&gt;Projects and companies like &lt;a href="https://github.com/preactjs/preact/raw/4c20c23c16dd60f380ce9fe98afc93041a7e1562/oxlint.json"&gt;Preact&lt;/a&gt;, &lt;a href="https://oxc.rs/blog/2023-12-12-announcing-oxlint.html#_50-100-times-faster-than-eslint"&gt;Shopify&lt;/a&gt;, ByteDance and Shopee uses oxlint for linting.&lt;/li&gt; 
 &lt;li&gt;...&lt;a href="https://oxc.rs/docs/guide/projects.html"&gt;and many more&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚úçÔ∏è Contribute&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for guidance.&lt;/p&gt; 
&lt;p&gt;Check out some of the &lt;a href="https://github.com/oxc-project/oxc/contribute"&gt;good first issues&lt;/a&gt; or ask us on &lt;a href="https://discord.gg/9uXCAwqQZW"&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are unable to contribute by code, you can still participate by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add a &lt;a href="https://github.com/oxc-project/oxc/stargazers"&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt; 
 &lt;li&gt;Join us on &lt;a href="https://discord.gg/9uXCAwqQZW"&gt;Discord&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/boshen_c"&gt;Follow me on X&lt;/a&gt; and post about this project.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ö°Ô∏è Linter Quick Start&lt;/h2&gt; 
&lt;p&gt;The linter is ready to catch mistakes for you. It comes with 93 rules turned on by default (out of 430+ in total) and no configuration is required.&lt;/p&gt; 
&lt;p&gt;To get started, run &lt;a href="https://www.npmjs.com/package/oxlint"&gt;oxlint&lt;/a&gt; or via &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx oxlint@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To give you an idea of its capabilities, here is an example from the &lt;a href="https://github.com/microsoft/vscode"&gt;vscode&lt;/a&gt; repository, which finishes linting 4800+ files in 0.7 seconds.&lt;/p&gt; 
&lt;p float="left" align="left"&gt; &lt;img src="https://cdn.jsdelivr.net/gh/oxc-project/oxc-assets/linter-screenshot.png" width="60%" /&gt; &lt;/p&gt; 
&lt;h2&gt;‚ö°Ô∏è Performance&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The parser aims to be the fastest Rust-based ready-for-production parser.&lt;/li&gt; 
 &lt;li&gt;The linter is more than 50 times faster than &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;, and scales with the number of CPU cores.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p float="left" align="middle"&gt; &lt;img src="https://raw.githubusercontent.com/Boshen/bench-javascript-parser-written-in-rust/main/bar-graph.svg?sanitize=true" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/Boshen/bench-javascript-linter/main/bar-graph.svg?sanitize=true" width="49%" /&gt; &lt;/p&gt; 
&lt;h2&gt;‚å®Ô∏è Rust, Node.js and Wasm Usage&lt;/h2&gt; 
&lt;h3&gt;Rust&lt;/h3&gt; 
&lt;p&gt;Individual crates are published, you may use them to build your own JavaScript tools.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The umbrella crate &lt;a href="https://docs.rs/oxc"&gt;oxc&lt;/a&gt; exports all public crates from this repository.&lt;/li&gt; 
 &lt;li&gt;The AST and parser crates &lt;a href="https://docs.rs/oxc_ast"&gt;oxc_ast&lt;/a&gt; and &lt;a href="https://docs.rs/oxc_parser"&gt;oxc_parser&lt;/a&gt; are production ready.&lt;/li&gt; 
 &lt;li&gt;The resolver crate &lt;a href="https://docs.rs/oxc_resolver"&gt;oxc_resolver&lt;/a&gt; for module resolution is also production ready.&lt;/li&gt; 
 &lt;li&gt;Example usages of these crates can be found in their respective &lt;code&gt;crates/*/examples&lt;/code&gt; directory.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We have optimized Rust compilation speed to ensure developing your own Oxc-based tools remains efficient. Our &lt;a href="https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=branch%3Amain"&gt;CI runs&lt;/a&gt; complete in approximately 3 minutes.&lt;/p&gt; 
&lt;h3&gt;Node.js&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;via napi: &lt;a href="https://www.npmjs.com/package/oxc-parser"&gt;oxc-parser&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/oxc-transform"&gt;oxc-transform&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Wasm&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.npmjs.com/package/@oxc-parser/wasm"&gt;@oxc-parser/wasm&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üéØ Tools&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-ast-and-parser"&gt;AST and Parser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-linter"&gt;Linter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-resolver"&gt;Resolver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-minifier"&gt;Minifier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-formatter"&gt;Formatter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-transformer"&gt;Transformer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üî∏ AST and Parser&lt;/h3&gt; 
&lt;p&gt;Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust.&lt;/p&gt; 
&lt;p&gt;As the parser often represents a key performance bottleneck in JavaScript tooling, any minor improvements can have a cascading effect on our downstream tools.&lt;/p&gt; 
&lt;h4&gt;üèÜ Parser Performance&lt;/h4&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/Boshen/bench-javascript-parser-written-in-rust"&gt;benchmark&lt;/a&gt; reveals that the Oxc parser surpasses the speed of the &lt;a href="https://swc.rs"&gt;swc&lt;/a&gt; parser by approximately 3 times and the &lt;a href="https://biomejs.dev/"&gt;Biome&lt;/a&gt; parser by 5 times.&lt;/p&gt; 
&lt;h3&gt;üî∏ Linter&lt;/h3&gt; 
&lt;p&gt;The linter embraces convention over configuration, eliminating the need for extensive configuration and plugin setup. Unlike other linters like &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;, which often require intricate configurations and plugin installations (e.g. &lt;a href="https://typescript-eslint.io"&gt;@typescript-eslint&lt;/a&gt;), our linter only requires a single command that you can immediately run on your codebase:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx oxlint@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;üèÜ Linter Performance&lt;/h4&gt; 
&lt;p&gt;The linter is 50 - 100 times faster than &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; depending on the number of rules and number of CPU cores used. It completes in less than a second for most codebases with a few hundred files and completes in a few seconds for larger monorepos. See &lt;a href="https://github.com/Boshen/bench-javascript-linter"&gt;bench-javascript-linter&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;As an upside, the binary is approximately 5MB, whereas &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; and its associated plugin dependencies can easily exceed 100.&lt;/p&gt; 
&lt;p&gt;You may also download the linter binary from the &lt;a href="https://github.com/oxc-project/oxc/releases/latest"&gt;latest release tag&lt;/a&gt; as a standalone binary, this lets you run the linter without a Node.js installation in your CI.&lt;/p&gt; 
&lt;h3&gt;üî∏ Resolver&lt;/h3&gt; 
&lt;p&gt;Module resolution plays a crucial role in JavaScript tooling, especially for tasks like multi-file analysis or bundling. However, it can often become a performance bottleneck. To address this, we developed &lt;a href="https://docs.rs/oxc_resolver"&gt;oxc_resolver&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The resolver is production-ready and is currently being used in &lt;a href="https://rolldown.rs"&gt;Rolldown&lt;/a&gt;. Usage and examples can be found in its own &lt;a href="https://github.com/oxc-project/oxc_resolver"&gt;repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;üî∏ Transformer&lt;/h3&gt; 
&lt;p&gt;A transformer is responsible for turning higher versions of ECMAScript to a lower version that can be used in older browsers.&lt;/p&gt; 
&lt;p&gt;TypeScript, React, ES6 transforms are complete.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/oxc-transform"&gt;oxc-transform&lt;/a&gt; can be used for experimentation.&lt;/p&gt; 
&lt;h3&gt;üî∏ Isolated Declarations&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-5/#isolated-declarations"&gt;TypeScript Isolated Declarations Emit&lt;/a&gt; without using the TypeScript compiler.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/oxc-project/bench-transformer"&gt;benchmark&lt;/a&gt; indicates that our implementation is at least 20 times faster than the TypeScript compiler.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://www.npmjs.com/package/oxc-transform"&gt;npm package&lt;/a&gt; or &lt;a href="https://crates.io/crates/oxc_isolated_declarations"&gt;crate&lt;/a&gt; can be used for this task.&lt;/p&gt; 
&lt;h3&gt;üî∏ Minifier&lt;/h3&gt; 
&lt;p&gt;JavaScript minification plays a crucial role in optimizing website performance as it reduces the amount of data sent to users, resulting in faster page loads. This holds tremendous economic value, particularly for e-commerce websites, where every second can equate to millions of dollars.&lt;/p&gt; 
&lt;p&gt;However, existing minifiers typically require a trade-off between compression quality and speed. You have to choose between the slowest for the best compression or the fastest for less compression. But what if we could develop a faster minifier without compromising on compression?&lt;/p&gt; 
&lt;p&gt;We are actively working on a prototype that aims to achieve this goal, by porting all test cases from well-known minifiers such as &lt;a href="https://github.com/google/closure-compiler"&gt;google-closure-compiler&lt;/a&gt;, &lt;a href="https://terser.org"&gt;terser&lt;/a&gt;, &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt;, and &lt;a href="https://github.com/tdewolff/minify"&gt;tdewolff-minify&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Preliminary results indicate that we are on track to achieve our objectives. With the Oxc minifier, you can expect faster minification times without sacrificing compression quality.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/privatenumber/minification-benchmarks"&gt;minification benchmarks&lt;/a&gt; for comparisons.&lt;/p&gt; 
&lt;h3&gt;üî∏ Formatter&lt;/h3&gt; 
&lt;p&gt;While &lt;a href="https://prettier.io"&gt;prettier&lt;/a&gt; has established itself as the de facto code formatter for JavaScript, there is a significant demand in the developer community for a less opinionated alternative. Recognizing this need, our ambition is to undertake research and development to create a new JavaScript formatter that offers increased flexibility and customization options.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/oxc-project/oxc/tree/main/crates/oxc_formatter"&gt;prototype&lt;/a&gt; is currently work in progress.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üß™Test Infrastructure&lt;/h2&gt; 
&lt;p&gt;In Oxc, correctness and reliability are taken extremely seriously.&lt;/p&gt; 
&lt;p&gt;We spend half of our time on strengthening the test infrastructure to prevent problems from propagating to downstream tools.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://oxc.rs/docs/learn/architecture/test.html"&gt;Test Infrastructure&lt;/a&gt; documents our test procedures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Conformance suite on Test262, Babel, TypeScript&lt;/li&gt; 
 &lt;li&gt;Lots of fuzzing&lt;/li&gt; 
 &lt;li&gt;Linter snapshot diagnostics&lt;/li&gt; 
 &lt;li&gt;oxlint ecosystem ci&lt;/li&gt; 
 &lt;li&gt;Idempotency testing&lt;/li&gt; 
 &lt;li&gt;Code coverage&lt;/li&gt; 
 &lt;li&gt;End to end 3000 top npm packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üìö Learning Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;My small tutorial on &lt;a href="https://oxc.rs/docs/learn/parser_in_rust/intro.html"&gt;how to write a JavaScript Parser in Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;My small article &lt;a href="https://oxc.rs/docs/learn/performance.html"&gt;Pursuit of Performance on Building a JavaScript Compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://oxc.rs/docs/learn/references.html"&gt;And more&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ü§ù Credits&lt;/h2&gt; 
&lt;p&gt;This project was incubated with the assistance of these exceptional mentors and their projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://biomejs.dev/"&gt;Biome&lt;/a&gt; - &lt;a href="https://github.com/ematipico"&gt;@ematipico&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://beta.ruff.rs"&gt;Ruff&lt;/a&gt; - &lt;a href="https://github.com/charliermarsh"&gt;@charliermarsh&lt;/a&gt;, &lt;a href="https://github.com/MichaReiser"&gt;@MichaReiser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quick-lint/quick-lint-js"&gt;quick-lint-js&lt;/a&gt; - &lt;a href="https://github.com/strager"&gt;@strager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://package.elm-lang.org/packages/jfmengels/elm-review/latest"&gt;elm-review&lt;/a&gt; - &lt;a href="https://github.com/jfmengels"&gt;@jfmengels&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Special thanks go to&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/domonji"&gt;@domonji&lt;/a&gt; for bootstrapping this project together, and also completing the TypeScript parser.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tongtong-lu"&gt;@tongtong-lu&lt;/a&gt; and &lt;a href="https://github.com/guan-wy"&gt;@guan-wy&lt;/a&gt; for designing the &lt;a href="https://github.com/oxc-project/oxc-assets"&gt;project logo&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ù§ Who's &lt;a href="https://github.com/sponsors/Boshen"&gt;Sponsoring Oxc&lt;/a&gt;?&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/sponsors/Boshen"&gt; &lt;img src="https://raw.githubusercontent.com/Boshen/sponsors/main/sponsors.svg?sanitize=true" alt="My sponsors" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;üìñ License&lt;/h2&gt; 
&lt;p&gt;Oxc is free and open-source software licensed under the &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Oxc ports or copies code from other open source projects, their licenses are listed in &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/THIRD-PARTY-LICENSE"&gt;&lt;strong&gt;Third-party library licenses&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>juspay/hyperswitch</title>
      <link>https://github.com/juspay/hyperswitch</link>
      <description>&lt;p&gt;An open source payments switch written in Rust to make payments fast, reliable and affordable&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-dark.svg#gh-dark-mode-only" alt="Hyperswitch-Logo" width="40%" /&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-light.svg#gh-light-mode-only" alt="Hyperswitch-Logo" width="40%" /&gt; &lt;/p&gt; 
&lt;h1 align="center"&gt;Composable Open-Source Payments Infrastructure&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/gifs/quickstart.gif" alt="Quickstart demo" /&gt; &lt;/p&gt; 
&lt;!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} --&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/juspay/hyperswitch/actions?query=workflow%3ACI+branch%3Amain"&gt; &lt;img src="https://github.com/juspay/hyperswitch/workflows/CI-push/badge.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://github.com/juspay/hyperswitch/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/github/license/juspay/hyperswitch" /&gt; &lt;/a&gt; &lt;a href="https://github.com/juspay/hyperswitch/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/badge/Made_in-Rust-orange" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.linkedin.com/company/hyperswitch/"&gt; &lt;img src="https://img.shields.io/badge/follow-hyperswitch-blue?logo=linkedin&amp;amp;labelColor=grey" /&gt; &lt;/a&gt; &lt;a href="https://x.com/hyperswitchio"&gt; &lt;img src="https://img.shields.io/badge/follow-%40hyperswitchio-white?logo=x&amp;amp;labelColor=grey" /&gt; &lt;/a&gt; &lt;a href="https://inviter.co/hyperswitch-slack"&gt; &lt;img src="https://img.shields.io/badge/chat-on_slack-blue?logo=slack&amp;amp;labelColor=grey&amp;amp;color=%233f0e40" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;üìÅ Table of Contents&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-what-can-i-do-with-hyperswitch"&gt;What Can I Do with Hyperswitch?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-quickstart-local-setup"&gt;Quickstart (Local Setup)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#cloud-deployment"&gt;Cloud Deployment&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#hosted-sandbox-no-setup-required"&gt;Hosted Sandbox (No Setup Required)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-why-hyperswitch"&gt;Why Hyperswitch?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview"&gt;Architectural Overview&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#our-vision"&gt;Our Vision&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#community--contributions"&gt;Community &amp;amp; Contributions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#feature-requests--bugs"&gt;Feature Requests &amp;amp; Bugs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning"&gt;Versioning&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license"&gt;License&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#team-behind-hyperswitch"&gt;Team Behind Hyperswitch&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;summary&gt;&lt;h2&gt; What Can I Do with Hyperswitch?&lt;/h2&gt;&lt;/summary&gt; 
&lt;p&gt;Hyperswitch offers a modular, open-source payments infrastructure designed for flexibility and control. Apart from our Payment Suite offering, this solution allows businesses to pick and integrate only the modules they need on top of their existing payment stack ‚Äî without unnecessary complexity or vendor lock-in.&lt;/p&gt; 
&lt;p&gt;Each module is independent and purpose-built to optimize different aspects of payment processing.&lt;/p&gt; 
&lt;h3&gt; Learn More About The Payment Modules &lt;/h3&gt; 
&lt;details&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cost Observability&lt;/strong&gt;&lt;br /&gt; Advanced observability tools to audit, monitor, and optimize your payment costs. Detect hidden fees, downgrades, and penalties with self-serve dashboards and actionable insights.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/ai-powered-cost-observability"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Revenue Recovery&lt;/strong&gt;&lt;br /&gt; Combat passive churn with intelligent retry strategies tuned by card bin, region, method, and more. Offers fine-grained control over retry algorithms, penalty budgets, and recovery transparency.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/revenue-recovery"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vault&lt;/strong&gt;&lt;br /&gt; A PCI-compliant vault service to store cards, tokens, wallets, and bank credentials. Provides a unified, secure, and reusable store of customer-linked payment methods.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/vault"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Intelligent Routing&lt;/strong&gt;&lt;br /&gt; Route each transaction to the PSP with the highest predicted auth rate. Reduce retries, avoid downtime, and minimize latency while maximizing first attempt success.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/intelligent-routing"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reconciliation&lt;/strong&gt;&lt;br /&gt; Automate 2-way and 3-way reconciliation with backdated support, staggered scheduling, and customizable outputs. Reduces manual ops effort and increases audit confidence.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/reconciliation"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Alternate Payment Methods&lt;/strong&gt;&lt;br /&gt; Drop-in widgets for PayPal, Apple Pay, Google Pay, Samsung Pay, Pay by Bank, and BNPL providers like Klarna. Maximizes conversions with seamless one-click checkout.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/enable-alternate-payment-method-widgets"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt; Local Setup via Docker &lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# One-click local setup

git clone --depth 1 --branch latest https://github.com/juspay/hyperswitch

cd hyperswitch

scripts/setup.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;This script: &lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Detects Docker/Podman&lt;/li&gt; 
  &lt;li&gt;Offers multiple deployment profiles: 
   &lt;ul&gt; 
    &lt;li&gt;&lt;strong&gt;Standard&lt;/strong&gt;: App server + Control Center&lt;/li&gt; 
    &lt;li&gt;&lt;strong&gt;Full&lt;/strong&gt;: Includes monitoring + schedulers&lt;/li&gt; 
    &lt;li&gt;&lt;strong&gt;Minimal&lt;/strong&gt;: Standalone App server&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Provides access links when done&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;If you need further help, check out our &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/overview/unified-local-setup-using-docker"&gt;video tutorial&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;üëâ After setup, &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/account-setup/using-hyperswitch-control-center#add-a-payment-processor"&gt;configure a connector&lt;/a&gt; and &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/account-setup/test-a-payment"&gt;test a payment&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Hosted Sandbox (No Setup Required)&lt;/h3&gt; 
&lt;p&gt;Hyperswitch offers a fully hosted sandbox environment that requires no setup. You can explore the Control Center, configure payment connectors, and test payments directly from the UI.&lt;/p&gt; 
&lt;a href="https://app.hyperswitch.io"&gt; &lt;img src="https://github.com/juspay/hyperswitch/raw/main/docs/imgs/try-the-sandbox.png?raw=true" height="35" /&gt; &lt;/a&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt; What you can do in the Hosted Sandbox&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Access the full Control Center&lt;/li&gt; 
  &lt;li&gt;Configure payment connectors&lt;/li&gt; 
  &lt;li&gt;View logs, routing rules, and retry strategies&lt;/li&gt; 
  &lt;li&gt;Try payments directly from the UI&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;strong&gt;Cloud Deployment&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;You can deploy to AWS, GCP, or Azure using Helm or CDK scripts. Fastest path:&lt;/p&gt; 
&lt;p&gt;Click to deploy via AWS:&lt;/p&gt; 
&lt;a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=HyperswitchBootstarp&amp;amp;templateURL=https://hyperswitch-synth.s3.eu-central-1.amazonaws.com/hs-starter-config.yaml"&gt; &lt;img src="https://github.com/juspay/hyperswitch/raw/main/docs/imgs/aws_button.png?raw=true" height="35" /&gt; &lt;/a&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Cloud Deployment Instructions&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Click the AWS deployment button above to launch the stack.&lt;/li&gt; 
  &lt;li&gt;Follow the guided steps in the AWS Console (approx. 30‚Äì45 mins).&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;‚úÖ This setup provisions Hyperswitch on your cloud account using CloudFormation.&lt;/p&gt; 
 &lt;p&gt;üìò For full instructions and Helm-based deployments, check out the&lt;br /&gt; &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/deploy-on-kubernetes-using-helm"&gt;Cloud Install Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview"&gt; &lt;h2 id="architectural-overview"&gt;Architectural Overview&lt;/h2&gt; &lt;/a&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/features.png" /&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/non-functional-features.png" /&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-architecture-v1.png" /&gt; 
&lt;h2&gt;Why Hyperswitch?&lt;/h2&gt; 
&lt;p&gt;Hyperswitch is a commercial open-source payments stack purpose-built for scale, flexibility, and developer experience. Designed with a modular architecture, Hyperswitch lets you pick only the components you need‚Äîwhether it‚Äôs routing, retries, vaulting, or observability‚Äîwithout vendor lock-in or bloated integrations.&lt;/p&gt; 
&lt;p&gt;Built in Rust for performance and reliability, Hyperswitch supports global payment methods (cards, wallets, BNPL, UPI, Pay by Bank), exposes smart routing and retry logic, and provides a visual workflow builder in the Control Center. Whether you're integrating a full payment suite or augmenting an existing stack with a single module, Hyperswitch meets you where you are.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;‚ÄúLinux for Payments‚Äù&lt;/strong&gt; ‚Äî Hyperswitch is a well-architected reference for teams who want to own their payments stack.&lt;/p&gt; 
&lt;p&gt;We believe in:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Embracing Payment Diversity:&lt;/strong&gt; Innovation comes from enabling choice‚Äîacross payment methods, processors, and flows.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Open Source by Default:&lt;/strong&gt; Transparency drives trust and builds better, reusable software.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Community-Driven Development:&lt;/strong&gt; Our roadmap is shaped by real-world use cases and contributors.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Systems-Level Engineering:&lt;/strong&gt; We hold ourselves to a high bar for reliability, security, and performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Maximizing Value Creation:&lt;/strong&gt; For developers, customers, and partners alike.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Community-Driven, Enterprise-Tested:&lt;/strong&gt; Hyperswitch is built in the open with real-world feedback from developers and contributors, and maintained by Juspay, the team powering payment infrastructure for 400+ leading enterprises worldwide.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributors from around the world to help build Hyperswitch. Whether you're fixing bugs, improving documentation, or adding new features, your help is appreciated.&lt;/p&gt; 
&lt;p&gt;Please read our &lt;a href="https://github.com/juspay/hyperswitch/raw/main/docs/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;Join the conversation on &lt;a href="https://inviter.co/hyperswitch-slack"&gt;Slack&lt;/a&gt; or explore open issues on &lt;a href="https://github.com/juspay/hyperswitch/issues"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#feature-requests"&gt; &lt;h2 id="feature-requests"&gt;Feature requests &amp;amp; Bugs&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;For new product features, enhancements, roadmap discussions, or to share queries and ideas, visit our &lt;a href="https://github.com/juspay/hyperswitch/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For reporting a bug, please read the issue guidelines and search for &lt;a href="https://github.com/juspay/hyperswitch/issues"&gt;existing and closed issues&lt;/a&gt;. If your problem or idea is not addressed yet, please &lt;a href="https://github.com/juspay/hyperswitch/issues/new/choose"&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning"&gt; &lt;h2 id="versioning"&gt;Versioning&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;Check the &lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license"&gt; &lt;h2 id="copyright-and-license"&gt;Copyright and License&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;This product is licensed under the &lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/LICENSE"&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#team-behind-hyperswitch"&gt; &lt;h2 id="team-behind-hyperswitch"&gt;Team behind Hyperswitch&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;The core team of 150+ engineers building Hyperswitch. Keep up the great work! ü•Ç&lt;/p&gt; 
&lt;a href="https://github.com/juspay/hyperswitch/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=juspay/hyperswitch" alt="Contributors" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>openai/codex</title>
      <link>https://github.com/openai/codex</link>
      <description>&lt;p&gt;Lightweight coding agent that runs in your terminal&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;OpenAI Codex CLI&lt;/h1&gt; 
&lt;p align="center"&gt;&lt;code&gt;npm i -g @openai/codex&lt;/code&gt;&lt;br /&gt;or &lt;code&gt;brew install codex&lt;/code&gt;&lt;/p&gt; 
&lt;p align="center"&gt;&lt;strong&gt;Codex CLI&lt;/strong&gt; is a coding agent from OpenAI that runs locally on your computer.&lt;br /&gt;If you are looking for the &lt;em&gt;cloud-based agent&lt;/em&gt; from OpenAI, &lt;strong&gt;Codex Web&lt;/strong&gt;, see &lt;a href="https://chatgpt.com/codex"&gt;chatgpt.com/codex&lt;/a&gt;.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-splash.png" alt="Codex CLI splash" width="80%" /&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Installing and running Codex CLI&lt;/h3&gt; 
&lt;p&gt;Install globally with your preferred package manager. If you use npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;npm install -g @openai/codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if you use Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;brew install codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then simply run &lt;code&gt;codex&lt;/code&gt; to get started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;You can also go to the &lt;a href="https://github.com/openai/codex/releases/latest"&gt;latest GitHub Release&lt;/a&gt; and download the appropriate binary for your platform.&lt;/summary&gt; 
 &lt;p&gt;Each GitHub Release contains many executables, but in practice, you likely want one of these:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;macOS 
   &lt;ul&gt; 
    &lt;li&gt;Apple Silicon/arm64: &lt;code&gt;codex-aarch64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;x86_64 (older Mac hardware): &lt;code&gt;codex-x86_64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Linux 
   &lt;ul&gt; 
    &lt;li&gt;x86_64: &lt;code&gt;codex-x86_64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;arm64: &lt;code&gt;codex-aarch64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Each archive contains a single entry with the platform baked into the name (e.g., &lt;code&gt;codex-x86_64-unknown-linux-musl&lt;/code&gt;), so you likely want to rename it to &lt;code&gt;codex&lt;/code&gt; after extracting it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using Codex with your ChatGPT plan&lt;/h3&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-login.png" alt="Codex CLI login" width="80%" /&gt; &lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;codex&lt;/code&gt; and select &lt;strong&gt;Sign in with ChatGPT&lt;/strong&gt;. We recommend signing into your ChatGPT account to use Codex as part of your Plus, Pro, Team, Edu, or Enterprise plan. &lt;a href="https://help.openai.com/en/articles/11369540-codex-in-chatgpt"&gt;Learn more about what's included in your ChatGPT plan&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also use Codex with an API key, but this requires &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#usage-based-billing-alternative-use-an-openai-api-key"&gt;additional setup&lt;/a&gt;. If you previously used an API key for usage-based billing, see the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#migrating-from-usage-based-billing-api-key"&gt;migration steps&lt;/a&gt;. If you're having trouble with login, please comment on &lt;a href="https://github.com/openai/codex/issues/1243"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Model Context Protocol (MCP)&lt;/h3&gt; 
&lt;p&gt;Codex CLI supports &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#model-context-protocol-mcp"&gt;MCP servers&lt;/a&gt;. Enable by adding an &lt;code&gt;mcp_servers&lt;/code&gt; section to your &lt;code&gt;~/.codex/config.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;Codex CLI supports a rich set of configuration options, with preferences stored in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;. For full configuration options, see &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Docs &amp;amp; FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md"&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#cli-usage"&gt;CLI usage&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#running-with-a-prompt-as-input"&gt;Running with a prompt as input&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#example-prompts"&gt;Example prompts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#memory-with-agentsmd"&gt;Memory with AGENTS.md&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/sandbox.md"&gt;&lt;strong&gt;Sandbox &amp;amp; approvals&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md"&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#forcing-a-specific-auth-method-advanced"&gt;Auth methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#connecting-on-a-headless-machine"&gt;Login on a "Headless" machine&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md"&gt;&lt;strong&gt;Advanced&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#non-interactive--ci-mode"&gt;Non-interactive / CI mode&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#tracing--verbose-logging"&gt;Tracing / verbose logging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#model-context-protocol-mcp"&gt;Model Context Protocol (MCP)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/zdr.md"&gt;&lt;strong&gt;Zero data retention (ZDR)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/contributing.md"&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md"&gt;&lt;strong&gt;Install &amp;amp; build&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#system-requirements"&gt;System Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#dotslash"&gt;DotSlash&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#build-from-source"&gt;Build from source&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/faq.md"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/open-source-fund.md"&gt;&lt;strong&gt;Open source fund&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/LICENSE"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>j178/prek</title>
      <link>https://github.com/j178/prek</link>
      <description>&lt;p&gt;‚ö° Better `pre-commit`, re-engineered in Rust&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;prek&lt;/h1&gt; 
 &lt;img width="220" alt="prek" src="https://raw.githubusercontent.com/j178/prek/master/docs/assets/logo.png" /&gt; 
 &lt;p&gt;&lt;a href="https://github.com/j178/prek/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/j178/prek/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/github/j178/prek"&gt;&lt;img src="https://codecov.io/github/j178/prek/graph/badge.svg?token=MP6TY24F43" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://github.com/j178/prek/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/j178/prek/total?logo=github" alt="GitHub Downloads" /&gt;&lt;/a&gt; &lt;a href="https://pepy.tech/projects/prek"&gt;&lt;img src="https://img.shields.io/pypi/dm/prek?logo=python" alt="PyPI Downloads" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/3NRJUqJz86"&gt;&lt;img src="https://img.shields.io/discord/1403581202102878289?logo=discord" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; is a framework to run hooks written in many languages, and it manages the language toolchain and dependencies for running the hooks.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;prek&lt;/em&gt; is a reimagined version of pre-commit, built in Rust. It is designed to be a faster, dependency-free and drop-in alternative for it, while also providing some additional long-requested features.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] prek is not production-ready yet. Some subcommands and languages are not implemented. See the current gaps for drop-in parity: &lt;a href="https://prek.j178.dev/todo/"&gt;TODO&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;It's already being adopted by &lt;a href="https://raw.githubusercontent.com/j178/prek/master/#who-is-using-prek"&gt;some projects&lt;/a&gt;, please give it a try - we'd love your feedback!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üöÄ A single binary with no dependencies, does not require Python or any other runtime.&lt;/li&gt; 
 &lt;li&gt;‚ö° About &lt;a href="https://prek.j178.dev/benchmark/"&gt;10x faster&lt;/a&gt; than &lt;code&gt;pre-commit&lt;/code&gt; and uses only a third of disk space.&lt;/li&gt; 
 &lt;li&gt;üîÑ Fully compatible with the original pre-commit configurations and hooks.&lt;/li&gt; 
 &lt;li&gt;üèóÔ∏è Built-in support for monorepos (i.e. &lt;a href="https://prek.j178.dev/workspace/"&gt;workspace mode&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;üêç Integration with &lt;a href="https://github.com/astral-sh/uv"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; for managing Python virtual environments and dependencies.&lt;/li&gt; 
 &lt;li&gt;üõ†Ô∏è Improved toolchain installations for Python, Node.js, Go, Rust and Ruby, shared between hooks.&lt;/li&gt; 
 &lt;li&gt;üì¶ &lt;a href="https://prek.j178.dev/builtin/"&gt;Built-in&lt;/a&gt; Rust-native implementation of some common hooks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to migrate&lt;/h2&gt; 
&lt;p&gt;prek is designed as a drop-in replacement:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/j178/prek/master/#installation"&gt;Install prek&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Replace &lt;code&gt;pre-commit&lt;/code&gt; with &lt;code&gt;prek&lt;/code&gt; in your commands&lt;/li&gt; 
 &lt;li&gt;Your existing &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; works unchanged&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ prek run
trim trailing whitespace.................................................Passed
fix end of files.........................................................Passed
typos....................................................................Passed
cargo fmt................................................................Passed
cargo clippy.............................................................Passed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For configuring &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; and writing hooks, you can refer to the &lt;a href="https://pre-commit.com/"&gt;pre-commit documentation&lt;/a&gt; as prek is fully compatible with it.&lt;/p&gt; 
&lt;h2&gt;Why prek?&lt;/h2&gt; 
&lt;h3&gt;prek is way faster&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is about &lt;a href="https://prek.j178.dev/benchmark/"&gt;10x faster&lt;/a&gt; than &lt;code&gt;pre-commit&lt;/code&gt; and uses only a third of disk space.&lt;/li&gt; 
 &lt;li&gt;It redesigned how hook environments and toolchains are managed, they are all shared between hooks, which reduces the disk space usage and speeds up the installation process.&lt;/li&gt; 
 &lt;li&gt;Repositories are cloned in parallel, and hooks are installed in parallel if their dependencies are disjoint.&lt;/li&gt; 
 &lt;li&gt;It uses &lt;a href="https://github.com/astral-sh/uv"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; for creating Python virtualenvs and installing dependencies, which is known for its speed and efficiency.&lt;/li&gt; 
 &lt;li&gt;It implements some common hooks in Rust, &lt;a href="https://prek.j178.dev/builtin/"&gt;built in prek&lt;/a&gt;, which are faster than their Python counterparts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;prek provides a better user experience&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;No need to install Python or any other runtime, just download a single binary.&lt;/li&gt; 
 &lt;li&gt;No hassle with your Python version or virtual environments, prek automatically installs the required Python version and creates a virtual environment for you.&lt;/li&gt; 
 &lt;li&gt;Built-in support for workspaces (or monorepos), each subproject can have its own &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prek run&lt;/code&gt; has some nifty improvements over &lt;code&gt;pre-commit run&lt;/code&gt;, such as: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;prek run --directory &amp;lt;dir&amp;gt;&lt;/code&gt; runs hooks for files in the specified directory, no need to use &lt;code&gt;git ls-files -- &amp;lt;dir&amp;gt; | xargs pre-commit run --files&lt;/code&gt; anymore.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;prek run --last-commit&lt;/code&gt; runs hooks for files changed in the last commit.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;prek run [HOOK] [HOOK]&lt;/code&gt; selects and runs multiple hooks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prek list&lt;/code&gt; command lists all available hooks, their ids, and descriptions, providing a better overview of the configured hooks.&lt;/li&gt; 
 &lt;li&gt;prek provides shell completions for &lt;code&gt;prek run &amp;lt;hook_id&amp;gt;&lt;/code&gt; command, making it easier to run specific hooks without remembering their ids.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more detailed improvements prek offers, take a look at &lt;a href="https://prek.j178.dev/diff/"&gt;Difference from pre-commit&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Who is using prek?&lt;/h2&gt; 
&lt;p&gt;prek is pretty new, but it is already being used or recommend by some projects and organizations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/airflow/issues/44995"&gt;Airflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pdm-project/pdm/pull/3593"&gt;PDM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DetachHead/basedpyright/pull/1413"&gt;basedpyright&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenLineage/OpenLineage/pull/3965"&gt;OpenLineage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/authlib/authlib/pull/804"&gt;Authlib&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Standalone installer&lt;/summary&gt; 
 &lt;p&gt;prek provides a standalone installer script to download and install the tool,&lt;/p&gt; 
 &lt;p&gt;On Linux and macOS:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl --proto '=https' --tlsv1.2 -LsSf https://github.com/j178/prek/releases/download/v0.2.0-alpha.4/prek-installer.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;On Windows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-powershell"&gt;powershell -ExecutionPolicy ByPass -c "irm https://github.com/j178/prek/releases/download/v0.2.0-alpha.4/prek-installer.ps1 | iex"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;PyPI&lt;/summary&gt; 
 &lt;p&gt;prek is published as Python binary wheel to PyPI, you can install it using &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;uv&lt;/code&gt; (recommended), or &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;pip install prek

# or

uv tool install prek

# or

pipx install prek
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Homebrew&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;brew install prek
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;mise&lt;/summary&gt; 
 &lt;p&gt;To use prek with &lt;a href="https://mise.jdx.dev"&gt;mise&lt;/a&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;mise use prek
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Cargo&lt;/summary&gt; 
 &lt;p&gt;Build from source using Cargo:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo install --locked --git https://github.com/j178/prek
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GitHub Releases&lt;/summary&gt; 
 &lt;p&gt;prek release artifacts can be downloaded directly from the &lt;a href="https://github.com/j178/prek/releases"&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;If installed via the standalone installer, prek can update itself to the latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;prek self update
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;This project is heavily inspired by the original &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; tool, and it wouldn't be possible without the hard work of the maintainers and contributors of that project.&lt;/p&gt; 
&lt;p&gt;And a special thanks to the &lt;a href="https://github.com/astral-sh"&gt;Astral&lt;/a&gt; team for their remarkable projects, particularly &lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt;, from which I've learned a lot on how to write efficient and idiomatic Rust code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BurntSushi/ripgrep</title>
      <link>https://github.com/BurntSushi/ripgrep</link>
      <description>&lt;p&gt;ripgrep recursively searches directories for a regex pattern while respecting your gitignore&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ripgrep (rg)&lt;/h2&gt; 
&lt;p&gt;ripgrep is a line-oriented search tool that recursively searches the current directory for a regex pattern. By default, ripgrep will respect gitignore rules and automatically skip hidden files/directories and binary files. (To disable all automatic filtering by default, use &lt;code&gt;rg -uuu&lt;/code&gt;.) ripgrep has first class support on Windows, macOS and Linux, with binary downloads available for &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;every release&lt;/a&gt;. ripgrep is similar to other popular search tools like The Silver Searcher, ack and grep.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/actions"&gt;&lt;img src="https://github.com/BurntSushi/ripgrep/workflows/ci/badge.svg?sanitize=true" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/ripgrep"&gt;&lt;img src="https://img.shields.io/crates/v/ripgrep.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://repology.org/project/ripgrep/badges"&gt;&lt;img src="https://repology.org/badge/tiny-repos/ripgrep.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Dual-licensed under MIT or the &lt;a href="https://unlicense.org"&gt;UNLICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CHANGELOG&lt;/h3&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt; for a release history.&lt;/p&gt; 
&lt;h3&gt;Documentation quick links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md"&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/regex/1/regex/#syntax"&gt;Regex syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;Configuration files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#complete"&gt;Shell completions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#building"&gt;Building&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#translations"&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Screenshot of search results&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://burntsushi.net/stuff/ripgrep1.png"&gt;&lt;img src="https://burntsushi.net/stuff/ripgrep1.png" alt="A screenshot of a sample search with ripgrep" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Quick examples comparing tools&lt;/h3&gt; 
&lt;p&gt;This example searches the entire &lt;a href="https://github.com/BurntSushi/linux"&gt;Linux kernel source tree&lt;/a&gt; (after running &lt;code&gt;make defconfig &amp;amp;&amp;amp; make -j8&lt;/code&gt;) for &lt;code&gt;[A-Z]+_SUSPEND&lt;/code&gt;, where all matches must be words. Timings were collected on a system with an Intel i9-12900K 5.2 GHz.&lt;/p&gt; 
&lt;p&gt;Please remember that a single benchmark is never enough! See my &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;blog post on ripgrep&lt;/a&gt; for a very detailed comparison with more benchmarks and analysis.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.082s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/p-ranav/hypergrep"&gt;hypergrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hgrep -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.167s (2.04x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;git grep -P -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.273s (3.34x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;The Silver Searcher&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ag -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;534&lt;/td&gt; 
   &lt;td&gt;0.443s (5.43x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r --ignore-files --no-hidden -I -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.639s (7.82x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.727s (8.91x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html"&gt;git grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 git grep -E -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;2.670s (32.70x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/beyondgrep/ack3"&gt;ack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ack -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;2677&lt;/td&gt; 
   &lt;td&gt;2.935s (35.94x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Here's another benchmark on the same corpus as above that disregards gitignore files and searches with a whitelist instead. The corpus is the same as in the previous benchmark, and the flags passed to each command ensure that they are doing equivalent work:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -uuu -tc -n -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.063s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.607s (9.62x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grep -E -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.674s (10.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Now we'll move to searching on single large file. Here is a straight-up comparison between ripgrep, ugrep and GNU grep on a file cached in memory (~13GB, &lt;a href="http://opus.nlpl.eu/download.php?f=OpenSubtitles/v2018/mono/OpenSubtitles.raw.en.gz"&gt;&lt;code&gt;OpenSubtitles.raw.en.gz&lt;/code&gt;&lt;/a&gt;, decompressed):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.042s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;1.339s (1.28x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 egrep -w 'Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;6.577s (6.31x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;In the above benchmark, passing the &lt;code&gt;-n&lt;/code&gt; flag (for showing line numbers) increases the times to &lt;code&gt;1.664s&lt;/code&gt; for ripgrep and &lt;code&gt;9.484s&lt;/code&gt; for GNU grep. ugrep times are unaffected by the presence or absence of &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Beware of performance cliffs though:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.053s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;6.234s (5.92x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w '[A-Z]\w+ Sherlock [A-Z]\w+'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;28.973s (27.51x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;And performance can drop precipitously across the board when searching big files for patterns without any opportunities for literal optimizations:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;15.569s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;21.857s (1.40x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;32.409s (2.08x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E '[A-Za-z]{30}'&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6795&lt;/td&gt; 
   &lt;td&gt;8m30s (32.74x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Finally, high match counts also tend to both tank performance and smooth out the differences between tools (because performance is dominated by how quickly one can handle a match and not the algorithm used to detect the match, generally speaking):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;6.948s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Genivia/ugrep"&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;11.721s (1.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/grep/"&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;15.217s (2.19x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Why should I use ripgrep?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;It can replace many use cases served by other search tools because it contains most of their features and is generally faster. (See &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#posix4ever"&gt;the FAQ&lt;/a&gt; for more details on whether ripgrep can truly replace grep.)&lt;/li&gt; 
 &lt;li&gt;Like other tools specialized to code search, ripgrep defaults to &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#recursive-search"&gt;recursive search&lt;/a&gt; and does &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#automatic-filtering"&gt;automatic filtering&lt;/a&gt;. Namely, ripgrep won't search files ignored by your &lt;code&gt;.gitignore&lt;/code&gt;/&lt;code&gt;.ignore&lt;/code&gt;/&lt;code&gt;.rgignore&lt;/code&gt; files, it won't search hidden files and it won't search binary files. Automatic filtering can be disabled with &lt;code&gt;rg -uuu&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;ripgrep can &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#manual-filtering-file-types"&gt;search specific types of files&lt;/a&gt;. For example, &lt;code&gt;rg -tpy foo&lt;/code&gt; limits your search to Python files and &lt;code&gt;rg -Tjs foo&lt;/code&gt; excludes JavaScript files from your search. ripgrep can be taught about new file types with custom matching rules.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports many features found in &lt;code&gt;grep&lt;/code&gt;, such as showing the context of search results, searching multiple patterns, highlighting matches with color and full Unicode support. Unlike GNU grep, ripgrep stays fast while supporting Unicode (which is always on).&lt;/li&gt; 
 &lt;li&gt;ripgrep has optional support for switching its regex engine to use PCRE2. Among other things, this makes it possible to use look-around and backreferences in your patterns, which are not supported in ripgrep's default regex engine. PCRE2 support can be enabled with &lt;code&gt;-P/--pcre2&lt;/code&gt; (use PCRE2 always) or &lt;code&gt;--auto-hybrid-regex&lt;/code&gt; (use PCRE2 only if needed). An alternative syntax is provided via the &lt;code&gt;--engine (default|pcre2|auto)&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;ripgrep has &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#replacements"&gt;rudimentary support for replacements&lt;/a&gt;, which permit rewriting output based on what was matched.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#file-encoding"&gt;searching files in text encodings&lt;/a&gt; other than UTF-8, such as UTF-16, latin-1, GBK, EUC-JP, Shift_JIS and more. (Some support for automatically detecting UTF-16 is provided. Other text encodings must be specifically specified with the &lt;code&gt;-E/--encoding&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;ripgrep supports searching files compressed in a common format (brotli, bzip2, gzip, lz4, lzma, xz, or zstandard) with the &lt;code&gt;-z/--search-zip&lt;/code&gt; flag.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#preprocessor"&gt;arbitrary input preprocessing filters&lt;/a&gt; which could be PDF text extraction, less supported decompression, decrypting, automatic encoding detection and so on.&lt;/li&gt; 
 &lt;li&gt;ripgrep can be configured via a &lt;a href="https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file"&gt;configuration file&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In other words, use ripgrep if you like speed, filtering by default, fewer bugs and Unicode support.&lt;/p&gt; 
&lt;h3&gt;Why shouldn't I use ripgrep?&lt;/h3&gt; 
&lt;p&gt;Despite initially not wanting to add every feature under the sun to ripgrep, over time, ripgrep has grown support for most features found in other file searching tools. This includes searching for results spanning across multiple lines, and opt-in support for PCRE2, which provides look-around and backreference support.&lt;/p&gt; 
&lt;p&gt;At this point, the primary reasons not to use ripgrep probably consist of one or more of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need a portable and ubiquitous tool. While ripgrep works on Windows, macOS and Linux, it is not ubiquitous and it does not conform to any standard such as POSIX. The best tool for this job is good old grep.&lt;/li&gt; 
 &lt;li&gt;There still exists some other feature (or bug) not listed in this README that you rely on that's in another tool that isn't in ripgrep.&lt;/li&gt; 
 &lt;li&gt;There is a performance edge case where ripgrep doesn't do well where another tool does do well. (Please file a bug report!)&lt;/li&gt; 
 &lt;li&gt;ripgrep isn't possible to install on your machine or isn't available for your platform. (Please file a bug report!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Is it really faster than everything else?&lt;/h3&gt; 
&lt;p&gt;Generally, yes. A large number of benchmarks with detailed analysis for each is &lt;a href="https://blog.burntsushi.net/ripgrep/"&gt;available on my blog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Summarizing, ripgrep is fast because:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is built on top of &lt;a href="https://github.com/rust-lang/regex"&gt;Rust's regex engine&lt;/a&gt;. Rust's regex engine uses finite automata, SIMD and aggressive literal optimizations to make searching very fast. (PCRE2 support can be opted into with the &lt;code&gt;-P/--pcre2&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;Rust's regex library maintains performance with full Unicode support by building UTF-8 decoding directly into its deterministic finite automaton engine.&lt;/li&gt; 
 &lt;li&gt;It supports searching with either memory maps or by searching incrementally with an intermediate buffer. The former is better for single files and the latter is better for large directories. ripgrep chooses the best searching strategy for you automatically.&lt;/li&gt; 
 &lt;li&gt;Applies your ignore patterns in &lt;code&gt;.gitignore&lt;/code&gt; files using a &lt;a href="https://docs.rs/regex/1/regex/struct.RegexSet.html"&gt;&lt;code&gt;RegexSet&lt;/code&gt;&lt;/a&gt;. That means a single file path can be matched against multiple glob patterns simultaneously.&lt;/li&gt; 
 &lt;li&gt;It uses a lock-free parallel recursive directory iterator, courtesy of &lt;a href="https://docs.rs/crossbeam"&gt;&lt;code&gt;crossbeam&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.rs/ignore"&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature comparison&lt;/h3&gt; 
&lt;p&gt;Andy Lester, author of &lt;a href="https://beyondgrep.com/"&gt;ack&lt;/a&gt;, has published an excellent table comparing the features of ack, ag, git-grep, GNU grep and ripgrep: &lt;a href="https://beyondgrep.com/feature-comparison/"&gt;https://beyondgrep.com/feature-comparison/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Note that ripgrep has grown a few significant new features recently that are not yet present in Andy's table. This includes, but is not limited to, configuration files, passthru, support for searching compressed files, multiline search and opt-in fancy regex support via PCRE2.&lt;/p&gt; 
&lt;h3&gt;Playground&lt;/h3&gt; 
&lt;p&gt;If you'd like to try ripgrep before installing, there's an unofficial &lt;a href="https://codapi.org/ripgrep/"&gt;playground&lt;/a&gt; and an &lt;a href="https://codapi.org/try/ripgrep/"&gt;interactive tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have any questions about these, please open an issue in the &lt;a href="https://github.com/nalgeon/tryxinyminutes"&gt;tutorial repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;The binary name for ripgrep is &lt;code&gt;rg&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;Archives of precompiled binaries for ripgrep are available for Windows, macOS and Linux.&lt;/a&gt;&lt;/strong&gt; Linux and Windows binaries are static executables. Users of platforms not explicitly mentioned below are advised to download one of these archives.&lt;/p&gt; 
&lt;p&gt;If you're a &lt;strong&gt;macOS Homebrew&lt;/strong&gt; or a &lt;strong&gt;Linuxbrew&lt;/strong&gt; user, then you can install ripgrep from homebrew-core:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;MacPorts&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.macports.org/ports.php?by=name&amp;amp;substr=ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo port install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Chocolatey&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://chocolatey.org/packages/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ choco install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Scoop&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/ripgrep.json"&gt;official bucket&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Windows Winget&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/b/BurntSushi/ripgrep"&gt;winget-pkgs&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ winget install BurntSushi.ripgrep.MSVC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Arch Linux&lt;/strong&gt; user, then you can install ripgrep from the official repos:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -S ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Gentoo&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.gentoo.org/packages/sys-apps/ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo emerge sys-apps/ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Fedora&lt;/strong&gt; user, you can install ripgrep from official repositories.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;openSUSE&lt;/strong&gt; user, ripgrep is included in &lt;strong&gt;openSUSE Tumbleweed&lt;/strong&gt; and &lt;strong&gt;openSUSE Leap&lt;/strong&gt; since 15.1.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo zypper install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;RHEL/CentOS 7/8&lt;/strong&gt; user, you can install ripgrep from &lt;a href="https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/"&gt;copr&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo yum install -y yum-utils
$ sudo yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo
$ sudo yum install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Nix&lt;/strong&gt; user, you can install ripgrep from &lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/text/ripgrep/default.nix"&gt;nixpkgs&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ nix-env --install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Flox&lt;/strong&gt; user, you can install ripgrep as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ flox install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Guix&lt;/strong&gt; user, you can install ripgrep from the official package collection:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ guix install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Debian&lt;/strong&gt; user (or a user of a Debian derivative like &lt;strong&gt;Ubuntu&lt;/strong&gt;), then ripgrep can be installed using a binary &lt;code&gt;.deb&lt;/code&gt; file provided in each &lt;a href="https://github.com/BurntSushi/ripgrep/releases"&gt;ripgrep release&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ curl -LO https://github.com/BurntSushi/ripgrep/releases/download/14.1.0/ripgrep_14.1.1-1_amd64.deb
$ sudo dpkg -i ripgrep_14.1.1-1_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you run Debian stable, ripgrep is &lt;a href="https://tracker.debian.org/pkg/rust-ripgrep"&gt;officially maintained by Debian&lt;/a&gt;, although its version may be older than the &lt;code&gt;deb&lt;/code&gt; package available in the previous step.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;Ubuntu Cosmic (18.10)&lt;/strong&gt; (or newer) user, ripgrep is &lt;a href="https://launchpad.net/ubuntu/+source/rust-ripgrep"&gt;available&lt;/a&gt; using the same packaging as Debian:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(N.B. Various snaps for ripgrep on Ubuntu are also available, but none of them seem to work right and generate a number of very strange bug reports that I don't know how to fix and don't have the time to fix. Therefore, it is no longer a recommended installation option.)&lt;/p&gt; 
&lt;p&gt;If you're an &lt;strong&gt;ALT&lt;/strong&gt; user, you can install ripgrep from the &lt;a href="https://packages.altlinux.org/en/search?name=ripgrep"&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;FreeBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://www.freshports.org/textproc/ripgrep/"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkg install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're an &lt;strong&gt;OpenBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://openports.se/textproc/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ doas pkg_add ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;NetBSD&lt;/strong&gt; user, then you can install ripgrep from &lt;a href="https://pkgsrc.se/textproc/ripgrep"&gt;pkgsrc&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgin install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_64&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://github.com/haikuports/haikuports/tree/master/sys-apps/ripgrep"&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Haiku x86_gcc2&lt;/strong&gt; user, then you can install ripgrep from the same port as Haiku x86_64 using the x86 secondary architecture build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep_x86
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Void Linux&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href="https://voidlinux.org/packages/?arch=x86_64&amp;amp;q=ripgrep"&gt;official repository&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo xbps-install -Syv ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're a &lt;strong&gt;Rust programmer&lt;/strong&gt;, ripgrep can be installed with &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Note that the minimum supported version of Rust for ripgrep is &lt;strong&gt;1.88.0&lt;/strong&gt;, although ripgrep may work with older versions.&lt;/li&gt; 
 &lt;li&gt;Note that the binary may be bigger than expected because it contains debug symbols. This is intentional. To remove debug symbols and therefore reduce the file size, run &lt;code&gt;strip&lt;/code&gt; on the binary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, one can use &lt;a href="https://github.com/cargo-bins/cargo-binstall"&gt;&lt;code&gt;cargo binstall&lt;/code&gt;&lt;/a&gt; to install a ripgrep binary directly from GitHub:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo binstall ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;ripgrep is written in Rust, so you'll need to grab a &lt;a href="https://www.rust-lang.org/"&gt;Rust installation&lt;/a&gt; in order to compile it. ripgrep compiles with Rust 1.88.0 (stable) or newer. In general, ripgrep tracks the latest stable release of the Rust compiler.&lt;/p&gt; 
&lt;p&gt;To build ripgrep:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/BurntSushi/ripgrep
$ cd ripgrep
$ cargo build --release
$ ./target/release/rg --version
0.1.3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the past, ripgrep supported a &lt;code&gt;simd-accel&lt;/code&gt; Cargo feature when using a Rust nightly compiler. This only benefited UTF-16 transcoding. Since it required unstable features, this build mode was prone to breakage. Because of that, support for it has been removed. If you want SIMD optimizations for UTF-16 transcoding, then you'll have to petition the &lt;a href="https://github.com/hsivonen/encoding_rs"&gt;&lt;code&gt;encoding_rs&lt;/code&gt;&lt;/a&gt; project to use stable APIs.&lt;/p&gt; 
&lt;p&gt;Finally, optional PCRE2 support can be built with ripgrep by enabling the &lt;code&gt;pcre2&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo build --release --features 'pcre2'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enabling the PCRE2 feature works with a stable Rust compiler and will attempt to automatically find and link with your system's PCRE2 library via &lt;code&gt;pkg-config&lt;/code&gt;. If one doesn't exist, then ripgrep will build PCRE2 from source using your system's C compiler and then statically link it into the final executable. Static linking can be forced even when there is an available PCRE2 system library by either building ripgrep with the MUSL target or by setting &lt;code&gt;PCRE2_SYS_STATIC=1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;ripgrep can be built with the MUSL target on Linux by first installing the MUSL library on your system (consult your friendly neighborhood package manager). Then you just need to add MUSL support to your Rust toolchain and rebuild ripgrep, which yields a fully static executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ rustup target add x86_64-unknown-linux-musl
$ cargo build --release --target x86_64-unknown-linux-musl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Applying the &lt;code&gt;--features&lt;/code&gt; flag from above works as expected. If you want to build a static executable with MUSL and with PCRE2, then you will need to have &lt;code&gt;musl-gcc&lt;/code&gt; installed, which might be in a separate package from the actual MUSL library, depending on your Linux distribution.&lt;/p&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;p&gt;ripgrep is relatively well-tested, including both unit tests and integration tests. To run the full test suite, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo test --all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;from the repository root.&lt;/p&gt; 
&lt;h3&gt;Related tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dandavison/delta"&gt;delta&lt;/a&gt; is a syntax highlighting pager that supports the &lt;code&gt;rg --json&lt;/code&gt; output format. So all you need to do to make it work is &lt;code&gt;rg --json pattern | delta&lt;/code&gt;. See &lt;a href="https://dandavison.github.io/delta/grep.html"&gt;delta's manual section on grep&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Vulnerability reporting&lt;/h3&gt; 
&lt;p&gt;For reporting a security vulnerability, please &lt;a href="https://blog.burntsushi.net/about/"&gt;contact Andrew Gallant&lt;/a&gt;. The contact page has my email address and PGP public key if you wish to send an encrypted message.&lt;/p&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;p&gt;The following is a list of known translations of ripgrep's documentation. These are unofficially maintained and may not be up to date.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chinanf-boy/ripgrep-zh#%E6%9B%B4%E6%96%B0-"&gt;Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/UltiRequiem/traducciones/tree/master/ripgrep"&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>pola-rs/polars</title>
      <link>https://github.com/pola-rs/polars</link>
      <description>&lt;p&gt;Extremely fast Query Engine for DataFrames, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://pola.rs"&gt; &lt;img src="https://raw.githubusercontent.com/pola-rs/polars-static/master/banner/polars_github_banner.svg?sanitize=true" alt="Polars logo" /&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://crates.io/crates/polars"&gt; &lt;img src="https://img.shields.io/crates/v/polars.svg?sanitize=true" alt="crates.io Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://pypi.org/project/polars/"&gt; &lt;img src="https://img.shields.io/pypi/v/polars.svg?sanitize=true" alt="PyPi Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://www.npmjs.com/package/nodejs-polars"&gt; &lt;img src="https://img.shields.io/npm/v/nodejs-polars.svg?sanitize=true" alt="NPM Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://community.r-multiverse.org/polars"&gt; &lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fcommunity.r-multiverse.org%2Fapi%2Fpackages%2Fpolars&amp;amp;query=%24.Version&amp;amp;label=r-multiverse" alt="R-multiverse Latest Release" /&gt; &lt;/a&gt; 
 &lt;a href="https://doi.org/10.5281/zenodo.7697217"&gt; &lt;img src="https://zenodo.org/badge/DOI/10.5281/zenodo.7697217.svg?sanitize=true" alt="DOI Latest Release" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;b&gt;Documentation&lt;/b&gt;: &lt;a href="https://docs.pola.rs/api/python/stable/reference/index.html"&gt;Python&lt;/a&gt; - &lt;a href="https://docs.rs/polars/latest/polars/"&gt;Rust&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/nodejs-polars/index.html"&gt;Node.js&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/r-polars/index.html"&gt;R&lt;/a&gt; | &lt;b&gt;StackOverflow&lt;/b&gt;: &lt;a href="https://stackoverflow.com/questions/tagged/python-polars"&gt;Python&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/rust-polars"&gt;Rust&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/nodejs-polars"&gt;Node.js&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/r-polars"&gt;R&lt;/a&gt; | &lt;a href="https://docs.pola.rs/"&gt;User guide&lt;/a&gt; | &lt;a href="https://discord.gg/4UfP5cfBE7"&gt;Discord&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Polars: Extremely fast Query Engine for DataFrames, written in Rust&lt;/h2&gt; 
&lt;p&gt;Polars is an analytical query engine written for DataFrames. It is designed to be fast, easy to use and expressive. Key features are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lazy | Eager execution&lt;/li&gt; 
 &lt;li&gt;Streaming (larger-than-RAM datasets)&lt;/li&gt; 
 &lt;li&gt;Query optimization&lt;/li&gt; 
 &lt;li&gt;Multi-threaded&lt;/li&gt; 
 &lt;li&gt;Written in Rust&lt;/li&gt; 
 &lt;li&gt;SIMD&lt;/li&gt; 
 &lt;li&gt;Powerful expression API&lt;/li&gt; 
 &lt;li&gt;Front end in Python | Rust | NodeJS | R | SQL&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://arrow.apache.org/docs/format/Columnar.html"&gt;Apache Arrow Columnar Format&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To learn more, read the &lt;a href="https://docs.pola.rs/"&gt;user guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Performance üöÄüöÄ&lt;/h2&gt; 
&lt;h3&gt;Blazingly fast&lt;/h3&gt; 
&lt;p&gt;Polars is very fast. In fact, it is one of the best performing solutions available. See the &lt;a href="https://www.pola.rs/benchmarks.html"&gt;PDS-H benchmarks&lt;/a&gt; results.&lt;/p&gt; 
&lt;h3&gt;Lightweight&lt;/h3&gt; 
&lt;p&gt;Polars is also very lightweight. It comes with zero required dependencies, and this shows in the import times:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;polars: 70ms&lt;/li&gt; 
 &lt;li&gt;numpy: 104ms&lt;/li&gt; 
 &lt;li&gt;pandas: 520ms&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Handles larger-than-RAM data&lt;/h3&gt; 
&lt;p&gt;If you have data that does not fit into memory, Polars' query engine is able to process your query (or parts of your query) in a streaming fashion. This drastically reduces memory requirements, so you might be able to process your 250GB dataset on your laptop. Collect with &lt;code&gt;collect(engine='streaming')&lt;/code&gt; to run the query streaming.&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;p&gt;Install the latest Polars version with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install polars
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.pola.rs/user-guide/installation/#feature-flags"&gt;User Guide&lt;/a&gt; for more details on optional dependencies&lt;/p&gt; 
&lt;p&gt;To see the current Polars version and a full list of its optional dependencies, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;pl.show_versions()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Want to contribute? Read our &lt;a href="https://docs.pola.rs/development/contributing/"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Managed/Distributed Polars&lt;/h2&gt; 
&lt;p&gt;Do you want a managed solution or scale out to distributed clusters? Consider our &lt;a href="https://cloud.pola.rs/"&gt;offering&lt;/a&gt; and help the project!&lt;/p&gt; 
&lt;h2&gt;Python: compile Polars from source&lt;/h2&gt; 
&lt;p&gt;If you want a bleeding edge release or maximal performance you should compile Polars from source.&lt;/p&gt; 
&lt;p&gt;This can be done by going through the following steps in sequence:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the latest &lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://maturin.rs/"&gt;maturin&lt;/a&gt;: &lt;code&gt;pip install maturin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cd py-polars&lt;/code&gt; and choose one of the following: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;, slow binary with debug assertions and symbols, fast compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-release&lt;/code&gt;, fast binary without debug assertions, minimal debug symbols, long compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-nodebug-release&lt;/code&gt;, same as build-release but without any debug symbols, slightly faster to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-debug-release&lt;/code&gt;, same as build-release but with full debug symbols, slightly slower to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-dist-release&lt;/code&gt;, fastest binary, extreme compile times&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;By default the binary is compiled with optimizations turned on for a modern CPU. Specify &lt;code&gt;LTS_CPU=1&lt;/code&gt; with the command if your CPU is older and does not support e.g. AVX2.&lt;/p&gt; 
&lt;p&gt;Note that the Rust crate implementing the Python bindings is called &lt;code&gt;py-polars&lt;/code&gt; to distinguish from the wrapped Rust crate &lt;code&gt;polars&lt;/code&gt; itself. However, both the Python package and the Python module are named &lt;code&gt;polars&lt;/code&gt;, so you can &lt;code&gt;pip install polars&lt;/code&gt; and &lt;code&gt;import polars&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Using custom Rust functions in Python&lt;/h2&gt; 
&lt;p&gt;Extending Polars with UDFs compiled in Rust is easy. We expose PyO3 extensions for &lt;code&gt;DataFrame&lt;/code&gt; and &lt;code&gt;Series&lt;/code&gt; data structures. See more in &lt;a href="https://github.com/pola-rs/polars/tree/main/pyo3-polars"&gt;https://github.com/pola-rs/polars/tree/main/pyo3-polars&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Going big...&lt;/h2&gt; 
&lt;p&gt;Do you expect more than 2^32 (~4.2 billion) rows? Compile Polars with the &lt;code&gt;bigidx&lt;/code&gt; feature flag or, for Python users, install &lt;code&gt;pip install polars-u64-idx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Don't use this unless you hit the row boundary as the default build of Polars is faster and consumes less memory.&lt;/p&gt; 
&lt;h2&gt;Legacy&lt;/h2&gt; 
&lt;p&gt;Do you want Polars to run on an old CPU (e.g. dating from before 2011), or on an &lt;code&gt;x86-64&lt;/code&gt; build of Python on Apple Silicon under Rosetta? Install &lt;code&gt;pip install polars-lts-cpu&lt;/code&gt;. This version of Polars is compiled without &lt;a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions"&gt;AVX&lt;/a&gt; target features.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jdx/mise</title>
      <link>https://github.com/jdx/mise</link>
      <description>&lt;p&gt;dev tools, env vars, task runner&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;&lt;a href="https://mise.jdx.dev"&gt; &lt;img src="https://github.com/jdx/mise/assets/216188/27a8ea18-9383-4d86-a445-305b9a6248c1" alt="mise-logo" width="400" /&gt;&lt;br /&gt; mise-en-place &lt;/a&gt;&lt;/h1&gt; 
 &lt;!-- &lt;a href="https://mise.jdx.dev"&gt;&lt;picture&gt; --&gt; 
 &lt;!--   &lt;source media="(prefers-color-scheme: dark)" width="617" srcset="./docs/logo-dark@2x.png"&gt; --&gt; 
 &lt;!--   &lt;img alt="mise logo" width="617" src="./docs/logo-light@2x.png"&gt; --&gt; 
 &lt;!-- &lt;/picture&gt;&lt;/a&gt; --&gt; 
 &lt;a href="https://crates.io/crates/mise"&gt;&lt;img alt="Crates.io" src="https://img.shields.io/crates/v/mise?style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/raw/main/LICENSE"&gt;&lt;img alt="GitHub" src="https://img.shields.io/github/license/jdx/mise?color=%2344CC11&amp;amp;style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/actions/workflows/test.yml"&gt;&lt;img alt="GitHub Workflow Status" src="https://img.shields.io/github/actions/workflow/status/jdx/mise/test.yml?style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://discord.gg/mABnUDvP57"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/1066429325269794907?color=%23738ADB&amp;amp;style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;p&gt;&lt;em&gt;The front-end to your dev env.&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is it?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Like &lt;a href="https://asdf-vm.com"&gt;asdf&lt;/a&gt; (or &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; or &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; but for any language) it manages &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; like node, python, cmake, terraform, and &lt;a href="https://mise.jdx.dev/registry.html"&gt;hundreds more&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://github.com/direnv/direnv"&gt;direnv&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/environments/"&gt;environment variables&lt;/a&gt; for different project directories.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://www.gnu.org/software/make/manual/make.html"&gt;make&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; used to build and test projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;The following demo shows how to install and use &lt;code&gt;mise&lt;/code&gt; to manage multiple versions of &lt;code&gt;node&lt;/code&gt; on the same system. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; 
&lt;p&gt;It also shows that you can use &lt;code&gt;mise&lt;/code&gt; to install and many other tools such as &lt;code&gt;jq&lt;/code&gt;, &lt;code&gt;terraform&lt;/code&gt;, or &lt;code&gt;go&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://mise.jdx.dev/demo.html"&gt;&lt;img src="https://raw.githubusercontent.com/jdx/mise/main/docs/tapes/demo.gif" alt="demo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/demo.html"&gt;demo transcript&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Install mise&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/getting-started.html"&gt;Getting started&lt;/a&gt; for more options.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ curl https://mise.run | sh
$ ~/.local/bin/mise --version
2025.9.8 macos-arm64 (a1b2d3e 2025-09-10)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hook mise into your shell (pick the right one for your shell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;# note this assumes mise is located at ~/.local/bin/mise
# which is what https://mise.run does by default
echo 'eval "$(~/.local/bin/mise activate bash)"' &amp;gt;&amp;gt; ~/.bashrc
echo 'eval "$(~/.local/bin/mise activate zsh)"' &amp;gt;&amp;gt; ~/.zshrc
echo '~/.local/bin/mise activate fish | source' &amp;gt;&amp;gt; ~/.config/fish/config.fish
echo '~/.local/bin/mise activate pwsh | Out-String | Invoke-Expression' &amp;gt;&amp;gt; ~/.config/powershell/Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Execute commands with specific tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise exec node@22 -- node -v
mise node@22.x.x ‚úì installed
v22.x.x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise use --global node@22 go@1
$ node -v
v22.x.x
$ go version
go version go1.x.x macos/arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h3&gt;Manage environment variables&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[env]
SOME_VAR = "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise set SOME_VAR=bar
$ echo $SOME_VAR
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;mise&lt;/code&gt; can also &lt;a href="https://mise.jdx.dev/environments/#env-directives"&gt;load &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Run tasks&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tasks.build]
description = "build the project"
run = "echo building..."
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise run build
building...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Example mise project&lt;/h3&gt; 
&lt;p&gt;Here is a combined example to give you an idea of how you can use mise to manage your a project's tools, environment, and tasks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tools]
terraform = "1"
aws-cli = "2"

[env]
TF_WORKSPACE = "development"
AWS_REGION = "us-west-2"
AWS_PROFILE = "dev"

[tasks.plan]
description = "Run terraform plan with configured workspace"
run = """
terraform init
terraform workspace select $TF_WORKSPACE
terraform plan
"""

[tasks.validate]
description = "Validate AWS credentials and terraform config"
run = """
aws sts get-caller-identity
terraform validate
"""

[tasks.deploy]
description = "Deploy infrastructure after validation"
depends = ["validate", "plan"]
run = "terraform apply -auto-approve"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;mise install # install tools specified in mise.toml
mise run deploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Find more examples in the &lt;a href="https://mise.jdx.dev/mise-cookbook/"&gt;mise cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Full Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev"&gt;mise.jdx.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;p&gt;We're grateful for Cloudflare's support through &lt;a href="https://www.cloudflare.com/lp/project-alexandria/"&gt;Project Alexandria&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/jdx/mise/graphs/contributors"&gt;&lt;img src="https://contrib.rocks/image?repo=jdx/mise" alt="Contributors" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rustfs/rustfs</title>
      <link>https://github.com/rustfs/rustfs</link>
      <description>&lt;p&gt;üöÄ High-performance distributed object storage for MinIO alternative.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://rustfs.com"&gt;&lt;img src="https://rustfs.com/images/rustfs-github.png" alt="RustFS" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt;RustFS is a high-performance distributed object storage software built using Rust&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/rustfs/rustfs/actions/workflows/ci.yml"&gt;&lt;img alt="CI" src="https://github.com/rustfs/rustfs/actions/workflows/ci.yml/badge.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rustfs/rustfs/actions/workflows/docker.yml"&gt;&lt;img alt="Build and Push Docker Images" src="https://github.com/rustfs/rustfs/actions/workflows/docker.yml/badge.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;img alt="GitHub commit activity" src="https://img.shields.io/github/commit-activity/m/rustfs/rustfs" /&gt; &lt;img alt="Github Last Commit" src="https://img.shields.io/github/last-commit/rustfs/rustfs" /&gt; &lt;a href="https://hellogithub.com/repository/rustfs/rustfs" target="_blank"&gt;&lt;img src="https://abroad.hellogithub.com/v1/widgets/recommend.svg?rid=b95bcb72bdc340b68f16fdf6790b7d5b&amp;amp;claim_uid=MsbvjYeLDKAH457&amp;amp;theme=small" alt="FeaturedÔΩúHelloGitHub" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://docs.rustfs.com/introduction.html"&gt;Getting Started&lt;/a&gt; ¬∑ &lt;a href="https://docs.rustfs.com/"&gt;Docs&lt;/a&gt; ¬∑ &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;Bug reports&lt;/a&gt; ¬∑ &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;Discussions&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; English | &lt;a href="https://github.com/rustfs/rustfs/raw/main/README_ZH.md"&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; | 
 &lt;!-- Keep these links. Translations will automatically update with the README. --&gt; &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=de"&gt;Deutsch&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=es"&gt;Espa√±ol&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=fr"&gt;fran√ßais&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ja"&gt;Êó•Êú¨Ë™û&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ko"&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=pt"&gt;Portugu√™s&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ru"&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;RustFS is a high-performance distributed object storage software built using Rust, one of the most popular languages worldwide. Along with MinIO, it shares a range of advantages such as simplicity, S3 compatibility, open-source nature, support for data lakes, AI, and big data. Furthermore, it has a better and more user-friendly open-source license in comparison to other storage systems, being constructed under the Apache license. As Rust serves as its foundation, RustFS provides faster speed and safer distributed features for high-performance object storage.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ö†Ô∏è &lt;strong&gt;RustFS is under rapid development. Do NOT use in production environments!&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: Built with Rust, ensuring speed and efficiency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Distributed Architecture&lt;/strong&gt;: Scalable and fault-tolerant design for large-scale deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;S3 Compatibility&lt;/strong&gt;: Seamless integration with existing S3-compatible applications.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Lake Support&lt;/strong&gt;: Optimized for big data and AI workloads.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open Source&lt;/strong&gt;: Licensed under Apache 2.0, encouraging community contributions and transparency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User-Friendly&lt;/strong&gt;: Designed with simplicity in mind, making it easy to deploy and manage.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RustFS vs MinIO&lt;/h2&gt; 
&lt;p&gt;Stress test server parameters&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;parameter&lt;/th&gt; 
   &lt;th&gt;Remark&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CPU&lt;/td&gt; 
   &lt;td&gt;2 Core&lt;/td&gt; 
   &lt;td&gt;Intel Xeon(Sapphire Rapids) Platinum 8475B , 2.7/3.2 GHz&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Memory&lt;/td&gt; 
   &lt;td&gt;4GB&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Network&lt;/td&gt; 
   &lt;td&gt;15Gbp&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Driver&lt;/td&gt; 
   &lt;td&gt;40GB x 4&lt;/td&gt; 
   &lt;td&gt;IOPS 3800 / Driver&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/2e4979b5-260c-4f2c-ac12-c87fd558072a"&gt;https://github.com/user-attachments/assets/2e4979b5-260c-4f2c-ac12-c87fd558072a&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;RustFS vs Other object storage&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;RustFS&lt;/th&gt; 
   &lt;th&gt;Other object storage&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Powerful Console&lt;/td&gt; 
   &lt;td&gt;Simple and useless Console&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Developed based on Rust language, memory is safer&lt;/td&gt; 
   &lt;td&gt;Developed in Go or C, with potential issues like memory GC/leaks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Does not report logs to third-party countries&lt;/td&gt; 
   &lt;td&gt;Reporting logs to other third countries may violate national security laws&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Licensed under Apache, more business-friendly&lt;/td&gt; 
   &lt;td&gt;AGPL V3 License and other License, polluted open source and License traps, infringement of intellectual property rights&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Comprehensive S3 support, works with domestic and international cloud providers&lt;/td&gt; 
   &lt;td&gt;Full support for S3, but no local cloud vendor support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rust-based development, strong support for secure and innovative devices&lt;/td&gt; 
   &lt;td&gt;Poor support for edge gateways and secure innovative devices&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stable commercial prices, free community support&lt;/td&gt; 
   &lt;td&gt;High pricing, with costs up to $250,000 for 1PiB&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;No risk&lt;/td&gt; 
   &lt;td&gt;Intellectual property risks and risks of prohibited uses&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To get started with RustFS, follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;One-click installation script (Option 1)‚Äã‚Äã&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl -O  https://rustfs.com/install_rustfs.sh &amp;amp;&amp;amp; bash install_rustfs.sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Docker Quick Start (Option 2)‚Äã‚Äã&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; # create data and logs directories
 mkdir -p data logs

 # using latest alpha version
 docker run -d -p 9000:9000 -v $(pwd)/data:/data -v $(pwd)/logs:/logs rustfs/rustfs:alpha

 # Specific version
 docker run -d -p 9000:9000 -v $(pwd)/data:/data -v $(pwd)/logs:/logs rustfs/rustfs:1.0.0.alpha.45
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build from Source (Option 3) - Advanced Users&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For developers who want to build RustFS Docker images from source with multi-architecture support:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Build multi-architecture images locally
./docker-buildx.sh --build-arg RELEASE=latest

# Build and push to registry
./docker-buildx.sh --push

# Build specific version
./docker-buildx.sh --release v1.0.0 --push

# Build for custom registry
./docker-buildx.sh --registry your-registry.com --namespace yourname --push
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;docker-buildx.sh&lt;/code&gt; script supports:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Multi-architecture builds&lt;/strong&gt;: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Automatic version detection&lt;/strong&gt;: Uses git tags or commit hashes&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Registry flexibility&lt;/strong&gt;: Supports Docker Hub, GitHub Container Registry, etc.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Build optimization&lt;/strong&gt;: Includes caching and parallel builds&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can also use Make targets for convenience:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;make docker-buildx                    # Build locally
make docker-buildx-push               # Build and push
make docker-buildx-version VERSION=v1.0.0  # Build specific version
make help-docker                      # Show all Docker-related commands
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Access the Console&lt;/strong&gt;: Open your web browser and navigate to &lt;code&gt;http://localhost:9000&lt;/code&gt; to access the RustFS console, default username and password is &lt;code&gt;rustfsadmin&lt;/code&gt; .&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Bucket&lt;/strong&gt;: Use the console to create a new bucket for your objects.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Upload Objects&lt;/strong&gt;: You can upload files directly through the console or use S3-compatible APIs to interact with your RustFS instance.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For detailed documentation, including configuration options, API references, and advanced usage, please visit our &lt;a href="https://docs.rustfs.com"&gt;Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you have any questions or need assistance, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check the &lt;a href="https://github.com/rustfs/rustfs/discussions/categories/q-a"&gt;FAQ&lt;/a&gt; for common issues and solutions.&lt;/li&gt; 
 &lt;li&gt;Join our &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt; to ask questions and share your experiences.&lt;/li&gt; 
 &lt;li&gt;Open an issue on our &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;GitHub Issues&lt;/a&gt; page for bug reports or feature requests.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.rustfs.com"&gt;Documentation&lt;/a&gt; - The manual you should read&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustfs/rustfs/releases"&gt;Changelog&lt;/a&gt; - What we broke and fixed&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt; - Where the community lives&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Bugs&lt;/strong&gt;: &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Business&lt;/strong&gt;: &lt;a href="mailto:hello@rustfs.com"&gt;hello@rustfs.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jobs&lt;/strong&gt;: &lt;a href="mailto:jobs@rustfs.com"&gt;jobs@rustfs.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;General Discussion&lt;/strong&gt;: &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/rustfs/rustfs/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;RustFS is a community-driven project, and we appreciate all contributions. Check out the &lt;a href="https://github.com/rustfs/rustfs/graphs/contributors"&gt;Contributors&lt;/a&gt; page to see the amazing people who have helped make RustFS better.&lt;/p&gt; 
&lt;a href="https://github.com/rustfs/rustfs/graphs/contributors"&gt; &lt;img src="https://opencollective.com/rustfs/contributors.svg?width=890&amp;amp;limit=500&amp;amp;button=false" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;RustFS&lt;/strong&gt; is a trademark of RustFS, Inc. All other trademarks are the property of their respective owners.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Start9Labs/start-os</title>
      <link>https://github.com/Start9Labs/start-os</link>
      <description>&lt;p&gt;A graphical server OS optimized for self-hosting&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/web/projects/shared/assets/img/icon.png" alt="StartOS Logo" width="16%" /&gt; 
 &lt;h1 style="margin-top: 0;"&gt;StartOS&lt;/h1&gt; 
 &lt;a href="https://github.com/Start9Labs/start-os/releases"&gt; &lt;img alt="GitHub release (with filter)" src="https://img.shields.io/github/v/release/start9labs/start-os?logo=github" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/Start9Labs/start-os/actions/workflows/startos-iso.yaml"&gt; &lt;img src="https://github.com/Start9Labs/start-os/actions/workflows/startos-iso.yaml/badge.svg?sanitize=true" /&gt; &lt;/a&gt; 
 &lt;a href="https://heyapollo.com/product/startos"&gt; &lt;img alt="Static Badge" src="https://img.shields.io/badge/apollo-review%20%E2%AD%90%E2%AD%90%E2%AD%90%E2%AD%90%E2%AD%90%20-slateblue" /&gt; &lt;/a&gt; 
 &lt;a href="https://twitter.com/start9labs"&gt; &lt;img alt="X (formerly Twitter) Follow" src="https://img.shields.io/twitter/follow/start9labs" /&gt; &lt;/a&gt; 
 &lt;a href="https://matrix.to/#/#community:matrix.start9labs.com"&gt; &lt;img alt="Static Badge" src="https://img.shields.io/badge/community-matrix-yellow?logo=matrix" /&gt; &lt;/a&gt; 
 &lt;a href="https://t.me/start9_labs"&gt; &lt;img alt="Static Badge" src="https://img.shields.io/badge/community-telegram-blue?logo=telegram" /&gt; &lt;/a&gt; 
 &lt;a href="https://docs.start9.com"&gt; &lt;img alt="Static Badge" src="https://img.shields.io/badge/docs-orange?label=%F0%9F%91%A4%20support" /&gt; &lt;/a&gt; 
 &lt;a href="https://matrix.to/#/#community-dev:matrix.start9labs.com"&gt; &lt;img alt="Static Badge" src="https://img.shields.io/badge/developer-matrix-darkcyan?logo=matrix" /&gt; &lt;/a&gt; 
 &lt;a href="https://start9.com"&gt; &lt;img alt="Website" src="https://img.shields.io/website?up_message=online&amp;amp;down_message=offline&amp;amp;url=https%3A%2F%2Fstart9.com&amp;amp;logo=website&amp;amp;label=%F0%9F%8C%90%20website" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt; 
 &lt;h3&gt; Welcome to the era of Sovereign Computing &lt;/h3&gt; 
 &lt;p&gt; StartOS is an open source Linux distribution optimized for running a personal server. It facilitates the discovery, installation, network configuration, service configuration, data backup, dependency management, and health monitoring of self-hosted software services. &lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/assets/StartOS.png" alt="StartOS" width="85%" /&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;Running StartOS&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] StartOS is in beta. It lacks features. It doesn't always work perfectly. Start9 servers are not plug and play. Using them properly requires some effort and patience. Please do not use StartOS or purchase a server if you are unable or unwilling to follow instructions and learn new concepts.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;üí∞ Buy a Start9 server&lt;/h3&gt; 
&lt;p&gt;This is the most convenient option. Simply &lt;a href="https://store.start9.com"&gt;buy a server&lt;/a&gt; from Start9 and plug it in.&lt;/p&gt; 
&lt;h3&gt;üë∑ Build your own server&lt;/h3&gt; 
&lt;p&gt;This option is easier than you might imagine, and there are 4 reasons why you might prefer it:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;You already have hardware&lt;/li&gt; 
 &lt;li&gt;You want to save on shipping costs&lt;/li&gt; 
 &lt;li&gt;You prefer not to divulge your physical address&lt;/li&gt; 
 &lt;li&gt;You just like building things&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To pursue this option, follow one of our &lt;a href="https://start9.com/latest/diy"&gt;DIY guides&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;‚ù§Ô∏è Contributing&lt;/h2&gt; 
&lt;p&gt;There are multiple ways to contribute: work directly on StartOS, package a service for the marketplace, or help with documentation and guides. To learn more about contributing, see &lt;a href="https://start9.com/contribute/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To report security issues, please email our security team - &lt;a href="mailto:security@start9.com"&gt;security@start9.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üåé Marketplace&lt;/h2&gt; 
&lt;p&gt;There are dozens of services available for StartOS, and new ones are being added all the time. Check out the full list of available services &lt;a href="https://marketplace.start9.com/marketplace"&gt;here&lt;/a&gt;. To read more about the Marketplace ecosystem, check out this &lt;a href="https://blog.start9.com/start9-marketplace-strategy/"&gt;blog post&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;üñ•Ô∏è User Interface Screenshots&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/assets/registry.png" alt="StartOS Marketplace" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/assets/community.png" alt="StartOS Community Registry" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/assets/c-lightning.png" alt="StartOS NextCloud Service" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/assets/btcpay.png" alt="StartOS BTCPay Service" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/assets/nextcloud.png" alt="StartOS System Settings" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/assets/system.png" alt="StartOS System Settings" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/assets/welcome.png" alt="StartOS System Settings" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/Start9Labs/start-os/master/assets/logs.png" alt="StartOS System Settings" width="49%" /&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>a2x/cs2-dumper</title>
      <link>https://github.com/a2x/cs2-dumper</link>
      <description>&lt;p&gt;Counter-Strike: 2 Offset Dumper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cs2-dumper&lt;/h1&gt; 
&lt;p&gt;An external offset/interface dumper for Counter-Strike 2, with support for both Windows &amp;amp; Linux. Powered by &lt;a href="https://github.com/memflow/memflow"&gt;memflow&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The native Linux version is available in the &lt;a href="https://github.com/a2x/cs2-dumper/tree/linux"&gt;linux&lt;/a&gt; branch (currently outdated).&lt;/p&gt; 
&lt;p&gt;For a work-in-progress offline version, check out the &lt;a href="https://github.com/a2x/cs2-analyzer"&gt;cs2-analyzer&lt;/a&gt; repository or view its included web demo &lt;a href="https://a2x.github.io/cs2-analyzer"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You can download the latest release from &lt;a href="https://github.com/a2x/cs2-dumper/releases"&gt;Releases&lt;/a&gt; or compile it yourself. Note that compiling it yourself requires your Rust compiler version to be at least 1.74.0 or newer.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Ensure the game is running (Being in the main menu should suffice).&lt;/li&gt; 
 &lt;li&gt;Run the &lt;code&gt;cs2-dumper&lt;/code&gt; executable.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you run the executable without specifying an optional memflow connector name, it will automatically use the &lt;a href="https://github.com/memflow/memflow-native"&gt;memflow-native&lt;/a&gt; OS layer to read the memory of the game process. If you wish to use an existing memflow connector instead, such as &lt;strong&gt;pcileech&lt;/strong&gt; or &lt;strong&gt;kvm&lt;/strong&gt;, you can pass the &lt;code&gt;connector&lt;/code&gt; and optional &lt;code&gt;connector-args&lt;/code&gt; arguments to the program. These connectors can be installed and managed using the &lt;a href="https://github.com/memflow/memflowup"&gt;memflowup&lt;/a&gt; tool.&lt;/p&gt; 
&lt;p&gt;E.g (for pcileech). &lt;code&gt;cs2-dumper -c pcileech -a :device=FPGA -vv&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Certain connectors, such as the &lt;a href="https://github.com/memflow/memflow-kvm"&gt;kvm&lt;/a&gt; connector on Linux or the &lt;a href="https://github.com/memflow/memflow-pcileech"&gt;pcileech&lt;/a&gt; / &lt;a href="https://github.com/a2x/memflow-winio"&gt;winio&lt;/a&gt; connectors on Windows, require elevated privileges to work. So either run the &lt;code&gt;cs2-dumper&lt;/code&gt; executable with &lt;code&gt;sudo&lt;/code&gt; on Linux or as an administrator on Windows.&lt;/p&gt; 
&lt;h3&gt;Available Arguments&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-c, --connector &amp;lt;connector&amp;gt;&lt;/code&gt;: The name of the memflow connector to use.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-a, --connector-args &amp;lt;connector-args&amp;gt;&lt;/code&gt;: Additional arguments to pass to the memflow connector.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-f, --file-types &amp;lt;file-types&amp;gt;&lt;/code&gt;: The types of files to generate. Default: &lt;code&gt;cs&lt;/code&gt;, &lt;code&gt;hpp&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;rs&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-i, --indent-size &amp;lt;indent-size&amp;gt;&lt;/code&gt;: The number of spaces to use per indentation level. Default: &lt;code&gt;4&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-o, --output &amp;lt;output&amp;gt;&lt;/code&gt;: The output directory to write the generated files to. Default: &lt;code&gt;output&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-p, --process-name &amp;lt;process-name&amp;gt;&lt;/code&gt;: The name of the game process. Default: &lt;code&gt;cs2.exe&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-v...&lt;/code&gt;: Increase logging verbosity. Can be specified multiple times.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-h, --help&lt;/code&gt;: Print help.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-V, --version&lt;/code&gt;: Print version.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Running Tests&lt;/h2&gt; 
&lt;p&gt;To run the few basic provided tests, use the following command: &lt;code&gt;cargo test -- --nocapture&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under the MIT license (&lt;a href="https://raw.githubusercontent.com/a2x/cs2-dumper/main/LICENSE"&gt;LICENSE&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>astral-sh/uv</title>
      <link>https://github.com/astral-sh/uv</link>
      <description>&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uv&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json" alt="uv" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/v/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/l/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://github.com/astral-sh/uv/actions"&gt;&lt;img src="https://github.com/astral-sh/uv/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Actions status" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/astral-sh"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d" /&gt; 
  &lt;img alt="Shows a bar chart with benchmark results." src="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt;Installing &lt;a href="https://trio.readthedocs.io/"&gt;Trio&lt;/a&gt;'s dependencies with a warm cache.&lt;/i&gt; &lt;/p&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üöÄ A single tool to replace &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, &lt;code&gt;pipx&lt;/code&gt;, &lt;code&gt;poetry&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;twine&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and more.&lt;/li&gt; 
 &lt;li&gt;‚ö°Ô∏è &lt;a href="https://github.com/astral-sh/uv/raw/main/BENCHMARKS.md"&gt;10-100x faster&lt;/a&gt; than &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;üóÇÔ∏è Provides &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#projects"&gt;comprehensive project management&lt;/a&gt;, with a &lt;a href="https://docs.astral.sh/uv/concepts/projects/layout#the-lockfile"&gt;universal lockfile&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;‚ùáÔ∏è &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#scripts"&gt;Runs scripts&lt;/a&gt;, with support for &lt;a href="https://docs.astral.sh/uv/guides/scripts#declaring-script-dependencies"&gt;inline dependency metadata&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;üêç &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#python-versions"&gt;Installs and manages&lt;/a&gt; Python versions.&lt;/li&gt; 
 &lt;li&gt;üõ†Ô∏è &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#tools"&gt;Runs and installs&lt;/a&gt; tools published as Python packages.&lt;/li&gt; 
 &lt;li&gt;üî© Includes a &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#the-pip-interface"&gt;pip-compatible interface&lt;/a&gt; for a performance boost with a familiar CLI.&lt;/li&gt; 
 &lt;li&gt;üè¢ Supports Cargo-style &lt;a href="https://docs.astral.sh/uv/concepts/projects/workspaces"&gt;workspaces&lt;/a&gt; for scalable projects.&lt;/li&gt; 
 &lt;li&gt;üíæ Disk-space efficient, with a &lt;a href="https://docs.astral.sh/uv/concepts/cache"&gt;global cache&lt;/a&gt; for dependency deduplication.&lt;/li&gt; 
 &lt;li&gt;‚è¨ Installable without Rust or Python via &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;üñ•Ô∏è Supports macOS, Linux, and Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uv is backed by &lt;a href="https://astral.sh"&gt;Astral&lt;/a&gt;, the creators of &lt;a href="https://github.com/astral-sh/ruff"&gt;Ruff&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install uv with our standalone installers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# On macOS and Linux.
curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# On Windows.
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, from &lt;a href="https://pypi.org/project/uv/"&gt;PyPI&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With pip.
pip install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Or pipx.
pipx install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If installed via the standalone installer, uv can update itself to the latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv self update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/getting-started/installation/"&gt;installation documentation&lt;/a&gt; for details and alternative installation methods.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;uv's documentation is available at &lt;a href="https://docs.astral.sh/uv"&gt;docs.astral.sh/uv&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, the command line reference documentation can be viewed with &lt;code&gt;uv help&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Projects&lt;/h3&gt; 
&lt;p&gt;uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to &lt;code&gt;rye&lt;/code&gt; or &lt;code&gt;poetry&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv init example
Initialized project `example` at `/home/user/example`

$ cd example

$ uv add ruff
Creating virtual environment at: .venv
Resolved 2 packages in 170ms
   Built example @ file:///home/user/example
Prepared 2 packages in 627ms
Installed 2 packages in 1ms
 + example==0.1.0 (from file:///home/user/example)
 + ruff==0.5.0

$ uv run ruff check
All checks passed!

$ uv lock
Resolved 2 packages in 0.33ms

$ uv sync
Resolved 2 packages in 0.70ms
Audited 1 package in 0.02ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/projects/"&gt;project documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;uv also supports building and publishing projects, even if they're not managed with uv. See the &lt;a href="https://docs.astral.sh/uv/guides/publish/"&gt;publish guide&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h3&gt;Scripts&lt;/h3&gt; 
&lt;p&gt;uv manages dependencies and environments for single-file scripts.&lt;/p&gt; 
&lt;p&gt;Create a new script and add inline metadata declaring its dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ echo 'import requests; print(requests.get("https://astral.sh"))' &amp;gt; example.py

$ uv add --script example.py requests
Updated `example.py`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run the script in an isolated virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv run example.py
Reading inline script metadata from: example.py
Installed 5 packages in 12ms
&amp;lt;Response [200]&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/scripts/"&gt;scripts documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;uv executes and installs command-line tools provided by Python packages, similar to &lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Run a tool in an ephemeral environment using &lt;code&gt;uvx&lt;/code&gt; (an alias for &lt;code&gt;uv tool run&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uvx pycowsay 'hello world!'
Resolved 1 package in 167ms
Installed 1 package in 9ms
 + pycowsay==0.0.0.2
  """

  ------------
&amp;lt; hello world! &amp;gt;
  ------------
   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install a tool with &lt;code&gt;uv tool install&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv tool install ruff
Resolved 1 package in 6ms
Installed 1 package in 2ms
 + ruff==0.5.0
Installed 1 executable: ruff

$ ruff --version
ruff 0.5.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/tools/"&gt;tools documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Python versions&lt;/h3&gt; 
&lt;p&gt;uv installs Python and allows quickly switching between versions.&lt;/p&gt; 
&lt;p&gt;Install multiple Python versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv python install 3.10 3.11 3.12
Searching for Python versions matching: Python 3.10
Searching for Python versions matching: Python 3.11
Searching for Python versions matching: Python 3.12
Installed 3 versions in 3.42s
 + cpython-3.10.14-macos-aarch64-none
 + cpython-3.11.9-macos-aarch64-none
 + cpython-3.12.4-macos-aarch64-none
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Download Python versions as needed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv venv --python 3.12.0
Using Python 3.12.0
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate

$ uv run --python pypy@3.8 -- python --version
Python 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)
[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use a specific Python version in the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv python pin 3.11
Pinned `.python-version` to `3.11`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/install-python/"&gt;Python installation documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;The pip interface&lt;/h3&gt; 
&lt;p&gt;uv provides a drop-in replacement for common &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more.&lt;/p&gt; 
&lt;p&gt;Migrate to uv without changing your existing workflows ‚Äî and experience a 10-100x speedup ‚Äî with the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;Compile requirements into a platform-independent requirements file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv pip compile docs/requirements.in \
   --universal \
   --output-file docs/requirements.txt
Resolved 43 packages in 12ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv venv
Using Python 3.12.3
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install the locked requirements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv pip sync docs/requirements.txt
Resolved 43 packages in 11ms
Installed 43 packages in 208ms
 + babel==2.15.0
 + black==24.4.2
 + certifi==2024.7.4
 ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/pip/index/"&gt;pip interface documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;See uv's &lt;a href="https://docs.astral.sh/uv/reference/platforms/"&gt;platform support&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Versioning policy&lt;/h2&gt; 
&lt;p&gt;See uv's &lt;a href="https://docs.astral.sh/uv/reference/versioning/"&gt;versioning policy&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the &lt;a href="https://github.com/astral-sh/uv/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h4&gt;How do you pronounce uv?&lt;/h4&gt; 
&lt;p&gt;It's pronounced as "you - vee" (&lt;a href="https://en.wikipedia.org/wiki/Help:IPA/English#Key"&gt;&lt;code&gt;/juÀê viÀê/&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt; 
&lt;h4&gt;How should I stylize uv?&lt;/h4&gt; 
&lt;p&gt;Just "uv", please. See the &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/STYLE.md#styling-uv"&gt;style guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;uv's dependency resolver uses &lt;a href="https://github.com/pubgrub-rs/pubgrub"&gt;PubGrub&lt;/a&gt; under the hood. We're grateful to the PubGrub maintainers, especially &lt;a href="https://github.com/Eh2406"&gt;Jacob Finkelman&lt;/a&gt;, for their support.&lt;/p&gt; 
&lt;p&gt;uv's Git implementation is based on &lt;a href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Some of uv's optimizations are inspired by the great work we've seen in &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt;, &lt;a href="https://github.com/orogene/orogene"&gt;Orogene&lt;/a&gt;, and &lt;a href="https://github.com/oven-sh/bun"&gt;Bun&lt;/a&gt;. We've also learned a lot from Nathaniel J. Smith's &lt;a href="https://github.com/njsmith/posy"&gt;Posy&lt;/a&gt; and adapted its &lt;a href="https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline"&gt;trampoline&lt;/a&gt; for Windows support.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uv is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="https://opensource.org/licenses/MIT"&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a target="_blank" href="https://astral.sh" style="background:none"&gt; &lt;img src="https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg?sanitize=true" alt="Made by Astral" /&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>rerun-io/rerun</title>
      <link>https://github.com/rerun-io/rerun</link>
      <description>&lt;p&gt;Visualize streams of multimodal data. Free, fast, easy to use, and simple to integrate. Built in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://www.rerun.io/"&gt; &lt;img alt="banner" src="https://user-images.githubusercontent.com/1148717/218142418-1d320929-6b7a-486e-8277-fbeef2432529.png" /&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;h1 align="center"&gt; &lt;a href="https://pypi.org/project/rerun-sdk/"&gt; &lt;img alt="PyPi" src="https://img.shields.io/pypi/v/rerun-sdk.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://crates.io/crates/rerun"&gt; &lt;img alt="crates.io" src="https://img.shields.io/crates/v/rerun.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://github.com/rerun-io/rerun/raw/main/LICENSE-MIT"&gt; &lt;img alt="MIT" src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://github.com/rerun-io/rerun/raw/main/LICENSE-APACHE"&gt; &lt;img alt="Apache" src="https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://discord.gg/Gcm8BbTaAj"&gt; &lt;img alt="Rerun Discord" src="https://img.shields.io/discord/1062300748202921994?label=Rerun%20Discord" /&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;h1&gt;Time-aware multimodal data stack and visualizations&lt;/h1&gt; 
&lt;p&gt;Rerun is building the multimodal data stack to model, ingest, store, query and view robotics-style data. It's used in areas like robotics, spatial and embodied AI, generative media, industrial processing, simulation, security, and health.&lt;/p&gt; 
&lt;p&gt;Rerun is easy to use! Use the Rerun SDK (available for C++, Python and Rust) to log data like images, tensors, point clouds, and text. Logs are streamed to the Rerun Viewer for live visualization or to file for later use. You can also query the logged data through &lt;a href="https://rerun.io/docs/howto/dataframe-api"&gt;our dataframe API&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/#getting-started"&gt;Get started&lt;/a&gt; in minutes ‚Äì no account needed.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/viewer"&gt;Run the Rerun Viewer in your browser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/docs/getting-started/what-is-rerun"&gt;Read about what Rerun is and who it is for&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;A short taste&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;import rerun as rr  # pip install rerun-sdk

rr.init("rerun_example_app")

rr.spawn()  # Spawn a child process with a viewer and connect
# rr.save("recording.rrd")  # Stream all logs to disk
# rr.connect_grpc()  # Connect to a remote viewer

# Associate subsequent data with 42 on the ‚Äúframe‚Äù timeline
rr.set_time("frame", sequence=42)

# Log colored 3D points to the entity at `path/to/points`
rr.log("path/to/points", rr.Points3D(positions, colors=colors))
‚Ä¶
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;img src="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/full.png" alt="" /&gt; 
  &lt;source media="(max-width: 480px)" srcset="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/480w.png" /&gt; 
  &lt;source media="(max-width: 768px)" srcset="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/768w.png" /&gt; 
  &lt;source media="(max-width: 1024px)" srcset="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/1024w.png" /&gt; 
  &lt;source media="(max-width: 1200px)" srcset="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/1200w.png" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/docs/getting-started/quick-start/cpp"&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/docs/getting-started/quick-start/python"&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/a&gt;: &lt;code&gt;pip install rerun-sdk&lt;/code&gt; or on &lt;a href="https://github.com/conda-forge/rerun-sdk-feedstock"&gt;&lt;code&gt;conda&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/docs/getting-started/quick-start/rust"&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/a&gt;: &lt;code&gt;cargo add rerun&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installing the Rerun Viewer binary&lt;/h3&gt; 
&lt;p&gt;To stream log data over the network or load our &lt;code&gt;.rrd&lt;/code&gt; data files you also need the &lt;code&gt;rerun&lt;/code&gt; binary. It can be installed with &lt;code&gt;pip install rerun-sdk&lt;/code&gt; or with &lt;code&gt;cargo install rerun-cli --locked --features nasm&lt;/code&gt; (see note below). Note that only the Python SDK comes bundled with the Viewer whereas C++ &amp;amp; Rust always rely on a separate install.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;nasm&lt;/code&gt; Cargo feature requires the &lt;a href="https://github.com/netwide-assembler/nasm"&gt;&lt;code&gt;nasm&lt;/code&gt;&lt;/a&gt; CLI to be installed and available in your path. Alternatively, you may skip enabling this feature, but this may result in inferior video decoding performance.&lt;/p&gt; 
&lt;p&gt;You should now be able to run &lt;code&gt;rerun --help&lt;/code&gt; in any terminal.&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;üìö &lt;a href="http://rerun.io/docs"&gt;High-level docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;‚èÉ &lt;a href="https://www.rerun.io/docs/reference/types"&gt;Loggable Types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;‚öôÔ∏è &lt;a href="http://rerun.io/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üìñ &lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/docs/snippets/INDEX.md"&gt;Code snippets&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üåä &lt;a href="https://ref.rerun.io/docs/cpp"&gt;C++ API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üêç &lt;a href="https://ref.rerun.io/docs/python"&gt;Python API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ü¶Ä &lt;a href="https://docs.rs/rerun/"&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;‚ÅâÔ∏è &lt;a href="https://www.rerun.io/docs/getting-started/troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;We are in active development. There are many features we want to add, and the API is still evolving. &lt;em&gt;Expect breaking changes!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Some shortcomings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rerun-io/rerun/issues/7115"&gt;The viewer slows down when there are too many entities&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rerun-io/rerun/issues/1611"&gt;We don't support transparency yet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The data you want to visualize must fit in RAM 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href="https://www.rerun.io/docs/howto/limit-ram"&gt;https://www.rerun.io/docs/howto/limit-ram&lt;/a&gt; for how to bound memory use.&lt;/li&gt; 
   &lt;li&gt;We plan on having a disk-based data store some time in the future.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rerun-io/rerun/issues/1136"&gt;Multi-million point clouds can be slow&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is Rerun for?&lt;/h2&gt; 
&lt;p&gt;Rerun is built to help you understand and improve complex processes that include rich multimodal data, like 2D, 3D, text, time series, tensors, etc. It is used in many industries, including robotics, simulation, computer vision, or anything that involves a lot of sensors or other signals that evolve over time.&lt;/p&gt; 
&lt;h3&gt;Example use case&lt;/h3&gt; 
&lt;p&gt;Say you're building a vacuum cleaning robot and it keeps running into walls. Why is it doing that? You need some tool to debug it, but a normal debugger isn't gonna be helpful. Similarly, just logging text won't be very helpful either. The robot may log "Going through doorway" but that won't explain why it thinks the wall is a door.&lt;/p&gt; 
&lt;p&gt;What you need is a visual and temporal debugger, that can log all the different representations of the world the robots holds in its little head, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RGB camera feed&lt;/li&gt; 
 &lt;li&gt;depth images&lt;/li&gt; 
 &lt;li&gt;lidar scan&lt;/li&gt; 
 &lt;li&gt;segmentation image (how the robot interprets what it sees)&lt;/li&gt; 
 &lt;li&gt;its 3D map of the apartment&lt;/li&gt; 
 &lt;li&gt;all the objects the robot has detected (or thinks it has detected), as 3D shapes in the 3D map&lt;/li&gt; 
 &lt;li&gt;its confidence in its prediction&lt;/li&gt; 
 &lt;li&gt;etc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You also want to see how all these streams of data evolve over time so you can go back and pinpoint exactly what went wrong, when and why.&lt;/p&gt; 
&lt;p&gt;Maybe it turns out that a glare from the sun hit one of the sensors in the wrong way, confusing the segmentation network leading to bad object detection. Or maybe it was a bug in the lidar scanning code. Or maybe the robot thought it was somewhere else in the apartment, because its odometry was broken. Or it could be one of a thousand other things. Rerun will help you find out!&lt;/p&gt; 
&lt;p&gt;But seeing the world from the point of the view of the robot is not just for debugging - it will also give you ideas on how to improve the algorithms, new test cases to set up, or datasets to collect. It will also let you explain the brains of the robot to your colleagues, boss, and customers. And so on. Seeing is believing, and an image is worth a thousand words, and multimodal temporal logging is worth a thousand images :)&lt;/p&gt; 
&lt;p&gt;While seeing and understanding your data is core to making progress in robotics, there is one more thing: You can also use the data you collected for visualization to create new datasets for training and evaluating the models and algorithms that run on your robot. Rerun provides query APIs to make it easy to extract clean datasets from your recording for exactly that purpose.&lt;/p&gt; 
&lt;p&gt;Of course, Rerun is useful for much more than just robots. Any time you have any form of sensors, or 2D or 3D state evolving over time, Rerun is a great tool.&lt;/p&gt; 
&lt;h2&gt;Business model&lt;/h2&gt; 
&lt;p&gt;Rerun uses an open-core model. Everything in this repository will stay open source and free (both as in beer and as in freedom).&lt;/p&gt; 
&lt;p&gt;We are also building a commercial data platform. Right now that is only available for a few select design partners. &lt;a href="https://rerun.io/pricing"&gt;Click here if you're interested&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Rerun open source project targets the needs of individual developers. The commercial product targets the needs specific to teams that build and run computer vision and robotics products.&lt;/p&gt; 
&lt;h2&gt;How to cite Rerun&lt;/h2&gt; 
&lt;p&gt;When using Rerun in your research, please cite it to acknowledge its contribution to your work. This can be done by including a reference to Rerun in the software or methods section of your paper.&lt;/p&gt; 
&lt;p&gt;Suggested citation format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bibtex"&gt;@software{RerunSDK,
  title = {Rerun: A Visualization SDK for Multimodal Data},
  author = {{Rerun Development Team}},
  url = {https://www.rerun.io},
  version = {insert version number},
  date = {insert date of usage},
  year = {2024},
  publisher = {{Rerun Technologies AB}},
  address = {Online},
  note = {Available from https://www.rerun.io/ and https://github.com/rerun-io/rerun}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please replace "insert version number" with the version of Rerun you used and "insert date of usage" with the date(s) you used the tool in your research. This citation format helps ensure that Rerun's development team receives appropriate credit for their work and facilitates the tool's discovery by other researchers.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/ARCHITECTURE.md"&gt;&lt;code&gt;ARCHITECTURE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_OF_CONDUCT.md"&gt;&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_STYLE.md"&gt;&lt;code&gt;CODE_STYLE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/BUILD.md"&gt;&lt;code&gt;BUILD.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/rerun_py/README.md"&gt;&lt;code&gt;rerun_py/README.md&lt;/code&gt;&lt;/a&gt; - instructions for Python SDK&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/rerun_cpp/README.md"&gt;&lt;code&gt;rerun_cpp/README.md&lt;/code&gt;&lt;/a&gt; - instructions for C++ SDK&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installing a pre-release Python SDK&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the correct &lt;code&gt;.whl&lt;/code&gt; from &lt;a href="https://github.com/rerun-io/rerun/releases"&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;pip install rerun_sdk&amp;lt;‚Ä¶&amp;gt;.whl&lt;/code&gt; (replace &lt;code&gt;&amp;lt;‚Ä¶&amp;gt;&lt;/code&gt; with the actual filename)&lt;/li&gt; 
 &lt;li&gt;Test it: &lt;code&gt;rerun --version&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>rolldown/rolldown</title>
      <link>https://github.com/rolldown/rolldown</link>
      <description>&lt;p&gt;Fast Rust bundler for JavaScript/TypeScript with Rollup-compatible API.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://rolldown.rs" target="_blank" rel="noopener noreferrer"&gt; &lt;img width="180" src="https://rolldown.rs/rolldown-round.svg?sanitize=true" alt="Rolldown logo" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/rolldown/rolldown/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/rolldown/v/latest"&gt;&lt;img src="https://img.shields.io/npm/v/rolldown/latest?color=brightgreen" alt="NPM version" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/rolldown/rolldown"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="CodSpeed Badge" /&gt;&lt;/a&gt; &lt;a href="https://chat.rolldown.rs"&gt;&lt;img src="https://img.shields.io/discord/1079625926024900739?logo=discord&amp;amp;label=Discord" alt="Discord chat" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/rolldown/rolldown"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://www.npmjs.com/package/rolldown/v/latest"&gt;&lt;img src="https://img.shields.io/npm/unpacked-size/rolldown/latest?label=npm" alt="NPM Unpacked Size (with version)" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@rolldown/binding-darwin-arm64"&gt;&lt;img src="https://img.shields.io/npm/unpacked-size/%40rolldown%2Fbinding-darwin-arm64/latest?label=darwin-arm64" alt="NPM Unpacked Size darwin-arm64" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@rolldown/binding-darwin-x64"&gt;&lt;img src="https://img.shields.io/npm/unpacked-size/%40rolldown%2Fbinding-darwin-x64/latest?label=darwin-x64" alt="NPM Unpacked Size darwin-x64" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@rolldown/binding-linux-x64-gnu"&gt;&lt;img src="https://img.shields.io/npm/unpacked-size/%40rolldown%2Fbinding-linux-x64-gnu/latest?label=linux-x64-gnu" alt="NPM Unpacked Size linux-x64-gnu" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@rolldown/binding-win32-x64-msvc"&gt;&lt;img src="https://img.shields.io/npm/unpacked-size/%40rolldown%2Fbinding-win32-x64-msvc/latest?label=win32-x64" alt="NPM Unpacked Size win32-x64" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@rolldown/binding-wasm32-wasi"&gt;&lt;img src="https://img.shields.io/npm/unpacked-size/%40rolldown%2Fbinding-wasm32-wasi/latest?label=wasm32-wasi" alt="NPM Unpacked Size wasm32-wasi" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://pkg.pr.new/~/rolldown/rolldown"&gt;&lt;img src="https://pkg.pr.new/badge/pkg.pr.new/pkg.pr.new?style=flat&amp;amp;color=000&amp;amp;logoSize=auto" alt="pkg.pr.new" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://stackblitz.com/fork/github/rolldown/rolldown-starter-stackblitz"&gt;&lt;img src="https://developer.stackblitz.com/img/open_in_stackblitz.svg?sanitize=true" alt="rolldown-starter-stackblitz" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;üöß &lt;strong&gt;Beta Software&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Rolldown is currently in beta status. While it can already handle most production use cases, there may still be bugs and rough edges. Most notably, the built-in minification feature is still in alpha status.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Rolldown&lt;/h1&gt; 
&lt;p&gt;Rolldown is a JavaScript/TypeScript bundler written in Rust intended to serve as the future bundler used in &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt;. It provides Rollup-compatible APIs and plugin interface, but will be more similar to esbuild in scope.&lt;/p&gt; 
&lt;p&gt;For more information, please check out the documentation at &lt;a href="https://rolldown.rs/about"&gt;rolldown.rs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;VoidZero Inc.&lt;/h2&gt; 
&lt;p&gt;Rolldown is a project of &lt;a href="https://voidzero.dev/"&gt;VoidZero&lt;/a&gt;, see our announcement &lt;a href="https://voidzero.dev/posts/announcing-voidzero-inc"&gt;Announcing VoidZero - Next Generation Toolchain for JavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have requirements for JavaScript tools at scale, please &lt;a href="https://forms.gle/WQgjyzYJpwurpxWKA"&gt;get in touch&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We would love to have more contributors involved!&lt;/p&gt; 
&lt;p&gt;To get started, please read our &lt;a href="https://rolldown.rs/contrib-guide/"&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;The Rolldown project is heavily inspired by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rollup/rollup"&gt;Rollup&lt;/a&gt;, created by &lt;a href="https://github.com/Rich-Harris"&gt;Rich Harris&lt;/a&gt; and maintained by &lt;a href="https://github.com/lukastaegert"&gt;Lukas Taegert-Atkinson&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evanw/esbuild"&gt;esbuild&lt;/a&gt;, created by &lt;a href="https://github.com/evanw"&gt;Evan Wallace&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And supported by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/napi-rs/napi-rs"&gt;napi-rs&lt;/a&gt; for Node.js add-ons in Rust via Node-API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oxc-project/oxc"&gt;oxc&lt;/a&gt; for the underlying parser, resolver, and sourcemap support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/rolldown/rolldown/main/LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project also partially contains code derived or copied from the following projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rollup/rollup/raw/680912e2ceb42c8d5e571e01c6ece0e4889aecbb/LICENSE-CORE.md"&gt;rollup(MIT)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evanw/esbuild/raw/0c8a0a901d9a6c7bbff9b4dd347c8a3f65f6c6dd/LICENSE.md"&gt;esbuild(MIT)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Licenses of these projects are listed in &lt;a href="https://raw.githubusercontent.com/rolldown/rolldown/main/THIRD-PARTY-LICENSE"&gt;THIRD-PARTY-LICENSE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Orange-OpenSource/hurl</title>
      <link>https://github.com/Orange-OpenSource/hurl</link>
      <description>&lt;p&gt;Hurl, run and test HTTP requests with plain text.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="/docs/assets/img/logo-light.svg?sanitize=true" /&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="/docs/assets/img/logo-dark.svg?sanitize=true" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/logo-light.svg?sanitize=true" width="264px" alt="Hurl Logo" /&gt; 
&lt;/picture&gt; 
&lt;p&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl/actions"&gt;&lt;img src="https://github.com/Orange-OpenSource/hurl/workflows/test/badge.svg?sanitize=true" alt="deploy status" /&gt;&lt;/a&gt; &lt;a href="https://Orange-OpenSource.github.io/hurl/coverage"&gt;&lt;img src="https://Orange-OpenSource.github.io/hurl/coverage/badges/flat.svg?sanitize=true" alt="coverage" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/hurl"&gt;&lt;img src="https://img.shields.io/crates/v/hurl.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://hurl.dev"&gt;&lt;img src="https://img.shields.io/badge/-documentation-ff0288" alt="documentation" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;What's Hurl?&lt;/h1&gt; 
&lt;p&gt;Hurl is a command line tool that runs &lt;b&gt;HTTP requests&lt;/b&gt; defined in a simple &lt;b&gt;plain text format&lt;/b&gt;.&lt;/p&gt; 
&lt;p&gt;It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile: it can be used for both &lt;b&gt;fetching data&lt;/b&gt; and &lt;b&gt;testing HTTP&lt;/b&gt; sessions.&lt;/p&gt; 
&lt;p&gt;Hurl makes it easy to work with &lt;b&gt;HTML&lt;/b&gt; content, &lt;b&gt;REST / SOAP / GraphQL&lt;/b&gt; APIs, or any other &lt;b&gt;XML / JSON&lt;/b&gt; based APIs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Go home and capture token
GET https://example.org
HTTP 200
[Captures]
csrf_token: xpath "string(//meta[@name='_csrf_token']/@content)"


# Do login!
POST https://example.org/login
X-CSRF-TOKEN: {{csrf_token}}
[Form]
user: toto
password: 1234
HTTP 302
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Chaining multiple requests is easy:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/health
GET https://example.org/api/step1
GET https://example.org/api/step2
GET https://example.org/api/step3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Also an HTTP Test Tool&lt;/h1&gt; 
&lt;p&gt;Hurl can run HTTP requests but can also be used to &lt;b&gt;test HTTP responses&lt;/b&gt;. Different types of queries and predicates are supported, from &lt;a href="https://en.wikipedia.org/wiki/XPath"&gt;XPath&lt;/a&gt; and &lt;a href="https://goessner.net/articles/JsonPath/"&gt;JSONPath&lt;/a&gt; on body response, to assert on status code and response headers.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/player.html?id=starwars&amp;amp;speed=3"&gt;&lt;img src="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/poster-starwars.png" width="100%" alt="Hurl Demo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It is well adapted for &lt;b&gt;REST / JSON APIs&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/tests
{
    "id": "4568",
    "evaluate": true
}
HTTP 200
[Asserts]
header "X-Frame-Options" == "SAMEORIGIN"
jsonpath "$.status" == "RUNNING"    # Check the status code
jsonpath "$.tests" count == 25      # Check the number of items
jsonpath "$.id" matches /\d{4}/     # Check the format of the id
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;b&gt;HTML content&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
[Asserts]
xpath "normalize-space(//head/title)" == "Hello world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;b&gt;GraphQL&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/graphql
```graphql
{
  human(id: "1000") {
    name
    height(unit: FOOT)
  }
}
```
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and even &lt;b&gt;SOAP APIs&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/InStock
Content-Type: application/soap+xml; charset=utf-8
SOAPAction: "http://www.w3.org/2003/05/soap-envelope"
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:m="https://example.org"&amp;gt;
  &amp;lt;soap:Header&amp;gt;&amp;lt;/soap:Header&amp;gt;
  &amp;lt;soap:Body&amp;gt;
    &amp;lt;m:GetStockPrice&amp;gt;
      &amp;lt;m:StockName&amp;gt;GOOG&amp;lt;/m:StockName&amp;gt;
    &amp;lt;/m:GetStockPrice&amp;gt;
  &amp;lt;/soap:Body&amp;gt;
&amp;lt;/soap:Envelope&amp;gt;
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl can also be used to test the &lt;b&gt;performance&lt;/b&gt; of HTTP endpoints&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/v1/pets
HTTP 200
[Asserts]
duration &amp;lt; 1000  # Duration in ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And check response bytes&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/data.tar.gz
HTTP 200
[Asserts]
sha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, Hurl is easy to &lt;b&gt;integrate in CI/CD&lt;/b&gt;, with text, JUnit, TAP and HTML reports&lt;/p&gt; 
&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="/docs/assets/img/home-waterfall-light.png" /&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="/docs/assets/img/home-waterfall-dark.png" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/home-waterfall-light.png" width="480" alt="HTML report" /&gt; 
&lt;/picture&gt; 
&lt;h1&gt;Why Hurl?&lt;/h1&gt; 
&lt;ul class="showcase-container"&gt; 
 &lt;li&gt;&lt;b&gt;Text Format:&lt;/b&gt; for both devops and developers&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Fast CLI:&lt;/b&gt; a command line for local dev and continuous integration&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Single Binary:&lt;/b&gt; easy to install, with no runtime required&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Powered by curl&lt;/h1&gt; 
&lt;p&gt;Hurl is a lightweight binary written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;. Under the hood, Hurl HTTP engine is powered by &lt;a href="https://curl.se/libcurl/"&gt;libcurl&lt;/a&gt;, one of the most powerful and reliable file transfer libraries. With its text file format, Hurl adds syntactic sugar to run and test HTTP requests, but it's still the &lt;a href="https://curl.se"&gt;curl&lt;/a&gt; that we love: &lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;efficient&lt;/strong&gt; and &lt;strong&gt;IPv6 / HTTP/3 ready&lt;/strong&gt;.&lt;/p&gt; 
&lt;h1&gt;Feedbacks&lt;/h1&gt; 
&lt;p&gt;To support its development, &lt;a href="https://github.com/Orange-OpenSource/hurl/stargazers"&gt;star Hurl on GitHub&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl/issues"&gt;Feedback, suggestion, bugs or improvements&lt;/a&gt; are welcome.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://hurl.dev/api/feedback
{
  "name": "John Doe",
  "feedback": "Hurl is awesome!"
}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/license.html"&gt;License&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/blog/"&gt;Blog&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/tutorial/your-first-hurl-file.html"&gt;Tutorial&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/installation.html"&gt;Documentation&lt;/a&gt; (download &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/standalone/hurl-7.0.0.html"&gt;HTML&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/standalone/hurl-7.0.0.pdf"&gt;PDF&lt;/a&gt;, &lt;a href="https://hurl.dev/docs/standalone/hurl-7.0.0.html"&gt;Markdown&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl"&gt;GitHub&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#samples"&gt;Samples&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#getting-data"&gt;Getting Data&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http-headers"&gt;HTTP Headers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#query-params"&gt;Query Params&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#basic-authentication"&gt;Basic Authentication&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#passing-data-between-requests"&gt;Passing Data between Requests &lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-data"&gt;Sending Data&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-html-form-data"&gt;Sending HTML Form Data&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-multipart-form-data"&gt;Sending Multipart Form Data&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#posting-a-json-body"&gt;Posting a JSON Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#templating-a-json-body"&gt;Templating a JSON Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#templating-a-xml-body"&gt;Templating a XML Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-graphql-query"&gt;Using GraphQL Query&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-dynamic-datas"&gt;Using Dynamic Datas&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-response"&gt;Testing Response&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-status-code"&gt;Testing Status Code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-response-headers"&gt;Testing Response Headers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-rest-apis"&gt;Testing REST APIs&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-html-response"&gt;Testing HTML Response&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-set-cookie-attributes"&gt;Testing Set-Cookie Attributes&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-bytes-content"&gt;Testing Bytes Content&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ssl-certificate"&gt;SSL Certificate&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#checking-full-body"&gt;Checking Full Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-redirections"&gt;Testing Redirections&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debug-tips"&gt;Debug Tips&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose-mode"&gt;Verbose Mode&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#error-format"&gt;Error Format&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output-response-body"&gt;Output Response Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#export-curl-commands"&gt;Export curl Commands&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-proxy"&gt;Using Proxy&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#reports"&gt;Reports&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#html-report"&gt;HTML Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json-report"&gt;JSON Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#junit-report"&gt;JUnit Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#tap-report"&gt;TAP Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json-output"&gt;JSON Output&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#others"&gt;Others&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http-version"&gt;HTTP Version&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ip-address"&gt;IP Address&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#polling-and-retry"&gt;Polling and Retry&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#delaying-requests"&gt;Delaying Requests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#skipping-requests"&gt;Skipping Requests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-endpoint-performance"&gt;Testing Endpoint Performance&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-soap-apis"&gt;Using SOAP APIs&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#capturing-and-using-a-csrf-token"&gt;Capturing and Using a CSRF Token&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#redacting-secrets"&gt;Redacting Secrets&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#checking-byte-order-mark-bom-in-response-body"&gt;Checking Byte Order Mark (BOM) in Response Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#aws-signature-version-4-requests"&gt;AWS Signature Version 4 Requests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-curl-options"&gt;Using curl Options&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#manual"&gt;Manual&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#name"&gt;Name&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#synopsis"&gt;Synopsis&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#description"&gt;Description&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#hurl-file-format"&gt;Hurl File Format&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#capturing-values"&gt;Capturing values&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#asserts"&gt;Asserts&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#options"&gt;Options&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#environment"&gt;Environment&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#exit-codes"&gt;Exit Codes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#www"&gt;WWW&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#see-also"&gt;See Also&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#binaries-installation"&gt;Binaries Installation&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#linux"&gt;Linux&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debian--ubuntu"&gt;Debian / Ubuntu&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#alpine"&gt;Alpine&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#arch-linux--manjaro"&gt;Arch Linux / Manjaro&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#nixos--nix"&gt;NixOS / Nix&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#macos"&gt;macOS&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#homebrew"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#macports"&gt;MacPorts&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#freebsd"&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#windows"&gt;Windows&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#zip-file"&gt;Zip File&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#installer"&gt;Installer&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#chocolatey"&gt;Chocolatey&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#scoop"&gt;Scoop&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#windows-package-manager"&gt;Windows Package Manager&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cargo"&gt;Cargo&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#conda-forge"&gt;conda-forge&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#npm"&gt;npm&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#building-from-sources"&gt;Building From Sources&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-linux"&gt;Build on Linux&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debian-based-distributions"&gt;Debian based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#fedora-based-distributions"&gt;Fedora based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#red-hat-based-distributions"&gt;Red Hat based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#arch-based-distributions"&gt;Arch based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#alpine-based-distributions"&gt;Alpine based distributions&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-macos"&gt;Build on macOS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-windows"&gt;Build on Windows&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Samples&lt;/h1&gt; 
&lt;p&gt;To run a sample, edit a file with the sample content, and run Hurl:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ vi sample.hurl

GET https://example.org

$ hurl sample.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, Hurl behaves like &lt;a href="https://curl.se"&gt;curl&lt;/a&gt; and outputs the last HTTP response's &lt;a href="https://hurl.dev/docs/entry.html"&gt;entry&lt;/a&gt;. To have a test oriented output, you can use &lt;a href="https://hurl.dev/docs/manual.html#test"&gt;&lt;code&gt;--test&lt;/code&gt; option&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test sample.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A particular response can be saved with &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options] section&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.ord/cats/123
[Options]
output: cat123.txt    # use - to output to stdout
HTTP 200

GET https://example.ord/dogs/567
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, Hurl can take files as input, or directories. In the latter case, Hurl will search files with &lt;code&gt;.hurl&lt;/code&gt; extension recursively.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test integration/*.hurl
$ hurl --test .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check &lt;a href="https://github.com/Orange-OpenSource/hurl/tree/master/integration/hurl/tests_ok"&gt;Hurl tests suite&lt;/a&gt; for more samples.&lt;/p&gt; 
&lt;h2&gt;Getting Data&lt;/h2&gt; 
&lt;p&gt;A simple GET:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Requests can be chained:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/a
GET https://example.org/b
HEAD https://example.org/c
GET https://example.org/c
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#method"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;HTTP Headers&lt;/h3&gt; 
&lt;p&gt;A simple GET with headers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/news
User-Agent: Mozilla/5.0 
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#headers"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Query Params&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/news
[Query]
order: newest
search: something to search
count: 100
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/news?order=newest&amp;amp;search=something%20to%20search&amp;amp;count=100
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;With &lt;code&gt;[Query]&lt;/code&gt; section, params don't need to be URL escaped.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#query-parameters"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Basic Authentication&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/protected
[BasicAuth]
bob: secret
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#basic-authentication"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This is equivalent to construct the request with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization"&gt;Authorization&lt;/a&gt; header:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Authorization header value can be computed with `echo -n 'bob:secret' | base64`
GET https://example.org/protected
Authorization: Basic Ym9iOnNlY3JldA== 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Basic authentication section allows per request authentication. If you want to add basic authentication to all the requests of a Hurl file you could use &lt;a href="https://hurl.dev/docs/manual.html#user"&gt;&lt;code&gt;-u/--user&lt;/code&gt; option&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --user bob:secret login.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#user"&gt;&lt;code&gt;--user&lt;/code&gt;&lt;/a&gt; option can also be set per request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/login
[Options]
user: bob:secret
HTTP 200

GET https://example.org/login
[Options]
user: alice:secret
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Passing Data between Requests&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html"&gt;Captures&lt;/a&gt; can be used to pass data from one request to another:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://sample.org/orders
HTTP 201
[Captures]
order_id: jsonpath "$.order.id"

GET https://sample.org/orders/{{order_id}}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sending Data&lt;/h2&gt; 
&lt;h3&gt;Sending HTML Form Data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/contact
[Form]
default: false
token: {{token}}
email: john.doe@rookie.org
number: 33611223344
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#form-parameters"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Sending Multipart Form Data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/upload
[Multipart]
field1: value1
field2: file,example.txt;
# One can specify the file content type:
field3: file,example.zip; application/zip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#multipart-form-data"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Multipart forms can also be sent with a &lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;multiline string body&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/upload
Content-Type: multipart/form-data; boundary="boundary"
```
--boundary
Content-Disposition: form-data; name="key1"

value1
--boundary
Content-Disposition: form-data; name="upload1"; filename="data.txt"
Content-Type: text/plain

Hello World!
--boundary
Content-Disposition: form-data; name="upload2"; filename="data.html"
Content-Type: text/html

&amp;lt;div&amp;gt;Hello &amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt;!&amp;lt;/div&amp;gt;
--boundary--
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In that case, files have to be inlined in the Hurl file.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Posting a JSON Body&lt;/h3&gt; 
&lt;p&gt;With an inline JSON:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/tests
{
    "id": "456",
    "evaluate": true
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#json-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;With a local file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/tests
Content-Type: application/json
file,data.json;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#file-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Templating a JSON Body&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;PUT https://example.org/api/hits
Content-Type: application/json
{
    "key0": "{{a_string}}",
    "key1": {{a_bool}},
    "key2": {{a_null}},
    "key3": {{a_number}}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variables can be initialized via command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --variable a_string=apple \
       --variable a_bool=true \
       --variable a_null=null \
       --variable a_number=42 \
       test.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Resulting in a PUT request with the following JSON body:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    "key0": "apple",
    "key1": true,
    "key2": null,
    "key3": 42
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Templating a XML Body&lt;/h3&gt; 
&lt;p&gt;Using templates with &lt;a href="https://hurl.dev/docs/request.html#xml-body"&gt;XML body&lt;/a&gt; is not currently supported in Hurl. You can use templates in &lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;XML multiline string body&lt;/a&gt; with variables to send a variable XML body:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/echo/post/xml
```xml
&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;Request&amp;gt;
    &amp;lt;Login&amp;gt;{{login}}&amp;lt;/Login&amp;gt;
    &amp;lt;Password&amp;gt;{{password}}&amp;lt;/Password&amp;gt;
&amp;lt;/Request&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using GraphQL Query&lt;/h3&gt; 
&lt;p&gt;A simple GraphQL query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/starwars/graphql
```graphql
{
  human(id: "1000") {
    name
    height(unit: FOOT)
  }
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A GraphQL query with variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/starwars/graphql
```graphql
query Hero($episode: Episode, $withFriends: Boolean!) {
  hero(episode: $episode) {
    name
    friends @include(if: $withFriends) {
      name
    }
  }
}

variables {
  "episode": "JEDI",
  "withFriends": false
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GraphQL queries can also use &lt;a href="https://hurl.dev/docs/templates.html"&gt;Hurl templates&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#graphql-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using Dynamic Datas&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html#functions"&gt;Functions&lt;/a&gt; like &lt;code&gt;newUuid&lt;/code&gt; and &lt;code&gt;newDate&lt;/code&gt; can be used in templates to create dynamic datas:&lt;/p&gt; 
&lt;p&gt;A file that creates a dynamic email (i.e &lt;code&gt;0531f78f-7f87-44be-a7f2-969a1c4e6d97@test.com&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/foo
{
  "name": "foo",
  "email": "{{newUuid}}@test.com"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A file that creates a dynamic query parameter (i.e &lt;code&gt;2024-12-02T10:35:44.461731Z&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/foo
[Query]
date: {{newDate}}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html#functions"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Testing Response&lt;/h2&gt; 
&lt;p&gt;Responses are optional, everything after &lt;code&gt;HTTP&lt;/code&gt; is part of the response asserts.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# A request with (almost) no check:
GET https://foo.com

# A status code check:
GET https://foo.com
HTTP 200

# A test on response body
GET https://foo.com
HTTP 200
[Asserts]
jsonpath "$.state" == "running"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing Status Code&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/order/435
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#version-status"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/order/435
# Testing status code is in a 200-300 range
HTTP *
[Asserts]
status &amp;gt;= 200
status &amp;lt; 300
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#status-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Response Headers&lt;/h3&gt; 
&lt;p&gt;Use implicit response asserts to test header values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/index.html
HTTP 200
Set-Cookie: theme=light
Set-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#headers"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or use explicit response asserts with &lt;a href="https://hurl.dev/docs/asserting-response.html#predicates"&gt;predicates&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 302
[Asserts]
header "Location" contains "www.example.net"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#header-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Implicit and explicit asserts can be combined:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/index.html
HTTP 200
Set-Cookie: theme=light
Set-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT
[Asserts]
header "Location" contains "www.example.net"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing REST APIs&lt;/h3&gt; 
&lt;p&gt;Asserting JSON body response (node values, collection count etc...) with &lt;a href="https://goessner.net/articles/JsonPath/"&gt;JSONPath&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/order
screencapability: low
HTTP 200
[Asserts]
jsonpath "$.validated" == true
jsonpath "$.userInfo.firstName" == "Franck"
jsonpath "$.userInfo.lastName" == "Herbert"
jsonpath "$.hasDevice" == false
jsonpath "$.links" count == 12
jsonpath "$.state" != null
jsonpath "$.order" matches "^order-\\d{8}$"
jsonpath "$.order" matches /^order-\d{8}$/  # Alternative syntax with regex literal
jsonpath "$.id" matches /(?i)[a-z]*/        # See syntax for flags &amp;lt;https://docs.rs/regex/latest/regex/#grouping-and-flags&amp;gt;
jsonpath "$.created" isIsoDate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#jsonpath-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing HTML Response&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
Content-Type: text/html; charset=UTF-8
[Asserts]
xpath "string(/html/head/title)" contains "Example" # Check title
xpath "count(//p)" == 2  # Check the number of p
xpath "//p" count == 2  # Similar assert for p
xpath "boolean(count(//h2))" == false  # Check there is no h2  
xpath "//h2" not exists  # Similar assert for h2
xpath "string(//div[1])" matches /Hello.*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#xpath-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Set-Cookie Attributes&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/home
HTTP 200
[Asserts]
cookie "JSESSIONID" == "8400BAFE2F66443613DC38AE3D9D6239"
cookie "JSESSIONID[Value]" == "8400BAFE2F66443613DC38AE3D9D6239"
cookie "JSESSIONID[Expires]" contains "Wed, 13 Jan 2021"
cookie "JSESSIONID[Secure]" exists
cookie "JSESSIONID[HttpOnly]" exists
cookie "JSESSIONID[SameSite]" == "Lax"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#cookie-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Bytes Content&lt;/h3&gt; 
&lt;p&gt;Check the SHA-256 response body hash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/data.tar.gz
HTTP 200
[Asserts]
sha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#sha-256-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;SSL Certificate&lt;/h3&gt; 
&lt;p&gt;Check the properties of a SSL certificate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
[Asserts]
certificate "Subject" == "CN=example.org"
certificate "Issuer" == "C=US, O=Let's Encrypt, CN=R3"
certificate "Expire-Date" daysAfterNow &amp;gt; 15
certificate "Serial-Number" matches /[\da-f]+/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#ssl-certificate-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Checking Full Body&lt;/h3&gt; 
&lt;p&gt;Use implicit body to test an exact JSON body match:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/cats/123
HTTP 200
{
  "name" : "Purrsloud",
  "species" : "Cat",
  "favFoods" : ["wet food", "dry food", "&amp;lt;strong&amp;gt;any&amp;lt;/strong&amp;gt; food"],
  "birthYear" : 2016,
  "photo" : "https://learnwebcode.github.io/json-example/images/cat-2.jpg"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#json-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or an explicit assert file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/index.html
HTTP 200
[Asserts]
body == file,cat.json;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#body-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Implicit asserts supports XML body:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/catalog
HTTP 200
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;catalog&amp;gt;
   &amp;lt;book id="bk101"&amp;gt;
      &amp;lt;author&amp;gt;Gambardella, Matthew&amp;lt;/author&amp;gt;
      &amp;lt;title&amp;gt;XML Developer's Guide&amp;lt;/title&amp;gt;
      &amp;lt;genre&amp;gt;Computer&amp;lt;/genre&amp;gt;
      &amp;lt;price&amp;gt;44.95&amp;lt;/price&amp;gt;
      &amp;lt;publish_date&amp;gt;2000-10-01&amp;lt;/publish_date&amp;gt;
      &amp;lt;description&amp;gt;An in-depth look at creating applications with XML.&amp;lt;/description&amp;gt;
   &amp;lt;/book&amp;gt;
&amp;lt;/catalog&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#xml-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Plain text:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/models
HTTP 200
```
Year,Make,Model,Description,Price
1997,Ford,E350,"ac, abs, moon",3000.00
1999,Chevy,"Venture ""Extended Edition""","",4900.00
1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000.00
1996,Jeep,Grand Cherokee,"MUST SELL! air, moon roof, loaded",4799.00
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#multiline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;One line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/helloworld
HTTP 200
`Hello world!`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#oneline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;File:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
file,data.bin;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#file-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Redirections&lt;/h3&gt; 
&lt;p&gt;By default, Hurl doesn't follow redirection so each step of a redirect must be run manually and can be analysed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/step1
HTTP 301
[Asserts]
header "Location" == "https://example.org/step2"


GET https://example.org/step2
HTTP 301
[Asserts]
header "Location" == "https://example.org/step3"


GET https://example.org/step3
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;a href="https://hurl.dev/docs/manual.html#location"&gt;&lt;code&gt;--location&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://hurl.dev/docs/manual.html#location-trusted"&gt;&lt;code&gt;--location-trusted&lt;/code&gt;&lt;/a&gt; (either with command line option or per request), Hurl follows redirection and each step of the redirection can be checked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/step1
[Options]
location: true
HTTP 200
[Asserts]
redirects count == 2
redirects nth 0 location == "https://example.org/step2"
redirects nth 1 location == "https://example.org/step3"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/step1
[Options]
location-trusted: true
HTTP 200
[Asserts]
redirects last location == "https://example.org/step2"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#redirects-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Debug Tips&lt;/h2&gt; 
&lt;h3&gt;Verbose Mode&lt;/h3&gt; 
&lt;p&gt;To get more info on a given request/response, use &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options]&lt;/code&gt; section&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200

GET https://example.org/api/cats/123
[Options]
very-verbose: true
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;--verbose&lt;/code&gt; and &lt;code&gt;--very-verbose&lt;/code&gt; can be also used globally as command line options.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#very-verbose"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Error Format&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --error-format long *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#error-format"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Output Response Body&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;--output&lt;/code&gt; on a specific request to get the response body (&lt;code&gt;-&lt;/code&gt; can be used as standard output):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com/failure
[Options]
# use - to output on standard output, foo.bin to save on disk 
output: -
HTTP 200

GET https://foo.com/success
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#output"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Export curl Commands&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl ---curl /tmp/curl.txt *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#curl"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using Proxy&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;--proxy&lt;/code&gt; on a specific request or globally as command line option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com/a
HTTP 200

GET https://foo.com/b
[Options]
proxy: localhost:8888
HTTP 200

GET https://foo.com/c
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Reports&lt;/h2&gt; 
&lt;h3&gt;HTML Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-html build/report/ *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;JSON Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-json build/report/ *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;JUnit Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-junit build/report.xml *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;TAP Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-tap build/report.txt *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;JSON Output&lt;/h3&gt; 
&lt;p&gt;A structured output of running Hurl files can be obtained with &lt;a href="https://hurl.dev/docs/manual.html#json"&gt;&lt;code&gt;--json&lt;/code&gt; option&lt;/a&gt;. Each file will produce a JSON export of the run.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --json *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Others&lt;/h2&gt; 
&lt;h3&gt;HTTP Version&lt;/h3&gt; 
&lt;p&gt;Testing HTTP version (HTTP/1.0, HTTP/1.1, HTTP/2 or HTTP/3) can be done using implicit asserts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com
HTTP/3 200

GET https://bar.com
HTTP/2 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#version-status"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or explicit:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com
HTTP 200
[Asserts]
version == "3"

GET https://bar.com
HTTP 200
[Asserts]
version == "2"
version toFloat &amp;gt; 1.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#version-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;IP Address&lt;/h3&gt; 
&lt;p&gt;Testing the IP address of the response, as a string. This string may be IPv6 address:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com
HTTP 200
[Asserts]
ip == "2001:0db8:85a3:0000:0000:8a2e:0370:733"
ip startsWith "2001"
ip isIpv6
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Polling and Retry&lt;/h3&gt; 
&lt;p&gt;Retry request on any errors (asserts, captures, status code, runtime etc...):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Create a new job
POST https://api.example.org/jobs
HTTP 201
[Captures]
job_id: jsonpath "$.id"
[Asserts]
jsonpath "$.state" == "RUNNING"


# Pull job status until it is completed
GET https://api.example.org/jobs/{{job_id}}
[Options]
retry: 10   # maximum number of retry, -1 for unlimited
retry-interval: 500ms
HTTP 200
[Asserts]
jsonpath "$.state" == "COMPLETED"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/entry.html#retry"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Delaying Requests&lt;/h3&gt; 
&lt;p&gt;Add delay for every request, or a particular request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Delaying this request by 5 seconds (aka sleep)
GET https://example.org/turtle
[Options]
delay: 5s
HTTP 200

# No delay!
GET https://example.org/turtle
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#delay"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Skipping Requests&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# a, c, d are run, b is skipped
GET https://example.org/a

GET https://example.org/b
[Options]
skip: true

GET https://example.org/c

GET https://example.org/d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#skip"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Endpoint Performance&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://sample.org/helloworld
HTTP *
[Asserts]
duration &amp;lt; 1000   # Check that response time is less than one second
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#duration-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using SOAP APIs&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/InStock
Content-Type: application/soap+xml; charset=utf-8
SOAPAction: "http://www.w3.org/2003/05/soap-envelope"
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:m="https://example.org"&amp;gt;
  &amp;lt;soap:Header&amp;gt;&amp;lt;/soap:Header&amp;gt;
  &amp;lt;soap:Body&amp;gt;
    &amp;lt;m:GetStockPrice&amp;gt;
      &amp;lt;m:StockName&amp;gt;GOOG&amp;lt;/m:StockName&amp;gt;
    &amp;lt;/m:GetStockPrice&amp;gt;
  &amp;lt;/soap:Body&amp;gt;
&amp;lt;/soap:Envelope&amp;gt;
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#xml-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Capturing and Using a CSRF Token&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
[Captures]
csrf_token: xpath "string(//meta[@name='_csrf_token']/@content)"


POST https://example.org/login?user=toto&amp;amp;password=1234
X-CSRF-TOKEN: {{csrf_token}}
HTTP 302
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html#xpath-capture"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Redacting Secrets&lt;/h3&gt; 
&lt;p&gt;Using command-line for known values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --secret token=1234 file.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org
X-Token: {{token}}
{
  "name": "Alice",
  "value": 100
}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html#secrets"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;code&gt;redact&lt;/code&gt; for dynamic values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Get an authorization token:
GET https://example.org/token
HTTP 200
[Captures]
token: header "X-Token" redact

# Send an authorized request:
POST https://example.org
X-Token: {{token}}
{
  "name": "Alice",
  "value": 100
}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html#redacting-secrets"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Checking Byte Order Mark (BOM) in Response Body&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/data.bin
HTTP 200
[Asserts]
bytes startsWith hex,efbbbf;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#bytes-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;AWS Signature Version 4 Requests&lt;/h3&gt; 
&lt;p&gt;Generate signed API requests with &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html"&gt;AWS Signature Version 4&lt;/a&gt;, as used by several cloud providers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://sts.eu-central-1.amazonaws.com/
[Options]
aws-sigv4: aws:amz:eu-central-1:sts
[Form]
Action: GetCallerIdentity
Version: 2011-06-15
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Access Key is given per &lt;a href="https://hurl.dev/docs/manual.html#user"&gt;&lt;code&gt;--user&lt;/code&gt;&lt;/a&gt;, either with command line option or within the &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options]&lt;/code&gt;&lt;/a&gt; section:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://sts.eu-central-1.amazonaws.com/
[Options]
aws-sigv4: aws:amz:eu-central-1:sts
user: bob=secret
[Form]
Action: GetCallerIdentity
Version: 2011-06-15
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#aws-sigv4"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using curl Options&lt;/h3&gt; 
&lt;p&gt;curl options (for instance &lt;a href="https://hurl.dev/docs/manual.html#resolve"&gt;&lt;code&gt;--resolve&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://hurl.dev/docs/manual.html#connect-to"&gt;&lt;code&gt;--connect-to&lt;/code&gt;&lt;/a&gt;) can be used as CLI argument. In this case, they're applicable to each request of an Hurl file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --resolve foo.com:8000:127.0.0.1 foo.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options]&lt;/code&gt; section&lt;/a&gt; to configure a specific request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://bar.com
HTTP 200


GET http://foo.com:8000/resolve
[Options]
resolve: foo.com:8000:127.0.0.1
HTTP 200
`Hello World!`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#options"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Manual&lt;/h1&gt; 
&lt;h2&gt;Name&lt;/h2&gt; 
&lt;p&gt;hurl - run and test HTTP requests.&lt;/p&gt; 
&lt;h2&gt;Synopsis&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;hurl&lt;/strong&gt; [options] [FILE...]&lt;/p&gt; 
&lt;h2&gt;Description&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Hurl&lt;/strong&gt; is a command line tool that runs HTTP requests defined in a simple plain text format.&lt;/p&gt; 
&lt;p&gt;It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile, it can be used for fetching data and testing HTTP sessions: HTML content, REST / SOAP / GraphQL APIs, or any other XML / JSON based APIs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl session.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If no input files are specified, input is read from stdin.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ echo GET http://httpbin.org/get | hurl
    {
      "args": {},
      "headers": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip",
        "Content-Length": "0",
        "Host": "httpbin.org",
        "User-Agent": "hurl/0.99.10",
        "X-Amzn-Trace-Id": "Root=1-5eedf4c7-520814d64e2f9249ea44e0"
      },
      "origin": "1.2.3.4",
      "url": "http://httpbin.org/get"
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl can take files as input, or directories. In the latter case, Hurl will search files with &lt;code&gt;.hurl&lt;/code&gt; extension recursively.&lt;/p&gt; 
&lt;p&gt;Output goes to stdout by default. To have output go to a file, use the &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output"&gt;&lt;code&gt;-o, --output&lt;/code&gt;&lt;/a&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl -o output input.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, Hurl executes all HTTP requests and outputs the response body of the last HTTP call.&lt;/p&gt; 
&lt;p&gt;To have a test oriented output, you can use &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test"&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Hurl File Format&lt;/h2&gt; 
&lt;p&gt;The Hurl file format is fully documented in &lt;a href="https://hurl.dev/docs/hurl-file.html"&gt;https://hurl.dev/docs/hurl-file.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It consists of one or several HTTP requests&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org/endpoint1
GET http://example.org/endpoint2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Capturing values&lt;/h3&gt; 
&lt;p&gt;A value from an HTTP response can be-reused for successive HTTP requests.&lt;/p&gt; 
&lt;p&gt;A typical example occurs with CSRF tokens.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
# Capture the CSRF token value from html body.
[Captures]
csrf_token: xpath "normalize-space(//meta[@name='_csrf_token']/@content)"

# Do the login !
POST https://example.org/login?user=toto&amp;amp;password=1234
X-CSRF-TOKEN: {{csrf_token}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More information on captures can be found here &lt;a href="https://hurl.dev/docs/capturing-response.html"&gt;https://hurl.dev/docs/capturing-response.html&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Asserts&lt;/h3&gt; 
&lt;p&gt;The HTTP response defined in the Hurl file are used to make asserts. Responses are optional.&lt;/p&gt; 
&lt;p&gt;At the minimum, response includes assert on the HTTP status code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org
HTTP 301
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It can also include asserts on the response headers&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org
HTTP 301
Location: http://www.example.org
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Explicit asserts can be included by combining a query and a predicate&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org
HTTP 301
[Asserts]
xpath "string(//title)" == "301 Moved"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the addition of asserts, Hurl can be used as a testing tool to run scenarios.&lt;/p&gt; 
&lt;p&gt;More information on asserts can be found here &lt;a href="https://hurl.dev/docs/asserting-response.html"&gt;https://hurl.dev/docs/asserting-response.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;p&gt;Options that exist in curl have exactly the same semantics.&lt;/p&gt; 
&lt;p&gt;Options specified on the command line are defined for every Hurl file's entry, except if they are tagged as cli-only (can not be defined in the Hurl request [Options] entry)&lt;/p&gt; 
&lt;p&gt;For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --location foo.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will follow redirection for each entry in &lt;code&gt;foo.hurl&lt;/code&gt;. You can also define an option only for a particular entry with an &lt;code&gt;[Options]&lt;/code&gt; section. For instance, this Hurl file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 301

GET https://example.org
[Options]
location: true
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will follow a redirection only for the second entry.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#aws-sigv4" id="aws-sigv4"&gt;&lt;code&gt;--aws-sigv4 &amp;lt;PROVIDER1[:PROVIDER2[:REGION[:SERVICE]]]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate an &lt;code&gt;Authorization&lt;/code&gt; header with an AWS SigV4 signature.&lt;br /&gt;&lt;br /&gt;Use &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user"&gt;&lt;code&gt;-u, --user&lt;/code&gt;&lt;/a&gt; to specify Access Key Id (username) and Secret Key (password).&lt;br /&gt;&lt;br /&gt;To use temporary session credentials (e.g. for an AWS IAM Role), add the &lt;code&gt;X-Amz-Security-Token&lt;/code&gt; header containing the session token.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cacert" id="cacert"&gt;&lt;code&gt;--cacert &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specifies the certificate file for peer verification. The file may contain multiple CA certificates and must be in PEM format.&lt;br /&gt;Normally Hurl is built to use a default file for this, so this option is typically used to alter that default file.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cert" id="cert"&gt;&lt;code&gt;-E, --cert &amp;lt;CERTIFICATE[:PASSWORD]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Client certificate file and password.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#key"&gt;&lt;code&gt;--key&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#color" id="color"&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Colorize debug output (the HTTP response output is not colorized).&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#compressed" id="compressed"&gt;&lt;code&gt;--compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Request a compressed response using one of the algorithms br, gzip, deflate and automatically decompress the content.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-timeout" id="connect-timeout"&gt;&lt;code&gt;--connect-timeout &amp;lt;SECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum time in seconds that you allow Hurl's connection to take.&lt;br /&gt;&lt;br /&gt;You can specify time units in the connect timeout expression. Set Hurl to use a connect timeout of 20 seconds with &lt;code&gt;--connect-timeout 20s&lt;/code&gt; or set it to 35,000 milliseconds with &lt;code&gt;--connect-timeout 35000ms&lt;/code&gt;. No spaces allowed.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-time"&gt;&lt;code&gt;-m, --max-time&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-to" id="connect-to"&gt;&lt;code&gt;--connect-to &amp;lt;HOST1:PORT1:HOST2:PORT2&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead. This option can be used several times in a command line.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#resolve"&gt;&lt;code&gt;--resolve&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#continue-on-error" id="continue-on-error"&gt;&lt;code&gt;--continue-on-error&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Continue executing requests to the end of the Hurl file even when an assert error occurs.&lt;br /&gt;By default, Hurl exits after an assert error in the HTTP response.&lt;br /&gt;&lt;br /&gt;Note that this option does not affect the behavior with multiple input Hurl files.&lt;br /&gt;&lt;br /&gt;All the input files are executed independently. The result of one file does not affect the execution of the other Hurl files.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie" id="cookie"&gt;&lt;code&gt;-b, --cookie &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Read cookies from FILE (using the Netscape cookie file format).&lt;br /&gt;&lt;br /&gt;Combined with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie-jar"&gt;&lt;code&gt;-c, --cookie-jar&lt;/code&gt;&lt;/a&gt;, you can simulate a cookie storage between successive Hurl runs.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie-jar" id="cookie-jar"&gt;&lt;code&gt;-c, --cookie-jar &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Write cookies to FILE after running the session.&lt;br /&gt;The file will be written using the Netscape cookie file format.&lt;br /&gt;&lt;br /&gt;Combined with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie"&gt;&lt;code&gt;-b, --cookie&lt;/code&gt;&lt;/a&gt;, you can simulate a cookie storage between successive Hurl runs.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#curl" id="curl"&gt;&lt;code&gt;--curl &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Export each request to a list of curl commands.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#delay" id="delay"&gt;&lt;code&gt;--delay &amp;lt;MILLISECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Sets delay before each request (aka sleep). The delay is not applied to requests that have been retried because of &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry"&gt;&lt;code&gt;--retry&lt;/code&gt;&lt;/a&gt;. See &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry-interval"&gt;&lt;code&gt;--retry-interval&lt;/code&gt;&lt;/a&gt; to space retried requests.&lt;br /&gt;&lt;br /&gt;You can specify time units in the delay expression. Set Hurl to use a delay of 2 seconds with &lt;code&gt;--delay 2s&lt;/code&gt; or set it to 500 milliseconds with &lt;code&gt;--delay 500ms&lt;/code&gt;. No spaces allowed.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#error-format" id="error-format"&gt;&lt;code&gt;--error-format &amp;lt;FORMAT&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Control the format of error message (short by default or long)&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#file-root" id="file-root"&gt;&lt;code&gt;--file-root &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Set root directory to import files in Hurl. This is used for files in multipart form data, request body and response output.&lt;br /&gt;When it is not explicitly defined, files are relative to the Hurl file's directory.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#from-entry" id="from-entry"&gt;&lt;code&gt;--from-entry &amp;lt;ENTRY_NUMBER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Execute Hurl file from ENTRY_NUMBER (starting at 1).&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#glob" id="glob"&gt;&lt;code&gt;--glob &amp;lt;GLOB&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify input files that match the given glob pattern.&lt;br /&gt;&lt;br /&gt;Multiple glob flags may be used. This flag supports common Unix glob patterns like *, ? and [].&lt;br /&gt;However, to avoid your shell accidentally expanding glob patterns before Hurl handles them, you must use single quotes or double quotes around each pattern.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#header" id="header"&gt;&lt;code&gt;-H, --header &amp;lt;HEADER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add an extra header to include in information sent. Can be used several times in a command&lt;br /&gt;&lt;br /&gt;Do not add newlines or carriage returns&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http10" id="http10"&gt;&lt;code&gt;-0, --http1.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to use HTTP version 1.0 instead of using its internally preferred HTTP version.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http11" id="http11"&gt;&lt;code&gt;--http1.1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to use HTTP version 1.1.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http2" id="http2"&gt;&lt;code&gt;--http2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to use HTTP version 2.&lt;br /&gt;For HTTPS, this means Hurl negotiates HTTP/2 in the TLS handshake. Hurl does this by default.&lt;br /&gt;For HTTP, this means Hurl attempts to upgrade the request to HTTP/2 using the Upgrade: request header.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http3" id="http3"&gt;&lt;code&gt;--http3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to try HTTP/3 to the host in the URL, but fallback to earlier HTTP versions if the HTTP/3 connection establishment fails. HTTP/3 is only available for HTTPS and not for HTTP URLs.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ignore-asserts" id="ignore-asserts"&gt;&lt;code&gt;--ignore-asserts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Ignore all asserts defined in the Hurl file.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#include" id="include"&gt;&lt;code&gt;-i, --include&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Include the HTTP headers in the output&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#insecure" id="insecure"&gt;&lt;code&gt;-k, --insecure&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This option explicitly allows Hurl to perform "insecure" SSL connections and transfers.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ipv4" id="ipv4"&gt;&lt;code&gt;-4, --ipv4&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This option tells Hurl to use IPv4 addresses only when resolving host names, and not for example try IPv6.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ipv6" id="ipv6"&gt;&lt;code&gt;-6, --ipv6&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This option tells Hurl to use IPv6 addresses only when resolving host names, and not for example try IPv4.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#jobs" id="jobs"&gt;&lt;code&gt;--jobs &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum number of parallel jobs in parallel mode. Default value corresponds (in most cases) to the&lt;br /&gt;current amount of CPUs.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#parallel"&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json" id="json"&gt;&lt;code&gt;--json&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Output each Hurl file result to JSON. The format is very closed to HAR format.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#key" id="key"&gt;&lt;code&gt;--key &amp;lt;KEY&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Private key file name.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#limit-rate" id="limit-rate"&gt;&lt;code&gt;--limit-rate &amp;lt;SPEED&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify the maximum transfer rate you want Hurl to use, for both downloads and uploads. This feature is useful if you have a limited pipe and you would like your transfer not to use your entire bandwidth. To make it slower than it otherwise would be.&lt;br /&gt;The given speed is measured in bytes/second.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location" id="location"&gt;&lt;code&gt;-L, --location&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Follow redirect. To limit the amount of redirects to follow use the &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-redirs"&gt;&lt;code&gt;--max-redirs&lt;/code&gt;&lt;/a&gt; option&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location-trusted" id="location-trusted"&gt;&lt;code&gt;--location-trusted&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location"&gt;&lt;code&gt;-L, --location&lt;/code&gt;&lt;/a&gt;, but allows sending the name + password to all hosts that the site may redirect to.&lt;br /&gt;This may or may not introduce a security breach if the site redirects you to a site to which you send your authentication info (which is plaintext in the case of HTTP Basic authentication).&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-filesize" id="max-filesize"&gt;&lt;code&gt;--max-filesize &amp;lt;BYTES&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify the maximum size in bytes of a file to download. If the file requested is larger than this value, the transfer does not start.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-redirs" id="max-redirs"&gt;&lt;code&gt;--max-redirs &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Set maximum number of redirection-followings allowed&lt;br /&gt;&lt;br /&gt;By default, the limit is set to 50 redirections. Set this option to -1 to make it unlimited.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-time" id="max-time"&gt;&lt;code&gt;-m, --max-time &amp;lt;SECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum time in seconds that you allow a request/response to take. This is the standard timeout.&lt;br /&gt;&lt;br /&gt;You can specify time units in the maximum time expression. Set Hurl to use a maximum time of 20 seconds with &lt;code&gt;--max-time 20s&lt;/code&gt; or set it to 35,000 milliseconds with &lt;code&gt;--max-time 35000ms&lt;/code&gt;. No spaces allowed.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-timeout"&gt;&lt;code&gt;--connect-timeout&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#negotiate" id="negotiate"&gt;&lt;code&gt;--negotiate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tell Hurl to use Negotiate (SPNEGO) authentication.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc" id="netrc"&gt;&lt;code&gt;-n, --netrc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scan the .netrc file in the user's home directory for the username and password.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-file"&gt;&lt;code&gt;--netrc-file&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-optional"&gt;&lt;code&gt;--netrc-optional&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-file" id="netrc-file"&gt;&lt;code&gt;--netrc-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc"&gt;&lt;code&gt;--netrc&lt;/code&gt;&lt;/a&gt;, but provide the path to the netrc file.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-optional"&gt;&lt;code&gt;--netrc-optional&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-optional" id="netrc-optional"&gt;&lt;code&gt;--netrc-optional&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Similar to &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc"&gt;&lt;code&gt;--netrc&lt;/code&gt;&lt;/a&gt;, but make the .netrc usage optional.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-file"&gt;&lt;code&gt;--netrc-file&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color" id="no-color"&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Do not colorize output.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-output" id="no-output"&gt;&lt;code&gt;--no-output&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Suppress output. By default, Hurl outputs the body of the last response.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-pretty" id="no-pretty"&gt;&lt;code&gt;--no-pretty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Do not prettify response output for supported content type (JSON only for the moment). By default, output is prettified if&lt;br /&gt;standard output is a terminal.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#noproxy" id="noproxy"&gt;&lt;code&gt;--noproxy &amp;lt;HOST(S)&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Comma-separated list of hosts which do not use a proxy.&lt;br /&gt;&lt;br /&gt;Override value from Environment variable no_proxy.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ntlm" id="ntlm"&gt;&lt;code&gt;--ntlm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tell Hurl to use NTLM authentication&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output" id="output"&gt;&lt;code&gt;-o, --output &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Write output to FILE instead of stdout. Use '-' for stdout in [Options] sections.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#parallel" id="parallel"&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Run files in parallel.&lt;br /&gt;&lt;br /&gt;Each Hurl file is executed in its own worker thread, without sharing anything with the other workers. The default run mode is sequential. Parallel execution is by default in &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test"&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt; mode.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#jobs"&gt;&lt;code&gt;--jobs&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#path-as-is" id="path-as-is"&gt;&lt;code&gt;--path-as-is&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tell Hurl to not handle sequences of /../ or /./ in the given URL path. Normally Hurl will squash or merge them according to standards but with this option set you tell it not to do that.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#pinnedpubkey" id="pinnedpubkey"&gt;&lt;code&gt;--pinnedpubkey &amp;lt;HASHES&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key is extracted from this certificate and if it does not exactly match the public key provided to this option, Hurl aborts the connection before sending or receiving any data.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#pretty" id="pretty"&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Prettify response output for supported content type (JSON only for the moment). By default, JSON response is prettified if standard output is a terminal, and colorized, see&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color"&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; to format without color.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#progress-bar" id="progress-bar"&gt;&lt;code&gt;--progress-bar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Display a progress bar in test mode. The progress bar is displayed only in interactive TTYs. This option forces the progress bar to be displayed even in non-interactive TTYs.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#proxy" id="proxy"&gt;&lt;code&gt;-x, --proxy &amp;lt;[PROTOCOL://]HOST[:PORT]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use the specified proxy.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#repeat" id="repeat"&gt;&lt;code&gt;--repeat &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Repeat the input files sequence NUM times, -1 for infinite loop. Given a.hurl, b.hurl, c.hurl as input, repeat two&lt;br /&gt;times will run a.hurl, b.hurl, c.hurl, a.hurl, b.hurl, c.hurl.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-html" id="report-html"&gt;&lt;code&gt;--report-html &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate HTML report in DIR.&lt;br /&gt;&lt;br /&gt;If the HTML report already exists, it will be updated with the new test results.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-json" id="report-json"&gt;&lt;code&gt;--report-json &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate JSON report in DIR.&lt;br /&gt;&lt;br /&gt;If the JSON report already exists, it will be updated with the new test results.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-junit" id="report-junit"&gt;&lt;code&gt;--report-junit &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate JUnit File.&lt;br /&gt;&lt;br /&gt;If the FILE report already exists, it will be updated with the new test results.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-tap" id="report-tap"&gt;&lt;code&gt;--report-tap &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate TAP report.&lt;br /&gt;&lt;br /&gt;If the FILE report already exists, it will be updated with the new test results.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#resolve" id="resolve"&gt;&lt;code&gt;--resolve &amp;lt;HOST:PORT:ADDR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Provide a custom address for a specific host and port pair. Using this, you can make the Hurl requests(s) use a specified address and prevent the otherwise normally resolved address to be used. Consider it a sort of /etc/hosts alternative provided on the command line.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry" id="retry"&gt;&lt;code&gt;--retry &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum number of retries, 0 for no retries, -1 for unlimited retries. Retry happens if any error occurs (asserts, captures, runtimes etc...).&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry-interval" id="retry-interval"&gt;&lt;code&gt;--retry-interval &amp;lt;MILLISECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Duration in milliseconds between each retry. Default is 1000 ms.&lt;br /&gt;&lt;br /&gt;You can specify time units in the retry interval expression. Set Hurl to use a retry interval of 2 seconds with &lt;code&gt;--retry-interval 2s&lt;/code&gt; or set it to 500 milliseconds with &lt;code&gt;--retry-interval 500ms&lt;/code&gt;. No spaces allowed.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#secret" id="secret"&gt;&lt;code&gt;--secret &amp;lt;NAME=VALUE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Define secret value to be redacted from logs and report. When defined, secrets can be used as variable everywhere variables are used.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#secrets-file" id="secrets-file"&gt;&lt;code&gt;--secrets-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Define a secrets file in which you define your secrets&lt;br /&gt;&lt;br /&gt;Each secret is defined as name=value exactly as with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#secret"&gt;&lt;code&gt;--secret&lt;/code&gt;&lt;/a&gt; option.&lt;br /&gt;&lt;br /&gt;Note that defining a secret twice produces an error.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ssl-no-revoke" id="ssl-no-revoke"&gt;&lt;code&gt;--ssl-no-revoke&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;(Windows) This option tells Hurl to disable certificate revocation checks. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test" id="test"&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Activate test mode: with this, the HTTP response is not outputted anymore, progress is reported for each Hurl file tested, and a text summary is displayed when all files have been run.&lt;br /&gt;&lt;br /&gt;In test mode, files are executed in parallel. To run test in a sequential way use &lt;code&gt;--job 1&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#jobs"&gt;&lt;code&gt;--jobs&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#to-entry" id="to-entry"&gt;&lt;code&gt;--to-entry &amp;lt;ENTRY_NUMBER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Execute Hurl file to ENTRY_NUMBER (starting at 1).&lt;br /&gt;Ignore the remaining of the file. It is useful for debugging a session.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#unix-socket" id="unix-socket"&gt;&lt;code&gt;--unix-socket &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;(HTTP) Connect through this Unix domain socket, instead of using the network.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user" id="user"&gt;&lt;code&gt;-u, --user &amp;lt;USER:PASSWORD&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add basic Authentication header to each request.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user-agent" id="user-agent"&gt;&lt;code&gt;-A, --user-agent &amp;lt;NAME&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify the User-Agent string to send to the HTTP server.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable" id="variable"&gt;&lt;code&gt;--variable &amp;lt;NAME=VALUE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Define variable (name/value) to be used in Hurl templates.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variables-file" id="variables-file"&gt;&lt;code&gt;--variables-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Set properties file in which your define your variables.&lt;br /&gt;&lt;br /&gt;Each variable is defined as name=value exactly as with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable"&gt;&lt;code&gt;--variable&lt;/code&gt;&lt;/a&gt; option.&lt;br /&gt;&lt;br /&gt;Note that defining a variable twice produces an error.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose" id="verbose"&gt;&lt;code&gt;-v, --verbose&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Turn on verbose output on standard error stream.&lt;br /&gt;Useful for debugging.&lt;br /&gt;&lt;br /&gt;A line starting with '&amp;gt;' means data sent by Hurl.&lt;br /&gt;A line staring with '&amp;lt;' means data received by Hurl.&lt;br /&gt;A line starting with '*' means additional info provided by Hurl.&lt;br /&gt;&lt;br /&gt;If you only want HTTP headers in the output, &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#include"&gt;&lt;code&gt;-i, --include&lt;/code&gt;&lt;/a&gt; might be the option you're looking for.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#very-verbose" id="very-verbose"&gt;&lt;code&gt;--very-verbose&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Turn on more verbose output on standard error stream.&lt;br /&gt;&lt;br /&gt;In contrast to &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose"&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt; option, this option outputs the full HTTP body request and response on standard error. In addition, lines starting with '**' are libcurl debug logs.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#help" id="help"&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Usage help. This lists all current command line options with a short description.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#version" id="version"&gt;&lt;code&gt;-V, --version&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Prints version information&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Environment&lt;/h2&gt; 
&lt;p&gt;Environment variables can only be specified in lowercase.&lt;/p&gt; 
&lt;p&gt;Using an environment variable to set the proxy has the same effect as using the &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#proxy"&gt;&lt;code&gt;-x, --proxy&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;http_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the proxy server to use for HTTP.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;https_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the proxy server to use for HTTPS.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;all_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the proxy server to use if no protocol-specific proxy is set.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;no_proxy &amp;lt;comma-separated list of hosts&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;List of host names that shouldn't go through any proxy.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HURL_name value&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Define variable (name/value) to be used in Hurl templates. This is similar than &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable"&gt;&lt;code&gt;--variable&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variables-file"&gt;&lt;code&gt;--variables-file&lt;/code&gt;&lt;/a&gt; options.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NO_COLOR&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When set to a non-empty string, do not colorize output (see &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color"&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; option).&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Exit Codes&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Success.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Failed to parse command-line options.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Input File Parsing Error.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Runtime error (such as failure to connect to host).&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Assert Error.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;WWW&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev"&gt;https://hurl.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;See Also&lt;/h2&gt; 
&lt;p&gt;curl(1) hurlfmt(1)&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Binaries Installation&lt;/h2&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;Precompiled binary (depending on libc &amp;gt;=2.35) is available at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ INSTALL_DIR=/tmp
$ VERSION=7.0.0
$ curl --silent --location https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl-$VERSION-x86_64-unknown-linux-gnu.tar.gz | tar xvz -C $INSTALL_DIR
$ export PATH=$INSTALL_DIR/hurl-$VERSION-x86_64-unknown-linux-gnu/bin:$PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Debian / Ubuntu&lt;/h4&gt; 
&lt;p&gt;For Debian &amp;gt;=12 / Ubuntu &amp;gt;=22.04, Hurl can be installed using a binary .deb file provided in each Hurl release.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ VERSION=7.0.0
$ curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl_${VERSION}_amd64.deb
$ sudo apt update &amp;amp;&amp;amp; sudo apt install ./hurl_${VERSION}_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Ubuntu &amp;gt;=18.04, Hurl can be installed from &lt;code&gt;ppa:lepapareil/hurl&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ VERSION=7.0.0
$ sudo apt-add-repository -y ppa:lepapareil/hurl
$ sudo apt install hurl="${VERSION}"*
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Alpine&lt;/h4&gt; 
&lt;p&gt;Hurl is available on &lt;code&gt;testing&lt;/code&gt; channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arch Linux / Manjaro&lt;/h4&gt; 
&lt;p&gt;Hurl is available on &lt;a href="https://archlinux.org/packages/extra/x86_64/hurl/"&gt;extra&lt;/a&gt; channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ pacman -Sy hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;NixOS / Nix&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://search.nixos.org/packages?from=0&amp;amp;size=1&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=hurl"&gt;NixOS / Nix package&lt;/a&gt; is available on stable channel.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;p&gt;Precompiled binaries for Intel and ARM CPUs are available at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Homebrew&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ brew install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;MacPorts&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo port install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo pkg install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Windows requires the &lt;a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#latest-microsoft-visual-c-redistributable-version"&gt;Visual C++ Redistributable Package&lt;/a&gt; to be installed manually, as this is not included in the installer.&lt;/p&gt; 
&lt;h4&gt;Zip File&lt;/h4&gt; 
&lt;p&gt;Hurl can be installed from a standalone zip file at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;. You will need to update your &lt;code&gt;PATH&lt;/code&gt; variable.&lt;/p&gt; 
&lt;h4&gt;Installer&lt;/h4&gt; 
&lt;p&gt;An executable installer is also available at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Chocolatey&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ choco install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Scoop&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ scoop install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Windows Package Manager&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ winget install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cargo&lt;/h3&gt; 
&lt;p&gt;If you're a Rust programmer, Hurl can be installed with cargo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cargo install --locked hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;conda-forge&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ conda install -c conda-forge hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl can also be installed with &lt;a href="https://conda-forge.org"&gt;&lt;code&gt;conda-forge&lt;/code&gt;&lt;/a&gt; powered package manager like &lt;a href="https://prefix.dev"&gt;&lt;code&gt;pixi&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ docker pull ghcr.io/orange-opensource/hurl:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;npm&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ npm install --save-dev @orangeopensource/hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building From Sources&lt;/h2&gt; 
&lt;p&gt;Hurl sources are available in &lt;a href="https://github.com/Orange-OpenSource/hurl"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Build on Linux&lt;/h3&gt; 
&lt;p&gt;Hurl depends on libssl, libcurl and libxml2 native libraries. You will need their development files in your platform.&lt;/p&gt; 
&lt;h4&gt;Debian based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apt install -y build-essential pkg-config libssl-dev libcurl4-openssl-dev libxml2-dev libclang-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fedora based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ dnf install -y pkgconf-pkg-config gcc openssl-devel libxml2-devel clang-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Red Hat based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ yum install -y pkg-config gcc openssl-devel libxml2-devel clang-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arch based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ pacman -S --noconfirm pkgconf gcc glibc openssl libxml2 clang
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Alpine based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apk add curl-dev gcc libxml2-dev musl-dev openssl-dev clang-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build on macOS&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ xcode-select --install
$ brew install pkg-config
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl is written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;. You should &lt;a href="https://www.rust-lang.org/tools/install"&gt;install&lt;/a&gt; the latest stable release.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ curl https://sh.rustup.rs -sSf | sh -s -- -y
$ source $HOME/.cargo/env
$ rustc --version
$ cargo --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then build hurl:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ git clone https://github.com/Orange-OpenSource/hurl
$ cd hurl
$ cargo build --release
$ ./target/release/hurl --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build on Windows&lt;/h3&gt; 
&lt;p&gt;Please follow the &lt;a href="https://github.com/Orange-OpenSource/hurl/raw/master/contrib/windows/README.md"&gt;contrib on Windows section&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sigp/lighthouse</title>
      <link>https://github.com/sigp/lighthouse</link>
      <description>&lt;p&gt;Ethereum consensus client in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lighthouse: Ethereum consensus client&lt;/h1&gt; 
&lt;p&gt;An open-source Ethereum consensus client, written in Rust and maintained by Sigma Prime.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://lighthouse-book.sigmaprime.io"&gt;&lt;img src="https://img.shields.io/badge/user--docs-unstable-informational" alt="Book Status" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/cyAszAh"&gt;&lt;img src="https://img.shields.io/badge/chat-discord-%237289da" alt="Chat Badge" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://lighthouse-book.sigmaprime.io"&gt;Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://i.postimg.cc/hjdTGKPd/photo-2020-10-23-09-52-16.jpg" alt="Banner" /&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Lighthouse is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ready for use on Ethereum consensus mainnet.&lt;/li&gt; 
 &lt;li&gt;Fully open-source, licensed under Apache 2.0.&lt;/li&gt; 
 &lt;li&gt;Security-focused. Fuzzing techniques have been continuously applied and several external security reviews have been performed.&lt;/li&gt; 
 &lt;li&gt;Built in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;, a modern language providing unique safety guarantees and excellent performance (comparable to C++).&lt;/li&gt; 
 &lt;li&gt;Funded by various organisations, including Sigma Prime, the Ethereum Foundation, Consensys, the Decentralization Foundation and private individuals.&lt;/li&gt; 
 &lt;li&gt;Actively involved in the specification and security analysis of the Ethereum proof-of-stake consensus specification.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Staking Deposit Contract&lt;/h2&gt; 
&lt;p&gt;The Lighthouse team acknowledges &lt;a href="https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa"&gt;&lt;code&gt;0x00000000219ab540356cBB839Cbe05303d7705Fa&lt;/code&gt;&lt;/a&gt; as the canonical staking deposit contract address.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://lighthouse-book.sigmaprime.io"&gt;Lighthouse Book&lt;/a&gt; contains information for users and developers.&lt;/p&gt; 
&lt;p&gt;The Lighthouse team maintains a blog at &lt;a href="https://lighthouse-blog.sigmaprime.io"&gt;https://blog.sigmaprime.io/tag/lighthouse&lt;/a&gt; which contains periodic progress updates, roadmap insights and interesting findings.&lt;/p&gt; 
&lt;h2&gt;Branches&lt;/h2&gt; 
&lt;p&gt;Lighthouse maintains two permanent branches:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigp/lighthouse/tree/stable"&gt;&lt;code&gt;stable&lt;/code&gt;&lt;/a&gt;: Always points to the latest stable release. 
  &lt;ul&gt; 
   &lt;li&gt;This is ideal for most users.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigp/lighthouse/tree/unstable"&gt;&lt;code&gt;unstable&lt;/code&gt;&lt;/a&gt;: Used for development, contains the latest PRs. 
  &lt;ul&gt; 
   &lt;li&gt;Developers should base their PRs on this branch.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Lighthouse welcomes contributors.&lt;/p&gt; 
&lt;p&gt;If you are looking to contribute, please head to the &lt;a href="https://lighthouse-book.sigmaprime.io/contributing.html"&gt;Contributing&lt;/a&gt; section of the Lighthouse book.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;The best place for discussion is the &lt;a href="https://discord.gg/cyAszAh"&gt;Lighthouse Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Sign up to the &lt;a href="https://eepurl.com/dh9Lvb"&gt;Lighthouse Development Updates&lt;/a&gt; mailing list for email notifications about releases, network status and other important information.&lt;/p&gt; 
&lt;p&gt;Encrypt sensitive messages using our &lt;a href="https://keybase.io/sigp/pgp_keys.asc?fingerprint=15e66d941f697e28f49381f426416dc3f30674b0"&gt;PGP key&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Donations&lt;/h2&gt; 
&lt;p&gt;Lighthouse is an open-source project and a public good. Funding public goods is hard and we're grateful for the donations we receive from the community via:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://gitcoin.co/grants/25/lighthouse-ethereum-20-client"&gt;Gitcoin Grants&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Ethereum address: &lt;code&gt;0x25c4a76E7d118705e7Ea2e9b7d8C59930d8aCD3b&lt;/code&gt; (donation.sigmaprime.eth).&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>uutils/coreutils</title>
      <link>https://github.com/uutils/coreutils</link>
      <description>&lt;p&gt;Cross-platform Rust rewrite of the GNU coreutils&lt;/p&gt;&lt;hr&gt;&lt;div class="oranda-hide"&gt; 
 &lt;div align="center"&gt; 
  &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/logo.svg?sanitize=true" alt="uutils logo" /&gt;&lt;/p&gt; 
  &lt;h1&gt;uutils coreutils&lt;/h1&gt; 
  &lt;p&gt;&lt;a href="https://crates.io/crates/coreutils"&gt;&lt;img src="https://img.shields.io/crates/v/coreutils.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/wQVJbvJ"&gt;&lt;img src="https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&amp;amp;longCache=true&amp;amp;style=flat" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://github.com/uutils/coreutils/raw/main/LICENSE"&gt;&lt;img src="http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://deps.rs/repo/github/uutils/coreutils"&gt;&lt;img src="https://deps.rs/repo/github/uutils/coreutils/status.svg?sanitize=true" alt="dependency status" /&gt;&lt;/a&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;a href="https://codecov.io/gh/uutils/coreutils"&gt;&lt;img src="https://codecov.io/gh/uutils/coreutils/branch/master/graph/badge.svg?sanitize=true" alt="CodeCov" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/MSRV-1.85.0-brightgreen" alt="MSRV" /&gt; &lt;a href="https://hosted.weblate.org/projects/rust-coreutils/"&gt;&lt;img src="https://hosted.weblate.org/widget/rust-coreutils/svg-badge.svg?sanitize=true" alt="Weblate" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p&gt;uutils coreutils is a cross-platform reimplementation of the GNU coreutils in &lt;a href="http://www.rust-lang.org"&gt;Rust&lt;/a&gt;. While all programs have been implemented, some options might be missing or different behavior might be experienced.&lt;/p&gt; 
&lt;div class="oranda-hide"&gt; 
 &lt;p&gt;To install it:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install coreutils
~/.cargo/bin/coreutils
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;!-- markdownlint-disable-next-line MD026 --&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;uutils coreutils aims to be a drop-in replacement for the GNU utils. Differences with GNU are treated as bugs.&lt;/p&gt; 
&lt;p&gt;Our key objectives include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Matching GNU's output (stdout and error code) exactly&lt;/li&gt; 
 &lt;li&gt;Better error messages&lt;/li&gt; 
 &lt;li&gt;Providing comprehensive internationalization support (UTF-8)&lt;/li&gt; 
 &lt;li&gt;Improved performances&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/extensions.md"&gt;Extensions&lt;/a&gt; when relevant (example: --progress)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uutils aims to work on as many platforms as possible, to be able to use the same utils on Linux, macOS, Windows and other platforms. This ensures, for example, that scripts can be easily transferred between platforms.&lt;/p&gt; 
&lt;div class="oranda-hide"&gt; 
 &lt;h2&gt;Documentation&lt;/h2&gt; 
 &lt;p&gt;uutils has both user and developer documentation available:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://uutils.github.io/coreutils/docs/"&gt;User Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://docs.rs/crate/coreutils/"&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Both can also be generated locally, the instructions for that can be found in the &lt;a href="https://github.com/uutils/uutils.github.io"&gt;coreutils docs&lt;/a&gt; repository.&lt;/p&gt; 
 &lt;p&gt;Use &lt;a href="https://hosted.weblate.org/projects/rust-coreutils/"&gt;weblate/rust-coreutils&lt;/a&gt; to translate the Rust coreutils into your language.&lt;/p&gt; 
 &lt;!-- ANCHOR: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;Requirements&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Rust (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;GNU Make (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Rust Version&lt;/h3&gt; 
 &lt;p&gt;uutils follows Rust's release channels and is tested against stable, beta and nightly. The current Minimum Supported Rust Version (MSRV) is &lt;code&gt;1.85.0&lt;/code&gt;.&lt;/p&gt; 
 &lt;h2&gt;Building&lt;/h2&gt; 
 &lt;p&gt;There are currently two methods to build the uutils binaries: either Cargo or GNU Make.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Building the full package, including all documentation, requires both Cargo and GNU Make on a Unix platform.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;For either method, we first need to fetch the repository:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/uutils/coreutils
cd coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Cargo&lt;/h3&gt; 
 &lt;p&gt;Building uutils using Cargo is easy because the process is the same as for every other Rust program:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command builds the most portable common core set of uutils into a multicall (BusyBox-type) binary, named 'coreutils', on most Rust-supported platforms.&lt;/p&gt; 
 &lt;p&gt;Additional platform-specific uutils are often available. Building these expanded sets of uutils for a platform (on that platform) is as simple as specifying it as a feature:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release --features macos
# or ...
cargo build --release --features windows
# or ...
cargo build --release --features unix
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don't want to build every utility available on your platform into the final binary, you can also specify which ones you want to build manually. For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --features "base32 cat echo rm" --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don't want to build the multicall binary and would prefer to build the utilities as individual binaries, that is also possible. Each utility is contained in its own package within the main repository, named "uu_UTILNAME". To build individual utilities, use cargo to build just the specific packages (using the &lt;code&gt;--package&lt;/code&gt; [aka &lt;code&gt;-p&lt;/code&gt;] option). For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build -p uu_base32 -p uu_cat -p uu_echo -p uu_rm
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;GNU Make&lt;/h3&gt; 
 &lt;p&gt;Building using &lt;code&gt;make&lt;/code&gt; is a simple process as well.&lt;/p&gt; 
 &lt;p&gt;To simply build all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;In release mode:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROFILE=release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make SKIP_UTILS='UTILITY_1 UTILITY_2'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make UTILS='UTILITY_1 UTILITY_2'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Installation&lt;/h2&gt; 
 &lt;h3&gt;Install with Cargo&lt;/h3&gt; 
 &lt;p&gt;Likewise, installing can simply be done using:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install --path . --locked
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command will install uutils into Cargo's &lt;em&gt;bin&lt;/em&gt; folder (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;$HOME/.cargo/bin&lt;/code&gt;).&lt;/p&gt; 
 &lt;p&gt;This does not install files necessary for shell completion or manpages. For manpages or shell completion to work, use &lt;code&gt;GNU Make&lt;/code&gt; or see &lt;code&gt;Manually install shell completions&lt;/code&gt;/&lt;code&gt;Manually install manpages&lt;/code&gt;.&lt;/p&gt; 
 &lt;h3&gt;Install with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To install all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install using &lt;code&gt;sudo&lt;/code&gt; switch &lt;code&gt;-E&lt;/code&gt; must be used:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;sudo -E make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make SKIP_UTILS='UTILITY_1 UTILITY_2' install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make UTILS='UTILITY_1 UTILITY_2' install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install every program with a prefix (e.g. uu-echo uu-cat):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROG_PREFIX=PREFIX_GOES_HERE install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make MULTICALL=y install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Set install parent directory (default value is /usr/local):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# DESTDIR is also supported
make PREFIX=/my/path install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Installing with &lt;code&gt;make&lt;/code&gt; installs shell completions for all installed utilities for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;. Completions for &lt;code&gt;elvish&lt;/code&gt; and &lt;code&gt;powershell&lt;/code&gt; can also be generated; See &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;To skip installation of completions and manpages:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make COMPLETIONS=n MANPAGES=n install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install shell completions&lt;/h3&gt; 
 &lt;p&gt;The &lt;code&gt;coreutils&lt;/code&gt; binary can generate completions for the &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;elvish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; shells. It prints the result to stdout.&lt;/p&gt; 
 &lt;p&gt;The syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run completion &amp;lt;utility&amp;gt; &amp;lt;shell&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install completions for &lt;code&gt;ls&lt;/code&gt; on &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;/usr/local/share/bash-completion/completions/ls&lt;/code&gt;, run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run completion ls bash &amp;gt; /usr/local/share/bash-completion/completions/ls
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install manpages&lt;/h3&gt; 
 &lt;p&gt;To generate manpages, the syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo run manpage &amp;lt;utility&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install the manpage for &lt;code&gt;ls&lt;/code&gt; to &lt;code&gt;/usr/local/share/man/man1/ls.1&lt;/code&gt; run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo run manpage ls &amp;gt; /usr/local/share/man/man1/ls.1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Un-installation&lt;/h2&gt; 
 &lt;p&gt;Un-installation differs depending on how you have installed uutils. If you used Cargo to install, use Cargo to uninstall. If you used GNU Make to install, use Make to uninstall.&lt;/p&gt; 
 &lt;h3&gt;Uninstall with Cargo&lt;/h3&gt; 
 &lt;p&gt;To uninstall uutils:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo uninstall coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Uninstall with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To uninstall all utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall every program with a set prefix:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROG_PREFIX=PREFIX_GOES_HERE uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make MULTICALL=y uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall from a custom parent directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# DESTDIR is also supported
make PREFIX=/my/path uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- ANCHOR_END: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;GNU test suite compatibility&lt;/h2&gt; 
 &lt;p&gt;Below is the evolution of how many GNU tests uutils passes. A more detailed breakdown of the GNU test results of the main branch can be found &lt;a href="https://uutils.github.io/coreutils/docs/test_coverage.html"&gt;in the user manual&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href="https://github.com/orgs/uutils/projects/1"&gt;https://github.com/orgs/uutils/projects/1&lt;/a&gt; for the main meta bugs (many are missing).&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://github.com/uutils/coreutils-tracking/raw/main/gnu-results.svg?raw=true" alt="Evolution over time" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- close oranda-hide div --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To contribute to uutils, please see &lt;a href="https://raw.githubusercontent.com/uutils/coreutils/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uutils is licensed under the MIT License - see the &lt;code&gt;LICENSE&lt;/code&gt; file for details&lt;/p&gt; 
&lt;p&gt;GNU Coreutils is licensed under the GPL 3.0 or later.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dani-garcia/vaultwarden</title>
      <link>https://github.com/dani-garcia/vaultwarden</link>
      <description>&lt;p&gt;Unofficial Bitwarden compatible server written in Rust, formerly known as bitwarden_rs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/dani-garcia/vaultwarden/main/resources/vaultwarden-logo-auto.svg?sanitize=true" alt="Vaultwarden Logo" /&gt;&lt;/p&gt; 
&lt;p&gt;An alternative server implementation of the Bitwarden Client API, written in Rust and compatible with &lt;a href="https://bitwarden.com/download/"&gt;official Bitwarden clients&lt;/a&gt; [&lt;a href="https://raw.githubusercontent.com/dani-garcia/vaultwarden/main/#disclaimer"&gt;disclaimer&lt;/a&gt;], perfect for self-hosted deployment where running the official resource-heavy service might not be ideal.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href="https://github.com/dani-garcia/vaultwarden/releases/latest"&gt;&lt;img src="https://img.shields.io/github/release/dani-garcia/vaultwarden.svg?style=for-the-badge&amp;amp;logo=vaultwarden&amp;amp;color=005AA4" alt="GitHub Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/pkgs/container/vaultwarden"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4&amp;amp;url=https%3A%2F%2Fipitio.github.io%2Fbackage%2Fdani-garcia%2Fvaultwarden%2Fvaultwarden.json&amp;amp;query=%24.downloads&amp;amp;label=ghcr.io%20pulls&amp;amp;cacheSeconds=14400" alt="ghcr.io Pulls" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/vaultwarden/server"&gt;&lt;img src="https://img.shields.io/docker/pulls/vaultwarden/server.svg?style=for-the-badge&amp;amp;logo=docker&amp;amp;logoColor=fff&amp;amp;color=005AA4&amp;amp;label=docker.io%20pulls" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://quay.io/repository/vaultwarden/server"&gt;&lt;img src="https://img.shields.io/badge/quay.io-download-005AA4?style=for-the-badge&amp;amp;logo=redhat&amp;amp;cacheSeconds=14400" alt="Quay.io" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors-anon/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=vaultwarden&amp;amp;color=005AA4" alt="Contributors" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/network/members"&gt;&lt;img src="https://img.shields.io/github/forks/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4" alt="Forks" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4" alt="Stars" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/issues"&gt;&lt;img src="https://img.shields.io/github/issues/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4&amp;amp;cacheSeconds=300" alt="Issues Open" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/issues?q=is%3Aissue+is%3Aclosed"&gt;&lt;img src="https://img.shields.io/github/issues-closed/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4&amp;amp;cacheSeconds=300" alt="Issues Closed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/raw/main/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/github/license/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=vaultwarden&amp;amp;color=944000&amp;amp;cacheSeconds=14400" alt="AGPL-3.0 Licensed" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://deps.rs/repo/github/dani-garcia/vaultwarden"&gt;&lt;img src="https://img.shields.io/badge/dynamic/xml?url=https%3A%2F%2Fdeps.rs%2Frepo%2Fgithub%2Fdani-garcia%2Fvaultwarden%2Fstatus.svg&amp;amp;query=%2F*%5Blocal-name()%3D'svg'%5D%2F*%5Blocal-name()%3D'g'%5D%5B2%5D%2F*%5Blocal-name()%3D'text'%5D%5B4%5D&amp;amp;style=flat-square&amp;amp;logo=rust&amp;amp;label=dependencies&amp;amp;color=005AA4" alt="Dependency Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/actions/workflows/release.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/dani-garcia/vaultwarden/release.yml?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;label=Release%20Workflow" alt="GHA Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/actions/workflows/build.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/dani-garcia/vaultwarden/build.yml?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;label=Build%20Workflow" alt="GHA Build" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://matrix.to/#/#vaultwarden:matrix.org"&gt;&lt;img src="https://img.shields.io/matrix/vaultwarden:matrix.org.svg?style=flat-square&amp;amp;logo=matrix&amp;amp;logoColor=fff&amp;amp;color=953B00&amp;amp;cacheSeconds=14400" alt="Matrix Chat" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/discussions"&gt;&lt;img src="https://img.shields.io/github/discussions/dani-garcia/vaultwarden?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=953B00&amp;amp;cacheSeconds=300" alt="GitHub Discussions" /&gt;&lt;/a&gt; &lt;a href="https://vaultwarden.discourse.group/"&gt;&lt;img src="https://img.shields.io/discourse/topics?server=https%3A%2F%2Fvaultwarden.discourse.group%2F&amp;amp;style=flat-square&amp;amp;logo=discourse&amp;amp;color=953B00" alt="Discourse Discussions" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] &lt;strong&gt;When using this server, please report any bugs or suggestions directly to us (see &lt;a href="https://raw.githubusercontent.com/dani-garcia/vaultwarden/main/#get-in-touch"&gt;Get in touch&lt;/a&gt;), regardless of whatever clients you are using (mobile, desktop, browser...). DO NOT use the official Bitwarden support channels.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br /&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;A nearly complete implementation of the Bitwarden Client API is provided, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/managing-items/"&gt;Personal Vault&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/about-send/"&gt;Send&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/attachments/"&gt;Attachments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/website-icons/"&gt;Website icons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/personal-api-key/"&gt;Personal API Key&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/getting-started-organizations/"&gt;Organizations&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://bitwarden.com/help/about-collections/"&gt;Collections&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/sharing/"&gt;Password Sharing&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/user-types-access-control/"&gt;Member Roles&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/about-groups/"&gt;Groups&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/event-logs/"&gt;Event Logs&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/admin-reset/"&gt;Admin Password Reset&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/directory-sync/"&gt;Directory Connector&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/policies/"&gt;Policies&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/bitwarden-field-guide-two-step-login/"&gt;Multi/Two Factor Authentication&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://bitwarden.com/help/setup-two-step-login-authenticator/"&gt;Authenticator&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/setup-two-step-login-email/"&gt;Email&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/setup-two-step-login-fido/"&gt;FIDO2 WebAuthn&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/setup-two-step-login-yubikey/"&gt;YubiKey&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/setup-two-step-login-duo/"&gt;Duo&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/emergency-access/"&gt;Emergency Access&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Enabling-admin-page"&gt;Vaultwarden Admin Backend&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dani-garcia/bw_web_builds"&gt;Modified Web Vault client&lt;/a&gt; (Bundled within our containers)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The web-vault requires the use a secure context for the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API"&gt;Web Crypto API&lt;/a&gt;. That means it will only work via &lt;code&gt;http://localhost:8000&lt;/code&gt; (using the port from the example below) or if you &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Enabling-HTTPS"&gt;enable HTTPS&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The recommended way to install and use Vaultwarden is via our container images which are published to &lt;a href="https://github.com/dani-garcia/vaultwarden/pkgs/container/vaultwarden"&gt;ghcr.io&lt;/a&gt;, &lt;a href="https://hub.docker.com/r/vaultwarden/server"&gt;docker.io&lt;/a&gt; and &lt;a href="https://quay.io/repository/vaultwarden/server"&gt;quay.io&lt;/a&gt;. See &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Which-container-image-to-use"&gt;which container image to use&lt;/a&gt; for an explanation of the provided tags.&lt;/p&gt; 
&lt;p&gt;There are also &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Third-party-packages"&gt;community driven packages&lt;/a&gt; which can be used, but those might be lagging behind the latest version or might deviate in the way Vaultwarden is configured, as described in our &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki"&gt;Wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can also &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Building-binary"&gt;build Vaultwarden&lt;/a&gt; yourself.&lt;/p&gt; 
&lt;p&gt;While Vaultwarden is based upon the &lt;a href="https://rocket.rs"&gt;Rocket web framework&lt;/a&gt; which has built-in support for TLS our recommendation would be that you setup a reverse proxy (see &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Proxy-examples"&gt;proxy examples&lt;/a&gt;).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;strong&gt;For more detailed examples on how to install, use and configure Vaultwarden you can check our &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki"&gt;Wiki&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Docker/Podman CLI&lt;/h3&gt; 
&lt;p&gt;Pull the container image and mount a volume from the host for persistent storage.&lt;br /&gt; You can replace &lt;code&gt;docker&lt;/code&gt; with &lt;code&gt;podman&lt;/code&gt; if you prefer to use podman.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker pull vaultwarden/server:latest
docker run --detach --name vaultwarden \
  --env DOMAIN="https://vw.domain.tld" \
  --volume /vw-data/:/data/ \
  --restart unless-stopped \
  --publish 127.0.0.1:8000:80 \
  vaultwarden/server:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will preserve any persistent data under &lt;code&gt;/vw-data/&lt;/code&gt;, you can adapt the path to whatever suits you.&lt;/p&gt; 
&lt;h3&gt;Docker Compose&lt;/h3&gt; 
&lt;p&gt;To use Docker compose you need to create a &lt;code&gt;compose.yaml&lt;/code&gt; which will hold the configuration to run the Vaultwarden container.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;services:
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    environment:
      DOMAIN: "https://vw.domain.tld"
    volumes:
      - ./vw-data/:/data/
    ports:
      - 127.0.0.1:8000:80
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h2&gt;Get in touch&lt;/h2&gt; 
&lt;p&gt;Have a question, suggestion or need help? Join our community on &lt;a href="https://matrix.to/#/#vaultwarden:matrix.org"&gt;Matrix&lt;/a&gt;, &lt;a href="https://github.com/dani-garcia/vaultwarden/discussions"&gt;GitHub Discussions&lt;/a&gt; or &lt;a href="https://vaultwarden.discourse.group/"&gt;Discourse Forums&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Encountered a bug or crash? Please search our issue tracker and discussions to see if it's already been reported. If not, please &lt;a href="https://github.com/dani-garcia/vaultwarden/discussions"&gt;start a new discussion&lt;/a&gt; or &lt;a href="https://github.com/dani-garcia/vaultwarden/issues/"&gt;create a new issue&lt;/a&gt;. Ensure you're using the latest version of Vaultwarden and there aren't any similar issues open or closed!&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thanks for your contribution to the project!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/dani-garcia/vaultwarden/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors-anon/dani-garcia/vaultwarden?style=for-the-badge&amp;amp;logo=vaultwarden&amp;amp;color=005AA4" alt="Contributors Count" /&gt;&lt;/a&gt;&lt;br /&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/graphs/contributors"&gt;&lt;img src="https://contributors-img.web.app/image?repo=dani-garcia/vaultwarden" alt="Contributors Avatars" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;This project is not associated with &lt;a href="https://bitwarden.com/"&gt;Bitwarden&lt;/a&gt; or Bitwarden, Inc.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;However, one of the active maintainers for Vaultwarden is employed by Bitwarden and is allowed to contribute to the project on their own time. These contributions are independent of Bitwarden and are reviewed by other maintainers.&lt;/p&gt; 
&lt;p&gt;The maintainers work together to set the direction for the project, focusing on serving the self-hosting community, including individuals, families, and small organizations, while ensuring the project's sustainability.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; We cannot be held liable for any data loss that may occur while using Vaultwarden. This includes passwords, attachments, and other information handled by the application. We highly recommend performing regular backups of your files and database. However, should you experience data loss, we encourage you to contact us immediately.&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;Bitwarden_RS&lt;/h2&gt; 
&lt;p&gt;This project was known as Bitwarden_RS and has been renamed to separate itself from the official Bitwarden server in the hopes of avoiding confusion and trademark/branding issues.&lt;br /&gt; Please see &lt;a href="https://github.com/dani-garcia/vaultwarden/discussions/1642"&gt;#1642 - v1.21.0 release and project rename to Vaultwarden&lt;/a&gt; for more explanation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mullvad/mullvadvpn-app</title>
      <link>https://github.com/mullvad/mullvadvpn-app</link>
      <description>&lt;p&gt;The Mullvad VPN client app for desktop and mobile&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mullvad VPN desktop and mobile app&lt;/h1&gt; 
&lt;p&gt;Welcome to the Mullvad VPN client app source code repository. This is the VPN client software for the Mullvad VPN service. For more information about the service, please visit our website, &lt;a href="https://mullvad.net"&gt;mullvad.net&lt;/a&gt; (Also accessible via Tor on our &lt;a href="http://o54hon2e2vj6c7m3aqqu6uyece65by3vgoxxhlqlsvkmacw6a7m7kiad.onion/"&gt;onion service&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;This repository contains all the source code for the desktop and mobile versions of the app. For desktop this includes the system service/daemon (&lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/mullvad-daemon/"&gt;&lt;code&gt;mullvad-daemon&lt;/code&gt;&lt;/a&gt;), a graphical user interface (&lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/desktop/"&gt;GUI&lt;/a&gt;) and a command line interface (&lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/mullvad-cli/"&gt;CLI&lt;/a&gt;). The Android app uses the same backing system service for the tunnel and security but has a dedicated frontend in &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/android/"&gt;android/&lt;/a&gt;. iOS consists of a completely standalone implementation that resides in &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/ios/"&gt;ios/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;There are built and signed releases for macOS, Windows, Linux and Android available on &lt;a href="https://mullvad.net/download/"&gt;our website&lt;/a&gt; and on &lt;a href="https://github.com/mullvad/mullvadvpn-app/releases/"&gt;GitHub&lt;/a&gt;. The Android app is also available on &lt;a href="https://play.google.com/store/apps/details?id=net.mullvad.mullvadvpn"&gt;Google Play&lt;/a&gt; and &lt;a href="https://f-droid.org/packages/net.mullvad.mullvadvpn/"&gt;F-Droid&lt;/a&gt; and the iOS version on &lt;a href="https://apps.apple.com/us/app/mullvad-vpn/id1488466513"&gt;App Store&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can find our code signing keys as well as instructions for how to cryptographically verify your download on &lt;a href="https://mullvad.net/en/guides/open-source/"&gt;Mullvad's Open Source page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Platform/OS support&lt;/h3&gt; 
&lt;p&gt;These are the operating systems and their versions that the app officially supports. It might work on many more versions, but we don't test for those and can't guarantee the quality or security.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;OS/Platform&lt;/th&gt; 
   &lt;th&gt;Supported versions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;10 and 11&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;The three latest major releases&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux (Ubuntu)&lt;/td&gt; 
   &lt;td&gt;The two latest LTS releases and the latest non-LTS releases&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux (Fedora)&lt;/td&gt; 
   &lt;td&gt;The versions that are not yet &lt;a href="https://fedoraproject.org/wiki/End_of_life"&gt;EOL&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux (Debian)&lt;/td&gt; 
   &lt;td&gt;12 and newer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;8 and newer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS&lt;/td&gt; 
   &lt;td&gt;15.0 and newer&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;On Linux we test using the Gnome desktop environment. The app should, and probably does work in other DEs, but we don't regularly test those.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Here is a table containing the features of the app across platforms. This is intended to reflect the current state of the latest code in git, not necessarily any existing release.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;Windows&lt;/th&gt; 
   &lt;th align="center"&gt;Linux&lt;/th&gt; 
   &lt;th align="center"&gt;macOS&lt;/th&gt; 
   &lt;th align="center"&gt;Android&lt;/th&gt; 
   &lt;th align="center"&gt;iOS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OpenVPN&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;WireGuard&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Quantum-resistant tunnels&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://mullvad.net/en/blog/introducing-defense-against-ai-guided-traffic-analysis-daita"&gt;DAITA&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;WireGuard multihop&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;WireGuard over TCP&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;WireGuard over Shadowsocks&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;WireGuard over QUIC&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OpenVPN over Shadowsocks&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Split tunneling&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Custom DNS server&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Content blockers (Ads etc)&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Optional local network access&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì*&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/audits"&gt;Externally audited&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
   &lt;td align="center"&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;* The local network is always accessible on iOS with the current implementation&lt;/p&gt; 
&lt;h2&gt;Security and anonymity&lt;/h2&gt; 
&lt;p&gt;This app is a privacy preserving VPN client. As such it goes to great lengths to stop traffic leaks. And basically all settings default to the more secure/private option. The user has to explicitly allow more loose rules if desired. See the &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/docs/security.md"&gt;dedicated security document&lt;/a&gt; for details on what the app blocks and allows, as well as how it does it.&lt;/p&gt; 
&lt;h2&gt;Checking out the code&lt;/h2&gt; 
&lt;p&gt;This repository contains submodules needed for building the app. However, some of those submodules also have further submodules that are quite large and not needed to build the app. So unless you want the source code for OpenSSL, OpenVPN and a few other projects you should avoid a recursive clone of the repository. Instead clone the repository normally and then get one level of submodules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/mullvad/mullvadvpn-app.git
cd mullvadvpn-app
git submodule update --init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Android, Windows, Linux and macOS you also want to checkout the wireguard-go submodule:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git submodule update --init wireguard-go-rs/libwg/wireguard-go
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Further details on why this is necessary can be found in the &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/wireguard-go-rs/README.md"&gt;wireguard-go-rs crate&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We sign every commit on the &lt;code&gt;main&lt;/code&gt; branch as well as our release tags. If you would like to verify your checkout, you can find our developer keys on &lt;a href="https://mullvad.net/en/guides/open-source/"&gt;Mullvad's Open Source page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Binaries submodule&lt;/h3&gt; 
&lt;p&gt;This repository has a git submodule at &lt;code&gt;dist-assets/binaries&lt;/code&gt;. This submodule contains binaries and build scripts for third party code we need to bundle with the app. Such as OpenVPN, Wintun etc.&lt;/p&gt; 
&lt;p&gt;This submodule conforms to the same integrity/security standards as this repository. Every merge commit should be signed. And this main repository should only ever point to a signed merge commit of the binaries submodule.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/mullvad/mullvadvpn-app-binaries"&gt;binaries submodule's&lt;/a&gt; README for more details about that repository.&lt;/p&gt; 
&lt;h2&gt;Building the app&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/BuildInstructions.md"&gt;build instructions&lt;/a&gt; for help building the app on desktop platforms.&lt;/p&gt; 
&lt;p&gt;For building the Android app, see the &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/android/BuildInstructions.md"&gt;instructions&lt;/a&gt; for Android.&lt;/p&gt; 
&lt;p&gt;For building the iOS app, see the &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/ios/BuildInstructions.md"&gt;instructions&lt;/a&gt; for iOS.&lt;/p&gt; 
&lt;h2&gt;Releasing the app&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/Release.md"&gt;this&lt;/a&gt; for instructions on how to make a new release.&lt;/p&gt; 
&lt;h2&gt;Environment variables used by the service&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;TALPID_FIREWALL_DEBUG&lt;/code&gt; - Helps debugging the firewall. Does different things depending on platform:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Linux: Set to &lt;code&gt;"1"&lt;/code&gt; to add packet counters to all firewall rules.&lt;/li&gt; 
   &lt;li&gt;macOS: Makes rules log the packets they match to the &lt;code&gt;pflog0&lt;/code&gt; interface. 
    &lt;ul&gt; 
     &lt;li&gt;Set to &lt;code&gt;"all"&lt;/code&gt; to add logging to all rules.&lt;/li&gt; 
     &lt;li&gt;Set to &lt;code&gt;"pass"&lt;/code&gt; to add logging to rules allowing packets.&lt;/li&gt; 
     &lt;li&gt;Set to &lt;code&gt;"drop"&lt;/code&gt; to add logging to rules blocking packets.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;TALPID_FIREWALL_DONT_SET_SRC_VALID_MARK&lt;/code&gt; - Set this variable to &lt;code&gt;1&lt;/code&gt; to stop the daemon from setting the &lt;code&gt;net.ipv4.conf.all.src_valid_mark&lt;/code&gt; kernel parameter to &lt;code&gt;1&lt;/code&gt; on Linux when a tunnel is established. The kernel config parameter is set by default, because otherwise strict reverse path filtering may prevent relay traffic from reaching the daemon. If &lt;code&gt;rp_filter&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; on the interface that will be receiving relay traffic, and &lt;code&gt;src_valid_mark&lt;/code&gt; is not set to &lt;code&gt;1&lt;/code&gt;, the daemon will not be able to receive relay traffic.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;TALPID_FIREWALL_DONT_SET_ARP_IGNORE&lt;/code&gt; - Set this variable to &lt;code&gt;1&lt;/code&gt; to stop the daemon from setting the &lt;code&gt;net.ipv4.conf.all.arp_ignore&lt;/code&gt; kernel parameter to &lt;code&gt;2&lt;/code&gt; on Linux when a tunnel is established. The kernel config parameter is set by default, because otherwise an attacker who can send ARP requests to the device running Mullvad can figure out the in-tunnel IP.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;TALPID_DNS_MODULE&lt;/code&gt; - Allows changing the method that will be used for DNS configuration. By default this is automatically detected, but you can set it to one of the options below to choose a specific method.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;"static-file"&lt;/code&gt;: change the &lt;code&gt;/etc/resolv.conf&lt;/code&gt; file directly&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;"resolvconf"&lt;/code&gt;: use the &lt;code&gt;resolvconf&lt;/code&gt; program&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;"systemd"&lt;/code&gt;: use systemd's &lt;code&gt;resolved&lt;/code&gt; service through DBus&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;"network-manager"&lt;/code&gt;: use &lt;code&gt;NetworkManager&lt;/code&gt; service through DBus&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;iphlpapi&lt;/code&gt;: use the IP helper API&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;netsh&lt;/code&gt;: use the &lt;code&gt;netsh&lt;/code&gt; program&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;tcpip&lt;/code&gt;: set TCP/IP parameters in the registry&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;TALPID_DISABLE_LOCAL_DNS_RESOLVER&lt;/code&gt; - Set this variable to &lt;code&gt;1&lt;/code&gt; to disable the local DNS resolver (macOS only).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;TALPID_NEVER_FILTER_AAAA_QUERIES&lt;/code&gt; - Set this variable to &lt;code&gt;1&lt;/code&gt; to never ignore DNS AAAA queries (macOS only).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;TALPID_FORCE_USERSPACE_WIREGUARD&lt;/code&gt; - Forces the daemon to use the userspace implementation of WireGuard on Linux.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;TALPID_DISABLE_OFFLINE_MONITOR&lt;/code&gt; - Forces the daemon to always assume the host is online.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;TALPID_NET_CLS_MOUNT_DIR&lt;/code&gt; - On Linux, forces the daemon to mount the &lt;code&gt;net_cls&lt;/code&gt; controller in the specified directory if it isn't mounted already.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MULLVAD_MANAGEMENT_SOCKET_GROUP&lt;/code&gt; - On Linux and macOS, this restricts access to the management interface UDS socket to users in the specified group. This means that only users in that group can use the CLI and GUI. By default, everyone has access to the socket.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MULLVAD_BACKTRACE_ON_FAULT&lt;/code&gt; - When enabled, if the daemon encounters a fault (e.g. &lt;code&gt;SIGSEGV&lt;/code&gt;), it will log a backtrace to stdout, and to &lt;code&gt;daemon.log&lt;/code&gt;. By default, this is disabled in release-builds and enabled in debug-builds. Set variable to &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; to explicitly enable or disable this feature. Logging the backtrace causes heap allocation. Allocation is not signal safe, but here it runs in the signal handler. This is technically undefined behavior and therefore disabled by default. This usually works, but enable at your own risk.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Development builds only&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MULLVAD_API_HOST&lt;/code&gt; - Set the hostname to use in API requests. E.g. &lt;code&gt;api.mullvad.net&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MULLVAD_API_ADDR&lt;/code&gt; - Set the IP address and port to use in API requests. E.g. &lt;code&gt;10.10.1.2:443&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MULLVAD_API_DISABLE_TLS&lt;/code&gt; - Use plain HTTP for API requests.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MULLVAD_CONNCHECK_HOST&lt;/code&gt; - Set the hostname to use in connection check requests. E.g. &lt;code&gt;am.i.mullvad.net&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MULLVAD_ENABLE_DEV_UPDATES&lt;/code&gt; - Enable version checks in development builds.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Setting environment variables&lt;/h3&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;Use &lt;code&gt;setx&lt;/code&gt; from an elevated shell:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bat"&gt;setx TALPID_DISABLE_OFFLINE 1 /m
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For the change to take effect, restart the daemon:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bat"&gt;sc.exe stop mullvadvpn
sc.exe start mullvadvpn
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;p&gt;Edit the systemd unit file via &lt;code&gt;systemctl edit mullvad-daemon.service&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ini"&gt;[Service]
Environment="TALPID_DISABLE_OFFLINE_MONITOR=1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For the change to take effect, restart the daemon:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo systemctl restart mullvad-daemon
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;p&gt;Use &lt;code&gt;plutil&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo plutil -replace EnvironmentVariables -json '{"TALPID_DISABLE_OFFLINE_MONITOR": "1"}' /Library/LaunchDaemons/net.mullvad.daemon.plist
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For the change to take effect, restart the daemon:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;launchctl unload -w /Library/LaunchDaemons/net.mullvad.daemon.plist
launchctl load -w /Library/LaunchDaemons/net.mullvad.daemon.plist
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Environment variables used by the desktop frontend&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;MULLVAD_PATH&lt;/code&gt; - Allows changing the path to the folder with the &lt;code&gt;mullvad-problem-report&lt;/code&gt; tool when running in development mode. Defaults to: &lt;code&gt;&amp;lt;repo&amp;gt;/target/debug/&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MULLVAD_DISABLE_UPDATE_NOTIFICATION&lt;/code&gt; - If set to &lt;code&gt;1&lt;/code&gt;, notification will be disabled when an update is available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Command line tools for Electron app development&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$ npm run develop&lt;/code&gt; - develop app with live-reload enabled&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$ npm run lint&lt;/code&gt; - lint code&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$ npm run pack:&amp;lt;OS&amp;gt;&lt;/code&gt; - prepare app for distribution for your platform. Where &lt;code&gt;&amp;lt;OS&amp;gt;&lt;/code&gt; can be &lt;code&gt;linux&lt;/code&gt;, &lt;code&gt;mac&lt;/code&gt; or &lt;code&gt;win&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$ npm test&lt;/code&gt; - run tests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tray icon on Linux&lt;/h2&gt; 
&lt;p&gt;The requirements for displaying a tray icon vary between different desktop environments. If the tray icon doesn't appear, try installing one of these packages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;libappindicator3-1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;libappindicator1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;libappindicator&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you're using GNOME, try installing one of these GNOME Shell extensions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;TopIconsFix&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;TopIcons Plus&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Repository structure&lt;/h2&gt; 
&lt;h3&gt;Electron app and electron-builder packaging assets&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;desktop/packages/mullvad-vpn/&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;assets/&lt;/strong&gt; - Graphical assets and stylesheets&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;src/&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;main/&lt;/strong&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;strong&gt;index.ts&lt;/strong&gt; - Entry file for the main process&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;renderer/&lt;/strong&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;strong&gt;app.tsx&lt;/strong&gt; - Entry file for the renderer process&lt;/li&gt; 
       &lt;li&gt;&lt;strong&gt;routes.tsx&lt;/strong&gt; - Routes configurator&lt;/li&gt; 
       &lt;li&gt;&lt;strong&gt;transitions.ts&lt;/strong&gt; - Transition rules between views&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;tasks/&lt;/strong&gt; - Gulp tasks used to build app and watch for changes during development 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;distribution.js&lt;/strong&gt; - Configuration for &lt;code&gt;electron-builder&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;test/&lt;/strong&gt; - Electron GUI tests&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;dist-assets/&lt;/strong&gt; - Icons, binaries and other files used when creating the distributables 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;binaries/&lt;/strong&gt; - Git submodule containing binaries bundled with the app. For example the statically linked OpenVPN binary. See the README in the submodule for details&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;linux/&lt;/strong&gt; - Scripts and configuration files for the deb and rpm artifacts&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;pkg-scripts/&lt;/strong&gt; - Scripts bundled with and executed by the macOS pkg installer&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;windows/&lt;/strong&gt; - Windows NSIS installer configuration and assets&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;ca.crt&lt;/strong&gt; - The Mullvad relay server root CA. Bundled with the app and only OpenVPN relays signed by this CA are trusted&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building, testing and misc&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;build-windows-modules.sh&lt;/strong&gt; - Compiles the C++ libraries needed on Windows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;build.sh&lt;/strong&gt; - Sanity checks the working directory state and then builds installers for the app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mullvad Daemon&lt;/h3&gt; 
&lt;p&gt;The daemon is implemented in Rust and is implemented in several crates. The main, or top level, crate that builds the final daemon binary is &lt;code&gt;mullvad-daemon&lt;/code&gt; which then depend on the others.&lt;/p&gt; 
&lt;p&gt;In general one can look at the daemon as split into two parts, the crates starting with &lt;code&gt;talpid&lt;/code&gt; and the crates starting with &lt;code&gt;mullvad&lt;/code&gt;. The &lt;code&gt;talpid&lt;/code&gt; crates are supposed to be completely unrelated to Mullvad specific things. A &lt;code&gt;talpid&lt;/code&gt; crate is not allowed to know anything about the API through which the daemon fetch Mullvad account details or download VPN server lists for example. The &lt;code&gt;talpid&lt;/code&gt; components should be viewed as a generic VPN client with extra privacy and anonymity preserving features. The crates having &lt;code&gt;mullvad&lt;/code&gt; in their name on the other hand make use of the &lt;code&gt;talpid&lt;/code&gt; components to build a secure and Mullvad specific VPN client.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Cargo.toml&lt;/strong&gt; - Main Rust workspace definition. See this file for which folders here are daemon Rust crates.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;mullvad-daemon/&lt;/strong&gt; - Main Rust crate building the daemon binary.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;talpid-core/&lt;/strong&gt; - Main crate of the VPN client implementation itself. Completely Mullvad agnostic privacy preserving VPN client library.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Vocabulary&lt;/h2&gt; 
&lt;p&gt;Explanations for some common words used in the documentation and code in this repository.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;App&lt;/strong&gt; - This entire product (everything in this repository) is the "Mullvad VPN App", or App for short. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Daemon&lt;/strong&gt; - Refers to the &lt;code&gt;mullvad-daemon&lt;/code&gt; Rust program. This headless program exposes a management interface that can be used to control the daemon&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt; - Term used for any program or component that connects to the daemon management interface and allows a user to control the daemon. 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;GUI&lt;/strong&gt; - The Electron + React program that is a graphical frontend for the Mullvad VPN App.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;CLI&lt;/strong&gt; - The Rust program named &lt;code&gt;mullvad&lt;/code&gt; that is a terminal based frontend for the Mullvad VPN app.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;File paths used by Mullvad VPN app&lt;/h2&gt; 
&lt;p&gt;A list of file paths written to and read from by the various components of the Mullvad VPN app&lt;/p&gt; 
&lt;h3&gt;Daemon&lt;/h3&gt; 
&lt;p&gt;On Windows, when a process runs as a system service the variable &lt;code&gt;%LOCALAPPDATA%&lt;/code&gt; expands to &lt;code&gt;C:\Windows\system32\config\systemprofile\AppData\Local&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;All directory paths are defined in, and fetched from, the &lt;code&gt;mullvad-paths&lt;/code&gt; crate.&lt;/p&gt; 
&lt;h4&gt;Settings&lt;/h4&gt; 
&lt;p&gt;The settings directory can be changed by setting the &lt;code&gt;MULLVAD_SETTINGS_DIR&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Path&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/etc/mullvad-vpn/&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/etc/mullvad-vpn/&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;%LOCALAPPDATA%\Mullvad VPN\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://developer.android.com/reference/android/content/Context#getFilesDir()"&gt;&lt;code&gt;getFilesDir()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Logs&lt;/h4&gt; 
&lt;p&gt;The log directory can be changed by setting the &lt;code&gt;MULLVAD_LOG_DIR&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Path&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/var/log/mullvad-vpn/&lt;/code&gt; + systemd&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/var/log/mullvad-vpn/&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C:\ProgramData\Mullvad VPN\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://developer.android.com/reference/android/content/Context#getFilesDir()"&gt;&lt;code&gt;getFilesDir()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Cache&lt;/h4&gt; 
&lt;p&gt;The cache directory can be changed by setting the &lt;code&gt;MULLVAD_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Path&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/var/cache/mullvad-vpn/&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/Library/Caches/mullvad-vpn/&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C:\ProgramData\Mullvad VPN\cache&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://developer.android.com/reference/android/content/Context#getCacheDir()"&gt;&lt;code&gt;getCacheDir()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;RPC address file&lt;/h4&gt; 
&lt;p&gt;The full path to the RPC address file can be changed by setting the &lt;code&gt;MULLVAD_RPC_SOCKET_PATH&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Path&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/var/run/mullvad-vpn&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/var/run/mullvad-vpn&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//./pipe/Mullvad VPN&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://developer.android.com/reference/android/content/ContextWrapper#getNoBackupFilesDir()"&gt;&lt;code&gt;getNoBackupFilesDir()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Desktop Electron app&lt;/h3&gt; 
&lt;p&gt;The desktop Electron app has a specific settings file that is configured for each user. The path is set in the &lt;code&gt;desktop/packages/mullvad-vpn/src/main/gui-settings.ts&lt;/code&gt; file.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Path&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;$XDG_CONFIG_HOME/Mullvad VPN/gui_settings.json&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;~/Library/Application Support/Mullvad VPN/gui_settings.json&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;%LOCALAPPDATA%\Mullvad VPN\gui_settings.json&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;Present in Android's &lt;code&gt;logcat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Icons&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/graphics/README.md"&gt;graphics README&lt;/a&gt; for information about icons.&lt;/p&gt; 
&lt;h2&gt;Locales and translations&lt;/h2&gt; 
&lt;p&gt;Instructions for how to handle locales and translations are found &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/desktop/packages/mullvad-vpn/locales/README.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For instructions specific to the Android app, see &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/android/README.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Audits, pentests and external security reviews&lt;/h2&gt; 
&lt;p&gt;Mullvad has used external pentesting companies to carry out security audits of this VPN app. Read more about them in the &lt;a href="https://raw.githubusercontent.com/mullvad/mullvadvpn-app/main/audits/README.md"&gt;audits readme&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Copyright (C) 2025 Mullvad VPN AB&lt;/p&gt; 
&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;For the full license agreement, see the LICENSE.md file&lt;/p&gt; 
&lt;p&gt;The source code for the iOS app is GPL-3 licensed like everything else in this repository. But the distributed app on the Apple App Store is not GPL licensed, it falls under the &lt;a href="https://www.apple.com/legal/internet-services/itunes/dev/stdeula/"&gt;Apple App Store EULA&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>