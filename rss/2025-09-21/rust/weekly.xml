<rss version="2.0">
  <channel>
    <title>GitHub Rust Weekly Trending</title>
    <description>Weekly Trending of Rust in GitHub</description>
    <pubDate>Sat, 20 Sep 2025 01:44:17 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>linera-io/linera-protocol</title>
      <link>https://github.com/linera-io/linera-protocol</link>
      <description>&lt;p&gt;Main repository for the Linera protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://github.com/linera-io/linera-protocol/assets/1105398/fe08c941-93af-4114-bb83-bcc0eaec95f9" width="250" height="85" /&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/linera-io/linera-protocol/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/linera-io/linera-protocol" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/linera-io/linera-protocol/actions/workflows/docker-compose.yml"&gt;&lt;img src="https://github.com/linera-io/linera-protocol/actions/workflows/docker-compose.yml/badge.svg?sanitize=true" alt="Build Status for Docker" /&gt;&lt;/a&gt; &lt;a href="https://github.com/linera-io/linera-protocol/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/linera-io/linera-protocol/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Build Status for Rust" /&gt;&lt;/a&gt; &lt;a href="https://github.com/linera-io/linera-protocol/actions/workflows/documentation.yml"&gt;&lt;img src="https://github.com/linera-io/linera-protocol/actions/workflows/documentation.yml/badge.svg?sanitize=true" alt="Build Status for Documentation" /&gt;&lt;/a&gt; &lt;a href="https://x.com/linera_io"&gt;&lt;img src="https://img.shields.io/twitter/follow/linera_io" alt="Twitter" /&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/linera"&gt;&lt;img src="https://img.shields.io/discord/984941796272521226" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- [![Build Status for Kubernetes](https://github.com/linera-io/linera-protocol/actions/workflows/kubernetes.yml/badge.svg)](https://github.com/linera-io/linera-protocol/actions/workflows/kubernetes.yml) --&gt; 
&lt;p&gt;&lt;a href="https://linera.io"&gt;Linera&lt;/a&gt; is a decentralized blockchain infrastructure designed for highly scalable, secure, low-latency Web3 applications.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit our &lt;a href="https://linera.dev"&gt;developer page&lt;/a&gt; and read our &lt;a href="https://linera.io/whitepaper"&gt;whitepaper&lt;/a&gt; to learn more about the Linera protocol.&lt;/p&gt; 
&lt;h2&gt;Repository Structure&lt;/h2&gt; 
&lt;p&gt;The main crates and directories of this repository can be summarized as follows: (listed from low to high levels in the dependency graph)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_base/index.html"&gt;&lt;code&gt;linera-base&lt;/code&gt;&lt;/a&gt; Base definitions, including cryptography.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_version/index.html"&gt;&lt;code&gt;linera-version&lt;/code&gt;&lt;/a&gt; A library to manage version info in binaries and services.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_views/index.html"&gt;&lt;code&gt;linera-views&lt;/code&gt;&lt;/a&gt; A library mapping complex data structures onto a key-value store. The corresponding procedural macros are implemented in &lt;code&gt;linera-views-derive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_execution/index.html"&gt;&lt;code&gt;linera-execution&lt;/code&gt;&lt;/a&gt; Persistent data and the corresponding logic for runtime and execution of Linera applications.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_chain/index.html"&gt;&lt;code&gt;linera-chain&lt;/code&gt;&lt;/a&gt; Persistent data and the corresponding logic for chains of blocks, certificates, and cross-chain messaging.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_storage/index.html"&gt;&lt;code&gt;linera-storage&lt;/code&gt;&lt;/a&gt; Defines the storage abstractions for the protocol on top of &lt;code&gt;linera-chain&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_core/index.html"&gt;&lt;code&gt;linera-core&lt;/code&gt;&lt;/a&gt; The core Linera protocol, including client and server logic, node synchronization, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_rpc/index.html"&gt;&lt;code&gt;linera-rpc&lt;/code&gt;&lt;/a&gt; Defines the data-type for RPC messages (currently all client ↔ proxy ↔ chain ↔ chain interactions), and track the corresponding data schemas.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_client/index.html"&gt;&lt;code&gt;linera-client&lt;/code&gt;&lt;/a&gt; Library for writing Linera clients. Used for the command-line client and the node service in &lt;code&gt;linera-service&lt;/code&gt;, as well as the Web client in &lt;a href="https://github.com/linera-io/linera-web/"&gt;&lt;code&gt;linera-web&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_service/index.html"&gt;&lt;code&gt;linera-service&lt;/code&gt;&lt;/a&gt; Executable for clients (aka CLI wallets), proxy (aka validator frontend) and servers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://linera-io.github.io/linera-protocol/linera_sdk/index.html"&gt;&lt;code&gt;linera-sdk&lt;/code&gt;&lt;/a&gt; The library to develop Linera applications written in Rust for the Wasm virtual machine. The corresponding procedural macros are implemented in &lt;code&gt;linera-sdk-derive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/linera-io/linera-protocol/main/examples"&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; Examples of Linera applications written in Rust.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/linera-io/linera-protocol/main/INSTALL.md"&gt;&lt;code&gt;INSTALL.md&lt;/code&gt;&lt;/a&gt; for software requirements to develop in this repo.&lt;/p&gt; 
&lt;h2&gt;Quickstart with the Linera CLI tool&lt;/h2&gt; 
&lt;p&gt;The following commands set up a local test network and run some transfers between the microchains owned by a single wallet.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Make sure to compile the Linera binaries and add them in the $PATH.
# cargo build -p linera-storage-service -p linera-service --bins
export PATH="$PWD/target/debug:$PATH"

# Import the optional helper function `linera_spawn`.
source /dev/stdin &amp;lt;&amp;lt;&amp;lt;"$(linera net helper 2&amp;gt;/dev/null)"

# Run a local test network with the default parameters and a number of microchains
# owned by the default wallet. This also defines `LINERA_TMP_DIR`.
linera_spawn \
linera net up --with-faucet --faucet-port 8080

# Remember the URL of the faucet.
FAUCET_URL=http://localhost:8080

# If you're using a testnet, start here and run this instead:
#   LINERA_TMP_DIR=$(mktemp -d)
#   FAUCET_URL=https://faucet.testnet-XXX.linera.net  # for some value XXX

# Set the path of the future wallet.
export LINERA_WALLET="$LINERA_TMP_DIR/wallet.json"
export LINERA_KEYSTORE="$LINERA_TMP_DIR/keystore.json"
export LINERA_STORAGE="rocksdb:$LINERA_TMP_DIR/client.db"

# Initialize a new user wallet.
linera wallet init --faucet $FAUCET_URL

# Request chains.
INFO1=($(linera wallet request-chain --faucet $FAUCET_URL))
INFO2=($(linera wallet request-chain --faucet $FAUCET_URL))
CHAIN1="${INFO1[0]}"
ACCOUNT1="${INFO1[1]}"
CHAIN2="${INFO2[0]}"
ACCOUNT2="${INFO2[1]}"

# Show the different chains tracked by the wallet.
linera wallet show

# Query the chain balance of some of the chains.
linera query-balance "$CHAIN1"
linera query-balance "$CHAIN2"

# Transfer 10 units then 5 back.
linera transfer 10 --from "$CHAIN1" --to "$CHAIN2"
linera transfer 5 --from "$CHAIN2" --to "$CHAIN1"

# Query balances again.
linera query-balance "$CHAIN1"
linera query-balance "$CHAIN2"

# Now let's fund the user balances.
linera transfer 5 --from "$CHAIN1" --to "$CHAIN1:$ACCOUNT1"
linera transfer 2 --from "$CHAIN1:$ACCOUNT1" --to "$CHAIN2:$ACCOUNT2"

# Query user balances again.
linera query-balance "$CHAIN1:$ACCOUNT1"
linera query-balance "$CHAIN2:$ACCOUNT2"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More complex examples may be found in our &lt;a href="https://linera.dev"&gt;developer manual&lt;/a&gt; as well as the &lt;a href="https://raw.githubusercontent.com/linera-io/linera-protocol/main/examples"&gt;example applications&lt;/a&gt; in this repository.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions from the community! If you'd like to contribute to the Linera protocol:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create a feature branch (&lt;code&gt;git checkout -b feature/amazing-feature&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Commit your changes (&lt;code&gt;git commit -m 'Add some amazing feature'&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Push to the branch (&lt;code&gt;git push origin feature/amazing-feature&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Open a Pull Request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For detailed guidelines, see our &lt;a href="https://raw.githubusercontent.com/linera-io/linera-protocol/main/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ArthurBrussee/brush</title>
      <link>https://github.com/ArthurBrussee/brush</link>
      <description>&lt;p&gt;3D Reconstruction for all&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Brush&lt;/h1&gt; 
&lt;p&gt;
 &lt;video src="https://github.com/user-attachments/assets/5756967a-846c-44cf-bde9-3ca4c86f1a4d"&gt;
  A video showing various Brush features and scenes
 &lt;/video&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt; Massive thanks to &lt;a href="https://www.youtube.com/@gradeeterna"&gt;@GradeEterna&lt;/a&gt; for the beautiful scenes &lt;/i&gt; &lt;/p&gt; 
&lt;p&gt;Brush is a 3D reconstruction engine using &lt;a href="https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/"&gt;Gaussian splatting&lt;/a&gt;. It works on a wide range of systems: &lt;strong&gt;macOS/windows/linux&lt;/strong&gt;, &lt;strong&gt;AMD/Nvidia/Intel&lt;/strong&gt; cards, &lt;strong&gt;Android&lt;/strong&gt;, and in a &lt;strong&gt;browser&lt;/strong&gt;. To achieve this, it uses WebGPU compatible tech and the &lt;a href="https://github.com/tracel-ai/burn"&gt;Burn&lt;/a&gt; machine learning framework.&lt;/p&gt; 
&lt;p&gt;Machine learning for real time rendering has tons of potential, but most ML tools don't work well with it: Rendering requires realtime interactivity, usually involve dynamic shapes &amp;amp; computations, don't run on most platforms, and it can be cumbersome to ship apps with large CUDA deps. Brush on the other hand produces simple dependency free binaries, runs on nearly all devices, without any setup.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://arthurbrussee.github.io/brush-demo"&gt;&lt;strong&gt;Try the web demo&lt;/strong&gt; &lt;img src="https://cdn-icons-png.flaticon.com/256/888/888846.png" alt="chrome logo" width="24" /&gt; &lt;/a&gt; &lt;em&gt;NOTE: Only works on Chrome and Edge. Firefox and Safari are hopefully supported soon)&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/TbxJST2BbC"&gt;&lt;img src="https://dcbadge.limes.pink/api/server/https://discord.gg/TbxJST2BbC" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;h2&gt;Training&lt;/h2&gt; 
&lt;p&gt;Brush takes in COLMAP data or datasets in the Nerfstudio format. Training is fully supported natively, on mobile, and in a browser. While training you can interact with the scene and see the training dynamics live, and compare the current rendering to input views as the training progresses.&lt;/p&gt; 
&lt;p&gt;It also supports masking images:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Images with transparency. This will force the final splat to match the transparency of the input.&lt;/li&gt; 
 &lt;li&gt;A folder of images called 'masks'. This ignores parts of the image that are masked out.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Viewer&lt;/h2&gt; 
&lt;p&gt;Brush also works well as a splat viewer, including on the web. It can load .ply &amp;amp; .compressed.ply files. You can stream in data from a URL (for a web app, simply append &lt;code&gt;?url=&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;Brush also can load .zip of splat files to display them as an animation, or a special ply that includes delta frames (see &lt;a href="https://cat-4d.github.io/"&gt;cat-4D&lt;/a&gt; and &lt;a href="https://felixtaubner.github.io/cap4d/"&gt;Cap4D&lt;/a&gt;!).&lt;/p&gt; 
&lt;h2&gt;CLI&lt;/h2&gt; 
&lt;p&gt;Brush can be used as a CLI. Run &lt;code&gt;brush --help&lt;/code&gt; to get an overview. Every CLI command can work with &lt;code&gt;--with-viewer&lt;/code&gt; which also opens the UI, for easy debugging.&lt;/p&gt; 
&lt;h2&gt;Rerun&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/f679fec0-935d-4dd2-87e1-c301db9cdc2c"&gt;https://github.com/user-attachments/assets/f679fec0-935d-4dd2-87e1-c301db9cdc2c&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;While training, additional data can be visualized with the excellent &lt;a href="https://rerun.io/"&gt;rerun&lt;/a&gt;. To install rerun on your machine, please follow their &lt;a href="https://rerun.io/docs/getting-started/installing-viewer"&gt;instructions&lt;/a&gt;. Open the ./brush_blueprint.rbl in the viewer for best results.&lt;/p&gt; 
&lt;h2&gt;Building Brush&lt;/h2&gt; 
&lt;p&gt;First install rust 1.88+. You can run tests with &lt;code&gt;cargo test --all&lt;/code&gt;. Brush uses the wonderful &lt;a href="https://rerun.io/"&gt;rerun&lt;/a&gt; for additional visualizations while training, run &lt;code&gt;cargo install rerun-cli&lt;/code&gt; if you want to use it.&lt;/p&gt; 
&lt;h3&gt;Windows/macOS/Linux&lt;/h3&gt; 
&lt;p&gt;Simply &lt;code&gt;cargo run&lt;/code&gt; or &lt;code&gt;cargo run --release&lt;/code&gt; from the workspace root. Brush can also be used as a CLI, run &lt;code&gt;cargo run --release -- --help&lt;/code&gt; to use the CLI directly from source. See the notes about the CLI in the features section.&lt;/p&gt; 
&lt;h3&gt;Web&lt;/h3&gt; 
&lt;p&gt;Brush can be compiled to WASM. Run &lt;code&gt;npm run dev&lt;/code&gt; to start the demo website using Next.js, see the brush_nextjs directory.&lt;/p&gt; 
&lt;p&gt;Brush uses &lt;a href="https://rustwasm.github.io/wasm-bindgen/introduction.html"&gt;&lt;code&gt;wasm-pack&lt;/code&gt;&lt;/a&gt; to build the WASM bundle. You can also use it without a bundler, see &lt;a href="hhttps://rustwasm.github.io/wasm-bindgen/examples/without-a-bundler.html"&gt;wasm-pack's documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;WebGPU is still an upcoming standard, and as such, only Chrome 134+ on Windows and macOS is currently supported.&lt;/p&gt; 
&lt;h3&gt;Android&lt;/h3&gt; 
&lt;p&gt;As a one time setup, make sure you have the Android SDK &amp;amp; NDK installed.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check if ANDROID_NDK_HOME and ANDROID_HOME are set&lt;/li&gt; 
 &lt;li&gt;Add the Android target to rust &lt;code&gt;rustup target add aarch64-linux-android&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install cargo-ndk to manage building a lib &lt;code&gt;cargo install cargo-ndk&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each time you change the rust code, run&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cargo ndk -t arm64-v8a -o crates/brush-app/app/src/main/jniLibs/ build&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Nb: Nb, for best performance, build in release mode. This is separate from the Android Studio app build configuration.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cargo ndk -t arm64-v8a -o crates/brush-app/app/src/main/jniLibs/ build --release&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can now either run the project from Android Studio (Android Studio does NOT build the rust code), or run it from the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./gradlew build
./gradlew installDebug
adb shell am start -n com.splats.app/.MainActivity
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also open this folder as a project in Android Studio and run things from there. Nb: Running in Android Studio does &lt;em&gt;not&lt;/em&gt; rebuild the rust code automatically.&lt;/p&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;Rendering and training are generally faster than gsplat. You can run benchmarks of some of the kernels using &lt;code&gt;cargo bench&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Acknowledgements&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/nerfstudio-project/gsplat"&gt;&lt;strong&gt;gSplat&lt;/strong&gt;&lt;/a&gt;, for their reference version of the kernels&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Peter Hedman, George Kopanas &amp;amp; Bernhard Kerbl&lt;/strong&gt;, for the many discussions &amp;amp; pointers.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The Burn team&lt;/strong&gt;, for help &amp;amp; improvements to Burn along the way&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Raph Levien&lt;/strong&gt;, for the &lt;a href="https://github.com/googlefonts/compute-shader-101/pull/31"&gt;original version&lt;/a&gt; of the GPU radix sort.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;GradeEterna&lt;/strong&gt;, for feedback and their scenes.&lt;/p&gt; 
&lt;h1&gt;Disclaimer&lt;/h1&gt; 
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; an official Google product. This repository is a forked public version of &lt;a href="https://github.com/google-research/google-research/tree/master/brush_splat"&gt;the google-research repository&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>erebe/wstunnel</title>
      <link>https://github.com/erebe/wstunnel</link>
      <description>&lt;p&gt;Tunnel all your traffic over Websocket or HTTP2 - Bypass firewalls/DPI - Static binary available&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://github.com/erebe/wstunnel/raw/main/docs/logo_wstunnel.png" alt="wstunnel logo" height="400" /&gt; &lt;/p&gt; 
&lt;p align="right"&gt; &lt;a href="https://ko-fi.com/P5P4QCHMO"&gt;&lt;img src="https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;/p&gt; 
&lt;h2&gt;Summary&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#description"&gt;Description&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#demo"&gt;Demo server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#cmd"&gt;Command line&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#release"&gt;Release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#note"&gt;Note&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#bench"&gt;Benchmark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#build"&gt;How to build&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Description &lt;a name="description"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Most of the time when you are using a public network, you are behind some kind of firewall or proxy. One of their purpose is to constrain you to only use certain kind of protocols and consult only a subset of the web. Nowadays, the most widespread protocol is http and is de facto allowed by third party equipment.&lt;/p&gt; 
&lt;p&gt;Wstunnel uses the websocket protocol which is compatible with http in order to bypass firewalls and proxies. Wstunnel allows you to tunnel whatever traffic you want and access whatever resources/site you need.&lt;/p&gt; 
&lt;p&gt;My inspiration came from &lt;a href="https://www.npmjs.com/package/wstunnel"&gt;this project&lt;/a&gt; but as I don't want to install npm and nodejs to use this tool, I remade it in &lt;del&gt;Haskell&lt;/del&gt; Rust and improved it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;What to expect:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Easy to use&lt;/li&gt; 
 &lt;li&gt;Good error messages and debug information&lt;/li&gt; 
 &lt;li&gt;Static forward (reverse) tunneling (TCP, UDP, Unix socket, Stdio)&lt;/li&gt; 
 &lt;li&gt;Dynamic (reverse) tunneling (Socks5 proxy, HTTP proxy and Transparent Proxy)&lt;/li&gt; 
 &lt;li&gt;Support for using http proxy (when behind one) as gateway&lt;/li&gt; 
 &lt;li&gt;Support of proxy protocol&lt;/li&gt; 
 &lt;li&gt;Support for tls/https server with certificates auto-reload (with embedded self-signed certificate, or your own)&lt;/li&gt; 
 &lt;li&gt;Support of mTLS with certificates auto-reload - &lt;a href="https://github.com/erebe/wstunnel/raw/main/docs/using_mtls.md"&gt;documentation here&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support IPv6&lt;/li&gt; 
 &lt;li&gt;Support for Websocket and HTTP2 as transport protocol (websocket is more performant)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Standalone binaries&lt;/strong&gt; (so just cp it where you want) &lt;a href="https://github.com/erebe/wstunnel/releases"&gt;here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors &lt;a name="sponsors"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Part of Wstunnel development has been sponsored by&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://serviceplanet.nl"&gt; &lt;img width="200" height="100" src="https://github.com/erebe/wstunnel/raw/main/docs/logo_serviceplanet.png" alt="service planet logo" /&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Note &lt;a name="note"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;v7.0.0 is a complete rewrite of wstunnel in Rust and is not compatible with previous version. Previous code in Haskell can be found on branch &lt;a href="https://github.com/erebe/wstunnel/tree/haskell"&gt;https://github.com/erebe/wstunnel/tree/haskell&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;What to expect from previous version:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;More throughput and less jitter due to Haskell GC. Most of you will not care, as it was performant enough already. But you can now saturate a gigabit ethernet card with a single connection&lt;/li&gt; 
 &lt;li&gt;Command line is more homogeneous/has better UX. All tunnel can be specified multiple times&lt;/li&gt; 
 &lt;li&gt;Tunnel protocol tries to look like normal traffic, to avoid being flagged&lt;/li&gt; 
 &lt;li&gt;Support of reverse tunneling&lt;/li&gt; 
 &lt;li&gt;New bug, it is a rewrite (╯'□')╯︵ ┻━┻ ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/li&gt; 
 &lt;li&gt;Mainly for me to ease the maintenance of the project. I don't do a lot of haskell nowadays and it was harder for me to keep maintening the project over time, as I get lost in touch of the Haskell ecosystem and new release.&lt;/li&gt; 
 &lt;li&gt;Armv7 build (aka raspberry pi), as new version of GHC (Haskell compiler) dropped its support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo server &lt;a name="demo"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;If you just want to try out that you can bypass your proxy/firewall. You can give it a try with wstunnel demo server.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# In a terminal start wstunnel client
# You can set as tls-sni-override whatever domain you want. The tunnel is the only one that is going to be allowed. 
wstunnel client -L 'tcp://4443:localhost:444?proxy_protocol' -P demo --tls-sni-override=google.fr wss://49.13.58.9

# on another terminal, run curl and it should return you this greetings
curl -k https://localhost:4443
&amp;gt; Memento mori !
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Command line &lt;a name="cmd"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Usage: wstunnel client [OPTIONS] &amp;lt;ws[s]|http[s]://wstunnel.server.com[:port]&amp;gt;

Arguments:
  &amp;lt;ws[s]|http[s]://wstunnel.server.com[:port]&amp;gt;
          Address of the wstunnel server
          You can either use websocket or http2 as transport protocol. Use websocket if you are unsure.
          Example: For websocket with TLS wss://wstunnel.example.com or without ws://wstunnel.example.com
                   For http2 with TLS https://wstunnel.example.com or without http://wstunnel.example.com
          
          *WARNING* HTTP2 as transport protocol is harder to make it works because:
            - If you are behind a (reverse) proxy/CDN they are going to buffer the whole request before forwarding it to the server
              Obviously, this is not going to work for tunneling traffic
            - if you have wstunnel behind a reverse proxy, most of them (i.e: nginx) are going to turn http2 request into http1
              This is not going to work, because http1 does not support streaming naturally
          The only way to make it works with http2 is to have wstunnel directly exposed to the internet without any reverse proxy in front of it

Options:
  -L, --local-to-remote &amp;lt;{tcp,udp,socks5,stdio,unix}://[BIND:]PORT:HOST:PORT&amp;gt;
          Listen on local and forwards traffic from remote. Can be specified multiple times
          examples:
          'tcp://1212:google.com:443'      =&amp;gt;       listen locally on tcp on port 1212 and forward to google.com on port 443
          'tcp://2:n.lan:4?proxy_protocol' =&amp;gt;       listen locally on tcp on port 2 and forward to n.lan on port 4
                                                    Send a proxy protocol header v2 when establishing connection to n.lan
          
          'udp://1212:1.1.1.1:53'          =&amp;gt;       listen locally on udp on port 1212 and forward to cloudflare dns 1.1.1.1 on port 53
          'udp://1212:1.1.1.1:53?timeout_sec=10'    timeout_sec on udp force close the tunnel after 10sec. Set it to 0 to disable the timeout [default: 30]
          
          'socks5://[::1]:1212'            =&amp;gt;       listen locally with socks5 on port 1212 and forward dynamically requested tunnel
          'socks5://[::1]:1212?login=admin&amp;amp;password=admin' =&amp;gt; listen locally with socks5 on port 1212 and only accept connection with login=admin and password=admin
          
          'http://[::1]:1212'              =&amp;gt;       start a http proxy on port 1212 and forward dynamically requested tunnel
          'http://[::1]:1212?login=admin&amp;amp;password=admin' =&amp;gt; start a http proxy on port 1212 and only accept connection with login=admin and password=admin

          'tproxy+tcp://[::1]:1212'        =&amp;gt;       listen locally on tcp on port 1212 as a *transparent proxy* and forward dynamically requested tunnel
          'tproxy+udp://[::1]:1212?timeout_sec=10'  listen locally on udp on port 1212 as a *transparent proxy* and forward dynamically requested tunnel
                                                    linux only and requires sudo/CAP_NET_ADMIN
          
          'stdio://google.com:443'         =&amp;gt;       listen for data from stdio, mainly for `ssh -o ProxyCommand="wstunnel client --log-lvl=off -L stdio://%h:%p ws://localhost:8080" my-server`
          
          'unix:///tmp/wstunnel.sock:g.com:443' =&amp;gt;  listen for data from unix socket of path /tmp/wstunnel.sock and forward to g.com:443

  -R, --remote-to-local &amp;lt;{tcp,udp,socks5,unix}://[BIND:]PORT:HOST:PORT&amp;gt;
          Listen on remote and forwards traffic from local. Can be specified multiple times. Only tcp is supported
          examples:
          'tcp://1212:google.com:443'      =&amp;gt;     listen on server for incoming tcp cnx on port 1212 and forward to google.com on port 443 from local machine
          'udp://1212:1.1.1.1:53'          =&amp;gt;     listen on server for incoming udp on port 1212 and forward to cloudflare dns 1.1.1.1 on port 53 from local machine
          'socks5://[::1]:1212'            =&amp;gt;     listen on server for incoming socks5 request on port 1212 and forward dynamically request from local machine
          'http://[::1]:1212'              =&amp;gt;     listen on server for incoming http proxy request on port 1212 and forward dynamically request from local machine (login/password is supported)
          'unix://wstunnel.sock:g.com:443' =&amp;gt;     listen on server for incoming data from unix socket of path wstunnel.sock and forward to g.com:443 from local machine

      --no-color &amp;lt;NO_COLOR&amp;gt;
          Disable color output in logs
          
          [env: NO_COLOR=]

      --socket-so-mark &amp;lt;INT&amp;gt;
          (linux only) Mark network packet with SO_MARK sockoption with the specified value.
          You need to use {root, sudo, capabilities} to run wstunnel when using this option

  -c, --connection-min-idle &amp;lt;INT&amp;gt;
          Client will maintain a pool of open connection to the server, in order to speed up the connection process.
          This option set the maximum number of connection that will be kept open.
          This is useful if you plan to create/destroy a lot of tunnel (i.e: with socks5 to navigate with a browser)
          It will avoid the latency of doing tcp + tls handshake with the server
          
          [default: 0]

      --nb-worker-threads &amp;lt;INT&amp;gt;
          *WARNING* The flag does nothing, you need to set the env variable *WARNING*
          Control the number of threads that will be used.
          By default, it is equal the number of cpus
          
          [env: TOKIO_WORKER_THREADS=]

      --log-lvl &amp;lt;LOG_LEVEL&amp;gt;
          Control the log verbosity. i.e: TRACE, DEBUG, INFO, WARN, ERROR, OFF
          for more details: https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#example-syntax
          
          [env: RUST_LOG=]
          [default: INFO]

      --tls-sni-override &amp;lt;DOMAIN_NAME&amp;gt;
          Domain name that will be used as SNI during TLS handshake
          Warning: If you are behind a CDN (i.e: Cloudflare) you must set this domain also in the http HOST header.
                   or it will be flagged as fishy and your request rejected

      --tls-sni-disable
          Disable sending SNI during TLS handshake
          Warning: Most reverse proxies rely on it

      --tls-ech-enable
          Enable ECH (encrypted sni) during TLS handshake to wstunnel server.
          Warning: Ech DNS config is not refreshed over time. It is retrieved only once at startup of the program

      --tls-verify-certificate
          Enable TLS certificate verification.
          Disabled by default. The client will happily connect to any server with self-signed certificate.

  -p, --http-proxy &amp;lt;USER:PASS@HOST:PORT&amp;gt;
          If set, will use this http proxy to connect to the server
          
          [env: HTTP_PROXY=]

      --http-proxy-login &amp;lt;LOGIN&amp;gt;
          If set, will use this login to connect to the http proxy. Override the one from --http-proxy
          
          [env: WSTUNNEL_HTTP_PROXY_LOGIN=]

      --http-proxy-password &amp;lt;PASSWORD&amp;gt;
          If set, will use this password to connect to the http proxy. Override the one from --http-proxy
          
          [env: WSTUNNEL_HTTP_PROXY_PASSWORD=]

  -P, --http-upgrade-path-prefix &amp;lt;HTTP_UPGRADE_PATH_PREFIX&amp;gt;
          Use a specific prefix that will show up in the http path during the upgrade request.
          Useful if you need to route requests server side but don't have vhosts
          
          [env: WSTUNNEL_HTTP_UPGRADE_PATH_PREFIX=]
          [default: v1]

      --http-upgrade-credentials &amp;lt;USER[:PASS]&amp;gt;
          Pass authorization header with basic auth credentials during the upgrade request.
          If you need more customization, you can use the http_headers option.

      --websocket-ping-frequency-sec &amp;lt;seconds&amp;gt;
          Frequency at which the client will send websocket ping to the server.
          
          [default: 30]

      --websocket-mask-frame
          Enable the masking of websocket frames. Default is false
          Enable this option only if you use unsecure (non TLS) websocket server, and you see some issues. Otherwise, it is just overhead.

  -H, --http-headers &amp;lt;HEADER_NAME: HEADER_VALUE&amp;gt;
          Send custom headers in the upgrade request
          Can be specified multiple time

      --http-headers-file &amp;lt;FILE_PATH&amp;gt;
          Send custom headers in the upgrade request reading them from a file.
          It overrides http_headers specified from command line.
          File is read everytime and file format must contain lines with `HEADER_NAME: HEADER_VALUE`

      --tls-certificate &amp;lt;FILE_PATH&amp;gt;
          [Optional] Certificate (pem) to present to the server when connecting over TLS (HTTPS).
          Used when the server requires clients to authenticate themselves with a certificate (i.e. mTLS).
          The certificate will be automatically reloaded if it changes

      --tls-private-key &amp;lt;FILE_PATH&amp;gt;
          [Optional] The private key for the corresponding certificate used with mTLS.
          The certificate will be automatically reloaded if it changes

      --dns-resolver &amp;lt;DNS_RESOLVER&amp;gt;
          Dns resolver to use to lookup ips of domain name. Can be specified multiple time
          Example:
           dns://1.1.1.1 for using udp
           dns+https://1.1.1.1?sni=cloudflare-dns.com for using dns over HTTPS
           dns+tls://8.8.8.8?sni=dns.google for using dns over TLS
          For Dns over HTTPS/TLS if an HTTP proxy is configured, it will be used also
          To use libc resolver, use
          system://0.0.0.0

          **WARN** On windows you may want to specify explicitly the DNS resolver to avoid excessive DNS queries
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;SERVER
Usage: wstunnel server [OPTIONS] &amp;lt;ws[s]://0.0.0.0[:port]&amp;gt;

Arguments:
  &amp;lt;ws[s]://0.0.0.0[:port]&amp;gt;
          Address of the wstunnel server to bind to
          Example: With TLS wss://0.0.0.0:8080 or without ws://[::]:8080
          
          The server is capable of detecting by itself if the request is websocket or http2. So you don't need to specify it.

Options:
      --socket-so-mark &amp;lt;INT&amp;gt;
          (linux only) Mark network packet with SO_MARK sockoption with the specified value.
          You need to use {root, sudo, capabilities} to run wstunnel when using this option

      --websocket-ping-frequency-sec &amp;lt;seconds&amp;gt;
          Frequency at which the server will send websocket ping to client.

      --no-color &amp;lt;NO_COLOR&amp;gt;
          Disable color output in logs
          
          [env: NO_COLOR=]

      --websocket-mask-frame
          Enable the masking of websocket frames. Default is false
          Enable this option only if you use unsecure (non TLS) websocket server, and you see some issues. Otherwise, it is just overhead.

      --nb-worker-threads &amp;lt;INT&amp;gt;
          *WARNING* The flag does nothing, you need to set the env variable *WARNING*
          Control the number of threads that will be used.
          By default, it is equal the number of cpus
          
          [env: TOKIO_WORKER_THREADS=]

      --restrict-to &amp;lt;DEST:PORT&amp;gt;
          Server will only accept connection from the specified tunnel information.
          Can be specified multiple time
          Example: --restrict-to "google.com:443" --restrict-to "localhost:22"

      --dns-resolver &amp;lt;DNS_RESOLVER&amp;gt;
          Dns resolver to use to lookup ips of domain name
          This option is not going to work if you use transparent proxy
          Can be specified multiple time
          Example:
           dns://1.1.1.1 for using udp
           dns+https://1.1.1.1?sni=loudflare-dns.com for using dns over HTTPS
           dns+tls://8.8.8.8?sni=dns.google for using dns over TLS
          To use libc resolver, use
          system://0.0.0.0

      --log-lvl &amp;lt;LOG_LEVEL&amp;gt;
          Control the log verbosity. i.e: TRACE, DEBUG, INFO, WARN, ERROR, OFF
          for more details: https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#example-syntax
          
          [env: RUST_LOG=]
          [default: INFO]

  -r, --restrict-http-upgrade-path-prefix &amp;lt;RESTRICT_HTTP_UPGRADE_PATH_PREFIX&amp;gt;
          Server will only accept connection from if this specific path prefix is used during websocket upgrade.
          Useful if you specify in the client a custom path prefix, and you want the server to only allow this one.
          The path prefix act as a secret to authenticate clients
          Disabled by default. Accept all path prefix. Can be specified multiple time
          
          [env: WSTUNNEL_RESTRICT_HTTP_UPGRADE_PATH_PREFIX=]

      --restrict-config &amp;lt;RESTRICT_CONFIG&amp;gt;
          Path to the location of the restriction yaml config file.
          Restriction file is automatically reloaded if it changes

      --tls-certificate &amp;lt;FILE_PATH&amp;gt;
          [Optional] Use custom certificate (pem) instead of the default embedded self-signed certificate.
          The certificate will be automatically reloaded if it changes

      --tls-private-key &amp;lt;FILE_PATH&amp;gt;
          [Optional] Use a custom tls key (pem, ec, rsa) that the server will use instead of the default embedded one
          The private key will be automatically reloaded if it changes

      --tls-client-ca-certs &amp;lt;FILE_PATH&amp;gt;
          [Optional] Enables mTLS (client authentication with certificate). Argument must be PEM file
          containing one or more certificates of CA's of which the certificate of clients needs to be signed with.
          The ca will be automatically reloaded if it changes
          
    -p, --http-proxy &amp;lt;USER:PASS@HOST:PORT&amp;gt;
          If set, will use this http proxy to connect to the client

          [env: HTTP_PROXY=]

      --http-proxy-login &amp;lt;LOGIN&amp;gt;
          If set, will use this login to connect to the http proxy. Override the one from --http-proxy

          [env: WSTUNNEL_HTTP_PROXY_LOGIN=]

      --http-proxy-password &amp;lt;PASSWORD&amp;gt;
          If set, will use this password to connect to the http proxy. Override the one from --http-proxy

          [env: WSTUNNEL_HTTP_PROXY_PASSWORD=]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Release &lt;a name="release"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Static binaries are available in &lt;a href="https://github.com/erebe/wstunnel/releases"&gt;release section&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;docker image are available at &lt;a href="https://github.com/erebe/wstunnel/pkgs/container/wstunnel"&gt;https://github.com/erebe/wstunnel/pkgs/container/wstunnel&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/erebe/wstunnel:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples &lt;a name="examples"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#syntax"&gt;Understand command line syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#simple"&gt;Simplest one with socks5 - Good for browsing internet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#ssh"&gt;Proxy SSH&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#corporate"&gt;Bypass a corporate proxy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#wireguard"&gt;Proxy Wireguard traffic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#android"&gt;Android&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#tproxy"&gt;Proxy easily any traffic with transparent proxy (linux only)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#reverse"&gt;Reverse tunneling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#secure"&gt;How to secure access of your wstunnel server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#http2"&gt;Use HTTP2 instead of websocket for transport protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/erebe/wstunnel/main/#stealth"&gt;Maximize your stealthiness/Make your traffic discrete&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Understand command line syntax &lt;a name="syntax"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Wstunnel command line mimic ssh tunnel syntax. You can take reference to &lt;a href="https://iximiuz.com/en/posts/ssh-tunnels/"&gt;this article&lt;/a&gt;, or this diagram to understand &lt;img src="https://iximiuz.com/ssh-tunnels/ssh-tunnels.png" /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Simplest one &lt;a name="simple"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;On your remote host, start the wstunnel's server by typing this command in your terminal&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wstunnel server wss://[::]:8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a websocket server listening on any interface on port 8080. On the client side use this command to forward traffic through the websocket tunnel&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wstunnel client -L socks5://127.0.0.1:8888 --connection-min-idle 5 wss://myRemoteHost:8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command will create a socks5 server listening on port 8888 of the loopback interface and will forward traffic dynamically. &lt;code&gt;connection-min-idle 10&lt;/code&gt; is going an optimization to create a pool of 10 connection connected to the server, to speed-up the establishement of new tunnels.&lt;/p&gt; 
&lt;p&gt;With firefox you can setup a proxy using this tunnel, by setting in networking preferences 127.0.0.1:8888 and selecting socks5 proxy. Be sure to check the option &lt;code&gt;Proxy DNS when using SOCKS v5&lt;/code&gt; for the server to resolve DNS name and not your local machine.&lt;/p&gt; 
&lt;p&gt;or with curl&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -x socks5h://127.0.0.1:8888 http://google.com/
#Please note h after the 5, it is to avoid curl resolving DNS name locally
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;As proxy command for SSH &lt;a name="ssh"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You can specify &lt;code&gt;stdio&lt;/code&gt; as source port on the client side if you wish to use wstunnel as part of a proxy command for ssh&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ssh -o ProxyCommand="wstunnel client --log-lvl=off -L stdio://%h:%p ws://myRemoteHost:8080" my-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;When behind a corporate proxy &lt;a name="corporate"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;An other useful example is when you want to bypass an http proxy (a corporate proxy for example) The most reliable way to do it is to use wstunnel as described below&lt;/p&gt; 
&lt;p&gt;Start your wstunnel server with tls activated&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wstunnel server wss://[::]:443 --restrict-to 127.0.0.1:22
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The server will listen on any interface using port 443 (https) and restrict traffic to be forwarded only to the ssh daemon.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Be aware that the server will use self signed certificate with weak cryptographic algorithm. It was made in order to add the least possible overhead while still being compliant with tls.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Do not rely on wstunnel to protect your privacy, if it is one of your concerns, you should only forwards traffic that is already secure by design (ie: https or vpn traffic)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Now on the client side start the client with&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wstunnel client -L tcp://9999:127.0.0.1:22 -p http://mycorporateproxy:8080 wss://myRemoteHost:443
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It will start a tcp server on port 9999 that will contact the corporate proxy, negotiate a tls connection with the remote host and forward traffic to the ssh daemon on the remote host.&lt;/p&gt; 
&lt;p&gt;You may now access your server from your local machine on ssh by using&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ssh -p 9999 login@127.0.0.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Wireguard and wstunnel &lt;a name="wireguard"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You can find a full &lt;a href="https://community.hetzner.com/tutorials/obfuscating-wireguard-using-wstunnel"&gt;tutorial&lt;/a&gt; that explain how to setup wstunnel and wireguard at &lt;a href="https://community.hetzner.com/tutorials/obfuscating-wireguard-using-wstunnel"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For a quick explanation see below.&lt;/p&gt; 
&lt;p&gt;You have a working wireguard client configuration called &lt;code&gt;wg0.conf&lt;/code&gt;. Let's say&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[Interface]
Address = 10.200.0.2/32, fd00:cafe::2/128
PrivateKey = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=

[Peer]
PublicKey = 9iicV7Stdl/U0RH1BNf3VvlVjaa4Eus6QPEfEz6cR0c=
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = my.server.com:51820
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Start wstunnel server on my.server.com like this&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wstunnel server --restrict-to localhost:51820 wss://[::]:443
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;on your local machine start the client like this&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wstunnel client -L 'udp://51820:localhost:51820?timeout_sec=0' wss://my.server.com:443
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;change your wireguard client config to something&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[Interface]
Address = 10.200.0.2/32, fd00:cafe::2/128
PrivateKey = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
# Replace by a dns your server has access to
dns = 8.8.8.8
# https://github.com/nitred/nr-wg-mtu-finder to find best mtu for you
MTU = 1400 

[Peer]
PublicKey = 9iicV7Stdl/U0RH1BNf3VvlVjaa4Eus6QPEfEz6cR0c=
AllowedIPs = 0.0.0.0/0, ::/0
# Should target port where wstunnel client is listenning to
Endpoint = localhost:51820
# Should not be necessary if you enable wstunnel client websocket ping
PersistentKeepalive = 20
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add a default route to your server, as your AllowedIps are catch-all, it is to avoid the traffic looping.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo ip route add ip.of.my.server.com dev eth0 via 192.168.0.1
# replace eth0 (interface) and 192.168.0.1 (router gateway) by the one given by `ip route get ip.of.my.server.com` 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;start your wireguard, and it should be working&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo wg-quick up wg0
ping 10.200.0.1 # ping another ip of your vpn network
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;FAQ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Disable default udp tunnel timeout that will auto-close it after 30sec. &lt;code&gt;i.e: udp://1212:127.0.0.1:5201?timeout_sec=0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;If you see some throughput issue, be sure to lower the MTU of your wireguard interface (you can do it via config file) to something like 1300 or you will endup fragmenting udp packet (due to overhead of other layer) which is always causing issues&lt;/li&gt; 
 &lt;li&gt;If wstunnel cannot connect to server while wireguard is on, be sure you have added a static route via your main gateway for the ip of wstunnel server. Else if you forward all the traffic without putting a static route, you will endup looping your traffic wireguard interface -&amp;gt; wstunnel client -&amp;gt; wireguard interface&lt;/li&gt; 
 &lt;li&gt;If you have trouble making it works on windows, please check this issue &lt;a href="https://github.com/erebe/wstunnel/issues/252"&gt;https://github.com/erebe/wstunnel/issues/252&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Android &lt;a name="android"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You can use the android binary and use termux to run it on your phone.&lt;/p&gt; 
&lt;p&gt;If you want a guide regarding how to use wstunnel on Android, you can follow this &lt;a href="https://community.hetzner.com/tutorials/obfuscating-wireguard-using-wstunnel"&gt;guide&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Transparent proxy (linux only) &lt;a name="tproxy"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Transparent proxy allows to easily proxy any program. Start wstunnel with&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo wstunnel client -L 'tproxy+tcp://1080' -L 'tproxy+udp://1080' wss://my.server.com:443
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;use this project to route traffic seamlessly &lt;a href="https://github.com/NOBLES5E/cproxy"&gt;https://github.com/NOBLES5E/cproxy&lt;/a&gt;. It works with any program&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cproxy --port 1080 --mode tproxy -- curl https://google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can even start a new shell, were all your commands will be proxyfied&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cproxy --port 1080 --mode tproxy -- bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Reverse tunneling &lt;a name="reverse"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Start wstunnel with&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo wstunnel client -R 'tcp://[::]:8000:localhost:8000' wss://my.server.com:443
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In another terminal, start a simple webserver on your local machine&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python3 -m http.server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From your my.server.com machine/network you can now do&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl http://localhost:8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;How to secure the access of your wstunnel server &lt;a name="secure"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Generate a secret, let's say &lt;code&gt;h3GywpDrP6gJEdZ6xbJbZZVFmvFZDCa4KcRd&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Now start you server with the following command&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wstunnel server --restrict-http-upgrade-path-prefix h3GywpDrP6gJEdZ6xbJbZZVFmvFZDCa4KcRd  wss://[::]:443 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And start your client with&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wstunnel client --http-upgrade-path-prefix h3GywpDrP6gJEdZ6xbJbZZVFmvFZDCa4KcRd ... wss://myRemoteHost
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now your wstunnel server, will only accept connection if the client specify the correct path prefix during the upgrade request.&lt;/p&gt; 
&lt;p&gt;If you need more customization, you can use a config file to specify specific rules with &lt;code&gt;--restrict-config&lt;/code&gt;. You can find examples of restriction rules &lt;a href="https://github.com/erebe/wstunnel/raw/main/restrictions.yaml"&gt;there&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Use HTTP2 instead of websocket for the transport protocol &lt;a name="http2"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Use this only if websocket is blocked by your firewall/proxy. Otherwise, it is less performant than websocket.&lt;/p&gt; 
&lt;p&gt;Start your wstunnel server as usual with&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wstunnel server wss://[::]:8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On the client the only difference is to specify https:// instead of wss://&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;wstunnel client -L socks5://127.0.0.1:8888 https://myRemoteHost:8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt; HTTP2 as transport protocol is harder to make it works because:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are behind a (reverse) proxy/CDN they may buffer the whole request before forwarding it to the server. Cloudflare is doing that, and obviously, this is not going to work for tunneling traffic&lt;/li&gt; 
 &lt;li&gt;if you have wstunnel behind a reverse proxy, most of them (i.e: nginx) are going to turn http2 request into http1 This is not going to work, because http1 does not support streaming naturally&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The only way to make it works with HTTP2 is to have wstunnel server directly exposed to the internet without any reverse proxy in front of it&lt;/p&gt; 
&lt;p&gt;In addition, you may also want to play with the request headers (i.e: content-length and content-type) to make it looks like normal traffic to bypass your firewall/proxy. Some firewall may not like to see request with content-length not set, or with content-type set to application/octet-stream&lt;/p&gt; 
&lt;h3&gt;Maximize your stealthiness/Make your traffic discrete &lt;a name="stealth"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use wstunnel with TLS activated (wss://) and use your own certificate 
  &lt;ul&gt; 
   &lt;li&gt;Embedded certificate is self-signed and are the same for everyone, so can be easily fingerprinted/flagged&lt;/li&gt; 
   &lt;li&gt;Use valid certificate (i.e: with Let's Encrypt), self-signed certificate are suspicious&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Use a custom http path prefix (see &lt;code&gt;--http-upgrade-path-prefix&lt;/code&gt; option) 
  &lt;ul&gt; 
   &lt;li&gt;To avoid having the same url than every other wstunnel user&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Change your tls-sni-override to a domain is known to be allowed (i.e: google.com, baidu.com, etc...) 
  &lt;ul&gt; 
   &lt;li&gt;this will not work if your wstunnel server is behind a reverse proxy (i.e: Nginx, Cloudflare, HAProxy, ...)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Benchmark &lt;a name="bench"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/erebe/wstunnel/assets/854278/6e3580b0-c4f8-449e-881e-64d1df56b0ce" alt="image" /&gt;&lt;/p&gt; 
&lt;h2&gt;How to Build &lt;a name="build"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Install the Rust &lt;a href="https://www.rust-lang.org/tools/install"&gt;https://www.rust-lang.org/tools/install&lt;/a&gt; or if you are a believer&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and run those commands at the root of the project&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo build --package wstunnel-cli
target/debug/wstunnel ...
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ankitects/anki</title>
      <link>https://github.com/ankitects/anki</link>
      <description>&lt;p&gt;Anki is a smart spaced repetition flashcard program&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anki®&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://buildkite.com/ankitects/anki-ci"&gt;&lt;img src="https://badge.buildkite.com/c9edf020a4aec976f9835e54751cc5409d843adbb66d043bd3.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo contains the source code for the computer version of &lt;a href="https://apps.ankiweb.net"&gt;Anki&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;About&lt;/h1&gt; 
&lt;p&gt;Anki is a spaced repetition program. Please see the &lt;a href="https://apps.ankiweb.net"&gt;website&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;h3&gt;Anki Betas&lt;/h3&gt; 
&lt;p&gt;If you'd like to try development builds of Anki but don't feel comfortable building the code, please see &lt;a href="https://betas.ankiweb.net/"&gt;Anki betas&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Developing&lt;/h3&gt; 
&lt;p&gt;For more information on building and developing, please see &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/development.md"&gt;Development&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Want to contribute to Anki? Check out the &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/contributing.md"&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Anki Contributors&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/CONTRIBUTORS"&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Anki's license: &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>diesel-rs/diesel</title>
      <link>https://github.com/diesel-rs/diesel</link>
      <description>&lt;p&gt;A safe, extensible ORM and Query Builder for Rust&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://diesel.rs"&gt;&lt;img src="https://diesel.rs/assets/images/diesel_logo_stacked_black.png" alt="diesel logo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;A safe, extensible ORM and Query Builder for Rust&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/diesel-rs/diesel/actions?query=workflow%3A%22CI+Tests%22+branch%3Amaster"&gt;&lt;img src="https://github.com/diesel-rs/diesel/workflows/CI%20Tests/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/diesel"&gt;&lt;img src="https://img.shields.io/crates/v/diesel.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;API Documentation: &lt;a href="https://docs.rs/diesel"&gt;latest release&lt;/a&gt; – &lt;a href="https://docs.diesel.rs/master/diesel/index.html"&gt;master branch&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://diesel.rs"&gt;Homepage&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Diesel gets rid of the boilerplate for database interaction and eliminates runtime errors without sacrificing performance. It takes full advantage of Rust's type system to create a low overhead query builder that "feels like Rust."&lt;/p&gt; 
&lt;p&gt;Supported databases:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://docs.diesel.rs/master/diesel/pg/index.html"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.diesel.rs/master/diesel/mysql/index.html"&gt;MySQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.diesel.rs/master/diesel/sqlite/index.html"&gt;SQLite&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can configure the database backend in &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
diesel = { version = "&amp;lt;version&amp;gt;", features = ["&amp;lt;postgres|mysql|sqlite&amp;gt;"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Find our extensive Getting Started tutorial at &lt;a href="https://diesel.rs/guides/getting-started"&gt;https://diesel.rs/guides/getting-started&lt;/a&gt;. Guides on more specific features are coming soon.&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;If you run into problems, you can come ask for help at in our &lt;a href="https://github.com/diesel-rs/diesel/discussions"&gt;GitHub Discussions&lt;/a&gt; forum. This is also the right place to propose new features or show your applications.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Simple queries&lt;/h3&gt; 
&lt;p&gt;Simple queries are a complete breeze. Loading all users from a database:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;users::table.load(&amp;amp;mut connection)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * FROM users;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Loading all the posts for a user:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;Post::belonging_to(user).load(&amp;amp;mut connection)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT * FROM posts WHERE user_id = 1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Complex queries&lt;/h3&gt; 
&lt;p&gt;Diesel's powerful query builder helps you construct queries as simple or complex as you need, at zero cost.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let versions = Version::belonging_to(krate)
  .select(id)
  .order(num.desc())
  .limit(5);
let downloads = version_downloads
  .filter(date.gt(now - 90.days()))
  .filter(version_id.eq_any(versions))
  .order(date)
  .load::&amp;lt;Download&amp;gt;(&amp;amp;mut conn)?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT version_downloads.* FROM version_downloads
  WHERE date &amp;gt; (NOW() - '90 days')
    AND version_id = ANY(
      SELECT id FROM versions
        WHERE crate_id = 1
        ORDER BY num DESC
        LIMIT 5
    )
  ORDER BY date
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Less boilerplate&lt;/h3&gt; 
&lt;p&gt;Diesel codegen generates boilerplate for you. It lets you focus on your business logic, not mapping to and from SQL rows.&lt;/p&gt; 
&lt;p&gt;That means you can write this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Queryable, Selectable)]
#[diesel(table_name = downloads)]
pub struct Download {
    id: i32,
    version_id: i32,
    downloads: i32,
    counted: i32,
    date: SystemTime,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Instead of this without Diesel:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;pub struct Download {
    id: i32,
    version_id: i32,
    downloads: i32,
    counted: i32,
    date: SystemTime,
}

impl Download {
    fn from_row(row: &amp;amp;Row) -&amp;gt; Download {
        Download {
            id: row.get("id"),
            version_id: row.get("version_id"),
            downloads: row.get("downloads"),
            counted: row.get("counted"),
            date: row.get("date"),
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Inserting data&lt;/h3&gt; 
&lt;p&gt;It's not just about reading data. Diesel makes it easy to use structs for new records.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Insertable)]
#[diesel(table_name = users)]
struct NewUser&amp;lt;'a&amp;gt; {
    name: &amp;amp;'a str,
    hair_color: Option&amp;lt;&amp;amp;'a str&amp;gt;,
}

let new_users = vec![
    NewUser { name: "Sean", hair_color: Some("Black") },
    NewUser { name: "Gordon", hair_color: None },
];

insert_into(users)
    .values(&amp;amp;new_users)
    .execute(&amp;amp;mut connection);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;INSERT INTO users (name, hair_color) VALUES
  ('Sean', 'Black'),
  ('Gordon', DEFAULT)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need data from the rows you inserted, just change &lt;code&gt;execute&lt;/code&gt; to &lt;code&gt;get_result&lt;/code&gt; or &lt;code&gt;get_results&lt;/code&gt;. Diesel will take care of the rest.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let new_users = vec![
    NewUser { name: "Sean", hair_color: Some("Black") },
    NewUser { name: "Gordon", hair_color: None },
];

let inserted_users = insert_into(users)
    .values(&amp;amp;new_users)
    .get_results::&amp;lt;User&amp;gt;(&amp;amp;mut connection);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Executed SQL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;INSERT INTO users (name, hair_color) VALUES
  ('Sean', 'Black'),
  ('Gordon', DEFAULT)
  RETURNING *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Updating data&lt;/h3&gt; 
&lt;p&gt;Diesel's codegen can generate several ways to update a row, letting you encapsulate your logic in the way that makes sense for your app.&lt;/p&gt; 
&lt;p&gt;Modifying a struct:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;post.published = true;
post.save_changes(&amp;amp;mut connection);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One-off batch changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;update(users.filter(email.like("%@spammer.com")))
    .set(banned.eq(true))
    .execute(&amp;amp;mut connection)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using a struct for encapsulation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;update(Settings::belonging_to(current_user))
    .set(&amp;amp;settings_form)
    .execute(&amp;amp;mut connection)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Raw SQL&lt;/h3&gt; 
&lt;p&gt;There will always be certain queries that are just easier to write as raw SQL, or can't be expressed with the query builder. Even in these cases, Diesel provides an easy to use API for writing raw SQL.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(QueryableByName)]
#[diesel(table_name = users)]
struct User {
    id: i32,
    name: String,
    organization_id: i32,
}

// Using `include_str!` allows us to keep the SQL in a
// separate file, where our editor can give us SQL specific
// syntax highlighting.
sql_query(include_str!("complex_users_by_organization.sql"))
    .bind::&amp;lt;Integer, _&amp;gt;(organization_id)
    .bind::&amp;lt;BigInt, _&amp;gt;(offset)
    .bind::&amp;lt;BigInt, _&amp;gt;(limit)
    .load::&amp;lt;User&amp;gt;(&amp;amp;mut conn)?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Code of conduct&lt;/h2&gt; 
&lt;p&gt;Anyone who interacts with Diesel in any space, including but not limited to this GitHub repository, must follow our &lt;a href="https://github.com/diesel-rs/diesel/raw/master/code_of_conduct.md"&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under either of these:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://raw.githubusercontent.com/diesel-rs/diesel/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/diesel-rs/diesel/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="https://opensource.org/licenses/MIT"&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Before contributing, please read the &lt;a href="https://github.com/diesel-rs/diesel/raw/master/CONTRIBUTING.md"&gt;contributors guide&lt;/a&gt; for useful information about setting up Diesel locally, coding style and common abbreviations.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution you intentionally submit for inclusion in the work, as defined in the Apache-2.0 license, shall be dual-licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;h3&gt;Notable Sponsors and Supporters&lt;/h3&gt; 
&lt;p&gt;We would like to thank all of the sponsors supporting the work on Diesel. Notable large sponsors are:&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://nlnet.nl/project/Diesel/"&gt; &lt;img src="https://diesel.rs/assets/images/nl_net_foundation_logo.svg?sanitize=true" width="50%" /&gt; &lt;br /&gt; NLNet Foundation &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://nlnet.nl/project/Diesel/"&gt; &lt;img src="https://diesel.rs/assets/images/NGI0Core_tag.svg?sanitize=true" width="50%" /&gt; &lt;br /&gt; NGI Zero Core &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.prototypefund.de/projects/diesel-databaseviews"&gt; &lt;img src="https://diesel.rs/assets/images/PrototypeFund_logo_dark.png" width="50%" /&gt; &lt;br /&gt; Prototype Fund &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.prototypefund.de/projects/diesel-databaseviews"&gt; &lt;img src="https://diesel.rs/assets/images/bmbf_logo.jpg" width="50%" /&gt; &lt;br /&gt; Federal Ministry of Research, Technology and Space (Germany) &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.blog/open-source/maintainers/securing-the-supply-chain-at-scale-starting-with-71-important-open-source-projects/"&gt; &lt;img src="https://diesel.rs/assets/images/GitHub_Logo.png" width="50%" /&gt; GitHub Secure Open Source Fund &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://giga-infosystems.com/"&gt; &lt;img src="https://diesel.rs/assets/images/logo_giga.svg?sanitize=true" width="35%" /&gt; &lt;br /&gt; GiGa Infosystems GmbH &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Additionally we would like to thank all persons sponsoring the project on &lt;a href="https://github.com/sponsors/weiznich#sponsors"&gt;GitHub&lt;/a&gt;. Without them developing Diesel wouldn't be possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitbutlerapp/gitbutler</title>
      <link>https://github.com/gitbutlerapp/gitbutler</link>
      <description>&lt;p&gt;The GitButler version control client, backed by Git, powered by Tauri/Rust/Svelte&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img align="center" width="128px" src="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/crates/gitbutler-tauri/icons/128x128@2x.png" /&gt; 
 &lt;h1 align="center"&gt;&lt;b&gt;GitButler&lt;/b&gt;&lt;/h1&gt; 
 &lt;p align="center"&gt; Git branch management tool, built from the ground up for modern workflows &lt;br /&gt; &lt;a href="https://gitbutler.com"&gt;&lt;strong&gt;gitbutler.com »&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;b&gt;Download for &lt;/b&gt; macOS (&lt;a href="https://app.gitbutler.com/downloads/release/darwin/aarch64/dmg"&gt;Apple Silicon&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/darwin/x86_64/dmg"&gt;Intel&lt;/a&gt;) · Linux (&lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/gz"&gt;AppImage&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/deb"&gt;deb&lt;/a&gt;) · Windows (&lt;a href="https://app.gitbutler.com/downloads/release/windows/x86_64/msi"&gt;msi&lt;/a&gt;) &lt;br /&gt; &lt;br /&gt; (Unstable Nightly releases can be found &lt;a href="https://app.gitbutler.com/downloads"&gt;here&lt;/a&gt;) &lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/bf9bdb33-a979-47a0-b2b2-8fff5ea53afb" alt="gitbutler_client" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml"&gt;&lt;img src="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=gitbutler"&gt;&lt;img src="https://img.shields.io/badge/Twitter-black?logo=x&amp;amp;logoColor=white" alt="TWEET" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;&lt;img src="https://img.shields.io/discord/1060193121130000425?label=Discord&amp;amp;color=5865F2" alt="DISCORD" /&gt;&lt;/a&gt; &lt;a href="https://www.instagram.com/gitbutler/"&gt;&lt;img src="https://img.shields.io/badge/Instagram-E4405F?logo=instagram&amp;amp;logoColor=white" alt="INSTA" /&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/@gitbutlerapp"&gt;&lt;img src="https://img.shields.io/youtube/channel/subscribers/UCEwkZIHGqsTGYvX8wgD0LoQ" alt="YOUTUBE" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/gitbutlerapp/gitbutler"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="DEEPWIKI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/fb23382bcf57c609832661874d3019a43555d6ae.svg?sanitize=true" alt="Alt" title="Repobeats analytics for GitButler" /&gt;&lt;/p&gt; 
&lt;p&gt;GitButler is a git client that lets you work on multiple branches at the same time. It allows you to quickly organize file changes into separate branches while still having them applied to your working directory. You can then push branches individually to your remote, or directly create pull requests.&lt;/p&gt; 
&lt;p&gt;In a nutshell, it's a more flexible version of &lt;code&gt;git add -p&lt;/code&gt; and &lt;code&gt;git rebase -i&lt;/code&gt;, allowing you to efficiently multitask across branches.&lt;/p&gt; 
&lt;h2&gt;How Does It Work?&lt;/h2&gt; 
&lt;p&gt;GitButler keeps track of uncommitted changes in a layer on top of Git. Changes to files or parts of files can be grouped into what we call virtual branches. Whenever you are happy with the contents of a virtual branch, you can push it to a remote. GitButler makes sure that the state of other virtual branches is kept separate.&lt;/p&gt; 
&lt;h2&gt;How Do GB's Virtual Branches Differ From Git Branches?&lt;/h2&gt; 
&lt;p&gt;The branches that we know and love in Git are separate universes, and switching between them is a full context switch. GitButler allows you to work with multiple branches in parallel in the same working directory. This effectively means having the content of multiple branches available at the same time.&lt;/p&gt; 
&lt;p&gt;GitButler is aware of changes before they are committed. This allows it to keep a record of which virtual branch each individual diff belongs to. Effectively, this means that you can separate out individual branches with their content at any time to push them to a remote or to unapply them from your working directory.&lt;/p&gt; 
&lt;p&gt;And finally, while in Git it is preferable that you create your desired branch ahead of time, using GitButler you can move changes between virtual branches at any point during development.&lt;/p&gt; 
&lt;h2&gt;Why GitButler?&lt;/h2&gt; 
&lt;p&gt;We love Git. Our own &lt;a href="https://github.com/schacon"&gt;@schacon&lt;/a&gt; has even published the &lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git&lt;/a&gt; book. At the same time, Git's user interface hasn't been fundamentally changed for 15 years. While it was written for Linux kernel devs sending patches to each other over mailing lists, most developers today have different workflows and needs.&lt;/p&gt; 
&lt;p&gt;Instead of trying to fit the semantics of the Git CLI into a graphical interface, we are starting with the developer workflow and mapping it back to Git.&lt;/p&gt; 
&lt;h2&gt;Tech&lt;/h2&gt; 
&lt;p&gt;GitButler is a &lt;a href="https://tauri.app/"&gt;Tauri&lt;/a&gt;-based application. Its UI is written in &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; using &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; and its backend is written in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Main Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Virtual Branches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Organize work on multiple branches simultaneously, rather than constantly switching branches&lt;/li&gt; 
   &lt;li&gt;Automatically create new branches when needed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy Commit Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Undo, Amend and Squash commits by dragging and dropping&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Undo Timeline&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Logs all operations and changes and allows you to easily undo or revert any operation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub Integration&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Authenticate to GitHub to open Pull Requests, list branches and statuses and more&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy SSH Key Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;GitButler can generate an SSH key to upload to GitHub automatically&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Tooling&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically write commit messages based on your work in progress&lt;/li&gt; 
   &lt;li&gt;Automatically create descriptive branch names&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Commit Signing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Easy commit signing with GPG or SSH&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Uses&lt;/h2&gt; 
&lt;h3&gt;Fixing a Bug While Working on a Feature&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say that while developing a feature, you encounter a bug that you wish to fix. It's often desirable that you ship the fix as a separate contribution (Pull request).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git you can stash your changes and switch to another branch, where you can commit, and push your fix.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;With GitButler&lt;/em&gt; you simply assign your fix to a separate virtual branch, which you can individually push (or directly create a PR). An additional benefit is that you can retain the fix in your working directory while waiting for CI and/or code review.&lt;/p&gt; 
&lt;h3&gt;Trying Someone Else's Branch Together With My Work in Progress&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say you want to test a branch from someone else for the purpose of code review.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git trying out someone else's branch is a full context switch away from your own work. &lt;em&gt;With GitButler&lt;/em&gt; you can apply and unapply (add / remove) any remote branch directly into your working directory.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find our end user documentation at: &lt;a href="https://docs.gitbutler.com"&gt;https://docs.gitbutler.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Bugs and Feature Requests&lt;/h2&gt; 
&lt;p&gt;If you have a bug or feature request, feel free to open an &lt;a href="https://github.com/gitbutlerapp/gitbutler/issues/new"&gt;issue&lt;/a&gt;, or &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;join our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;AI Commit Message Generation&lt;/h2&gt; 
&lt;p&gt;Commit message generation is an opt-in feature. You can enable it while adding your repository for the first time or later in the project settings.&lt;/p&gt; 
&lt;p&gt;Currently, GitButler uses OpenAI's API for diff summarization, which means that if enabled, code diffs would be sent to OpenAI's servers.&lt;/p&gt; 
&lt;p&gt;Our goal is to make this feature more modular such that in the future you can modify the prompt as well as plug a different LLM endpoints (including local ones).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;So you want to help out? Please check out the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;p&gt;If you want to skip right to getting the code to actually compile, take a look at the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/DEVELOPMENT.md"&gt;DEVELOPMENT.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Want to show your support? Add a GitButler badge to your project's README:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-md"&gt;[![GitButler](https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D)](https://gitbutler.com/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fish-shell/fish-shell</title>
      <link>https://github.com/fish-shell/fish-shell</link>
      <description>&lt;p&gt;The user-friendly command line shell.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. |Cirrus CI| image:: &lt;a href="https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master"&gt;https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master&lt;/a&gt; :target: &lt;a href="https://cirrus-ci.com/github/fish-shell/fish-shell"&gt;https://cirrus-ci.com/github/fish-shell/fish-shell&lt;/a&gt; :alt: Cirrus CI Build Status&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;fish &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ - the friendly interactive shell |Build Status| |Cirrus CI|&lt;/h1&gt; 
&lt;p&gt;fish is a smart and user-friendly command line shell for macOS, Linux, and the rest of the family. fish includes features like syntax highlighting, autosuggest-as-you-type, and fancy tab completions that just work, with no configuration required.&lt;/p&gt; 
&lt;p&gt;For downloads, screenshots and more, go to &lt;a href="https://fishshell.com/"&gt;https://fishshell.com/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;fish generally works like other shells, like bash or zsh. A few important differences can be found at &lt;a href="https://fishshell.com/docs/current/tutorial.html"&gt;https://fishshell.com/docs/current/tutorial.html&lt;/a&gt; by searching for the magic phrase “unlike other shells”.&lt;/p&gt; 
&lt;p&gt;Detailed user documentation is available by running &lt;code&gt;help&lt;/code&gt; within fish, and also at &lt;a href="https://fishshell.com/docs/current/index.html"&gt;https://fishshell.com/docs/current/index.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting fish&lt;/h2&gt; 
&lt;p&gt;macOS&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
fish can be installed:

-  using `Homebrew &amp;lt;http://brew.sh/&amp;gt;`__: ``brew install fish``
-  using `MacPorts &amp;lt;https://www.macports.org/&amp;gt;`__:
   ``sudo port install fish``
-  using the `installer from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__
-  as a `standalone app from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__

Note: The minimum supported macOS version is 10.10 "Yosemite".

Packages for Linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Packages for Debian, Fedora, openSUSE, and Red Hat Enterprise Linux/CentOS are available from the &lt;code&gt;openSUSE Build Service &amp;lt;https://software.opensuse.org/download.html?project=shells%3Afish&amp;amp;package=fish&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;p&gt;Packages for Ubuntu are available from the &lt;code&gt;fish PPA &amp;lt;https://launchpad.net/~fish-shell/+archive/ubuntu/release-4&amp;gt;&lt;/code&gt;__, and can be installed using the following commands:&lt;/p&gt; 
&lt;p&gt;::&lt;/p&gt; 
&lt;p&gt;sudo apt-add-repository ppa:fish-shell/release-4 sudo apt update sudo apt install fish&lt;/p&gt; 
&lt;p&gt;Instructions for other distributions may be found at &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;p&gt;Windows&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
-  On Windows 10/11, fish can be installed under the WSL Windows Subsystem
   for Linux with the instructions for the appropriate distribution
   listed above under “Packages for Linux”, or from source with the
   instructions below.
-  Fish can also be installed on all versions of Windows using
   `Cygwin &amp;lt;https://cygwin.com/&amp;gt;`__ or `MSYS2 &amp;lt;https://github.com/Berrysoft/fish-msys2&amp;gt;`__.

Building from source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If packages are not available for your platform, GPG-signed tarballs are available from &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ and &lt;code&gt;fish-shell on GitHub &amp;lt;https://github.com/fish-shell/fish-shell/releases&amp;gt;&lt;/code&gt;__. See the &lt;code&gt;Building &amp;lt;#building&amp;gt;&lt;/code&gt;_ section for instructions.&lt;/p&gt; 
&lt;h2&gt;Running fish&lt;/h2&gt; 
&lt;p&gt;Once installed, run &lt;code&gt;fish&lt;/code&gt; from your current shell to try fish out!&lt;/p&gt; 
&lt;p&gt;Dependencies&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
Running fish requires:

-  some common \*nix system utilities (currently ``mktemp``), in
   addition to the basic POSIX utilities (``cat``, ``cut``, ``dirname``,
   ``file``, ``ls``, ``mkdir``, ``mkfifo``, ``rm``, ``sh``, ``sort``, ``tee``, ``tr``,
   ``uname`` and ``sed`` at least, but the full coreutils plus ``find`` and
   ``awk`` is preferred)
-  The gettext library, if compiled with
   translation support

The following optional features also have specific requirements:

-  builtin commands that have the ``--help`` option or print usage
   messages require ``nroff`` or ``mandoc`` for
   display
-  automated completion generation from manual pages requires Python 3.5+
-  the ``fish_config`` web configuration tool requires Python 3.5+ and a web browser
-  system clipboard integration (with the default Ctrl-V and Ctrl-X
   bindings) require either the ``xsel``, ``xclip``,
   ``wl-copy``/``wl-paste`` or ``pbcopy``/``pbpaste`` utilities
-  full completions for ``yarn`` and ``npm`` require the
   ``all-the-package-names`` NPM module
-  ``colorls`` is used, if installed, to add color when running ``ls`` on platforms
   that do not have color support (such as OpenBSD)

Building
--------

.. _dependencies-1:

Dependencies
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compiling fish requires:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Rust (version 1.70 or later)&lt;/li&gt; 
 &lt;li&gt;CMake (version 3.15 or later)&lt;/li&gt; 
 &lt;li&gt;a C compiler (for system feature detection and the test helper binary)&lt;/li&gt; 
 &lt;li&gt;PCRE2 (headers and libraries) - optional, this will be downloaded if missing&lt;/li&gt; 
 &lt;li&gt;gettext (headers and libraries) - optional, for translation support&lt;/li&gt; 
 &lt;li&gt;an Internet connection, as other dependencies will be downloaded automatically&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sphinx is also optionally required to build the documentation from a cloned git repository.&lt;/p&gt; 
&lt;p&gt;Additionally, running the full test suite requires Python 3.5+, tmux, and the pexpect package.&lt;/p&gt; 
&lt;p&gt;Building from source with CMake&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
Rather than building from source, consider using a packaged build for your platform. Using the
steps below makes fish difficult to uninstall or upgrade. Release packages are available from the
links above, and up-to-date `development builds of fish are available for many platforms
&amp;lt;https://github.com/fish-shell/fish-shell/wiki/Development-builds&amp;gt;`__

To install into ``/usr/local``, run:

.. code:: bash

   mkdir build; cd build
   cmake ..
   cmake --build .
   sudo cmake --install .

The install directory can be changed using the
``-DCMAKE_INSTALL_PREFIX`` parameter for ``cmake``.

CMake Build options
~~~~~~~~~~~~~~~~~~~

In addition to the normal CMake build options (like ``CMAKE_INSTALL_PREFIX``), fish's CMake build has some other options available to customize it.

- Rust_COMPILER=path - the path to rustc. If not set, cmake will check $PATH and ~/.cargo/bin
- Rust_CARGO=path - the path to cargo. If not set, cmake will check $PATH and ~/.cargo/bin
- Rust_CARGO_TARGET=target - the target to pass to cargo. Set this for cross-compilation.
- BUILD_DOCS=ON|OFF - whether to build the documentation. This is automatically set to OFF when Sphinx isn't installed.
- INSTALL_DOCS=ON|OFF - whether to install the docs. This is automatically set to on when BUILD_DOCS is or prebuilt documentation is available (like when building in-tree from a tarball).
- FISH_USE_SYSTEM_PCRE2=ON|OFF - whether to use an installed pcre2. This is normally autodetected.
- MAC_CODESIGN_ID=String|OFF - the codesign ID to use on Mac, or "OFF" to disable codesigning.
- WITH_GETTEXT=ON|OFF - whether to build with gettext support for translations.
- extra_functionsdir, extra_completionsdir and extra_confdir - to compile in an additional directory to be searched for functions, completions and configuration snippets

Building fish with embedded data (experimental)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also build fish with the data files embedded.&lt;/p&gt; 
&lt;p&gt;This will include all the datafiles like the included functions or web configuration tool in the main &lt;code&gt;fish&lt;/code&gt; binary.&lt;/p&gt; 
&lt;p&gt;Fish will then read these right from its own binary, and print them out when needed. Some files, like the webconfig tool and the manpage completion generator, will be extracted to a temporary directory on-demand. You can list the files with &lt;code&gt;status list-files&lt;/code&gt; and print one with &lt;code&gt;status get-file path/to/file&lt;/code&gt; (e.g. &lt;code&gt;status get-file functions/fish_prompt.fish&lt;/code&gt; to get the default prompt).&lt;/p&gt; 
&lt;p&gt;To install fish with embedded files, just use &lt;code&gt;cargo&lt;/code&gt;, like::&lt;/p&gt; 
&lt;p&gt;cargo install --path /path/to/fish # if you have a git clone cargo install --git &lt;a href="https://github.com/fish-shell/fish-shell"&gt;https://github.com/fish-shell/fish-shell&lt;/a&gt; --tag 4.0.0 # to build from git with a specific version cargo install --git &lt;a href="https://github.com/fish-shell/fish-shell"&gt;https://github.com/fish-shell/fish-shell&lt;/a&gt; # to build the current development snapshot without cloning&lt;/p&gt; 
&lt;p&gt;This will place the binaries in &lt;code&gt;~/.cargo/bin/&lt;/code&gt;, but you can place them wherever you want.&lt;/p&gt; 
&lt;p&gt;This build won't have the HTML docs (&lt;code&gt;help&lt;/code&gt; will open the online version) or translations.&lt;/p&gt; 
&lt;p&gt;It will try to build the man pages with sphinx-build. If that is not available and you would like to include man pages, you need to install it and retrigger the build script, e.g. by setting FISH_BUILD_DOCS=1::&lt;/p&gt; 
&lt;p&gt;FISH_BUILD_DOCS=1 cargo install --path .&lt;/p&gt; 
&lt;p&gt;Setting it to "0" disables the inclusion of man pages.&lt;/p&gt; 
&lt;p&gt;You can also link this build statically (but not against glibc) and move it to other computers.&lt;/p&gt; 
&lt;h2&gt;Contributing Changes to the Code&lt;/h2&gt; 
&lt;p&gt;See the &lt;code&gt;Guide for Developers &amp;lt;CONTRIBUTING.rst&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;h2&gt;Contact Us&lt;/h2&gt; 
&lt;p&gt;Questions, comments, rants and raves can be posted to the official fish mailing list at &lt;a href="https://lists.sourceforge.net/lists/listinfo/fish-users"&gt;https://lists.sourceforge.net/lists/listinfo/fish-users&lt;/a&gt; or join us on our &lt;code&gt;matrix channel &amp;lt;https://matrix.to/#/#fish-shell:matrix.org&amp;gt;&lt;/code&gt;&lt;strong&gt;. Or use the &lt;code&gt;fish tag on Unix &amp;amp; Linux Stackexchange &amp;lt;https://unix.stackexchange.com/questions/tagged/fish&amp;gt;&lt;/code&gt;&lt;/strong&gt;. There is also a fish tag on Stackoverflow, but it is typically a poor fit.&lt;/p&gt; 
&lt;p&gt;Found a bug? Have an awesome idea? Please &lt;code&gt;open an issue &amp;lt;https://github.com/fish-shell/fish-shell/issues/new&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;p&gt;.. |Build Status| image:: &lt;a href="https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg"&gt;https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg&lt;/a&gt; :target: &lt;a href="https://github.com/fish-shell/fish-shell/actions"&gt;https://github.com/fish-shell/fish-shell/actions&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zama-ai/fhevm</title>
      <link>https://github.com/zama-ai/fhevm</link>
      <description>&lt;p&gt;FHEVM, a full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/fhevm-header-dark.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/fhevm-header-light.png" /&gt; 
  &lt;img width="500" alt="fhevm" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt; 📃 Read white paper&lt;/a&gt; |&lt;a href="https://docs.zama.ai/protocol"&gt; 📒 Documentation&lt;/a&gt; | &lt;a href="https://zama.ai/community"&gt; 💛 Community support&lt;/a&gt; | &lt;a href="https://github.com/zama-ai/awesome-zama"&gt; 📚 FHE resources by Zama&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/zama-ai/fhevm/releases"&gt; &lt;img src="https://img.shields.io/github/v/release/zama-ai/fhevm?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/fhevm/raw/main/LICENSE"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/License-BSD--3--Clause--Clear-%23ffb243?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/bounty-program"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/Contribute-Zama%20Bounty%20Program-%23ffd208?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://slsa.dev"&gt;&lt;img alt="SLSA 3" src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;h3&gt;What is FHEVM?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;FHEVM&lt;/strong&gt; is the core framework of the &lt;em&gt;Zama Confidential Blockchain Protocol&lt;/em&gt;. It enables confidential smart contracts on EVM-compatible blockchains by leveraging Fully Homomorphic Encryption (FHE), allowing encrypted data to be processed directly onchain.&lt;/p&gt; 
&lt;p&gt;FHEVM ensures both confidentiality and composability, with the following guarantees:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;End-to-end encryption of transactions and state:&lt;/strong&gt; Data included in transactions is encrypted and never visible to anyone.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Composability and data availability on-chain:&lt;/strong&gt; States are updated while remaining encrypted at all times.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No impact on existing dApps and state:&lt;/strong&gt; Encrypted state co-exists alongside public one, and doesn't impact existing dApps. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Table of contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt;About&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#what-is-fhevm"&gt;What is FHEVM?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#project-structure"&gt;Project structure&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#main-features"&gt;Main features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#use-cases"&gt;Use cases&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#working-with-fhevm"&gt;Working with FHEVM&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#citations"&gt;Citations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#support"&gt;Support&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Project structure&lt;/h3&gt; 
&lt;p&gt;The directories of this repository are organized in the following way:&lt;/p&gt; 
&lt;h6&gt;FHEVM Contracts&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gateway-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart contracts managing the gateway between on-chain and off-chain components.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;host-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart Contracts deployed on the host chain for orchestrating FHE workflows.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Compute Engines&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;coprocessor/&lt;/code&gt;&lt;/strong&gt;: Rust-based coprocessor implementation for FHE operations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;kms-connector/&lt;/code&gt;&lt;/strong&gt;: Interface for integrating with Key Management Services (KMS) to handle encryption keys securely.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Utilities&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;charts/&lt;/code&gt;&lt;/strong&gt;: Helm charts and deployment configurations for the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;golden-container-images/&lt;/code&gt;&lt;/strong&gt;: Docker golden images for Node.js and Rust environments used as base images by the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;test-suite/&lt;/code&gt;&lt;/strong&gt;: Integration with docker-compose and tests covering end-to-end FHEVM stack behavior.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Main features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Privacy by design:&lt;/strong&gt; Building decentralized apps with full privacy and confidentiality on Ethereum, leveraging FHE.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Solidity integration:&lt;/strong&gt; Write FHEVM contracts like any standard Solidity contract using Solidity. Compatible with existing toolchains — such as Hardhat and Foundry (&lt;em&gt;coming soon&lt;/em&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Programmable privacy:&lt;/strong&gt; Define exactly what data is encrypted and write the access control logic directly in your smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High precision encrypted integers :&lt;/strong&gt; Up to 256 bits of precision for integers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Full range of operators:&lt;/strong&gt; All typical operators are available: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, ternary-if, boolean operations…. Consecutive FHE operations are not limited.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; The underlying FHE crypto-scheme of FHEVM is quantum-resistant. Decryption is managed via a key management system (KMS) using multi-party computation (MPC), ensuring security even if some parties are compromised or misbehaving.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Symbolic execution of FHE computations:&lt;/strong&gt; All FHE operations are executed symbolically on the host chain, significantly reducing execution time. The actual computations on encrypted data are offloaded asynchronously to our coprocessor, allowing for faster, efficient, and scalable processing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more about FHEVM features in the &lt;a href="https://docs.zama.ai/protocol"&gt;documentation&lt;/a&gt; and in our &lt;a href="https://github.com/zama-ai/fhevm/raw/main/fhevm-whitepaper.pdf"&gt;whitepaper&lt;/a&gt;.&lt;/em&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;Use cases&lt;/h3&gt; 
&lt;p&gt;FHEVM is built for developers to write confidential smart contracts without the need to learn cryptography. Leveraging FHEVM, you can unlock a myriad of new use cases such as DeFi, gaming, and more. For instance:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential transfers&lt;/strong&gt;: Keep balances and amounts private, without using mixers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tokenization&lt;/strong&gt;: Swap tokens and RWAs on-chain without others seeing the amounts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blind auctions&lt;/strong&gt;: Bid on items without revealing the amount or the winner.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;On-chain games&lt;/strong&gt;: Keep moves, selections, cards, or items hidden until ready to reveal.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential voting&lt;/strong&gt;: Prevents bribery and blackmailing by keeping votes private.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Encrypted DIDs&lt;/strong&gt;: Store identities on-chain and generate attestations without ZK.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more use cases in the &lt;a href="https://docs.zama.ai/protocol/examples"&gt;list of examples&lt;/a&gt;.&lt;/em&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol"&gt;Documentation&lt;/a&gt; — Official documentation of FHEVM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt;Whitepaper&lt;/a&gt; — Technical overview of FHEVM's cryptographic design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol/examples"&gt;Examples&lt;/a&gt; — Examples of building confidential smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/awesome-zama?tab=readme-ov-file#fhevm"&gt;Awesome Zama – FHEVM&lt;/a&gt; — Curated articles, talks, and ecosystem projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Working with FHEVM&lt;/h2&gt; 
&lt;h3&gt;Citations&lt;/h3&gt; 
&lt;p&gt;To cite FHEVM or the whitepaper in academic papers, please use the following entries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;@Misc{FHEVM,
title={{FHEVM: A full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications},
author={Zama},
year={2025},
note={\url{https://github.com/zama-ai/fhevm}},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;There are two ways to contribute to FHEVM:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/fhevm/issues/new/choose"&gt;Open issues&lt;/a&gt; to report bugs and typos, or to suggest new ideas&lt;/li&gt; 
 &lt;li&gt;Request to become an official contributor by emailing &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Becoming an approved contributor involves signing our Contributor License Agreement (CLA). Only approved contributors can send pull requests, so please make sure to get in touch before you do! &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;This software is distributed under the &lt;strong&gt;BSD-3-Clause-Clear&lt;/strong&gt; license. Read &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/LICENSE"&gt;this&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Is Zama’s technology free to use?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Zama’s libraries are free to use under the BSD 3-Clause Clear license only for development, research, prototyping, and experimentation purposes. However, for any commercial use of Zama's open source code, companies must purchase Zama’s commercial patent license.&lt;/p&gt; 
 &lt;p&gt;Everything we do is open source, and we are very transparent on what it means for our users, you can read more about how we monetize our open source products at Zama in &lt;a href="https://www.zama.ai/post/open-source"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;What do I need to do if I want to use Zama’s technology for commercial purposes?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;To commercially use Zama’s technology you need to be granted Zama’s patent license. Please contact us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Do you file IP on your technology?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Yes, all Zama’s technologies are patented.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Can you customize a solution for my specific use case?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We are open to collaborating and advancing the FHE space with our partners. If you have specific needs, please email us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;a target="_blank" href="https://community.zama.ai"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/support-banner-dark.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/support-banner-light.png" /&gt; 
  &lt;img alt="Support" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;p&gt;🌟 If you find this project helpful or interesting, please consider giving it a star on GitHub! Your support helps to grow the community and motivates further development.&lt;/p&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kata-containers/kata-containers</title>
      <link>https://github.com/kata-containers/kata-containers</link>
      <description>&lt;p&gt;Kata Containers is an open source project and community working to build a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs. https://katacontainers.io/&lt;/p&gt;&lt;hr&gt;&lt;img src="https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-images-prod/openstack-logo/kata/SVG/kata-1.svg?sanitize=true" width="900" /&gt; 
&lt;p&gt;&lt;a href="https://github.com/kata-containers/kata-containers/actions/workflows/payload-after-push.yaml"&gt;&lt;img src="https://github.com/kata-containers/kata-containers/actions/workflows/payload-after-push.yaml/badge.svg?sanitize=true" alt="CI | Publish Kata Containers payload" /&gt;&lt;/a&gt; &lt;a href="https://github.com/kata-containers/kata-containers/actions/workflows/ci-nightly.yaml"&gt;&lt;img src="https://github.com/kata-containers/kata-containers/actions/workflows/ci-nightly.yaml/badge.svg?sanitize=true" alt="Kata Containers Nightly CI" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/kata-containers/kata-containers"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/kata-containers/kata-containers/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Kata Containers&lt;/h1&gt; 
&lt;p&gt;Welcome to Kata Containers!&lt;/p&gt; 
&lt;p&gt;This repository is the home of the Kata Containers code for the 2.0 and newer releases.&lt;/p&gt; 
&lt;p&gt;If you want to learn about Kata Containers, visit the main &lt;a href="https://katacontainers.io"&gt;Kata Containers website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Kata Containers is an open source project and community working to build a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The code is licensed under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/LICENSE"&gt;the license file&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;Kata Containers currently runs on 64-bit systems supporting the following technologies:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Architecture&lt;/th&gt; 
   &lt;th&gt;Virtualization technology&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.intel.com"&gt;Intel&lt;/a&gt; VT-x, AMD SVM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;aarch64&lt;/code&gt; ("&lt;code&gt;arm64&lt;/code&gt;")&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.arm.com"&gt;ARM&lt;/a&gt; Hyp&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ppc64le&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ibm.com"&gt;IBM&lt;/a&gt; Power&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;s390x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ibm.com"&gt;IBM&lt;/a&gt; Z &amp;amp; LinuxONE SIE&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Hardware requirements&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime"&gt;Kata Containers runtime&lt;/a&gt; provides a command to determine if your host system is capable of running and creating a Kata Container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ kata-runtime check
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;This command runs a number of checks including connecting to the network to determine if a newer release of Kata Containers is available on GitHub. If you do not wish this to check to run, add the &lt;code&gt;--no-network-checks&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;By default, only a brief success / failure message is printed. If more details are needed, the &lt;code&gt;--verbose&lt;/code&gt; flag can be used to display the list of all the checks performed.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If the command is run as the &lt;code&gt;root&lt;/code&gt; user additional checks are run (including checking if another incompatible hypervisor is running). When running as &lt;code&gt;root&lt;/code&gt;, network checks are automatically disabled.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install"&gt;installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs"&gt;official documentation&lt;/a&gt; including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install"&gt;Installation guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/Developer-Guide.md"&gt;Developer guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design"&gt;Design documents&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design/architecture"&gt;Architecture overview&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design/architecture_3.0/"&gt;Architecture 3.0 overview&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Kata Containers uses a single &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime/README.md#configuration"&gt;configuration file&lt;/a&gt; which contains a number of sections for various parts of the Kata Containers system including the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime"&gt;runtime&lt;/a&gt;, the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/agent"&gt;agent&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/#hypervisors"&gt;hypervisor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Hypervisors&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/hypervisors.md"&gt;hypervisors document&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime/README.md#hypervisor-specific-configuration"&gt;Hypervisor specific configuration details&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;To learn more about the project, its community and governance, see the &lt;a href="https://github.com/kata-containers/community"&gt;community repository&lt;/a&gt;. This is the first place to go if you wish to contribute to the project.&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/#community"&gt;community&lt;/a&gt; section for ways to contact us.&lt;/p&gt; 
&lt;h3&gt;Raising issues&lt;/h3&gt; 
&lt;p&gt;Please raise an issue &lt;a href="https://github.com/kata-containers/kata-containers/issues"&gt;in this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are reporting a security issue, please follow the &lt;a href="https://github.com/kata-containers/community#vulnerability-handling"&gt;vulnerability reporting process&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Developers&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/Developer-Guide.md"&gt;developer guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Components&lt;/h3&gt; 
&lt;h3&gt;Main components&lt;/h3&gt; 
&lt;p&gt;The table below lists the core parts of the project:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime"&gt;runtime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;Main component run by a container manager and providing a containerd shimv2 runtime implementation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime-rs"&gt;runtime-rs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;The Rust version runtime.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/agent"&gt;agent&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;Management process running inside the virtual machine / POD that sets up the container environment.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/dragonball"&gt;&lt;code&gt;dragonball&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;An optional built-in VMM brings out-of-the-box Kata Containers experience with optimizations on container workloads&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs"&gt;documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;documentation&lt;/td&gt; 
   &lt;td&gt;Documentation common to all components (such as design and install documentation).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests"&gt;tests&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;tests&lt;/td&gt; 
   &lt;td&gt;Excludes unit tests which live with the main code.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Additional components&lt;/h3&gt; 
&lt;p&gt;The table below lists the remaining parts of the project:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging"&gt;packaging&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Scripts and metadata for producing packaged binaries&lt;br /&gt;(components, hypervisors, kernel and rootfs).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.kernel.org"&gt;kernel&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;kernel&lt;/td&gt; 
   &lt;td&gt;Linux kernel used by the hypervisor to boot the guest image. Patches are stored &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging/kernel"&gt;here&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/osbuilder"&gt;osbuilder&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Tool to create "mini O/S" rootfs and initrd images and kernel for the hypervisor.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging/kata-debug/README.md"&gt;kata-debug&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Utility tool to gather Kata Containers debug information from Kubernetes clusters.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/agent-ctl"&gt;&lt;code&gt;agent-ctl&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Tool that provides low-level access for testing the agent.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/kata-ctl"&gt;&lt;code&gt;kata-ctl&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Tool that provides advanced commands and debug facilities.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/trace-forwarder"&gt;&lt;code&gt;trace-forwarder&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Agent tracing helper.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/runk"&gt;&lt;code&gt;runk&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Standard OCI container runtime based on the agent.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/.github/workflows"&gt;&lt;code&gt;ci&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CI&lt;/td&gt; 
   &lt;td&gt;Continuous Integration configuration files and scripts.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/ci/openshift-ci/README.md"&gt;&lt;code&gt;ocp-ci&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CI&lt;/td&gt; 
   &lt;td&gt;Continuous Integration configuration for the OpenShift pipelines.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/kata-containers/www.katacontainers.io"&gt;&lt;code&gt;katacontainers.io&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Source for the &lt;a href="https://www.katacontainers.io"&gt;&lt;code&gt;katacontainers.io&lt;/code&gt;&lt;/a&gt; site.&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/testing/kata-webhook/README.md"&gt;&lt;code&gt;Webhook&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Example of a simple admission controller webhook to annotate pods with the Kata runtime class&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Packaging and releases&lt;/h3&gt; 
&lt;p&gt;Kata Containers is now &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install/README.md#packaged-installation-methods"&gt;available natively for most distributions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;General tests&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests/README.md"&gt;tests documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Metrics tests&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests/metrics/README.md"&gt;metrics documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Glossary of Terms&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/kata-containers/kata-containers/wiki/Glossary"&gt;glossary of terms&lt;/a&gt; related to Kata Containers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wezterm/wezterm</title>
      <link>https://github.com/wezterm/wezterm</link>
      <description>&lt;p&gt;A GPU-accelerated cross-platform terminal emulator and multiplexer written by @wez and implemented in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wez's Terminal&lt;/h1&gt; 
&lt;p&gt;&lt;img height="128" alt="WezTerm Icon" src="https://raw.githubusercontent.com/wezterm/wezterm/main/assets/icon/wezterm-icon.svg?sanitize=true" align="left" /&gt; &lt;em&gt;A GPU-accelerated cross-platform terminal emulator and multiplexer written by &lt;a href="https://github.com/wez"&gt;@wez&lt;/a&gt; and implemented in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;User facing docs and guide at: &lt;a href="https://wezterm.org/"&gt;https://wezterm.org/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/wezterm/wezterm/main/docs/screenshots/two.png" alt="Screenshot" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Screenshot of wezterm on macOS, running vim&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://wezterm.org/installation"&gt;https://wezterm.org/installation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;This is a spare time project, so please bear with me. There are a couple of channels for support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can use the &lt;a href="https://github.com/wezterm/wezterm/issues"&gt;GitHub issue tracker&lt;/a&gt; to see if someone else has a similar issue, or to file a new one.&lt;/li&gt; 
 &lt;li&gt;Start or join a thread in our &lt;a href="https://github.com/wezterm/wezterm/discussions"&gt;GitHub Discussions&lt;/a&gt;; if you have general questions or want to chat with other wezterm users, you're welcome here!&lt;/li&gt; 
 &lt;li&gt;There is a &lt;a href="https://app.element.io/#/room/#wezterm:matrix.org"&gt;Matrix room via Element.io&lt;/a&gt; for (potentially!) real time discussions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The GitHub Discussions and Element/Gitter rooms are better suited for questions than bug reports, but don't be afraid to use whichever you are most comfortable using and we'll work it out.&lt;/p&gt; 
&lt;h2&gt;Supporting the Project&lt;/h2&gt; 
&lt;p&gt;If you use and like WezTerm, please consider sponsoring it: your support helps to cover the fees required to maintain the project and to validate the time spent working on it!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://wezterm.org/sponsor.html"&gt;Read more about sponsoring&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sponsors/wez"&gt;&lt;img src="https://img.shields.io/github/sponsors/wez?label=Sponsor%20WezTerm&amp;amp;logo=github&amp;amp;style=for-the-badge" alt="Sponsor WezTerm" /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://patreon.com/WezFurlong"&gt;Patreon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ko-fi.com/wezfurlong"&gt;Ko-Fi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://liberapay.com/wez"&gt;Liberapay&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>openai/codex</title>
      <link>https://github.com/openai/codex</link>
      <description>&lt;p&gt;Lightweight coding agent that runs in your terminal&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;OpenAI Codex CLI&lt;/h1&gt; 
&lt;p align="center"&gt;&lt;code&gt;npm i -g @openai/codex&lt;/code&gt;&lt;br /&gt;or &lt;code&gt;brew install codex&lt;/code&gt;&lt;/p&gt; 
&lt;p align="center"&gt;&lt;strong&gt;Codex CLI&lt;/strong&gt; is a coding agent from OpenAI that runs locally on your computer. &lt;br /&gt; &lt;br /&gt;If you want Codex in your code editor (VS Code, Cursor, Windsurf), &lt;a href="https://developers.openai.com/codex/ide"&gt;install in your IDE&lt;/a&gt; &lt;br /&gt;If you are looking for the &lt;em&gt;cloud-based agent&lt;/em&gt; from OpenAI, &lt;strong&gt;Codex Web&lt;/strong&gt;, go to &lt;a href="https://chatgpt.com/codex"&gt;chatgpt.com/codex&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-splash.png" alt="Codex CLI splash" width="80%" /&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Installing and running Codex CLI&lt;/h3&gt; 
&lt;p&gt;Install globally with your preferred package manager. If you use npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;npm install -g @openai/codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if you use Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;brew install codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then simply run &lt;code&gt;codex&lt;/code&gt; to get started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;You can also go to the &lt;a href="https://github.com/openai/codex/releases/latest"&gt;latest GitHub Release&lt;/a&gt; and download the appropriate binary for your platform.&lt;/summary&gt; 
 &lt;p&gt;Each GitHub Release contains many executables, but in practice, you likely want one of these:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;macOS 
   &lt;ul&gt; 
    &lt;li&gt;Apple Silicon/arm64: &lt;code&gt;codex-aarch64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;x86_64 (older Mac hardware): &lt;code&gt;codex-x86_64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Linux 
   &lt;ul&gt; 
    &lt;li&gt;x86_64: &lt;code&gt;codex-x86_64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;arm64: &lt;code&gt;codex-aarch64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Each archive contains a single entry with the platform baked into the name (e.g., &lt;code&gt;codex-x86_64-unknown-linux-musl&lt;/code&gt;), so you likely want to rename it to &lt;code&gt;codex&lt;/code&gt; after extracting it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using Codex with your ChatGPT plan&lt;/h3&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-login.png" alt="Codex CLI login" width="80%" /&gt; &lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;codex&lt;/code&gt; and select &lt;strong&gt;Sign in with ChatGPT&lt;/strong&gt;. We recommend signing into your ChatGPT account to use Codex as part of your Plus, Pro, Team, Edu, or Enterprise plan. &lt;a href="https://help.openai.com/en/articles/11369540-codex-in-chatgpt"&gt;Learn more about what's included in your ChatGPT plan&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also use Codex with an API key, but this requires &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#usage-based-billing-alternative-use-an-openai-api-key"&gt;additional setup&lt;/a&gt;. If you previously used an API key for usage-based billing, see the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#migrating-from-usage-based-billing-api-key"&gt;migration steps&lt;/a&gt;. If you're having trouble with login, please comment on &lt;a href="https://github.com/openai/codex/issues/1243"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Model Context Protocol (MCP)&lt;/h3&gt; 
&lt;p&gt;Codex CLI supports &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#model-context-protocol-mcp"&gt;MCP servers&lt;/a&gt;. Enable by adding an &lt;code&gt;mcp_servers&lt;/code&gt; section to your &lt;code&gt;~/.codex/config.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;Codex CLI supports a rich set of configuration options, with preferences stored in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;. For full configuration options, see &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Docs &amp;amp; FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md"&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#cli-usage"&gt;CLI usage&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#running-with-a-prompt-as-input"&gt;Running with a prompt as input&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#example-prompts"&gt;Example prompts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#memory-with-agentsmd"&gt;Memory with AGENTS.md&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/sandbox.md"&gt;&lt;strong&gt;Sandbox &amp;amp; approvals&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md"&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#forcing-a-specific-auth-method-advanced"&gt;Auth methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#connecting-on-a-headless-machine"&gt;Login on a "Headless" machine&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md"&gt;&lt;strong&gt;Advanced&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#non-interactive--ci-mode"&gt;Non-interactive / CI mode&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#tracing--verbose-logging"&gt;Tracing / verbose logging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#model-context-protocol-mcp"&gt;Model Context Protocol (MCP)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/zdr.md"&gt;&lt;strong&gt;Zero data retention (ZDR)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/contributing.md"&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md"&gt;&lt;strong&gt;Install &amp;amp; build&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#system-requirements"&gt;System Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#dotslash"&gt;DotSlash&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#build-from-source"&gt;Build from source&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/faq.md"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/open-source-fund.md"&gt;&lt;strong&gt;Open source fund&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/LICENSE"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>leptos-rs/leptos</title>
      <link>https://github.com/leptos-rs/leptos</link>
      <description>&lt;p&gt;Build fast web applications with Rust.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source srcset="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_pref_dark_RGB.svg" media="(prefers-color-scheme: dark)" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_RGB.svg?sanitize=true" alt="Leptos Logo" /&gt; 
&lt;/picture&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/leptos"&gt;&lt;img src="https://img.shields.io/crates/v/leptos.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/leptos"&gt;&lt;img src="https://docs.rs/leptos/badge.svg?sanitize=true" alt="docs.rs" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/msrv/leptos" alt="Crates.io MSRV" /&gt; &lt;a href="https://discord.gg/YdRAhS7eQB"&gt;&lt;img src="https://img.shields.io/discord/1031524867910148188?color=%237289DA&amp;amp;label=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/#leptos:matrix.org"&gt;&lt;img src="https://img.shields.io/badge/Matrix-leptos-grey?logo=matrix&amp;amp;labelColor=white&amp;amp;logoColor=black" alt="Matrix" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://leptos.dev"&gt;Website&lt;/a&gt; | &lt;a href="https://leptos-rs.github.io/leptos/"&gt;Book&lt;/a&gt; | &lt;a href="https://docs.rs/leptos/latest/leptos/"&gt;Docs.rs&lt;/a&gt; | &lt;a href="https://codesandbox.io/p/sandbox/leptos-rtfggt?file=%2Fsrc%2Fmain.rs%3A1%2C1"&gt;Playground&lt;/a&gt; | &lt;a href="https://discord.gg/YdRAhS7eQB"&gt;Discord&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can find a list of useful libraries and example projects at &lt;a href="https://github.com/leptos-rs/awesome-leptos"&gt;&lt;code&gt;awesome-leptos&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Leptos&lt;/h1&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use leptos::*;

#[component]
pub fn SimpleCounter(initial_value: i32) -&amp;gt; impl IntoView {
    // create a reactive signal with the initial value
    let (value, set_value) = signal(initial_value);

    // create event handlers for our buttons
    // note that `value` and `set_value` are `Copy`, so it's super easy to move them into closures
    let clear = move |_| set_value(0);
    let decrement = move |_| set_value.update(|value| *value -= 1);
    let increment = move |_| set_value.update(|value| *value += 1);

    // create user interfaces with the declarative `view!` macro
    view! {
        &amp;lt;div&amp;gt;
            &amp;lt;button on:click=clear&amp;gt;Clear&amp;lt;/button&amp;gt;
            &amp;lt;button on:click=decrement&amp;gt;-1&amp;lt;/button&amp;gt;
            // text nodes can be quoted or unquoted
            &amp;lt;span&amp;gt;"Value: " {value} "!"&amp;lt;/span&amp;gt;
            &amp;lt;button on:click=increment&amp;gt;+1&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    }
}

// we also support a builder syntax rather than the JSX-like `view` macro
#[component]
pub fn SimpleCounterWithBuilder(initial_value: i32) -&amp;gt; impl IntoView {
    use leptos::html::*;

    let (value, set_value) = signal(initial_value);
    let clear = move |_| set_value(0);
    let decrement = move |_| set_value.update(|value| *value -= 1);
    let increment = move |_| set_value.update(|value| *value += 1);

    // the `view` macro above expands to this builder syntax
    div().child((
        button().on(ev::click, clear).child("Clear"),
        button().on(ev::click, decrement).child("-1"),
        span().child(("Value: ", value, "!")),
        button().on(ev::click, increment).child("+1")
    ))
}

// Easy to use with Trunk (trunkrs.dev) or with a simple wasm-bindgen setup
pub fn main() {
    mount_to_body(|| view! {
        &amp;lt;SimpleCounter initial_value=3 /&amp;gt;
    })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;About the Framework&lt;/h2&gt; 
&lt;p&gt;Leptos is a full-stack, isomorphic Rust web framework leveraging fine-grained reactivity to build declarative user interfaces.&lt;/p&gt; 
&lt;h2&gt;What does that mean?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Full-stack&lt;/strong&gt;: Leptos can be used to build apps that run in the browser (client-side rendering), on the server (server-side rendering), or by rendering HTML on the server and then adding interactivity in the browser (server-side rendering with hydration). This includes support for HTTP streaming of both data (&lt;a href="https://docs.rs/leptos/latest/leptos/struct.Resource.html"&gt;&lt;code&gt;Resource&lt;/code&gt;s&lt;/a&gt;) and HTML (out-of-order or in-order streaming of &lt;a href="https://docs.rs/leptos/latest/leptos/fn.Suspense.html"&gt;&lt;code&gt;&amp;lt;Suspense/&amp;gt;&lt;/code&gt;&lt;/a&gt; components.)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Isomorphic&lt;/strong&gt;: Leptos provides primitives to write isomorphic &lt;a href="https://docs.rs/leptos_server/0.2.5/leptos_server/index.html"&gt;server functions&lt;/a&gt;, i.e., functions that can be called with the “same shape” on the client or server, but only run on the server. This means you can write your server-only logic (database requests, authentication etc.) alongside the client-side components that will consume it, and call server functions as if they were running in the browser, without needing to create and maintain a separate REST or other API.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;: Leptos is built on the Web platform and Web standards. The &lt;a href="https://docs.rs/leptos_router/latest/leptos_router/"&gt;router&lt;/a&gt; is designed to use Web fundamentals (like links and forms) and build on top of them rather than trying to replace them.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Framework&lt;/strong&gt;: Leptos provides most of what you need to build a modern web app: a reactive system, templating library, and a router that works on both the server and client side.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fine-grained reactivity&lt;/strong&gt;: The entire framework is built from reactive primitives. This allows for extremely performant code with minimal overhead: when a reactive signal’s value changes, it can update a single text node, toggle a single class, or remove an element from the DOM without any other code running. (So, no virtual DOM overhead!)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Declarative&lt;/strong&gt;: Tell Leptos how you want the page to look, and let the framework tell the browser how to do it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn more&lt;/h2&gt; 
&lt;p&gt;Here are some resources for learning more about Leptos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://leptos-rs.github.io/leptos/"&gt;Book&lt;/a&gt; (work in progress)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/leptos-rs/leptos/tree/main/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/leptos/latest/leptos/"&gt;API Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/leptos-rs/leptos/tree/main/docs/COMMON_BUGS.md"&gt;Common Bugs&lt;/a&gt; (and how to fix them!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;code&gt;cargo-leptos&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/leptos-rs/cargo-leptos"&gt;&lt;code&gt;cargo-leptos&lt;/code&gt;&lt;/a&gt; is a build tool that's designed to make it easy to build apps that run on both the client and the server, with seamless integration. The best way to get started with a real Leptos project right now is to use &lt;code&gt;cargo-leptos&lt;/code&gt; and our starter templates for &lt;a href="https://github.com/leptos-rs/start"&gt;Actix&lt;/a&gt; or &lt;a href="https://github.com/leptos-rs/start-axum"&gt;Axum&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install cargo-leptos --locked
cargo leptos new --git https://github.com/leptos-rs/start-axum
cd [your project name]
cargo leptos watch
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open browser to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;FAQs&lt;/h2&gt; 
&lt;h3&gt;What’s up with the name?&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Leptos&lt;/em&gt; (λεπτός) is an ancient Greek word meaning “thin, light, refined, fine-grained.” To me, a classicist and not a dog owner, it evokes the lightweight reactive system that powers the framework. I've since learned the same word is at the root of the medical term “leptospirosis,” a blood infection that affects humans and animals... My bad. No dogs were harmed in the creation of this framework.&lt;/p&gt; 
&lt;h3&gt;Is it production ready?&lt;/h3&gt; 
&lt;p&gt;People usually mean one of three things by this question.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Are the APIs stable?&lt;/strong&gt; i.e., will I have to rewrite my whole app from Leptos 0.1 to 0.2 to 0.3 to 0.4, or can I write it now and benefit from new features and updates as new versions come?&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The APIs are basically settled. We’re adding new features, but we’re very happy with where the type system and patterns have landed. I would not expect major breaking changes to your code to adapt to future releases, in terms of architecture.&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;&lt;strong&gt;Are there bugs?&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Yes, I’m sure there are. You can see from the state of our issue tracker over time that there aren’t that &lt;em&gt;many&lt;/em&gt; bugs and they’re usually resolved pretty quickly. But for sure, there may be moments where you encounter something that requires a fix at the framework level, which may not be immediately resolved.&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;&lt;strong&gt;Am I a consumer or a contributor?&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This may be the big one: “production ready” implies a certain orientation to a library: that you can basically use it, without any special knowledge of its internals or ability to contribute. Everyone has this at some level in their stack: for example I (@gbj) don’t have the capacity or knowledge to contribute to something like &lt;code&gt;wasm-bindgen&lt;/code&gt; at this point: I simply rely on it to work.&lt;/p&gt; 
&lt;p&gt;There are several people in the community using Leptos right now for many websites at work, who have also become significant contributors. There may be missing features that you need, and you may end up building them! But, if you're willing to contribute a few missing pieces along the way, the framework is most definitely usable for production applications, especially given the ecosystem of libraries that have sprung up around it.&lt;/p&gt; 
&lt;h3&gt;Can I use this for native GUI?&lt;/h3&gt; 
&lt;p&gt;Sure! Obviously the &lt;code&gt;view&lt;/code&gt; macro is for generating DOM nodes but you can use the reactive system to drive any native GUI toolkit that uses the same kind of object-oriented, event-callback-based framework as the DOM pretty easily. The principles are the same:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use signals, derived signals, and memos to create your reactive system&lt;/li&gt; 
 &lt;li&gt;Create GUI widgets&lt;/li&gt; 
 &lt;li&gt;Use event listeners to update signals&lt;/li&gt; 
 &lt;li&gt;Create effects to update the UI&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The 0.7 update originally set out to create a "generic rendering" approach that would allow us to reuse most of the same view logic to do all of the above. Unfortunately, this has had to be shelved for now due to difficulties encountered by the Rust compiler when building larger-scale applications with the number of generics spread throughout the codebase that this required. It's an approach I'm looking forward to exploring again in the future; feel free to reach out if you're interested in this kind of work.&lt;/p&gt; 
&lt;h3&gt;How is this different from Yew?&lt;/h3&gt; 
&lt;p&gt;Yew is the most-used library for Rust web UI development, but there are several differences between Yew and Leptos, in philosophy, approach, and performance.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;VDOM vs. fine-grained:&lt;/strong&gt; Yew is built on the virtual DOM (VDOM) model: state changes cause components to re-render, generating a new virtual DOM tree. Yew diffs this against the previous VDOM, and applies those patches to the actual DOM. Component functions rerun whenever state changes. Leptos takes an entirely different approach. Components run once, creating (and returning) actual DOM nodes and setting up a reactive system to update those DOM nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; This has huge performance implications: Leptos is simply much faster at both creating and updating the UI than Yew is.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Server integration:&lt;/strong&gt; Yew was created in an era in which browser-rendered single-page apps (SPAs) were the dominant paradigm. While Leptos supports client-side rendering, it also focuses on integrating with the server side of your application via server functions and multiple modes of serving HTML, including out-of-order streaming.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How is this different from Dioxus?&lt;/h3&gt; 
&lt;p&gt;Like Leptos, Dioxus is a framework for building UIs using web technologies. However, there are significant differences in approach and features.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;VDOM vs. fine-grained:&lt;/strong&gt; While Dioxus has a performant virtual DOM (VDOM), it still uses coarse-grained/component-scoped reactivity: changing a stateful value reruns the component function and diffs the old UI against the new one. Leptos components use a different mental model, creating (and returning) actual DOM nodes and setting up a reactive system to update those DOM nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web vs. desktop priorities:&lt;/strong&gt; Dioxus uses Leptos server functions in its fullstack mode, but does not have the same &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt;-based support for things like streaming HTML rendering, or share the same focus on holistic web performance. Leptos tends to prioritize holistic web performance (streaming HTML rendering, smaller WASM binary sizes, etc.), whereas Dioxus has an unparalleled experience when building desktop apps, because your application logic runs as a native Rust binary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How is this different from Sycamore?&lt;/h3&gt; 
&lt;p&gt;Sycamore and Leptos are both heavily influenced by SolidJS. At this point, Leptos has a larger community and ecosystem and is more actively developed. Other differences:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Templating DSLs:&lt;/strong&gt; Sycamore uses a custom templating language for its views, while Leptos uses a JSX-like template format.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;'static&lt;/code&gt; signals:&lt;/strong&gt; One of Leptos’s main innovations was the creation of &lt;code&gt;Copy + 'static&lt;/code&gt; signals, which have excellent ergonomics. Sycamore is in the process of adopting the same pattern, but this is not yet released.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Perseus vs. server functions:&lt;/strong&gt; The Perseus metaframework provides an opinionated way to build Sycamore apps that include server functionality. Leptos instead provides primitives like server functions in the core of the framework.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>glzr-io/glazewm</title>
      <link>https://github.com/glzr-io/glazewm</link>
      <description>&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3wm.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;V3 is finally out - check out the changelog &lt;a href="https://github.com/glzr-io/GlazeWM/releases"&gt;here&lt;/a&gt; 🔥&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;br /&gt; 
 &lt;img src="https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/logo.svg?sanitize=true" width="230" alt="GlazeWM logo" /&gt; 
 &lt;br /&gt; 
 &lt;h1&gt;GlazeWM&lt;/h1&gt; 
 &lt;p&gt;&lt;strong&gt;A tiling window manager for Windows inspired by i3wm.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/ud6z3qjRvM"&gt;&lt;img src="https://img.shields.io/discord/1041662798196908052.svg?logo=discord&amp;amp;colorB=7289DA" alt="Discord invite" /&gt;&lt;/a&gt; &lt;a href="https://github.com/glzr-io/glazewm/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/glzr-io/glazewm/total?logo=github&amp;amp;logoColor=white" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/orgs/glzr-io/projects/4/views/1?sliceBy%5Bvalue%5D=good+first+issue"&gt;&lt;img src="https://img.shields.io/badge/good_first_issues-7057ff" alt="Good first issues" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;GlazeWM lets you easily organize windows and adjust their layout on the fly by using keyboard-driven commands.&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#installation"&gt;Installation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#default-keybindings"&gt;Default keybindings&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#config-documentation"&gt;Config documentation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#faq"&gt;FAQ&lt;/a&gt; • &lt;a href="https://github.com/glzr-io/glazewm/raw/main/CONTRIBUTING.md"&gt;Contributing ↗&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/demo.webp" alt="Demo video" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;🌟 Key features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple YAML configuration&lt;/li&gt; 
 &lt;li&gt;Multi-monitor support&lt;/li&gt; 
 &lt;li&gt;Customizable rules for specific windows&lt;/li&gt; 
 &lt;li&gt;Easy one-click installation&lt;/li&gt; 
 &lt;li&gt;Integration with &lt;a href="https://github.com/glzr-io/zebar"&gt;Zebar&lt;/a&gt; as a status bar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;The latest version of GlazeWM is downloadable via &lt;a href="https://github.com/glzr-io/GlazeWM/releases"&gt;releases&lt;/a&gt;.&lt;/strong&gt; Zebar can optionally be installed as well via a checkbox during installation.&lt;/p&gt; 
&lt;p&gt;GlazeWM is also available through several package managers:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Winget&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;winget install GlazeWM
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Chocolatey&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install glazewm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Scoop&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;scoop bucket add extras
scoop install extras/glazewm
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Help fix something that annoys you, or add a feature you've been wanting for a long time! Contributions are very welcome.&lt;/p&gt; 
&lt;p&gt;Local development and guidelines are available in the &lt;a href="https://github.com/glzr-io/glazewm/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Default keybindings&lt;/h2&gt; 
&lt;p&gt;On the first launch of GlazeWM, a default configuration can optionally be generated.&lt;/p&gt; 
&lt;p&gt;Below is a cheat sheet of all available commands and their default keybindings.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/cheatsheet.png" alt="Infographic" /&gt;&lt;/p&gt; 
&lt;h2&gt;Config documentation&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/glzr-io/glazewm/raw/main/resources/assets/sample-config.yaml"&gt;default config&lt;/a&gt; file is generated at &lt;code&gt;%userprofile%\.glzr\glazewm\config.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To use a different config file location, you can launch the GlazeWM executable with the CLI argument &lt;code&gt;--config="..."&lt;/code&gt;, like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./glazewm.exe start --config="C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or pass a value for the &lt;code&gt;GLAZEWM_CONFIG_PATH&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;setx GLAZEWM_CONFIG_PATH "C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the benefit of using a custom path being that you can choose a different name for the config file, such as &lt;code&gt;glazewm.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Config: General&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;general:
  # Commands to run when the WM has started (e.g. to run a script or launch
  # another application).
  startup_commands: []

  # Commands to run just before the WM is shutdown.
  shutdown_commands: []

  # Commands to run after the WM config has reloaded.
  config_reload_commands: []

  # Whether to automatically focus windows underneath the cursor.
  focus_follows_cursor: false

  # Whether to switch back and forth between the previously focused
  # workspace when focusing the current workspace.
  toggle_workspace_on_refocus: false

  cursor_jump:
    # Whether to automatically move the cursor on the specified trigger.
    enabled: true

    # Trigger for cursor jump:
    # - 'monitor_focus': Jump when focus changes between monitors.
    # - 'window_focus': Jump when focus changes between windows.
    trigger: "monitor_focus"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Keybindings&lt;/h3&gt; 
&lt;p&gt;The available keyboard shortcuts can be customized via the &lt;code&gt;keybindings&lt;/code&gt; option. A keybinding consists of one or more key combinations and one or more commands to run when pressed.&lt;/p&gt; 
&lt;p&gt;It's recommended to use the alt key for keybindings. The Windows key is unfortunately a pain to remap, since the OS reserves certain keybindings (e.g. &lt;code&gt;lwin+l&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;keybindings:
  # Command(s) to run.
  - commands: ["focus --workspace 1"]

    # Key combination(s) to trigger the keybinding.
    bindings: ["alt+1"]

  # Multiple commands can be run in a sequence (e.g. to move a window to a
  # workspace + focus workspace).
  - commands: ["move --workspace 1", "focus --workspace 1"]
    bindings: ["alt+shift+1"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Full list of keys that can be used for keybindings:&lt;/strong&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Keys list&lt;/summary&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Key&lt;/th&gt; 
    &lt;th&gt;Description&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;a&lt;/code&gt; - &lt;code&gt;z&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Alphabetical letter keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;0&lt;/code&gt; - &lt;code&gt;9&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Number keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;numpad0&lt;/code&gt; - &lt;code&gt;numpad9&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Numerical keypad keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;f1&lt;/code&gt; - &lt;code&gt;f24&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Function keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Either left or right SHIFT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lshift&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left SHIFT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;rshift&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right SHIFT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;control&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Either left or right CTRL key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lctrl&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left CTRL key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;rctrl&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right CTRL key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Either left or right ALT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lalt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left ALT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;ralt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right ALT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lwin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left ⊞ Windows logo key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;rwin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right ⊞ Windows logo key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;space&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The spacebar key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ESCAPE key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;back&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The BACKSPACE key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The TAB key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;enter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ENTER key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;left&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ← arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;right&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The → arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;up&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ↑ arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;down&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ↓ arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;num_lock&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The NUM LOCK key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;scroll_lock&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The SCROLL LOCK key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;caps_lock&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The CAPS LOCK key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;page_up&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The PAGE UP key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;page_down&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The PAGE DOWN key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The INSERT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The DELETE key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The END key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;home&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The HOME key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;print_screen&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The PRINT SCREEN key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;multiply&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;*&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;add&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;+&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;subtract&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;-&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The DEL key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;divide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;/&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;volume_up&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The volume up key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;volume_down&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The volume down key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;volume_mute&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The volume mute key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_next_track&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media next track key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_prev_track&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media prev track key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_stop&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media stop key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_play_pause&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media play/pause key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_semicolon&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;;&lt;/code&gt;/&lt;code&gt;:&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_question&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;/&lt;/code&gt;/&lt;code&gt;?&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_tilde&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;`&lt;/code&gt;/&lt;code&gt;~&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_open_brackets&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;[&lt;/code&gt;/&lt;code&gt;{&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_pipe&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;\&lt;/code&gt;/&lt;code&gt;|&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_close_brackets&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;]&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_quotes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;'&lt;/code&gt;/&lt;code&gt;"&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_plus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;=&lt;/code&gt;/&lt;code&gt;+&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_comma&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;,&lt;/code&gt;/&lt;code&gt;&amp;lt;&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_minus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;-&lt;/code&gt;/&lt;code&gt;_&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_period&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;.&lt;/code&gt;/&lt;code&gt;&amp;gt;&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;p&gt;If a key is not in the list above, it is likely still supported if you use its character in a keybinding (e.g. &lt;code&gt;alt+å&lt;/code&gt; for the Norwegian Å character).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;German and US international keyboards treat the right-side alt key differently. For these keyboard layouts, use &lt;code&gt;ralt+ctrl&lt;/code&gt; instead of &lt;code&gt;ralt&lt;/code&gt; to bind the right-side alt key.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Config: Gaps&lt;/h3&gt; 
&lt;p&gt;The gaps between windows can be changed via the &lt;code&gt;gaps&lt;/code&gt; property in the config file. Inner and outer gaps are set separately.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;gaps:
  # Gap between adjacent windows.
  inner_gap: "20px"

  # Gap between windows and the screen edge.
  outer_gap:
    top: "20px"
    right: "20px"
    bottom: "20px"
    left: "20px"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Workspaces&lt;/h3&gt; 
&lt;p&gt;Workspaces need to be predefined via the &lt;code&gt;workspaces&lt;/code&gt; property in the config file. A workspace is automatically assigned to each monitor on startup.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;workspaces:
  # This is the unique ID for the workspace. It's used in keybinding
  # commands, and is also the label shown in 3rd-party apps (e.g. Zebar) if
  # `display_name` is not provided.
  - name: "1"

    # Optional override for the workspace label used in 3rd-party apps.
    # Does not need to be unique.
    display_name: "Work"

    # Optionally force the workspace on a specific monitor if it exists.
    # 0 is your leftmost screen, 1 is the next one to the right, and so on.
    bind_to_monitor: 0

    # Optionally prevent workspace from being deactivated when empty.
    keep_alive: false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Window rules&lt;/h3&gt; 
&lt;p&gt;Commands can be run when a window is first launched. This is useful for adding window-specific behaviors like always starting a window as fullscreen or assigning to a specific workspace.&lt;/p&gt; 
&lt;p&gt;Windows can be targeted by their process, class, and title. Multiple matching criteria can be used together to target a window more precisely.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_rules:
  - commands: ["move --workspace 1"]
    match:
      # Move browsers to workspace 1.
      - window_process: { regex: "msedge|brave|chrome" }

  - commands: ["ignore"]
    match:
      # Ignores any Zebar windows.
      - window_process: { equals: "zebar" }

      # Ignores picture-in-picture windows for browsers.
      # Note that *both* the title and class must match for the rule to run.
      - window_title: { regex: "[Pp]icture.in.[Pp]icture" }
        window_class: { regex: "Chrome_WidgetWin_1|MozillaDialogClass" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Window effects&lt;/h3&gt; 
&lt;p&gt;Visual effects can be applied to windows via the &lt;code&gt;window_effects&lt;/code&gt; option. Currently, colored borders are the only effect available with more to come in the future.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Window effects are exclusive to Windows 11.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_effects:
  # Visual effects to apply to the focused window.
  focused_window:
    # Highlight the window with a colored border.
    border:
      enabled: true
      color: "#0000ff"

  # Visual effects to apply to non-focused windows.
  other_windows:
    border:
      enabled: false
      color: "#d3d3d3"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Window behavior&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;window_behavior&lt;/code&gt; config option exists to customize the states that a window can be in (&lt;code&gt;tiling&lt;/code&gt;, &lt;code&gt;floating&lt;/code&gt;, &lt;code&gt;minimized&lt;/code&gt;, and &lt;code&gt;fullscreen&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_behavior:
  # New windows are created in this state whenever possible.
  # Allowed values: 'tiling', 'floating'.
  initial_state: "tiling"

  # Sets the default options for when a new window is created. This also
  # changes the defaults for when the state change commands, like
  # `set-floating`, are used without any flags.
  state_defaults:
    floating:
      # Whether to center floating windows by default.
      centered: true

      # Whether to show floating windows as always on top.
      shown_on_top: false

    fullscreen:
      # Maximize the window if possible. If the window doesn't have a
      # maximize button, then it'll be made fullscreen normally instead.
      maximized: false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Binding modes&lt;/h3&gt; 
&lt;p&gt;Binding modes are used to modify keybindings while GlazeWM is running.&lt;/p&gt; 
&lt;p&gt;A binding mode can be enabled with &lt;code&gt;wm-enable-binding-mode --name &amp;lt;NAME&amp;gt;&lt;/code&gt; and disabled with &lt;code&gt;wm-disable-binding-mode --name &amp;lt;NAME&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;binding_modes:
  # When enabled, the focused window can be resized via arrow keys or HJKL.
  - name: "resize"
    keybindings:
      - commands: ["resize --width -2%"]
        bindings: ["h", "left"]
      - commands: ["resize --width +2%"]
        bindings: ["l", "right"]
      - commands: ["resize --height +2%"]
        bindings: ["k", "up"]
      - commands: ["resize --height -2%"]
        bindings: ["j", "down"]
      # Press enter/escape to return to default keybindings.
      - commands: ["wm-disable-binding-mode --name resize"]
        bindings: ["escape", "enter"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Q: How do I run GlazeWM on startup?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Create a shortcut for the executable by right-clicking on the GlazeWM executable -&amp;gt; &lt;code&gt;Create shortcut&lt;/code&gt;. Put the shortcut in your startup folder, which you can get to by entering &lt;code&gt;shell:startup&lt;/code&gt; in the top bar in File Explorer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How can I create &lt;code&gt;&amp;lt;insert layout&amp;gt;&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can create custom layouts by changing the tiling direction with &lt;code&gt;alt+v&lt;/code&gt;. This changes where the next window is placed &lt;em&gt;in relation to the current window&lt;/em&gt;. If the current window's direction is horizontal, the new window will be placed to the right of it. If it is vertical, it will be placed below it. This also applies when moving windows; the tiling direction of the stationary window will affect where the moved window will be placed.&lt;/p&gt; 
&lt;p&gt;Community-made scripts like &lt;a href="https://github.com/Dutch-Raptor/GAT-GWM"&gt;Dutch-Raptor/GAT-GWM&lt;/a&gt; and &lt;a href="https://github.com/burgr033/GlazeWM-autotiling-python"&gt;burgr033/GlazeWM-autotiling-python&lt;/a&gt; can be used to automatically change the tiling direction. Native support for automatic layouts isn't &lt;em&gt;currently&lt;/em&gt; supported.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How do I create a rule for &lt;code&gt;&amp;lt;insert application&amp;gt;&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;To match a specific application, you need a command to execute and either the window's process name, title, or class name. For example, if you use Flow-Launcher and want to make the settings window float, you can do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_rules:
  - commands: ["set-floating"]
    match:
      - window_process: { equals: "Flow.Launcher" }
        window_title: { equals: "Settings" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Programs like Winlister or AutoHotkey's Window Spy can be useful for getting info about a window.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How can I ignore GlazeWM's keybindings when &lt;code&gt;&amp;lt;insert application&amp;gt;&lt;/code&gt; is focused?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This isn't currently supported, however, the keybinding &lt;code&gt;alt+shift+p&lt;/code&gt; in the default config is used to disable all other keybindings until &lt;code&gt;alt+shift+p&lt;/code&gt; is pressed again.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>libnyanpasu/clash-nyanpasu</title>
      <link>https://github.com/libnyanpasu/clash-nyanpasu</link>
      <description>&lt;p&gt;Clash Nyanpasu～(∠・ω&lt; )⌒☆&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;img src="https://nyanpasu.elaina.moe/images/banner/nyanpasu_banner.png" alt="Clash Nyanpasu Banner" /&gt; &lt;/h1&gt; 
&lt;h3&gt;Clash Nyanpasu&lt;/h3&gt; 
&lt;h3&gt; A &lt;a href="https://github.com/Dreamacro/clash"&gt;Clash&lt;/a&gt; GUI based on &lt;a href="https://github.com/tauri-apps/tauri"&gt;Tauri&lt;/a&gt;. &lt;/h3&gt; 
&lt;p&gt; &lt;a href="https://github.com/libnyanpasu/clash-nyanpasu/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/libnyanpasu/clash-nyanpasu?style=flat-square" alt="Nyanpasu Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/libnyanpasu/clash-nyanpasu/releases/pre-release"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/libnyanpasu/clash-nyanpasu/target-dev-build.yaml?style=flat-square" alt="Dev Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/libnyanpasu/clash-nyanpasu/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/libnyanpasu/clash-nyanpasu?style=flat-square" alt="Nyanpasu Stars" /&gt;&lt;/a&gt; &lt;a href="https://github.com/libnyanpasu/clash-nyanpasu/releases/latest"&gt;&lt;img src="https://img.shields.io/github/downloads/libnyanpasu/clash-nyanpasu/total?style=flat-square" alt="GitHub Downloads (all assets, all releases)" /&gt;&lt;/a&gt; &lt;a href="https://github.com/libnyanpasu/clash-nyanpasu/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/libnyanpasu/clash-nyanpasu?style=flat-square" alt="Nyanpasu License" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/ClashNyanpasu"&gt;&lt;img src="https://img.shields.io/twitter/follow/ClashNyanpasu?style=flat-square" alt="Nyanpasu Twitter" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in support &lt;a href="https://github.com/Dreamacro/clash"&gt;Clash Premium&lt;/a&gt;, &lt;a href="https://github.com/MetaCubeX/mihomo"&gt;Mihomo&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/Watfaq/clash-rs"&gt;Clash Rust&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Profiles management and enhancement (by YAML, JavaScript &amp;amp; Lua). &lt;a href="https://nyanpasu.elaina.moe/tutorial/proxy-chain"&gt;Doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Provider management support.&lt;/li&gt; 
 &lt;li&gt;Google Material You Design UI and animation support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Preview&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://nyanpasu.elaina.moe/images/screenshot/app-dashboard-light.png" alt="preview-light" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://nyanpasu.elaina.moe/images/screenshot/app-dashboard-dark.png" alt="preview-dark" /&gt;&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nyanpasu.elaina.moe/tutorial/install"&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nyanpasu.elaina.moe/others/faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nyanpasu.elaina.moe/others/issues"&gt;Q&amp;amp;A Convention&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nyanpasu.elaina.moe/others/how-to-ask"&gt;How To Ask Questions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Configure your development environment&lt;/h3&gt; 
&lt;p&gt;You should install Rust and Node.js, see &lt;a href="https://v2.tauri.app/start/prerequisites/"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Clash Nyanpasu uses the pnpm package manager. See &lt;a href="https://pnpm.io/installation"&gt;here&lt;/a&gt; for installation instructions. Then, install Node.js packages.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;pnpm i
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Download the Clash binary &amp;amp; other dependencies&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# force update to latest version
# pnpm check --force

pnpm check
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run dev&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;pnpm dev

# run it in another way if app instance exists
pnpm dev:diff
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build application&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;pnpm build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Issue and PR welcome!&lt;/p&gt; 
&lt;h2&gt;Acknowledgement&lt;/h2&gt; 
&lt;p&gt;Clash Nyanpasu was based on or inspired by these projects and so on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zzzgydi/clash-verge"&gt;zzzgydi/clash-verge&lt;/a&gt;: A Clash GUI based on Tauri. Supports Windows, macOS and Linux.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clash-verge-rev/clash-verge-rev"&gt;clash-verge-rev/clash-verge-rev&lt;/a&gt;: Another fork of Clash Verge. Some patches are included for bug fixes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tauri-apps/tauri"&gt;tauri-apps/tauri&lt;/a&gt;: Build smaller, faster, and more secure desktop applications with a web frontend.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Dreamacro/clash"&gt;Dreamacro/clash&lt;/a&gt;: A rule-based tunnel in Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MetaCubeX/mihomo"&gt;MetaCubeX/mihomo&lt;/a&gt;: A rule-based tunnel in Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Watfaq/clash-rs"&gt;Watfaq/clash-rs&lt;/a&gt;: A custom protocol, rule based network proxy software.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Fndroid/clash_for_windows_pkg"&gt;Fndroid/clash_for_windows_pkg&lt;/a&gt;: A Windows/macOS GUI based on Clash.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vitejs/vite"&gt;vitejs/vite&lt;/a&gt;: Next generation frontend tooling. It's fast!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mui/material-ui"&gt;mui/material-ui&lt;/a&gt;: Ready-to-use foundational React components, free forever.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://contrib.rocks/image?repo=libnyanpasu/clash-nyanpasu" alt="Contributors" /&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;GPL-3.0 License. See &lt;a href="https://raw.githubusercontent.com/libnyanpasu/clash-nyanpasu/main/LICENSE"&gt;License here&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloud-hypervisor/cloud-hypervisor</title>
      <link>https://github.com/cloud-hypervisor/cloud-hypervisor</link>
      <description>&lt;p&gt;A Virtual Machine Monitor for modern Cloud workloads. Features include CPU, memory and device hotplug, support for running Windows and Linux guests, device offload with vhost-user and a minimal compact footprint. Written in Rust with a strong focus on security.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#1-what-is-cloud-hypervisor"&gt;1. What is Cloud Hypervisor?&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#objectives"&gt;Objectives&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#high-level"&gt;High Level&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#architectures"&gt;Architectures&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#guest-os"&gt;Guest OS&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#2-getting-started"&gt;2. Getting Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#host-os"&gt;Host OS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#use-pre-built-binaries"&gt;Use Pre-built Binaries&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#packages"&gt;Packages&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#building-from-source"&gt;Building from Source&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#booting-linux"&gt;Booting Linux&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#firmware-booting"&gt;Firmware Booting&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#custom-kernel-and-disk-image"&gt;Custom Kernel and Disk Image&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#building-your-kernel"&gt;Building your Kernel&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#disk-image"&gt;Disk image&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#booting-the-guest-vm"&gt;Booting the guest VM&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#3-status"&gt;3. Status&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#hot-plug"&gt;Hot Plug&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#device-model"&gt;Device Model&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#4-relationship-with-rust-vmm-project"&gt;4. Relationship with &lt;em&gt;Rust VMM&lt;/em&gt; Project&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#differences-with-firecracker-and-crosvm"&gt;Differences with Firecracker and crosvm&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#5-community"&gt;5. Community&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#contribute"&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#slack"&gt;Slack&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#mailing-list"&gt;Mailing list&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/#security-issues"&gt;Security issues&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;1. What is Cloud Hypervisor?&lt;/h1&gt; 
&lt;p&gt;Cloud Hypervisor is an open source Virtual Machine Monitor (VMM) that runs on top of the &lt;a href="https://www.kernel.org/doc/Documentation/virtual/kvm/api.txt"&gt;KVM&lt;/a&gt; hypervisor and the Microsoft Hypervisor (MSHV).&lt;/p&gt; 
&lt;p&gt;The project focuses on running modern, &lt;em&gt;Cloud Workloads&lt;/em&gt;, on specific, common, hardware architectures. In this case &lt;em&gt;Cloud Workloads&lt;/em&gt; refers to those that are run by customers inside a Cloud Service Provider. This means modern operating systems with most I/O handled by paravirtualised devices (e.g. &lt;em&gt;virtio&lt;/em&gt;), no requirement for legacy devices, and 64-bit CPUs.&lt;/p&gt; 
&lt;p&gt;Cloud Hypervisor is implemented in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; and is based on the &lt;a href="https://github.com/rust-vmm"&gt;Rust VMM&lt;/a&gt; crates.&lt;/p&gt; 
&lt;h2&gt;Objectives&lt;/h2&gt; 
&lt;h3&gt;High Level&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Runs on KVM or MSHV&lt;/li&gt; 
 &lt;li&gt;Minimal emulation&lt;/li&gt; 
 &lt;li&gt;Low latency&lt;/li&gt; 
 &lt;li&gt;Low memory footprint&lt;/li&gt; 
 &lt;li&gt;Low complexity&lt;/li&gt; 
 &lt;li&gt;High performance&lt;/li&gt; 
 &lt;li&gt;Small attack surface&lt;/li&gt; 
 &lt;li&gt;64-bit support only&lt;/li&gt; 
 &lt;li&gt;CPU, memory, PCI hotplug&lt;/li&gt; 
 &lt;li&gt;Machine to machine migration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Architectures&lt;/h3&gt; 
&lt;p&gt;Cloud Hypervisor supports the &lt;code&gt;x86-64&lt;/code&gt;, &lt;code&gt;AArch64&lt;/code&gt; and &lt;code&gt;riscv64&lt;/code&gt; architectures, with functionality varying across these platforms. The functionality differences between &lt;code&gt;x86-64&lt;/code&gt; and &lt;code&gt;AArch64&lt;/code&gt; are documented in &lt;a href="https://github.com/cloud-hypervisor/cloud-hypervisor/issues/1125"&gt;#1125&lt;/a&gt;. The &lt;code&gt;riscv64&lt;/code&gt; architecture support is experimental and offers limited functionality. For more details and instructions, please refer to &lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/docs/riscv.md"&gt;riscv documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Guest OS&lt;/h3&gt; 
&lt;p&gt;Cloud Hypervisor supports &lt;code&gt;64-bit Linux&lt;/code&gt; and Windows 10/Windows Server 2019.&lt;/p&gt; 
&lt;h1&gt;2. Getting Started&lt;/h1&gt; 
&lt;p&gt;The following sections describe how to build and run Cloud Hypervisor.&lt;/p&gt; 
&lt;h2&gt;Prerequisites for AArch64&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;AArch64 servers (recommended) or development boards equipped with the GICv3 interrupt controller.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Host OS&lt;/h2&gt; 
&lt;p&gt;For required KVM functionality and adequate performance the recommended host kernel version is 5.13. The majority of the CI currently tests with kernel version 5.15.&lt;/p&gt; 
&lt;h2&gt;Use Pre-built Binaries&lt;/h2&gt; 
&lt;p&gt;The recommended approach to getting started with Cloud Hypervisor is by using a pre-built binary. Binaries are available for the &lt;a href="https://github.com/cloud-hypervisor/cloud-hypervisor/releases/latest"&gt;latest release&lt;/a&gt;. Use &lt;code&gt;cloud-hypervisor-static&lt;/code&gt; for &lt;code&gt;x86-64&lt;/code&gt; or &lt;code&gt;cloud-hypervisor-static-aarch64&lt;/code&gt; for &lt;code&gt;AArch64&lt;/code&gt; platform.&lt;/p&gt; 
&lt;h2&gt;Packages&lt;/h2&gt; 
&lt;p&gt;For convenience, packages are also available targeting some popular Linux distributions. This is thanks to the &lt;a href="https://build.opensuse.org"&gt;Open Build Service&lt;/a&gt;. The &lt;a href="https://github.com/cloud-hypervisor/obs-packaging"&gt;OBS README&lt;/a&gt; explains how to enable the repository in a supported Linux distribution and install Cloud Hypervisor and accompanying packages. Please report any packaging issues in the &lt;a href="https://github.com/cloud-hypervisor/obs-packaging"&gt;obs-packaging&lt;/a&gt; repository.&lt;/p&gt; 
&lt;h2&gt;Building from Source&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/docs/building.md"&gt;instructions for building from source&lt;/a&gt; if you do not wish to use the pre-built binaries.&lt;/p&gt; 
&lt;h2&gt;Booting Linux&lt;/h2&gt; 
&lt;p&gt;Cloud Hypervisor supports direct kernel boot (the x86-64 kernel requires the kernel built with PVH support or a bzImage) or booting via a firmware (either &lt;a href="https://github.com/cloud-hypervisor/rust-hypervisor-firmware"&gt;Rust Hypervisor Firmware&lt;/a&gt; or an edk2 UEFI firmware called &lt;code&gt;CLOUDHV&lt;/code&gt; / &lt;code&gt;CLOUDHV_EFI&lt;/code&gt;.)&lt;/p&gt; 
&lt;p&gt;Binary builds of the firmware files are available for the latest release of &lt;a href="https://github.com/cloud-hypervisor/rust-hypervisor-firmware/releases/latest"&gt;Rust Hypervisor Firmware&lt;/a&gt; and &lt;a href="https://github.com/cloud-hypervisor/edk2/releases/latest"&gt;our edk2 repository&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The choice of firmware depends on your guest OS choice; some experimentation may be required.&lt;/p&gt; 
&lt;h3&gt;Firmware Booting&lt;/h3&gt; 
&lt;p&gt;Cloud Hypervisor supports booting disk images containing all needed components to run cloud workloads, a.k.a. cloud images.&lt;/p&gt; 
&lt;p&gt;The following sample commands will download an Ubuntu Cloud image, converting it into a format that Cloud Hypervisor can use and a firmware to boot the image with.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ wget https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img
$ qemu-img convert -p -f qcow2 -O raw focal-server-cloudimg-amd64.img focal-server-cloudimg-amd64.raw
$ wget https://github.com/cloud-hypervisor/rust-hypervisor-firmware/releases/download/0.4.2/hypervisor-fw
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Ubuntu cloud images do not ship with a default password so it necessary to use a &lt;code&gt;cloud-init&lt;/code&gt; disk image to customise the image on the first boot. A basic &lt;code&gt;cloud-init&lt;/code&gt; image is generated by this &lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/scripts/create-cloud-init.sh"&gt;script&lt;/a&gt;. This seeds the image with a default username/password of &lt;code&gt;cloud/cloud123&lt;/code&gt;. It is only necessary to add this disk image on the first boot. Script also assigns default IP address using &lt;code&gt;test_data/cloud-init/ubuntu/local/network-config&lt;/code&gt; details with &lt;code&gt;--net "mac=12:34:56:78:90:ab,tap="&lt;/code&gt; option. Then the matching mac address interface will be enabled as per &lt;code&gt;network-config&lt;/code&gt; details.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo setcap cap_net_admin+ep ./cloud-hypervisor
$ ./create-cloud-init.sh
$ ./cloud-hypervisor \
	--firmware ./hypervisor-fw \
	--disk path=focal-server-cloudimg-amd64.raw path=/tmp/ubuntu-cloudinit.img \
	--cpus boot=4 \
	--memory size=1024M \
	--net "tap=,mac=,ip=,mask="
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If access to the firmware messages or interaction with the boot loader (e.g. GRUB) is required then it necessary to switch to the serial console instead of &lt;code&gt;virtio-console&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ ./cloud-hypervisor \
	--kernel ./hypervisor-fw \
	--disk path=focal-server-cloudimg-amd64.raw path=/tmp/ubuntu-cloudinit.img \
	--cpus boot=4 \
	--memory size=1024M \
	--net "tap=,mac=,ip=,mask=" \
	--serial tty \
	--console off
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Booting: &lt;code&gt;--firmware&lt;/code&gt; vs &lt;code&gt;--kernel&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The following scenarios are supported by Cloud Hypervisor to bootstrap a VM, i.e., to load a payload/bootitem(s):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Provide firmware&lt;/li&gt; 
 &lt;li&gt;Provide kernel [+ cmdline]\ [+ initrd]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please note that our Cloud Hypervisor firmware (&lt;code&gt;hypervisor-fw&lt;/code&gt;) has a Xen PVH boot entry, therefore it can also be booted via the &lt;code&gt;--kernel&lt;/code&gt; parameter, as seen in some examples.&lt;/p&gt; 
&lt;h3&gt;Custom Kernel and Disk Image&lt;/h3&gt; 
&lt;h4&gt;Building your Kernel&lt;/h4&gt; 
&lt;p&gt;Cloud Hypervisor also supports direct kernel boot. For x86-64, a &lt;code&gt;vmlinux&lt;/code&gt; ELF kernel (compiled with PVH support) or a regular bzImage are supported. In order to support development there is a custom branch; however provided the required options are enabled any recent kernel will suffice.&lt;/p&gt; 
&lt;p&gt;To build the kernel:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Clone the Cloud Hypervisor Linux branch
$ git clone --depth 1 https://github.com/cloud-hypervisor/linux.git -b ch-6.12.8 linux-cloud-hypervisor
$ pushd linux-cloud-hypervisor
$ make ch_defconfig
# Do native build of the x86-64 kernel
$ KCFLAGS="-Wa,-mx86-used-note=no" make bzImage -j `nproc`
# Do native build of the AArch64 kernel
$ make -j `nproc`
$ popd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For x86-64, the &lt;code&gt;vmlinux&lt;/code&gt; kernel image will then be located at &lt;code&gt;linux-cloud-hypervisor/arch/x86/boot/compressed/vmlinux.bin&lt;/code&gt;. For AArch64, the &lt;code&gt;Image&lt;/code&gt; kernel image will then be located at &lt;code&gt;linux-cloud-hypervisor/arch/arm64/boot/Image&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Disk image&lt;/h4&gt; 
&lt;p&gt;For the disk image the same Ubuntu image as before can be used. This contains an &lt;code&gt;ext4&lt;/code&gt; root filesystem.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ wget https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img # x86-64
$ wget https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-arm64.img # AArch64
$ qemu-img convert -p -f qcow2 -O raw focal-server-cloudimg-amd64.img focal-server-cloudimg-amd64.raw # x86-64
$ qemu-img convert -p -f qcow2 -O raw focal-server-cloudimg-arm64.img focal-server-cloudimg-arm64.raw # AArch64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Booting the guest VM&lt;/h4&gt; 
&lt;p&gt;These sample commands boot the disk image using the custom kernel whilst also supplying the desired kernel command line.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;x86-64&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo setcap cap_net_admin+ep ./cloud-hypervisor
$ ./create-cloud-init.sh
$ ./cloud-hypervisor \
	--kernel ./linux-cloud-hypervisor/arch/x86/boot/compressed/vmlinux.bin \
	--disk path=focal-server-cloudimg-amd64.raw path=/tmp/ubuntu-cloudinit.img \
	--cmdline "console=hvc0 root=/dev/vda1 rw" \
	--cpus boot=4 \
	--memory size=1024M \
	--net "tap=,mac=,ip=,mask="
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;AArch64&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo setcap cap_net_admin+ep ./cloud-hypervisor
$ ./create-cloud-init.sh
$ ./cloud-hypervisor \
	--kernel ./linux-cloud-hypervisor/arch/arm64/boot/Image \
	--disk path=focal-server-cloudimg-arm64.raw path=/tmp/ubuntu-cloudinit.img \
	--cmdline "console=hvc0 root=/dev/vda1 rw" \
	--cpus boot=4 \
	--memory size=1024M \
	--net "tap=,mac=,ip=,mask="
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If earlier kernel messages are required the serial console should be used instead of &lt;code&gt;virtio-console&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;x86-64&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ ./cloud-hypervisor \
	--kernel ./linux-cloud-hypervisor/arch/x86/boot/compressed/vmlinux.bin \
	--console off \
	--serial tty \
	--disk path=focal-server-cloudimg-amd64.raw \
	--cmdline "console=ttyS0 root=/dev/vda1 rw" \
	--cpus boot=4 \
	--memory size=1024M \
	--net "tap=,mac=,ip=,mask="
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;AArch64&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ ./cloud-hypervisor \
	--kernel ./linux-cloud-hypervisor/arch/arm64/boot/Image \
	--console off \
	--serial tty \
	--disk path=focal-server-cloudimg-arm64.raw \
	--cmdline "console=ttyAMA0 root=/dev/vda1 rw" \
	--cpus boot=4 \
	--memory size=1024M \
	--net "tap=,mac=,ip=,mask="
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;3. Status&lt;/h1&gt; 
&lt;p&gt;Cloud Hypervisor is under active development. The following stability guarantees are currently made:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The API (including command line options) will not be removed or changed in a breaking way without a minimum of 2 major releases notice. Where possible warnings will be given about the use of deprecated functionality and the deprecations will be documented in the release notes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Point releases will be made between individual releases where there are substantial bug fixes or security issues that need to be fixed. These point releases will only include bug fixes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Currently the following items are &lt;strong&gt;not&lt;/strong&gt; guaranteed across updates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Snapshot/restore is not supported across different versions&lt;/li&gt; 
 &lt;li&gt;Live migration is not supported across different versions&lt;/li&gt; 
 &lt;li&gt;The following features are considered experimental and may change substantially between releases: TDX, vfio-user, vDPA.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Further details can be found in the &lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/docs/releases.md"&gt;release documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;As of 2023-01-03, the following cloud images are supported:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://cloud-images.ubuntu.com/focal/current/"&gt;Ubuntu Focal&lt;/a&gt; (focal-server-cloudimg-{amd64,arm64}.img)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud-images.ubuntu.com/jammy/current/"&gt;Ubuntu Jammy&lt;/a&gt; (jammy-server-cloudimg-{amd64,arm64}.img)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud-images.ubuntu.com/noble/current/"&gt;Ubuntu Noble&lt;/a&gt; (noble-server-cloudimg-{amd64,arm64}.img)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/36/Cloud/"&gt;Fedora 36&lt;/a&gt; (&lt;a href="https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/36/Cloud/x86_64/images/"&gt;Fedora-Cloud-Base-36-1.5.x86_64.raw.xz&lt;/a&gt; / &lt;a href="https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/36/Cloud/aarch64/images/"&gt;Fedora-Cloud-Base-36-1.5.aarch64.raw.xz&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Direct kernel boot to userspace should work with a rootfs from most distributions although you may need to enable exotic filesystem types in the reference kernel configuration (e.g. XFS or btrfs.)&lt;/p&gt; 
&lt;h2&gt;Hot Plug&lt;/h2&gt; 
&lt;p&gt;Cloud Hypervisor supports hotplug of CPUs, passthrough devices (VFIO), &lt;code&gt;virtio-{net,block,pmem,fs,vsock}&lt;/code&gt; and memory resizing. This &lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/docs/hotplug.md"&gt;document&lt;/a&gt; details how to add devices to a running VM.&lt;/p&gt; 
&lt;h2&gt;Device Model&lt;/h2&gt; 
&lt;p&gt;Details of the device model can be found in this &lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/docs/device_model.md"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The project roadmap is tracked through a &lt;a href="https://github.com/orgs/cloud-hypervisor/projects/6"&gt;GitHub project&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;4. Relationship with &lt;em&gt;Rust VMM&lt;/em&gt; Project&lt;/h1&gt; 
&lt;p&gt;In order to satisfy the design goal of having a high-performance, security-focused hypervisor the decision was made to use the &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; programming language. The language's strong focus on memory and thread safety makes it an ideal candidate for implementing VMMs.&lt;/p&gt; 
&lt;p&gt;Instead of implementing the VMM components from scratch, Cloud Hypervisor is importing the &lt;a href="https://github.com/rust-vmm"&gt;Rust VMM&lt;/a&gt; crates, and sharing code and architecture together with other VMMs like e.g. Amazon's &lt;a href="https://firecracker-microvm.github.io/"&gt;Firecracker&lt;/a&gt; and Google's &lt;a href="https://chromium.googlesource.com/chromiumos/platform/crosvm/"&gt;crosvm&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Cloud Hypervisor embraces the &lt;em&gt;Rust VMM&lt;/em&gt; project's goals, which is to be able to share and re-use as many virtualization crates as possible.&lt;/p&gt; 
&lt;h2&gt;Differences with Firecracker and crosvm&lt;/h2&gt; 
&lt;p&gt;A large part of the Cloud Hypervisor code is based on either the Firecracker or the crosvm project's implementations. Both of these are VMMs written in Rust with a focus on safety and security, like Cloud Hypervisor.&lt;/p&gt; 
&lt;p&gt;The goal of the Cloud Hypervisor project differs from the aforementioned projects in that it aims to be a general purpose VMM for &lt;em&gt;Cloud Workloads&lt;/em&gt; and not limited to container/serverless or client workloads.&lt;/p&gt; 
&lt;p&gt;The Cloud Hypervisor community thanks the communities of both the Firecracker and crosvm projects for their excellent work.&lt;/p&gt; 
&lt;h1&gt;5. Community&lt;/h1&gt; 
&lt;p&gt;The Cloud Hypervisor project follows the governance, and community guidelines described in the &lt;a href="https://github.com/cloud-hypervisor/community"&gt;Community&lt;/a&gt; repository.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;The project strongly believes in building a global, diverse and collaborative community around the Cloud Hypervisor project. Anyone who is interested in &lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/CONTRIBUTING.md"&gt;contributing&lt;/a&gt; to the project is welcome to participate.&lt;/p&gt; 
&lt;p&gt;Contributing to a open source project like Cloud Hypervisor covers a lot more than just sending code. Testing, documentation, pull request reviews, bug reports, feature requests, project improvement suggestions, etc, are all equal and welcome means of contribution. See the &lt;a href="https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; document for more details.&lt;/p&gt; 
&lt;h2&gt;Slack&lt;/h2&gt; 
&lt;p&gt;Get an &lt;a href="https://join.slack.com/t/cloud-hypervisor/shared_invite/enQtNjY3MTE3MDkwNDQ4LWQ1MTA1ZDVmODkwMWQ1MTRhYzk4ZGNlN2UwNTI3ZmFlODU0OTcwOWZjMTkwZDExYWE3YjFmNzgzY2FmNDAyMjI"&gt;invite to our Slack channel&lt;/a&gt;, &lt;a href="https://cloud-hypervisor.slack.com/"&gt;join us on Slack&lt;/a&gt;, and &lt;a href="https://cloud-hypervisor.slack.com/archives/C04R5DUQVBN"&gt;participate in our community activities&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Mailing list&lt;/h2&gt; 
&lt;p&gt;Please report bugs using the &lt;a href="https://github.com/cloud-hypervisor/cloud-hypervisor/issues"&gt;GitHub issue tracker&lt;/a&gt; but for broader community discussions you may use our &lt;a href="https://lists.cloudhypervisor.org/g/dev/"&gt;mailing list&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security issues&lt;/h2&gt; 
&lt;p&gt;Please contact the maintainers listed in the MAINTAINERS.md file with security issues.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>espanso/espanso</title>
      <link>https://github.com/espanso/espanso</link>
      <description>&lt;p&gt;A Privacy-first, Cross-platform Text Expander written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/espanso/espanso/dev/images/logo_extended.png" alt="espanso" /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A cross-platform Text Expander written in Rust&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/github/v/release/espanso/espanso" alt="GitHub release (latest by date)" /&gt; &lt;img src="https://img.shields.io/badge/language-rust-orange" alt="Language" /&gt; &lt;img src="https://img.shields.io/badge/platforms-Windows%2C%20macOS%20and%20Linux-blue" alt="Platforms" /&gt; &lt;img src="https://img.shields.io/github/license/espanso/espanso" alt="License" /&gt; &lt;a href="https://deepwiki.com/espanso/espanso"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/espanso/espanso/dev/images/example.gif" alt="example" /&gt;&lt;/p&gt; 
&lt;p&gt;Visit the &lt;a href="https://espanso.org"&gt;espanso website&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;What is a Text Expander?&lt;/h4&gt; 
&lt;p&gt;A &lt;em&gt;text expander&lt;/em&gt; is a program that detects when you type a specific &lt;strong&gt;keyword&lt;/strong&gt; and replaces it with &lt;strong&gt;something else&lt;/strong&gt;. This is useful in many ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Save a lot of typing&lt;/strong&gt;, expanding common sentences.&lt;/li&gt; 
 &lt;li&gt;Create &lt;strong&gt;system-wide&lt;/strong&gt; code snippets.&lt;/li&gt; 
 &lt;li&gt;Execute &lt;strong&gt;custom scripts&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Use &lt;strong&gt;emojis&lt;/strong&gt; like a pro.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Works on &lt;strong&gt;Windows&lt;/strong&gt;, &lt;strong&gt;macOS&lt;/strong&gt; and &lt;strong&gt;Linux&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Works with almost &lt;strong&gt;any program&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Works with &lt;strong&gt;Emojis&lt;/strong&gt; 😄&lt;/li&gt; 
 &lt;li&gt;Works with &lt;strong&gt;Images&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Includes a powerful &lt;strong&gt;Search Bar&lt;/strong&gt; 🔎&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Date&lt;/strong&gt; expansion support&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom scripts&lt;/strong&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Shell commands&lt;/strong&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;App-specific&lt;/strong&gt; configurations&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://espanso.org/docs/matches/forms/"&gt;Forms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Expandable with &lt;strong&gt;packages&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Built-in &lt;strong&gt;package manager&lt;/strong&gt; for &lt;a href="https://hub.espanso.org/"&gt;espanso hub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;File based configuration&lt;/li&gt; 
 &lt;li&gt;Support Regex triggers&lt;/li&gt; 
 &lt;li&gt;Experimental Wayland support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;Visit the &lt;a href="https://espanso.org/docs/"&gt;official documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you need some help to setup espanso, want to ask a question or simply get involved in the community, you can &lt;a href="https://www.reddit.com/r/espanso/"&gt;join the official Subreddit&lt;/a&gt; or &lt;a href="https://discord.gg/DFcCNDg7bB"&gt;join the official Discord&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Donations&lt;/h2&gt; 
&lt;p&gt;espanso is a free, open source software developed in my (little) spare time. If you liked the project and would like to support further development, please consider making a small donation, it really helps :)&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=FHNLR5DRS267E&amp;amp;source=url"&gt;&lt;img src="https://raw.githubusercontent.com/espanso/espanso/dev/images/donate.gif" alt="Donate with PayPal" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Team members&lt;/h2&gt; 
&lt;p&gt;You can check the members of the team &lt;a href="https://github.com/orgs/espanso/people"&gt;here&lt;/a&gt;:&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;We want to thank SignPath.io for code signing the Windows binaries ❤️&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Many people helped the project along the way, thank you to all of you!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/espanso/espanso/graphs/contributors"&gt;&lt;img src="https://contrib.rocks/image?repo=espanso/espanso" alt="Image" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Remarks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Thanks to &lt;a href="https://github.com/jordansissel/xdotool"&gt;libxdo&lt;/a&gt; and &lt;a href="https://github.com/astrand/xclip"&gt;xclip&lt;/a&gt;, used to implement the Linux port.&lt;/li&gt; 
 &lt;li&gt;Thanks to &lt;a href="https://xkbcommon.org/"&gt;libxkbcommon&lt;/a&gt; and &lt;a href="https://github.com/bugaevc/wl-clipboard"&gt;wl-clipboard&lt;/a&gt;, used to implement the Wayland port.&lt;/li&gt; 
 &lt;li&gt;Thanks to &lt;a href="https://www.wxwidgets.org/"&gt;wxWidgets&lt;/a&gt; for providing a powerful cross-platform GUI library.&lt;/li&gt; 
 &lt;li&gt;Free code signing provided by SignPath.io, certificate by SignPath Foundation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;espanso was created by &lt;a href="http://federicoterzi.com"&gt;Federico Terzi&lt;/a&gt; and is licensed under the &lt;a href="https://raw.githubusercontent.com/espanso/espanso/dev/LICENSE"&gt;GPL-3.0 license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>category-labs/monad-bft</title>
      <link>https://github.com/category-labs/monad-bft</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Monad BFT&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/monad-crypto/monad-bft/actions/workflows/randomized.yml/badge.svg?branch=master" alt="Nightly Tests" /&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This repository contains implementation for the Monad consensus client and JsonRpc server. Monad consensus collects transactions and produces blocks which are written to a ledger filestream. These blocks are consumed by Monad execution, which then updates the state of the blockchain. The &lt;a href="https://raw.githubusercontent.com/category-labs/monad-bft/master/monad-triedb/README.md"&gt;triedb&lt;/a&gt; is a database which stores block information and the blockchain state.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using Docker&lt;/h3&gt; 
&lt;p&gt;The most straightforward way to start a consensus client + an execution client + a JsonRpc server. Run the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;cd docker/single-node&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nets/run.sh&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Using Cargo&lt;/h3&gt; 
&lt;p&gt;To run a Monad consensus client, follow instructions &lt;a href="https://raw.githubusercontent.com/category-labs/monad-bft/master/monad-node/README.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To run a JsonRpc server, follow instructions &lt;a href="https://raw.githubusercontent.com/category-labs/monad-bft/master/monad-rpc/README.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;sequenceDiagram
autonumber
    participant D as Driver
    box Purple Executor
    participant S as impl Stream
    participant E as impl Executor
    end
    participant State
    participant PersistenceLogger
    loop
    D -&amp;gt;&amp;gt;+ S: CALL next()
    Note over S: blocks until event ready
    S --&amp;gt;&amp;gt;- D: RETURN Event
    D -&amp;gt;&amp;gt; PersistenceLogger: CALL push(Event)
    D -&amp;gt;&amp;gt;+ State: CALL update(Event)
    Note over State: mutate state
    State --&amp;gt;&amp;gt;- D: RETURN Vec&amp;lt;Command&amp;gt;
    D -&amp;gt;&amp;gt; E: CALL exec(Vec&amp;lt;Command&amp;gt;)
    Note over E: apply side effects
    end
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>oxc-project/oxc</title>
      <link>https://github.com/oxc-project/oxc</link>
      <description>&lt;p&gt;⚓ A collection of JavaScript tools written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="OXC Logo" src="https://cdn.jsdelivr.net/gh/oxc-project/oxc-assets/preview-universal.png" width="700" /&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/oxc-project/oxc/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=event%3Apush+branch%3Amain"&gt;&lt;img src="https://github.com/oxc-project/oxc/actions/workflows/ci.yml/badge.svg?event=push&amp;amp;branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/oxc-project/oxc"&gt;&lt;img src="https://codecov.io/gh/oxc-project/oxc/graph/badge.svg?token=FVHEH0BQLJ" alt="Code Coverage" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/oxc-project/oxc"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="CodSpeed Badge" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sponsors/Boshen"&gt;&lt;img src="https://img.shields.io/github/sponsors/Boshen" alt="Sponsors" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/9uXCAwqQZW"&gt;&lt;img src="https://img.shields.io/discord/1079625926024900739?logo=discord&amp;amp;label=Discord" alt="Discord chat" /&gt;&lt;/a&gt; &lt;a href="https://playground.oxc.rs/"&gt;&lt;img src="https://img.shields.io/badge/Playground-blue?color=9BE4E0" alt="Playground" /&gt;&lt;/a&gt; &lt;a href="https://oxc.rs"&gt;&lt;img src="https://img.shields.io/badge/Website-blue" alt="Website" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;⚓ Oxc&lt;/h2&gt; 
&lt;p&gt;The Oxidation Compiler is a collection of high-performance tools for JavaScript and TypeScript written in Rust.&lt;/p&gt; 
&lt;p&gt;Our goal is to enable a new generation of faster, more reliable development tools by providing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: 2-100x faster than existing JavaScript tools&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reliability&lt;/strong&gt;: 100% compatibility with JavaScript and TypeScript standards&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Use individual tools or compose them into complete toolchains&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Developer Experience&lt;/strong&gt;: Clear error messages and seamless editor integration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We are building a parser, linter, formatter, transformer, minifier, resolver ... all written in Rust.&lt;/p&gt; 
&lt;p&gt;For more information, check out our documentation at &lt;a href="https://oxc.rs"&gt;oxc.rs&lt;/a&gt; and architecture guide in &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/ARCHITECTURE.md"&gt;ARCHITECTURE.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;VoidZero Inc.&lt;/h2&gt; 
&lt;p&gt;Oxc is a project of &lt;a href="https://voidzero.dev/"&gt;VoidZero&lt;/a&gt;, see our announcement &lt;a href="https://voidzero.dev/blog"&gt;Announcing VoidZero - Next Generation Toolchain for JavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have requirements for JavaScript tools at scale, please &lt;a href="https://forms.gle/WQgjyzYJpwurpxWKA"&gt;get in touch&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;🙋Who's using Oxc?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://rolldown.rs"&gt;Rolldown&lt;/a&gt; uses the &lt;a href="https://docs.rs/oxc"&gt;oxc&lt;/a&gt; crate for parsing and transformation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://trynova.dev"&gt;Nova engine&lt;/a&gt; uses the &lt;a href="https://docs.rs/oxc"&gt;oxc&lt;/a&gt; crate for parsing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rolldown.rs"&gt;Rolldown&lt;/a&gt;, &lt;a href="https://github.com/swc-project/swc-node"&gt;swc-node&lt;/a&gt; and &lt;a href="https://github.com/webpro-nl/knip"&gt;knip&lt;/a&gt; use the &lt;a href="https://docs.rs/oxc_resolver"&gt;oxc_resolver&lt;/a&gt; crate for module resolution.&lt;/li&gt; 
 &lt;li&gt;Projects and companies like &lt;a href="https://github.com/preactjs/preact/raw/4c20c23c16dd60f380ce9fe98afc93041a7e1562/oxlint.json"&gt;Preact&lt;/a&gt;, &lt;a href="https://oxc.rs/blog/2023-12-12-announcing-oxlint.html#_50-100-times-faster-than-eslint"&gt;Shopify&lt;/a&gt;, ByteDance and Shopee uses oxlint for linting.&lt;/li&gt; 
 &lt;li&gt;...&lt;a href="https://oxc.rs/docs/guide/projects.html"&gt;and many more&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;✍️ Contribute&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for guidance.&lt;/p&gt; 
&lt;p&gt;Check out some of the &lt;a href="https://github.com/oxc-project/oxc/contribute"&gt;good first issues&lt;/a&gt; or ask us on &lt;a href="https://discord.gg/9uXCAwqQZW"&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are unable to contribute by code, you can still participate by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add a &lt;a href="https://github.com/oxc-project/oxc/stargazers"&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt; 
 &lt;li&gt;Join us on &lt;a href="https://discord.gg/9uXCAwqQZW"&gt;Discord&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/boshen_c"&gt;Follow me on X&lt;/a&gt; and post about this project.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Linter Quick Start&lt;/h2&gt; 
&lt;p&gt;The linter is ready to catch mistakes for you. It comes with 93 rules turned on by default (out of 430+ in total) and no configuration is required.&lt;/p&gt; 
&lt;p&gt;To get started, run &lt;a href="https://www.npmjs.com/package/oxlint"&gt;oxlint&lt;/a&gt; or via &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx oxlint@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To give you an idea of its capabilities, here is an example from the &lt;a href="https://github.com/microsoft/vscode"&gt;vscode&lt;/a&gt; repository, which finishes linting 4800+ files in 0.7 seconds.&lt;/p&gt; 
&lt;p float="left" align="left"&gt; &lt;img src="https://cdn.jsdelivr.net/gh/oxc-project/oxc-assets/linter-screenshot.png" width="60%" /&gt; &lt;/p&gt; 
&lt;h2&gt;⚡️ Performance&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The parser aims to be the fastest Rust-based ready-for-production parser.&lt;/li&gt; 
 &lt;li&gt;The linter is more than 50 times faster than &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;, and scales with the number of CPU cores.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p float="left" align="middle"&gt; &lt;img src="https://raw.githubusercontent.com/Boshen/bench-javascript-parser-written-in-rust/main/bar-graph.svg?sanitize=true" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/Boshen/bench-javascript-linter/main/bar-graph.svg?sanitize=true" width="49%" /&gt; &lt;/p&gt; 
&lt;h2&gt;⌨️ Rust, Node.js and Wasm Usage&lt;/h2&gt; 
&lt;h3&gt;Rust&lt;/h3&gt; 
&lt;p&gt;Individual crates are published, you may use them to build your own JavaScript tools.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The umbrella crate &lt;a href="https://docs.rs/oxc"&gt;oxc&lt;/a&gt; exports all public crates from this repository.&lt;/li&gt; 
 &lt;li&gt;The AST and parser crates &lt;a href="https://docs.rs/oxc_ast"&gt;oxc_ast&lt;/a&gt; and &lt;a href="https://docs.rs/oxc_parser"&gt;oxc_parser&lt;/a&gt; are production ready.&lt;/li&gt; 
 &lt;li&gt;The resolver crate &lt;a href="https://docs.rs/oxc_resolver"&gt;oxc_resolver&lt;/a&gt; for module resolution is also production ready.&lt;/li&gt; 
 &lt;li&gt;Example usages of these crates can be found in their respective &lt;code&gt;crates/*/examples&lt;/code&gt; directory.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We have optimized Rust compilation speed to ensure developing your own Oxc-based tools remains efficient. Our &lt;a href="https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=branch%3Amain"&gt;CI runs&lt;/a&gt; complete in approximately 3 minutes.&lt;/p&gt; 
&lt;h3&gt;Node.js&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;via napi: &lt;a href="https://www.npmjs.com/package/oxc-parser"&gt;oxc-parser&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/oxc-transform"&gt;oxc-transform&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Wasm&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.npmjs.com/package/@oxc-parser/wasm"&gt;@oxc-parser/wasm&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🎯 Tools&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-ast-and-parser"&gt;AST and Parser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-linter"&gt;Linter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-resolver"&gt;Resolver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-minifier"&gt;Minifier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-formatter"&gt;Formatter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/#-transformer"&gt;Transformer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔸 AST and Parser&lt;/h3&gt; 
&lt;p&gt;Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust.&lt;/p&gt; 
&lt;p&gt;As the parser often represents a key performance bottleneck in JavaScript tooling, any minor improvements can have a cascading effect on our downstream tools.&lt;/p&gt; 
&lt;h4&gt;🏆 Parser Performance&lt;/h4&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/Boshen/bench-javascript-parser-written-in-rust"&gt;benchmark&lt;/a&gt; reveals that the Oxc parser surpasses the speed of the &lt;a href="https://swc.rs"&gt;swc&lt;/a&gt; parser by approximately 3 times and the &lt;a href="https://biomejs.dev/"&gt;Biome&lt;/a&gt; parser by 5 times.&lt;/p&gt; 
&lt;h3&gt;🔸 Linter&lt;/h3&gt; 
&lt;p&gt;The linter embraces convention over configuration, eliminating the need for extensive configuration and plugin setup. Unlike other linters like &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;, which often require intricate configurations and plugin installations (e.g. &lt;a href="https://typescript-eslint.io"&gt;@typescript-eslint&lt;/a&gt;), our linter only requires a single command that you can immediately run on your codebase:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx oxlint@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;🏆 Linter Performance&lt;/h4&gt; 
&lt;p&gt;The linter is 50 - 100 times faster than &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; depending on the number of rules and number of CPU cores used. It completes in less than a second for most codebases with a few hundred files and completes in a few seconds for larger monorepos. See &lt;a href="https://github.com/Boshen/bench-javascript-linter"&gt;bench-javascript-linter&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;As an upside, the binary is approximately 5MB, whereas &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; and its associated plugin dependencies can easily exceed 100.&lt;/p&gt; 
&lt;p&gt;You may also download the linter binary from the &lt;a href="https://github.com/oxc-project/oxc/releases/latest"&gt;latest release tag&lt;/a&gt; as a standalone binary, this lets you run the linter without a Node.js installation in your CI.&lt;/p&gt; 
&lt;h3&gt;🔸 Resolver&lt;/h3&gt; 
&lt;p&gt;Module resolution plays a crucial role in JavaScript tooling, especially for tasks like multi-file analysis or bundling. However, it can often become a performance bottleneck. To address this, we developed &lt;a href="https://docs.rs/oxc_resolver"&gt;oxc_resolver&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The resolver is production-ready and is currently being used in &lt;a href="https://rolldown.rs"&gt;Rolldown&lt;/a&gt;. Usage and examples can be found in its own &lt;a href="https://github.com/oxc-project/oxc_resolver"&gt;repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;🔸 Transformer&lt;/h3&gt; 
&lt;p&gt;A transformer is responsible for turning higher versions of ECMAScript to a lower version that can be used in older browsers.&lt;/p&gt; 
&lt;p&gt;TypeScript, React, ES6 transforms are complete.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/oxc-transform"&gt;oxc-transform&lt;/a&gt; can be used for experimentation.&lt;/p&gt; 
&lt;h3&gt;🔸 Isolated Declarations&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-5/#isolated-declarations"&gt;TypeScript Isolated Declarations Emit&lt;/a&gt; without using the TypeScript compiler.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/oxc-project/bench-transformer"&gt;benchmark&lt;/a&gt; indicates that our implementation is at least 20 times faster than the TypeScript compiler.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://www.npmjs.com/package/oxc-transform"&gt;npm package&lt;/a&gt; or &lt;a href="https://crates.io/crates/oxc_isolated_declarations"&gt;crate&lt;/a&gt; can be used for this task.&lt;/p&gt; 
&lt;h3&gt;🔸 Minifier&lt;/h3&gt; 
&lt;p&gt;JavaScript minification plays a crucial role in optimizing website performance as it reduces the amount of data sent to users, resulting in faster page loads. This holds tremendous economic value, particularly for e-commerce websites, where every second can equate to millions of dollars.&lt;/p&gt; 
&lt;p&gt;However, existing minifiers typically require a trade-off between compression quality and speed. You have to choose between the slowest for the best compression or the fastest for less compression. But what if we could develop a faster minifier without compromising on compression?&lt;/p&gt; 
&lt;p&gt;We are actively working on a prototype that aims to achieve this goal, by porting all test cases from well-known minifiers such as &lt;a href="https://github.com/google/closure-compiler"&gt;google-closure-compiler&lt;/a&gt;, &lt;a href="https://terser.org"&gt;terser&lt;/a&gt;, &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt;, and &lt;a href="https://github.com/tdewolff/minify"&gt;tdewolff-minify&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Preliminary results indicate that we are on track to achieve our objectives. With the Oxc minifier, you can expect faster minification times without sacrificing compression quality.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/privatenumber/minification-benchmarks"&gt;minification benchmarks&lt;/a&gt; for comparisons.&lt;/p&gt; 
&lt;h3&gt;🔸 Formatter&lt;/h3&gt; 
&lt;p&gt;While &lt;a href="https://prettier.io"&gt;prettier&lt;/a&gt; has established itself as the de facto code formatter for JavaScript, there is a significant demand in the developer community for a less opinionated alternative. Recognizing this need, our ambition is to undertake research and development to create a new JavaScript formatter that offers increased flexibility and customization options.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/oxc-project/oxc/tree/main/crates/oxc_formatter"&gt;prototype&lt;/a&gt; is currently work in progress.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🧪Test Infrastructure&lt;/h2&gt; 
&lt;p&gt;In Oxc, correctness and reliability are taken extremely seriously.&lt;/p&gt; 
&lt;p&gt;We spend half of our time on strengthening the test infrastructure to prevent problems from propagating to downstream tools.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://oxc.rs/docs/learn/architecture/test.html"&gt;Test Infrastructure&lt;/a&gt; documents our test procedures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Conformance suite on Test262, Babel, TypeScript&lt;/li&gt; 
 &lt;li&gt;Lots of fuzzing&lt;/li&gt; 
 &lt;li&gt;Linter snapshot diagnostics&lt;/li&gt; 
 &lt;li&gt;oxlint ecosystem ci&lt;/li&gt; 
 &lt;li&gt;Idempotency testing&lt;/li&gt; 
 &lt;li&gt;Code coverage&lt;/li&gt; 
 &lt;li&gt;End to end 3000 top npm packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📚 Learning Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;My small tutorial on &lt;a href="https://oxc.rs/docs/learn/parser_in_rust/intro.html"&gt;how to write a JavaScript Parser in Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;My small article &lt;a href="https://oxc.rs/docs/learn/performance.html"&gt;Pursuit of Performance on Building a JavaScript Compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://oxc.rs/docs/learn/references.html"&gt;And more&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤝 Credits&lt;/h2&gt; 
&lt;p&gt;This project was incubated with the assistance of these exceptional mentors and their projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://biomejs.dev/"&gt;Biome&lt;/a&gt; - &lt;a href="https://github.com/ematipico"&gt;@ematipico&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://beta.ruff.rs"&gt;Ruff&lt;/a&gt; - &lt;a href="https://github.com/charliermarsh"&gt;@charliermarsh&lt;/a&gt;, &lt;a href="https://github.com/MichaReiser"&gt;@MichaReiser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quick-lint/quick-lint-js"&gt;quick-lint-js&lt;/a&gt; - &lt;a href="https://github.com/strager"&gt;@strager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://package.elm-lang.org/packages/jfmengels/elm-review/latest"&gt;elm-review&lt;/a&gt; - &lt;a href="https://github.com/jfmengels"&gt;@jfmengels&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Special thanks go to&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/domonji"&gt;@domonji&lt;/a&gt; for bootstrapping this project together, and also completing the TypeScript parser.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tongtong-lu"&gt;@tongtong-lu&lt;/a&gt; and &lt;a href="https://github.com/guan-wy"&gt;@guan-wy&lt;/a&gt; for designing the &lt;a href="https://github.com/oxc-project/oxc-assets"&gt;project logo&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;❤ Who's &lt;a href="https://github.com/sponsors/Boshen"&gt;Sponsoring Oxc&lt;/a&gt;?&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/sponsors/Boshen"&gt; &lt;img src="https://raw.githubusercontent.com/Boshen/sponsors/main/sponsors.svg?sanitize=true" alt="My sponsors" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;📖 License&lt;/h2&gt; 
&lt;p&gt;Oxc is free and open-source software licensed under the &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Oxc ports or copies code from other open source projects, their licenses are listed in &lt;a href="https://raw.githubusercontent.com/oxc-project/oxc/main/THIRD-PARTY-LICENSE"&gt;&lt;strong&gt;Third-party library licenses&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GyulyVGC/sniffnet</title>
      <link>https://github.com/GyulyVGC/sniffnet</link>
      <description>&lt;p&gt;Comfortably monitor your Internet traffic 🕵️‍♂️&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;img alt="" title="Sniffnet" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/header_repository.png" width="95%" /&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/#download"&gt;&lt;img alt="" title="Download" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/download.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/ROADMAP.md"&gt;&lt;img alt="" title="Roadmap" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/roadmap.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://sniffnet.net"&gt;&lt;img alt="" title="Website" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/website.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki"&gt;&lt;img alt="" title="Wiki" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/wiki.svg?sanitize=true" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Application to comfortably monitor your Internet traffic.&lt;br /&gt; Cross-platform. Intuitive. Reliable.&lt;/p&gt; 
 &lt;p&gt;Translated in:&lt;br /&gt; 🇨🇳 🇩🇪 🇫🇷 🇷🇺 🇵🇹 🇪🇦 🇮🇹 🇵🇱 &lt;a href="https://github.com/GyulyVGC/sniffnet/issues/60"&gt;+&amp;nbsp;15&amp;nbsp;more&amp;nbsp;languages&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;img alt="" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/hr.png" width="100%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img alt="" title="Overview page" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/overview.png" width="95%" /&gt; 
 &lt;img alt="" title="Inspect page" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/inspect.png" width="47%" /&gt; 
 &lt;img alt="" title="Notifications page" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/notifications.png" width="47%" /&gt; 
 &lt;img alt="" title="Custom theme" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/deep_cosmos.png" width="47%" /&gt; 
 &lt;img alt="" title="Thumbnail mode" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/thumbnail.png" width="47%" /&gt; 
&lt;/div&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;img alt="" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/hr.png" width="100%" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;h2&gt;&lt;em&gt;Support Sniffnet's development&lt;/em&gt; 💖&lt;/h2&gt; 
&lt;p&gt;&lt;i&gt;Sniffnet is completely free, open-source software which needs lots of effort and time to develop and maintain.&lt;/i&gt;&lt;/p&gt; 
&lt;p&gt;&lt;i&gt;If you appreciate Sniffnet, &lt;a href="https://github.com/sponsors/GyulyVGC"&gt;consider sponsoring&lt;/a&gt;: your support will enable a constant growth with &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/ROADMAP.md"&gt;new features and functionalities&lt;/a&gt;.&lt;br /&gt; Do you want to help the project in an alternative way? You can also head to the &lt;a href="https://grindhouse.dev/collections/sniffnet"&gt;official store&lt;/a&gt; and put your hands on some cool merchandise!&lt;/i&gt;&lt;/p&gt; 
&lt;p&gt;&lt;i&gt;A special mention goes to these awesome organizations and folks who are sponsoring Sniffnet:&lt;/i&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/github" title="GitHub"&gt;&lt;img src="https://avatars.githubusercontent.com/github?v=4" width="60px" alt="GitHub" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://nlnet.nl" title="NLnet"&gt;&lt;img src="https://nlnet.nl/logo/logo.svg?sanitize=true" width="60px" alt="NLnet" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://ipinfo.io" title="IPinfo"&gt;&lt;img src="https://avatars.githubusercontent.com/ipinfo?v=4" width="60px" alt="IPinfo" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Cthulu201" title="Cthulu201"&gt;&lt;img src="https://avatars.githubusercontent.com/Cthulu201?v=4" width="60px" alt="Cthulu201" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/0x0177b11f" title="Tiansheng Li"&gt;&lt;img src="https://avatars.githubusercontent.com/0x0177b11f?v=4" width="60px" alt="Tiansheng Li" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ZEROF" title="ZEROF"&gt;&lt;img src="https://avatars.githubusercontent.com/ZEROF?v=4" width="60px" alt="ZEROF" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://www.janwalter.org/" title="Jan Walter"&gt;&lt;img src="https://avatars.githubusercontent.com/wahn?v=4" width="60px" alt="Jan Walter" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; 
    &lt;picture&gt;
     &lt;img alt="Windows" title="Windows" height="85px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/windows.svg?sanitize=true" /&gt;
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_Windows_64-bit.msi"&gt;64-bit&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_Windows_32-bit.msi"&gt;32-bit&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; 
    &lt;picture&gt;
     &lt;img alt="macOS" title="macOS" height="85px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/macos.svg?sanitize=true" /&gt;
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_macOS_Intel.dmg"&gt;Intel&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_macOS_AppleSilicon.dmg"&gt;Apple silicon&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; 
    &lt;picture&gt;
     &lt;img alt="Linux" title="Linux" height="85px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/linux.svg?sanitize=true" /&gt;
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt; AppImage: &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxAppImage_amd64.AppImage"&gt;amd64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxAppImage_arm64.AppImage"&gt;arm64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxAppImage_i386.AppImage"&gt;i386&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxAppImage_armhf.AppImage"&gt;armhf&lt;/a&gt; &lt;br /&gt; DEB: &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_amd64.deb"&gt;amd64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_arm64.deb"&gt;arm64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_i386.deb"&gt;i386&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_armhf.deb"&gt;armhf&lt;/a&gt; &lt;br /&gt; RPM: &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxRPM_x86_64.rpm"&gt;x86_64&lt;/a&gt; | &lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxRPM_aarch64.rpm"&gt;aarch64&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;Links in the table above will download the latest version of Sniffnet directly from &lt;a href="https://github.com/GyulyVGC/sniffnet/releases"&gt;GitHub releases&lt;/a&gt;. &lt;br /&gt; Not what you're looking for? Check out &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki/Alternative-installation-methods"&gt;alternative installation methods&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Remember to also install the &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki/Required-dependencies"&gt;required dependencies&lt;/a&gt; for your operating system.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;💻 choose a &lt;strong&gt;network adapter&lt;/strong&gt; of your PC to inspect&lt;/li&gt; 
 &lt;li&gt;🏷️ select a set of &lt;strong&gt;filters&lt;/strong&gt; to apply to the observed traffic&lt;/li&gt; 
 &lt;li&gt;📖 view overall &lt;strong&gt;statistics&lt;/strong&gt; about your Internet traffic&lt;/li&gt; 
 &lt;li&gt;📈 view &lt;strong&gt;real-time charts&lt;/strong&gt; about traffic intensity&lt;/li&gt; 
 &lt;li&gt;📌 keep an eye on your network even when the application is &lt;strong&gt;minimized&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;📁 &lt;strong&gt;import&lt;/strong&gt; and &lt;strong&gt;export&lt;/strong&gt; comprehensive capture reports as &lt;strong&gt;PCAP files&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;🔎 identify &lt;strong&gt;6000+ upper layer services&lt;/strong&gt;, protocols, trojans, and worms&lt;/li&gt; 
 &lt;li&gt;🌐 find out &lt;strong&gt;domain name&lt;/strong&gt; and &lt;strong&gt;ASN&lt;/strong&gt; of the hosts you are exchanging traffic with&lt;/li&gt; 
 &lt;li&gt;🏠 identify connections in your &lt;strong&gt;local network&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;🌍 discover the &lt;strong&gt;geographical location&lt;/strong&gt; of remote hosts&lt;/li&gt; 
 &lt;li&gt;⭐ save your &lt;strong&gt;favorite&lt;/strong&gt; network hosts&lt;/li&gt; 
 &lt;li&gt;🕵️‍♂️ search and &lt;strong&gt;inspect&lt;/strong&gt; each of your network connections in real time&lt;/li&gt; 
 &lt;li&gt;🔉 set custom &lt;strong&gt;notifications&lt;/strong&gt; to inform you when defined network events occur&lt;/li&gt; 
 &lt;li&gt;🎨 choose the &lt;strong&gt;style&lt;/strong&gt; that fits you the most, including custom themes support&lt;/li&gt; 
 &lt;li&gt;...and more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;User manual&lt;/h2&gt; 
&lt;p&gt;Do you want to &lt;strong&gt;learn more&lt;/strong&gt;? &lt;br /&gt; Check out the &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki"&gt;&lt;strong&gt;Sniffnet Wiki&lt;/strong&gt;&lt;/a&gt;, a comprehensive manual to help you thoroughly master the application from a basic setup to the most advanced functionalities. &lt;br /&gt; The Wiki includes step-by-step guides, tips, examples of usage, and answers to frequent questions.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki"&gt; &lt;img alt="" title="Sniffnet Wiki" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/logos/wiki/wikilogo.svg?sanitize=true" width="300px" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;See details&lt;/summary&gt; 
 &lt;h3&gt;Missing dependencies&lt;/h3&gt; 
 &lt;p&gt;Most of the errors that may arise are likely due to your system missing dependencies required to correctly analyze a network adapter. &lt;br /&gt; Check the &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki/Required-dependencies"&gt;required dependencies page&lt;/a&gt; for instructions on how to proceed depending on your operating system.&lt;/p&gt; 
 &lt;h3&gt;Rendering problems&lt;/h3&gt; 
 &lt;p&gt;In some circumstances, especially if you are running on an old architecture or your graphical drivers are not updated, the &lt;code&gt;wgpu&lt;/code&gt; default renderer used by &lt;a href="https://github.com/iced-rs/iced"&gt;iced&lt;/a&gt; may manifest bugs (the interface glitches, color gradients are unsupported, or some icons are completely black). &lt;br /&gt; In these cases you can set an environment variable to switch to the &lt;code&gt;tiny-skia&lt;/code&gt; renderer, a CPU-only software renderer that should work properly on every environment:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;ICED_BACKEND=tiny-skia
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;em&gt;&lt;strong&gt;In any case, don't hesitate to &lt;a href="https://github.com/GyulyVGC/sniffnet/issues/new/choose"&gt;open an issue&lt;/a&gt;, and I will do my best to help you!&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt; 
&lt;/details&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;A big shout-out to &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/CONTRIBUTORS.md"&gt;all the contributors&lt;/a&gt; of Sniffnet!&lt;/li&gt; 
 &lt;li&gt;The graphical user interface has been realized with &lt;a href="https://github.com/iced-rs/iced"&gt;iced&lt;/a&gt;, a cross-platform GUI library for Rust focused on simplicity and type-safety&lt;/li&gt; 
 &lt;li&gt;IP geolocation and ASN data are provided by &lt;a href="https://www.maxmind.com"&gt;MaxMind&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Free code signing for Windows Installer is provided by &lt;a href="https://about.signpath.io/"&gt;SignPath.io&lt;/a&gt;, certificate by &lt;a href="https://signpath.org/"&gt;SignPath Foundation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ads.fund/token/0xadfc251f8ef00ceaeca2b5c1882dabe5db0833df"&gt;Sniffnet&lt;/a&gt; project is supported by ADS.FUND&lt;/li&gt; 
 &lt;li&gt;Last but not least, thanks to &lt;a href="https://github.com/GyulyVGC/sniffnet/stargazers"&gt;every single stargazer&lt;/a&gt;: all forms of support made it possible to keep improving Sniffnet!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Stay in the loop&lt;/h2&gt; 
&lt;p&gt;Wait... there's more!&lt;br /&gt;Sniffnet is rapidly evolving, and new features are added on a regular basis.&lt;br /&gt; Follow the &lt;a href="https://sniffnet.net/news"&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt; and Sniffnet socials to never miss an update.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://bsky.app/profile/sniffnet.net"&gt;&lt;img width="48" height="48" alt="Bluesky" title="Bluesky" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/bluesky.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://www.linkedin.com/company/sniffnet"&gt;&lt;img width="48" height="48" alt="LinkedIn" title="LinkedIn" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/linkedin.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://mastodon.social/@sniffnet"&gt;&lt;img width="48" height="48" alt="Mastodon" title="Mastodon" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/mastodon.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://t.me/sniffnet"&gt;&lt;img width="48" height="48" alt="Telegram" title="Telegram" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/telegram.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://x.com/sniffnet"&gt;&lt;img width="48" height="48" alt="Twitter / X" title="Twitter / X" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/x.svg?sanitize=true" /&gt;&lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>vortex-data/vortex</title>
      <link>https://github.com/vortex-data/vortex</link>
      <description>&lt;p&gt;An extensible, state of the art columnar file format. Formerly at @spiraldb, now an Incubation Stage project at LFAI&amp;Data, part of the Linux Foundation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🌪️ Vortex&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/vortex-data/vortex/actions"&gt;&lt;img src="https://github.com/vortex-data/vortex/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/10567"&gt;&lt;img src="https://www.bestpractices.dev/projects/10567/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://docs.vortex.dev"&gt;&lt;img src="https://docs.rs/vortex/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/vortex-data/vortex"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="CodSpeed Badge" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/vortex"&gt;&lt;img src="https://img.shields.io/crates/v/vortex.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/vortex-data/"&gt;&lt;img src="https://img.shields.io/pypi/v/vortex-data" alt="PyPI - Version" /&gt;&lt;/a&gt; &lt;a href="https://central.sonatype.com/artifact/dev.vortex/vortex-spark"&gt;&lt;img src="https://img.shields.io/maven-central/v/dev.vortex/vortex-spark" alt="Maven - Version" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/github/vortex-data/vortex"&gt;&lt;img src="https://codecov.io/github/vortex-data/vortex/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;📚 &lt;a href="https://docs.vortex.dev/"&gt;Documentation&lt;/a&gt; | 📊 &lt;a href="https://bench.vortex.dev"&gt;Performance Benchmarks&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Vortex is a next-generation columnar file format and toolkit designed for high-performance data processing. It is the fastest and most extensible format for building data systems backed by object storage. It provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;⚡️ Blazing Fast Performance&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;100x faster random access reads (vs. modern Apache Parquet)&lt;/li&gt; 
   &lt;li&gt;10-20x faster scans&lt;/li&gt; 
   &lt;li&gt;5x faster writes&lt;/li&gt; 
   &lt;li&gt;Similar compression ratios&lt;/li&gt; 
   &lt;li&gt;Efficient support for wide tables with zero-copy/zero-parse metadata&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;🔧 Extensible Architecture&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modeled after Apache DataFusion's extensible approach&lt;/li&gt; 
   &lt;li&gt;Pluggable encoding system, type system, compression strategy, &amp;amp; layout strategy&lt;/li&gt; 
   &lt;li&gt;Zero-copy compatibility with Apache Arrow&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;🗳️ Open Source, Neutral Governance&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A Linux Foundation (LF AI &amp;amp; Data) Project&lt;/li&gt; 
   &lt;li&gt;Apache-2.0 Licensed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;↔️ Integrations&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Arrow, DataFusion, DuckDB, Spark, Pandas, Polars, &amp;amp; more&lt;/li&gt; 
   &lt;li&gt;Apache Iceberg (coming soon)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;🟢 &lt;strong&gt;Development Status&lt;/strong&gt;: Library APIs may change from version to version, but we now consider the file format &lt;ins&gt;&lt;em&gt;stable&lt;/em&gt;&lt;/ins&gt;. From release 0.36.0, all future releases of Vortex should maintain backwards compatibility of the file format (i.e., be able to read files written by any earlier version &amp;gt;= 0.36.0).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;h3&gt;Core Capabilities&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;✨ &lt;strong&gt;Logical Types&lt;/strong&gt; - Clean separation between logical schema and physical layout&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Zero-Copy Arrow Integration&lt;/strong&gt; - Seamless conversion to/from Apache Arrow arrays&lt;/li&gt; 
 &lt;li&gt;🧩 &lt;strong&gt;Extensible Encodings&lt;/strong&gt; - Pluggable physical layouts with built-in optimizations&lt;/li&gt; 
 &lt;li&gt;📦 &lt;strong&gt;Cascading Compression&lt;/strong&gt; - Support for nested encoding schemes&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;High-Performance Computing&lt;/strong&gt; - Optimized compute kernels for encoded data&lt;/li&gt; 
 &lt;li&gt;📊 &lt;strong&gt;Rich Statistics&lt;/strong&gt; - Lazy-loaded summary statistics for optimization&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Technical Architecture&lt;/h3&gt; 
&lt;h4&gt;Logical vs Physical Design&lt;/h4&gt; 
&lt;p&gt;Vortex strictly separates logical and physical concerns:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Logical Layer&lt;/strong&gt;: Defines data types and schema&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Physical Layer&lt;/strong&gt;: Handles encoding and storage implementation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built-in Encodings&lt;/strong&gt;: Compatible with Apache Arrow's memory format&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extension Encodings&lt;/strong&gt;: Optimized compression schemes (RLE, dictionary, etc.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;h4&gt;Rust Crate&lt;/h4&gt; 
&lt;p&gt;All features are exported through the main &lt;code&gt;vortex&lt;/code&gt; crate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo add vortex
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Python Package&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv add vortex-data
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Command Line UI (vx)&lt;/h4&gt; 
&lt;p&gt;For browsing the structure of Vortex files, you can use the &lt;code&gt;vx&lt;/code&gt; command-line tool.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install latest release
cargo install vortex-tui --locked

# Or build from source
cargo install --path vortex-tui --locked

# Usage
vx browse &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development Setup&lt;/h3&gt; 
&lt;h4&gt;Prerequisites (macOS)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Optional but recommended dependencies
brew install flatbuffers protobuf  # For .fbs and .proto files
brew install duckdb               # For benchmarks

# Install Rust toolchain
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
# or
brew install rustup

# Initialize submodules
git submodule update --init --recursive

# Setup dependencies with uv
uv sync --all-packages
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Performance Optimization&lt;/h3&gt; 
&lt;p&gt;For optimal performance, we suggest using &lt;a href="https://github.com/microsoft/mimalloc"&gt;MiMalloc&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust,ignore"&gt;#[global_allocator]
static GLOBAL_ALLOC: MiMalloc = MiMalloc;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Project Information&lt;/h2&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;Licensed under the Apache License, Version 2.0.&lt;/p&gt; 
&lt;h3&gt;Governance&lt;/h3&gt; 
&lt;p&gt;Vortex is an independent open-source project and not controlled by any single company. The Vortex Project is a sub-project of the Linux Foundation Projects. The governance model is documented in &lt;a href="https://raw.githubusercontent.com/vortex-data/vortex/develop/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; and is subject to the terms of the &lt;a href="https://vortex.dev/charter.pdf"&gt;Technical Charter&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/vortex-data/vortex/develop/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for guidelines.&lt;/p&gt; 
&lt;h3&gt;Reporting Vulnerabilities&lt;/h3&gt; 
&lt;p&gt;If you discovery a security vulnerability, please email &lt;a href="mailto:vuln-report@vortex.dev"&gt;vuln-report@vortex.dev&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Trademarks&lt;/h3&gt; 
&lt;p&gt;Copyright © Vortex a Series of LF Projects, LLC. For terms of use, trademark policy, and other project policies please see &lt;a href="https://lfprojects.org"&gt;https://lfprojects.org&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Acknowledgments 🏆&lt;/h2&gt; 
&lt;p&gt;The Vortex project benefits enormously from groundbreaking work from the academic &amp;amp; open-source communities.&lt;/p&gt; 
&lt;h3&gt;Research in Vortex&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.cs.cit.tum.de/fileadmin/w00cfj/dis/papers/btrblocks.pdf"&gt;BtrBlocks&lt;/a&gt; - Efficient columnar compression&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.vldb.org/pvldb/vol16/p2132-afroozeh.pdf"&gt;FastLanes&lt;/a&gt; &amp;amp; &lt;a href="https://dbdbd2023.ugent.be/abstracts/felius_fastlanes.pdf"&gt;FastLanes on GPU&lt;/a&gt; - High-performance integer compression&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.vldb.org/pvldb/vol13/p2649-boncz.pdf"&gt;FSST&lt;/a&gt; - Fast random access string compression&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ir.cwi.nl/pub/33334/33334.pdf"&gt;ALP&lt;/a&gt; &amp;amp; &lt;a href="https://dl.acm.org/doi/pdf/10.1145/3736227.3736242"&gt;G-ALP&lt;/a&gt; - Adaptive lossless floating-point compression&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3360438"&gt;Procella&lt;/a&gt; - YouTube's unified data system&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.durner.dev/app/media/papers/anyblob-vldb23.pdf"&gt;Anyblob&lt;/a&gt; - High-performance access to object storage&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.vldb.org/pvldb/vol17/p3731-schulze.pdf"&gt;ClickHouse&lt;/a&gt; - Fast analytics for everyone&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://db.in.tum.de/~leis/papers/morsels.pdf"&gt;Morsel-Driven Parallelism&lt;/a&gt;: A NUMA-Aware Query Evaluation Format for the Many-Core Age&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cwida/FastLanes/raw/dev/docs/specification.pdf"&gt;The FastLanes File Format&lt;/a&gt; - Expression Operators&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Vortex in Research&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://gienieczko.com/anyblox-paper"&gt;Anyblox&lt;/a&gt; - A Framework for Self-Decoding Datasets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Open Source Inspiration&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://arrow.apache.org"&gt;Apache Arrow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion"&gt;Apache DataFusion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jorgecarleitao/parquet2"&gt;parquet2&lt;/a&gt; by Jorge Leitao&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/duckdb/duckdb"&gt;DuckDB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebookincubator/velox"&gt;Velox&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/facebookincubator/nimble"&gt;Nimble&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Thanks to all contributors who have shared their knowledge and code with the community! 🚀&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://zed.dev"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/zed-industries/zed/main/assets/badge/v0.json" alt="Zed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zed-industries/zed/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href="https://github.com/atom/atom"&gt;Atom&lt;/a&gt; and &lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;On macOS and Linux you can &lt;a href="https://zed.dev/download"&gt;download Zed directly&lt;/a&gt; or &lt;a href="https://zed.dev/docs/linux#installing-via-a-package-manager"&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (&lt;a href="https://github.com/zed-industries/zed/issues/5394"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Web (&lt;a href="https://github.com/zed-industries/zed/issues/5396"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md"&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md"&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md"&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md"&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we're hiring! Check out our &lt;a href="https://zed.dev/jobs"&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href="https://github.com/EmbarkStudios/cargo-about"&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you've created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate's Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license's requirements. If you're unsure, ask a lawyer. Once you've verified that this system is acceptable add the license's SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href="https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration"&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>uutils/coreutils</title>
      <link>https://github.com/uutils/coreutils</link>
      <description>&lt;p&gt;Cross-platform Rust rewrite of the GNU coreutils&lt;/p&gt;&lt;hr&gt;&lt;div class="oranda-hide"&gt; 
 &lt;div align="center"&gt; 
  &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/logo.svg?sanitize=true" alt="uutils logo" /&gt;&lt;/p&gt; 
  &lt;h1&gt;uutils coreutils&lt;/h1&gt; 
  &lt;p&gt;&lt;a href="https://crates.io/crates/coreutils"&gt;&lt;img src="https://img.shields.io/crates/v/coreutils.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/wQVJbvJ"&gt;&lt;img src="https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&amp;amp;longCache=true&amp;amp;style=flat" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://github.com/uutils/coreutils/raw/main/LICENSE"&gt;&lt;img src="http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://deps.rs/repo/github/uutils/coreutils"&gt;&lt;img src="https://deps.rs/repo/github/uutils/coreutils/status.svg?sanitize=true" alt="dependency status" /&gt;&lt;/a&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;a href="https://codecov.io/gh/uutils/coreutils"&gt;&lt;img src="https://codecov.io/gh/uutils/coreutils/branch/master/graph/badge.svg?sanitize=true" alt="CodeCov" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/MSRV-1.85.0-brightgreen" alt="MSRV" /&gt; &lt;a href="https://hosted.weblate.org/projects/rust-coreutils/"&gt;&lt;img src="https://hosted.weblate.org/widget/rust-coreutils/svg-badge.svg?sanitize=true" alt="Weblate" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p&gt;uutils coreutils is a cross-platform reimplementation of the GNU coreutils in &lt;a href="http://www.rust-lang.org"&gt;Rust&lt;/a&gt;. While all programs have been implemented, some options might be missing or different behavior might be experienced.&lt;/p&gt; 
&lt;div class="oranda-hide"&gt; 
 &lt;p&gt;To install it:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install coreutils
~/.cargo/bin/coreutils
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;!-- markdownlint-disable-next-line MD026 --&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;uutils coreutils aims to be a drop-in replacement for the GNU utils. Differences with GNU are treated as bugs.&lt;/p&gt; 
&lt;p&gt;Our key objectives include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Matching GNU's output (stdout and error code) exactly&lt;/li&gt; 
 &lt;li&gt;Better error messages&lt;/li&gt; 
 &lt;li&gt;Providing comprehensive internationalization support (UTF-8)&lt;/li&gt; 
 &lt;li&gt;Improved performances&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/extensions.md"&gt;Extensions&lt;/a&gt; when relevant (example: --progress)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uutils aims to work on as many platforms as possible, to be able to use the same utils on Linux, macOS, Windows and other platforms. This ensures, for example, that scripts can be easily transferred between platforms.&lt;/p&gt; 
&lt;div class="oranda-hide"&gt; 
 &lt;h2&gt;Documentation&lt;/h2&gt; 
 &lt;p&gt;uutils has both user and developer documentation available:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://uutils.github.io/coreutils/docs/"&gt;User Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://docs.rs/crate/coreutils/"&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Both can also be generated locally, the instructions for that can be found in the &lt;a href="https://github.com/uutils/uutils.github.io"&gt;coreutils docs&lt;/a&gt; repository.&lt;/p&gt; 
 &lt;p&gt;Use &lt;a href="https://hosted.weblate.org/projects/rust-coreutils/"&gt;weblate/rust-coreutils&lt;/a&gt; to translate the Rust coreutils into your language.&lt;/p&gt; 
 &lt;!-- ANCHOR: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;Requirements&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Rust (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;GNU Make (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Rust Version&lt;/h3&gt; 
 &lt;p&gt;uutils follows Rust's release channels and is tested against stable, beta and nightly. The current Minimum Supported Rust Version (MSRV) is &lt;code&gt;1.85.0&lt;/code&gt;.&lt;/p&gt; 
 &lt;h2&gt;Building&lt;/h2&gt; 
 &lt;p&gt;There are currently two methods to build the uutils binaries: either Cargo or GNU Make.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Building the full package, including all documentation, requires both Cargo and GNU Make on a Unix platform.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;For either method, we first need to fetch the repository:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/uutils/coreutils
cd coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Cargo&lt;/h3&gt; 
 &lt;p&gt;Building uutils using Cargo is easy because the process is the same as for every other Rust program:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command builds the most portable common core set of uutils into a multicall (BusyBox-type) binary, named 'coreutils', on most Rust-supported platforms.&lt;/p&gt; 
 &lt;p&gt;Additional platform-specific uutils are often available. Building these expanded sets of uutils for a platform (on that platform) is as simple as specifying it as a feature:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release --features macos
# or ...
cargo build --release --features windows
# or ...
cargo build --release --features unix
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don't want to build every utility available on your platform into the final binary, you can also specify which ones you want to build manually. For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --features "base32 cat echo rm" --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don't want to build the multicall binary and would prefer to build the utilities as individual binaries, that is also possible. Each utility is contained in its own package within the main repository, named "uu_UTILNAME". To build individual utilities, use cargo to build just the specific packages (using the &lt;code&gt;--package&lt;/code&gt; [aka &lt;code&gt;-p&lt;/code&gt;] option). For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build -p uu_base32 -p uu_cat -p uu_echo -p uu_rm
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;GNU Make&lt;/h3&gt; 
 &lt;p&gt;Building using &lt;code&gt;make&lt;/code&gt; is a simple process as well.&lt;/p&gt; 
 &lt;p&gt;To simply build all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;In release mode:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROFILE=release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make SKIP_UTILS='UTILITY_1 UTILITY_2'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make UTILS='UTILITY_1 UTILITY_2'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Installation&lt;/h2&gt; 
 &lt;h3&gt;Install with Cargo&lt;/h3&gt; 
 &lt;p&gt;Likewise, installing can simply be done using:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install --path . --locked
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command will install uutils into Cargo's &lt;em&gt;bin&lt;/em&gt; folder (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;$HOME/.cargo/bin&lt;/code&gt;).&lt;/p&gt; 
 &lt;p&gt;This does not install files necessary for shell completion or manpages. For manpages or shell completion to work, use &lt;code&gt;GNU Make&lt;/code&gt; or see &lt;code&gt;Manually install shell completions&lt;/code&gt;/&lt;code&gt;Manually install manpages&lt;/code&gt;.&lt;/p&gt; 
 &lt;h3&gt;Install with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To install all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install using &lt;code&gt;sudo&lt;/code&gt; switch &lt;code&gt;-E&lt;/code&gt; must be used:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;sudo -E make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make SKIP_UTILS='UTILITY_1 UTILITY_2' install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make UTILS='UTILITY_1 UTILITY_2' install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install every program with a prefix (e.g. uu-echo uu-cat):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROG_PREFIX=PREFIX_GOES_HERE install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make MULTICALL=y install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Set install parent directory (default value is /usr/local):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# DESTDIR is also supported
make PREFIX=/my/path install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Installing with &lt;code&gt;make&lt;/code&gt; installs shell completions for all installed utilities for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;. Completions for &lt;code&gt;elvish&lt;/code&gt; and &lt;code&gt;powershell&lt;/code&gt; can also be generated; See &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;To skip installation of completions and manpages:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make COMPLETIONS=n MANPAGES=n install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install shell completions&lt;/h3&gt; 
 &lt;p&gt;The &lt;code&gt;coreutils&lt;/code&gt; binary can generate completions for the &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;elvish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; shells. It prints the result to stdout.&lt;/p&gt; 
 &lt;p&gt;The syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run completion &amp;lt;utility&amp;gt; &amp;lt;shell&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install completions for &lt;code&gt;ls&lt;/code&gt; on &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;/usr/local/share/bash-completion/completions/ls&lt;/code&gt;, run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run completion ls bash &amp;gt; /usr/local/share/bash-completion/completions/ls
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install manpages&lt;/h3&gt; 
 &lt;p&gt;To generate manpages, the syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo run manpage &amp;lt;utility&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install the manpage for &lt;code&gt;ls&lt;/code&gt; to &lt;code&gt;/usr/local/share/man/man1/ls.1&lt;/code&gt; run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo run manpage ls &amp;gt; /usr/local/share/man/man1/ls.1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Un-installation&lt;/h2&gt; 
 &lt;p&gt;Un-installation differs depending on how you have installed uutils. If you used Cargo to install, use Cargo to uninstall. If you used GNU Make to install, use Make to uninstall.&lt;/p&gt; 
 &lt;h3&gt;Uninstall with Cargo&lt;/h3&gt; 
 &lt;p&gt;To uninstall uutils:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo uninstall coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Uninstall with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To uninstall all utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall every program with a set prefix:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROG_PREFIX=PREFIX_GOES_HERE uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make MULTICALL=y uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall from a custom parent directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# DESTDIR is also supported
make PREFIX=/my/path uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- ANCHOR_END: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;GNU test suite compatibility&lt;/h2&gt; 
 &lt;p&gt;Below is the evolution of how many GNU tests uutils passes. A more detailed breakdown of the GNU test results of the main branch can be found &lt;a href="https://uutils.github.io/coreutils/docs/test_coverage.html"&gt;in the user manual&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href="https://github.com/orgs/uutils/projects/1"&gt;https://github.com/orgs/uutils/projects/1&lt;/a&gt; for the main meta bugs (many are missing).&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://github.com/uutils/coreutils-tracking/raw/main/gnu-results.svg?raw=true" alt="Evolution over time" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- close oranda-hide div --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To contribute to uutils, please see &lt;a href="https://raw.githubusercontent.com/uutils/coreutils/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uutils is licensed under the MIT License - see the &lt;code&gt;LICENSE&lt;/code&gt; file for details&lt;/p&gt; 
&lt;p&gt;GNU Coreutils is licensed under the GPL 3.0 or later.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>